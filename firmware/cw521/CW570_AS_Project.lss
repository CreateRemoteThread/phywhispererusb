
CW570_AS_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000042c4  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000006dc  20000000  000842c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000005b4  200006dc  000849a0  000206dc  2**2
                  ALLOC
  3 .stack        00000400  20080000  20080000  00030000  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000206dc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020705  2**0
                  CONTENTS, READONLY
  6 .debug_info   00016fe5  00000000  00000000  0002075e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002fdf  00000000  00000000  00037743  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004a94  00000000  00000000  0003a722  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000009b0  00000000  00000000  0003f1b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000860  00000000  00000000  0003fb66  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000167be  00000000  00000000  000403c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e8f3  00000000  00000000  00056b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00056252  00000000  00000000  00065477  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000027a4  00000000  00000000  000bb6cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 04 08 20 d5 22 08 00 55 30 08 00 55 30 08 00     ... ."..U0..U0..
   80010:	55 30 08 00 55 30 08 00 55 30 08 00 00 00 00 00     U0..U0..U0......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 55 30 08 00     ............U0..
   80030:	55 30 08 00 00 00 00 00 55 30 08 00 55 30 08 00     U0......U0..U0..
   80040:	55 30 08 00 55 30 08 00 55 30 08 00 55 30 08 00     U0..U0..U0..U0..
   80050:	55 30 08 00 55 30 08 00 55 30 08 00 55 30 08 00     U0..U0..U0..U0..
   80060:	55 30 08 00 55 30 08 00 fd 07 08 00 15 08 08 00     U0..U0..........
   80070:	55 30 08 00 55 30 08 00 55 30 08 00 55 30 08 00     U0..U0..U0..U0..
   80080:	55 30 08 00 55 30 08 00 55 30 08 00 55 30 08 00     U0..U0..U0..U0..
   80090:	55 30 08 00 55 30 08 00 55 30 08 00 55 30 08 00     U0..U0..U0..U0..
   800a0:	55 30 08 00 55 30 08 00 55 30 08 00 55 30 08 00     U0..U0..U0..U0..
   800b0:	55 30 08 00 7d 09 08 00 55 30 08 00                 U0..}...U0..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	200006dc 	.word	0x200006dc
   800d8:	00000000 	.word	0x00000000
   800dc:	000842c4 	.word	0x000842c4

000800e0 <frame_dummy>:
   800e0:	4b0c      	ldr	r3, [pc, #48]	; (80114 <frame_dummy+0x34>)
   800e2:	b143      	cbz	r3, 800f6 <frame_dummy+0x16>
   800e4:	480c      	ldr	r0, [pc, #48]	; (80118 <frame_dummy+0x38>)
   800e6:	b510      	push	{r4, lr}
   800e8:	490c      	ldr	r1, [pc, #48]	; (8011c <frame_dummy+0x3c>)
   800ea:	f3af 8000 	nop.w
   800ee:	480c      	ldr	r0, [pc, #48]	; (80120 <frame_dummy+0x40>)
   800f0:	6803      	ldr	r3, [r0, #0]
   800f2:	b923      	cbnz	r3, 800fe <frame_dummy+0x1e>
   800f4:	bd10      	pop	{r4, pc}
   800f6:	480a      	ldr	r0, [pc, #40]	; (80120 <frame_dummy+0x40>)
   800f8:	6803      	ldr	r3, [r0, #0]
   800fa:	b933      	cbnz	r3, 8010a <frame_dummy+0x2a>
   800fc:	4770      	bx	lr
   800fe:	4b09      	ldr	r3, [pc, #36]	; (80124 <frame_dummy+0x44>)
   80100:	2b00      	cmp	r3, #0
   80102:	d0f7      	beq.n	800f4 <frame_dummy+0x14>
   80104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80108:	4718      	bx	r3
   8010a:	4b06      	ldr	r3, [pc, #24]	; (80124 <frame_dummy+0x44>)
   8010c:	2b00      	cmp	r3, #0
   8010e:	d0f5      	beq.n	800fc <frame_dummy+0x1c>
   80110:	4718      	bx	r3
   80112:	bf00      	nop
   80114:	00000000 	.word	0x00000000
   80118:	000842c4 	.word	0x000842c4
   8011c:	200006e0 	.word	0x200006e0
   80120:	000842c4 	.word	0x000842c4
   80124:	00000000 	.word	0x00000000

00080128 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
   80128:	b480      	push	{r7}
   8012a:	b083      	sub	sp, #12
   8012c:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   8012e:	2300      	movs	r3, #0
   80130:	71fb      	strb	r3, [r7, #7]
   80132:	e006      	b.n	80142 <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
   80134:	79fb      	ldrb	r3, [r7, #7]
   80136:	4a08      	ldr	r2, [pc, #32]	; (80158 <sleepmgr_init+0x30>)
   80138:	2100      	movs	r1, #0
   8013a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   8013c:	79fb      	ldrb	r3, [r7, #7]
   8013e:	3301      	adds	r3, #1
   80140:	71fb      	strb	r3, [r7, #7]
   80142:	79fb      	ldrb	r3, [r7, #7]
   80144:	2b04      	cmp	r3, #4
   80146:	d9f5      	bls.n	80134 <sleepmgr_init+0xc>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   80148:	4b03      	ldr	r3, [pc, #12]	; (80158 <sleepmgr_init+0x30>)
   8014a:	2201      	movs	r2, #1
   8014c:	715a      	strb	r2, [r3, #5]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   8014e:	bf00      	nop
   80150:	370c      	adds	r7, #12
   80152:	46bd      	mov	sp, r7
   80154:	bc80      	pop	{r7}
   80156:	4770      	bx	lr
   80158:	20000c64 	.word	0x20000c64

0008015c <main>:

//Serial Number - will be read by device ID
char usb_serial_number[33] = "000000000000DEADBEEF";

int main(void)
{
   8015c:	b580      	push	{r7, lr}
   8015e:	af00      	add	r7, sp, #0
     // Initialize the sleep manager
     sleepmgr_init();
   80160:	4b06      	ldr	r3, [pc, #24]	; (8017c <main+0x20>)
   80162:	4798      	blx	r3
#if !SAMD21 && !SAMR21
     sysclk_init();
   80164:	4b06      	ldr	r3, [pc, #24]	; (80180 <main+0x24>)
   80166:	4798      	blx	r3
     board_init();
   80168:	4b06      	ldr	r3, [pc, #24]	; (80184 <main+0x28>)
   8016a:	4798      	blx	r3
#else
     system_init();
#endif

     //LEDS ON
     gpio_set_pin_high(LED0_GPIO);
   8016c:	201d      	movs	r0, #29
   8016e:	4b06      	ldr	r3, [pc, #24]	; (80188 <main+0x2c>)
   80170:	4798      	blx	r3
     gpio_set_pin_low(LED1_GPIO);
   80172:	201f      	movs	r0, #31
   80174:	4b05      	ldr	r3, [pc, #20]	; (8018c <main+0x30>)
   80176:	4798      	blx	r3
     /* LED_Off(LED1_GPIO); */
     /* LED_On(LED0_GPIO); */

     while(1);
   80178:	e7fe      	b.n	80178 <main+0x1c>
   8017a:	bf00      	nop
   8017c:	00080129 	.word	0x00080129
   80180:	00082681 	.word	0x00082681
   80184:	00083ea1 	.word	0x00083ea1
   80188:	00082db5 	.word	0x00082db5
   8018c:	00082de5 	.word	0x00082de5

00080190 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   80190:	b580      	push	{r7, lr}
   80192:	b082      	sub	sp, #8
   80194:	af00      	add	r7, sp, #0
   80196:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80198:	687b      	ldr	r3, [r7, #4]
   8019a:	2b07      	cmp	r3, #7
   8019c:	d82e      	bhi.n	801fc <osc_enable+0x6c>
   8019e:	a201      	add	r2, pc, #4	; (adr r2, 801a4 <osc_enable+0x14>)
   801a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   801a4:	000801fb 	.word	0x000801fb
   801a8:	000801c5 	.word	0x000801c5
   801ac:	000801cd 	.word	0x000801cd
   801b0:	000801d5 	.word	0x000801d5
   801b4:	000801dd 	.word	0x000801dd
   801b8:	000801e5 	.word	0x000801e5
   801bc:	000801ed 	.word	0x000801ed
   801c0:	000801f5 	.word	0x000801f5
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   801c4:	2000      	movs	r0, #0
   801c6:	4b0f      	ldr	r3, [pc, #60]	; (80204 <osc_enable+0x74>)
   801c8:	4798      	blx	r3
		break;
   801ca:	e017      	b.n	801fc <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   801cc:	2001      	movs	r0, #1
   801ce:	4b0d      	ldr	r3, [pc, #52]	; (80204 <osc_enable+0x74>)
   801d0:	4798      	blx	r3
		break;
   801d2:	e013      	b.n	801fc <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   801d4:	2000      	movs	r0, #0
   801d6:	4b0c      	ldr	r3, [pc, #48]	; (80208 <osc_enable+0x78>)
   801d8:	4798      	blx	r3
		break;
   801da:	e00f      	b.n	801fc <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   801dc:	2010      	movs	r0, #16
   801de:	4b0a      	ldr	r3, [pc, #40]	; (80208 <osc_enable+0x78>)
   801e0:	4798      	blx	r3
		break;
   801e2:	e00b      	b.n	801fc <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   801e4:	2020      	movs	r0, #32
   801e6:	4b08      	ldr	r3, [pc, #32]	; (80208 <osc_enable+0x78>)
   801e8:	4798      	blx	r3
		break;
   801ea:	e007      	b.n	801fc <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   801ec:	203e      	movs	r0, #62	; 0x3e
   801ee:	4b07      	ldr	r3, [pc, #28]	; (8020c <osc_enable+0x7c>)
   801f0:	4798      	blx	r3
				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
		break;
   801f2:	e003      	b.n	801fc <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_osc_bypass_main_xtal();
   801f4:	4b06      	ldr	r3, [pc, #24]	; (80210 <osc_enable+0x80>)
   801f6:	4798      	blx	r3
		break;
   801f8:	e000      	b.n	801fc <osc_enable+0x6c>
		break;
   801fa:	bf00      	nop
	}
}
   801fc:	bf00      	nop
   801fe:	3708      	adds	r7, #8
   80200:	46bd      	mov	sp, r7
   80202:	bd80      	pop	{r7, pc}
   80204:	0008280d 	.word	0x0008280d
   80208:	00082879 	.word	0x00082879
   8020c:	000828ed 	.word	0x000828ed
   80210:	00082939 	.word	0x00082939

00080214 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   80214:	b580      	push	{r7, lr}
   80216:	b082      	sub	sp, #8
   80218:	af00      	add	r7, sp, #0
   8021a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8021c:	687b      	ldr	r3, [r7, #4]
   8021e:	2b07      	cmp	r3, #7
   80220:	d82f      	bhi.n	80282 <osc_is_ready+0x6e>
   80222:	a201      	add	r2, pc, #4	; (adr r2, 80228 <osc_is_ready+0x14>)
   80224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80228:	00080249 	.word	0x00080249
   8022c:	0008024d 	.word	0x0008024d
   80230:	0008024d 	.word	0x0008024d
   80234:	0008025f 	.word	0x0008025f
   80238:	0008025f 	.word	0x0008025f
   8023c:	0008025f 	.word	0x0008025f
   80240:	00080271 	.word	0x00080271
   80244:	00080271 	.word	0x00080271
	case OSC_SLCK_32K_RC:
		return 1;
   80248:	2301      	movs	r3, #1
   8024a:	e01b      	b.n	80284 <osc_is_ready+0x70>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   8024c:	4b0f      	ldr	r3, [pc, #60]	; (8028c <osc_is_ready+0x78>)
   8024e:	4798      	blx	r3
   80250:	4603      	mov	r3, r0
   80252:	2b00      	cmp	r3, #0
   80254:	bf14      	ite	ne
   80256:	2301      	movne	r3, #1
   80258:	2300      	moveq	r3, #0
   8025a:	b2db      	uxtb	r3, r3
   8025c:	e012      	b.n	80284 <osc_is_ready+0x70>

	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();
   8025e:	4b0c      	ldr	r3, [pc, #48]	; (80290 <osc_is_ready+0x7c>)
   80260:	4798      	blx	r3
   80262:	4603      	mov	r3, r0
   80264:	2b00      	cmp	r3, #0
   80266:	bf14      	ite	ne
   80268:	2301      	movne	r3, #1
   8026a:	2300      	moveq	r3, #0
   8026c:	b2db      	uxtb	r3, r3
   8026e:	e009      	b.n	80284 <osc_is_ready+0x70>

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   80270:	4b08      	ldr	r3, [pc, #32]	; (80294 <osc_is_ready+0x80>)
   80272:	4798      	blx	r3
   80274:	4603      	mov	r3, r0
   80276:	2b00      	cmp	r3, #0
   80278:	bf14      	ite	ne
   8027a:	2301      	movne	r3, #1
   8027c:	2300      	moveq	r3, #0
   8027e:	b2db      	uxtb	r3, r3
   80280:	e000      	b.n	80284 <osc_is_ready+0x70>
	}

	return 0;
   80282:	2300      	movs	r3, #0
}
   80284:	4618      	mov	r0, r3
   80286:	3708      	adds	r7, #8
   80288:	46bd      	mov	sp, r7
   8028a:	bd80      	pop	{r7, pc}
   8028c:	00082845 	.word	0x00082845
   80290:	000828d5 	.word	0x000828d5
   80294:	0008296d 	.word	0x0008296d

00080298 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   80298:	b580      	push	{r7, lr}
   8029a:	b082      	sub	sp, #8
   8029c:	af00      	add	r7, sp, #0
   8029e:	4603      	mov	r3, r0
   802a0:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   802a2:	bf00      	nop
   802a4:	79fb      	ldrb	r3, [r7, #7]
   802a6:	4618      	mov	r0, r3
   802a8:	4b05      	ldr	r3, [pc, #20]	; (802c0 <osc_wait_ready+0x28>)
   802aa:	4798      	blx	r3
   802ac:	4603      	mov	r3, r0
   802ae:	f083 0301 	eor.w	r3, r3, #1
   802b2:	b2db      	uxtb	r3, r3
   802b4:	2b00      	cmp	r3, #0
   802b6:	d1f5      	bne.n	802a4 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   802b8:	bf00      	nop
   802ba:	3708      	adds	r7, #8
   802bc:	46bd      	mov	sp, r7
   802be:	bd80      	pop	{r7, pc}
   802c0:	00080215 	.word	0x00080215

000802c4 <main_suspend_action>:
    iram_size_t nb_transfered, udd_ep_id_t ep);
void main_vendor_bulk_out_received(udd_ep_status_t status,
    iram_size_t nb_transfered, udd_ep_id_t ep);

void main_suspend_action(void)
{
   802c4:	b580      	push	{r7, lr}
   802c6:	af00      	add	r7, sp, #0
  ui_powerdown();
   802c8:	4b01      	ldr	r3, [pc, #4]	; (802d0 <main_suspend_action+0xc>)
   802ca:	4798      	blx	r3
}
   802cc:	bf00      	nop
   802ce:	bd80      	pop	{r7, pc}
   802d0:	00084045 	.word	0x00084045

000802d4 <main_resume_action>:

void main_resume_action(void)
{
   802d4:	b580      	push	{r7, lr}
   802d6:	af00      	add	r7, sp, #0
  ui_wakeup();
   802d8:	4b01      	ldr	r3, [pc, #4]	; (802e0 <main_resume_action+0xc>)
   802da:	4798      	blx	r3
}
   802dc:	bf00      	nop
   802de:	bd80      	pop	{r7, pc}
   802e0:	0008405d 	.word	0x0008405d

000802e4 <main_sof_action>:

void main_sof_action(void)
{
   802e4:	b580      	push	{r7, lr}
   802e6:	af00      	add	r7, sp, #0
  if (!main_b_vendor_enable)
   802e8:	4b08      	ldr	r3, [pc, #32]	; (8030c <main_sof_action+0x28>)
   802ea:	781b      	ldrb	r3, [r3, #0]
   802ec:	b2db      	uxtb	r3, r3
   802ee:	f083 0301 	eor.w	r3, r3, #1
   802f2:	b2db      	uxtb	r3, r3
   802f4:	2b00      	cmp	r3, #0
   802f6:	d106      	bne.n	80306 <main_sof_action+0x22>
    return;
  ui_process(udd_get_frame_number());
   802f8:	4b05      	ldr	r3, [pc, #20]	; (80310 <main_sof_action+0x2c>)
   802fa:	4798      	blx	r3
   802fc:	4603      	mov	r3, r0
   802fe:	4618      	mov	r0, r3
   80300:	4b04      	ldr	r3, [pc, #16]	; (80314 <main_sof_action+0x30>)
   80302:	4798      	blx	r3
   80304:	e000      	b.n	80308 <main_sof_action+0x24>
    return;
   80306:	bf00      	nop
}
   80308:	bd80      	pop	{r7, pc}
   8030a:	bf00      	nop
   8030c:	20000191 	.word	0x20000191
   80310:	00080bc1 	.word	0x00080bc1
   80314:	00084071 	.word	0x00084071

00080318 <main_vendor_enable>:

bool main_vendor_enable(void)
{
   80318:	b580      	push	{r7, lr}
   8031a:	af00      	add	r7, sp, #0
  main_b_vendor_enable = true;
   8031c:	4b05      	ldr	r3, [pc, #20]	; (80334 <main_vendor_enable+0x1c>)
   8031e:	2201      	movs	r2, #1
   80320:	701a      	strb	r2, [r3, #0]
  // Start data reception on OUT endpoints
#if UDI_VENDOR_EPS_SIZE_BULK_FS
  //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
  udi_vendor_bulk_out_run(
   80322:	4a05      	ldr	r2, [pc, #20]	; (80338 <main_vendor_enable+0x20>)
   80324:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80328:	4804      	ldr	r0, [pc, #16]	; (8033c <main_vendor_enable+0x24>)
   8032a:	4b05      	ldr	r3, [pc, #20]	; (80340 <main_vendor_enable+0x28>)
   8032c:	4798      	blx	r3
    main_buf_loopback,
    sizeof(main_buf_loopback),
    main_vendor_bulk_out_received);
#endif
  return true;
   8032e:	2301      	movs	r3, #1
}
   80330:	4618      	mov	r0, r3
   80332:	bd80      	pop	{r7, pc}
   80334:	20000191 	.word	0x20000191
   80338:	00080675 	.word	0x00080675
   8033c:	200006f8 	.word	0x200006f8
   80340:	00082bb5 	.word	0x00082bb5

00080344 <main_vendor_disable>:

void main_vendor_disable(void)
{
   80344:	b480      	push	{r7}
   80346:	af00      	add	r7, sp, #0
  main_b_vendor_enable = false;
   80348:	4b03      	ldr	r3, [pc, #12]	; (80358 <main_vendor_disable+0x14>)
   8034a:	2200      	movs	r2, #0
   8034c:	701a      	strb	r2, [r3, #0]
}
   8034e:	bf00      	nop
   80350:	46bd      	mov	sp, r7
   80352:	bc80      	pop	{r7}
   80354:	4770      	bx	lr
   80356:	bf00      	nop
   80358:	20000191 	.word	0x20000191

0008035c <ctrl_readmem_bulk>:
void ctrl_writemem_bulk(void);
void ctrl_writemem_ctrl(void);
void ctrl_progfpga_bulk(void);


void ctrl_readmem_bulk(void){
   8035c:	b580      	push	{r7, lr}
   8035e:	b082      	sub	sp, #8
   80360:	af00      	add	r7, sp, #0
  uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80362:	4b0a      	ldr	r3, [pc, #40]	; (8038c <ctrl_readmem_bulk+0x30>)
   80364:	681b      	ldr	r3, [r3, #0]
   80366:	607b      	str	r3, [r7, #4]
  uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80368:	4b08      	ldr	r3, [pc, #32]	; (8038c <ctrl_readmem_bulk+0x30>)
   8036a:	685b      	ldr	r3, [r3, #4]
   8036c:	603b      	str	r3, [r7, #0]

  FPGA_setlock(fpga_blockin);
   8036e:	2002      	movs	r0, #2
   80370:	4b07      	ldr	r3, [pc, #28]	; (80390 <ctrl_readmem_bulk+0x34>)
   80372:	4798      	blx	r3


  /* Do memory read */
  udi_vendor_bulk_in_run(
   80374:	683b      	ldr	r3, [r7, #0]
   80376:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   8037a:	4a06      	ldr	r2, [pc, #24]	; (80394 <ctrl_readmem_bulk+0x38>)
   8037c:	6879      	ldr	r1, [r7, #4]
   8037e:	4618      	mov	r0, r3
   80380:	4b05      	ldr	r3, [pc, #20]	; (80398 <ctrl_readmem_bulk+0x3c>)
   80382:	4798      	blx	r3
  (uint8_t *) PSRAM_BASE_ADDRESS + address,
  buflen,
  main_vendor_bulk_in_received
  );
}
   80384:	bf00      	nop
   80386:	3708      	adds	r7, #8
   80388:	46bd      	mov	sp, r7
   8038a:	bd80      	pop	{r7, pc}
   8038c:	20000af8 	.word	0x20000af8
   80390:	00080711 	.word	0x00080711
   80394:	0008063d 	.word	0x0008063d
   80398:	00082b89 	.word	0x00082b89

0008039c <ctrl_readmem_ctrl>:

void ctrl_readmem_ctrl(void){
   8039c:	b580      	push	{r7, lr}
   8039e:	b082      	sub	sp, #8
   803a0:	af00      	add	r7, sp, #0
  uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   803a2:	4b0a      	ldr	r3, [pc, #40]	; (803cc <ctrl_readmem_ctrl+0x30>)
   803a4:	681b      	ldr	r3, [r3, #0]
   803a6:	607b      	str	r3, [r7, #4]
  uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   803a8:	4b08      	ldr	r3, [pc, #32]	; (803cc <ctrl_readmem_ctrl+0x30>)
   803aa:	685b      	ldr	r3, [r3, #4]
   803ac:	603b      	str	r3, [r7, #0]

  FPGA_setlock(fpga_ctrlmem);
   803ae:	2004      	movs	r0, #4
   803b0:	4b07      	ldr	r3, [pc, #28]	; (803d0 <ctrl_readmem_ctrl+0x34>)
   803b2:	4798      	blx	r3

  /* Do memory read */
  ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS + address;
   803b4:	683b      	ldr	r3, [r7, #0]
   803b6:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   803ba:	4a06      	ldr	r2, [pc, #24]	; (803d4 <ctrl_readmem_ctrl+0x38>)
   803bc:	6013      	str	r3, [r2, #0]

  /* Set size to read */
  ctrlmemread_size = buflen;
   803be:	4a06      	ldr	r2, [pc, #24]	; (803d8 <ctrl_readmem_ctrl+0x3c>)
   803c0:	687b      	ldr	r3, [r7, #4]
   803c2:	6013      	str	r3, [r2, #0]

  /* Start Transaction */
}
   803c4:	bf00      	nop
   803c6:	3708      	adds	r7, #8
   803c8:	46bd      	mov	sp, r7
   803ca:	bd80      	pop	{r7, pc}
   803cc:	20000af8 	.word	0x20000af8
   803d0:	00080711 	.word	0x00080711
   803d4:	20000b3c 	.word	0x20000b3c
   803d8:	20000b40 	.word	0x20000b40

000803dc <ctrl_writemem_ctrl>:

void ctrl_writemem_ctrl(void){
   803dc:	b580      	push	{r7, lr}
   803de:	b084      	sub	sp, #16
   803e0:	af00      	add	r7, sp, #0
  uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   803e2:	4b15      	ldr	r3, [pc, #84]	; (80438 <ctrl_writemem_ctrl+0x5c>)
   803e4:	681b      	ldr	r3, [r3, #0]
   803e6:	60bb      	str	r3, [r7, #8]
  uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   803e8:	4b13      	ldr	r3, [pc, #76]	; (80438 <ctrl_writemem_ctrl+0x5c>)
   803ea:	685b      	ldr	r3, [r3, #4]
   803ec:	607b      	str	r3, [r7, #4]

  uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
   803ee:	4b13      	ldr	r3, [pc, #76]	; (8043c <ctrl_writemem_ctrl+0x60>)
   803f0:	603b      	str	r3, [r7, #0]

  //printf("Writing to %x, %d\n", address, buflen);

  FPGA_setlock(fpga_generic);
   803f2:	2001      	movs	r0, #1
   803f4:	4b12      	ldr	r3, [pc, #72]	; (80440 <ctrl_writemem_ctrl+0x64>)
   803f6:	4798      	blx	r3

  /* Start Transaction */
  LED_On(LED1_GPIO);
   803f8:	201f      	movs	r0, #31
   803fa:	4b12      	ldr	r3, [pc, #72]	; (80444 <ctrl_writemem_ctrl+0x68>)
   803fc:	4798      	blx	r3

  /* Do memory write */
  for(unsigned int i = 0; i < buflen; i++){
   803fe:	2300      	movs	r3, #0
   80400:	60fb      	str	r3, [r7, #12]
   80402:	e00d      	b.n	80420 <ctrl_writemem_ctrl+0x44>
    xram[i+address] = ctrlbuf_payload[i];
   80404:	4b10      	ldr	r3, [pc, #64]	; (80448 <ctrl_writemem_ctrl+0x6c>)
   80406:	681a      	ldr	r2, [r3, #0]
   80408:	68f9      	ldr	r1, [r7, #12]
   8040a:	687b      	ldr	r3, [r7, #4]
   8040c:	440b      	add	r3, r1
   8040e:	4413      	add	r3, r2
   80410:	6839      	ldr	r1, [r7, #0]
   80412:	68fa      	ldr	r2, [r7, #12]
   80414:	440a      	add	r2, r1
   80416:	7812      	ldrb	r2, [r2, #0]
   80418:	701a      	strb	r2, [r3, #0]
  for(unsigned int i = 0; i < buflen; i++){
   8041a:	68fb      	ldr	r3, [r7, #12]
   8041c:	3301      	adds	r3, #1
   8041e:	60fb      	str	r3, [r7, #12]
   80420:	68fa      	ldr	r2, [r7, #12]
   80422:	68bb      	ldr	r3, [r7, #8]
   80424:	429a      	cmp	r2, r3
   80426:	d3ed      	bcc.n	80404 <ctrl_writemem_ctrl+0x28>
  }

  FPGA_setlock(fpga_unlocked);
   80428:	2000      	movs	r0, #0
   8042a:	4b05      	ldr	r3, [pc, #20]	; (80440 <ctrl_writemem_ctrl+0x64>)
   8042c:	4798      	blx	r3
}
   8042e:	bf00      	nop
   80430:	3710      	adds	r7, #16
   80432:	46bd      	mov	sp, r7
   80434:	bd80      	pop	{r7, pc}
   80436:	bf00      	nop
   80438:	20000af8 	.word	0x20000af8
   8043c:	20000b00 	.word	0x20000b00
   80440:	00080711 	.word	0x00080711
   80444:	0008227d 	.word	0x0008227d
   80448:	20000194 	.word	0x20000194

0008044c <ctrl_writemem_bulk>:

static uint32_t bulkread_address = 0;
static uint32_t bulkread_len = 0;

void ctrl_writemem_bulk(void){
   8044c:	b580      	push	{r7, lr}
   8044e:	b082      	sub	sp, #8
   80450:	af00      	add	r7, sp, #0
  uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80452:	4b0b      	ldr	r3, [pc, #44]	; (80480 <ctrl_writemem_bulk+0x34>)
   80454:	681b      	ldr	r3, [r3, #0]
   80456:	607b      	str	r3, [r7, #4]
  uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80458:	4b09      	ldr	r3, [pc, #36]	; (80480 <ctrl_writemem_bulk+0x34>)
   8045a:	685b      	ldr	r3, [r3, #4]
   8045c:	603b      	str	r3, [r7, #0]

  FPGA_setlock(fpga_blockout);
   8045e:	2003      	movs	r0, #3
   80460:	4b08      	ldr	r3, [pc, #32]	; (80484 <ctrl_writemem_bulk+0x38>)
   80462:	4798      	blx	r3

  /* Set address */
  bulkread_address = address;
   80464:	4a08      	ldr	r2, [pc, #32]	; (80488 <ctrl_writemem_bulk+0x3c>)
   80466:	683b      	ldr	r3, [r7, #0]
   80468:	6013      	str	r3, [r2, #0]
  bulkread_len = buflen;
   8046a:	4a08      	ldr	r2, [pc, #32]	; (8048c <ctrl_writemem_bulk+0x40>)
   8046c:	687b      	ldr	r3, [r7, #4]
   8046e:	6013      	str	r3, [r2, #0]
  //FPGA_setaddr(address);

  /* Transaction done in generic callback */
  LED_On(LED1_GPIO);
   80470:	201f      	movs	r0, #31
   80472:	4b07      	ldr	r3, [pc, #28]	; (80490 <ctrl_writemem_bulk+0x44>)
   80474:	4798      	blx	r3
}
   80476:	bf00      	nop
   80478:	3708      	adds	r7, #8
   8047a:	46bd      	mov	sp, r7
   8047c:	bd80      	pop	{r7, pc}
   8047e:	bf00      	nop
   80480:	20000af8 	.word	0x20000af8
   80484:	00080711 	.word	0x00080711
   80488:	20000b44 	.word	0x20000b44
   8048c:	20000b48 	.word	0x20000b48
   80490:	0008227d 	.word	0x0008227d

00080494 <ctrl_sam3ucfg_cb>:

static void ctrl_sam3ucfg_cb(void)
{
   80494:	b580      	push	{r7, lr}
   80496:	af00      	add	r7, sp, #0
  switch(udd_g_ctrlreq.req.wValue & 0xFF)
   80498:	4b0d      	ldr	r3, [pc, #52]	; (804d0 <ctrl_sam3ucfg_cb+0x3c>)
   8049a:	885b      	ldrh	r3, [r3, #2]
   8049c:	b2db      	uxtb	r3, r3
   8049e:	2b02      	cmp	r3, #2
   804a0:	d00e      	beq.n	804c0 <ctrl_sam3ucfg_cb+0x2c>
   804a2:	2b03      	cmp	r3, #3
   804a4:	d010      	beq.n	804c8 <ctrl_sam3ucfg_cb+0x34>
   804a6:	2b01      	cmp	r3, #1
   804a8:	d000      	beq.n	804ac <ctrl_sam3ucfg_cb+0x18>
      /* Make the jump */
      break;

    /* Oh well, sucks to be you */
    default:
      break;
   804aa:	e00e      	b.n	804ca <ctrl_sam3ucfg_cb+0x36>
      osc_enable(OSC_MAINCK_XTAL);
   804ac:	2006      	movs	r0, #6
   804ae:	4b09      	ldr	r3, [pc, #36]	; (804d4 <ctrl_sam3ucfg_cb+0x40>)
   804b0:	4798      	blx	r3
      osc_wait_ready(OSC_MAINCK_XTAL);
   804b2:	2006      	movs	r0, #6
   804b4:	4b08      	ldr	r3, [pc, #32]	; (804d8 <ctrl_sam3ucfg_cb+0x44>)
   804b6:	4798      	blx	r3
      pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   804b8:	2010      	movs	r0, #16
   804ba:	4b08      	ldr	r3, [pc, #32]	; (804dc <ctrl_sam3ucfg_cb+0x48>)
   804bc:	4798      	blx	r3
      break;
   804be:	e004      	b.n	804ca <ctrl_sam3ucfg_cb+0x36>
      pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   804c0:	2010      	movs	r0, #16
   804c2:	4b07      	ldr	r3, [pc, #28]	; (804e0 <ctrl_sam3ucfg_cb+0x4c>)
   804c4:	4798      	blx	r3
      break;
   804c6:	e000      	b.n	804ca <ctrl_sam3ucfg_cb+0x36>
      break;
   804c8:	bf00      	nop
  }
}
   804ca:	bf00      	nop
   804cc:	bd80      	pop	{r7, pc}
   804ce:	bf00      	nop
   804d0:	20000c4c 	.word	0x20000c4c
   804d4:	00080191 	.word	0x00080191
   804d8:	00080299 	.word	0x00080299
   804dc:	0008270d 	.word	0x0008270d
   804e0:	0008278d 	.word	0x0008278d

000804e4 <main_setup_out_received>:

bool main_setup_out_received(void)
{
   804e4:	b480      	push	{r7}
   804e6:	af00      	add	r7, sp, #0
  //Add buffer if used
  udd_g_ctrlreq.payload = ctrlbuffer;
   804e8:	4b2c      	ldr	r3, [pc, #176]	; (8059c <main_setup_out_received+0xb8>)
   804ea:	4a2d      	ldr	r2, [pc, #180]	; (805a0 <main_setup_out_received+0xbc>)
   804ec:	609a      	str	r2, [r3, #8]
  udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   804ee:	4b2b      	ldr	r3, [pc, #172]	; (8059c <main_setup_out_received+0xb8>)
   804f0:	88db      	ldrh	r3, [r3, #6]
   804f2:	2b40      	cmp	r3, #64	; 0x40
   804f4:	bf28      	it	cs
   804f6:	2340      	movcs	r3, #64	; 0x40
   804f8:	b29a      	uxth	r2, r3
   804fa:	4b28      	ldr	r3, [pc, #160]	; (8059c <main_setup_out_received+0xb8>)
   804fc:	819a      	strh	r2, [r3, #12]

  blockendpoint_usage = bep_emem;
   804fe:	4b29      	ldr	r3, [pc, #164]	; (805a4 <main_setup_out_received+0xc0>)
   80500:	2200      	movs	r2, #0
   80502:	701a      	strb	r2, [r3, #0]

  switch(udd_g_ctrlreq.req.bRequest){
   80504:	4b25      	ldr	r3, [pc, #148]	; (8059c <main_setup_out_received+0xb8>)
   80506:	785b      	ldrb	r3, [r3, #1]
   80508:	3b10      	subs	r3, #16
   8050a:	2b12      	cmp	r3, #18
   8050c:	d841      	bhi.n	80592 <main_setup_out_received+0xae>
   8050e:	a201      	add	r2, pc, #4	; (adr r2, 80514 <main_setup_out_received+0x30>)
   80510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80514:	00080561 	.word	0x00080561
   80518:	00080575 	.word	0x00080575
   8051c:	0008056b 	.word	0x0008056b
   80520:	0008057f 	.word	0x0008057f
   80524:	00080593 	.word	0x00080593
   80528:	00080593 	.word	0x00080593
   8052c:	00080593 	.word	0x00080593
   80530:	00080593 	.word	0x00080593
   80534:	00080593 	.word	0x00080593
   80538:	00080593 	.word	0x00080593
   8053c:	00080593 	.word	0x00080593
   80540:	00080593 	.word	0x00080593
   80544:	00080593 	.word	0x00080593
   80548:	00080593 	.word	0x00080593
   8054c:	00080593 	.word	0x00080593
   80550:	00080593 	.word	0x00080593
   80554:	00080593 	.word	0x00080593
   80558:	00080593 	.word	0x00080593
   8055c:	00080589 	.word	0x00080589
    /* Memory Read */
    case REQ_MEMREAD_BULK:
      udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   80560:	4b0e      	ldr	r3, [pc, #56]	; (8059c <main_setup_out_received+0xb8>)
   80562:	4a11      	ldr	r2, [pc, #68]	; (805a8 <main_setup_out_received+0xc4>)
   80564:	611a      	str	r2, [r3, #16]
      return true;
   80566:	2301      	movs	r3, #1
   80568:	e014      	b.n	80594 <main_setup_out_received+0xb0>
    case REQ_MEMREAD_CTRL:
      udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   8056a:	4b0c      	ldr	r3, [pc, #48]	; (8059c <main_setup_out_received+0xb8>)
   8056c:	4a0f      	ldr	r2, [pc, #60]	; (805ac <main_setup_out_received+0xc8>)
   8056e:	611a      	str	r2, [r3, #16]
      return true;
   80570:	2301      	movs	r3, #1
   80572:	e00f      	b.n	80594 <main_setup_out_received+0xb0>

    /* Memory Write */
    case REQ_MEMWRITE_BULK:
      udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   80574:	4b09      	ldr	r3, [pc, #36]	; (8059c <main_setup_out_received+0xb8>)
   80576:	4a0e      	ldr	r2, [pc, #56]	; (805b0 <main_setup_out_received+0xcc>)
   80578:	611a      	str	r2, [r3, #16]
      return true;
   8057a:	2301      	movs	r3, #1
   8057c:	e00a      	b.n	80594 <main_setup_out_received+0xb0>

    case REQ_MEMWRITE_CTRL:
      udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   8057e:	4b07      	ldr	r3, [pc, #28]	; (8059c <main_setup_out_received+0xb8>)
   80580:	4a0c      	ldr	r2, [pc, #48]	; (805b4 <main_setup_out_received+0xd0>)
   80582:	611a      	str	r2, [r3, #16]
      return true;
   80584:	2301      	movs	r3, #1
   80586:	e005      	b.n	80594 <main_setup_out_received+0xb0>


    /* Misc hardware setup */
    case REQ_SAM3U_CFG:
      udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
   80588:	4b04      	ldr	r3, [pc, #16]	; (8059c <main_setup_out_received+0xb8>)
   8058a:	4a0b      	ldr	r2, [pc, #44]	; (805b8 <main_setup_out_received+0xd4>)
   8058c:	611a      	str	r2, [r3, #16]
      return true;
   8058e:	2301      	movs	r3, #1
   80590:	e000      	b.n	80594 <main_setup_out_received+0xb0>


    default:
      return false;
   80592:	2300      	movs	r3, #0
  }
}
   80594:	4618      	mov	r0, r3
   80596:	46bd      	mov	sp, r7
   80598:	bc80      	pop	{r7}
   8059a:	4770      	bx	lr
   8059c:	20000c4c 	.word	0x20000c4c
   805a0:	20000af8 	.word	0x20000af8
   805a4:	20000b38 	.word	0x20000b38
   805a8:	0008035d 	.word	0x0008035d
   805ac:	0008039d 	.word	0x0008039d
   805b0:	0008044d 	.word	0x0008044d
   805b4:	000803dd 	.word	0x000803dd
   805b8:	00080495 	.word	0x00080495

000805bc <main_setup_in_received>:
&& (udd_g_ctrlreq.req.bRequest == 0)
&& (0 != udd_g_ctrlreq.req.wLength)
*/

bool main_setup_in_received(void)
{
   805bc:	b580      	push	{r7, lr}
   805be:	af00      	add	r7, sp, #0
  */

  static uint8_t  respbuf[64];
  unsigned int cnt;

  switch(udd_g_ctrlreq.req.bRequest){
   805c0:	4b18      	ldr	r3, [pc, #96]	; (80624 <main_setup_in_received+0x68>)
   805c2:	785b      	ldrb	r3, [r3, #1]
   805c4:	2b12      	cmp	r3, #18
   805c6:	d002      	beq.n	805ce <main_setup_in_received+0x12>
   805c8:	2b17      	cmp	r3, #23
   805ca:	d016      	beq.n	805fa <main_setup_in_received+0x3e>
   805cc:	e026      	b.n	8061c <main_setup_in_received+0x60>
    case REQ_MEMREAD_CTRL:
      udd_g_ctrlreq.payload = ctrlmemread_buf;
   805ce:	4b16      	ldr	r3, [pc, #88]	; (80628 <main_setup_in_received+0x6c>)
   805d0:	681b      	ldr	r3, [r3, #0]
   805d2:	4a14      	ldr	r2, [pc, #80]	; (80624 <main_setup_in_received+0x68>)
   805d4:	6093      	str	r3, [r2, #8]
      udd_g_ctrlreq.payload_size = ctrlmemread_size;
   805d6:	4b15      	ldr	r3, [pc, #84]	; (8062c <main_setup_in_received+0x70>)
   805d8:	681b      	ldr	r3, [r3, #0]
   805da:	b29a      	uxth	r2, r3
   805dc:	4b11      	ldr	r3, [pc, #68]	; (80624 <main_setup_in_received+0x68>)
   805de:	819a      	strh	r2, [r3, #12]
      ctrlmemread_size = 0;
   805e0:	4b12      	ldr	r3, [pc, #72]	; (8062c <main_setup_in_received+0x70>)
   805e2:	2200      	movs	r2, #0
   805e4:	601a      	str	r2, [r3, #0]

      if (FPGA_lockstatus() == fpga_ctrlmem){
   805e6:	4b12      	ldr	r3, [pc, #72]	; (80630 <main_setup_in_received+0x74>)
   805e8:	4798      	blx	r3
   805ea:	4603      	mov	r3, r0
   805ec:	2b04      	cmp	r3, #4
   805ee:	d102      	bne.n	805f6 <main_setup_in_received+0x3a>
        FPGA_setlock(fpga_unlocked);
   805f0:	2000      	movs	r0, #0
   805f2:	4b10      	ldr	r3, [pc, #64]	; (80634 <main_setup_in_received+0x78>)
   805f4:	4798      	blx	r3
      }

      return true;
   805f6:	2301      	movs	r3, #1
   805f8:	e011      	b.n	8061e <main_setup_in_received+0x62>
      break;

    case REQ_FW_VERSION:
      respbuf[0] = FW_VER_MAJOR;
   805fa:	4b0f      	ldr	r3, [pc, #60]	; (80638 <main_setup_in_received+0x7c>)
   805fc:	2200      	movs	r2, #0
   805fe:	701a      	strb	r2, [r3, #0]
      respbuf[1] = FW_VER_MINOR;
   80600:	4b0d      	ldr	r3, [pc, #52]	; (80638 <main_setup_in_received+0x7c>)
   80602:	220a      	movs	r2, #10
   80604:	705a      	strb	r2, [r3, #1]
      respbuf[2] = FW_VER_DEBUG;
   80606:	4b0c      	ldr	r3, [pc, #48]	; (80638 <main_setup_in_received+0x7c>)
   80608:	2200      	movs	r2, #0
   8060a:	709a      	strb	r2, [r3, #2]
      udd_g_ctrlreq.payload = respbuf;
   8060c:	4b05      	ldr	r3, [pc, #20]	; (80624 <main_setup_in_received+0x68>)
   8060e:	4a0a      	ldr	r2, [pc, #40]	; (80638 <main_setup_in_received+0x7c>)
   80610:	609a      	str	r2, [r3, #8]
      udd_g_ctrlreq.payload_size = 3;
   80612:	4b04      	ldr	r3, [pc, #16]	; (80624 <main_setup_in_received+0x68>)
   80614:	2203      	movs	r2, #3
   80616:	819a      	strh	r2, [r3, #12]
      return true;
   80618:	2301      	movs	r3, #1
   8061a:	e000      	b.n	8061e <main_setup_in_received+0x62>
      break;


    default:
      return false;
   8061c:	2300      	movs	r3, #0
  }
  return false;
}
   8061e:	4618      	mov	r0, r3
   80620:	bd80      	pop	{r7, pc}
   80622:	bf00      	nop
   80624:	20000c4c 	.word	0x20000c4c
   80628:	20000b3c 	.word	0x20000b3c
   8062c:	20000b40 	.word	0x20000b40
   80630:	00080731 	.word	0x00080731
   80634:	00080711 	.word	0x00080711
   80638:	20000b4c 	.word	0x20000b4c

0008063c <main_vendor_bulk_in_received>:

void main_vendor_bulk_in_received(udd_ep_status_t status,
    iram_size_t nb_transfered, udd_ep_id_t ep)
{
   8063c:	b580      	push	{r7, lr}
   8063e:	b082      	sub	sp, #8
   80640:	af00      	add	r7, sp, #0
   80642:	4603      	mov	r3, r0
   80644:	6039      	str	r1, [r7, #0]
   80646:	71fb      	strb	r3, [r7, #7]
   80648:	4613      	mov	r3, r2
   8064a:	71bb      	strb	r3, [r7, #6]
  UNUSED(nb_transfered);
  UNUSED(ep);
  if (UDD_EP_TRANSFER_OK != status) {
   8064c:	79fb      	ldrb	r3, [r7, #7]
   8064e:	2b00      	cmp	r3, #0
   80650:	d108      	bne.n	80664 <main_vendor_bulk_in_received+0x28>
    return; // Transfer aborted/error
  }

  if (FPGA_lockstatus() == fpga_blockin){
   80652:	4b06      	ldr	r3, [pc, #24]	; (8066c <main_vendor_bulk_in_received+0x30>)
   80654:	4798      	blx	r3
   80656:	4603      	mov	r3, r0
   80658:	2b02      	cmp	r3, #2
   8065a:	d104      	bne.n	80666 <main_vendor_bulk_in_received+0x2a>
    FPGA_setlock(fpga_unlocked);
   8065c:	2000      	movs	r0, #0
   8065e:	4b04      	ldr	r3, [pc, #16]	; (80670 <main_vendor_bulk_in_received+0x34>)
   80660:	4798      	blx	r3
   80662:	e000      	b.n	80666 <main_vendor_bulk_in_received+0x2a>
    return; // Transfer aborted/error
   80664:	bf00      	nop
  }
}
   80666:	3708      	adds	r7, #8
   80668:	46bd      	mov	sp, r7
   8066a:	bd80      	pop	{r7, pc}
   8066c:	00080731 	.word	0x00080731
   80670:	00080711 	.word	0x00080711

00080674 <main_vendor_bulk_out_received>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
    iram_size_t nb_transfered, udd_ep_id_t ep)
{
   80674:	b580      	push	{r7, lr}
   80676:	b084      	sub	sp, #16
   80678:	af00      	add	r7, sp, #0
   8067a:	4603      	mov	r3, r0
   8067c:	6039      	str	r1, [r7, #0]
   8067e:	71fb      	strb	r3, [r7, #7]
   80680:	4613      	mov	r3, r2
   80682:	71bb      	strb	r3, [r7, #6]
  UNUSED(ep);
  if (UDD_EP_TRANSFER_OK != status) {
   80684:	79fb      	ldrb	r3, [r7, #7]
   80686:	2b00      	cmp	r3, #0
   80688:	d006      	beq.n	80698 <main_vendor_bulk_out_received+0x24>
    // Transfer aborted

    //restart
    udi_vendor_bulk_out_run(
   8068a:	4a19      	ldr	r2, [pc, #100]	; (806f0 <main_vendor_bulk_out_received+0x7c>)
   8068c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80690:	4818      	ldr	r0, [pc, #96]	; (806f4 <main_vendor_bulk_out_received+0x80>)
   80692:	4b19      	ldr	r3, [pc, #100]	; (806f8 <main_vendor_bulk_out_received+0x84>)
   80694:	4798      	blx	r3
    main_buf_loopback,
    sizeof(main_buf_loopback),
    main_vendor_bulk_out_received);

    return;
   80696:	e027      	b.n	806e8 <main_vendor_bulk_out_received+0x74>
  }

  if (blockendpoint_usage == bep_emem){
   80698:	4b18      	ldr	r3, [pc, #96]	; (806fc <main_vendor_bulk_out_received+0x88>)
   8069a:	781b      	ldrb	r3, [r3, #0]
   8069c:	2b00      	cmp	r3, #0
   8069e:	d11d      	bne.n	806dc <main_vendor_bulk_out_received+0x68>

    for(uint32_t i = 0; i < nb_transfered; i++){
   806a0:	2300      	movs	r3, #0
   806a2:	60fb      	str	r3, [r7, #12]
   806a4:	e00e      	b.n	806c4 <main_vendor_bulk_out_received+0x50>
      xram[i + bulkread_address] = main_buf_loopback[i];
   806a6:	4b16      	ldr	r3, [pc, #88]	; (80700 <main_vendor_bulk_out_received+0x8c>)
   806a8:	681a      	ldr	r2, [r3, #0]
   806aa:	4b16      	ldr	r3, [pc, #88]	; (80704 <main_vendor_bulk_out_received+0x90>)
   806ac:	6819      	ldr	r1, [r3, #0]
   806ae:	68fb      	ldr	r3, [r7, #12]
   806b0:	440b      	add	r3, r1
   806b2:	4413      	add	r3, r2
   806b4:	490f      	ldr	r1, [pc, #60]	; (806f4 <main_vendor_bulk_out_received+0x80>)
   806b6:	68fa      	ldr	r2, [r7, #12]
   806b8:	440a      	add	r2, r1
   806ba:	7812      	ldrb	r2, [r2, #0]
   806bc:	701a      	strb	r2, [r3, #0]
    for(uint32_t i = 0; i < nb_transfered; i++){
   806be:	68fb      	ldr	r3, [r7, #12]
   806c0:	3301      	adds	r3, #1
   806c2:	60fb      	str	r3, [r7, #12]
   806c4:	68fa      	ldr	r2, [r7, #12]
   806c6:	683b      	ldr	r3, [r7, #0]
   806c8:	429a      	cmp	r2, r3
   806ca:	d3ec      	bcc.n	806a6 <main_vendor_bulk_out_received+0x32>
    }

    if (FPGA_lockstatus() == fpga_blockout){
   806cc:	4b0e      	ldr	r3, [pc, #56]	; (80708 <main_vendor_bulk_out_received+0x94>)
   806ce:	4798      	blx	r3
   806d0:	4603      	mov	r3, r0
   806d2:	2b03      	cmp	r3, #3
   806d4:	d102      	bne.n	806dc <main_vendor_bulk_out_received+0x68>
      FPGA_setlock(fpga_unlocked);
   806d6:	2000      	movs	r0, #0
   806d8:	4b0c      	ldr	r3, [pc, #48]	; (8070c <main_vendor_bulk_out_received+0x98>)
   806da:	4798      	blx	r3
    }
  }
  //printf("BULKOUT: %d bytes\n", (int)nb_transfered);

  udi_vendor_bulk_out_run(
   806dc:	4a04      	ldr	r2, [pc, #16]	; (806f0 <main_vendor_bulk_out_received+0x7c>)
   806de:	f44f 6180 	mov.w	r1, #1024	; 0x400
   806e2:	4804      	ldr	r0, [pc, #16]	; (806f4 <main_vendor_bulk_out_received+0x80>)
   806e4:	4b04      	ldr	r3, [pc, #16]	; (806f8 <main_vendor_bulk_out_received+0x84>)
   806e6:	4798      	blx	r3
  main_buf_loopback,
  sizeof(main_buf_loopback),
  main_vendor_bulk_out_received);
}
   806e8:	3710      	adds	r7, #16
   806ea:	46bd      	mov	sp, r7
   806ec:	bd80      	pop	{r7, pc}
   806ee:	bf00      	nop
   806f0:	00080675 	.word	0x00080675
   806f4:	200006f8 	.word	0x200006f8
   806f8:	00082bb5 	.word	0x00082bb5
   806fc:	20000b38 	.word	0x20000b38
   80700:	20000194 	.word	0x20000194
   80704:	20000b44 	.word	0x20000b44
   80708:	00080731 	.word	0x00080731
   8070c:	00080711 	.word	0x00080711

00080710 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

void FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   80710:	b480      	push	{r7}
   80712:	b083      	sub	sp, #12
   80714:	af00      	add	r7, sp, #0
   80716:	4603      	mov	r3, r0
   80718:	71fb      	strb	r3, [r7, #7]
	_fpga_locked = lockstatus;
   8071a:	4a04      	ldr	r2, [pc, #16]	; (8072c <FPGA_setlock+0x1c>)
   8071c:	79fb      	ldrb	r3, [r7, #7]
   8071e:	7013      	strb	r3, [r2, #0]
}
   80720:	bf00      	nop
   80722:	370c      	adds	r7, #12
   80724:	46bd      	mov	sp, r7
   80726:	bc80      	pop	{r7}
   80728:	4770      	bx	lr
   8072a:	bf00      	nop
   8072c:	20000b8c 	.word	0x20000b8c

00080730 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
   80730:	b480      	push	{r7}
   80732:	af00      	add	r7, sp, #0
	return _fpga_locked;
   80734:	4b03      	ldr	r3, [pc, #12]	; (80744 <FPGA_lockstatus+0x14>)
   80736:	781b      	ldrb	r3, [r3, #0]
   80738:	b2db      	uxtb	r3, r3
}
   8073a:	4618      	mov	r0, r3
   8073c:	46bd      	mov	sp, r7
   8073e:	bc80      	pop	{r7}
   80740:	4770      	bx	lr
   80742:	bf00      	nop
   80744:	20000b8c 	.word	0x20000b8c

00080748 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80748:	b580      	push	{r7, lr}
   8074a:	b084      	sub	sp, #16
   8074c:	af00      	add	r7, sp, #0
   8074e:	6078      	str	r0, [r7, #4]
   80750:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80752:	6878      	ldr	r0, [r7, #4]
   80754:	4b26      	ldr	r3, [pc, #152]	; (807f0 <pio_handler_process+0xa8>)
   80756:	4798      	blx	r3
   80758:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   8075a:	6878      	ldr	r0, [r7, #4]
   8075c:	4b25      	ldr	r3, [pc, #148]	; (807f4 <pio_handler_process+0xac>)
   8075e:	4798      	blx	r3
   80760:	4602      	mov	r2, r0
   80762:	68fb      	ldr	r3, [r7, #12]
   80764:	4013      	ands	r3, r2
   80766:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   80768:	68fb      	ldr	r3, [r7, #12]
   8076a:	2b00      	cmp	r3, #0
   8076c:	d03c      	beq.n	807e8 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
   8076e:	2300      	movs	r3, #0
   80770:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   80772:	e034      	b.n	807de <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80774:	4a20      	ldr	r2, [pc, #128]	; (807f8 <pio_handler_process+0xb0>)
   80776:	68bb      	ldr	r3, [r7, #8]
   80778:	011b      	lsls	r3, r3, #4
   8077a:	4413      	add	r3, r2
   8077c:	681a      	ldr	r2, [r3, #0]
   8077e:	683b      	ldr	r3, [r7, #0]
   80780:	429a      	cmp	r2, r3
   80782:	d126      	bne.n	807d2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80784:	4a1c      	ldr	r2, [pc, #112]	; (807f8 <pio_handler_process+0xb0>)
   80786:	68bb      	ldr	r3, [r7, #8]
   80788:	011b      	lsls	r3, r3, #4
   8078a:	4413      	add	r3, r2
   8078c:	3304      	adds	r3, #4
   8078e:	681a      	ldr	r2, [r3, #0]
   80790:	68fb      	ldr	r3, [r7, #12]
   80792:	4013      	ands	r3, r2
   80794:	2b00      	cmp	r3, #0
   80796:	d01c      	beq.n	807d2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80798:	4a17      	ldr	r2, [pc, #92]	; (807f8 <pio_handler_process+0xb0>)
   8079a:	68bb      	ldr	r3, [r7, #8]
   8079c:	011b      	lsls	r3, r3, #4
   8079e:	4413      	add	r3, r2
   807a0:	330c      	adds	r3, #12
   807a2:	681b      	ldr	r3, [r3, #0]
   807a4:	4914      	ldr	r1, [pc, #80]	; (807f8 <pio_handler_process+0xb0>)
   807a6:	68ba      	ldr	r2, [r7, #8]
   807a8:	0112      	lsls	r2, r2, #4
   807aa:	440a      	add	r2, r1
   807ac:	6810      	ldr	r0, [r2, #0]
   807ae:	4912      	ldr	r1, [pc, #72]	; (807f8 <pio_handler_process+0xb0>)
   807b0:	68ba      	ldr	r2, [r7, #8]
   807b2:	0112      	lsls	r2, r2, #4
   807b4:	440a      	add	r2, r1
   807b6:	3204      	adds	r2, #4
   807b8:	6812      	ldr	r2, [r2, #0]
   807ba:	4611      	mov	r1, r2
   807bc:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   807be:	4a0e      	ldr	r2, [pc, #56]	; (807f8 <pio_handler_process+0xb0>)
   807c0:	68bb      	ldr	r3, [r7, #8]
   807c2:	011b      	lsls	r3, r3, #4
   807c4:	4413      	add	r3, r2
   807c6:	3304      	adds	r3, #4
   807c8:	681b      	ldr	r3, [r3, #0]
   807ca:	43db      	mvns	r3, r3
   807cc:	68fa      	ldr	r2, [r7, #12]
   807ce:	4013      	ands	r3, r2
   807d0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   807d2:	68bb      	ldr	r3, [r7, #8]
   807d4:	3301      	adds	r3, #1
   807d6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
   807d8:	68bb      	ldr	r3, [r7, #8]
   807da:	2b06      	cmp	r3, #6
   807dc:	d803      	bhi.n	807e6 <pio_handler_process+0x9e>
		while (status != 0) {
   807de:	68fb      	ldr	r3, [r7, #12]
   807e0:	2b00      	cmp	r3, #0
   807e2:	d1c7      	bne.n	80774 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   807e4:	e000      	b.n	807e8 <pio_handler_process+0xa0>
				break;
   807e6:	bf00      	nop
}
   807e8:	bf00      	nop
   807ea:	3710      	adds	r7, #16
   807ec:	46bd      	mov	sp, r7
   807ee:	bd80      	pop	{r7, pc}
   807f0:	00082d87 	.word	0x00082d87
   807f4:	00082d9d 	.word	0x00082d9d
   807f8:	20000b90 	.word	0x20000b90

000807fc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   807fc:	b580      	push	{r7, lr}
   807fe:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   80800:	210a      	movs	r1, #10
   80802:	4802      	ldr	r0, [pc, #8]	; (8080c <PIOA_Handler+0x10>)
   80804:	4b02      	ldr	r3, [pc, #8]	; (80810 <PIOA_Handler+0x14>)
   80806:	4798      	blx	r3
}
   80808:	bf00      	nop
   8080a:	bd80      	pop	{r7, pc}
   8080c:	400e0c00 	.word	0x400e0c00
   80810:	00080749 	.word	0x00080749

00080814 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80814:	b580      	push	{r7, lr}
   80816:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   80818:	210b      	movs	r1, #11
   8081a:	4802      	ldr	r0, [pc, #8]	; (80824 <PIOB_Handler+0x10>)
   8081c:	4b02      	ldr	r3, [pc, #8]	; (80828 <PIOB_Handler+0x14>)
   8081e:	4798      	blx	r3
}
   80820:	bf00      	nop
   80822:	bd80      	pop	{r7, pc}
   80824:	400e0e00 	.word	0x400e0e00
   80828:	00080749 	.word	0x00080749

0008082c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   8082c:	b480      	push	{r7}
   8082e:	b083      	sub	sp, #12
   80830:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80832:	f3ef 8310 	mrs	r3, PRIMASK
   80836:	603b      	str	r3, [r7, #0]
  return(result);
   80838:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   8083a:	2b00      	cmp	r3, #0
   8083c:	bf0c      	ite	eq
   8083e:	2301      	moveq	r3, #1
   80840:	2300      	movne	r3, #0
   80842:	b2db      	uxtb	r3, r3
   80844:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   80846:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80848:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8084c:	4b04      	ldr	r3, [pc, #16]	; (80860 <cpu_irq_save+0x34>)
   8084e:	2200      	movs	r2, #0
   80850:	701a      	strb	r2, [r3, #0]
	return flags;
   80852:	687b      	ldr	r3, [r7, #4]
}
   80854:	4618      	mov	r0, r3
   80856:	370c      	adds	r7, #12
   80858:	46bd      	mov	sp, r7
   8085a:	bc80      	pop	{r7}
   8085c:	4770      	bx	lr
   8085e:	bf00      	nop
   80860:	2000021e 	.word	0x2000021e

00080864 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   80864:	b480      	push	{r7}
   80866:	b083      	sub	sp, #12
   80868:	af00      	add	r7, sp, #0
   8086a:	6078      	str	r0, [r7, #4]
	return (flags);
   8086c:	687b      	ldr	r3, [r7, #4]
   8086e:	2b00      	cmp	r3, #0
   80870:	bf14      	ite	ne
   80872:	2301      	movne	r3, #1
   80874:	2300      	moveq	r3, #0
   80876:	b2db      	uxtb	r3, r3
}
   80878:	4618      	mov	r0, r3
   8087a:	370c      	adds	r7, #12
   8087c:	46bd      	mov	sp, r7
   8087e:	bc80      	pop	{r7}
   80880:	4770      	bx	lr
   80882:	0000      	movs	r0, r0

00080884 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   80884:	b580      	push	{r7, lr}
   80886:	b082      	sub	sp, #8
   80888:	af00      	add	r7, sp, #0
   8088a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   8088c:	6878      	ldr	r0, [r7, #4]
   8088e:	4b07      	ldr	r3, [pc, #28]	; (808ac <cpu_irq_restore+0x28>)
   80890:	4798      	blx	r3
   80892:	4603      	mov	r3, r0
   80894:	2b00      	cmp	r3, #0
   80896:	d005      	beq.n	808a4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
   80898:	4b05      	ldr	r3, [pc, #20]	; (808b0 <cpu_irq_restore+0x2c>)
   8089a:	2201      	movs	r2, #1
   8089c:	701a      	strb	r2, [r3, #0]
   8089e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   808a2:	b662      	cpsie	i
}
   808a4:	bf00      	nop
   808a6:	3708      	adds	r7, #8
   808a8:	46bd      	mov	sp, r7
   808aa:	bd80      	pop	{r7, pc}
   808ac:	00080865 	.word	0x00080865
   808b0:	2000021e 	.word	0x2000021e

000808b4 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
   808b4:	b580      	push	{r7, lr}
   808b6:	b084      	sub	sp, #16
   808b8:	af00      	add	r7, sp, #0
   808ba:	4603      	mov	r3, r0
   808bc:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;

	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();
   808be:	4b08      	ldr	r3, [pc, #32]	; (808e0 <sleepmgr_lock_mode+0x2c>)
   808c0:	4798      	blx	r3
   808c2:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
   808c4:	79fb      	ldrb	r3, [r7, #7]
   808c6:	4a07      	ldr	r2, [pc, #28]	; (808e4 <sleepmgr_lock_mode+0x30>)
   808c8:	5cd2      	ldrb	r2, [r2, r3]
   808ca:	3201      	adds	r2, #1
   808cc:	b2d1      	uxtb	r1, r2
   808ce:	4a05      	ldr	r2, [pc, #20]	; (808e4 <sleepmgr_lock_mode+0x30>)
   808d0:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
   808d2:	68f8      	ldr	r0, [r7, #12]
   808d4:	4b04      	ldr	r3, [pc, #16]	; (808e8 <sleepmgr_lock_mode+0x34>)
   808d6:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   808d8:	bf00      	nop
   808da:	3710      	adds	r7, #16
   808dc:	46bd      	mov	sp, r7
   808de:	bd80      	pop	{r7, pc}
   808e0:	0008082d 	.word	0x0008082d
   808e4:	20000c64 	.word	0x20000c64
   808e8:	00080885 	.word	0x00080885

000808ec <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
   808ec:	b580      	push	{r7, lr}
   808ee:	b084      	sub	sp, #16
   808f0:	af00      	add	r7, sp, #0
   808f2:	4603      	mov	r3, r0
   808f4:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;

	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();
   808f6:	4b08      	ldr	r3, [pc, #32]	; (80918 <sleepmgr_unlock_mode+0x2c>)
   808f8:	4798      	blx	r3
   808fa:	60f8      	str	r0, [r7, #12]

	--sleepmgr_locks[mode];
   808fc:	79fb      	ldrb	r3, [r7, #7]
   808fe:	4a07      	ldr	r2, [pc, #28]	; (8091c <sleepmgr_unlock_mode+0x30>)
   80900:	5cd2      	ldrb	r2, [r2, r3]
   80902:	3a01      	subs	r2, #1
   80904:	b2d1      	uxtb	r1, r2
   80906:	4a05      	ldr	r2, [pc, #20]	; (8091c <sleepmgr_unlock_mode+0x30>)
   80908:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
   8090a:	68f8      	ldr	r0, [r7, #12]
   8090c:	4b04      	ldr	r3, [pc, #16]	; (80920 <sleepmgr_unlock_mode+0x34>)
   8090e:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   80910:	bf00      	nop
   80912:	3710      	adds	r7, #16
   80914:	46bd      	mov	sp, r7
   80916:	bd80      	pop	{r7, pc}
   80918:	0008082d 	.word	0x0008082d
   8091c:	20000c64 	.word	0x20000c64
   80920:	00080885 	.word	0x00080885

00080924 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
   80924:	b580      	push	{r7, lr}
   80926:	b082      	sub	sp, #8
   80928:	af00      	add	r7, sp, #0
   8092a:	4603      	mov	r3, r0
   8092c:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
   8092e:	79fb      	ldrb	r3, [r7, #7]
   80930:	f083 0301 	eor.w	r3, r3, #1
   80934:	b2db      	uxtb	r3, r3
   80936:	2b00      	cmp	r3, #0
   80938:	d006      	beq.n	80948 <udd_sleep_mode+0x24>
   8093a:	4b0d      	ldr	r3, [pc, #52]	; (80970 <udd_sleep_mode+0x4c>)
   8093c:	781b      	ldrb	r3, [r3, #0]
   8093e:	2b00      	cmp	r3, #0
   80940:	d002      	beq.n	80948 <udd_sleep_mode+0x24>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   80942:	2002      	movs	r0, #2
   80944:	4b0b      	ldr	r3, [pc, #44]	; (80974 <udd_sleep_mode+0x50>)
   80946:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
   80948:	79fb      	ldrb	r3, [r7, #7]
   8094a:	2b00      	cmp	r3, #0
   8094c:	d009      	beq.n	80962 <udd_sleep_mode+0x3e>
   8094e:	4b08      	ldr	r3, [pc, #32]	; (80970 <udd_sleep_mode+0x4c>)
   80950:	781b      	ldrb	r3, [r3, #0]
   80952:	f083 0301 	eor.w	r3, r3, #1
   80956:	b2db      	uxtb	r3, r3
   80958:	2b00      	cmp	r3, #0
   8095a:	d002      	beq.n	80962 <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   8095c:	2002      	movs	r0, #2
   8095e:	4b06      	ldr	r3, [pc, #24]	; (80978 <udd_sleep_mode+0x54>)
   80960:	4798      	blx	r3
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   80962:	4a03      	ldr	r2, [pc, #12]	; (80970 <udd_sleep_mode+0x4c>)
   80964:	79fb      	ldrb	r3, [r7, #7]
   80966:	7013      	strb	r3, [r2, #0]
}
   80968:	bf00      	nop
   8096a:	3708      	adds	r7, #8
   8096c:	46bd      	mov	sp, r7
   8096e:	bd80      	pop	{r7, pc}
   80970:	20000c00 	.word	0x20000c00
   80974:	000808ed 	.word	0x000808ed
   80978:	000808b5 	.word	0x000808b5

0008097c <UDPHS_Handler>:
 * Here, the global interrupt mask is not clear when an USB interrupt is enabled
 * because this one can not be occurred during the USB ISR (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests in peripheral modules.
 */
ISR(UDD_USB_INT_FUN)
{
   8097c:	b580      	push	{r7, lr}
   8097e:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   80980:	201d      	movs	r0, #29
   80982:	4b5e      	ldr	r3, [pc, #376]	; (80afc <UDPHS_Handler+0x180>)
   80984:	4798      	blx	r3
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   80986:	4b5e      	ldr	r3, [pc, #376]	; (80b00 <UDPHS_Handler+0x184>)
   80988:	4798      	blx	r3
   8098a:	4603      	mov	r3, r0
   8098c:	f083 0301 	eor.w	r3, r3, #1
   80990:	b2db      	uxtb	r3, r3
   80992:	2b00      	cmp	r3, #0
   80994:	d00c      	beq.n	809b0 <UDPHS_Handler+0x34>
   80996:	4b5b      	ldr	r3, [pc, #364]	; (80b04 <UDPHS_Handler+0x188>)
   80998:	695b      	ldr	r3, [r3, #20]
   8099a:	f003 0302 	and.w	r3, r3, #2
   8099e:	2b00      	cmp	r3, #0
   809a0:	d106      	bne.n	809b0 <UDPHS_Handler+0x34>
  __ASM volatile ("cpsid i");
   809a2:	b672      	cpsid	i
   809a4:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   809a8:	4b57      	ldr	r3, [pc, #348]	; (80b08 <UDPHS_Handler+0x18c>)
   809aa:	2200      	movs	r2, #0
   809ac:	701a      	strb	r2, [r3, #0]
		return;
   809ae:	e0a4      	b.n	80afa <UDPHS_Handler+0x17e>
	}

	if (Is_udd_sof()) {
   809b0:	4b54      	ldr	r3, [pc, #336]	; (80b04 <UDPHS_Handler+0x188>)
   809b2:	695b      	ldr	r3, [r3, #20]
   809b4:	f003 0308 	and.w	r3, r3, #8
   809b8:	2b00      	cmp	r3, #0
   809ba:	d00d      	beq.n	809d8 <UDPHS_Handler+0x5c>
		udd_ack_sof();
   809bc:	4b51      	ldr	r3, [pc, #324]	; (80b04 <UDPHS_Handler+0x188>)
   809be:	2208      	movs	r2, #8
   809c0:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   809c2:	4b50      	ldr	r3, [pc, #320]	; (80b04 <UDPHS_Handler+0x188>)
   809c4:	695b      	ldr	r3, [r3, #20]
   809c6:	f003 0301 	and.w	r3, r3, #1
   809ca:	2b00      	cmp	r3, #0
   809cc:	d101      	bne.n	809d2 <UDPHS_Handler+0x56>
			udc_sof_notify();
   809ce:	4b4f      	ldr	r3, [pc, #316]	; (80b0c <UDPHS_Handler+0x190>)
   809d0:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   809d2:	4b4f      	ldr	r3, [pc, #316]	; (80b10 <UDPHS_Handler+0x194>)
   809d4:	4798      	blx	r3
#endif
		goto udd_interrupt_sof_end;
   809d6:	e08e      	b.n	80af6 <UDPHS_Handler+0x17a>
	}

	if (Is_udd_msof()) {
   809d8:	4b4a      	ldr	r3, [pc, #296]	; (80b04 <UDPHS_Handler+0x188>)
   809da:	695b      	ldr	r3, [r3, #20]
   809dc:	f003 0304 	and.w	r3, r3, #4
   809e0:	2b00      	cmp	r3, #0
   809e2:	d005      	beq.n	809f0 <UDPHS_Handler+0x74>
		udd_ack_msof();
   809e4:	4b47      	ldr	r3, [pc, #284]	; (80b04 <UDPHS_Handler+0x188>)
   809e6:	2204      	movs	r2, #4
   809e8:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   809ea:	4b48      	ldr	r3, [pc, #288]	; (80b0c <UDPHS_Handler+0x190>)
   809ec:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   809ee:	e082      	b.n	80af6 <UDPHS_Handler+0x17a>
	}
	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');

	if (udd_ctrl_interrupt()) {
   809f0:	4b48      	ldr	r3, [pc, #288]	; (80b14 <UDPHS_Handler+0x198>)
   809f2:	4798      	blx	r3
   809f4:	4603      	mov	r3, r0
   809f6:	2b00      	cmp	r3, #0
   809f8:	d17a      	bne.n	80af0 <UDPHS_Handler+0x174>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
   809fa:	4b47      	ldr	r3, [pc, #284]	; (80b18 <UDPHS_Handler+0x19c>)
   809fc:	4798      	blx	r3
   809fe:	4603      	mov	r3, r0
   80a00:	2b00      	cmp	r3, #0
   80a02:	d177      	bne.n	80af4 <UDPHS_Handler+0x178>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   80a04:	4b3f      	ldr	r3, [pc, #252]	; (80b04 <UDPHS_Handler+0x188>)
   80a06:	695b      	ldr	r3, [r3, #20]
   80a08:	f003 0310 	and.w	r3, r3, #16
   80a0c:	2b00      	cmp	r3, #0
   80a0e:	d01d      	beq.n	80a4c <UDPHS_Handler+0xd0>
		dbg_print("EoR ");
		udd_ack_reset();
   80a10:	4b3c      	ldr	r3, [pc, #240]	; (80b04 <UDPHS_Handler+0x188>)
   80a12:	2210      	movs	r2, #16
   80a14:	619a      	str	r2, [r3, #24]
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
   80a16:	4b41      	ldr	r3, [pc, #260]	; (80b1c <UDPHS_Handler+0x1a0>)
   80a18:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
   80a1a:	4b41      	ldr	r3, [pc, #260]	; (80b20 <UDPHS_Handler+0x1a4>)
   80a1c:	4798      	blx	r3
		// Reset endpoint control
		udd_reset_ep_ctrl();
   80a1e:	4b41      	ldr	r3, [pc, #260]	; (80b24 <UDPHS_Handler+0x1a8>)
   80a20:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
   80a22:	4b41      	ldr	r3, [pc, #260]	; (80b28 <UDPHS_Handler+0x1ac>)
   80a24:	4798      	blx	r3
		// Enable SOF interrupts cleared by USB reset event
		udd_enable_sof_interrupt();
   80a26:	4a37      	ldr	r2, [pc, #220]	; (80b04 <UDPHS_Handler+0x188>)
   80a28:	4b36      	ldr	r3, [pc, #216]	; (80b04 <UDPHS_Handler+0x188>)
   80a2a:	691b      	ldr	r3, [r3, #16]
   80a2c:	f043 0308 	orr.w	r3, r3, #8
   80a30:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   80a32:	4a34      	ldr	r2, [pc, #208]	; (80b04 <UDPHS_Handler+0x188>)
   80a34:	4b33      	ldr	r3, [pc, #204]	; (80b04 <UDPHS_Handler+0x188>)
   80a36:	691b      	ldr	r3, [r3, #16]
   80a38:	f043 0304 	orr.w	r3, r3, #4
   80a3c:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   80a3e:	4a31      	ldr	r2, [pc, #196]	; (80b04 <UDPHS_Handler+0x188>)
   80a40:	4b30      	ldr	r3, [pc, #192]	; (80b04 <UDPHS_Handler+0x188>)
   80a42:	691b      	ldr	r3, [r3, #16]
   80a44:	f043 0302 	orr.w	r3, r3, #2
   80a48:	6113      	str	r3, [r2, #16]
		goto udd_interrupt_end;
   80a4a:	e054      	b.n	80af6 <UDPHS_Handler+0x17a>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   80a4c:	4b2d      	ldr	r3, [pc, #180]	; (80b04 <UDPHS_Handler+0x188>)
   80a4e:	691b      	ldr	r3, [r3, #16]
   80a50:	f003 0302 	and.w	r3, r3, #2
   80a54:	2b00      	cmp	r3, #0
   80a56:	d020      	beq.n	80a9a <UDPHS_Handler+0x11e>
   80a58:	4b2a      	ldr	r3, [pc, #168]	; (80b04 <UDPHS_Handler+0x188>)
   80a5a:	695b      	ldr	r3, [r3, #20]
   80a5c:	f003 0302 	and.w	r3, r3, #2
   80a60:	2b00      	cmp	r3, #0
   80a62:	d01a      	beq.n	80a9a <UDPHS_Handler+0x11e>
		dbg_print("Susp ");
		// Remove old wakeup status
		udd_ack_wake_up();
   80a64:	4b27      	ldr	r3, [pc, #156]	; (80b04 <UDPHS_Handler+0x188>)
   80a66:	2220      	movs	r2, #32
   80a68:	619a      	str	r2, [r3, #24]
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   80a6a:	4a26      	ldr	r2, [pc, #152]	; (80b04 <UDPHS_Handler+0x188>)
   80a6c:	4b25      	ldr	r3, [pc, #148]	; (80b04 <UDPHS_Handler+0x188>)
   80a6e:	691b      	ldr	r3, [r3, #16]
   80a70:	f023 0302 	bic.w	r3, r3, #2
   80a74:	6113      	str	r3, [r2, #16]
		udd_enable_wake_up_interrupt();
   80a76:	4a23      	ldr	r2, [pc, #140]	; (80b04 <UDPHS_Handler+0x188>)
   80a78:	4b22      	ldr	r3, [pc, #136]	; (80b04 <UDPHS_Handler+0x188>)
   80a7a:	691b      	ldr	r3, [r3, #16]
   80a7c:	f043 0320 	orr.w	r3, r3, #32
   80a80:	6113      	str	r3, [r2, #16]

		// The wakeup interrupt is generated even if the device controller clock is disabled.
		udd_ack_suspend();
   80a82:	4b20      	ldr	r3, [pc, #128]	; (80b04 <UDPHS_Handler+0x188>)
   80a84:	2202      	movs	r2, #2
   80a86:	619a      	str	r2, [r3, #24]

		udd_disable_periph_ck();
   80a88:	201d      	movs	r0, #29
   80a8a:	4b28      	ldr	r3, [pc, #160]	; (80b2c <UDPHS_Handler+0x1b0>)
   80a8c:	4798      	blx	r3

#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   80a8e:	4b28      	ldr	r3, [pc, #160]	; (80b30 <UDPHS_Handler+0x1b4>)
   80a90:	4798      	blx	r3
#endif
		udd_sleep_mode(false); // Enter in SUSPEND mode
   80a92:	2000      	movs	r0, #0
   80a94:	4b27      	ldr	r3, [pc, #156]	; (80b34 <UDPHS_Handler+0x1b8>)
   80a96:	4798      	blx	r3
		goto udd_interrupt_end;
   80a98:	e02d      	b.n	80af6 <UDPHS_Handler+0x17a>
	}

	// On wakeup, _IEN is reseted only with EoR enabled
	if (Is_udd_wake_up()) {
   80a9a:	4b1a      	ldr	r3, [pc, #104]	; (80b04 <UDPHS_Handler+0x188>)
   80a9c:	695b      	ldr	r3, [r3, #20]
   80a9e:	f003 0320 	and.w	r3, r3, #32
   80aa2:	2b00      	cmp	r3, #0
   80aa4:	d028      	beq.n	80af8 <UDPHS_Handler+0x17c>
		udd_sleep_mode(true); // Enter in IDLE mode
   80aa6:	2001      	movs	r0, #1
   80aa8:	4b22      	ldr	r3, [pc, #136]	; (80b34 <UDPHS_Handler+0x1b8>)
   80aaa:	4798      	blx	r3
		// Remove old suspend status
		udd_ack_suspend();
   80aac:	4b15      	ldr	r3, [pc, #84]	; (80b04 <UDPHS_Handler+0x188>)
   80aae:	2202      	movs	r2, #2
   80ab0:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wake_up();
   80ab2:	4b14      	ldr	r3, [pc, #80]	; (80b04 <UDPHS_Handler+0x188>)
   80ab4:	2220      	movs	r2, #32
   80ab6:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_disable_wake_up_interrupt();
   80ab8:	4a12      	ldr	r2, [pc, #72]	; (80b04 <UDPHS_Handler+0x188>)
   80aba:	4b12      	ldr	r3, [pc, #72]	; (80b04 <UDPHS_Handler+0x188>)
   80abc:	691b      	ldr	r3, [r3, #16]
   80abe:	f023 0320 	bic.w	r3, r3, #32
   80ac2:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   80ac4:	4a0f      	ldr	r2, [pc, #60]	; (80b04 <UDPHS_Handler+0x188>)
   80ac6:	4b0f      	ldr	r3, [pc, #60]	; (80b04 <UDPHS_Handler+0x188>)
   80ac8:	691b      	ldr	r3, [r3, #16]
   80aca:	f043 0302 	orr.w	r3, r3, #2
   80ace:	6113      	str	r3, [r2, #16]
		udd_enable_sof_interrupt();
   80ad0:	4a0c      	ldr	r2, [pc, #48]	; (80b04 <UDPHS_Handler+0x188>)
   80ad2:	4b0c      	ldr	r3, [pc, #48]	; (80b04 <UDPHS_Handler+0x188>)
   80ad4:	691b      	ldr	r3, [r3, #16]
   80ad6:	f043 0308 	orr.w	r3, r3, #8
   80ada:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   80adc:	4a09      	ldr	r2, [pc, #36]	; (80b04 <UDPHS_Handler+0x188>)
   80ade:	4b09      	ldr	r3, [pc, #36]	; (80b04 <UDPHS_Handler+0x188>)
   80ae0:	691b      	ldr	r3, [r3, #16]
   80ae2:	f043 0304 	orr.w	r3, r3, #4
   80ae6:	6113      	str	r3, [r2, #16]

#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   80ae8:	4b13      	ldr	r3, [pc, #76]	; (80b38 <UDPHS_Handler+0x1bc>)
   80aea:	4798      	blx	r3
#endif
		dbg_print("Wkup ");
		goto udd_interrupt_end;
   80aec:	bf00      	nop
   80aee:	e002      	b.n	80af6 <UDPHS_Handler+0x17a>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
   80af0:	bf00      	nop
   80af2:	e000      	b.n	80af6 <UDPHS_Handler+0x17a>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
   80af4:	bf00      	nop
udd_interrupt_end:
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
	//dbg_print("m%08x", UDPHS->UDPHS_IEN);
	dbg_print("\n\r");
udd_interrupt_sof_end:
	return;
   80af6:	bf00      	nop
   80af8:	bf00      	nop
}
   80afa:	bd80      	pop	{r7, pc}
   80afc:	00082a25 	.word	0x00082a25
   80b00:	00083e01 	.word	0x00083e01
   80b04:	400a4000 	.word	0x400a4000
   80b08:	2000021e 	.word	0x2000021e
   80b0c:	0008332d 	.word	0x0008332d
   80b10:	000802e5 	.word	0x000802e5
   80b14:	00081c75 	.word	0x00081c75
   80b18:	00082031 	.word	0x00082031
   80b1c:	00081d59 	.word	0x00081d59
   80b20:	000832d9 	.word	0x000832d9
   80b24:	000815d5 	.word	0x000815d5
   80b28:	00081655 	.word	0x00081655
   80b2c:	00082a75 	.word	0x00082a75
   80b30:	000802c5 	.word	0x000802c5
   80b34:	00080925 	.word	0x00080925
   80b38:	000802d5 	.word	0x000802d5

00080b3c <udd_is_high_speed>:
	udd_sleep_mode(false);
}


bool udd_is_high_speed(void)
{
   80b3c:	b480      	push	{r7}
   80b3e:	af00      	add	r7, sp, #0
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   80b40:	4b06      	ldr	r3, [pc, #24]	; (80b5c <udd_is_high_speed+0x20>)
   80b42:	695b      	ldr	r3, [r3, #20]
   80b44:	f003 0301 	and.w	r3, r3, #1
   80b48:	2b00      	cmp	r3, #0
   80b4a:	bf14      	ite	ne
   80b4c:	2301      	movne	r3, #1
   80b4e:	2300      	moveq	r3, #0
   80b50:	b2db      	uxtb	r3, r3
#else
	return false;
#endif
}
   80b52:	4618      	mov	r0, r3
   80b54:	46bd      	mov	sp, r7
   80b56:	bc80      	pop	{r7}
   80b58:	4770      	bx	lr
   80b5a:	bf00      	nop
   80b5c:	400a4000 	.word	0x400a4000

00080b60 <udd_set_address>:


void udd_set_address(uint8_t address)
{
   80b60:	b480      	push	{r7}
   80b62:	b083      	sub	sp, #12
   80b64:	af00      	add	r7, sp, #0
   80b66:	4603      	mov	r3, r0
   80b68:	71fb      	strb	r3, [r7, #7]
	dbg_print("Addr%d ", address);
	udd_disable_address();
   80b6a:	4a0d      	ldr	r2, [pc, #52]	; (80ba0 <udd_set_address+0x40>)
   80b6c:	4b0c      	ldr	r3, [pc, #48]	; (80ba0 <udd_set_address+0x40>)
   80b6e:	681b      	ldr	r3, [r3, #0]
   80b70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   80b74:	6013      	str	r3, [r2, #0]
	udd_configure_address(address);
   80b76:	490a      	ldr	r1, [pc, #40]	; (80ba0 <udd_set_address+0x40>)
   80b78:	4b09      	ldr	r3, [pc, #36]	; (80ba0 <udd_set_address+0x40>)
   80b7a:	681b      	ldr	r3, [r3, #0]
   80b7c:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   80b80:	79fb      	ldrb	r3, [r7, #7]
   80b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   80b86:	4313      	orrs	r3, r2
   80b88:	600b      	str	r3, [r1, #0]
	udd_enable_address();
   80b8a:	4a05      	ldr	r2, [pc, #20]	; (80ba0 <udd_set_address+0x40>)
   80b8c:	4b04      	ldr	r3, [pc, #16]	; (80ba0 <udd_set_address+0x40>)
   80b8e:	681b      	ldr	r3, [r3, #0]
   80b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   80b94:	6013      	str	r3, [r2, #0]
}
   80b96:	bf00      	nop
   80b98:	370c      	adds	r7, #12
   80b9a:	46bd      	mov	sp, r7
   80b9c:	bc80      	pop	{r7}
   80b9e:	4770      	bx	lr
   80ba0:	400a4000 	.word	0x400a4000

00080ba4 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
   80ba4:	b480      	push	{r7}
   80ba6:	af00      	add	r7, sp, #0
	return udd_get_configured_address();
   80ba8:	4b04      	ldr	r3, [pc, #16]	; (80bbc <udd_getaddress+0x18>)
   80baa:	681b      	ldr	r3, [r3, #0]
   80bac:	b2db      	uxtb	r3, r3
   80bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   80bb2:	b2db      	uxtb	r3, r3
}
   80bb4:	4618      	mov	r0, r3
   80bb6:	46bd      	mov	sp, r7
   80bb8:	bc80      	pop	{r7}
   80bba:	4770      	bx	lr
   80bbc:	400a4000 	.word	0x400a4000

00080bc0 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
   80bc0:	b480      	push	{r7}
   80bc2:	af00      	add	r7, sp, #0
	return udd_frame_number();
   80bc4:	4b05      	ldr	r3, [pc, #20]	; (80bdc <udd_get_frame_number+0x1c>)
   80bc6:	685b      	ldr	r3, [r3, #4]
   80bc8:	08db      	lsrs	r3, r3, #3
   80bca:	b29b      	uxth	r3, r3
   80bcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
   80bd0:	b29b      	uxth	r3, r3
}
   80bd2:	4618      	mov	r0, r3
   80bd4:	46bd      	mov	sp, r7
   80bd6:	bc80      	pop	{r7}
   80bd8:	4770      	bx	lr
   80bda:	bf00      	nop
   80bdc:	400a4000 	.word	0x400a4000

00080be0 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
   80be0:	b480      	push	{r7}
   80be2:	b083      	sub	sp, #12
   80be4:	af00      	add	r7, sp, #0
   80be6:	6078      	str	r0, [r7, #4]
   80be8:	460b      	mov	r3, r1
   80bea:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
   80bec:	4a05      	ldr	r2, [pc, #20]	; (80c04 <udd_set_setup_payload+0x24>)
   80bee:	687b      	ldr	r3, [r7, #4]
   80bf0:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   80bf2:	4a04      	ldr	r2, [pc, #16]	; (80c04 <udd_set_setup_payload+0x24>)
   80bf4:	887b      	ldrh	r3, [r7, #2]
   80bf6:	8193      	strh	r3, [r2, #12]
}
   80bf8:	bf00      	nop
   80bfa:	370c      	adds	r7, #12
   80bfc:	46bd      	mov	sp, r7
   80bfe:	bc80      	pop	{r7}
   80c00:	4770      	bx	lr
   80c02:	bf00      	nop
   80c04:	20000c4c 	.word	0x20000c4c

00080c08 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   80c08:	b590      	push	{r4, r7, lr}
   80c0a:	b089      	sub	sp, #36	; 0x24
   80c0c:	af02      	add	r7, sp, #8
   80c0e:	4603      	mov	r3, r0
   80c10:	71fb      	strb	r3, [r7, #7]
   80c12:	460b      	mov	r3, r1
   80c14:	71bb      	strb	r3, [r7, #6]
   80c16:	4613      	mov	r3, r2
   80c18:	80bb      	strh	r3, [r7, #4]
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, nb_tran = 0, i;
   80c1a:	2300      	movs	r3, #0
   80c1c:	74fb      	strb	r3, [r7, #19]
	bool b_iso_hbw = false;
   80c1e:	2300      	movs	r3, #0
   80c20:	747b      	strb	r3, [r7, #17]

	b_dir_in = ep & USB_EP_DIR_IN;
   80c22:	79fb      	ldrb	r3, [r7, #7]
   80c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
   80c28:	2b00      	cmp	r3, #0
   80c2a:	bf14      	ite	ne
   80c2c:	2301      	movne	r3, #1
   80c2e:	2300      	moveq	r3, #0
   80c30:	743b      	strb	r3, [r7, #16]
	ep = ep & USB_EP_ADDR_MASK;
   80c32:	79fb      	ldrb	r3, [r7, #7]
   80c34:	f003 030f 	and.w	r3, r3, #15
   80c38:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
   80c3a:	79fb      	ldrb	r3, [r7, #7]
   80c3c:	2b02      	cmp	r3, #2
   80c3e:	d901      	bls.n	80c44 <udd_ep_alloc+0x3c>
		return false;
   80c40:	2300      	movs	r3, #0
   80c42:	e1b2      	b.n	80faa <udd_ep_alloc+0x3a2>
	}
	if (Is_udd_endpoint_enabled(ep)) {
   80c44:	4ab2      	ldr	r2, [pc, #712]	; (80f10 <udd_ep_alloc+0x308>)
   80c46:	79fb      	ldrb	r3, [r7, #7]
   80c48:	015b      	lsls	r3, r3, #5
   80c4a:	4413      	add	r3, r2
   80c4c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   80c50:	681b      	ldr	r3, [r3, #0]
   80c52:	f003 0301 	and.w	r3, r3, #1
   80c56:	2b00      	cmp	r3, #0
   80c58:	d001      	beq.n	80c5e <udd_ep_alloc+0x56>
		return false;
   80c5a:	2300      	movs	r3, #0
   80c5c:	e1a5      	b.n	80faa <udd_ep_alloc+0x3a2>
	}

	// Bank choice
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   80c5e:	79bb      	ldrb	r3, [r7, #6]
   80c60:	f003 0303 	and.w	r3, r3, #3
   80c64:	2b02      	cmp	r3, #2
   80c66:	d01a      	beq.n	80c9e <udd_ep_alloc+0x96>
   80c68:	2b03      	cmp	r3, #3
   80c6a:	d015      	beq.n	80c98 <udd_ep_alloc+0x90>
   80c6c:	2b01      	cmp	r3, #1
   80c6e:	d119      	bne.n	80ca4 <udd_ep_alloc+0x9c>
	case USB_EP_TYPE_ISOCHRONOUS:
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   80c70:	79fb      	ldrb	r3, [r7, #7]
   80c72:	2b00      	cmp	r3, #0
   80c74:	d007      	beq.n	80c86 <udd_ep_alloc+0x7e>
   80c76:	79fb      	ldrb	r3, [r7, #7]
   80c78:	2b03      	cmp	r3, #3
   80c7a:	d004      	beq.n	80c86 <udd_ep_alloc+0x7e>
   80c7c:	79fb      	ldrb	r3, [r7, #7]
   80c7e:	2b04      	cmp	r3, #4
   80c80:	d001      	beq.n	80c86 <udd_ep_alloc+0x7e>
   80c82:	2301      	movs	r3, #1
   80c84:	e000      	b.n	80c88 <udd_ep_alloc+0x80>
   80c86:	2300      	movs	r3, #0
   80c88:	747b      	strb	r3, [r7, #17]
   80c8a:	7c7b      	ldrb	r3, [r7, #17]
   80c8c:	f003 0301 	and.w	r3, r3, #1
   80c90:	747b      	strb	r3, [r7, #17]
		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
   80c92:	2301      	movs	r3, #1
   80c94:	757b      	strb	r3, [r7, #21]
		break;
   80c96:	e007      	b.n	80ca8 <udd_ep_alloc+0xa0>
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
   80c98:	2301      	movs	r3, #1
   80c9a:	757b      	strb	r3, [r7, #21]
		break;
   80c9c:	e004      	b.n	80ca8 <udd_ep_alloc+0xa0>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   80c9e:	2302      	movs	r3, #2
   80ca0:	757b      	strb	r3, [r7, #21]
		break;
   80ca2:	e001      	b.n	80ca8 <udd_ep_alloc+0xa0>
	default:
		Assert(false);
		return false;
   80ca4:	2300      	movs	r3, #0
   80ca6:	e180      	b.n	80faa <udd_ep_alloc+0x3a2>
	}
	switch (nb_bank) {
   80ca8:	7d7b      	ldrb	r3, [r7, #21]
   80caa:	2b02      	cmp	r3, #2
   80cac:	d006      	beq.n	80cbc <udd_ep_alloc+0xb4>
   80cae:	2b03      	cmp	r3, #3
   80cb0:	d007      	beq.n	80cc2 <udd_ep_alloc+0xba>
   80cb2:	2b01      	cmp	r3, #1
   80cb4:	d108      	bne.n	80cc8 <udd_ep_alloc+0xc0>
	case 1:
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   80cb6:	2301      	movs	r3, #1
   80cb8:	753b      	strb	r3, [r7, #20]
		break;
   80cba:	e007      	b.n	80ccc <udd_ep_alloc+0xc4>
	case 2:
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   80cbc:	2302      	movs	r3, #2
   80cbe:	753b      	strb	r3, [r7, #20]
		break;
   80cc0:	e004      	b.n	80ccc <udd_ep_alloc+0xc4>
	case 3:
		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   80cc2:	2303      	movs	r3, #3
   80cc4:	753b      	strb	r3, [r7, #20]
		break;
   80cc6:	e001      	b.n	80ccc <udd_ep_alloc+0xc4>
	default:
		Assert(false);
		return false;
   80cc8:	2300      	movs	r3, #0
   80cca:	e16e      	b.n	80faa <udd_ep_alloc+0x3a2>
	}
	if (b_iso_hbw) {
   80ccc:	7c7b      	ldrb	r3, [r7, #17]
   80cce:	2b00      	cmp	r3, #0
   80cd0:	d017      	beq.n	80d02 <udd_ep_alloc+0xfa>
		switch(MaxEndpointSize & (0x3u << 11)) {
   80cd2:	88bb      	ldrh	r3, [r7, #4]
   80cd4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   80cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   80cdc:	d003      	beq.n	80ce6 <udd_ep_alloc+0xde>
   80cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   80ce2:	d003      	beq.n	80cec <udd_ep_alloc+0xe4>
   80ce4:	e005      	b.n	80cf2 <udd_ep_alloc+0xea>
		case (0x1u << 11):
			nb_tran = 2;
   80ce6:	2302      	movs	r3, #2
   80ce8:	74fb      	strb	r3, [r7, #19]
			break;
   80cea:	e005      	b.n	80cf8 <udd_ep_alloc+0xf0>
		case (0x2u << 11):
			nb_tran = 3;
   80cec:	2303      	movs	r3, #3
   80cee:	74fb      	strb	r3, [r7, #19]
			break;
   80cf0:	e002      	b.n	80cf8 <udd_ep_alloc+0xf0>
		default:
			nb_tran = 1;
   80cf2:	2301      	movs	r3, #1
   80cf4:	74fb      	strb	r3, [r7, #19]
			break;
   80cf6:	bf00      	nop
		}
		MaxEndpointSize &= ~(0x3u << 11);
   80cf8:	88bb      	ldrh	r3, [r7, #4]
   80cfa:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
   80cfe:	80bb      	strh	r3, [r7, #4]
   80d00:	e006      	b.n	80d10 <udd_ep_alloc+0x108>
	} else if (MaxEndpointSize & (0x3u << 11)) {
   80d02:	88bb      	ldrh	r3, [r7, #4]
   80d04:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   80d08:	2b00      	cmp	r3, #0
   80d0a:	d001      	beq.n	80d10 <udd_ep_alloc+0x108>
		// High BW not supported
		return false;
   80d0c:	2300      	movs	r3, #0
   80d0e:	e14c      	b.n	80faa <udd_ep_alloc+0x3a2>
	Assert(MaxEndpointSize <= udd_get_endpoint_size_max(ep));
	Assert(nb_bank <= udd_get_endpoint_bank_max_nbr(ep));

	// Set configuration of new endpoint
	// Note: NB_TRANS is at maximum for isochronous endpoint, else 0 (ignored).
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   80d10:	4c7f      	ldr	r4, [pc, #508]	; (80f10 <udd_ep_alloc+0x308>)
   80d12:	79f9      	ldrb	r1, [r7, #7]
   80d14:	4a7e      	ldr	r2, [pc, #504]	; (80f10 <udd_ep_alloc+0x308>)
   80d16:	79fb      	ldrb	r3, [r7, #7]
   80d18:	3308      	adds	r3, #8
   80d1a:	015b      	lsls	r3, r3, #5
   80d1c:	4413      	add	r3, r2
   80d1e:	681b      	ldr	r3, [r3, #0]
   80d20:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   80d24:	f023 0303 	bic.w	r3, r3, #3
   80d28:	79ba      	ldrb	r2, [r7, #6]
   80d2a:	0112      	lsls	r2, r2, #4
   80d2c:	f002 0030 	and.w	r0, r2, #48	; 0x30
   80d30:	7c3a      	ldrb	r2, [r7, #16]
   80d32:	2a00      	cmp	r2, #0
   80d34:	d001      	beq.n	80d3a <udd_ep_alloc+0x132>
   80d36:	2208      	movs	r2, #8
   80d38:	e000      	b.n	80d3c <udd_ep_alloc+0x134>
   80d3a:	2200      	movs	r2, #0
   80d3c:	4310      	orrs	r0, r2
   80d3e:	88ba      	ldrh	r2, [r7, #4]
   80d40:	2a08      	cmp	r2, #8
   80d42:	d903      	bls.n	80d4c <udd_ep_alloc+0x144>
   80d44:	88ba      	ldrh	r2, [r7, #4]
   80d46:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   80d4a:	da08      	bge.n	80d5e <udd_ep_alloc+0x156>
   80d4c:	88ba      	ldrh	r2, [r7, #4]
   80d4e:	2a08      	cmp	r2, #8
   80d50:	d903      	bls.n	80d5a <udd_ep_alloc+0x152>
   80d52:	88ba      	ldrh	r2, [r7, #4]
   80d54:	0052      	lsls	r2, r2, #1
   80d56:	3a01      	subs	r2, #1
   80d58:	e003      	b.n	80d62 <udd_ep_alloc+0x15a>
   80d5a:	220f      	movs	r2, #15
   80d5c:	e001      	b.n	80d62 <udd_ep_alloc+0x15a>
   80d5e:	f240 72ff 	movw	r2, #2047	; 0x7ff
   80d62:	fab2 f282 	clz	r2, r2
   80d66:	f1c2 021c 	rsb	r2, r2, #28
   80d6a:	4310      	orrs	r0, r2
   80d6c:	7d3a      	ldrb	r2, [r7, #20]
   80d6e:	0192      	lsls	r2, r2, #6
   80d70:	b2d2      	uxtb	r2, r2
   80d72:	4310      	orrs	r0, r2
   80d74:	7c7a      	ldrb	r2, [r7, #17]
   80d76:	2a00      	cmp	r2, #0
   80d78:	d004      	beq.n	80d84 <udd_ep_alloc+0x17c>
   80d7a:	7cfa      	ldrb	r2, [r7, #19]
   80d7c:	0212      	lsls	r2, r2, #8
   80d7e:	f402 7240 	and.w	r2, r2, #768	; 0x300
   80d82:	e000      	b.n	80d86 <udd_ep_alloc+0x17e>
   80d84:	2200      	movs	r2, #0
   80d86:	4302      	orrs	r2, r0
   80d88:	f3c2 0209 	ubfx	r2, r2, #0, #10
   80d8c:	431a      	orrs	r2, r3
   80d8e:	f101 0308 	add.w	r3, r1, #8
   80d92:	015b      	lsls	r3, r3, #5
   80d94:	4423      	add	r3, r4
   80d96:	601a      	str	r2, [r3, #0]
			MaxEndpointSize, bank, (b_iso_hbw)?nb_tran:0);
	if (!Is_udd_endpoint_mapped(ep)) {
   80d98:	4a5d      	ldr	r2, [pc, #372]	; (80f10 <udd_ep_alloc+0x308>)
   80d9a:	79fb      	ldrb	r3, [r7, #7]
   80d9c:	3308      	adds	r3, #8
   80d9e:	015b      	lsls	r3, r3, #5
   80da0:	4413      	add	r3, r2
   80da2:	681b      	ldr	r3, [r3, #0]
   80da4:	2b00      	cmp	r3, #0
   80da6:	db01      	blt.n	80dac <udd_ep_alloc+0x1a4>
		return false;
   80da8:	2300      	movs	r3, #0
   80daa:	e0fe      	b.n	80faa <udd_ep_alloc+0x3a2>
	}
	udd_enable_endpoint(ep);
   80dac:	4a58      	ldr	r2, [pc, #352]	; (80f10 <udd_ep_alloc+0x308>)
   80dae:	79fb      	ldrb	r3, [r7, #7]
   80db0:	3308      	adds	r3, #8
   80db2:	015b      	lsls	r3, r3, #5
   80db4:	4413      	add	r3, r2
   80db6:	3304      	adds	r3, #4
   80db8:	2201      	movs	r2, #1
   80dba:	601a      	str	r2, [r3, #0]

	// To avoid conflict during reorganization of the DPRAM
	// the superior endpoint must be unallocated and reallocated
	ep_allocated = 0;
   80dbc:	2300      	movs	r3, #0
   80dbe:	82fb      	strh	r3, [r7, #22]

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   80dc0:	2302      	movs	r3, #2
   80dc2:	74bb      	strb	r3, [r7, #18]
   80dc4:	e039      	b.n	80e3a <udd_ep_alloc+0x232>
		if (Is_udd_endpoint_enabled(i)) {
   80dc6:	4a52      	ldr	r2, [pc, #328]	; (80f10 <udd_ep_alloc+0x308>)
   80dc8:	7cbb      	ldrb	r3, [r7, #18]
   80dca:	015b      	lsls	r3, r3, #5
   80dcc:	4413      	add	r3, r2
   80dce:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   80dd2:	681b      	ldr	r3, [r3, #0]
   80dd4:	f003 0301 	and.w	r3, r3, #1
   80dd8:	2b00      	cmp	r3, #0
   80dda:	d02b      	beq.n	80e34 <udd_ep_alloc+0x22c>
			// Save number of bank value
			bank = udd_get_endpoint_bank(i);
   80ddc:	4a4c      	ldr	r2, [pc, #304]	; (80f10 <udd_ep_alloc+0x308>)
   80dde:	7cbb      	ldrb	r3, [r7, #18]
   80de0:	3308      	adds	r3, #8
   80de2:	015b      	lsls	r3, r3, #5
   80de4:	4413      	add	r3, r2
   80de6:	681b      	ldr	r3, [r3, #0]
   80de8:	099b      	lsrs	r3, r3, #6
   80dea:	b2db      	uxtb	r3, r3
   80dec:	f003 0303 	and.w	r3, r3, #3
   80df0:	753b      	strb	r3, [r7, #20]
			ep_allocated |=  bank << (i * 2);
   80df2:	7d3a      	ldrb	r2, [r7, #20]
   80df4:	7cbb      	ldrb	r3, [r7, #18]
   80df6:	005b      	lsls	r3, r3, #1
   80df8:	fa02 f303 	lsl.w	r3, r2, r3
   80dfc:	b21a      	sxth	r2, r3
   80dfe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   80e02:	4313      	orrs	r3, r2
   80e04:	b21b      	sxth	r3, r3
   80e06:	82fb      	strh	r3, [r7, #22]
			// Disable and unallocate endpoint
			udd_disable_endpoint(i);
   80e08:	4a41      	ldr	r2, [pc, #260]	; (80f10 <udd_ep_alloc+0x308>)
   80e0a:	7cbb      	ldrb	r3, [r7, #18]
   80e0c:	015b      	lsls	r3, r3, #5
   80e0e:	4413      	add	r3, r2
   80e10:	f503 7384 	add.w	r3, r3, #264	; 0x108
   80e14:	2201      	movs	r2, #1
   80e16:	601a      	str	r2, [r3, #0]
			udd_configure_endpoint_bank(i, 0);
   80e18:	493d      	ldr	r1, [pc, #244]	; (80f10 <udd_ep_alloc+0x308>)
   80e1a:	7cbb      	ldrb	r3, [r7, #18]
   80e1c:	483c      	ldr	r0, [pc, #240]	; (80f10 <udd_ep_alloc+0x308>)
   80e1e:	7cba      	ldrb	r2, [r7, #18]
   80e20:	3208      	adds	r2, #8
   80e22:	0152      	lsls	r2, r2, #5
   80e24:	4402      	add	r2, r0
   80e26:	6812      	ldr	r2, [r2, #0]
   80e28:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   80e2c:	3308      	adds	r3, #8
   80e2e:	015b      	lsls	r3, r3, #5
   80e30:	440b      	add	r3, r1
   80e32:	601a      	str	r2, [r3, #0]
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   80e34:	7cbb      	ldrb	r3, [r7, #18]
   80e36:	3b01      	subs	r3, #1
   80e38:	74bb      	strb	r3, [r7, #18]
   80e3a:	7cba      	ldrb	r2, [r7, #18]
   80e3c:	79fb      	ldrb	r3, [r7, #7]
   80e3e:	429a      	cmp	r2, r3
   80e40:	d2c1      	bcs.n	80dc6 <udd_ep_alloc+0x1be>

		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   80e42:	79fb      	ldrb	r3, [r7, #7]
   80e44:	74bb      	strb	r3, [r7, #18]
   80e46:	e0ab      	b.n	80fa0 <udd_ep_alloc+0x398>
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   80e48:	7cbb      	ldrb	r3, [r7, #18]
   80e4a:	1e5a      	subs	r2, r3, #1
   80e4c:	4613      	mov	r3, r2
   80e4e:	005b      	lsls	r3, r3, #1
   80e50:	4413      	add	r3, r2
   80e52:	00db      	lsls	r3, r3, #3
   80e54:	4a2f      	ldr	r2, [pc, #188]	; (80f14 <udd_ep_alloc+0x30c>)
   80e56:	4413      	add	r3, r2
   80e58:	60fb      	str	r3, [r7, #12]
		bool b_restart = ptr_job->busy;
   80e5a:	68fb      	ldr	r3, [r7, #12]
   80e5c:	7d1b      	ldrb	r3, [r3, #20]
   80e5e:	f3c3 0300 	ubfx	r3, r3, #0, #1
   80e62:	b2db      	uxtb	r3, r3
   80e64:	2b00      	cmp	r3, #0
   80e66:	bf14      	ite	ne
   80e68:	2301      	movne	r3, #1
   80e6a:	2300      	moveq	r3, #0
   80e6c:	72fb      	strb	r3, [r7, #11]
		// Unallocated banks?
		bank = (ep_allocated >> (i * 2)) & 0x03;
   80e6e:	8afa      	ldrh	r2, [r7, #22]
   80e70:	7cbb      	ldrb	r3, [r7, #18]
   80e72:	005b      	lsls	r3, r3, #1
   80e74:	fa42 f303 	asr.w	r3, r2, r3
   80e78:	b2db      	uxtb	r3, r3
   80e7a:	f003 0303 	and.w	r3, r3, #3
   80e7e:	753b      	strb	r3, [r7, #20]
		if (bank == 0) {
   80e80:	7d3b      	ldrb	r3, [r7, #20]
   80e82:	2b00      	cmp	r3, #0
   80e84:	f000 8088 	beq.w	80f98 <udd_ep_alloc+0x390>
			continue;
		}
		// Restart running job because
		// memory window slides up and its data is lost
		ptr_job->busy = false;
   80e88:	68fa      	ldr	r2, [r7, #12]
   80e8a:	7d13      	ldrb	r3, [r2, #20]
   80e8c:	f36f 0300 	bfc	r3, #0, #1
   80e90:	7513      	strb	r3, [r2, #20]
		// Re-allocate memory
		udd_configure_endpoint_bank(i, bank);
   80e92:	481f      	ldr	r0, [pc, #124]	; (80f10 <udd_ep_alloc+0x308>)
   80e94:	7cbb      	ldrb	r3, [r7, #18]
   80e96:	491e      	ldr	r1, [pc, #120]	; (80f10 <udd_ep_alloc+0x308>)
   80e98:	7cba      	ldrb	r2, [r7, #18]
   80e9a:	3208      	adds	r2, #8
   80e9c:	0152      	lsls	r2, r2, #5
   80e9e:	440a      	add	r2, r1
   80ea0:	6812      	ldr	r2, [r2, #0]
   80ea2:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
   80ea6:	7d3a      	ldrb	r2, [r7, #20]
   80ea8:	0192      	lsls	r2, r2, #6
   80eaa:	b2d2      	uxtb	r2, r2
   80eac:	430a      	orrs	r2, r1
   80eae:	3308      	adds	r3, #8
   80eb0:	015b      	lsls	r3, r3, #5
   80eb2:	4403      	add	r3, r0
   80eb4:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint(i);
   80eb6:	4a16      	ldr	r2, [pc, #88]	; (80f10 <udd_ep_alloc+0x308>)
   80eb8:	7cbb      	ldrb	r3, [r7, #18]
   80eba:	3308      	adds	r3, #8
   80ebc:	015b      	lsls	r3, r3, #5
   80ebe:	4413      	add	r3, r2
   80ec0:	3304      	adds	r3, #4
   80ec2:	2201      	movs	r2, #1
   80ec4:	601a      	str	r2, [r3, #0]
		if (!Is_udd_endpoint_mapped(i)) {
   80ec6:	4a12      	ldr	r2, [pc, #72]	; (80f10 <udd_ep_alloc+0x308>)
   80ec8:	7cbb      	ldrb	r3, [r7, #18]
   80eca:	3308      	adds	r3, #8
   80ecc:	015b      	lsls	r3, r3, #5
   80ece:	4413      	add	r3, r2
   80ed0:	681b      	ldr	r3, [r3, #0]
   80ed2:	2b00      	cmp	r3, #0
   80ed4:	db20      	blt.n	80f18 <udd_ep_alloc+0x310>
			dbg_print("ErrRealloc%d-JobE ", i);
			if (NULL == ptr_job->call_trans) {
   80ed6:	68fb      	ldr	r3, [r7, #12]
   80ed8:	681b      	ldr	r3, [r3, #0]
   80eda:	2b00      	cmp	r3, #0
   80edc:	d101      	bne.n	80ee2 <udd_ep_alloc+0x2da>
				return false;
   80ede:	2300      	movs	r3, #0
   80ee0:	e063      	b.n	80faa <udd_ep_alloc+0x3a2>
			}
			if (Is_udd_endpoint_in(i)) {
   80ee2:	4a0b      	ldr	r2, [pc, #44]	; (80f10 <udd_ep_alloc+0x308>)
   80ee4:	7cbb      	ldrb	r3, [r7, #18]
   80ee6:	3308      	adds	r3, #8
   80ee8:	015b      	lsls	r3, r3, #5
   80eea:	4413      	add	r3, r2
   80eec:	681b      	ldr	r3, [r3, #0]
   80eee:	f003 0308 	and.w	r3, r3, #8
   80ef2:	2b00      	cmp	r3, #0
   80ef4:	d003      	beq.n	80efe <udd_ep_alloc+0x2f6>
				i |= USB_EP_DIR_IN;
   80ef6:	7cbb      	ldrb	r3, [r7, #18]
   80ef8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   80efc:	74bb      	strb	r3, [r7, #18]
			}
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   80efe:	68fb      	ldr	r3, [r7, #12]
   80f00:	681b      	ldr	r3, [r3, #0]
   80f02:	68fa      	ldr	r2, [r7, #12]
   80f04:	68d1      	ldr	r1, [r2, #12]
   80f06:	7cba      	ldrb	r2, [r7, #18]
   80f08:	2001      	movs	r0, #1
   80f0a:	4798      	blx	r3
					ptr_job->buf_cnt, i);
			return false;
   80f0c:	2300      	movs	r3, #0
   80f0e:	e04c      	b.n	80faa <udd_ep_alloc+0x3a2>
   80f10:	400a4000 	.word	0x400a4000
   80f14:	20000c08 	.word	0x20000c08
		}
		udd_enable_endpoint_bank_autoswitch(i);
   80f18:	4926      	ldr	r1, [pc, #152]	; (80fb4 <udd_ep_alloc+0x3ac>)
   80f1a:	7cbb      	ldrb	r3, [r7, #18]
   80f1c:	4825      	ldr	r0, [pc, #148]	; (80fb4 <udd_ep_alloc+0x3ac>)
   80f1e:	7cba      	ldrb	r2, [r7, #18]
   80f20:	3208      	adds	r2, #8
   80f22:	0152      	lsls	r2, r2, #5
   80f24:	4402      	add	r2, r0
   80f26:	3204      	adds	r2, #4
   80f28:	6812      	ldr	r2, [r2, #0]
   80f2a:	f042 0202 	orr.w	r2, r2, #2
   80f2e:	3308      	adds	r3, #8
   80f30:	015b      	lsls	r3, r3, #5
   80f32:	440b      	add	r3, r1
   80f34:	3304      	adds	r3, #4
   80f36:	601a      	str	r2, [r3, #0]
		if (b_restart) {
   80f38:	7afb      	ldrb	r3, [r7, #11]
   80f3a:	2b00      	cmp	r3, #0
   80f3c:	d02d      	beq.n	80f9a <udd_ep_alloc+0x392>
			// Re-run the job remaining part
			ptr_job->buf_cnt -= ptr_job->buf_load;
   80f3e:	68fb      	ldr	r3, [r7, #12]
   80f40:	68da      	ldr	r2, [r3, #12]
   80f42:	68fb      	ldr	r3, [r7, #12]
   80f44:	691b      	ldr	r3, [r3, #16]
   80f46:	1ad2      	subs	r2, r2, r3
   80f48:	68fb      	ldr	r3, [r7, #12]
   80f4a:	60da      	str	r2, [r3, #12]
			b_restart = udd_ep_run(i,
					ptr_job->b_shortpacket,
   80f4c:	68fb      	ldr	r3, [r7, #12]
   80f4e:	7d1b      	ldrb	r3, [r3, #20]
   80f50:	f3c3 0340 	ubfx	r3, r3, #1, #1
   80f54:	b2db      	uxtb	r3, r3
			b_restart = udd_ep_run(i,
   80f56:	2b00      	cmp	r3, #0
   80f58:	bf14      	ite	ne
   80f5a:	2301      	movne	r3, #1
   80f5c:	2300      	moveq	r3, #0
   80f5e:	b2d9      	uxtb	r1, r3
					&ptr_job->buf[ptr_job->buf_cnt],
   80f60:	68fb      	ldr	r3, [r7, #12]
   80f62:	685a      	ldr	r2, [r3, #4]
   80f64:	68fb      	ldr	r3, [r7, #12]
   80f66:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   80f68:	18d4      	adds	r4, r2, r3
					ptr_job->buf_size
   80f6a:	68fb      	ldr	r3, [r7, #12]
   80f6c:	689a      	ldr	r2, [r3, #8]
						- ptr_job->buf_cnt,
   80f6e:	68fb      	ldr	r3, [r7, #12]
   80f70:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   80f72:	1ad2      	subs	r2, r2, r3
   80f74:	68fb      	ldr	r3, [r7, #12]
   80f76:	681b      	ldr	r3, [r3, #0]
   80f78:	7cb8      	ldrb	r0, [r7, #18]
   80f7a:	9300      	str	r3, [sp, #0]
   80f7c:	4613      	mov	r3, r2
   80f7e:	4622      	mov	r2, r4
   80f80:	4c0d      	ldr	r4, [pc, #52]	; (80fb8 <udd_ep_alloc+0x3b0>)
   80f82:	47a0      	blx	r4
   80f84:	4603      	mov	r3, r0
   80f86:	72fb      	strb	r3, [r7, #11]
					ptr_job->call_trans);
			if (!b_restart) {
   80f88:	7afb      	ldrb	r3, [r7, #11]
   80f8a:	f083 0301 	eor.w	r3, r3, #1
   80f8e:	b2db      	uxtb	r3, r3
   80f90:	2b00      	cmp	r3, #0
   80f92:	d002      	beq.n	80f9a <udd_ep_alloc+0x392>
				dbg_print("ErrReRun%d ", i);
				return false;
   80f94:	2300      	movs	r3, #0
   80f96:	e008      	b.n	80faa <udd_ep_alloc+0x3a2>
			continue;
   80f98:	bf00      	nop
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   80f9a:	7cbb      	ldrb	r3, [r7, #18]
   80f9c:	3301      	adds	r3, #1
   80f9e:	74bb      	strb	r3, [r7, #18]
   80fa0:	7cbb      	ldrb	r3, [r7, #18]
   80fa2:	2b02      	cmp	r3, #2
   80fa4:	f67f af50 	bls.w	80e48 <udd_ep_alloc+0x240>
			}
		}
	}
	dbg_print("ep_alloc(%d:%08x) ", ep, UDPHS->UDPHS_EPT[ep].UDPHS_EPTCFG);
	return true;
   80fa8:	2301      	movs	r3, #1
}
   80faa:	4618      	mov	r0, r3
   80fac:	371c      	adds	r7, #28
   80fae:	46bd      	mov	sp, r7
   80fb0:	bd90      	pop	{r4, r7, pc}
   80fb2:	bf00      	nop
   80fb4:	400a4000 	.word	0x400a4000
   80fb8:	000812e9 	.word	0x000812e9

00080fbc <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
   80fbc:	b580      	push	{r7, lr}
   80fbe:	b084      	sub	sp, #16
   80fc0:	af00      	add	r7, sp, #0
   80fc2:	4603      	mov	r3, r0
   80fc4:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   80fc6:	79fb      	ldrb	r3, [r7, #7]
   80fc8:	f003 030f 	and.w	r3, r3, #15
   80fcc:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   80fce:	7bfb      	ldrb	r3, [r7, #15]
   80fd0:	2b02      	cmp	r3, #2
   80fd2:	d828      	bhi.n	81026 <udd_ep_free+0x6a>
		return;
	}
	udd_disable_endpoint(ep_index);
   80fd4:	4a16      	ldr	r2, [pc, #88]	; (81030 <udd_ep_free+0x74>)
   80fd6:	7bfb      	ldrb	r3, [r7, #15]
   80fd8:	015b      	lsls	r3, r3, #5
   80fda:	4413      	add	r3, r2
   80fdc:	f503 7384 	add.w	r3, r3, #264	; 0x108
   80fe0:	2201      	movs	r2, #1
   80fe2:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint_bank(ep_index, 0);
   80fe4:	4912      	ldr	r1, [pc, #72]	; (81030 <udd_ep_free+0x74>)
   80fe6:	7bfb      	ldrb	r3, [r7, #15]
   80fe8:	4811      	ldr	r0, [pc, #68]	; (81030 <udd_ep_free+0x74>)
   80fea:	7bfa      	ldrb	r2, [r7, #15]
   80fec:	3208      	adds	r2, #8
   80fee:	0152      	lsls	r2, r2, #5
   80ff0:	4402      	add	r2, r0
   80ff2:	6812      	ldr	r2, [r2, #0]
   80ff4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   80ff8:	3308      	adds	r3, #8
   80ffa:	015b      	lsls	r3, r3, #5
   80ffc:	440b      	add	r3, r1
   80ffe:	601a      	str	r2, [r3, #0]
	udd_ep_abort_job(ep);
   81000:	79fb      	ldrb	r3, [r7, #7]
   81002:	4618      	mov	r0, r3
   81004:	4b0b      	ldr	r3, [pc, #44]	; (81034 <udd_ep_free+0x78>)
   81006:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   81008:	7bfb      	ldrb	r3, [r7, #15]
   8100a:	1e5a      	subs	r2, r3, #1
   8100c:	490a      	ldr	r1, [pc, #40]	; (81038 <udd_ep_free+0x7c>)
   8100e:	4613      	mov	r3, r2
   81010:	005b      	lsls	r3, r3, #1
   81012:	4413      	add	r3, r2
   81014:	00db      	lsls	r3, r3, #3
   81016:	440b      	add	r3, r1
   81018:	f103 0210 	add.w	r2, r3, #16
   8101c:	7913      	ldrb	r3, [r2, #4]
   8101e:	f36f 0382 	bfc	r3, #2, #1
   81022:	7113      	strb	r3, [r2, #4]
   81024:	e000      	b.n	81028 <udd_ep_free+0x6c>
		return;
   81026:	bf00      	nop
}
   81028:	3710      	adds	r7, #16
   8102a:	46bd      	mov	sp, r7
   8102c:	bd80      	pop	{r7, pc}
   8102e:	bf00      	nop
   81030:	400a4000 	.word	0x400a4000
   81034:	00081d9d 	.word	0x00081d9d
   81038:	20000c08 	.word	0x20000c08

0008103c <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
   8103c:	b480      	push	{r7}
   8103e:	b085      	sub	sp, #20
   81040:	af00      	add	r7, sp, #0
   81042:	4603      	mov	r3, r0
   81044:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   81046:	79fb      	ldrb	r3, [r7, #7]
   81048:	f003 030f 	and.w	r3, r3, #15
   8104c:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   8104e:	7bfb      	ldrb	r3, [r7, #15]
   81050:	1e5a      	subs	r2, r3, #1
   81052:	4613      	mov	r3, r2
   81054:	005b      	lsls	r3, r3, #1
   81056:	4413      	add	r3, r2
   81058:	00db      	lsls	r3, r3, #3
   8105a:	4a10      	ldr	r2, [pc, #64]	; (8109c <udd_ep_is_halted+0x60>)
   8105c:	4413      	add	r3, r2
   8105e:	60bb      	str	r3, [r7, #8]
	return (Is_udd_endpoint_stall_requested(ep_index)
   81060:	4a0f      	ldr	r2, [pc, #60]	; (810a0 <udd_ep_is_halted+0x64>)
   81062:	7bfb      	ldrb	r3, [r7, #15]
   81064:	015b      	lsls	r3, r3, #5
   81066:	4413      	add	r3, r2
   81068:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8106c:	681b      	ldr	r3, [r3, #0]
   8106e:	f003 0320 	and.w	r3, r3, #32
			|| ptr_job->stall_requested);
   81072:	2b00      	cmp	r3, #0
   81074:	d106      	bne.n	81084 <udd_ep_is_halted+0x48>
   81076:	68bb      	ldr	r3, [r7, #8]
   81078:	7d1b      	ldrb	r3, [r3, #20]
   8107a:	f003 0304 	and.w	r3, r3, #4
   8107e:	b2db      	uxtb	r3, r3
   81080:	2b00      	cmp	r3, #0
   81082:	d001      	beq.n	81088 <udd_ep_is_halted+0x4c>
   81084:	2301      	movs	r3, #1
   81086:	e000      	b.n	8108a <udd_ep_is_halted+0x4e>
   81088:	2300      	movs	r3, #0
   8108a:	f003 0301 	and.w	r3, r3, #1
   8108e:	b2db      	uxtb	r3, r3
}
   81090:	4618      	mov	r0, r3
   81092:	3714      	adds	r7, #20
   81094:	46bd      	mov	sp, r7
   81096:	bc80      	pop	{r7}
   81098:	4770      	bx	lr
   8109a:	bf00      	nop
   8109c:	20000c08 	.word	0x20000c08
   810a0:	400a4000 	.word	0x400a4000

000810a4 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   810a4:	b480      	push	{r7}
   810a6:	b085      	sub	sp, #20
   810a8:	af00      	add	r7, sp, #0
   810aa:	4603      	mov	r3, r0
   810ac:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   810ae:	79fb      	ldrb	r3, [r7, #7]
   810b0:	f003 030f 	and.w	r3, r3, #15
   810b4:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   810b6:	7bfb      	ldrb	r3, [r7, #15]
   810b8:	2b02      	cmp	r3, #2
   810ba:	d901      	bls.n	810c0 <udd_ep_set_halt+0x1c>
		return false;
   810bc:	2300      	movs	r3, #0
   810be:	e071      	b.n	811a4 <udd_ep_set_halt+0x100>
	}

	ptr_job = &udd_ep_job[ep_index - 1];
   810c0:	7bfb      	ldrb	r3, [r7, #15]
   810c2:	1e5a      	subs	r2, r3, #1
   810c4:	4613      	mov	r3, r2
   810c6:	005b      	lsls	r3, r3, #1
   810c8:	4413      	add	r3, r2
   810ca:	00db      	lsls	r3, r3, #3
   810cc:	4a38      	ldr	r2, [pc, #224]	; (811b0 <udd_ep_set_halt+0x10c>)
   810ce:	4413      	add	r3, r2
   810d0:	60bb      	str	r3, [r7, #8]

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   810d2:	4a38      	ldr	r2, [pc, #224]	; (811b4 <udd_ep_set_halt+0x110>)
   810d4:	7bfb      	ldrb	r3, [r7, #15]
   810d6:	015b      	lsls	r3, r3, #5
   810d8:	4413      	add	r3, r2
   810da:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   810de:	681b      	ldr	r3, [r3, #0]
   810e0:	f003 0320 	and.w	r3, r3, #32
   810e4:	2b00      	cmp	r3, #0
   810e6:	d106      	bne.n	810f6 <udd_ep_set_halt+0x52>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   810e8:	68bb      	ldr	r3, [r7, #8]
   810ea:	7d1b      	ldrb	r3, [r3, #20]
   810ec:	f003 0304 	and.w	r3, r3, #4
   810f0:	b2db      	uxtb	r3, r3
   810f2:	2b00      	cmp	r3, #0
   810f4:	d001      	beq.n	810fa <udd_ep_set_halt+0x56>
		return true; // Already STALL
   810f6:	2301      	movs	r3, #1
   810f8:	e054      	b.n	811a4 <udd_ep_set_halt+0x100>
	}

	if (ptr_job->busy == true) {
   810fa:	68bb      	ldr	r3, [r7, #8]
   810fc:	7d1b      	ldrb	r3, [r3, #20]
   810fe:	f003 0301 	and.w	r3, r3, #1
   81102:	b2db      	uxtb	r3, r3
   81104:	2b00      	cmp	r3, #0
   81106:	d001      	beq.n	8110c <udd_ep_set_halt+0x68>
		return false; // Job on going, stall impossible
   81108:	2300      	movs	r3, #0
   8110a:	e04b      	b.n	811a4 <udd_ep_set_halt+0x100>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   8110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81110:	2b00      	cmp	r3, #0
   81112:	da25      	bge.n	81160 <udd_ep_set_halt+0xbc>
   81114:	4a27      	ldr	r2, [pc, #156]	; (811b4 <udd_ep_set_halt+0x110>)
   81116:	7bfb      	ldrb	r3, [r7, #15]
   81118:	015b      	lsls	r3, r3, #5
   8111a:	4413      	add	r3, r2
   8111c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   81120:	681b      	ldr	r3, [r3, #0]
   81122:	0c9b      	lsrs	r3, r3, #18
   81124:	f003 0303 	and.w	r3, r3, #3
   81128:	2b00      	cmp	r3, #0
   8112a:	d019      	beq.n	81160 <udd_ep_set_halt+0xbc>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
   8112c:	68ba      	ldr	r2, [r7, #8]
   8112e:	7d13      	ldrb	r3, [r2, #20]
   81130:	f043 0304 	orr.w	r3, r3, #4
   81134:	7513      	strb	r3, [r2, #20]
			udd_enable_bank_interrupt(ep_index);
   81136:	4a1f      	ldr	r2, [pc, #124]	; (811b4 <udd_ep_set_halt+0x110>)
   81138:	7bfb      	ldrb	r3, [r7, #15]
   8113a:	3308      	adds	r3, #8
   8113c:	015b      	lsls	r3, r3, #5
   8113e:	4413      	add	r3, r2
   81140:	3304      	adds	r3, #4
   81142:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   81146:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep_index);
   81148:	491a      	ldr	r1, [pc, #104]	; (811b4 <udd_ep_set_halt+0x110>)
   8114a:	4b1a      	ldr	r3, [pc, #104]	; (811b4 <udd_ep_set_halt+0x110>)
   8114c:	691a      	ldr	r2, [r3, #16]
   8114e:	7bfb      	ldrb	r3, [r7, #15]
   81150:	f44f 7080 	mov.w	r0, #256	; 0x100
   81154:	fa00 f303 	lsl.w	r3, r0, r3
   81158:	4313      	orrs	r3, r2
   8115a:	610b      	str	r3, [r1, #16]
			dbg_print("<reqHalt%x> ", ep);
			return true;
   8115c:	2301      	movs	r3, #1
   8115e:	e021      	b.n	811a4 <udd_ep_set_halt+0x100>
	}

	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   81160:	4914      	ldr	r1, [pc, #80]	; (811b4 <udd_ep_set_halt+0x110>)
   81162:	7bfb      	ldrb	r3, [r7, #15]
   81164:	4813      	ldr	r0, [pc, #76]	; (811b4 <udd_ep_set_halt+0x110>)
   81166:	7bfa      	ldrb	r2, [r7, #15]
   81168:	0152      	lsls	r2, r2, #5
   8116a:	4402      	add	r2, r0
   8116c:	f502 7284 	add.w	r2, r2, #264	; 0x108
   81170:	6812      	ldr	r2, [r2, #0]
   81172:	f022 0202 	bic.w	r2, r2, #2
   81176:	015b      	lsls	r3, r3, #5
   81178:	440b      	add	r3, r1
   8117a:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8117e:	601a      	str	r2, [r3, #0]
	udd_ack_stall(ep_index);
   81180:	4a0c      	ldr	r2, [pc, #48]	; (811b4 <udd_ep_set_halt+0x110>)
   81182:	7bfb      	ldrb	r3, [r7, #15]
   81184:	015b      	lsls	r3, r3, #5
   81186:	4413      	add	r3, r2
   81188:	f503 738c 	add.w	r3, r3, #280	; 0x118
   8118c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81190:	601a      	str	r2, [r3, #0]
	udd_enable_stall_handshake(ep_index);
   81192:	4a08      	ldr	r2, [pc, #32]	; (811b4 <udd_ep_set_halt+0x110>)
   81194:	7bfb      	ldrb	r3, [r7, #15]
   81196:	015b      	lsls	r3, r3, #5
   81198:	4413      	add	r3, r2
   8119a:	f503 738a 	add.w	r3, r3, #276	; 0x114
   8119e:	2220      	movs	r2, #32
   811a0:	601a      	str	r2, [r3, #0]
	dbg_print("<Halt%x> ", ep);
	return true;
   811a2:	2301      	movs	r3, #1
}
   811a4:	4618      	mov	r0, r3
   811a6:	3714      	adds	r7, #20
   811a8:	46bd      	mov	sp, r7
   811aa:	bc80      	pop	{r7}
   811ac:	4770      	bx	lr
   811ae:	bf00      	nop
   811b0:	20000c08 	.word	0x20000c08
   811b4:	400a4000 	.word	0x400a4000

000811b8 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   811b8:	b580      	push	{r7, lr}
   811ba:	b084      	sub	sp, #16
   811bc:	af00      	add	r7, sp, #0
   811be:	4603      	mov	r3, r0
   811c0:	71fb      	strb	r3, [r7, #7]
	bool b_stall_cleared = false;
   811c2:	2300      	movs	r3, #0
   811c4:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   811c6:	79fb      	ldrb	r3, [r7, #7]
   811c8:	f003 030f 	and.w	r3, r3, #15
   811cc:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
   811ce:	79fb      	ldrb	r3, [r7, #7]
   811d0:	2b02      	cmp	r3, #2
   811d2:	d901      	bls.n	811d8 <udd_ep_clear_halt+0x20>
		return false;
   811d4:	2300      	movs	r3, #0
   811d6:	e07e      	b.n	812d6 <udd_ep_clear_halt+0x11e>
	ptr_job = &udd_ep_job[ep - 1];
   811d8:	79fb      	ldrb	r3, [r7, #7]
   811da:	1e5a      	subs	r2, r3, #1
   811dc:	4613      	mov	r3, r2
   811de:	005b      	lsls	r3, r3, #1
   811e0:	4413      	add	r3, r2
   811e2:	00db      	lsls	r3, r3, #3
   811e4:	4a3e      	ldr	r2, [pc, #248]	; (812e0 <udd_ep_clear_halt+0x128>)
   811e6:	4413      	add	r3, r2
   811e8:	60bb      	str	r3, [r7, #8]

	if (ptr_job->stall_requested) {
   811ea:	68bb      	ldr	r3, [r7, #8]
   811ec:	7d1b      	ldrb	r3, [r3, #20]
   811ee:	f003 0304 	and.w	r3, r3, #4
   811f2:	b2db      	uxtb	r3, r3
   811f4:	2b00      	cmp	r3, #0
   811f6:	d01a      	beq.n	8122e <udd_ep_clear_halt+0x76>
		// Endpoint stall has been requested but not done
		// Remove stall request
		dbg_print("<unWHalt%x> ", ep);
		ptr_job->stall_requested = false;
   811f8:	68ba      	ldr	r2, [r7, #8]
   811fa:	7d13      	ldrb	r3, [r2, #20]
   811fc:	f36f 0382 	bfc	r3, #2, #1
   81200:	7513      	strb	r3, [r2, #20]
		udd_disable_bank_interrupt(ep);
   81202:	4a38      	ldr	r2, [pc, #224]	; (812e4 <udd_ep_clear_halt+0x12c>)
   81204:	79fb      	ldrb	r3, [r7, #7]
   81206:	015b      	lsls	r3, r3, #5
   81208:	4413      	add	r3, r2
   8120a:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8120e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   81212:	601a      	str	r2, [r3, #0]
		udd_disable_endpoint_interrupt(ep);
   81214:	4933      	ldr	r1, [pc, #204]	; (812e4 <udd_ep_clear_halt+0x12c>)
   81216:	4b33      	ldr	r3, [pc, #204]	; (812e4 <udd_ep_clear_halt+0x12c>)
   81218:	691a      	ldr	r2, [r3, #16]
   8121a:	79fb      	ldrb	r3, [r7, #7]
   8121c:	f44f 7080 	mov.w	r0, #256	; 0x100
   81220:	fa00 f303 	lsl.w	r3, r0, r3
   81224:	43db      	mvns	r3, r3
   81226:	4013      	ands	r3, r2
   81228:	610b      	str	r3, [r1, #16]
		b_stall_cleared = true;
   8122a:	2301      	movs	r3, #1
   8122c:	73fb      	strb	r3, [r7, #15]
	}
	if (Is_udd_endpoint_stall_requested(ep)) {
   8122e:	4a2d      	ldr	r2, [pc, #180]	; (812e4 <udd_ep_clear_halt+0x12c>)
   81230:	79fb      	ldrb	r3, [r7, #7]
   81232:	015b      	lsls	r3, r3, #5
   81234:	4413      	add	r3, r2
   81236:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8123a:	681b      	ldr	r3, [r3, #0]
   8123c:	f003 0320 	and.w	r3, r3, #32
   81240:	2b00      	cmp	r3, #0
   81242:	d035      	beq.n	812b0 <udd_ep_clear_halt+0xf8>
		dbg_print("<unHalt%x> ", ep);
		if (Is_udd_stall(ep)) {
   81244:	4a27      	ldr	r2, [pc, #156]	; (812e4 <udd_ep_clear_halt+0x12c>)
   81246:	79fb      	ldrb	r3, [r7, #7]
   81248:	015b      	lsls	r3, r3, #5
   8124a:	4413      	add	r3, r2
   8124c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   81250:	681b      	ldr	r3, [r3, #0]
   81252:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   81256:	2b00      	cmp	r3, #0
   81258:	d010      	beq.n	8127c <udd_ep_clear_halt+0xc4>
			udd_ack_stall(ep);
   8125a:	4a22      	ldr	r2, [pc, #136]	; (812e4 <udd_ep_clear_halt+0x12c>)
   8125c:	79fb      	ldrb	r3, [r7, #7]
   8125e:	015b      	lsls	r3, r3, #5
   81260:	4413      	add	r3, r2
   81262:	f503 738c 	add.w	r3, r3, #280	; 0x118
   81266:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8126a:	601a      	str	r2, [r3, #0]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
   8126c:	4a1d      	ldr	r2, [pc, #116]	; (812e4 <udd_ep_clear_halt+0x12c>)
   8126e:	79fb      	ldrb	r3, [r7, #7]
   81270:	015b      	lsls	r3, r3, #5
   81272:	4413      	add	r3, r2
   81274:	f503 738c 	add.w	r3, r3, #280	; 0x118
   81278:	2240      	movs	r2, #64	; 0x40
   8127a:	601a      	str	r2, [r3, #0]
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
   8127c:	4a19      	ldr	r2, [pc, #100]	; (812e4 <udd_ep_clear_halt+0x12c>)
   8127e:	79fb      	ldrb	r3, [r7, #7]
   81280:	015b      	lsls	r3, r3, #5
   81282:	4413      	add	r3, r2
   81284:	f503 738c 	add.w	r3, r3, #280	; 0x118
   81288:	2220      	movs	r2, #32
   8128a:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_bank_autoswitch(ep);
   8128c:	4915      	ldr	r1, [pc, #84]	; (812e4 <udd_ep_clear_halt+0x12c>)
   8128e:	79fb      	ldrb	r3, [r7, #7]
   81290:	4814      	ldr	r0, [pc, #80]	; (812e4 <udd_ep_clear_halt+0x12c>)
   81292:	79fa      	ldrb	r2, [r7, #7]
   81294:	3208      	adds	r2, #8
   81296:	0152      	lsls	r2, r2, #5
   81298:	4402      	add	r2, r0
   8129a:	3204      	adds	r2, #4
   8129c:	6812      	ldr	r2, [r2, #0]
   8129e:	f042 0202 	orr.w	r2, r2, #2
   812a2:	3308      	adds	r3, #8
   812a4:	015b      	lsls	r3, r3, #5
   812a6:	440b      	add	r3, r1
   812a8:	3304      	adds	r3, #4
   812aa:	601a      	str	r2, [r3, #0]
		b_stall_cleared = true;
   812ac:	2301      	movs	r3, #1
   812ae:	73fb      	strb	r3, [r7, #15]
	}
	if (b_stall_cleared) {
   812b0:	7bfb      	ldrb	r3, [r7, #15]
   812b2:	2b00      	cmp	r3, #0
   812b4:	d00e      	beq.n	812d4 <udd_ep_clear_halt+0x11c>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   812b6:	68bb      	ldr	r3, [r7, #8]
   812b8:	7d1b      	ldrb	r3, [r3, #20]
   812ba:	f003 0301 	and.w	r3, r3, #1
   812be:	b2db      	uxtb	r3, r3
   812c0:	2b00      	cmp	r3, #0
   812c2:	d007      	beq.n	812d4 <udd_ep_clear_halt+0x11c>
			ptr_job->busy = false;
   812c4:	68ba      	ldr	r2, [r7, #8]
   812c6:	7d13      	ldrb	r3, [r2, #20]
   812c8:	f36f 0300 	bfc	r3, #0, #1
   812cc:	7513      	strb	r3, [r2, #20]
			ptr_job->call_nohalt();
   812ce:	68bb      	ldr	r3, [r7, #8]
   812d0:	681b      	ldr	r3, [r3, #0]
   812d2:	4798      	blx	r3
		}
	}
	return true;
   812d4:	2301      	movs	r3, #1
}
   812d6:	4618      	mov	r0, r3
   812d8:	3710      	adds	r7, #16
   812da:	46bd      	mov	sp, r7
   812dc:	bd80      	pop	{r7, pc}
   812de:	bf00      	nop
   812e0:	20000c08 	.word	0x20000c08
   812e4:	400a4000 	.word	0x400a4000

000812e8 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   812e8:	b580      	push	{r7, lr}
   812ea:	b086      	sub	sp, #24
   812ec:	af00      	add	r7, sp, #0
   812ee:	60ba      	str	r2, [r7, #8]
   812f0:	607b      	str	r3, [r7, #4]
   812f2:	4603      	mov	r3, r0
   812f4:	73fb      	strb	r3, [r7, #15]
   812f6:	460b      	mov	r3, r1
   812f8:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   812fa:	7bfb      	ldrb	r3, [r7, #15]
   812fc:	f003 030f 	and.w	r3, r3, #15
   81300:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
   81302:	7bfb      	ldrb	r3, [r7, #15]
   81304:	2b02      	cmp	r3, #2
   81306:	d901      	bls.n	8130c <udd_ep_run+0x24>
		return false;
   81308:	2300      	movs	r3, #0
   8130a:	e064      	b.n	813d6 <udd_ep_run+0xee>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   8130c:	7bfb      	ldrb	r3, [r7, #15]
   8130e:	1e5a      	subs	r2, r3, #1
   81310:	4613      	mov	r3, r2
   81312:	005b      	lsls	r3, r3, #1
   81314:	4413      	add	r3, r2
   81316:	00db      	lsls	r3, r3, #3
   81318:	4a31      	ldr	r2, [pc, #196]	; (813e0 <udd_ep_run+0xf8>)
   8131a:	4413      	add	r3, r2
   8131c:	617b      	str	r3, [r7, #20]

	if ((!Is_udd_endpoint_enabled(ep))
   8131e:	4a31      	ldr	r2, [pc, #196]	; (813e4 <udd_ep_run+0xfc>)
   81320:	7bfb      	ldrb	r3, [r7, #15]
   81322:	015b      	lsls	r3, r3, #5
   81324:	4413      	add	r3, r2
   81326:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   8132a:	681b      	ldr	r3, [r3, #0]
   8132c:	f003 0301 	and.w	r3, r3, #1
   81330:	2b00      	cmp	r3, #0
   81332:	d011      	beq.n	81358 <udd_ep_run+0x70>
			|| Is_udd_endpoint_stall_requested(ep)
   81334:	4a2b      	ldr	r2, [pc, #172]	; (813e4 <udd_ep_run+0xfc>)
   81336:	7bfb      	ldrb	r3, [r7, #15]
   81338:	015b      	lsls	r3, r3, #5
   8133a:	4413      	add	r3, r2
   8133c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   81340:	681b      	ldr	r3, [r3, #0]
   81342:	f003 0320 	and.w	r3, r3, #32
   81346:	2b00      	cmp	r3, #0
   81348:	d106      	bne.n	81358 <udd_ep_run+0x70>
			|| ptr_job->stall_requested) {
   8134a:	697b      	ldr	r3, [r7, #20]
   8134c:	7d1b      	ldrb	r3, [r3, #20]
   8134e:	f003 0304 	and.w	r3, r3, #4
   81352:	b2db      	uxtb	r3, r3
   81354:	2b00      	cmp	r3, #0
   81356:	d001      	beq.n	8135c <udd_ep_run+0x74>
		return false; // Endpoint is halted
   81358:	2300      	movs	r3, #0
   8135a:	e03c      	b.n	813d6 <udd_ep_run+0xee>
	}

	flags = cpu_irq_save();
   8135c:	4b22      	ldr	r3, [pc, #136]	; (813e8 <udd_ep_run+0x100>)
   8135e:	4798      	blx	r3
   81360:	6138      	str	r0, [r7, #16]
	if (ptr_job->busy == true) {
   81362:	697b      	ldr	r3, [r7, #20]
   81364:	7d1b      	ldrb	r3, [r3, #20]
   81366:	f003 0301 	and.w	r3, r3, #1
   8136a:	b2db      	uxtb	r3, r3
   8136c:	2b00      	cmp	r3, #0
   8136e:	d004      	beq.n	8137a <udd_ep_run+0x92>
		cpu_irq_restore(flags);
   81370:	6938      	ldr	r0, [r7, #16]
   81372:	4b1e      	ldr	r3, [pc, #120]	; (813ec <udd_ep_run+0x104>)
   81374:	4798      	blx	r3
		return false; // Job already on going
   81376:	2300      	movs	r3, #0
   81378:	e02d      	b.n	813d6 <udd_ep_run+0xee>
	}
	ptr_job->busy = true;
   8137a:	697a      	ldr	r2, [r7, #20]
   8137c:	7d13      	ldrb	r3, [r2, #20]
   8137e:	f043 0301 	orr.w	r3, r3, #1
   81382:	7513      	strb	r3, [r2, #20]
	cpu_irq_restore(flags);
   81384:	6938      	ldr	r0, [r7, #16]
   81386:	4b19      	ldr	r3, [pc, #100]	; (813ec <udd_ep_run+0x104>)
   81388:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   8138a:	697b      	ldr	r3, [r7, #20]
   8138c:	68ba      	ldr	r2, [r7, #8]
   8138e:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
   81390:	697b      	ldr	r3, [r7, #20]
   81392:	687a      	ldr	r2, [r7, #4]
   81394:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
   81396:	697b      	ldr	r3, [r7, #20]
   81398:	2200      	movs	r2, #0
   8139a:	60da      	str	r2, [r3, #12]
	ptr_job->buf_load = 0;
   8139c:	697b      	ldr	r3, [r7, #20]
   8139e:	2200      	movs	r2, #0
   813a0:	611a      	str	r2, [r3, #16]
	ptr_job->call_trans = callback;
   813a2:	697b      	ldr	r3, [r7, #20]
   813a4:	6a3a      	ldr	r2, [r7, #32]
   813a6:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   813a8:	7bbb      	ldrb	r3, [r7, #14]
   813aa:	2b00      	cmp	r3, #0
   813ac:	d102      	bne.n	813b4 <udd_ep_run+0xcc>
   813ae:	687b      	ldr	r3, [r7, #4]
   813b0:	2b00      	cmp	r3, #0
   813b2:	d101      	bne.n	813b8 <udd_ep_run+0xd0>
   813b4:	2301      	movs	r3, #1
   813b6:	e000      	b.n	813ba <udd_ep_run+0xd2>
   813b8:	2300      	movs	r3, #0
   813ba:	b2db      	uxtb	r3, r3
   813bc:	f003 0301 	and.w	r3, r3, #1
   813c0:	b2d9      	uxtb	r1, r3
   813c2:	697a      	ldr	r2, [r7, #20]
   813c4:	7d13      	ldrb	r3, [r2, #20]
   813c6:	f361 0341 	bfi	r3, r1, #1, #1
   813ca:	7513      	strb	r3, [r2, #20]

	// Request first DMA transfer
	//dbg_print("runDMA%d\n\r", ep);
	udd_ep_trans_done(ep);
   813cc:	7bfb      	ldrb	r3, [r7, #15]
   813ce:	4618      	mov	r0, r3
   813d0:	4b07      	ldr	r3, [pc, #28]	; (813f0 <udd_ep_run+0x108>)
   813d2:	4798      	blx	r3
	return true;
   813d4:	2301      	movs	r3, #1
}
   813d6:	4618      	mov	r0, r3
   813d8:	3718      	adds	r7, #24
   813da:	46bd      	mov	sp, r7
   813dc:	bd80      	pop	{r7, pc}
   813de:	bf00      	nop
   813e0:	20000c08 	.word	0x20000c08
   813e4:	400a4000 	.word	0x400a4000
   813e8:	0008082d 	.word	0x0008082d
   813ec:	00080885 	.word	0x00080885
   813f0:	00081e49 	.word	0x00081e49

000813f4 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
   813f4:	b580      	push	{r7, lr}
   813f6:	b084      	sub	sp, #16
   813f8:	af00      	add	r7, sp, #0
   813fa:	4603      	mov	r3, r0
   813fc:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   813fe:	79fb      	ldrb	r3, [r7, #7]
   81400:	f003 030f 	and.w	r3, r3, #15
   81404:	73fb      	strb	r3, [r7, #15]
	// Stop DMA transfer
	udd_endpoint_dma_set_control(ep_index, 0);
   81406:	7bfb      	ldrb	r3, [r7, #15]
   81408:	011a      	lsls	r2, r3, #4
   8140a:	4b19      	ldr	r3, [pc, #100]	; (81470 <udd_ep_abort+0x7c>)
   8140c:	4413      	add	r3, r2
   8140e:	2200      	movs	r2, #0
   81410:	609a      	str	r2, [r3, #8]
	// Kill banks for IN
	if (ep & USB_EP_DIR_IN) {
   81412:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81416:	2b00      	cmp	r3, #0
   81418:	da21      	bge.n	8145e <udd_ep_abort+0x6a>
		for(;udd_nb_busy_bank(ep_index);) {
   8141a:	e014      	b.n	81446 <udd_ep_abort+0x52>
			udd_kill_last_in_bank(ep_index);
   8141c:	4a15      	ldr	r2, [pc, #84]	; (81474 <udd_ep_abort+0x80>)
   8141e:	7bfb      	ldrb	r3, [r7, #15]
   81420:	015b      	lsls	r3, r3, #5
   81422:	4413      	add	r3, r2
   81424:	f503 738a 	add.w	r3, r3, #276	; 0x114
   81428:	f44f 7200 	mov.w	r2, #512	; 0x200
   8142c:	601a      	str	r2, [r3, #0]
			while(Is_udd_kill_last(ep_index));
   8142e:	bf00      	nop
   81430:	4a10      	ldr	r2, [pc, #64]	; (81474 <udd_ep_abort+0x80>)
   81432:	7bfb      	ldrb	r3, [r7, #15]
   81434:	015b      	lsls	r3, r3, #5
   81436:	4413      	add	r3, r2
   81438:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8143c:	681b      	ldr	r3, [r3, #0]
   8143e:	f403 7300 	and.w	r3, r3, #512	; 0x200
   81442:	2b00      	cmp	r3, #0
   81444:	d1f4      	bne.n	81430 <udd_ep_abort+0x3c>
		for(;udd_nb_busy_bank(ep_index);) {
   81446:	4a0b      	ldr	r2, [pc, #44]	; (81474 <udd_ep_abort+0x80>)
   81448:	7bfb      	ldrb	r3, [r7, #15]
   8144a:	015b      	lsls	r3, r3, #5
   8144c:	4413      	add	r3, r2
   8144e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   81452:	681b      	ldr	r3, [r3, #0]
   81454:	0c9b      	lsrs	r3, r3, #18
   81456:	f003 0303 	and.w	r3, r3, #3
   8145a:	2b00      	cmp	r3, #0
   8145c:	d1de      	bne.n	8141c <udd_ep_abort+0x28>
		}
	}
	udd_ep_abort_job(ep);
   8145e:	79fb      	ldrb	r3, [r7, #7]
   81460:	4618      	mov	r0, r3
   81462:	4b05      	ldr	r3, [pc, #20]	; (81478 <udd_ep_abort+0x84>)
   81464:	4798      	blx	r3
}
   81466:	bf00      	nop
   81468:	3710      	adds	r7, #16
   8146a:	46bd      	mov	sp, r7
   8146c:	bd80      	pop	{r7, pc}
   8146e:	bf00      	nop
   81470:	400a4300 	.word	0x400a4300
   81474:	400a4000 	.word	0x400a4000
   81478:	00081d9d 	.word	0x00081d9d

0008147c <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
   8147c:	b480      	push	{r7}
   8147e:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   81480:	4a0a      	ldr	r2, [pc, #40]	; (814ac <udd_test_mode_j+0x30>)
   81482:	4b0a      	ldr	r3, [pc, #40]	; (814ac <udd_test_mode_j+0x30>)
   81484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   81488:	f023 0303 	bic.w	r3, r3, #3
   8148c:	f043 0302 	orr.w	r3, r3, #2
   81490:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   81494:	4a05      	ldr	r2, [pc, #20]	; (814ac <udd_test_mode_j+0x30>)
   81496:	4b05      	ldr	r3, [pc, #20]	; (814ac <udd_test_mode_j+0x30>)
   81498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8149c:	f043 0304 	orr.w	r3, r3, #4
   814a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   814a4:	bf00      	nop
   814a6:	46bd      	mov	sp, r7
   814a8:	bc80      	pop	{r7}
   814aa:	4770      	bx	lr
   814ac:	400a4000 	.word	0x400a4000

000814b0 <udd_test_mode_k>:


void udd_test_mode_k(void)
{
   814b0:	b480      	push	{r7}
   814b2:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   814b4:	4a0a      	ldr	r2, [pc, #40]	; (814e0 <udd_test_mode_k+0x30>)
   814b6:	4b0a      	ldr	r3, [pc, #40]	; (814e0 <udd_test_mode_k+0x30>)
   814b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   814bc:	f023 0303 	bic.w	r3, r3, #3
   814c0:	f043 0302 	orr.w	r3, r3, #2
   814c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   814c8:	4a05      	ldr	r2, [pc, #20]	; (814e0 <udd_test_mode_k+0x30>)
   814ca:	4b05      	ldr	r3, [pc, #20]	; (814e0 <udd_test_mode_k+0x30>)
   814cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   814d0:	f043 0308 	orr.w	r3, r3, #8
   814d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   814d8:	bf00      	nop
   814da:	46bd      	mov	sp, r7
   814dc:	bc80      	pop	{r7}
   814de:	4770      	bx	lr
   814e0:	400a4000 	.word	0x400a4000

000814e4 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
   814e4:	b480      	push	{r7}
   814e6:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   814e8:	4a06      	ldr	r2, [pc, #24]	; (81504 <udd_test_mode_se0_nak+0x20>)
   814ea:	4b06      	ldr	r3, [pc, #24]	; (81504 <udd_test_mode_se0_nak+0x20>)
   814ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   814f0:	f023 0303 	bic.w	r3, r3, #3
   814f4:	f043 0302 	orr.w	r3, r3, #2
   814f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   814fc:	bf00      	nop
   814fe:	46bd      	mov	sp, r7
   81500:	bc80      	pop	{r7}
   81502:	4770      	bx	lr
   81504:	400a4000 	.word	0x400a4000

00081508 <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
   81508:	b4b0      	push	{r4, r5, r7}
   8150a:	b093      	sub	sp, #76	; 0x4c
   8150c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   8150e:	4b2e      	ldr	r3, [pc, #184]	; (815c8 <udd_test_mode_packet+0xc0>)
   81510:	1d3c      	adds	r4, r7, #4
   81512:	461d      	mov	r5, r3
   81514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8151a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8151c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8151e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81520:	e895 0003 	ldmia.w	r5, {r0, r1}
   81524:	6020      	str	r0, [r4, #0]
   81526:	3404      	adds	r4, #4
   81528:	7021      	strb	r1, [r4, #0]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   8152a:	4b28      	ldr	r3, [pc, #160]	; (815cc <udd_test_mode_packet+0xc4>)
   8152c:	2201      	movs	r2, #1
   8152e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   81532:	4a26      	ldr	r2, [pc, #152]	; (815cc <udd_test_mode_packet+0xc4>)
   81534:	4b25      	ldr	r3, [pc, #148]	; (815cc <udd_test_mode_packet+0xc4>)
   81536:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   8153a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   8153e:	f023 0303 	bic.w	r3, r3, #3
   81542:	f043 036b 	orr.w	r3, r3, #107	; 0x6b
   81546:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_EP_TYPE_BULK, // Type: bulk
			1, // dir: IN
			64, //Size
			1, // Bank Number
			0); // NB Trans (not used for bulk ept)
	udd_enable_endpoint(0);
   8154a:	4b20      	ldr	r3, [pc, #128]	; (815cc <udd_test_mode_packet+0xc4>)
   8154c:	2201      	movs	r2, #1
   8154e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	udd_enable_hs_test_mode();
   81552:	4a1e      	ldr	r2, [pc, #120]	; (815cc <udd_test_mode_packet+0xc4>)
   81554:	4b1d      	ldr	r3, [pc, #116]	; (815cc <udd_test_mode_packet+0xc4>)
   81556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8155a:	f023 0303 	bic.w	r3, r3, #3
   8155e:	f043 0302 	orr.w	r3, r3, #2
   81562:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   81566:	4a19      	ldr	r2, [pc, #100]	; (815cc <udd_test_mode_packet+0xc4>)
   81568:	4b18      	ldr	r3, [pc, #96]	; (815cc <udd_test_mode_packet+0xc4>)
   8156a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8156e:	f043 0310 	orr.w	r3, r3, #16
   81572:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   81576:	4b16      	ldr	r3, [pc, #88]	; (815d0 <udd_test_mode_packet+0xc8>)
   81578:	643b      	str	r3, [r7, #64]	; 0x40
	ptr_src = test_packet;
   8157a:	1d3b      	adds	r3, r7, #4
   8157c:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (i = 0; i < sizeof(test_packet); i++) {
   8157e:	2300      	movs	r3, #0
   81580:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   81584:	e00c      	b.n	815a0 <udd_test_mode_packet+0x98>
		*ptr_dest++ = *ptr_src++;
   81586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   81588:	1c5a      	adds	r2, r3, #1
   8158a:	643a      	str	r2, [r7, #64]	; 0x40
   8158c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   8158e:	1c51      	adds	r1, r2, #1
   81590:	63f9      	str	r1, [r7, #60]	; 0x3c
   81592:	7812      	ldrb	r2, [r2, #0]
   81594:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   81596:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   8159a:	3301      	adds	r3, #1
   8159c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   815a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   815a4:	2b34      	cmp	r3, #52	; 0x34
   815a6:	d9ee      	bls.n	81586 <udd_test_mode_packet+0x7e>
	}
	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   815a8:	4b08      	ldr	r3, [pc, #32]	; (815cc <udd_test_mode_packet+0xc4>)
   815aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   815ae:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   815b2:	4b06      	ldr	r3, [pc, #24]	; (815cc <udd_test_mode_packet+0xc4>)
   815b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   815b8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   815bc:	bf00      	nop
   815be:	374c      	adds	r7, #76	; 0x4c
   815c0:	46bd      	mov	sp, r7
   815c2:	bcb0      	pop	{r4, r5, r7}
   815c4:	4770      	bx	lr
   815c6:	bf00      	nop
   815c8:	00084254 	.word	0x00084254
   815cc:	400a4000 	.word	0x400a4000
   815d0:	20180000 	.word	0x20180000

000815d4 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
   815d4:	b580      	push	{r7, lr}
   815d6:	b082      	sub	sp, #8
   815d8:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   815da:	4a1b      	ldr	r2, [pc, #108]	; (81648 <udd_reset_ep_ctrl+0x74>)
   815dc:	4b1a      	ldr	r3, [pc, #104]	; (81648 <udd_reset_ep_ctrl+0x74>)
   815de:	681b      	ldr	r3, [r3, #0]
   815e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   815e4:	6013      	str	r3, [r2, #0]
	udd_enable_address();
   815e6:	4a18      	ldr	r2, [pc, #96]	; (81648 <udd_reset_ep_ctrl+0x74>)
   815e8:	4b17      	ldr	r3, [pc, #92]	; (81648 <udd_reset_ep_ctrl+0x74>)
   815ea:	681b      	ldr	r3, [r3, #0]
   815ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   815f0:	6013      	str	r3, [r2, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   815f2:	4a15      	ldr	r2, [pc, #84]	; (81648 <udd_reset_ep_ctrl+0x74>)
   815f4:	4b14      	ldr	r3, [pc, #80]	; (81648 <udd_reset_ep_ctrl+0x74>)
   815f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   815fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   815fe:	f023 0303 	bic.w	r3, r3, #3
   81602:	f043 0343 	orr.w	r3, r3, #67	; 0x43
   81606:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_DEVICE_EP_CTRL_SIZE,
			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
			0);

	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
	udd_enable_endpoint(0);
   8160a:	4b0f      	ldr	r3, [pc, #60]	; (81648 <udd_reset_ep_ctrl+0x74>)
   8160c:	2201      	movs	r2, #1
   8160e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	flags = cpu_irq_save();
   81612:	4b0e      	ldr	r3, [pc, #56]	; (8164c <udd_reset_ep_ctrl+0x78>)
   81614:	4798      	blx	r3
   81616:	6078      	str	r0, [r7, #4]
	udd_enable_setup_received_interrupt(0);
   81618:	4b0b      	ldr	r3, [pc, #44]	; (81648 <udd_reset_ep_ctrl+0x74>)
   8161a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8161e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   81622:	4b09      	ldr	r3, [pc, #36]	; (81648 <udd_reset_ep_ctrl+0x74>)
   81624:	f44f 7200 	mov.w	r2, #512	; 0x200
   81628:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   8162c:	4a06      	ldr	r2, [pc, #24]	; (81648 <udd_reset_ep_ctrl+0x74>)
   8162e:	4b06      	ldr	r3, [pc, #24]	; (81648 <udd_reset_ep_ctrl+0x74>)
   81630:	691b      	ldr	r3, [r3, #16]
   81632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   81636:	6113      	str	r3, [r2, #16]
	cpu_irq_restore(flags);
   81638:	6878      	ldr	r0, [r7, #4]
   8163a:	4b05      	ldr	r3, [pc, #20]	; (81650 <udd_reset_ep_ctrl+0x7c>)
   8163c:	4798      	blx	r3
}
   8163e:	bf00      	nop
   81640:	3708      	adds	r7, #8
   81642:	46bd      	mov	sp, r7
   81644:	bd80      	pop	{r7, pc}
   81646:	bf00      	nop
   81648:	400a4000 	.word	0x400a4000
   8164c:	0008082d 	.word	0x0008082d
   81650:	00080885 	.word	0x00080885

00081654 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
   81654:	b580      	push	{r7, lr}
   81656:	b082      	sub	sp, #8
   81658:	af00      	add	r7, sp, #0
	irqflags_t flags;

	dbg_print("ctlInit ");

	flags = cpu_irq_save();
   8165a:	4b10      	ldr	r3, [pc, #64]	; (8169c <udd_ctrl_init+0x48>)
   8165c:	4798      	blx	r3
   8165e:	6078      	str	r0, [r7, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   81660:	4b0f      	ldr	r3, [pc, #60]	; (816a0 <udd_ctrl_init+0x4c>)
   81662:	f44f 6280 	mov.w	r2, #1024	; 0x400
   81666:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   8166a:	6878      	ldr	r0, [r7, #4]
   8166c:	4b0d      	ldr	r3, [pc, #52]	; (816a4 <udd_ctrl_init+0x50>)
   8166e:	4798      	blx	r3

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   81670:	4b0b      	ldr	r3, [pc, #44]	; (816a0 <udd_ctrl_init+0x4c>)
   81672:	f44f 7200 	mov.w	r2, #512	; 0x200
   81676:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   8167a:	4b0b      	ldr	r3, [pc, #44]	; (816a8 <udd_ctrl_init+0x54>)
   8167c:	2200      	movs	r2, #0
   8167e:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   81680:	4b09      	ldr	r3, [pc, #36]	; (816a8 <udd_ctrl_init+0x54>)
   81682:	2200      	movs	r2, #0
   81684:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
   81686:	4b08      	ldr	r3, [pc, #32]	; (816a8 <udd_ctrl_init+0x54>)
   81688:	2200      	movs	r2, #0
   8168a:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   8168c:	4b07      	ldr	r3, [pc, #28]	; (816ac <udd_ctrl_init+0x58>)
   8168e:	2200      	movs	r2, #0
   81690:	701a      	strb	r2, [r3, #0]
}
   81692:	bf00      	nop
   81694:	3708      	adds	r7, #8
   81696:	46bd      	mov	sp, r7
   81698:	bd80      	pop	{r7, pc}
   8169a:	bf00      	nop
   8169c:	0008082d 	.word	0x0008082d
   816a0:	400a4000 	.word	0x400a4000
   816a4:	00080885 	.word	0x00080885
   816a8:	20000c4c 	.word	0x20000c4c
   816ac:	20000c01 	.word	0x20000c01

000816b0 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
   816b0:	b580      	push	{r7, lr}
   816b2:	b084      	sub	sp, #16
   816b4:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   816b6:	4b40      	ldr	r3, [pc, #256]	; (817b8 <udd_ctrl_setup_received+0x108>)
   816b8:	781b      	ldrb	r3, [r3, #0]
   816ba:	2b00      	cmp	r3, #0
   816bc:	d003      	beq.n	816c6 <udd_ctrl_setup_received+0x16>
		dbg_print("sErr ");
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
   816be:	4b3f      	ldr	r3, [pc, #252]	; (817bc <udd_ctrl_setup_received+0x10c>)
   816c0:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   816c2:	4b3f      	ldr	r3, [pc, #252]	; (817c0 <udd_ctrl_setup_received+0x110>)
   816c4:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   816c6:	4b3f      	ldr	r3, [pc, #252]	; (817c4 <udd_ctrl_setup_received+0x114>)
   816c8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   816cc:	0d1b      	lsrs	r3, r3, #20
   816ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
   816d2:	2b08      	cmp	r3, #8
   816d4:	d007      	beq.n	816e6 <udd_ctrl_setup_received+0x36>
		dbg_print("cntErr ");
		udd_ctrl_stall_data();
   816d6:	4b3c      	ldr	r3, [pc, #240]	; (817c8 <udd_ctrl_setup_received+0x118>)
   816d8:	4798      	blx	r3
		udd_ack_setup_received(0);
   816da:	4b3a      	ldr	r3, [pc, #232]	; (817c4 <udd_ctrl_setup_received+0x114>)
   816dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   816e0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   816e4:	e064      	b.n	817b0 <udd_ctrl_setup_received+0x100>
	}

	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   816e6:	4b39      	ldr	r3, [pc, #228]	; (817cc <udd_ctrl_setup_received+0x11c>)
   816e8:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
   816ea:	2300      	movs	r3, #0
   816ec:	73fb      	strb	r3, [r7, #15]
   816ee:	e00a      	b.n	81706 <udd_ctrl_setup_received+0x56>
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   816f0:	7bfb      	ldrb	r3, [r7, #15]
   816f2:	4a37      	ldr	r2, [pc, #220]	; (817d0 <udd_ctrl_setup_received+0x120>)
   816f4:	441a      	add	r2, r3
   816f6:	68bb      	ldr	r3, [r7, #8]
   816f8:	1c59      	adds	r1, r3, #1
   816fa:	60b9      	str	r1, [r7, #8]
   816fc:	781b      	ldrb	r3, [r3, #0]
   816fe:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < 8; i++) {
   81700:	7bfb      	ldrb	r3, [r7, #15]
   81702:	3301      	adds	r3, #1
   81704:	73fb      	strb	r3, [r7, #15]
   81706:	7bfb      	ldrb	r3, [r7, #15]
   81708:	2b07      	cmp	r3, #7
   8170a:	d9f1      	bls.n	816f0 <udd_ctrl_setup_received+0x40>
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
   8170c:	4b30      	ldr	r3, [pc, #192]	; (817d0 <udd_ctrl_setup_received+0x120>)
   8170e:	885a      	ldrh	r2, [r3, #2]
   81710:	4b2f      	ldr	r3, [pc, #188]	; (817d0 <udd_ctrl_setup_received+0x120>)
   81712:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
   81714:	4b2e      	ldr	r3, [pc, #184]	; (817d0 <udd_ctrl_setup_received+0x120>)
   81716:	889a      	ldrh	r2, [r3, #4]
   81718:	4b2d      	ldr	r3, [pc, #180]	; (817d0 <udd_ctrl_setup_received+0x120>)
   8171a:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
   8171c:	4b2c      	ldr	r3, [pc, #176]	; (817d0 <udd_ctrl_setup_received+0x120>)
   8171e:	88da      	ldrh	r2, [r3, #6]
   81720:	4b2b      	ldr	r3, [pc, #172]	; (817d0 <udd_ctrl_setup_received+0x120>)
   81722:	80da      	strh	r2, [r3, #6]
			udd_g_ctrlreq.req.bRequest, udd_g_ctrlreq.req.bmRequestType,
			udd_g_ctrlreq.req.wValue, udd_g_ctrlreq.req.wIndex,
			udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   81724:	4b2b      	ldr	r3, [pc, #172]	; (817d4 <udd_ctrl_setup_received+0x124>)
   81726:	4798      	blx	r3
   81728:	4603      	mov	r3, r0
   8172a:	f083 0301 	eor.w	r3, r3, #1
   8172e:	b2db      	uxtb	r3, r3
   81730:	2b00      	cmp	r3, #0
   81732:	d007      	beq.n	81744 <udd_ctrl_setup_received+0x94>
		// Setup request unknown then stall it
		dbg_print("ProcErr ");
		udd_ctrl_stall_data();
   81734:	4b24      	ldr	r3, [pc, #144]	; (817c8 <udd_ctrl_setup_received+0x118>)
   81736:	4798      	blx	r3
		udd_ack_setup_received(0);
   81738:	4b22      	ldr	r3, [pc, #136]	; (817c4 <udd_ctrl_setup_received+0x114>)
   8173a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8173e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   81742:	e035      	b.n	817b0 <udd_ctrl_setup_received+0x100>
	}
	udd_ack_setup_received(0);
   81744:	4b1f      	ldr	r3, [pc, #124]	; (817c4 <udd_ctrl_setup_received+0x114>)
   81746:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8174a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	if (Udd_setup_is_in()) {
   8174e:	4b20      	ldr	r3, [pc, #128]	; (817d0 <udd_ctrl_setup_received+0x120>)
   81750:	781b      	ldrb	r3, [r3, #0]
   81752:	b25b      	sxtb	r3, r3
   81754:	2b00      	cmp	r3, #0
   81756:	da0b      	bge.n	81770 <udd_ctrl_setup_received+0xc0>
		dbg_print("_I ");
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   81758:	4b1f      	ldr	r3, [pc, #124]	; (817d8 <udd_ctrl_setup_received+0x128>)
   8175a:	2200      	movs	r2, #0
   8175c:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8175e:	4b1f      	ldr	r3, [pc, #124]	; (817dc <udd_ctrl_setup_received+0x12c>)
   81760:	2200      	movs	r2, #0
   81762:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   81764:	4b14      	ldr	r3, [pc, #80]	; (817b8 <udd_ctrl_setup_received+0x108>)
   81766:	2202      	movs	r2, #2
   81768:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   8176a:	4b1d      	ldr	r3, [pc, #116]	; (817e0 <udd_ctrl_setup_received+0x130>)
   8176c:	4798      	blx	r3
   8176e:	e01f      	b.n	817b0 <udd_ctrl_setup_received+0x100>
	} else {
		dbg_print("_O ");
		if (0 == udd_g_ctrlreq.req.wLength) {
   81770:	4b17      	ldr	r3, [pc, #92]	; (817d0 <udd_ctrl_setup_received+0x120>)
   81772:	88db      	ldrh	r3, [r3, #6]
   81774:	2b00      	cmp	r3, #0
   81776:	d102      	bne.n	8177e <udd_ctrl_setup_received+0xce>
			// No data phase requested
			dbg_print("Zl ");
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   81778:	4b1a      	ldr	r3, [pc, #104]	; (817e4 <udd_ctrl_setup_received+0x134>)
   8177a:	4798      	blx	r3
			return;
   8177c:	e018      	b.n	817b0 <udd_ctrl_setup_received+0x100>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   8177e:	4b16      	ldr	r3, [pc, #88]	; (817d8 <udd_ctrl_setup_received+0x128>)
   81780:	2200      	movs	r2, #0
   81782:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   81784:	4b15      	ldr	r3, [pc, #84]	; (817dc <udd_ctrl_setup_received+0x12c>)
   81786:	2200      	movs	r2, #0
   81788:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   8178a:	4b0b      	ldr	r3, [pc, #44]	; (817b8 <udd_ctrl_setup_received+0x108>)
   8178c:	2201      	movs	r2, #1
   8178e:	701a      	strb	r2, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   81790:	4b0c      	ldr	r3, [pc, #48]	; (817c4 <udd_ctrl_setup_received+0x114>)
   81792:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   81796:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		flags = cpu_irq_save();
   8179a:	4b13      	ldr	r3, [pc, #76]	; (817e8 <udd_ctrl_setup_received+0x138>)
   8179c:	4798      	blx	r3
   8179e:	6078      	str	r0, [r7, #4]
		udd_enable_nak_in_interrupt(0);
   817a0:	4b08      	ldr	r3, [pc, #32]	; (817c4 <udd_ctrl_setup_received+0x114>)
   817a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   817a6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		cpu_irq_restore(flags);
   817aa:	6878      	ldr	r0, [r7, #4]
   817ac:	4b0f      	ldr	r3, [pc, #60]	; (817ec <udd_ctrl_setup_received+0x13c>)
   817ae:	4798      	blx	r3
	}
}
   817b0:	3710      	adds	r7, #16
   817b2:	46bd      	mov	sp, r7
   817b4:	bd80      	pop	{r7, pc}
   817b6:	bf00      	nop
   817b8:	20000c01 	.word	0x20000c01
   817bc:	00081c59 	.word	0x00081c59
   817c0:	00081655 	.word	0x00081655
   817c4:	400a4000 	.word	0x400a4000
   817c8:	00081b8d 	.word	0x00081b8d
   817cc:	20180000 	.word	0x20180000
   817d0:	20000c4c 	.word	0x20000c4c
   817d4:	00083d71 	.word	0x00083d71
   817d8:	20000c02 	.word	0x20000c02
   817dc:	20000c04 	.word	0x20000c04
   817e0:	000817f1 	.word	0x000817f1
   817e4:	00081bb1 	.word	0x00081bb1
   817e8:	0008082d 	.word	0x0008082d
   817ec:	00080885 	.word	0x00080885

000817f0 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
   817f0:	b580      	push	{r7, lr}
   817f2:	b084      	sub	sp, #16
   817f4:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
   817f6:	4b4c      	ldr	r3, [pc, #304]	; (81928 <udd_ctrl_in_sent+0x138>)
   817f8:	4798      	blx	r3
   817fa:	6038      	str	r0, [r7, #0]
	udd_disable_in_send_interrupt(0);
   817fc:	4b4b      	ldr	r3, [pc, #300]	; (8192c <udd_ctrl_in_sent+0x13c>)
   817fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
   81802:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   81806:	6838      	ldr	r0, [r7, #0]
   81808:	4b49      	ldr	r3, [pc, #292]	; (81930 <udd_ctrl_in_sent+0x140>)
   8180a:	4798      	blx	r3

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   8180c:	4b49      	ldr	r3, [pc, #292]	; (81934 <udd_ctrl_in_sent+0x144>)
   8180e:	781b      	ldrb	r3, [r3, #0]
   81810:	2b03      	cmp	r3, #3
   81812:	d104      	bne.n	8181e <udd_ctrl_in_sent+0x2e>
		dbg_print("ZlpE\n\r");
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   81814:	4b48      	ldr	r3, [pc, #288]	; (81938 <udd_ctrl_in_sent+0x148>)
   81816:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   81818:	4b48      	ldr	r3, [pc, #288]	; (8193c <udd_ctrl_in_sent+0x14c>)
   8181a:	4798      	blx	r3
		return;
   8181c:	e081      	b.n	81922 <udd_ctrl_in_sent+0x132>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8181e:	4b48      	ldr	r3, [pc, #288]	; (81940 <udd_ctrl_in_sent+0x150>)
   81820:	899a      	ldrh	r2, [r3, #12]
   81822:	4b48      	ldr	r3, [pc, #288]	; (81944 <udd_ctrl_in_sent+0x154>)
   81824:	881b      	ldrh	r3, [r3, #0]
   81826:	1ad3      	subs	r3, r2, r3
   81828:	81fb      	strh	r3, [r7, #14]
	if (0 == nb_remain) {
   8182a:	89fb      	ldrh	r3, [r7, #14]
   8182c:	2b00      	cmp	r3, #0
   8182e:	d127      	bne.n	81880 <udd_ctrl_in_sent+0x90>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   81830:	4b45      	ldr	r3, [pc, #276]	; (81948 <udd_ctrl_in_sent+0x158>)
   81832:	881a      	ldrh	r2, [r3, #0]
   81834:	4b43      	ldr	r3, [pc, #268]	; (81944 <udd_ctrl_in_sent+0x154>)
   81836:	881b      	ldrh	r3, [r3, #0]
   81838:	4413      	add	r3, r2
   8183a:	b29a      	uxth	r2, r3
   8183c:	4b42      	ldr	r3, [pc, #264]	; (81948 <udd_ctrl_in_sent+0x158>)
   8183e:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   81840:	4b3f      	ldr	r3, [pc, #252]	; (81940 <udd_ctrl_in_sent+0x150>)
   81842:	88da      	ldrh	r2, [r3, #6]
   81844:	4b40      	ldr	r3, [pc, #256]	; (81948 <udd_ctrl_in_sent+0x158>)
   81846:	881b      	ldrh	r3, [r3, #0]
   81848:	429a      	cmp	r2, r3
   8184a:	d003      	beq.n	81854 <udd_ctrl_in_sent+0x64>
				|| b_shortpacket) {
   8184c:	4b3f      	ldr	r3, [pc, #252]	; (8194c <udd_ctrl_in_sent+0x15c>)
   8184e:	781b      	ldrb	r3, [r3, #0]
   81850:	2b00      	cmp	r3, #0
   81852:	d002      	beq.n	8185a <udd_ctrl_in_sent+0x6a>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			dbg_print("_zO ");
			udd_ctrl_send_zlp_out();
   81854:	4b3e      	ldr	r3, [pc, #248]	; (81950 <udd_ctrl_in_sent+0x160>)
   81856:	4798      	blx	r3
			return;
   81858:	e063      	b.n	81922 <udd_ctrl_in_sent+0x132>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   8185a:	4b39      	ldr	r3, [pc, #228]	; (81940 <udd_ctrl_in_sent+0x150>)
   8185c:	695b      	ldr	r3, [r3, #20]
   8185e:	2b00      	cmp	r3, #0
   81860:	d00e      	beq.n	81880 <udd_ctrl_in_sent+0x90>
				|| (!udd_g_ctrlreq.over_under_run())) {
   81862:	4b37      	ldr	r3, [pc, #220]	; (81940 <udd_ctrl_in_sent+0x150>)
   81864:	695b      	ldr	r3, [r3, #20]
   81866:	4798      	blx	r3
   81868:	4603      	mov	r3, r0
   8186a:	f083 0301 	eor.w	r3, r3, #1
   8186e:	b2db      	uxtb	r3, r3
   81870:	2b00      	cmp	r3, #0
   81872:	d105      	bne.n	81880 <udd_ctrl_in_sent+0x90>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   81874:	4b33      	ldr	r3, [pc, #204]	; (81944 <udd_ctrl_in_sent+0x154>)
   81876:	2200      	movs	r2, #0
   81878:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   8187a:	4b31      	ldr	r3, [pc, #196]	; (81940 <udd_ctrl_in_sent+0x150>)
   8187c:	899b      	ldrh	r3, [r3, #12]
   8187e:	81fb      	strh	r3, [r7, #14]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   81880:	89fb      	ldrh	r3, [r7, #14]
   81882:	2b3f      	cmp	r3, #63	; 0x3f
   81884:	d905      	bls.n	81892 <udd_ctrl_in_sent+0xa2>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   81886:	2340      	movs	r3, #64	; 0x40
   81888:	81fb      	strh	r3, [r7, #14]
		b_shortpacket = false;
   8188a:	4b30      	ldr	r3, [pc, #192]	; (8194c <udd_ctrl_in_sent+0x15c>)
   8188c:	2200      	movs	r2, #0
   8188e:	701a      	strb	r2, [r3, #0]
   81890:	e002      	b.n	81898 <udd_ctrl_in_sent+0xa8>
	} else {
		b_shortpacket = true;
   81892:	4b2e      	ldr	r3, [pc, #184]	; (8194c <udd_ctrl_in_sent+0x15c>)
   81894:	2201      	movs	r2, #1
   81896:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   81898:	4b2e      	ldr	r3, [pc, #184]	; (81954 <udd_ctrl_in_sent+0x164>)
   8189a:	60bb      	str	r3, [r7, #8]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   8189c:	4b28      	ldr	r3, [pc, #160]	; (81940 <udd_ctrl_in_sent+0x150>)
   8189e:	689b      	ldr	r3, [r3, #8]
   818a0:	4a28      	ldr	r2, [pc, #160]	; (81944 <udd_ctrl_in_sent+0x154>)
   818a2:	8812      	ldrh	r2, [r2, #0]
   818a4:	4413      	add	r3, r2
   818a6:	607b      	str	r3, [r7, #4]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
   818a8:	4b1f      	ldr	r3, [pc, #124]	; (81928 <udd_ctrl_in_sent+0x138>)
   818aa:	4798      	blx	r3
   818ac:	6038      	str	r0, [r7, #0]
	if (Is_udd_out_received(0)) {
   818ae:	4b1f      	ldr	r3, [pc, #124]	; (8192c <udd_ctrl_in_sent+0x13c>)
   818b0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   818b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
   818b8:	2b00      	cmp	r3, #0
   818ba:	d006      	beq.n	818ca <udd_ctrl_in_sent+0xda>
		dbg_print("Abort ");
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
   818bc:	6838      	ldr	r0, [r7, #0]
   818be:	4b1c      	ldr	r3, [pc, #112]	; (81930 <udd_ctrl_in_sent+0x140>)
   818c0:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   818c2:	4b1c      	ldr	r3, [pc, #112]	; (81934 <udd_ctrl_in_sent+0x144>)
   818c4:	2204      	movs	r2, #4
   818c6:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   818c8:	e02b      	b.n	81922 <udd_ctrl_in_sent+0x132>
	}
	// dbg_print("t%d ", nb_remain);
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   818ca:	2300      	movs	r3, #0
   818cc:	737b      	strb	r3, [r7, #13]
   818ce:	e00a      	b.n	818e6 <udd_ctrl_in_sent+0xf6>
		*ptr_dest++ = *ptr_src++;
   818d0:	68bb      	ldr	r3, [r7, #8]
   818d2:	1c5a      	adds	r2, r3, #1
   818d4:	60ba      	str	r2, [r7, #8]
   818d6:	687a      	ldr	r2, [r7, #4]
   818d8:	1c51      	adds	r1, r2, #1
   818da:	6079      	str	r1, [r7, #4]
   818dc:	7812      	ldrb	r2, [r2, #0]
   818de:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_remain; i++) {
   818e0:	7b7b      	ldrb	r3, [r7, #13]
   818e2:	3301      	adds	r3, #1
   818e4:	737b      	strb	r3, [r7, #13]
   818e6:	7b7b      	ldrb	r3, [r7, #13]
   818e8:	b29b      	uxth	r3, r3
   818ea:	89fa      	ldrh	r2, [r7, #14]
   818ec:	429a      	cmp	r2, r3
   818ee:	d8ef      	bhi.n	818d0 <udd_ctrl_in_sent+0xe0>
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   818f0:	4b14      	ldr	r3, [pc, #80]	; (81944 <udd_ctrl_in_sent+0x154>)
   818f2:	881a      	ldrh	r2, [r3, #0]
   818f4:	89fb      	ldrh	r3, [r7, #14]
   818f6:	4413      	add	r3, r2
   818f8:	b29a      	uxth	r2, r3
   818fa:	4b12      	ldr	r3, [pc, #72]	; (81944 <udd_ctrl_in_sent+0x154>)
   818fc:	801a      	strh	r2, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   818fe:	4b0b      	ldr	r3, [pc, #44]	; (8192c <udd_ctrl_in_sent+0x13c>)
   81900:	f44f 6280 	mov.w	r2, #1024	; 0x400
   81904:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   81908:	4b08      	ldr	r3, [pc, #32]	; (8192c <udd_ctrl_in_sent+0x13c>)
   8190a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8190e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   81912:	4b06      	ldr	r3, [pc, #24]	; (8192c <udd_ctrl_in_sent+0x13c>)
   81914:	f44f 6280 	mov.w	r2, #1024	; 0x400
   81918:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
   8191c:	6838      	ldr	r0, [r7, #0]
   8191e:	4b04      	ldr	r3, [pc, #16]	; (81930 <udd_ctrl_in_sent+0x140>)
   81920:	4798      	blx	r3
}
   81922:	3710      	adds	r7, #16
   81924:	46bd      	mov	sp, r7
   81926:	bd80      	pop	{r7, pc}
   81928:	0008082d 	.word	0x0008082d
   8192c:	400a4000 	.word	0x400a4000
   81930:	00080885 	.word	0x00080885
   81934:	20000c01 	.word	0x20000c01
   81938:	00081c59 	.word	0x00081c59
   8193c:	00081655 	.word	0x00081655
   81940:	20000c4c 	.word	0x20000c4c
   81944:	20000c04 	.word	0x20000c04
   81948:	20000c02 	.word	0x20000c02
   8194c:	20000c38 	.word	0x20000c38
   81950:	00081c15 	.word	0x00081c15
   81954:	20180000 	.word	0x20180000

00081958 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
   81958:	b580      	push	{r7, lr}
   8195a:	b084      	sub	sp, #16
   8195c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   8195e:	4b61      	ldr	r3, [pc, #388]	; (81ae4 <udd_ctrl_out_received+0x18c>)
   81960:	781b      	ldrb	r3, [r3, #0]
   81962:	2b01      	cmp	r3, #1
   81964:	d00f      	beq.n	81986 <udd_ctrl_out_received+0x2e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   81966:	4b5f      	ldr	r3, [pc, #380]	; (81ae4 <udd_ctrl_out_received+0x18c>)
   81968:	781b      	ldrb	r3, [r3, #0]
   8196a:	2b02      	cmp	r3, #2
   8196c:	d003      	beq.n	81976 <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   8196e:	4b5d      	ldr	r3, [pc, #372]	; (81ae4 <udd_ctrl_out_received+0x18c>)
   81970:	781b      	ldrb	r3, [r3, #0]
   81972:	2b04      	cmp	r3, #4
   81974:	d102      	bne.n	8197c <udd_ctrl_out_received+0x24>
			dbg_print("EoStp\n\r");
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
   81976:	4b5c      	ldr	r3, [pc, #368]	; (81ae8 <udd_ctrl_out_received+0x190>)
   81978:	4798      	blx	r3
   8197a:	e001      	b.n	81980 <udd_ctrl_out_received+0x28>
		} else {
			dbg_print("ErrStp\n\r");
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   8197c:	4b5b      	ldr	r3, [pc, #364]	; (81aec <udd_ctrl_out_received+0x194>)
   8197e:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   81980:	4b5b      	ldr	r3, [pc, #364]	; (81af0 <udd_ctrl_out_received+0x198>)
   81982:	4798      	blx	r3
		return;
   81984:	e0ab      	b.n	81ade <udd_ctrl_out_received+0x186>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   81986:	4b5b      	ldr	r3, [pc, #364]	; (81af4 <udd_ctrl_out_received+0x19c>)
   81988:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8198c:	0d1b      	lsrs	r3, r3, #20
   8198e:	b29b      	uxth	r3, r3
   81990:	f3c3 030a 	ubfx	r3, r3, #0, #11
   81994:	81bb      	strh	r3, [r7, #12]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   81996:	4b58      	ldr	r3, [pc, #352]	; (81af8 <udd_ctrl_out_received+0x1a0>)
   81998:	899b      	ldrh	r3, [r3, #12]
   8199a:	461a      	mov	r2, r3
   8199c:	4b57      	ldr	r3, [pc, #348]	; (81afc <udd_ctrl_out_received+0x1a4>)
   8199e:	881b      	ldrh	r3, [r3, #0]
   819a0:	4619      	mov	r1, r3
   819a2:	89bb      	ldrh	r3, [r7, #12]
   819a4:	440b      	add	r3, r1
   819a6:	429a      	cmp	r2, r3
   819a8:	da05      	bge.n	819b6 <udd_ctrl_out_received+0x5e>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   819aa:	4b53      	ldr	r3, [pc, #332]	; (81af8 <udd_ctrl_out_received+0x1a0>)
   819ac:	899a      	ldrh	r2, [r3, #12]
   819ae:	4b53      	ldr	r3, [pc, #332]	; (81afc <udd_ctrl_out_received+0x1a4>)
   819b0:	881b      	ldrh	r3, [r3, #0]
   819b2:	1ad3      	subs	r3, r2, r3
   819b4:	81bb      	strh	r3, [r7, #12]
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   819b6:	4b52      	ldr	r3, [pc, #328]	; (81b00 <udd_ctrl_out_received+0x1a8>)
   819b8:	60bb      	str	r3, [r7, #8]
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   819ba:	4b4f      	ldr	r3, [pc, #316]	; (81af8 <udd_ctrl_out_received+0x1a0>)
   819bc:	689b      	ldr	r3, [r3, #8]
   819be:	4a4f      	ldr	r2, [pc, #316]	; (81afc <udd_ctrl_out_received+0x1a4>)
   819c0:	8812      	ldrh	r2, [r2, #0]
   819c2:	4413      	add	r3, r2
   819c4:	607b      	str	r3, [r7, #4]
	for (i = 0; i < nb_data; i++) {
   819c6:	2300      	movs	r3, #0
   819c8:	73fb      	strb	r3, [r7, #15]
   819ca:	e00a      	b.n	819e2 <udd_ctrl_out_received+0x8a>
		*ptr_dest++ = *ptr_src++;
   819cc:	687b      	ldr	r3, [r7, #4]
   819ce:	1c5a      	adds	r2, r3, #1
   819d0:	607a      	str	r2, [r7, #4]
   819d2:	68ba      	ldr	r2, [r7, #8]
   819d4:	1c51      	adds	r1, r2, #1
   819d6:	60b9      	str	r1, [r7, #8]
   819d8:	7812      	ldrb	r2, [r2, #0]
   819da:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_data; i++) {
   819dc:	7bfb      	ldrb	r3, [r7, #15]
   819de:	3301      	adds	r3, #1
   819e0:	73fb      	strb	r3, [r7, #15]
   819e2:	7bfb      	ldrb	r3, [r7, #15]
   819e4:	b29b      	uxth	r3, r3
   819e6:	89ba      	ldrh	r2, [r7, #12]
   819e8:	429a      	cmp	r2, r3
   819ea:	d8ef      	bhi.n	819cc <udd_ctrl_out_received+0x74>
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   819ec:	4b43      	ldr	r3, [pc, #268]	; (81afc <udd_ctrl_out_received+0x1a4>)
   819ee:	881a      	ldrh	r2, [r3, #0]
   819f0:	89bb      	ldrh	r3, [r7, #12]
   819f2:	4413      	add	r3, r2
   819f4:	b29a      	uxth	r2, r3
   819f6:	4b41      	ldr	r3, [pc, #260]	; (81afc <udd_ctrl_out_received+0x1a4>)
   819f8:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   819fa:	89bb      	ldrh	r3, [r7, #12]
   819fc:	2b40      	cmp	r3, #64	; 0x40
   819fe:	d10a      	bne.n	81a16 <udd_ctrl_out_received+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   81a00:	4b3d      	ldr	r3, [pc, #244]	; (81af8 <udd_ctrl_out_received+0x1a0>)
   81a02:	88db      	ldrh	r3, [r3, #6]
   81a04:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_buf_cnt +
   81a06:	4b3f      	ldr	r3, [pc, #252]	; (81b04 <udd_ctrl_out_received+0x1ac>)
   81a08:	881b      	ldrh	r3, [r3, #0]
   81a0a:	4619      	mov	r1, r3
   81a0c:	4b3b      	ldr	r3, [pc, #236]	; (81afc <udd_ctrl_out_received+0x1a4>)
   81a0e:	881b      	ldrh	r3, [r3, #0]
   81a10:	440b      	add	r3, r1
			|| (udd_g_ctrlreq.req.wLength <=
   81a12:	429a      	cmp	r2, r3
   81a14:	dc20      	bgt.n	81a58 <udd_ctrl_out_received+0x100>
			udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   81a16:	4b39      	ldr	r3, [pc, #228]	; (81afc <udd_ctrl_out_received+0x1a4>)
   81a18:	881a      	ldrh	r2, [r3, #0]
   81a1a:	4b37      	ldr	r3, [pc, #220]	; (81af8 <udd_ctrl_out_received+0x1a0>)
   81a1c:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   81a1e:	4b36      	ldr	r3, [pc, #216]	; (81af8 <udd_ctrl_out_received+0x1a0>)
   81a20:	695b      	ldr	r3, [r3, #20]
   81a22:	2b00      	cmp	r3, #0
   81a24:	d010      	beq.n	81a48 <udd_ctrl_out_received+0xf0>
			if (!udd_g_ctrlreq.over_under_run()) {
   81a26:	4b34      	ldr	r3, [pc, #208]	; (81af8 <udd_ctrl_out_received+0x1a0>)
   81a28:	695b      	ldr	r3, [r3, #20]
   81a2a:	4798      	blx	r3
   81a2c:	4603      	mov	r3, r0
   81a2e:	f083 0301 	eor.w	r3, r3, #1
   81a32:	b2db      	uxtb	r3, r3
   81a34:	2b00      	cmp	r3, #0
   81a36:	d007      	beq.n	81a48 <udd_ctrl_out_received+0xf0>
				// Stall ZLP
				udd_ctrl_stall_data();
   81a38:	4b2c      	ldr	r3, [pc, #176]	; (81aec <udd_ctrl_out_received+0x194>)
   81a3a:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   81a3c:	4b2d      	ldr	r3, [pc, #180]	; (81af4 <udd_ctrl_out_received+0x19c>)
   81a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
   81a42:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   81a46:	e04a      	b.n	81ade <udd_ctrl_out_received+0x186>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   81a48:	4b2a      	ldr	r3, [pc, #168]	; (81af4 <udd_ctrl_out_received+0x19c>)
   81a4a:	f44f 7200 	mov.w	r2, #512	; 0x200
   81a4e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   81a52:	4b2d      	ldr	r3, [pc, #180]	; (81b08 <udd_ctrl_out_received+0x1b0>)
   81a54:	4798      	blx	r3
		return;
   81a56:	e042      	b.n	81ade <udd_ctrl_out_received+0x186>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   81a58:	4b27      	ldr	r3, [pc, #156]	; (81af8 <udd_ctrl_out_received+0x1a0>)
   81a5a:	899a      	ldrh	r2, [r3, #12]
   81a5c:	4b27      	ldr	r3, [pc, #156]	; (81afc <udd_ctrl_out_received+0x1a4>)
   81a5e:	881b      	ldrh	r3, [r3, #0]
   81a60:	429a      	cmp	r2, r3
   81a62:	d127      	bne.n	81ab4 <udd_ctrl_out_received+0x15c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   81a64:	4b24      	ldr	r3, [pc, #144]	; (81af8 <udd_ctrl_out_received+0x1a0>)
   81a66:	695b      	ldr	r3, [r3, #20]
   81a68:	2b00      	cmp	r3, #0
   81a6a:	d107      	bne.n	81a7c <udd_ctrl_out_received+0x124>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
   81a6c:	4b1f      	ldr	r3, [pc, #124]	; (81aec <udd_ctrl_out_received+0x194>)
   81a6e:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   81a70:	4b20      	ldr	r3, [pc, #128]	; (81af4 <udd_ctrl_out_received+0x19c>)
   81a72:	f44f 7200 	mov.w	r2, #512	; 0x200
   81a76:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   81a7a:	e030      	b.n	81ade <udd_ctrl_out_received+0x186>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   81a7c:	4b1e      	ldr	r3, [pc, #120]	; (81af8 <udd_ctrl_out_received+0x1a0>)
   81a7e:	695b      	ldr	r3, [r3, #20]
   81a80:	4798      	blx	r3
   81a82:	4603      	mov	r3, r0
   81a84:	f083 0301 	eor.w	r3, r3, #1
   81a88:	b2db      	uxtb	r3, r3
   81a8a:	2b00      	cmp	r3, #0
   81a8c:	d007      	beq.n	81a9e <udd_ctrl_out_received+0x146>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   81a8e:	4b17      	ldr	r3, [pc, #92]	; (81aec <udd_ctrl_out_received+0x194>)
   81a90:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   81a92:	4b18      	ldr	r3, [pc, #96]	; (81af4 <udd_ctrl_out_received+0x19c>)
   81a94:	f44f 7200 	mov.w	r2, #512	; 0x200
   81a98:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   81a9c:	e01f      	b.n	81ade <udd_ctrl_out_received+0x186>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   81a9e:	4b19      	ldr	r3, [pc, #100]	; (81b04 <udd_ctrl_out_received+0x1ac>)
   81aa0:	881a      	ldrh	r2, [r3, #0]
   81aa2:	4b16      	ldr	r3, [pc, #88]	; (81afc <udd_ctrl_out_received+0x1a4>)
   81aa4:	881b      	ldrh	r3, [r3, #0]
   81aa6:	4413      	add	r3, r2
   81aa8:	b29a      	uxth	r2, r3
   81aaa:	4b16      	ldr	r3, [pc, #88]	; (81b04 <udd_ctrl_out_received+0x1ac>)
   81aac:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   81aae:	4b13      	ldr	r3, [pc, #76]	; (81afc <udd_ctrl_out_received+0x1a4>)
   81ab0:	2200      	movs	r2, #0
   81ab2:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   81ab4:	4b0f      	ldr	r3, [pc, #60]	; (81af4 <udd_ctrl_out_received+0x19c>)
   81ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
   81aba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   81abe:	4b0d      	ldr	r3, [pc, #52]	; (81af4 <udd_ctrl_out_received+0x19c>)
   81ac0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   81ac4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	flags = cpu_irq_save();
   81ac8:	4b10      	ldr	r3, [pc, #64]	; (81b0c <udd_ctrl_out_received+0x1b4>)
   81aca:	4798      	blx	r3
   81acc:	6038      	str	r0, [r7, #0]
	udd_enable_nak_in_interrupt(0);
   81ace:	4b09      	ldr	r3, [pc, #36]	; (81af4 <udd_ctrl_out_received+0x19c>)
   81ad0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   81ad4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   81ad8:	6838      	ldr	r0, [r7, #0]
   81ada:	4b0d      	ldr	r3, [pc, #52]	; (81b10 <udd_ctrl_out_received+0x1b8>)
   81adc:	4798      	blx	r3
}
   81ade:	3710      	adds	r7, #16
   81ae0:	46bd      	mov	sp, r7
   81ae2:	bd80      	pop	{r7, pc}
   81ae4:	20000c01 	.word	0x20000c01
   81ae8:	00081c59 	.word	0x00081c59
   81aec:	00081b8d 	.word	0x00081b8d
   81af0:	00081655 	.word	0x00081655
   81af4:	400a4000 	.word	0x400a4000
   81af8:	20000c4c 	.word	0x20000c4c
   81afc:	20000c04 	.word	0x20000c04
   81b00:	20180000 	.word	0x20180000
   81b04:	20000c02 	.word	0x20000c02
   81b08:	00081bb1 	.word	0x00081bb1
   81b0c:	0008082d 	.word	0x0008082d
   81b10:	00080885 	.word	0x00080885

00081b14 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
   81b14:	b580      	push	{r7, lr}
   81b16:	af00      	add	r7, sp, #0
	if (Is_udd_out_received(0))
   81b18:	4b0c      	ldr	r3, [pc, #48]	; (81b4c <udd_ctrl_underflow+0x38>)
   81b1a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   81b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
   81b22:	2b00      	cmp	r3, #0
   81b24:	d10f      	bne.n	81b46 <udd_ctrl_underflow+0x32>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   81b26:	4b0a      	ldr	r3, [pc, #40]	; (81b50 <udd_ctrl_underflow+0x3c>)
   81b28:	781b      	ldrb	r3, [r3, #0]
   81b2a:	2b01      	cmp	r3, #1
   81b2c:	d102      	bne.n	81b34 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   81b2e:	4b09      	ldr	r3, [pc, #36]	; (81b54 <udd_ctrl_underflow+0x40>)
   81b30:	4798      	blx	r3
   81b32:	e009      	b.n	81b48 <udd_ctrl_underflow+0x34>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   81b34:	4b06      	ldr	r3, [pc, #24]	; (81b50 <udd_ctrl_underflow+0x3c>)
   81b36:	781b      	ldrb	r3, [r3, #0]
   81b38:	2b04      	cmp	r3, #4
   81b3a:	d105      	bne.n	81b48 <udd_ctrl_underflow+0x34>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   81b3c:	4b03      	ldr	r3, [pc, #12]	; (81b4c <udd_ctrl_underflow+0x38>)
   81b3e:	2220      	movs	r2, #32
   81b40:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   81b44:	e000      	b.n	81b48 <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received
   81b46:	bf00      	nop
	}
}
   81b48:	bd80      	pop	{r7, pc}
   81b4a:	bf00      	nop
   81b4c:	400a4000 	.word	0x400a4000
   81b50:	20000c01 	.word	0x20000c01
   81b54:	00081bb1 	.word	0x00081bb1

00081b58 <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
   81b58:	b480      	push	{r7}
   81b5a:	af00      	add	r7, sp, #0
	if (Is_udd_in_send(0))
   81b5c:	4b09      	ldr	r3, [pc, #36]	; (81b84 <udd_ctrl_overflow+0x2c>)
   81b5e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   81b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   81b66:	2b00      	cmp	r3, #0
   81b68:	d108      	bne.n	81b7c <udd_ctrl_overflow+0x24>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   81b6a:	4b07      	ldr	r3, [pc, #28]	; (81b88 <udd_ctrl_overflow+0x30>)
   81b6c:	781b      	ldrb	r3, [r3, #0]
   81b6e:	2b03      	cmp	r3, #3
   81b70:	d105      	bne.n	81b7e <udd_ctrl_overflow+0x26>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   81b72:	4b04      	ldr	r3, [pc, #16]	; (81b84 <udd_ctrl_overflow+0x2c>)
   81b74:	2220      	movs	r2, #32
   81b76:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   81b7a:	e000      	b.n	81b7e <udd_ctrl_overflow+0x26>
		return; // overflow ignored if IN data is received
   81b7c:	bf00      	nop
	}
}
   81b7e:	46bd      	mov	sp, r7
   81b80:	bc80      	pop	{r7}
   81b82:	4770      	bx	lr
   81b84:	400a4000 	.word	0x400a4000
   81b88:	20000c01 	.word	0x20000c01

00081b8c <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
   81b8c:	b480      	push	{r7}
   81b8e:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   81b90:	4b05      	ldr	r3, [pc, #20]	; (81ba8 <udd_ctrl_stall_data+0x1c>)
   81b92:	2205      	movs	r2, #5
   81b94:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   81b96:	4b05      	ldr	r3, [pc, #20]	; (81bac <udd_ctrl_stall_data+0x20>)
   81b98:	2220      	movs	r2, #32
   81b9a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   81b9e:	bf00      	nop
   81ba0:	46bd      	mov	sp, r7
   81ba2:	bc80      	pop	{r7}
   81ba4:	4770      	bx	lr
   81ba6:	bf00      	nop
   81ba8:	20000c01 	.word	0x20000c01
   81bac:	400a4000 	.word	0x400a4000

00081bb0 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
   81bb0:	b580      	push	{r7, lr}
   81bb2:	b082      	sub	sp, #8
   81bb4:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   81bb6:	4b13      	ldr	r3, [pc, #76]	; (81c04 <udd_ctrl_send_zlp_in+0x54>)
   81bb8:	2203      	movs	r2, #3
   81bba:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
   81bbc:	4b12      	ldr	r3, [pc, #72]	; (81c08 <udd_ctrl_send_zlp_in+0x58>)
   81bbe:	4798      	blx	r3
   81bc0:	6078      	str	r0, [r7, #4]
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   81bc2:	4b12      	ldr	r3, [pc, #72]	; (81c0c <udd_ctrl_send_zlp_in+0x5c>)
   81bc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   81bc8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   81bcc:	4b0f      	ldr	r3, [pc, #60]	; (81c0c <udd_ctrl_send_zlp_in+0x5c>)
   81bce:	f44f 6200 	mov.w	r2, #2048	; 0x800
   81bd2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   81bd6:	4b0d      	ldr	r3, [pc, #52]	; (81c0c <udd_ctrl_send_zlp_in+0x5c>)
   81bd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   81bdc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   81be0:	4b0a      	ldr	r3, [pc, #40]	; (81c0c <udd_ctrl_send_zlp_in+0x5c>)
   81be2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81be6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   81bea:	4b08      	ldr	r3, [pc, #32]	; (81c0c <udd_ctrl_send_zlp_in+0x5c>)
   81bec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81bf0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   81bf4:	6878      	ldr	r0, [r7, #4]
   81bf6:	4b06      	ldr	r3, [pc, #24]	; (81c10 <udd_ctrl_send_zlp_in+0x60>)
   81bf8:	4798      	blx	r3
}
   81bfa:	bf00      	nop
   81bfc:	3708      	adds	r7, #8
   81bfe:	46bd      	mov	sp, r7
   81c00:	bd80      	pop	{r7, pc}
   81c02:	bf00      	nop
   81c04:	20000c01 	.word	0x20000c01
   81c08:	0008082d 	.word	0x0008082d
   81c0c:	400a4000 	.word	0x400a4000
   81c10:	00080885 	.word	0x00080885

00081c14 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
   81c14:	b580      	push	{r7, lr}
   81c16:	b082      	sub	sp, #8
   81c18:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   81c1a:	4b0b      	ldr	r3, [pc, #44]	; (81c48 <udd_ctrl_send_zlp_out+0x34>)
   81c1c:	2204      	movs	r2, #4
   81c1e:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
   81c20:	4b0a      	ldr	r3, [pc, #40]	; (81c4c <udd_ctrl_send_zlp_out+0x38>)
   81c22:	4798      	blx	r3
   81c24:	6078      	str	r0, [r7, #4]
	udd_ack_nak_in(0);
   81c26:	4b0a      	ldr	r3, [pc, #40]	; (81c50 <udd_ctrl_send_zlp_out+0x3c>)
   81c28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   81c2c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   81c30:	4b07      	ldr	r3, [pc, #28]	; (81c50 <udd_ctrl_send_zlp_out+0x3c>)
   81c32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   81c36:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   81c3a:	6878      	ldr	r0, [r7, #4]
   81c3c:	4b05      	ldr	r3, [pc, #20]	; (81c54 <udd_ctrl_send_zlp_out+0x40>)
   81c3e:	4798      	blx	r3
}
   81c40:	bf00      	nop
   81c42:	3708      	adds	r7, #8
   81c44:	46bd      	mov	sp, r7
   81c46:	bd80      	pop	{r7, pc}
   81c48:	20000c01 	.word	0x20000c01
   81c4c:	0008082d 	.word	0x0008082d
   81c50:	400a4000 	.word	0x400a4000
   81c54:	00080885 	.word	0x00080885

00081c58 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   81c58:	b580      	push	{r7, lr}
   81c5a:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   81c5c:	4b04      	ldr	r3, [pc, #16]	; (81c70 <udd_ctrl_endofrequest+0x18>)
   81c5e:	691b      	ldr	r3, [r3, #16]
   81c60:	2b00      	cmp	r3, #0
   81c62:	d002      	beq.n	81c6a <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
   81c64:	4b02      	ldr	r3, [pc, #8]	; (81c70 <udd_ctrl_endofrequest+0x18>)
   81c66:	691b      	ldr	r3, [r3, #16]
   81c68:	4798      	blx	r3
	}
}
   81c6a:	bf00      	nop
   81c6c:	bd80      	pop	{r7, pc}
   81c6e:	bf00      	nop
   81c70:	20000c4c 	.word	0x20000c4c

00081c74 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
   81c74:	b580      	push	{r7, lr}
   81c76:	b082      	sub	sp, #8
   81c78:	af00      	add	r7, sp, #0
	uint32_t status = udd_get_endpoint_status(0);
   81c7a:	4b31      	ldr	r3, [pc, #196]	; (81d40 <udd_ctrl_interrupt+0xcc>)
   81c7c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   81c80:	607b      	str	r3, [r7, #4]

	if (!Is_udd_endpoint_interrupt(0)) {
   81c82:	4b2f      	ldr	r3, [pc, #188]	; (81d40 <udd_ctrl_interrupt+0xcc>)
   81c84:	695b      	ldr	r3, [r3, #20]
   81c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
   81c8a:	2b00      	cmp	r3, #0
   81c8c:	d101      	bne.n	81c92 <udd_ctrl_interrupt+0x1e>
		return false; // No interrupt events on control endpoint
   81c8e:	2300      	movs	r3, #0
   81c90:	e052      	b.n	81d38 <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   81c92:	4b2b      	ldr	r3, [pc, #172]	; (81d40 <udd_ctrl_interrupt+0xcc>)
   81c94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   81c98:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   81c9c:	4b28      	ldr	r3, [pc, #160]	; (81d40 <udd_ctrl_interrupt+0xcc>)
   81c9e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81ca2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	// Search event on control endpoint
	if (Is_udd_endpoint_status_setup_received(status)) {
   81ca6:	687b      	ldr	r3, [r7, #4]
   81ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   81cac:	2b00      	cmp	r3, #0
   81cae:	d003      	beq.n	81cb8 <udd_ctrl_interrupt+0x44>
		// SETUP packet received
		dbg_print("Stp ");
		udd_ctrl_setup_received();
   81cb0:	4b24      	ldr	r3, [pc, #144]	; (81d44 <udd_ctrl_interrupt+0xd0>)
   81cb2:	4798      	blx	r3
		return true;
   81cb4:	2301      	movs	r3, #1
   81cb6:	e03f      	b.n	81d38 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_in_sent(status)
   81cb8:	687b      	ldr	r3, [r7, #4]
   81cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   81cbe:	2b00      	cmp	r3, #0
   81cc0:	d00a      	beq.n	81cd8 <udd_ctrl_interrupt+0x64>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   81cc2:	4b1f      	ldr	r3, [pc, #124]	; (81d40 <udd_ctrl_interrupt+0xcc>)
   81cc4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   81cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   81ccc:	2b00      	cmp	r3, #0
   81cce:	d003      	beq.n	81cd8 <udd_ctrl_interrupt+0x64>
		// IN packet sent
		dbg_print("In ");
		udd_ctrl_in_sent();
   81cd0:	4b1d      	ldr	r3, [pc, #116]	; (81d48 <udd_ctrl_interrupt+0xd4>)
   81cd2:	4798      	blx	r3
		return true;
   81cd4:	2301      	movs	r3, #1
   81cd6:	e02f      	b.n	81d38 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_out_received(status)) {
   81cd8:	687b      	ldr	r3, [r7, #4]
   81cda:	f403 7300 	and.w	r3, r3, #512	; 0x200
   81cde:	2b00      	cmp	r3, #0
   81ce0:	d003      	beq.n	81cea <udd_ctrl_interrupt+0x76>
		// OUT packet received
		dbg_print("Out ");
		udd_ctrl_out_received();
   81ce2:	4b1a      	ldr	r3, [pc, #104]	; (81d4c <udd_ctrl_interrupt+0xd8>)
   81ce4:	4798      	blx	r3
		return true;
   81ce6:	2301      	movs	r3, #1
   81ce8:	e026      	b.n	81d38 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_stall(status)) {
   81cea:	687b      	ldr	r3, [r7, #4]
   81cec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   81cf0:	2b00      	cmp	r3, #0
   81cf2:	d004      	beq.n	81cfe <udd_ctrl_interrupt+0x8a>
		dbg_print("Stall\n\r");
		// STALLed
		udd_ack_stall(0);
   81cf4:	4b12      	ldr	r3, [pc, #72]	; (81d40 <udd_ctrl_interrupt+0xcc>)
   81cf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81cfa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	if (Is_udd_endpoint_status_nak_out(status)) {
   81cfe:	687b      	ldr	r3, [r7, #4]
   81d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   81d04:	2b00      	cmp	r3, #0
   81d06:	d008      	beq.n	81d1a <udd_ctrl_interrupt+0xa6>
		// Overflow on OUT packet
		dbg_print("NakO ");
		udd_ack_nak_out(0);
   81d08:	4b0d      	ldr	r3, [pc, #52]	; (81d40 <udd_ctrl_interrupt+0xcc>)
   81d0a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81d0e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_overflow();
   81d12:	4b0f      	ldr	r3, [pc, #60]	; (81d50 <udd_ctrl_interrupt+0xdc>)
   81d14:	4798      	blx	r3
		return true;
   81d16:	2301      	movs	r3, #1
   81d18:	e00e      	b.n	81d38 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_nak_in(status)) {
   81d1a:	687b      	ldr	r3, [r7, #4]
   81d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   81d20:	2b00      	cmp	r3, #0
   81d22:	d008      	beq.n	81d36 <udd_ctrl_interrupt+0xc2>
		// Underflow on IN packet
		dbg_print("NakI ");
		udd_ack_nak_in(0);
   81d24:	4b06      	ldr	r3, [pc, #24]	; (81d40 <udd_ctrl_interrupt+0xcc>)
   81d26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   81d2a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_underflow();
   81d2e:	4b09      	ldr	r3, [pc, #36]	; (81d54 <udd_ctrl_interrupt+0xe0>)
   81d30:	4798      	blx	r3
		return true;
   81d32:	2301      	movs	r3, #1
   81d34:	e000      	b.n	81d38 <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("UnH ");
	return false;
   81d36:	2300      	movs	r3, #0
}
   81d38:	4618      	mov	r0, r3
   81d3a:	3708      	adds	r7, #8
   81d3c:	46bd      	mov	sp, r7
   81d3e:	bd80      	pop	{r7, pc}
   81d40:	400a4000 	.word	0x400a4000
   81d44:	000816b1 	.word	0x000816b1
   81d48:	000817f1 	.word	0x000817f1
   81d4c:	00081959 	.word	0x00081959
   81d50:	00081b59 	.word	0x00081b59
   81d54:	00081b15 	.word	0x00081b15

00081d58 <udd_ep_job_table_kill>:
	}
}


static void udd_ep_job_table_kill(void)
{
   81d58:	b580      	push	{r7, lr}
   81d5a:	b082      	sub	sp, #8
   81d5c:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   81d5e:	2300      	movs	r3, #0
   81d60:	71fb      	strb	r3, [r7, #7]
   81d62:	e010      	b.n	81d86 <udd_ep_job_table_kill+0x2e>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   81d64:	79fa      	ldrb	r2, [r7, #7]
   81d66:	4613      	mov	r3, r2
   81d68:	005b      	lsls	r3, r3, #1
   81d6a:	4413      	add	r3, r2
   81d6c:	00db      	lsls	r3, r3, #3
   81d6e:	4a09      	ldr	r2, [pc, #36]	; (81d94 <udd_ep_job_table_kill+0x3c>)
   81d70:	1898      	adds	r0, r3, r2
   81d72:	79fb      	ldrb	r3, [r7, #7]
   81d74:	3301      	adds	r3, #1
   81d76:	b2db      	uxtb	r3, r3
   81d78:	461a      	mov	r2, r3
   81d7a:	2101      	movs	r1, #1
   81d7c:	4b06      	ldr	r3, [pc, #24]	; (81d98 <udd_ep_job_table_kill+0x40>)
   81d7e:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   81d80:	79fb      	ldrb	r3, [r7, #7]
   81d82:	3301      	adds	r3, #1
   81d84:	71fb      	strb	r3, [r7, #7]
   81d86:	79fb      	ldrb	r3, [r7, #7]
   81d88:	2b01      	cmp	r3, #1
   81d8a:	d9eb      	bls.n	81d64 <udd_ep_job_table_kill+0xc>
	}
}
   81d8c:	bf00      	nop
   81d8e:	3708      	adds	r7, #8
   81d90:	46bd      	mov	sp, r7
   81d92:	bd80      	pop	{r7, pc}
   81d94:	20000c08 	.word	0x20000c08
   81d98:	00081dd9 	.word	0x00081dd9

00081d9c <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   81d9c:	b580      	push	{r7, lr}
   81d9e:	b082      	sub	sp, #8
   81da0:	af00      	add	r7, sp, #0
   81da2:	4603      	mov	r3, r0
   81da4:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
   81da6:	79fb      	ldrb	r3, [r7, #7]
   81da8:	f003 030f 	and.w	r3, r3, #15
   81dac:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   81dae:	79fb      	ldrb	r3, [r7, #7]
   81db0:	1e5a      	subs	r2, r3, #1
   81db2:	4613      	mov	r3, r2
   81db4:	005b      	lsls	r3, r3, #1
   81db6:	4413      	add	r3, r2
   81db8:	00db      	lsls	r3, r3, #3
   81dba:	4a05      	ldr	r2, [pc, #20]	; (81dd0 <udd_ep_abort_job+0x34>)
   81dbc:	4413      	add	r3, r2
   81dbe:	79fa      	ldrb	r2, [r7, #7]
   81dc0:	2101      	movs	r1, #1
   81dc2:	4618      	mov	r0, r3
   81dc4:	4b03      	ldr	r3, [pc, #12]	; (81dd4 <udd_ep_abort_job+0x38>)
   81dc6:	4798      	blx	r3
}
   81dc8:	bf00      	nop
   81dca:	3708      	adds	r7, #8
   81dcc:	46bd      	mov	sp, r7
   81dce:	bd80      	pop	{r7, pc}
   81dd0:	20000c08 	.word	0x20000c08
   81dd4:	00081dd9 	.word	0x00081dd9

00081dd8 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   81dd8:	b580      	push	{r7, lr}
   81dda:	b082      	sub	sp, #8
   81ddc:	af00      	add	r7, sp, #0
   81dde:	6078      	str	r0, [r7, #4]
   81de0:	460b      	mov	r3, r1
   81de2:	70fb      	strb	r3, [r7, #3]
   81de4:	4613      	mov	r3, r2
   81de6:	70bb      	strb	r3, [r7, #2]
	if (ptr_job->busy == false) {
   81de8:	687b      	ldr	r3, [r7, #4]
   81dea:	7d1b      	ldrb	r3, [r3, #20]
   81dec:	f003 0301 	and.w	r3, r3, #1
   81df0:	b2db      	uxtb	r3, r3
   81df2:	2b00      	cmp	r3, #0
   81df4:	d01f      	beq.n	81e36 <udd_ep_finish_job+0x5e>
		return; // No on-going job
	}
	ptr_job->busy = false;
   81df6:	687a      	ldr	r2, [r7, #4]
   81df8:	7d13      	ldrb	r3, [r2, #20]
   81dfa:	f36f 0300 	bfc	r3, #0, #1
   81dfe:	7513      	strb	r3, [r2, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   81e00:	687b      	ldr	r3, [r7, #4]
   81e02:	681b      	ldr	r3, [r3, #0]
   81e04:	2b00      	cmp	r3, #0
   81e06:	d018      	beq.n	81e3a <udd_ep_finish_job+0x62>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   81e08:	4a0e      	ldr	r2, [pc, #56]	; (81e44 <udd_ep_finish_job+0x6c>)
   81e0a:	78bb      	ldrb	r3, [r7, #2]
   81e0c:	3308      	adds	r3, #8
   81e0e:	015b      	lsls	r3, r3, #5
   81e10:	4413      	add	r3, r2
   81e12:	681b      	ldr	r3, [r3, #0]
   81e14:	f003 0308 	and.w	r3, r3, #8
   81e18:	2b00      	cmp	r3, #0
   81e1a:	d003      	beq.n	81e24 <udd_ep_finish_job+0x4c>
		ep_num |= USB_EP_DIR_IN;
   81e1c:	78bb      	ldrb	r3, [r7, #2]
   81e1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   81e22:	70bb      	strb	r3, [r7, #2]
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   81e24:	687b      	ldr	r3, [r7, #4]
   81e26:	681b      	ldr	r3, [r3, #0]
   81e28:	78fa      	ldrb	r2, [r7, #3]
   81e2a:	4610      	mov	r0, r2
   81e2c:	687a      	ldr	r2, [r7, #4]
   81e2e:	6891      	ldr	r1, [r2, #8]
   81e30:	78ba      	ldrb	r2, [r7, #2]
   81e32:	4798      	blx	r3
   81e34:	e002      	b.n	81e3c <udd_ep_finish_job+0x64>
		return; // No on-going job
   81e36:	bf00      	nop
   81e38:	e000      	b.n	81e3c <udd_ep_finish_job+0x64>
		return; // No callback linked to job
   81e3a:	bf00      	nop
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   81e3c:	3708      	adds	r7, #8
   81e3e:	46bd      	mov	sp, r7
   81e40:	bd80      	pop	{r7, pc}
   81e42:	bf00      	nop
   81e44:	400a4000 	.word	0x400a4000

00081e48 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   81e48:	b580      	push	{r7, lr}
   81e4a:	b086      	sub	sp, #24
   81e4c:	af00      	add	r7, sp, #0
   81e4e:	4603      	mov	r3, r0
   81e50:	71fb      	strb	r3, [r7, #7]
	uint32_t udd_dma_ctrl = 0;
   81e52:	2300      	movs	r3, #0
   81e54:	617b      	str	r3, [r7, #20]
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   81e56:	79fb      	ldrb	r3, [r7, #7]
   81e58:	1e5a      	subs	r2, r3, #1
   81e5a:	4613      	mov	r3, r2
   81e5c:	005b      	lsls	r3, r3, #1
   81e5e:	4413      	add	r3, r2
   81e60:	00db      	lsls	r3, r3, #3
   81e62:	4a6d      	ldr	r2, [pc, #436]	; (82018 <udd_ep_trans_done+0x1d0>)
   81e64:	4413      	add	r3, r2
   81e66:	60fb      	str	r3, [r7, #12]

	if (!ptr_job->busy) {
   81e68:	68fb      	ldr	r3, [r7, #12]
   81e6a:	7d1b      	ldrb	r3, [r3, #20]
   81e6c:	f003 0301 	and.w	r3, r3, #1
   81e70:	b2db      	uxtb	r3, r3
   81e72:	2b00      	cmp	r3, #0
   81e74:	f000 80cb 	beq.w	8200e <udd_ep_trans_done+0x1c6>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   81e78:	68fb      	ldr	r3, [r7, #12]
   81e7a:	68da      	ldr	r2, [r3, #12]
   81e7c:	68fb      	ldr	r3, [r7, #12]
   81e7e:	689b      	ldr	r3, [r3, #8]
   81e80:	429a      	cmp	r2, r3
   81e82:	f000 8098 	beq.w	81fb6 <udd_ep_trans_done+0x16e>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   81e86:	68fb      	ldr	r3, [r7, #12]
   81e88:	689a      	ldr	r2, [r3, #8]
   81e8a:	68fb      	ldr	r3, [r7, #12]
   81e8c:	68db      	ldr	r3, [r3, #12]
   81e8e:	1ad3      	subs	r3, r2, r3
   81e90:	613b      	str	r3, [r7, #16]

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   81e92:	693b      	ldr	r3, [r7, #16]
   81e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   81e98:	d905      	bls.n	81ea6 <udd_ep_trans_done+0x5e>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   81e9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   81e9e:	613b      	str	r3, [r7, #16]

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   81ea0:	2300      	movs	r3, #0
   81ea2:	617b      	str	r3, [r7, #20]
   81ea4:	e002      	b.n	81eac <udd_ep_trans_done+0x64>
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   81ea6:	693b      	ldr	r3, [r7, #16]
   81ea8:	041b      	lsls	r3, r3, #16
   81eaa:	617b      	str	r3, [r7, #20]
		}
		if (Is_udd_endpoint_in(ep)) {
   81eac:	4a5b      	ldr	r2, [pc, #364]	; (8201c <udd_ep_trans_done+0x1d4>)
   81eae:	79fb      	ldrb	r3, [r7, #7]
   81eb0:	3308      	adds	r3, #8
   81eb2:	015b      	lsls	r3, r3, #5
   81eb4:	4413      	add	r3, r2
   81eb6:	681b      	ldr	r3, [r3, #0]
   81eb8:	f003 0308 	and.w	r3, r3, #8
   81ebc:	2b00      	cmp	r3, #0
   81ebe:	d01d      	beq.n	81efc <udd_ep_trans_done+0xb4>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   81ec0:	4a56      	ldr	r2, [pc, #344]	; (8201c <udd_ep_trans_done+0x1d4>)
   81ec2:	79fb      	ldrb	r3, [r7, #7]
   81ec4:	3308      	adds	r3, #8
   81ec6:	015b      	lsls	r3, r3, #5
   81ec8:	4413      	add	r3, r2
   81eca:	681b      	ldr	r3, [r3, #0]
   81ecc:	f003 0307 	and.w	r3, r3, #7
   81ed0:	2208      	movs	r2, #8
   81ed2:	fa02 f303 	lsl.w	r3, r2, r3
   81ed6:	461a      	mov	r2, r3
   81ed8:	693b      	ldr	r3, [r7, #16]
   81eda:	fbb3 f1f2 	udiv	r1, r3, r2
   81ede:	fb02 f201 	mul.w	r2, r2, r1
   81ee2:	1a9b      	subs	r3, r3, r2
   81ee4:	2b00      	cmp	r3, #0
   81ee6:	d027      	beq.n	81f38 <udd_ep_trans_done+0xf0>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   81ee8:	697b      	ldr	r3, [r7, #20]
   81eea:	f043 0308 	orr.w	r3, r3, #8
   81eee:	617b      	str	r3, [r7, #20]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   81ef0:	68fa      	ldr	r2, [r7, #12]
   81ef2:	7d13      	ldrb	r3, [r2, #20]
   81ef4:	f36f 0341 	bfc	r3, #1, #1
   81ef8:	7513      	strb	r3, [r2, #20]
   81efa:	e01d      	b.n	81f38 <udd_ep_trans_done+0xf0>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   81efc:	4a47      	ldr	r2, [pc, #284]	; (8201c <udd_ep_trans_done+0x1d4>)
   81efe:	79fb      	ldrb	r3, [r7, #7]
   81f00:	3308      	adds	r3, #8
   81f02:	015b      	lsls	r3, r3, #5
   81f04:	4413      	add	r3, r2
   81f06:	681b      	ldr	r3, [r3, #0]
   81f08:	091b      	lsrs	r3, r3, #4
   81f0a:	f003 0303 	and.w	r3, r3, #3
   81f0e:	2b01      	cmp	r3, #1
   81f10:	d10e      	bne.n	81f30 <udd_ep_trans_done+0xe8>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   81f12:	4a42      	ldr	r2, [pc, #264]	; (8201c <udd_ep_trans_done+0x1d4>)
   81f14:	79fb      	ldrb	r3, [r7, #7]
   81f16:	3308      	adds	r3, #8
   81f18:	015b      	lsls	r3, r3, #5
   81f1a:	4413      	add	r3, r2
   81f1c:	681b      	ldr	r3, [r3, #0]
   81f1e:	f003 0307 	and.w	r3, r3, #7
   81f22:	2208      	movs	r2, #8
   81f24:	fa02 f303 	lsl.w	r3, r2, r3
   81f28:	461a      	mov	r2, r3
   81f2a:	693b      	ldr	r3, [r7, #16]
   81f2c:	429a      	cmp	r2, r3
   81f2e:	d303      	bcc.n	81f38 <udd_ep_trans_done+0xf0>

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   81f30:	697b      	ldr	r3, [r7, #20]
   81f32:	f043 0314 	orr.w	r3, r3, #20
   81f36:	617b      	str	r3, [r7, #20]
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   81f38:	79fb      	ldrb	r3, [r7, #7]
   81f3a:	011a      	lsls	r2, r3, #4
   81f3c:	4b38      	ldr	r3, [pc, #224]	; (82020 <udd_ep_trans_done+0x1d8>)
   81f3e:	4413      	add	r3, r2
   81f40:	68fa      	ldr	r2, [r7, #12]
   81f42:	6851      	ldr	r1, [r2, #4]
   81f44:	68fa      	ldr	r2, [r7, #12]
   81f46:	68d2      	ldr	r2, [r2, #12]
   81f48:	440a      	add	r2, r1
   81f4a:	605a      	str	r2, [r3, #4]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   81f4c:	697b      	ldr	r3, [r7, #20]
   81f4e:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   81f52:	617b      	str	r3, [r7, #20]

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
   81f54:	4b33      	ldr	r3, [pc, #204]	; (82024 <udd_ep_trans_done+0x1dc>)
   81f56:	4798      	blx	r3
   81f58:	60b8      	str	r0, [r7, #8]
		if (!(udd_endpoint_dma_get_status(ep)
   81f5a:	79fb      	ldrb	r3, [r7, #7]
   81f5c:	011a      	lsls	r2, r3, #4
   81f5e:	4b30      	ldr	r3, [pc, #192]	; (82020 <udd_ep_trans_done+0x1d8>)
   81f60:	4413      	add	r3, r2
   81f62:	68db      	ldr	r3, [r3, #12]
				& UDPHS_DMASTATUS_END_TR_ST)) {
   81f64:	f003 0310 	and.w	r3, r3, #16
		if (!(udd_endpoint_dma_get_status(ep)
   81f68:	2b00      	cmp	r3, #0
   81f6a:	d11d      	bne.n	81fa8 <udd_ep_trans_done+0x160>
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   81f6c:	79fb      	ldrb	r3, [r7, #7]
   81f6e:	011a      	lsls	r2, r3, #4
   81f70:	4b2b      	ldr	r3, [pc, #172]	; (82020 <udd_ep_trans_done+0x1d8>)
   81f72:	4413      	add	r3, r2
   81f74:	697a      	ldr	r2, [r7, #20]
   81f76:	609a      	str	r2, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   81f78:	68fb      	ldr	r3, [r7, #12]
   81f7a:	68da      	ldr	r2, [r3, #12]
   81f7c:	693b      	ldr	r3, [r7, #16]
   81f7e:	441a      	add	r2, r3
   81f80:	68fb      	ldr	r3, [r7, #12]
   81f82:	60da      	str	r2, [r3, #12]
			ptr_job->buf_load = next_trans;
   81f84:	68fb      	ldr	r3, [r7, #12]
   81f86:	693a      	ldr	r2, [r7, #16]
   81f88:	611a      	str	r2, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   81f8a:	4924      	ldr	r1, [pc, #144]	; (8201c <udd_ep_trans_done+0x1d4>)
   81f8c:	4b23      	ldr	r3, [pc, #140]	; (8201c <udd_ep_trans_done+0x1d4>)
   81f8e:	691a      	ldr	r2, [r3, #16]
   81f90:	79fb      	ldrb	r3, [r7, #7]
   81f92:	3b01      	subs	r3, #1
   81f94:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   81f98:	fa00 f303 	lsl.w	r3, r0, r3
   81f9c:	4313      	orrs	r3, r2
   81f9e:	610b      	str	r3, [r1, #16]
			cpu_irq_restore(flags);
   81fa0:	68b8      	ldr	r0, [r7, #8]
   81fa2:	4b21      	ldr	r3, [pc, #132]	; (82028 <udd_ep_trans_done+0x1e0>)
   81fa4:	4798      	blx	r3
			return;
   81fa6:	e033      	b.n	82010 <udd_ep_trans_done+0x1c8>
		}
		cpu_irq_restore(flags);
   81fa8:	68b8      	ldr	r0, [r7, #8]
   81faa:	4b1f      	ldr	r3, [pc, #124]	; (82028 <udd_ep_trans_done+0x1e0>)
   81fac:	4798      	blx	r3

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   81fae:	68fb      	ldr	r3, [r7, #12]
   81fb0:	68da      	ldr	r2, [r3, #12]
   81fb2:	68fb      	ldr	r3, [r7, #12]
   81fb4:	609a      	str	r2, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   81fb6:	4a19      	ldr	r2, [pc, #100]	; (8201c <udd_ep_trans_done+0x1d4>)
   81fb8:	79fb      	ldrb	r3, [r7, #7]
   81fba:	3308      	adds	r3, #8
   81fbc:	015b      	lsls	r3, r3, #5
   81fbe:	4413      	add	r3, r2
   81fc0:	681b      	ldr	r3, [r3, #0]
   81fc2:	f003 0308 	and.w	r3, r3, #8
   81fc6:	2b00      	cmp	r3, #0
   81fc8:	d01a      	beq.n	82000 <udd_ep_trans_done+0x1b8>
		if (ptr_job->b_shortpacket) {
   81fca:	68fb      	ldr	r3, [r7, #12]
   81fcc:	7d1b      	ldrb	r3, [r3, #20]
   81fce:	f003 0302 	and.w	r3, r3, #2
   81fd2:	b2db      	uxtb	r3, r3
   81fd4:	2b00      	cmp	r3, #0
   81fd6:	d013      	beq.n	82000 <udd_ep_trans_done+0x1b8>
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   81fd8:	4a10      	ldr	r2, [pc, #64]	; (8201c <udd_ep_trans_done+0x1d4>)
   81fda:	79fb      	ldrb	r3, [r7, #7]
   81fdc:	3308      	adds	r3, #8
   81fde:	015b      	lsls	r3, r3, #5
   81fe0:	4413      	add	r3, r2
   81fe2:	3304      	adds	r3, #4
   81fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   81fe8:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep);
   81fea:	490c      	ldr	r1, [pc, #48]	; (8201c <udd_ep_trans_done+0x1d4>)
   81fec:	4b0b      	ldr	r3, [pc, #44]	; (8201c <udd_ep_trans_done+0x1d4>)
   81fee:	691a      	ldr	r2, [r3, #16]
   81ff0:	79fb      	ldrb	r3, [r7, #7]
   81ff2:	f44f 7080 	mov.w	r0, #256	; 0x100
   81ff6:	fa00 f303 	lsl.w	r3, r0, r3
   81ffa:	4313      	orrs	r3, r2
   81ffc:	610b      	str	r3, [r1, #16]
			return;
   81ffe:	e007      	b.n	82010 <udd_ep_trans_done+0x1c8>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   82000:	79fb      	ldrb	r3, [r7, #7]
   82002:	461a      	mov	r2, r3
   82004:	2100      	movs	r1, #0
   82006:	68f8      	ldr	r0, [r7, #12]
   82008:	4b08      	ldr	r3, [pc, #32]	; (8202c <udd_ep_trans_done+0x1e4>)
   8200a:	4798      	blx	r3
   8200c:	e000      	b.n	82010 <udd_ep_trans_done+0x1c8>
		return; // No job is running, then ignore it (system error)
   8200e:	bf00      	nop
}
   82010:	3718      	adds	r7, #24
   82012:	46bd      	mov	sp, r7
   82014:	bd80      	pop	{r7, pc}
   82016:	bf00      	nop
   82018:	20000c08 	.word	0x20000c08
   8201c:	400a4000 	.word	0x400a4000
   82020:	400a4300 	.word	0x400a4300
   82024:	0008082d 	.word	0x0008082d
   82028:	00080885 	.word	0x00080885
   8202c:	00081dd9 	.word	0x00081dd9

00082030 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
   82030:	b580      	push	{r7, lr}
   82032:	b084      	sub	sp, #16
   82034:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   82036:	2301      	movs	r3, #1
   82038:	73fb      	strb	r3, [r7, #15]
   8203a:	e0e0      	b.n	821fe <udd_ep_interrupt+0x1ce>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   8203c:	7bfb      	ldrb	r3, [r7, #15]
   8203e:	1e5a      	subs	r2, r3, #1
   82040:	4613      	mov	r3, r2
   82042:	005b      	lsls	r3, r3, #1
   82044:	4413      	add	r3, r2
   82046:	00db      	lsls	r3, r3, #3
   82048:	4a71      	ldr	r2, [pc, #452]	; (82210 <udd_ep_interrupt+0x1e0>)
   8204a:	4413      	add	r3, r2
   8204c:	60bb      	str	r3, [r7, #8]

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   8204e:	4b71      	ldr	r3, [pc, #452]	; (82214 <udd_ep_interrupt+0x1e4>)
   82050:	691a      	ldr	r2, [r3, #16]
   82052:	7bfb      	ldrb	r3, [r7, #15]
   82054:	3b01      	subs	r3, #1
   82056:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   8205a:	fa01 f303 	lsl.w	r3, r1, r3
   8205e:	4013      	ands	r3, r2
   82060:	2b00      	cmp	r3, #0
   82062:	d03c      	beq.n	820de <udd_ep_interrupt+0xae>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   82064:	4b6b      	ldr	r3, [pc, #428]	; (82214 <udd_ep_interrupt+0x1e4>)
   82066:	695a      	ldr	r2, [r3, #20]
   82068:	7bfb      	ldrb	r3, [r7, #15]
   8206a:	3b01      	subs	r3, #1
   8206c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   82070:	fa01 f303 	lsl.w	r3, r1, r3
   82074:	4013      	ands	r3, r2
   82076:	2b00      	cmp	r3, #0
   82078:	d031      	beq.n	820de <udd_ep_interrupt+0xae>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   8207a:	7bfb      	ldrb	r3, [r7, #15]
   8207c:	011a      	lsls	r2, r3, #4
   8207e:	4b66      	ldr	r3, [pc, #408]	; (82218 <udd_ep_interrupt+0x1e8>)
   82080:	4413      	add	r3, r2
   82082:	68db      	ldr	r3, [r3, #12]
					& UDPHS_DMASTATUS_CHANN_ENB) {
   82084:	f003 0301 	and.w	r3, r3, #1
			if (udd_endpoint_dma_get_status(ep)
   82088:	2b00      	cmp	r3, #0
   8208a:	d001      	beq.n	82090 <udd_ep_interrupt+0x60>
				return true; // Ignore EOT_STA interrupt
   8208c:	2301      	movs	r3, #1
   8208e:	e0bb      	b.n	82208 <udd_ep_interrupt+0x1d8>
			}
			dbg_print("dma%d: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   82090:	4960      	ldr	r1, [pc, #384]	; (82214 <udd_ep_interrupt+0x1e4>)
   82092:	4b60      	ldr	r3, [pc, #384]	; (82214 <udd_ep_interrupt+0x1e4>)
   82094:	691a      	ldr	r2, [r3, #16]
   82096:	7bfb      	ldrb	r3, [r7, #15]
   82098:	3b01      	subs	r3, #1
   8209a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   8209e:	fa00 f303 	lsl.w	r3, r0, r3
   820a2:	43db      	mvns	r3, r3
   820a4:	4013      	ands	r3, r2
   820a6:	610b      	str	r3, [r1, #16]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   820a8:	7bfb      	ldrb	r3, [r7, #15]
   820aa:	011a      	lsls	r2, r3, #4
   820ac:	4b5a      	ldr	r3, [pc, #360]	; (82218 <udd_ep_interrupt+0x1e8>)
   820ae:	4413      	add	r3, r2
   820b0:	68db      	ldr	r3, [r3, #12]
					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
   820b2:	0c1b      	lsrs	r3, r3, #16
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   820b4:	b29b      	uxth	r3, r3
   820b6:	607b      	str	r3, [r7, #4]
			if (nb_remaining) {
   820b8:	687b      	ldr	r3, [r7, #4]
   820ba:	2b00      	cmp	r3, #0
   820bc:	d009      	beq.n	820d2 <udd_ep_interrupt+0xa2>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   820be:	68bb      	ldr	r3, [r7, #8]
   820c0:	68da      	ldr	r2, [r3, #12]
   820c2:	687b      	ldr	r3, [r7, #4]
   820c4:	1ad2      	subs	r2, r2, r3
   820c6:	68bb      	ldr	r3, [r7, #8]
   820c8:	60da      	str	r2, [r3, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   820ca:	68bb      	ldr	r3, [r7, #8]
   820cc:	68da      	ldr	r2, [r3, #12]
   820ce:	68bb      	ldr	r3, [r7, #8]
   820d0:	609a      	str	r2, [r3, #8]
			}
			udd_ep_trans_done(ep);
   820d2:	7bfb      	ldrb	r3, [r7, #15]
   820d4:	4618      	mov	r0, r3
   820d6:	4b51      	ldr	r3, [pc, #324]	; (8221c <udd_ep_interrupt+0x1ec>)
   820d8:	4798      	blx	r3
			return true;
   820da:	2301      	movs	r3, #1
   820dc:	e094      	b.n	82208 <udd_ep_interrupt+0x1d8>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   820de:	4b4d      	ldr	r3, [pc, #308]	; (82214 <udd_ep_interrupt+0x1e4>)
   820e0:	691a      	ldr	r2, [r3, #16]
   820e2:	7bfb      	ldrb	r3, [r7, #15]
   820e4:	f44f 7180 	mov.w	r1, #256	; 0x100
   820e8:	fa01 f303 	lsl.w	r3, r1, r3
   820ec:	4013      	ands	r3, r2
   820ee:	2b00      	cmp	r3, #0
   820f0:	f000 8082 	beq.w	821f8 <udd_ep_interrupt+0x1c8>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   820f4:	4a47      	ldr	r2, [pc, #284]	; (82214 <udd_ep_interrupt+0x1e4>)
   820f6:	7bfb      	ldrb	r3, [r7, #15]
   820f8:	015b      	lsls	r3, r3, #5
   820fa:	4413      	add	r3, r2
   820fc:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   82100:	681b      	ldr	r3, [r3, #0]
   82102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   82106:	2b00      	cmp	r3, #0
   82108:	d024      	beq.n	82154 <udd_ep_interrupt+0x124>
					&& !Is_udd_tx_pkt_ready(ep)) {
   8210a:	4a42      	ldr	r2, [pc, #264]	; (82214 <udd_ep_interrupt+0x1e4>)
   8210c:	7bfb      	ldrb	r3, [r7, #15]
   8210e:	015b      	lsls	r3, r3, #5
   82110:	4413      	add	r3, r2
   82112:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   82116:	681b      	ldr	r3, [r3, #0]
   82118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   8211c:	2b00      	cmp	r3, #0
   8211e:	d119      	bne.n	82154 <udd_ep_interrupt+0x124>
				udd_disable_tx_pkt_ready_interrupt(ep);
   82120:	4a3c      	ldr	r2, [pc, #240]	; (82214 <udd_ep_interrupt+0x1e4>)
   82122:	7bfb      	ldrb	r3, [r7, #15]
   82124:	015b      	lsls	r3, r3, #5
   82126:	4413      	add	r3, r2
   82128:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8212c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   82130:	601a      	str	r2, [r3, #0]
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   82132:	4a38      	ldr	r2, [pc, #224]	; (82214 <udd_ep_interrupt+0x1e4>)
   82134:	7bfb      	ldrb	r3, [r7, #15]
   82136:	015b      	lsls	r3, r3, #5
   82138:	4413      	add	r3, r2
   8213a:	f503 738a 	add.w	r3, r3, #276	; 0x114
   8213e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   82142:	601a      	str	r2, [r3, #0]
				udd_ep_finish_job(ptr_job, false, ep);
   82144:	7bfb      	ldrb	r3, [r7, #15]
   82146:	461a      	mov	r2, r3
   82148:	2100      	movs	r1, #0
   8214a:	68b8      	ldr	r0, [r7, #8]
   8214c:	4b34      	ldr	r3, [pc, #208]	; (82220 <udd_ep_interrupt+0x1f0>)
   8214e:	4798      	blx	r3
				return true;
   82150:	2301      	movs	r3, #1
   82152:	e059      	b.n	82208 <udd_ep_interrupt+0x1d8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   82154:	4a2f      	ldr	r2, [pc, #188]	; (82214 <udd_ep_interrupt+0x1e4>)
   82156:	7bfb      	ldrb	r3, [r7, #15]
   82158:	015b      	lsls	r3, r3, #5
   8215a:	4413      	add	r3, r2
   8215c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   82160:	681b      	ldr	r3, [r3, #0]
   82162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   82166:	2b00      	cmp	r3, #0
   82168:	d046      	beq.n	821f8 <udd_ep_interrupt+0x1c8>
					&& (0 == udd_nb_busy_bank(ep))) {
   8216a:	4a2a      	ldr	r2, [pc, #168]	; (82214 <udd_ep_interrupt+0x1e4>)
   8216c:	7bfb      	ldrb	r3, [r7, #15]
   8216e:	015b      	lsls	r3, r3, #5
   82170:	4413      	add	r3, r2
   82172:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   82176:	681b      	ldr	r3, [r3, #0]
   82178:	0c9b      	lsrs	r3, r3, #18
   8217a:	f003 0303 	and.w	r3, r3, #3
   8217e:	2b00      	cmp	r3, #0
   82180:	d13a      	bne.n	821f8 <udd_ep_interrupt+0x1c8>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   82182:	4a24      	ldr	r2, [pc, #144]	; (82214 <udd_ep_interrupt+0x1e4>)
   82184:	7bfb      	ldrb	r3, [r7, #15]
   82186:	015b      	lsls	r3, r3, #5
   82188:	4413      	add	r3, r2
   8218a:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8218e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   82192:	601a      	str	r2, [r3, #0]
				udd_disable_endpoint_interrupt(ep);
   82194:	491f      	ldr	r1, [pc, #124]	; (82214 <udd_ep_interrupt+0x1e4>)
   82196:	4b1f      	ldr	r3, [pc, #124]	; (82214 <udd_ep_interrupt+0x1e4>)
   82198:	691a      	ldr	r2, [r3, #16]
   8219a:	7bfb      	ldrb	r3, [r7, #15]
   8219c:	f44f 7080 	mov.w	r0, #256	; 0x100
   821a0:	fa00 f303 	lsl.w	r3, r0, r3
   821a4:	43db      	mvns	r3, r3
   821a6:	4013      	ands	r3, r2
   821a8:	610b      	str	r3, [r1, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   821aa:	68ba      	ldr	r2, [r7, #8]
   821ac:	7d13      	ldrb	r3, [r2, #20]
   821ae:	f36f 0382 	bfc	r3, #2, #1
   821b2:	7513      	strb	r3, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   821b4:	4917      	ldr	r1, [pc, #92]	; (82214 <udd_ep_interrupt+0x1e4>)
   821b6:	7bfb      	ldrb	r3, [r7, #15]
   821b8:	4816      	ldr	r0, [pc, #88]	; (82214 <udd_ep_interrupt+0x1e4>)
   821ba:	7bfa      	ldrb	r2, [r7, #15]
   821bc:	0152      	lsls	r2, r2, #5
   821be:	4402      	add	r2, r0
   821c0:	f502 7284 	add.w	r2, r2, #264	; 0x108
   821c4:	6812      	ldr	r2, [r2, #0]
   821c6:	f022 0202 	bic.w	r2, r2, #2
   821ca:	015b      	lsls	r3, r3, #5
   821cc:	440b      	add	r3, r1
   821ce:	f503 7384 	add.w	r3, r3, #264	; 0x108
   821d2:	601a      	str	r2, [r3, #0]
				udd_enable_stall_handshake(ep);
   821d4:	4a0f      	ldr	r2, [pc, #60]	; (82214 <udd_ep_interrupt+0x1e4>)
   821d6:	7bfb      	ldrb	r3, [r7, #15]
   821d8:	015b      	lsls	r3, r3, #5
   821da:	4413      	add	r3, r2
   821dc:	f503 738a 	add.w	r3, r3, #276	; 0x114
   821e0:	2220      	movs	r2, #32
   821e2:	601a      	str	r2, [r3, #0]
				udd_reset_data_toggle(ep);
   821e4:	4a0b      	ldr	r2, [pc, #44]	; (82214 <udd_ep_interrupt+0x1e4>)
   821e6:	7bfb      	ldrb	r3, [r7, #15]
   821e8:	015b      	lsls	r3, r3, #5
   821ea:	4413      	add	r3, r2
   821ec:	f503 738c 	add.w	r3, r3, #280	; 0x118
   821f0:	2240      	movs	r2, #64	; 0x40
   821f2:	601a      	str	r2, [r3, #0]
				//dbg_print("exHalt%x ", ep);
				return true;
   821f4:	2301      	movs	r3, #1
   821f6:	e007      	b.n	82208 <udd_ep_interrupt+0x1d8>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   821f8:	7bfb      	ldrb	r3, [r7, #15]
   821fa:	3301      	adds	r3, #1
   821fc:	73fb      	strb	r3, [r7, #15]
   821fe:	7bfb      	ldrb	r3, [r7, #15]
   82200:	2b02      	cmp	r3, #2
   82202:	f67f af1b 	bls.w	8203c <udd_ep_interrupt+0xc>
			}
		}
	}
	return false;
   82206:	2300      	movs	r3, #0
}
   82208:	4618      	mov	r0, r3
   8220a:	3710      	adds	r7, #16
   8220c:	46bd      	mov	sp, r7
   8220e:	bd80      	pop	{r7, pc}
   82210:	20000c08 	.word	0x20000c08
   82214:	400a4000 	.word	0x400a4000
   82218:	400a4300 	.word	0x400a4300
   8221c:	00081e49 	.word	0x00081e49
   82220:	00081dd9 	.word	0x00081dd9

00082224 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   82224:	b580      	push	{r7, lr}
   82226:	b084      	sub	sp, #16
   82228:	af00      	add	r7, sp, #0
   8222a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   8222c:	2300      	movs	r3, #0
   8222e:	60fb      	str	r3, [r7, #12]
   82230:	e017      	b.n	82262 <LED_Off+0x3e>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   82232:	4a0f      	ldr	r2, [pc, #60]	; (82270 <LED_Off+0x4c>)
   82234:	68fb      	ldr	r3, [r7, #12]
   82236:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8223a:	687b      	ldr	r3, [r7, #4]
   8223c:	429a      	cmp	r2, r3
   8223e:	d10d      	bne.n	8225c <LED_Off+0x38>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   82240:	4a0b      	ldr	r2, [pc, #44]	; (82270 <LED_Off+0x4c>)
   82242:	68fb      	ldr	r3, [r7, #12]
   82244:	00db      	lsls	r3, r3, #3
   82246:	4413      	add	r3, r2
   82248:	685b      	ldr	r3, [r3, #4]
   8224a:	2b01      	cmp	r3, #1
   8224c:	d103      	bne.n	82256 <LED_Off+0x32>
				gpio_set_pin_low(led_gpio);
   8224e:	6878      	ldr	r0, [r7, #4]
   82250:	4b08      	ldr	r3, [pc, #32]	; (82274 <LED_Off+0x50>)
   82252:	4798      	blx	r3
   82254:	e002      	b.n	8225c <LED_Off+0x38>
			} else {
				gpio_set_pin_high(led_gpio);
   82256:	6878      	ldr	r0, [r7, #4]
   82258:	4b07      	ldr	r3, [pc, #28]	; (82278 <LED_Off+0x54>)
   8225a:	4798      	blx	r3
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   8225c:	68fb      	ldr	r3, [r7, #12]
   8225e:	3301      	adds	r3, #1
   82260:	60fb      	str	r3, [r7, #12]
   82262:	68fb      	ldr	r3, [r7, #12]
   82264:	2b01      	cmp	r3, #1
   82266:	d9e4      	bls.n	82232 <LED_Off+0xe>
			}
		}
	}
}
   82268:	bf00      	nop
   8226a:	3710      	adds	r7, #16
   8226c:	46bd      	mov	sp, r7
   8226e:	bd80      	pop	{r7, pc}
   82270:	0008428c 	.word	0x0008428c
   82274:	00082de5 	.word	0x00082de5
   82278:	00082db5 	.word	0x00082db5

0008227c <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   8227c:	b580      	push	{r7, lr}
   8227e:	b084      	sub	sp, #16
   82280:	af00      	add	r7, sp, #0
   82282:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   82284:	2300      	movs	r3, #0
   82286:	60fb      	str	r3, [r7, #12]
   82288:	e017      	b.n	822ba <LED_On+0x3e>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   8228a:	4a0f      	ldr	r2, [pc, #60]	; (822c8 <LED_On+0x4c>)
   8228c:	68fb      	ldr	r3, [r7, #12]
   8228e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   82292:	687b      	ldr	r3, [r7, #4]
   82294:	429a      	cmp	r2, r3
   82296:	d10d      	bne.n	822b4 <LED_On+0x38>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   82298:	4a0b      	ldr	r2, [pc, #44]	; (822c8 <LED_On+0x4c>)
   8229a:	68fb      	ldr	r3, [r7, #12]
   8229c:	00db      	lsls	r3, r3, #3
   8229e:	4413      	add	r3, r2
   822a0:	685b      	ldr	r3, [r3, #4]
   822a2:	2b01      	cmp	r3, #1
   822a4:	d103      	bne.n	822ae <LED_On+0x32>
				gpio_set_pin_high(led_gpio);
   822a6:	6878      	ldr	r0, [r7, #4]
   822a8:	4b08      	ldr	r3, [pc, #32]	; (822cc <LED_On+0x50>)
   822aa:	4798      	blx	r3
   822ac:	e002      	b.n	822b4 <LED_On+0x38>
			} else {
				gpio_set_pin_low(led_gpio);
   822ae:	6878      	ldr	r0, [r7, #4]
   822b0:	4b07      	ldr	r3, [pc, #28]	; (822d0 <LED_On+0x54>)
   822b2:	4798      	blx	r3
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   822b4:	68fb      	ldr	r3, [r7, #12]
   822b6:	3301      	adds	r3, #1
   822b8:	60fb      	str	r3, [r7, #12]
   822ba:	68fb      	ldr	r3, [r7, #12]
   822bc:	2b01      	cmp	r3, #1
   822be:	d9e4      	bls.n	8228a <LED_On+0xe>
			}
		}
	}
}
   822c0:	bf00      	nop
   822c2:	3710      	adds	r7, #16
   822c4:	46bd      	mov	sp, r7
   822c6:	bd80      	pop	{r7, pc}
   822c8:	0008428c 	.word	0x0008428c
   822cc:	00082db5 	.word	0x00082db5
   822d0:	00082de5 	.word	0x00082de5

000822d4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   822d4:	b580      	push	{r7, lr}
   822d6:	b082      	sub	sp, #8
   822d8:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   822da:	4b1e      	ldr	r3, [pc, #120]	; (82354 <Reset_Handler+0x80>)
   822dc:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   822de:	4b1e      	ldr	r3, [pc, #120]	; (82358 <Reset_Handler+0x84>)
   822e0:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   822e2:	687a      	ldr	r2, [r7, #4]
   822e4:	683b      	ldr	r3, [r7, #0]
   822e6:	429a      	cmp	r2, r3
   822e8:	d00c      	beq.n	82304 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   822ea:	e007      	b.n	822fc <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   822ec:	683b      	ldr	r3, [r7, #0]
   822ee:	1d1a      	adds	r2, r3, #4
   822f0:	603a      	str	r2, [r7, #0]
   822f2:	687a      	ldr	r2, [r7, #4]
   822f4:	1d11      	adds	r1, r2, #4
   822f6:	6079      	str	r1, [r7, #4]
   822f8:	6812      	ldr	r2, [r2, #0]
   822fa:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   822fc:	683b      	ldr	r3, [r7, #0]
   822fe:	4a17      	ldr	r2, [pc, #92]	; (8235c <Reset_Handler+0x88>)
   82300:	4293      	cmp	r3, r2
   82302:	d3f3      	bcc.n	822ec <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82304:	4b16      	ldr	r3, [pc, #88]	; (82360 <Reset_Handler+0x8c>)
   82306:	603b      	str	r3, [r7, #0]
   82308:	e004      	b.n	82314 <Reset_Handler+0x40>
		*pDest++ = 0;
   8230a:	683b      	ldr	r3, [r7, #0]
   8230c:	1d1a      	adds	r2, r3, #4
   8230e:	603a      	str	r2, [r7, #0]
   82310:	2200      	movs	r2, #0
   82312:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   82314:	683b      	ldr	r3, [r7, #0]
   82316:	4a13      	ldr	r2, [pc, #76]	; (82364 <Reset_Handler+0x90>)
   82318:	4293      	cmp	r3, r2
   8231a:	d3f6      	bcc.n	8230a <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   8231c:	4b12      	ldr	r3, [pc, #72]	; (82368 <Reset_Handler+0x94>)
   8231e:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82320:	4a12      	ldr	r2, [pc, #72]	; (8236c <Reset_Handler+0x98>)
   82322:	687b      	ldr	r3, [r7, #4]
   82324:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   82328:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8232c:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   8232e:	687b      	ldr	r3, [r7, #4]
   82330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   82334:	d309      	bcc.n	8234a <Reset_Handler+0x76>
   82336:	687b      	ldr	r3, [r7, #4]
   82338:	4a0d      	ldr	r2, [pc, #52]	; (82370 <Reset_Handler+0x9c>)
   8233a:	4293      	cmp	r3, r2
   8233c:	d805      	bhi.n	8234a <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8233e:	4a0b      	ldr	r2, [pc, #44]	; (8236c <Reset_Handler+0x98>)
   82340:	4b0a      	ldr	r3, [pc, #40]	; (8236c <Reset_Handler+0x98>)
   82342:	689b      	ldr	r3, [r3, #8]
   82344:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82348:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8234a:	4b0a      	ldr	r3, [pc, #40]	; (82374 <Reset_Handler+0xa0>)
   8234c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8234e:	4b0a      	ldr	r3, [pc, #40]	; (82378 <Reset_Handler+0xa4>)
   82350:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   82352:	e7fe      	b.n	82352 <Reset_Handler+0x7e>
   82354:	000842c4 	.word	0x000842c4
   82358:	20000000 	.word	0x20000000
   8235c:	200006dc 	.word	0x200006dc
   82360:	200006dc 	.word	0x200006dc
   82364:	20000c90 	.word	0x20000c90
   82368:	00080000 	.word	0x00080000
   8236c:	e000ed00 	.word	0xe000ed00
   82370:	20003fff 	.word	0x20003fff
   82374:	000840e5 	.word	0x000840e5
   82378:	0008015d 	.word	0x0008015d

0008237c <osc_enable>:
{
   8237c:	b580      	push	{r7, lr}
   8237e:	b082      	sub	sp, #8
   82380:	af00      	add	r7, sp, #0
   82382:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82384:	687b      	ldr	r3, [r7, #4]
   82386:	2b07      	cmp	r3, #7
   82388:	d82e      	bhi.n	823e8 <osc_enable+0x6c>
   8238a:	a201      	add	r2, pc, #4	; (adr r2, 82390 <osc_enable+0x14>)
   8238c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82390:	000823e7 	.word	0x000823e7
   82394:	000823b1 	.word	0x000823b1
   82398:	000823b9 	.word	0x000823b9
   8239c:	000823c1 	.word	0x000823c1
   823a0:	000823c9 	.word	0x000823c9
   823a4:	000823d1 	.word	0x000823d1
   823a8:	000823d9 	.word	0x000823d9
   823ac:	000823e1 	.word	0x000823e1
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   823b0:	2000      	movs	r0, #0
   823b2:	4b0f      	ldr	r3, [pc, #60]	; (823f0 <osc_enable+0x74>)
   823b4:	4798      	blx	r3
		break;
   823b6:	e017      	b.n	823e8 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   823b8:	2001      	movs	r0, #1
   823ba:	4b0d      	ldr	r3, [pc, #52]	; (823f0 <osc_enable+0x74>)
   823bc:	4798      	blx	r3
		break;
   823be:	e013      	b.n	823e8 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   823c0:	2000      	movs	r0, #0
   823c2:	4b0c      	ldr	r3, [pc, #48]	; (823f4 <osc_enable+0x78>)
   823c4:	4798      	blx	r3
		break;
   823c6:	e00f      	b.n	823e8 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   823c8:	2010      	movs	r0, #16
   823ca:	4b0a      	ldr	r3, [pc, #40]	; (823f4 <osc_enable+0x78>)
   823cc:	4798      	blx	r3
		break;
   823ce:	e00b      	b.n	823e8 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   823d0:	2020      	movs	r0, #32
   823d2:	4b08      	ldr	r3, [pc, #32]	; (823f4 <osc_enable+0x78>)
   823d4:	4798      	blx	r3
		break;
   823d6:	e007      	b.n	823e8 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   823d8:	203e      	movs	r0, #62	; 0x3e
   823da:	4b07      	ldr	r3, [pc, #28]	; (823f8 <osc_enable+0x7c>)
   823dc:	4798      	blx	r3
		break;
   823de:	e003      	b.n	823e8 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   823e0:	4b06      	ldr	r3, [pc, #24]	; (823fc <osc_enable+0x80>)
   823e2:	4798      	blx	r3
		break;
   823e4:	e000      	b.n	823e8 <osc_enable+0x6c>
		break;
   823e6:	bf00      	nop
}
   823e8:	bf00      	nop
   823ea:	3708      	adds	r7, #8
   823ec:	46bd      	mov	sp, r7
   823ee:	bd80      	pop	{r7, pc}
   823f0:	0008280d 	.word	0x0008280d
   823f4:	00082879 	.word	0x00082879
   823f8:	000828ed 	.word	0x000828ed
   823fc:	00082939 	.word	0x00082939

00082400 <osc_is_ready>:
{
   82400:	b580      	push	{r7, lr}
   82402:	b082      	sub	sp, #8
   82404:	af00      	add	r7, sp, #0
   82406:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82408:	687b      	ldr	r3, [r7, #4]
   8240a:	2b07      	cmp	r3, #7
   8240c:	d82f      	bhi.n	8246e <osc_is_ready+0x6e>
   8240e:	a201      	add	r2, pc, #4	; (adr r2, 82414 <osc_is_ready+0x14>)
   82410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82414:	00082435 	.word	0x00082435
   82418:	00082439 	.word	0x00082439
   8241c:	00082439 	.word	0x00082439
   82420:	0008244b 	.word	0x0008244b
   82424:	0008244b 	.word	0x0008244b
   82428:	0008244b 	.word	0x0008244b
   8242c:	0008245d 	.word	0x0008245d
   82430:	0008245d 	.word	0x0008245d
		return 1;
   82434:	2301      	movs	r3, #1
   82436:	e01b      	b.n	82470 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   82438:	4b0f      	ldr	r3, [pc, #60]	; (82478 <osc_is_ready+0x78>)
   8243a:	4798      	blx	r3
   8243c:	4603      	mov	r3, r0
   8243e:	2b00      	cmp	r3, #0
   82440:	bf14      	ite	ne
   82442:	2301      	movne	r3, #1
   82444:	2300      	moveq	r3, #0
   82446:	b2db      	uxtb	r3, r3
   82448:	e012      	b.n	82470 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   8244a:	4b0c      	ldr	r3, [pc, #48]	; (8247c <osc_is_ready+0x7c>)
   8244c:	4798      	blx	r3
   8244e:	4603      	mov	r3, r0
   82450:	2b00      	cmp	r3, #0
   82452:	bf14      	ite	ne
   82454:	2301      	movne	r3, #1
   82456:	2300      	moveq	r3, #0
   82458:	b2db      	uxtb	r3, r3
   8245a:	e009      	b.n	82470 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   8245c:	4b08      	ldr	r3, [pc, #32]	; (82480 <osc_is_ready+0x80>)
   8245e:	4798      	blx	r3
   82460:	4603      	mov	r3, r0
   82462:	2b00      	cmp	r3, #0
   82464:	bf14      	ite	ne
   82466:	2301      	movne	r3, #1
   82468:	2300      	moveq	r3, #0
   8246a:	b2db      	uxtb	r3, r3
   8246c:	e000      	b.n	82470 <osc_is_ready+0x70>
	return 0;
   8246e:	2300      	movs	r3, #0
}
   82470:	4618      	mov	r0, r3
   82472:	3708      	adds	r7, #8
   82474:	46bd      	mov	sp, r7
   82476:	bd80      	pop	{r7, pc}
   82478:	00082845 	.word	0x00082845
   8247c:	000828d5 	.word	0x000828d5
   82480:	0008296d 	.word	0x0008296d

00082484 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   82484:	b480      	push	{r7}
   82486:	b083      	sub	sp, #12
   82488:	af00      	add	r7, sp, #0
   8248a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8248c:	687b      	ldr	r3, [r7, #4]
   8248e:	2b07      	cmp	r3, #7
   82490:	d823      	bhi.n	824da <osc_get_rate+0x56>
   82492:	a201      	add	r2, pc, #4	; (adr r2, 82498 <osc_get_rate+0x14>)
   82494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82498:	000824b9 	.word	0x000824b9
   8249c:	000824bf 	.word	0x000824bf
   824a0:	000824c3 	.word	0x000824c3
   824a4:	000824c7 	.word	0x000824c7
   824a8:	000824cb 	.word	0x000824cb
   824ac:	000824cf 	.word	0x000824cf
   824b0:	000824d3 	.word	0x000824d3
   824b4:	000824d7 	.word	0x000824d7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   824b8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   824bc:	e00e      	b.n	824dc <osc_get_rate+0x58>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   824be:	2300      	movs	r3, #0
   824c0:	e00c      	b.n	824dc <osc_get_rate+0x58>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   824c2:	2300      	movs	r3, #0
   824c4:	e00a      	b.n	824dc <osc_get_rate+0x58>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   824c6:	4b08      	ldr	r3, [pc, #32]	; (824e8 <osc_get_rate+0x64>)
   824c8:	e008      	b.n	824dc <osc_get_rate+0x58>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   824ca:	4b08      	ldr	r3, [pc, #32]	; (824ec <osc_get_rate+0x68>)
   824cc:	e006      	b.n	824dc <osc_get_rate+0x58>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   824ce:	4b08      	ldr	r3, [pc, #32]	; (824f0 <osc_get_rate+0x6c>)
   824d0:	e004      	b.n	824dc <osc_get_rate+0x58>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   824d2:	4b07      	ldr	r3, [pc, #28]	; (824f0 <osc_get_rate+0x6c>)
   824d4:	e002      	b.n	824dc <osc_get_rate+0x58>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   824d6:	4b06      	ldr	r3, [pc, #24]	; (824f0 <osc_get_rate+0x6c>)
   824d8:	e000      	b.n	824dc <osc_get_rate+0x58>
	}

	return 0;
   824da:	2300      	movs	r3, #0
}
   824dc:	4618      	mov	r0, r3
   824de:	370c      	adds	r7, #12
   824e0:	46bd      	mov	sp, r7
   824e2:	bc80      	pop	{r7}
   824e4:	4770      	bx	lr
   824e6:	bf00      	nop
   824e8:	003d0900 	.word	0x003d0900
   824ec:	007a1200 	.word	0x007a1200
   824f0:	00b71b00 	.word	0x00b71b00

000824f4 <osc_wait_ready>:
{
   824f4:	b580      	push	{r7, lr}
   824f6:	b082      	sub	sp, #8
   824f8:	af00      	add	r7, sp, #0
   824fa:	4603      	mov	r3, r0
   824fc:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   824fe:	bf00      	nop
   82500:	79fb      	ldrb	r3, [r7, #7]
   82502:	4618      	mov	r0, r3
   82504:	4b05      	ldr	r3, [pc, #20]	; (8251c <osc_wait_ready+0x28>)
   82506:	4798      	blx	r3
   82508:	4603      	mov	r3, r0
   8250a:	f083 0301 	eor.w	r3, r3, #1
   8250e:	b2db      	uxtb	r3, r3
   82510:	2b00      	cmp	r3, #0
   82512:	d1f5      	bne.n	82500 <osc_wait_ready+0xc>
}
   82514:	bf00      	nop
   82516:	3708      	adds	r7, #8
   82518:	46bd      	mov	sp, r7
   8251a:	bd80      	pop	{r7, pc}
   8251c:	00082401 	.word	0x00082401

00082520 <pll_config_init>:
 *       hardware mul+1 is hidden in this implementation. Use mul as mul
 *       effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   82520:	b580      	push	{r7, lr}
   82522:	b086      	sub	sp, #24
   82524:	af00      	add	r7, sp, #0
   82526:	60f8      	str	r0, [r7, #12]
   82528:	607a      	str	r2, [r7, #4]
   8252a:	603b      	str	r3, [r7, #0]
   8252c:	460b      	mov	r3, r1
   8252e:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   82530:	687b      	ldr	r3, [r7, #4]
   82532:	2b00      	cmp	r3, #0
   82534:	d107      	bne.n	82546 <pll_config_init+0x26>
   82536:	683b      	ldr	r3, [r7, #0]
   82538:	2b00      	cmp	r3, #0
   8253a:	d104      	bne.n	82546 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   8253c:	68fb      	ldr	r3, [r7, #12]
   8253e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   82542:	601a      	str	r2, [r3, #0]
   82544:	e019      	b.n	8257a <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   82546:	7afb      	ldrb	r3, [r7, #11]
   82548:	4618      	mov	r0, r3
   8254a:	4b0e      	ldr	r3, [pc, #56]	; (82584 <pll_config_init+0x64>)
   8254c:	4798      	blx	r3
   8254e:	4602      	mov	r2, r0
   82550:	687b      	ldr	r3, [r7, #4]
   82552:	fbb2 f3f3 	udiv	r3, r2, r3
   82556:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   82558:	697b      	ldr	r3, [r7, #20]
   8255a:	683a      	ldr	r2, [r7, #0]
   8255c:	fb02 f303 	mul.w	r3, r2, r3
   82560:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   82562:	683b      	ldr	r3, [r7, #0]
   82564:	3b01      	subs	r3, #1
   82566:	041a      	lsls	r2, r3, #16
   82568:	4b07      	ldr	r3, [pc, #28]	; (82588 <pll_config_init+0x68>)
   8256a:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   8256c:	687a      	ldr	r2, [r7, #4]
   8256e:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   82570:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   82572:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   82576:	68fb      	ldr	r3, [r7, #12]
   82578:	601a      	str	r2, [r3, #0]
			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
   8257a:	bf00      	nop
   8257c:	3718      	adds	r7, #24
   8257e:	46bd      	mov	sp, r7
   82580:	bd80      	pop	{r7, pc}
   82582:	bf00      	nop
   82584:	00082485 	.word	0x00082485
   82588:	07ff0000 	.word	0x07ff0000

0008258c <pll_enable>:
	}
}

static inline void pll_enable(const struct pll_config *p_cfg,
		uint32_t ul_pll_id)
{
   8258c:	b580      	push	{r7, lr}
   8258e:	b082      	sub	sp, #8
   82590:	af00      	add	r7, sp, #0
   82592:	6078      	str	r0, [r7, #4]
   82594:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   82596:	683b      	ldr	r3, [r7, #0]
   82598:	2b00      	cmp	r3, #0
   8259a:	d108      	bne.n	825ae <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   8259c:	4b09      	ldr	r3, [pc, #36]	; (825c4 <pll_enable+0x38>)
   8259e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   825a0:	4a09      	ldr	r2, [pc, #36]	; (825c8 <pll_enable+0x3c>)
   825a2:	687b      	ldr	r3, [r7, #4]
   825a4:	681b      	ldr	r3, [r3, #0]
   825a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   825aa:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   825ac:	e005      	b.n	825ba <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   825ae:	4a06      	ldr	r2, [pc, #24]	; (825c8 <pll_enable+0x3c>)
   825b0:	687b      	ldr	r3, [r7, #4]
   825b2:	681b      	ldr	r3, [r3, #0]
   825b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   825b8:	61d3      	str	r3, [r2, #28]
}
   825ba:	bf00      	nop
   825bc:	3708      	adds	r7, #8
   825be:	46bd      	mov	sp, r7
   825c0:	bd80      	pop	{r7, pc}
   825c2:	bf00      	nop
   825c4:	000829dd 	.word	0x000829dd
   825c8:	400e0400 	.word	0x400e0400

000825cc <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   825cc:	b580      	push	{r7, lr}
   825ce:	b082      	sub	sp, #8
   825d0:	af00      	add	r7, sp, #0
   825d2:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   825d4:	687b      	ldr	r3, [r7, #4]
   825d6:	2b00      	cmp	r3, #0
   825d8:	d103      	bne.n	825e2 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   825da:	4b05      	ldr	r3, [pc, #20]	; (825f0 <pll_is_locked+0x24>)
   825dc:	4798      	blx	r3
   825de:	4603      	mov	r3, r0
   825e0:	e002      	b.n	825e8 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   825e2:	4b04      	ldr	r3, [pc, #16]	; (825f4 <pll_is_locked+0x28>)
   825e4:	4798      	blx	r3
   825e6:	4603      	mov	r3, r0
	}
}
   825e8:	4618      	mov	r0, r3
   825ea:	3708      	adds	r7, #8
   825ec:	46bd      	mov	sp, r7
   825ee:	bd80      	pop	{r7, pc}
   825f0:	000829f5 	.word	0x000829f5
   825f4:	00082a0d 	.word	0x00082a0d

000825f8 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   825f8:	b580      	push	{r7, lr}
   825fa:	b082      	sub	sp, #8
   825fc:	af00      	add	r7, sp, #0
   825fe:	4603      	mov	r3, r0
   82600:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   82602:	79fb      	ldrb	r3, [r7, #7]
   82604:	3b03      	subs	r3, #3
   82606:	2b04      	cmp	r3, #4
   82608:	d808      	bhi.n	8261c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8260a:	79fb      	ldrb	r3, [r7, #7]
   8260c:	4618      	mov	r0, r3
   8260e:	4b06      	ldr	r3, [pc, #24]	; (82628 <pll_enable_source+0x30>)
   82610:	4798      	blx	r3
		osc_wait_ready(e_src);
   82612:	79fb      	ldrb	r3, [r7, #7]
   82614:	4618      	mov	r0, r3
   82616:	4b05      	ldr	r3, [pc, #20]	; (8262c <pll_enable_source+0x34>)
   82618:	4798      	blx	r3
		break;
   8261a:	e000      	b.n	8261e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   8261c:	bf00      	nop
	}
}
   8261e:	bf00      	nop
   82620:	3708      	adds	r7, #8
   82622:	46bd      	mov	sp, r7
   82624:	bd80      	pop	{r7, pc}
   82626:	bf00      	nop
   82628:	0008237d 	.word	0x0008237d
   8262c:	000824f5 	.word	0x000824f5

00082630 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   82630:	b580      	push	{r7, lr}
   82632:	b082      	sub	sp, #8
   82634:	af00      	add	r7, sp, #0
   82636:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82638:	bf00      	nop
   8263a:	6878      	ldr	r0, [r7, #4]
   8263c:	4b04      	ldr	r3, [pc, #16]	; (82650 <pll_wait_for_lock+0x20>)
   8263e:	4798      	blx	r3
   82640:	4603      	mov	r3, r0
   82642:	2b00      	cmp	r3, #0
   82644:	d0f9      	beq.n	8263a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   82646:	2300      	movs	r3, #0
}
   82648:	4618      	mov	r0, r3
   8264a:	3708      	adds	r7, #8
   8264c:	46bd      	mov	sp, r7
   8264e:	bd80      	pop	{r7, pc}
   82650:	000825cd 	.word	0x000825cd

00082654 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   82654:	b580      	push	{r7, lr}
   82656:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   82658:	2006      	movs	r0, #6
   8265a:	4b03      	ldr	r3, [pc, #12]	; (82668 <sysclk_get_main_hz+0x14>)
   8265c:	4798      	blx	r3
   8265e:	4603      	mov	r3, r0
   82660:	011b      	lsls	r3, r3, #4
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   82662:	4618      	mov	r0, r3
   82664:	bd80      	pop	{r7, pc}
   82666:	bf00      	nop
   82668:	00082485 	.word	0x00082485

0008266c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   8266c:	b580      	push	{r7, lr}
   8266e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   82670:	4b02      	ldr	r3, [pc, #8]	; (8267c <sysclk_get_cpu_hz+0x10>)
   82672:	4798      	blx	r3
   82674:	4603      	mov	r3, r0
   82676:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   82678:	4618      	mov	r0, r3
   8267a:	bd80      	pop	{r7, pc}
   8267c:	00082655 	.word	0x00082655

00082680 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   82680:	b590      	push	{r4, r7, lr}
   82682:	b083      	sub	sp, #12
   82684:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82686:	4816      	ldr	r0, [pc, #88]	; (826e0 <sysclk_init+0x60>)
   82688:	4b16      	ldr	r3, [pc, #88]	; (826e4 <sysclk_init+0x64>)
   8268a:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   8268c:	2006      	movs	r0, #6
   8268e:	4b16      	ldr	r3, [pc, #88]	; (826e8 <sysclk_init+0x68>)
   82690:	4798      	blx	r3
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   82692:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   82696:	4b15      	ldr	r3, [pc, #84]	; (826ec <sysclk_init+0x6c>)
   82698:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   8269a:	bf00      	nop
   8269c:	4b14      	ldr	r3, [pc, #80]	; (826f0 <sysclk_init+0x70>)
   8269e:	4798      	blx	r3
   826a0:	4603      	mov	r3, r0
   826a2:	2b00      	cmp	r3, #0
   826a4:	d0fa      	beq.n	8269c <sysclk_init+0x1c>
		}
		pll_config_defaults(&pllcfg, 0);
   826a6:	1d38      	adds	r0, r7, #4
   826a8:	2310      	movs	r3, #16
   826aa:	2201      	movs	r2, #1
   826ac:	2106      	movs	r1, #6
   826ae:	4c11      	ldr	r4, [pc, #68]	; (826f4 <sysclk_init+0x74>)
   826b0:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   826b2:	1d3b      	adds	r3, r7, #4
   826b4:	2100      	movs	r1, #0
   826b6:	4618      	mov	r0, r3
   826b8:	4b0f      	ldr	r3, [pc, #60]	; (826f8 <sysclk_init+0x78>)
   826ba:	4798      	blx	r3
		pll_wait_for_lock(0);
   826bc:	2000      	movs	r0, #0
   826be:	4b0f      	ldr	r3, [pc, #60]	; (826fc <sysclk_init+0x7c>)
   826c0:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   826c2:	2010      	movs	r0, #16
   826c4:	4b0e      	ldr	r3, [pc, #56]	; (82700 <sysclk_init+0x80>)
   826c6:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   826c8:	4b0e      	ldr	r3, [pc, #56]	; (82704 <sysclk_init+0x84>)
   826ca:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   826cc:	4b0e      	ldr	r3, [pc, #56]	; (82708 <sysclk_init+0x88>)
   826ce:	4798      	blx	r3
   826d0:	4603      	mov	r3, r0
   826d2:	4618      	mov	r0, r3
   826d4:	4b03      	ldr	r3, [pc, #12]	; (826e4 <sysclk_init+0x64>)
   826d6:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   826d8:	bf00      	nop
   826da:	370c      	adds	r7, #12
   826dc:	46bd      	mov	sp, r7
   826de:	bd90      	pop	{r4, r7, pc}
   826e0:	05b8d800 	.word	0x05b8d800
   826e4:	200000d1 	.word	0x200000d1
   826e8:	000825f9 	.word	0x000825f9
   826ec:	0008299d 	.word	0x0008299d
   826f0:	00082985 	.word	0x00082985
   826f4:	00082521 	.word	0x00082521
   826f8:	0008258d 	.word	0x0008258d
   826fc:	00082631 	.word	0x00082631
   82700:	0008278d 	.word	0x0008278d
   82704:	00083ec5 	.word	0x00083ec5
   82708:	0008266d 	.word	0x0008266d

0008270c <pmc_switch_mck_to_mainck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
   8270c:	b480      	push	{r7}
   8270e:	b085      	sub	sp, #20
   82710:	af00      	add	r7, sp, #0
   82712:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82714:	4a1c      	ldr	r2, [pc, #112]	; (82788 <pmc_switch_mck_to_mainck+0x7c>)
   82716:	4b1c      	ldr	r3, [pc, #112]	; (82788 <pmc_switch_mck_to_mainck+0x7c>)
   82718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8271a:	f023 0303 	bic.w	r3, r3, #3
   8271e:	f043 0301 	orr.w	r3, r3, #1
   82722:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82724:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82728:	60fb      	str	r3, [r7, #12]
   8272a:	e007      	b.n	8273c <pmc_switch_mck_to_mainck+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8272c:	68fb      	ldr	r3, [r7, #12]
   8272e:	2b00      	cmp	r3, #0
   82730:	d101      	bne.n	82736 <pmc_switch_mck_to_mainck+0x2a>
			return 1;
   82732:	2301      	movs	r3, #1
   82734:	e023      	b.n	8277e <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   82736:	68fb      	ldr	r3, [r7, #12]
   82738:	3b01      	subs	r3, #1
   8273a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8273c:	4b12      	ldr	r3, [pc, #72]	; (82788 <pmc_switch_mck_to_mainck+0x7c>)
   8273e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82740:	f003 0308 	and.w	r3, r3, #8
   82744:	2b00      	cmp	r3, #0
   82746:	d0f1      	beq.n	8272c <pmc_switch_mck_to_mainck+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82748:	490f      	ldr	r1, [pc, #60]	; (82788 <pmc_switch_mck_to_mainck+0x7c>)
   8274a:	4b0f      	ldr	r3, [pc, #60]	; (82788 <pmc_switch_mck_to_mainck+0x7c>)
   8274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8274e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   82752:	687b      	ldr	r3, [r7, #4]
   82754:	4313      	orrs	r3, r2
   82756:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82758:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8275c:	60fb      	str	r3, [r7, #12]
   8275e:	e007      	b.n	82770 <pmc_switch_mck_to_mainck+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82760:	68fb      	ldr	r3, [r7, #12]
   82762:	2b00      	cmp	r3, #0
   82764:	d101      	bne.n	8276a <pmc_switch_mck_to_mainck+0x5e>
			return 1;
   82766:	2301      	movs	r3, #1
   82768:	e009      	b.n	8277e <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   8276a:	68fb      	ldr	r3, [r7, #12]
   8276c:	3b01      	subs	r3, #1
   8276e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82770:	4b05      	ldr	r3, [pc, #20]	; (82788 <pmc_switch_mck_to_mainck+0x7c>)
   82772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82774:	f003 0308 	and.w	r3, r3, #8
   82778:	2b00      	cmp	r3, #0
   8277a:	d0f1      	beq.n	82760 <pmc_switch_mck_to_mainck+0x54>
		}
	}

	return 0;
   8277c:	2300      	movs	r3, #0
}
   8277e:	4618      	mov	r0, r3
   82780:	3714      	adds	r7, #20
   82782:	46bd      	mov	sp, r7
   82784:	bc80      	pop	{r7}
   82786:	4770      	bx	lr
   82788:	400e0400 	.word	0x400e0400

0008278c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   8278c:	b480      	push	{r7}
   8278e:	b085      	sub	sp, #20
   82790:	af00      	add	r7, sp, #0
   82792:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82794:	491c      	ldr	r1, [pc, #112]	; (82808 <pmc_switch_mck_to_pllack+0x7c>)
   82796:	4b1c      	ldr	r3, [pc, #112]	; (82808 <pmc_switch_mck_to_pllack+0x7c>)
   82798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8279a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   8279e:	687b      	ldr	r3, [r7, #4]
   827a0:	4313      	orrs	r3, r2
   827a2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   827a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   827a8:	60fb      	str	r3, [r7, #12]
   827aa:	e007      	b.n	827bc <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   827ac:	68fb      	ldr	r3, [r7, #12]
   827ae:	2b00      	cmp	r3, #0
   827b0:	d101      	bne.n	827b6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   827b2:	2301      	movs	r3, #1
   827b4:	e023      	b.n	827fe <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   827b6:	68fb      	ldr	r3, [r7, #12]
   827b8:	3b01      	subs	r3, #1
   827ba:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   827bc:	4b12      	ldr	r3, [pc, #72]	; (82808 <pmc_switch_mck_to_pllack+0x7c>)
   827be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   827c0:	f003 0308 	and.w	r3, r3, #8
   827c4:	2b00      	cmp	r3, #0
   827c6:	d0f1      	beq.n	827ac <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   827c8:	4a0f      	ldr	r2, [pc, #60]	; (82808 <pmc_switch_mck_to_pllack+0x7c>)
   827ca:	4b0f      	ldr	r3, [pc, #60]	; (82808 <pmc_switch_mck_to_pllack+0x7c>)
   827cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   827ce:	f023 0303 	bic.w	r3, r3, #3
   827d2:	f043 0302 	orr.w	r3, r3, #2
   827d6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   827d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   827dc:	60fb      	str	r3, [r7, #12]
   827de:	e007      	b.n	827f0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   827e0:	68fb      	ldr	r3, [r7, #12]
   827e2:	2b00      	cmp	r3, #0
   827e4:	d101      	bne.n	827ea <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   827e6:	2301      	movs	r3, #1
   827e8:	e009      	b.n	827fe <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   827ea:	68fb      	ldr	r3, [r7, #12]
   827ec:	3b01      	subs	r3, #1
   827ee:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   827f0:	4b05      	ldr	r3, [pc, #20]	; (82808 <pmc_switch_mck_to_pllack+0x7c>)
   827f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   827f4:	f003 0308 	and.w	r3, r3, #8
   827f8:	2b00      	cmp	r3, #0
   827fa:	d0f1      	beq.n	827e0 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   827fc:	2300      	movs	r3, #0
}
   827fe:	4618      	mov	r0, r3
   82800:	3714      	adds	r7, #20
   82802:	46bd      	mov	sp, r7
   82804:	bc80      	pop	{r7}
   82806:	4770      	bx	lr
   82808:	400e0400 	.word	0x400e0400

0008280c <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   8280c:	b480      	push	{r7}
   8280e:	b083      	sub	sp, #12
   82810:	af00      	add	r7, sp, #0
   82812:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   82814:	687b      	ldr	r3, [r7, #4]
   82816:	2b01      	cmp	r3, #1
   82818:	d107      	bne.n	8282a <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   8281a:	4a08      	ldr	r2, [pc, #32]	; (8283c <pmc_switch_sclk_to_32kxtal+0x30>)
   8281c:	4b07      	ldr	r3, [pc, #28]	; (8283c <pmc_switch_sclk_to_32kxtal+0x30>)
   8281e:	689b      	ldr	r3, [r3, #8]
   82820:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   82824:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82828:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   8282a:	4b04      	ldr	r3, [pc, #16]	; (8283c <pmc_switch_sclk_to_32kxtal+0x30>)
   8282c:	4a04      	ldr	r2, [pc, #16]	; (82840 <pmc_switch_sclk_to_32kxtal+0x34>)
   8282e:	601a      	str	r2, [r3, #0]
}
   82830:	bf00      	nop
   82832:	370c      	adds	r7, #12
   82834:	46bd      	mov	sp, r7
   82836:	bc80      	pop	{r7}
   82838:	4770      	bx	lr
   8283a:	bf00      	nop
   8283c:	400e1210 	.word	0x400e1210
   82840:	a5000008 	.word	0xa5000008

00082844 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   82844:	b480      	push	{r7}
   82846:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   82848:	4b09      	ldr	r3, [pc, #36]	; (82870 <pmc_osc_is_ready_32kxtal+0x2c>)
   8284a:	695b      	ldr	r3, [r3, #20]
   8284c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   82850:	2b00      	cmp	r3, #0
   82852:	d007      	beq.n	82864 <pmc_osc_is_ready_32kxtal+0x20>
   82854:	4b07      	ldr	r3, [pc, #28]	; (82874 <pmc_osc_is_ready_32kxtal+0x30>)
   82856:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82858:	f003 0380 	and.w	r3, r3, #128	; 0x80
   8285c:	2b00      	cmp	r3, #0
   8285e:	d001      	beq.n	82864 <pmc_osc_is_ready_32kxtal+0x20>
   82860:	2301      	movs	r3, #1
   82862:	e000      	b.n	82866 <pmc_osc_is_ready_32kxtal+0x22>
   82864:	2300      	movs	r3, #0
}
   82866:	4618      	mov	r0, r3
   82868:	46bd      	mov	sp, r7
   8286a:	bc80      	pop	{r7}
   8286c:	4770      	bx	lr
   8286e:	bf00      	nop
   82870:	400e1210 	.word	0x400e1210
   82874:	400e0400 	.word	0x400e0400

00082878 <pmc_osc_enable_fastrc>:
 * \brief Enable fast RC oscillator.
 *
 * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 */
void pmc_osc_enable_fastrc(uint32_t ul_rc)
{
   82878:	b480      	push	{r7}
   8287a:	b083      	sub	sp, #12
   8287c:	af00      	add	r7, sp, #0
   8287e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   82880:	4a13      	ldr	r2, [pc, #76]	; (828d0 <pmc_osc_enable_fastrc+0x58>)
   82882:	4b13      	ldr	r3, [pc, #76]	; (828d0 <pmc_osc_enable_fastrc+0x58>)
   82884:	6a1b      	ldr	r3, [r3, #32]
   82886:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8288a:	f043 0308 	orr.w	r3, r3, #8
   8288e:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82890:	bf00      	nop
   82892:	4b0f      	ldr	r3, [pc, #60]	; (828d0 <pmc_osc_enable_fastrc+0x58>)
   82894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   8289a:	2b00      	cmp	r3, #0
   8289c:	d0f9      	beq.n	82892 <pmc_osc_enable_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8289e:	490c      	ldr	r1, [pc, #48]	; (828d0 <pmc_osc_enable_fastrc+0x58>)
   828a0:	4b0b      	ldr	r3, [pc, #44]	; (828d0 <pmc_osc_enable_fastrc+0x58>)
   828a2:	6a1b      	ldr	r3, [r3, #32]
   828a4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   828a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_rc;
   828ac:	687a      	ldr	r2, [r7, #4]
   828ae:	4313      	orrs	r3, r2
   828b0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   828b4:	620b      	str	r3, [r1, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   828b6:	bf00      	nop
   828b8:	4b05      	ldr	r3, [pc, #20]	; (828d0 <pmc_osc_enable_fastrc+0x58>)
   828ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   828bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   828c0:	2b00      	cmp	r3, #0
   828c2:	d0f9      	beq.n	828b8 <pmc_osc_enable_fastrc+0x40>
}
   828c4:	bf00      	nop
   828c6:	370c      	adds	r7, #12
   828c8:	46bd      	mov	sp, r7
   828ca:	bc80      	pop	{r7}
   828cc:	4770      	bx	lr
   828ce:	bf00      	nop
   828d0:	400e0400 	.word	0x400e0400

000828d4 <pmc_osc_is_ready_fastrc>:
 * \brief Check if the main fastrc is ready.
 *
 * \retval 0 Xtal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_fastrc(void)
{
   828d4:	b480      	push	{r7}
   828d6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
   828d8:	4b03      	ldr	r3, [pc, #12]	; (828e8 <pmc_osc_is_ready_fastrc+0x14>)
   828da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   828dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
}
   828e0:	4618      	mov	r0, r3
   828e2:	46bd      	mov	sp, r7
   828e4:	bc80      	pop	{r7}
   828e6:	4770      	bx	lr
   828e8:	400e0400 	.word	0x400e0400

000828ec <pmc_osc_enable_main_xtal>:
 * \brief Enable main XTAL oscillator.
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
   828ec:	b480      	push	{r7}
   828ee:	b085      	sub	sp, #20
   828f0:	af00      	add	r7, sp, #0
   828f2:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   828f4:	4b0f      	ldr	r3, [pc, #60]	; (82934 <pmc_osc_enable_main_xtal+0x48>)
   828f6:	6a1b      	ldr	r3, [r3, #32]
   828f8:	60fb      	str	r3, [r7, #12]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   828fa:	68fb      	ldr	r3, [r7, #12]
   828fc:	f023 0303 	bic.w	r3, r3, #3
   82900:	60fb      	str	r3, [r7, #12]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82902:	687b      	ldr	r3, [r7, #4]
   82904:	021b      	lsls	r3, r3, #8
   82906:	b29a      	uxth	r2, r3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82908:	68fb      	ldr	r3, [r7, #12]
   8290a:	4313      	orrs	r3, r2
   8290c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82910:	f043 0301 	orr.w	r3, r3, #1
   82914:	60fb      	str	r3, [r7, #12]
	PMC->CKGR_MOR = mor;
   82916:	4a07      	ldr	r2, [pc, #28]	; (82934 <pmc_osc_enable_main_xtal+0x48>)
   82918:	68fb      	ldr	r3, [r7, #12]
   8291a:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8291c:	bf00      	nop
   8291e:	4b05      	ldr	r3, [pc, #20]	; (82934 <pmc_osc_enable_main_xtal+0x48>)
   82920:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82922:	f003 0301 	and.w	r3, r3, #1
   82926:	2b00      	cmp	r3, #0
   82928:	d0f9      	beq.n	8291e <pmc_osc_enable_main_xtal+0x32>
}
   8292a:	bf00      	nop
   8292c:	3714      	adds	r7, #20
   8292e:	46bd      	mov	sp, r7
   82930:	bc80      	pop	{r7}
   82932:	4770      	bx	lr
   82934:	400e0400 	.word	0x400e0400

00082938 <pmc_osc_bypass_main_xtal>:

/**
 * \brief Bypass main XTAL.
 */
void pmc_osc_bypass_main_xtal(void)
{
   82938:	b480      	push	{r7}
   8293a:	b083      	sub	sp, #12
   8293c:	af00      	add	r7, sp, #0
	uint32_t mor = PMC->CKGR_MOR;
   8293e:	4b0a      	ldr	r3, [pc, #40]	; (82968 <pmc_osc_bypass_main_xtal+0x30>)
   82940:	6a1b      	ldr	r3, [r3, #32]
   82942:	607b      	str	r3, [r7, #4]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   82944:	687b      	ldr	r3, [r7, #4]
   82946:	f023 0303 	bic.w	r3, r3, #3
   8294a:	607b      	str	r3, [r7, #4]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
   8294c:	687b      	ldr	r3, [r7, #4]
   8294e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82952:	f043 0302 	orr.w	r3, r3, #2
   82956:	607b      	str	r3, [r7, #4]
	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
	PMC->CKGR_MOR = mor;
   82958:	4a03      	ldr	r2, [pc, #12]	; (82968 <pmc_osc_bypass_main_xtal+0x30>)
   8295a:	687b      	ldr	r3, [r7, #4]
   8295c:	6213      	str	r3, [r2, #32]
	/* The MOSCXTS in PMC_SR is automatically set */
}
   8295e:	bf00      	nop
   82960:	370c      	adds	r7, #12
   82962:	46bd      	mov	sp, r7
   82964:	bc80      	pop	{r7}
   82966:	4770      	bx	lr
   82968:	400e0400 	.word	0x400e0400

0008296c <pmc_osc_is_ready_main_xtal>:
 * \note If main crystal is bypassed, it's always ready.
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
   8296c:	b480      	push	{r7}
   8296e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   82970:	4b03      	ldr	r3, [pc, #12]	; (82980 <pmc_osc_is_ready_main_xtal+0x14>)
   82972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82974:	f003 0301 	and.w	r3, r3, #1
}
   82978:	4618      	mov	r0, r3
   8297a:	46bd      	mov	sp, r7
   8297c:	bc80      	pop	{r7}
   8297e:	4770      	bx	lr
   82980:	400e0400 	.word	0x400e0400

00082984 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   82984:	b480      	push	{r7}
   82986:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82988:	4b03      	ldr	r3, [pc, #12]	; (82998 <pmc_osc_is_ready_mainck+0x14>)
   8298a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8298c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   82990:	4618      	mov	r0, r3
   82992:	46bd      	mov	sp, r7
   82994:	bc80      	pop	{r7}
   82996:	4770      	bx	lr
   82998:	400e0400 	.word	0x400e0400

0008299c <pmc_mainck_osc_select>:
 * \note This function will not enable/disable RC or Main Crystal.
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
   8299c:	b480      	push	{r7}
   8299e:	b085      	sub	sp, #20
   829a0:	af00      	add	r7, sp, #0
   829a2:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   829a4:	4b0c      	ldr	r3, [pc, #48]	; (829d8 <pmc_mainck_osc_select+0x3c>)
   829a6:	6a1b      	ldr	r3, [r3, #32]
   829a8:	60fb      	str	r3, [r7, #12]
	if (ul_xtal_rc) {
   829aa:	687b      	ldr	r3, [r7, #4]
   829ac:	2b00      	cmp	r3, #0
   829ae:	d004      	beq.n	829ba <pmc_mainck_osc_select+0x1e>
		mor |=  CKGR_MOR_MOSCSEL;
   829b0:	68fb      	ldr	r3, [r7, #12]
   829b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   829b6:	60fb      	str	r3, [r7, #12]
   829b8:	e003      	b.n	829c2 <pmc_mainck_osc_select+0x26>
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   829ba:	68fb      	ldr	r3, [r7, #12]
   829bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   829c0:	60fb      	str	r3, [r7, #12]
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   829c2:	4a05      	ldr	r2, [pc, #20]	; (829d8 <pmc_mainck_osc_select+0x3c>)
   829c4:	68fb      	ldr	r3, [r7, #12]
   829c6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   829ca:	6213      	str	r3, [r2, #32]
}
   829cc:	bf00      	nop
   829ce:	3714      	adds	r7, #20
   829d0:	46bd      	mov	sp, r7
   829d2:	bc80      	pop	{r7}
   829d4:	4770      	bx	lr
   829d6:	bf00      	nop
   829d8:	400e0400 	.word	0x400e0400

000829dc <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   829dc:	b480      	push	{r7}
   829de:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   829e0:	4b03      	ldr	r3, [pc, #12]	; (829f0 <pmc_disable_pllack+0x14>)
   829e2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   829e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   829e8:	bf00      	nop
   829ea:	46bd      	mov	sp, r7
   829ec:	bc80      	pop	{r7}
   829ee:	4770      	bx	lr
   829f0:	400e0400 	.word	0x400e0400

000829f4 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   829f4:	b480      	push	{r7}
   829f6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   829f8:	4b03      	ldr	r3, [pc, #12]	; (82a08 <pmc_is_locked_pllack+0x14>)
   829fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   829fc:	f003 0302 	and.w	r3, r3, #2
}
   82a00:	4618      	mov	r0, r3
   82a02:	46bd      	mov	sp, r7
   82a04:	bc80      	pop	{r7}
   82a06:	4770      	bx	lr
   82a08:	400e0400 	.word	0x400e0400

00082a0c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   82a0c:	b480      	push	{r7}
   82a0e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   82a10:	4b03      	ldr	r3, [pc, #12]	; (82a20 <pmc_is_locked_upll+0x14>)
   82a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   82a18:	4618      	mov	r0, r3
   82a1a:	46bd      	mov	sp, r7
   82a1c:	bc80      	pop	{r7}
   82a1e:	4770      	bx	lr
   82a20:	400e0400 	.word	0x400e0400

00082a24 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   82a24:	b480      	push	{r7}
   82a26:	b083      	sub	sp, #12
   82a28:	af00      	add	r7, sp, #0
   82a2a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   82a2c:	687b      	ldr	r3, [r7, #4]
   82a2e:	2b1d      	cmp	r3, #29
   82a30:	d901      	bls.n	82a36 <pmc_enable_periph_clk+0x12>
		return 1;
   82a32:	2301      	movs	r3, #1
   82a34:	e016      	b.n	82a64 <pmc_enable_periph_clk+0x40>
	}

	if (ul_id < 32) {
   82a36:	687b      	ldr	r3, [r7, #4]
   82a38:	2b1f      	cmp	r3, #31
   82a3a:	d812      	bhi.n	82a62 <pmc_enable_periph_clk+0x3e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82a3c:	4b0c      	ldr	r3, [pc, #48]	; (82a70 <pmc_enable_periph_clk+0x4c>)
   82a3e:	699a      	ldr	r2, [r3, #24]
   82a40:	2101      	movs	r1, #1
   82a42:	687b      	ldr	r3, [r7, #4]
   82a44:	fa01 f303 	lsl.w	r3, r1, r3
   82a48:	401a      	ands	r2, r3
   82a4a:	2101      	movs	r1, #1
   82a4c:	687b      	ldr	r3, [r7, #4]
   82a4e:	fa01 f303 	lsl.w	r3, r1, r3
   82a52:	429a      	cmp	r2, r3
   82a54:	d005      	beq.n	82a62 <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER0 = 1 << ul_id;
   82a56:	4a06      	ldr	r2, [pc, #24]	; (82a70 <pmc_enable_periph_clk+0x4c>)
   82a58:	2101      	movs	r1, #1
   82a5a:	687b      	ldr	r3, [r7, #4]
   82a5c:	fa01 f303 	lsl.w	r3, r1, r3
   82a60:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82a62:	2300      	movs	r3, #0
}
   82a64:	4618      	mov	r0, r3
   82a66:	370c      	adds	r7, #12
   82a68:	46bd      	mov	sp, r7
   82a6a:	bc80      	pop	{r7}
   82a6c:	4770      	bx	lr
   82a6e:	bf00      	nop
   82a70:	400e0400 	.word	0x400e0400

00082a74 <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
   82a74:	b480      	push	{r7}
   82a76:	b083      	sub	sp, #12
   82a78:	af00      	add	r7, sp, #0
   82a7a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   82a7c:	687b      	ldr	r3, [r7, #4]
   82a7e:	2b1d      	cmp	r3, #29
   82a80:	d901      	bls.n	82a86 <pmc_disable_periph_clk+0x12>
		return 1;
   82a82:	2301      	movs	r3, #1
   82a84:	e016      	b.n	82ab4 <pmc_disable_periph_clk+0x40>
	}

	if (ul_id < 32) {
   82a86:	687b      	ldr	r3, [r7, #4]
   82a88:	2b1f      	cmp	r3, #31
   82a8a:	d812      	bhi.n	82ab2 <pmc_disable_periph_clk+0x3e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   82a8c:	4b0c      	ldr	r3, [pc, #48]	; (82ac0 <pmc_disable_periph_clk+0x4c>)
   82a8e:	699a      	ldr	r2, [r3, #24]
   82a90:	2101      	movs	r1, #1
   82a92:	687b      	ldr	r3, [r7, #4]
   82a94:	fa01 f303 	lsl.w	r3, r1, r3
   82a98:	401a      	ands	r2, r3
   82a9a:	2101      	movs	r1, #1
   82a9c:	687b      	ldr	r3, [r7, #4]
   82a9e:	fa01 f303 	lsl.w	r3, r1, r3
   82aa2:	429a      	cmp	r2, r3
   82aa4:	d105      	bne.n	82ab2 <pmc_disable_periph_clk+0x3e>
			PMC->PMC_PCDR0 = 1 << ul_id;
   82aa6:	4a06      	ldr	r2, [pc, #24]	; (82ac0 <pmc_disable_periph_clk+0x4c>)
   82aa8:	2101      	movs	r1, #1
   82aaa:	687b      	ldr	r3, [r7, #4]
   82aac:	fa01 f303 	lsl.w	r3, r1, r3
   82ab0:	6153      	str	r3, [r2, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   82ab2:	2300      	movs	r3, #0
}
   82ab4:	4618      	mov	r0, r3
   82ab6:	370c      	adds	r7, #12
   82ab8:	46bd      	mov	sp, r7
   82aba:	bc80      	pop	{r7}
   82abc:	4770      	bx	lr
   82abe:	bf00      	nop
   82ac0:	400e0400 	.word	0x400e0400

00082ac4 <udi_vendor_enable>:
/**
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
   82ac4:	b580      	push	{r7, lr}
   82ac6:	af00      	add	r7, sp, #0
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   82ac8:	4b0b      	ldr	r3, [pc, #44]	; (82af8 <udi_vendor_enable+0x34>)
   82aca:	4798      	blx	r3
   82acc:	4603      	mov	r3, r0
   82ace:	78da      	ldrb	r2, [r3, #3]
   82ad0:	4b0a      	ldr	r3, [pc, #40]	; (82afc <udi_vendor_enable+0x38>)
   82ad2:	701a      	strb	r2, [r3, #0]
	if (0 == udi_vendor_alternate_setting) {
   82ad4:	4b09      	ldr	r3, [pc, #36]	; (82afc <udi_vendor_enable+0x38>)
   82ad6:	781b      	ldrb	r3, [r3, #0]
   82ad8:	2b00      	cmp	r3, #0
   82ada:	d109      	bne.n	82af0 <udi_vendor_enable+0x2c>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
   82adc:	4b08      	ldr	r3, [pc, #32]	; (82b00 <udi_vendor_enable+0x3c>)
   82ade:	4798      	blx	r3
   82ae0:	4603      	mov	r3, r0
   82ae2:	f083 0301 	eor.w	r3, r3, #1
   82ae6:	b2db      	uxtb	r3, r3
   82ae8:	2b00      	cmp	r3, #0
   82aea:	d001      	beq.n	82af0 <udi_vendor_enable+0x2c>
			return false;
   82aec:	2300      	movs	r3, #0
   82aee:	e000      	b.n	82af2 <udi_vendor_enable+0x2e>
		}
	}
	return true;
   82af0:	2301      	movs	r3, #1
}
   82af2:	4618      	mov	r0, r3
   82af4:	bd80      	pop	{r7, pc}
   82af6:	bf00      	nop
   82af8:	00083071 	.word	0x00083071
   82afc:	20000c39 	.word	0x20000c39
   82b00:	00080319 	.word	0x00080319

00082b04 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
   82b04:	b580      	push	{r7, lr}
   82b06:	af00      	add	r7, sp, #0
	if (0 == udi_vendor_alternate_setting) {
   82b08:	4b03      	ldr	r3, [pc, #12]	; (82b18 <udi_vendor_disable+0x14>)
   82b0a:	781b      	ldrb	r3, [r3, #0]
   82b0c:	2b00      	cmp	r3, #0
   82b0e:	d101      	bne.n	82b14 <udi_vendor_disable+0x10>
		UDI_VENDOR_DISABLE_EXT();
   82b10:	4b02      	ldr	r3, [pc, #8]	; (82b1c <udi_vendor_disable+0x18>)
   82b12:	4798      	blx	r3
	}
}
   82b14:	bf00      	nop
   82b16:	bd80      	pop	{r7, pc}
   82b18:	20000c39 	.word	0x20000c39
   82b1c:	00080345 	.word	0x00080345

00082b20 <udi_vendor_setup>:

bool udi_vendor_setup(void)
{
   82b20:	b580      	push	{r7, lr}
   82b22:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   82b24:	4b10      	ldr	r3, [pc, #64]	; (82b68 <udi_vendor_setup+0x48>)
   82b26:	781b      	ldrb	r3, [r3, #0]
   82b28:	b25b      	sxtb	r3, r3
   82b2a:	2b00      	cmp	r3, #0
   82b2c:	da09      	bge.n	82b42 <udi_vendor_setup+0x22>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   82b2e:	4b0e      	ldr	r3, [pc, #56]	; (82b68 <udi_vendor_setup+0x48>)
   82b30:	781b      	ldrb	r3, [r3, #0]
   82b32:	f003 0360 	and.w	r3, r3, #96	; 0x60
   82b36:	2b40      	cmp	r3, #64	; 0x40
   82b38:	d103      	bne.n	82b42 <udi_vendor_setup+0x22>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   82b3a:	4b0c      	ldr	r3, [pc, #48]	; (82b6c <udi_vendor_setup+0x4c>)
   82b3c:	4798      	blx	r3
   82b3e:	4603      	mov	r3, r0
   82b40:	e00f      	b.n	82b62 <udi_vendor_setup+0x42>
		}
	}
	if (Udd_setup_is_out()) {
   82b42:	4b09      	ldr	r3, [pc, #36]	; (82b68 <udi_vendor_setup+0x48>)
   82b44:	781b      	ldrb	r3, [r3, #0]
   82b46:	b25b      	sxtb	r3, r3
   82b48:	2b00      	cmp	r3, #0
   82b4a:	db09      	blt.n	82b60 <udi_vendor_setup+0x40>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   82b4c:	4b06      	ldr	r3, [pc, #24]	; (82b68 <udi_vendor_setup+0x48>)
   82b4e:	781b      	ldrb	r3, [r3, #0]
   82b50:	f003 0360 	and.w	r3, r3, #96	; 0x60
   82b54:	2b40      	cmp	r3, #64	; 0x40
   82b56:	d103      	bne.n	82b60 <udi_vendor_setup+0x40>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   82b58:	4b05      	ldr	r3, [pc, #20]	; (82b70 <udi_vendor_setup+0x50>)
   82b5a:	4798      	blx	r3
   82b5c:	4603      	mov	r3, r0
   82b5e:	e000      	b.n	82b62 <udi_vendor_setup+0x42>
		}
	}
	return false; // Not supported request
   82b60:	2300      	movs	r3, #0
}
   82b62:	4618      	mov	r0, r3
   82b64:	bd80      	pop	{r7, pc}
   82b66:	bf00      	nop
   82b68:	20000c4c 	.word	0x20000c4c
   82b6c:	000805bd 	.word	0x000805bd
   82b70:	000804e5 	.word	0x000804e5

00082b74 <udi_vendor_getsetting>:

uint8_t udi_vendor_getsetting(void)
{
   82b74:	b480      	push	{r7}
   82b76:	af00      	add	r7, sp, #0
	return udi_vendor_alternate_setting;
   82b78:	4b02      	ldr	r3, [pc, #8]	; (82b84 <udi_vendor_getsetting+0x10>)
   82b7a:	781b      	ldrb	r3, [r3, #0]
}
   82b7c:	4618      	mov	r0, r3
   82b7e:	46bd      	mov	sp, r7
   82b80:	bc80      	pop	{r7}
   82b82:	4770      	bx	lr
   82b84:	20000c39 	.word	0x20000c39

00082b88 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   82b88:	b590      	push	{r4, r7, lr}
   82b8a:	b087      	sub	sp, #28
   82b8c:	af02      	add	r7, sp, #8
   82b8e:	60f8      	str	r0, [r7, #12]
   82b90:	60b9      	str	r1, [r7, #8]
   82b92:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   82b94:	687b      	ldr	r3, [r7, #4]
   82b96:	9300      	str	r3, [sp, #0]
   82b98:	68bb      	ldr	r3, [r7, #8]
   82b9a:	68fa      	ldr	r2, [r7, #12]
   82b9c:	2100      	movs	r1, #0
   82b9e:	2081      	movs	r0, #129	; 0x81
   82ba0:	4c03      	ldr	r4, [pc, #12]	; (82bb0 <udi_vendor_bulk_in_run+0x28>)
   82ba2:	47a0      	blx	r4
   82ba4:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   82ba6:	4618      	mov	r0, r3
   82ba8:	3714      	adds	r7, #20
   82baa:	46bd      	mov	sp, r7
   82bac:	bd90      	pop	{r4, r7, pc}
   82bae:	bf00      	nop
   82bb0:	000812e9 	.word	0x000812e9

00082bb4 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   82bb4:	b590      	push	{r4, r7, lr}
   82bb6:	b087      	sub	sp, #28
   82bb8:	af02      	add	r7, sp, #8
   82bba:	60f8      	str	r0, [r7, #12]
   82bbc:	60b9      	str	r1, [r7, #8]
   82bbe:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   82bc0:	687b      	ldr	r3, [r7, #4]
   82bc2:	9300      	str	r3, [sp, #0]
   82bc4:	68bb      	ldr	r3, [r7, #8]
   82bc6:	68fa      	ldr	r2, [r7, #12]
   82bc8:	2100      	movs	r1, #0
   82bca:	2002      	movs	r0, #2
   82bcc:	4c03      	ldr	r4, [pc, #12]	; (82bdc <udi_vendor_bulk_out_run+0x28>)
   82bce:	47a0      	blx	r4
   82bd0:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   82bd2:	4618      	mov	r0, r3
   82bd4:	3714      	adds	r7, #20
   82bd6:	46bd      	mov	sp, r7
   82bd8:	bd90      	pop	{r4, r7, pc}
   82bda:	bf00      	nop
   82bdc:	000812e9 	.word	0x000812e9

00082be0 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   82be0:	b480      	push	{r7}
   82be2:	b085      	sub	sp, #20
   82be4:	af00      	add	r7, sp, #0
   82be6:	60f8      	str	r0, [r7, #12]
   82be8:	60b9      	str	r1, [r7, #8]
   82bea:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82bec:	687b      	ldr	r3, [r7, #4]
   82bee:	2b00      	cmp	r3, #0
   82bf0:	d003      	beq.n	82bfa <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   82bf2:	68fb      	ldr	r3, [r7, #12]
   82bf4:	68ba      	ldr	r2, [r7, #8]
   82bf6:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   82bf8:	e002      	b.n	82c00 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
   82bfa:	68fb      	ldr	r3, [r7, #12]
   82bfc:	68ba      	ldr	r2, [r7, #8]
   82bfe:	661a      	str	r2, [r3, #96]	; 0x60
}
   82c00:	bf00      	nop
   82c02:	3714      	adds	r7, #20
   82c04:	46bd      	mov	sp, r7
   82c06:	bc80      	pop	{r7}
   82c08:	4770      	bx	lr

00082c0a <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   82c0a:	b480      	push	{r7}
   82c0c:	b087      	sub	sp, #28
   82c0e:	af00      	add	r7, sp, #0
   82c10:	60f8      	str	r0, [r7, #12]
   82c12:	60b9      	str	r1, [r7, #8]
   82c14:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82c16:	68fb      	ldr	r3, [r7, #12]
   82c18:	687a      	ldr	r2, [r7, #4]
   82c1a:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82c1c:	68bb      	ldr	r3, [r7, #8]
   82c1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82c22:	d01f      	beq.n	82c64 <pio_set_peripheral+0x5a>
   82c24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82c28:	d805      	bhi.n	82c36 <pio_set_peripheral+0x2c>
   82c2a:	2b00      	cmp	r3, #0
   82c2c:	d027      	beq.n	82c7e <pio_set_peripheral+0x74>
   82c2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82c32:	d00a      	beq.n	82c4a <pio_set_peripheral+0x40>
   82c34:	e01f      	b.n	82c76 <pio_set_peripheral+0x6c>
   82c36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82c3a:	d020      	beq.n	82c7e <pio_set_peripheral+0x74>
   82c3c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82c40:	d01d      	beq.n	82c7e <pio_set_peripheral+0x74>
   82c42:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82c46:	d01a      	beq.n	82c7e <pio_set_peripheral+0x74>
   82c48:	e015      	b.n	82c76 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82c4a:	68fb      	ldr	r3, [r7, #12]
   82c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82c4e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82c50:	68fb      	ldr	r3, [r7, #12]
   82c52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82c54:	687b      	ldr	r3, [r7, #4]
   82c56:	43d9      	mvns	r1, r3
   82c58:	697b      	ldr	r3, [r7, #20]
   82c5a:	400b      	ands	r3, r1
   82c5c:	401a      	ands	r2, r3
   82c5e:	68fb      	ldr	r3, [r7, #12]
   82c60:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   82c62:	e008      	b.n	82c76 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   82c64:	68fb      	ldr	r3, [r7, #12]
   82c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82c68:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82c6a:	687a      	ldr	r2, [r7, #4]
   82c6c:	697b      	ldr	r3, [r7, #20]
   82c6e:	431a      	orrs	r2, r3
   82c70:	68fb      	ldr	r3, [r7, #12]
   82c72:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   82c74:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82c76:	68fb      	ldr	r3, [r7, #12]
   82c78:	687a      	ldr	r2, [r7, #4]
   82c7a:	605a      	str	r2, [r3, #4]
   82c7c:	e000      	b.n	82c80 <pio_set_peripheral+0x76>
		return;
   82c7e:	bf00      	nop
}
   82c80:	371c      	adds	r7, #28
   82c82:	46bd      	mov	sp, r7
   82c84:	bc80      	pop	{r7}
   82c86:	4770      	bx	lr

00082c88 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   82c88:	b580      	push	{r7, lr}
   82c8a:	b084      	sub	sp, #16
   82c8c:	af00      	add	r7, sp, #0
   82c8e:	60f8      	str	r0, [r7, #12]
   82c90:	60b9      	str	r1, [r7, #8]
   82c92:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   82c94:	68b9      	ldr	r1, [r7, #8]
   82c96:	68f8      	ldr	r0, [r7, #12]
   82c98:	4b19      	ldr	r3, [pc, #100]	; (82d00 <pio_set_input+0x78>)
   82c9a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   82c9c:	687b      	ldr	r3, [r7, #4]
   82c9e:	f003 0301 	and.w	r3, r3, #1
   82ca2:	461a      	mov	r2, r3
   82ca4:	68b9      	ldr	r1, [r7, #8]
   82ca6:	68f8      	ldr	r0, [r7, #12]
   82ca8:	4b16      	ldr	r3, [pc, #88]	; (82d04 <pio_set_input+0x7c>)
   82caa:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82cac:	687b      	ldr	r3, [r7, #4]
   82cae:	f003 030a 	and.w	r3, r3, #10
   82cb2:	2b00      	cmp	r3, #0
   82cb4:	d003      	beq.n	82cbe <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   82cb6:	68fb      	ldr	r3, [r7, #12]
   82cb8:	68ba      	ldr	r2, [r7, #8]
   82cba:	621a      	str	r2, [r3, #32]
   82cbc:	e002      	b.n	82cc4 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82cbe:	68fb      	ldr	r3, [r7, #12]
   82cc0:	68ba      	ldr	r2, [r7, #8]
   82cc2:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82cc4:	687b      	ldr	r3, [r7, #4]
   82cc6:	f003 0302 	and.w	r3, r3, #2
   82cca:	2b00      	cmp	r3, #0
   82ccc:	d004      	beq.n	82cd8 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   82cce:	68fb      	ldr	r3, [r7, #12]
   82cd0:	68ba      	ldr	r2, [r7, #8]
   82cd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   82cd6:	e008      	b.n	82cea <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82cd8:	687b      	ldr	r3, [r7, #4]
   82cda:	f003 0308 	and.w	r3, r3, #8
   82cde:	2b00      	cmp	r3, #0
   82ce0:	d003      	beq.n	82cea <pio_set_input+0x62>
			p_pio->PIO_DIFSR = ul_mask;
   82ce2:	68fb      	ldr	r3, [r7, #12]
   82ce4:	68ba      	ldr	r2, [r7, #8]
   82ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82cea:	68fb      	ldr	r3, [r7, #12]
   82cec:	68ba      	ldr	r2, [r7, #8]
   82cee:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   82cf0:	68fb      	ldr	r3, [r7, #12]
   82cf2:	68ba      	ldr	r2, [r7, #8]
   82cf4:	601a      	str	r2, [r3, #0]
}
   82cf6:	bf00      	nop
   82cf8:	3710      	adds	r7, #16
   82cfa:	46bd      	mov	sp, r7
   82cfc:	bd80      	pop	{r7, pc}
   82cfe:	bf00      	nop
   82d00:	00082d6d 	.word	0x00082d6d
   82d04:	00082be1 	.word	0x00082be1

00082d08 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82d08:	b580      	push	{r7, lr}
   82d0a:	b084      	sub	sp, #16
   82d0c:	af00      	add	r7, sp, #0
   82d0e:	60f8      	str	r0, [r7, #12]
   82d10:	60b9      	str	r1, [r7, #8]
   82d12:	607a      	str	r2, [r7, #4]
   82d14:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   82d16:	68b9      	ldr	r1, [r7, #8]
   82d18:	68f8      	ldr	r0, [r7, #12]
   82d1a:	4b12      	ldr	r3, [pc, #72]	; (82d64 <pio_set_output+0x5c>)
   82d1c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   82d1e:	69ba      	ldr	r2, [r7, #24]
   82d20:	68b9      	ldr	r1, [r7, #8]
   82d22:	68f8      	ldr	r0, [r7, #12]
   82d24:	4b10      	ldr	r3, [pc, #64]	; (82d68 <pio_set_output+0x60>)
   82d26:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   82d28:	683b      	ldr	r3, [r7, #0]
   82d2a:	2b00      	cmp	r3, #0
   82d2c:	d003      	beq.n	82d36 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   82d2e:	68fb      	ldr	r3, [r7, #12]
   82d30:	68ba      	ldr	r2, [r7, #8]
   82d32:	651a      	str	r2, [r3, #80]	; 0x50
   82d34:	e002      	b.n	82d3c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82d36:	68fb      	ldr	r3, [r7, #12]
   82d38:	68ba      	ldr	r2, [r7, #8]
   82d3a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   82d3c:	687b      	ldr	r3, [r7, #4]
   82d3e:	2b00      	cmp	r3, #0
   82d40:	d003      	beq.n	82d4a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   82d42:	68fb      	ldr	r3, [r7, #12]
   82d44:	68ba      	ldr	r2, [r7, #8]
   82d46:	631a      	str	r2, [r3, #48]	; 0x30
   82d48:	e002      	b.n	82d50 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   82d4a:	68fb      	ldr	r3, [r7, #12]
   82d4c:	68ba      	ldr	r2, [r7, #8]
   82d4e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   82d50:	68fb      	ldr	r3, [r7, #12]
   82d52:	68ba      	ldr	r2, [r7, #8]
   82d54:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   82d56:	68fb      	ldr	r3, [r7, #12]
   82d58:	68ba      	ldr	r2, [r7, #8]
   82d5a:	601a      	str	r2, [r3, #0]
}
   82d5c:	bf00      	nop
   82d5e:	3710      	adds	r7, #16
   82d60:	46bd      	mov	sp, r7
   82d62:	bd80      	pop	{r7, pc}
   82d64:	00082d6d 	.word	0x00082d6d
   82d68:	00082be1 	.word	0x00082be1

00082d6c <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   82d6c:	b480      	push	{r7}
   82d6e:	b083      	sub	sp, #12
   82d70:	af00      	add	r7, sp, #0
   82d72:	6078      	str	r0, [r7, #4]
   82d74:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   82d76:	687b      	ldr	r3, [r7, #4]
   82d78:	683a      	ldr	r2, [r7, #0]
   82d7a:	645a      	str	r2, [r3, #68]	; 0x44
}
   82d7c:	bf00      	nop
   82d7e:	370c      	adds	r7, #12
   82d80:	46bd      	mov	sp, r7
   82d82:	bc80      	pop	{r7}
   82d84:	4770      	bx	lr

00082d86 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   82d86:	b480      	push	{r7}
   82d88:	b083      	sub	sp, #12
   82d8a:	af00      	add	r7, sp, #0
   82d8c:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   82d8e:	687b      	ldr	r3, [r7, #4]
   82d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   82d92:	4618      	mov	r0, r3
   82d94:	370c      	adds	r7, #12
   82d96:	46bd      	mov	sp, r7
   82d98:	bc80      	pop	{r7}
   82d9a:	4770      	bx	lr

00082d9c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   82d9c:	b480      	push	{r7}
   82d9e:	b083      	sub	sp, #12
   82da0:	af00      	add	r7, sp, #0
   82da2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   82da4:	687b      	ldr	r3, [r7, #4]
   82da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   82da8:	4618      	mov	r0, r3
   82daa:	370c      	adds	r7, #12
   82dac:	46bd      	mov	sp, r7
   82dae:	bc80      	pop	{r7}
   82db0:	4770      	bx	lr
   82db2:	0000      	movs	r0, r0

00082db4 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   82db4:	b580      	push	{r7, lr}
   82db6:	b084      	sub	sp, #16
   82db8:	af00      	add	r7, sp, #0
   82dba:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82dbc:	6878      	ldr	r0, [r7, #4]
   82dbe:	4b08      	ldr	r3, [pc, #32]	; (82de0 <pio_set_pin_high+0x2c>)
   82dc0:	4798      	blx	r3
   82dc2:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   82dc4:	687b      	ldr	r3, [r7, #4]
   82dc6:	f003 031f 	and.w	r3, r3, #31
   82dca:	2201      	movs	r2, #1
   82dcc:	fa02 f303 	lsl.w	r3, r2, r3
   82dd0:	461a      	mov	r2, r3
   82dd2:	68fb      	ldr	r3, [r7, #12]
   82dd4:	631a      	str	r2, [r3, #48]	; 0x30
}
   82dd6:	bf00      	nop
   82dd8:	3710      	adds	r7, #16
   82dda:	46bd      	mov	sp, r7
   82ddc:	bd80      	pop	{r7, pc}
   82dde:	bf00      	nop
   82de0:	00083031 	.word	0x00083031

00082de4 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   82de4:	b580      	push	{r7, lr}
   82de6:	b084      	sub	sp, #16
   82de8:	af00      	add	r7, sp, #0
   82dea:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82dec:	6878      	ldr	r0, [r7, #4]
   82dee:	4b08      	ldr	r3, [pc, #32]	; (82e10 <pio_set_pin_low+0x2c>)
   82df0:	4798      	blx	r3
   82df2:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   82df4:	687b      	ldr	r3, [r7, #4]
   82df6:	f003 031f 	and.w	r3, r3, #31
   82dfa:	2201      	movs	r2, #1
   82dfc:	fa02 f303 	lsl.w	r3, r2, r3
   82e00:	461a      	mov	r2, r3
   82e02:	68fb      	ldr	r3, [r7, #12]
   82e04:	635a      	str	r2, [r3, #52]	; 0x34
}
   82e06:	bf00      	nop
   82e08:	3710      	adds	r7, #16
   82e0a:	46bd      	mov	sp, r7
   82e0c:	bd80      	pop	{r7, pc}
   82e0e:	bf00      	nop
   82e10:	00083031 	.word	0x00083031

00082e14 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82e14:	b590      	push	{r4, r7, lr}
   82e16:	b087      	sub	sp, #28
   82e18:	af02      	add	r7, sp, #8
   82e1a:	6078      	str	r0, [r7, #4]
   82e1c:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82e1e:	6878      	ldr	r0, [r7, #4]
   82e20:	4b45      	ldr	r3, [pc, #276]	; (82f38 <pio_configure_pin+0x124>)
   82e22:	4798      	blx	r3
   82e24:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82e26:	683b      	ldr	r3, [r7, #0]
   82e28:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82e2c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82e30:	d046      	beq.n	82ec0 <pio_configure_pin+0xac>
   82e32:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82e36:	d806      	bhi.n	82e46 <pio_configure_pin+0x32>
   82e38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82e3c:	d00a      	beq.n	82e54 <pio_configure_pin+0x40>
   82e3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82e42:	d022      	beq.n	82e8a <pio_configure_pin+0x76>
   82e44:	e070      	b.n	82f28 <pio_configure_pin+0x114>
   82e46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82e4a:	d045      	beq.n	82ed8 <pio_configure_pin+0xc4>
   82e4c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82e50:	d042      	beq.n	82ed8 <pio_configure_pin+0xc4>
   82e52:	e069      	b.n	82f28 <pio_configure_pin+0x114>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82e54:	687b      	ldr	r3, [r7, #4]
   82e56:	f003 031f 	and.w	r3, r3, #31
   82e5a:	2201      	movs	r2, #1
   82e5c:	fa02 f303 	lsl.w	r3, r2, r3
   82e60:	461a      	mov	r2, r3
   82e62:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82e66:	68f8      	ldr	r0, [r7, #12]
   82e68:	4b34      	ldr	r3, [pc, #208]	; (82f3c <pio_configure_pin+0x128>)
   82e6a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82e6c:	687b      	ldr	r3, [r7, #4]
   82e6e:	f003 031f 	and.w	r3, r3, #31
   82e72:	2201      	movs	r2, #1
   82e74:	fa02 f303 	lsl.w	r3, r2, r3
   82e78:	4619      	mov	r1, r3
   82e7a:	683b      	ldr	r3, [r7, #0]
   82e7c:	f003 0301 	and.w	r3, r3, #1
   82e80:	461a      	mov	r2, r3
   82e82:	68f8      	ldr	r0, [r7, #12]
   82e84:	4b2e      	ldr	r3, [pc, #184]	; (82f40 <pio_configure_pin+0x12c>)
   82e86:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   82e88:	e050      	b.n	82f2c <pio_configure_pin+0x118>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82e8a:	687b      	ldr	r3, [r7, #4]
   82e8c:	f003 031f 	and.w	r3, r3, #31
   82e90:	2201      	movs	r2, #1
   82e92:	fa02 f303 	lsl.w	r3, r2, r3
   82e96:	461a      	mov	r2, r3
   82e98:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82e9c:	68f8      	ldr	r0, [r7, #12]
   82e9e:	4b27      	ldr	r3, [pc, #156]	; (82f3c <pio_configure_pin+0x128>)
   82ea0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82ea2:	687b      	ldr	r3, [r7, #4]
   82ea4:	f003 031f 	and.w	r3, r3, #31
   82ea8:	2201      	movs	r2, #1
   82eaa:	fa02 f303 	lsl.w	r3, r2, r3
   82eae:	4619      	mov	r1, r3
   82eb0:	683b      	ldr	r3, [r7, #0]
   82eb2:	f003 0301 	and.w	r3, r3, #1
   82eb6:	461a      	mov	r2, r3
   82eb8:	68f8      	ldr	r0, [r7, #12]
   82eba:	4b21      	ldr	r3, [pc, #132]	; (82f40 <pio_configure_pin+0x12c>)
   82ebc:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   82ebe:	e035      	b.n	82f2c <pio_configure_pin+0x118>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82ec0:	687b      	ldr	r3, [r7, #4]
   82ec2:	f003 031f 	and.w	r3, r3, #31
   82ec6:	2201      	movs	r2, #1
   82ec8:	fa02 f303 	lsl.w	r3, r2, r3
   82ecc:	683a      	ldr	r2, [r7, #0]
   82ece:	4619      	mov	r1, r3
   82ed0:	68f8      	ldr	r0, [r7, #12]
   82ed2:	4b1c      	ldr	r3, [pc, #112]	; (82f44 <pio_configure_pin+0x130>)
   82ed4:	4798      	blx	r3
		break;
   82ed6:	e029      	b.n	82f2c <pio_configure_pin+0x118>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82ed8:	687b      	ldr	r3, [r7, #4]
   82eda:	f003 031f 	and.w	r3, r3, #31
   82ede:	2201      	movs	r2, #1
   82ee0:	fa02 f303 	lsl.w	r3, r2, r3
   82ee4:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82ee6:	683b      	ldr	r3, [r7, #0]
   82ee8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82eec:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82ef0:	bf0c      	ite	eq
   82ef2:	2301      	moveq	r3, #1
   82ef4:	2300      	movne	r3, #0
   82ef6:	b2db      	uxtb	r3, r3
   82ef8:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82efa:	683b      	ldr	r3, [r7, #0]
   82efc:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82f00:	2b00      	cmp	r3, #0
   82f02:	bf14      	ite	ne
   82f04:	2301      	movne	r3, #1
   82f06:	2300      	moveq	r3, #0
   82f08:	b2db      	uxtb	r3, r3
   82f0a:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   82f0c:	683b      	ldr	r3, [r7, #0]
   82f0e:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82f12:	2b00      	cmp	r3, #0
   82f14:	bf14      	ite	ne
   82f16:	2301      	movne	r3, #1
   82f18:	2300      	moveq	r3, #0
   82f1a:	b2db      	uxtb	r3, r3
   82f1c:	9300      	str	r3, [sp, #0]
   82f1e:	4603      	mov	r3, r0
   82f20:	68f8      	ldr	r0, [r7, #12]
   82f22:	4c09      	ldr	r4, [pc, #36]	; (82f48 <pio_configure_pin+0x134>)
   82f24:	47a0      	blx	r4
		break;
   82f26:	e001      	b.n	82f2c <pio_configure_pin+0x118>

	default:
		return 0;
   82f28:	2300      	movs	r3, #0
   82f2a:	e000      	b.n	82f2e <pio_configure_pin+0x11a>
	}

	return 1;
   82f2c:	2301      	movs	r3, #1
}
   82f2e:	4618      	mov	r0, r3
   82f30:	3714      	adds	r7, #20
   82f32:	46bd      	mov	sp, r7
   82f34:	bd90      	pop	{r4, r7, pc}
   82f36:	bf00      	nop
   82f38:	00083031 	.word	0x00083031
   82f3c:	00082c0b 	.word	0x00082c0b
   82f40:	00082be1 	.word	0x00082be1
   82f44:	00082c89 	.word	0x00082c89
   82f48:	00082d09 	.word	0x00082d09

00082f4c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82f4c:	b590      	push	{r4, r7, lr}
   82f4e:	b087      	sub	sp, #28
   82f50:	af02      	add	r7, sp, #8
   82f52:	60f8      	str	r0, [r7, #12]
   82f54:	60b9      	str	r1, [r7, #8]
   82f56:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82f58:	687b      	ldr	r3, [r7, #4]
   82f5a:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82f5e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82f62:	d02e      	beq.n	82fc2 <pio_configure_pin_group+0x76>
   82f64:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82f68:	d806      	bhi.n	82f78 <pio_configure_pin_group+0x2c>
   82f6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82f6e:	d00a      	beq.n	82f86 <pio_configure_pin_group+0x3a>
   82f70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82f74:	d016      	beq.n	82fa4 <pio_configure_pin_group+0x58>
   82f76:	e04c      	b.n	83012 <pio_configure_pin_group+0xc6>
   82f78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82f7c:	d027      	beq.n	82fce <pio_configure_pin_group+0x82>
   82f7e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82f82:	d024      	beq.n	82fce <pio_configure_pin_group+0x82>
   82f84:	e045      	b.n	83012 <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82f86:	68ba      	ldr	r2, [r7, #8]
   82f88:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82f8c:	68f8      	ldr	r0, [r7, #12]
   82f8e:	4b24      	ldr	r3, [pc, #144]	; (83020 <pio_configure_pin_group+0xd4>)
   82f90:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   82f92:	687b      	ldr	r3, [r7, #4]
   82f94:	f003 0301 	and.w	r3, r3, #1
   82f98:	461a      	mov	r2, r3
   82f9a:	68b9      	ldr	r1, [r7, #8]
   82f9c:	68f8      	ldr	r0, [r7, #12]
   82f9e:	4b21      	ldr	r3, [pc, #132]	; (83024 <pio_configure_pin_group+0xd8>)
   82fa0:	4798      	blx	r3
		break;
   82fa2:	e038      	b.n	83016 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82fa4:	68ba      	ldr	r2, [r7, #8]
   82fa6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82faa:	68f8      	ldr	r0, [r7, #12]
   82fac:	4b1c      	ldr	r3, [pc, #112]	; (83020 <pio_configure_pin_group+0xd4>)
   82fae:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   82fb0:	687b      	ldr	r3, [r7, #4]
   82fb2:	f003 0301 	and.w	r3, r3, #1
   82fb6:	461a      	mov	r2, r3
   82fb8:	68b9      	ldr	r1, [r7, #8]
   82fba:	68f8      	ldr	r0, [r7, #12]
   82fbc:	4b19      	ldr	r3, [pc, #100]	; (83024 <pio_configure_pin_group+0xd8>)
   82fbe:	4798      	blx	r3
		break;
   82fc0:	e029      	b.n	83016 <pio_configure_pin_group+0xca>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82fc2:	687a      	ldr	r2, [r7, #4]
   82fc4:	68b9      	ldr	r1, [r7, #8]
   82fc6:	68f8      	ldr	r0, [r7, #12]
   82fc8:	4b17      	ldr	r3, [pc, #92]	; (83028 <pio_configure_pin_group+0xdc>)
   82fca:	4798      	blx	r3
		break;
   82fcc:	e023      	b.n	83016 <pio_configure_pin_group+0xca>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82fce:	687b      	ldr	r3, [r7, #4]
   82fd0:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   82fd4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82fd8:	bf0c      	ite	eq
   82fda:	2301      	moveq	r3, #1
   82fdc:	2300      	movne	r3, #0
   82fde:	b2db      	uxtb	r3, r3
   82fe0:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82fe2:	687b      	ldr	r3, [r7, #4]
   82fe4:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask,
   82fe8:	2b00      	cmp	r3, #0
   82fea:	bf14      	ite	ne
   82fec:	2301      	movne	r3, #1
   82fee:	2300      	moveq	r3, #0
   82ff0:	b2db      	uxtb	r3, r3
   82ff2:	4619      	mov	r1, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   82ff4:	687b      	ldr	r3, [r7, #4]
   82ff6:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask,
   82ffa:	2b00      	cmp	r3, #0
   82ffc:	bf14      	ite	ne
   82ffe:	2301      	movne	r3, #1
   83000:	2300      	moveq	r3, #0
   83002:	b2db      	uxtb	r3, r3
   83004:	9300      	str	r3, [sp, #0]
   83006:	460b      	mov	r3, r1
   83008:	68b9      	ldr	r1, [r7, #8]
   8300a:	68f8      	ldr	r0, [r7, #12]
   8300c:	4c07      	ldr	r4, [pc, #28]	; (8302c <pio_configure_pin_group+0xe0>)
   8300e:	47a0      	blx	r4
		break;
   83010:	e001      	b.n	83016 <pio_configure_pin_group+0xca>

	default:
		return 0;
   83012:	2300      	movs	r3, #0
   83014:	e000      	b.n	83018 <pio_configure_pin_group+0xcc>
	}

	return 1;
   83016:	2301      	movs	r3, #1
}
   83018:	4618      	mov	r0, r3
   8301a:	3714      	adds	r7, #20
   8301c:	46bd      	mov	sp, r7
   8301e:	bd90      	pop	{r4, r7, pc}
   83020:	00082c0b 	.word	0x00082c0b
   83024:	00082be1 	.word	0x00082be1
   83028:	00082c89 	.word	0x00082c89
   8302c:	00082d09 	.word	0x00082d09

00083030 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
   83030:	b480      	push	{r7}
   83032:	b085      	sub	sp, #20
   83034:	af00      	add	r7, sp, #0
   83036:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83038:	687b      	ldr	r3, [r7, #4]
   8303a:	095b      	lsrs	r3, r3, #5
   8303c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83040:	f203 7306 	addw	r3, r3, #1798	; 0x706
   83044:	025b      	lsls	r3, r3, #9
   83046:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
   83048:	68fb      	ldr	r3, [r7, #12]
}
   8304a:	4618      	mov	r0, r3
   8304c:	3714      	adds	r7, #20
   8304e:	46bd      	mov	sp, r7
   83050:	bc80      	pop	{r7}
   83052:	4770      	bx	lr

00083054 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   83054:	b480      	push	{r7}
   83056:	af00      	add	r7, sp, #0
	while (1) {
   83058:	e7fe      	b.n	83058 <Dummy_Handler+0x4>
   8305a:	0000      	movs	r0, r0

0008305c <udc_get_string_serial_name>:
 * to a suitable pointer. This will also require the serial number length
 * define USB_DEVICE_GET_SERIAL_NAME_LENGTH.
 */
#if defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	static const uint8_t *udc_get_string_serial_name(void)
	{
   8305c:	b480      	push	{r7}
   8305e:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_GET_SERIAL_NAME_POINTER;
   83060:	4b02      	ldr	r3, [pc, #8]	; (8306c <udc_get_string_serial_name+0x10>)
	}
   83062:	4618      	mov	r0, r3
   83064:	46bd      	mov	sp, r7
   83066:	bc80      	pop	{r7}
   83068:	4770      	bx	lr
   8306a:	bf00      	nop
   8306c:	20000170 	.word	0x20000170

00083070 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
   83070:	b480      	push	{r7}
   83072:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
   83074:	4b02      	ldr	r3, [pc, #8]	; (83080 <udc_get_interface_desc+0x10>)
   83076:	681b      	ldr	r3, [r3, #0]
}
   83078:	4618      	mov	r0, r3
   8307a:	46bd      	mov	sp, r7
   8307c:	bc80      	pop	{r7}
   8307e:	4770      	bx	lr
   83080:	20000c44 	.word	0x20000c44

00083084 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
   83084:	b480      	push	{r7}
   83086:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   83088:	4b06      	ldr	r3, [pc, #24]	; (830a4 <udc_get_eof_conf+0x20>)
   8308a:	681b      	ldr	r3, [r3, #0]
   8308c:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   8308e:	4a05      	ldr	r2, [pc, #20]	; (830a4 <udc_get_eof_conf+0x20>)
   83090:	6812      	ldr	r2, [r2, #0]
   83092:	6812      	ldr	r2, [r2, #0]
   83094:	8852      	ldrh	r2, [r2, #2]
   83096:	b292      	uxth	r2, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   83098:	4413      	add	r3, r2
}
   8309a:	4618      	mov	r0, r3
   8309c:	46bd      	mov	sp, r7
   8309e:	bc80      	pop	{r7}
   830a0:	4770      	bx	lr
   830a2:	bf00      	nop
   830a4:	20000c40 	.word	0x20000c40

000830a8 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   830a8:	b580      	push	{r7, lr}
   830aa:	b084      	sub	sp, #16
   830ac:	af00      	add	r7, sp, #0
   830ae:	6078      	str	r0, [r7, #4]
   830b0:	460b      	mov	r3, r1
   830b2:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   830b4:	4b12      	ldr	r3, [pc, #72]	; (83100 <udc_next_desc_in_iface+0x58>)
   830b6:	4798      	blx	r3
   830b8:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   830ba:	687b      	ldr	r3, [r7, #4]
   830bc:	781b      	ldrb	r3, [r3, #0]
   830be:	461a      	mov	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   830c0:	687b      	ldr	r3, [r7, #4]
   830c2:	4413      	add	r3, r2
   830c4:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   830c6:	e010      	b.n	830ea <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   830c8:	687b      	ldr	r3, [r7, #4]
   830ca:	785b      	ldrb	r3, [r3, #1]
   830cc:	2b04      	cmp	r3, #4
   830ce:	d011      	beq.n	830f4 <udc_next_desc_in_iface+0x4c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   830d0:	687b      	ldr	r3, [r7, #4]
   830d2:	785b      	ldrb	r3, [r3, #1]
   830d4:	78fa      	ldrb	r2, [r7, #3]
   830d6:	429a      	cmp	r2, r3
   830d8:	d101      	bne.n	830de <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
   830da:	687b      	ldr	r3, [r7, #4]
   830dc:	e00c      	b.n	830f8 <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   830de:	687b      	ldr	r3, [r7, #4]
   830e0:	781b      	ldrb	r3, [r3, #0]
   830e2:	461a      	mov	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   830e4:	687b      	ldr	r3, [r7, #4]
   830e6:	4413      	add	r3, r2
   830e8:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
   830ea:	68fa      	ldr	r2, [r7, #12]
   830ec:	687b      	ldr	r3, [r7, #4]
   830ee:	429a      	cmp	r2, r3
   830f0:	d8ea      	bhi.n	830c8 <udc_next_desc_in_iface+0x20>
   830f2:	e000      	b.n	830f6 <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
   830f4:	bf00      	nop
	}
	return NULL; // No specific descriptor found
   830f6:	2300      	movs	r3, #0
}
   830f8:	4618      	mov	r0, r3
   830fa:	3710      	adds	r7, #16
   830fc:	46bd      	mov	sp, r7
   830fe:	bd80      	pop	{r7, pc}
   83100:	00083085 	.word	0x00083085

00083104 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   83104:	b580      	push	{r7, lr}
   83106:	b084      	sub	sp, #16
   83108:	af00      	add	r7, sp, #0
   8310a:	4603      	mov	r3, r0
   8310c:	460a      	mov	r2, r1
   8310e:	71fb      	strb	r3, [r7, #7]
   83110:	4613      	mov	r3, r2
   83112:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   83114:	4b1e      	ldr	r3, [pc, #120]	; (83190 <udc_update_iface_desc+0x8c>)
   83116:	781b      	ldrb	r3, [r3, #0]
   83118:	2b00      	cmp	r3, #0
   8311a:	d101      	bne.n	83120 <udc_update_iface_desc+0x1c>
		return false;
   8311c:	2300      	movs	r3, #0
   8311e:	e032      	b.n	83186 <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   83120:	4b1c      	ldr	r3, [pc, #112]	; (83194 <udc_update_iface_desc+0x90>)
   83122:	681b      	ldr	r3, [r3, #0]
   83124:	681b      	ldr	r3, [r3, #0]
   83126:	791b      	ldrb	r3, [r3, #4]
   83128:	79fa      	ldrb	r2, [r7, #7]
   8312a:	429a      	cmp	r2, r3
   8312c:	d301      	bcc.n	83132 <udc_update_iface_desc+0x2e>
		return false;
   8312e:	2300      	movs	r3, #0
   83130:	e029      	b.n	83186 <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
   83132:	4b18      	ldr	r3, [pc, #96]	; (83194 <udc_update_iface_desc+0x90>)
   83134:	681b      	ldr	r3, [r3, #0]
   83136:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   83138:	4a17      	ldr	r2, [pc, #92]	; (83198 <udc_update_iface_desc+0x94>)
   8313a:	6013      	str	r3, [r2, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   8313c:	4b17      	ldr	r3, [pc, #92]	; (8319c <udc_update_iface_desc+0x98>)
   8313e:	4798      	blx	r3
   83140:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
   83142:	e01a      	b.n	8317a <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   83144:	4b14      	ldr	r3, [pc, #80]	; (83198 <udc_update_iface_desc+0x94>)
   83146:	681b      	ldr	r3, [r3, #0]
   83148:	785b      	ldrb	r3, [r3, #1]
   8314a:	2b04      	cmp	r3, #4
   8314c:	d10d      	bne.n	8316a <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   8314e:	4b12      	ldr	r3, [pc, #72]	; (83198 <udc_update_iface_desc+0x94>)
   83150:	681b      	ldr	r3, [r3, #0]
   83152:	789b      	ldrb	r3, [r3, #2]
   83154:	79fa      	ldrb	r2, [r7, #7]
   83156:	429a      	cmp	r2, r3
   83158:	d107      	bne.n	8316a <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
   8315a:	4b0f      	ldr	r3, [pc, #60]	; (83198 <udc_update_iface_desc+0x94>)
   8315c:	681b      	ldr	r3, [r3, #0]
   8315e:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   83160:	79ba      	ldrb	r2, [r7, #6]
   83162:	429a      	cmp	r2, r3
   83164:	d101      	bne.n	8316a <udc_update_iface_desc+0x66>
				return true; // Interface found
   83166:	2301      	movs	r3, #1
   83168:	e00d      	b.n	83186 <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   8316a:	4b0b      	ldr	r3, [pc, #44]	; (83198 <udc_update_iface_desc+0x94>)
   8316c:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   8316e:	4a0a      	ldr	r2, [pc, #40]	; (83198 <udc_update_iface_desc+0x94>)
   83170:	6812      	ldr	r2, [r2, #0]
   83172:	7812      	ldrb	r2, [r2, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   83174:	4413      	add	r3, r2
   83176:	4a08      	ldr	r2, [pc, #32]	; (83198 <udc_update_iface_desc+0x94>)
   83178:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   8317a:	4b07      	ldr	r3, [pc, #28]	; (83198 <udc_update_iface_desc+0x94>)
   8317c:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
   8317e:	68fa      	ldr	r2, [r7, #12]
   83180:	429a      	cmp	r2, r3
   83182:	d8df      	bhi.n	83144 <udc_update_iface_desc+0x40>
	}
	return false; // Interface not found
   83184:	2300      	movs	r3, #0
}
   83186:	4618      	mov	r0, r3
   83188:	3710      	adds	r7, #16
   8318a:	46bd      	mov	sp, r7
   8318c:	bd80      	pop	{r7, pc}
   8318e:	bf00      	nop
   83190:	20000c3c 	.word	0x20000c3c
   83194:	20000c40 	.word	0x20000c40
   83198:	20000c44 	.word	0x20000c44
   8319c:	00083085 	.word	0x00083085

000831a0 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   831a0:	b580      	push	{r7, lr}
   831a2:	b084      	sub	sp, #16
   831a4:	af00      	add	r7, sp, #0
   831a6:	4603      	mov	r3, r0
   831a8:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   831aa:	79fb      	ldrb	r3, [r7, #7]
   831ac:	2100      	movs	r1, #0
   831ae:	4618      	mov	r0, r3
   831b0:	4b1e      	ldr	r3, [pc, #120]	; (8322c <udc_iface_disable+0x8c>)
   831b2:	4798      	blx	r3
   831b4:	4603      	mov	r3, r0
   831b6:	f083 0301 	eor.w	r3, r3, #1
   831ba:	b2db      	uxtb	r3, r3
   831bc:	2b00      	cmp	r3, #0
   831be:	d001      	beq.n	831c4 <udc_iface_disable+0x24>
		return false;
   831c0:	2300      	movs	r3, #0
   831c2:	e02f      	b.n	83224 <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   831c4:	4b1a      	ldr	r3, [pc, #104]	; (83230 <udc_iface_disable+0x90>)
   831c6:	681b      	ldr	r3, [r3, #0]
   831c8:	685a      	ldr	r2, [r3, #4]
   831ca:	79fb      	ldrb	r3, [r7, #7]
   831cc:	009b      	lsls	r3, r3, #2
   831ce:	4413      	add	r3, r2
   831d0:	681b      	ldr	r3, [r3, #0]
   831d2:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   831d4:	68bb      	ldr	r3, [r7, #8]
   831d6:	68db      	ldr	r3, [r3, #12]
   831d8:	4798      	blx	r3
   831da:	4603      	mov	r3, r0
   831dc:	461a      	mov	r2, r3
   831de:	79fb      	ldrb	r3, [r7, #7]
   831e0:	4611      	mov	r1, r2
   831e2:	4618      	mov	r0, r3
   831e4:	4b11      	ldr	r3, [pc, #68]	; (8322c <udc_iface_disable+0x8c>)
   831e6:	4798      	blx	r3
   831e8:	4603      	mov	r3, r0
   831ea:	f083 0301 	eor.w	r3, r3, #1
   831ee:	b2db      	uxtb	r3, r3
   831f0:	2b00      	cmp	r3, #0
   831f2:	d001      	beq.n	831f8 <udc_iface_disable+0x58>
		return false;
   831f4:	2300      	movs	r3, #0
   831f6:	e015      	b.n	83224 <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   831f8:	4b0e      	ldr	r3, [pc, #56]	; (83234 <udc_iface_disable+0x94>)
   831fa:	681b      	ldr	r3, [r3, #0]
   831fc:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   831fe:	2105      	movs	r1, #5
   83200:	68f8      	ldr	r0, [r7, #12]
   83202:	4b0d      	ldr	r3, [pc, #52]	; (83238 <udc_iface_disable+0x98>)
   83204:	4798      	blx	r3
   83206:	60f8      	str	r0, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   83208:	68fb      	ldr	r3, [r7, #12]
   8320a:	2b00      	cmp	r3, #0
   8320c:	d005      	beq.n	8321a <udc_iface_disable+0x7a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   8320e:	68fb      	ldr	r3, [r7, #12]
   83210:	789b      	ldrb	r3, [r3, #2]
   83212:	4618      	mov	r0, r3
   83214:	4b09      	ldr	r3, [pc, #36]	; (8323c <udc_iface_disable+0x9c>)
   83216:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   83218:	e7f1      	b.n	831fe <udc_iface_disable+0x5e>
				break;
   8321a:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
   8321c:	68bb      	ldr	r3, [r7, #8]
   8321e:	685b      	ldr	r3, [r3, #4]
   83220:	4798      	blx	r3
	return true;
   83222:	2301      	movs	r3, #1
}
   83224:	4618      	mov	r0, r3
   83226:	3710      	adds	r7, #16
   83228:	46bd      	mov	sp, r7
   8322a:	bd80      	pop	{r7, pc}
   8322c:	00083105 	.word	0x00083105
   83230:	20000c40 	.word	0x20000c40
   83234:	20000c44 	.word	0x20000c44
   83238:	000830a9 	.word	0x000830a9
   8323c:	00080fbd 	.word	0x00080fbd

00083240 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   83240:	b580      	push	{r7, lr}
   83242:	b084      	sub	sp, #16
   83244:	af00      	add	r7, sp, #0
   83246:	4603      	mov	r3, r0
   83248:	460a      	mov	r2, r1
   8324a:	71fb      	strb	r3, [r7, #7]
   8324c:	4613      	mov	r3, r2
   8324e:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   83250:	79ba      	ldrb	r2, [r7, #6]
   83252:	79fb      	ldrb	r3, [r7, #7]
   83254:	4611      	mov	r1, r2
   83256:	4618      	mov	r0, r3
   83258:	4b1a      	ldr	r3, [pc, #104]	; (832c4 <udc_iface_enable+0x84>)
   8325a:	4798      	blx	r3
   8325c:	4603      	mov	r3, r0
   8325e:	f083 0301 	eor.w	r3, r3, #1
   83262:	b2db      	uxtb	r3, r3
   83264:	2b00      	cmp	r3, #0
   83266:	d001      	beq.n	8326c <udc_iface_enable+0x2c>
		return false;
   83268:	2300      	movs	r3, #0
   8326a:	e027      	b.n	832bc <udc_iface_enable+0x7c>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   8326c:	4b16      	ldr	r3, [pc, #88]	; (832c8 <udc_iface_enable+0x88>)
   8326e:	681b      	ldr	r3, [r3, #0]
   83270:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   83272:	2105      	movs	r1, #5
   83274:	68f8      	ldr	r0, [r7, #12]
   83276:	4b15      	ldr	r3, [pc, #84]	; (832cc <udc_iface_enable+0x8c>)
   83278:	4798      	blx	r3
   8327a:	60f8      	str	r0, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   8327c:	68fb      	ldr	r3, [r7, #12]
   8327e:	2b00      	cmp	r3, #0
   83280:	d011      	beq.n	832a6 <udc_iface_enable+0x66>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   83282:	68fb      	ldr	r3, [r7, #12]
   83284:	7898      	ldrb	r0, [r3, #2]
   83286:	68fb      	ldr	r3, [r7, #12]
   83288:	78d9      	ldrb	r1, [r3, #3]
   8328a:	68fb      	ldr	r3, [r7, #12]
   8328c:	889b      	ldrh	r3, [r3, #4]
   8328e:	b29b      	uxth	r3, r3
   83290:	461a      	mov	r2, r3
   83292:	4b0f      	ldr	r3, [pc, #60]	; (832d0 <udc_iface_enable+0x90>)
   83294:	4798      	blx	r3
   83296:	4603      	mov	r3, r0
   83298:	f083 0301 	eor.w	r3, r3, #1
   8329c:	b2db      	uxtb	r3, r3
   8329e:	2b00      	cmp	r3, #0
   832a0:	d0e7      	beq.n	83272 <udc_iface_enable+0x32>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
   832a2:	2300      	movs	r3, #0
   832a4:	e00a      	b.n	832bc <udc_iface_enable+0x7c>
			break;
   832a6:	bf00      	nop
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   832a8:	4b0a      	ldr	r3, [pc, #40]	; (832d4 <udc_iface_enable+0x94>)
   832aa:	681b      	ldr	r3, [r3, #0]
   832ac:	685a      	ldr	r2, [r3, #4]
   832ae:	79fb      	ldrb	r3, [r7, #7]
   832b0:	009b      	lsls	r3, r3, #2
   832b2:	4413      	add	r3, r2
   832b4:	681b      	ldr	r3, [r3, #0]
   832b6:	681b      	ldr	r3, [r3, #0]
   832b8:	4798      	blx	r3
   832ba:	4603      	mov	r3, r0
}
   832bc:	4618      	mov	r0, r3
   832be:	3710      	adds	r7, #16
   832c0:	46bd      	mov	sp, r7
   832c2:	bd80      	pop	{r7, pc}
   832c4:	00083105 	.word	0x00083105
   832c8:	20000c44 	.word	0x20000c44
   832cc:	000830a9 	.word	0x000830a9
   832d0:	00080c09 	.word	0x00080c09
   832d4:	20000c40 	.word	0x20000c40

000832d8 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   832d8:	b580      	push	{r7, lr}
   832da:	b082      	sub	sp, #8
   832dc:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   832de:	4b0f      	ldr	r3, [pc, #60]	; (8331c <udc_reset+0x44>)
   832e0:	781b      	ldrb	r3, [r3, #0]
   832e2:	2b00      	cmp	r3, #0
   832e4:	d010      	beq.n	83308 <udc_reset+0x30>
		for (iface_num = 0;
   832e6:	2300      	movs	r3, #0
   832e8:	71fb      	strb	r3, [r7, #7]
   832ea:	e006      	b.n	832fa <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   832ec:	79fb      	ldrb	r3, [r7, #7]
   832ee:	4618      	mov	r0, r3
   832f0:	4b0b      	ldr	r3, [pc, #44]	; (83320 <udc_reset+0x48>)
   832f2:	4798      	blx	r3
				iface_num++) {
   832f4:	79fb      	ldrb	r3, [r7, #7]
   832f6:	3301      	adds	r3, #1
   832f8:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   832fa:	4b0a      	ldr	r3, [pc, #40]	; (83324 <udc_reset+0x4c>)
   832fc:	681b      	ldr	r3, [r3, #0]
   832fe:	681b      	ldr	r3, [r3, #0]
   83300:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   83302:	79fa      	ldrb	r2, [r7, #7]
   83304:	429a      	cmp	r2, r3
   83306:	d3f1      	bcc.n	832ec <udc_reset+0x14>
		}
	}
	udc_num_configuration = 0;
   83308:	4b04      	ldr	r3, [pc, #16]	; (8331c <udc_reset+0x44>)
   8330a:	2200      	movs	r2, #0
   8330c:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   8330e:	4b06      	ldr	r3, [pc, #24]	; (83328 <udc_reset+0x50>)
   83310:	2200      	movs	r2, #0
   83312:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
   83314:	bf00      	nop
   83316:	3708      	adds	r7, #8
   83318:	46bd      	mov	sp, r7
   8331a:	bd80      	pop	{r7, pc}
   8331c:	20000c3c 	.word	0x20000c3c
   83320:	000831a1 	.word	0x000831a1
   83324:	20000c40 	.word	0x20000c40
   83328:	20000c3a 	.word	0x20000c3a

0008332c <udc_sof_notify>:

void udc_sof_notify(void)
{
   8332c:	b580      	push	{r7, lr}
   8332e:	b082      	sub	sp, #8
   83330:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   83332:	4b14      	ldr	r3, [pc, #80]	; (83384 <udc_sof_notify+0x58>)
   83334:	781b      	ldrb	r3, [r3, #0]
   83336:	2b00      	cmp	r3, #0
   83338:	d01f      	beq.n	8337a <udc_sof_notify+0x4e>
		for (iface_num = 0;
   8333a:	2300      	movs	r3, #0
   8333c:	71fb      	strb	r3, [r7, #7]
   8333e:	e015      	b.n	8336c <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   83340:	4b11      	ldr	r3, [pc, #68]	; (83388 <udc_sof_notify+0x5c>)
   83342:	681b      	ldr	r3, [r3, #0]
   83344:	685a      	ldr	r2, [r3, #4]
   83346:	79fb      	ldrb	r3, [r7, #7]
   83348:	009b      	lsls	r3, r3, #2
   8334a:	4413      	add	r3, r2
   8334c:	681b      	ldr	r3, [r3, #0]
   8334e:	691b      	ldr	r3, [r3, #16]
   83350:	2b00      	cmp	r3, #0
   83352:	d008      	beq.n	83366 <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   83354:	4b0c      	ldr	r3, [pc, #48]	; (83388 <udc_sof_notify+0x5c>)
   83356:	681b      	ldr	r3, [r3, #0]
   83358:	685a      	ldr	r2, [r3, #4]
   8335a:	79fb      	ldrb	r3, [r7, #7]
   8335c:	009b      	lsls	r3, r3, #2
   8335e:	4413      	add	r3, r2
   83360:	681b      	ldr	r3, [r3, #0]
   83362:	691b      	ldr	r3, [r3, #16]
   83364:	4798      	blx	r3
				iface_num++) {
   83366:	79fb      	ldrb	r3, [r7, #7]
   83368:	3301      	adds	r3, #1
   8336a:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8336c:	4b06      	ldr	r3, [pc, #24]	; (83388 <udc_sof_notify+0x5c>)
   8336e:	681b      	ldr	r3, [r3, #0]
   83370:	681b      	ldr	r3, [r3, #0]
   83372:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   83374:	79fa      	ldrb	r2, [r7, #7]
   83376:	429a      	cmp	r2, r3
   83378:	d3e2      	bcc.n	83340 <udc_sof_notify+0x14>
			}
		}
	}
}
   8337a:	bf00      	nop
   8337c:	3708      	adds	r7, #8
   8337e:	46bd      	mov	sp, r7
   83380:	bd80      	pop	{r7, pc}
   83382:	bf00      	nop
   83384:	20000c3c 	.word	0x20000c3c
   83388:	20000c40 	.word	0x20000c40

0008338c <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
   8338c:	b580      	push	{r7, lr}
   8338e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   83390:	4b06      	ldr	r3, [pc, #24]	; (833ac <udc_req_std_dev_get_status+0x20>)
   83392:	88db      	ldrh	r3, [r3, #6]
   83394:	2b02      	cmp	r3, #2
   83396:	d001      	beq.n	8339c <udc_req_std_dev_get_status+0x10>
		return false;
   83398:	2300      	movs	r3, #0
   8339a:	e004      	b.n	833a6 <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   8339c:	2102      	movs	r1, #2
   8339e:	4804      	ldr	r0, [pc, #16]	; (833b0 <udc_req_std_dev_get_status+0x24>)
   833a0:	4b04      	ldr	r3, [pc, #16]	; (833b4 <udc_req_std_dev_get_status+0x28>)
   833a2:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   833a4:	2301      	movs	r3, #1
}
   833a6:	4618      	mov	r0, r3
   833a8:	bd80      	pop	{r7, pc}
   833aa:	bf00      	nop
   833ac:	20000c4c 	.word	0x20000c4c
   833b0:	20000c3a 	.word	0x20000c3a
   833b4:	00080be1 	.word	0x00080be1

000833b8 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
   833b8:	b580      	push	{r7, lr}
   833ba:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   833bc:	4b0b      	ldr	r3, [pc, #44]	; (833ec <udc_req_std_ep_get_status+0x34>)
   833be:	88db      	ldrh	r3, [r3, #6]
   833c0:	2b02      	cmp	r3, #2
   833c2:	d001      	beq.n	833c8 <udc_req_std_ep_get_status+0x10>
		return false;
   833c4:	2300      	movs	r3, #0
   833c6:	e00e      	b.n	833e6 <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   833c8:	4b08      	ldr	r3, [pc, #32]	; (833ec <udc_req_std_ep_get_status+0x34>)
   833ca:	889b      	ldrh	r3, [r3, #4]
   833cc:	b2db      	uxtb	r3, r3
   833ce:	4618      	mov	r0, r3
   833d0:	4b07      	ldr	r3, [pc, #28]	; (833f0 <udc_req_std_ep_get_status+0x38>)
   833d2:	4798      	blx	r3
   833d4:	4603      	mov	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   833d6:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   833d8:	4b06      	ldr	r3, [pc, #24]	; (833f4 <udc_req_std_ep_get_status+0x3c>)
   833da:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   833dc:	2102      	movs	r1, #2
   833de:	4805      	ldr	r0, [pc, #20]	; (833f4 <udc_req_std_ep_get_status+0x3c>)
   833e0:	4b05      	ldr	r3, [pc, #20]	; (833f8 <udc_req_std_ep_get_status+0x40>)
   833e2:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
   833e4:	2301      	movs	r3, #1
}
   833e6:	4618      	mov	r0, r3
   833e8:	bd80      	pop	{r7, pc}
   833ea:	bf00      	nop
   833ec:	20000c4c 	.word	0x20000c4c
   833f0:	0008103d 	.word	0x0008103d
   833f4:	20000c48 	.word	0x20000c48
   833f8:	00080be1 	.word	0x00080be1

000833fc <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
   833fc:	b480      	push	{r7}
   833fe:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83400:	4b0b      	ldr	r3, [pc, #44]	; (83430 <udc_req_std_dev_clear_feature+0x34>)
   83402:	88db      	ldrh	r3, [r3, #6]
   83404:	2b00      	cmp	r3, #0
   83406:	d001      	beq.n	8340c <udc_req_std_dev_clear_feature+0x10>
		return false;
   83408:	2300      	movs	r3, #0
   8340a:	e00d      	b.n	83428 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   8340c:	4b08      	ldr	r3, [pc, #32]	; (83430 <udc_req_std_dev_clear_feature+0x34>)
   8340e:	885b      	ldrh	r3, [r3, #2]
   83410:	2b01      	cmp	r3, #1
   83412:	d108      	bne.n	83426 <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   83414:	4b07      	ldr	r3, [pc, #28]	; (83434 <udc_req_std_dev_clear_feature+0x38>)
   83416:	881b      	ldrh	r3, [r3, #0]
   83418:	f023 0302 	bic.w	r3, r3, #2
   8341c:	b29a      	uxth	r2, r3
   8341e:	4b05      	ldr	r3, [pc, #20]	; (83434 <udc_req_std_dev_clear_feature+0x38>)
   83420:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   83422:	2301      	movs	r3, #1
   83424:	e000      	b.n	83428 <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
   83426:	2300      	movs	r3, #0
}
   83428:	4618      	mov	r0, r3
   8342a:	46bd      	mov	sp, r7
   8342c:	bc80      	pop	{r7}
   8342e:	4770      	bx	lr
   83430:	20000c4c 	.word	0x20000c4c
   83434:	20000c3a 	.word	0x20000c3a

00083438 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
   83438:	b580      	push	{r7, lr}
   8343a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   8343c:	4b0a      	ldr	r3, [pc, #40]	; (83468 <udc_req_std_ep_clear_feature+0x30>)
   8343e:	88db      	ldrh	r3, [r3, #6]
   83440:	2b00      	cmp	r3, #0
   83442:	d001      	beq.n	83448 <udc_req_std_ep_clear_feature+0x10>
		return false;
   83444:	2300      	movs	r3, #0
   83446:	e00c      	b.n	83462 <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   83448:	4b07      	ldr	r3, [pc, #28]	; (83468 <udc_req_std_ep_clear_feature+0x30>)
   8344a:	885b      	ldrh	r3, [r3, #2]
   8344c:	2b00      	cmp	r3, #0
   8344e:	d107      	bne.n	83460 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   83450:	4b05      	ldr	r3, [pc, #20]	; (83468 <udc_req_std_ep_clear_feature+0x30>)
   83452:	889b      	ldrh	r3, [r3, #4]
   83454:	b2db      	uxtb	r3, r3
   83456:	4618      	mov	r0, r3
   83458:	4b04      	ldr	r3, [pc, #16]	; (8346c <udc_req_std_ep_clear_feature+0x34>)
   8345a:	4798      	blx	r3
   8345c:	4603      	mov	r3, r0
   8345e:	e000      	b.n	83462 <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
   83460:	2300      	movs	r3, #0
}
   83462:	4618      	mov	r0, r3
   83464:	bd80      	pop	{r7, pc}
   83466:	bf00      	nop
   83468:	20000c4c 	.word	0x20000c4c
   8346c:	000811b9 	.word	0x000811b9

00083470 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
   83470:	b580      	push	{r7, lr}
   83472:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83474:	4b26      	ldr	r3, [pc, #152]	; (83510 <udc_req_std_dev_set_feature+0xa0>)
   83476:	88db      	ldrh	r3, [r3, #6]
   83478:	2b00      	cmp	r3, #0
   8347a:	d001      	beq.n	83480 <udc_req_std_dev_set_feature+0x10>
		return false;
   8347c:	2300      	movs	r3, #0
   8347e:	e045      	b.n	8350c <udc_req_std_dev_set_feature+0x9c>
	}

	switch (udd_g_ctrlreq.req.wValue) {
   83480:	4b23      	ldr	r3, [pc, #140]	; (83510 <udc_req_std_dev_set_feature+0xa0>)
   83482:	885b      	ldrh	r3, [r3, #2]
   83484:	2b01      	cmp	r3, #1
   83486:	d002      	beq.n	8348e <udc_req_std_dev_set_feature+0x1e>
   83488:	2b02      	cmp	r3, #2
   8348a:	d002      	beq.n	83492 <udc_req_std_dev_set_feature+0x22>
			break;
		}
		break;
#endif
	default:
		break;
   8348c:	e03d      	b.n	8350a <udc_req_std_dev_set_feature+0x9a>
		return false;
   8348e:	2300      	movs	r3, #0
   83490:	e03c      	b.n	8350c <udc_req_std_dev_set_feature+0x9c>
		if (!udd_is_high_speed()) {
   83492:	4b20      	ldr	r3, [pc, #128]	; (83514 <udc_req_std_dev_set_feature+0xa4>)
   83494:	4798      	blx	r3
   83496:	4603      	mov	r3, r0
   83498:	f083 0301 	eor.w	r3, r3, #1
   8349c:	b2db      	uxtb	r3, r3
   8349e:	2b00      	cmp	r3, #0
   834a0:	d130      	bne.n	83504 <udc_req_std_dev_set_feature+0x94>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   834a2:	4b1b      	ldr	r3, [pc, #108]	; (83510 <udc_req_std_dev_set_feature+0xa0>)
   834a4:	889b      	ldrh	r3, [r3, #4]
   834a6:	b2db      	uxtb	r3, r3
   834a8:	2b00      	cmp	r3, #0
   834aa:	d12d      	bne.n	83508 <udc_req_std_dev_set_feature+0x98>
		udc_reset();
   834ac:	4b1a      	ldr	r3, [pc, #104]	; (83518 <udc_req_std_dev_set_feature+0xa8>)
   834ae:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   834b0:	4b17      	ldr	r3, [pc, #92]	; (83510 <udc_req_std_dev_set_feature+0xa0>)
   834b2:	889b      	ldrh	r3, [r3, #4]
   834b4:	0a1b      	lsrs	r3, r3, #8
   834b6:	b29b      	uxth	r3, r3
   834b8:	b2db      	uxtb	r3, r3
   834ba:	3b01      	subs	r3, #1
   834bc:	2b03      	cmp	r3, #3
   834be:	d81f      	bhi.n	83500 <udc_req_std_dev_set_feature+0x90>
   834c0:	a201      	add	r2, pc, #4	; (adr r2, 834c8 <udc_req_std_dev_set_feature+0x58>)
   834c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   834c6:	bf00      	nop
   834c8:	000834d9 	.word	0x000834d9
   834cc:	000834e3 	.word	0x000834e3
   834d0:	000834ed 	.word	0x000834ed
   834d4:	000834f7 	.word	0x000834f7
			udd_g_ctrlreq.callback = udd_test_mode_j;
   834d8:	4b0d      	ldr	r3, [pc, #52]	; (83510 <udc_req_std_dev_set_feature+0xa0>)
   834da:	4a10      	ldr	r2, [pc, #64]	; (8351c <udc_req_std_dev_set_feature+0xac>)
   834dc:	611a      	str	r2, [r3, #16]
			return true;
   834de:	2301      	movs	r3, #1
   834e0:	e014      	b.n	8350c <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   834e2:	4b0b      	ldr	r3, [pc, #44]	; (83510 <udc_req_std_dev_set_feature+0xa0>)
   834e4:	4a0e      	ldr	r2, [pc, #56]	; (83520 <udc_req_std_dev_set_feature+0xb0>)
   834e6:	611a      	str	r2, [r3, #16]
			return true;
   834e8:	2301      	movs	r3, #1
   834ea:	e00f      	b.n	8350c <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   834ec:	4b08      	ldr	r3, [pc, #32]	; (83510 <udc_req_std_dev_set_feature+0xa0>)
   834ee:	4a0d      	ldr	r2, [pc, #52]	; (83524 <udc_req_std_dev_set_feature+0xb4>)
   834f0:	611a      	str	r2, [r3, #16]
			return true;
   834f2:	2301      	movs	r3, #1
   834f4:	e00a      	b.n	8350c <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   834f6:	4b06      	ldr	r3, [pc, #24]	; (83510 <udc_req_std_dev_set_feature+0xa0>)
   834f8:	4a0b      	ldr	r2, [pc, #44]	; (83528 <udc_req_std_dev_set_feature+0xb8>)
   834fa:	611a      	str	r2, [r3, #16]
			return true;
   834fc:	2301      	movs	r3, #1
   834fe:	e005      	b.n	8350c <udc_req_std_dev_set_feature+0x9c>
			break;
   83500:	bf00      	nop
		break;
   83502:	e002      	b.n	8350a <udc_req_std_dev_set_feature+0x9a>
			break;
   83504:	bf00      	nop
   83506:	e000      	b.n	8350a <udc_req_std_dev_set_feature+0x9a>
			break;
   83508:	bf00      	nop
	}
	return false;
   8350a:	2300      	movs	r3, #0
}
   8350c:	4618      	mov	r0, r3
   8350e:	bd80      	pop	{r7, pc}
   83510:	20000c4c 	.word	0x20000c4c
   83514:	00080b3d 	.word	0x00080b3d
   83518:	000832d9 	.word	0x000832d9
   8351c:	0008147d 	.word	0x0008147d
   83520:	000814b1 	.word	0x000814b1
   83524:	000814e5 	.word	0x000814e5
   83528:	00081509 	.word	0x00081509

0008352c <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
   8352c:	b580      	push	{r7, lr}
   8352e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83530:	4b0d      	ldr	r3, [pc, #52]	; (83568 <udc_req_std_ep_set_feature+0x3c>)
   83532:	88db      	ldrh	r3, [r3, #6]
   83534:	2b00      	cmp	r3, #0
   83536:	d001      	beq.n	8353c <udc_req_std_ep_set_feature+0x10>
		return false;
   83538:	2300      	movs	r3, #0
   8353a:	e012      	b.n	83562 <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   8353c:	4b0a      	ldr	r3, [pc, #40]	; (83568 <udc_req_std_ep_set_feature+0x3c>)
   8353e:	885b      	ldrh	r3, [r3, #2]
   83540:	2b00      	cmp	r3, #0
   83542:	d10d      	bne.n	83560 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   83544:	4b08      	ldr	r3, [pc, #32]	; (83568 <udc_req_std_ep_set_feature+0x3c>)
   83546:	889b      	ldrh	r3, [r3, #4]
   83548:	b2db      	uxtb	r3, r3
   8354a:	4618      	mov	r0, r3
   8354c:	4b07      	ldr	r3, [pc, #28]	; (8356c <udc_req_std_ep_set_feature+0x40>)
   8354e:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   83550:	4b05      	ldr	r3, [pc, #20]	; (83568 <udc_req_std_ep_set_feature+0x3c>)
   83552:	889b      	ldrh	r3, [r3, #4]
   83554:	b2db      	uxtb	r3, r3
   83556:	4618      	mov	r0, r3
   83558:	4b05      	ldr	r3, [pc, #20]	; (83570 <udc_req_std_ep_set_feature+0x44>)
   8355a:	4798      	blx	r3
   8355c:	4603      	mov	r3, r0
   8355e:	e000      	b.n	83562 <udc_req_std_ep_set_feature+0x36>
	}
	return false;
   83560:	2300      	movs	r3, #0
}
   83562:	4618      	mov	r0, r3
   83564:	bd80      	pop	{r7, pc}
   83566:	bf00      	nop
   83568:	20000c4c 	.word	0x20000c4c
   8356c:	000813f5 	.word	0x000813f5
   83570:	000810a5 	.word	0x000810a5

00083574 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   83574:	b580      	push	{r7, lr}
   83576:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   83578:	4b05      	ldr	r3, [pc, #20]	; (83590 <udc_valid_address+0x1c>)
   8357a:	885b      	ldrh	r3, [r3, #2]
   8357c:	b2db      	uxtb	r3, r3
   8357e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   83582:	b2db      	uxtb	r3, r3
   83584:	4618      	mov	r0, r3
   83586:	4b03      	ldr	r3, [pc, #12]	; (83594 <udc_valid_address+0x20>)
   83588:	4798      	blx	r3
}
   8358a:	bf00      	nop
   8358c:	bd80      	pop	{r7, pc}
   8358e:	bf00      	nop
   83590:	20000c4c 	.word	0x20000c4c
   83594:	00080b61 	.word	0x00080b61

00083598 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
   83598:	b480      	push	{r7}
   8359a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   8359c:	4b06      	ldr	r3, [pc, #24]	; (835b8 <udc_req_std_dev_set_address+0x20>)
   8359e:	88db      	ldrh	r3, [r3, #6]
   835a0:	2b00      	cmp	r3, #0
   835a2:	d001      	beq.n	835a8 <udc_req_std_dev_set_address+0x10>
		return false;
   835a4:	2300      	movs	r3, #0
   835a6:	e003      	b.n	835b0 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   835a8:	4b03      	ldr	r3, [pc, #12]	; (835b8 <udc_req_std_dev_set_address+0x20>)
   835aa:	4a04      	ldr	r2, [pc, #16]	; (835bc <udc_req_std_dev_set_address+0x24>)
   835ac:	611a      	str	r2, [r3, #16]
	return true;
   835ae:	2301      	movs	r3, #1
}
   835b0:	4618      	mov	r0, r3
   835b2:	46bd      	mov	sp, r7
   835b4:	bc80      	pop	{r7}
   835b6:	4770      	bx	lr
   835b8:	20000c4c 	.word	0x20000c4c
   835bc:	00083575 	.word	0x00083575

000835c0 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
   835c0:	b580      	push	{r7, lr}
   835c2:	b084      	sub	sp, #16
   835c4:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
   835c6:	2300      	movs	r3, #0
   835c8:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   835ca:	4b29      	ldr	r3, [pc, #164]	; (83670 <udc_req_std_dev_get_str_desc+0xb0>)
   835cc:	885b      	ldrh	r3, [r3, #2]
   835ce:	b2db      	uxtb	r3, r3
   835d0:	2b03      	cmp	r3, #3
   835d2:	d820      	bhi.n	83616 <udc_req_std_dev_get_str_desc+0x56>
   835d4:	a201      	add	r2, pc, #4	; (adr r2, 835dc <udc_req_std_dev_get_str_desc+0x1c>)
   835d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   835da:	bf00      	nop
   835dc:	000835ed 	.word	0x000835ed
   835e0:	000835f7 	.word	0x000835f7
   835e4:	00083601 	.word	0x00083601
   835e8:	0008360b 	.word	0x0008360b
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   835ec:	2104      	movs	r1, #4
   835ee:	4821      	ldr	r0, [pc, #132]	; (83674 <udc_req_std_dev_get_str_desc+0xb4>)
   835f0:	4b21      	ldr	r3, [pc, #132]	; (83678 <udc_req_std_dev_get_str_desc+0xb8>)
   835f2:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
   835f4:	e011      	b.n	8361a <udc_req_std_dev_get_str_desc+0x5a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   835f6:	2315      	movs	r3, #21
   835f8:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
   835fa:	4b20      	ldr	r3, [pc, #128]	; (8367c <udc_req_std_dev_get_str_desc+0xbc>)
   835fc:	60bb      	str	r3, [r7, #8]
		break;
   835fe:	e00c      	b.n	8361a <udc_req_std_dev_get_str_desc+0x5a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   83600:	2313      	movs	r3, #19
   83602:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
   83604:	4b1e      	ldr	r3, [pc, #120]	; (83680 <udc_req_std_dev_get_str_desc+0xc0>)
   83606:	60bb      	str	r3, [r7, #8]
		break;
   83608:	e007      	b.n	8361a <udc_req_std_dev_get_str_desc+0x5a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   8360a:	2320      	movs	r3, #32
   8360c:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
   8360e:	4b1d      	ldr	r3, [pc, #116]	; (83684 <udc_req_std_dev_get_str_desc+0xc4>)
   83610:	4798      	blx	r3
   83612:	60b8      	str	r0, [r7, #8]
		break;
   83614:	e001      	b.n	8361a <udc_req_std_dev_get_str_desc+0x5a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
   83616:	2300      	movs	r3, #0
   83618:	e026      	b.n	83668 <udc_req_std_dev_get_str_desc+0xa8>
	}

	if (str_length) {
   8361a:	79fb      	ldrb	r3, [r7, #7]
   8361c:	2b00      	cmp	r3, #0
   8361e:	d022      	beq.n	83666 <udc_req_std_dev_get_str_desc+0xa6>
		for(i = 0; i < str_length; i++) {
   83620:	2300      	movs	r3, #0
   83622:	73fb      	strb	r3, [r7, #15]
   83624:	e00d      	b.n	83642 <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   83626:	7bfb      	ldrb	r3, [r7, #15]
   83628:	7bfa      	ldrb	r2, [r7, #15]
   8362a:	68b9      	ldr	r1, [r7, #8]
   8362c:	440a      	add	r2, r1
   8362e:	7812      	ldrb	r2, [r2, #0]
   83630:	b291      	uxth	r1, r2
   83632:	4a15      	ldr	r2, [pc, #84]	; (83688 <udc_req_std_dev_get_str_desc+0xc8>)
   83634:	005b      	lsls	r3, r3, #1
   83636:	4413      	add	r3, r2
   83638:	460a      	mov	r2, r1
   8363a:	805a      	strh	r2, [r3, #2]
		for(i = 0; i < str_length; i++) {
   8363c:	7bfb      	ldrb	r3, [r7, #15]
   8363e:	3301      	adds	r3, #1
   83640:	73fb      	strb	r3, [r7, #15]
   83642:	7bfa      	ldrb	r2, [r7, #15]
   83644:	79fb      	ldrb	r3, [r7, #7]
   83646:	429a      	cmp	r2, r3
   83648:	d3ed      	bcc.n	83626 <udc_req_std_dev_get_str_desc+0x66>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   8364a:	79fb      	ldrb	r3, [r7, #7]
   8364c:	3301      	adds	r3, #1
   8364e:	b2db      	uxtb	r3, r3
   83650:	005b      	lsls	r3, r3, #1
   83652:	b2da      	uxtb	r2, r3
   83654:	4b0c      	ldr	r3, [pc, #48]	; (83688 <udc_req_std_dev_get_str_desc+0xc8>)
   83656:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
   83658:	4b0b      	ldr	r3, [pc, #44]	; (83688 <udc_req_std_dev_get_str_desc+0xc8>)
   8365a:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
   8365c:	b29b      	uxth	r3, r3
   8365e:	4619      	mov	r1, r3
   83660:	4809      	ldr	r0, [pc, #36]	; (83688 <udc_req_std_dev_get_str_desc+0xc8>)
   83662:	4b05      	ldr	r3, [pc, #20]	; (83678 <udc_req_std_dev_get_str_desc+0xb8>)
   83664:	4798      	blx	r3
	}

	return true;
   83666:	2301      	movs	r3, #1
}
   83668:	4618      	mov	r0, r3
   8366a:	3710      	adds	r7, #16
   8366c:	46bd      	mov	sp, r7
   8366e:	bd80      	pop	{r7, pc}
   83670:	20000c4c 	.word	0x20000c4c
   83674:	200001ac 	.word	0x200001ac
   83678:	00080be1 	.word	0x00080be1
   8367c:	200001b0 	.word	0x200001b0
   83680:	200001c8 	.word	0x200001c8
   83684:	0008305d 	.word	0x0008305d
   83688:	200001dc 	.word	0x200001dc

0008368c <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
   8368c:	b580      	push	{r7, lr}
   8368e:	b082      	sub	sp, #8
   83690:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   83692:	4b80      	ldr	r3, [pc, #512]	; (83894 <udc_req_std_dev_get_descriptor+0x208>)
   83694:	885b      	ldrh	r3, [r3, #2]
   83696:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   83698:	4b7e      	ldr	r3, [pc, #504]	; (83894 <udc_req_std_dev_get_descriptor+0x208>)
   8369a:	885b      	ldrh	r3, [r3, #2]
   8369c:	0a1b      	lsrs	r3, r3, #8
   8369e:	b29b      	uxth	r3, r3
   836a0:	b2db      	uxtb	r3, r3
   836a2:	3b01      	subs	r3, #1
   836a4:	2b0e      	cmp	r3, #14
   836a6:	f200 80e2 	bhi.w	8386e <udc_req_std_dev_get_descriptor+0x1e2>
   836aa:	a201      	add	r2, pc, #4	; (adr r2, 836b0 <udc_req_std_dev_get_descriptor+0x24>)
   836ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   836b0:	000836ed 	.word	0x000836ed
   836b4:	00083729 	.word	0x00083729
   836b8:	0008385b 	.word	0x0008385b
   836bc:	0008386f 	.word	0x0008386f
   836c0:	0008386f 	.word	0x0008386f
   836c4:	000837a3 	.word	0x000837a3
   836c8:	000837b9 	.word	0x000837b9
   836cc:	0008386f 	.word	0x0008386f
   836d0:	0008386f 	.word	0x0008386f
   836d4:	0008386f 	.word	0x0008386f
   836d8:	0008386f 	.word	0x0008386f
   836dc:	0008386f 	.word	0x0008386f
   836e0:	0008386f 	.word	0x0008386f
   836e4:	0008386f 	.word	0x0008386f
   836e8:	00083839 	.word	0x00083839
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   836ec:	4b6a      	ldr	r3, [pc, #424]	; (83898 <udc_req_std_dev_get_descriptor+0x20c>)
   836ee:	4798      	blx	r3
   836f0:	4603      	mov	r3, r0
   836f2:	f083 0301 	eor.w	r3, r3, #1
   836f6:	b2db      	uxtb	r3, r3
   836f8:	2b00      	cmp	r3, #0
   836fa:	d00a      	beq.n	83712 <udc_req_std_dev_get_descriptor+0x86>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
   836fc:	4b67      	ldr	r3, [pc, #412]	; (8389c <udc_req_std_dev_get_descriptor+0x210>)
   836fe:	689a      	ldr	r2, [r3, #8]
				udc_config.confdev_hs->bLength);
   83700:	4b66      	ldr	r3, [pc, #408]	; (8389c <udc_req_std_dev_get_descriptor+0x210>)
   83702:	689b      	ldr	r3, [r3, #8]
   83704:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   83706:	b29b      	uxth	r3, r3
   83708:	4619      	mov	r1, r3
   8370a:	4610      	mov	r0, r2
   8370c:	4b64      	ldr	r3, [pc, #400]	; (838a0 <udc_req_std_dev_get_descriptor+0x214>)
   8370e:	4798      	blx	r3
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
   83710:	e0b0      	b.n	83874 <udc_req_std_dev_get_descriptor+0x1e8>
				(uint8_t *) udc_config.confdev_lsfs,
   83712:	4b62      	ldr	r3, [pc, #392]	; (8389c <udc_req_std_dev_get_descriptor+0x210>)
   83714:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
   83716:	4b61      	ldr	r3, [pc, #388]	; (8389c <udc_req_std_dev_get_descriptor+0x210>)
   83718:	681b      	ldr	r3, [r3, #0]
   8371a:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   8371c:	b29b      	uxth	r3, r3
   8371e:	4619      	mov	r1, r3
   83720:	4610      	mov	r0, r2
   83722:	4b5f      	ldr	r3, [pc, #380]	; (838a0 <udc_req_std_dev_get_descriptor+0x214>)
   83724:	4798      	blx	r3
		break;
   83726:	e0a5      	b.n	83874 <udc_req_std_dev_get_descriptor+0x1e8>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   83728:	4b5b      	ldr	r3, [pc, #364]	; (83898 <udc_req_std_dev_get_descriptor+0x20c>)
   8372a:	4798      	blx	r3
   8372c:	4603      	mov	r3, r0
   8372e:	2b00      	cmp	r3, #0
   83730:	d019      	beq.n	83766 <udc_req_std_dev_get_descriptor+0xda>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   83732:	4b5a      	ldr	r3, [pc, #360]	; (8389c <udc_req_std_dev_get_descriptor+0x210>)
   83734:	689b      	ldr	r3, [r3, #8]
   83736:	7c5b      	ldrb	r3, [r3, #17]
   83738:	79fa      	ldrb	r2, [r7, #7]
   8373a:	429a      	cmp	r2, r3
   8373c:	d301      	bcc.n	83742 <udc_req_std_dev_get_descriptor+0xb6>
					bNumConfigurations) {
				return false;
   8373e:	2300      	movs	r3, #0
   83740:	e0a3      	b.n	8388a <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   83742:	4b56      	ldr	r3, [pc, #344]	; (8389c <udc_req_std_dev_get_descriptor+0x210>)
   83744:	691a      	ldr	r2, [r3, #16]
   83746:	79fb      	ldrb	r3, [r7, #7]
   83748:	00db      	lsls	r3, r3, #3
   8374a:	4413      	add	r3, r2
   8374c:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   8374e:	4b53      	ldr	r3, [pc, #332]	; (8389c <udc_req_std_dev_get_descriptor+0x210>)
   83750:	691a      	ldr	r2, [r3, #16]
   83752:	79fb      	ldrb	r3, [r7, #7]
   83754:	00db      	lsls	r3, r3, #3
   83756:	4413      	add	r3, r2
   83758:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   8375a:	885b      	ldrh	r3, [r3, #2]
   8375c:	b29b      	uxth	r3, r3
   8375e:	4619      	mov	r1, r3
   83760:	4b4f      	ldr	r3, [pc, #316]	; (838a0 <udc_req_std_dev_get_descriptor+0x214>)
   83762:	4798      	blx	r3
   83764:	e018      	b.n	83798 <udc_req_std_dev_get_descriptor+0x10c>
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   83766:	4b4d      	ldr	r3, [pc, #308]	; (8389c <udc_req_std_dev_get_descriptor+0x210>)
   83768:	681b      	ldr	r3, [r3, #0]
   8376a:	7c5b      	ldrb	r3, [r3, #17]
   8376c:	79fa      	ldrb	r2, [r7, #7]
   8376e:	429a      	cmp	r2, r3
   83770:	d301      	bcc.n	83776 <udc_req_std_dev_get_descriptor+0xea>
					bNumConfigurations) {
				return false;
   83772:	2300      	movs	r3, #0
   83774:	e089      	b.n	8388a <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   83776:	4b49      	ldr	r3, [pc, #292]	; (8389c <udc_req_std_dev_get_descriptor+0x210>)
   83778:	685a      	ldr	r2, [r3, #4]
   8377a:	79fb      	ldrb	r3, [r7, #7]
   8377c:	00db      	lsls	r3, r3, #3
   8377e:	4413      	add	r3, r2
   83780:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   83782:	4b46      	ldr	r3, [pc, #280]	; (8389c <udc_req_std_dev_get_descriptor+0x210>)
   83784:	685a      	ldr	r2, [r3, #4]
   83786:	79fb      	ldrb	r3, [r7, #7]
   83788:	00db      	lsls	r3, r3, #3
   8378a:	4413      	add	r3, r2
   8378c:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   8378e:	885b      	ldrh	r3, [r3, #2]
   83790:	b29b      	uxth	r3, r3
   83792:	4619      	mov	r1, r3
   83794:	4b42      	ldr	r3, [pc, #264]	; (838a0 <udc_req_std_dev_get_descriptor+0x214>)
   83796:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   83798:	4b3e      	ldr	r3, [pc, #248]	; (83894 <udc_req_std_dev_get_descriptor+0x208>)
   8379a:	689b      	ldr	r3, [r3, #8]
   8379c:	2202      	movs	r2, #2
   8379e:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
   837a0:	e068      	b.n	83874 <udc_req_std_dev_get_descriptor+0x1e8>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   837a2:	4b3e      	ldr	r3, [pc, #248]	; (8389c <udc_req_std_dev_get_descriptor+0x210>)
   837a4:	68da      	ldr	r2, [r3, #12]
				udc_config.qualifier->bLength);
   837a6:	4b3d      	ldr	r3, [pc, #244]	; (8389c <udc_req_std_dev_get_descriptor+0x210>)
   837a8:	68db      	ldr	r3, [r3, #12]
   837aa:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   837ac:	b29b      	uxth	r3, r3
   837ae:	4619      	mov	r1, r3
   837b0:	4610      	mov	r0, r2
   837b2:	4b3b      	ldr	r3, [pc, #236]	; (838a0 <udc_req_std_dev_get_descriptor+0x214>)
   837b4:	4798      	blx	r3
		break;
   837b6:	e05d      	b.n	83874 <udc_req_std_dev_get_descriptor+0x1e8>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   837b8:	4b37      	ldr	r3, [pc, #220]	; (83898 <udc_req_std_dev_get_descriptor+0x20c>)
   837ba:	4798      	blx	r3
   837bc:	4603      	mov	r3, r0
   837be:	f083 0301 	eor.w	r3, r3, #1
   837c2:	b2db      	uxtb	r3, r3
   837c4:	2b00      	cmp	r3, #0
   837c6:	d019      	beq.n	837fc <udc_req_std_dev_get_descriptor+0x170>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   837c8:	4b34      	ldr	r3, [pc, #208]	; (8389c <udc_req_std_dev_get_descriptor+0x210>)
   837ca:	689b      	ldr	r3, [r3, #8]
   837cc:	7c5b      	ldrb	r3, [r3, #17]
   837ce:	79fa      	ldrb	r2, [r7, #7]
   837d0:	429a      	cmp	r2, r3
   837d2:	d301      	bcc.n	837d8 <udc_req_std_dev_get_descriptor+0x14c>
					bNumConfigurations) {
				return false;
   837d4:	2300      	movs	r3, #0
   837d6:	e058      	b.n	8388a <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   837d8:	4b30      	ldr	r3, [pc, #192]	; (8389c <udc_req_std_dev_get_descriptor+0x210>)
   837da:	691a      	ldr	r2, [r3, #16]
   837dc:	79fb      	ldrb	r3, [r7, #7]
   837de:	00db      	lsls	r3, r3, #3
   837e0:	4413      	add	r3, r2
   837e2:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   837e4:	4b2d      	ldr	r3, [pc, #180]	; (8389c <udc_req_std_dev_get_descriptor+0x210>)
   837e6:	691a      	ldr	r2, [r3, #16]
   837e8:	79fb      	ldrb	r3, [r7, #7]
   837ea:	00db      	lsls	r3, r3, #3
   837ec:	4413      	add	r3, r2
   837ee:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   837f0:	885b      	ldrh	r3, [r3, #2]
   837f2:	b29b      	uxth	r3, r3
   837f4:	4619      	mov	r1, r3
   837f6:	4b2a      	ldr	r3, [pc, #168]	; (838a0 <udc_req_std_dev_get_descriptor+0x214>)
   837f8:	4798      	blx	r3
   837fa:	e018      	b.n	8382e <udc_req_std_dev_get_descriptor+0x1a2>
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   837fc:	4b27      	ldr	r3, [pc, #156]	; (8389c <udc_req_std_dev_get_descriptor+0x210>)
   837fe:	681b      	ldr	r3, [r3, #0]
   83800:	7c5b      	ldrb	r3, [r3, #17]
   83802:	79fa      	ldrb	r2, [r7, #7]
   83804:	429a      	cmp	r2, r3
   83806:	d301      	bcc.n	8380c <udc_req_std_dev_get_descriptor+0x180>
					bNumConfigurations) {
				return false;
   83808:	2300      	movs	r3, #0
   8380a:	e03e      	b.n	8388a <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   8380c:	4b23      	ldr	r3, [pc, #140]	; (8389c <udc_req_std_dev_get_descriptor+0x210>)
   8380e:	685a      	ldr	r2, [r3, #4]
   83810:	79fb      	ldrb	r3, [r7, #7]
   83812:	00db      	lsls	r3, r3, #3
   83814:	4413      	add	r3, r2
   83816:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   83818:	4b20      	ldr	r3, [pc, #128]	; (8389c <udc_req_std_dev_get_descriptor+0x210>)
   8381a:	685a      	ldr	r2, [r3, #4]
   8381c:	79fb      	ldrb	r3, [r7, #7]
   8381e:	00db      	lsls	r3, r3, #3
   83820:	4413      	add	r3, r2
   83822:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   83824:	885b      	ldrh	r3, [r3, #2]
   83826:	b29b      	uxth	r3, r3
   83828:	4619      	mov	r1, r3
   8382a:	4b1d      	ldr	r3, [pc, #116]	; (838a0 <udc_req_std_dev_get_descriptor+0x214>)
   8382c:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   8382e:	4b19      	ldr	r3, [pc, #100]	; (83894 <udc_req_std_dev_get_descriptor+0x208>)
   83830:	689b      	ldr	r3, [r3, #8]
   83832:	2207      	movs	r2, #7
   83834:	705a      	strb	r2, [r3, #1]
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
   83836:	e01d      	b.n	83874 <udc_req_std_dev_get_descriptor+0x1e8>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
   83838:	4b18      	ldr	r3, [pc, #96]	; (8389c <udc_req_std_dev_get_descriptor+0x210>)
   8383a:	695b      	ldr	r3, [r3, #20]
   8383c:	2b00      	cmp	r3, #0
   8383e:	d101      	bne.n	83844 <udc_req_std_dev_get_descriptor+0x1b8>
			return false;
   83840:	2300      	movs	r3, #0
   83842:	e022      	b.n	8388a <udc_req_std_dev_get_descriptor+0x1fe>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   83844:	4b15      	ldr	r3, [pc, #84]	; (8389c <udc_req_std_dev_get_descriptor+0x210>)
   83846:	695a      	ldr	r2, [r3, #20]
				udc_config.conf_bos->wTotalLength);
   83848:	4b14      	ldr	r3, [pc, #80]	; (8389c <udc_req_std_dev_get_descriptor+0x210>)
   8384a:	695b      	ldr	r3, [r3, #20]
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   8384c:	885b      	ldrh	r3, [r3, #2]
   8384e:	b29b      	uxth	r3, r3
   83850:	4619      	mov	r1, r3
   83852:	4610      	mov	r0, r2
   83854:	4b12      	ldr	r3, [pc, #72]	; (838a0 <udc_req_std_dev_get_descriptor+0x214>)
   83856:	4798      	blx	r3
		break;
   83858:	e00c      	b.n	83874 <udc_req_std_dev_get_descriptor+0x1e8>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
   8385a:	4b12      	ldr	r3, [pc, #72]	; (838a4 <udc_req_std_dev_get_descriptor+0x218>)
   8385c:	4798      	blx	r3
   8385e:	4603      	mov	r3, r0
   83860:	f083 0301 	eor.w	r3, r3, #1
   83864:	b2db      	uxtb	r3, r3
   83866:	2b00      	cmp	r3, #0
   83868:	d003      	beq.n	83872 <udc_req_std_dev_get_descriptor+0x1e6>
			return false;
   8386a:	2300      	movs	r3, #0
   8386c:	e00d      	b.n	8388a <udc_req_std_dev_get_descriptor+0x1fe>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   8386e:	2300      	movs	r3, #0
   83870:	e00b      	b.n	8388a <udc_req_std_dev_get_descriptor+0x1fe>
		break;
   83872:	bf00      	nop
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   83874:	4b07      	ldr	r3, [pc, #28]	; (83894 <udc_req_std_dev_get_descriptor+0x208>)
   83876:	88da      	ldrh	r2, [r3, #6]
   83878:	4b06      	ldr	r3, [pc, #24]	; (83894 <udc_req_std_dev_get_descriptor+0x208>)
   8387a:	899b      	ldrh	r3, [r3, #12]
   8387c:	429a      	cmp	r2, r3
   8387e:	d203      	bcs.n	83888 <udc_req_std_dev_get_descriptor+0x1fc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   83880:	4b04      	ldr	r3, [pc, #16]	; (83894 <udc_req_std_dev_get_descriptor+0x208>)
   83882:	88da      	ldrh	r2, [r3, #6]
   83884:	4b03      	ldr	r3, [pc, #12]	; (83894 <udc_req_std_dev_get_descriptor+0x208>)
   83886:	819a      	strh	r2, [r3, #12]
	}
	return true;
   83888:	2301      	movs	r3, #1
}
   8388a:	4618      	mov	r0, r3
   8388c:	3708      	adds	r7, #8
   8388e:	46bd      	mov	sp, r7
   83890:	bd80      	pop	{r7, pc}
   83892:	bf00      	nop
   83894:	20000c4c 	.word	0x20000c4c
   83898:	00080b3d 	.word	0x00080b3d
   8389c:	20000294 	.word	0x20000294
   838a0:	00080be1 	.word	0x00080be1
   838a4:	000835c1 	.word	0x000835c1

000838a8 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
   838a8:	b580      	push	{r7, lr}
   838aa:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
   838ac:	4b06      	ldr	r3, [pc, #24]	; (838c8 <udc_req_std_dev_get_configuration+0x20>)
   838ae:	88db      	ldrh	r3, [r3, #6]
   838b0:	2b01      	cmp	r3, #1
   838b2:	d001      	beq.n	838b8 <udc_req_std_dev_get_configuration+0x10>
		return false;
   838b4:	2300      	movs	r3, #0
   838b6:	e004      	b.n	838c2 <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   838b8:	2101      	movs	r1, #1
   838ba:	4804      	ldr	r0, [pc, #16]	; (838cc <udc_req_std_dev_get_configuration+0x24>)
   838bc:	4b04      	ldr	r3, [pc, #16]	; (838d0 <udc_req_std_dev_get_configuration+0x28>)
   838be:	4798      	blx	r3
	return true;
   838c0:	2301      	movs	r3, #1
}
   838c2:	4618      	mov	r0, r3
   838c4:	bd80      	pop	{r7, pc}
   838c6:	bf00      	nop
   838c8:	20000c4c 	.word	0x20000c4c
   838cc:	20000c3c 	.word	0x20000c3c
   838d0:	00080be1 	.word	0x00080be1

000838d4 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
   838d4:	b580      	push	{r7, lr}
   838d6:	b082      	sub	sp, #8
   838d8:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   838da:	4b37      	ldr	r3, [pc, #220]	; (839b8 <udc_req_std_dev_set_configuration+0xe4>)
   838dc:	88db      	ldrh	r3, [r3, #6]
   838de:	2b00      	cmp	r3, #0
   838e0:	d001      	beq.n	838e6 <udc_req_std_dev_set_configuration+0x12>
		return false;
   838e2:	2300      	movs	r3, #0
   838e4:	e063      	b.n	839ae <udc_req_std_dev_set_configuration+0xda>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   838e6:	4b35      	ldr	r3, [pc, #212]	; (839bc <udc_req_std_dev_set_configuration+0xe8>)
   838e8:	4798      	blx	r3
   838ea:	4603      	mov	r3, r0
   838ec:	2b00      	cmp	r3, #0
   838ee:	d101      	bne.n	838f4 <udc_req_std_dev_set_configuration+0x20>
		return false;
   838f0:	2300      	movs	r3, #0
   838f2:	e05c      	b.n	839ae <udc_req_std_dev_set_configuration+0xda>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   838f4:	4b32      	ldr	r3, [pc, #200]	; (839c0 <udc_req_std_dev_set_configuration+0xec>)
   838f6:	4798      	blx	r3
   838f8:	4603      	mov	r3, r0
   838fa:	2b00      	cmp	r3, #0
   838fc:	d009      	beq.n	83912 <udc_req_std_dev_set_configuration+0x3e>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   838fe:	4b2e      	ldr	r3, [pc, #184]	; (839b8 <udc_req_std_dev_set_configuration+0xe4>)
   83900:	885b      	ldrh	r3, [r3, #2]
   83902:	b2db      	uxtb	r3, r3
				udc_config.confdev_hs->bNumConfigurations) {
   83904:	4a2f      	ldr	r2, [pc, #188]	; (839c4 <udc_req_std_dev_set_configuration+0xf0>)
   83906:	6892      	ldr	r2, [r2, #8]
   83908:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8390a:	4293      	cmp	r3, r2
   8390c:	dd0b      	ble.n	83926 <udc_req_std_dev_set_configuration+0x52>
			return false;
   8390e:	2300      	movs	r3, #0
   83910:	e04d      	b.n	839ae <udc_req_std_dev_set_configuration+0xda>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   83912:	4b29      	ldr	r3, [pc, #164]	; (839b8 <udc_req_std_dev_set_configuration+0xe4>)
   83914:	885b      	ldrh	r3, [r3, #2]
   83916:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
   83918:	4a2a      	ldr	r2, [pc, #168]	; (839c4 <udc_req_std_dev_set_configuration+0xf0>)
   8391a:	6812      	ldr	r2, [r2, #0]
   8391c:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8391e:	4293      	cmp	r3, r2
   83920:	dd01      	ble.n	83926 <udc_req_std_dev_set_configuration+0x52>
			return false;
   83922:	2300      	movs	r3, #0
   83924:	e043      	b.n	839ae <udc_req_std_dev_set_configuration+0xda>
		}
	}

	// Reset current configuration
	udc_reset();
   83926:	4b28      	ldr	r3, [pc, #160]	; (839c8 <udc_req_std_dev_set_configuration+0xf4>)
   83928:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   8392a:	4b23      	ldr	r3, [pc, #140]	; (839b8 <udc_req_std_dev_set_configuration+0xe4>)
   8392c:	885b      	ldrh	r3, [r3, #2]
   8392e:	b2da      	uxtb	r2, r3
   83930:	4b26      	ldr	r3, [pc, #152]	; (839cc <udc_req_std_dev_set_configuration+0xf8>)
   83932:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
   83934:	4b25      	ldr	r3, [pc, #148]	; (839cc <udc_req_std_dev_set_configuration+0xf8>)
   83936:	781b      	ldrb	r3, [r3, #0]
   83938:	2b00      	cmp	r3, #0
   8393a:	d101      	bne.n	83940 <udc_req_std_dev_set_configuration+0x6c>
		return true; // Default empty configuration requested
   8393c:	2301      	movs	r3, #1
   8393e:	e036      	b.n	839ae <udc_req_std_dev_set_configuration+0xda>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   83940:	4b1f      	ldr	r3, [pc, #124]	; (839c0 <udc_req_std_dev_set_configuration+0xec>)
   83942:	4798      	blx	r3
   83944:	4603      	mov	r3, r0
   83946:	2b00      	cmp	r3, #0
   83948:	d00b      	beq.n	83962 <udc_req_std_dev_set_configuration+0x8e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   8394a:	4b1e      	ldr	r3, [pc, #120]	; (839c4 <udc_req_std_dev_set_configuration+0xf0>)
   8394c:	691a      	ldr	r2, [r3, #16]
   8394e:	4b1f      	ldr	r3, [pc, #124]	; (839cc <udc_req_std_dev_set_configuration+0xf8>)
   83950:	781b      	ldrb	r3, [r3, #0]
   83952:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   83956:	3b01      	subs	r3, #1
   83958:	00db      	lsls	r3, r3, #3
   8395a:	4413      	add	r3, r2
   8395c:	4a1c      	ldr	r2, [pc, #112]	; (839d0 <udc_req_std_dev_set_configuration+0xfc>)
   8395e:	6013      	str	r3, [r2, #0]
   83960:	e00a      	b.n	83978 <udc_req_std_dev_set_configuration+0xa4>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   83962:	4b18      	ldr	r3, [pc, #96]	; (839c4 <udc_req_std_dev_set_configuration+0xf0>)
   83964:	685a      	ldr	r2, [r3, #4]
   83966:	4b19      	ldr	r3, [pc, #100]	; (839cc <udc_req_std_dev_set_configuration+0xf8>)
   83968:	781b      	ldrb	r3, [r3, #0]
   8396a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   8396e:	3b01      	subs	r3, #1
   83970:	00db      	lsls	r3, r3, #3
   83972:	4413      	add	r3, r2
   83974:	4a16      	ldr	r2, [pc, #88]	; (839d0 <udc_req_std_dev_set_configuration+0xfc>)
   83976:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83978:	2300      	movs	r3, #0
   8397a:	71fb      	strb	r3, [r7, #7]
   8397c:	e00f      	b.n	8399e <udc_req_std_dev_set_configuration+0xca>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   8397e:	79fb      	ldrb	r3, [r7, #7]
   83980:	2100      	movs	r1, #0
   83982:	4618      	mov	r0, r3
   83984:	4b13      	ldr	r3, [pc, #76]	; (839d4 <udc_req_std_dev_set_configuration+0x100>)
   83986:	4798      	blx	r3
   83988:	4603      	mov	r3, r0
   8398a:	f083 0301 	eor.w	r3, r3, #1
   8398e:	b2db      	uxtb	r3, r3
   83990:	2b00      	cmp	r3, #0
   83992:	d001      	beq.n	83998 <udc_req_std_dev_set_configuration+0xc4>
			return false;
   83994:	2300      	movs	r3, #0
   83996:	e00a      	b.n	839ae <udc_req_std_dev_set_configuration+0xda>
			iface_num++) {
   83998:	79fb      	ldrb	r3, [r7, #7]
   8399a:	3301      	adds	r3, #1
   8399c:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8399e:	4b0c      	ldr	r3, [pc, #48]	; (839d0 <udc_req_std_dev_set_configuration+0xfc>)
   839a0:	681b      	ldr	r3, [r3, #0]
   839a2:	681b      	ldr	r3, [r3, #0]
   839a4:	791b      	ldrb	r3, [r3, #4]
   839a6:	79fa      	ldrb	r2, [r7, #7]
   839a8:	429a      	cmp	r2, r3
   839aa:	d3e8      	bcc.n	8397e <udc_req_std_dev_set_configuration+0xaa>
		}
	}
	return true;
   839ac:	2301      	movs	r3, #1
}
   839ae:	4618      	mov	r0, r3
   839b0:	3708      	adds	r7, #8
   839b2:	46bd      	mov	sp, r7
   839b4:	bd80      	pop	{r7, pc}
   839b6:	bf00      	nop
   839b8:	20000c4c 	.word	0x20000c4c
   839bc:	00080ba5 	.word	0x00080ba5
   839c0:	00080b3d 	.word	0x00080b3d
   839c4:	20000294 	.word	0x20000294
   839c8:	000832d9 	.word	0x000832d9
   839cc:	20000c3c 	.word	0x20000c3c
   839d0:	20000c40 	.word	0x20000c40
   839d4:	00083241 	.word	0x00083241

000839d8 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
   839d8:	b580      	push	{r7, lr}
   839da:	b082      	sub	sp, #8
   839dc:	af00      	add	r7, sp, #0
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   839de:	4b1e      	ldr	r3, [pc, #120]	; (83a58 <udc_req_std_iface_get_setting+0x80>)
   839e0:	88db      	ldrh	r3, [r3, #6]
   839e2:	2b01      	cmp	r3, #1
   839e4:	d001      	beq.n	839ea <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
   839e6:	2300      	movs	r3, #0
   839e8:	e032      	b.n	83a50 <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
   839ea:	4b1c      	ldr	r3, [pc, #112]	; (83a5c <udc_req_std_iface_get_setting+0x84>)
   839ec:	781b      	ldrb	r3, [r3, #0]
   839ee:	2b00      	cmp	r3, #0
   839f0:	d101      	bne.n	839f6 <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
   839f2:	2300      	movs	r3, #0
   839f4:	e02c      	b.n	83a50 <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   839f6:	4b18      	ldr	r3, [pc, #96]	; (83a58 <udc_req_std_iface_get_setting+0x80>)
   839f8:	889b      	ldrh	r3, [r3, #4]
   839fa:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   839fc:	4b18      	ldr	r3, [pc, #96]	; (83a60 <udc_req_std_iface_get_setting+0x88>)
   839fe:	681b      	ldr	r3, [r3, #0]
   83a00:	681b      	ldr	r3, [r3, #0]
   83a02:	791b      	ldrb	r3, [r3, #4]
   83a04:	79fa      	ldrb	r2, [r7, #7]
   83a06:	429a      	cmp	r2, r3
   83a08:	d301      	bcc.n	83a0e <udc_req_std_iface_get_setting+0x36>
		return false;
   83a0a:	2300      	movs	r3, #0
   83a0c:	e020      	b.n	83a50 <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   83a0e:	79fb      	ldrb	r3, [r7, #7]
   83a10:	2100      	movs	r1, #0
   83a12:	4618      	mov	r0, r3
   83a14:	4b13      	ldr	r3, [pc, #76]	; (83a64 <udc_req_std_iface_get_setting+0x8c>)
   83a16:	4798      	blx	r3
   83a18:	4603      	mov	r3, r0
   83a1a:	f083 0301 	eor.w	r3, r3, #1
   83a1e:	b2db      	uxtb	r3, r3
   83a20:	2b00      	cmp	r3, #0
   83a22:	d001      	beq.n	83a28 <udc_req_std_iface_get_setting+0x50>
		return false;
   83a24:	2300      	movs	r3, #0
   83a26:	e013      	b.n	83a50 <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   83a28:	4b0d      	ldr	r3, [pc, #52]	; (83a60 <udc_req_std_iface_get_setting+0x88>)
   83a2a:	681b      	ldr	r3, [r3, #0]
   83a2c:	685a      	ldr	r2, [r3, #4]
   83a2e:	79fb      	ldrb	r3, [r7, #7]
   83a30:	009b      	lsls	r3, r3, #2
   83a32:	4413      	add	r3, r2
   83a34:	681b      	ldr	r3, [r3, #0]
   83a36:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
   83a38:	683b      	ldr	r3, [r7, #0]
   83a3a:	68db      	ldr	r3, [r3, #12]
   83a3c:	4798      	blx	r3
   83a3e:	4603      	mov	r3, r0
   83a40:	461a      	mov	r2, r3
   83a42:	4b09      	ldr	r3, [pc, #36]	; (83a68 <udc_req_std_iface_get_setting+0x90>)
   83a44:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   83a46:	2101      	movs	r1, #1
   83a48:	4807      	ldr	r0, [pc, #28]	; (83a68 <udc_req_std_iface_get_setting+0x90>)
   83a4a:	4b08      	ldr	r3, [pc, #32]	; (83a6c <udc_req_std_iface_get_setting+0x94>)
   83a4c:	4798      	blx	r3
	return true;
   83a4e:	2301      	movs	r3, #1
}
   83a50:	4618      	mov	r0, r3
   83a52:	3708      	adds	r7, #8
   83a54:	46bd      	mov	sp, r7
   83a56:	bd80      	pop	{r7, pc}
   83a58:	20000c4c 	.word	0x20000c4c
   83a5c:	20000c3c 	.word	0x20000c3c
   83a60:	20000c40 	.word	0x20000c40
   83a64:	00083105 	.word	0x00083105
   83a68:	20000c4a 	.word	0x20000c4a
   83a6c:	00080be1 	.word	0x00080be1

00083a70 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
   83a70:	b580      	push	{r7, lr}
   83a72:	b082      	sub	sp, #8
   83a74:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   83a76:	4b14      	ldr	r3, [pc, #80]	; (83ac8 <udc_req_std_iface_set_setting+0x58>)
   83a78:	88db      	ldrh	r3, [r3, #6]
   83a7a:	2b00      	cmp	r3, #0
   83a7c:	d001      	beq.n	83a82 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
   83a7e:	2300      	movs	r3, #0
   83a80:	e01e      	b.n	83ac0 <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
   83a82:	4b12      	ldr	r3, [pc, #72]	; (83acc <udc_req_std_iface_set_setting+0x5c>)
   83a84:	781b      	ldrb	r3, [r3, #0]
   83a86:	2b00      	cmp	r3, #0
   83a88:	d101      	bne.n	83a8e <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
   83a8a:	2300      	movs	r3, #0
   83a8c:	e018      	b.n	83ac0 <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   83a8e:	4b0e      	ldr	r3, [pc, #56]	; (83ac8 <udc_req_std_iface_set_setting+0x58>)
   83a90:	889b      	ldrh	r3, [r3, #4]
   83a92:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   83a94:	4b0c      	ldr	r3, [pc, #48]	; (83ac8 <udc_req_std_iface_set_setting+0x58>)
   83a96:	885b      	ldrh	r3, [r3, #2]
   83a98:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   83a9a:	79fb      	ldrb	r3, [r7, #7]
   83a9c:	4618      	mov	r0, r3
   83a9e:	4b0c      	ldr	r3, [pc, #48]	; (83ad0 <udc_req_std_iface_set_setting+0x60>)
   83aa0:	4798      	blx	r3
   83aa2:	4603      	mov	r3, r0
   83aa4:	f083 0301 	eor.w	r3, r3, #1
   83aa8:	b2db      	uxtb	r3, r3
   83aaa:	2b00      	cmp	r3, #0
   83aac:	d001      	beq.n	83ab2 <udc_req_std_iface_set_setting+0x42>
		return false;
   83aae:	2300      	movs	r3, #0
   83ab0:	e006      	b.n	83ac0 <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   83ab2:	79ba      	ldrb	r2, [r7, #6]
   83ab4:	79fb      	ldrb	r3, [r7, #7]
   83ab6:	4611      	mov	r1, r2
   83ab8:	4618      	mov	r0, r3
   83aba:	4b06      	ldr	r3, [pc, #24]	; (83ad4 <udc_req_std_iface_set_setting+0x64>)
   83abc:	4798      	blx	r3
   83abe:	4603      	mov	r3, r0
}
   83ac0:	4618      	mov	r0, r3
   83ac2:	3708      	adds	r7, #8
   83ac4:	46bd      	mov	sp, r7
   83ac6:	bd80      	pop	{r7, pc}
   83ac8:	20000c4c 	.word	0x20000c4c
   83acc:	20000c3c 	.word	0x20000c3c
   83ad0:	000831a1 	.word	0x000831a1
   83ad4:	00083241 	.word	0x00083241

00083ad8 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
   83ad8:	b580      	push	{r7, lr}
   83ada:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   83adc:	4b4d      	ldr	r3, [pc, #308]	; (83c14 <udc_reqstd+0x13c>)
   83ade:	781b      	ldrb	r3, [r3, #0]
   83ae0:	b25b      	sxtb	r3, r3
   83ae2:	2b00      	cmp	r3, #0
   83ae4:	da3e      	bge.n	83b64 <udc_reqstd+0x8c>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
   83ae6:	4b4b      	ldr	r3, [pc, #300]	; (83c14 <udc_reqstd+0x13c>)
   83ae8:	88db      	ldrh	r3, [r3, #6]
   83aea:	2b00      	cmp	r3, #0
   83aec:	d101      	bne.n	83af2 <udc_reqstd+0x1a>
			return false; // Error for USB host
   83aee:	2300      	movs	r3, #0
   83af0:	e08e      	b.n	83c10 <udc_reqstd+0x138>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   83af2:	4b48      	ldr	r3, [pc, #288]	; (83c14 <udc_reqstd+0x13c>)
   83af4:	781b      	ldrb	r3, [r3, #0]
   83af6:	f003 031f 	and.w	r3, r3, #31
   83afa:	2b00      	cmp	r3, #0
   83afc:	d114      	bne.n	83b28 <udc_reqstd+0x50>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   83afe:	4b45      	ldr	r3, [pc, #276]	; (83c14 <udc_reqstd+0x13c>)
   83b00:	785b      	ldrb	r3, [r3, #1]
   83b02:	2b06      	cmp	r3, #6
   83b04:	d008      	beq.n	83b18 <udc_reqstd+0x40>
   83b06:	2b08      	cmp	r3, #8
   83b08:	d00a      	beq.n	83b20 <udc_reqstd+0x48>
   83b0a:	2b00      	cmp	r3, #0
   83b0c:	d000      	beq.n	83b10 <udc_reqstd+0x38>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
   83b0e:	e00b      	b.n	83b28 <udc_reqstd+0x50>
				return udc_req_std_dev_get_status();
   83b10:	4b41      	ldr	r3, [pc, #260]	; (83c18 <udc_reqstd+0x140>)
   83b12:	4798      	blx	r3
   83b14:	4603      	mov	r3, r0
   83b16:	e07b      	b.n	83c10 <udc_reqstd+0x138>
				return udc_req_std_dev_get_descriptor();
   83b18:	4b40      	ldr	r3, [pc, #256]	; (83c1c <udc_reqstd+0x144>)
   83b1a:	4798      	blx	r3
   83b1c:	4603      	mov	r3, r0
   83b1e:	e077      	b.n	83c10 <udc_reqstd+0x138>
				return udc_req_std_dev_get_configuration();
   83b20:	4b3f      	ldr	r3, [pc, #252]	; (83c20 <udc_reqstd+0x148>)
   83b22:	4798      	blx	r3
   83b24:	4603      	mov	r3, r0
   83b26:	e073      	b.n	83c10 <udc_reqstd+0x138>
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   83b28:	4b3a      	ldr	r3, [pc, #232]	; (83c14 <udc_reqstd+0x13c>)
   83b2a:	781b      	ldrb	r3, [r3, #0]
   83b2c:	f003 031f 	and.w	r3, r3, #31
   83b30:	2b01      	cmp	r3, #1
   83b32:	d108      	bne.n	83b46 <udc_reqstd+0x6e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   83b34:	4b37      	ldr	r3, [pc, #220]	; (83c14 <udc_reqstd+0x13c>)
   83b36:	785b      	ldrb	r3, [r3, #1]
   83b38:	2b0a      	cmp	r3, #10
   83b3a:	d000      	beq.n	83b3e <udc_reqstd+0x66>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
   83b3c:	e003      	b.n	83b46 <udc_reqstd+0x6e>
				return udc_req_std_iface_get_setting();
   83b3e:	4b39      	ldr	r3, [pc, #228]	; (83c24 <udc_reqstd+0x14c>)
   83b40:	4798      	blx	r3
   83b42:	4603      	mov	r3, r0
   83b44:	e064      	b.n	83c10 <udc_reqstd+0x138>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   83b46:	4b33      	ldr	r3, [pc, #204]	; (83c14 <udc_reqstd+0x13c>)
   83b48:	781b      	ldrb	r3, [r3, #0]
   83b4a:	f003 031f 	and.w	r3, r3, #31
   83b4e:	2b02      	cmp	r3, #2
   83b50:	d15d      	bne.n	83c0e <udc_reqstd+0x136>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   83b52:	4b30      	ldr	r3, [pc, #192]	; (83c14 <udc_reqstd+0x13c>)
   83b54:	785b      	ldrb	r3, [r3, #1]
   83b56:	2b00      	cmp	r3, #0
   83b58:	d000      	beq.n	83b5c <udc_reqstd+0x84>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
   83b5a:	e058      	b.n	83c0e <udc_reqstd+0x136>
				return udc_req_std_ep_get_status();
   83b5c:	4b32      	ldr	r3, [pc, #200]	; (83c28 <udc_reqstd+0x150>)
   83b5e:	4798      	blx	r3
   83b60:	4603      	mov	r3, r0
   83b62:	e055      	b.n	83c10 <udc_reqstd+0x138>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   83b64:	4b2b      	ldr	r3, [pc, #172]	; (83c14 <udc_reqstd+0x13c>)
   83b66:	781b      	ldrb	r3, [r3, #0]
   83b68:	f003 031f 	and.w	r3, r3, #31
   83b6c:	2b00      	cmp	r3, #0
   83b6e:	d12a      	bne.n	83bc6 <udc_reqstd+0xee>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   83b70:	4b28      	ldr	r3, [pc, #160]	; (83c14 <udc_reqstd+0x13c>)
   83b72:	785b      	ldrb	r3, [r3, #1]
   83b74:	3b01      	subs	r3, #1
   83b76:	2b08      	cmp	r3, #8
   83b78:	d824      	bhi.n	83bc4 <udc_reqstd+0xec>
   83b7a:	a201      	add	r2, pc, #4	; (adr r2, 83b80 <udc_reqstd+0xa8>)
   83b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83b80:	00083bad 	.word	0x00083bad
   83b84:	00083bc5 	.word	0x00083bc5
   83b88:	00083bb5 	.word	0x00083bb5
   83b8c:	00083bc5 	.word	0x00083bc5
   83b90:	00083ba5 	.word	0x00083ba5
   83b94:	00083bc5 	.word	0x00083bc5
   83b98:	00083bc5 	.word	0x00083bc5
   83b9c:	00083bc5 	.word	0x00083bc5
   83ba0:	00083bbd 	.word	0x00083bbd
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
   83ba4:	4b21      	ldr	r3, [pc, #132]	; (83c2c <udc_reqstd+0x154>)
   83ba6:	4798      	blx	r3
   83ba8:	4603      	mov	r3, r0
   83baa:	e031      	b.n	83c10 <udc_reqstd+0x138>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
   83bac:	4b20      	ldr	r3, [pc, #128]	; (83c30 <udc_reqstd+0x158>)
   83bae:	4798      	blx	r3
   83bb0:	4603      	mov	r3, r0
   83bb2:	e02d      	b.n	83c10 <udc_reqstd+0x138>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   83bb4:	4b1f      	ldr	r3, [pc, #124]	; (83c34 <udc_reqstd+0x15c>)
   83bb6:	4798      	blx	r3
   83bb8:	4603      	mov	r3, r0
   83bba:	e029      	b.n	83c10 <udc_reqstd+0x138>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
   83bbc:	4b1e      	ldr	r3, [pc, #120]	; (83c38 <udc_reqstd+0x160>)
   83bbe:	4798      	blx	r3
   83bc0:	4603      	mov	r3, r0
   83bc2:	e025      	b.n	83c10 <udc_reqstd+0x138>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
   83bc4:	bf00      	nop
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   83bc6:	4b13      	ldr	r3, [pc, #76]	; (83c14 <udc_reqstd+0x13c>)
   83bc8:	781b      	ldrb	r3, [r3, #0]
   83bca:	f003 031f 	and.w	r3, r3, #31
   83bce:	2b01      	cmp	r3, #1
   83bd0:	d108      	bne.n	83be4 <udc_reqstd+0x10c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   83bd2:	4b10      	ldr	r3, [pc, #64]	; (83c14 <udc_reqstd+0x13c>)
   83bd4:	785b      	ldrb	r3, [r3, #1]
   83bd6:	2b0b      	cmp	r3, #11
   83bd8:	d000      	beq.n	83bdc <udc_reqstd+0x104>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
   83bda:	e003      	b.n	83be4 <udc_reqstd+0x10c>
				return udc_req_std_iface_set_setting();
   83bdc:	4b17      	ldr	r3, [pc, #92]	; (83c3c <udc_reqstd+0x164>)
   83bde:	4798      	blx	r3
   83be0:	4603      	mov	r3, r0
   83be2:	e015      	b.n	83c10 <udc_reqstd+0x138>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   83be4:	4b0b      	ldr	r3, [pc, #44]	; (83c14 <udc_reqstd+0x13c>)
   83be6:	781b      	ldrb	r3, [r3, #0]
   83be8:	f003 031f 	and.w	r3, r3, #31
   83bec:	2b02      	cmp	r3, #2
   83bee:	d10e      	bne.n	83c0e <udc_reqstd+0x136>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   83bf0:	4b08      	ldr	r3, [pc, #32]	; (83c14 <udc_reqstd+0x13c>)
   83bf2:	785b      	ldrb	r3, [r3, #1]
   83bf4:	2b01      	cmp	r3, #1
   83bf6:	d002      	beq.n	83bfe <udc_reqstd+0x126>
   83bf8:	2b03      	cmp	r3, #3
   83bfa:	d004      	beq.n	83c06 <udc_reqstd+0x12e>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
   83bfc:	e007      	b.n	83c0e <udc_reqstd+0x136>
				return udc_req_std_ep_clear_feature();
   83bfe:	4b10      	ldr	r3, [pc, #64]	; (83c40 <udc_reqstd+0x168>)
   83c00:	4798      	blx	r3
   83c02:	4603      	mov	r3, r0
   83c04:	e004      	b.n	83c10 <udc_reqstd+0x138>
				return udc_req_std_ep_set_feature();
   83c06:	4b0f      	ldr	r3, [pc, #60]	; (83c44 <udc_reqstd+0x16c>)
   83c08:	4798      	blx	r3
   83c0a:	4603      	mov	r3, r0
   83c0c:	e000      	b.n	83c10 <udc_reqstd+0x138>
			}
		}
#endif
	}
	return false;
   83c0e:	2300      	movs	r3, #0
}
   83c10:	4618      	mov	r0, r3
   83c12:	bd80      	pop	{r7, pc}
   83c14:	20000c4c 	.word	0x20000c4c
   83c18:	0008338d 	.word	0x0008338d
   83c1c:	0008368d 	.word	0x0008368d
   83c20:	000838a9 	.word	0x000838a9
   83c24:	000839d9 	.word	0x000839d9
   83c28:	000833b9 	.word	0x000833b9
   83c2c:	00083599 	.word	0x00083599
   83c30:	000833fd 	.word	0x000833fd
   83c34:	00083471 	.word	0x00083471
   83c38:	000838d5 	.word	0x000838d5
   83c3c:	00083a71 	.word	0x00083a71
   83c40:	00083439 	.word	0x00083439
   83c44:	0008352d 	.word	0x0008352d

00083c48 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   83c48:	b580      	push	{r7, lr}
   83c4a:	b082      	sub	sp, #8
   83c4c:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   83c4e:	4b20      	ldr	r3, [pc, #128]	; (83cd0 <udc_req_iface+0x88>)
   83c50:	781b      	ldrb	r3, [r3, #0]
   83c52:	2b00      	cmp	r3, #0
   83c54:	d101      	bne.n	83c5a <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
   83c56:	2300      	movs	r3, #0
   83c58:	e036      	b.n	83cc8 <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   83c5a:	4b1e      	ldr	r3, [pc, #120]	; (83cd4 <udc_req_iface+0x8c>)
   83c5c:	889b      	ldrh	r3, [r3, #4]
   83c5e:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   83c60:	4b1d      	ldr	r3, [pc, #116]	; (83cd8 <udc_req_iface+0x90>)
   83c62:	681b      	ldr	r3, [r3, #0]
   83c64:	681b      	ldr	r3, [r3, #0]
   83c66:	791b      	ldrb	r3, [r3, #4]
   83c68:	79fa      	ldrb	r2, [r7, #7]
   83c6a:	429a      	cmp	r2, r3
   83c6c:	d301      	bcc.n	83c72 <udc_req_iface+0x2a>
		return false;
   83c6e:	2300      	movs	r3, #0
   83c70:	e02a      	b.n	83cc8 <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   83c72:	79fb      	ldrb	r3, [r7, #7]
   83c74:	2100      	movs	r1, #0
   83c76:	4618      	mov	r0, r3
   83c78:	4b18      	ldr	r3, [pc, #96]	; (83cdc <udc_req_iface+0x94>)
   83c7a:	4798      	blx	r3
   83c7c:	4603      	mov	r3, r0
   83c7e:	f083 0301 	eor.w	r3, r3, #1
   83c82:	b2db      	uxtb	r3, r3
   83c84:	2b00      	cmp	r3, #0
   83c86:	d001      	beq.n	83c8c <udc_req_iface+0x44>
		return false;
   83c88:	2300      	movs	r3, #0
   83c8a:	e01d      	b.n	83cc8 <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   83c8c:	4b12      	ldr	r3, [pc, #72]	; (83cd8 <udc_req_iface+0x90>)
   83c8e:	681b      	ldr	r3, [r3, #0]
   83c90:	685a      	ldr	r2, [r3, #4]
   83c92:	79fb      	ldrb	r3, [r7, #7]
   83c94:	009b      	lsls	r3, r3, #2
   83c96:	4413      	add	r3, r2
   83c98:	681b      	ldr	r3, [r3, #0]
   83c9a:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   83c9c:	683b      	ldr	r3, [r7, #0]
   83c9e:	68db      	ldr	r3, [r3, #12]
   83ca0:	4798      	blx	r3
   83ca2:	4603      	mov	r3, r0
   83ca4:	461a      	mov	r2, r3
   83ca6:	79fb      	ldrb	r3, [r7, #7]
   83ca8:	4611      	mov	r1, r2
   83caa:	4618      	mov	r0, r3
   83cac:	4b0b      	ldr	r3, [pc, #44]	; (83cdc <udc_req_iface+0x94>)
   83cae:	4798      	blx	r3
   83cb0:	4603      	mov	r3, r0
   83cb2:	f083 0301 	eor.w	r3, r3, #1
   83cb6:	b2db      	uxtb	r3, r3
   83cb8:	2b00      	cmp	r3, #0
   83cba:	d001      	beq.n	83cc0 <udc_req_iface+0x78>
		return false;
   83cbc:	2300      	movs	r3, #0
   83cbe:	e003      	b.n	83cc8 <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   83cc0:	683b      	ldr	r3, [r7, #0]
   83cc2:	689b      	ldr	r3, [r3, #8]
   83cc4:	4798      	blx	r3
   83cc6:	4603      	mov	r3, r0
}
   83cc8:	4618      	mov	r0, r3
   83cca:	3708      	adds	r7, #8
   83ccc:	46bd      	mov	sp, r7
   83cce:	bd80      	pop	{r7, pc}
   83cd0:	20000c3c 	.word	0x20000c3c
   83cd4:	20000c4c 	.word	0x20000c4c
   83cd8:	20000c40 	.word	0x20000c40
   83cdc:	00083105 	.word	0x00083105

00083ce0 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   83ce0:	b580      	push	{r7, lr}
   83ce2:	b082      	sub	sp, #8
   83ce4:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   83ce6:	4b1e      	ldr	r3, [pc, #120]	; (83d60 <udc_req_ep+0x80>)
   83ce8:	781b      	ldrb	r3, [r3, #0]
   83cea:	2b00      	cmp	r3, #0
   83cec:	d101      	bne.n	83cf2 <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
   83cee:	2300      	movs	r3, #0
   83cf0:	e032      	b.n	83d58 <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   83cf2:	4b1c      	ldr	r3, [pc, #112]	; (83d64 <udc_req_ep+0x84>)
   83cf4:	889b      	ldrh	r3, [r3, #4]
   83cf6:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83cf8:	2300      	movs	r3, #0
   83cfa:	71fb      	strb	r3, [r7, #7]
   83cfc:	e024      	b.n	83d48 <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   83cfe:	4b1a      	ldr	r3, [pc, #104]	; (83d68 <udc_req_ep+0x88>)
   83d00:	681b      	ldr	r3, [r3, #0]
   83d02:	685a      	ldr	r2, [r3, #4]
   83d04:	79fb      	ldrb	r3, [r7, #7]
   83d06:	009b      	lsls	r3, r3, #2
   83d08:	4413      	add	r3, r2
   83d0a:	681b      	ldr	r3, [r3, #0]
   83d0c:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   83d0e:	683b      	ldr	r3, [r7, #0]
   83d10:	68db      	ldr	r3, [r3, #12]
   83d12:	4798      	blx	r3
   83d14:	4603      	mov	r3, r0
   83d16:	461a      	mov	r2, r3
   83d18:	79fb      	ldrb	r3, [r7, #7]
   83d1a:	4611      	mov	r1, r2
   83d1c:	4618      	mov	r0, r3
   83d1e:	4b13      	ldr	r3, [pc, #76]	; (83d6c <udc_req_ep+0x8c>)
   83d20:	4798      	blx	r3
   83d22:	4603      	mov	r3, r0
   83d24:	f083 0301 	eor.w	r3, r3, #1
   83d28:	b2db      	uxtb	r3, r3
   83d2a:	2b00      	cmp	r3, #0
   83d2c:	d001      	beq.n	83d32 <udc_req_ep+0x52>
			return false;
   83d2e:	2300      	movs	r3, #0
   83d30:	e012      	b.n	83d58 <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   83d32:	683b      	ldr	r3, [r7, #0]
   83d34:	689b      	ldr	r3, [r3, #8]
   83d36:	4798      	blx	r3
   83d38:	4603      	mov	r3, r0
   83d3a:	2b00      	cmp	r3, #0
   83d3c:	d001      	beq.n	83d42 <udc_req_ep+0x62>
			return true;
   83d3e:	2301      	movs	r3, #1
   83d40:	e00a      	b.n	83d58 <udc_req_ep+0x78>
			iface_num++) {
   83d42:	79fb      	ldrb	r3, [r7, #7]
   83d44:	3301      	adds	r3, #1
   83d46:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83d48:	4b07      	ldr	r3, [pc, #28]	; (83d68 <udc_req_ep+0x88>)
   83d4a:	681b      	ldr	r3, [r3, #0]
   83d4c:	681b      	ldr	r3, [r3, #0]
   83d4e:	791b      	ldrb	r3, [r3, #4]
   83d50:	79fa      	ldrb	r2, [r7, #7]
   83d52:	429a      	cmp	r2, r3
   83d54:	d3d3      	bcc.n	83cfe <udc_req_ep+0x1e>
		}
	}
	return false;
   83d56:	2300      	movs	r3, #0
}
   83d58:	4618      	mov	r0, r3
   83d5a:	3708      	adds	r7, #8
   83d5c:	46bd      	mov	sp, r7
   83d5e:	bd80      	pop	{r7, pc}
   83d60:	20000c3c 	.word	0x20000c3c
   83d64:	20000c4c 	.word	0x20000c4c
   83d68:	20000c40 	.word	0x20000c40
   83d6c:	00083105 	.word	0x00083105

00083d70 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   83d70:	b580      	push	{r7, lr}
   83d72:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   83d74:	4b1e      	ldr	r3, [pc, #120]	; (83df0 <udc_process_setup+0x80>)
   83d76:	2200      	movs	r2, #0
   83d78:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   83d7a:	4b1d      	ldr	r3, [pc, #116]	; (83df0 <udc_process_setup+0x80>)
   83d7c:	2200      	movs	r2, #0
   83d7e:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   83d80:	4b1b      	ldr	r3, [pc, #108]	; (83df0 <udc_process_setup+0x80>)
   83d82:	2200      	movs	r2, #0
   83d84:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   83d86:	4b1a      	ldr	r3, [pc, #104]	; (83df0 <udc_process_setup+0x80>)
   83d88:	781b      	ldrb	r3, [r3, #0]
   83d8a:	b25b      	sxtb	r3, r3
   83d8c:	2b00      	cmp	r3, #0
   83d8e:	da05      	bge.n	83d9c <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
   83d90:	4b17      	ldr	r3, [pc, #92]	; (83df0 <udc_process_setup+0x80>)
   83d92:	88db      	ldrh	r3, [r3, #6]
   83d94:	2b00      	cmp	r3, #0
   83d96:	d101      	bne.n	83d9c <udc_process_setup+0x2c>
			return false; // Error from USB host
   83d98:	2300      	movs	r3, #0
   83d9a:	e027      	b.n	83dec <udc_process_setup+0x7c>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   83d9c:	4b14      	ldr	r3, [pc, #80]	; (83df0 <udc_process_setup+0x80>)
   83d9e:	781b      	ldrb	r3, [r3, #0]
   83da0:	f003 0360 	and.w	r3, r3, #96	; 0x60
   83da4:	2b00      	cmp	r3, #0
   83da6:	d106      	bne.n	83db6 <udc_process_setup+0x46>
		if (udc_reqstd()) {
   83da8:	4b12      	ldr	r3, [pc, #72]	; (83df4 <udc_process_setup+0x84>)
   83daa:	4798      	blx	r3
   83dac:	4603      	mov	r3, r0
   83dae:	2b00      	cmp	r3, #0
   83db0:	d001      	beq.n	83db6 <udc_process_setup+0x46>
			return true;
   83db2:	2301      	movs	r3, #1
   83db4:	e01a      	b.n	83dec <udc_process_setup+0x7c>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   83db6:	4b0e      	ldr	r3, [pc, #56]	; (83df0 <udc_process_setup+0x80>)
   83db8:	781b      	ldrb	r3, [r3, #0]
   83dba:	f003 031f 	and.w	r3, r3, #31
   83dbe:	2b01      	cmp	r3, #1
   83dc0:	d106      	bne.n	83dd0 <udc_process_setup+0x60>
		if (udc_req_iface()) {
   83dc2:	4b0d      	ldr	r3, [pc, #52]	; (83df8 <udc_process_setup+0x88>)
   83dc4:	4798      	blx	r3
   83dc6:	4603      	mov	r3, r0
   83dc8:	2b00      	cmp	r3, #0
   83dca:	d001      	beq.n	83dd0 <udc_process_setup+0x60>
			return true;
   83dcc:	2301      	movs	r3, #1
   83dce:	e00d      	b.n	83dec <udc_process_setup+0x7c>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   83dd0:	4b07      	ldr	r3, [pc, #28]	; (83df0 <udc_process_setup+0x80>)
   83dd2:	781b      	ldrb	r3, [r3, #0]
   83dd4:	f003 031f 	and.w	r3, r3, #31
   83dd8:	2b02      	cmp	r3, #2
   83dda:	d106      	bne.n	83dea <udc_process_setup+0x7a>
		if (udc_req_ep()) {
   83ddc:	4b07      	ldr	r3, [pc, #28]	; (83dfc <udc_process_setup+0x8c>)
   83dde:	4798      	blx	r3
   83de0:	4603      	mov	r3, r0
   83de2:	2b00      	cmp	r3, #0
   83de4:	d001      	beq.n	83dea <udc_process_setup+0x7a>
			return true;
   83de6:	2301      	movs	r3, #1
   83de8:	e000      	b.n	83dec <udc_process_setup+0x7c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   83dea:	2300      	movs	r3, #0
#endif
}
   83dec:	4618      	mov	r0, r3
   83dee:	bd80      	pop	{r7, pc}
   83df0:	20000c4c 	.word	0x20000c4c
   83df4:	00083ad9 	.word	0x00083ad9
   83df8:	00083c49 	.word	0x00083c49
   83dfc:	00083ce1 	.word	0x00083ce1

00083e00 <pmc_is_wakeup_clocks_restored>:
#endif
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
   83e00:	b480      	push	{r7}
   83e02:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
   83e04:	4b08      	ldr	r3, [pc, #32]	; (83e28 <pmc_is_wakeup_clocks_restored+0x28>)
   83e06:	781b      	ldrb	r3, [r3, #0]
   83e08:	b2db      	uxtb	r3, r3
   83e0a:	2b00      	cmp	r3, #0
   83e0c:	bf14      	ite	ne
   83e0e:	2301      	movne	r3, #1
   83e10:	2300      	moveq	r3, #0
   83e12:	b2db      	uxtb	r3, r3
   83e14:	f083 0301 	eor.w	r3, r3, #1
   83e18:	b2db      	uxtb	r3, r3
   83e1a:	f003 0301 	and.w	r3, r3, #1
   83e1e:	b2db      	uxtb	r3, r3
}
   83e20:	4618      	mov	r0, r3
   83e22:	46bd      	mov	sp, r7
   83e24:	bc80      	pop	{r7}
   83e26:	4770      	bx	lr
   83e28:	20000c4b 	.word	0x20000c4b

00083e2c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   83e2c:	b580      	push	{r7, lr}
   83e2e:	b082      	sub	sp, #8
   83e30:	af00      	add	r7, sp, #0
   83e32:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   83e34:	6878      	ldr	r0, [r7, #4]
   83e36:	4b03      	ldr	r3, [pc, #12]	; (83e44 <sysclk_enable_peripheral_clock+0x18>)
   83e38:	4798      	blx	r3
}
   83e3a:	bf00      	nop
   83e3c:	3708      	adds	r7, #8
   83e3e:	46bd      	mov	sp, r7
   83e40:	bd80      	pop	{r7, pc}
   83e42:	bf00      	nop
   83e44:	00082a25 	.word	0x00082a25

00083e48 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   83e48:	b580      	push	{r7, lr}
   83e4a:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   83e4c:	200a      	movs	r0, #10
   83e4e:	4b03      	ldr	r3, [pc, #12]	; (83e5c <ioport_init+0x14>)
   83e50:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   83e52:	200b      	movs	r0, #11
   83e54:	4b01      	ldr	r3, [pc, #4]	; (83e5c <ioport_init+0x14>)
   83e56:	4798      	blx	r3
	arch_ioport_init();
}
   83e58:	bf00      	nop
   83e5a:	bd80      	pop	{r7, pc}
   83e5c:	00083e2d 	.word	0x00083e2d

00083e60 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   83e60:	b580      	push	{r7, lr}
   83e62:	af00      	add	r7, sp, #0
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   83e64:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83e68:	201d      	movs	r0, #29
   83e6a:	4b0a      	ldr	r3, [pc, #40]	; (83e94 <iopins_normal+0x34>)
   83e6c:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   83e6e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83e72:	201f      	movs	r0, #31
   83e74:	4b07      	ldr	r3, [pc, #28]	; (83e94 <iopins_normal+0x34>)
   83e76:	4798      	blx	r3
	//gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   83e78:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   83e7c:	2018      	movs	r0, #24
   83e7e:	4b05      	ldr	r3, [pc, #20]	; (83e94 <iopins_normal+0x34>)
   83e80:	4798      	blx	r3
	//board_sram_pwron();

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   83e82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   83e86:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   83e8a:	4803      	ldr	r0, [pc, #12]	; (83e98 <iopins_normal+0x38>)
   83e8c:	4b03      	ldr	r3, [pc, #12]	; (83e9c <iopins_normal+0x3c>)
   83e8e:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   83e90:	bf00      	nop
   83e92:	bd80      	pop	{r7, pc}
   83e94:	00082e15 	.word	0x00082e15
   83e98:	400e0c00 	.word	0x400e0c00
   83e9c:	00082f4d 	.word	0x00082f4d

00083ea0 <board_init>:

void board_init(void)
{
   83ea0:	b580      	push	{r7, lr}
   83ea2:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   83ea4:	4b04      	ldr	r3, [pc, #16]	; (83eb8 <board_init+0x18>)
   83ea6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83eaa:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   83eac:	4b03      	ldr	r3, [pc, #12]	; (83ebc <board_init+0x1c>)
   83eae:	4798      	blx	r3

	iopins_normal();
   83eb0:	4b03      	ldr	r3, [pc, #12]	; (83ec0 <board_init+0x20>)
   83eb2:	4798      	blx	r3

}
   83eb4:	bf00      	nop
   83eb6:	bd80      	pop	{r7, pc}
   83eb8:	400e1250 	.word	0x400e1250
   83ebc:	00083e49 	.word	0x00083e49
   83ec0:	00083e61 	.word	0x00083e61

00083ec4 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   83ec4:	b480      	push	{r7}
   83ec6:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83ec8:	4b57      	ldr	r3, [pc, #348]	; (84028 <SystemCoreClockUpdate+0x164>)
   83eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83ecc:	f003 0303 	and.w	r3, r3, #3
   83ed0:	2b03      	cmp	r3, #3
   83ed2:	f200 808a 	bhi.w	83fea <SystemCoreClockUpdate+0x126>
   83ed6:	a201      	add	r2, pc, #4	; (adr r2, 83edc <SystemCoreClockUpdate+0x18>)
   83ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83edc:	00083eed 	.word	0x00083eed
   83ee0:	00083f0d 	.word	0x00083f0d
   83ee4:	00083f5d 	.word	0x00083f5d
   83ee8:	00083f5d 	.word	0x00083f5d
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83eec:	4b4f      	ldr	r3, [pc, #316]	; (8402c <SystemCoreClockUpdate+0x168>)
   83eee:	695b      	ldr	r3, [r3, #20]
   83ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83ef4:	2b00      	cmp	r3, #0
   83ef6:	d004      	beq.n	83f02 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   83ef8:	4b4d      	ldr	r3, [pc, #308]	; (84030 <SystemCoreClockUpdate+0x16c>)
   83efa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83efe:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   83f00:	e073      	b.n	83fea <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   83f02:	4b4b      	ldr	r3, [pc, #300]	; (84030 <SystemCoreClockUpdate+0x16c>)
   83f04:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   83f08:	601a      	str	r2, [r3, #0]
		break;
   83f0a:	e06e      	b.n	83fea <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83f0c:	4b46      	ldr	r3, [pc, #280]	; (84028 <SystemCoreClockUpdate+0x164>)
   83f0e:	6a1b      	ldr	r3, [r3, #32]
   83f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83f14:	2b00      	cmp	r3, #0
   83f16:	d003      	beq.n	83f20 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83f18:	4b45      	ldr	r3, [pc, #276]	; (84030 <SystemCoreClockUpdate+0x16c>)
   83f1a:	4a46      	ldr	r2, [pc, #280]	; (84034 <SystemCoreClockUpdate+0x170>)
   83f1c:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   83f1e:	e064      	b.n	83fea <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83f20:	4b43      	ldr	r3, [pc, #268]	; (84030 <SystemCoreClockUpdate+0x16c>)
   83f22:	4a45      	ldr	r2, [pc, #276]	; (84038 <SystemCoreClockUpdate+0x174>)
   83f24:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83f26:	4b40      	ldr	r3, [pc, #256]	; (84028 <SystemCoreClockUpdate+0x164>)
   83f28:	6a1b      	ldr	r3, [r3, #32]
   83f2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83f2e:	2b10      	cmp	r3, #16
   83f30:	d004      	beq.n	83f3c <SystemCoreClockUpdate+0x78>
   83f32:	2b20      	cmp	r3, #32
   83f34:	d008      	beq.n	83f48 <SystemCoreClockUpdate+0x84>
   83f36:	2b00      	cmp	r3, #0
   83f38:	d00e      	beq.n	83f58 <SystemCoreClockUpdate+0x94>
				break;
   83f3a:	e00e      	b.n	83f5a <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
   83f3c:	4b3c      	ldr	r3, [pc, #240]	; (84030 <SystemCoreClockUpdate+0x16c>)
   83f3e:	681b      	ldr	r3, [r3, #0]
   83f40:	005b      	lsls	r3, r3, #1
   83f42:	4a3b      	ldr	r2, [pc, #236]	; (84030 <SystemCoreClockUpdate+0x16c>)
   83f44:	6013      	str	r3, [r2, #0]
				break;
   83f46:	e008      	b.n	83f5a <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
   83f48:	4b39      	ldr	r3, [pc, #228]	; (84030 <SystemCoreClockUpdate+0x16c>)
   83f4a:	681a      	ldr	r2, [r3, #0]
   83f4c:	4613      	mov	r3, r2
   83f4e:	005b      	lsls	r3, r3, #1
   83f50:	4413      	add	r3, r2
   83f52:	4a37      	ldr	r2, [pc, #220]	; (84030 <SystemCoreClockUpdate+0x16c>)
   83f54:	6013      	str	r3, [r2, #0]
				break;
   83f56:	e000      	b.n	83f5a <SystemCoreClockUpdate+0x96>
				break;
   83f58:	bf00      	nop
		break;
   83f5a:	e046      	b.n	83fea <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83f5c:	4b32      	ldr	r3, [pc, #200]	; (84028 <SystemCoreClockUpdate+0x164>)
   83f5e:	6a1b      	ldr	r3, [r3, #32]
   83f60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83f64:	2b00      	cmp	r3, #0
   83f66:	d003      	beq.n	83f70 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83f68:	4b31      	ldr	r3, [pc, #196]	; (84030 <SystemCoreClockUpdate+0x16c>)
   83f6a:	4a32      	ldr	r2, [pc, #200]	; (84034 <SystemCoreClockUpdate+0x170>)
   83f6c:	601a      	str	r2, [r3, #0]
   83f6e:	e01c      	b.n	83faa <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83f70:	4b2f      	ldr	r3, [pc, #188]	; (84030 <SystemCoreClockUpdate+0x16c>)
   83f72:	4a31      	ldr	r2, [pc, #196]	; (84038 <SystemCoreClockUpdate+0x174>)
   83f74:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83f76:	4b2c      	ldr	r3, [pc, #176]	; (84028 <SystemCoreClockUpdate+0x164>)
   83f78:	6a1b      	ldr	r3, [r3, #32]
   83f7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83f7e:	2b10      	cmp	r3, #16
   83f80:	d004      	beq.n	83f8c <SystemCoreClockUpdate+0xc8>
   83f82:	2b20      	cmp	r3, #32
   83f84:	d008      	beq.n	83f98 <SystemCoreClockUpdate+0xd4>
   83f86:	2b00      	cmp	r3, #0
   83f88:	d00e      	beq.n	83fa8 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   83f8a:	e00e      	b.n	83faa <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 2U;
   83f8c:	4b28      	ldr	r3, [pc, #160]	; (84030 <SystemCoreClockUpdate+0x16c>)
   83f8e:	681b      	ldr	r3, [r3, #0]
   83f90:	005b      	lsls	r3, r3, #1
   83f92:	4a27      	ldr	r2, [pc, #156]	; (84030 <SystemCoreClockUpdate+0x16c>)
   83f94:	6013      	str	r3, [r2, #0]
				break;
   83f96:	e008      	b.n	83faa <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 3U;
   83f98:	4b25      	ldr	r3, [pc, #148]	; (84030 <SystemCoreClockUpdate+0x16c>)
   83f9a:	681a      	ldr	r2, [r3, #0]
   83f9c:	4613      	mov	r3, r2
   83f9e:	005b      	lsls	r3, r3, #1
   83fa0:	4413      	add	r3, r2
   83fa2:	4a23      	ldr	r2, [pc, #140]	; (84030 <SystemCoreClockUpdate+0x16c>)
   83fa4:	6013      	str	r3, [r2, #0]
				break;
   83fa6:	e000      	b.n	83faa <SystemCoreClockUpdate+0xe6>
				break;
   83fa8:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   83faa:	4b1f      	ldr	r3, [pc, #124]	; (84028 <SystemCoreClockUpdate+0x164>)
   83fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83fae:	f003 0303 	and.w	r3, r3, #3
   83fb2:	2b02      	cmp	r3, #2
   83fb4:	d115      	bne.n	83fe2 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83fb6:	4b1c      	ldr	r3, [pc, #112]	; (84028 <SystemCoreClockUpdate+0x164>)
   83fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   83fba:	0c1b      	lsrs	r3, r3, #16
   83fbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                          CKGR_PLLAR_MULA_Pos) + 1U);
   83fc0:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83fc2:	4a1b      	ldr	r2, [pc, #108]	; (84030 <SystemCoreClockUpdate+0x16c>)
   83fc4:	6812      	ldr	r2, [r2, #0]
   83fc6:	fb02 f303 	mul.w	r3, r2, r3
   83fca:	4a19      	ldr	r2, [pc, #100]	; (84030 <SystemCoreClockUpdate+0x16c>)
   83fcc:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   83fce:	4b16      	ldr	r3, [pc, #88]	; (84028 <SystemCoreClockUpdate+0x164>)
   83fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   83fd2:	b2db      	uxtb	r3, r3
   83fd4:	4a16      	ldr	r2, [pc, #88]	; (84030 <SystemCoreClockUpdate+0x16c>)
   83fd6:	6812      	ldr	r2, [r2, #0]
   83fd8:	fbb2 f3f3 	udiv	r3, r2, r3
   83fdc:	4a14      	ldr	r2, [pc, #80]	; (84030 <SystemCoreClockUpdate+0x16c>)
   83fde:	6013      	str	r3, [r2, #0]
				                           CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   83fe0:	e002      	b.n	83fe8 <SystemCoreClockUpdate+0x124>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   83fe2:	4b13      	ldr	r3, [pc, #76]	; (84030 <SystemCoreClockUpdate+0x16c>)
   83fe4:	4a15      	ldr	r2, [pc, #84]	; (8403c <SystemCoreClockUpdate+0x178>)
   83fe6:	601a      	str	r2, [r3, #0]
		break;
   83fe8:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   83fea:	4b0f      	ldr	r3, [pc, #60]	; (84028 <SystemCoreClockUpdate+0x164>)
   83fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83fee:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83ff2:	2b70      	cmp	r3, #112	; 0x70
   83ff4:	d108      	bne.n	84008 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   83ff6:	4b0e      	ldr	r3, [pc, #56]	; (84030 <SystemCoreClockUpdate+0x16c>)
   83ff8:	681b      	ldr	r3, [r3, #0]
   83ffa:	4a11      	ldr	r2, [pc, #68]	; (84040 <SystemCoreClockUpdate+0x17c>)
   83ffc:	fba2 2303 	umull	r2, r3, r2, r3
   84000:	085b      	lsrs	r3, r3, #1
   84002:	4a0b      	ldr	r2, [pc, #44]	; (84030 <SystemCoreClockUpdate+0x16c>)
   84004:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                           PMC_MCKR_PRES_Pos);
	}
}
   84006:	e00a      	b.n	8401e <SystemCoreClockUpdate+0x15a>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   84008:	4b07      	ldr	r3, [pc, #28]	; (84028 <SystemCoreClockUpdate+0x164>)
   8400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8400c:	091b      	lsrs	r3, r3, #4
   8400e:	f003 0307 	and.w	r3, r3, #7
   84012:	4a07      	ldr	r2, [pc, #28]	; (84030 <SystemCoreClockUpdate+0x16c>)
   84014:	6812      	ldr	r2, [r2, #0]
   84016:	fa22 f303 	lsr.w	r3, r2, r3
   8401a:	4a05      	ldr	r2, [pc, #20]	; (84030 <SystemCoreClockUpdate+0x16c>)
   8401c:	6013      	str	r3, [r2, #0]
}
   8401e:	bf00      	nop
   84020:	46bd      	mov	sp, r7
   84022:	bc80      	pop	{r7}
   84024:	4770      	bx	lr
   84026:	bf00      	nop
   84028:	400e0400 	.word	0x400e0400
   8402c:	400e1210 	.word	0x400e1210
   84030:	200002ac 	.word	0x200002ac
   84034:	00b71b00 	.word	0x00b71b00
   84038:	003d0900 	.word	0x003d0900
   8403c:	0e4e1c00 	.word	0x0e4e1c00
   84040:	aaaaaaab 	.word	0xaaaaaaab

00084044 <ui_powerdown>:
	LED_Off(LED1_GPIO);
	//LED_Off(LED2_GPIO);
}

void ui_powerdown(void)
{
   84044:	b580      	push	{r7, lr}
   84046:	af00      	add	r7, sp, #0
	LED_Off(LED0_GPIO);
   84048:	201d      	movs	r0, #29
   8404a:	4b03      	ldr	r3, [pc, #12]	; (84058 <ui_powerdown+0x14>)
   8404c:	4798      	blx	r3
	LED_Off(LED1_GPIO);
   8404e:	201f      	movs	r0, #31
   84050:	4b01      	ldr	r3, [pc, #4]	; (84058 <ui_powerdown+0x14>)
   84052:	4798      	blx	r3
	//LED_Off(LED2_GPIO);
	
	// Power off FPGA
	//board_sram_pwroff();
		
}
   84054:	bf00      	nop
   84056:	bd80      	pop	{r7, pc}
   84058:	00082225 	.word	0x00082225

0008405c <ui_wakeup>:

void ui_wakeup(void)
{
   8405c:	b580      	push	{r7, lr}
   8405e:	af00      	add	r7, sp, #0
	LED_On(LED0_GPIO);
   84060:	201d      	movs	r0, #29
   84062:	4b02      	ldr	r3, [pc, #8]	; (8406c <ui_wakeup+0x10>)
   84064:	4798      	blx	r3
	//board_sram_pwron();
}
   84066:	bf00      	nop
   84068:	bd80      	pop	{r7, pc}
   8406a:	bf00      	nop
   8406c:	0008227d 	.word	0x0008227d

00084070 <ui_process>:

void ui_process(uint16_t framenumber)
{
   84070:	b580      	push	{r7, lr}
   84072:	b082      	sub	sp, #8
   84074:	af00      	add	r7, sp, #0
   84076:	4603      	mov	r3, r0
   84078:	80fb      	strh	r3, [r7, #6]
	if ((framenumber % 1000) == 0) {
   8407a:	88fb      	ldrh	r3, [r7, #6]
   8407c:	4a16      	ldr	r2, [pc, #88]	; (840d8 <ui_process+0x68>)
   8407e:	fba2 1203 	umull	r1, r2, r2, r3
   84082:	0992      	lsrs	r2, r2, #6
   84084:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   84088:	fb01 f202 	mul.w	r2, r1, r2
   8408c:	1a9b      	subs	r3, r3, r2
   8408e:	b29b      	uxth	r3, r3
   84090:	2b00      	cmp	r3, #0
   84092:	d102      	bne.n	8409a <ui_process+0x2a>
		LED_On(LED0_GPIO);
   84094:	201d      	movs	r0, #29
   84096:	4b11      	ldr	r3, [pc, #68]	; (840dc <ui_process+0x6c>)
   84098:	4798      	blx	r3
	}
	if ((framenumber % 1000) == 500) {
   8409a:	88fb      	ldrh	r3, [r7, #6]
   8409c:	4a0e      	ldr	r2, [pc, #56]	; (840d8 <ui_process+0x68>)
   8409e:	fba2 1203 	umull	r1, r2, r2, r3
   840a2:	0992      	lsrs	r2, r2, #6
   840a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   840a8:	fb01 f202 	mul.w	r2, r1, r2
   840ac:	1a9b      	subs	r3, r3, r2
   840ae:	b29b      	uxth	r3, r3
   840b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   840b4:	d102      	bne.n	840bc <ui_process+0x4c>
		LED_Off(LED0_GPIO);
   840b6:	201d      	movs	r0, #29
   840b8:	4b09      	ldr	r3, [pc, #36]	; (840e0 <ui_process+0x70>)
   840ba:	4798      	blx	r3
	}
	
	if ((framenumber % 512) == 0) {
   840bc:	88fb      	ldrh	r3, [r7, #6]
   840be:	f3c3 0308 	ubfx	r3, r3, #0, #9
   840c2:	b29b      	uxth	r3, r3
   840c4:	2b00      	cmp	r3, #0
   840c6:	d102      	bne.n	840ce <ui_process+0x5e>
		LED_Off(LED1_GPIO);
   840c8:	201f      	movs	r0, #31
   840ca:	4b05      	ldr	r3, [pc, #20]	; (840e0 <ui_process+0x70>)
   840cc:	4798      	blx	r3
		//LED_Off(LED2_GPIO);
	}
}
   840ce:	bf00      	nop
   840d0:	3708      	adds	r7, #8
   840d2:	46bd      	mov	sp, r7
   840d4:	bd80      	pop	{r7, pc}
   840d6:	bf00      	nop
   840d8:	10624dd3 	.word	0x10624dd3
   840dc:	0008227d 	.word	0x0008227d
   840e0:	00082225 	.word	0x00082225

000840e4 <__libc_init_array>:
   840e4:	b570      	push	{r4, r5, r6, lr}
   840e6:	4e0f      	ldr	r6, [pc, #60]	; (84124 <__libc_init_array+0x40>)
   840e8:	4d0f      	ldr	r5, [pc, #60]	; (84128 <__libc_init_array+0x44>)
   840ea:	1b76      	subs	r6, r6, r5
   840ec:	10b6      	asrs	r6, r6, #2
   840ee:	bf18      	it	ne
   840f0:	2400      	movne	r4, #0
   840f2:	d005      	beq.n	84100 <__libc_init_array+0x1c>
   840f4:	3401      	adds	r4, #1
   840f6:	f855 3b04 	ldr.w	r3, [r5], #4
   840fa:	4798      	blx	r3
   840fc:	42a6      	cmp	r6, r4
   840fe:	d1f9      	bne.n	840f4 <__libc_init_array+0x10>
   84100:	4e0a      	ldr	r6, [pc, #40]	; (8412c <__libc_init_array+0x48>)
   84102:	4d0b      	ldr	r5, [pc, #44]	; (84130 <__libc_init_array+0x4c>)
   84104:	f000 f8cc 	bl	842a0 <_init>
   84108:	1b76      	subs	r6, r6, r5
   8410a:	10b6      	asrs	r6, r6, #2
   8410c:	bf18      	it	ne
   8410e:	2400      	movne	r4, #0
   84110:	d006      	beq.n	84120 <__libc_init_array+0x3c>
   84112:	3401      	adds	r4, #1
   84114:	f855 3b04 	ldr.w	r3, [r5], #4
   84118:	4798      	blx	r3
   8411a:	42a6      	cmp	r6, r4
   8411c:	d1f9      	bne.n	84112 <__libc_init_array+0x2e>
   8411e:	bd70      	pop	{r4, r5, r6, pc}
   84120:	bd70      	pop	{r4, r5, r6, pc}
   84122:	bf00      	nop
   84124:	000842ac 	.word	0x000842ac
   84128:	000842ac 	.word	0x000842ac
   8412c:	000842b4 	.word	0x000842b4
   84130:	000842ac 	.word	0x000842ac

00084134 <register_fini>:
   84134:	4b02      	ldr	r3, [pc, #8]	; (84140 <register_fini+0xc>)
   84136:	b113      	cbz	r3, 8413e <register_fini+0xa>
   84138:	4802      	ldr	r0, [pc, #8]	; (84144 <register_fini+0x10>)
   8413a:	f000 b805 	b.w	84148 <atexit>
   8413e:	4770      	bx	lr
   84140:	00000000 	.word	0x00000000
   84144:	00084155 	.word	0x00084155

00084148 <atexit>:
   84148:	2300      	movs	r3, #0
   8414a:	4601      	mov	r1, r0
   8414c:	461a      	mov	r2, r3
   8414e:	4618      	mov	r0, r3
   84150:	f000 b81e 	b.w	84190 <__register_exitproc>

00084154 <__libc_fini_array>:
   84154:	b538      	push	{r3, r4, r5, lr}
   84156:	4c0a      	ldr	r4, [pc, #40]	; (84180 <__libc_fini_array+0x2c>)
   84158:	4d0a      	ldr	r5, [pc, #40]	; (84184 <__libc_fini_array+0x30>)
   8415a:	1b64      	subs	r4, r4, r5
   8415c:	10a4      	asrs	r4, r4, #2
   8415e:	d00a      	beq.n	84176 <__libc_fini_array+0x22>
   84160:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   84164:	3b01      	subs	r3, #1
   84166:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8416a:	3c01      	subs	r4, #1
   8416c:	f855 3904 	ldr.w	r3, [r5], #-4
   84170:	4798      	blx	r3
   84172:	2c00      	cmp	r4, #0
   84174:	d1f9      	bne.n	8416a <__libc_fini_array+0x16>
   84176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8417a:	f000 b89b 	b.w	842b4 <_fini>
   8417e:	bf00      	nop
   84180:	000842c4 	.word	0x000842c4
   84184:	000842c0 	.word	0x000842c0

00084188 <__retarget_lock_acquire_recursive>:
   84188:	4770      	bx	lr
   8418a:	bf00      	nop

0008418c <__retarget_lock_release_recursive>:
   8418c:	4770      	bx	lr
   8418e:	bf00      	nop

00084190 <__register_exitproc>:
   84190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84194:	4d2c      	ldr	r5, [pc, #176]	; (84248 <__register_exitproc+0xb8>)
   84196:	4606      	mov	r6, r0
   84198:	6828      	ldr	r0, [r5, #0]
   8419a:	4698      	mov	r8, r3
   8419c:	460f      	mov	r7, r1
   8419e:	4691      	mov	r9, r2
   841a0:	f7ff fff2 	bl	84188 <__retarget_lock_acquire_recursive>
   841a4:	4b29      	ldr	r3, [pc, #164]	; (8424c <__register_exitproc+0xbc>)
   841a6:	681c      	ldr	r4, [r3, #0]
   841a8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   841ac:	2b00      	cmp	r3, #0
   841ae:	d03e      	beq.n	8422e <__register_exitproc+0x9e>
   841b0:	685a      	ldr	r2, [r3, #4]
   841b2:	2a1f      	cmp	r2, #31
   841b4:	dc1c      	bgt.n	841f0 <__register_exitproc+0x60>
   841b6:	f102 0e01 	add.w	lr, r2, #1
   841ba:	b176      	cbz	r6, 841da <__register_exitproc+0x4a>
   841bc:	2101      	movs	r1, #1
   841be:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   841c2:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   841c6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   841ca:	4091      	lsls	r1, r2
   841cc:	4308      	orrs	r0, r1
   841ce:	2e02      	cmp	r6, #2
   841d0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   841d4:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   841d8:	d023      	beq.n	84222 <__register_exitproc+0x92>
   841da:	3202      	adds	r2, #2
   841dc:	f8c3 e004 	str.w	lr, [r3, #4]
   841e0:	6828      	ldr	r0, [r5, #0]
   841e2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   841e6:	f7ff ffd1 	bl	8418c <__retarget_lock_release_recursive>
   841ea:	2000      	movs	r0, #0
   841ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   841f0:	4b17      	ldr	r3, [pc, #92]	; (84250 <__register_exitproc+0xc0>)
   841f2:	b30b      	cbz	r3, 84238 <__register_exitproc+0xa8>
   841f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   841f8:	f3af 8000 	nop.w
   841fc:	4603      	mov	r3, r0
   841fe:	b1d8      	cbz	r0, 84238 <__register_exitproc+0xa8>
   84200:	2000      	movs	r0, #0
   84202:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   84206:	f04f 0e01 	mov.w	lr, #1
   8420a:	6058      	str	r0, [r3, #4]
   8420c:	6019      	str	r1, [r3, #0]
   8420e:	4602      	mov	r2, r0
   84210:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   84214:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   84218:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   8421c:	2e00      	cmp	r6, #0
   8421e:	d0dc      	beq.n	841da <__register_exitproc+0x4a>
   84220:	e7cc      	b.n	841bc <__register_exitproc+0x2c>
   84222:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   84226:	4301      	orrs	r1, r0
   84228:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   8422c:	e7d5      	b.n	841da <__register_exitproc+0x4a>
   8422e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   84232:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   84236:	e7bb      	b.n	841b0 <__register_exitproc+0x20>
   84238:	6828      	ldr	r0, [r5, #0]
   8423a:	f7ff ffa7 	bl	8418c <__retarget_lock_release_recursive>
   8423e:	f04f 30ff 	mov.w	r0, #4294967295
   84242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84246:	bf00      	nop
   84248:	200006d8 	.word	0x200006d8
   8424c:	0008429c 	.word	0x0008429c
   84250:	00000000 	.word	0x00000000
   84254:	00000000 	.word	0x00000000
   84258:	00000000 	.word	0x00000000
   8425c:	aaaaaa00 	.word	0xaaaaaa00
   84260:	aaaaaaaa 	.word	0xaaaaaaaa
   84264:	eeeeeeaa 	.word	0xeeeeeeaa
   84268:	eeeeeeee 	.word	0xeeeeeeee
   8426c:	fffffeee 	.word	0xfffffeee
   84270:	ffffffff 	.word	0xffffffff
   84274:	ffffffff 	.word	0xffffffff
   84278:	dfbf7fff 	.word	0xdfbf7fff
   8427c:	fdfbf7ef 	.word	0xfdfbf7ef
   84280:	dfbf7efc 	.word	0xdfbf7efc
   84284:	fdfbf7ef 	.word	0xfdfbf7ef
   84288:	0000007e 	.word	0x0000007e

0008428c <LED_DESCRIPTOR>:
   8428c:	0000001d 00000001 0000001f 00000001     ................

0008429c <_global_impure_ptr>:
   8429c:	200002b0                                ... 

000842a0 <_init>:
   842a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   842a2:	bf00      	nop
   842a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   842a6:	bc08      	pop	{r3}
   842a8:	469e      	mov	lr, r3
   842aa:	4770      	bx	lr

000842ac <__init_array_start>:
   842ac:	00084135 	.word	0x00084135

000842b0 <__frame_dummy_init_array_entry>:
   842b0:	000800e1                                ....

000842b4 <_fini>:
   842b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   842b6:	bf00      	nop
   842b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   842ba:	bc08      	pop	{r3}
   842bc:	469e      	mov	lr, r3
   842be:	4770      	bx	lr

000842c0 <__fini_array_start>:
   842c0:	000800bd 	.word	0x000800bd

Disassembly of section .relocate:

20000000 <SystemInit>:
{
20000000:	b480      	push	{r7}
20000002:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000004:	4b2a      	ldr	r3, [pc, #168]	; (200000b0 <SystemInit+0xb0>)
20000006:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000000a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2000000c:	4b29      	ldr	r3, [pc, #164]	; (200000b4 <SystemInit+0xb4>)
2000000e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20000012:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000014:	4b28      	ldr	r3, [pc, #160]	; (200000b8 <SystemInit+0xb8>)
20000016:	6a1b      	ldr	r3, [r3, #32]
20000018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2000001c:	2b00      	cmp	r3, #0
2000001e:	d109      	bne.n	20000034 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000020:	4b25      	ldr	r3, [pc, #148]	; (200000b8 <SystemInit+0xb8>)
20000022:	4a26      	ldr	r2, [pc, #152]	; (200000bc <SystemInit+0xbc>)
20000024:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000026:	bf00      	nop
20000028:	4b23      	ldr	r3, [pc, #140]	; (200000b8 <SystemInit+0xb8>)
2000002a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000002c:	f003 0301 	and.w	r3, r3, #1
20000030:	2b00      	cmp	r3, #0
20000032:	d0f9      	beq.n	20000028 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000034:	4b20      	ldr	r3, [pc, #128]	; (200000b8 <SystemInit+0xb8>)
20000036:	4a22      	ldr	r2, [pc, #136]	; (200000c0 <SystemInit+0xc0>)
20000038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2000003a:	bf00      	nop
2000003c:	4b1e      	ldr	r3, [pc, #120]	; (200000b8 <SystemInit+0xb8>)
2000003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000044:	2b00      	cmp	r3, #0
20000046:	d0f9      	beq.n	2000003c <SystemInit+0x3c>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000048:	4a1b      	ldr	r2, [pc, #108]	; (200000b8 <SystemInit+0xb8>)
2000004a:	4b1b      	ldr	r3, [pc, #108]	; (200000b8 <SystemInit+0xb8>)
2000004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000004e:	f023 0303 	bic.w	r3, r3, #3
20000052:	f043 0301 	orr.w	r3, r3, #1
20000056:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000058:	bf00      	nop
2000005a:	4b17      	ldr	r3, [pc, #92]	; (200000b8 <SystemInit+0xb8>)
2000005c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000005e:	f003 0308 	and.w	r3, r3, #8
20000062:	2b00      	cmp	r3, #0
20000064:	d0f9      	beq.n	2000005a <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000066:	4b14      	ldr	r3, [pc, #80]	; (200000b8 <SystemInit+0xb8>)
20000068:	4a16      	ldr	r2, [pc, #88]	; (200000c4 <SystemInit+0xc4>)
2000006a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2000006c:	bf00      	nop
2000006e:	4b12      	ldr	r3, [pc, #72]	; (200000b8 <SystemInit+0xb8>)
20000070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000072:	f003 0302 	and.w	r3, r3, #2
20000076:	2b00      	cmp	r3, #0
20000078:	d0f9      	beq.n	2000006e <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2000007a:	4b0f      	ldr	r3, [pc, #60]	; (200000b8 <SystemInit+0xb8>)
2000007c:	2211      	movs	r2, #17
2000007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000080:	bf00      	nop
20000082:	4b0d      	ldr	r3, [pc, #52]	; (200000b8 <SystemInit+0xb8>)
20000084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000086:	f003 0308 	and.w	r3, r3, #8
2000008a:	2b00      	cmp	r3, #0
2000008c:	d0f9      	beq.n	20000082 <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000008e:	4b0a      	ldr	r3, [pc, #40]	; (200000b8 <SystemInit+0xb8>)
20000090:	2212      	movs	r2, #18
20000092:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000094:	bf00      	nop
20000096:	4b08      	ldr	r3, [pc, #32]	; (200000b8 <SystemInit+0xb8>)
20000098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000009a:	f003 0308 	and.w	r3, r3, #8
2000009e:	2b00      	cmp	r3, #0
200000a0:	d0f9      	beq.n	20000096 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200000a2:	4b09      	ldr	r3, [pc, #36]	; (200000c8 <SystemInit+0xc8>)
200000a4:	4a09      	ldr	r2, [pc, #36]	; (200000cc <SystemInit+0xcc>)
200000a6:	601a      	str	r2, [r3, #0]
}
200000a8:	bf00      	nop
200000aa:	46bd      	mov	sp, r7
200000ac:	bc80      	pop	{r7}
200000ae:	4770      	bx	lr
200000b0:	400e0800 	.word	0x400e0800
200000b4:	400e0a00 	.word	0x400e0a00
200000b8:	400e0400 	.word	0x400e0400
200000bc:	00370809 	.word	0x00370809
200000c0:	01370809 	.word	0x01370809
200000c4:	200f3f01 	.word	0x200f3f01
200000c8:	200002ac 	.word	0x200002ac
200000cc:	05b8d800 	.word	0x05b8d800

200000d0 <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200000d0:	b480      	push	{r7}
200000d2:	b083      	sub	sp, #12
200000d4:	af00      	add	r7, sp, #0
200000d6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200000d8:	687b      	ldr	r3, [r7, #4]
200000da:	4a1f      	ldr	r2, [pc, #124]	; (20000158 <system_init_flash+0x88>)
200000dc:	4293      	cmp	r3, r2
200000de:	d806      	bhi.n	200000ee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200000e0:	4b1e      	ldr	r3, [pc, #120]	; (2000015c <system_init_flash+0x8c>)
200000e2:	2200      	movs	r2, #0
200000e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200000e6:	4b1e      	ldr	r3, [pc, #120]	; (20000160 <system_init_flash+0x90>)
200000e8:	2200      	movs	r2, #0
200000ea:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
	}
}
200000ec:	e02e      	b.n	2000014c <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200000ee:	687b      	ldr	r3, [r7, #4]
200000f0:	4a1c      	ldr	r2, [pc, #112]	; (20000164 <system_init_flash+0x94>)
200000f2:	4293      	cmp	r3, r2
200000f4:	d808      	bhi.n	20000108 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200000f6:	4b19      	ldr	r3, [pc, #100]	; (2000015c <system_init_flash+0x8c>)
200000f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200000fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200000fe:	4b18      	ldr	r3, [pc, #96]	; (20000160 <system_init_flash+0x90>)
20000100:	f44f 7280 	mov.w	r2, #256	; 0x100
20000104:	601a      	str	r2, [r3, #0]
}
20000106:	e021      	b.n	2000014c <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20000108:	687b      	ldr	r3, [r7, #4]
2000010a:	4a17      	ldr	r2, [pc, #92]	; (20000168 <system_init_flash+0x98>)
2000010c:	4293      	cmp	r3, r2
2000010e:	d808      	bhi.n	20000122 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20000110:	4b12      	ldr	r3, [pc, #72]	; (2000015c <system_init_flash+0x8c>)
20000112:	f44f 7200 	mov.w	r2, #512	; 0x200
20000116:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000118:	4b11      	ldr	r3, [pc, #68]	; (20000160 <system_init_flash+0x90>)
2000011a:	f44f 7200 	mov.w	r2, #512	; 0x200
2000011e:	601a      	str	r2, [r3, #0]
}
20000120:	e014      	b.n	2000014c <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20000122:	687b      	ldr	r3, [r7, #4]
20000124:	4a11      	ldr	r2, [pc, #68]	; (2000016c <system_init_flash+0x9c>)
20000126:	4293      	cmp	r3, r2
20000128:	d808      	bhi.n	2000013c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2000012a:	4b0c      	ldr	r3, [pc, #48]	; (2000015c <system_init_flash+0x8c>)
2000012c:	f44f 7240 	mov.w	r2, #768	; 0x300
20000130:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20000132:	4b0b      	ldr	r3, [pc, #44]	; (20000160 <system_init_flash+0x90>)
20000134:	f44f 7240 	mov.w	r2, #768	; 0x300
20000138:	601a      	str	r2, [r3, #0]
}
2000013a:	e007      	b.n	2000014c <system_init_flash+0x7c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2000013c:	4b07      	ldr	r3, [pc, #28]	; (2000015c <system_init_flash+0x8c>)
2000013e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20000142:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000144:	4b06      	ldr	r3, [pc, #24]	; (20000160 <system_init_flash+0x90>)
20000146:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000014a:	601a      	str	r2, [r3, #0]
}
2000014c:	bf00      	nop
2000014e:	370c      	adds	r7, #12
20000150:	46bd      	mov	sp, r7
20000152:	bc80      	pop	{r7}
20000154:	4770      	bx	lr
20000156:	bf00      	nop
20000158:	016e35ff 	.word	0x016e35ff
2000015c:	400e0800 	.word	0x400e0800
20000160:	400e0a00 	.word	0x400e0a00
20000164:	026259ff 	.word	0x026259ff
20000168:	044aa1ff 	.word	0x044aa1ff
2000016c:	0501bcff 	.word	0x0501bcff

20000170 <usb_serial_number>:
20000170:	30303030 30303030 30303030 44414544     000000000000DEAD
20000180:	46454542 00000000 00000000 00000000     BEEF............
20000190:	00000100                                         .

20000191 <main_b_vendor_enable>:
20000191:	00000001                                         ...

20000194 <xram>:
20000194:	60000000                                ...`

20000198 <udi_api_vendor>:
20000198:	00082ac5 00082b05 00082b21 00082b75     .*...+..!+..u+..
200001a8:	00000000                                ....

200001ac <udc_string_desc_languageid>:
200001ac:	04090304                                ....

200001b0 <udc_string_manufacturer_name>:
200001b0:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
200001c0:	636e4920 0000002e                        Inc....

200001c8 <udc_string_product_name>:
200001c8:	6c6c6142 69747369 65472063 5743206c     Ballistic Gel CW
200001d8:	00313235                                521.

200001dc <udc_string_desc>:
200001dc:	00000300 00000000 00000000 00000000     ................
200001ec:	00000000 00000000 00000000 00000000     ................
200001fc:	00000000 00000000 00000000 00000000     ................
2000020c:	00000000 00000000 00000000 00000000     ................
2000021c:	00010000                                         ..

2000021e <g_interrupt_enabled>:
2000021e:	01120001                                         ..

20000220 <udc_device_desc>:
20000220:	02000112 40000000 c5212b3e 02010100     .......@>+!.....
20000230:	00000103                                ....

20000234 <udc_device_qual>:
20000234:	0200060a 40000000 00000001              .......@....

20000240 <udc_desc_fs>:
20000240:	00200209 80000101 000409fa ffff0200     .. .............
20000250:	050700ff 00400281 02050700 00004002     ......@......@..

20000260 <udc_desc_hs>:
20000260:	00200209 80000101 000409fa ffff0200     .. .............
20000270:	050700ff 02000281 02050700 00020002     ................

20000280 <udi_apis>:
20000280:	20000198                                ... 

20000284 <udc_config_lsfs>:
20000284:	20000240 20000280                       @.. ... 

2000028c <udc_config_hs>:
2000028c:	20000260 20000280                       `.. ... 

20000294 <udc_config>:
20000294:	20000220 20000284 20000220 20000234      .. ...  .. 4.. 
200002a4:	2000028c 00000000                       ... ....

200002ac <SystemCoreClock>:
200002ac:	003d0900                                ..=.

200002b0 <impure_data>:
200002b0:	00000000 2000059c 20000604 2000066c     ....... ... l.. 
200002c0:	00000000 00000000 00000000 00000000     ................
200002d0:	00000000 00000000 00000000 00000000     ................
200002e0:	00000000 00000000 00000000 00000000     ................
200002f0:	00000000 00000000 00000000 00000000     ................
20000300:	00000000 00000000 00000000 00000000     ................
20000310:	00000000 00000000 00000000 00000000     ................
20000320:	00000000 00000000 00000000 00000000     ................
20000330:	00000000 00000000 00000000 00000000     ................
20000340:	00000000 00000000 00000000 00000000     ................
20000350:	00000000 00000000 00000001 00000000     ................
20000360:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
20000370:	00000000 00000000 00000000 00000000     ................
20000380:	00000000 00000000 00000000 00000000     ................
20000390:	00000000 00000000 00000000 00000000     ................
200003a0:	00000000 00000000 00000000 00000000     ................
200003b0:	00000000 00000000 00000000 00000000     ................
200003c0:	00000000 00000000 00000000 00000000     ................
200003d0:	00000000 00000000 00000000 00000000     ................
200003e0:	00000000 00000000 00000000 00000000     ................
200003f0:	00000000 00000000 00000000 00000000     ................
20000400:	00000000 00000000 00000000 00000000     ................
20000410:	00000000 00000000 00000000 00000000     ................
20000420:	00000000 00000000 00000000 00000000     ................
20000430:	00000000 00000000 00000000 00000000     ................
20000440:	00000000 00000000 00000000 00000000     ................
20000450:	00000000 00000000 00000000 00000000     ................
20000460:	00000000 00000000 00000000 00000000     ................
20000470:	00000000 00000000 00000000 00000000     ................
20000480:	00000000 00000000 00000000 00000000     ................
20000490:	00000000 00000000 00000000 00000000     ................
200004a0:	00000000 00000000 00000000 00000000     ................
200004b0:	00000000 00000000 00000000 00000000     ................
200004c0:	00000000 00000000 00000000 00000000     ................
200004d0:	00000000 00000000 00000000 00000000     ................
200004e0:	00000000 00000000 00000000 00000000     ................
200004f0:	00000000 00000000 00000000 00000000     ................
20000500:	00000000 00000000 00000000 00000000     ................
20000510:	00000000 00000000 00000000 00000000     ................
20000520:	00000000 00000000 00000000 00000000     ................
20000530:	00000000 00000000 00000000 00000000     ................
20000540:	00000000 00000000 00000000 00000000     ................
20000550:	00000000 00000000 00000000 00000000     ................
20000560:	00000000 00000000 00000000 00000000     ................
20000570:	00000000 00000000 00000000 00000000     ................
20000580:	00000000 00000000 00000000 00000000     ................
20000590:	00000000 00000000 00000000 00000000     ................
200005a0:	00000000 00000000 00000000 00000000     ................
200005b0:	00000000 00000000 00000000 00000000     ................
200005c0:	00000000 00000000 00000000 00000000     ................
200005d0:	00000000 00000000 00000000 00000000     ................
200005e0:	00000000 00000000 00000000 00000000     ................
200005f0:	00000000 00000000 00000000 00000000     ................
20000600:	00000000 00000000 00000000 00000000     ................
20000610:	00000000 00000000 00000000 00000000     ................
20000620:	00000000 00000000 00000000 00000000     ................
20000630:	00000000 00000000 00000000 00000000     ................
20000640:	00000000 00000000 00000000 00000000     ................
20000650:	00000000 00000000 00000000 00000000     ................
20000660:	00000000 00000000 00000000 00000000     ................
20000670:	00000000 00000000 00000000 00000000     ................
20000680:	00000000 00000000 00000000 00000000     ................
20000690:	00000000 00000000 00000000 00000000     ................
200006a0:	00000000 00000000 00000000 00000000     ................
200006b0:	00000000 00000000 00000000 00000000     ................
200006c0:	00000000 00000000 00000000 00000000     ................
200006d0:	00000000 00000000                       ........

200006d8 <__atexit_recursive_mutex>:
200006d8:	20000c6c                                l.. 
