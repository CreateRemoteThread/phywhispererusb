
cw570-CW570.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000057ac  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000007dc  20000000  000857ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000005bc  200007dc  00085f88  000207dc  2**2
                  ALLOC
  3 .stack        00000400  20080000  20080000  00030000  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000207dc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020805  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001e4b1  00000000  00000000  0002085e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b12  00000000  00000000  0003ed0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000084ea  00000000  00000000  00042821  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f78  00000000  00000000  0004ad0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e28  00000000  00000000  0004bc83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017b38  00000000  00000000  0004caab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000116b7  00000000  00000000  000645e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005837d  00000000  00000000  00075c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000042e0  00000000  00000000  000ce018  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 04 08 20 f9 32 08 00 5d 41 08 00 5d 41 08 00     ... .2..]A..]A..
   80010:	5d 41 08 00 5d 41 08 00 5d 41 08 00 00 00 00 00     ]A..]A..]A......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 5d 41 08 00     ............]A..
   80030:	5d 41 08 00 00 00 00 00 5d 41 08 00 5d 41 08 00     ]A......]A..]A..
   80040:	5d 41 08 00 5d 41 08 00 5d 41 08 00 5d 41 08 00     ]A..]A..]A..]A..
   80050:	5d 41 08 00 5d 41 08 00 5d 41 08 00 5d 41 08 00     ]A..]A..]A..]A..
   80060:	5d 41 08 00 5d 41 08 00 bd 16 08 00 d5 16 08 00     ]A..]A..........
   80070:	5d 41 08 00 5d 41 08 00 5d 41 08 00 5d 41 08 00     ]A..]A..]A..]A..
   80080:	5d 41 08 00 5d 41 08 00 5d 41 08 00 5d 41 08 00     ]A..]A..]A..]A..
   80090:	5d 41 08 00 5d 41 08 00 5d 41 08 00 5d 41 08 00     ]A..]A..]A..]A..
   800a0:	5d 41 08 00 5d 41 08 00 5d 41 08 00 5d 41 08 00     ]A..]A..]A..]A..
   800b0:	5d 41 08 00 c1 18 08 00 5d 41 08 00                 ]A......]A..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	200007dc 	.word	0x200007dc
   800d8:	00000000 	.word	0x00000000
   800dc:	000857ac 	.word	0x000857ac

000800e0 <frame_dummy>:
   800e0:	4b0c      	ldr	r3, [pc, #48]	; (80114 <frame_dummy+0x34>)
   800e2:	b143      	cbz	r3, 800f6 <frame_dummy+0x16>
   800e4:	480c      	ldr	r0, [pc, #48]	; (80118 <frame_dummy+0x38>)
   800e6:	b510      	push	{r4, lr}
   800e8:	490c      	ldr	r1, [pc, #48]	; (8011c <frame_dummy+0x3c>)
   800ea:	f3af 8000 	nop.w
   800ee:	480c      	ldr	r0, [pc, #48]	; (80120 <frame_dummy+0x40>)
   800f0:	6803      	ldr	r3, [r0, #0]
   800f2:	b923      	cbnz	r3, 800fe <frame_dummy+0x1e>
   800f4:	bd10      	pop	{r4, pc}
   800f6:	480a      	ldr	r0, [pc, #40]	; (80120 <frame_dummy+0x40>)
   800f8:	6803      	ldr	r3, [r0, #0]
   800fa:	b933      	cbnz	r3, 8010a <frame_dummy+0x2a>
   800fc:	4770      	bx	lr
   800fe:	4b09      	ldr	r3, [pc, #36]	; (80124 <frame_dummy+0x44>)
   80100:	2b00      	cmp	r3, #0
   80102:	d0f7      	beq.n	800f4 <frame_dummy+0x14>
   80104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80108:	4718      	bx	r3
   8010a:	4b06      	ldr	r3, [pc, #24]	; (80124 <frame_dummy+0x44>)
   8010c:	2b00      	cmp	r3, #0
   8010e:	d0f5      	beq.n	800fc <frame_dummy+0x1c>
   80110:	4718      	bx	r3
   80112:	bf00      	nop
   80114:	00000000 	.word	0x00000000
   80118:	000857ac 	.word	0x000857ac
   8011c:	200007e0 	.word	0x200007e0
   80120:	000857ac 	.word	0x000857ac
   80124:	00000000 	.word	0x00000000

00080128 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   80128:	b580      	push	{r7, lr}
   8012a:	b082      	sub	sp, #8
   8012c:	af00      	add	r7, sp, #0
   8012e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80130:	687b      	ldr	r3, [r7, #4]
   80132:	2b07      	cmp	r3, #7
   80134:	d82e      	bhi.n	80194 <osc_enable+0x6c>
   80136:	a201      	add	r2, pc, #4	; (adr r2, 8013c <osc_enable+0x14>)
   80138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8013c:	00080193 	.word	0x00080193
   80140:	0008015d 	.word	0x0008015d
   80144:	00080165 	.word	0x00080165
   80148:	0008016d 	.word	0x0008016d
   8014c:	00080175 	.word	0x00080175
   80150:	0008017d 	.word	0x0008017d
   80154:	00080185 	.word	0x00080185
   80158:	0008018d 	.word	0x0008018d
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   8015c:	2000      	movs	r0, #0
   8015e:	4b0f      	ldr	r3, [pc, #60]	; (8019c <osc_enable+0x74>)
   80160:	4798      	blx	r3
		break;
   80162:	e017      	b.n	80194 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80164:	2001      	movs	r0, #1
   80166:	4b0d      	ldr	r3, [pc, #52]	; (8019c <osc_enable+0x74>)
   80168:	4798      	blx	r3
		break;
   8016a:	e013      	b.n	80194 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   8016c:	2000      	movs	r0, #0
   8016e:	4b0c      	ldr	r3, [pc, #48]	; (801a0 <osc_enable+0x78>)
   80170:	4798      	blx	r3
		break;
   80172:	e00f      	b.n	80194 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80174:	2010      	movs	r0, #16
   80176:	4b0a      	ldr	r3, [pc, #40]	; (801a0 <osc_enable+0x78>)
   80178:	4798      	blx	r3
		break;
   8017a:	e00b      	b.n	80194 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   8017c:	2020      	movs	r0, #32
   8017e:	4b08      	ldr	r3, [pc, #32]	; (801a0 <osc_enable+0x78>)
   80180:	4798      	blx	r3
		break;
   80182:	e007      	b.n	80194 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80184:	203e      	movs	r0, #62	; 0x3e
   80186:	4b07      	ldr	r3, [pc, #28]	; (801a4 <osc_enable+0x7c>)
   80188:	4798      	blx	r3
				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
		break;
   8018a:	e003      	b.n	80194 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_osc_bypass_main_xtal();
   8018c:	4b06      	ldr	r3, [pc, #24]	; (801a8 <osc_enable+0x80>)
   8018e:	4798      	blx	r3
		break;
   80190:	e000      	b.n	80194 <osc_enable+0x6c>
		break;
   80192:	bf00      	nop
	}
}
   80194:	bf00      	nop
   80196:	3708      	adds	r7, #8
   80198:	46bd      	mov	sp, r7
   8019a:	bd80      	pop	{r7, pc}
   8019c:	000837f1 	.word	0x000837f1
   801a0:	0008385d 	.word	0x0008385d
   801a4:	000838d1 	.word	0x000838d1
   801a8:	0008391d 	.word	0x0008391d

000801ac <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   801ac:	b580      	push	{r7, lr}
   801ae:	b082      	sub	sp, #8
   801b0:	af00      	add	r7, sp, #0
   801b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   801b4:	687b      	ldr	r3, [r7, #4]
   801b6:	2b07      	cmp	r3, #7
   801b8:	d82f      	bhi.n	8021a <osc_is_ready+0x6e>
   801ba:	a201      	add	r2, pc, #4	; (adr r2, 801c0 <osc_is_ready+0x14>)
   801bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   801c0:	000801e1 	.word	0x000801e1
   801c4:	000801e5 	.word	0x000801e5
   801c8:	000801e5 	.word	0x000801e5
   801cc:	000801f7 	.word	0x000801f7
   801d0:	000801f7 	.word	0x000801f7
   801d4:	000801f7 	.word	0x000801f7
   801d8:	00080209 	.word	0x00080209
   801dc:	00080209 	.word	0x00080209
	case OSC_SLCK_32K_RC:
		return 1;
   801e0:	2301      	movs	r3, #1
   801e2:	e01b      	b.n	8021c <osc_is_ready+0x70>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   801e4:	4b0f      	ldr	r3, [pc, #60]	; (80224 <osc_is_ready+0x78>)
   801e6:	4798      	blx	r3
   801e8:	4603      	mov	r3, r0
   801ea:	2b00      	cmp	r3, #0
   801ec:	bf14      	ite	ne
   801ee:	2301      	movne	r3, #1
   801f0:	2300      	moveq	r3, #0
   801f2:	b2db      	uxtb	r3, r3
   801f4:	e012      	b.n	8021c <osc_is_ready+0x70>

	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();
   801f6:	4b0c      	ldr	r3, [pc, #48]	; (80228 <osc_is_ready+0x7c>)
   801f8:	4798      	blx	r3
   801fa:	4603      	mov	r3, r0
   801fc:	2b00      	cmp	r3, #0
   801fe:	bf14      	ite	ne
   80200:	2301      	movne	r3, #1
   80202:	2300      	moveq	r3, #0
   80204:	b2db      	uxtb	r3, r3
   80206:	e009      	b.n	8021c <osc_is_ready+0x70>

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   80208:	4b08      	ldr	r3, [pc, #32]	; (8022c <osc_is_ready+0x80>)
   8020a:	4798      	blx	r3
   8020c:	4603      	mov	r3, r0
   8020e:	2b00      	cmp	r3, #0
   80210:	bf14      	ite	ne
   80212:	2301      	movne	r3, #1
   80214:	2300      	moveq	r3, #0
   80216:	b2db      	uxtb	r3, r3
   80218:	e000      	b.n	8021c <osc_is_ready+0x70>
	}

	return 0;
   8021a:	2300      	movs	r3, #0
}
   8021c:	4618      	mov	r0, r3
   8021e:	3708      	adds	r7, #8
   80220:	46bd      	mov	sp, r7
   80222:	bd80      	pop	{r7, pc}
   80224:	00083829 	.word	0x00083829
   80228:	000838b9 	.word	0x000838b9
   8022c:	00083969 	.word	0x00083969

00080230 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80230:	b480      	push	{r7}
   80232:	b083      	sub	sp, #12
   80234:	af00      	add	r7, sp, #0
   80236:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80238:	687b      	ldr	r3, [r7, #4]
   8023a:	2b07      	cmp	r3, #7
   8023c:	d823      	bhi.n	80286 <osc_get_rate+0x56>
   8023e:	a201      	add	r2, pc, #4	; (adr r2, 80244 <osc_get_rate+0x14>)
   80240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80244:	00080265 	.word	0x00080265
   80248:	0008026b 	.word	0x0008026b
   8024c:	0008026f 	.word	0x0008026f
   80250:	00080273 	.word	0x00080273
   80254:	00080277 	.word	0x00080277
   80258:	0008027b 	.word	0x0008027b
   8025c:	0008027f 	.word	0x0008027f
   80260:	00080283 	.word	0x00080283
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80264:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80268:	e00e      	b.n	80288 <osc_get_rate+0x58>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8026a:	2300      	movs	r3, #0
   8026c:	e00c      	b.n	80288 <osc_get_rate+0x58>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   8026e:	2300      	movs	r3, #0
   80270:	e00a      	b.n	80288 <osc_get_rate+0x58>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80272:	4b08      	ldr	r3, [pc, #32]	; (80294 <osc_get_rate+0x64>)
   80274:	e008      	b.n	80288 <osc_get_rate+0x58>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80276:	4b08      	ldr	r3, [pc, #32]	; (80298 <osc_get_rate+0x68>)
   80278:	e006      	b.n	80288 <osc_get_rate+0x58>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8027a:	4b08      	ldr	r3, [pc, #32]	; (8029c <osc_get_rate+0x6c>)
   8027c:	e004      	b.n	80288 <osc_get_rate+0x58>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8027e:	4b07      	ldr	r3, [pc, #28]	; (8029c <osc_get_rate+0x6c>)
   80280:	e002      	b.n	80288 <osc_get_rate+0x58>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80282:	4b06      	ldr	r3, [pc, #24]	; (8029c <osc_get_rate+0x6c>)
   80284:	e000      	b.n	80288 <osc_get_rate+0x58>
	}

	return 0;
   80286:	2300      	movs	r3, #0
}
   80288:	4618      	mov	r0, r3
   8028a:	370c      	adds	r7, #12
   8028c:	46bd      	mov	sp, r7
   8028e:	bc80      	pop	{r7}
   80290:	4770      	bx	lr
   80292:	bf00      	nop
   80294:	003d0900 	.word	0x003d0900
   80298:	007a1200 	.word	0x007a1200
   8029c:	00b71b00 	.word	0x00b71b00

000802a0 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   802a0:	b580      	push	{r7, lr}
   802a2:	b082      	sub	sp, #8
   802a4:	af00      	add	r7, sp, #0
   802a6:	4603      	mov	r3, r0
   802a8:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   802aa:	bf00      	nop
   802ac:	79fb      	ldrb	r3, [r7, #7]
   802ae:	4618      	mov	r0, r3
   802b0:	4b05      	ldr	r3, [pc, #20]	; (802c8 <osc_wait_ready+0x28>)
   802b2:	4798      	blx	r3
   802b4:	4603      	mov	r3, r0
   802b6:	f083 0301 	eor.w	r3, r3, #1
   802ba:	b2db      	uxtb	r3, r3
   802bc:	2b00      	cmp	r3, #0
   802be:	d1f5      	bne.n	802ac <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   802c0:	bf00      	nop
   802c2:	3708      	adds	r7, #8
   802c4:	46bd      	mov	sp, r7
   802c6:	bd80      	pop	{r7, pc}
   802c8:	000801ad 	.word	0x000801ad

000802cc <pll_config_init>:
 *       hardware mul+1 is hidden in this implementation. Use mul as mul
 *       effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802cc:	b580      	push	{r7, lr}
   802ce:	b086      	sub	sp, #24
   802d0:	af00      	add	r7, sp, #0
   802d2:	60f8      	str	r0, [r7, #12]
   802d4:	607a      	str	r2, [r7, #4]
   802d6:	603b      	str	r3, [r7, #0]
   802d8:	460b      	mov	r3, r1
   802da:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802dc:	687b      	ldr	r3, [r7, #4]
   802de:	2b00      	cmp	r3, #0
   802e0:	d107      	bne.n	802f2 <pll_config_init+0x26>
   802e2:	683b      	ldr	r3, [r7, #0]
   802e4:	2b00      	cmp	r3, #0
   802e6:	d104      	bne.n	802f2 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   802e8:	68fb      	ldr	r3, [r7, #12]
   802ea:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   802ee:	601a      	str	r2, [r3, #0]
   802f0:	e019      	b.n	80326 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   802f2:	7afb      	ldrb	r3, [r7, #11]
   802f4:	4618      	mov	r0, r3
   802f6:	4b0e      	ldr	r3, [pc, #56]	; (80330 <pll_config_init+0x64>)
   802f8:	4798      	blx	r3
   802fa:	4602      	mov	r2, r0
   802fc:	687b      	ldr	r3, [r7, #4]
   802fe:	fbb2 f3f3 	udiv	r3, r2, r3
   80302:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   80304:	697b      	ldr	r3, [r7, #20]
   80306:	683a      	ldr	r2, [r7, #0]
   80308:	fb02 f303 	mul.w	r3, r2, r3
   8030c:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   8030e:	683b      	ldr	r3, [r7, #0]
   80310:	3b01      	subs	r3, #1
   80312:	041a      	lsls	r2, r3, #16
   80314:	4b07      	ldr	r3, [pc, #28]	; (80334 <pll_config_init+0x68>)
   80316:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   80318:	687a      	ldr	r2, [r7, #4]
   8031a:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   8031c:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   8031e:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   80322:	68fb      	ldr	r3, [r7, #12]
   80324:	601a      	str	r2, [r3, #0]
			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
   80326:	bf00      	nop
   80328:	3718      	adds	r7, #24
   8032a:	46bd      	mov	sp, r7
   8032c:	bd80      	pop	{r7, pc}
   8032e:	bf00      	nop
   80330:	00080231 	.word	0x00080231
   80334:	07ff0000 	.word	0x07ff0000

00080338 <pll_enable>:
	}
}

static inline void pll_enable(const struct pll_config *p_cfg,
		uint32_t ul_pll_id)
{
   80338:	b580      	push	{r7, lr}
   8033a:	b082      	sub	sp, #8
   8033c:	af00      	add	r7, sp, #0
   8033e:	6078      	str	r0, [r7, #4]
   80340:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80342:	683b      	ldr	r3, [r7, #0]
   80344:	2b00      	cmp	r3, #0
   80346:	d108      	bne.n	8035a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80348:	4b09      	ldr	r3, [pc, #36]	; (80370 <pll_enable+0x38>)
   8034a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8034c:	4a09      	ldr	r2, [pc, #36]	; (80374 <pll_enable+0x3c>)
   8034e:	687b      	ldr	r3, [r7, #4]
   80350:	681b      	ldr	r3, [r3, #0]
   80352:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80356:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   80358:	e005      	b.n	80366 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8035a:	4a06      	ldr	r2, [pc, #24]	; (80374 <pll_enable+0x3c>)
   8035c:	687b      	ldr	r3, [r7, #4]
   8035e:	681b      	ldr	r3, [r3, #0]
   80360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80364:	61d3      	str	r3, [r2, #28]
}
   80366:	bf00      	nop
   80368:	3708      	adds	r7, #8
   8036a:	46bd      	mov	sp, r7
   8036c:	bd80      	pop	{r7, pc}
   8036e:	bf00      	nop
   80370:	000839d9 	.word	0x000839d9
   80374:	400e0400 	.word	0x400e0400

00080378 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80378:	b580      	push	{r7, lr}
   8037a:	b082      	sub	sp, #8
   8037c:	af00      	add	r7, sp, #0
   8037e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80380:	687b      	ldr	r3, [r7, #4]
   80382:	2b00      	cmp	r3, #0
   80384:	d103      	bne.n	8038e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   80386:	4b05      	ldr	r3, [pc, #20]	; (8039c <pll_is_locked+0x24>)
   80388:	4798      	blx	r3
   8038a:	4603      	mov	r3, r0
   8038c:	e002      	b.n	80394 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   8038e:	4b04      	ldr	r3, [pc, #16]	; (803a0 <pll_is_locked+0x28>)
   80390:	4798      	blx	r3
   80392:	4603      	mov	r3, r0
	}
}
   80394:	4618      	mov	r0, r3
   80396:	3708      	adds	r7, #8
   80398:	46bd      	mov	sp, r7
   8039a:	bd80      	pop	{r7, pc}
   8039c:	000839f1 	.word	0x000839f1
   803a0:	00083a25 	.word	0x00083a25

000803a4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   803a4:	b580      	push	{r7, lr}
   803a6:	b082      	sub	sp, #8
   803a8:	af00      	add	r7, sp, #0
   803aa:	4603      	mov	r3, r0
   803ac:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   803ae:	79fb      	ldrb	r3, [r7, #7]
   803b0:	3b03      	subs	r3, #3
   803b2:	2b04      	cmp	r3, #4
   803b4:	d808      	bhi.n	803c8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   803b6:	79fb      	ldrb	r3, [r7, #7]
   803b8:	4618      	mov	r0, r3
   803ba:	4b06      	ldr	r3, [pc, #24]	; (803d4 <pll_enable_source+0x30>)
   803bc:	4798      	blx	r3
		osc_wait_ready(e_src);
   803be:	79fb      	ldrb	r3, [r7, #7]
   803c0:	4618      	mov	r0, r3
   803c2:	4b05      	ldr	r3, [pc, #20]	; (803d8 <pll_enable_source+0x34>)
   803c4:	4798      	blx	r3
		break;
   803c6:	e000      	b.n	803ca <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803c8:	bf00      	nop
	}
}
   803ca:	bf00      	nop
   803cc:	3708      	adds	r7, #8
   803ce:	46bd      	mov	sp, r7
   803d0:	bd80      	pop	{r7, pc}
   803d2:	bf00      	nop
   803d4:	00080129 	.word	0x00080129
   803d8:	000802a1 	.word	0x000802a1

000803dc <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int ul_pll_id)
{
   803dc:	b590      	push	{r4, r7, lr}
   803de:	b085      	sub	sp, #20
   803e0:	af00      	add	r7, sp, #0
   803e2:	6078      	str	r0, [r7, #4]
	struct pll_config pllcfg;

	if (pll_is_locked(ul_pll_id)) {
   803e4:	6878      	ldr	r0, [r7, #4]
   803e6:	4b21      	ldr	r3, [pc, #132]	; (8046c <pll_enable_config_defaults+0x90>)
   803e8:	4798      	blx	r3
   803ea:	4603      	mov	r3, r0
   803ec:	2b00      	cmp	r3, #0
   803ee:	d138      	bne.n	80462 <pll_enable_config_defaults+0x86>
		return; // Pll already running
	}
	switch (ul_pll_id) {
   803f0:	687b      	ldr	r3, [r7, #4]
   803f2:	2b00      	cmp	r3, #0
   803f4:	d002      	beq.n	803fc <pll_enable_config_defaults+0x20>
   803f6:	2b01      	cmp	r3, #1
   803f8:	d015      	beq.n	80426 <pll_enable_config_defaults+0x4a>
				CONFIG_PLL1_MUL);
		break;
#endif
	default:
		Assert(false);
		break;
   803fa:	e024      	b.n	80446 <pll_enable_config_defaults+0x6a>
		pll_enable_source(CONFIG_PLL0_SOURCE);
   803fc:	2006      	movs	r0, #6
   803fe:	4b1c      	ldr	r3, [pc, #112]	; (80470 <pll_enable_config_defaults+0x94>)
   80400:	4798      	blx	r3
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   80402:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   80406:	4b1b      	ldr	r3, [pc, #108]	; (80474 <pll_enable_config_defaults+0x98>)
   80408:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   8040a:	bf00      	nop
   8040c:	4b1a      	ldr	r3, [pc, #104]	; (80478 <pll_enable_config_defaults+0x9c>)
   8040e:	4798      	blx	r3
   80410:	4603      	mov	r3, r0
   80412:	2b00      	cmp	r3, #0
   80414:	d0fa      	beq.n	8040c <pll_enable_config_defaults+0x30>
		pll_config_init(&pllcfg,
   80416:	f107 000c 	add.w	r0, r7, #12
   8041a:	2310      	movs	r3, #16
   8041c:	2201      	movs	r2, #1
   8041e:	2106      	movs	r1, #6
   80420:	4c16      	ldr	r4, [pc, #88]	; (8047c <pll_enable_config_defaults+0xa0>)
   80422:	47a0      	blx	r4
		break;
   80424:	e00f      	b.n	80446 <pll_enable_config_defaults+0x6a>
		if (pmc_osc_is_bypassed_main_xtal()) {
   80426:	4b16      	ldr	r3, [pc, #88]	; (80480 <pll_enable_config_defaults+0xa4>)
   80428:	4798      	blx	r3
   8042a:	4603      	mov	r3, r0
   8042c:	2b00      	cmp	r3, #0
   8042e:	d102      	bne.n	80436 <pll_enable_config_defaults+0x5a>
			pll_enable_source(CONFIG_PLL1_SOURCE);
   80430:	2006      	movs	r0, #6
   80432:	4b0f      	ldr	r3, [pc, #60]	; (80470 <pll_enable_config_defaults+0x94>)
   80434:	4798      	blx	r3
		pll_config_init(&pllcfg,
   80436:	f107 000c 	add.w	r0, r7, #12
   8043a:	2300      	movs	r3, #0
   8043c:	2200      	movs	r2, #0
   8043e:	2106      	movs	r1, #6
   80440:	4c0e      	ldr	r4, [pc, #56]	; (8047c <pll_enable_config_defaults+0xa0>)
   80442:	47a0      	blx	r4
		break;
   80444:	bf00      	nop
	}
	pll_enable(&pllcfg, ul_pll_id);
   80446:	f107 030c 	add.w	r3, r7, #12
   8044a:	6879      	ldr	r1, [r7, #4]
   8044c:	4618      	mov	r0, r3
   8044e:	4b0d      	ldr	r3, [pc, #52]	; (80484 <pll_enable_config_defaults+0xa8>)
   80450:	4798      	blx	r3
	while (!pll_is_locked(ul_pll_id));
   80452:	bf00      	nop
   80454:	6878      	ldr	r0, [r7, #4]
   80456:	4b05      	ldr	r3, [pc, #20]	; (8046c <pll_enable_config_defaults+0x90>)
   80458:	4798      	blx	r3
   8045a:	4603      	mov	r3, r0
   8045c:	2b00      	cmp	r3, #0
   8045e:	d0f9      	beq.n	80454 <pll_enable_config_defaults+0x78>
   80460:	e000      	b.n	80464 <pll_enable_config_defaults+0x88>
		return; // Pll already running
   80462:	bf00      	nop
}
   80464:	3714      	adds	r7, #20
   80466:	46bd      	mov	sp, r7
   80468:	bd90      	pop	{r4, r7, pc}
   8046a:	bf00      	nop
   8046c:	00080379 	.word	0x00080379
   80470:	000803a5 	.word	0x000803a5
   80474:	00083999 	.word	0x00083999
   80478:	00083981 	.word	0x00083981
   8047c:	000802cd 	.word	0x000802cd
   80480:	00083951 	.word	0x00083951
   80484:	00080339 	.word	0x00080339

00080488 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
   80488:	b480      	push	{r7}
   8048a:	b08d      	sub	sp, #52	; 0x34
   8048c:	af00      	add	r7, sp, #0
   8048e:	6078      	str	r0, [r7, #4]
   80490:	6039      	str	r1, [r7, #0]
   80492:	687b      	ldr	r3, [r7, #4]
   80494:	62fb      	str	r3, [r7, #44]	; 0x2c
   80496:	683b      	ldr	r3, [r7, #0]
   80498:	62bb      	str	r3, [r7, #40]	; 0x28
   8049a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8049c:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   8049e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   804a0:	095a      	lsrs	r2, r3, #5
   804a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   804a4:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   804a6:	6a3b      	ldr	r3, [r7, #32]
   804a8:	f003 031f 	and.w	r3, r3, #31
   804ac:	2101      	movs	r1, #1
   804ae:	fa01 f303 	lsl.w	r3, r1, r3
   804b2:	61fa      	str	r2, [r7, #28]
   804b4:	61bb      	str	r3, [r7, #24]
   804b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   804b8:	617b      	str	r3, [r7, #20]
   804ba:	69fb      	ldr	r3, [r7, #28]
   804bc:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   804be:	693b      	ldr	r3, [r7, #16]
   804c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   804c4:	f203 7306 	addw	r3, r3, #1798	; 0x706
   804c8:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
   804ca:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
   804cc:	697b      	ldr	r3, [r7, #20]
   804ce:	f003 0308 	and.w	r3, r3, #8
   804d2:	2b00      	cmp	r3, #0
   804d4:	d003      	beq.n	804de <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   804d6:	68fb      	ldr	r3, [r7, #12]
   804d8:	69ba      	ldr	r2, [r7, #24]
   804da:	665a      	str	r2, [r3, #100]	; 0x64
   804dc:	e002      	b.n	804e4 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
   804de:	68fb      	ldr	r3, [r7, #12]
   804e0:	69ba      	ldr	r2, [r7, #24]
   804e2:	661a      	str	r2, [r3, #96]	; 0x60
	} else {
		base->PIO_PPDDR = mask;
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   804e4:	697b      	ldr	r3, [r7, #20]
   804e6:	f003 0320 	and.w	r3, r3, #32
   804ea:	2b00      	cmp	r3, #0
   804ec:	d003      	beq.n	804f6 <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   804ee:	68fb      	ldr	r3, [r7, #12]
   804f0:	69ba      	ldr	r2, [r7, #24]
   804f2:	651a      	str	r2, [r3, #80]	; 0x50
   804f4:	e002      	b.n	804fc <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_MDDR = mask;
   804f6:	68fb      	ldr	r3, [r7, #12]
   804f8:	69ba      	ldr	r2, [r7, #24]
   804fa:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   804fc:	697b      	ldr	r3, [r7, #20]
   804fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   80502:	2b00      	cmp	r3, #0
   80504:	d003      	beq.n	8050e <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   80506:	68fb      	ldr	r3, [r7, #12]
   80508:	69ba      	ldr	r2, [r7, #24]
   8050a:	621a      	str	r2, [r3, #32]
   8050c:	e002      	b.n	80514 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_IFDR = mask;
   8050e:	68fb      	ldr	r3, [r7, #12]
   80510:	69ba      	ldr	r2, [r7, #24]
   80512:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
   80514:	697b      	ldr	r3, [r7, #20]
   80516:	f003 0380 	and.w	r3, r3, #128	; 0x80
   8051a:	2b00      	cmp	r3, #0
   8051c:	d004      	beq.n	80528 <ioport_set_pin_mode+0xa0>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   8051e:	68fb      	ldr	r3, [r7, #12]
   80520:	69ba      	ldr	r2, [r7, #24]
   80522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   80526:	e003      	b.n	80530 <ioport_set_pin_mode+0xa8>
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80528:	68fb      	ldr	r3, [r7, #12]
   8052a:	69ba      	ldr	r2, [r7, #24]
   8052c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_IFSCDR = mask;
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
   80530:	697b      	ldr	r3, [r7, #20]
   80532:	f003 0301 	and.w	r3, r3, #1
   80536:	2b00      	cmp	r3, #0
   80538:	d006      	beq.n	80548 <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   8053a:	68fb      	ldr	r3, [r7, #12]
   8053c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8053e:	69bb      	ldr	r3, [r7, #24]
   80540:	431a      	orrs	r2, r3
   80542:	68fb      	ldr	r3, [r7, #12]
   80544:	671a      	str	r2, [r3, #112]	; 0x70
	arch_ioport_set_pin_mode(pin, mode);
}
   80546:	e006      	b.n	80556 <ioport_set_pin_mode+0xce>
	} else {
		base->PIO_ABSR &= ~mask;
   80548:	68fb      	ldr	r3, [r7, #12]
   8054a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8054c:	69bb      	ldr	r3, [r7, #24]
   8054e:	43db      	mvns	r3, r3
   80550:	401a      	ands	r2, r3
   80552:	68fb      	ldr	r3, [r7, #12]
   80554:	671a      	str	r2, [r3, #112]	; 0x70
   80556:	bf00      	nop
   80558:	3734      	adds	r7, #52	; 0x34
   8055a:	46bd      	mov	sp, r7
   8055c:	bc80      	pop	{r7}
   8055e:	4770      	bx	lr

00080560 <sleepmgr_sleep>:
#endif /* CONFIG_SLEEPMGR_ENABLE */
//! @}


static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
   80560:	b580      	push	{r7, lr}
   80562:	b082      	sub	sp, #8
   80564:	af00      	add	r7, sp, #0
   80566:	4603      	mov	r3, r0
   80568:	71fb      	strb	r3, [r7, #7]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8056a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8056c:	f3bf 8f5f 	dmb	sy
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
   80570:	4b05      	ldr	r3, [pc, #20]	; (80588 <sleepmgr_sleep+0x28>)
   80572:	2200      	movs	r2, #0
   80574:	701a      	strb	r2, [r3, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
   80576:	79fb      	ldrb	r3, [r7, #7]
   80578:	4618      	mov	r0, r3
   8057a:	4b04      	ldr	r3, [pc, #16]	; (8058c <sleepmgr_sleep+0x2c>)
   8057c:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
   8057e:	bf00      	nop
   80580:	3708      	adds	r7, #8
   80582:	46bd      	mov	sp, r7
   80584:	bd80      	pop	{r7, pc}
   80586:	bf00      	nop
   80588:	2000031a 	.word	0x2000031a
   8058c:	00084f19 	.word	0x00084f19

00080590 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
   80590:	b480      	push	{r7}
   80592:	b083      	sub	sp, #12
   80594:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   80596:	2300      	movs	r3, #0
   80598:	71fb      	strb	r3, [r7, #7]
   8059a:	e006      	b.n	805aa <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
   8059c:	79fb      	ldrb	r3, [r7, #7]
   8059e:	4a08      	ldr	r2, [pc, #32]	; (805c0 <sleepmgr_init+0x30>)
   805a0:	2100      	movs	r1, #0
   805a2:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   805a4:	79fb      	ldrb	r3, [r7, #7]
   805a6:	3301      	adds	r3, #1
   805a8:	71fb      	strb	r3, [r7, #7]
   805aa:	79fb      	ldrb	r3, [r7, #7]
   805ac:	2b04      	cmp	r3, #4
   805ae:	d9f5      	bls.n	8059c <sleepmgr_init+0xc>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   805b0:	4b03      	ldr	r3, [pc, #12]	; (805c0 <sleepmgr_init+0x30>)
   805b2:	2201      	movs	r2, #1
   805b4:	715a      	strb	r2, [r3, #5]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   805b6:	bf00      	nop
   805b8:	370c      	adds	r7, #12
   805ba:	46bd      	mov	sp, r7
   805bc:	bc80      	pop	{r7}
   805be:	4770      	bx	lr
   805c0:	20000d6c 	.word	0x20000d6c

000805c4 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
   805c4:	b480      	push	{r7}
   805c6:	b083      	sub	sp, #12
   805c8:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
   805ca:	2300      	movs	r3, #0
   805cc:	71fb      	strb	r3, [r7, #7]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
   805ce:	4b09      	ldr	r3, [pc, #36]	; (805f4 <sleepmgr_get_sleep_mode+0x30>)
   805d0:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
   805d2:	e005      	b.n	805e0 <sleepmgr_get_sleep_mode+0x1c>
		lock_ptr++;
   805d4:	683b      	ldr	r3, [r7, #0]
   805d6:	3301      	adds	r3, #1
   805d8:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
   805da:	79fb      	ldrb	r3, [r7, #7]
   805dc:	3301      	adds	r3, #1
   805de:	71fb      	strb	r3, [r7, #7]
	while (!(*lock_ptr)) {
   805e0:	683b      	ldr	r3, [r7, #0]
   805e2:	781b      	ldrb	r3, [r3, #0]
   805e4:	2b00      	cmp	r3, #0
   805e6:	d0f5      	beq.n	805d4 <sleepmgr_get_sleep_mode+0x10>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
   805e8:	79fb      	ldrb	r3, [r7, #7]
}
   805ea:	4618      	mov	r0, r3
   805ec:	370c      	adds	r7, #12
   805ee:	46bd      	mov	sp, r7
   805f0:	bc80      	pop	{r7}
   805f2:	4770      	bx	lr
   805f4:	20000d6c 	.word	0x20000d6c

000805f8 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
   805f8:	b580      	push	{r7, lr}
   805fa:	b082      	sub	sp, #8
   805fc:	af00      	add	r7, sp, #0
   805fe:	b672      	cpsid	i
   80600:	f3bf 8f5f 	dmb	sy
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
   80604:	4b0b      	ldr	r3, [pc, #44]	; (80634 <sleepmgr_enter_sleep+0x3c>)
   80606:	2200      	movs	r2, #0
   80608:	701a      	strb	r2, [r3, #0]

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
   8060a:	4b0b      	ldr	r3, [pc, #44]	; (80638 <sleepmgr_enter_sleep+0x40>)
   8060c:	4798      	blx	r3
   8060e:	4603      	mov	r3, r0
   80610:	71fb      	strb	r3, [r7, #7]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
   80612:	79fb      	ldrb	r3, [r7, #7]
   80614:	2b00      	cmp	r3, #0
   80616:	d106      	bne.n	80626 <sleepmgr_enter_sleep+0x2e>
		cpu_irq_enable();
   80618:	4b06      	ldr	r3, [pc, #24]	; (80634 <sleepmgr_enter_sleep+0x3c>)
   8061a:	2201      	movs	r2, #1
   8061c:	701a      	strb	r2, [r3, #0]
   8061e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80622:	b662      	cpsie	i
		return;
   80624:	e003      	b.n	8062e <sleepmgr_enter_sleep+0x36>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
   80626:	79fb      	ldrb	r3, [r7, #7]
   80628:	4618      	mov	r0, r3
   8062a:	4b04      	ldr	r3, [pc, #16]	; (8063c <sleepmgr_enter_sleep+0x44>)
   8062c:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   8062e:	3708      	adds	r7, #8
   80630:	46bd      	mov	sp, r7
   80632:	bd80      	pop	{r7, pc}
   80634:	2000031a 	.word	0x2000031a
   80638:	000805c5 	.word	0x000805c5
   8063c:	00080561 	.word	0x00080561

00080640 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   80640:	b480      	push	{r7}
   80642:	b083      	sub	sp, #12
   80644:	af00      	add	r7, sp, #0
   80646:	6078      	str	r0, [r7, #4]
   80648:	6039      	str	r1, [r7, #0]
	ul_id = ul_id;
	p_cfg->ctrl = 0;
   8064a:	687b      	ldr	r3, [r7, #4]
   8064c:	2200      	movs	r2, #0
   8064e:	601a      	str	r2, [r3, #0]
}
   80650:	bf00      	nop
   80652:	370c      	adds	r7, #12
   80654:	46bd      	mov	sp, r7
   80656:	bc80      	pop	{r7}
   80658:	4770      	bx	lr
   8065a:	0000      	movs	r0, r0

0008065c <genclk_config_set_source>:
//! \name Programmable Clock Source and Prescaler configuration
//@{

static inline void genclk_config_set_source(struct genclk_config *p_cfg,
		enum genclk_source e_src)
{
   8065c:	b480      	push	{r7}
   8065e:	b083      	sub	sp, #12
   80660:	af00      	add	r7, sp, #0
   80662:	6078      	str	r0, [r7, #4]
   80664:	460b      	mov	r3, r1
   80666:	70fb      	strb	r3, [r7, #3]
	p_cfg->ctrl &= (~PMC_PCK_CSS_Msk);
   80668:	687b      	ldr	r3, [r7, #4]
   8066a:	681b      	ldr	r3, [r3, #0]
   8066c:	f023 0207 	bic.w	r2, r3, #7
   80670:	687b      	ldr	r3, [r7, #4]
   80672:	601a      	str	r2, [r3, #0]

	switch (e_src) {
   80674:	78fb      	ldrb	r3, [r7, #3]
   80676:	2b0a      	cmp	r3, #10
   80678:	d839      	bhi.n	806ee <genclk_config_set_source+0x92>
   8067a:	a201      	add	r2, pc, #4	; (adr r2, 80680 <genclk_config_set_source+0x24>)
   8067c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80680:	000806ad 	.word	0x000806ad
   80684:	000806ad 	.word	0x000806ad
   80688:	000806ad 	.word	0x000806ad
   8068c:	000806b7 	.word	0x000806b7
   80690:	000806b7 	.word	0x000806b7
   80694:	000806b7 	.word	0x000806b7
   80698:	000806b7 	.word	0x000806b7
   8069c:	000806b7 	.word	0x000806b7
   806a0:	000806c5 	.word	0x000806c5
   806a4:	000806d3 	.word	0x000806d3
   806a8:	000806e1 	.word	0x000806e1
	case GENCLK_PCK_SRC_SLCK_RC:
	case GENCLK_PCK_SRC_SLCK_XTAL:
	case GENCLK_PCK_SRC_SLCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_SLOW_CLK);
   806ac:	687b      	ldr	r3, [r7, #4]
   806ae:	681a      	ldr	r2, [r3, #0]
   806b0:	687b      	ldr	r3, [r7, #4]
   806b2:	601a      	str	r2, [r3, #0]
		break;
   806b4:	e01b      	b.n	806ee <genclk_config_set_source+0x92>
	case GENCLK_PCK_SRC_MAINCK_4M_RC:
	case GENCLK_PCK_SRC_MAINCK_8M_RC:
	case GENCLK_PCK_SRC_MAINCK_12M_RC:
	case GENCLK_PCK_SRC_MAINCK_XTAL:
	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_MAIN_CLK);
   806b6:	687b      	ldr	r3, [r7, #4]
   806b8:	681b      	ldr	r3, [r3, #0]
   806ba:	f043 0201 	orr.w	r2, r3, #1
   806be:	687b      	ldr	r3, [r7, #4]
   806c0:	601a      	str	r2, [r3, #0]
		break;
   806c2:	e014      	b.n	806ee <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLACK:
		p_cfg->ctrl |= (PMC_PCK_CSS_PLLA_CLK);
   806c4:	687b      	ldr	r3, [r7, #4]
   806c6:	681b      	ldr	r3, [r3, #0]
   806c8:	f043 0202 	orr.w	r2, r3, #2
   806cc:	687b      	ldr	r3, [r7, #4]
   806ce:	601a      	str	r2, [r3, #0]
		break;
   806d0:	e00d      	b.n	806ee <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLBCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_UPLL_CLK);
   806d2:	687b      	ldr	r3, [r7, #4]
   806d4:	681b      	ldr	r3, [r3, #0]
   806d6:	f043 0203 	orr.w	r2, r3, #3
   806da:	687b      	ldr	r3, [r7, #4]
   806dc:	601a      	str	r2, [r3, #0]
		break;
   806de:	e006      	b.n	806ee <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_MCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_MCK);
   806e0:	687b      	ldr	r3, [r7, #4]
   806e2:	681b      	ldr	r3, [r3, #0]
   806e4:	f043 0204 	orr.w	r2, r3, #4
   806e8:	687b      	ldr	r3, [r7, #4]
   806ea:	601a      	str	r2, [r3, #0]
		break;
   806ec:	bf00      	nop
	}
}
   806ee:	bf00      	nop
   806f0:	370c      	adds	r7, #12
   806f2:	46bd      	mov	sp, r7
   806f4:	bc80      	pop	{r7}
   806f6:	4770      	bx	lr

000806f8 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *p_cfg,
		uint32_t e_divider)
{
   806f8:	b480      	push	{r7}
   806fa:	b083      	sub	sp, #12
   806fc:	af00      	add	r7, sp, #0
   806fe:	6078      	str	r0, [r7, #4]
   80700:	6039      	str	r1, [r7, #0]
	p_cfg->ctrl &= ~PMC_PCK_PRES_Msk;
   80702:	687b      	ldr	r3, [r7, #4]
   80704:	681b      	ldr	r3, [r3, #0]
   80706:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   8070a:	687b      	ldr	r3, [r7, #4]
   8070c:	601a      	str	r2, [r3, #0]
	p_cfg->ctrl |= e_divider;
   8070e:	687b      	ldr	r3, [r7, #4]
   80710:	681a      	ldr	r2, [r3, #0]
   80712:	683b      	ldr	r3, [r7, #0]
   80714:	431a      	orrs	r2, r3
   80716:	687b      	ldr	r3, [r7, #4]
   80718:	601a      	str	r2, [r3, #0]
}
   8071a:	bf00      	nop
   8071c:	370c      	adds	r7, #12
   8071e:	46bd      	mov	sp, r7
   80720:	bc80      	pop	{r7}
   80722:	4770      	bx	lr

00080724 <genclk_enable>:

//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   80724:	b580      	push	{r7, lr}
   80726:	b082      	sub	sp, #8
   80728:	af00      	add	r7, sp, #0
   8072a:	6078      	str	r0, [r7, #4]
   8072c:	6039      	str	r1, [r7, #0]
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   8072e:	4907      	ldr	r1, [pc, #28]	; (8074c <genclk_enable+0x28>)
   80730:	687b      	ldr	r3, [r7, #4]
   80732:	681a      	ldr	r2, [r3, #0]
   80734:	683b      	ldr	r3, [r7, #0]
   80736:	3310      	adds	r3, #16
   80738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	pmc_enable_pck(ul_id);
   8073c:	6838      	ldr	r0, [r7, #0]
   8073e:	4b04      	ldr	r3, [pc, #16]	; (80750 <genclk_enable+0x2c>)
   80740:	4798      	blx	r3
}
   80742:	bf00      	nop
   80744:	3708      	adds	r7, #8
   80746:	46bd      	mov	sp, r7
   80748:	bd80      	pop	{r7, pc}
   8074a:	bf00      	nop
   8074c:	400e0400 	.word	0x400e0400
   80750:	00083add 	.word	0x00083add

00080754 <genclk_enable_source>:
{
	pmc_disable_pck(ul_id);
}

static inline void genclk_enable_source(enum genclk_source e_src)
{
   80754:	b580      	push	{r7, lr}
   80756:	b082      	sub	sp, #8
   80758:	af00      	add	r7, sp, #0
   8075a:	4603      	mov	r3, r0
   8075c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   8075e:	79fb      	ldrb	r3, [r7, #7]
   80760:	2b0a      	cmp	r3, #10
   80762:	f200 80a2 	bhi.w	808aa <genclk_enable_source+0x156>
   80766:	a201      	add	r2, pc, #4	; (adr r2, 8076c <genclk_enable_source+0x18>)
   80768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8076c:	00080799 	.word	0x00080799
   80770:	000807bb 	.word	0x000807bb
   80774:	000807db 	.word	0x000807db
   80778:	000807fb 	.word	0x000807fb
   8077c:	0008081b 	.word	0x0008081b
   80780:	0008083b 	.word	0x0008083b
   80784:	0008085b 	.word	0x0008085b
   80788:	0008087b 	.word	0x0008087b
   8078c:	0008089b 	.word	0x0008089b
   80790:	000808a3 	.word	0x000808a3
   80794:	000808ab 	.word	0x000808ab
	case GENCLK_PCK_SRC_SLCK_RC:
		if (!osc_is_ready(OSC_SLCK_32K_RC)) {
   80798:	2000      	movs	r0, #0
   8079a:	4b4e      	ldr	r3, [pc, #312]	; (808d4 <genclk_enable_source+0x180>)
   8079c:	4798      	blx	r3
   8079e:	4603      	mov	r3, r0
   807a0:	f083 0301 	eor.w	r3, r3, #1
   807a4:	b2db      	uxtb	r3, r3
   807a6:	2b00      	cmp	r3, #0
   807a8:	f000 8081 	beq.w	808ae <genclk_enable_source+0x15a>
			osc_enable(OSC_SLCK_32K_RC);
   807ac:	2000      	movs	r0, #0
   807ae:	4b4a      	ldr	r3, [pc, #296]	; (808d8 <genclk_enable_source+0x184>)
   807b0:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_RC);
   807b2:	2000      	movs	r0, #0
   807b4:	4b49      	ldr	r3, [pc, #292]	; (808dc <genclk_enable_source+0x188>)
   807b6:	4798      	blx	r3
		}
		break;
   807b8:	e079      	b.n	808ae <genclk_enable_source+0x15a>

	case GENCLK_PCK_SRC_SLCK_XTAL:
		if (!osc_is_ready(OSC_SLCK_32K_XTAL)) {
   807ba:	2001      	movs	r0, #1
   807bc:	4b45      	ldr	r3, [pc, #276]	; (808d4 <genclk_enable_source+0x180>)
   807be:	4798      	blx	r3
   807c0:	4603      	mov	r3, r0
   807c2:	f083 0301 	eor.w	r3, r3, #1
   807c6:	b2db      	uxtb	r3, r3
   807c8:	2b00      	cmp	r3, #0
   807ca:	d072      	beq.n	808b2 <genclk_enable_source+0x15e>
			osc_enable(OSC_SLCK_32K_XTAL);
   807cc:	2001      	movs	r0, #1
   807ce:	4b42      	ldr	r3, [pc, #264]	; (808d8 <genclk_enable_source+0x184>)
   807d0:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_XTAL);
   807d2:	2001      	movs	r0, #1
   807d4:	4b41      	ldr	r3, [pc, #260]	; (808dc <genclk_enable_source+0x188>)
   807d6:	4798      	blx	r3
		}
		break;
   807d8:	e06b      	b.n	808b2 <genclk_enable_source+0x15e>

	case GENCLK_PCK_SRC_SLCK_BYPASS:
		if (!osc_is_ready(OSC_SLCK_32K_BYPASS)) {
   807da:	2002      	movs	r0, #2
   807dc:	4b3d      	ldr	r3, [pc, #244]	; (808d4 <genclk_enable_source+0x180>)
   807de:	4798      	blx	r3
   807e0:	4603      	mov	r3, r0
   807e2:	f083 0301 	eor.w	r3, r3, #1
   807e6:	b2db      	uxtb	r3, r3
   807e8:	2b00      	cmp	r3, #0
   807ea:	d064      	beq.n	808b6 <genclk_enable_source+0x162>
			osc_enable(OSC_SLCK_32K_BYPASS);
   807ec:	2002      	movs	r0, #2
   807ee:	4b3a      	ldr	r3, [pc, #232]	; (808d8 <genclk_enable_source+0x184>)
   807f0:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_BYPASS);
   807f2:	2002      	movs	r0, #2
   807f4:	4b39      	ldr	r3, [pc, #228]	; (808dc <genclk_enable_source+0x188>)
   807f6:	4798      	blx	r3
		}
		break;
   807f8:	e05d      	b.n	808b6 <genclk_enable_source+0x162>

	case GENCLK_PCK_SRC_MAINCK_4M_RC:
		if (!osc_is_ready(OSC_MAINCK_4M_RC)) {
   807fa:	2003      	movs	r0, #3
   807fc:	4b35      	ldr	r3, [pc, #212]	; (808d4 <genclk_enable_source+0x180>)
   807fe:	4798      	blx	r3
   80800:	4603      	mov	r3, r0
   80802:	f083 0301 	eor.w	r3, r3, #1
   80806:	b2db      	uxtb	r3, r3
   80808:	2b00      	cmp	r3, #0
   8080a:	d056      	beq.n	808ba <genclk_enable_source+0x166>
			osc_enable(OSC_MAINCK_4M_RC);
   8080c:	2003      	movs	r0, #3
   8080e:	4b32      	ldr	r3, [pc, #200]	; (808d8 <genclk_enable_source+0x184>)
   80810:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_4M_RC);
   80812:	2003      	movs	r0, #3
   80814:	4b31      	ldr	r3, [pc, #196]	; (808dc <genclk_enable_source+0x188>)
   80816:	4798      	blx	r3
		}
		break;
   80818:	e04f      	b.n	808ba <genclk_enable_source+0x166>

	case GENCLK_PCK_SRC_MAINCK_8M_RC:
		if (!osc_is_ready(OSC_MAINCK_8M_RC)) {
   8081a:	2004      	movs	r0, #4
   8081c:	4b2d      	ldr	r3, [pc, #180]	; (808d4 <genclk_enable_source+0x180>)
   8081e:	4798      	blx	r3
   80820:	4603      	mov	r3, r0
   80822:	f083 0301 	eor.w	r3, r3, #1
   80826:	b2db      	uxtb	r3, r3
   80828:	2b00      	cmp	r3, #0
   8082a:	d048      	beq.n	808be <genclk_enable_source+0x16a>
			osc_enable(OSC_MAINCK_8M_RC);
   8082c:	2004      	movs	r0, #4
   8082e:	4b2a      	ldr	r3, [pc, #168]	; (808d8 <genclk_enable_source+0x184>)
   80830:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_8M_RC);
   80832:	2004      	movs	r0, #4
   80834:	4b29      	ldr	r3, [pc, #164]	; (808dc <genclk_enable_source+0x188>)
   80836:	4798      	blx	r3
		}
		break;
   80838:	e041      	b.n	808be <genclk_enable_source+0x16a>

	case GENCLK_PCK_SRC_MAINCK_12M_RC:
		if (!osc_is_ready(OSC_MAINCK_12M_RC)) {
   8083a:	2005      	movs	r0, #5
   8083c:	4b25      	ldr	r3, [pc, #148]	; (808d4 <genclk_enable_source+0x180>)
   8083e:	4798      	blx	r3
   80840:	4603      	mov	r3, r0
   80842:	f083 0301 	eor.w	r3, r3, #1
   80846:	b2db      	uxtb	r3, r3
   80848:	2b00      	cmp	r3, #0
   8084a:	d03a      	beq.n	808c2 <genclk_enable_source+0x16e>
			osc_enable(OSC_MAINCK_12M_RC);
   8084c:	2005      	movs	r0, #5
   8084e:	4b22      	ldr	r3, [pc, #136]	; (808d8 <genclk_enable_source+0x184>)
   80850:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_12M_RC);
   80852:	2005      	movs	r0, #5
   80854:	4b21      	ldr	r3, [pc, #132]	; (808dc <genclk_enable_source+0x188>)
   80856:	4798      	blx	r3
		}
		break;
   80858:	e033      	b.n	808c2 <genclk_enable_source+0x16e>

	case GENCLK_PCK_SRC_MAINCK_XTAL:
		if (!osc_is_ready(OSC_MAINCK_XTAL)) {
   8085a:	2006      	movs	r0, #6
   8085c:	4b1d      	ldr	r3, [pc, #116]	; (808d4 <genclk_enable_source+0x180>)
   8085e:	4798      	blx	r3
   80860:	4603      	mov	r3, r0
   80862:	f083 0301 	eor.w	r3, r3, #1
   80866:	b2db      	uxtb	r3, r3
   80868:	2b00      	cmp	r3, #0
   8086a:	d02c      	beq.n	808c6 <genclk_enable_source+0x172>
			osc_enable(OSC_MAINCK_XTAL);
   8086c:	2006      	movs	r0, #6
   8086e:	4b1a      	ldr	r3, [pc, #104]	; (808d8 <genclk_enable_source+0x184>)
   80870:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_XTAL);
   80872:	2006      	movs	r0, #6
   80874:	4b19      	ldr	r3, [pc, #100]	; (808dc <genclk_enable_source+0x188>)
   80876:	4798      	blx	r3
		}
		break;
   80878:	e025      	b.n	808c6 <genclk_enable_source+0x172>

	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		if (!osc_is_ready(OSC_MAINCK_BYPASS)) {
   8087a:	2007      	movs	r0, #7
   8087c:	4b15      	ldr	r3, [pc, #84]	; (808d4 <genclk_enable_source+0x180>)
   8087e:	4798      	blx	r3
   80880:	4603      	mov	r3, r0
   80882:	f083 0301 	eor.w	r3, r3, #1
   80886:	b2db      	uxtb	r3, r3
   80888:	2b00      	cmp	r3, #0
   8088a:	d01e      	beq.n	808ca <genclk_enable_source+0x176>
			osc_enable(OSC_MAINCK_BYPASS);
   8088c:	2007      	movs	r0, #7
   8088e:	4b12      	ldr	r3, [pc, #72]	; (808d8 <genclk_enable_source+0x184>)
   80890:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_BYPASS);
   80892:	2007      	movs	r0, #7
   80894:	4b11      	ldr	r3, [pc, #68]	; (808dc <genclk_enable_source+0x188>)
   80896:	4798      	blx	r3
		}
		break;
   80898:	e017      	b.n	808ca <genclk_enable_source+0x176>

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_PCK_SRC_PLLACK:
		pll_enable_config_defaults(0);
   8089a:	2000      	movs	r0, #0
   8089c:	4b10      	ldr	r3, [pc, #64]	; (808e0 <genclk_enable_source+0x18c>)
   8089e:	4798      	blx	r3
		break;
   808a0:	e014      	b.n	808cc <genclk_enable_source+0x178>
#endif

#ifdef CONFIG_PLL1_SOURCE
	case GENCLK_PCK_SRC_PLLBCK:
		pll_enable_config_defaults(1);
   808a2:	2001      	movs	r0, #1
   808a4:	4b0e      	ldr	r3, [pc, #56]	; (808e0 <genclk_enable_source+0x18c>)
   808a6:	4798      	blx	r3
		break;
   808a8:	e010      	b.n	808cc <genclk_enable_source+0x178>
	case GENCLK_PCK_SRC_MCK:
		break;

	default:
		Assert(false);
		break;
   808aa:	bf00      	nop
   808ac:	e00e      	b.n	808cc <genclk_enable_source+0x178>
		break;
   808ae:	bf00      	nop
   808b0:	e00c      	b.n	808cc <genclk_enable_source+0x178>
		break;
   808b2:	bf00      	nop
   808b4:	e00a      	b.n	808cc <genclk_enable_source+0x178>
		break;
   808b6:	bf00      	nop
   808b8:	e008      	b.n	808cc <genclk_enable_source+0x178>
		break;
   808ba:	bf00      	nop
   808bc:	e006      	b.n	808cc <genclk_enable_source+0x178>
		break;
   808be:	bf00      	nop
   808c0:	e004      	b.n	808cc <genclk_enable_source+0x178>
		break;
   808c2:	bf00      	nop
   808c4:	e002      	b.n	808cc <genclk_enable_source+0x178>
		break;
   808c6:	bf00      	nop
   808c8:	e000      	b.n	808cc <genclk_enable_source+0x178>
		break;
   808ca:	bf00      	nop
	}
}
   808cc:	bf00      	nop
   808ce:	3708      	adds	r7, #8
   808d0:	46bd      	mov	sp, r7
   808d2:	bd80      	pop	{r7, pc}
   808d4:	000801ad 	.word	0x000801ad
   808d8:	00080129 	.word	0x00080129
   808dc:	000802a1 	.word	0x000802a1
   808e0:	000803dd 	.word	0x000803dd

000808e4 <phywhisperer_no_pwr>:
#define BUTTON_IN PIO_PA24_IDX
#define F_VBHOST PIO_PA26_IDX
#define F_VBSNIFF PIO_PA25_IDX

void phywhisperer_no_pwr(void)
{
   808e4:	b480      	push	{r7}
   808e6:	af00      	add	r7, sp, #0
     PIOA->PIO_CODR = (1 << F_VBSNIFF); //disable sniff power
   808e8:	4b05      	ldr	r3, [pc, #20]	; (80900 <phywhisperer_no_pwr+0x1c>)
   808ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   808ee:	635a      	str	r2, [r3, #52]	; 0x34
     PIOA->PIO_CODR = (1 << F_VBHOST); //disable host power
   808f0:	4b03      	ldr	r3, [pc, #12]	; (80900 <phywhisperer_no_pwr+0x1c>)
   808f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   808f6:	635a      	str	r2, [r3, #52]	; 0x34
}
   808f8:	bf00      	nop
   808fa:	46bd      	mov	sp, r7
   808fc:	bc80      	pop	{r7}
   808fe:	4770      	bx	lr
   80900:	400e0c00 	.word	0x400e0c00

00080904 <phywhisperer_host_pwr>:

void phywhisperer_host_pwr(void)
{
   80904:	b480      	push	{r7}
   80906:	af00      	add	r7, sp, #0
  PIOA->PIO_CODR = (1 << F_VBSNIFF); //disable sniff power
   80908:	4b05      	ldr	r3, [pc, #20]	; (80920 <phywhisperer_host_pwr+0x1c>)
   8090a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8090e:	635a      	str	r2, [r3, #52]	; 0x34
  PIOA->PIO_SODR = (1 << F_VBHOST); //enable host power
   80910:	4b03      	ldr	r3, [pc, #12]	; (80920 <phywhisperer_host_pwr+0x1c>)
   80912:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80916:	631a      	str	r2, [r3, #48]	; 0x30
}
   80918:	bf00      	nop
   8091a:	46bd      	mov	sp, r7
   8091c:	bc80      	pop	{r7}
   8091e:	4770      	bx	lr
   80920:	400e0c00 	.word	0x400e0c00

00080924 <phywhisperer_sniff_pwr>:

void phywhisperer_sniff_pwr(void)
{
   80924:	b480      	push	{r7}
   80926:	af00      	add	r7, sp, #0
  PIOA->PIO_CODR = (1 << F_VBHOST); //disable host power
   80928:	4b05      	ldr	r3, [pc, #20]	; (80940 <phywhisperer_sniff_pwr+0x1c>)
   8092a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8092e:	635a      	str	r2, [r3, #52]	; 0x34
  PIOA->PIO_SODR = (1 << F_VBSNIFF); //enable sniff power
   80930:	4b03      	ldr	r3, [pc, #12]	; (80940 <phywhisperer_sniff_pwr+0x1c>)
   80932:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   80936:	631a      	str	r2, [r3, #48]	; 0x30
}
   80938:	bf00      	nop
   8093a:	46bd      	mov	sp, r7
   8093c:	bc80      	pop	{r7}
   8093e:	4770      	bx	lr
   80940:	400e0c00 	.word	0x400e0c00

00080944 <phywhisperer_setup_pins>:
          phywhisperer_sniff_pwr();
     }
}

void phywhisperer_setup_pins(void)
{
   80944:	b580      	push	{r7, lr}
   80946:	af00      	add	r7, sp, #0
  board_init();
   80948:	4b2e      	ldr	r3, [pc, #184]	; (80a04 <phywhisperer_setup_pins+0xc0>)
   8094a:	4798      	blx	r3
  ioport_set_pin_mode(BUTTON_IN, IOPORT_MODE_PULLUP); //(1 << 2) = PULL UP
   8094c:	2108      	movs	r1, #8
   8094e:	2018      	movs	r0, #24
   80950:	4b2d      	ldr	r3, [pc, #180]	; (80a08 <phywhisperer_setup_pins+0xc4>)
   80952:	4798      	blx	r3
  PIOA->PIO_ODR = (1 << BUTTON_IN);
   80954:	4b2d      	ldr	r3, [pc, #180]	; (80a0c <phywhisperer_setup_pins+0xc8>)
   80956:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   8095a:	615a      	str	r2, [r3, #20]
  PIOA->PIO_PUER = (1 << BUTTON_IN); // enable pullup
   8095c:	4b2b      	ldr	r3, [pc, #172]	; (80a0c <phywhisperer_setup_pins+0xc8>)
   8095e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   80962:	665a      	str	r2, [r3, #100]	; 0x64
  PIOA->PIO_DIFSR = (1 << BUTTON_IN); //enable debounce
   80964:	4b29      	ldr	r3, [pc, #164]	; (80a0c <phywhisperer_setup_pins+0xc8>)
   80966:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   8096a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  PIOA->PIO_OER = (1 << F_VBHOST) | (1 << F_VBSNIFF); //enable output mode on VBHOST/VBSNIFF pins
   8096e:	4b27      	ldr	r3, [pc, #156]	; (80a0c <phywhisperer_setup_pins+0xc8>)
   80970:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
   80974:	611a      	str	r2, [r3, #16]

  phywhisperer_sniff_pwr();
   80976:	4b26      	ldr	r3, [pc, #152]	; (80a10 <phywhisperer_setup_pins+0xcc>)
   80978:	4798      	blx	r3

  /* Enable SMC */
  pmc_enable_periph_clk(ID_SMC);
   8097a:	2009      	movs	r0, #9
   8097c:	4b25      	ldr	r3, [pc, #148]	; (80a14 <phywhisperer_setup_pins+0xd0>)
   8097e:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   80980:	4925      	ldr	r1, [pc, #148]	; (80a18 <phywhisperer_setup_pins+0xd4>)
   80982:	2029      	movs	r0, #41	; 0x29
   80984:	4b25      	ldr	r3, [pc, #148]	; (80a1c <phywhisperer_setup_pins+0xd8>)
   80986:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   80988:	4923      	ldr	r1, [pc, #140]	; (80a18 <phywhisperer_setup_pins+0xd4>)
   8098a:	202a      	movs	r0, #42	; 0x2a
   8098c:	4b23      	ldr	r3, [pc, #140]	; (80a1c <phywhisperer_setup_pins+0xd8>)
   8098e:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   80990:	4921      	ldr	r1, [pc, #132]	; (80a18 <phywhisperer_setup_pins+0xd4>)
   80992:	202b      	movs	r0, #43	; 0x2b
   80994:	4b21      	ldr	r3, [pc, #132]	; (80a1c <phywhisperer_setup_pins+0xd8>)
   80996:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   80998:	491f      	ldr	r1, [pc, #124]	; (80a18 <phywhisperer_setup_pins+0xd4>)
   8099a:	202c      	movs	r0, #44	; 0x2c
   8099c:	4b1f      	ldr	r3, [pc, #124]	; (80a1c <phywhisperer_setup_pins+0xd8>)
   8099e:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   809a0:	491d      	ldr	r1, [pc, #116]	; (80a18 <phywhisperer_setup_pins+0xd4>)
   809a2:	202d      	movs	r0, #45	; 0x2d
   809a4:	4b1d      	ldr	r3, [pc, #116]	; (80a1c <phywhisperer_setup_pins+0xd8>)
   809a6:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   809a8:	491b      	ldr	r1, [pc, #108]	; (80a18 <phywhisperer_setup_pins+0xd4>)
   809aa:	202e      	movs	r0, #46	; 0x2e
   809ac:	4b1b      	ldr	r3, [pc, #108]	; (80a1c <phywhisperer_setup_pins+0xd8>)
   809ae:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   809b0:	4919      	ldr	r1, [pc, #100]	; (80a18 <phywhisperer_setup_pins+0xd4>)
   809b2:	202f      	movs	r0, #47	; 0x2f
   809b4:	4b19      	ldr	r3, [pc, #100]	; (80a1c <phywhisperer_setup_pins+0xd8>)
   809b6:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   809b8:	4917      	ldr	r1, [pc, #92]	; (80a18 <phywhisperer_setup_pins+0xd4>)
   809ba:	2030      	movs	r0, #48	; 0x30
   809bc:	4b17      	ldr	r3, [pc, #92]	; (80a1c <phywhisperer_setup_pins+0xd8>)
   809be:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   809c0:	4915      	ldr	r1, [pc, #84]	; (80a18 <phywhisperer_setup_pins+0xd4>)
   809c2:	2033      	movs	r0, #51	; 0x33
   809c4:	4b15      	ldr	r3, [pc, #84]	; (80a1c <phywhisperer_setup_pins+0xd8>)
   809c6:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   809c8:	4913      	ldr	r1, [pc, #76]	; (80a18 <phywhisperer_setup_pins+0xd4>)
   809ca:	2037      	movs	r0, #55	; 0x37
   809cc:	4b13      	ldr	r3, [pc, #76]	; (80a1c <phywhisperer_setup_pins+0xd8>)
   809ce:	4798      	blx	r3
  gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   809d0:	4911      	ldr	r1, [pc, #68]	; (80a18 <phywhisperer_setup_pins+0xd4>)
   809d2:	2034      	movs	r0, #52	; 0x34
   809d4:	4b11      	ldr	r3, [pc, #68]	; (80a1c <phywhisperer_setup_pins+0xd8>)
   809d6:	4798      	blx	r3

  smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   809d8:	4a11      	ldr	r2, [pc, #68]	; (80a20 <phywhisperer_setup_pins+0xdc>)
   809da:	2100      	movs	r1, #0
   809dc:	4811      	ldr	r0, [pc, #68]	; (80a24 <phywhisperer_setup_pins+0xe0>)
   809de:	4b12      	ldr	r3, [pc, #72]	; (80a28 <phywhisperer_setup_pins+0xe4>)
   809e0:	4798      	blx	r3
  | SMC_SETUP_NCS_WR_SETUP(1)
  | SMC_SETUP_NRD_SETUP(1)
  | SMC_SETUP_NCS_RD_SETUP(1));
  smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   809e2:	4a12      	ldr	r2, [pc, #72]	; (80a2c <phywhisperer_setup_pins+0xe8>)
   809e4:	2100      	movs	r1, #0
   809e6:	480f      	ldr	r0, [pc, #60]	; (80a24 <phywhisperer_setup_pins+0xe0>)
   809e8:	4b11      	ldr	r3, [pc, #68]	; (80a30 <phywhisperer_setup_pins+0xec>)
   809ea:	4798      	blx	r3
  | SMC_PULSE_NCS_WR_PULSE(1)
  | SMC_PULSE_NRD_PULSE(3)
  | SMC_PULSE_NCS_RD_PULSE(1));
  smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   809ec:	4a11      	ldr	r2, [pc, #68]	; (80a34 <phywhisperer_setup_pins+0xf0>)
   809ee:	2100      	movs	r1, #0
   809f0:	480c      	ldr	r0, [pc, #48]	; (80a24 <phywhisperer_setup_pins+0xe0>)
   809f2:	4b11      	ldr	r3, [pc, #68]	; (80a38 <phywhisperer_setup_pins+0xf4>)
   809f4:	4798      	blx	r3
  | SMC_CYCLE_NRD_CYCLE(4));
  smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   809f6:	2203      	movs	r2, #3
   809f8:	2100      	movs	r1, #0
   809fa:	480a      	ldr	r0, [pc, #40]	; (80a24 <phywhisperer_setup_pins+0xe0>)
   809fc:	4b0f      	ldr	r3, [pc, #60]	; (80a3c <phywhisperer_setup_pins+0xf8>)
   809fe:	4798      	blx	r3
  | SMC_MODE_DBW_BIT_8);
}
   80a00:	bf00      	nop
   80a02:	bd80      	pop	{r7, pc}
   80a04:	000853a5 	.word	0x000853a5
   80a08:	00080489 	.word	0x00080489
   80a0c:	400e0c00 	.word	0x400e0c00
   80a10:	00080925 	.word	0x00080925
   80a14:	00083a3d 	.word	0x00083a3d
   80a18:	08000001 	.word	0x08000001
   80a1c:	00083f1d 	.word	0x00083f1d
   80a20:	01010100 	.word	0x01010100
   80a24:	400e0000 	.word	0x400e0000
   80a28:	00081561 	.word	0x00081561
   80a2c:	01030101 	.word	0x01030101
   80a30:	0008158b 	.word	0x0008158b
   80a34:	00040002 	.word	0x00040002
   80a38:	000815b5 	.word	0x000815b5
   80a3c:	000815df 	.word	0x000815df

00080a40 <hacky_delay>:

void hacky_delay(void)
{
   80a40:	b480      	push	{r7}
   80a42:	b083      	sub	sp, #12
   80a44:	af00      	add	r7, sp, #0
     for (volatile uint32_t i = 0; i < 250000; i++);
   80a46:	2300      	movs	r3, #0
   80a48:	607b      	str	r3, [r7, #4]
   80a4a:	e002      	b.n	80a52 <hacky_delay+0x12>
   80a4c:	687b      	ldr	r3, [r7, #4]
   80a4e:	3301      	adds	r3, #1
   80a50:	607b      	str	r3, [r7, #4]
   80a52:	687b      	ldr	r3, [r7, #4]
   80a54:	4a03      	ldr	r2, [pc, #12]	; (80a64 <hacky_delay+0x24>)
   80a56:	4293      	cmp	r3, r2
   80a58:	d9f8      	bls.n	80a4c <hacky_delay+0xc>
}
   80a5a:	bf00      	nop
   80a5c:	370c      	adds	r7, #12
   80a5e:	46bd      	mov	sp, r7
   80a60:	bc80      	pop	{r7}
   80a62:	4770      	bx	lr
   80a64:	0003d08f 	.word	0x0003d08f

00080a68 <genclk_enable_config>:

static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
   80a68:	b580      	push	{r7, lr}
   80a6a:	b086      	sub	sp, #24
   80a6c:	af00      	add	r7, sp, #0
   80a6e:	60f8      	str	r0, [r7, #12]
   80a70:	460b      	mov	r3, r1
   80a72:	607a      	str	r2, [r7, #4]
   80a74:	72fb      	strb	r3, [r7, #11]
     struct genclk_config gcfg;

     genclk_config_defaults(&gcfg, id);
   80a76:	f107 0314 	add.w	r3, r7, #20
   80a7a:	68f9      	ldr	r1, [r7, #12]
   80a7c:	4618      	mov	r0, r3
   80a7e:	4b0e      	ldr	r3, [pc, #56]	; (80ab8 <genclk_enable_config+0x50>)
   80a80:	4798      	blx	r3
     genclk_enable_source(src);
   80a82:	7afb      	ldrb	r3, [r7, #11]
   80a84:	4618      	mov	r0, r3
   80a86:	4b0d      	ldr	r3, [pc, #52]	; (80abc <genclk_enable_config+0x54>)
   80a88:	4798      	blx	r3
     genclk_config_set_source(&gcfg, src);
   80a8a:	7afa      	ldrb	r2, [r7, #11]
   80a8c:	f107 0314 	add.w	r3, r7, #20
   80a90:	4611      	mov	r1, r2
   80a92:	4618      	mov	r0, r3
   80a94:	4b0a      	ldr	r3, [pc, #40]	; (80ac0 <genclk_enable_config+0x58>)
   80a96:	4798      	blx	r3
     genclk_config_set_divider(&gcfg, divider);
   80a98:	f107 0314 	add.w	r3, r7, #20
   80a9c:	6879      	ldr	r1, [r7, #4]
   80a9e:	4618      	mov	r0, r3
   80aa0:	4b08      	ldr	r3, [pc, #32]	; (80ac4 <genclk_enable_config+0x5c>)
   80aa2:	4798      	blx	r3
     genclk_enable(&gcfg, id);
   80aa4:	f107 0314 	add.w	r3, r7, #20
   80aa8:	68f9      	ldr	r1, [r7, #12]
   80aaa:	4618      	mov	r0, r3
   80aac:	4b06      	ldr	r3, [pc, #24]	; (80ac8 <genclk_enable_config+0x60>)
   80aae:	4798      	blx	r3
}
   80ab0:	bf00      	nop
   80ab2:	3718      	adds	r7, #24
   80ab4:	46bd      	mov	sp, r7
   80ab6:	bd80      	pop	{r7, pc}
   80ab8:	00080641 	.word	0x00080641
   80abc:	00080755 	.word	0x00080755
   80ac0:	0008065d 	.word	0x0008065d
   80ac4:	000806f9 	.word	0x000806f9
   80ac8:	00080725 	.word	0x00080725

00080acc <main>:

void (*pwr_list[])(void) = {phywhisperer_no_pwr, phywhisperer_host_pwr, phywhisperer_sniff_pwr};

int main(void)
{
   80acc:	b580      	push	{r7, lr}
   80ace:	b086      	sub	sp, #24
   80ad0:	af00      	add	r7, sp, #0
  uint32_t serial_number[4];

  // Read Device-ID from SAM3U. Do this before enabling interrupts etc.
  flash_read_unique_id(serial_number, sizeof(serial_number));
   80ad2:	1d3b      	adds	r3, r7, #4
   80ad4:	2110      	movs	r1, #16
   80ad6:	4618      	mov	r0, r3
   80ad8:	4b22      	ldr	r3, [pc, #136]	; (80b64 <main+0x98>)
   80ada:	4798      	blx	r3

  irq_initialize_vectors();
  cpu_irq_enable();
   80adc:	4b22      	ldr	r3, [pc, #136]	; (80b68 <main+0x9c>)
   80ade:	2201      	movs	r2, #1
   80ae0:	701a      	strb	r2, [r3, #0]
   80ae2:	f3bf 8f5f 	dmb	sy
   80ae6:	b662      	cpsie	i

     // Initialize the sleep manager
     sleepmgr_init();
   80ae8:	4b20      	ldr	r3, [pc, #128]	; (80b6c <main+0xa0>)
   80aea:	4798      	blx	r3
#if !SAMD21 && !SAMR21
     sysclk_init();
   80aec:	4b20      	ldr	r3, [pc, #128]	; (80b70 <main+0xa4>)
   80aee:	4798      	blx	r3
  phywhisperer_setup_pins();
   80af0:	4b20      	ldr	r3, [pc, #128]	; (80b74 <main+0xa8>)
   80af2:	4798      	blx	r3
#else
     system_init();
#endif
     genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
   80af4:	2200      	movs	r2, #0
   80af6:	210a      	movs	r1, #10
   80af8:	2000      	movs	r0, #0
   80afa:	4b1f      	ldr	r3, [pc, #124]	; (80b78 <main+0xac>)
   80afc:	4798      	blx	r3
     udc_start();
   80afe:	4b1f      	ldr	r3, [pc, #124]	; (80b7c <main+0xb0>)
   80b00:	4798      	blx	r3
     //LEDS ON
     gpio_set_pin_high(LED0_GPIO);
   80b02:	201d      	movs	r0, #29
   80b04:	4b1e      	ldr	r3, [pc, #120]	; (80b80 <main+0xb4>)
   80b06:	4798      	blx	r3
     gpio_set_pin_low(LED1_GPIO);
   80b08:	201f      	movs	r0, #31
   80b0a:	4b1e      	ldr	r3, [pc, #120]	; (80b84 <main+0xb8>)
   80b0c:	4798      	blx	r3
     /* LED_Off(LED1_GPIO); */
     /* LED_On(LED0_GPIO); */
     uint8_t curr_pwr_setting = 0;
   80b0e:	2300      	movs	r3, #0
   80b10:	75fb      	strb	r3, [r7, #23]
     while(1) {
          sleepmgr_enter_sleep();
   80b12:	4b1d      	ldr	r3, [pc, #116]	; (80b88 <main+0xbc>)
   80b14:	4798      	blx	r3
          uint8_t button_status = !(PIOA->PIO_PDSR & (1 << BUTTON_IN));
   80b16:	4b1d      	ldr	r3, [pc, #116]	; (80b8c <main+0xc0>)
   80b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80b1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80b1e:	2b00      	cmp	r3, #0
   80b20:	bf0c      	ite	eq
   80b22:	2301      	moveq	r3, #1
   80b24:	2300      	movne	r3, #0
   80b26:	b2db      	uxtb	r3, r3
   80b28:	75bb      	strb	r3, [r7, #22]
          if (button_status){
   80b2a:	7dbb      	ldrb	r3, [r7, #22]
   80b2c:	2b00      	cmp	r3, #0
   80b2e:	d0f0      	beq.n	80b12 <main+0x46>
               curr_pwr_setting++;
   80b30:	7dfb      	ldrb	r3, [r7, #23]
   80b32:	3301      	adds	r3, #1
   80b34:	75fb      	strb	r3, [r7, #23]
               if (curr_pwr_setting > 2)
   80b36:	7dfb      	ldrb	r3, [r7, #23]
   80b38:	2b02      	cmp	r3, #2
   80b3a:	d901      	bls.n	80b40 <main+0x74>
                    curr_pwr_setting = 0;
   80b3c:	2300      	movs	r3, #0
   80b3e:	75fb      	strb	r3, [r7, #23]
               hacky_delay(); //delay to try to debounce
   80b40:	4b13      	ldr	r3, [pc, #76]	; (80b90 <main+0xc4>)
   80b42:	4798      	blx	r3
               while (!(PIOA->PIO_PDSR & (1 << BUTTON_IN))); //wait for trigger to be unpressed
   80b44:	bf00      	nop
   80b46:	4b11      	ldr	r3, [pc, #68]	; (80b8c <main+0xc0>)
   80b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80b4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80b4e:	2b00      	cmp	r3, #0
   80b50:	d0f9      	beq.n	80b46 <main+0x7a>
               pwr_list[curr_pwr_setting]();
   80b52:	7dfb      	ldrb	r3, [r7, #23]
   80b54:	4a0f      	ldr	r2, [pc, #60]	; (80b94 <main+0xc8>)
   80b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   80b5a:	4798      	blx	r3
               hacky_delay();
   80b5c:	4b0c      	ldr	r3, [pc, #48]	; (80b90 <main+0xc4>)
   80b5e:	4798      	blx	r3
     while(1) {
   80b60:	e7d7      	b.n	80b12 <main+0x46>
   80b62:	bf00      	nop
   80b64:	0008125d 	.word	0x0008125d
   80b68:	2000031a 	.word	0x2000031a
   80b6c:	00080591 	.word	0x00080591
   80b70:	000836e5 	.word	0x000836e5
   80b74:	00080945 	.word	0x00080945
   80b78:	00080a69 	.word	0x00080a69
   80b7c:	000843e1 	.word	0x000843e1
   80b80:	00083ebd 	.word	0x00083ebd
   80b84:	00083eed 	.word	0x00083eed
   80b88:	000805f9 	.word	0x000805f9
   80b8c:	400e0c00 	.word	0x400e0c00
   80b90:	00080a41 	.word	0x00080a41
   80b94:	20000280 	.word	0x20000280

00080b98 <main_suspend_action>:
void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   80b98:	b480      	push	{r7}
   80b9a:	af00      	add	r7, sp, #0
}
   80b9c:	bf00      	nop
   80b9e:	46bd      	mov	sp, r7
   80ba0:	bc80      	pop	{r7}
   80ba2:	4770      	bx	lr

00080ba4 <main_resume_action>:

void main_resume_action(void)
{
   80ba4:	b480      	push	{r7}
   80ba6:	af00      	add	r7, sp, #0
}
   80ba8:	bf00      	nop
   80baa:	46bd      	mov	sp, r7
   80bac:	bc80      	pop	{r7}
   80bae:	4770      	bx	lr

00080bb0 <main_sof_action>:

void main_sof_action(void)
{
   80bb0:	b480      	push	{r7}
   80bb2:	af00      	add	r7, sp, #0
     if (!main_b_vendor_enable)
   80bb4:	4b04      	ldr	r3, [pc, #16]	; (80bc8 <main_sof_action+0x18>)
   80bb6:	781b      	ldrb	r3, [r3, #0]
   80bb8:	b2db      	uxtb	r3, r3
   80bba:	f083 0301 	eor.w	r3, r3, #1
   80bbe:	b2db      	uxtb	r3, r3
   80bc0:	2b00      	cmp	r3, #0
          return;
}
   80bc2:	46bd      	mov	sp, r7
   80bc4:	bc80      	pop	{r7}
   80bc6:	4770      	bx	lr
   80bc8:	2000028c 	.word	0x2000028c

00080bcc <main_vendor_enable>:

bool main_vendor_enable(void)
{
   80bcc:	b580      	push	{r7, lr}
   80bce:	af00      	add	r7, sp, #0
     main_b_vendor_enable = true;
   80bd0:	4b05      	ldr	r3, [pc, #20]	; (80be8 <main_vendor_enable+0x1c>)
   80bd2:	2201      	movs	r2, #1
   80bd4:	701a      	strb	r2, [r3, #0]
     // Start data reception on OUT endpoints
#if UDI_VENDOR_EPS_SIZE_BULK_FS
     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
     udi_vendor_bulk_out_run(
   80bd6:	4a05      	ldr	r2, [pc, #20]	; (80bec <main_vendor_enable+0x20>)
   80bd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80bdc:	4804      	ldr	r0, [pc, #16]	; (80bf0 <main_vendor_enable+0x24>)
   80bde:	4b05      	ldr	r3, [pc, #20]	; (80bf4 <main_vendor_enable+0x28>)
   80be0:	4798      	blx	r3
          main_buf_loopback,
          sizeof(main_buf_loopback),
          main_vendor_bulk_out_received);
#endif
     return true;
   80be2:	2301      	movs	r3, #1
}
   80be4:	4618      	mov	r0, r3
   80be6:	bd80      	pop	{r7, pc}
   80be8:	2000028c 	.word	0x2000028c
   80bec:	00080f9d 	.word	0x00080f9d
   80bf0:	200007f8 	.word	0x200007f8
   80bf4:	00083c75 	.word	0x00083c75

00080bf8 <main_vendor_disable>:

void main_vendor_disable(void)
{
   80bf8:	b480      	push	{r7}
   80bfa:	af00      	add	r7, sp, #0
     main_b_vendor_enable = false;
   80bfc:	4b03      	ldr	r3, [pc, #12]	; (80c0c <main_vendor_disable+0x14>)
   80bfe:	2200      	movs	r2, #0
   80c00:	701a      	strb	r2, [r3, #0]
}
   80c02:	bf00      	nop
   80c04:	46bd      	mov	sp, r7
   80c06:	bc80      	pop	{r7}
   80c08:	4770      	bx	lr
   80c0a:	bf00      	nop
   80c0c:	2000028c 	.word	0x2000028c

00080c10 <ctrl_readmem_bulk>:
void ctrl_writemem_bulk(void);
void ctrl_writemem_ctrl(void);
void ctrl_progfpga_bulk(void);


void ctrl_readmem_bulk(void){
   80c10:	b580      	push	{r7, lr}
   80c12:	b082      	sub	sp, #8
   80c14:	af00      	add	r7, sp, #0
     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80c16:	4b0e      	ldr	r3, [pc, #56]	; (80c50 <ctrl_readmem_bulk+0x40>)
   80c18:	681b      	ldr	r3, [r3, #0]
   80c1a:	607b      	str	r3, [r7, #4]
     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80c1c:	4b0c      	ldr	r3, [pc, #48]	; (80c50 <ctrl_readmem_bulk+0x40>)
   80c1e:	685b      	ldr	r3, [r3, #4]
   80c20:	603b      	str	r3, [r7, #0]

     FPGA_releaselock();
   80c22:	4b0c      	ldr	r3, [pc, #48]	; (80c54 <ctrl_readmem_bulk+0x44>)
   80c24:	4798      	blx	r3
     while(!FPGA_setlock(fpga_blockin));
   80c26:	bf00      	nop
   80c28:	2002      	movs	r0, #2
   80c2a:	4b0b      	ldr	r3, [pc, #44]	; (80c58 <ctrl_readmem_bulk+0x48>)
   80c2c:	4798      	blx	r3
   80c2e:	4603      	mov	r3, r0
   80c30:	2b00      	cmp	r3, #0
   80c32:	d0f9      	beq.n	80c28 <ctrl_readmem_bulk+0x18>

     FPGA_setaddr(address);
   80c34:	6838      	ldr	r0, [r7, #0]
   80c36:	4b09      	ldr	r3, [pc, #36]	; (80c5c <ctrl_readmem_bulk+0x4c>)
   80c38:	4798      	blx	r3

     /* Do memory read */
     udi_vendor_bulk_in_run(
   80c3a:	4a09      	ldr	r2, [pc, #36]	; (80c60 <ctrl_readmem_bulk+0x50>)
   80c3c:	6879      	ldr	r1, [r7, #4]
   80c3e:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   80c42:	4b08      	ldr	r3, [pc, #32]	; (80c64 <ctrl_readmem_bulk+0x54>)
   80c44:	4798      	blx	r3
          (uint8_t *) PSRAM_BASE_ADDRESS,
          buflen,
          main_vendor_bulk_in_received
          );
}
   80c46:	bf00      	nop
   80c48:	3708      	adds	r7, #8
   80c4a:	46bd      	mov	sp, r7
   80c4c:	bd80      	pop	{r7, pc}
   80c4e:	bf00      	nop
   80c50:	20000bf8 	.word	0x20000bf8
   80c54:	0008109d 	.word	0x0008109d
   80c58:	0008105d 	.word	0x0008105d
   80c5c:	000810cd 	.word	0x000810cd
   80c60:	00080f65 	.word	0x00080f65
   80c64:	00083c49 	.word	0x00083c49

00080c68 <ctrl_readmem_ctrl>:

void ctrl_readmem_ctrl(void){
   80c68:	b580      	push	{r7, lr}
   80c6a:	b082      	sub	sp, #8
   80c6c:	af00      	add	r7, sp, #0
     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80c6e:	4b0e      	ldr	r3, [pc, #56]	; (80ca8 <ctrl_readmem_ctrl+0x40>)
   80c70:	681b      	ldr	r3, [r3, #0]
   80c72:	607b      	str	r3, [r7, #4]
     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80c74:	4b0c      	ldr	r3, [pc, #48]	; (80ca8 <ctrl_readmem_ctrl+0x40>)
   80c76:	685b      	ldr	r3, [r3, #4]
   80c78:	603b      	str	r3, [r7, #0]

     FPGA_releaselock();
   80c7a:	4b0c      	ldr	r3, [pc, #48]	; (80cac <ctrl_readmem_ctrl+0x44>)
   80c7c:	4798      	blx	r3
     while(!FPGA_setlock(fpga_ctrlmem));
   80c7e:	bf00      	nop
   80c80:	2005      	movs	r0, #5
   80c82:	4b0b      	ldr	r3, [pc, #44]	; (80cb0 <ctrl_readmem_ctrl+0x48>)
   80c84:	4798      	blx	r3
   80c86:	4603      	mov	r3, r0
   80c88:	2b00      	cmp	r3, #0
   80c8a:	d0f9      	beq.n	80c80 <ctrl_readmem_ctrl+0x18>

     /* Set address */
     FPGA_setaddr(address);
   80c8c:	6838      	ldr	r0, [r7, #0]
   80c8e:	4b09      	ldr	r3, [pc, #36]	; (80cb4 <ctrl_readmem_ctrl+0x4c>)
   80c90:	4798      	blx	r3

     /* Do memory read */
     ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   80c92:	4b09      	ldr	r3, [pc, #36]	; (80cb8 <ctrl_readmem_ctrl+0x50>)
   80c94:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   80c98:	601a      	str	r2, [r3, #0]

     /* Set size to read */
     ctrlmemread_size = buflen;
   80c9a:	4a08      	ldr	r2, [pc, #32]	; (80cbc <ctrl_readmem_ctrl+0x54>)
   80c9c:	687b      	ldr	r3, [r7, #4]
   80c9e:	6013      	str	r3, [r2, #0]

     /* Start Transaction */
}
   80ca0:	bf00      	nop
   80ca2:	3708      	adds	r7, #8
   80ca4:	46bd      	mov	sp, r7
   80ca6:	bd80      	pop	{r7, pc}
   80ca8:	20000bf8 	.word	0x20000bf8
   80cac:	0008109d 	.word	0x0008109d
   80cb0:	0008105d 	.word	0x0008105d
   80cb4:	000810cd 	.word	0x000810cd
   80cb8:	20000c3c 	.word	0x20000c3c
   80cbc:	20000c40 	.word	0x20000c40

00080cc0 <ctrl_writemem_ctrl>:


void ctrl_writemem_ctrl(void){
   80cc0:	b580      	push	{r7, lr}
   80cc2:	b084      	sub	sp, #16
   80cc4:	af00      	add	r7, sp, #0
     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80cc6:	4b16      	ldr	r3, [pc, #88]	; (80d20 <ctrl_writemem_ctrl+0x60>)
   80cc8:	681b      	ldr	r3, [r3, #0]
   80cca:	60bb      	str	r3, [r7, #8]
     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80ccc:	4b14      	ldr	r3, [pc, #80]	; (80d20 <ctrl_writemem_ctrl+0x60>)
   80cce:	685b      	ldr	r3, [r3, #4]
   80cd0:	607b      	str	r3, [r7, #4]

     uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
   80cd2:	4b14      	ldr	r3, [pc, #80]	; (80d24 <ctrl_writemem_ctrl+0x64>)
   80cd4:	603b      	str	r3, [r7, #0]

     //printf("Writing to %x, %d\n", address, buflen);

     FPGA_releaselock();
   80cd6:	4b14      	ldr	r3, [pc, #80]	; (80d28 <ctrl_writemem_ctrl+0x68>)
   80cd8:	4798      	blx	r3
     while(!FPGA_setlock(fpga_generic));
   80cda:	bf00      	nop
   80cdc:	2001      	movs	r0, #1
   80cde:	4b13      	ldr	r3, [pc, #76]	; (80d2c <ctrl_writemem_ctrl+0x6c>)
   80ce0:	4798      	blx	r3
   80ce2:	4603      	mov	r3, r0
   80ce4:	2b00      	cmp	r3, #0
   80ce6:	d0f9      	beq.n	80cdc <ctrl_writemem_ctrl+0x1c>

     /* Set address */
     FPGA_setaddr(address);
   80ce8:	6878      	ldr	r0, [r7, #4]
   80cea:	4b11      	ldr	r3, [pc, #68]	; (80d30 <ctrl_writemem_ctrl+0x70>)
   80cec:	4798      	blx	r3

     /* Start Transaction */

     /* Do memory write */
     for(unsigned int i = 0; i < buflen; i++){
   80cee:	2300      	movs	r3, #0
   80cf0:	60fb      	str	r3, [r7, #12]
   80cf2:	e00b      	b.n	80d0c <ctrl_writemem_ctrl+0x4c>
          xram[i] = ctrlbuf_payload[i];
   80cf4:	4b0f      	ldr	r3, [pc, #60]	; (80d34 <ctrl_writemem_ctrl+0x74>)
   80cf6:	681a      	ldr	r2, [r3, #0]
   80cf8:	68fb      	ldr	r3, [r7, #12]
   80cfa:	4413      	add	r3, r2
   80cfc:	6839      	ldr	r1, [r7, #0]
   80cfe:	68fa      	ldr	r2, [r7, #12]
   80d00:	440a      	add	r2, r1
   80d02:	7812      	ldrb	r2, [r2, #0]
   80d04:	701a      	strb	r2, [r3, #0]
     for(unsigned int i = 0; i < buflen; i++){
   80d06:	68fb      	ldr	r3, [r7, #12]
   80d08:	3301      	adds	r3, #1
   80d0a:	60fb      	str	r3, [r7, #12]
   80d0c:	68fa      	ldr	r2, [r7, #12]
   80d0e:	68bb      	ldr	r3, [r7, #8]
   80d10:	429a      	cmp	r2, r3
   80d12:	d3ef      	bcc.n	80cf4 <ctrl_writemem_ctrl+0x34>
     }

     FPGA_releaselock();
   80d14:	4b04      	ldr	r3, [pc, #16]	; (80d28 <ctrl_writemem_ctrl+0x68>)
   80d16:	4798      	blx	r3
}
   80d18:	bf00      	nop
   80d1a:	3710      	adds	r7, #16
   80d1c:	46bd      	mov	sp, r7
   80d1e:	bd80      	pop	{r7, pc}
   80d20:	20000bf8 	.word	0x20000bf8
   80d24:	20000c00 	.word	0x20000c00
   80d28:	0008109d 	.word	0x0008109d
   80d2c:	0008105d 	.word	0x0008105d
   80d30:	000810cd 	.word	0x000810cd
   80d34:	20000290 	.word	0x20000290

00080d38 <ctrl_writemem_bulk>:

static uint32_t bulkread_address = 0;
static uint32_t bulkread_len = 0;

void ctrl_writemem_bulk(void){
   80d38:	b580      	push	{r7, lr}
   80d3a:	b082      	sub	sp, #8
   80d3c:	af00      	add	r7, sp, #0
//uint32_t buflen = *(CTRLBUFFER_WORDPTR);
     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80d3e:	4b09      	ldr	r3, [pc, #36]	; (80d64 <ctrl_writemem_bulk+0x2c>)
   80d40:	685b      	ldr	r3, [r3, #4]
   80d42:	607b      	str	r3, [r7, #4]

     // TODO: see block in
     FPGA_releaselock();
   80d44:	4b08      	ldr	r3, [pc, #32]	; (80d68 <ctrl_writemem_bulk+0x30>)
   80d46:	4798      	blx	r3
     while(!FPGA_setlock(fpga_blockout));
   80d48:	bf00      	nop
   80d4a:	2004      	movs	r0, #4
   80d4c:	4b07      	ldr	r3, [pc, #28]	; (80d6c <ctrl_writemem_bulk+0x34>)
   80d4e:	4798      	blx	r3
   80d50:	4603      	mov	r3, r0
   80d52:	2b00      	cmp	r3, #0
   80d54:	d0f9      	beq.n	80d4a <ctrl_writemem_bulk+0x12>

     /* Set address */
     FPGA_setaddr(address);
   80d56:	6878      	ldr	r0, [r7, #4]
   80d58:	4b05      	ldr	r3, [pc, #20]	; (80d70 <ctrl_writemem_bulk+0x38>)
   80d5a:	4798      	blx	r3

     /* Transaction done in generic callback */
}
   80d5c:	bf00      	nop
   80d5e:	3708      	adds	r7, #8
   80d60:	46bd      	mov	sp, r7
   80d62:	bd80      	pop	{r7, pc}
   80d64:	20000bf8 	.word	0x20000bf8
   80d68:	0008109d 	.word	0x0008109d
   80d6c:	0008105d 	.word	0x0008105d
   80d70:	000810cd 	.word	0x000810cd

00080d74 <ctrl_progfpga_bulk>:
     default:
          break;
     }
}

void ctrl_progfpga_bulk(void){
   80d74:	b580      	push	{r7, lr}
   80d76:	af00      	add	r7, sp, #0

     switch(udd_g_ctrlreq.req.wValue){
   80d78:	4b0b      	ldr	r3, [pc, #44]	; (80da8 <ctrl_progfpga_bulk+0x34>)
   80d7a:	885b      	ldrh	r3, [r3, #2]
   80d7c:	2ba1      	cmp	r3, #161	; 0xa1
   80d7e:	d007      	beq.n	80d90 <ctrl_progfpga_bulk+0x1c>
   80d80:	2ba2      	cmp	r3, #162	; 0xa2
   80d82:	d00b      	beq.n	80d9c <ctrl_progfpga_bulk+0x28>
   80d84:	2ba0      	cmp	r3, #160	; 0xa0
   80d86:	d000      	beq.n	80d8a <ctrl_progfpga_bulk+0x16>
          /* Done */
          blockendpoint_usage = bep_emem;
          break;

     default:
          break;
   80d88:	e00c      	b.n	80da4 <ctrl_progfpga_bulk+0x30>
          fpga_program_setup1();
   80d8a:	4b08      	ldr	r3, [pc, #32]	; (80dac <ctrl_progfpga_bulk+0x38>)
   80d8c:	4798      	blx	r3
          break;
   80d8e:	e009      	b.n	80da4 <ctrl_progfpga_bulk+0x30>
          fpga_program_setup2();
   80d90:	4b07      	ldr	r3, [pc, #28]	; (80db0 <ctrl_progfpga_bulk+0x3c>)
   80d92:	4798      	blx	r3
          blockendpoint_usage = bep_fpgabitstream;
   80d94:	4b07      	ldr	r3, [pc, #28]	; (80db4 <ctrl_progfpga_bulk+0x40>)
   80d96:	220a      	movs	r2, #10
   80d98:	701a      	strb	r2, [r3, #0]
          break;
   80d9a:	e003      	b.n	80da4 <ctrl_progfpga_bulk+0x30>
          blockendpoint_usage = bep_emem;
   80d9c:	4b05      	ldr	r3, [pc, #20]	; (80db4 <ctrl_progfpga_bulk+0x40>)
   80d9e:	2200      	movs	r2, #0
   80da0:	701a      	strb	r2, [r3, #0]
          break;
   80da2:	bf00      	nop
     }
}
   80da4:	bf00      	nop
   80da6:	bd80      	pop	{r7, pc}
   80da8:	20000d54 	.word	0x20000d54
   80dac:	000811a5 	.word	0x000811a5
   80db0:	00081225 	.word	0x00081225
   80db4:	20000c38 	.word	0x20000c38

00080db8 <main_setup_out_received>:

bool main_setup_out_received(void)
{
   80db8:	b580      	push	{r7, lr}
   80dba:	af00      	add	r7, sp, #0
     //Add buffer if used
     udd_g_ctrlreq.payload = ctrlbuffer;
   80dbc:	4b30      	ldr	r3, [pc, #192]	; (80e80 <main_setup_out_received+0xc8>)
   80dbe:	4a31      	ldr	r2, [pc, #196]	; (80e84 <main_setup_out_received+0xcc>)
   80dc0:	609a      	str	r2, [r3, #8]
     udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   80dc2:	4b2f      	ldr	r3, [pc, #188]	; (80e80 <main_setup_out_received+0xc8>)
   80dc4:	88db      	ldrh	r3, [r3, #6]
   80dc6:	2b40      	cmp	r3, #64	; 0x40
   80dc8:	bf28      	it	cs
   80dca:	2340      	movcs	r3, #64	; 0x40
   80dcc:	b29a      	uxth	r2, r3
   80dce:	4b2c      	ldr	r3, [pc, #176]	; (80e80 <main_setup_out_received+0xc8>)
   80dd0:	819a      	strh	r2, [r3, #12]

     blockendpoint_usage = bep_emem;
   80dd2:	4b2d      	ldr	r3, [pc, #180]	; (80e88 <main_setup_out_received+0xd0>)
   80dd4:	2200      	movs	r2, #0
   80dd6:	701a      	strb	r2, [r3, #0]
     static uint8_t  respbuf[128];
     switch(udd_g_ctrlreq.req.bRequest){
   80dd8:	4b29      	ldr	r3, [pc, #164]	; (80e80 <main_setup_out_received+0xc8>)
   80dda:	785b      	ldrb	r3, [r3, #1]
   80ddc:	3b10      	subs	r3, #16
   80dde:	2b06      	cmp	r3, #6
   80de0:	d841      	bhi.n	80e66 <main_setup_out_received+0xae>
   80de2:	a201      	add	r2, pc, #4	; (adr r2, 80de8 <main_setup_out_received+0x30>)
   80de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80de8:	00080e05 	.word	0x00080e05
   80dec:	00080e31 	.word	0x00080e31
   80df0:	00080e1b 	.word	0x00080e1b
   80df4:	00080e47 	.word	0x00080e47
   80df8:	00080e67 	.word	0x00080e67
   80dfc:	00080e67 	.word	0x00080e67
   80e00:	00080e5d 	.word	0x00080e5d
          /* Memory Read */
     case REQ_MEMREAD_BULK:
          if (FPGA_setlock(fpga_usblocked)){
   80e04:	2006      	movs	r0, #6
   80e06:	4b21      	ldr	r3, [pc, #132]	; (80e8c <main_setup_out_received+0xd4>)
   80e08:	4798      	blx	r3
   80e0a:	4603      	mov	r3, r0
   80e0c:	2b00      	cmp	r3, #0
   80e0e:	d02c      	beq.n	80e6a <main_setup_out_received+0xb2>
               udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   80e10:	4b1b      	ldr	r3, [pc, #108]	; (80e80 <main_setup_out_received+0xc8>)
   80e12:	4a1f      	ldr	r2, [pc, #124]	; (80e90 <main_setup_out_received+0xd8>)
   80e14:	611a      	str	r2, [r3, #16]
               return true;
   80e16:	2301      	movs	r3, #1
   80e18:	e02f      	b.n	80e7a <main_setup_out_received+0xc2>
          }
          break;
     case REQ_MEMREAD_CTRL:
          if (FPGA_setlock(fpga_usblocked)){
   80e1a:	2006      	movs	r0, #6
   80e1c:	4b1b      	ldr	r3, [pc, #108]	; (80e8c <main_setup_out_received+0xd4>)
   80e1e:	4798      	blx	r3
   80e20:	4603      	mov	r3, r0
   80e22:	2b00      	cmp	r3, #0
   80e24:	d023      	beq.n	80e6e <main_setup_out_received+0xb6>
               udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   80e26:	4b16      	ldr	r3, [pc, #88]	; (80e80 <main_setup_out_received+0xc8>)
   80e28:	4a1a      	ldr	r2, [pc, #104]	; (80e94 <main_setup_out_received+0xdc>)
   80e2a:	611a      	str	r2, [r3, #16]
               return true;
   80e2c:	2301      	movs	r3, #1
   80e2e:	e024      	b.n	80e7a <main_setup_out_received+0xc2>
          break;


          /* Memory Write */
     case REQ_MEMWRITE_BULK:
          if (FPGA_setlock(fpga_usblocked)){
   80e30:	2006      	movs	r0, #6
   80e32:	4b16      	ldr	r3, [pc, #88]	; (80e8c <main_setup_out_received+0xd4>)
   80e34:	4798      	blx	r3
   80e36:	4603      	mov	r3, r0
   80e38:	2b00      	cmp	r3, #0
   80e3a:	d01a      	beq.n	80e72 <main_setup_out_received+0xba>
               udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   80e3c:	4b10      	ldr	r3, [pc, #64]	; (80e80 <main_setup_out_received+0xc8>)
   80e3e:	4a16      	ldr	r2, [pc, #88]	; (80e98 <main_setup_out_received+0xe0>)
   80e40:	611a      	str	r2, [r3, #16]
               return true;
   80e42:	2301      	movs	r3, #1
   80e44:	e019      	b.n	80e7a <main_setup_out_received+0xc2>
          }
          break;


     case REQ_MEMWRITE_CTRL:
          if (FPGA_setlock(fpga_usblocked)){
   80e46:	2006      	movs	r0, #6
   80e48:	4b10      	ldr	r3, [pc, #64]	; (80e8c <main_setup_out_received+0xd4>)
   80e4a:	4798      	blx	r3
   80e4c:	4603      	mov	r3, r0
   80e4e:	2b00      	cmp	r3, #0
   80e50:	d011      	beq.n	80e76 <main_setup_out_received+0xbe>
               udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   80e52:	4b0b      	ldr	r3, [pc, #44]	; (80e80 <main_setup_out_received+0xc8>)
   80e54:	4a11      	ldr	r2, [pc, #68]	; (80e9c <main_setup_out_received+0xe4>)
   80e56:	611a      	str	r2, [r3, #16]
               return true;
   80e58:	2301      	movs	r3, #1
   80e5a:	e00e      	b.n	80e7a <main_setup_out_received+0xc2>
          }
          break;

     case REQ_FPGA_PROGRAM:
          udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   80e5c:	4b08      	ldr	r3, [pc, #32]	; (80e80 <main_setup_out_received+0xc8>)
   80e5e:	4a10      	ldr	r2, [pc, #64]	; (80ea0 <main_setup_out_received+0xe8>)
   80e60:	611a      	str	r2, [r3, #16]
          return true;
   80e62:	2301      	movs	r3, #1
   80e64:	e009      	b.n	80e7a <main_setup_out_received+0xc2>
     default:
          return false;
   80e66:	2300      	movs	r3, #0
   80e68:	e007      	b.n	80e7a <main_setup_out_received+0xc2>
          break;
   80e6a:	bf00      	nop
   80e6c:	e004      	b.n	80e78 <main_setup_out_received+0xc0>
          break;
   80e6e:	bf00      	nop
   80e70:	e002      	b.n	80e78 <main_setup_out_received+0xc0>
          break;
   80e72:	bf00      	nop
   80e74:	e000      	b.n	80e78 <main_setup_out_received+0xc0>
          break;
   80e76:	bf00      	nop
     }

     return false;
   80e78:	2300      	movs	r3, #0
}
   80e7a:	4618      	mov	r0, r3
   80e7c:	bd80      	pop	{r7, pc}
   80e7e:	bf00      	nop
   80e80:	20000d54 	.word	0x20000d54
   80e84:	20000bf8 	.word	0x20000bf8
   80e88:	20000c38 	.word	0x20000c38
   80e8c:	0008105d 	.word	0x0008105d
   80e90:	00080c11 	.word	0x00080c11
   80e94:	00080c69 	.word	0x00080c69
   80e98:	00080d39 	.word	0x00080d39
   80e9c:	00080cc1 	.word	0x00080cc1
   80ea0:	00080d75 	.word	0x00080d75

00080ea4 <main_setup_in_received>:
  && (udd_g_ctrlreq.req.bRequest == 0)
  && (0 != udd_g_ctrlreq.req.wLength)
*/

bool main_setup_in_received(void)
{
   80ea4:	b580      	push	{r7, lr}
   80ea6:	af00      	add	r7, sp, #0
     */

     static uint8_t  respbuf[64];
     unsigned int cnt;

     switch(udd_g_ctrlreq.req.bRequest){
   80ea8:	4b27      	ldr	r3, [pc, #156]	; (80f48 <main_setup_in_received+0xa4>)
   80eaa:	785b      	ldrb	r3, [r3, #1]
   80eac:	2b15      	cmp	r3, #21
   80eae:	d02a      	beq.n	80f06 <main_setup_in_received+0x62>
   80eb0:	2b17      	cmp	r3, #23
   80eb2:	d017      	beq.n	80ee4 <main_setup_in_received+0x40>
   80eb4:	2b12      	cmp	r3, #18
   80eb6:	d143      	bne.n	80f40 <main_setup_in_received+0x9c>
     case REQ_MEMREAD_CTRL:
          udd_g_ctrlreq.payload = ctrlmemread_buf;
   80eb8:	4b24      	ldr	r3, [pc, #144]	; (80f4c <main_setup_in_received+0xa8>)
   80eba:	681b      	ldr	r3, [r3, #0]
   80ebc:	4a22      	ldr	r2, [pc, #136]	; (80f48 <main_setup_in_received+0xa4>)
   80ebe:	6093      	str	r3, [r2, #8]
          udd_g_ctrlreq.payload_size = ctrlmemread_size;
   80ec0:	4b23      	ldr	r3, [pc, #140]	; (80f50 <main_setup_in_received+0xac>)
   80ec2:	681b      	ldr	r3, [r3, #0]
   80ec4:	b29a      	uxth	r2, r3
   80ec6:	4b20      	ldr	r3, [pc, #128]	; (80f48 <main_setup_in_received+0xa4>)
   80ec8:	819a      	strh	r2, [r3, #12]
          ctrlmemread_size = 0;
   80eca:	4b21      	ldr	r3, [pc, #132]	; (80f50 <main_setup_in_received+0xac>)
   80ecc:	2200      	movs	r2, #0
   80ece:	601a      	str	r2, [r3, #0]

          if (FPGA_lockstatus() == fpga_ctrlmem){
   80ed0:	4b20      	ldr	r3, [pc, #128]	; (80f54 <main_setup_in_received+0xb0>)
   80ed2:	4798      	blx	r3
   80ed4:	4603      	mov	r3, r0
   80ed6:	2b05      	cmp	r3, #5
   80ed8:	d102      	bne.n	80ee0 <main_setup_in_received+0x3c>
               FPGA_setlock(fpga_unlocked);
   80eda:	2000      	movs	r0, #0
   80edc:	4b1e      	ldr	r3, [pc, #120]	; (80f58 <main_setup_in_received+0xb4>)
   80ede:	4798      	blx	r3
          }

          return true;
   80ee0:	2301      	movs	r3, #1
   80ee2:	e02e      	b.n	80f42 <main_setup_in_received+0x9e>
          break;

     case REQ_FW_VERSION:
          respbuf[0] = FW_VER_MAJOR;
   80ee4:	4b1d      	ldr	r3, [pc, #116]	; (80f5c <main_setup_in_received+0xb8>)
   80ee6:	2200      	movs	r2, #0
   80ee8:	701a      	strb	r2, [r3, #0]
          respbuf[1] = FW_VER_MINOR;
   80eea:	4b1c      	ldr	r3, [pc, #112]	; (80f5c <main_setup_in_received+0xb8>)
   80eec:	220a      	movs	r2, #10
   80eee:	705a      	strb	r2, [r3, #1]
          respbuf[2] = FW_VER_DEBUG;
   80ef0:	4b1a      	ldr	r3, [pc, #104]	; (80f5c <main_setup_in_received+0xb8>)
   80ef2:	2200      	movs	r2, #0
   80ef4:	709a      	strb	r2, [r3, #2]
          udd_g_ctrlreq.payload = respbuf;
   80ef6:	4b14      	ldr	r3, [pc, #80]	; (80f48 <main_setup_in_received+0xa4>)
   80ef8:	4a18      	ldr	r2, [pc, #96]	; (80f5c <main_setup_in_received+0xb8>)
   80efa:	609a      	str	r2, [r3, #8]
          udd_g_ctrlreq.payload_size = 3;
   80efc:	4b12      	ldr	r3, [pc, #72]	; (80f48 <main_setup_in_received+0xa4>)
   80efe:	2203      	movs	r2, #3
   80f00:	819a      	strh	r2, [r3, #12]
          return true;
   80f02:	2301      	movs	r3, #1
   80f04:	e01d      	b.n	80f42 <main_setup_in_received+0x9e>
          break;

     case REQ_FPGA_STATUS:
          respbuf[0] = FPGA_ISDONE();
   80f06:	2013      	movs	r0, #19
   80f08:	4b15      	ldr	r3, [pc, #84]	; (80f60 <main_setup_in_received+0xbc>)
   80f0a:	4798      	blx	r3
   80f0c:	4603      	mov	r3, r0
   80f0e:	2b00      	cmp	r3, #0
   80f10:	bf14      	ite	ne
   80f12:	2301      	movne	r3, #1
   80f14:	2300      	moveq	r3, #0
   80f16:	b2db      	uxtb	r3, r3
   80f18:	461a      	mov	r2, r3
   80f1a:	4b10      	ldr	r3, [pc, #64]	; (80f5c <main_setup_in_received+0xb8>)
   80f1c:	701a      	strb	r2, [r3, #0]
          respbuf[1] = 0;
   80f1e:	4b0f      	ldr	r3, [pc, #60]	; (80f5c <main_setup_in_received+0xb8>)
   80f20:	2200      	movs	r2, #0
   80f22:	705a      	strb	r2, [r3, #1]
          respbuf[2] = 0;
   80f24:	4b0d      	ldr	r3, [pc, #52]	; (80f5c <main_setup_in_received+0xb8>)
   80f26:	2200      	movs	r2, #0
   80f28:	709a      	strb	r2, [r3, #2]
          respbuf[3] = 0;
   80f2a:	4b0c      	ldr	r3, [pc, #48]	; (80f5c <main_setup_in_received+0xb8>)
   80f2c:	2200      	movs	r2, #0
   80f2e:	70da      	strb	r2, [r3, #3]
          udd_g_ctrlreq.payload = respbuf;
   80f30:	4b05      	ldr	r3, [pc, #20]	; (80f48 <main_setup_in_received+0xa4>)
   80f32:	4a0a      	ldr	r2, [pc, #40]	; (80f5c <main_setup_in_received+0xb8>)
   80f34:	609a      	str	r2, [r3, #8]
          udd_g_ctrlreq.payload_size = 4;
   80f36:	4b04      	ldr	r3, [pc, #16]	; (80f48 <main_setup_in_received+0xa4>)
   80f38:	2204      	movs	r2, #4
   80f3a:	819a      	strh	r2, [r3, #12]
          return true;
   80f3c:	2301      	movs	r3, #1
   80f3e:	e000      	b.n	80f42 <main_setup_in_received+0x9e>
          break;
     default:
          return false;
   80f40:	2300      	movs	r3, #0
     }
     return false;
}
   80f42:	4618      	mov	r0, r3
   80f44:	bd80      	pop	{r7, pc}
   80f46:	bf00      	nop
   80f48:	20000d54 	.word	0x20000d54
   80f4c:	20000c3c 	.word	0x20000c3c
   80f50:	20000c40 	.word	0x20000c40
   80f54:	000810b5 	.word	0x000810b5
   80f58:	0008105d 	.word	0x0008105d
   80f5c:	20000c44 	.word	0x20000c44
   80f60:	00083e8d 	.word	0x00083e8d

00080f64 <main_vendor_bulk_in_received>:

void main_vendor_bulk_in_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
   80f64:	b580      	push	{r7, lr}
   80f66:	b082      	sub	sp, #8
   80f68:	af00      	add	r7, sp, #0
   80f6a:	4603      	mov	r3, r0
   80f6c:	6039      	str	r1, [r7, #0]
   80f6e:	71fb      	strb	r3, [r7, #7]
   80f70:	4613      	mov	r3, r2
   80f72:	71bb      	strb	r3, [r7, #6]
     UNUSED(nb_transfered);
     UNUSED(ep);
     if (UDD_EP_TRANSFER_OK != status) {
   80f74:	79fb      	ldrb	r3, [r7, #7]
   80f76:	2b00      	cmp	r3, #0
   80f78:	d108      	bne.n	80f8c <main_vendor_bulk_in_received+0x28>
          return; // Transfer aborted/error
     }

     if (FPGA_lockstatus() == fpga_blockin){
   80f7a:	4b06      	ldr	r3, [pc, #24]	; (80f94 <main_vendor_bulk_in_received+0x30>)
   80f7c:	4798      	blx	r3
   80f7e:	4603      	mov	r3, r0
   80f80:	2b02      	cmp	r3, #2
   80f82:	d104      	bne.n	80f8e <main_vendor_bulk_in_received+0x2a>
          FPGA_setlock(fpga_unlocked);
   80f84:	2000      	movs	r0, #0
   80f86:	4b04      	ldr	r3, [pc, #16]	; (80f98 <main_vendor_bulk_in_received+0x34>)
   80f88:	4798      	blx	r3
   80f8a:	e000      	b.n	80f8e <main_vendor_bulk_in_received+0x2a>
          return; // Transfer aborted/error
   80f8c:	bf00      	nop
     }
}
   80f8e:	3708      	adds	r7, #8
   80f90:	46bd      	mov	sp, r7
   80f92:	bd80      	pop	{r7, pc}
   80f94:	000810b5 	.word	0x000810b5
   80f98:	0008105d 	.word	0x0008105d

00080f9c <main_vendor_bulk_out_received>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep)
{
   80f9c:	b580      	push	{r7, lr}
   80f9e:	b084      	sub	sp, #16
   80fa0:	af00      	add	r7, sp, #0
   80fa2:	4603      	mov	r3, r0
   80fa4:	6039      	str	r1, [r7, #0]
   80fa6:	71fb      	strb	r3, [r7, #7]
   80fa8:	4613      	mov	r3, r2
   80faa:	71bb      	strb	r3, [r7, #6]
     UNUSED(ep);
     if (UDD_EP_TRANSFER_OK != status) {
   80fac:	79fb      	ldrb	r3, [r7, #7]
   80fae:	2b00      	cmp	r3, #0
   80fb0:	d006      	beq.n	80fc0 <main_vendor_bulk_out_received+0x24>
          // Transfer aborted

          //restart
          udi_vendor_bulk_out_run(
   80fb2:	4a22      	ldr	r2, [pc, #136]	; (8103c <main_vendor_bulk_out_received+0xa0>)
   80fb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80fb8:	4821      	ldr	r0, [pc, #132]	; (81040 <main_vendor_bulk_out_received+0xa4>)
   80fba:	4b22      	ldr	r3, [pc, #136]	; (81044 <main_vendor_bulk_out_received+0xa8>)
   80fbc:	4798      	blx	r3
               main_buf_loopback,
               sizeof(main_buf_loopback),
               main_vendor_bulk_out_received);

          return;
   80fbe:	e039      	b.n	81034 <main_vendor_bulk_out_received+0x98>
     }

     if (blockendpoint_usage == bep_emem){
   80fc0:	4b21      	ldr	r3, [pc, #132]	; (81048 <main_vendor_bulk_out_received+0xac>)
   80fc2:	781b      	ldrb	r3, [r3, #0]
   80fc4:	2b00      	cmp	r3, #0
   80fc6:	d11a      	bne.n	80ffe <main_vendor_bulk_out_received+0x62>
          for(unsigned int i = 0; i < nb_transfered; i++){
   80fc8:	2300      	movs	r3, #0
   80fca:	60fb      	str	r3, [r7, #12]
   80fcc:	e00b      	b.n	80fe6 <main_vendor_bulk_out_received+0x4a>
               xram[i] = main_buf_loopback[i];
   80fce:	4b1f      	ldr	r3, [pc, #124]	; (8104c <main_vendor_bulk_out_received+0xb0>)
   80fd0:	681a      	ldr	r2, [r3, #0]
   80fd2:	68fb      	ldr	r3, [r7, #12]
   80fd4:	4413      	add	r3, r2
   80fd6:	491a      	ldr	r1, [pc, #104]	; (81040 <main_vendor_bulk_out_received+0xa4>)
   80fd8:	68fa      	ldr	r2, [r7, #12]
   80fda:	440a      	add	r2, r1
   80fdc:	7812      	ldrb	r2, [r2, #0]
   80fde:	701a      	strb	r2, [r3, #0]
          for(unsigned int i = 0; i < nb_transfered; i++){
   80fe0:	68fb      	ldr	r3, [r7, #12]
   80fe2:	3301      	adds	r3, #1
   80fe4:	60fb      	str	r3, [r7, #12]
   80fe6:	68fa      	ldr	r2, [r7, #12]
   80fe8:	683b      	ldr	r3, [r7, #0]
   80fea:	429a      	cmp	r2, r3
   80fec:	d3ef      	bcc.n	80fce <main_vendor_bulk_out_received+0x32>
          }

          if (FPGA_lockstatus() == fpga_blockout){
   80fee:	4b18      	ldr	r3, [pc, #96]	; (81050 <main_vendor_bulk_out_received+0xb4>)
   80ff0:	4798      	blx	r3
   80ff2:	4603      	mov	r3, r0
   80ff4:	2b04      	cmp	r3, #4
   80ff6:	d117      	bne.n	81028 <main_vendor_bulk_out_received+0x8c>
               FPGA_releaselock();
   80ff8:	4b16      	ldr	r3, [pc, #88]	; (81054 <main_vendor_bulk_out_received+0xb8>)
   80ffa:	4798      	blx	r3
   80ffc:	e014      	b.n	81028 <main_vendor_bulk_out_received+0x8c>
          }
     } else if (blockendpoint_usage == bep_fpgabitstream){
   80ffe:	4b12      	ldr	r3, [pc, #72]	; (81048 <main_vendor_bulk_out_received+0xac>)
   81000:	781b      	ldrb	r3, [r3, #0]
   81002:	2b0a      	cmp	r3, #10
   81004:	d110      	bne.n	81028 <main_vendor_bulk_out_received+0x8c>

          /* Send byte to FPGA - this could eventually be done via SPI */
          // TODO: is this dangerous?
          for(unsigned int i = 0; i < nb_transfered; i++){
   81006:	2300      	movs	r3, #0
   81008:	60bb      	str	r3, [r7, #8]
   8100a:	e009      	b.n	81020 <main_vendor_bulk_out_received+0x84>
               fpga_program_sendbyte(main_buf_loopback[i]);
   8100c:	4a0c      	ldr	r2, [pc, #48]	; (81040 <main_vendor_bulk_out_received+0xa4>)
   8100e:	68bb      	ldr	r3, [r7, #8]
   81010:	4413      	add	r3, r2
   81012:	781b      	ldrb	r3, [r3, #0]
   81014:	4618      	mov	r0, r3
   81016:	4b10      	ldr	r3, [pc, #64]	; (81058 <main_vendor_bulk_out_received+0xbc>)
   81018:	4798      	blx	r3
          for(unsigned int i = 0; i < nb_transfered; i++){
   8101a:	68bb      	ldr	r3, [r7, #8]
   8101c:	3301      	adds	r3, #1
   8101e:	60bb      	str	r3, [r7, #8]
   81020:	68ba      	ldr	r2, [r7, #8]
   81022:	683b      	ldr	r3, [r7, #0]
   81024:	429a      	cmp	r2, r3
   81026:	d3f1      	bcc.n	8100c <main_vendor_bulk_out_received+0x70>
#endif
     }

     //printf("BULKOUT: %d bytes\n", (int)nb_transfered);

     udi_vendor_bulk_out_run(
   81028:	4a04      	ldr	r2, [pc, #16]	; (8103c <main_vendor_bulk_out_received+0xa0>)
   8102a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8102e:	4804      	ldr	r0, [pc, #16]	; (81040 <main_vendor_bulk_out_received+0xa4>)
   81030:	4b04      	ldr	r3, [pc, #16]	; (81044 <main_vendor_bulk_out_received+0xa8>)
   81032:	4798      	blx	r3
          main_buf_loopback,
          sizeof(main_buf_loopback),
          main_vendor_bulk_out_received);
}
   81034:	3710      	adds	r7, #16
   81036:	46bd      	mov	sp, r7
   81038:	bd80      	pop	{r7, pc}
   8103a:	bf00      	nop
   8103c:	00080f9d 	.word	0x00080f9d
   81040:	200007f8 	.word	0x200007f8
   81044:	00083c75 	.word	0x00083c75
   81048:	20000c38 	.word	0x20000c38
   8104c:	20000290 	.word	0x20000290
   81050:	000810b5 	.word	0x000810b5
   81054:	0008109d 	.word	0x0008109d
   81058:	00081239 	.word	0x00081239

0008105c <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   8105c:	b580      	push	{r7, lr}
   8105e:	b084      	sub	sp, #16
   81060:	af00      	add	r7, sp, #0
   81062:	4603      	mov	r3, r0
   81064:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
   81066:	2300      	movs	r3, #0
   81068:	60fb      	str	r3, [r7, #12]
  cpu_irq_enter_critical();
   8106a:	4b09      	ldr	r3, [pc, #36]	; (81090 <FPGA_setlock+0x34>)
   8106c:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   8106e:	4b09      	ldr	r3, [pc, #36]	; (81094 <FPGA_setlock+0x38>)
   81070:	781b      	ldrb	r3, [r3, #0]
   81072:	b2db      	uxtb	r3, r3
   81074:	2b00      	cmp	r3, #0
   81076:	d104      	bne.n	81082 <FPGA_setlock+0x26>
  {
    ret = 1;
   81078:	2301      	movs	r3, #1
   8107a:	60fb      	str	r3, [r7, #12]
    _fpga_locked = lockstatus;
   8107c:	4a05      	ldr	r2, [pc, #20]	; (81094 <FPGA_setlock+0x38>)
   8107e:	79fb      	ldrb	r3, [r7, #7]
   81080:	7013      	strb	r3, [r2, #0]
  }
  cpu_irq_leave_critical();
   81082:	4b05      	ldr	r3, [pc, #20]	; (81098 <FPGA_setlock+0x3c>)
   81084:	4798      	blx	r3
  return ret;
   81086:	68fb      	ldr	r3, [r7, #12]
}
   81088:	4618      	mov	r0, r3
   8108a:	3710      	adds	r7, #16
   8108c:	46bd      	mov	sp, r7
   8108e:	bd80      	pop	{r7, pc}
   81090:	000853c9 	.word	0x000853c9
   81094:	20000c84 	.word	0x20000c84
   81098:	0008541d 	.word	0x0008541d

0008109c <FPGA_releaselock>:

void FPGA_releaselock(void)
{
   8109c:	b480      	push	{r7}
   8109e:	af00      	add	r7, sp, #0
  _fpga_locked = fpga_unlocked;
   810a0:	4b03      	ldr	r3, [pc, #12]	; (810b0 <FPGA_releaselock+0x14>)
   810a2:	2200      	movs	r2, #0
   810a4:	701a      	strb	r2, [r3, #0]
}
   810a6:	bf00      	nop
   810a8:	46bd      	mov	sp, r7
   810aa:	bc80      	pop	{r7}
   810ac:	4770      	bx	lr
   810ae:	bf00      	nop
   810b0:	20000c84 	.word	0x20000c84

000810b4 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
   810b4:	b480      	push	{r7}
   810b6:	af00      	add	r7, sp, #0
  return _fpga_locked;
   810b8:	4b03      	ldr	r3, [pc, #12]	; (810c8 <FPGA_lockstatus+0x14>)
   810ba:	781b      	ldrb	r3, [r3, #0]
   810bc:	b2db      	uxtb	r3, r3
}
   810be:	4618      	mov	r0, r3
   810c0:	46bd      	mov	sp, r7
   810c2:	bc80      	pop	{r7}
   810c4:	4770      	bx	lr
   810c6:	bf00      	nop
   810c8:	20000c84 	.word	0x20000c84

000810cc <FPGA_setaddr>:
  FPGA_releaselock();
  cpu_irq_leave_critical();
}

void FPGA_setaddr(uint32_t addr)
{
   810cc:	b580      	push	{r7, lr}
   810ce:	b082      	sub	sp, #8
   810d0:	af00      	add	r7, sp, #0
   810d2:	6078      	str	r0, [r7, #4]
  pio_sync_output_write(FPGA_ADDR_PORT, addr);
   810d4:	6879      	ldr	r1, [r7, #4]
   810d6:	4803      	ldr	r0, [pc, #12]	; (810e4 <FPGA_setaddr+0x18>)
   810d8:	4b03      	ldr	r3, [pc, #12]	; (810e8 <FPGA_setaddr+0x1c>)
   810da:	4798      	blx	r3
  //maybe needed?
  /* gpio_set_pin_low(FPGA_ALE_GPIO); */
  /* gpio_set_pin_high(FPGA_ALE_GPIO); */
}
   810dc:	bf00      	nop
   810de:	3708      	adds	r7, #8
   810e0:	46bd      	mov	sp, r7
   810e2:	bd80      	pop	{r7, pc}
   810e4:	400e0e00 	.word	0x400e0e00
   810e8:	00083e2d 	.word	0x00083e2d

000810ec <osc_get_rate>:
{
   810ec:	b480      	push	{r7}
   810ee:	b083      	sub	sp, #12
   810f0:	af00      	add	r7, sp, #0
   810f2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   810f4:	687b      	ldr	r3, [r7, #4]
   810f6:	2b07      	cmp	r3, #7
   810f8:	d823      	bhi.n	81142 <osc_get_rate+0x56>
   810fa:	a201      	add	r2, pc, #4	; (adr r2, 81100 <osc_get_rate+0x14>)
   810fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81100:	00081121 	.word	0x00081121
   81104:	00081127 	.word	0x00081127
   81108:	0008112b 	.word	0x0008112b
   8110c:	0008112f 	.word	0x0008112f
   81110:	00081133 	.word	0x00081133
   81114:	00081137 	.word	0x00081137
   81118:	0008113b 	.word	0x0008113b
   8111c:	0008113f 	.word	0x0008113f
		return OSC_SLCK_32K_RC_HZ;
   81120:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81124:	e00e      	b.n	81144 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   81126:	2300      	movs	r3, #0
   81128:	e00c      	b.n	81144 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   8112a:	2300      	movs	r3, #0
   8112c:	e00a      	b.n	81144 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   8112e:	4b08      	ldr	r3, [pc, #32]	; (81150 <osc_get_rate+0x64>)
   81130:	e008      	b.n	81144 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   81132:	4b08      	ldr	r3, [pc, #32]	; (81154 <osc_get_rate+0x68>)
   81134:	e006      	b.n	81144 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   81136:	4b08      	ldr	r3, [pc, #32]	; (81158 <osc_get_rate+0x6c>)
   81138:	e004      	b.n	81144 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   8113a:	4b07      	ldr	r3, [pc, #28]	; (81158 <osc_get_rate+0x6c>)
   8113c:	e002      	b.n	81144 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   8113e:	4b06      	ldr	r3, [pc, #24]	; (81158 <osc_get_rate+0x6c>)
   81140:	e000      	b.n	81144 <osc_get_rate+0x58>
	return 0;
   81142:	2300      	movs	r3, #0
}
   81144:	4618      	mov	r0, r3
   81146:	370c      	adds	r7, #12
   81148:	46bd      	mov	sp, r7
   8114a:	bc80      	pop	{r7}
   8114c:	4770      	bx	lr
   8114e:	bf00      	nop
   81150:	003d0900 	.word	0x003d0900
   81154:	007a1200 	.word	0x007a1200
   81158:	00b71b00 	.word	0x00b71b00

0008115c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8115c:	b580      	push	{r7, lr}
   8115e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   81160:	2006      	movs	r0, #6
   81162:	4b03      	ldr	r3, [pc, #12]	; (81170 <sysclk_get_main_hz+0x14>)
   81164:	4798      	blx	r3
   81166:	4603      	mov	r3, r0
   81168:	011b      	lsls	r3, r3, #4
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   8116a:	4618      	mov	r0, r3
   8116c:	bd80      	pop	{r7, pc}
   8116e:	bf00      	nop
   81170:	000810ed 	.word	0x000810ed

00081174 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   81174:	b580      	push	{r7, lr}
   81176:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   81178:	4b02      	ldr	r3, [pc, #8]	; (81184 <sysclk_get_cpu_hz+0x10>)
   8117a:	4798      	blx	r3
   8117c:	4603      	mov	r3, r0
   8117e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   81180:	4618      	mov	r0, r3
   81182:	bd80      	pop	{r7, pc}
   81184:	0008115d 	.word	0x0008115d

00081188 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   81188:	b580      	push	{r7, lr}
   8118a:	b082      	sub	sp, #8
   8118c:	af00      	add	r7, sp, #0
   8118e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81190:	6878      	ldr	r0, [r7, #4]
   81192:	4b03      	ldr	r3, [pc, #12]	; (811a0 <sysclk_enable_peripheral_clock+0x18>)
   81194:	4798      	blx	r3
}
   81196:	bf00      	nop
   81198:	3708      	adds	r7, #8
   8119a:	46bd      	mov	sp, r7
   8119c:	bd80      	pop	{r7, pc}
   8119e:	bf00      	nop
   811a0:	00083a3d 	.word	0x00083a3d

000811a4 <fpga_program_setup1>:
    FPGA_NPROG_HIGH();
}

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   811a4:	b580      	push	{r7, lr}
   811a6:	b084      	sub	sp, #16
   811a8:	af00      	add	r7, sp, #0
    /* Init - set program low to erase FPGA */
    FPGA_NPROG_LOW();
   811aa:	2014      	movs	r0, #20
   811ac:	4b14      	ldr	r3, [pc, #80]	; (81200 <fpga_program_setup1+0x5c>)
   811ae:	4798      	blx	r3

    usart_spi_opt_t spiopts;
    spiopts.baudrate = 10000000UL;
   811b0:	4b14      	ldr	r3, [pc, #80]	; (81204 <fpga_program_setup1+0x60>)
   811b2:	603b      	str	r3, [r7, #0]
    spiopts.char_length = US_MR_CHRL_8_BIT;
   811b4:	23c0      	movs	r3, #192	; 0xc0
   811b6:	607b      	str	r3, [r7, #4]
    spiopts.channel_mode = US_MR_CHMODE_NORMAL;
   811b8:	2300      	movs	r3, #0
   811ba:	60fb      	str	r3, [r7, #12]
    spiopts.spi_mode = SPI_MODE_0;
   811bc:	2300      	movs	r3, #0
   811be:	60bb      	str	r3, [r7, #8]

    sysclk_enable_peripheral_clock(FPGA_PROG_USART_ID);
   811c0:	200d      	movs	r0, #13
   811c2:	4b11      	ldr	r3, [pc, #68]	; (81208 <fpga_program_setup1+0x64>)
   811c4:	4798      	blx	r3
    usart_init_spi_master(FPGA_PROG_USART, &spiopts, sysclk_get_cpu_hz());
   811c6:	4b11      	ldr	r3, [pc, #68]	; (8120c <fpga_program_setup1+0x68>)
   811c8:	4798      	blx	r3
   811ca:	4602      	mov	r2, r0
   811cc:	463b      	mov	r3, r7
   811ce:	4619      	mov	r1, r3
   811d0:	480f      	ldr	r0, [pc, #60]	; (81210 <fpga_program_setup1+0x6c>)
   811d2:	4b10      	ldr	r3, [pc, #64]	; (81214 <fpga_program_setup1+0x70>)
   811d4:	4798      	blx	r3
    FPGA_DO_SETUP();
   811d6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   811da:	2012      	movs	r0, #18
   811dc:	4b0e      	ldr	r3, [pc, #56]	; (81218 <fpga_program_setup1+0x74>)
   811de:	4798      	blx	r3
    FPGA_CCLK_SETUP();
   811e0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   811e4:	2011      	movs	r0, #17
   811e6:	4b0c      	ldr	r3, [pc, #48]	; (81218 <fpga_program_setup1+0x74>)
   811e8:	4798      	blx	r3

    //pin setup doesn't transfer control over to USART, so have to do it manually
    PIOA->PIO_PDR = (1 << PIN_FPGA_DO_GPIO) | (1 << PIN_FPGA_CCLK_GPIO);
   811ea:	4b0c      	ldr	r3, [pc, #48]	; (8121c <fpga_program_setup1+0x78>)
   811ec:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   811f0:	605a      	str	r2, [r3, #4]
    usart_enable_tx(FPGA_PROG_USART);
   811f2:	4807      	ldr	r0, [pc, #28]	; (81210 <fpga_program_setup1+0x6c>)
   811f4:	4b0a      	ldr	r3, [pc, #40]	; (81220 <fpga_program_setup1+0x7c>)
   811f6:	4798      	blx	r3
}
   811f8:	bf00      	nop
   811fa:	3710      	adds	r7, #16
   811fc:	46bd      	mov	sp, r7
   811fe:	bd80      	pop	{r7, pc}
   81200:	00083eed 	.word	0x00083eed
   81204:	00989680 	.word	0x00989680
   81208:	00081189 	.word	0x00081189
   8120c:	00081175 	.word	0x00081175
   81210:	40090000 	.word	0x40090000
   81214:	0008136d 	.word	0x0008136d
   81218:	00083f1d 	.word	0x00083f1d
   8121c:	400e0c00 	.word	0x400e0c00
   81220:	0008147d 	.word	0x0008147d

00081224 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   81224:	b580      	push	{r7, lr}
   81226:	af00      	add	r7, sp, #0
    FPGA_NPROG_HIGH();
   81228:	2014      	movs	r0, #20
   8122a:	4b02      	ldr	r3, [pc, #8]	; (81234 <fpga_program_setup2+0x10>)
   8122c:	4798      	blx	r3
}
   8122e:	bf00      	nop
   81230:	bd80      	pop	{r7, pc}
   81232:	bf00      	nop
   81234:	00083ebd 	.word	0x00083ebd

00081238 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   81238:	b580      	push	{r7, lr}
   8123a:	b082      	sub	sp, #8
   8123c:	af00      	add	r7, sp, #0
   8123e:	4603      	mov	r3, r0
   81240:	71fb      	strb	r3, [r7, #7]
    //For debug only
    //fpga_total_bs_len++;
    usart_putchar(FPGA_PROG_USART, databyte);
   81242:	79fb      	ldrb	r3, [r7, #7]
   81244:	4619      	mov	r1, r3
   81246:	4803      	ldr	r0, [pc, #12]	; (81254 <fpga_program_sendbyte+0x1c>)
   81248:	4b03      	ldr	r3, [pc, #12]	; (81258 <fpga_program_sendbyte+0x20>)
   8124a:	4798      	blx	r3
}
   8124c:	bf00      	nop
   8124e:	3708      	adds	r7, #8
   81250:	46bd      	mov	sp, r7
   81252:	bd80      	pop	{r7, pc}
   81254:	40090000 	.word	0x40090000
   81258:	00081513 	.word	0x00081513

0008125c <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   8125c:	b590      	push	{r4, r7, lr}
   8125e:	b08b      	sub	sp, #44	; 0x2c
   81260:	af02      	add	r7, sp, #8
   81262:	6078      	str	r0, [r7, #4]
   81264:	6039      	str	r1, [r7, #0]
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   81266:	f107 020c 	add.w	r2, r7, #12
   8126a:	2304      	movs	r3, #4
   8126c:	9300      	str	r3, [sp, #0]
   8126e:	4613      	mov	r3, r2
   81270:	220f      	movs	r2, #15
   81272:	210e      	movs	r1, #14
   81274:	4813      	ldr	r0, [pc, #76]	; (812c4 <flash_read_unique_id+0x68>)
   81276:	4c14      	ldr	r4, [pc, #80]	; (812c8 <flash_read_unique_id+0x6c>)
   81278:	47a0      	blx	r4
   8127a:	4603      	mov	r3, r0
   8127c:	2b00      	cmp	r3, #0
   8127e:	d001      	beq.n	81284 <flash_read_unique_id+0x28>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   81280:	2310      	movs	r3, #16
   81282:	e01b      	b.n	812bc <flash_read_unique_id+0x60>
	}

	if (ul_size > 4) {
   81284:	683b      	ldr	r3, [r7, #0]
   81286:	2b04      	cmp	r3, #4
   81288:	d901      	bls.n	8128e <flash_read_unique_id+0x32>
		/* Only 4 dword to store unique ID */
		ul_size = 4;
   8128a:	2304      	movs	r3, #4
   8128c:	603b      	str	r3, [r7, #0]
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   8128e:	2300      	movs	r3, #0
   81290:	61fb      	str	r3, [r7, #28]
   81292:	e00e      	b.n	812b2 <flash_read_unique_id+0x56>
		pul_data[ul_idx] = uid_buf[ul_idx];
   81294:	69fb      	ldr	r3, [r7, #28]
   81296:	009b      	lsls	r3, r3, #2
   81298:	687a      	ldr	r2, [r7, #4]
   8129a:	441a      	add	r2, r3
   8129c:	69fb      	ldr	r3, [r7, #28]
   8129e:	009b      	lsls	r3, r3, #2
   812a0:	f107 0120 	add.w	r1, r7, #32
   812a4:	440b      	add	r3, r1
   812a6:	f853 3c14 	ldr.w	r3, [r3, #-20]
   812aa:	6013      	str	r3, [r2, #0]
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   812ac:	69fb      	ldr	r3, [r7, #28]
   812ae:	3301      	adds	r3, #1
   812b0:	61fb      	str	r3, [r7, #28]
   812b2:	69fa      	ldr	r2, [r7, #28]
   812b4:	683b      	ldr	r3, [r7, #0]
   812b6:	429a      	cmp	r2, r3
   812b8:	d3ec      	bcc.n	81294 <flash_read_unique_id+0x38>
	}

	return FLASH_RC_OK;
   812ba:	2300      	movs	r3, #0
}
   812bc:	4618      	mov	r0, r3
   812be:	3724      	adds	r7, #36	; 0x24
   812c0:	46bd      	mov	sp, r7
   812c2:	bd90      	pop	{r4, r7, pc}
   812c4:	400e0800 	.word	0x400e0800
   812c8:	20000001 	.word	0x20000001

000812cc <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   812cc:	b480      	push	{r7}
   812ce:	b087      	sub	sp, #28
   812d0:	af00      	add	r7, sp, #0
   812d2:	60f8      	str	r0, [r7, #12]
   812d4:	60b9      	str	r1, [r7, #8]
   812d6:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   812d8:	68bb      	ldr	r3, [r7, #8]
   812da:	085a      	lsrs	r2, r3, #1
   812dc:	687b      	ldr	r3, [r7, #4]
   812de:	441a      	add	r2, r3
   812e0:	68bb      	ldr	r3, [r7, #8]
   812e2:	fbb2 f3f3 	udiv	r3, r2, r3
   812e6:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   812e8:	697b      	ldr	r3, [r7, #20]
   812ea:	2b03      	cmp	r3, #3
   812ec:	d903      	bls.n	812f6 <usart_set_spi_master_baudrate+0x2a>
   812ee:	697b      	ldr	r3, [r7, #20]
   812f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   812f4:	d301      	bcc.n	812fa <usart_set_spi_master_baudrate+0x2e>
		return 1;
   812f6:	2301      	movs	r3, #1
   812f8:	e003      	b.n	81302 <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   812fa:	68fb      	ldr	r3, [r7, #12]
   812fc:	697a      	ldr	r2, [r7, #20]
   812fe:	621a      	str	r2, [r3, #32]

	return 0;
   81300:	2300      	movs	r3, #0
}
   81302:	4618      	mov	r0, r3
   81304:	371c      	adds	r7, #28
   81306:	46bd      	mov	sp, r7
   81308:	bc80      	pop	{r7}
   8130a:	4770      	bx	lr

0008130c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   8130c:	b580      	push	{r7, lr}
   8130e:	b082      	sub	sp, #8
   81310:	af00      	add	r7, sp, #0
   81312:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   81314:	6878      	ldr	r0, [r7, #4]
   81316:	4b0f      	ldr	r3, [pc, #60]	; (81354 <usart_reset+0x48>)
   81318:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8131a:	687b      	ldr	r3, [r7, #4]
   8131c:	2200      	movs	r2, #0
   8131e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   81320:	687b      	ldr	r3, [r7, #4]
   81322:	2200      	movs	r2, #0
   81324:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   81326:	687b      	ldr	r3, [r7, #4]
   81328:	2200      	movs	r2, #0
   8132a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   8132c:	6878      	ldr	r0, [r7, #4]
   8132e:	4b0a      	ldr	r3, [pc, #40]	; (81358 <usart_reset+0x4c>)
   81330:	4798      	blx	r3
	usart_reset_rx(p_usart);
   81332:	6878      	ldr	r0, [r7, #4]
   81334:	4b09      	ldr	r3, [pc, #36]	; (8135c <usart_reset+0x50>)
   81336:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   81338:	6878      	ldr	r0, [r7, #4]
   8133a:	4b09      	ldr	r3, [pc, #36]	; (81360 <usart_reset+0x54>)
   8133c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   8133e:	6878      	ldr	r0, [r7, #4]
   81340:	4b08      	ldr	r3, [pc, #32]	; (81364 <usart_reset+0x58>)
   81342:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
   81344:	6878      	ldr	r0, [r7, #4]
   81346:	4b08      	ldr	r3, [pc, #32]	; (81368 <usart_reset+0x5c>)
   81348:	4798      	blx	r3
#endif
}
   8134a:	bf00      	nop
   8134c:	3708      	adds	r7, #8
   8134e:	46bd      	mov	sp, r7
   81350:	bd80      	pop	{r7, pc}
   81352:	bf00      	nop
   81354:	00081541 	.word	0x00081541
   81358:	00081495 	.word	0x00081495
   8135c:	000814ad 	.word	0x000814ad
   81360:	000814c5 	.word	0x000814c5
   81364:	000814f9 	.word	0x000814f9
   81368:	000814df 	.word	0x000814df

0008136c <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   8136c:	b580      	push	{r7, lr}
   8136e:	b084      	sub	sp, #16
   81370:	af00      	add	r7, sp, #0
   81372:	60f8      	str	r0, [r7, #12]
   81374:	60b9      	str	r1, [r7, #8]
   81376:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   81378:	68f8      	ldr	r0, [r7, #12]
   8137a:	4b3d      	ldr	r3, [pc, #244]	; (81470 <usart_init_spi_master+0x104>)
   8137c:	4798      	blx	r3

	ul_reg_val = 0;
   8137e:	4b3d      	ldr	r3, [pc, #244]	; (81474 <usart_init_spi_master+0x108>)
   81380:	2200      	movs	r2, #0
   81382:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   81384:	68bb      	ldr	r3, [r7, #8]
   81386:	2b00      	cmp	r3, #0
   81388:	d00d      	beq.n	813a6 <usart_init_spi_master+0x3a>
   8138a:	68bb      	ldr	r3, [r7, #8]
   8138c:	689b      	ldr	r3, [r3, #8]
   8138e:	2b03      	cmp	r3, #3
   81390:	d809      	bhi.n	813a6 <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   81392:	68bb      	ldr	r3, [r7, #8]
   81394:	681b      	ldr	r3, [r3, #0]
   81396:	687a      	ldr	r2, [r7, #4]
   81398:	4619      	mov	r1, r3
   8139a:	68f8      	ldr	r0, [r7, #12]
   8139c:	4b36      	ldr	r3, [pc, #216]	; (81478 <usart_init_spi_master+0x10c>)
   8139e:	4798      	blx	r3
   813a0:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   813a2:	2b00      	cmp	r3, #0
   813a4:	d001      	beq.n	813aa <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   813a6:	2301      	movs	r3, #1
   813a8:	e05d      	b.n	81466 <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   813aa:	68bb      	ldr	r3, [r7, #8]
   813ac:	685a      	ldr	r2, [r3, #4]
   813ae:	4b31      	ldr	r3, [pc, #196]	; (81474 <usart_init_spi_master+0x108>)
   813b0:	681b      	ldr	r3, [r3, #0]
   813b2:	4313      	orrs	r3, r2
   813b4:	4a2f      	ldr	r2, [pc, #188]	; (81474 <usart_init_spi_master+0x108>)
   813b6:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   813b8:	68bb      	ldr	r3, [r7, #8]
   813ba:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   813bc:	4b2d      	ldr	r3, [pc, #180]	; (81474 <usart_init_spi_master+0x108>)
   813be:	681b      	ldr	r3, [r3, #0]
   813c0:	4313      	orrs	r3, r2
   813c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   813c6:	f043 030e 	orr.w	r3, r3, #14
   813ca:	4a2a      	ldr	r2, [pc, #168]	; (81474 <usart_init_spi_master+0x108>)
   813cc:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   813ce:	68bb      	ldr	r3, [r7, #8]
   813d0:	689b      	ldr	r3, [r3, #8]
   813d2:	2b03      	cmp	r3, #3
   813d4:	d83e      	bhi.n	81454 <usart_init_spi_master+0xe8>
   813d6:	a201      	add	r2, pc, #4	; (adr r2, 813dc <usart_init_spi_master+0x70>)
   813d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   813dc:	000813ed 	.word	0x000813ed
   813e0:	00081407 	.word	0x00081407
   813e4:	00081421 	.word	0x00081421
   813e8:	0008143b 	.word	0x0008143b
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   813ec:	4b21      	ldr	r3, [pc, #132]	; (81474 <usart_init_spi_master+0x108>)
   813ee:	681b      	ldr	r3, [r3, #0]
   813f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   813f4:	4a1f      	ldr	r2, [pc, #124]	; (81474 <usart_init_spi_master+0x108>)
   813f6:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   813f8:	4b1e      	ldr	r3, [pc, #120]	; (81474 <usart_init_spi_master+0x108>)
   813fa:	681b      	ldr	r3, [r3, #0]
   813fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   81400:	4a1c      	ldr	r2, [pc, #112]	; (81474 <usart_init_spi_master+0x108>)
   81402:	6013      	str	r3, [r2, #0]
		break;
   81404:	e027      	b.n	81456 <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   81406:	4b1b      	ldr	r3, [pc, #108]	; (81474 <usart_init_spi_master+0x108>)
   81408:	681b      	ldr	r3, [r3, #0]
   8140a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   8140e:	4a19      	ldr	r2, [pc, #100]	; (81474 <usart_init_spi_master+0x108>)
   81410:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   81412:	4b18      	ldr	r3, [pc, #96]	; (81474 <usart_init_spi_master+0x108>)
   81414:	681b      	ldr	r3, [r3, #0]
   81416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8141a:	4a16      	ldr	r2, [pc, #88]	; (81474 <usart_init_spi_master+0x108>)
   8141c:	6013      	str	r3, [r2, #0]
		break;
   8141e:	e01a      	b.n	81456 <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   81420:	4b14      	ldr	r3, [pc, #80]	; (81474 <usart_init_spi_master+0x108>)
   81422:	681b      	ldr	r3, [r3, #0]
   81424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   81428:	4a12      	ldr	r2, [pc, #72]	; (81474 <usart_init_spi_master+0x108>)
   8142a:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   8142c:	4b11      	ldr	r3, [pc, #68]	; (81474 <usart_init_spi_master+0x108>)
   8142e:	681b      	ldr	r3, [r3, #0]
   81430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81434:	4a0f      	ldr	r2, [pc, #60]	; (81474 <usart_init_spi_master+0x108>)
   81436:	6013      	str	r3, [r2, #0]
		break;
   81438:	e00d      	b.n	81456 <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   8143a:	4b0e      	ldr	r3, [pc, #56]	; (81474 <usart_init_spi_master+0x108>)
   8143c:	681b      	ldr	r3, [r3, #0]
   8143e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   81442:	4a0c      	ldr	r2, [pc, #48]	; (81474 <usart_init_spi_master+0x108>)
   81444:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   81446:	4b0b      	ldr	r3, [pc, #44]	; (81474 <usart_init_spi_master+0x108>)
   81448:	681b      	ldr	r3, [r3, #0]
   8144a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8144e:	4a09      	ldr	r2, [pc, #36]	; (81474 <usart_init_spi_master+0x108>)
   81450:	6013      	str	r3, [r2, #0]
		break;
   81452:	e000      	b.n	81456 <usart_init_spi_master+0xea>

	default:
		break;
   81454:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   81456:	68fb      	ldr	r3, [r7, #12]
   81458:	685a      	ldr	r2, [r3, #4]
   8145a:	4b06      	ldr	r3, [pc, #24]	; (81474 <usart_init_spi_master+0x108>)
   8145c:	681b      	ldr	r3, [r3, #0]
   8145e:	431a      	orrs	r2, r3
   81460:	68fb      	ldr	r3, [r7, #12]
   81462:	605a      	str	r2, [r3, #4]

	return 0;
   81464:	2300      	movs	r3, #0
}
   81466:	4618      	mov	r0, r3
   81468:	3710      	adds	r7, #16
   8146a:	46bd      	mov	sp, r7
   8146c:	bd80      	pop	{r7, pc}
   8146e:	bf00      	nop
   81470:	0008130d 	.word	0x0008130d
   81474:	20000c88 	.word	0x20000c88
   81478:	000812cd 	.word	0x000812cd

0008147c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   8147c:	b480      	push	{r7}
   8147e:	b083      	sub	sp, #12
   81480:	af00      	add	r7, sp, #0
   81482:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   81484:	687b      	ldr	r3, [r7, #4]
   81486:	2240      	movs	r2, #64	; 0x40
   81488:	601a      	str	r2, [r3, #0]
}
   8148a:	bf00      	nop
   8148c:	370c      	adds	r7, #12
   8148e:	46bd      	mov	sp, r7
   81490:	bc80      	pop	{r7}
   81492:	4770      	bx	lr

00081494 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   81494:	b480      	push	{r7}
   81496:	b083      	sub	sp, #12
   81498:	af00      	add	r7, sp, #0
   8149a:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   8149c:	687b      	ldr	r3, [r7, #4]
   8149e:	2288      	movs	r2, #136	; 0x88
   814a0:	601a      	str	r2, [r3, #0]
}
   814a2:	bf00      	nop
   814a4:	370c      	adds	r7, #12
   814a6:	46bd      	mov	sp, r7
   814a8:	bc80      	pop	{r7}
   814aa:	4770      	bx	lr

000814ac <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   814ac:	b480      	push	{r7}
   814ae:	b083      	sub	sp, #12
   814b0:	af00      	add	r7, sp, #0
   814b2:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   814b4:	687b      	ldr	r3, [r7, #4]
   814b6:	2224      	movs	r2, #36	; 0x24
   814b8:	601a      	str	r2, [r3, #0]
}
   814ba:	bf00      	nop
   814bc:	370c      	adds	r7, #12
   814be:	46bd      	mov	sp, r7
   814c0:	bc80      	pop	{r7}
   814c2:	4770      	bx	lr

000814c4 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   814c4:	b480      	push	{r7}
   814c6:	b083      	sub	sp, #12
   814c8:	af00      	add	r7, sp, #0
   814ca:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   814cc:	687b      	ldr	r3, [r7, #4]
   814ce:	f44f 7280 	mov.w	r2, #256	; 0x100
   814d2:	601a      	str	r2, [r3, #0]
}
   814d4:	bf00      	nop
   814d6:	370c      	adds	r7, #12
   814d8:	46bd      	mov	sp, r7
   814da:	bc80      	pop	{r7}
   814dc:	4770      	bx	lr

000814de <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
   814de:	b480      	push	{r7}
   814e0:	b083      	sub	sp, #12
   814e2:	af00      	add	r7, sp, #0
   814e4:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
   814e6:	687b      	ldr	r3, [r7, #4]
   814e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   814ec:	601a      	str	r2, [r3, #0]
}
   814ee:	bf00      	nop
   814f0:	370c      	adds	r7, #12
   814f2:	46bd      	mov	sp, r7
   814f4:	bc80      	pop	{r7}
   814f6:	4770      	bx	lr

000814f8 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   814f8:	b480      	push	{r7}
   814fa:	b083      	sub	sp, #12
   814fc:	af00      	add	r7, sp, #0
   814fe:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   81500:	687b      	ldr	r3, [r7, #4]
   81502:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81506:	601a      	str	r2, [r3, #0]
}
   81508:	bf00      	nop
   8150a:	370c      	adds	r7, #12
   8150c:	46bd      	mov	sp, r7
   8150e:	bc80      	pop	{r7}
   81510:	4770      	bx	lr

00081512 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
   81512:	b480      	push	{r7}
   81514:	b083      	sub	sp, #12
   81516:	af00      	add	r7, sp, #0
   81518:	6078      	str	r0, [r7, #4]
   8151a:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8151c:	bf00      	nop
   8151e:	687b      	ldr	r3, [r7, #4]
   81520:	695b      	ldr	r3, [r3, #20]
   81522:	f003 0302 	and.w	r3, r3, #2
   81526:	2b00      	cmp	r3, #0
   81528:	d0f9      	beq.n	8151e <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8152a:	683b      	ldr	r3, [r7, #0]
   8152c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   81530:	687b      	ldr	r3, [r7, #4]
   81532:	61da      	str	r2, [r3, #28]

	return 0;
   81534:	2300      	movs	r3, #0
}
   81536:	4618      	mov	r0, r3
   81538:	370c      	adds	r7, #12
   8153a:	46bd      	mov	sp, r7
   8153c:	bc80      	pop	{r7}
   8153e:	4770      	bx	lr

00081540 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   81540:	b480      	push	{r7}
   81542:	b083      	sub	sp, #12
   81544:	af00      	add	r7, sp, #0
   81546:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   81548:	687b      	ldr	r3, [r7, #4]
   8154a:	4a04      	ldr	r2, [pc, #16]	; (8155c <usart_disable_writeprotect+0x1c>)
   8154c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   81550:	bf00      	nop
   81552:	370c      	adds	r7, #12
   81554:	46bd      	mov	sp, r7
   81556:	bc80      	pop	{r7}
   81558:	4770      	bx	lr
   8155a:	bf00      	nop
   8155c:	55534100 	.word	0x55534100

00081560 <smc_set_setup_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
   81560:	b480      	push	{r7}
   81562:	b085      	sub	sp, #20
   81564:	af00      	add	r7, sp, #0
   81566:	60f8      	str	r0, [r7, #12]
   81568:	60b9      	str	r1, [r7, #8]
   8156a:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   8156c:	68f9      	ldr	r1, [r7, #12]
   8156e:	68ba      	ldr	r2, [r7, #8]
   81570:	4613      	mov	r3, r2
   81572:	009b      	lsls	r3, r3, #2
   81574:	4413      	add	r3, r2
   81576:	009b      	lsls	r3, r3, #2
   81578:	440b      	add	r3, r1
   8157a:	3370      	adds	r3, #112	; 0x70
   8157c:	687a      	ldr	r2, [r7, #4]
   8157e:	601a      	str	r2, [r3, #0]
}
   81580:	bf00      	nop
   81582:	3714      	adds	r7, #20
   81584:	46bd      	mov	sp, r7
   81586:	bc80      	pop	{r7}
   81588:	4770      	bx	lr

0008158a <smc_set_pulse_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
   8158a:	b480      	push	{r7}
   8158c:	b085      	sub	sp, #20
   8158e:	af00      	add	r7, sp, #0
   81590:	60f8      	str	r0, [r7, #12]
   81592:	60b9      	str	r1, [r7, #8]
   81594:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   81596:	68f9      	ldr	r1, [r7, #12]
   81598:	68ba      	ldr	r2, [r7, #8]
   8159a:	4613      	mov	r3, r2
   8159c:	009b      	lsls	r3, r3, #2
   8159e:	4413      	add	r3, r2
   815a0:	009b      	lsls	r3, r3, #2
   815a2:	440b      	add	r3, r1
   815a4:	3374      	adds	r3, #116	; 0x74
   815a6:	687a      	ldr	r2, [r7, #4]
   815a8:	601a      	str	r2, [r3, #0]
}
   815aa:	bf00      	nop
   815ac:	3714      	adds	r7, #20
   815ae:	46bd      	mov	sp, r7
   815b0:	bc80      	pop	{r7}
   815b2:	4770      	bx	lr

000815b4 <smc_set_cycle_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
   815b4:	b480      	push	{r7}
   815b6:	b085      	sub	sp, #20
   815b8:	af00      	add	r7, sp, #0
   815ba:	60f8      	str	r0, [r7, #12]
   815bc:	60b9      	str	r1, [r7, #8]
   815be:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   815c0:	68f9      	ldr	r1, [r7, #12]
   815c2:	68ba      	ldr	r2, [r7, #8]
   815c4:	4613      	mov	r3, r2
   815c6:	009b      	lsls	r3, r3, #2
   815c8:	4413      	add	r3, r2
   815ca:	009b      	lsls	r3, r3, #2
   815cc:	440b      	add	r3, r1
   815ce:	3378      	adds	r3, #120	; 0x78
   815d0:	687a      	ldr	r2, [r7, #4]
   815d2:	601a      	str	r2, [r3, #0]
}
   815d4:	bf00      	nop
   815d6:	3714      	adds	r7, #20
   815d8:	46bd      	mov	sp, r7
   815da:	bc80      	pop	{r7}
   815dc:	4770      	bx	lr

000815de <smc_set_mode>:
 * \param p_smc Pointer to an SMC instance.
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
   815de:	b480      	push	{r7}
   815e0:	b085      	sub	sp, #20
   815e2:	af00      	add	r7, sp, #0
   815e4:	60f8      	str	r0, [r7, #12]
   815e6:	60b9      	str	r1, [r7, #8]
   815e8:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   815ea:	68f9      	ldr	r1, [r7, #12]
   815ec:	68ba      	ldr	r2, [r7, #8]
   815ee:	4613      	mov	r3, r2
   815f0:	009b      	lsls	r3, r3, #2
   815f2:	4413      	add	r3, r2
   815f4:	009b      	lsls	r3, r3, #2
   815f6:	440b      	add	r3, r1
   815f8:	3380      	adds	r3, #128	; 0x80
   815fa:	687a      	ldr	r2, [r7, #4]
   815fc:	601a      	str	r2, [r3, #0]
}
   815fe:	bf00      	nop
   81600:	3714      	adds	r7, #20
   81602:	46bd      	mov	sp, r7
   81604:	bc80      	pop	{r7}
   81606:	4770      	bx	lr

00081608 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81608:	b580      	push	{r7, lr}
   8160a:	b084      	sub	sp, #16
   8160c:	af00      	add	r7, sp, #0
   8160e:	6078      	str	r0, [r7, #4]
   81610:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81612:	6878      	ldr	r0, [r7, #4]
   81614:	4b26      	ldr	r3, [pc, #152]	; (816b0 <pio_handler_process+0xa8>)
   81616:	4798      	blx	r3
   81618:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   8161a:	6878      	ldr	r0, [r7, #4]
   8161c:	4b25      	ldr	r3, [pc, #148]	; (816b4 <pio_handler_process+0xac>)
   8161e:	4798      	blx	r3
   81620:	4602      	mov	r2, r0
   81622:	68fb      	ldr	r3, [r7, #12]
   81624:	4013      	ands	r3, r2
   81626:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   81628:	68fb      	ldr	r3, [r7, #12]
   8162a:	2b00      	cmp	r3, #0
   8162c:	d03c      	beq.n	816a8 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
   8162e:	2300      	movs	r3, #0
   81630:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   81632:	e034      	b.n	8169e <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   81634:	4a20      	ldr	r2, [pc, #128]	; (816b8 <pio_handler_process+0xb0>)
   81636:	68bb      	ldr	r3, [r7, #8]
   81638:	011b      	lsls	r3, r3, #4
   8163a:	4413      	add	r3, r2
   8163c:	681a      	ldr	r2, [r3, #0]
   8163e:	683b      	ldr	r3, [r7, #0]
   81640:	429a      	cmp	r2, r3
   81642:	d126      	bne.n	81692 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81644:	4a1c      	ldr	r2, [pc, #112]	; (816b8 <pio_handler_process+0xb0>)
   81646:	68bb      	ldr	r3, [r7, #8]
   81648:	011b      	lsls	r3, r3, #4
   8164a:	4413      	add	r3, r2
   8164c:	3304      	adds	r3, #4
   8164e:	681a      	ldr	r2, [r3, #0]
   81650:	68fb      	ldr	r3, [r7, #12]
   81652:	4013      	ands	r3, r2
   81654:	2b00      	cmp	r3, #0
   81656:	d01c      	beq.n	81692 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81658:	4a17      	ldr	r2, [pc, #92]	; (816b8 <pio_handler_process+0xb0>)
   8165a:	68bb      	ldr	r3, [r7, #8]
   8165c:	011b      	lsls	r3, r3, #4
   8165e:	4413      	add	r3, r2
   81660:	330c      	adds	r3, #12
   81662:	681b      	ldr	r3, [r3, #0]
   81664:	4914      	ldr	r1, [pc, #80]	; (816b8 <pio_handler_process+0xb0>)
   81666:	68ba      	ldr	r2, [r7, #8]
   81668:	0112      	lsls	r2, r2, #4
   8166a:	440a      	add	r2, r1
   8166c:	6810      	ldr	r0, [r2, #0]
   8166e:	4912      	ldr	r1, [pc, #72]	; (816b8 <pio_handler_process+0xb0>)
   81670:	68ba      	ldr	r2, [r7, #8]
   81672:	0112      	lsls	r2, r2, #4
   81674:	440a      	add	r2, r1
   81676:	3204      	adds	r2, #4
   81678:	6812      	ldr	r2, [r2, #0]
   8167a:	4611      	mov	r1, r2
   8167c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8167e:	4a0e      	ldr	r2, [pc, #56]	; (816b8 <pio_handler_process+0xb0>)
   81680:	68bb      	ldr	r3, [r7, #8]
   81682:	011b      	lsls	r3, r3, #4
   81684:	4413      	add	r3, r2
   81686:	3304      	adds	r3, #4
   81688:	681b      	ldr	r3, [r3, #0]
   8168a:	43db      	mvns	r3, r3
   8168c:	68fa      	ldr	r2, [r7, #12]
   8168e:	4013      	ands	r3, r2
   81690:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   81692:	68bb      	ldr	r3, [r7, #8]
   81694:	3301      	adds	r3, #1
   81696:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
   81698:	68bb      	ldr	r3, [r7, #8]
   8169a:	2b06      	cmp	r3, #6
   8169c:	d803      	bhi.n	816a6 <pio_handler_process+0x9e>
		while (status != 0) {
   8169e:	68fb      	ldr	r3, [r7, #12]
   816a0:	2b00      	cmp	r3, #0
   816a2:	d1c7      	bne.n	81634 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   816a4:	e000      	b.n	816a8 <pio_handler_process+0xa0>
				break;
   816a6:	bf00      	nop
}
   816a8:	bf00      	nop
   816aa:	3710      	adds	r7, #16
   816ac:	46bd      	mov	sp, r7
   816ae:	bd80      	pop	{r7, pc}
   816b0:	00083e61 	.word	0x00083e61
   816b4:	00083e77 	.word	0x00083e77
   816b8:	20000c8c 	.word	0x20000c8c

000816bc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   816bc:	b580      	push	{r7, lr}
   816be:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   816c0:	210a      	movs	r1, #10
   816c2:	4802      	ldr	r0, [pc, #8]	; (816cc <PIOA_Handler+0x10>)
   816c4:	4b02      	ldr	r3, [pc, #8]	; (816d0 <PIOA_Handler+0x14>)
   816c6:	4798      	blx	r3
}
   816c8:	bf00      	nop
   816ca:	bd80      	pop	{r7, pc}
   816cc:	400e0c00 	.word	0x400e0c00
   816d0:	00081609 	.word	0x00081609

000816d4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   816d4:	b580      	push	{r7, lr}
   816d6:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   816d8:	210b      	movs	r1, #11
   816da:	4802      	ldr	r0, [pc, #8]	; (816e4 <PIOB_Handler+0x10>)
   816dc:	4b02      	ldr	r3, [pc, #8]	; (816e8 <PIOB_Handler+0x14>)
   816de:	4798      	blx	r3
}
   816e0:	bf00      	nop
   816e2:	bd80      	pop	{r7, pc}
   816e4:	400e0e00 	.word	0x400e0e00
   816e8:	00081609 	.word	0x00081609

000816ec <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   816ec:	b480      	push	{r7}
   816ee:	b083      	sub	sp, #12
   816f0:	af00      	add	r7, sp, #0
   816f2:	4603      	mov	r3, r0
   816f4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   816f6:	4908      	ldr	r1, [pc, #32]	; (81718 <NVIC_EnableIRQ+0x2c>)
   816f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   816fc:	095b      	lsrs	r3, r3, #5
   816fe:	79fa      	ldrb	r2, [r7, #7]
   81700:	f002 021f 	and.w	r2, r2, #31
   81704:	2001      	movs	r0, #1
   81706:	fa00 f202 	lsl.w	r2, r0, r2
   8170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   8170e:	bf00      	nop
   81710:	370c      	adds	r7, #12
   81712:	46bd      	mov	sp, r7
   81714:	bc80      	pop	{r7}
   81716:	4770      	bx	lr
   81718:	e000e100 	.word	0xe000e100

0008171c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   8171c:	b480      	push	{r7}
   8171e:	b083      	sub	sp, #12
   81720:	af00      	add	r7, sp, #0
   81722:	4603      	mov	r3, r0
   81724:	6039      	str	r1, [r7, #0]
   81726:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   81728:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8172c:	2b00      	cmp	r3, #0
   8172e:	da0b      	bge.n	81748 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81730:	490d      	ldr	r1, [pc, #52]	; (81768 <NVIC_SetPriority+0x4c>)
   81732:	79fb      	ldrb	r3, [r7, #7]
   81734:	f003 030f 	and.w	r3, r3, #15
   81738:	3b04      	subs	r3, #4
   8173a:	683a      	ldr	r2, [r7, #0]
   8173c:	b2d2      	uxtb	r2, r2
   8173e:	0112      	lsls	r2, r2, #4
   81740:	b2d2      	uxtb	r2, r2
   81742:	440b      	add	r3, r1
   81744:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   81746:	e009      	b.n	8175c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81748:	4908      	ldr	r1, [pc, #32]	; (8176c <NVIC_SetPriority+0x50>)
   8174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8174e:	683a      	ldr	r2, [r7, #0]
   81750:	b2d2      	uxtb	r2, r2
   81752:	0112      	lsls	r2, r2, #4
   81754:	b2d2      	uxtb	r2, r2
   81756:	440b      	add	r3, r1
   81758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   8175c:	bf00      	nop
   8175e:	370c      	adds	r7, #12
   81760:	46bd      	mov	sp, r7
   81762:	bc80      	pop	{r7}
   81764:	4770      	bx	lr
   81766:	bf00      	nop
   81768:	e000ed00 	.word	0xe000ed00
   8176c:	e000e100 	.word	0xe000e100

00081770 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   81770:	b480      	push	{r7}
   81772:	b083      	sub	sp, #12
   81774:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81776:	f3ef 8310 	mrs	r3, PRIMASK
   8177a:	603b      	str	r3, [r7, #0]
  return(result);
   8177c:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   8177e:	2b00      	cmp	r3, #0
   81780:	bf0c      	ite	eq
   81782:	2301      	moveq	r3, #1
   81784:	2300      	movne	r3, #0
   81786:	b2db      	uxtb	r3, r3
   81788:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   8178a:	b672      	cpsid	i
   8178c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81790:	4b04      	ldr	r3, [pc, #16]	; (817a4 <cpu_irq_save+0x34>)
   81792:	2200      	movs	r2, #0
   81794:	701a      	strb	r2, [r3, #0]
	return flags;
   81796:	687b      	ldr	r3, [r7, #4]
}
   81798:	4618      	mov	r0, r3
   8179a:	370c      	adds	r7, #12
   8179c:	46bd      	mov	sp, r7
   8179e:	bc80      	pop	{r7}
   817a0:	4770      	bx	lr
   817a2:	bf00      	nop
   817a4:	2000031a 	.word	0x2000031a

000817a8 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   817a8:	b480      	push	{r7}
   817aa:	b083      	sub	sp, #12
   817ac:	af00      	add	r7, sp, #0
   817ae:	6078      	str	r0, [r7, #4]
	return (flags);
   817b0:	687b      	ldr	r3, [r7, #4]
   817b2:	2b00      	cmp	r3, #0
   817b4:	bf14      	ite	ne
   817b6:	2301      	movne	r3, #1
   817b8:	2300      	moveq	r3, #0
   817ba:	b2db      	uxtb	r3, r3
}
   817bc:	4618      	mov	r0, r3
   817be:	370c      	adds	r7, #12
   817c0:	46bd      	mov	sp, r7
   817c2:	bc80      	pop	{r7}
   817c4:	4770      	bx	lr
   817c6:	0000      	movs	r0, r0

000817c8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   817c8:	b580      	push	{r7, lr}
   817ca:	b082      	sub	sp, #8
   817cc:	af00      	add	r7, sp, #0
   817ce:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   817d0:	6878      	ldr	r0, [r7, #4]
   817d2:	4b07      	ldr	r3, [pc, #28]	; (817f0 <cpu_irq_restore+0x28>)
   817d4:	4798      	blx	r3
   817d6:	4603      	mov	r3, r0
   817d8:	2b00      	cmp	r3, #0
   817da:	d005      	beq.n	817e8 <cpu_irq_restore+0x20>
		cpu_irq_enable();
   817dc:	4b05      	ldr	r3, [pc, #20]	; (817f4 <cpu_irq_restore+0x2c>)
   817de:	2201      	movs	r2, #1
   817e0:	701a      	strb	r2, [r3, #0]
   817e2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   817e6:	b662      	cpsie	i
}
   817e8:	bf00      	nop
   817ea:	3708      	adds	r7, #8
   817ec:	46bd      	mov	sp, r7
   817ee:	bd80      	pop	{r7, pc}
   817f0:	000817a9 	.word	0x000817a9
   817f4:	2000031a 	.word	0x2000031a

000817f8 <sleepmgr_lock_mode>:
{
   817f8:	b580      	push	{r7, lr}
   817fa:	b084      	sub	sp, #16
   817fc:	af00      	add	r7, sp, #0
   817fe:	4603      	mov	r3, r0
   81800:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   81802:	4b08      	ldr	r3, [pc, #32]	; (81824 <sleepmgr_lock_mode+0x2c>)
   81804:	4798      	blx	r3
   81806:	60f8      	str	r0, [r7, #12]
	++sleepmgr_locks[mode];
   81808:	79fb      	ldrb	r3, [r7, #7]
   8180a:	4a07      	ldr	r2, [pc, #28]	; (81828 <sleepmgr_lock_mode+0x30>)
   8180c:	5cd2      	ldrb	r2, [r2, r3]
   8180e:	3201      	adds	r2, #1
   81810:	b2d1      	uxtb	r1, r2
   81812:	4a05      	ldr	r2, [pc, #20]	; (81828 <sleepmgr_lock_mode+0x30>)
   81814:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   81816:	68f8      	ldr	r0, [r7, #12]
   81818:	4b04      	ldr	r3, [pc, #16]	; (8182c <sleepmgr_lock_mode+0x34>)
   8181a:	4798      	blx	r3
}
   8181c:	bf00      	nop
   8181e:	3710      	adds	r7, #16
   81820:	46bd      	mov	sp, r7
   81822:	bd80      	pop	{r7, pc}
   81824:	00081771 	.word	0x00081771
   81828:	20000d6c 	.word	0x20000d6c
   8182c:	000817c9 	.word	0x000817c9

00081830 <sleepmgr_unlock_mode>:
{
   81830:	b580      	push	{r7, lr}
   81832:	b084      	sub	sp, #16
   81834:	af00      	add	r7, sp, #0
   81836:	4603      	mov	r3, r0
   81838:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   8183a:	4b08      	ldr	r3, [pc, #32]	; (8185c <sleepmgr_unlock_mode+0x2c>)
   8183c:	4798      	blx	r3
   8183e:	60f8      	str	r0, [r7, #12]
	--sleepmgr_locks[mode];
   81840:	79fb      	ldrb	r3, [r7, #7]
   81842:	4a07      	ldr	r2, [pc, #28]	; (81860 <sleepmgr_unlock_mode+0x30>)
   81844:	5cd2      	ldrb	r2, [r2, r3]
   81846:	3a01      	subs	r2, #1
   81848:	b2d1      	uxtb	r1, r2
   8184a:	4a05      	ldr	r2, [pc, #20]	; (81860 <sleepmgr_unlock_mode+0x30>)
   8184c:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   8184e:	68f8      	ldr	r0, [r7, #12]
   81850:	4b04      	ldr	r3, [pc, #16]	; (81864 <sleepmgr_unlock_mode+0x34>)
   81852:	4798      	blx	r3
}
   81854:	bf00      	nop
   81856:	3710      	adds	r7, #16
   81858:	46bd      	mov	sp, r7
   8185a:	bd80      	pop	{r7, pc}
   8185c:	00081771 	.word	0x00081771
   81860:	20000d6c 	.word	0x20000d6c
   81864:	000817c9 	.word	0x000817c9

00081868 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
   81868:	b580      	push	{r7, lr}
   8186a:	b082      	sub	sp, #8
   8186c:	af00      	add	r7, sp, #0
   8186e:	4603      	mov	r3, r0
   81870:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
   81872:	79fb      	ldrb	r3, [r7, #7]
   81874:	f083 0301 	eor.w	r3, r3, #1
   81878:	b2db      	uxtb	r3, r3
   8187a:	2b00      	cmp	r3, #0
   8187c:	d006      	beq.n	8188c <udd_sleep_mode+0x24>
   8187e:	4b0d      	ldr	r3, [pc, #52]	; (818b4 <udd_sleep_mode+0x4c>)
   81880:	781b      	ldrb	r3, [r3, #0]
   81882:	2b00      	cmp	r3, #0
   81884:	d002      	beq.n	8188c <udd_sleep_mode+0x24>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   81886:	2002      	movs	r0, #2
   81888:	4b0b      	ldr	r3, [pc, #44]	; (818b8 <udd_sleep_mode+0x50>)
   8188a:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
   8188c:	79fb      	ldrb	r3, [r7, #7]
   8188e:	2b00      	cmp	r3, #0
   81890:	d009      	beq.n	818a6 <udd_sleep_mode+0x3e>
   81892:	4b08      	ldr	r3, [pc, #32]	; (818b4 <udd_sleep_mode+0x4c>)
   81894:	781b      	ldrb	r3, [r3, #0]
   81896:	f083 0301 	eor.w	r3, r3, #1
   8189a:	b2db      	uxtb	r3, r3
   8189c:	2b00      	cmp	r3, #0
   8189e:	d002      	beq.n	818a6 <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   818a0:	2002      	movs	r0, #2
   818a2:	4b06      	ldr	r3, [pc, #24]	; (818bc <udd_sleep_mode+0x54>)
   818a4:	4798      	blx	r3
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   818a6:	4a03      	ldr	r2, [pc, #12]	; (818b4 <udd_sleep_mode+0x4c>)
   818a8:	79fb      	ldrb	r3, [r7, #7]
   818aa:	7013      	strb	r3, [r2, #0]
}
   818ac:	bf00      	nop
   818ae:	3708      	adds	r7, #8
   818b0:	46bd      	mov	sp, r7
   818b2:	bd80      	pop	{r7, pc}
   818b4:	20000cfc 	.word	0x20000cfc
   818b8:	00081831 	.word	0x00081831
   818bc:	000817f9 	.word	0x000817f9

000818c0 <UDPHS_Handler>:
 * Here, the global interrupt mask is not clear when an USB interrupt is enabled
 * because this one can not be occurred during the USB ISR (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests in peripheral modules.
 */
ISR(UDD_USB_INT_FUN)
{
   818c0:	b580      	push	{r7, lr}
   818c2:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   818c4:	201d      	movs	r0, #29
   818c6:	4b5e      	ldr	r3, [pc, #376]	; (81a40 <UDPHS_Handler+0x180>)
   818c8:	4798      	blx	r3
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   818ca:	4b5e      	ldr	r3, [pc, #376]	; (81a44 <UDPHS_Handler+0x184>)
   818cc:	4798      	blx	r3
   818ce:	4603      	mov	r3, r0
   818d0:	f083 0301 	eor.w	r3, r3, #1
   818d4:	b2db      	uxtb	r3, r3
   818d6:	2b00      	cmp	r3, #0
   818d8:	d00c      	beq.n	818f4 <UDPHS_Handler+0x34>
   818da:	4b5b      	ldr	r3, [pc, #364]	; (81a48 <UDPHS_Handler+0x188>)
   818dc:	695b      	ldr	r3, [r3, #20]
   818de:	f003 0302 	and.w	r3, r3, #2
   818e2:	2b00      	cmp	r3, #0
   818e4:	d106      	bne.n	818f4 <UDPHS_Handler+0x34>
  __ASM volatile ("cpsid i");
   818e6:	b672      	cpsid	i
   818e8:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   818ec:	4b57      	ldr	r3, [pc, #348]	; (81a4c <UDPHS_Handler+0x18c>)
   818ee:	2200      	movs	r2, #0
   818f0:	701a      	strb	r2, [r3, #0]
		return;
   818f2:	e0a4      	b.n	81a3e <UDPHS_Handler+0x17e>
	}

	if (Is_udd_sof()) {
   818f4:	4b54      	ldr	r3, [pc, #336]	; (81a48 <UDPHS_Handler+0x188>)
   818f6:	695b      	ldr	r3, [r3, #20]
   818f8:	f003 0308 	and.w	r3, r3, #8
   818fc:	2b00      	cmp	r3, #0
   818fe:	d00d      	beq.n	8191c <UDPHS_Handler+0x5c>
		udd_ack_sof();
   81900:	4b51      	ldr	r3, [pc, #324]	; (81a48 <UDPHS_Handler+0x188>)
   81902:	2208      	movs	r2, #8
   81904:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   81906:	4b50      	ldr	r3, [pc, #320]	; (81a48 <UDPHS_Handler+0x188>)
   81908:	695b      	ldr	r3, [r3, #20]
   8190a:	f003 0301 	and.w	r3, r3, #1
   8190e:	2b00      	cmp	r3, #0
   81910:	d101      	bne.n	81916 <UDPHS_Handler+0x56>
			udc_sof_notify();
   81912:	4b4f      	ldr	r3, [pc, #316]	; (81a50 <UDPHS_Handler+0x190>)
   81914:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   81916:	4b4f      	ldr	r3, [pc, #316]	; (81a54 <UDPHS_Handler+0x194>)
   81918:	4798      	blx	r3
#endif
		goto udd_interrupt_sof_end;
   8191a:	e08e      	b.n	81a3a <UDPHS_Handler+0x17a>
	}

	if (Is_udd_msof()) {
   8191c:	4b4a      	ldr	r3, [pc, #296]	; (81a48 <UDPHS_Handler+0x188>)
   8191e:	695b      	ldr	r3, [r3, #20]
   81920:	f003 0304 	and.w	r3, r3, #4
   81924:	2b00      	cmp	r3, #0
   81926:	d005      	beq.n	81934 <UDPHS_Handler+0x74>
		udd_ack_msof();
   81928:	4b47      	ldr	r3, [pc, #284]	; (81a48 <UDPHS_Handler+0x188>)
   8192a:	2204      	movs	r2, #4
   8192c:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   8192e:	4b48      	ldr	r3, [pc, #288]	; (81a50 <UDPHS_Handler+0x190>)
   81930:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   81932:	e082      	b.n	81a3a <UDPHS_Handler+0x17a>
	}
	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');

	if (udd_ctrl_interrupt()) {
   81934:	4b48      	ldr	r3, [pc, #288]	; (81a58 <UDPHS_Handler+0x198>)
   81936:	4798      	blx	r3
   81938:	4603      	mov	r3, r0
   8193a:	2b00      	cmp	r3, #0
   8193c:	d17a      	bne.n	81a34 <UDPHS_Handler+0x174>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
   8193e:	4b47      	ldr	r3, [pc, #284]	; (81a5c <UDPHS_Handler+0x19c>)
   81940:	4798      	blx	r3
   81942:	4603      	mov	r3, r0
   81944:	2b00      	cmp	r3, #0
   81946:	d177      	bne.n	81a38 <UDPHS_Handler+0x178>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   81948:	4b3f      	ldr	r3, [pc, #252]	; (81a48 <UDPHS_Handler+0x188>)
   8194a:	695b      	ldr	r3, [r3, #20]
   8194c:	f003 0310 	and.w	r3, r3, #16
   81950:	2b00      	cmp	r3, #0
   81952:	d01d      	beq.n	81990 <UDPHS_Handler+0xd0>
		dbg_print("EoR ");
		udd_ack_reset();
   81954:	4b3c      	ldr	r3, [pc, #240]	; (81a48 <UDPHS_Handler+0x188>)
   81956:	2210      	movs	r2, #16
   81958:	619a      	str	r2, [r3, #24]
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
   8195a:	4b41      	ldr	r3, [pc, #260]	; (81a60 <UDPHS_Handler+0x1a0>)
   8195c:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
   8195e:	4b41      	ldr	r3, [pc, #260]	; (81a64 <UDPHS_Handler+0x1a4>)
   81960:	4798      	blx	r3
		// Reset endpoint control
		udd_reset_ep_ctrl();
   81962:	4b41      	ldr	r3, [pc, #260]	; (81a68 <UDPHS_Handler+0x1a8>)
   81964:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
   81966:	4b41      	ldr	r3, [pc, #260]	; (81a6c <UDPHS_Handler+0x1ac>)
   81968:	4798      	blx	r3
		// Enable SOF interrupts cleared by USB reset event
		udd_enable_sof_interrupt();
   8196a:	4a37      	ldr	r2, [pc, #220]	; (81a48 <UDPHS_Handler+0x188>)
   8196c:	4b36      	ldr	r3, [pc, #216]	; (81a48 <UDPHS_Handler+0x188>)
   8196e:	691b      	ldr	r3, [r3, #16]
   81970:	f043 0308 	orr.w	r3, r3, #8
   81974:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   81976:	4a34      	ldr	r2, [pc, #208]	; (81a48 <UDPHS_Handler+0x188>)
   81978:	4b33      	ldr	r3, [pc, #204]	; (81a48 <UDPHS_Handler+0x188>)
   8197a:	691b      	ldr	r3, [r3, #16]
   8197c:	f043 0304 	orr.w	r3, r3, #4
   81980:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   81982:	4a31      	ldr	r2, [pc, #196]	; (81a48 <UDPHS_Handler+0x188>)
   81984:	4b30      	ldr	r3, [pc, #192]	; (81a48 <UDPHS_Handler+0x188>)
   81986:	691b      	ldr	r3, [r3, #16]
   81988:	f043 0302 	orr.w	r3, r3, #2
   8198c:	6113      	str	r3, [r2, #16]
		goto udd_interrupt_end;
   8198e:	e054      	b.n	81a3a <UDPHS_Handler+0x17a>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   81990:	4b2d      	ldr	r3, [pc, #180]	; (81a48 <UDPHS_Handler+0x188>)
   81992:	691b      	ldr	r3, [r3, #16]
   81994:	f003 0302 	and.w	r3, r3, #2
   81998:	2b00      	cmp	r3, #0
   8199a:	d020      	beq.n	819de <UDPHS_Handler+0x11e>
   8199c:	4b2a      	ldr	r3, [pc, #168]	; (81a48 <UDPHS_Handler+0x188>)
   8199e:	695b      	ldr	r3, [r3, #20]
   819a0:	f003 0302 	and.w	r3, r3, #2
   819a4:	2b00      	cmp	r3, #0
   819a6:	d01a      	beq.n	819de <UDPHS_Handler+0x11e>
		dbg_print("Susp ");
		// Remove old wakeup status
		udd_ack_wake_up();
   819a8:	4b27      	ldr	r3, [pc, #156]	; (81a48 <UDPHS_Handler+0x188>)
   819aa:	2220      	movs	r2, #32
   819ac:	619a      	str	r2, [r3, #24]
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   819ae:	4a26      	ldr	r2, [pc, #152]	; (81a48 <UDPHS_Handler+0x188>)
   819b0:	4b25      	ldr	r3, [pc, #148]	; (81a48 <UDPHS_Handler+0x188>)
   819b2:	691b      	ldr	r3, [r3, #16]
   819b4:	f023 0302 	bic.w	r3, r3, #2
   819b8:	6113      	str	r3, [r2, #16]
		udd_enable_wake_up_interrupt();
   819ba:	4a23      	ldr	r2, [pc, #140]	; (81a48 <UDPHS_Handler+0x188>)
   819bc:	4b22      	ldr	r3, [pc, #136]	; (81a48 <UDPHS_Handler+0x188>)
   819be:	691b      	ldr	r3, [r3, #16]
   819c0:	f043 0320 	orr.w	r3, r3, #32
   819c4:	6113      	str	r3, [r2, #16]

		// The wakeup interrupt is generated even if the device controller clock is disabled.
		udd_ack_suspend();
   819c6:	4b20      	ldr	r3, [pc, #128]	; (81a48 <UDPHS_Handler+0x188>)
   819c8:	2202      	movs	r2, #2
   819ca:	619a      	str	r2, [r3, #24]

		udd_disable_periph_ck();
   819cc:	201d      	movs	r0, #29
   819ce:	4b28      	ldr	r3, [pc, #160]	; (81a70 <UDPHS_Handler+0x1b0>)
   819d0:	4798      	blx	r3

#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   819d2:	4b28      	ldr	r3, [pc, #160]	; (81a74 <UDPHS_Handler+0x1b4>)
   819d4:	4798      	blx	r3
#endif
		udd_sleep_mode(false); // Enter in SUSPEND mode
   819d6:	2000      	movs	r0, #0
   819d8:	4b27      	ldr	r3, [pc, #156]	; (81a78 <UDPHS_Handler+0x1b8>)
   819da:	4798      	blx	r3
		goto udd_interrupt_end;
   819dc:	e02d      	b.n	81a3a <UDPHS_Handler+0x17a>
	}

	// On wakeup, _IEN is reseted only with EoR enabled
	if (Is_udd_wake_up()) {
   819de:	4b1a      	ldr	r3, [pc, #104]	; (81a48 <UDPHS_Handler+0x188>)
   819e0:	695b      	ldr	r3, [r3, #20]
   819e2:	f003 0320 	and.w	r3, r3, #32
   819e6:	2b00      	cmp	r3, #0
   819e8:	d028      	beq.n	81a3c <UDPHS_Handler+0x17c>
		udd_sleep_mode(true); // Enter in IDLE mode
   819ea:	2001      	movs	r0, #1
   819ec:	4b22      	ldr	r3, [pc, #136]	; (81a78 <UDPHS_Handler+0x1b8>)
   819ee:	4798      	blx	r3
		// Remove old suspend status
		udd_ack_suspend();
   819f0:	4b15      	ldr	r3, [pc, #84]	; (81a48 <UDPHS_Handler+0x188>)
   819f2:	2202      	movs	r2, #2
   819f4:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wake_up();
   819f6:	4b14      	ldr	r3, [pc, #80]	; (81a48 <UDPHS_Handler+0x188>)
   819f8:	2220      	movs	r2, #32
   819fa:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_disable_wake_up_interrupt();
   819fc:	4a12      	ldr	r2, [pc, #72]	; (81a48 <UDPHS_Handler+0x188>)
   819fe:	4b12      	ldr	r3, [pc, #72]	; (81a48 <UDPHS_Handler+0x188>)
   81a00:	691b      	ldr	r3, [r3, #16]
   81a02:	f023 0320 	bic.w	r3, r3, #32
   81a06:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   81a08:	4a0f      	ldr	r2, [pc, #60]	; (81a48 <UDPHS_Handler+0x188>)
   81a0a:	4b0f      	ldr	r3, [pc, #60]	; (81a48 <UDPHS_Handler+0x188>)
   81a0c:	691b      	ldr	r3, [r3, #16]
   81a0e:	f043 0302 	orr.w	r3, r3, #2
   81a12:	6113      	str	r3, [r2, #16]
		udd_enable_sof_interrupt();
   81a14:	4a0c      	ldr	r2, [pc, #48]	; (81a48 <UDPHS_Handler+0x188>)
   81a16:	4b0c      	ldr	r3, [pc, #48]	; (81a48 <UDPHS_Handler+0x188>)
   81a18:	691b      	ldr	r3, [r3, #16]
   81a1a:	f043 0308 	orr.w	r3, r3, #8
   81a1e:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   81a20:	4a09      	ldr	r2, [pc, #36]	; (81a48 <UDPHS_Handler+0x188>)
   81a22:	4b09      	ldr	r3, [pc, #36]	; (81a48 <UDPHS_Handler+0x188>)
   81a24:	691b      	ldr	r3, [r3, #16]
   81a26:	f043 0304 	orr.w	r3, r3, #4
   81a2a:	6113      	str	r3, [r2, #16]

#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   81a2c:	4b13      	ldr	r3, [pc, #76]	; (81a7c <UDPHS_Handler+0x1bc>)
   81a2e:	4798      	blx	r3
#endif
		dbg_print("Wkup ");
		goto udd_interrupt_end;
   81a30:	bf00      	nop
   81a32:	e002      	b.n	81a3a <UDPHS_Handler+0x17a>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
   81a34:	bf00      	nop
   81a36:	e000      	b.n	81a3a <UDPHS_Handler+0x17a>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
   81a38:	bf00      	nop
udd_interrupt_end:
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
	//dbg_print("m%08x", UDPHS->UDPHS_IEN);
	dbg_print("\n\r");
udd_interrupt_sof_end:
	return;
   81a3a:	bf00      	nop
   81a3c:	bf00      	nop
}
   81a3e:	bd80      	pop	{r7, pc}
   81a40:	00083a3d 	.word	0x00083a3d
   81a44:	00085305 	.word	0x00085305
   81a48:	400a4000 	.word	0x400a4000
   81a4c:	2000031a 	.word	0x2000031a
   81a50:	00084445 	.word	0x00084445
   81a54:	00080bb1 	.word	0x00080bb1
   81a58:	00082ced 	.word	0x00082ced
   81a5c:	00083105 	.word	0x00083105
   81a60:	00082e2d 	.word	0x00082e2d
   81a64:	000843f1 	.word	0x000843f1
   81a68:	0008264d 	.word	0x0008264d
   81a6c:	000826cd 	.word	0x000826cd
   81a70:	00083a8d 	.word	0x00083a8d
   81a74:	00080b99 	.word	0x00080b99
   81a78:	00081869 	.word	0x00081869
   81a7c:	00080ba5 	.word	0x00080ba5

00081a80 <udd_enable>:
#endif
}


void udd_enable(void)
{
   81a80:	b580      	push	{r7, lr}
   81a82:	b082      	sub	sp, #8
   81a84:	af00      	add	r7, sp, #0
	irqflags_t flags;
	sysclk_enable_usb();
   81a86:	4b19      	ldr	r3, [pc, #100]	; (81aec <udd_enable+0x6c>)
   81a88:	4798      	blx	r3

	udd_enable_periph_ck();
   81a8a:	201d      	movs	r0, #29
   81a8c:	4b18      	ldr	r3, [pc, #96]	; (81af0 <udd_enable+0x70>)
   81a8e:	4798      	blx	r3

	flags = cpu_irq_save();
   81a90:	4b18      	ldr	r3, [pc, #96]	; (81af4 <udd_enable+0x74>)
   81a92:	4798      	blx	r3
   81a94:	6078      	str	r0, [r7, #4]

	//** Enable USB hardware
	udd_enable_periph();
   81a96:	4a18      	ldr	r2, [pc, #96]	; (81af8 <udd_enable+0x78>)
   81a98:	4b17      	ldr	r3, [pc, #92]	; (81af8 <udd_enable+0x78>)
   81a9a:	681b      	ldr	r3, [r3, #0]
   81a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   81aa0:	6013      	str	r3, [r2, #0]

	// Cortex-M3, uses NVIC, no need to register IRQ handler
	// Here, only the Device mode is possible,
	// UDPHS interrupt is UDD interrupt
	NVIC_SetPriority((IRQn_Type) ID_UDPHS, UDD_USB_INT_LEVEL);
   81aa2:	2105      	movs	r1, #5
   81aa4:	201d      	movs	r0, #29
   81aa6:	4b15      	ldr	r3, [pc, #84]	; (81afc <udd_enable+0x7c>)
   81aa8:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDPHS);
   81aaa:	201d      	movs	r0, #29
   81aac:	4b14      	ldr	r3, [pc, #80]	; (81b00 <udd_enable+0x80>)
   81aae:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
   81ab0:	4b14      	ldr	r3, [pc, #80]	; (81b04 <udd_enable+0x84>)
   81ab2:	4798      	blx	r3
#endif

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   81ab4:	4a10      	ldr	r2, [pc, #64]	; (81af8 <udd_enable+0x78>)
   81ab6:	4b10      	ldr	r3, [pc, #64]	; (81af8 <udd_enable+0x78>)
   81ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   81abc:	f023 0303 	bic.w	r3, r3, #3
   81ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
#else
	udd_high_speed_disable();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   81ac4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   81ac8:	4b0f      	ldr	r3, [pc, #60]	; (81b08 <udd_enable+0x88>)
   81aca:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
   81acc:	4b0f      	ldr	r3, [pc, #60]	; (81b0c <udd_enable+0x8c>)
   81ace:	2200      	movs	r2, #0
   81ad0:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
   81ad2:	2003      	movs	r0, #3
   81ad4:	4b0e      	ldr	r3, [pc, #56]	; (81b10 <udd_enable+0x90>)
   81ad6:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
   81ad8:	4b0e      	ldr	r3, [pc, #56]	; (81b14 <udd_enable+0x94>)
   81ada:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
   81adc:	6878      	ldr	r0, [r7, #4]
   81ade:	4b0e      	ldr	r3, [pc, #56]	; (81b18 <udd_enable+0x98>)
   81ae0:	4798      	blx	r3
}
   81ae2:	bf00      	nop
   81ae4:	3708      	adds	r7, #8
   81ae6:	46bd      	mov	sp, r7
   81ae8:	bd80      	pop	{r7, pc}
   81aea:	bf00      	nop
   81aec:	000836a5 	.word	0x000836a5
   81af0:	00083a3d 	.word	0x00083a3d
   81af4:	00081771 	.word	0x00081771
   81af8:	400a4000 	.word	0x400a4000
   81afc:	0008171d 	.word	0x0008171d
   81b00:	000816ed 	.word	0x000816ed
   81b04:	00082dd1 	.word	0x00082dd1
   81b08:	00083b01 	.word	0x00083b01
   81b0c:	20000cfc 	.word	0x20000cfc
   81b10:	000817f9 	.word	0x000817f9
   81b14:	00081b1d 	.word	0x00081b1d
   81b18:	000817c9 	.word	0x000817c9

00081b1c <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   81b1c:	b580      	push	{r7, lr}
   81b1e:	b082      	sub	sp, #8
   81b20:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
   81b22:	4b26      	ldr	r3, [pc, #152]	; (81bbc <udd_attach+0xa0>)
   81b24:	4798      	blx	r3
   81b26:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   81b28:	2001      	movs	r0, #1
   81b2a:	4b25      	ldr	r3, [pc, #148]	; (81bc0 <udd_attach+0xa4>)
   81b2c:	4798      	blx	r3
	udd_enable_periph_ck();
   81b2e:	201d      	movs	r0, #29
   81b30:	4b24      	ldr	r3, [pc, #144]	; (81bc4 <udd_attach+0xa8>)
   81b32:	4798      	blx	r3

	// Authorize attach if Vbus is present
	udd_attach_device();
   81b34:	4a24      	ldr	r2, [pc, #144]	; (81bc8 <udd_attach+0xac>)
   81b36:	4b24      	ldr	r3, [pc, #144]	; (81bc8 <udd_attach+0xac>)
   81b38:	681b      	ldr	r3, [r3, #0]
   81b3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81b3e:	6013      	str	r3, [r2, #0]
   81b40:	4a21      	ldr	r2, [pc, #132]	; (81bc8 <udd_attach+0xac>)
   81b42:	4b21      	ldr	r3, [pc, #132]	; (81bc8 <udd_attach+0xac>)
   81b44:	681b      	ldr	r3, [r3, #0]
   81b46:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   81b4a:	6013      	str	r3, [r2, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   81b4c:	4a1e      	ldr	r2, [pc, #120]	; (81bc8 <udd_attach+0xac>)
   81b4e:	4b1e      	ldr	r3, [pc, #120]	; (81bc8 <udd_attach+0xac>)
   81b50:	691b      	ldr	r3, [r3, #16]
   81b52:	f043 0310 	orr.w	r3, r3, #16
   81b56:	6113      	str	r3, [r2, #16]
	udd_enable_suspend_interrupt();
   81b58:	4a1b      	ldr	r2, [pc, #108]	; (81bc8 <udd_attach+0xac>)
   81b5a:	4b1b      	ldr	r3, [pc, #108]	; (81bc8 <udd_attach+0xac>)
   81b5c:	691b      	ldr	r3, [r3, #16]
   81b5e:	f043 0302 	orr.w	r3, r3, #2
   81b62:	6113      	str	r3, [r2, #16]
	udd_enable_wake_up_interrupt();
   81b64:	4a18      	ldr	r2, [pc, #96]	; (81bc8 <udd_attach+0xac>)
   81b66:	4b18      	ldr	r3, [pc, #96]	; (81bc8 <udd_attach+0xac>)
   81b68:	691b      	ldr	r3, [r3, #16]
   81b6a:	f043 0320 	orr.w	r3, r3, #32
   81b6e:	6113      	str	r3, [r2, #16]
	udd_enable_sof_interrupt();
   81b70:	4a15      	ldr	r2, [pc, #84]	; (81bc8 <udd_attach+0xac>)
   81b72:	4b15      	ldr	r3, [pc, #84]	; (81bc8 <udd_attach+0xac>)
   81b74:	691b      	ldr	r3, [r3, #16]
   81b76:	f043 0308 	orr.w	r3, r3, #8
   81b7a:	6113      	str	r3, [r2, #16]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   81b7c:	4a12      	ldr	r2, [pc, #72]	; (81bc8 <udd_attach+0xac>)
   81b7e:	4b12      	ldr	r3, [pc, #72]	; (81bc8 <udd_attach+0xac>)
   81b80:	691b      	ldr	r3, [r3, #16]
   81b82:	f043 0304 	orr.w	r3, r3, #4
   81b86:	6113      	str	r3, [r2, #16]
#endif
	// Reset following interrupts flag
	udd_ack_sof();
   81b88:	4b0f      	ldr	r3, [pc, #60]	; (81bc8 <udd_attach+0xac>)
   81b8a:	2208      	movs	r2, #8
   81b8c:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   81b8e:	4b0e      	ldr	r3, [pc, #56]	; (81bc8 <udd_attach+0xac>)
   81b90:	2204      	movs	r2, #4
   81b92:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   81b94:	4b0c      	ldr	r3, [pc, #48]	; (81bc8 <udd_attach+0xac>)
   81b96:	2210      	movs	r2, #16
   81b98:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   81b9a:	4b0b      	ldr	r3, [pc, #44]	; (81bc8 <udd_attach+0xac>)
   81b9c:	2202      	movs	r2, #2
   81b9e:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   81ba0:	4b09      	ldr	r3, [pc, #36]	; (81bc8 <udd_attach+0xac>)
   81ba2:	2220      	movs	r2, #32
   81ba4:	619a      	str	r2, [r3, #24]

	udd_disable_periph_ck();
   81ba6:	201d      	movs	r0, #29
   81ba8:	4b08      	ldr	r3, [pc, #32]	; (81bcc <udd_attach+0xb0>)
   81baa:	4798      	blx	r3
	cpu_irq_restore(flags);
   81bac:	6878      	ldr	r0, [r7, #4]
   81bae:	4b08      	ldr	r3, [pc, #32]	; (81bd0 <udd_attach+0xb4>)
   81bb0:	4798      	blx	r3
}
   81bb2:	bf00      	nop
   81bb4:	3708      	adds	r7, #8
   81bb6:	46bd      	mov	sp, r7
   81bb8:	bd80      	pop	{r7, pc}
   81bba:	bf00      	nop
   81bbc:	00081771 	.word	0x00081771
   81bc0:	00081869 	.word	0x00081869
   81bc4:	00083a3d 	.word	0x00083a3d
   81bc8:	400a4000 	.word	0x400a4000
   81bcc:	00083a8d 	.word	0x00083a8d
   81bd0:	000817c9 	.word	0x000817c9

00081bd4 <udd_is_high_speed>:
	udd_sleep_mode(false);
}


bool udd_is_high_speed(void)
{
   81bd4:	b480      	push	{r7}
   81bd6:	af00      	add	r7, sp, #0
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   81bd8:	4b06      	ldr	r3, [pc, #24]	; (81bf4 <udd_is_high_speed+0x20>)
   81bda:	695b      	ldr	r3, [r3, #20]
   81bdc:	f003 0301 	and.w	r3, r3, #1
   81be0:	2b00      	cmp	r3, #0
   81be2:	bf14      	ite	ne
   81be4:	2301      	movne	r3, #1
   81be6:	2300      	moveq	r3, #0
   81be8:	b2db      	uxtb	r3, r3
#else
	return false;
#endif
}
   81bea:	4618      	mov	r0, r3
   81bec:	46bd      	mov	sp, r7
   81bee:	bc80      	pop	{r7}
   81bf0:	4770      	bx	lr
   81bf2:	bf00      	nop
   81bf4:	400a4000 	.word	0x400a4000

00081bf8 <udd_set_address>:


void udd_set_address(uint8_t address)
{
   81bf8:	b480      	push	{r7}
   81bfa:	b083      	sub	sp, #12
   81bfc:	af00      	add	r7, sp, #0
   81bfe:	4603      	mov	r3, r0
   81c00:	71fb      	strb	r3, [r7, #7]
	dbg_print("Addr%d ", address);
	udd_disable_address();
   81c02:	4a0d      	ldr	r2, [pc, #52]	; (81c38 <udd_set_address+0x40>)
   81c04:	4b0c      	ldr	r3, [pc, #48]	; (81c38 <udd_set_address+0x40>)
   81c06:	681b      	ldr	r3, [r3, #0]
   81c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   81c0c:	6013      	str	r3, [r2, #0]
	udd_configure_address(address);
   81c0e:	490a      	ldr	r1, [pc, #40]	; (81c38 <udd_set_address+0x40>)
   81c10:	4b09      	ldr	r3, [pc, #36]	; (81c38 <udd_set_address+0x40>)
   81c12:	681b      	ldr	r3, [r3, #0]
   81c14:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   81c18:	79fb      	ldrb	r3, [r7, #7]
   81c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   81c1e:	4313      	orrs	r3, r2
   81c20:	600b      	str	r3, [r1, #0]
	udd_enable_address();
   81c22:	4a05      	ldr	r2, [pc, #20]	; (81c38 <udd_set_address+0x40>)
   81c24:	4b04      	ldr	r3, [pc, #16]	; (81c38 <udd_set_address+0x40>)
   81c26:	681b      	ldr	r3, [r3, #0]
   81c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81c2c:	6013      	str	r3, [r2, #0]
}
   81c2e:	bf00      	nop
   81c30:	370c      	adds	r7, #12
   81c32:	46bd      	mov	sp, r7
   81c34:	bc80      	pop	{r7}
   81c36:	4770      	bx	lr
   81c38:	400a4000 	.word	0x400a4000

00081c3c <udd_getaddress>:


uint8_t udd_getaddress(void)
{
   81c3c:	b480      	push	{r7}
   81c3e:	af00      	add	r7, sp, #0
	return udd_get_configured_address();
   81c40:	4b04      	ldr	r3, [pc, #16]	; (81c54 <udd_getaddress+0x18>)
   81c42:	681b      	ldr	r3, [r3, #0]
   81c44:	b2db      	uxtb	r3, r3
   81c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   81c4a:	b2db      	uxtb	r3, r3
}
   81c4c:	4618      	mov	r0, r3
   81c4e:	46bd      	mov	sp, r7
   81c50:	bc80      	pop	{r7}
   81c52:	4770      	bx	lr
   81c54:	400a4000 	.word	0x400a4000

00081c58 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
   81c58:	b480      	push	{r7}
   81c5a:	b083      	sub	sp, #12
   81c5c:	af00      	add	r7, sp, #0
   81c5e:	6078      	str	r0, [r7, #4]
   81c60:	460b      	mov	r3, r1
   81c62:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
   81c64:	4a05      	ldr	r2, [pc, #20]	; (81c7c <udd_set_setup_payload+0x24>)
   81c66:	687b      	ldr	r3, [r7, #4]
   81c68:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   81c6a:	4a04      	ldr	r2, [pc, #16]	; (81c7c <udd_set_setup_payload+0x24>)
   81c6c:	887b      	ldrh	r3, [r7, #2]
   81c6e:	8193      	strh	r3, [r2, #12]
}
   81c70:	bf00      	nop
   81c72:	370c      	adds	r7, #12
   81c74:	46bd      	mov	sp, r7
   81c76:	bc80      	pop	{r7}
   81c78:	4770      	bx	lr
   81c7a:	bf00      	nop
   81c7c:	20000d54 	.word	0x20000d54

00081c80 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   81c80:	b590      	push	{r4, r7, lr}
   81c82:	b089      	sub	sp, #36	; 0x24
   81c84:	af02      	add	r7, sp, #8
   81c86:	4603      	mov	r3, r0
   81c88:	71fb      	strb	r3, [r7, #7]
   81c8a:	460b      	mov	r3, r1
   81c8c:	71bb      	strb	r3, [r7, #6]
   81c8e:	4613      	mov	r3, r2
   81c90:	80bb      	strh	r3, [r7, #4]
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, nb_tran = 0, i;
   81c92:	2300      	movs	r3, #0
   81c94:	74fb      	strb	r3, [r7, #19]
	bool b_iso_hbw = false;
   81c96:	2300      	movs	r3, #0
   81c98:	747b      	strb	r3, [r7, #17]

	b_dir_in = ep & USB_EP_DIR_IN;
   81c9a:	79fb      	ldrb	r3, [r7, #7]
   81c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   81ca0:	2b00      	cmp	r3, #0
   81ca2:	bf14      	ite	ne
   81ca4:	2301      	movne	r3, #1
   81ca6:	2300      	moveq	r3, #0
   81ca8:	743b      	strb	r3, [r7, #16]
	ep = ep & USB_EP_ADDR_MASK;
   81caa:	79fb      	ldrb	r3, [r7, #7]
   81cac:	f003 030f 	and.w	r3, r3, #15
   81cb0:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
   81cb2:	79fb      	ldrb	r3, [r7, #7]
   81cb4:	2b02      	cmp	r3, #2
   81cb6:	d901      	bls.n	81cbc <udd_ep_alloc+0x3c>
		return false;
   81cb8:	2300      	movs	r3, #0
   81cba:	e1b2      	b.n	82022 <udd_ep_alloc+0x3a2>
	}
	if (Is_udd_endpoint_enabled(ep)) {
   81cbc:	4ab2      	ldr	r2, [pc, #712]	; (81f88 <udd_ep_alloc+0x308>)
   81cbe:	79fb      	ldrb	r3, [r7, #7]
   81cc0:	015b      	lsls	r3, r3, #5
   81cc2:	4413      	add	r3, r2
   81cc4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   81cc8:	681b      	ldr	r3, [r3, #0]
   81cca:	f003 0301 	and.w	r3, r3, #1
   81cce:	2b00      	cmp	r3, #0
   81cd0:	d001      	beq.n	81cd6 <udd_ep_alloc+0x56>
		return false;
   81cd2:	2300      	movs	r3, #0
   81cd4:	e1a5      	b.n	82022 <udd_ep_alloc+0x3a2>
	}

	// Bank choice
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   81cd6:	79bb      	ldrb	r3, [r7, #6]
   81cd8:	f003 0303 	and.w	r3, r3, #3
   81cdc:	2b02      	cmp	r3, #2
   81cde:	d01a      	beq.n	81d16 <udd_ep_alloc+0x96>
   81ce0:	2b03      	cmp	r3, #3
   81ce2:	d015      	beq.n	81d10 <udd_ep_alloc+0x90>
   81ce4:	2b01      	cmp	r3, #1
   81ce6:	d119      	bne.n	81d1c <udd_ep_alloc+0x9c>
	case USB_EP_TYPE_ISOCHRONOUS:
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   81ce8:	79fb      	ldrb	r3, [r7, #7]
   81cea:	2b00      	cmp	r3, #0
   81cec:	d007      	beq.n	81cfe <udd_ep_alloc+0x7e>
   81cee:	79fb      	ldrb	r3, [r7, #7]
   81cf0:	2b03      	cmp	r3, #3
   81cf2:	d004      	beq.n	81cfe <udd_ep_alloc+0x7e>
   81cf4:	79fb      	ldrb	r3, [r7, #7]
   81cf6:	2b04      	cmp	r3, #4
   81cf8:	d001      	beq.n	81cfe <udd_ep_alloc+0x7e>
   81cfa:	2301      	movs	r3, #1
   81cfc:	e000      	b.n	81d00 <udd_ep_alloc+0x80>
   81cfe:	2300      	movs	r3, #0
   81d00:	747b      	strb	r3, [r7, #17]
   81d02:	7c7b      	ldrb	r3, [r7, #17]
   81d04:	f003 0301 	and.w	r3, r3, #1
   81d08:	747b      	strb	r3, [r7, #17]
		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
   81d0a:	2301      	movs	r3, #1
   81d0c:	757b      	strb	r3, [r7, #21]
		break;
   81d0e:	e007      	b.n	81d20 <udd_ep_alloc+0xa0>
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
   81d10:	2301      	movs	r3, #1
   81d12:	757b      	strb	r3, [r7, #21]
		break;
   81d14:	e004      	b.n	81d20 <udd_ep_alloc+0xa0>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   81d16:	2302      	movs	r3, #2
   81d18:	757b      	strb	r3, [r7, #21]
		break;
   81d1a:	e001      	b.n	81d20 <udd_ep_alloc+0xa0>
	default:
		Assert(false);
		return false;
   81d1c:	2300      	movs	r3, #0
   81d1e:	e180      	b.n	82022 <udd_ep_alloc+0x3a2>
	}
	switch (nb_bank) {
   81d20:	7d7b      	ldrb	r3, [r7, #21]
   81d22:	2b02      	cmp	r3, #2
   81d24:	d006      	beq.n	81d34 <udd_ep_alloc+0xb4>
   81d26:	2b03      	cmp	r3, #3
   81d28:	d007      	beq.n	81d3a <udd_ep_alloc+0xba>
   81d2a:	2b01      	cmp	r3, #1
   81d2c:	d108      	bne.n	81d40 <udd_ep_alloc+0xc0>
	case 1:
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   81d2e:	2301      	movs	r3, #1
   81d30:	753b      	strb	r3, [r7, #20]
		break;
   81d32:	e007      	b.n	81d44 <udd_ep_alloc+0xc4>
	case 2:
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   81d34:	2302      	movs	r3, #2
   81d36:	753b      	strb	r3, [r7, #20]
		break;
   81d38:	e004      	b.n	81d44 <udd_ep_alloc+0xc4>
	case 3:
		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   81d3a:	2303      	movs	r3, #3
   81d3c:	753b      	strb	r3, [r7, #20]
		break;
   81d3e:	e001      	b.n	81d44 <udd_ep_alloc+0xc4>
	default:
		Assert(false);
		return false;
   81d40:	2300      	movs	r3, #0
   81d42:	e16e      	b.n	82022 <udd_ep_alloc+0x3a2>
	}
	if (b_iso_hbw) {
   81d44:	7c7b      	ldrb	r3, [r7, #17]
   81d46:	2b00      	cmp	r3, #0
   81d48:	d017      	beq.n	81d7a <udd_ep_alloc+0xfa>
		switch(MaxEndpointSize & (0x3u << 11)) {
   81d4a:	88bb      	ldrh	r3, [r7, #4]
   81d4c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   81d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   81d54:	d003      	beq.n	81d5e <udd_ep_alloc+0xde>
   81d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   81d5a:	d003      	beq.n	81d64 <udd_ep_alloc+0xe4>
   81d5c:	e005      	b.n	81d6a <udd_ep_alloc+0xea>
		case (0x1u << 11):
			nb_tran = 2;
   81d5e:	2302      	movs	r3, #2
   81d60:	74fb      	strb	r3, [r7, #19]
			break;
   81d62:	e005      	b.n	81d70 <udd_ep_alloc+0xf0>
		case (0x2u << 11):
			nb_tran = 3;
   81d64:	2303      	movs	r3, #3
   81d66:	74fb      	strb	r3, [r7, #19]
			break;
   81d68:	e002      	b.n	81d70 <udd_ep_alloc+0xf0>
		default:
			nb_tran = 1;
   81d6a:	2301      	movs	r3, #1
   81d6c:	74fb      	strb	r3, [r7, #19]
			break;
   81d6e:	bf00      	nop
		}
		MaxEndpointSize &= ~(0x3u << 11);
   81d70:	88bb      	ldrh	r3, [r7, #4]
   81d72:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
   81d76:	80bb      	strh	r3, [r7, #4]
   81d78:	e006      	b.n	81d88 <udd_ep_alloc+0x108>
	} else if (MaxEndpointSize & (0x3u << 11)) {
   81d7a:	88bb      	ldrh	r3, [r7, #4]
   81d7c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   81d80:	2b00      	cmp	r3, #0
   81d82:	d001      	beq.n	81d88 <udd_ep_alloc+0x108>
		// High BW not supported
		return false;
   81d84:	2300      	movs	r3, #0
   81d86:	e14c      	b.n	82022 <udd_ep_alloc+0x3a2>
	Assert(MaxEndpointSize <= udd_get_endpoint_size_max(ep));
	Assert(nb_bank <= udd_get_endpoint_bank_max_nbr(ep));

	// Set configuration of new endpoint
	// Note: NB_TRANS is at maximum for isochronous endpoint, else 0 (ignored).
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   81d88:	4c7f      	ldr	r4, [pc, #508]	; (81f88 <udd_ep_alloc+0x308>)
   81d8a:	79f9      	ldrb	r1, [r7, #7]
   81d8c:	4a7e      	ldr	r2, [pc, #504]	; (81f88 <udd_ep_alloc+0x308>)
   81d8e:	79fb      	ldrb	r3, [r7, #7]
   81d90:	3308      	adds	r3, #8
   81d92:	015b      	lsls	r3, r3, #5
   81d94:	4413      	add	r3, r2
   81d96:	681b      	ldr	r3, [r3, #0]
   81d98:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   81d9c:	f023 0303 	bic.w	r3, r3, #3
   81da0:	79ba      	ldrb	r2, [r7, #6]
   81da2:	0112      	lsls	r2, r2, #4
   81da4:	f002 0030 	and.w	r0, r2, #48	; 0x30
   81da8:	7c3a      	ldrb	r2, [r7, #16]
   81daa:	2a00      	cmp	r2, #0
   81dac:	d001      	beq.n	81db2 <udd_ep_alloc+0x132>
   81dae:	2208      	movs	r2, #8
   81db0:	e000      	b.n	81db4 <udd_ep_alloc+0x134>
   81db2:	2200      	movs	r2, #0
   81db4:	4310      	orrs	r0, r2
   81db6:	88ba      	ldrh	r2, [r7, #4]
   81db8:	2a08      	cmp	r2, #8
   81dba:	d903      	bls.n	81dc4 <udd_ep_alloc+0x144>
   81dbc:	88ba      	ldrh	r2, [r7, #4]
   81dbe:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   81dc2:	da08      	bge.n	81dd6 <udd_ep_alloc+0x156>
   81dc4:	88ba      	ldrh	r2, [r7, #4]
   81dc6:	2a08      	cmp	r2, #8
   81dc8:	d903      	bls.n	81dd2 <udd_ep_alloc+0x152>
   81dca:	88ba      	ldrh	r2, [r7, #4]
   81dcc:	0052      	lsls	r2, r2, #1
   81dce:	3a01      	subs	r2, #1
   81dd0:	e003      	b.n	81dda <udd_ep_alloc+0x15a>
   81dd2:	220f      	movs	r2, #15
   81dd4:	e001      	b.n	81dda <udd_ep_alloc+0x15a>
   81dd6:	f240 72ff 	movw	r2, #2047	; 0x7ff
   81dda:	fab2 f282 	clz	r2, r2
   81dde:	f1c2 021c 	rsb	r2, r2, #28
   81de2:	4310      	orrs	r0, r2
   81de4:	7d3a      	ldrb	r2, [r7, #20]
   81de6:	0192      	lsls	r2, r2, #6
   81de8:	b2d2      	uxtb	r2, r2
   81dea:	4310      	orrs	r0, r2
   81dec:	7c7a      	ldrb	r2, [r7, #17]
   81dee:	2a00      	cmp	r2, #0
   81df0:	d004      	beq.n	81dfc <udd_ep_alloc+0x17c>
   81df2:	7cfa      	ldrb	r2, [r7, #19]
   81df4:	0212      	lsls	r2, r2, #8
   81df6:	f402 7240 	and.w	r2, r2, #768	; 0x300
   81dfa:	e000      	b.n	81dfe <udd_ep_alloc+0x17e>
   81dfc:	2200      	movs	r2, #0
   81dfe:	4302      	orrs	r2, r0
   81e00:	f3c2 0209 	ubfx	r2, r2, #0, #10
   81e04:	431a      	orrs	r2, r3
   81e06:	f101 0308 	add.w	r3, r1, #8
   81e0a:	015b      	lsls	r3, r3, #5
   81e0c:	4423      	add	r3, r4
   81e0e:	601a      	str	r2, [r3, #0]
			MaxEndpointSize, bank, (b_iso_hbw)?nb_tran:0);
	if (!Is_udd_endpoint_mapped(ep)) {
   81e10:	4a5d      	ldr	r2, [pc, #372]	; (81f88 <udd_ep_alloc+0x308>)
   81e12:	79fb      	ldrb	r3, [r7, #7]
   81e14:	3308      	adds	r3, #8
   81e16:	015b      	lsls	r3, r3, #5
   81e18:	4413      	add	r3, r2
   81e1a:	681b      	ldr	r3, [r3, #0]
   81e1c:	2b00      	cmp	r3, #0
   81e1e:	db01      	blt.n	81e24 <udd_ep_alloc+0x1a4>
		return false;
   81e20:	2300      	movs	r3, #0
   81e22:	e0fe      	b.n	82022 <udd_ep_alloc+0x3a2>
	}
	udd_enable_endpoint(ep);
   81e24:	4a58      	ldr	r2, [pc, #352]	; (81f88 <udd_ep_alloc+0x308>)
   81e26:	79fb      	ldrb	r3, [r7, #7]
   81e28:	3308      	adds	r3, #8
   81e2a:	015b      	lsls	r3, r3, #5
   81e2c:	4413      	add	r3, r2
   81e2e:	3304      	adds	r3, #4
   81e30:	2201      	movs	r2, #1
   81e32:	601a      	str	r2, [r3, #0]

	// To avoid conflict during reorganization of the DPRAM
	// the superior endpoint must be unallocated and reallocated
	ep_allocated = 0;
   81e34:	2300      	movs	r3, #0
   81e36:	82fb      	strh	r3, [r7, #22]

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   81e38:	2302      	movs	r3, #2
   81e3a:	74bb      	strb	r3, [r7, #18]
   81e3c:	e039      	b.n	81eb2 <udd_ep_alloc+0x232>
		if (Is_udd_endpoint_enabled(i)) {
   81e3e:	4a52      	ldr	r2, [pc, #328]	; (81f88 <udd_ep_alloc+0x308>)
   81e40:	7cbb      	ldrb	r3, [r7, #18]
   81e42:	015b      	lsls	r3, r3, #5
   81e44:	4413      	add	r3, r2
   81e46:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   81e4a:	681b      	ldr	r3, [r3, #0]
   81e4c:	f003 0301 	and.w	r3, r3, #1
   81e50:	2b00      	cmp	r3, #0
   81e52:	d02b      	beq.n	81eac <udd_ep_alloc+0x22c>
			// Save number of bank value
			bank = udd_get_endpoint_bank(i);
   81e54:	4a4c      	ldr	r2, [pc, #304]	; (81f88 <udd_ep_alloc+0x308>)
   81e56:	7cbb      	ldrb	r3, [r7, #18]
   81e58:	3308      	adds	r3, #8
   81e5a:	015b      	lsls	r3, r3, #5
   81e5c:	4413      	add	r3, r2
   81e5e:	681b      	ldr	r3, [r3, #0]
   81e60:	099b      	lsrs	r3, r3, #6
   81e62:	b2db      	uxtb	r3, r3
   81e64:	f003 0303 	and.w	r3, r3, #3
   81e68:	753b      	strb	r3, [r7, #20]
			ep_allocated |=  bank << (i * 2);
   81e6a:	7d3a      	ldrb	r2, [r7, #20]
   81e6c:	7cbb      	ldrb	r3, [r7, #18]
   81e6e:	005b      	lsls	r3, r3, #1
   81e70:	fa02 f303 	lsl.w	r3, r2, r3
   81e74:	b21a      	sxth	r2, r3
   81e76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   81e7a:	4313      	orrs	r3, r2
   81e7c:	b21b      	sxth	r3, r3
   81e7e:	82fb      	strh	r3, [r7, #22]
			// Disable and unallocate endpoint
			udd_disable_endpoint(i);
   81e80:	4a41      	ldr	r2, [pc, #260]	; (81f88 <udd_ep_alloc+0x308>)
   81e82:	7cbb      	ldrb	r3, [r7, #18]
   81e84:	015b      	lsls	r3, r3, #5
   81e86:	4413      	add	r3, r2
   81e88:	f503 7384 	add.w	r3, r3, #264	; 0x108
   81e8c:	2201      	movs	r2, #1
   81e8e:	601a      	str	r2, [r3, #0]
			udd_configure_endpoint_bank(i, 0);
   81e90:	493d      	ldr	r1, [pc, #244]	; (81f88 <udd_ep_alloc+0x308>)
   81e92:	7cbb      	ldrb	r3, [r7, #18]
   81e94:	483c      	ldr	r0, [pc, #240]	; (81f88 <udd_ep_alloc+0x308>)
   81e96:	7cba      	ldrb	r2, [r7, #18]
   81e98:	3208      	adds	r2, #8
   81e9a:	0152      	lsls	r2, r2, #5
   81e9c:	4402      	add	r2, r0
   81e9e:	6812      	ldr	r2, [r2, #0]
   81ea0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   81ea4:	3308      	adds	r3, #8
   81ea6:	015b      	lsls	r3, r3, #5
   81ea8:	440b      	add	r3, r1
   81eaa:	601a      	str	r2, [r3, #0]
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   81eac:	7cbb      	ldrb	r3, [r7, #18]
   81eae:	3b01      	subs	r3, #1
   81eb0:	74bb      	strb	r3, [r7, #18]
   81eb2:	7cba      	ldrb	r2, [r7, #18]
   81eb4:	79fb      	ldrb	r3, [r7, #7]
   81eb6:	429a      	cmp	r2, r3
   81eb8:	d2c1      	bcs.n	81e3e <udd_ep_alloc+0x1be>

		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   81eba:	79fb      	ldrb	r3, [r7, #7]
   81ebc:	74bb      	strb	r3, [r7, #18]
   81ebe:	e0ab      	b.n	82018 <udd_ep_alloc+0x398>
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   81ec0:	7cbb      	ldrb	r3, [r7, #18]
   81ec2:	1e5a      	subs	r2, r3, #1
   81ec4:	4613      	mov	r3, r2
   81ec6:	005b      	lsls	r3, r3, #1
   81ec8:	4413      	add	r3, r2
   81eca:	00db      	lsls	r3, r3, #3
   81ecc:	4a2f      	ldr	r2, [pc, #188]	; (81f8c <udd_ep_alloc+0x30c>)
   81ece:	4413      	add	r3, r2
   81ed0:	60fb      	str	r3, [r7, #12]
		bool b_restart = ptr_job->busy;
   81ed2:	68fb      	ldr	r3, [r7, #12]
   81ed4:	7d1b      	ldrb	r3, [r3, #20]
   81ed6:	f3c3 0300 	ubfx	r3, r3, #0, #1
   81eda:	b2db      	uxtb	r3, r3
   81edc:	2b00      	cmp	r3, #0
   81ede:	bf14      	ite	ne
   81ee0:	2301      	movne	r3, #1
   81ee2:	2300      	moveq	r3, #0
   81ee4:	72fb      	strb	r3, [r7, #11]
		// Unallocated banks?
		bank = (ep_allocated >> (i * 2)) & 0x03;
   81ee6:	8afa      	ldrh	r2, [r7, #22]
   81ee8:	7cbb      	ldrb	r3, [r7, #18]
   81eea:	005b      	lsls	r3, r3, #1
   81eec:	fa42 f303 	asr.w	r3, r2, r3
   81ef0:	b2db      	uxtb	r3, r3
   81ef2:	f003 0303 	and.w	r3, r3, #3
   81ef6:	753b      	strb	r3, [r7, #20]
		if (bank == 0) {
   81ef8:	7d3b      	ldrb	r3, [r7, #20]
   81efa:	2b00      	cmp	r3, #0
   81efc:	f000 8088 	beq.w	82010 <udd_ep_alloc+0x390>
			continue;
		}
		// Restart running job because
		// memory window slides up and its data is lost
		ptr_job->busy = false;
   81f00:	68fa      	ldr	r2, [r7, #12]
   81f02:	7d13      	ldrb	r3, [r2, #20]
   81f04:	f36f 0300 	bfc	r3, #0, #1
   81f08:	7513      	strb	r3, [r2, #20]
		// Re-allocate memory
		udd_configure_endpoint_bank(i, bank);
   81f0a:	481f      	ldr	r0, [pc, #124]	; (81f88 <udd_ep_alloc+0x308>)
   81f0c:	7cbb      	ldrb	r3, [r7, #18]
   81f0e:	491e      	ldr	r1, [pc, #120]	; (81f88 <udd_ep_alloc+0x308>)
   81f10:	7cba      	ldrb	r2, [r7, #18]
   81f12:	3208      	adds	r2, #8
   81f14:	0152      	lsls	r2, r2, #5
   81f16:	440a      	add	r2, r1
   81f18:	6812      	ldr	r2, [r2, #0]
   81f1a:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
   81f1e:	7d3a      	ldrb	r2, [r7, #20]
   81f20:	0192      	lsls	r2, r2, #6
   81f22:	b2d2      	uxtb	r2, r2
   81f24:	430a      	orrs	r2, r1
   81f26:	3308      	adds	r3, #8
   81f28:	015b      	lsls	r3, r3, #5
   81f2a:	4403      	add	r3, r0
   81f2c:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint(i);
   81f2e:	4a16      	ldr	r2, [pc, #88]	; (81f88 <udd_ep_alloc+0x308>)
   81f30:	7cbb      	ldrb	r3, [r7, #18]
   81f32:	3308      	adds	r3, #8
   81f34:	015b      	lsls	r3, r3, #5
   81f36:	4413      	add	r3, r2
   81f38:	3304      	adds	r3, #4
   81f3a:	2201      	movs	r2, #1
   81f3c:	601a      	str	r2, [r3, #0]
		if (!Is_udd_endpoint_mapped(i)) {
   81f3e:	4a12      	ldr	r2, [pc, #72]	; (81f88 <udd_ep_alloc+0x308>)
   81f40:	7cbb      	ldrb	r3, [r7, #18]
   81f42:	3308      	adds	r3, #8
   81f44:	015b      	lsls	r3, r3, #5
   81f46:	4413      	add	r3, r2
   81f48:	681b      	ldr	r3, [r3, #0]
   81f4a:	2b00      	cmp	r3, #0
   81f4c:	db20      	blt.n	81f90 <udd_ep_alloc+0x310>
			dbg_print("ErrRealloc%d-JobE ", i);
			if (NULL == ptr_job->call_trans) {
   81f4e:	68fb      	ldr	r3, [r7, #12]
   81f50:	681b      	ldr	r3, [r3, #0]
   81f52:	2b00      	cmp	r3, #0
   81f54:	d101      	bne.n	81f5a <udd_ep_alloc+0x2da>
				return false;
   81f56:	2300      	movs	r3, #0
   81f58:	e063      	b.n	82022 <udd_ep_alloc+0x3a2>
			}
			if (Is_udd_endpoint_in(i)) {
   81f5a:	4a0b      	ldr	r2, [pc, #44]	; (81f88 <udd_ep_alloc+0x308>)
   81f5c:	7cbb      	ldrb	r3, [r7, #18]
   81f5e:	3308      	adds	r3, #8
   81f60:	015b      	lsls	r3, r3, #5
   81f62:	4413      	add	r3, r2
   81f64:	681b      	ldr	r3, [r3, #0]
   81f66:	f003 0308 	and.w	r3, r3, #8
   81f6a:	2b00      	cmp	r3, #0
   81f6c:	d003      	beq.n	81f76 <udd_ep_alloc+0x2f6>
				i |= USB_EP_DIR_IN;
   81f6e:	7cbb      	ldrb	r3, [r7, #18]
   81f70:	f063 037f 	orn	r3, r3, #127	; 0x7f
   81f74:	74bb      	strb	r3, [r7, #18]
			}
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   81f76:	68fb      	ldr	r3, [r7, #12]
   81f78:	681b      	ldr	r3, [r3, #0]
   81f7a:	68fa      	ldr	r2, [r7, #12]
   81f7c:	68d1      	ldr	r1, [r2, #12]
   81f7e:	7cba      	ldrb	r2, [r7, #18]
   81f80:	2001      	movs	r0, #1
   81f82:	4798      	blx	r3
					ptr_job->buf_cnt, i);
			return false;
   81f84:	2300      	movs	r3, #0
   81f86:	e04c      	b.n	82022 <udd_ep_alloc+0x3a2>
   81f88:	400a4000 	.word	0x400a4000
   81f8c:	20000d04 	.word	0x20000d04
		}
		udd_enable_endpoint_bank_autoswitch(i);
   81f90:	4926      	ldr	r1, [pc, #152]	; (8202c <udd_ep_alloc+0x3ac>)
   81f92:	7cbb      	ldrb	r3, [r7, #18]
   81f94:	4825      	ldr	r0, [pc, #148]	; (8202c <udd_ep_alloc+0x3ac>)
   81f96:	7cba      	ldrb	r2, [r7, #18]
   81f98:	3208      	adds	r2, #8
   81f9a:	0152      	lsls	r2, r2, #5
   81f9c:	4402      	add	r2, r0
   81f9e:	3204      	adds	r2, #4
   81fa0:	6812      	ldr	r2, [r2, #0]
   81fa2:	f042 0202 	orr.w	r2, r2, #2
   81fa6:	3308      	adds	r3, #8
   81fa8:	015b      	lsls	r3, r3, #5
   81faa:	440b      	add	r3, r1
   81fac:	3304      	adds	r3, #4
   81fae:	601a      	str	r2, [r3, #0]
		if (b_restart) {
   81fb0:	7afb      	ldrb	r3, [r7, #11]
   81fb2:	2b00      	cmp	r3, #0
   81fb4:	d02d      	beq.n	82012 <udd_ep_alloc+0x392>
			// Re-run the job remaining part
			ptr_job->buf_cnt -= ptr_job->buf_load;
   81fb6:	68fb      	ldr	r3, [r7, #12]
   81fb8:	68da      	ldr	r2, [r3, #12]
   81fba:	68fb      	ldr	r3, [r7, #12]
   81fbc:	691b      	ldr	r3, [r3, #16]
   81fbe:	1ad2      	subs	r2, r2, r3
   81fc0:	68fb      	ldr	r3, [r7, #12]
   81fc2:	60da      	str	r2, [r3, #12]
			b_restart = udd_ep_run(i,
					ptr_job->b_shortpacket,
   81fc4:	68fb      	ldr	r3, [r7, #12]
   81fc6:	7d1b      	ldrb	r3, [r3, #20]
   81fc8:	f3c3 0340 	ubfx	r3, r3, #1, #1
   81fcc:	b2db      	uxtb	r3, r3
			b_restart = udd_ep_run(i,
   81fce:	2b00      	cmp	r3, #0
   81fd0:	bf14      	ite	ne
   81fd2:	2301      	movne	r3, #1
   81fd4:	2300      	moveq	r3, #0
   81fd6:	b2d9      	uxtb	r1, r3
					&ptr_job->buf[ptr_job->buf_cnt],
   81fd8:	68fb      	ldr	r3, [r7, #12]
   81fda:	685a      	ldr	r2, [r3, #4]
   81fdc:	68fb      	ldr	r3, [r7, #12]
   81fde:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   81fe0:	18d4      	adds	r4, r2, r3
					ptr_job->buf_size
   81fe2:	68fb      	ldr	r3, [r7, #12]
   81fe4:	689a      	ldr	r2, [r3, #8]
						- ptr_job->buf_cnt,
   81fe6:	68fb      	ldr	r3, [r7, #12]
   81fe8:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   81fea:	1ad2      	subs	r2, r2, r3
   81fec:	68fb      	ldr	r3, [r7, #12]
   81fee:	681b      	ldr	r3, [r3, #0]
   81ff0:	7cb8      	ldrb	r0, [r7, #18]
   81ff2:	9300      	str	r3, [sp, #0]
   81ff4:	4613      	mov	r3, r2
   81ff6:	4622      	mov	r2, r4
   81ff8:	4c0d      	ldr	r4, [pc, #52]	; (82030 <udd_ep_alloc+0x3b0>)
   81ffa:	47a0      	blx	r4
   81ffc:	4603      	mov	r3, r0
   81ffe:	72fb      	strb	r3, [r7, #11]
					ptr_job->call_trans);
			if (!b_restart) {
   82000:	7afb      	ldrb	r3, [r7, #11]
   82002:	f083 0301 	eor.w	r3, r3, #1
   82006:	b2db      	uxtb	r3, r3
   82008:	2b00      	cmp	r3, #0
   8200a:	d002      	beq.n	82012 <udd_ep_alloc+0x392>
				dbg_print("ErrReRun%d ", i);
				return false;
   8200c:	2300      	movs	r3, #0
   8200e:	e008      	b.n	82022 <udd_ep_alloc+0x3a2>
			continue;
   82010:	bf00      	nop
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   82012:	7cbb      	ldrb	r3, [r7, #18]
   82014:	3301      	adds	r3, #1
   82016:	74bb      	strb	r3, [r7, #18]
   82018:	7cbb      	ldrb	r3, [r7, #18]
   8201a:	2b02      	cmp	r3, #2
   8201c:	f67f af50 	bls.w	81ec0 <udd_ep_alloc+0x240>
			}
		}
	}
	dbg_print("ep_alloc(%d:%08x) ", ep, UDPHS->UDPHS_EPT[ep].UDPHS_EPTCFG);
	return true;
   82020:	2301      	movs	r3, #1
}
   82022:	4618      	mov	r0, r3
   82024:	371c      	adds	r7, #28
   82026:	46bd      	mov	sp, r7
   82028:	bd90      	pop	{r4, r7, pc}
   8202a:	bf00      	nop
   8202c:	400a4000 	.word	0x400a4000
   82030:	00082361 	.word	0x00082361

00082034 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
   82034:	b580      	push	{r7, lr}
   82036:	b084      	sub	sp, #16
   82038:	af00      	add	r7, sp, #0
   8203a:	4603      	mov	r3, r0
   8203c:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8203e:	79fb      	ldrb	r3, [r7, #7]
   82040:	f003 030f 	and.w	r3, r3, #15
   82044:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   82046:	7bfb      	ldrb	r3, [r7, #15]
   82048:	2b02      	cmp	r3, #2
   8204a:	d828      	bhi.n	8209e <udd_ep_free+0x6a>
		return;
	}
	udd_disable_endpoint(ep_index);
   8204c:	4a16      	ldr	r2, [pc, #88]	; (820a8 <udd_ep_free+0x74>)
   8204e:	7bfb      	ldrb	r3, [r7, #15]
   82050:	015b      	lsls	r3, r3, #5
   82052:	4413      	add	r3, r2
   82054:	f503 7384 	add.w	r3, r3, #264	; 0x108
   82058:	2201      	movs	r2, #1
   8205a:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint_bank(ep_index, 0);
   8205c:	4912      	ldr	r1, [pc, #72]	; (820a8 <udd_ep_free+0x74>)
   8205e:	7bfb      	ldrb	r3, [r7, #15]
   82060:	4811      	ldr	r0, [pc, #68]	; (820a8 <udd_ep_free+0x74>)
   82062:	7bfa      	ldrb	r2, [r7, #15]
   82064:	3208      	adds	r2, #8
   82066:	0152      	lsls	r2, r2, #5
   82068:	4402      	add	r2, r0
   8206a:	6812      	ldr	r2, [r2, #0]
   8206c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   82070:	3308      	adds	r3, #8
   82072:	015b      	lsls	r3, r3, #5
   82074:	440b      	add	r3, r1
   82076:	601a      	str	r2, [r3, #0]
	udd_ep_abort_job(ep);
   82078:	79fb      	ldrb	r3, [r7, #7]
   8207a:	4618      	mov	r0, r3
   8207c:	4b0b      	ldr	r3, [pc, #44]	; (820ac <udd_ep_free+0x78>)
   8207e:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   82080:	7bfb      	ldrb	r3, [r7, #15]
   82082:	1e5a      	subs	r2, r3, #1
   82084:	490a      	ldr	r1, [pc, #40]	; (820b0 <udd_ep_free+0x7c>)
   82086:	4613      	mov	r3, r2
   82088:	005b      	lsls	r3, r3, #1
   8208a:	4413      	add	r3, r2
   8208c:	00db      	lsls	r3, r3, #3
   8208e:	440b      	add	r3, r1
   82090:	f103 0210 	add.w	r2, r3, #16
   82094:	7913      	ldrb	r3, [r2, #4]
   82096:	f36f 0382 	bfc	r3, #2, #1
   8209a:	7113      	strb	r3, [r2, #4]
   8209c:	e000      	b.n	820a0 <udd_ep_free+0x6c>
		return;
   8209e:	bf00      	nop
}
   820a0:	3710      	adds	r7, #16
   820a2:	46bd      	mov	sp, r7
   820a4:	bd80      	pop	{r7, pc}
   820a6:	bf00      	nop
   820a8:	400a4000 	.word	0x400a4000
   820ac:	00082e71 	.word	0x00082e71
   820b0:	20000d04 	.word	0x20000d04

000820b4 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
   820b4:	b480      	push	{r7}
   820b6:	b085      	sub	sp, #20
   820b8:	af00      	add	r7, sp, #0
   820ba:	4603      	mov	r3, r0
   820bc:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   820be:	79fb      	ldrb	r3, [r7, #7]
   820c0:	f003 030f 	and.w	r3, r3, #15
   820c4:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   820c6:	7bfb      	ldrb	r3, [r7, #15]
   820c8:	1e5a      	subs	r2, r3, #1
   820ca:	4613      	mov	r3, r2
   820cc:	005b      	lsls	r3, r3, #1
   820ce:	4413      	add	r3, r2
   820d0:	00db      	lsls	r3, r3, #3
   820d2:	4a10      	ldr	r2, [pc, #64]	; (82114 <udd_ep_is_halted+0x60>)
   820d4:	4413      	add	r3, r2
   820d6:	60bb      	str	r3, [r7, #8]
	return (Is_udd_endpoint_stall_requested(ep_index)
   820d8:	4a0f      	ldr	r2, [pc, #60]	; (82118 <udd_ep_is_halted+0x64>)
   820da:	7bfb      	ldrb	r3, [r7, #15]
   820dc:	015b      	lsls	r3, r3, #5
   820de:	4413      	add	r3, r2
   820e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   820e4:	681b      	ldr	r3, [r3, #0]
   820e6:	f003 0320 	and.w	r3, r3, #32
			|| ptr_job->stall_requested);
   820ea:	2b00      	cmp	r3, #0
   820ec:	d106      	bne.n	820fc <udd_ep_is_halted+0x48>
   820ee:	68bb      	ldr	r3, [r7, #8]
   820f0:	7d1b      	ldrb	r3, [r3, #20]
   820f2:	f003 0304 	and.w	r3, r3, #4
   820f6:	b2db      	uxtb	r3, r3
   820f8:	2b00      	cmp	r3, #0
   820fa:	d001      	beq.n	82100 <udd_ep_is_halted+0x4c>
   820fc:	2301      	movs	r3, #1
   820fe:	e000      	b.n	82102 <udd_ep_is_halted+0x4e>
   82100:	2300      	movs	r3, #0
   82102:	f003 0301 	and.w	r3, r3, #1
   82106:	b2db      	uxtb	r3, r3
}
   82108:	4618      	mov	r0, r3
   8210a:	3714      	adds	r7, #20
   8210c:	46bd      	mov	sp, r7
   8210e:	bc80      	pop	{r7}
   82110:	4770      	bx	lr
   82112:	bf00      	nop
   82114:	20000d04 	.word	0x20000d04
   82118:	400a4000 	.word	0x400a4000

0008211c <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   8211c:	b480      	push	{r7}
   8211e:	b085      	sub	sp, #20
   82120:	af00      	add	r7, sp, #0
   82122:	4603      	mov	r3, r0
   82124:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82126:	79fb      	ldrb	r3, [r7, #7]
   82128:	f003 030f 	and.w	r3, r3, #15
   8212c:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   8212e:	7bfb      	ldrb	r3, [r7, #15]
   82130:	2b02      	cmp	r3, #2
   82132:	d901      	bls.n	82138 <udd_ep_set_halt+0x1c>
		return false;
   82134:	2300      	movs	r3, #0
   82136:	e071      	b.n	8221c <udd_ep_set_halt+0x100>
	}

	ptr_job = &udd_ep_job[ep_index - 1];
   82138:	7bfb      	ldrb	r3, [r7, #15]
   8213a:	1e5a      	subs	r2, r3, #1
   8213c:	4613      	mov	r3, r2
   8213e:	005b      	lsls	r3, r3, #1
   82140:	4413      	add	r3, r2
   82142:	00db      	lsls	r3, r3, #3
   82144:	4a38      	ldr	r2, [pc, #224]	; (82228 <udd_ep_set_halt+0x10c>)
   82146:	4413      	add	r3, r2
   82148:	60bb      	str	r3, [r7, #8]

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   8214a:	4a38      	ldr	r2, [pc, #224]	; (8222c <udd_ep_set_halt+0x110>)
   8214c:	7bfb      	ldrb	r3, [r7, #15]
   8214e:	015b      	lsls	r3, r3, #5
   82150:	4413      	add	r3, r2
   82152:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   82156:	681b      	ldr	r3, [r3, #0]
   82158:	f003 0320 	and.w	r3, r3, #32
   8215c:	2b00      	cmp	r3, #0
   8215e:	d106      	bne.n	8216e <udd_ep_set_halt+0x52>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   82160:	68bb      	ldr	r3, [r7, #8]
   82162:	7d1b      	ldrb	r3, [r3, #20]
   82164:	f003 0304 	and.w	r3, r3, #4
   82168:	b2db      	uxtb	r3, r3
   8216a:	2b00      	cmp	r3, #0
   8216c:	d001      	beq.n	82172 <udd_ep_set_halt+0x56>
		return true; // Already STALL
   8216e:	2301      	movs	r3, #1
   82170:	e054      	b.n	8221c <udd_ep_set_halt+0x100>
	}

	if (ptr_job->busy == true) {
   82172:	68bb      	ldr	r3, [r7, #8]
   82174:	7d1b      	ldrb	r3, [r3, #20]
   82176:	f003 0301 	and.w	r3, r3, #1
   8217a:	b2db      	uxtb	r3, r3
   8217c:	2b00      	cmp	r3, #0
   8217e:	d001      	beq.n	82184 <udd_ep_set_halt+0x68>
		return false; // Job on going, stall impossible
   82180:	2300      	movs	r3, #0
   82182:	e04b      	b.n	8221c <udd_ep_set_halt+0x100>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   82184:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82188:	2b00      	cmp	r3, #0
   8218a:	da25      	bge.n	821d8 <udd_ep_set_halt+0xbc>
   8218c:	4a27      	ldr	r2, [pc, #156]	; (8222c <udd_ep_set_halt+0x110>)
   8218e:	7bfb      	ldrb	r3, [r7, #15]
   82190:	015b      	lsls	r3, r3, #5
   82192:	4413      	add	r3, r2
   82194:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   82198:	681b      	ldr	r3, [r3, #0]
   8219a:	0c9b      	lsrs	r3, r3, #18
   8219c:	f003 0303 	and.w	r3, r3, #3
   821a0:	2b00      	cmp	r3, #0
   821a2:	d019      	beq.n	821d8 <udd_ep_set_halt+0xbc>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
   821a4:	68ba      	ldr	r2, [r7, #8]
   821a6:	7d13      	ldrb	r3, [r2, #20]
   821a8:	f043 0304 	orr.w	r3, r3, #4
   821ac:	7513      	strb	r3, [r2, #20]
			udd_enable_bank_interrupt(ep_index);
   821ae:	4a1f      	ldr	r2, [pc, #124]	; (8222c <udd_ep_set_halt+0x110>)
   821b0:	7bfb      	ldrb	r3, [r7, #15]
   821b2:	3308      	adds	r3, #8
   821b4:	015b      	lsls	r3, r3, #5
   821b6:	4413      	add	r3, r2
   821b8:	3304      	adds	r3, #4
   821ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   821be:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep_index);
   821c0:	491a      	ldr	r1, [pc, #104]	; (8222c <udd_ep_set_halt+0x110>)
   821c2:	4b1a      	ldr	r3, [pc, #104]	; (8222c <udd_ep_set_halt+0x110>)
   821c4:	691a      	ldr	r2, [r3, #16]
   821c6:	7bfb      	ldrb	r3, [r7, #15]
   821c8:	f44f 7080 	mov.w	r0, #256	; 0x100
   821cc:	fa00 f303 	lsl.w	r3, r0, r3
   821d0:	4313      	orrs	r3, r2
   821d2:	610b      	str	r3, [r1, #16]
			dbg_print("<reqHalt%x> ", ep);
			return true;
   821d4:	2301      	movs	r3, #1
   821d6:	e021      	b.n	8221c <udd_ep_set_halt+0x100>
	}

	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   821d8:	4914      	ldr	r1, [pc, #80]	; (8222c <udd_ep_set_halt+0x110>)
   821da:	7bfb      	ldrb	r3, [r7, #15]
   821dc:	4813      	ldr	r0, [pc, #76]	; (8222c <udd_ep_set_halt+0x110>)
   821de:	7bfa      	ldrb	r2, [r7, #15]
   821e0:	0152      	lsls	r2, r2, #5
   821e2:	4402      	add	r2, r0
   821e4:	f502 7284 	add.w	r2, r2, #264	; 0x108
   821e8:	6812      	ldr	r2, [r2, #0]
   821ea:	f022 0202 	bic.w	r2, r2, #2
   821ee:	015b      	lsls	r3, r3, #5
   821f0:	440b      	add	r3, r1
   821f2:	f503 7384 	add.w	r3, r3, #264	; 0x108
   821f6:	601a      	str	r2, [r3, #0]
	udd_ack_stall(ep_index);
   821f8:	4a0c      	ldr	r2, [pc, #48]	; (8222c <udd_ep_set_halt+0x110>)
   821fa:	7bfb      	ldrb	r3, [r7, #15]
   821fc:	015b      	lsls	r3, r3, #5
   821fe:	4413      	add	r3, r2
   82200:	f503 738c 	add.w	r3, r3, #280	; 0x118
   82204:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   82208:	601a      	str	r2, [r3, #0]
	udd_enable_stall_handshake(ep_index);
   8220a:	4a08      	ldr	r2, [pc, #32]	; (8222c <udd_ep_set_halt+0x110>)
   8220c:	7bfb      	ldrb	r3, [r7, #15]
   8220e:	015b      	lsls	r3, r3, #5
   82210:	4413      	add	r3, r2
   82212:	f503 738a 	add.w	r3, r3, #276	; 0x114
   82216:	2220      	movs	r2, #32
   82218:	601a      	str	r2, [r3, #0]
	dbg_print("<Halt%x> ", ep);
	return true;
   8221a:	2301      	movs	r3, #1
}
   8221c:	4618      	mov	r0, r3
   8221e:	3714      	adds	r7, #20
   82220:	46bd      	mov	sp, r7
   82222:	bc80      	pop	{r7}
   82224:	4770      	bx	lr
   82226:	bf00      	nop
   82228:	20000d04 	.word	0x20000d04
   8222c:	400a4000 	.word	0x400a4000

00082230 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   82230:	b580      	push	{r7, lr}
   82232:	b084      	sub	sp, #16
   82234:	af00      	add	r7, sp, #0
   82236:	4603      	mov	r3, r0
   82238:	71fb      	strb	r3, [r7, #7]
	bool b_stall_cleared = false;
   8223a:	2300      	movs	r3, #0
   8223c:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   8223e:	79fb      	ldrb	r3, [r7, #7]
   82240:	f003 030f 	and.w	r3, r3, #15
   82244:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
   82246:	79fb      	ldrb	r3, [r7, #7]
   82248:	2b02      	cmp	r3, #2
   8224a:	d901      	bls.n	82250 <udd_ep_clear_halt+0x20>
		return false;
   8224c:	2300      	movs	r3, #0
   8224e:	e07e      	b.n	8234e <udd_ep_clear_halt+0x11e>
	ptr_job = &udd_ep_job[ep - 1];
   82250:	79fb      	ldrb	r3, [r7, #7]
   82252:	1e5a      	subs	r2, r3, #1
   82254:	4613      	mov	r3, r2
   82256:	005b      	lsls	r3, r3, #1
   82258:	4413      	add	r3, r2
   8225a:	00db      	lsls	r3, r3, #3
   8225c:	4a3e      	ldr	r2, [pc, #248]	; (82358 <udd_ep_clear_halt+0x128>)
   8225e:	4413      	add	r3, r2
   82260:	60bb      	str	r3, [r7, #8]

	if (ptr_job->stall_requested) {
   82262:	68bb      	ldr	r3, [r7, #8]
   82264:	7d1b      	ldrb	r3, [r3, #20]
   82266:	f003 0304 	and.w	r3, r3, #4
   8226a:	b2db      	uxtb	r3, r3
   8226c:	2b00      	cmp	r3, #0
   8226e:	d01a      	beq.n	822a6 <udd_ep_clear_halt+0x76>
		// Endpoint stall has been requested but not done
		// Remove stall request
		dbg_print("<unWHalt%x> ", ep);
		ptr_job->stall_requested = false;
   82270:	68ba      	ldr	r2, [r7, #8]
   82272:	7d13      	ldrb	r3, [r2, #20]
   82274:	f36f 0382 	bfc	r3, #2, #1
   82278:	7513      	strb	r3, [r2, #20]
		udd_disable_bank_interrupt(ep);
   8227a:	4a38      	ldr	r2, [pc, #224]	; (8235c <udd_ep_clear_halt+0x12c>)
   8227c:	79fb      	ldrb	r3, [r7, #7]
   8227e:	015b      	lsls	r3, r3, #5
   82280:	4413      	add	r3, r2
   82282:	f503 7384 	add.w	r3, r3, #264	; 0x108
   82286:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   8228a:	601a      	str	r2, [r3, #0]
		udd_disable_endpoint_interrupt(ep);
   8228c:	4933      	ldr	r1, [pc, #204]	; (8235c <udd_ep_clear_halt+0x12c>)
   8228e:	4b33      	ldr	r3, [pc, #204]	; (8235c <udd_ep_clear_halt+0x12c>)
   82290:	691a      	ldr	r2, [r3, #16]
   82292:	79fb      	ldrb	r3, [r7, #7]
   82294:	f44f 7080 	mov.w	r0, #256	; 0x100
   82298:	fa00 f303 	lsl.w	r3, r0, r3
   8229c:	43db      	mvns	r3, r3
   8229e:	4013      	ands	r3, r2
   822a0:	610b      	str	r3, [r1, #16]
		b_stall_cleared = true;
   822a2:	2301      	movs	r3, #1
   822a4:	73fb      	strb	r3, [r7, #15]
	}
	if (Is_udd_endpoint_stall_requested(ep)) {
   822a6:	4a2d      	ldr	r2, [pc, #180]	; (8235c <udd_ep_clear_halt+0x12c>)
   822a8:	79fb      	ldrb	r3, [r7, #7]
   822aa:	015b      	lsls	r3, r3, #5
   822ac:	4413      	add	r3, r2
   822ae:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   822b2:	681b      	ldr	r3, [r3, #0]
   822b4:	f003 0320 	and.w	r3, r3, #32
   822b8:	2b00      	cmp	r3, #0
   822ba:	d035      	beq.n	82328 <udd_ep_clear_halt+0xf8>
		dbg_print("<unHalt%x> ", ep);
		if (Is_udd_stall(ep)) {
   822bc:	4a27      	ldr	r2, [pc, #156]	; (8235c <udd_ep_clear_halt+0x12c>)
   822be:	79fb      	ldrb	r3, [r7, #7]
   822c0:	015b      	lsls	r3, r3, #5
   822c2:	4413      	add	r3, r2
   822c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   822c8:	681b      	ldr	r3, [r3, #0]
   822ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   822ce:	2b00      	cmp	r3, #0
   822d0:	d010      	beq.n	822f4 <udd_ep_clear_halt+0xc4>
			udd_ack_stall(ep);
   822d2:	4a22      	ldr	r2, [pc, #136]	; (8235c <udd_ep_clear_halt+0x12c>)
   822d4:	79fb      	ldrb	r3, [r7, #7]
   822d6:	015b      	lsls	r3, r3, #5
   822d8:	4413      	add	r3, r2
   822da:	f503 738c 	add.w	r3, r3, #280	; 0x118
   822de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   822e2:	601a      	str	r2, [r3, #0]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
   822e4:	4a1d      	ldr	r2, [pc, #116]	; (8235c <udd_ep_clear_halt+0x12c>)
   822e6:	79fb      	ldrb	r3, [r7, #7]
   822e8:	015b      	lsls	r3, r3, #5
   822ea:	4413      	add	r3, r2
   822ec:	f503 738c 	add.w	r3, r3, #280	; 0x118
   822f0:	2240      	movs	r2, #64	; 0x40
   822f2:	601a      	str	r2, [r3, #0]
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
   822f4:	4a19      	ldr	r2, [pc, #100]	; (8235c <udd_ep_clear_halt+0x12c>)
   822f6:	79fb      	ldrb	r3, [r7, #7]
   822f8:	015b      	lsls	r3, r3, #5
   822fa:	4413      	add	r3, r2
   822fc:	f503 738c 	add.w	r3, r3, #280	; 0x118
   82300:	2220      	movs	r2, #32
   82302:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_bank_autoswitch(ep);
   82304:	4915      	ldr	r1, [pc, #84]	; (8235c <udd_ep_clear_halt+0x12c>)
   82306:	79fb      	ldrb	r3, [r7, #7]
   82308:	4814      	ldr	r0, [pc, #80]	; (8235c <udd_ep_clear_halt+0x12c>)
   8230a:	79fa      	ldrb	r2, [r7, #7]
   8230c:	3208      	adds	r2, #8
   8230e:	0152      	lsls	r2, r2, #5
   82310:	4402      	add	r2, r0
   82312:	3204      	adds	r2, #4
   82314:	6812      	ldr	r2, [r2, #0]
   82316:	f042 0202 	orr.w	r2, r2, #2
   8231a:	3308      	adds	r3, #8
   8231c:	015b      	lsls	r3, r3, #5
   8231e:	440b      	add	r3, r1
   82320:	3304      	adds	r3, #4
   82322:	601a      	str	r2, [r3, #0]
		b_stall_cleared = true;
   82324:	2301      	movs	r3, #1
   82326:	73fb      	strb	r3, [r7, #15]
	}
	if (b_stall_cleared) {
   82328:	7bfb      	ldrb	r3, [r7, #15]
   8232a:	2b00      	cmp	r3, #0
   8232c:	d00e      	beq.n	8234c <udd_ep_clear_halt+0x11c>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   8232e:	68bb      	ldr	r3, [r7, #8]
   82330:	7d1b      	ldrb	r3, [r3, #20]
   82332:	f003 0301 	and.w	r3, r3, #1
   82336:	b2db      	uxtb	r3, r3
   82338:	2b00      	cmp	r3, #0
   8233a:	d007      	beq.n	8234c <udd_ep_clear_halt+0x11c>
			ptr_job->busy = false;
   8233c:	68ba      	ldr	r2, [r7, #8]
   8233e:	7d13      	ldrb	r3, [r2, #20]
   82340:	f36f 0300 	bfc	r3, #0, #1
   82344:	7513      	strb	r3, [r2, #20]
			ptr_job->call_nohalt();
   82346:	68bb      	ldr	r3, [r7, #8]
   82348:	681b      	ldr	r3, [r3, #0]
   8234a:	4798      	blx	r3
		}
	}
	return true;
   8234c:	2301      	movs	r3, #1
}
   8234e:	4618      	mov	r0, r3
   82350:	3710      	adds	r7, #16
   82352:	46bd      	mov	sp, r7
   82354:	bd80      	pop	{r7, pc}
   82356:	bf00      	nop
   82358:	20000d04 	.word	0x20000d04
   8235c:	400a4000 	.word	0x400a4000

00082360 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   82360:	b580      	push	{r7, lr}
   82362:	b086      	sub	sp, #24
   82364:	af00      	add	r7, sp, #0
   82366:	60ba      	str	r2, [r7, #8]
   82368:	607b      	str	r3, [r7, #4]
   8236a:	4603      	mov	r3, r0
   8236c:	73fb      	strb	r3, [r7, #15]
   8236e:	460b      	mov	r3, r1
   82370:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   82372:	7bfb      	ldrb	r3, [r7, #15]
   82374:	f003 030f 	and.w	r3, r3, #15
   82378:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
   8237a:	7bfb      	ldrb	r3, [r7, #15]
   8237c:	2b02      	cmp	r3, #2
   8237e:	d901      	bls.n	82384 <udd_ep_run+0x24>
		return false;
   82380:	2300      	movs	r3, #0
   82382:	e064      	b.n	8244e <udd_ep_run+0xee>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   82384:	7bfb      	ldrb	r3, [r7, #15]
   82386:	1e5a      	subs	r2, r3, #1
   82388:	4613      	mov	r3, r2
   8238a:	005b      	lsls	r3, r3, #1
   8238c:	4413      	add	r3, r2
   8238e:	00db      	lsls	r3, r3, #3
   82390:	4a31      	ldr	r2, [pc, #196]	; (82458 <udd_ep_run+0xf8>)
   82392:	4413      	add	r3, r2
   82394:	617b      	str	r3, [r7, #20]

	if ((!Is_udd_endpoint_enabled(ep))
   82396:	4a31      	ldr	r2, [pc, #196]	; (8245c <udd_ep_run+0xfc>)
   82398:	7bfb      	ldrb	r3, [r7, #15]
   8239a:	015b      	lsls	r3, r3, #5
   8239c:	4413      	add	r3, r2
   8239e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   823a2:	681b      	ldr	r3, [r3, #0]
   823a4:	f003 0301 	and.w	r3, r3, #1
   823a8:	2b00      	cmp	r3, #0
   823aa:	d011      	beq.n	823d0 <udd_ep_run+0x70>
			|| Is_udd_endpoint_stall_requested(ep)
   823ac:	4a2b      	ldr	r2, [pc, #172]	; (8245c <udd_ep_run+0xfc>)
   823ae:	7bfb      	ldrb	r3, [r7, #15]
   823b0:	015b      	lsls	r3, r3, #5
   823b2:	4413      	add	r3, r2
   823b4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   823b8:	681b      	ldr	r3, [r3, #0]
   823ba:	f003 0320 	and.w	r3, r3, #32
   823be:	2b00      	cmp	r3, #0
   823c0:	d106      	bne.n	823d0 <udd_ep_run+0x70>
			|| ptr_job->stall_requested) {
   823c2:	697b      	ldr	r3, [r7, #20]
   823c4:	7d1b      	ldrb	r3, [r3, #20]
   823c6:	f003 0304 	and.w	r3, r3, #4
   823ca:	b2db      	uxtb	r3, r3
   823cc:	2b00      	cmp	r3, #0
   823ce:	d001      	beq.n	823d4 <udd_ep_run+0x74>
		return false; // Endpoint is halted
   823d0:	2300      	movs	r3, #0
   823d2:	e03c      	b.n	8244e <udd_ep_run+0xee>
	}

	flags = cpu_irq_save();
   823d4:	4b22      	ldr	r3, [pc, #136]	; (82460 <udd_ep_run+0x100>)
   823d6:	4798      	blx	r3
   823d8:	6138      	str	r0, [r7, #16]
	if (ptr_job->busy == true) {
   823da:	697b      	ldr	r3, [r7, #20]
   823dc:	7d1b      	ldrb	r3, [r3, #20]
   823de:	f003 0301 	and.w	r3, r3, #1
   823e2:	b2db      	uxtb	r3, r3
   823e4:	2b00      	cmp	r3, #0
   823e6:	d004      	beq.n	823f2 <udd_ep_run+0x92>
		cpu_irq_restore(flags);
   823e8:	6938      	ldr	r0, [r7, #16]
   823ea:	4b1e      	ldr	r3, [pc, #120]	; (82464 <udd_ep_run+0x104>)
   823ec:	4798      	blx	r3
		return false; // Job already on going
   823ee:	2300      	movs	r3, #0
   823f0:	e02d      	b.n	8244e <udd_ep_run+0xee>
	}
	ptr_job->busy = true;
   823f2:	697a      	ldr	r2, [r7, #20]
   823f4:	7d13      	ldrb	r3, [r2, #20]
   823f6:	f043 0301 	orr.w	r3, r3, #1
   823fa:	7513      	strb	r3, [r2, #20]
	cpu_irq_restore(flags);
   823fc:	6938      	ldr	r0, [r7, #16]
   823fe:	4b19      	ldr	r3, [pc, #100]	; (82464 <udd_ep_run+0x104>)
   82400:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   82402:	697b      	ldr	r3, [r7, #20]
   82404:	68ba      	ldr	r2, [r7, #8]
   82406:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
   82408:	697b      	ldr	r3, [r7, #20]
   8240a:	687a      	ldr	r2, [r7, #4]
   8240c:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
   8240e:	697b      	ldr	r3, [r7, #20]
   82410:	2200      	movs	r2, #0
   82412:	60da      	str	r2, [r3, #12]
	ptr_job->buf_load = 0;
   82414:	697b      	ldr	r3, [r7, #20]
   82416:	2200      	movs	r2, #0
   82418:	611a      	str	r2, [r3, #16]
	ptr_job->call_trans = callback;
   8241a:	697b      	ldr	r3, [r7, #20]
   8241c:	6a3a      	ldr	r2, [r7, #32]
   8241e:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   82420:	7bbb      	ldrb	r3, [r7, #14]
   82422:	2b00      	cmp	r3, #0
   82424:	d102      	bne.n	8242c <udd_ep_run+0xcc>
   82426:	687b      	ldr	r3, [r7, #4]
   82428:	2b00      	cmp	r3, #0
   8242a:	d101      	bne.n	82430 <udd_ep_run+0xd0>
   8242c:	2301      	movs	r3, #1
   8242e:	e000      	b.n	82432 <udd_ep_run+0xd2>
   82430:	2300      	movs	r3, #0
   82432:	b2db      	uxtb	r3, r3
   82434:	f003 0301 	and.w	r3, r3, #1
   82438:	b2d9      	uxtb	r1, r3
   8243a:	697a      	ldr	r2, [r7, #20]
   8243c:	7d13      	ldrb	r3, [r2, #20]
   8243e:	f361 0341 	bfi	r3, r1, #1, #1
   82442:	7513      	strb	r3, [r2, #20]

	// Request first DMA transfer
	//dbg_print("runDMA%d\n\r", ep);
	udd_ep_trans_done(ep);
   82444:	7bfb      	ldrb	r3, [r7, #15]
   82446:	4618      	mov	r0, r3
   82448:	4b07      	ldr	r3, [pc, #28]	; (82468 <udd_ep_run+0x108>)
   8244a:	4798      	blx	r3
	return true;
   8244c:	2301      	movs	r3, #1
}
   8244e:	4618      	mov	r0, r3
   82450:	3718      	adds	r7, #24
   82452:	46bd      	mov	sp, r7
   82454:	bd80      	pop	{r7, pc}
   82456:	bf00      	nop
   82458:	20000d04 	.word	0x20000d04
   8245c:	400a4000 	.word	0x400a4000
   82460:	00081771 	.word	0x00081771
   82464:	000817c9 	.word	0x000817c9
   82468:	00082f1d 	.word	0x00082f1d

0008246c <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
   8246c:	b580      	push	{r7, lr}
   8246e:	b084      	sub	sp, #16
   82470:	af00      	add	r7, sp, #0
   82472:	4603      	mov	r3, r0
   82474:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82476:	79fb      	ldrb	r3, [r7, #7]
   82478:	f003 030f 	and.w	r3, r3, #15
   8247c:	73fb      	strb	r3, [r7, #15]
	// Stop DMA transfer
	udd_endpoint_dma_set_control(ep_index, 0);
   8247e:	7bfb      	ldrb	r3, [r7, #15]
   82480:	011a      	lsls	r2, r3, #4
   82482:	4b19      	ldr	r3, [pc, #100]	; (824e8 <udd_ep_abort+0x7c>)
   82484:	4413      	add	r3, r2
   82486:	2200      	movs	r2, #0
   82488:	609a      	str	r2, [r3, #8]
	// Kill banks for IN
	if (ep & USB_EP_DIR_IN) {
   8248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8248e:	2b00      	cmp	r3, #0
   82490:	da21      	bge.n	824d6 <udd_ep_abort+0x6a>
		for(;udd_nb_busy_bank(ep_index);) {
   82492:	e014      	b.n	824be <udd_ep_abort+0x52>
			udd_kill_last_in_bank(ep_index);
   82494:	4a15      	ldr	r2, [pc, #84]	; (824ec <udd_ep_abort+0x80>)
   82496:	7bfb      	ldrb	r3, [r7, #15]
   82498:	015b      	lsls	r3, r3, #5
   8249a:	4413      	add	r3, r2
   8249c:	f503 738a 	add.w	r3, r3, #276	; 0x114
   824a0:	f44f 7200 	mov.w	r2, #512	; 0x200
   824a4:	601a      	str	r2, [r3, #0]
			while(Is_udd_kill_last(ep_index));
   824a6:	bf00      	nop
   824a8:	4a10      	ldr	r2, [pc, #64]	; (824ec <udd_ep_abort+0x80>)
   824aa:	7bfb      	ldrb	r3, [r7, #15]
   824ac:	015b      	lsls	r3, r3, #5
   824ae:	4413      	add	r3, r2
   824b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   824b4:	681b      	ldr	r3, [r3, #0]
   824b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
   824ba:	2b00      	cmp	r3, #0
   824bc:	d1f4      	bne.n	824a8 <udd_ep_abort+0x3c>
		for(;udd_nb_busy_bank(ep_index);) {
   824be:	4a0b      	ldr	r2, [pc, #44]	; (824ec <udd_ep_abort+0x80>)
   824c0:	7bfb      	ldrb	r3, [r7, #15]
   824c2:	015b      	lsls	r3, r3, #5
   824c4:	4413      	add	r3, r2
   824c6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   824ca:	681b      	ldr	r3, [r3, #0]
   824cc:	0c9b      	lsrs	r3, r3, #18
   824ce:	f003 0303 	and.w	r3, r3, #3
   824d2:	2b00      	cmp	r3, #0
   824d4:	d1de      	bne.n	82494 <udd_ep_abort+0x28>
		}
	}
	udd_ep_abort_job(ep);
   824d6:	79fb      	ldrb	r3, [r7, #7]
   824d8:	4618      	mov	r0, r3
   824da:	4b05      	ldr	r3, [pc, #20]	; (824f0 <udd_ep_abort+0x84>)
   824dc:	4798      	blx	r3
}
   824de:	bf00      	nop
   824e0:	3710      	adds	r7, #16
   824e2:	46bd      	mov	sp, r7
   824e4:	bd80      	pop	{r7, pc}
   824e6:	bf00      	nop
   824e8:	400a4300 	.word	0x400a4300
   824ec:	400a4000 	.word	0x400a4000
   824f0:	00082e71 	.word	0x00082e71

000824f4 <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
   824f4:	b480      	push	{r7}
   824f6:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   824f8:	4a0a      	ldr	r2, [pc, #40]	; (82524 <udd_test_mode_j+0x30>)
   824fa:	4b0a      	ldr	r3, [pc, #40]	; (82524 <udd_test_mode_j+0x30>)
   824fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   82500:	f023 0303 	bic.w	r3, r3, #3
   82504:	f043 0302 	orr.w	r3, r3, #2
   82508:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   8250c:	4a05      	ldr	r2, [pc, #20]	; (82524 <udd_test_mode_j+0x30>)
   8250e:	4b05      	ldr	r3, [pc, #20]	; (82524 <udd_test_mode_j+0x30>)
   82510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   82514:	f043 0304 	orr.w	r3, r3, #4
   82518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   8251c:	bf00      	nop
   8251e:	46bd      	mov	sp, r7
   82520:	bc80      	pop	{r7}
   82522:	4770      	bx	lr
   82524:	400a4000 	.word	0x400a4000

00082528 <udd_test_mode_k>:


void udd_test_mode_k(void)
{
   82528:	b480      	push	{r7}
   8252a:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   8252c:	4a0a      	ldr	r2, [pc, #40]	; (82558 <udd_test_mode_k+0x30>)
   8252e:	4b0a      	ldr	r3, [pc, #40]	; (82558 <udd_test_mode_k+0x30>)
   82530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   82534:	f023 0303 	bic.w	r3, r3, #3
   82538:	f043 0302 	orr.w	r3, r3, #2
   8253c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   82540:	4a05      	ldr	r2, [pc, #20]	; (82558 <udd_test_mode_k+0x30>)
   82542:	4b05      	ldr	r3, [pc, #20]	; (82558 <udd_test_mode_k+0x30>)
   82544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   82548:	f043 0308 	orr.w	r3, r3, #8
   8254c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   82550:	bf00      	nop
   82552:	46bd      	mov	sp, r7
   82554:	bc80      	pop	{r7}
   82556:	4770      	bx	lr
   82558:	400a4000 	.word	0x400a4000

0008255c <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
   8255c:	b480      	push	{r7}
   8255e:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   82560:	4a06      	ldr	r2, [pc, #24]	; (8257c <udd_test_mode_se0_nak+0x20>)
   82562:	4b06      	ldr	r3, [pc, #24]	; (8257c <udd_test_mode_se0_nak+0x20>)
   82564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   82568:	f023 0303 	bic.w	r3, r3, #3
   8256c:	f043 0302 	orr.w	r3, r3, #2
   82570:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   82574:	bf00      	nop
   82576:	46bd      	mov	sp, r7
   82578:	bc80      	pop	{r7}
   8257a:	4770      	bx	lr
   8257c:	400a4000 	.word	0x400a4000

00082580 <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
   82580:	b4b0      	push	{r4, r5, r7}
   82582:	b093      	sub	sp, #76	; 0x4c
   82584:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   82586:	4b2e      	ldr	r3, [pc, #184]	; (82640 <udd_test_mode_packet+0xc0>)
   82588:	1d3c      	adds	r4, r7, #4
   8258a:	461d      	mov	r5, r3
   8258c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8258e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82598:	e895 0003 	ldmia.w	r5, {r0, r1}
   8259c:	6020      	str	r0, [r4, #0]
   8259e:	3404      	adds	r4, #4
   825a0:	7021      	strb	r1, [r4, #0]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   825a2:	4b28      	ldr	r3, [pc, #160]	; (82644 <udd_test_mode_packet+0xc4>)
   825a4:	2201      	movs	r2, #1
   825a6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   825aa:	4a26      	ldr	r2, [pc, #152]	; (82644 <udd_test_mode_packet+0xc4>)
   825ac:	4b25      	ldr	r3, [pc, #148]	; (82644 <udd_test_mode_packet+0xc4>)
   825ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   825b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   825b6:	f023 0303 	bic.w	r3, r3, #3
   825ba:	f043 036b 	orr.w	r3, r3, #107	; 0x6b
   825be:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_EP_TYPE_BULK, // Type: bulk
			1, // dir: IN
			64, //Size
			1, // Bank Number
			0); // NB Trans (not used for bulk ept)
	udd_enable_endpoint(0);
   825c2:	4b20      	ldr	r3, [pc, #128]	; (82644 <udd_test_mode_packet+0xc4>)
   825c4:	2201      	movs	r2, #1
   825c6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	udd_enable_hs_test_mode();
   825ca:	4a1e      	ldr	r2, [pc, #120]	; (82644 <udd_test_mode_packet+0xc4>)
   825cc:	4b1d      	ldr	r3, [pc, #116]	; (82644 <udd_test_mode_packet+0xc4>)
   825ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   825d2:	f023 0303 	bic.w	r3, r3, #3
   825d6:	f043 0302 	orr.w	r3, r3, #2
   825da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   825de:	4a19      	ldr	r2, [pc, #100]	; (82644 <udd_test_mode_packet+0xc4>)
   825e0:	4b18      	ldr	r3, [pc, #96]	; (82644 <udd_test_mode_packet+0xc4>)
   825e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   825e6:	f043 0310 	orr.w	r3, r3, #16
   825ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   825ee:	4b16      	ldr	r3, [pc, #88]	; (82648 <udd_test_mode_packet+0xc8>)
   825f0:	643b      	str	r3, [r7, #64]	; 0x40
	ptr_src = test_packet;
   825f2:	1d3b      	adds	r3, r7, #4
   825f4:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (i = 0; i < sizeof(test_packet); i++) {
   825f6:	2300      	movs	r3, #0
   825f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   825fc:	e00c      	b.n	82618 <udd_test_mode_packet+0x98>
		*ptr_dest++ = *ptr_src++;
   825fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   82600:	1c5a      	adds	r2, r3, #1
   82602:	643a      	str	r2, [r7, #64]	; 0x40
   82604:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   82606:	1c51      	adds	r1, r2, #1
   82608:	63f9      	str	r1, [r7, #60]	; 0x3c
   8260a:	7812      	ldrb	r2, [r2, #0]
   8260c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   8260e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   82612:	3301      	adds	r3, #1
   82614:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   82618:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   8261c:	2b34      	cmp	r3, #52	; 0x34
   8261e:	d9ee      	bls.n	825fe <udd_test_mode_packet+0x7e>
	}
	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   82620:	4b08      	ldr	r3, [pc, #32]	; (82644 <udd_test_mode_packet+0xc4>)
   82622:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82626:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   8262a:	4b06      	ldr	r3, [pc, #24]	; (82644 <udd_test_mode_packet+0xc4>)
   8262c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   82630:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   82634:	bf00      	nop
   82636:	374c      	adds	r7, #76	; 0x4c
   82638:	46bd      	mov	sp, r7
   8263a:	bcb0      	pop	{r4, r5, r7}
   8263c:	4770      	bx	lr
   8263e:	bf00      	nop
   82640:	0008574c 	.word	0x0008574c
   82644:	400a4000 	.word	0x400a4000
   82648:	20180000 	.word	0x20180000

0008264c <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
   8264c:	b580      	push	{r7, lr}
   8264e:	b082      	sub	sp, #8
   82650:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   82652:	4a1b      	ldr	r2, [pc, #108]	; (826c0 <udd_reset_ep_ctrl+0x74>)
   82654:	4b1a      	ldr	r3, [pc, #104]	; (826c0 <udd_reset_ep_ctrl+0x74>)
   82656:	681b      	ldr	r3, [r3, #0]
   82658:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8265c:	6013      	str	r3, [r2, #0]
	udd_enable_address();
   8265e:	4a18      	ldr	r2, [pc, #96]	; (826c0 <udd_reset_ep_ctrl+0x74>)
   82660:	4b17      	ldr	r3, [pc, #92]	; (826c0 <udd_reset_ep_ctrl+0x74>)
   82662:	681b      	ldr	r3, [r3, #0]
   82664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82668:	6013      	str	r3, [r2, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   8266a:	4a15      	ldr	r2, [pc, #84]	; (826c0 <udd_reset_ep_ctrl+0x74>)
   8266c:	4b14      	ldr	r3, [pc, #80]	; (826c0 <udd_reset_ep_ctrl+0x74>)
   8266e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   82672:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   82676:	f023 0303 	bic.w	r3, r3, #3
   8267a:	f043 0343 	orr.w	r3, r3, #67	; 0x43
   8267e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_DEVICE_EP_CTRL_SIZE,
			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
			0);

	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
	udd_enable_endpoint(0);
   82682:	4b0f      	ldr	r3, [pc, #60]	; (826c0 <udd_reset_ep_ctrl+0x74>)
   82684:	2201      	movs	r2, #1
   82686:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	flags = cpu_irq_save();
   8268a:	4b0e      	ldr	r3, [pc, #56]	; (826c4 <udd_reset_ep_ctrl+0x78>)
   8268c:	4798      	blx	r3
   8268e:	6078      	str	r0, [r7, #4]
	udd_enable_setup_received_interrupt(0);
   82690:	4b0b      	ldr	r3, [pc, #44]	; (826c0 <udd_reset_ep_ctrl+0x74>)
   82692:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82696:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   8269a:	4b09      	ldr	r3, [pc, #36]	; (826c0 <udd_reset_ep_ctrl+0x74>)
   8269c:	f44f 7200 	mov.w	r2, #512	; 0x200
   826a0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   826a4:	4a06      	ldr	r2, [pc, #24]	; (826c0 <udd_reset_ep_ctrl+0x74>)
   826a6:	4b06      	ldr	r3, [pc, #24]	; (826c0 <udd_reset_ep_ctrl+0x74>)
   826a8:	691b      	ldr	r3, [r3, #16]
   826aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   826ae:	6113      	str	r3, [r2, #16]
	cpu_irq_restore(flags);
   826b0:	6878      	ldr	r0, [r7, #4]
   826b2:	4b05      	ldr	r3, [pc, #20]	; (826c8 <udd_reset_ep_ctrl+0x7c>)
   826b4:	4798      	blx	r3
}
   826b6:	bf00      	nop
   826b8:	3708      	adds	r7, #8
   826ba:	46bd      	mov	sp, r7
   826bc:	bd80      	pop	{r7, pc}
   826be:	bf00      	nop
   826c0:	400a4000 	.word	0x400a4000
   826c4:	00081771 	.word	0x00081771
   826c8:	000817c9 	.word	0x000817c9

000826cc <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
   826cc:	b580      	push	{r7, lr}
   826ce:	b082      	sub	sp, #8
   826d0:	af00      	add	r7, sp, #0
	irqflags_t flags;

	dbg_print("ctlInit ");

	flags = cpu_irq_save();
   826d2:	4b10      	ldr	r3, [pc, #64]	; (82714 <udd_ctrl_init+0x48>)
   826d4:	4798      	blx	r3
   826d6:	6078      	str	r0, [r7, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   826d8:	4b0f      	ldr	r3, [pc, #60]	; (82718 <udd_ctrl_init+0x4c>)
   826da:	f44f 6280 	mov.w	r2, #1024	; 0x400
   826de:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   826e2:	6878      	ldr	r0, [r7, #4]
   826e4:	4b0d      	ldr	r3, [pc, #52]	; (8271c <udd_ctrl_init+0x50>)
   826e6:	4798      	blx	r3

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   826e8:	4b0b      	ldr	r3, [pc, #44]	; (82718 <udd_ctrl_init+0x4c>)
   826ea:	f44f 7200 	mov.w	r2, #512	; 0x200
   826ee:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   826f2:	4b0b      	ldr	r3, [pc, #44]	; (82720 <udd_ctrl_init+0x54>)
   826f4:	2200      	movs	r2, #0
   826f6:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   826f8:	4b09      	ldr	r3, [pc, #36]	; (82720 <udd_ctrl_init+0x54>)
   826fa:	2200      	movs	r2, #0
   826fc:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
   826fe:	4b08      	ldr	r3, [pc, #32]	; (82720 <udd_ctrl_init+0x54>)
   82700:	2200      	movs	r2, #0
   82702:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   82704:	4b07      	ldr	r3, [pc, #28]	; (82724 <udd_ctrl_init+0x58>)
   82706:	2200      	movs	r2, #0
   82708:	701a      	strb	r2, [r3, #0]
}
   8270a:	bf00      	nop
   8270c:	3708      	adds	r7, #8
   8270e:	46bd      	mov	sp, r7
   82710:	bd80      	pop	{r7, pc}
   82712:	bf00      	nop
   82714:	00081771 	.word	0x00081771
   82718:	400a4000 	.word	0x400a4000
   8271c:	000817c9 	.word	0x000817c9
   82720:	20000d54 	.word	0x20000d54
   82724:	20000cfd 	.word	0x20000cfd

00082728 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
   82728:	b580      	push	{r7, lr}
   8272a:	b084      	sub	sp, #16
   8272c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   8272e:	4b40      	ldr	r3, [pc, #256]	; (82830 <udd_ctrl_setup_received+0x108>)
   82730:	781b      	ldrb	r3, [r3, #0]
   82732:	2b00      	cmp	r3, #0
   82734:	d003      	beq.n	8273e <udd_ctrl_setup_received+0x16>
		dbg_print("sErr ");
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
   82736:	4b3f      	ldr	r3, [pc, #252]	; (82834 <udd_ctrl_setup_received+0x10c>)
   82738:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   8273a:	4b3f      	ldr	r3, [pc, #252]	; (82838 <udd_ctrl_setup_received+0x110>)
   8273c:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   8273e:	4b3f      	ldr	r3, [pc, #252]	; (8283c <udd_ctrl_setup_received+0x114>)
   82740:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   82744:	0d1b      	lsrs	r3, r3, #20
   82746:	f3c3 030a 	ubfx	r3, r3, #0, #11
   8274a:	2b08      	cmp	r3, #8
   8274c:	d007      	beq.n	8275e <udd_ctrl_setup_received+0x36>
		dbg_print("cntErr ");
		udd_ctrl_stall_data();
   8274e:	4b3c      	ldr	r3, [pc, #240]	; (82840 <udd_ctrl_setup_received+0x118>)
   82750:	4798      	blx	r3
		udd_ack_setup_received(0);
   82752:	4b3a      	ldr	r3, [pc, #232]	; (8283c <udd_ctrl_setup_received+0x114>)
   82754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82758:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   8275c:	e064      	b.n	82828 <udd_ctrl_setup_received+0x100>
	}

	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8275e:	4b39      	ldr	r3, [pc, #228]	; (82844 <udd_ctrl_setup_received+0x11c>)
   82760:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
   82762:	2300      	movs	r3, #0
   82764:	73fb      	strb	r3, [r7, #15]
   82766:	e00a      	b.n	8277e <udd_ctrl_setup_received+0x56>
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   82768:	7bfb      	ldrb	r3, [r7, #15]
   8276a:	4a37      	ldr	r2, [pc, #220]	; (82848 <udd_ctrl_setup_received+0x120>)
   8276c:	441a      	add	r2, r3
   8276e:	68bb      	ldr	r3, [r7, #8]
   82770:	1c59      	adds	r1, r3, #1
   82772:	60b9      	str	r1, [r7, #8]
   82774:	781b      	ldrb	r3, [r3, #0]
   82776:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < 8; i++) {
   82778:	7bfb      	ldrb	r3, [r7, #15]
   8277a:	3301      	adds	r3, #1
   8277c:	73fb      	strb	r3, [r7, #15]
   8277e:	7bfb      	ldrb	r3, [r7, #15]
   82780:	2b07      	cmp	r3, #7
   82782:	d9f1      	bls.n	82768 <udd_ctrl_setup_received+0x40>
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
   82784:	4b30      	ldr	r3, [pc, #192]	; (82848 <udd_ctrl_setup_received+0x120>)
   82786:	885a      	ldrh	r2, [r3, #2]
   82788:	4b2f      	ldr	r3, [pc, #188]	; (82848 <udd_ctrl_setup_received+0x120>)
   8278a:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
   8278c:	4b2e      	ldr	r3, [pc, #184]	; (82848 <udd_ctrl_setup_received+0x120>)
   8278e:	889a      	ldrh	r2, [r3, #4]
   82790:	4b2d      	ldr	r3, [pc, #180]	; (82848 <udd_ctrl_setup_received+0x120>)
   82792:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
   82794:	4b2c      	ldr	r3, [pc, #176]	; (82848 <udd_ctrl_setup_received+0x120>)
   82796:	88da      	ldrh	r2, [r3, #6]
   82798:	4b2b      	ldr	r3, [pc, #172]	; (82848 <udd_ctrl_setup_received+0x120>)
   8279a:	80da      	strh	r2, [r3, #6]
			udd_g_ctrlreq.req.bRequest, udd_g_ctrlreq.req.bmRequestType,
			udd_g_ctrlreq.req.wValue, udd_g_ctrlreq.req.wIndex,
			udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   8279c:	4b2b      	ldr	r3, [pc, #172]	; (8284c <udd_ctrl_setup_received+0x124>)
   8279e:	4798      	blx	r3
   827a0:	4603      	mov	r3, r0
   827a2:	f083 0301 	eor.w	r3, r3, #1
   827a6:	b2db      	uxtb	r3, r3
   827a8:	2b00      	cmp	r3, #0
   827aa:	d007      	beq.n	827bc <udd_ctrl_setup_received+0x94>
		// Setup request unknown then stall it
		dbg_print("ProcErr ");
		udd_ctrl_stall_data();
   827ac:	4b24      	ldr	r3, [pc, #144]	; (82840 <udd_ctrl_setup_received+0x118>)
   827ae:	4798      	blx	r3
		udd_ack_setup_received(0);
   827b0:	4b22      	ldr	r3, [pc, #136]	; (8283c <udd_ctrl_setup_received+0x114>)
   827b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   827b6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   827ba:	e035      	b.n	82828 <udd_ctrl_setup_received+0x100>
	}
	udd_ack_setup_received(0);
   827bc:	4b1f      	ldr	r3, [pc, #124]	; (8283c <udd_ctrl_setup_received+0x114>)
   827be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   827c2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	if (Udd_setup_is_in()) {
   827c6:	4b20      	ldr	r3, [pc, #128]	; (82848 <udd_ctrl_setup_received+0x120>)
   827c8:	781b      	ldrb	r3, [r3, #0]
   827ca:	b25b      	sxtb	r3, r3
   827cc:	2b00      	cmp	r3, #0
   827ce:	da0b      	bge.n	827e8 <udd_ctrl_setup_received+0xc0>
		dbg_print("_I ");
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   827d0:	4b1f      	ldr	r3, [pc, #124]	; (82850 <udd_ctrl_setup_received+0x128>)
   827d2:	2200      	movs	r2, #0
   827d4:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   827d6:	4b1f      	ldr	r3, [pc, #124]	; (82854 <udd_ctrl_setup_received+0x12c>)
   827d8:	2200      	movs	r2, #0
   827da:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   827dc:	4b14      	ldr	r3, [pc, #80]	; (82830 <udd_ctrl_setup_received+0x108>)
   827de:	2202      	movs	r2, #2
   827e0:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   827e2:	4b1d      	ldr	r3, [pc, #116]	; (82858 <udd_ctrl_setup_received+0x130>)
   827e4:	4798      	blx	r3
   827e6:	e01f      	b.n	82828 <udd_ctrl_setup_received+0x100>
	} else {
		dbg_print("_O ");
		if (0 == udd_g_ctrlreq.req.wLength) {
   827e8:	4b17      	ldr	r3, [pc, #92]	; (82848 <udd_ctrl_setup_received+0x120>)
   827ea:	88db      	ldrh	r3, [r3, #6]
   827ec:	2b00      	cmp	r3, #0
   827ee:	d102      	bne.n	827f6 <udd_ctrl_setup_received+0xce>
			// No data phase requested
			dbg_print("Zl ");
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   827f0:	4b1a      	ldr	r3, [pc, #104]	; (8285c <udd_ctrl_setup_received+0x134>)
   827f2:	4798      	blx	r3
			return;
   827f4:	e018      	b.n	82828 <udd_ctrl_setup_received+0x100>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   827f6:	4b16      	ldr	r3, [pc, #88]	; (82850 <udd_ctrl_setup_received+0x128>)
   827f8:	2200      	movs	r2, #0
   827fa:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   827fc:	4b15      	ldr	r3, [pc, #84]	; (82854 <udd_ctrl_setup_received+0x12c>)
   827fe:	2200      	movs	r2, #0
   82800:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   82802:	4b0b      	ldr	r3, [pc, #44]	; (82830 <udd_ctrl_setup_received+0x108>)
   82804:	2201      	movs	r2, #1
   82806:	701a      	strb	r2, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   82808:	4b0c      	ldr	r3, [pc, #48]	; (8283c <udd_ctrl_setup_received+0x114>)
   8280a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8280e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		flags = cpu_irq_save();
   82812:	4b13      	ldr	r3, [pc, #76]	; (82860 <udd_ctrl_setup_received+0x138>)
   82814:	4798      	blx	r3
   82816:	6078      	str	r0, [r7, #4]
		udd_enable_nak_in_interrupt(0);
   82818:	4b08      	ldr	r3, [pc, #32]	; (8283c <udd_ctrl_setup_received+0x114>)
   8281a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8281e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		cpu_irq_restore(flags);
   82822:	6878      	ldr	r0, [r7, #4]
   82824:	4b0f      	ldr	r3, [pc, #60]	; (82864 <udd_ctrl_setup_received+0x13c>)
   82826:	4798      	blx	r3
	}
}
   82828:	3710      	adds	r7, #16
   8282a:	46bd      	mov	sp, r7
   8282c:	bd80      	pop	{r7, pc}
   8282e:	bf00      	nop
   82830:	20000cfd 	.word	0x20000cfd
   82834:	00082cd1 	.word	0x00082cd1
   82838:	000826cd 	.word	0x000826cd
   8283c:	400a4000 	.word	0x400a4000
   82840:	00082c05 	.word	0x00082c05
   82844:	20180000 	.word	0x20180000
   82848:	20000d54 	.word	0x20000d54
   8284c:	00084e89 	.word	0x00084e89
   82850:	20000cfe 	.word	0x20000cfe
   82854:	20000d00 	.word	0x20000d00
   82858:	00082869 	.word	0x00082869
   8285c:	00082c29 	.word	0x00082c29
   82860:	00081771 	.word	0x00081771
   82864:	000817c9 	.word	0x000817c9

00082868 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
   82868:	b580      	push	{r7, lr}
   8286a:	b084      	sub	sp, #16
   8286c:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
   8286e:	4b4c      	ldr	r3, [pc, #304]	; (829a0 <udd_ctrl_in_sent+0x138>)
   82870:	4798      	blx	r3
   82872:	6038      	str	r0, [r7, #0]
	udd_disable_in_send_interrupt(0);
   82874:	4b4b      	ldr	r3, [pc, #300]	; (829a4 <udd_ctrl_in_sent+0x13c>)
   82876:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8287a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   8287e:	6838      	ldr	r0, [r7, #0]
   82880:	4b49      	ldr	r3, [pc, #292]	; (829a8 <udd_ctrl_in_sent+0x140>)
   82882:	4798      	blx	r3

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   82884:	4b49      	ldr	r3, [pc, #292]	; (829ac <udd_ctrl_in_sent+0x144>)
   82886:	781b      	ldrb	r3, [r3, #0]
   82888:	2b03      	cmp	r3, #3
   8288a:	d104      	bne.n	82896 <udd_ctrl_in_sent+0x2e>
		dbg_print("ZlpE\n\r");
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   8288c:	4b48      	ldr	r3, [pc, #288]	; (829b0 <udd_ctrl_in_sent+0x148>)
   8288e:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   82890:	4b48      	ldr	r3, [pc, #288]	; (829b4 <udd_ctrl_in_sent+0x14c>)
   82892:	4798      	blx	r3
		return;
   82894:	e081      	b.n	8299a <udd_ctrl_in_sent+0x132>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   82896:	4b48      	ldr	r3, [pc, #288]	; (829b8 <udd_ctrl_in_sent+0x150>)
   82898:	899a      	ldrh	r2, [r3, #12]
   8289a:	4b48      	ldr	r3, [pc, #288]	; (829bc <udd_ctrl_in_sent+0x154>)
   8289c:	881b      	ldrh	r3, [r3, #0]
   8289e:	1ad3      	subs	r3, r2, r3
   828a0:	81fb      	strh	r3, [r7, #14]
	if (0 == nb_remain) {
   828a2:	89fb      	ldrh	r3, [r7, #14]
   828a4:	2b00      	cmp	r3, #0
   828a6:	d127      	bne.n	828f8 <udd_ctrl_in_sent+0x90>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   828a8:	4b45      	ldr	r3, [pc, #276]	; (829c0 <udd_ctrl_in_sent+0x158>)
   828aa:	881a      	ldrh	r2, [r3, #0]
   828ac:	4b43      	ldr	r3, [pc, #268]	; (829bc <udd_ctrl_in_sent+0x154>)
   828ae:	881b      	ldrh	r3, [r3, #0]
   828b0:	4413      	add	r3, r2
   828b2:	b29a      	uxth	r2, r3
   828b4:	4b42      	ldr	r3, [pc, #264]	; (829c0 <udd_ctrl_in_sent+0x158>)
   828b6:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   828b8:	4b3f      	ldr	r3, [pc, #252]	; (829b8 <udd_ctrl_in_sent+0x150>)
   828ba:	88da      	ldrh	r2, [r3, #6]
   828bc:	4b40      	ldr	r3, [pc, #256]	; (829c0 <udd_ctrl_in_sent+0x158>)
   828be:	881b      	ldrh	r3, [r3, #0]
   828c0:	429a      	cmp	r2, r3
   828c2:	d003      	beq.n	828cc <udd_ctrl_in_sent+0x64>
				|| b_shortpacket) {
   828c4:	4b3f      	ldr	r3, [pc, #252]	; (829c4 <udd_ctrl_in_sent+0x15c>)
   828c6:	781b      	ldrb	r3, [r3, #0]
   828c8:	2b00      	cmp	r3, #0
   828ca:	d002      	beq.n	828d2 <udd_ctrl_in_sent+0x6a>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			dbg_print("_zO ");
			udd_ctrl_send_zlp_out();
   828cc:	4b3e      	ldr	r3, [pc, #248]	; (829c8 <udd_ctrl_in_sent+0x160>)
   828ce:	4798      	blx	r3
			return;
   828d0:	e063      	b.n	8299a <udd_ctrl_in_sent+0x132>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   828d2:	4b39      	ldr	r3, [pc, #228]	; (829b8 <udd_ctrl_in_sent+0x150>)
   828d4:	695b      	ldr	r3, [r3, #20]
   828d6:	2b00      	cmp	r3, #0
   828d8:	d00e      	beq.n	828f8 <udd_ctrl_in_sent+0x90>
				|| (!udd_g_ctrlreq.over_under_run())) {
   828da:	4b37      	ldr	r3, [pc, #220]	; (829b8 <udd_ctrl_in_sent+0x150>)
   828dc:	695b      	ldr	r3, [r3, #20]
   828de:	4798      	blx	r3
   828e0:	4603      	mov	r3, r0
   828e2:	f083 0301 	eor.w	r3, r3, #1
   828e6:	b2db      	uxtb	r3, r3
   828e8:	2b00      	cmp	r3, #0
   828ea:	d105      	bne.n	828f8 <udd_ctrl_in_sent+0x90>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   828ec:	4b33      	ldr	r3, [pc, #204]	; (829bc <udd_ctrl_in_sent+0x154>)
   828ee:	2200      	movs	r2, #0
   828f0:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   828f2:	4b31      	ldr	r3, [pc, #196]	; (829b8 <udd_ctrl_in_sent+0x150>)
   828f4:	899b      	ldrh	r3, [r3, #12]
   828f6:	81fb      	strh	r3, [r7, #14]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   828f8:	89fb      	ldrh	r3, [r7, #14]
   828fa:	2b3f      	cmp	r3, #63	; 0x3f
   828fc:	d905      	bls.n	8290a <udd_ctrl_in_sent+0xa2>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   828fe:	2340      	movs	r3, #64	; 0x40
   82900:	81fb      	strh	r3, [r7, #14]
		b_shortpacket = false;
   82902:	4b30      	ldr	r3, [pc, #192]	; (829c4 <udd_ctrl_in_sent+0x15c>)
   82904:	2200      	movs	r2, #0
   82906:	701a      	strb	r2, [r3, #0]
   82908:	e002      	b.n	82910 <udd_ctrl_in_sent+0xa8>
	} else {
		b_shortpacket = true;
   8290a:	4b2e      	ldr	r3, [pc, #184]	; (829c4 <udd_ctrl_in_sent+0x15c>)
   8290c:	2201      	movs	r2, #1
   8290e:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   82910:	4b2e      	ldr	r3, [pc, #184]	; (829cc <udd_ctrl_in_sent+0x164>)
   82912:	60bb      	str	r3, [r7, #8]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   82914:	4b28      	ldr	r3, [pc, #160]	; (829b8 <udd_ctrl_in_sent+0x150>)
   82916:	689b      	ldr	r3, [r3, #8]
   82918:	4a28      	ldr	r2, [pc, #160]	; (829bc <udd_ctrl_in_sent+0x154>)
   8291a:	8812      	ldrh	r2, [r2, #0]
   8291c:	4413      	add	r3, r2
   8291e:	607b      	str	r3, [r7, #4]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
   82920:	4b1f      	ldr	r3, [pc, #124]	; (829a0 <udd_ctrl_in_sent+0x138>)
   82922:	4798      	blx	r3
   82924:	6038      	str	r0, [r7, #0]
	if (Is_udd_out_received(0)) {
   82926:	4b1f      	ldr	r3, [pc, #124]	; (829a4 <udd_ctrl_in_sent+0x13c>)
   82928:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8292c:	f403 7300 	and.w	r3, r3, #512	; 0x200
   82930:	2b00      	cmp	r3, #0
   82932:	d006      	beq.n	82942 <udd_ctrl_in_sent+0xda>
		dbg_print("Abort ");
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
   82934:	6838      	ldr	r0, [r7, #0]
   82936:	4b1c      	ldr	r3, [pc, #112]	; (829a8 <udd_ctrl_in_sent+0x140>)
   82938:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   8293a:	4b1c      	ldr	r3, [pc, #112]	; (829ac <udd_ctrl_in_sent+0x144>)
   8293c:	2204      	movs	r2, #4
   8293e:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   82940:	e02b      	b.n	8299a <udd_ctrl_in_sent+0x132>
	}
	// dbg_print("t%d ", nb_remain);
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   82942:	2300      	movs	r3, #0
   82944:	737b      	strb	r3, [r7, #13]
   82946:	e00a      	b.n	8295e <udd_ctrl_in_sent+0xf6>
		*ptr_dest++ = *ptr_src++;
   82948:	68bb      	ldr	r3, [r7, #8]
   8294a:	1c5a      	adds	r2, r3, #1
   8294c:	60ba      	str	r2, [r7, #8]
   8294e:	687a      	ldr	r2, [r7, #4]
   82950:	1c51      	adds	r1, r2, #1
   82952:	6079      	str	r1, [r7, #4]
   82954:	7812      	ldrb	r2, [r2, #0]
   82956:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_remain; i++) {
   82958:	7b7b      	ldrb	r3, [r7, #13]
   8295a:	3301      	adds	r3, #1
   8295c:	737b      	strb	r3, [r7, #13]
   8295e:	7b7b      	ldrb	r3, [r7, #13]
   82960:	b29b      	uxth	r3, r3
   82962:	89fa      	ldrh	r2, [r7, #14]
   82964:	429a      	cmp	r2, r3
   82966:	d8ef      	bhi.n	82948 <udd_ctrl_in_sent+0xe0>
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   82968:	4b14      	ldr	r3, [pc, #80]	; (829bc <udd_ctrl_in_sent+0x154>)
   8296a:	881a      	ldrh	r2, [r3, #0]
   8296c:	89fb      	ldrh	r3, [r7, #14]
   8296e:	4413      	add	r3, r2
   82970:	b29a      	uxth	r2, r3
   82972:	4b12      	ldr	r3, [pc, #72]	; (829bc <udd_ctrl_in_sent+0x154>)
   82974:	801a      	strh	r2, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   82976:	4b0b      	ldr	r3, [pc, #44]	; (829a4 <udd_ctrl_in_sent+0x13c>)
   82978:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8297c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   82980:	4b08      	ldr	r3, [pc, #32]	; (829a4 <udd_ctrl_in_sent+0x13c>)
   82982:	f44f 6200 	mov.w	r2, #2048	; 0x800
   82986:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   8298a:	4b06      	ldr	r3, [pc, #24]	; (829a4 <udd_ctrl_in_sent+0x13c>)
   8298c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82990:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
   82994:	6838      	ldr	r0, [r7, #0]
   82996:	4b04      	ldr	r3, [pc, #16]	; (829a8 <udd_ctrl_in_sent+0x140>)
   82998:	4798      	blx	r3
}
   8299a:	3710      	adds	r7, #16
   8299c:	46bd      	mov	sp, r7
   8299e:	bd80      	pop	{r7, pc}
   829a0:	00081771 	.word	0x00081771
   829a4:	400a4000 	.word	0x400a4000
   829a8:	000817c9 	.word	0x000817c9
   829ac:	20000cfd 	.word	0x20000cfd
   829b0:	00082cd1 	.word	0x00082cd1
   829b4:	000826cd 	.word	0x000826cd
   829b8:	20000d54 	.word	0x20000d54
   829bc:	20000d00 	.word	0x20000d00
   829c0:	20000cfe 	.word	0x20000cfe
   829c4:	20000d34 	.word	0x20000d34
   829c8:	00082c8d 	.word	0x00082c8d
   829cc:	20180000 	.word	0x20180000

000829d0 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
   829d0:	b580      	push	{r7, lr}
   829d2:	b084      	sub	sp, #16
   829d4:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   829d6:	4b61      	ldr	r3, [pc, #388]	; (82b5c <udd_ctrl_out_received+0x18c>)
   829d8:	781b      	ldrb	r3, [r3, #0]
   829da:	2b01      	cmp	r3, #1
   829dc:	d00f      	beq.n	829fe <udd_ctrl_out_received+0x2e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   829de:	4b5f      	ldr	r3, [pc, #380]	; (82b5c <udd_ctrl_out_received+0x18c>)
   829e0:	781b      	ldrb	r3, [r3, #0]
   829e2:	2b02      	cmp	r3, #2
   829e4:	d003      	beq.n	829ee <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   829e6:	4b5d      	ldr	r3, [pc, #372]	; (82b5c <udd_ctrl_out_received+0x18c>)
   829e8:	781b      	ldrb	r3, [r3, #0]
   829ea:	2b04      	cmp	r3, #4
   829ec:	d102      	bne.n	829f4 <udd_ctrl_out_received+0x24>
			dbg_print("EoStp\n\r");
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
   829ee:	4b5c      	ldr	r3, [pc, #368]	; (82b60 <udd_ctrl_out_received+0x190>)
   829f0:	4798      	blx	r3
   829f2:	e001      	b.n	829f8 <udd_ctrl_out_received+0x28>
		} else {
			dbg_print("ErrStp\n\r");
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   829f4:	4b5b      	ldr	r3, [pc, #364]	; (82b64 <udd_ctrl_out_received+0x194>)
   829f6:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   829f8:	4b5b      	ldr	r3, [pc, #364]	; (82b68 <udd_ctrl_out_received+0x198>)
   829fa:	4798      	blx	r3
		return;
   829fc:	e0ab      	b.n	82b56 <udd_ctrl_out_received+0x186>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   829fe:	4b5b      	ldr	r3, [pc, #364]	; (82b6c <udd_ctrl_out_received+0x19c>)
   82a00:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   82a04:	0d1b      	lsrs	r3, r3, #20
   82a06:	b29b      	uxth	r3, r3
   82a08:	f3c3 030a 	ubfx	r3, r3, #0, #11
   82a0c:	81bb      	strh	r3, [r7, #12]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   82a0e:	4b58      	ldr	r3, [pc, #352]	; (82b70 <udd_ctrl_out_received+0x1a0>)
   82a10:	899b      	ldrh	r3, [r3, #12]
   82a12:	461a      	mov	r2, r3
   82a14:	4b57      	ldr	r3, [pc, #348]	; (82b74 <udd_ctrl_out_received+0x1a4>)
   82a16:	881b      	ldrh	r3, [r3, #0]
   82a18:	4619      	mov	r1, r3
   82a1a:	89bb      	ldrh	r3, [r7, #12]
   82a1c:	440b      	add	r3, r1
   82a1e:	429a      	cmp	r2, r3
   82a20:	da05      	bge.n	82a2e <udd_ctrl_out_received+0x5e>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   82a22:	4b53      	ldr	r3, [pc, #332]	; (82b70 <udd_ctrl_out_received+0x1a0>)
   82a24:	899a      	ldrh	r2, [r3, #12]
   82a26:	4b53      	ldr	r3, [pc, #332]	; (82b74 <udd_ctrl_out_received+0x1a4>)
   82a28:	881b      	ldrh	r3, [r3, #0]
   82a2a:	1ad3      	subs	r3, r2, r3
   82a2c:	81bb      	strh	r3, [r7, #12]
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   82a2e:	4b52      	ldr	r3, [pc, #328]	; (82b78 <udd_ctrl_out_received+0x1a8>)
   82a30:	60bb      	str	r3, [r7, #8]
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   82a32:	4b4f      	ldr	r3, [pc, #316]	; (82b70 <udd_ctrl_out_received+0x1a0>)
   82a34:	689b      	ldr	r3, [r3, #8]
   82a36:	4a4f      	ldr	r2, [pc, #316]	; (82b74 <udd_ctrl_out_received+0x1a4>)
   82a38:	8812      	ldrh	r2, [r2, #0]
   82a3a:	4413      	add	r3, r2
   82a3c:	607b      	str	r3, [r7, #4]
	for (i = 0; i < nb_data; i++) {
   82a3e:	2300      	movs	r3, #0
   82a40:	73fb      	strb	r3, [r7, #15]
   82a42:	e00a      	b.n	82a5a <udd_ctrl_out_received+0x8a>
		*ptr_dest++ = *ptr_src++;
   82a44:	687b      	ldr	r3, [r7, #4]
   82a46:	1c5a      	adds	r2, r3, #1
   82a48:	607a      	str	r2, [r7, #4]
   82a4a:	68ba      	ldr	r2, [r7, #8]
   82a4c:	1c51      	adds	r1, r2, #1
   82a4e:	60b9      	str	r1, [r7, #8]
   82a50:	7812      	ldrb	r2, [r2, #0]
   82a52:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_data; i++) {
   82a54:	7bfb      	ldrb	r3, [r7, #15]
   82a56:	3301      	adds	r3, #1
   82a58:	73fb      	strb	r3, [r7, #15]
   82a5a:	7bfb      	ldrb	r3, [r7, #15]
   82a5c:	b29b      	uxth	r3, r3
   82a5e:	89ba      	ldrh	r2, [r7, #12]
   82a60:	429a      	cmp	r2, r3
   82a62:	d8ef      	bhi.n	82a44 <udd_ctrl_out_received+0x74>
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   82a64:	4b43      	ldr	r3, [pc, #268]	; (82b74 <udd_ctrl_out_received+0x1a4>)
   82a66:	881a      	ldrh	r2, [r3, #0]
   82a68:	89bb      	ldrh	r3, [r7, #12]
   82a6a:	4413      	add	r3, r2
   82a6c:	b29a      	uxth	r2, r3
   82a6e:	4b41      	ldr	r3, [pc, #260]	; (82b74 <udd_ctrl_out_received+0x1a4>)
   82a70:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   82a72:	89bb      	ldrh	r3, [r7, #12]
   82a74:	2b40      	cmp	r3, #64	; 0x40
   82a76:	d10a      	bne.n	82a8e <udd_ctrl_out_received+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   82a78:	4b3d      	ldr	r3, [pc, #244]	; (82b70 <udd_ctrl_out_received+0x1a0>)
   82a7a:	88db      	ldrh	r3, [r3, #6]
   82a7c:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_buf_cnt +
   82a7e:	4b3f      	ldr	r3, [pc, #252]	; (82b7c <udd_ctrl_out_received+0x1ac>)
   82a80:	881b      	ldrh	r3, [r3, #0]
   82a82:	4619      	mov	r1, r3
   82a84:	4b3b      	ldr	r3, [pc, #236]	; (82b74 <udd_ctrl_out_received+0x1a4>)
   82a86:	881b      	ldrh	r3, [r3, #0]
   82a88:	440b      	add	r3, r1
			|| (udd_g_ctrlreq.req.wLength <=
   82a8a:	429a      	cmp	r2, r3
   82a8c:	dc20      	bgt.n	82ad0 <udd_ctrl_out_received+0x100>
			udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   82a8e:	4b39      	ldr	r3, [pc, #228]	; (82b74 <udd_ctrl_out_received+0x1a4>)
   82a90:	881a      	ldrh	r2, [r3, #0]
   82a92:	4b37      	ldr	r3, [pc, #220]	; (82b70 <udd_ctrl_out_received+0x1a0>)
   82a94:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   82a96:	4b36      	ldr	r3, [pc, #216]	; (82b70 <udd_ctrl_out_received+0x1a0>)
   82a98:	695b      	ldr	r3, [r3, #20]
   82a9a:	2b00      	cmp	r3, #0
   82a9c:	d010      	beq.n	82ac0 <udd_ctrl_out_received+0xf0>
			if (!udd_g_ctrlreq.over_under_run()) {
   82a9e:	4b34      	ldr	r3, [pc, #208]	; (82b70 <udd_ctrl_out_received+0x1a0>)
   82aa0:	695b      	ldr	r3, [r3, #20]
   82aa2:	4798      	blx	r3
   82aa4:	4603      	mov	r3, r0
   82aa6:	f083 0301 	eor.w	r3, r3, #1
   82aaa:	b2db      	uxtb	r3, r3
   82aac:	2b00      	cmp	r3, #0
   82aae:	d007      	beq.n	82ac0 <udd_ctrl_out_received+0xf0>
				// Stall ZLP
				udd_ctrl_stall_data();
   82ab0:	4b2c      	ldr	r3, [pc, #176]	; (82b64 <udd_ctrl_out_received+0x194>)
   82ab2:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   82ab4:	4b2d      	ldr	r3, [pc, #180]	; (82b6c <udd_ctrl_out_received+0x19c>)
   82ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
   82aba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   82abe:	e04a      	b.n	82b56 <udd_ctrl_out_received+0x186>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   82ac0:	4b2a      	ldr	r3, [pc, #168]	; (82b6c <udd_ctrl_out_received+0x19c>)
   82ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
   82ac6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   82aca:	4b2d      	ldr	r3, [pc, #180]	; (82b80 <udd_ctrl_out_received+0x1b0>)
   82acc:	4798      	blx	r3
		return;
   82ace:	e042      	b.n	82b56 <udd_ctrl_out_received+0x186>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   82ad0:	4b27      	ldr	r3, [pc, #156]	; (82b70 <udd_ctrl_out_received+0x1a0>)
   82ad2:	899a      	ldrh	r2, [r3, #12]
   82ad4:	4b27      	ldr	r3, [pc, #156]	; (82b74 <udd_ctrl_out_received+0x1a4>)
   82ad6:	881b      	ldrh	r3, [r3, #0]
   82ad8:	429a      	cmp	r2, r3
   82ada:	d127      	bne.n	82b2c <udd_ctrl_out_received+0x15c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   82adc:	4b24      	ldr	r3, [pc, #144]	; (82b70 <udd_ctrl_out_received+0x1a0>)
   82ade:	695b      	ldr	r3, [r3, #20]
   82ae0:	2b00      	cmp	r3, #0
   82ae2:	d107      	bne.n	82af4 <udd_ctrl_out_received+0x124>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
   82ae4:	4b1f      	ldr	r3, [pc, #124]	; (82b64 <udd_ctrl_out_received+0x194>)
   82ae6:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   82ae8:	4b20      	ldr	r3, [pc, #128]	; (82b6c <udd_ctrl_out_received+0x19c>)
   82aea:	f44f 7200 	mov.w	r2, #512	; 0x200
   82aee:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   82af2:	e030      	b.n	82b56 <udd_ctrl_out_received+0x186>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   82af4:	4b1e      	ldr	r3, [pc, #120]	; (82b70 <udd_ctrl_out_received+0x1a0>)
   82af6:	695b      	ldr	r3, [r3, #20]
   82af8:	4798      	blx	r3
   82afa:	4603      	mov	r3, r0
   82afc:	f083 0301 	eor.w	r3, r3, #1
   82b00:	b2db      	uxtb	r3, r3
   82b02:	2b00      	cmp	r3, #0
   82b04:	d007      	beq.n	82b16 <udd_ctrl_out_received+0x146>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   82b06:	4b17      	ldr	r3, [pc, #92]	; (82b64 <udd_ctrl_out_received+0x194>)
   82b08:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   82b0a:	4b18      	ldr	r3, [pc, #96]	; (82b6c <udd_ctrl_out_received+0x19c>)
   82b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
   82b10:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   82b14:	e01f      	b.n	82b56 <udd_ctrl_out_received+0x186>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   82b16:	4b19      	ldr	r3, [pc, #100]	; (82b7c <udd_ctrl_out_received+0x1ac>)
   82b18:	881a      	ldrh	r2, [r3, #0]
   82b1a:	4b16      	ldr	r3, [pc, #88]	; (82b74 <udd_ctrl_out_received+0x1a4>)
   82b1c:	881b      	ldrh	r3, [r3, #0]
   82b1e:	4413      	add	r3, r2
   82b20:	b29a      	uxth	r2, r3
   82b22:	4b16      	ldr	r3, [pc, #88]	; (82b7c <udd_ctrl_out_received+0x1ac>)
   82b24:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   82b26:	4b13      	ldr	r3, [pc, #76]	; (82b74 <udd_ctrl_out_received+0x1a4>)
   82b28:	2200      	movs	r2, #0
   82b2a:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   82b2c:	4b0f      	ldr	r3, [pc, #60]	; (82b6c <udd_ctrl_out_received+0x19c>)
   82b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
   82b32:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   82b36:	4b0d      	ldr	r3, [pc, #52]	; (82b6c <udd_ctrl_out_received+0x19c>)
   82b38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   82b3c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	flags = cpu_irq_save();
   82b40:	4b10      	ldr	r3, [pc, #64]	; (82b84 <udd_ctrl_out_received+0x1b4>)
   82b42:	4798      	blx	r3
   82b44:	6038      	str	r0, [r7, #0]
	udd_enable_nak_in_interrupt(0);
   82b46:	4b09      	ldr	r3, [pc, #36]	; (82b6c <udd_ctrl_out_received+0x19c>)
   82b48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   82b4c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   82b50:	6838      	ldr	r0, [r7, #0]
   82b52:	4b0d      	ldr	r3, [pc, #52]	; (82b88 <udd_ctrl_out_received+0x1b8>)
   82b54:	4798      	blx	r3
}
   82b56:	3710      	adds	r7, #16
   82b58:	46bd      	mov	sp, r7
   82b5a:	bd80      	pop	{r7, pc}
   82b5c:	20000cfd 	.word	0x20000cfd
   82b60:	00082cd1 	.word	0x00082cd1
   82b64:	00082c05 	.word	0x00082c05
   82b68:	000826cd 	.word	0x000826cd
   82b6c:	400a4000 	.word	0x400a4000
   82b70:	20000d54 	.word	0x20000d54
   82b74:	20000d00 	.word	0x20000d00
   82b78:	20180000 	.word	0x20180000
   82b7c:	20000cfe 	.word	0x20000cfe
   82b80:	00082c29 	.word	0x00082c29
   82b84:	00081771 	.word	0x00081771
   82b88:	000817c9 	.word	0x000817c9

00082b8c <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
   82b8c:	b580      	push	{r7, lr}
   82b8e:	af00      	add	r7, sp, #0
	if (Is_udd_out_received(0))
   82b90:	4b0c      	ldr	r3, [pc, #48]	; (82bc4 <udd_ctrl_underflow+0x38>)
   82b92:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   82b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
   82b9a:	2b00      	cmp	r3, #0
   82b9c:	d10f      	bne.n	82bbe <udd_ctrl_underflow+0x32>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   82b9e:	4b0a      	ldr	r3, [pc, #40]	; (82bc8 <udd_ctrl_underflow+0x3c>)
   82ba0:	781b      	ldrb	r3, [r3, #0]
   82ba2:	2b01      	cmp	r3, #1
   82ba4:	d102      	bne.n	82bac <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   82ba6:	4b09      	ldr	r3, [pc, #36]	; (82bcc <udd_ctrl_underflow+0x40>)
   82ba8:	4798      	blx	r3
   82baa:	e009      	b.n	82bc0 <udd_ctrl_underflow+0x34>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   82bac:	4b06      	ldr	r3, [pc, #24]	; (82bc8 <udd_ctrl_underflow+0x3c>)
   82bae:	781b      	ldrb	r3, [r3, #0]
   82bb0:	2b04      	cmp	r3, #4
   82bb2:	d105      	bne.n	82bc0 <udd_ctrl_underflow+0x34>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   82bb4:	4b03      	ldr	r3, [pc, #12]	; (82bc4 <udd_ctrl_underflow+0x38>)
   82bb6:	2220      	movs	r2, #32
   82bb8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   82bbc:	e000      	b.n	82bc0 <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received
   82bbe:	bf00      	nop
	}
}
   82bc0:	bd80      	pop	{r7, pc}
   82bc2:	bf00      	nop
   82bc4:	400a4000 	.word	0x400a4000
   82bc8:	20000cfd 	.word	0x20000cfd
   82bcc:	00082c29 	.word	0x00082c29

00082bd0 <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
   82bd0:	b480      	push	{r7}
   82bd2:	af00      	add	r7, sp, #0
	if (Is_udd_in_send(0))
   82bd4:	4b09      	ldr	r3, [pc, #36]	; (82bfc <udd_ctrl_overflow+0x2c>)
   82bd6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   82bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   82bde:	2b00      	cmp	r3, #0
   82be0:	d108      	bne.n	82bf4 <udd_ctrl_overflow+0x24>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   82be2:	4b07      	ldr	r3, [pc, #28]	; (82c00 <udd_ctrl_overflow+0x30>)
   82be4:	781b      	ldrb	r3, [r3, #0]
   82be6:	2b03      	cmp	r3, #3
   82be8:	d105      	bne.n	82bf6 <udd_ctrl_overflow+0x26>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   82bea:	4b04      	ldr	r3, [pc, #16]	; (82bfc <udd_ctrl_overflow+0x2c>)
   82bec:	2220      	movs	r2, #32
   82bee:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   82bf2:	e000      	b.n	82bf6 <udd_ctrl_overflow+0x26>
		return; // overflow ignored if IN data is received
   82bf4:	bf00      	nop
	}
}
   82bf6:	46bd      	mov	sp, r7
   82bf8:	bc80      	pop	{r7}
   82bfa:	4770      	bx	lr
   82bfc:	400a4000 	.word	0x400a4000
   82c00:	20000cfd 	.word	0x20000cfd

00082c04 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
   82c04:	b480      	push	{r7}
   82c06:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   82c08:	4b05      	ldr	r3, [pc, #20]	; (82c20 <udd_ctrl_stall_data+0x1c>)
   82c0a:	2205      	movs	r2, #5
   82c0c:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   82c0e:	4b05      	ldr	r3, [pc, #20]	; (82c24 <udd_ctrl_stall_data+0x20>)
   82c10:	2220      	movs	r2, #32
   82c12:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   82c16:	bf00      	nop
   82c18:	46bd      	mov	sp, r7
   82c1a:	bc80      	pop	{r7}
   82c1c:	4770      	bx	lr
   82c1e:	bf00      	nop
   82c20:	20000cfd 	.word	0x20000cfd
   82c24:	400a4000 	.word	0x400a4000

00082c28 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
   82c28:	b580      	push	{r7, lr}
   82c2a:	b082      	sub	sp, #8
   82c2c:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   82c2e:	4b13      	ldr	r3, [pc, #76]	; (82c7c <udd_ctrl_send_zlp_in+0x54>)
   82c30:	2203      	movs	r2, #3
   82c32:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
   82c34:	4b12      	ldr	r3, [pc, #72]	; (82c80 <udd_ctrl_send_zlp_in+0x58>)
   82c36:	4798      	blx	r3
   82c38:	6078      	str	r0, [r7, #4]
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   82c3a:	4b12      	ldr	r3, [pc, #72]	; (82c84 <udd_ctrl_send_zlp_in+0x5c>)
   82c3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82c40:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   82c44:	4b0f      	ldr	r3, [pc, #60]	; (82c84 <udd_ctrl_send_zlp_in+0x5c>)
   82c46:	f44f 6200 	mov.w	r2, #2048	; 0x800
   82c4a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   82c4e:	4b0d      	ldr	r3, [pc, #52]	; (82c84 <udd_ctrl_send_zlp_in+0x5c>)
   82c50:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82c54:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   82c58:	4b0a      	ldr	r3, [pc, #40]	; (82c84 <udd_ctrl_send_zlp_in+0x5c>)
   82c5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82c5e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   82c62:	4b08      	ldr	r3, [pc, #32]	; (82c84 <udd_ctrl_send_zlp_in+0x5c>)
   82c64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82c68:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   82c6c:	6878      	ldr	r0, [r7, #4]
   82c6e:	4b06      	ldr	r3, [pc, #24]	; (82c88 <udd_ctrl_send_zlp_in+0x60>)
   82c70:	4798      	blx	r3
}
   82c72:	bf00      	nop
   82c74:	3708      	adds	r7, #8
   82c76:	46bd      	mov	sp, r7
   82c78:	bd80      	pop	{r7, pc}
   82c7a:	bf00      	nop
   82c7c:	20000cfd 	.word	0x20000cfd
   82c80:	00081771 	.word	0x00081771
   82c84:	400a4000 	.word	0x400a4000
   82c88:	000817c9 	.word	0x000817c9

00082c8c <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
   82c8c:	b580      	push	{r7, lr}
   82c8e:	b082      	sub	sp, #8
   82c90:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   82c92:	4b0b      	ldr	r3, [pc, #44]	; (82cc0 <udd_ctrl_send_zlp_out+0x34>)
   82c94:	2204      	movs	r2, #4
   82c96:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
   82c98:	4b0a      	ldr	r3, [pc, #40]	; (82cc4 <udd_ctrl_send_zlp_out+0x38>)
   82c9a:	4798      	blx	r3
   82c9c:	6078      	str	r0, [r7, #4]
	udd_ack_nak_in(0);
   82c9e:	4b0a      	ldr	r3, [pc, #40]	; (82cc8 <udd_ctrl_send_zlp_out+0x3c>)
   82ca0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   82ca4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   82ca8:	4b07      	ldr	r3, [pc, #28]	; (82cc8 <udd_ctrl_send_zlp_out+0x3c>)
   82caa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   82cae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   82cb2:	6878      	ldr	r0, [r7, #4]
   82cb4:	4b05      	ldr	r3, [pc, #20]	; (82ccc <udd_ctrl_send_zlp_out+0x40>)
   82cb6:	4798      	blx	r3
}
   82cb8:	bf00      	nop
   82cba:	3708      	adds	r7, #8
   82cbc:	46bd      	mov	sp, r7
   82cbe:	bd80      	pop	{r7, pc}
   82cc0:	20000cfd 	.word	0x20000cfd
   82cc4:	00081771 	.word	0x00081771
   82cc8:	400a4000 	.word	0x400a4000
   82ccc:	000817c9 	.word	0x000817c9

00082cd0 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   82cd0:	b580      	push	{r7, lr}
   82cd2:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   82cd4:	4b04      	ldr	r3, [pc, #16]	; (82ce8 <udd_ctrl_endofrequest+0x18>)
   82cd6:	691b      	ldr	r3, [r3, #16]
   82cd8:	2b00      	cmp	r3, #0
   82cda:	d002      	beq.n	82ce2 <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
   82cdc:	4b02      	ldr	r3, [pc, #8]	; (82ce8 <udd_ctrl_endofrequest+0x18>)
   82cde:	691b      	ldr	r3, [r3, #16]
   82ce0:	4798      	blx	r3
	}
}
   82ce2:	bf00      	nop
   82ce4:	bd80      	pop	{r7, pc}
   82ce6:	bf00      	nop
   82ce8:	20000d54 	.word	0x20000d54

00082cec <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
   82cec:	b580      	push	{r7, lr}
   82cee:	b082      	sub	sp, #8
   82cf0:	af00      	add	r7, sp, #0
	uint32_t status = udd_get_endpoint_status(0);
   82cf2:	4b31      	ldr	r3, [pc, #196]	; (82db8 <udd_ctrl_interrupt+0xcc>)
   82cf4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   82cf8:	607b      	str	r3, [r7, #4]

	if (!Is_udd_endpoint_interrupt(0)) {
   82cfa:	4b2f      	ldr	r3, [pc, #188]	; (82db8 <udd_ctrl_interrupt+0xcc>)
   82cfc:	695b      	ldr	r3, [r3, #20]
   82cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
   82d02:	2b00      	cmp	r3, #0
   82d04:	d101      	bne.n	82d0a <udd_ctrl_interrupt+0x1e>
		return false; // No interrupt events on control endpoint
   82d06:	2300      	movs	r3, #0
   82d08:	e052      	b.n	82db0 <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   82d0a:	4b2b      	ldr	r3, [pc, #172]	; (82db8 <udd_ctrl_interrupt+0xcc>)
   82d0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   82d10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   82d14:	4b28      	ldr	r3, [pc, #160]	; (82db8 <udd_ctrl_interrupt+0xcc>)
   82d16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82d1a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	// Search event on control endpoint
	if (Is_udd_endpoint_status_setup_received(status)) {
   82d1e:	687b      	ldr	r3, [r7, #4]
   82d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   82d24:	2b00      	cmp	r3, #0
   82d26:	d003      	beq.n	82d30 <udd_ctrl_interrupt+0x44>
		// SETUP packet received
		dbg_print("Stp ");
		udd_ctrl_setup_received();
   82d28:	4b24      	ldr	r3, [pc, #144]	; (82dbc <udd_ctrl_interrupt+0xd0>)
   82d2a:	4798      	blx	r3
		return true;
   82d2c:	2301      	movs	r3, #1
   82d2e:	e03f      	b.n	82db0 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_in_sent(status)
   82d30:	687b      	ldr	r3, [r7, #4]
   82d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   82d36:	2b00      	cmp	r3, #0
   82d38:	d00a      	beq.n	82d50 <udd_ctrl_interrupt+0x64>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   82d3a:	4b1f      	ldr	r3, [pc, #124]	; (82db8 <udd_ctrl_interrupt+0xcc>)
   82d3c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   82d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   82d44:	2b00      	cmp	r3, #0
   82d46:	d003      	beq.n	82d50 <udd_ctrl_interrupt+0x64>
		// IN packet sent
		dbg_print("In ");
		udd_ctrl_in_sent();
   82d48:	4b1d      	ldr	r3, [pc, #116]	; (82dc0 <udd_ctrl_interrupt+0xd4>)
   82d4a:	4798      	blx	r3
		return true;
   82d4c:	2301      	movs	r3, #1
   82d4e:	e02f      	b.n	82db0 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_out_received(status)) {
   82d50:	687b      	ldr	r3, [r7, #4]
   82d52:	f403 7300 	and.w	r3, r3, #512	; 0x200
   82d56:	2b00      	cmp	r3, #0
   82d58:	d003      	beq.n	82d62 <udd_ctrl_interrupt+0x76>
		// OUT packet received
		dbg_print("Out ");
		udd_ctrl_out_received();
   82d5a:	4b1a      	ldr	r3, [pc, #104]	; (82dc4 <udd_ctrl_interrupt+0xd8>)
   82d5c:	4798      	blx	r3
		return true;
   82d5e:	2301      	movs	r3, #1
   82d60:	e026      	b.n	82db0 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_stall(status)) {
   82d62:	687b      	ldr	r3, [r7, #4]
   82d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   82d68:	2b00      	cmp	r3, #0
   82d6a:	d004      	beq.n	82d76 <udd_ctrl_interrupt+0x8a>
		dbg_print("Stall\n\r");
		// STALLed
		udd_ack_stall(0);
   82d6c:	4b12      	ldr	r3, [pc, #72]	; (82db8 <udd_ctrl_interrupt+0xcc>)
   82d6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   82d72:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	if (Is_udd_endpoint_status_nak_out(status)) {
   82d76:	687b      	ldr	r3, [r7, #4]
   82d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   82d7c:	2b00      	cmp	r3, #0
   82d7e:	d008      	beq.n	82d92 <udd_ctrl_interrupt+0xa6>
		// Overflow on OUT packet
		dbg_print("NakO ");
		udd_ack_nak_out(0);
   82d80:	4b0d      	ldr	r3, [pc, #52]	; (82db8 <udd_ctrl_interrupt+0xcc>)
   82d82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82d86:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_overflow();
   82d8a:	4b0f      	ldr	r3, [pc, #60]	; (82dc8 <udd_ctrl_interrupt+0xdc>)
   82d8c:	4798      	blx	r3
		return true;
   82d8e:	2301      	movs	r3, #1
   82d90:	e00e      	b.n	82db0 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_nak_in(status)) {
   82d92:	687b      	ldr	r3, [r7, #4]
   82d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   82d98:	2b00      	cmp	r3, #0
   82d9a:	d008      	beq.n	82dae <udd_ctrl_interrupt+0xc2>
		// Underflow on IN packet
		dbg_print("NakI ");
		udd_ack_nak_in(0);
   82d9c:	4b06      	ldr	r3, [pc, #24]	; (82db8 <udd_ctrl_interrupt+0xcc>)
   82d9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   82da2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_underflow();
   82da6:	4b09      	ldr	r3, [pc, #36]	; (82dcc <udd_ctrl_interrupt+0xe0>)
   82da8:	4798      	blx	r3
		return true;
   82daa:	2301      	movs	r3, #1
   82dac:	e000      	b.n	82db0 <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("UnH ");
	return false;
   82dae:	2300      	movs	r3, #0
}
   82db0:	4618      	mov	r0, r3
   82db2:	3708      	adds	r7, #8
   82db4:	46bd      	mov	sp, r7
   82db6:	bd80      	pop	{r7, pc}
   82db8:	400a4000 	.word	0x400a4000
   82dbc:	00082729 	.word	0x00082729
   82dc0:	00082869 	.word	0x00082869
   82dc4:	000829d1 	.word	0x000829d1
   82dc8:	00082bd1 	.word	0x00082bd1
   82dcc:	00082b8d 	.word	0x00082b8d

00082dd0 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
   82dd0:	b480      	push	{r7}
   82dd2:	b083      	sub	sp, #12
   82dd4:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   82dd6:	2300      	movs	r3, #0
   82dd8:	71fb      	strb	r3, [r7, #7]
   82dda:	e01c      	b.n	82e16 <udd_ep_job_table_reset+0x46>
		udd_ep_job[i].busy = false;
   82ddc:	79fa      	ldrb	r2, [r7, #7]
   82dde:	4912      	ldr	r1, [pc, #72]	; (82e28 <udd_ep_job_table_reset+0x58>)
   82de0:	4613      	mov	r3, r2
   82de2:	005b      	lsls	r3, r3, #1
   82de4:	4413      	add	r3, r2
   82de6:	00db      	lsls	r3, r3, #3
   82de8:	440b      	add	r3, r1
   82dea:	f103 0210 	add.w	r2, r3, #16
   82dee:	7913      	ldrb	r3, [r2, #4]
   82df0:	f36f 0300 	bfc	r3, #0, #1
   82df4:	7113      	strb	r3, [r2, #4]
		udd_ep_job[i].stall_requested = false;
   82df6:	79fa      	ldrb	r2, [r7, #7]
   82df8:	490b      	ldr	r1, [pc, #44]	; (82e28 <udd_ep_job_table_reset+0x58>)
   82dfa:	4613      	mov	r3, r2
   82dfc:	005b      	lsls	r3, r3, #1
   82dfe:	4413      	add	r3, r2
   82e00:	00db      	lsls	r3, r3, #3
   82e02:	440b      	add	r3, r1
   82e04:	f103 0210 	add.w	r2, r3, #16
   82e08:	7913      	ldrb	r3, [r2, #4]
   82e0a:	f36f 0382 	bfc	r3, #2, #1
   82e0e:	7113      	strb	r3, [r2, #4]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   82e10:	79fb      	ldrb	r3, [r7, #7]
   82e12:	3301      	adds	r3, #1
   82e14:	71fb      	strb	r3, [r7, #7]
   82e16:	79fb      	ldrb	r3, [r7, #7]
   82e18:	2b01      	cmp	r3, #1
   82e1a:	d9df      	bls.n	82ddc <udd_ep_job_table_reset+0xc>
	}
}
   82e1c:	bf00      	nop
   82e1e:	370c      	adds	r7, #12
   82e20:	46bd      	mov	sp, r7
   82e22:	bc80      	pop	{r7}
   82e24:	4770      	bx	lr
   82e26:	bf00      	nop
   82e28:	20000d04 	.word	0x20000d04

00082e2c <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
   82e2c:	b580      	push	{r7, lr}
   82e2e:	b082      	sub	sp, #8
   82e30:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   82e32:	2300      	movs	r3, #0
   82e34:	71fb      	strb	r3, [r7, #7]
   82e36:	e010      	b.n	82e5a <udd_ep_job_table_kill+0x2e>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   82e38:	79fa      	ldrb	r2, [r7, #7]
   82e3a:	4613      	mov	r3, r2
   82e3c:	005b      	lsls	r3, r3, #1
   82e3e:	4413      	add	r3, r2
   82e40:	00db      	lsls	r3, r3, #3
   82e42:	4a09      	ldr	r2, [pc, #36]	; (82e68 <udd_ep_job_table_kill+0x3c>)
   82e44:	1898      	adds	r0, r3, r2
   82e46:	79fb      	ldrb	r3, [r7, #7]
   82e48:	3301      	adds	r3, #1
   82e4a:	b2db      	uxtb	r3, r3
   82e4c:	461a      	mov	r2, r3
   82e4e:	2101      	movs	r1, #1
   82e50:	4b06      	ldr	r3, [pc, #24]	; (82e6c <udd_ep_job_table_kill+0x40>)
   82e52:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   82e54:	79fb      	ldrb	r3, [r7, #7]
   82e56:	3301      	adds	r3, #1
   82e58:	71fb      	strb	r3, [r7, #7]
   82e5a:	79fb      	ldrb	r3, [r7, #7]
   82e5c:	2b01      	cmp	r3, #1
   82e5e:	d9eb      	bls.n	82e38 <udd_ep_job_table_kill+0xc>
	}
}
   82e60:	bf00      	nop
   82e62:	3708      	adds	r7, #8
   82e64:	46bd      	mov	sp, r7
   82e66:	bd80      	pop	{r7, pc}
   82e68:	20000d04 	.word	0x20000d04
   82e6c:	00082ead 	.word	0x00082ead

00082e70 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   82e70:	b580      	push	{r7, lr}
   82e72:	b082      	sub	sp, #8
   82e74:	af00      	add	r7, sp, #0
   82e76:	4603      	mov	r3, r0
   82e78:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
   82e7a:	79fb      	ldrb	r3, [r7, #7]
   82e7c:	f003 030f 	and.w	r3, r3, #15
   82e80:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   82e82:	79fb      	ldrb	r3, [r7, #7]
   82e84:	1e5a      	subs	r2, r3, #1
   82e86:	4613      	mov	r3, r2
   82e88:	005b      	lsls	r3, r3, #1
   82e8a:	4413      	add	r3, r2
   82e8c:	00db      	lsls	r3, r3, #3
   82e8e:	4a05      	ldr	r2, [pc, #20]	; (82ea4 <udd_ep_abort_job+0x34>)
   82e90:	4413      	add	r3, r2
   82e92:	79fa      	ldrb	r2, [r7, #7]
   82e94:	2101      	movs	r1, #1
   82e96:	4618      	mov	r0, r3
   82e98:	4b03      	ldr	r3, [pc, #12]	; (82ea8 <udd_ep_abort_job+0x38>)
   82e9a:	4798      	blx	r3
}
   82e9c:	bf00      	nop
   82e9e:	3708      	adds	r7, #8
   82ea0:	46bd      	mov	sp, r7
   82ea2:	bd80      	pop	{r7, pc}
   82ea4:	20000d04 	.word	0x20000d04
   82ea8:	00082ead 	.word	0x00082ead

00082eac <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   82eac:	b580      	push	{r7, lr}
   82eae:	b082      	sub	sp, #8
   82eb0:	af00      	add	r7, sp, #0
   82eb2:	6078      	str	r0, [r7, #4]
   82eb4:	460b      	mov	r3, r1
   82eb6:	70fb      	strb	r3, [r7, #3]
   82eb8:	4613      	mov	r3, r2
   82eba:	70bb      	strb	r3, [r7, #2]
	if (ptr_job->busy == false) {
   82ebc:	687b      	ldr	r3, [r7, #4]
   82ebe:	7d1b      	ldrb	r3, [r3, #20]
   82ec0:	f003 0301 	and.w	r3, r3, #1
   82ec4:	b2db      	uxtb	r3, r3
   82ec6:	2b00      	cmp	r3, #0
   82ec8:	d01f      	beq.n	82f0a <udd_ep_finish_job+0x5e>
		return; // No on-going job
	}
	ptr_job->busy = false;
   82eca:	687a      	ldr	r2, [r7, #4]
   82ecc:	7d13      	ldrb	r3, [r2, #20]
   82ece:	f36f 0300 	bfc	r3, #0, #1
   82ed2:	7513      	strb	r3, [r2, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   82ed4:	687b      	ldr	r3, [r7, #4]
   82ed6:	681b      	ldr	r3, [r3, #0]
   82ed8:	2b00      	cmp	r3, #0
   82eda:	d018      	beq.n	82f0e <udd_ep_finish_job+0x62>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   82edc:	4a0e      	ldr	r2, [pc, #56]	; (82f18 <udd_ep_finish_job+0x6c>)
   82ede:	78bb      	ldrb	r3, [r7, #2]
   82ee0:	3308      	adds	r3, #8
   82ee2:	015b      	lsls	r3, r3, #5
   82ee4:	4413      	add	r3, r2
   82ee6:	681b      	ldr	r3, [r3, #0]
   82ee8:	f003 0308 	and.w	r3, r3, #8
   82eec:	2b00      	cmp	r3, #0
   82eee:	d003      	beq.n	82ef8 <udd_ep_finish_job+0x4c>
		ep_num |= USB_EP_DIR_IN;
   82ef0:	78bb      	ldrb	r3, [r7, #2]
   82ef2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   82ef6:	70bb      	strb	r3, [r7, #2]
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   82ef8:	687b      	ldr	r3, [r7, #4]
   82efa:	681b      	ldr	r3, [r3, #0]
   82efc:	78fa      	ldrb	r2, [r7, #3]
   82efe:	4610      	mov	r0, r2
   82f00:	687a      	ldr	r2, [r7, #4]
   82f02:	6891      	ldr	r1, [r2, #8]
   82f04:	78ba      	ldrb	r2, [r7, #2]
   82f06:	4798      	blx	r3
   82f08:	e002      	b.n	82f10 <udd_ep_finish_job+0x64>
		return; // No on-going job
   82f0a:	bf00      	nop
   82f0c:	e000      	b.n	82f10 <udd_ep_finish_job+0x64>
		return; // No callback linked to job
   82f0e:	bf00      	nop
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   82f10:	3708      	adds	r7, #8
   82f12:	46bd      	mov	sp, r7
   82f14:	bd80      	pop	{r7, pc}
   82f16:	bf00      	nop
   82f18:	400a4000 	.word	0x400a4000

00082f1c <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   82f1c:	b580      	push	{r7, lr}
   82f1e:	b086      	sub	sp, #24
   82f20:	af00      	add	r7, sp, #0
   82f22:	4603      	mov	r3, r0
   82f24:	71fb      	strb	r3, [r7, #7]
	uint32_t udd_dma_ctrl = 0;
   82f26:	2300      	movs	r3, #0
   82f28:	617b      	str	r3, [r7, #20]
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   82f2a:	79fb      	ldrb	r3, [r7, #7]
   82f2c:	1e5a      	subs	r2, r3, #1
   82f2e:	4613      	mov	r3, r2
   82f30:	005b      	lsls	r3, r3, #1
   82f32:	4413      	add	r3, r2
   82f34:	00db      	lsls	r3, r3, #3
   82f36:	4a6d      	ldr	r2, [pc, #436]	; (830ec <udd_ep_trans_done+0x1d0>)
   82f38:	4413      	add	r3, r2
   82f3a:	60fb      	str	r3, [r7, #12]

	if (!ptr_job->busy) {
   82f3c:	68fb      	ldr	r3, [r7, #12]
   82f3e:	7d1b      	ldrb	r3, [r3, #20]
   82f40:	f003 0301 	and.w	r3, r3, #1
   82f44:	b2db      	uxtb	r3, r3
   82f46:	2b00      	cmp	r3, #0
   82f48:	f000 80cb 	beq.w	830e2 <udd_ep_trans_done+0x1c6>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   82f4c:	68fb      	ldr	r3, [r7, #12]
   82f4e:	68da      	ldr	r2, [r3, #12]
   82f50:	68fb      	ldr	r3, [r7, #12]
   82f52:	689b      	ldr	r3, [r3, #8]
   82f54:	429a      	cmp	r2, r3
   82f56:	f000 8098 	beq.w	8308a <udd_ep_trans_done+0x16e>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   82f5a:	68fb      	ldr	r3, [r7, #12]
   82f5c:	689a      	ldr	r2, [r3, #8]
   82f5e:	68fb      	ldr	r3, [r7, #12]
   82f60:	68db      	ldr	r3, [r3, #12]
   82f62:	1ad3      	subs	r3, r2, r3
   82f64:	613b      	str	r3, [r7, #16]

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   82f66:	693b      	ldr	r3, [r7, #16]
   82f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   82f6c:	d905      	bls.n	82f7a <udd_ep_trans_done+0x5e>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   82f6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   82f72:	613b      	str	r3, [r7, #16]

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   82f74:	2300      	movs	r3, #0
   82f76:	617b      	str	r3, [r7, #20]
   82f78:	e002      	b.n	82f80 <udd_ep_trans_done+0x64>
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   82f7a:	693b      	ldr	r3, [r7, #16]
   82f7c:	041b      	lsls	r3, r3, #16
   82f7e:	617b      	str	r3, [r7, #20]
		}
		if (Is_udd_endpoint_in(ep)) {
   82f80:	4a5b      	ldr	r2, [pc, #364]	; (830f0 <udd_ep_trans_done+0x1d4>)
   82f82:	79fb      	ldrb	r3, [r7, #7]
   82f84:	3308      	adds	r3, #8
   82f86:	015b      	lsls	r3, r3, #5
   82f88:	4413      	add	r3, r2
   82f8a:	681b      	ldr	r3, [r3, #0]
   82f8c:	f003 0308 	and.w	r3, r3, #8
   82f90:	2b00      	cmp	r3, #0
   82f92:	d01d      	beq.n	82fd0 <udd_ep_trans_done+0xb4>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   82f94:	4a56      	ldr	r2, [pc, #344]	; (830f0 <udd_ep_trans_done+0x1d4>)
   82f96:	79fb      	ldrb	r3, [r7, #7]
   82f98:	3308      	adds	r3, #8
   82f9a:	015b      	lsls	r3, r3, #5
   82f9c:	4413      	add	r3, r2
   82f9e:	681b      	ldr	r3, [r3, #0]
   82fa0:	f003 0307 	and.w	r3, r3, #7
   82fa4:	2208      	movs	r2, #8
   82fa6:	fa02 f303 	lsl.w	r3, r2, r3
   82faa:	461a      	mov	r2, r3
   82fac:	693b      	ldr	r3, [r7, #16]
   82fae:	fbb3 f1f2 	udiv	r1, r3, r2
   82fb2:	fb02 f201 	mul.w	r2, r2, r1
   82fb6:	1a9b      	subs	r3, r3, r2
   82fb8:	2b00      	cmp	r3, #0
   82fba:	d027      	beq.n	8300c <udd_ep_trans_done+0xf0>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   82fbc:	697b      	ldr	r3, [r7, #20]
   82fbe:	f043 0308 	orr.w	r3, r3, #8
   82fc2:	617b      	str	r3, [r7, #20]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   82fc4:	68fa      	ldr	r2, [r7, #12]
   82fc6:	7d13      	ldrb	r3, [r2, #20]
   82fc8:	f36f 0341 	bfc	r3, #1, #1
   82fcc:	7513      	strb	r3, [r2, #20]
   82fce:	e01d      	b.n	8300c <udd_ep_trans_done+0xf0>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   82fd0:	4a47      	ldr	r2, [pc, #284]	; (830f0 <udd_ep_trans_done+0x1d4>)
   82fd2:	79fb      	ldrb	r3, [r7, #7]
   82fd4:	3308      	adds	r3, #8
   82fd6:	015b      	lsls	r3, r3, #5
   82fd8:	4413      	add	r3, r2
   82fda:	681b      	ldr	r3, [r3, #0]
   82fdc:	091b      	lsrs	r3, r3, #4
   82fde:	f003 0303 	and.w	r3, r3, #3
   82fe2:	2b01      	cmp	r3, #1
   82fe4:	d10e      	bne.n	83004 <udd_ep_trans_done+0xe8>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   82fe6:	4a42      	ldr	r2, [pc, #264]	; (830f0 <udd_ep_trans_done+0x1d4>)
   82fe8:	79fb      	ldrb	r3, [r7, #7]
   82fea:	3308      	adds	r3, #8
   82fec:	015b      	lsls	r3, r3, #5
   82fee:	4413      	add	r3, r2
   82ff0:	681b      	ldr	r3, [r3, #0]
   82ff2:	f003 0307 	and.w	r3, r3, #7
   82ff6:	2208      	movs	r2, #8
   82ff8:	fa02 f303 	lsl.w	r3, r2, r3
   82ffc:	461a      	mov	r2, r3
   82ffe:	693b      	ldr	r3, [r7, #16]
   83000:	429a      	cmp	r2, r3
   83002:	d303      	bcc.n	8300c <udd_ep_trans_done+0xf0>

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   83004:	697b      	ldr	r3, [r7, #20]
   83006:	f043 0314 	orr.w	r3, r3, #20
   8300a:	617b      	str	r3, [r7, #20]
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   8300c:	79fb      	ldrb	r3, [r7, #7]
   8300e:	011a      	lsls	r2, r3, #4
   83010:	4b38      	ldr	r3, [pc, #224]	; (830f4 <udd_ep_trans_done+0x1d8>)
   83012:	4413      	add	r3, r2
   83014:	68fa      	ldr	r2, [r7, #12]
   83016:	6851      	ldr	r1, [r2, #4]
   83018:	68fa      	ldr	r2, [r7, #12]
   8301a:	68d2      	ldr	r2, [r2, #12]
   8301c:	440a      	add	r2, r1
   8301e:	605a      	str	r2, [r3, #4]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   83020:	697b      	ldr	r3, [r7, #20]
   83022:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   83026:	617b      	str	r3, [r7, #20]

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
   83028:	4b33      	ldr	r3, [pc, #204]	; (830f8 <udd_ep_trans_done+0x1dc>)
   8302a:	4798      	blx	r3
   8302c:	60b8      	str	r0, [r7, #8]
		if (!(udd_endpoint_dma_get_status(ep)
   8302e:	79fb      	ldrb	r3, [r7, #7]
   83030:	011a      	lsls	r2, r3, #4
   83032:	4b30      	ldr	r3, [pc, #192]	; (830f4 <udd_ep_trans_done+0x1d8>)
   83034:	4413      	add	r3, r2
   83036:	68db      	ldr	r3, [r3, #12]
				& UDPHS_DMASTATUS_END_TR_ST)) {
   83038:	f003 0310 	and.w	r3, r3, #16
		if (!(udd_endpoint_dma_get_status(ep)
   8303c:	2b00      	cmp	r3, #0
   8303e:	d11d      	bne.n	8307c <udd_ep_trans_done+0x160>
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   83040:	79fb      	ldrb	r3, [r7, #7]
   83042:	011a      	lsls	r2, r3, #4
   83044:	4b2b      	ldr	r3, [pc, #172]	; (830f4 <udd_ep_trans_done+0x1d8>)
   83046:	4413      	add	r3, r2
   83048:	697a      	ldr	r2, [r7, #20]
   8304a:	609a      	str	r2, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   8304c:	68fb      	ldr	r3, [r7, #12]
   8304e:	68da      	ldr	r2, [r3, #12]
   83050:	693b      	ldr	r3, [r7, #16]
   83052:	441a      	add	r2, r3
   83054:	68fb      	ldr	r3, [r7, #12]
   83056:	60da      	str	r2, [r3, #12]
			ptr_job->buf_load = next_trans;
   83058:	68fb      	ldr	r3, [r7, #12]
   8305a:	693a      	ldr	r2, [r7, #16]
   8305c:	611a      	str	r2, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   8305e:	4924      	ldr	r1, [pc, #144]	; (830f0 <udd_ep_trans_done+0x1d4>)
   83060:	4b23      	ldr	r3, [pc, #140]	; (830f0 <udd_ep_trans_done+0x1d4>)
   83062:	691a      	ldr	r2, [r3, #16]
   83064:	79fb      	ldrb	r3, [r7, #7]
   83066:	3b01      	subs	r3, #1
   83068:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   8306c:	fa00 f303 	lsl.w	r3, r0, r3
   83070:	4313      	orrs	r3, r2
   83072:	610b      	str	r3, [r1, #16]
			cpu_irq_restore(flags);
   83074:	68b8      	ldr	r0, [r7, #8]
   83076:	4b21      	ldr	r3, [pc, #132]	; (830fc <udd_ep_trans_done+0x1e0>)
   83078:	4798      	blx	r3
			return;
   8307a:	e033      	b.n	830e4 <udd_ep_trans_done+0x1c8>
		}
		cpu_irq_restore(flags);
   8307c:	68b8      	ldr	r0, [r7, #8]
   8307e:	4b1f      	ldr	r3, [pc, #124]	; (830fc <udd_ep_trans_done+0x1e0>)
   83080:	4798      	blx	r3

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   83082:	68fb      	ldr	r3, [r7, #12]
   83084:	68da      	ldr	r2, [r3, #12]
   83086:	68fb      	ldr	r3, [r7, #12]
   83088:	609a      	str	r2, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   8308a:	4a19      	ldr	r2, [pc, #100]	; (830f0 <udd_ep_trans_done+0x1d4>)
   8308c:	79fb      	ldrb	r3, [r7, #7]
   8308e:	3308      	adds	r3, #8
   83090:	015b      	lsls	r3, r3, #5
   83092:	4413      	add	r3, r2
   83094:	681b      	ldr	r3, [r3, #0]
   83096:	f003 0308 	and.w	r3, r3, #8
   8309a:	2b00      	cmp	r3, #0
   8309c:	d01a      	beq.n	830d4 <udd_ep_trans_done+0x1b8>
		if (ptr_job->b_shortpacket) {
   8309e:	68fb      	ldr	r3, [r7, #12]
   830a0:	7d1b      	ldrb	r3, [r3, #20]
   830a2:	f003 0302 	and.w	r3, r3, #2
   830a6:	b2db      	uxtb	r3, r3
   830a8:	2b00      	cmp	r3, #0
   830aa:	d013      	beq.n	830d4 <udd_ep_trans_done+0x1b8>
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   830ac:	4a10      	ldr	r2, [pc, #64]	; (830f0 <udd_ep_trans_done+0x1d4>)
   830ae:	79fb      	ldrb	r3, [r7, #7]
   830b0:	3308      	adds	r3, #8
   830b2:	015b      	lsls	r3, r3, #5
   830b4:	4413      	add	r3, r2
   830b6:	3304      	adds	r3, #4
   830b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   830bc:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep);
   830be:	490c      	ldr	r1, [pc, #48]	; (830f0 <udd_ep_trans_done+0x1d4>)
   830c0:	4b0b      	ldr	r3, [pc, #44]	; (830f0 <udd_ep_trans_done+0x1d4>)
   830c2:	691a      	ldr	r2, [r3, #16]
   830c4:	79fb      	ldrb	r3, [r7, #7]
   830c6:	f44f 7080 	mov.w	r0, #256	; 0x100
   830ca:	fa00 f303 	lsl.w	r3, r0, r3
   830ce:	4313      	orrs	r3, r2
   830d0:	610b      	str	r3, [r1, #16]
			return;
   830d2:	e007      	b.n	830e4 <udd_ep_trans_done+0x1c8>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   830d4:	79fb      	ldrb	r3, [r7, #7]
   830d6:	461a      	mov	r2, r3
   830d8:	2100      	movs	r1, #0
   830da:	68f8      	ldr	r0, [r7, #12]
   830dc:	4b08      	ldr	r3, [pc, #32]	; (83100 <udd_ep_trans_done+0x1e4>)
   830de:	4798      	blx	r3
   830e0:	e000      	b.n	830e4 <udd_ep_trans_done+0x1c8>
		return; // No job is running, then ignore it (system error)
   830e2:	bf00      	nop
}
   830e4:	3718      	adds	r7, #24
   830e6:	46bd      	mov	sp, r7
   830e8:	bd80      	pop	{r7, pc}
   830ea:	bf00      	nop
   830ec:	20000d04 	.word	0x20000d04
   830f0:	400a4000 	.word	0x400a4000
   830f4:	400a4300 	.word	0x400a4300
   830f8:	00081771 	.word	0x00081771
   830fc:	000817c9 	.word	0x000817c9
   83100:	00082ead 	.word	0x00082ead

00083104 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
   83104:	b580      	push	{r7, lr}
   83106:	b084      	sub	sp, #16
   83108:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   8310a:	2301      	movs	r3, #1
   8310c:	73fb      	strb	r3, [r7, #15]
   8310e:	e0e0      	b.n	832d2 <udd_ep_interrupt+0x1ce>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   83110:	7bfb      	ldrb	r3, [r7, #15]
   83112:	1e5a      	subs	r2, r3, #1
   83114:	4613      	mov	r3, r2
   83116:	005b      	lsls	r3, r3, #1
   83118:	4413      	add	r3, r2
   8311a:	00db      	lsls	r3, r3, #3
   8311c:	4a71      	ldr	r2, [pc, #452]	; (832e4 <udd_ep_interrupt+0x1e0>)
   8311e:	4413      	add	r3, r2
   83120:	60bb      	str	r3, [r7, #8]

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   83122:	4b71      	ldr	r3, [pc, #452]	; (832e8 <udd_ep_interrupt+0x1e4>)
   83124:	691a      	ldr	r2, [r3, #16]
   83126:	7bfb      	ldrb	r3, [r7, #15]
   83128:	3b01      	subs	r3, #1
   8312a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   8312e:	fa01 f303 	lsl.w	r3, r1, r3
   83132:	4013      	ands	r3, r2
   83134:	2b00      	cmp	r3, #0
   83136:	d03c      	beq.n	831b2 <udd_ep_interrupt+0xae>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   83138:	4b6b      	ldr	r3, [pc, #428]	; (832e8 <udd_ep_interrupt+0x1e4>)
   8313a:	695a      	ldr	r2, [r3, #20]
   8313c:	7bfb      	ldrb	r3, [r7, #15]
   8313e:	3b01      	subs	r3, #1
   83140:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   83144:	fa01 f303 	lsl.w	r3, r1, r3
   83148:	4013      	ands	r3, r2
   8314a:	2b00      	cmp	r3, #0
   8314c:	d031      	beq.n	831b2 <udd_ep_interrupt+0xae>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   8314e:	7bfb      	ldrb	r3, [r7, #15]
   83150:	011a      	lsls	r2, r3, #4
   83152:	4b66      	ldr	r3, [pc, #408]	; (832ec <udd_ep_interrupt+0x1e8>)
   83154:	4413      	add	r3, r2
   83156:	68db      	ldr	r3, [r3, #12]
					& UDPHS_DMASTATUS_CHANN_ENB) {
   83158:	f003 0301 	and.w	r3, r3, #1
			if (udd_endpoint_dma_get_status(ep)
   8315c:	2b00      	cmp	r3, #0
   8315e:	d001      	beq.n	83164 <udd_ep_interrupt+0x60>
				return true; // Ignore EOT_STA interrupt
   83160:	2301      	movs	r3, #1
   83162:	e0bb      	b.n	832dc <udd_ep_interrupt+0x1d8>
			}
			dbg_print("dma%d: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   83164:	4960      	ldr	r1, [pc, #384]	; (832e8 <udd_ep_interrupt+0x1e4>)
   83166:	4b60      	ldr	r3, [pc, #384]	; (832e8 <udd_ep_interrupt+0x1e4>)
   83168:	691a      	ldr	r2, [r3, #16]
   8316a:	7bfb      	ldrb	r3, [r7, #15]
   8316c:	3b01      	subs	r3, #1
   8316e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   83172:	fa00 f303 	lsl.w	r3, r0, r3
   83176:	43db      	mvns	r3, r3
   83178:	4013      	ands	r3, r2
   8317a:	610b      	str	r3, [r1, #16]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   8317c:	7bfb      	ldrb	r3, [r7, #15]
   8317e:	011a      	lsls	r2, r3, #4
   83180:	4b5a      	ldr	r3, [pc, #360]	; (832ec <udd_ep_interrupt+0x1e8>)
   83182:	4413      	add	r3, r2
   83184:	68db      	ldr	r3, [r3, #12]
					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
   83186:	0c1b      	lsrs	r3, r3, #16
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   83188:	b29b      	uxth	r3, r3
   8318a:	607b      	str	r3, [r7, #4]
			if (nb_remaining) {
   8318c:	687b      	ldr	r3, [r7, #4]
   8318e:	2b00      	cmp	r3, #0
   83190:	d009      	beq.n	831a6 <udd_ep_interrupt+0xa2>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   83192:	68bb      	ldr	r3, [r7, #8]
   83194:	68da      	ldr	r2, [r3, #12]
   83196:	687b      	ldr	r3, [r7, #4]
   83198:	1ad2      	subs	r2, r2, r3
   8319a:	68bb      	ldr	r3, [r7, #8]
   8319c:	60da      	str	r2, [r3, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   8319e:	68bb      	ldr	r3, [r7, #8]
   831a0:	68da      	ldr	r2, [r3, #12]
   831a2:	68bb      	ldr	r3, [r7, #8]
   831a4:	609a      	str	r2, [r3, #8]
			}
			udd_ep_trans_done(ep);
   831a6:	7bfb      	ldrb	r3, [r7, #15]
   831a8:	4618      	mov	r0, r3
   831aa:	4b51      	ldr	r3, [pc, #324]	; (832f0 <udd_ep_interrupt+0x1ec>)
   831ac:	4798      	blx	r3
			return true;
   831ae:	2301      	movs	r3, #1
   831b0:	e094      	b.n	832dc <udd_ep_interrupt+0x1d8>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   831b2:	4b4d      	ldr	r3, [pc, #308]	; (832e8 <udd_ep_interrupt+0x1e4>)
   831b4:	691a      	ldr	r2, [r3, #16]
   831b6:	7bfb      	ldrb	r3, [r7, #15]
   831b8:	f44f 7180 	mov.w	r1, #256	; 0x100
   831bc:	fa01 f303 	lsl.w	r3, r1, r3
   831c0:	4013      	ands	r3, r2
   831c2:	2b00      	cmp	r3, #0
   831c4:	f000 8082 	beq.w	832cc <udd_ep_interrupt+0x1c8>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   831c8:	4a47      	ldr	r2, [pc, #284]	; (832e8 <udd_ep_interrupt+0x1e4>)
   831ca:	7bfb      	ldrb	r3, [r7, #15]
   831cc:	015b      	lsls	r3, r3, #5
   831ce:	4413      	add	r3, r2
   831d0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   831d4:	681b      	ldr	r3, [r3, #0]
   831d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   831da:	2b00      	cmp	r3, #0
   831dc:	d024      	beq.n	83228 <udd_ep_interrupt+0x124>
					&& !Is_udd_tx_pkt_ready(ep)) {
   831de:	4a42      	ldr	r2, [pc, #264]	; (832e8 <udd_ep_interrupt+0x1e4>)
   831e0:	7bfb      	ldrb	r3, [r7, #15]
   831e2:	015b      	lsls	r3, r3, #5
   831e4:	4413      	add	r3, r2
   831e6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   831ea:	681b      	ldr	r3, [r3, #0]
   831ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   831f0:	2b00      	cmp	r3, #0
   831f2:	d119      	bne.n	83228 <udd_ep_interrupt+0x124>
				udd_disable_tx_pkt_ready_interrupt(ep);
   831f4:	4a3c      	ldr	r2, [pc, #240]	; (832e8 <udd_ep_interrupt+0x1e4>)
   831f6:	7bfb      	ldrb	r3, [r7, #15]
   831f8:	015b      	lsls	r3, r3, #5
   831fa:	4413      	add	r3, r2
   831fc:	f503 7384 	add.w	r3, r3, #264	; 0x108
   83200:	f44f 6200 	mov.w	r2, #2048	; 0x800
   83204:	601a      	str	r2, [r3, #0]
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   83206:	4a38      	ldr	r2, [pc, #224]	; (832e8 <udd_ep_interrupt+0x1e4>)
   83208:	7bfb      	ldrb	r3, [r7, #15]
   8320a:	015b      	lsls	r3, r3, #5
   8320c:	4413      	add	r3, r2
   8320e:	f503 738a 	add.w	r3, r3, #276	; 0x114
   83212:	f44f 6200 	mov.w	r2, #2048	; 0x800
   83216:	601a      	str	r2, [r3, #0]
				udd_ep_finish_job(ptr_job, false, ep);
   83218:	7bfb      	ldrb	r3, [r7, #15]
   8321a:	461a      	mov	r2, r3
   8321c:	2100      	movs	r1, #0
   8321e:	68b8      	ldr	r0, [r7, #8]
   83220:	4b34      	ldr	r3, [pc, #208]	; (832f4 <udd_ep_interrupt+0x1f0>)
   83222:	4798      	blx	r3
				return true;
   83224:	2301      	movs	r3, #1
   83226:	e059      	b.n	832dc <udd_ep_interrupt+0x1d8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   83228:	4a2f      	ldr	r2, [pc, #188]	; (832e8 <udd_ep_interrupt+0x1e4>)
   8322a:	7bfb      	ldrb	r3, [r7, #15]
   8322c:	015b      	lsls	r3, r3, #5
   8322e:	4413      	add	r3, r2
   83230:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   83234:	681b      	ldr	r3, [r3, #0]
   83236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   8323a:	2b00      	cmp	r3, #0
   8323c:	d046      	beq.n	832cc <udd_ep_interrupt+0x1c8>
					&& (0 == udd_nb_busy_bank(ep))) {
   8323e:	4a2a      	ldr	r2, [pc, #168]	; (832e8 <udd_ep_interrupt+0x1e4>)
   83240:	7bfb      	ldrb	r3, [r7, #15]
   83242:	015b      	lsls	r3, r3, #5
   83244:	4413      	add	r3, r2
   83246:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8324a:	681b      	ldr	r3, [r3, #0]
   8324c:	0c9b      	lsrs	r3, r3, #18
   8324e:	f003 0303 	and.w	r3, r3, #3
   83252:	2b00      	cmp	r3, #0
   83254:	d13a      	bne.n	832cc <udd_ep_interrupt+0x1c8>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   83256:	4a24      	ldr	r2, [pc, #144]	; (832e8 <udd_ep_interrupt+0x1e4>)
   83258:	7bfb      	ldrb	r3, [r7, #15]
   8325a:	015b      	lsls	r3, r3, #5
   8325c:	4413      	add	r3, r2
   8325e:	f503 7384 	add.w	r3, r3, #264	; 0x108
   83262:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   83266:	601a      	str	r2, [r3, #0]
				udd_disable_endpoint_interrupt(ep);
   83268:	491f      	ldr	r1, [pc, #124]	; (832e8 <udd_ep_interrupt+0x1e4>)
   8326a:	4b1f      	ldr	r3, [pc, #124]	; (832e8 <udd_ep_interrupt+0x1e4>)
   8326c:	691a      	ldr	r2, [r3, #16]
   8326e:	7bfb      	ldrb	r3, [r7, #15]
   83270:	f44f 7080 	mov.w	r0, #256	; 0x100
   83274:	fa00 f303 	lsl.w	r3, r0, r3
   83278:	43db      	mvns	r3, r3
   8327a:	4013      	ands	r3, r2
   8327c:	610b      	str	r3, [r1, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   8327e:	68ba      	ldr	r2, [r7, #8]
   83280:	7d13      	ldrb	r3, [r2, #20]
   83282:	f36f 0382 	bfc	r3, #2, #1
   83286:	7513      	strb	r3, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   83288:	4917      	ldr	r1, [pc, #92]	; (832e8 <udd_ep_interrupt+0x1e4>)
   8328a:	7bfb      	ldrb	r3, [r7, #15]
   8328c:	4816      	ldr	r0, [pc, #88]	; (832e8 <udd_ep_interrupt+0x1e4>)
   8328e:	7bfa      	ldrb	r2, [r7, #15]
   83290:	0152      	lsls	r2, r2, #5
   83292:	4402      	add	r2, r0
   83294:	f502 7284 	add.w	r2, r2, #264	; 0x108
   83298:	6812      	ldr	r2, [r2, #0]
   8329a:	f022 0202 	bic.w	r2, r2, #2
   8329e:	015b      	lsls	r3, r3, #5
   832a0:	440b      	add	r3, r1
   832a2:	f503 7384 	add.w	r3, r3, #264	; 0x108
   832a6:	601a      	str	r2, [r3, #0]
				udd_enable_stall_handshake(ep);
   832a8:	4a0f      	ldr	r2, [pc, #60]	; (832e8 <udd_ep_interrupt+0x1e4>)
   832aa:	7bfb      	ldrb	r3, [r7, #15]
   832ac:	015b      	lsls	r3, r3, #5
   832ae:	4413      	add	r3, r2
   832b0:	f503 738a 	add.w	r3, r3, #276	; 0x114
   832b4:	2220      	movs	r2, #32
   832b6:	601a      	str	r2, [r3, #0]
				udd_reset_data_toggle(ep);
   832b8:	4a0b      	ldr	r2, [pc, #44]	; (832e8 <udd_ep_interrupt+0x1e4>)
   832ba:	7bfb      	ldrb	r3, [r7, #15]
   832bc:	015b      	lsls	r3, r3, #5
   832be:	4413      	add	r3, r2
   832c0:	f503 738c 	add.w	r3, r3, #280	; 0x118
   832c4:	2240      	movs	r2, #64	; 0x40
   832c6:	601a      	str	r2, [r3, #0]
				//dbg_print("exHalt%x ", ep);
				return true;
   832c8:	2301      	movs	r3, #1
   832ca:	e007      	b.n	832dc <udd_ep_interrupt+0x1d8>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   832cc:	7bfb      	ldrb	r3, [r7, #15]
   832ce:	3301      	adds	r3, #1
   832d0:	73fb      	strb	r3, [r7, #15]
   832d2:	7bfb      	ldrb	r3, [r7, #15]
   832d4:	2b02      	cmp	r3, #2
   832d6:	f67f af1b 	bls.w	83110 <udd_ep_interrupt+0xc>
			}
		}
	}
	return false;
   832da:	2300      	movs	r3, #0
}
   832dc:	4618      	mov	r0, r3
   832de:	3710      	adds	r7, #16
   832e0:	46bd      	mov	sp, r7
   832e2:	bd80      	pop	{r7, pc}
   832e4:	20000d04 	.word	0x20000d04
   832e8:	400a4000 	.word	0x400a4000
   832ec:	400a4300 	.word	0x400a4300
   832f0:	00082f1d 	.word	0x00082f1d
   832f4:	00082ead 	.word	0x00082ead

000832f8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   832f8:	b580      	push	{r7, lr}
   832fa:	b082      	sub	sp, #8
   832fc:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   832fe:	4b1e      	ldr	r3, [pc, #120]	; (83378 <Reset_Handler+0x80>)
   83300:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   83302:	4b1e      	ldr	r3, [pc, #120]	; (8337c <Reset_Handler+0x84>)
   83304:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   83306:	687a      	ldr	r2, [r7, #4]
   83308:	683b      	ldr	r3, [r7, #0]
   8330a:	429a      	cmp	r2, r3
   8330c:	d00c      	beq.n	83328 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   8330e:	e007      	b.n	83320 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   83310:	683b      	ldr	r3, [r7, #0]
   83312:	1d1a      	adds	r2, r3, #4
   83314:	603a      	str	r2, [r7, #0]
   83316:	687a      	ldr	r2, [r7, #4]
   83318:	1d11      	adds	r1, r2, #4
   8331a:	6079      	str	r1, [r7, #4]
   8331c:	6812      	ldr	r2, [r2, #0]
   8331e:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   83320:	683b      	ldr	r3, [r7, #0]
   83322:	4a17      	ldr	r2, [pc, #92]	; (83380 <Reset_Handler+0x88>)
   83324:	4293      	cmp	r3, r2
   83326:	d3f3      	bcc.n	83310 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83328:	4b16      	ldr	r3, [pc, #88]	; (83384 <Reset_Handler+0x8c>)
   8332a:	603b      	str	r3, [r7, #0]
   8332c:	e004      	b.n	83338 <Reset_Handler+0x40>
		*pDest++ = 0;
   8332e:	683b      	ldr	r3, [r7, #0]
   83330:	1d1a      	adds	r2, r3, #4
   83332:	603a      	str	r2, [r7, #0]
   83334:	2200      	movs	r2, #0
   83336:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   83338:	683b      	ldr	r3, [r7, #0]
   8333a:	4a13      	ldr	r2, [pc, #76]	; (83388 <Reset_Handler+0x90>)
   8333c:	4293      	cmp	r3, r2
   8333e:	d3f6      	bcc.n	8332e <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   83340:	4b12      	ldr	r3, [pc, #72]	; (8338c <Reset_Handler+0x94>)
   83342:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   83344:	4a12      	ldr	r2, [pc, #72]	; (83390 <Reset_Handler+0x98>)
   83346:	687b      	ldr	r3, [r7, #4]
   83348:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   8334c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   83350:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   83352:	687b      	ldr	r3, [r7, #4]
   83354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   83358:	d309      	bcc.n	8336e <Reset_Handler+0x76>
   8335a:	687b      	ldr	r3, [r7, #4]
   8335c:	4a0d      	ldr	r2, [pc, #52]	; (83394 <Reset_Handler+0x9c>)
   8335e:	4293      	cmp	r3, r2
   83360:	d805      	bhi.n	8336e <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   83362:	4a0b      	ldr	r2, [pc, #44]	; (83390 <Reset_Handler+0x98>)
   83364:	4b0a      	ldr	r3, [pc, #40]	; (83390 <Reset_Handler+0x98>)
   83366:	689b      	ldr	r3, [r3, #8]
   83368:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8336c:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8336e:	4b0a      	ldr	r3, [pc, #40]	; (83398 <Reset_Handler+0xa0>)
   83370:	4798      	blx	r3

	/* Branch to main function */
	main();
   83372:	4b0a      	ldr	r3, [pc, #40]	; (8339c <Reset_Handler+0xa4>)
   83374:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   83376:	e7fe      	b.n	83376 <Reset_Handler+0x7e>
   83378:	000857ac 	.word	0x000857ac
   8337c:	20000000 	.word	0x20000000
   83380:	200007dc 	.word	0x200007dc
   83384:	200007dc 	.word	0x200007dc
   83388:	20000d98 	.word	0x20000d98
   8338c:	00080000 	.word	0x00080000
   83390:	e000ed00 	.word	0xe000ed00
   83394:	20003fff 	.word	0x20003fff
   83398:	000855dd 	.word	0x000855dd
   8339c:	00080acd 	.word	0x00080acd

000833a0 <osc_enable>:
{
   833a0:	b580      	push	{r7, lr}
   833a2:	b082      	sub	sp, #8
   833a4:	af00      	add	r7, sp, #0
   833a6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   833a8:	687b      	ldr	r3, [r7, #4]
   833aa:	2b07      	cmp	r3, #7
   833ac:	d82e      	bhi.n	8340c <osc_enable+0x6c>
   833ae:	a201      	add	r2, pc, #4	; (adr r2, 833b4 <osc_enable+0x14>)
   833b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   833b4:	0008340b 	.word	0x0008340b
   833b8:	000833d5 	.word	0x000833d5
   833bc:	000833dd 	.word	0x000833dd
   833c0:	000833e5 	.word	0x000833e5
   833c4:	000833ed 	.word	0x000833ed
   833c8:	000833f5 	.word	0x000833f5
   833cc:	000833fd 	.word	0x000833fd
   833d0:	00083405 	.word	0x00083405
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   833d4:	2000      	movs	r0, #0
   833d6:	4b0f      	ldr	r3, [pc, #60]	; (83414 <osc_enable+0x74>)
   833d8:	4798      	blx	r3
		break;
   833da:	e017      	b.n	8340c <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   833dc:	2001      	movs	r0, #1
   833de:	4b0d      	ldr	r3, [pc, #52]	; (83414 <osc_enable+0x74>)
   833e0:	4798      	blx	r3
		break;
   833e2:	e013      	b.n	8340c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   833e4:	2000      	movs	r0, #0
   833e6:	4b0c      	ldr	r3, [pc, #48]	; (83418 <osc_enable+0x78>)
   833e8:	4798      	blx	r3
		break;
   833ea:	e00f      	b.n	8340c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   833ec:	2010      	movs	r0, #16
   833ee:	4b0a      	ldr	r3, [pc, #40]	; (83418 <osc_enable+0x78>)
   833f0:	4798      	blx	r3
		break;
   833f2:	e00b      	b.n	8340c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   833f4:	2020      	movs	r0, #32
   833f6:	4b08      	ldr	r3, [pc, #32]	; (83418 <osc_enable+0x78>)
   833f8:	4798      	blx	r3
		break;
   833fa:	e007      	b.n	8340c <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   833fc:	203e      	movs	r0, #62	; 0x3e
   833fe:	4b07      	ldr	r3, [pc, #28]	; (8341c <osc_enable+0x7c>)
   83400:	4798      	blx	r3
		break;
   83402:	e003      	b.n	8340c <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   83404:	4b06      	ldr	r3, [pc, #24]	; (83420 <osc_enable+0x80>)
   83406:	4798      	blx	r3
		break;
   83408:	e000      	b.n	8340c <osc_enable+0x6c>
		break;
   8340a:	bf00      	nop
}
   8340c:	bf00      	nop
   8340e:	3708      	adds	r7, #8
   83410:	46bd      	mov	sp, r7
   83412:	bd80      	pop	{r7, pc}
   83414:	000837f1 	.word	0x000837f1
   83418:	0008385d 	.word	0x0008385d
   8341c:	000838d1 	.word	0x000838d1
   83420:	0008391d 	.word	0x0008391d

00083424 <osc_is_ready>:
{
   83424:	b580      	push	{r7, lr}
   83426:	b082      	sub	sp, #8
   83428:	af00      	add	r7, sp, #0
   8342a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8342c:	687b      	ldr	r3, [r7, #4]
   8342e:	2b07      	cmp	r3, #7
   83430:	d82f      	bhi.n	83492 <osc_is_ready+0x6e>
   83432:	a201      	add	r2, pc, #4	; (adr r2, 83438 <osc_is_ready+0x14>)
   83434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83438:	00083459 	.word	0x00083459
   8343c:	0008345d 	.word	0x0008345d
   83440:	0008345d 	.word	0x0008345d
   83444:	0008346f 	.word	0x0008346f
   83448:	0008346f 	.word	0x0008346f
   8344c:	0008346f 	.word	0x0008346f
   83450:	00083481 	.word	0x00083481
   83454:	00083481 	.word	0x00083481
		return 1;
   83458:	2301      	movs	r3, #1
   8345a:	e01b      	b.n	83494 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   8345c:	4b0f      	ldr	r3, [pc, #60]	; (8349c <osc_is_ready+0x78>)
   8345e:	4798      	blx	r3
   83460:	4603      	mov	r3, r0
   83462:	2b00      	cmp	r3, #0
   83464:	bf14      	ite	ne
   83466:	2301      	movne	r3, #1
   83468:	2300      	moveq	r3, #0
   8346a:	b2db      	uxtb	r3, r3
   8346c:	e012      	b.n	83494 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   8346e:	4b0c      	ldr	r3, [pc, #48]	; (834a0 <osc_is_ready+0x7c>)
   83470:	4798      	blx	r3
   83472:	4603      	mov	r3, r0
   83474:	2b00      	cmp	r3, #0
   83476:	bf14      	ite	ne
   83478:	2301      	movne	r3, #1
   8347a:	2300      	moveq	r3, #0
   8347c:	b2db      	uxtb	r3, r3
   8347e:	e009      	b.n	83494 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   83480:	4b08      	ldr	r3, [pc, #32]	; (834a4 <osc_is_ready+0x80>)
   83482:	4798      	blx	r3
   83484:	4603      	mov	r3, r0
   83486:	2b00      	cmp	r3, #0
   83488:	bf14      	ite	ne
   8348a:	2301      	movne	r3, #1
   8348c:	2300      	moveq	r3, #0
   8348e:	b2db      	uxtb	r3, r3
   83490:	e000      	b.n	83494 <osc_is_ready+0x70>
	return 0;
   83492:	2300      	movs	r3, #0
}
   83494:	4618      	mov	r0, r3
   83496:	3708      	adds	r7, #8
   83498:	46bd      	mov	sp, r7
   8349a:	bd80      	pop	{r7, pc}
   8349c:	00083829 	.word	0x00083829
   834a0:	000838b9 	.word	0x000838b9
   834a4:	00083969 	.word	0x00083969

000834a8 <osc_get_rate>:
{
   834a8:	b480      	push	{r7}
   834aa:	b083      	sub	sp, #12
   834ac:	af00      	add	r7, sp, #0
   834ae:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   834b0:	687b      	ldr	r3, [r7, #4]
   834b2:	2b07      	cmp	r3, #7
   834b4:	d823      	bhi.n	834fe <osc_get_rate+0x56>
   834b6:	a201      	add	r2, pc, #4	; (adr r2, 834bc <osc_get_rate+0x14>)
   834b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   834bc:	000834dd 	.word	0x000834dd
   834c0:	000834e3 	.word	0x000834e3
   834c4:	000834e7 	.word	0x000834e7
   834c8:	000834eb 	.word	0x000834eb
   834cc:	000834ef 	.word	0x000834ef
   834d0:	000834f3 	.word	0x000834f3
   834d4:	000834f7 	.word	0x000834f7
   834d8:	000834fb 	.word	0x000834fb
		return OSC_SLCK_32K_RC_HZ;
   834dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   834e0:	e00e      	b.n	83500 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   834e2:	2300      	movs	r3, #0
   834e4:	e00c      	b.n	83500 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   834e6:	2300      	movs	r3, #0
   834e8:	e00a      	b.n	83500 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   834ea:	4b08      	ldr	r3, [pc, #32]	; (8350c <osc_get_rate+0x64>)
   834ec:	e008      	b.n	83500 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   834ee:	4b08      	ldr	r3, [pc, #32]	; (83510 <osc_get_rate+0x68>)
   834f0:	e006      	b.n	83500 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   834f2:	4b08      	ldr	r3, [pc, #32]	; (83514 <osc_get_rate+0x6c>)
   834f4:	e004      	b.n	83500 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   834f6:	4b07      	ldr	r3, [pc, #28]	; (83514 <osc_get_rate+0x6c>)
   834f8:	e002      	b.n	83500 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   834fa:	4b06      	ldr	r3, [pc, #24]	; (83514 <osc_get_rate+0x6c>)
   834fc:	e000      	b.n	83500 <osc_get_rate+0x58>
	return 0;
   834fe:	2300      	movs	r3, #0
}
   83500:	4618      	mov	r0, r3
   83502:	370c      	adds	r7, #12
   83504:	46bd      	mov	sp, r7
   83506:	bc80      	pop	{r7}
   83508:	4770      	bx	lr
   8350a:	bf00      	nop
   8350c:	003d0900 	.word	0x003d0900
   83510:	007a1200 	.word	0x007a1200
   83514:	00b71b00 	.word	0x00b71b00

00083518 <osc_wait_ready>:
{
   83518:	b580      	push	{r7, lr}
   8351a:	b082      	sub	sp, #8
   8351c:	af00      	add	r7, sp, #0
   8351e:	4603      	mov	r3, r0
   83520:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   83522:	bf00      	nop
   83524:	79fb      	ldrb	r3, [r7, #7]
   83526:	4618      	mov	r0, r3
   83528:	4b05      	ldr	r3, [pc, #20]	; (83540 <osc_wait_ready+0x28>)
   8352a:	4798      	blx	r3
   8352c:	4603      	mov	r3, r0
   8352e:	f083 0301 	eor.w	r3, r3, #1
   83532:	b2db      	uxtb	r3, r3
   83534:	2b00      	cmp	r3, #0
   83536:	d1f5      	bne.n	83524 <osc_wait_ready+0xc>
}
   83538:	bf00      	nop
   8353a:	3708      	adds	r7, #8
   8353c:	46bd      	mov	sp, r7
   8353e:	bd80      	pop	{r7, pc}
   83540:	00083425 	.word	0x00083425

00083544 <pll_config_init>:
{
   83544:	b580      	push	{r7, lr}
   83546:	b086      	sub	sp, #24
   83548:	af00      	add	r7, sp, #0
   8354a:	60f8      	str	r0, [r7, #12]
   8354c:	607a      	str	r2, [r7, #4]
   8354e:	603b      	str	r3, [r7, #0]
   83550:	460b      	mov	r3, r1
   83552:	72fb      	strb	r3, [r7, #11]
	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   83554:	687b      	ldr	r3, [r7, #4]
   83556:	2b00      	cmp	r3, #0
   83558:	d107      	bne.n	8356a <pll_config_init+0x26>
   8355a:	683b      	ldr	r3, [r7, #0]
   8355c:	2b00      	cmp	r3, #0
   8355e:	d104      	bne.n	8356a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   83560:	68fb      	ldr	r3, [r7, #12]
   83562:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   83566:	601a      	str	r2, [r3, #0]
   83568:	e019      	b.n	8359e <pll_config_init+0x5a>
		vco_hz = osc_get_rate(e_src) / ul_div;
   8356a:	7afb      	ldrb	r3, [r7, #11]
   8356c:	4618      	mov	r0, r3
   8356e:	4b0e      	ldr	r3, [pc, #56]	; (835a8 <pll_config_init+0x64>)
   83570:	4798      	blx	r3
   83572:	4602      	mov	r2, r0
   83574:	687b      	ldr	r3, [r7, #4]
   83576:	fbb2 f3f3 	udiv	r3, r2, r3
   8357a:	617b      	str	r3, [r7, #20]
		vco_hz *= ul_mul;
   8357c:	697b      	ldr	r3, [r7, #20]
   8357e:	683a      	ldr	r2, [r7, #0]
   83580:	fb02 f303 	mul.w	r3, r2, r3
   83584:	617b      	str	r3, [r7, #20]
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   83586:	683b      	ldr	r3, [r7, #0]
   83588:	3b01      	subs	r3, #1
   8358a:	041a      	lsls	r2, r3, #16
   8358c:	4b07      	ldr	r3, [pc, #28]	; (835ac <pll_config_init+0x68>)
   8358e:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   83590:	687a      	ldr	r2, [r7, #4]
   83592:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   83594:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   83596:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   8359a:	68fb      	ldr	r3, [r7, #12]
   8359c:	601a      	str	r2, [r3, #0]
}
   8359e:	bf00      	nop
   835a0:	3718      	adds	r7, #24
   835a2:	46bd      	mov	sp, r7
   835a4:	bd80      	pop	{r7, pc}
   835a6:	bf00      	nop
   835a8:	000834a9 	.word	0x000834a9
   835ac:	07ff0000 	.word	0x07ff0000

000835b0 <pll_enable>:
{
   835b0:	b580      	push	{r7, lr}
   835b2:	b082      	sub	sp, #8
   835b4:	af00      	add	r7, sp, #0
   835b6:	6078      	str	r0, [r7, #4]
   835b8:	6039      	str	r1, [r7, #0]
	if (ul_pll_id == PLLA_ID) {
   835ba:	683b      	ldr	r3, [r7, #0]
   835bc:	2b00      	cmp	r3, #0
   835be:	d108      	bne.n	835d2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   835c0:	4b09      	ldr	r3, [pc, #36]	; (835e8 <pll_enable+0x38>)
   835c2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   835c4:	4a09      	ldr	r2, [pc, #36]	; (835ec <pll_enable+0x3c>)
   835c6:	687b      	ldr	r3, [r7, #4]
   835c8:	681b      	ldr	r3, [r3, #0]
   835ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   835ce:	6293      	str	r3, [r2, #40]	; 0x28
}
   835d0:	e005      	b.n	835de <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   835d2:	4a06      	ldr	r2, [pc, #24]	; (835ec <pll_enable+0x3c>)
   835d4:	687b      	ldr	r3, [r7, #4]
   835d6:	681b      	ldr	r3, [r3, #0]
   835d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   835dc:	61d3      	str	r3, [r2, #28]
}
   835de:	bf00      	nop
   835e0:	3708      	adds	r7, #8
   835e2:	46bd      	mov	sp, r7
   835e4:	bd80      	pop	{r7, pc}
   835e6:	bf00      	nop
   835e8:	000839d9 	.word	0x000839d9
   835ec:	400e0400 	.word	0x400e0400

000835f0 <pll_is_locked>:
{
   835f0:	b580      	push	{r7, lr}
   835f2:	b082      	sub	sp, #8
   835f4:	af00      	add	r7, sp, #0
   835f6:	6078      	str	r0, [r7, #4]
	if (ul_pll_id == PLLA_ID) {
   835f8:	687b      	ldr	r3, [r7, #4]
   835fa:	2b00      	cmp	r3, #0
   835fc:	d103      	bne.n	83606 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   835fe:	4b05      	ldr	r3, [pc, #20]	; (83614 <pll_is_locked+0x24>)
   83600:	4798      	blx	r3
   83602:	4603      	mov	r3, r0
   83604:	e002      	b.n	8360c <pll_is_locked+0x1c>
		return pmc_is_locked_upll();
   83606:	4b04      	ldr	r3, [pc, #16]	; (83618 <pll_is_locked+0x28>)
   83608:	4798      	blx	r3
   8360a:	4603      	mov	r3, r0
}
   8360c:	4618      	mov	r0, r3
   8360e:	3708      	adds	r7, #8
   83610:	46bd      	mov	sp, r7
   83612:	bd80      	pop	{r7, pc}
   83614:	000839f1 	.word	0x000839f1
   83618:	00083a25 	.word	0x00083a25

0008361c <pll_enable_source>:
{
   8361c:	b580      	push	{r7, lr}
   8361e:	b082      	sub	sp, #8
   83620:	af00      	add	r7, sp, #0
   83622:	4603      	mov	r3, r0
   83624:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   83626:	79fb      	ldrb	r3, [r7, #7]
   83628:	3b03      	subs	r3, #3
   8362a:	2b04      	cmp	r3, #4
   8362c:	d808      	bhi.n	83640 <pll_enable_source+0x24>
		osc_enable(e_src);
   8362e:	79fb      	ldrb	r3, [r7, #7]
   83630:	4618      	mov	r0, r3
   83632:	4b06      	ldr	r3, [pc, #24]	; (8364c <pll_enable_source+0x30>)
   83634:	4798      	blx	r3
		osc_wait_ready(e_src);
   83636:	79fb      	ldrb	r3, [r7, #7]
   83638:	4618      	mov	r0, r3
   8363a:	4b05      	ldr	r3, [pc, #20]	; (83650 <pll_enable_source+0x34>)
   8363c:	4798      	blx	r3
		break;
   8363e:	e000      	b.n	83642 <pll_enable_source+0x26>
		break;
   83640:	bf00      	nop
}
   83642:	bf00      	nop
   83644:	3708      	adds	r7, #8
   83646:	46bd      	mov	sp, r7
   83648:	bd80      	pop	{r7, pc}
   8364a:	bf00      	nop
   8364c:	000833a1 	.word	0x000833a1
   83650:	00083519 	.word	0x00083519

00083654 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   83654:	b580      	push	{r7, lr}
   83656:	b082      	sub	sp, #8
   83658:	af00      	add	r7, sp, #0
   8365a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8365c:	bf00      	nop
   8365e:	6878      	ldr	r0, [r7, #4]
   83660:	4b04      	ldr	r3, [pc, #16]	; (83674 <pll_wait_for_lock+0x20>)
   83662:	4798      	blx	r3
   83664:	4603      	mov	r3, r0
   83666:	2b00      	cmp	r3, #0
   83668:	d0f9      	beq.n	8365e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   8366a:	2300      	movs	r3, #0
}
   8366c:	4618      	mov	r0, r3
   8366e:	3708      	adds	r7, #8
   83670:	46bd      	mov	sp, r7
   83672:	bd80      	pop	{r7, pc}
   83674:	000835f1 	.word	0x000835f1

00083678 <sysclk_get_main_hz>:
{
   83678:	b580      	push	{r7, lr}
   8367a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   8367c:	2006      	movs	r0, #6
   8367e:	4b03      	ldr	r3, [pc, #12]	; (8368c <sysclk_get_main_hz+0x14>)
   83680:	4798      	blx	r3
   83682:	4603      	mov	r3, r0
   83684:	011b      	lsls	r3, r3, #4
}
   83686:	4618      	mov	r0, r3
   83688:	bd80      	pop	{r7, pc}
   8368a:	bf00      	nop
   8368c:	000834a9 	.word	0x000834a9

00083690 <sysclk_get_cpu_hz>:
{
   83690:	b580      	push	{r7, lr}
   83692:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   83694:	4b02      	ldr	r3, [pc, #8]	; (836a0 <sysclk_get_cpu_hz+0x10>)
   83696:	4798      	blx	r3
   83698:	4603      	mov	r3, r0
   8369a:	085b      	lsrs	r3, r3, #1
}
   8369c:	4618      	mov	r0, r3
   8369e:	bd80      	pop	{r7, pc}
   836a0:	00083679 	.word	0x00083679

000836a4 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   836a4:	b590      	push	{r4, r7, lr}
   836a6:	b083      	sub	sp, #12
   836a8:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	pll_enable_source(CONFIG_PLL1_SOURCE);
   836aa:	2006      	movs	r0, #6
   836ac:	4b09      	ldr	r3, [pc, #36]	; (836d4 <sysclk_enable_usb+0x30>)
   836ae:	4798      	blx	r3
	pll_config_defaults(&pllcfg, 1);
   836b0:	1d38      	adds	r0, r7, #4
   836b2:	2300      	movs	r3, #0
   836b4:	2200      	movs	r2, #0
   836b6:	2106      	movs	r1, #6
   836b8:	4c07      	ldr	r4, [pc, #28]	; (836d8 <sysclk_enable_usb+0x34>)
   836ba:	47a0      	blx	r4
	pll_enable(&pllcfg, 1);
   836bc:	1d3b      	adds	r3, r7, #4
   836be:	2101      	movs	r1, #1
   836c0:	4618      	mov	r0, r3
   836c2:	4b06      	ldr	r3, [pc, #24]	; (836dc <sysclk_enable_usb+0x38>)
   836c4:	4798      	blx	r3
	pll_wait_for_lock(1);
   836c6:	2001      	movs	r0, #1
   836c8:	4b05      	ldr	r3, [pc, #20]	; (836e0 <sysclk_enable_usb+0x3c>)
   836ca:	4798      	blx	r3
}
   836cc:	bf00      	nop
   836ce:	370c      	adds	r7, #12
   836d0:	46bd      	mov	sp, r7
   836d2:	bd90      	pop	{r4, r7, pc}
   836d4:	0008361d 	.word	0x0008361d
   836d8:	00083545 	.word	0x00083545
   836dc:	000835b1 	.word	0x000835b1
   836e0:	00083655 	.word	0x00083655

000836e4 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   836e4:	b590      	push	{r4, r7, lr}
   836e6:	b083      	sub	sp, #12
   836e8:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   836ea:	4816      	ldr	r0, [pc, #88]	; (83744 <sysclk_init+0x60>)
   836ec:	4b16      	ldr	r3, [pc, #88]	; (83748 <sysclk_init+0x64>)
   836ee:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   836f0:	2006      	movs	r0, #6
   836f2:	4b16      	ldr	r3, [pc, #88]	; (8374c <sysclk_init+0x68>)
   836f4:	4798      	blx	r3
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   836f6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   836fa:	4b15      	ldr	r3, [pc, #84]	; (83750 <sysclk_init+0x6c>)
   836fc:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   836fe:	bf00      	nop
   83700:	4b14      	ldr	r3, [pc, #80]	; (83754 <sysclk_init+0x70>)
   83702:	4798      	blx	r3
   83704:	4603      	mov	r3, r0
   83706:	2b00      	cmp	r3, #0
   83708:	d0fa      	beq.n	83700 <sysclk_init+0x1c>
		}
		pll_config_defaults(&pllcfg, 0);
   8370a:	1d38      	adds	r0, r7, #4
   8370c:	2310      	movs	r3, #16
   8370e:	2201      	movs	r2, #1
   83710:	2106      	movs	r1, #6
   83712:	4c11      	ldr	r4, [pc, #68]	; (83758 <sysclk_init+0x74>)
   83714:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   83716:	1d3b      	adds	r3, r7, #4
   83718:	2100      	movs	r1, #0
   8371a:	4618      	mov	r0, r3
   8371c:	4b0f      	ldr	r3, [pc, #60]	; (8375c <sysclk_init+0x78>)
   8371e:	4798      	blx	r3
		pll_wait_for_lock(0);
   83720:	2000      	movs	r0, #0
   83722:	4b0f      	ldr	r3, [pc, #60]	; (83760 <sysclk_init+0x7c>)
   83724:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   83726:	2010      	movs	r0, #16
   83728:	4b0e      	ldr	r3, [pc, #56]	; (83764 <sysclk_init+0x80>)
   8372a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8372c:	4b0e      	ldr	r3, [pc, #56]	; (83768 <sysclk_init+0x84>)
   8372e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83730:	4b0e      	ldr	r3, [pc, #56]	; (8376c <sysclk_init+0x88>)
   83732:	4798      	blx	r3
   83734:	4603      	mov	r3, r0
   83736:	4618      	mov	r0, r3
   83738:	4b03      	ldr	r3, [pc, #12]	; (83748 <sysclk_init+0x64>)
   8373a:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   8373c:	bf00      	nop
   8373e:	370c      	adds	r7, #12
   83740:	46bd      	mov	sp, r7
   83742:	bd90      	pop	{r4, r7, pc}
   83744:	05b8d800 	.word	0x05b8d800
   83748:	200001bd 	.word	0x200001bd
   8374c:	0008361d 	.word	0x0008361d
   83750:	00083999 	.word	0x00083999
   83754:	00083981 	.word	0x00083981
   83758:	00083545 	.word	0x00083545
   8375c:	000835b1 	.word	0x000835b1
   83760:	00083655 	.word	0x00083655
   83764:	00083771 	.word	0x00083771
   83768:	0008545d 	.word	0x0008545d
   8376c:	00083691 	.word	0x00083691

00083770 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   83770:	b480      	push	{r7}
   83772:	b085      	sub	sp, #20
   83774:	af00      	add	r7, sp, #0
   83776:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83778:	491c      	ldr	r1, [pc, #112]	; (837ec <pmc_switch_mck_to_pllack+0x7c>)
   8377a:	4b1c      	ldr	r3, [pc, #112]	; (837ec <pmc_switch_mck_to_pllack+0x7c>)
   8377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8377e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   83782:	687b      	ldr	r3, [r7, #4]
   83784:	4313      	orrs	r3, r2
   83786:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83788:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8378c:	60fb      	str	r3, [r7, #12]
   8378e:	e007      	b.n	837a0 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83790:	68fb      	ldr	r3, [r7, #12]
   83792:	2b00      	cmp	r3, #0
   83794:	d101      	bne.n	8379a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   83796:	2301      	movs	r3, #1
   83798:	e023      	b.n	837e2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   8379a:	68fb      	ldr	r3, [r7, #12]
   8379c:	3b01      	subs	r3, #1
   8379e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   837a0:	4b12      	ldr	r3, [pc, #72]	; (837ec <pmc_switch_mck_to_pllack+0x7c>)
   837a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   837a4:	f003 0308 	and.w	r3, r3, #8
   837a8:	2b00      	cmp	r3, #0
   837aa:	d0f1      	beq.n	83790 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   837ac:	4a0f      	ldr	r2, [pc, #60]	; (837ec <pmc_switch_mck_to_pllack+0x7c>)
   837ae:	4b0f      	ldr	r3, [pc, #60]	; (837ec <pmc_switch_mck_to_pllack+0x7c>)
   837b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   837b2:	f023 0303 	bic.w	r3, r3, #3
   837b6:	f043 0302 	orr.w	r3, r3, #2
   837ba:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   837bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   837c0:	60fb      	str	r3, [r7, #12]
   837c2:	e007      	b.n	837d4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   837c4:	68fb      	ldr	r3, [r7, #12]
   837c6:	2b00      	cmp	r3, #0
   837c8:	d101      	bne.n	837ce <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   837ca:	2301      	movs	r3, #1
   837cc:	e009      	b.n	837e2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   837ce:	68fb      	ldr	r3, [r7, #12]
   837d0:	3b01      	subs	r3, #1
   837d2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   837d4:	4b05      	ldr	r3, [pc, #20]	; (837ec <pmc_switch_mck_to_pllack+0x7c>)
   837d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   837d8:	f003 0308 	and.w	r3, r3, #8
   837dc:	2b00      	cmp	r3, #0
   837de:	d0f1      	beq.n	837c4 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   837e0:	2300      	movs	r3, #0
}
   837e2:	4618      	mov	r0, r3
   837e4:	3714      	adds	r7, #20
   837e6:	46bd      	mov	sp, r7
   837e8:	bc80      	pop	{r7}
   837ea:	4770      	bx	lr
   837ec:	400e0400 	.word	0x400e0400

000837f0 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   837f0:	b480      	push	{r7}
   837f2:	b083      	sub	sp, #12
   837f4:	af00      	add	r7, sp, #0
   837f6:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   837f8:	687b      	ldr	r3, [r7, #4]
   837fa:	2b01      	cmp	r3, #1
   837fc:	d107      	bne.n	8380e <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   837fe:	4a08      	ldr	r2, [pc, #32]	; (83820 <pmc_switch_sclk_to_32kxtal+0x30>)
   83800:	4b07      	ldr	r3, [pc, #28]	; (83820 <pmc_switch_sclk_to_32kxtal+0x30>)
   83802:	689b      	ldr	r3, [r3, #8]
   83804:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   83808:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8380c:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   8380e:	4b04      	ldr	r3, [pc, #16]	; (83820 <pmc_switch_sclk_to_32kxtal+0x30>)
   83810:	4a04      	ldr	r2, [pc, #16]	; (83824 <pmc_switch_sclk_to_32kxtal+0x34>)
   83812:	601a      	str	r2, [r3, #0]
}
   83814:	bf00      	nop
   83816:	370c      	adds	r7, #12
   83818:	46bd      	mov	sp, r7
   8381a:	bc80      	pop	{r7}
   8381c:	4770      	bx	lr
   8381e:	bf00      	nop
   83820:	400e1210 	.word	0x400e1210
   83824:	a5000008 	.word	0xa5000008

00083828 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   83828:	b480      	push	{r7}
   8382a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   8382c:	4b09      	ldr	r3, [pc, #36]	; (83854 <pmc_osc_is_ready_32kxtal+0x2c>)
   8382e:	695b      	ldr	r3, [r3, #20]
   83830:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   83834:	2b00      	cmp	r3, #0
   83836:	d007      	beq.n	83848 <pmc_osc_is_ready_32kxtal+0x20>
   83838:	4b07      	ldr	r3, [pc, #28]	; (83858 <pmc_osc_is_ready_32kxtal+0x30>)
   8383a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8383c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83840:	2b00      	cmp	r3, #0
   83842:	d001      	beq.n	83848 <pmc_osc_is_ready_32kxtal+0x20>
   83844:	2301      	movs	r3, #1
   83846:	e000      	b.n	8384a <pmc_osc_is_ready_32kxtal+0x22>
   83848:	2300      	movs	r3, #0
}
   8384a:	4618      	mov	r0, r3
   8384c:	46bd      	mov	sp, r7
   8384e:	bc80      	pop	{r7}
   83850:	4770      	bx	lr
   83852:	bf00      	nop
   83854:	400e1210 	.word	0x400e1210
   83858:	400e0400 	.word	0x400e0400

0008385c <pmc_osc_enable_fastrc>:
 * \brief Enable fast RC oscillator.
 *
 * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 */
void pmc_osc_enable_fastrc(uint32_t ul_rc)
{
   8385c:	b480      	push	{r7}
   8385e:	b083      	sub	sp, #12
   83860:	af00      	add	r7, sp, #0
   83862:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   83864:	4a13      	ldr	r2, [pc, #76]	; (838b4 <pmc_osc_enable_fastrc+0x58>)
   83866:	4b13      	ldr	r3, [pc, #76]	; (838b4 <pmc_osc_enable_fastrc+0x58>)
   83868:	6a1b      	ldr	r3, [r3, #32]
   8386a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8386e:	f043 0308 	orr.w	r3, r3, #8
   83872:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83874:	bf00      	nop
   83876:	4b0f      	ldr	r3, [pc, #60]	; (838b4 <pmc_osc_enable_fastrc+0x58>)
   83878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8387a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   8387e:	2b00      	cmp	r3, #0
   83880:	d0f9      	beq.n	83876 <pmc_osc_enable_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83882:	490c      	ldr	r1, [pc, #48]	; (838b4 <pmc_osc_enable_fastrc+0x58>)
   83884:	4b0b      	ldr	r3, [pc, #44]	; (838b4 <pmc_osc_enable_fastrc+0x58>)
   83886:	6a1b      	ldr	r3, [r3, #32]
   83888:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8388c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_rc;
   83890:	687a      	ldr	r2, [r7, #4]
   83892:	4313      	orrs	r3, r2
   83894:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83898:	620b      	str	r3, [r1, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8389a:	bf00      	nop
   8389c:	4b05      	ldr	r3, [pc, #20]	; (838b4 <pmc_osc_enable_fastrc+0x58>)
   8389e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   838a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   838a4:	2b00      	cmp	r3, #0
   838a6:	d0f9      	beq.n	8389c <pmc_osc_enable_fastrc+0x40>
}
   838a8:	bf00      	nop
   838aa:	370c      	adds	r7, #12
   838ac:	46bd      	mov	sp, r7
   838ae:	bc80      	pop	{r7}
   838b0:	4770      	bx	lr
   838b2:	bf00      	nop
   838b4:	400e0400 	.word	0x400e0400

000838b8 <pmc_osc_is_ready_fastrc>:
 * \brief Check if the main fastrc is ready.
 *
 * \retval 0 Xtal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_fastrc(void)
{
   838b8:	b480      	push	{r7}
   838ba:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
   838bc:	4b03      	ldr	r3, [pc, #12]	; (838cc <pmc_osc_is_ready_fastrc+0x14>)
   838be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   838c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
}
   838c4:	4618      	mov	r0, r3
   838c6:	46bd      	mov	sp, r7
   838c8:	bc80      	pop	{r7}
   838ca:	4770      	bx	lr
   838cc:	400e0400 	.word	0x400e0400

000838d0 <pmc_osc_enable_main_xtal>:
 * \brief Enable main XTAL oscillator.
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
   838d0:	b480      	push	{r7}
   838d2:	b085      	sub	sp, #20
   838d4:	af00      	add	r7, sp, #0
   838d6:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   838d8:	4b0f      	ldr	r3, [pc, #60]	; (83918 <pmc_osc_enable_main_xtal+0x48>)
   838da:	6a1b      	ldr	r3, [r3, #32]
   838dc:	60fb      	str	r3, [r7, #12]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   838de:	68fb      	ldr	r3, [r7, #12]
   838e0:	f023 0303 	bic.w	r3, r3, #3
   838e4:	60fb      	str	r3, [r7, #12]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   838e6:	687b      	ldr	r3, [r7, #4]
   838e8:	021b      	lsls	r3, r3, #8
   838ea:	b29a      	uxth	r2, r3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   838ec:	68fb      	ldr	r3, [r7, #12]
   838ee:	4313      	orrs	r3, r2
   838f0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   838f4:	f043 0301 	orr.w	r3, r3, #1
   838f8:	60fb      	str	r3, [r7, #12]
	PMC->CKGR_MOR = mor;
   838fa:	4a07      	ldr	r2, [pc, #28]	; (83918 <pmc_osc_enable_main_xtal+0x48>)
   838fc:	68fb      	ldr	r3, [r7, #12]
   838fe:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83900:	bf00      	nop
   83902:	4b05      	ldr	r3, [pc, #20]	; (83918 <pmc_osc_enable_main_xtal+0x48>)
   83904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83906:	f003 0301 	and.w	r3, r3, #1
   8390a:	2b00      	cmp	r3, #0
   8390c:	d0f9      	beq.n	83902 <pmc_osc_enable_main_xtal+0x32>
}
   8390e:	bf00      	nop
   83910:	3714      	adds	r7, #20
   83912:	46bd      	mov	sp, r7
   83914:	bc80      	pop	{r7}
   83916:	4770      	bx	lr
   83918:	400e0400 	.word	0x400e0400

0008391c <pmc_osc_bypass_main_xtal>:

/**
 * \brief Bypass main XTAL.
 */
void pmc_osc_bypass_main_xtal(void)
{
   8391c:	b480      	push	{r7}
   8391e:	b083      	sub	sp, #12
   83920:	af00      	add	r7, sp, #0
	uint32_t mor = PMC->CKGR_MOR;
   83922:	4b0a      	ldr	r3, [pc, #40]	; (8394c <pmc_osc_bypass_main_xtal+0x30>)
   83924:	6a1b      	ldr	r3, [r3, #32]
   83926:	607b      	str	r3, [r7, #4]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   83928:	687b      	ldr	r3, [r7, #4]
   8392a:	f023 0303 	bic.w	r3, r3, #3
   8392e:	607b      	str	r3, [r7, #4]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
   83930:	687b      	ldr	r3, [r7, #4]
   83932:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83936:	f043 0302 	orr.w	r3, r3, #2
   8393a:	607b      	str	r3, [r7, #4]
	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
	PMC->CKGR_MOR = mor;
   8393c:	4a03      	ldr	r2, [pc, #12]	; (8394c <pmc_osc_bypass_main_xtal+0x30>)
   8393e:	687b      	ldr	r3, [r7, #4]
   83940:	6213      	str	r3, [r2, #32]
	/* The MOSCXTS in PMC_SR is automatically set */
}
   83942:	bf00      	nop
   83944:	370c      	adds	r7, #12
   83946:	46bd      	mov	sp, r7
   83948:	bc80      	pop	{r7}
   8394a:	4770      	bx	lr
   8394c:	400e0400 	.word	0x400e0400

00083950 <pmc_osc_is_bypassed_main_xtal>:
 * \brief Check if the main crystal is bypassed.
 *
 * \retval 0 Xtal is bypassed, otherwise not.
 */
uint32_t pmc_osc_is_bypassed_main_xtal(void)
{
   83950:	b480      	push	{r7}
   83952:	af00      	add	r7, sp, #0
	return (PMC->CKGR_MOR & CKGR_MOR_MOSCXTBY);
   83954:	4b03      	ldr	r3, [pc, #12]	; (83964 <pmc_osc_is_bypassed_main_xtal+0x14>)
   83956:	6a1b      	ldr	r3, [r3, #32]
   83958:	f003 0302 	and.w	r3, r3, #2
}
   8395c:	4618      	mov	r0, r3
   8395e:	46bd      	mov	sp, r7
   83960:	bc80      	pop	{r7}
   83962:	4770      	bx	lr
   83964:	400e0400 	.word	0x400e0400

00083968 <pmc_osc_is_ready_main_xtal>:
 * \note If main crystal is bypassed, it's always ready.
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
   83968:	b480      	push	{r7}
   8396a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   8396c:	4b03      	ldr	r3, [pc, #12]	; (8397c <pmc_osc_is_ready_main_xtal+0x14>)
   8396e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83970:	f003 0301 	and.w	r3, r3, #1
}
   83974:	4618      	mov	r0, r3
   83976:	46bd      	mov	sp, r7
   83978:	bc80      	pop	{r7}
   8397a:	4770      	bx	lr
   8397c:	400e0400 	.word	0x400e0400

00083980 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   83980:	b480      	push	{r7}
   83982:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83984:	4b03      	ldr	r3, [pc, #12]	; (83994 <pmc_osc_is_ready_mainck+0x14>)
   83986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   8398c:	4618      	mov	r0, r3
   8398e:	46bd      	mov	sp, r7
   83990:	bc80      	pop	{r7}
   83992:	4770      	bx	lr
   83994:	400e0400 	.word	0x400e0400

00083998 <pmc_mainck_osc_select>:
 * \note This function will not enable/disable RC or Main Crystal.
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
   83998:	b480      	push	{r7}
   8399a:	b085      	sub	sp, #20
   8399c:	af00      	add	r7, sp, #0
   8399e:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   839a0:	4b0c      	ldr	r3, [pc, #48]	; (839d4 <pmc_mainck_osc_select+0x3c>)
   839a2:	6a1b      	ldr	r3, [r3, #32]
   839a4:	60fb      	str	r3, [r7, #12]
	if (ul_xtal_rc) {
   839a6:	687b      	ldr	r3, [r7, #4]
   839a8:	2b00      	cmp	r3, #0
   839aa:	d004      	beq.n	839b6 <pmc_mainck_osc_select+0x1e>
		mor |=  CKGR_MOR_MOSCSEL;
   839ac:	68fb      	ldr	r3, [r7, #12]
   839ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   839b2:	60fb      	str	r3, [r7, #12]
   839b4:	e003      	b.n	839be <pmc_mainck_osc_select+0x26>
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   839b6:	68fb      	ldr	r3, [r7, #12]
   839b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   839bc:	60fb      	str	r3, [r7, #12]
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   839be:	4a05      	ldr	r2, [pc, #20]	; (839d4 <pmc_mainck_osc_select+0x3c>)
   839c0:	68fb      	ldr	r3, [r7, #12]
   839c2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   839c6:	6213      	str	r3, [r2, #32]
}
   839c8:	bf00      	nop
   839ca:	3714      	adds	r7, #20
   839cc:	46bd      	mov	sp, r7
   839ce:	bc80      	pop	{r7}
   839d0:	4770      	bx	lr
   839d2:	bf00      	nop
   839d4:	400e0400 	.word	0x400e0400

000839d8 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   839d8:	b480      	push	{r7}
   839da:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   839dc:	4b03      	ldr	r3, [pc, #12]	; (839ec <pmc_disable_pllack+0x14>)
   839de:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   839e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   839e4:	bf00      	nop
   839e6:	46bd      	mov	sp, r7
   839e8:	bc80      	pop	{r7}
   839ea:	4770      	bx	lr
   839ec:	400e0400 	.word	0x400e0400

000839f0 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   839f0:	b480      	push	{r7}
   839f2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   839f4:	4b03      	ldr	r3, [pc, #12]	; (83a04 <pmc_is_locked_pllack+0x14>)
   839f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   839f8:	f003 0302 	and.w	r3, r3, #2
}
   839fc:	4618      	mov	r0, r3
   839fe:	46bd      	mov	sp, r7
   83a00:	bc80      	pop	{r7}
   83a02:	4770      	bx	lr
   83a04:	400e0400 	.word	0x400e0400

00083a08 <pmc_disable_upll_clock>:

/**
 * \brief Disable UPLL clock.
 */
void pmc_disable_upll_clock(void)
{
   83a08:	b480      	push	{r7}
   83a0a:	af00      	add	r7, sp, #0
	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   83a0c:	4a04      	ldr	r2, [pc, #16]	; (83a20 <pmc_disable_upll_clock+0x18>)
   83a0e:	4b04      	ldr	r3, [pc, #16]	; (83a20 <pmc_disable_upll_clock+0x18>)
   83a10:	69db      	ldr	r3, [r3, #28]
   83a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   83a16:	61d3      	str	r3, [r2, #28]
}
   83a18:	bf00      	nop
   83a1a:	46bd      	mov	sp, r7
   83a1c:	bc80      	pop	{r7}
   83a1e:	4770      	bx	lr
   83a20:	400e0400 	.word	0x400e0400

00083a24 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   83a24:	b480      	push	{r7}
   83a26:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   83a28:	4b03      	ldr	r3, [pc, #12]	; (83a38 <pmc_is_locked_upll+0x14>)
   83a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   83a30:	4618      	mov	r0, r3
   83a32:	46bd      	mov	sp, r7
   83a34:	bc80      	pop	{r7}
   83a36:	4770      	bx	lr
   83a38:	400e0400 	.word	0x400e0400

00083a3c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   83a3c:	b480      	push	{r7}
   83a3e:	b083      	sub	sp, #12
   83a40:	af00      	add	r7, sp, #0
   83a42:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   83a44:	687b      	ldr	r3, [r7, #4]
   83a46:	2b1d      	cmp	r3, #29
   83a48:	d901      	bls.n	83a4e <pmc_enable_periph_clk+0x12>
		return 1;
   83a4a:	2301      	movs	r3, #1
   83a4c:	e016      	b.n	83a7c <pmc_enable_periph_clk+0x40>
	}

	if (ul_id < 32) {
   83a4e:	687b      	ldr	r3, [r7, #4]
   83a50:	2b1f      	cmp	r3, #31
   83a52:	d812      	bhi.n	83a7a <pmc_enable_periph_clk+0x3e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   83a54:	4b0c      	ldr	r3, [pc, #48]	; (83a88 <pmc_enable_periph_clk+0x4c>)
   83a56:	699a      	ldr	r2, [r3, #24]
   83a58:	2101      	movs	r1, #1
   83a5a:	687b      	ldr	r3, [r7, #4]
   83a5c:	fa01 f303 	lsl.w	r3, r1, r3
   83a60:	401a      	ands	r2, r3
   83a62:	2101      	movs	r1, #1
   83a64:	687b      	ldr	r3, [r7, #4]
   83a66:	fa01 f303 	lsl.w	r3, r1, r3
   83a6a:	429a      	cmp	r2, r3
   83a6c:	d005      	beq.n	83a7a <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER0 = 1 << ul_id;
   83a6e:	4a06      	ldr	r2, [pc, #24]	; (83a88 <pmc_enable_periph_clk+0x4c>)
   83a70:	2101      	movs	r1, #1
   83a72:	687b      	ldr	r3, [r7, #4]
   83a74:	fa01 f303 	lsl.w	r3, r1, r3
   83a78:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   83a7a:	2300      	movs	r3, #0
}
   83a7c:	4618      	mov	r0, r3
   83a7e:	370c      	adds	r7, #12
   83a80:	46bd      	mov	sp, r7
   83a82:	bc80      	pop	{r7}
   83a84:	4770      	bx	lr
   83a86:	bf00      	nop
   83a88:	400e0400 	.word	0x400e0400

00083a8c <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
   83a8c:	b480      	push	{r7}
   83a8e:	b083      	sub	sp, #12
   83a90:	af00      	add	r7, sp, #0
   83a92:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   83a94:	687b      	ldr	r3, [r7, #4]
   83a96:	2b1d      	cmp	r3, #29
   83a98:	d901      	bls.n	83a9e <pmc_disable_periph_clk+0x12>
		return 1;
   83a9a:	2301      	movs	r3, #1
   83a9c:	e016      	b.n	83acc <pmc_disable_periph_clk+0x40>
	}

	if (ul_id < 32) {
   83a9e:	687b      	ldr	r3, [r7, #4]
   83aa0:	2b1f      	cmp	r3, #31
   83aa2:	d812      	bhi.n	83aca <pmc_disable_periph_clk+0x3e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   83aa4:	4b0c      	ldr	r3, [pc, #48]	; (83ad8 <pmc_disable_periph_clk+0x4c>)
   83aa6:	699a      	ldr	r2, [r3, #24]
   83aa8:	2101      	movs	r1, #1
   83aaa:	687b      	ldr	r3, [r7, #4]
   83aac:	fa01 f303 	lsl.w	r3, r1, r3
   83ab0:	401a      	ands	r2, r3
   83ab2:	2101      	movs	r1, #1
   83ab4:	687b      	ldr	r3, [r7, #4]
   83ab6:	fa01 f303 	lsl.w	r3, r1, r3
   83aba:	429a      	cmp	r2, r3
   83abc:	d105      	bne.n	83aca <pmc_disable_periph_clk+0x3e>
			PMC->PMC_PCDR0 = 1 << ul_id;
   83abe:	4a06      	ldr	r2, [pc, #24]	; (83ad8 <pmc_disable_periph_clk+0x4c>)
   83ac0:	2101      	movs	r1, #1
   83ac2:	687b      	ldr	r3, [r7, #4]
   83ac4:	fa01 f303 	lsl.w	r3, r1, r3
   83ac8:	6153      	str	r3, [r2, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   83aca:	2300      	movs	r3, #0
}
   83acc:	4618      	mov	r0, r3
   83ace:	370c      	adds	r7, #12
   83ad0:	46bd      	mov	sp, r7
   83ad2:	bc80      	pop	{r7}
   83ad4:	4770      	bx	lr
   83ad6:	bf00      	nop
   83ad8:	400e0400 	.word	0x400e0400

00083adc <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
   83adc:	b480      	push	{r7}
   83ade:	b083      	sub	sp, #12
   83ae0:	af00      	add	r7, sp, #0
   83ae2:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   83ae4:	4a05      	ldr	r2, [pc, #20]	; (83afc <pmc_enable_pck+0x20>)
   83ae6:	f44f 7180 	mov.w	r1, #256	; 0x100
   83aea:	687b      	ldr	r3, [r7, #4]
   83aec:	fa01 f303 	lsl.w	r3, r1, r3
   83af0:	6013      	str	r3, [r2, #0]
}
   83af2:	bf00      	nop
   83af4:	370c      	adds	r7, #12
   83af6:	46bd      	mov	sp, r7
   83af8:	bc80      	pop	{r7}
   83afa:	4770      	bx	lr
   83afc:	400e0400 	.word	0x400e0400

00083b00 <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
   83b00:	b480      	push	{r7}
   83b02:	b083      	sub	sp, #12
   83b04:	af00      	add	r7, sp, #0
   83b06:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   83b08:	687b      	ldr	r3, [r7, #4]
   83b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
   83b0e:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
   83b10:	4905      	ldr	r1, [pc, #20]	; (83b28 <pmc_set_fast_startup_input+0x28>)
   83b12:	4b05      	ldr	r3, [pc, #20]	; (83b28 <pmc_set_fast_startup_input+0x28>)
   83b14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83b16:	687b      	ldr	r3, [r7, #4]
   83b18:	4313      	orrs	r3, r2
   83b1a:	670b      	str	r3, [r1, #112]	; 0x70
}
   83b1c:	bf00      	nop
   83b1e:	370c      	adds	r7, #12
   83b20:	46bd      	mov	sp, r7
   83b22:	bc80      	pop	{r7}
   83b24:	4770      	bx	lr
   83b26:	bf00      	nop
   83b28:	400e0400 	.word	0x400e0400

00083b2c <pmc_enable_waitmode>:
/**
 * \brief Enable Wait Mode. Enter condition: WFE + (SLEEPDEEP bit = 0) +
 * (LPM bit = 1)
 */
void pmc_enable_waitmode(void)
{
   83b2c:	b480      	push	{r7}
   83b2e:	b083      	sub	sp, #12
   83b30:	af00      	add	r7, sp, #0
	uint32_t i;

	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
   83b32:	4a12      	ldr	r2, [pc, #72]	; (83b7c <pmc_enable_waitmode+0x50>)
   83b34:	4b11      	ldr	r3, [pc, #68]	; (83b7c <pmc_enable_waitmode+0x50>)
   83b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   83b38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83b3c:	6713      	str	r3, [r2, #112]	; 0x70
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
   83b3e:	4a10      	ldr	r2, [pc, #64]	; (83b80 <pmc_enable_waitmode+0x54>)
   83b40:	4b0f      	ldr	r3, [pc, #60]	; (83b80 <pmc_enable_waitmode+0x54>)
   83b42:	691b      	ldr	r3, [r3, #16]
   83b44:	f023 0304 	bic.w	r3, r3, #4
   83b48:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfe");
   83b4a:	bf20      	wfe
	__WFE();

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
   83b4c:	2300      	movs	r3, #0
   83b4e:	607b      	str	r3, [r7, #4]
   83b50:	e003      	b.n	83b5a <pmc_enable_waitmode+0x2e>
  __ASM volatile ("nop");
   83b52:	bf00      	nop
   83b54:	687b      	ldr	r3, [r7, #4]
   83b56:	3301      	adds	r3, #1
   83b58:	607b      	str	r3, [r7, #4]
   83b5a:	687b      	ldr	r3, [r7, #4]
   83b5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   83b60:	d3f7      	bcc.n	83b52 <pmc_enable_waitmode+0x26>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
   83b62:	bf00      	nop
   83b64:	4b05      	ldr	r3, [pc, #20]	; (83b7c <pmc_enable_waitmode+0x50>)
   83b66:	6a1b      	ldr	r3, [r3, #32]
   83b68:	f003 0308 	and.w	r3, r3, #8
   83b6c:	2b00      	cmp	r3, #0
   83b6e:	d0f9      	beq.n	83b64 <pmc_enable_waitmode+0x38>

}
   83b70:	bf00      	nop
   83b72:	370c      	adds	r7, #12
   83b74:	46bd      	mov	sp, r7
   83b76:	bc80      	pop	{r7}
   83b78:	4770      	bx	lr
   83b7a:	bf00      	nop
   83b7c:	400e0400 	.word	0x400e0400
   83b80:	e000ed00 	.word	0xe000ed00

00083b84 <udi_vendor_enable>:
/**
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
   83b84:	b580      	push	{r7, lr}
   83b86:	af00      	add	r7, sp, #0
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   83b88:	4b0b      	ldr	r3, [pc, #44]	; (83bb8 <udi_vendor_enable+0x34>)
   83b8a:	4798      	blx	r3
   83b8c:	4603      	mov	r3, r0
   83b8e:	78da      	ldrb	r2, [r3, #3]
   83b90:	4b0a      	ldr	r3, [pc, #40]	; (83bbc <udi_vendor_enable+0x38>)
   83b92:	701a      	strb	r2, [r3, #0]
	if (0 == udi_vendor_alternate_setting) {
   83b94:	4b09      	ldr	r3, [pc, #36]	; (83bbc <udi_vendor_enable+0x38>)
   83b96:	781b      	ldrb	r3, [r3, #0]
   83b98:	2b00      	cmp	r3, #0
   83b9a:	d109      	bne.n	83bb0 <udi_vendor_enable+0x2c>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
   83b9c:	4b08      	ldr	r3, [pc, #32]	; (83bc0 <udi_vendor_enable+0x3c>)
   83b9e:	4798      	blx	r3
   83ba0:	4603      	mov	r3, r0
   83ba2:	f083 0301 	eor.w	r3, r3, #1
   83ba6:	b2db      	uxtb	r3, r3
   83ba8:	2b00      	cmp	r3, #0
   83baa:	d001      	beq.n	83bb0 <udi_vendor_enable+0x2c>
			return false;
   83bac:	2300      	movs	r3, #0
   83bae:	e000      	b.n	83bb2 <udi_vendor_enable+0x2e>
		}
	}
	return true;
   83bb0:	2301      	movs	r3, #1
}
   83bb2:	4618      	mov	r0, r3
   83bb4:	bd80      	pop	{r7, pc}
   83bb6:	bf00      	nop
   83bb8:	00084179 	.word	0x00084179
   83bbc:	20000d35 	.word	0x20000d35
   83bc0:	00080bcd 	.word	0x00080bcd

00083bc4 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
   83bc4:	b580      	push	{r7, lr}
   83bc6:	af00      	add	r7, sp, #0
	if (0 == udi_vendor_alternate_setting) {
   83bc8:	4b03      	ldr	r3, [pc, #12]	; (83bd8 <udi_vendor_disable+0x14>)
   83bca:	781b      	ldrb	r3, [r3, #0]
   83bcc:	2b00      	cmp	r3, #0
   83bce:	d101      	bne.n	83bd4 <udi_vendor_disable+0x10>
		UDI_VENDOR_DISABLE_EXT();
   83bd0:	4b02      	ldr	r3, [pc, #8]	; (83bdc <udi_vendor_disable+0x18>)
   83bd2:	4798      	blx	r3
	}
}
   83bd4:	bf00      	nop
   83bd6:	bd80      	pop	{r7, pc}
   83bd8:	20000d35 	.word	0x20000d35
   83bdc:	00080bf9 	.word	0x00080bf9

00083be0 <udi_vendor_setup>:

bool udi_vendor_setup(void)
{
   83be0:	b580      	push	{r7, lr}
   83be2:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   83be4:	4b10      	ldr	r3, [pc, #64]	; (83c28 <udi_vendor_setup+0x48>)
   83be6:	781b      	ldrb	r3, [r3, #0]
   83be8:	b25b      	sxtb	r3, r3
   83bea:	2b00      	cmp	r3, #0
   83bec:	da09      	bge.n	83c02 <udi_vendor_setup+0x22>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83bee:	4b0e      	ldr	r3, [pc, #56]	; (83c28 <udi_vendor_setup+0x48>)
   83bf0:	781b      	ldrb	r3, [r3, #0]
   83bf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
   83bf6:	2b40      	cmp	r3, #64	; 0x40
   83bf8:	d103      	bne.n	83c02 <udi_vendor_setup+0x22>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   83bfa:	4b0c      	ldr	r3, [pc, #48]	; (83c2c <udi_vendor_setup+0x4c>)
   83bfc:	4798      	blx	r3
   83bfe:	4603      	mov	r3, r0
   83c00:	e00f      	b.n	83c22 <udi_vendor_setup+0x42>
		}
	}
	if (Udd_setup_is_out()) {
   83c02:	4b09      	ldr	r3, [pc, #36]	; (83c28 <udi_vendor_setup+0x48>)
   83c04:	781b      	ldrb	r3, [r3, #0]
   83c06:	b25b      	sxtb	r3, r3
   83c08:	2b00      	cmp	r3, #0
   83c0a:	db09      	blt.n	83c20 <udi_vendor_setup+0x40>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83c0c:	4b06      	ldr	r3, [pc, #24]	; (83c28 <udi_vendor_setup+0x48>)
   83c0e:	781b      	ldrb	r3, [r3, #0]
   83c10:	f003 0360 	and.w	r3, r3, #96	; 0x60
   83c14:	2b40      	cmp	r3, #64	; 0x40
   83c16:	d103      	bne.n	83c20 <udi_vendor_setup+0x40>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   83c18:	4b05      	ldr	r3, [pc, #20]	; (83c30 <udi_vendor_setup+0x50>)
   83c1a:	4798      	blx	r3
   83c1c:	4603      	mov	r3, r0
   83c1e:	e000      	b.n	83c22 <udi_vendor_setup+0x42>
		}
	}
	return false; // Not supported request
   83c20:	2300      	movs	r3, #0
}
   83c22:	4618      	mov	r0, r3
   83c24:	bd80      	pop	{r7, pc}
   83c26:	bf00      	nop
   83c28:	20000d54 	.word	0x20000d54
   83c2c:	00080ea5 	.word	0x00080ea5
   83c30:	00080db9 	.word	0x00080db9

00083c34 <udi_vendor_getsetting>:

uint8_t udi_vendor_getsetting(void)
{
   83c34:	b480      	push	{r7}
   83c36:	af00      	add	r7, sp, #0
	return udi_vendor_alternate_setting;
   83c38:	4b02      	ldr	r3, [pc, #8]	; (83c44 <udi_vendor_getsetting+0x10>)
   83c3a:	781b      	ldrb	r3, [r3, #0]
}
   83c3c:	4618      	mov	r0, r3
   83c3e:	46bd      	mov	sp, r7
   83c40:	bc80      	pop	{r7}
   83c42:	4770      	bx	lr
   83c44:	20000d35 	.word	0x20000d35

00083c48 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   83c48:	b590      	push	{r4, r7, lr}
   83c4a:	b087      	sub	sp, #28
   83c4c:	af02      	add	r7, sp, #8
   83c4e:	60f8      	str	r0, [r7, #12]
   83c50:	60b9      	str	r1, [r7, #8]
   83c52:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   83c54:	687b      	ldr	r3, [r7, #4]
   83c56:	9300      	str	r3, [sp, #0]
   83c58:	68bb      	ldr	r3, [r7, #8]
   83c5a:	68fa      	ldr	r2, [r7, #12]
   83c5c:	2100      	movs	r1, #0
   83c5e:	2081      	movs	r0, #129	; 0x81
   83c60:	4c03      	ldr	r4, [pc, #12]	; (83c70 <udi_vendor_bulk_in_run+0x28>)
   83c62:	47a0      	blx	r4
   83c64:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   83c66:	4618      	mov	r0, r3
   83c68:	3714      	adds	r7, #20
   83c6a:	46bd      	mov	sp, r7
   83c6c:	bd90      	pop	{r4, r7, pc}
   83c6e:	bf00      	nop
   83c70:	00082361 	.word	0x00082361

00083c74 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   83c74:	b590      	push	{r4, r7, lr}
   83c76:	b087      	sub	sp, #28
   83c78:	af02      	add	r7, sp, #8
   83c7a:	60f8      	str	r0, [r7, #12]
   83c7c:	60b9      	str	r1, [r7, #8]
   83c7e:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   83c80:	687b      	ldr	r3, [r7, #4]
   83c82:	9300      	str	r3, [sp, #0]
   83c84:	68bb      	ldr	r3, [r7, #8]
   83c86:	68fa      	ldr	r2, [r7, #12]
   83c88:	2100      	movs	r1, #0
   83c8a:	2002      	movs	r0, #2
   83c8c:	4c03      	ldr	r4, [pc, #12]	; (83c9c <udi_vendor_bulk_out_run+0x28>)
   83c8e:	47a0      	blx	r4
   83c90:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   83c92:	4618      	mov	r0, r3
   83c94:	3714      	adds	r7, #20
   83c96:	46bd      	mov	sp, r7
   83c98:	bd90      	pop	{r4, r7, pc}
   83c9a:	bf00      	nop
   83c9c:	00082361 	.word	0x00082361

00083ca0 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   83ca0:	b480      	push	{r7}
   83ca2:	b085      	sub	sp, #20
   83ca4:	af00      	add	r7, sp, #0
   83ca6:	60f8      	str	r0, [r7, #12]
   83ca8:	60b9      	str	r1, [r7, #8]
   83caa:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   83cac:	687b      	ldr	r3, [r7, #4]
   83cae:	2b00      	cmp	r3, #0
   83cb0:	d003      	beq.n	83cba <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   83cb2:	68fb      	ldr	r3, [r7, #12]
   83cb4:	68ba      	ldr	r2, [r7, #8]
   83cb6:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   83cb8:	e002      	b.n	83cc0 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
   83cba:	68fb      	ldr	r3, [r7, #12]
   83cbc:	68ba      	ldr	r2, [r7, #8]
   83cbe:	661a      	str	r2, [r3, #96]	; 0x60
}
   83cc0:	bf00      	nop
   83cc2:	3714      	adds	r7, #20
   83cc4:	46bd      	mov	sp, r7
   83cc6:	bc80      	pop	{r7}
   83cc8:	4770      	bx	lr

00083cca <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   83cca:	b480      	push	{r7}
   83ccc:	b087      	sub	sp, #28
   83cce:	af00      	add	r7, sp, #0
   83cd0:	60f8      	str	r0, [r7, #12]
   83cd2:	60b9      	str	r1, [r7, #8]
   83cd4:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   83cd6:	68fb      	ldr	r3, [r7, #12]
   83cd8:	687a      	ldr	r2, [r7, #4]
   83cda:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   83cdc:	68bb      	ldr	r3, [r7, #8]
   83cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83ce2:	d01f      	beq.n	83d24 <pio_set_peripheral+0x5a>
   83ce4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83ce8:	d805      	bhi.n	83cf6 <pio_set_peripheral+0x2c>
   83cea:	2b00      	cmp	r3, #0
   83cec:	d027      	beq.n	83d3e <pio_set_peripheral+0x74>
   83cee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83cf2:	d00a      	beq.n	83d0a <pio_set_peripheral+0x40>
   83cf4:	e01f      	b.n	83d36 <pio_set_peripheral+0x6c>
   83cf6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83cfa:	d020      	beq.n	83d3e <pio_set_peripheral+0x74>
   83cfc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83d00:	d01d      	beq.n	83d3e <pio_set_peripheral+0x74>
   83d02:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83d06:	d01a      	beq.n	83d3e <pio_set_peripheral+0x74>
   83d08:	e015      	b.n	83d36 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   83d0a:	68fb      	ldr	r3, [r7, #12]
   83d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   83d0e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   83d10:	68fb      	ldr	r3, [r7, #12]
   83d12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83d14:	687b      	ldr	r3, [r7, #4]
   83d16:	43d9      	mvns	r1, r3
   83d18:	697b      	ldr	r3, [r7, #20]
   83d1a:	400b      	ands	r3, r1
   83d1c:	401a      	ands	r2, r3
   83d1e:	68fb      	ldr	r3, [r7, #12]
   83d20:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   83d22:	e008      	b.n	83d36 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   83d24:	68fb      	ldr	r3, [r7, #12]
   83d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   83d28:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   83d2a:	687a      	ldr	r2, [r7, #4]
   83d2c:	697b      	ldr	r3, [r7, #20]
   83d2e:	431a      	orrs	r2, r3
   83d30:	68fb      	ldr	r3, [r7, #12]
   83d32:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   83d34:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   83d36:	68fb      	ldr	r3, [r7, #12]
   83d38:	687a      	ldr	r2, [r7, #4]
   83d3a:	605a      	str	r2, [r3, #4]
   83d3c:	e000      	b.n	83d40 <pio_set_peripheral+0x76>
		return;
   83d3e:	bf00      	nop
}
   83d40:	371c      	adds	r7, #28
   83d42:	46bd      	mov	sp, r7
   83d44:	bc80      	pop	{r7}
   83d46:	4770      	bx	lr

00083d48 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   83d48:	b580      	push	{r7, lr}
   83d4a:	b084      	sub	sp, #16
   83d4c:	af00      	add	r7, sp, #0
   83d4e:	60f8      	str	r0, [r7, #12]
   83d50:	60b9      	str	r1, [r7, #8]
   83d52:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   83d54:	68b9      	ldr	r1, [r7, #8]
   83d56:	68f8      	ldr	r0, [r7, #12]
   83d58:	4b19      	ldr	r3, [pc, #100]	; (83dc0 <pio_set_input+0x78>)
   83d5a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   83d5c:	687b      	ldr	r3, [r7, #4]
   83d5e:	f003 0301 	and.w	r3, r3, #1
   83d62:	461a      	mov	r2, r3
   83d64:	68b9      	ldr	r1, [r7, #8]
   83d66:	68f8      	ldr	r0, [r7, #12]
   83d68:	4b16      	ldr	r3, [pc, #88]	; (83dc4 <pio_set_input+0x7c>)
   83d6a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   83d6c:	687b      	ldr	r3, [r7, #4]
   83d6e:	f003 030a 	and.w	r3, r3, #10
   83d72:	2b00      	cmp	r3, #0
   83d74:	d003      	beq.n	83d7e <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   83d76:	68fb      	ldr	r3, [r7, #12]
   83d78:	68ba      	ldr	r2, [r7, #8]
   83d7a:	621a      	str	r2, [r3, #32]
   83d7c:	e002      	b.n	83d84 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   83d7e:	68fb      	ldr	r3, [r7, #12]
   83d80:	68ba      	ldr	r2, [r7, #8]
   83d82:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   83d84:	687b      	ldr	r3, [r7, #4]
   83d86:	f003 0302 	and.w	r3, r3, #2
   83d8a:	2b00      	cmp	r3, #0
   83d8c:	d004      	beq.n	83d98 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   83d8e:	68fb      	ldr	r3, [r7, #12]
   83d90:	68ba      	ldr	r2, [r7, #8]
   83d92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   83d96:	e008      	b.n	83daa <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   83d98:	687b      	ldr	r3, [r7, #4]
   83d9a:	f003 0308 	and.w	r3, r3, #8
   83d9e:	2b00      	cmp	r3, #0
   83da0:	d003      	beq.n	83daa <pio_set_input+0x62>
			p_pio->PIO_DIFSR = ul_mask;
   83da2:	68fb      	ldr	r3, [r7, #12]
   83da4:	68ba      	ldr	r2, [r7, #8]
   83da6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   83daa:	68fb      	ldr	r3, [r7, #12]
   83dac:	68ba      	ldr	r2, [r7, #8]
   83dae:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   83db0:	68fb      	ldr	r3, [r7, #12]
   83db2:	68ba      	ldr	r2, [r7, #8]
   83db4:	601a      	str	r2, [r3, #0]
}
   83db6:	bf00      	nop
   83db8:	3710      	adds	r7, #16
   83dba:	46bd      	mov	sp, r7
   83dbc:	bd80      	pop	{r7, pc}
   83dbe:	bf00      	nop
   83dc0:	00083e47 	.word	0x00083e47
   83dc4:	00083ca1 	.word	0x00083ca1

00083dc8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   83dc8:	b580      	push	{r7, lr}
   83dca:	b084      	sub	sp, #16
   83dcc:	af00      	add	r7, sp, #0
   83dce:	60f8      	str	r0, [r7, #12]
   83dd0:	60b9      	str	r1, [r7, #8]
   83dd2:	607a      	str	r2, [r7, #4]
   83dd4:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   83dd6:	68b9      	ldr	r1, [r7, #8]
   83dd8:	68f8      	ldr	r0, [r7, #12]
   83dda:	4b12      	ldr	r3, [pc, #72]	; (83e24 <pio_set_output+0x5c>)
   83ddc:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   83dde:	69ba      	ldr	r2, [r7, #24]
   83de0:	68b9      	ldr	r1, [r7, #8]
   83de2:	68f8      	ldr	r0, [r7, #12]
   83de4:	4b10      	ldr	r3, [pc, #64]	; (83e28 <pio_set_output+0x60>)
   83de6:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   83de8:	683b      	ldr	r3, [r7, #0]
   83dea:	2b00      	cmp	r3, #0
   83dec:	d003      	beq.n	83df6 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   83dee:	68fb      	ldr	r3, [r7, #12]
   83df0:	68ba      	ldr	r2, [r7, #8]
   83df2:	651a      	str	r2, [r3, #80]	; 0x50
   83df4:	e002      	b.n	83dfc <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   83df6:	68fb      	ldr	r3, [r7, #12]
   83df8:	68ba      	ldr	r2, [r7, #8]
   83dfa:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   83dfc:	687b      	ldr	r3, [r7, #4]
   83dfe:	2b00      	cmp	r3, #0
   83e00:	d003      	beq.n	83e0a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   83e02:	68fb      	ldr	r3, [r7, #12]
   83e04:	68ba      	ldr	r2, [r7, #8]
   83e06:	631a      	str	r2, [r3, #48]	; 0x30
   83e08:	e002      	b.n	83e10 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   83e0a:	68fb      	ldr	r3, [r7, #12]
   83e0c:	68ba      	ldr	r2, [r7, #8]
   83e0e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   83e10:	68fb      	ldr	r3, [r7, #12]
   83e12:	68ba      	ldr	r2, [r7, #8]
   83e14:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   83e16:	68fb      	ldr	r3, [r7, #12]
   83e18:	68ba      	ldr	r2, [r7, #8]
   83e1a:	601a      	str	r2, [r3, #0]
}
   83e1c:	bf00      	nop
   83e1e:	3710      	adds	r7, #16
   83e20:	46bd      	mov	sp, r7
   83e22:	bd80      	pop	{r7, pc}
   83e24:	00083e47 	.word	0x00083e47
   83e28:	00083ca1 	.word	0x00083ca1

00083e2c <pio_sync_output_write>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_sync_output_write(Pio *p_pio, const uint32_t ul_mask)
{
   83e2c:	b480      	push	{r7}
   83e2e:	b083      	sub	sp, #12
   83e30:	af00      	add	r7, sp, #0
   83e32:	6078      	str	r0, [r7, #4]
   83e34:	6039      	str	r1, [r7, #0]
	p_pio->PIO_ODSR = ul_mask;
   83e36:	687b      	ldr	r3, [r7, #4]
   83e38:	683a      	ldr	r2, [r7, #0]
   83e3a:	639a      	str	r2, [r3, #56]	; 0x38
}
   83e3c:	bf00      	nop
   83e3e:	370c      	adds	r7, #12
   83e40:	46bd      	mov	sp, r7
   83e42:	bc80      	pop	{r7}
   83e44:	4770      	bx	lr

00083e46 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   83e46:	b480      	push	{r7}
   83e48:	b083      	sub	sp, #12
   83e4a:	af00      	add	r7, sp, #0
   83e4c:	6078      	str	r0, [r7, #4]
   83e4e:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   83e50:	687b      	ldr	r3, [r7, #4]
   83e52:	683a      	ldr	r2, [r7, #0]
   83e54:	645a      	str	r2, [r3, #68]	; 0x44
}
   83e56:	bf00      	nop
   83e58:	370c      	adds	r7, #12
   83e5a:	46bd      	mov	sp, r7
   83e5c:	bc80      	pop	{r7}
   83e5e:	4770      	bx	lr

00083e60 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   83e60:	b480      	push	{r7}
   83e62:	b083      	sub	sp, #12
   83e64:	af00      	add	r7, sp, #0
   83e66:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   83e68:	687b      	ldr	r3, [r7, #4]
   83e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   83e6c:	4618      	mov	r0, r3
   83e6e:	370c      	adds	r7, #12
   83e70:	46bd      	mov	sp, r7
   83e72:	bc80      	pop	{r7}
   83e74:	4770      	bx	lr

00083e76 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   83e76:	b480      	push	{r7}
   83e78:	b083      	sub	sp, #12
   83e7a:	af00      	add	r7, sp, #0
   83e7c:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   83e7e:	687b      	ldr	r3, [r7, #4]
   83e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   83e82:	4618      	mov	r0, r3
   83e84:	370c      	adds	r7, #12
   83e86:	46bd      	mov	sp, r7
   83e88:	bc80      	pop	{r7}
   83e8a:	4770      	bx	lr

00083e8c <pio_get_pin_value>:
 *       level.
 * \note If pin is input: PIOx must be clocked to sample the signal.
 *       See PMC driver.
 */
uint32_t pio_get_pin_value(uint32_t ul_pin)
{
   83e8c:	b580      	push	{r7, lr}
   83e8e:	b084      	sub	sp, #16
   83e90:	af00      	add	r7, sp, #0
   83e92:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   83e94:	6878      	ldr	r0, [r7, #4]
   83e96:	4b08      	ldr	r3, [pc, #32]	; (83eb8 <pio_get_pin_value+0x2c>)
   83e98:	4798      	blx	r3
   83e9a:	60f8      	str	r0, [r7, #12]

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   83e9c:	68fb      	ldr	r3, [r7, #12]
   83e9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   83ea0:	687b      	ldr	r3, [r7, #4]
   83ea2:	f003 031f 	and.w	r3, r3, #31
   83ea6:	fa22 f303 	lsr.w	r3, r2, r3
   83eaa:	f003 0301 	and.w	r3, r3, #1
}
   83eae:	4618      	mov	r0, r3
   83eb0:	3710      	adds	r7, #16
   83eb2:	46bd      	mov	sp, r7
   83eb4:	bd80      	pop	{r7, pc}
   83eb6:	bf00      	nop
   83eb8:	00084139 	.word	0x00084139

00083ebc <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   83ebc:	b580      	push	{r7, lr}
   83ebe:	b084      	sub	sp, #16
   83ec0:	af00      	add	r7, sp, #0
   83ec2:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   83ec4:	6878      	ldr	r0, [r7, #4]
   83ec6:	4b08      	ldr	r3, [pc, #32]	; (83ee8 <pio_set_pin_high+0x2c>)
   83ec8:	4798      	blx	r3
   83eca:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   83ecc:	687b      	ldr	r3, [r7, #4]
   83ece:	f003 031f 	and.w	r3, r3, #31
   83ed2:	2201      	movs	r2, #1
   83ed4:	fa02 f303 	lsl.w	r3, r2, r3
   83ed8:	461a      	mov	r2, r3
   83eda:	68fb      	ldr	r3, [r7, #12]
   83edc:	631a      	str	r2, [r3, #48]	; 0x30
}
   83ede:	bf00      	nop
   83ee0:	3710      	adds	r7, #16
   83ee2:	46bd      	mov	sp, r7
   83ee4:	bd80      	pop	{r7, pc}
   83ee6:	bf00      	nop
   83ee8:	00084139 	.word	0x00084139

00083eec <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   83eec:	b580      	push	{r7, lr}
   83eee:	b084      	sub	sp, #16
   83ef0:	af00      	add	r7, sp, #0
   83ef2:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   83ef4:	6878      	ldr	r0, [r7, #4]
   83ef6:	4b08      	ldr	r3, [pc, #32]	; (83f18 <pio_set_pin_low+0x2c>)
   83ef8:	4798      	blx	r3
   83efa:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   83efc:	687b      	ldr	r3, [r7, #4]
   83efe:	f003 031f 	and.w	r3, r3, #31
   83f02:	2201      	movs	r2, #1
   83f04:	fa02 f303 	lsl.w	r3, r2, r3
   83f08:	461a      	mov	r2, r3
   83f0a:	68fb      	ldr	r3, [r7, #12]
   83f0c:	635a      	str	r2, [r3, #52]	; 0x34
}
   83f0e:	bf00      	nop
   83f10:	3710      	adds	r7, #16
   83f12:	46bd      	mov	sp, r7
   83f14:	bd80      	pop	{r7, pc}
   83f16:	bf00      	nop
   83f18:	00084139 	.word	0x00084139

00083f1c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   83f1c:	b590      	push	{r4, r7, lr}
   83f1e:	b087      	sub	sp, #28
   83f20:	af02      	add	r7, sp, #8
   83f22:	6078      	str	r0, [r7, #4]
   83f24:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   83f26:	6878      	ldr	r0, [r7, #4]
   83f28:	4b45      	ldr	r3, [pc, #276]	; (84040 <pio_configure_pin+0x124>)
   83f2a:	4798      	blx	r3
   83f2c:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   83f2e:	683b      	ldr	r3, [r7, #0]
   83f30:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   83f34:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83f38:	d046      	beq.n	83fc8 <pio_configure_pin+0xac>
   83f3a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83f3e:	d806      	bhi.n	83f4e <pio_configure_pin+0x32>
   83f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83f44:	d00a      	beq.n	83f5c <pio_configure_pin+0x40>
   83f46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83f4a:	d022      	beq.n	83f92 <pio_configure_pin+0x76>
   83f4c:	e070      	b.n	84030 <pio_configure_pin+0x114>
   83f4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83f52:	d045      	beq.n	83fe0 <pio_configure_pin+0xc4>
   83f54:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83f58:	d042      	beq.n	83fe0 <pio_configure_pin+0xc4>
   83f5a:	e069      	b.n	84030 <pio_configure_pin+0x114>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   83f5c:	687b      	ldr	r3, [r7, #4]
   83f5e:	f003 031f 	and.w	r3, r3, #31
   83f62:	2201      	movs	r2, #1
   83f64:	fa02 f303 	lsl.w	r3, r2, r3
   83f68:	461a      	mov	r2, r3
   83f6a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83f6e:	68f8      	ldr	r0, [r7, #12]
   83f70:	4b34      	ldr	r3, [pc, #208]	; (84044 <pio_configure_pin+0x128>)
   83f72:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   83f74:	687b      	ldr	r3, [r7, #4]
   83f76:	f003 031f 	and.w	r3, r3, #31
   83f7a:	2201      	movs	r2, #1
   83f7c:	fa02 f303 	lsl.w	r3, r2, r3
   83f80:	4619      	mov	r1, r3
   83f82:	683b      	ldr	r3, [r7, #0]
   83f84:	f003 0301 	and.w	r3, r3, #1
   83f88:	461a      	mov	r2, r3
   83f8a:	68f8      	ldr	r0, [r7, #12]
   83f8c:	4b2e      	ldr	r3, [pc, #184]	; (84048 <pio_configure_pin+0x12c>)
   83f8e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   83f90:	e050      	b.n	84034 <pio_configure_pin+0x118>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   83f92:	687b      	ldr	r3, [r7, #4]
   83f94:	f003 031f 	and.w	r3, r3, #31
   83f98:	2201      	movs	r2, #1
   83f9a:	fa02 f303 	lsl.w	r3, r2, r3
   83f9e:	461a      	mov	r2, r3
   83fa0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83fa4:	68f8      	ldr	r0, [r7, #12]
   83fa6:	4b27      	ldr	r3, [pc, #156]	; (84044 <pio_configure_pin+0x128>)
   83fa8:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   83faa:	687b      	ldr	r3, [r7, #4]
   83fac:	f003 031f 	and.w	r3, r3, #31
   83fb0:	2201      	movs	r2, #1
   83fb2:	fa02 f303 	lsl.w	r3, r2, r3
   83fb6:	4619      	mov	r1, r3
   83fb8:	683b      	ldr	r3, [r7, #0]
   83fba:	f003 0301 	and.w	r3, r3, #1
   83fbe:	461a      	mov	r2, r3
   83fc0:	68f8      	ldr	r0, [r7, #12]
   83fc2:	4b21      	ldr	r3, [pc, #132]	; (84048 <pio_configure_pin+0x12c>)
   83fc4:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   83fc6:	e035      	b.n	84034 <pio_configure_pin+0x118>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   83fc8:	687b      	ldr	r3, [r7, #4]
   83fca:	f003 031f 	and.w	r3, r3, #31
   83fce:	2201      	movs	r2, #1
   83fd0:	fa02 f303 	lsl.w	r3, r2, r3
   83fd4:	683a      	ldr	r2, [r7, #0]
   83fd6:	4619      	mov	r1, r3
   83fd8:	68f8      	ldr	r0, [r7, #12]
   83fda:	4b1c      	ldr	r3, [pc, #112]	; (8404c <pio_configure_pin+0x130>)
   83fdc:	4798      	blx	r3
		break;
   83fde:	e029      	b.n	84034 <pio_configure_pin+0x118>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83fe0:	687b      	ldr	r3, [r7, #4]
   83fe2:	f003 031f 	and.w	r3, r3, #31
   83fe6:	2201      	movs	r2, #1
   83fe8:	fa02 f303 	lsl.w	r3, r2, r3
   83fec:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83fee:	683b      	ldr	r3, [r7, #0]
   83ff0:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83ff4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83ff8:	bf0c      	ite	eq
   83ffa:	2301      	moveq	r3, #1
   83ffc:	2300      	movne	r3, #0
   83ffe:	b2db      	uxtb	r3, r3
   84000:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   84002:	683b      	ldr	r3, [r7, #0]
   84004:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   84008:	2b00      	cmp	r3, #0
   8400a:	bf14      	ite	ne
   8400c:	2301      	movne	r3, #1
   8400e:	2300      	moveq	r3, #0
   84010:	b2db      	uxtb	r3, r3
   84012:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   84014:	683b      	ldr	r3, [r7, #0]
   84016:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8401a:	2b00      	cmp	r3, #0
   8401c:	bf14      	ite	ne
   8401e:	2301      	movne	r3, #1
   84020:	2300      	moveq	r3, #0
   84022:	b2db      	uxtb	r3, r3
   84024:	9300      	str	r3, [sp, #0]
   84026:	4603      	mov	r3, r0
   84028:	68f8      	ldr	r0, [r7, #12]
   8402a:	4c09      	ldr	r4, [pc, #36]	; (84050 <pio_configure_pin+0x134>)
   8402c:	47a0      	blx	r4
		break;
   8402e:	e001      	b.n	84034 <pio_configure_pin+0x118>

	default:
		return 0;
   84030:	2300      	movs	r3, #0
   84032:	e000      	b.n	84036 <pio_configure_pin+0x11a>
	}

	return 1;
   84034:	2301      	movs	r3, #1
}
   84036:	4618      	mov	r0, r3
   84038:	3714      	adds	r7, #20
   8403a:	46bd      	mov	sp, r7
   8403c:	bd90      	pop	{r4, r7, pc}
   8403e:	bf00      	nop
   84040:	00084139 	.word	0x00084139
   84044:	00083ccb 	.word	0x00083ccb
   84048:	00083ca1 	.word	0x00083ca1
   8404c:	00083d49 	.word	0x00083d49
   84050:	00083dc9 	.word	0x00083dc9

00084054 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   84054:	b590      	push	{r4, r7, lr}
   84056:	b087      	sub	sp, #28
   84058:	af02      	add	r7, sp, #8
   8405a:	60f8      	str	r0, [r7, #12]
   8405c:	60b9      	str	r1, [r7, #8]
   8405e:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   84060:	687b      	ldr	r3, [r7, #4]
   84062:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   84066:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8406a:	d02e      	beq.n	840ca <pio_configure_pin_group+0x76>
   8406c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   84070:	d806      	bhi.n	84080 <pio_configure_pin_group+0x2c>
   84072:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   84076:	d00a      	beq.n	8408e <pio_configure_pin_group+0x3a>
   84078:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8407c:	d016      	beq.n	840ac <pio_configure_pin_group+0x58>
   8407e:	e04c      	b.n	8411a <pio_configure_pin_group+0xc6>
   84080:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   84084:	d027      	beq.n	840d6 <pio_configure_pin_group+0x82>
   84086:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8408a:	d024      	beq.n	840d6 <pio_configure_pin_group+0x82>
   8408c:	e045      	b.n	8411a <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8408e:	68ba      	ldr	r2, [r7, #8]
   84090:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   84094:	68f8      	ldr	r0, [r7, #12]
   84096:	4b24      	ldr	r3, [pc, #144]	; (84128 <pio_configure_pin_group+0xd4>)
   84098:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   8409a:	687b      	ldr	r3, [r7, #4]
   8409c:	f003 0301 	and.w	r3, r3, #1
   840a0:	461a      	mov	r2, r3
   840a2:	68b9      	ldr	r1, [r7, #8]
   840a4:	68f8      	ldr	r0, [r7, #12]
   840a6:	4b21      	ldr	r3, [pc, #132]	; (8412c <pio_configure_pin_group+0xd8>)
   840a8:	4798      	blx	r3
		break;
   840aa:	e038      	b.n	8411e <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   840ac:	68ba      	ldr	r2, [r7, #8]
   840ae:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   840b2:	68f8      	ldr	r0, [r7, #12]
   840b4:	4b1c      	ldr	r3, [pc, #112]	; (84128 <pio_configure_pin_group+0xd4>)
   840b6:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   840b8:	687b      	ldr	r3, [r7, #4]
   840ba:	f003 0301 	and.w	r3, r3, #1
   840be:	461a      	mov	r2, r3
   840c0:	68b9      	ldr	r1, [r7, #8]
   840c2:	68f8      	ldr	r0, [r7, #12]
   840c4:	4b19      	ldr	r3, [pc, #100]	; (8412c <pio_configure_pin_group+0xd8>)
   840c6:	4798      	blx	r3
		break;
   840c8:	e029      	b.n	8411e <pio_configure_pin_group+0xca>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   840ca:	687a      	ldr	r2, [r7, #4]
   840cc:	68b9      	ldr	r1, [r7, #8]
   840ce:	68f8      	ldr	r0, [r7, #12]
   840d0:	4b17      	ldr	r3, [pc, #92]	; (84130 <pio_configure_pin_group+0xdc>)
   840d2:	4798      	blx	r3
		break;
   840d4:	e023      	b.n	8411e <pio_configure_pin_group+0xca>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   840d6:	687b      	ldr	r3, [r7, #4]
   840d8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   840dc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   840e0:	bf0c      	ite	eq
   840e2:	2301      	moveq	r3, #1
   840e4:	2300      	movne	r3, #0
   840e6:	b2db      	uxtb	r3, r3
   840e8:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   840ea:	687b      	ldr	r3, [r7, #4]
   840ec:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask,
   840f0:	2b00      	cmp	r3, #0
   840f2:	bf14      	ite	ne
   840f4:	2301      	movne	r3, #1
   840f6:	2300      	moveq	r3, #0
   840f8:	b2db      	uxtb	r3, r3
   840fa:	4619      	mov	r1, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   840fc:	687b      	ldr	r3, [r7, #4]
   840fe:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask,
   84102:	2b00      	cmp	r3, #0
   84104:	bf14      	ite	ne
   84106:	2301      	movne	r3, #1
   84108:	2300      	moveq	r3, #0
   8410a:	b2db      	uxtb	r3, r3
   8410c:	9300      	str	r3, [sp, #0]
   8410e:	460b      	mov	r3, r1
   84110:	68b9      	ldr	r1, [r7, #8]
   84112:	68f8      	ldr	r0, [r7, #12]
   84114:	4c07      	ldr	r4, [pc, #28]	; (84134 <pio_configure_pin_group+0xe0>)
   84116:	47a0      	blx	r4
		break;
   84118:	e001      	b.n	8411e <pio_configure_pin_group+0xca>

	default:
		return 0;
   8411a:	2300      	movs	r3, #0
   8411c:	e000      	b.n	84120 <pio_configure_pin_group+0xcc>
	}

	return 1;
   8411e:	2301      	movs	r3, #1
}
   84120:	4618      	mov	r0, r3
   84122:	3714      	adds	r7, #20
   84124:	46bd      	mov	sp, r7
   84126:	bd90      	pop	{r4, r7, pc}
   84128:	00083ccb 	.word	0x00083ccb
   8412c:	00083ca1 	.word	0x00083ca1
   84130:	00083d49 	.word	0x00083d49
   84134:	00083dc9 	.word	0x00083dc9

00084138 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
   84138:	b480      	push	{r7}
   8413a:	b085      	sub	sp, #20
   8413c:	af00      	add	r7, sp, #0
   8413e:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84140:	687b      	ldr	r3, [r7, #4]
   84142:	095b      	lsrs	r3, r3, #5
   84144:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84148:	f203 7306 	addw	r3, r3, #1798	; 0x706
   8414c:	025b      	lsls	r3, r3, #9
   8414e:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
   84150:	68fb      	ldr	r3, [r7, #12]
}
   84152:	4618      	mov	r0, r3
   84154:	3714      	adds	r7, #20
   84156:	46bd      	mov	sp, r7
   84158:	bc80      	pop	{r7}
   8415a:	4770      	bx	lr

0008415c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8415c:	b480      	push	{r7}
   8415e:	af00      	add	r7, sp, #0
	while (1) {
   84160:	e7fe      	b.n	84160 <Dummy_Handler+0x4>
   84162:	0000      	movs	r0, r0

00084164 <udc_get_string_serial_name>:
 * to a suitable pointer. This will also require the serial number length
 * define USB_DEVICE_GET_SERIAL_NAME_LENGTH.
 */
#if defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	static const uint8_t *udc_get_string_serial_name(void)
	{
   84164:	b480      	push	{r7}
   84166:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_GET_SERIAL_NAME_POINTER;
   84168:	4b02      	ldr	r3, [pc, #8]	; (84174 <udc_get_string_serial_name+0x10>)
	}
   8416a:	4618      	mov	r0, r3
   8416c:	46bd      	mov	sp, r7
   8416e:	bc80      	pop	{r7}
   84170:	4770      	bx	lr
   84172:	bf00      	nop
   84174:	2000025c 	.word	0x2000025c

00084178 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
   84178:	b480      	push	{r7}
   8417a:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
   8417c:	4b02      	ldr	r3, [pc, #8]	; (84188 <udc_get_interface_desc+0x10>)
   8417e:	681b      	ldr	r3, [r3, #0]
}
   84180:	4618      	mov	r0, r3
   84182:	46bd      	mov	sp, r7
   84184:	bc80      	pop	{r7}
   84186:	4770      	bx	lr
   84188:	20000d40 	.word	0x20000d40

0008418c <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
   8418c:	b480      	push	{r7}
   8418e:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   84190:	4b06      	ldr	r3, [pc, #24]	; (841ac <udc_get_eof_conf+0x20>)
   84192:	681b      	ldr	r3, [r3, #0]
   84194:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   84196:	4a05      	ldr	r2, [pc, #20]	; (841ac <udc_get_eof_conf+0x20>)
   84198:	6812      	ldr	r2, [r2, #0]
   8419a:	6812      	ldr	r2, [r2, #0]
   8419c:	8852      	ldrh	r2, [r2, #2]
   8419e:	b292      	uxth	r2, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   841a0:	4413      	add	r3, r2
}
   841a2:	4618      	mov	r0, r3
   841a4:	46bd      	mov	sp, r7
   841a6:	bc80      	pop	{r7}
   841a8:	4770      	bx	lr
   841aa:	bf00      	nop
   841ac:	20000d3c 	.word	0x20000d3c

000841b0 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   841b0:	b580      	push	{r7, lr}
   841b2:	b084      	sub	sp, #16
   841b4:	af00      	add	r7, sp, #0
   841b6:	6078      	str	r0, [r7, #4]
   841b8:	460b      	mov	r3, r1
   841ba:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   841bc:	4b12      	ldr	r3, [pc, #72]	; (84208 <udc_next_desc_in_iface+0x58>)
   841be:	4798      	blx	r3
   841c0:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   841c2:	687b      	ldr	r3, [r7, #4]
   841c4:	781b      	ldrb	r3, [r3, #0]
   841c6:	461a      	mov	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   841c8:	687b      	ldr	r3, [r7, #4]
   841ca:	4413      	add	r3, r2
   841cc:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   841ce:	e010      	b.n	841f2 <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   841d0:	687b      	ldr	r3, [r7, #4]
   841d2:	785b      	ldrb	r3, [r3, #1]
   841d4:	2b04      	cmp	r3, #4
   841d6:	d011      	beq.n	841fc <udc_next_desc_in_iface+0x4c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   841d8:	687b      	ldr	r3, [r7, #4]
   841da:	785b      	ldrb	r3, [r3, #1]
   841dc:	78fa      	ldrb	r2, [r7, #3]
   841de:	429a      	cmp	r2, r3
   841e0:	d101      	bne.n	841e6 <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
   841e2:	687b      	ldr	r3, [r7, #4]
   841e4:	e00c      	b.n	84200 <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   841e6:	687b      	ldr	r3, [r7, #4]
   841e8:	781b      	ldrb	r3, [r3, #0]
   841ea:	461a      	mov	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   841ec:	687b      	ldr	r3, [r7, #4]
   841ee:	4413      	add	r3, r2
   841f0:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
   841f2:	68fa      	ldr	r2, [r7, #12]
   841f4:	687b      	ldr	r3, [r7, #4]
   841f6:	429a      	cmp	r2, r3
   841f8:	d8ea      	bhi.n	841d0 <udc_next_desc_in_iface+0x20>
   841fa:	e000      	b.n	841fe <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
   841fc:	bf00      	nop
	}
	return NULL; // No specific descriptor found
   841fe:	2300      	movs	r3, #0
}
   84200:	4618      	mov	r0, r3
   84202:	3710      	adds	r7, #16
   84204:	46bd      	mov	sp, r7
   84206:	bd80      	pop	{r7, pc}
   84208:	0008418d 	.word	0x0008418d

0008420c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   8420c:	b580      	push	{r7, lr}
   8420e:	b084      	sub	sp, #16
   84210:	af00      	add	r7, sp, #0
   84212:	4603      	mov	r3, r0
   84214:	460a      	mov	r2, r1
   84216:	71fb      	strb	r3, [r7, #7]
   84218:	4613      	mov	r3, r2
   8421a:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   8421c:	4b1e      	ldr	r3, [pc, #120]	; (84298 <udc_update_iface_desc+0x8c>)
   8421e:	781b      	ldrb	r3, [r3, #0]
   84220:	2b00      	cmp	r3, #0
   84222:	d101      	bne.n	84228 <udc_update_iface_desc+0x1c>
		return false;
   84224:	2300      	movs	r3, #0
   84226:	e032      	b.n	8428e <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   84228:	4b1c      	ldr	r3, [pc, #112]	; (8429c <udc_update_iface_desc+0x90>)
   8422a:	681b      	ldr	r3, [r3, #0]
   8422c:	681b      	ldr	r3, [r3, #0]
   8422e:	791b      	ldrb	r3, [r3, #4]
   84230:	79fa      	ldrb	r2, [r7, #7]
   84232:	429a      	cmp	r2, r3
   84234:	d301      	bcc.n	8423a <udc_update_iface_desc+0x2e>
		return false;
   84236:	2300      	movs	r3, #0
   84238:	e029      	b.n	8428e <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
   8423a:	4b18      	ldr	r3, [pc, #96]	; (8429c <udc_update_iface_desc+0x90>)
   8423c:	681b      	ldr	r3, [r3, #0]
   8423e:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   84240:	4a17      	ldr	r2, [pc, #92]	; (842a0 <udc_update_iface_desc+0x94>)
   84242:	6013      	str	r3, [r2, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   84244:	4b17      	ldr	r3, [pc, #92]	; (842a4 <udc_update_iface_desc+0x98>)
   84246:	4798      	blx	r3
   84248:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
   8424a:	e01a      	b.n	84282 <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   8424c:	4b14      	ldr	r3, [pc, #80]	; (842a0 <udc_update_iface_desc+0x94>)
   8424e:	681b      	ldr	r3, [r3, #0]
   84250:	785b      	ldrb	r3, [r3, #1]
   84252:	2b04      	cmp	r3, #4
   84254:	d10d      	bne.n	84272 <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   84256:	4b12      	ldr	r3, [pc, #72]	; (842a0 <udc_update_iface_desc+0x94>)
   84258:	681b      	ldr	r3, [r3, #0]
   8425a:	789b      	ldrb	r3, [r3, #2]
   8425c:	79fa      	ldrb	r2, [r7, #7]
   8425e:	429a      	cmp	r2, r3
   84260:	d107      	bne.n	84272 <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
   84262:	4b0f      	ldr	r3, [pc, #60]	; (842a0 <udc_update_iface_desc+0x94>)
   84264:	681b      	ldr	r3, [r3, #0]
   84266:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   84268:	79ba      	ldrb	r2, [r7, #6]
   8426a:	429a      	cmp	r2, r3
   8426c:	d101      	bne.n	84272 <udc_update_iface_desc+0x66>
				return true; // Interface found
   8426e:	2301      	movs	r3, #1
   84270:	e00d      	b.n	8428e <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   84272:	4b0b      	ldr	r3, [pc, #44]	; (842a0 <udc_update_iface_desc+0x94>)
   84274:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   84276:	4a0a      	ldr	r2, [pc, #40]	; (842a0 <udc_update_iface_desc+0x94>)
   84278:	6812      	ldr	r2, [r2, #0]
   8427a:	7812      	ldrb	r2, [r2, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   8427c:	4413      	add	r3, r2
   8427e:	4a08      	ldr	r2, [pc, #32]	; (842a0 <udc_update_iface_desc+0x94>)
   84280:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   84282:	4b07      	ldr	r3, [pc, #28]	; (842a0 <udc_update_iface_desc+0x94>)
   84284:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
   84286:	68fa      	ldr	r2, [r7, #12]
   84288:	429a      	cmp	r2, r3
   8428a:	d8df      	bhi.n	8424c <udc_update_iface_desc+0x40>
	}
	return false; // Interface not found
   8428c:	2300      	movs	r3, #0
}
   8428e:	4618      	mov	r0, r3
   84290:	3710      	adds	r7, #16
   84292:	46bd      	mov	sp, r7
   84294:	bd80      	pop	{r7, pc}
   84296:	bf00      	nop
   84298:	20000d38 	.word	0x20000d38
   8429c:	20000d3c 	.word	0x20000d3c
   842a0:	20000d40 	.word	0x20000d40
   842a4:	0008418d 	.word	0x0008418d

000842a8 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   842a8:	b580      	push	{r7, lr}
   842aa:	b084      	sub	sp, #16
   842ac:	af00      	add	r7, sp, #0
   842ae:	4603      	mov	r3, r0
   842b0:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   842b2:	79fb      	ldrb	r3, [r7, #7]
   842b4:	2100      	movs	r1, #0
   842b6:	4618      	mov	r0, r3
   842b8:	4b1e      	ldr	r3, [pc, #120]	; (84334 <udc_iface_disable+0x8c>)
   842ba:	4798      	blx	r3
   842bc:	4603      	mov	r3, r0
   842be:	f083 0301 	eor.w	r3, r3, #1
   842c2:	b2db      	uxtb	r3, r3
   842c4:	2b00      	cmp	r3, #0
   842c6:	d001      	beq.n	842cc <udc_iface_disable+0x24>
		return false;
   842c8:	2300      	movs	r3, #0
   842ca:	e02f      	b.n	8432c <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   842cc:	4b1a      	ldr	r3, [pc, #104]	; (84338 <udc_iface_disable+0x90>)
   842ce:	681b      	ldr	r3, [r3, #0]
   842d0:	685a      	ldr	r2, [r3, #4]
   842d2:	79fb      	ldrb	r3, [r7, #7]
   842d4:	009b      	lsls	r3, r3, #2
   842d6:	4413      	add	r3, r2
   842d8:	681b      	ldr	r3, [r3, #0]
   842da:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   842dc:	68bb      	ldr	r3, [r7, #8]
   842de:	68db      	ldr	r3, [r3, #12]
   842e0:	4798      	blx	r3
   842e2:	4603      	mov	r3, r0
   842e4:	461a      	mov	r2, r3
   842e6:	79fb      	ldrb	r3, [r7, #7]
   842e8:	4611      	mov	r1, r2
   842ea:	4618      	mov	r0, r3
   842ec:	4b11      	ldr	r3, [pc, #68]	; (84334 <udc_iface_disable+0x8c>)
   842ee:	4798      	blx	r3
   842f0:	4603      	mov	r3, r0
   842f2:	f083 0301 	eor.w	r3, r3, #1
   842f6:	b2db      	uxtb	r3, r3
   842f8:	2b00      	cmp	r3, #0
   842fa:	d001      	beq.n	84300 <udc_iface_disable+0x58>
		return false;
   842fc:	2300      	movs	r3, #0
   842fe:	e015      	b.n	8432c <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   84300:	4b0e      	ldr	r3, [pc, #56]	; (8433c <udc_iface_disable+0x94>)
   84302:	681b      	ldr	r3, [r3, #0]
   84304:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   84306:	2105      	movs	r1, #5
   84308:	68f8      	ldr	r0, [r7, #12]
   8430a:	4b0d      	ldr	r3, [pc, #52]	; (84340 <udc_iface_disable+0x98>)
   8430c:	4798      	blx	r3
   8430e:	60f8      	str	r0, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   84310:	68fb      	ldr	r3, [r7, #12]
   84312:	2b00      	cmp	r3, #0
   84314:	d005      	beq.n	84322 <udc_iface_disable+0x7a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   84316:	68fb      	ldr	r3, [r7, #12]
   84318:	789b      	ldrb	r3, [r3, #2]
   8431a:	4618      	mov	r0, r3
   8431c:	4b09      	ldr	r3, [pc, #36]	; (84344 <udc_iface_disable+0x9c>)
   8431e:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   84320:	e7f1      	b.n	84306 <udc_iface_disable+0x5e>
				break;
   84322:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
   84324:	68bb      	ldr	r3, [r7, #8]
   84326:	685b      	ldr	r3, [r3, #4]
   84328:	4798      	blx	r3
	return true;
   8432a:	2301      	movs	r3, #1
}
   8432c:	4618      	mov	r0, r3
   8432e:	3710      	adds	r7, #16
   84330:	46bd      	mov	sp, r7
   84332:	bd80      	pop	{r7, pc}
   84334:	0008420d 	.word	0x0008420d
   84338:	20000d3c 	.word	0x20000d3c
   8433c:	20000d40 	.word	0x20000d40
   84340:	000841b1 	.word	0x000841b1
   84344:	00082035 	.word	0x00082035

00084348 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   84348:	b580      	push	{r7, lr}
   8434a:	b084      	sub	sp, #16
   8434c:	af00      	add	r7, sp, #0
   8434e:	4603      	mov	r3, r0
   84350:	460a      	mov	r2, r1
   84352:	71fb      	strb	r3, [r7, #7]
   84354:	4613      	mov	r3, r2
   84356:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   84358:	79ba      	ldrb	r2, [r7, #6]
   8435a:	79fb      	ldrb	r3, [r7, #7]
   8435c:	4611      	mov	r1, r2
   8435e:	4618      	mov	r0, r3
   84360:	4b1a      	ldr	r3, [pc, #104]	; (843cc <udc_iface_enable+0x84>)
   84362:	4798      	blx	r3
   84364:	4603      	mov	r3, r0
   84366:	f083 0301 	eor.w	r3, r3, #1
   8436a:	b2db      	uxtb	r3, r3
   8436c:	2b00      	cmp	r3, #0
   8436e:	d001      	beq.n	84374 <udc_iface_enable+0x2c>
		return false;
   84370:	2300      	movs	r3, #0
   84372:	e027      	b.n	843c4 <udc_iface_enable+0x7c>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   84374:	4b16      	ldr	r3, [pc, #88]	; (843d0 <udc_iface_enable+0x88>)
   84376:	681b      	ldr	r3, [r3, #0]
   84378:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   8437a:	2105      	movs	r1, #5
   8437c:	68f8      	ldr	r0, [r7, #12]
   8437e:	4b15      	ldr	r3, [pc, #84]	; (843d4 <udc_iface_enable+0x8c>)
   84380:	4798      	blx	r3
   84382:	60f8      	str	r0, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   84384:	68fb      	ldr	r3, [r7, #12]
   84386:	2b00      	cmp	r3, #0
   84388:	d011      	beq.n	843ae <udc_iface_enable+0x66>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   8438a:	68fb      	ldr	r3, [r7, #12]
   8438c:	7898      	ldrb	r0, [r3, #2]
   8438e:	68fb      	ldr	r3, [r7, #12]
   84390:	78d9      	ldrb	r1, [r3, #3]
   84392:	68fb      	ldr	r3, [r7, #12]
   84394:	889b      	ldrh	r3, [r3, #4]
   84396:	b29b      	uxth	r3, r3
   84398:	461a      	mov	r2, r3
   8439a:	4b0f      	ldr	r3, [pc, #60]	; (843d8 <udc_iface_enable+0x90>)
   8439c:	4798      	blx	r3
   8439e:	4603      	mov	r3, r0
   843a0:	f083 0301 	eor.w	r3, r3, #1
   843a4:	b2db      	uxtb	r3, r3
   843a6:	2b00      	cmp	r3, #0
   843a8:	d0e7      	beq.n	8437a <udc_iface_enable+0x32>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
   843aa:	2300      	movs	r3, #0
   843ac:	e00a      	b.n	843c4 <udc_iface_enable+0x7c>
			break;
   843ae:	bf00      	nop
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   843b0:	4b0a      	ldr	r3, [pc, #40]	; (843dc <udc_iface_enable+0x94>)
   843b2:	681b      	ldr	r3, [r3, #0]
   843b4:	685a      	ldr	r2, [r3, #4]
   843b6:	79fb      	ldrb	r3, [r7, #7]
   843b8:	009b      	lsls	r3, r3, #2
   843ba:	4413      	add	r3, r2
   843bc:	681b      	ldr	r3, [r3, #0]
   843be:	681b      	ldr	r3, [r3, #0]
   843c0:	4798      	blx	r3
   843c2:	4603      	mov	r3, r0
}
   843c4:	4618      	mov	r0, r3
   843c6:	3710      	adds	r7, #16
   843c8:	46bd      	mov	sp, r7
   843ca:	bd80      	pop	{r7, pc}
   843cc:	0008420d 	.word	0x0008420d
   843d0:	20000d40 	.word	0x20000d40
   843d4:	000841b1 	.word	0x000841b1
   843d8:	00081c81 	.word	0x00081c81
   843dc:	20000d3c 	.word	0x20000d3c

000843e0 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   843e0:	b580      	push	{r7, lr}
   843e2:	af00      	add	r7, sp, #0
	udd_enable();
   843e4:	4b01      	ldr	r3, [pc, #4]	; (843ec <udc_start+0xc>)
   843e6:	4798      	blx	r3
}
   843e8:	bf00      	nop
   843ea:	bd80      	pop	{r7, pc}
   843ec:	00081a81 	.word	0x00081a81

000843f0 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   843f0:	b580      	push	{r7, lr}
   843f2:	b082      	sub	sp, #8
   843f4:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   843f6:	4b0f      	ldr	r3, [pc, #60]	; (84434 <udc_reset+0x44>)
   843f8:	781b      	ldrb	r3, [r3, #0]
   843fa:	2b00      	cmp	r3, #0
   843fc:	d010      	beq.n	84420 <udc_reset+0x30>
		for (iface_num = 0;
   843fe:	2300      	movs	r3, #0
   84400:	71fb      	strb	r3, [r7, #7]
   84402:	e006      	b.n	84412 <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   84404:	79fb      	ldrb	r3, [r7, #7]
   84406:	4618      	mov	r0, r3
   84408:	4b0b      	ldr	r3, [pc, #44]	; (84438 <udc_reset+0x48>)
   8440a:	4798      	blx	r3
				iface_num++) {
   8440c:	79fb      	ldrb	r3, [r7, #7]
   8440e:	3301      	adds	r3, #1
   84410:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84412:	4b0a      	ldr	r3, [pc, #40]	; (8443c <udc_reset+0x4c>)
   84414:	681b      	ldr	r3, [r3, #0]
   84416:	681b      	ldr	r3, [r3, #0]
   84418:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   8441a:	79fa      	ldrb	r2, [r7, #7]
   8441c:	429a      	cmp	r2, r3
   8441e:	d3f1      	bcc.n	84404 <udc_reset+0x14>
		}
	}
	udc_num_configuration = 0;
   84420:	4b04      	ldr	r3, [pc, #16]	; (84434 <udc_reset+0x44>)
   84422:	2200      	movs	r2, #0
   84424:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   84426:	4b06      	ldr	r3, [pc, #24]	; (84440 <udc_reset+0x50>)
   84428:	2200      	movs	r2, #0
   8442a:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
   8442c:	bf00      	nop
   8442e:	3708      	adds	r7, #8
   84430:	46bd      	mov	sp, r7
   84432:	bd80      	pop	{r7, pc}
   84434:	20000d38 	.word	0x20000d38
   84438:	000842a9 	.word	0x000842a9
   8443c:	20000d3c 	.word	0x20000d3c
   84440:	20000d36 	.word	0x20000d36

00084444 <udc_sof_notify>:

void udc_sof_notify(void)
{
   84444:	b580      	push	{r7, lr}
   84446:	b082      	sub	sp, #8
   84448:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   8444a:	4b14      	ldr	r3, [pc, #80]	; (8449c <udc_sof_notify+0x58>)
   8444c:	781b      	ldrb	r3, [r3, #0]
   8444e:	2b00      	cmp	r3, #0
   84450:	d01f      	beq.n	84492 <udc_sof_notify+0x4e>
		for (iface_num = 0;
   84452:	2300      	movs	r3, #0
   84454:	71fb      	strb	r3, [r7, #7]
   84456:	e015      	b.n	84484 <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   84458:	4b11      	ldr	r3, [pc, #68]	; (844a0 <udc_sof_notify+0x5c>)
   8445a:	681b      	ldr	r3, [r3, #0]
   8445c:	685a      	ldr	r2, [r3, #4]
   8445e:	79fb      	ldrb	r3, [r7, #7]
   84460:	009b      	lsls	r3, r3, #2
   84462:	4413      	add	r3, r2
   84464:	681b      	ldr	r3, [r3, #0]
   84466:	691b      	ldr	r3, [r3, #16]
   84468:	2b00      	cmp	r3, #0
   8446a:	d008      	beq.n	8447e <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   8446c:	4b0c      	ldr	r3, [pc, #48]	; (844a0 <udc_sof_notify+0x5c>)
   8446e:	681b      	ldr	r3, [r3, #0]
   84470:	685a      	ldr	r2, [r3, #4]
   84472:	79fb      	ldrb	r3, [r7, #7]
   84474:	009b      	lsls	r3, r3, #2
   84476:	4413      	add	r3, r2
   84478:	681b      	ldr	r3, [r3, #0]
   8447a:	691b      	ldr	r3, [r3, #16]
   8447c:	4798      	blx	r3
				iface_num++) {
   8447e:	79fb      	ldrb	r3, [r7, #7]
   84480:	3301      	adds	r3, #1
   84482:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84484:	4b06      	ldr	r3, [pc, #24]	; (844a0 <udc_sof_notify+0x5c>)
   84486:	681b      	ldr	r3, [r3, #0]
   84488:	681b      	ldr	r3, [r3, #0]
   8448a:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   8448c:	79fa      	ldrb	r2, [r7, #7]
   8448e:	429a      	cmp	r2, r3
   84490:	d3e2      	bcc.n	84458 <udc_sof_notify+0x14>
			}
		}
	}
}
   84492:	bf00      	nop
   84494:	3708      	adds	r7, #8
   84496:	46bd      	mov	sp, r7
   84498:	bd80      	pop	{r7, pc}
   8449a:	bf00      	nop
   8449c:	20000d38 	.word	0x20000d38
   844a0:	20000d3c 	.word	0x20000d3c

000844a4 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
   844a4:	b580      	push	{r7, lr}
   844a6:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   844a8:	4b06      	ldr	r3, [pc, #24]	; (844c4 <udc_req_std_dev_get_status+0x20>)
   844aa:	88db      	ldrh	r3, [r3, #6]
   844ac:	2b02      	cmp	r3, #2
   844ae:	d001      	beq.n	844b4 <udc_req_std_dev_get_status+0x10>
		return false;
   844b0:	2300      	movs	r3, #0
   844b2:	e004      	b.n	844be <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   844b4:	2102      	movs	r1, #2
   844b6:	4804      	ldr	r0, [pc, #16]	; (844c8 <udc_req_std_dev_get_status+0x24>)
   844b8:	4b04      	ldr	r3, [pc, #16]	; (844cc <udc_req_std_dev_get_status+0x28>)
   844ba:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   844bc:	2301      	movs	r3, #1
}
   844be:	4618      	mov	r0, r3
   844c0:	bd80      	pop	{r7, pc}
   844c2:	bf00      	nop
   844c4:	20000d54 	.word	0x20000d54
   844c8:	20000d36 	.word	0x20000d36
   844cc:	00081c59 	.word	0x00081c59

000844d0 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
   844d0:	b580      	push	{r7, lr}
   844d2:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   844d4:	4b0b      	ldr	r3, [pc, #44]	; (84504 <udc_req_std_ep_get_status+0x34>)
   844d6:	88db      	ldrh	r3, [r3, #6]
   844d8:	2b02      	cmp	r3, #2
   844da:	d001      	beq.n	844e0 <udc_req_std_ep_get_status+0x10>
		return false;
   844dc:	2300      	movs	r3, #0
   844de:	e00e      	b.n	844fe <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   844e0:	4b08      	ldr	r3, [pc, #32]	; (84504 <udc_req_std_ep_get_status+0x34>)
   844e2:	889b      	ldrh	r3, [r3, #4]
   844e4:	b2db      	uxtb	r3, r3
   844e6:	4618      	mov	r0, r3
   844e8:	4b07      	ldr	r3, [pc, #28]	; (84508 <udc_req_std_ep_get_status+0x38>)
   844ea:	4798      	blx	r3
   844ec:	4603      	mov	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   844ee:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   844f0:	4b06      	ldr	r3, [pc, #24]	; (8450c <udc_req_std_ep_get_status+0x3c>)
   844f2:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   844f4:	2102      	movs	r1, #2
   844f6:	4805      	ldr	r0, [pc, #20]	; (8450c <udc_req_std_ep_get_status+0x3c>)
   844f8:	4b05      	ldr	r3, [pc, #20]	; (84510 <udc_req_std_ep_get_status+0x40>)
   844fa:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
   844fc:	2301      	movs	r3, #1
}
   844fe:	4618      	mov	r0, r3
   84500:	bd80      	pop	{r7, pc}
   84502:	bf00      	nop
   84504:	20000d54 	.word	0x20000d54
   84508:	000820b5 	.word	0x000820b5
   8450c:	20000d44 	.word	0x20000d44
   84510:	00081c59 	.word	0x00081c59

00084514 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
   84514:	b480      	push	{r7}
   84516:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84518:	4b0b      	ldr	r3, [pc, #44]	; (84548 <udc_req_std_dev_clear_feature+0x34>)
   8451a:	88db      	ldrh	r3, [r3, #6]
   8451c:	2b00      	cmp	r3, #0
   8451e:	d001      	beq.n	84524 <udc_req_std_dev_clear_feature+0x10>
		return false;
   84520:	2300      	movs	r3, #0
   84522:	e00d      	b.n	84540 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   84524:	4b08      	ldr	r3, [pc, #32]	; (84548 <udc_req_std_dev_clear_feature+0x34>)
   84526:	885b      	ldrh	r3, [r3, #2]
   84528:	2b01      	cmp	r3, #1
   8452a:	d108      	bne.n	8453e <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   8452c:	4b07      	ldr	r3, [pc, #28]	; (8454c <udc_req_std_dev_clear_feature+0x38>)
   8452e:	881b      	ldrh	r3, [r3, #0]
   84530:	f023 0302 	bic.w	r3, r3, #2
   84534:	b29a      	uxth	r2, r3
   84536:	4b05      	ldr	r3, [pc, #20]	; (8454c <udc_req_std_dev_clear_feature+0x38>)
   84538:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   8453a:	2301      	movs	r3, #1
   8453c:	e000      	b.n	84540 <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
   8453e:	2300      	movs	r3, #0
}
   84540:	4618      	mov	r0, r3
   84542:	46bd      	mov	sp, r7
   84544:	bc80      	pop	{r7}
   84546:	4770      	bx	lr
   84548:	20000d54 	.word	0x20000d54
   8454c:	20000d36 	.word	0x20000d36

00084550 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
   84550:	b580      	push	{r7, lr}
   84552:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84554:	4b0a      	ldr	r3, [pc, #40]	; (84580 <udc_req_std_ep_clear_feature+0x30>)
   84556:	88db      	ldrh	r3, [r3, #6]
   84558:	2b00      	cmp	r3, #0
   8455a:	d001      	beq.n	84560 <udc_req_std_ep_clear_feature+0x10>
		return false;
   8455c:	2300      	movs	r3, #0
   8455e:	e00c      	b.n	8457a <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84560:	4b07      	ldr	r3, [pc, #28]	; (84580 <udc_req_std_ep_clear_feature+0x30>)
   84562:	885b      	ldrh	r3, [r3, #2]
   84564:	2b00      	cmp	r3, #0
   84566:	d107      	bne.n	84578 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   84568:	4b05      	ldr	r3, [pc, #20]	; (84580 <udc_req_std_ep_clear_feature+0x30>)
   8456a:	889b      	ldrh	r3, [r3, #4]
   8456c:	b2db      	uxtb	r3, r3
   8456e:	4618      	mov	r0, r3
   84570:	4b04      	ldr	r3, [pc, #16]	; (84584 <udc_req_std_ep_clear_feature+0x34>)
   84572:	4798      	blx	r3
   84574:	4603      	mov	r3, r0
   84576:	e000      	b.n	8457a <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
   84578:	2300      	movs	r3, #0
}
   8457a:	4618      	mov	r0, r3
   8457c:	bd80      	pop	{r7, pc}
   8457e:	bf00      	nop
   84580:	20000d54 	.word	0x20000d54
   84584:	00082231 	.word	0x00082231

00084588 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
   84588:	b580      	push	{r7, lr}
   8458a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   8458c:	4b26      	ldr	r3, [pc, #152]	; (84628 <udc_req_std_dev_set_feature+0xa0>)
   8458e:	88db      	ldrh	r3, [r3, #6]
   84590:	2b00      	cmp	r3, #0
   84592:	d001      	beq.n	84598 <udc_req_std_dev_set_feature+0x10>
		return false;
   84594:	2300      	movs	r3, #0
   84596:	e045      	b.n	84624 <udc_req_std_dev_set_feature+0x9c>
	}

	switch (udd_g_ctrlreq.req.wValue) {
   84598:	4b23      	ldr	r3, [pc, #140]	; (84628 <udc_req_std_dev_set_feature+0xa0>)
   8459a:	885b      	ldrh	r3, [r3, #2]
   8459c:	2b01      	cmp	r3, #1
   8459e:	d002      	beq.n	845a6 <udc_req_std_dev_set_feature+0x1e>
   845a0:	2b02      	cmp	r3, #2
   845a2:	d002      	beq.n	845aa <udc_req_std_dev_set_feature+0x22>
			break;
		}
		break;
#endif
	default:
		break;
   845a4:	e03d      	b.n	84622 <udc_req_std_dev_set_feature+0x9a>
		return false;
   845a6:	2300      	movs	r3, #0
   845a8:	e03c      	b.n	84624 <udc_req_std_dev_set_feature+0x9c>
		if (!udd_is_high_speed()) {
   845aa:	4b20      	ldr	r3, [pc, #128]	; (8462c <udc_req_std_dev_set_feature+0xa4>)
   845ac:	4798      	blx	r3
   845ae:	4603      	mov	r3, r0
   845b0:	f083 0301 	eor.w	r3, r3, #1
   845b4:	b2db      	uxtb	r3, r3
   845b6:	2b00      	cmp	r3, #0
   845b8:	d130      	bne.n	8461c <udc_req_std_dev_set_feature+0x94>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   845ba:	4b1b      	ldr	r3, [pc, #108]	; (84628 <udc_req_std_dev_set_feature+0xa0>)
   845bc:	889b      	ldrh	r3, [r3, #4]
   845be:	b2db      	uxtb	r3, r3
   845c0:	2b00      	cmp	r3, #0
   845c2:	d12d      	bne.n	84620 <udc_req_std_dev_set_feature+0x98>
		udc_reset();
   845c4:	4b1a      	ldr	r3, [pc, #104]	; (84630 <udc_req_std_dev_set_feature+0xa8>)
   845c6:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   845c8:	4b17      	ldr	r3, [pc, #92]	; (84628 <udc_req_std_dev_set_feature+0xa0>)
   845ca:	889b      	ldrh	r3, [r3, #4]
   845cc:	0a1b      	lsrs	r3, r3, #8
   845ce:	b29b      	uxth	r3, r3
   845d0:	b2db      	uxtb	r3, r3
   845d2:	3b01      	subs	r3, #1
   845d4:	2b03      	cmp	r3, #3
   845d6:	d81f      	bhi.n	84618 <udc_req_std_dev_set_feature+0x90>
   845d8:	a201      	add	r2, pc, #4	; (adr r2, 845e0 <udc_req_std_dev_set_feature+0x58>)
   845da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   845de:	bf00      	nop
   845e0:	000845f1 	.word	0x000845f1
   845e4:	000845fb 	.word	0x000845fb
   845e8:	00084605 	.word	0x00084605
   845ec:	0008460f 	.word	0x0008460f
			udd_g_ctrlreq.callback = udd_test_mode_j;
   845f0:	4b0d      	ldr	r3, [pc, #52]	; (84628 <udc_req_std_dev_set_feature+0xa0>)
   845f2:	4a10      	ldr	r2, [pc, #64]	; (84634 <udc_req_std_dev_set_feature+0xac>)
   845f4:	611a      	str	r2, [r3, #16]
			return true;
   845f6:	2301      	movs	r3, #1
   845f8:	e014      	b.n	84624 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   845fa:	4b0b      	ldr	r3, [pc, #44]	; (84628 <udc_req_std_dev_set_feature+0xa0>)
   845fc:	4a0e      	ldr	r2, [pc, #56]	; (84638 <udc_req_std_dev_set_feature+0xb0>)
   845fe:	611a      	str	r2, [r3, #16]
			return true;
   84600:	2301      	movs	r3, #1
   84602:	e00f      	b.n	84624 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   84604:	4b08      	ldr	r3, [pc, #32]	; (84628 <udc_req_std_dev_set_feature+0xa0>)
   84606:	4a0d      	ldr	r2, [pc, #52]	; (8463c <udc_req_std_dev_set_feature+0xb4>)
   84608:	611a      	str	r2, [r3, #16]
			return true;
   8460a:	2301      	movs	r3, #1
   8460c:	e00a      	b.n	84624 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   8460e:	4b06      	ldr	r3, [pc, #24]	; (84628 <udc_req_std_dev_set_feature+0xa0>)
   84610:	4a0b      	ldr	r2, [pc, #44]	; (84640 <udc_req_std_dev_set_feature+0xb8>)
   84612:	611a      	str	r2, [r3, #16]
			return true;
   84614:	2301      	movs	r3, #1
   84616:	e005      	b.n	84624 <udc_req_std_dev_set_feature+0x9c>
			break;
   84618:	bf00      	nop
		break;
   8461a:	e002      	b.n	84622 <udc_req_std_dev_set_feature+0x9a>
			break;
   8461c:	bf00      	nop
   8461e:	e000      	b.n	84622 <udc_req_std_dev_set_feature+0x9a>
			break;
   84620:	bf00      	nop
	}
	return false;
   84622:	2300      	movs	r3, #0
}
   84624:	4618      	mov	r0, r3
   84626:	bd80      	pop	{r7, pc}
   84628:	20000d54 	.word	0x20000d54
   8462c:	00081bd5 	.word	0x00081bd5
   84630:	000843f1 	.word	0x000843f1
   84634:	000824f5 	.word	0x000824f5
   84638:	00082529 	.word	0x00082529
   8463c:	0008255d 	.word	0x0008255d
   84640:	00082581 	.word	0x00082581

00084644 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
   84644:	b580      	push	{r7, lr}
   84646:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84648:	4b0d      	ldr	r3, [pc, #52]	; (84680 <udc_req_std_ep_set_feature+0x3c>)
   8464a:	88db      	ldrh	r3, [r3, #6]
   8464c:	2b00      	cmp	r3, #0
   8464e:	d001      	beq.n	84654 <udc_req_std_ep_set_feature+0x10>
		return false;
   84650:	2300      	movs	r3, #0
   84652:	e012      	b.n	8467a <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84654:	4b0a      	ldr	r3, [pc, #40]	; (84680 <udc_req_std_ep_set_feature+0x3c>)
   84656:	885b      	ldrh	r3, [r3, #2]
   84658:	2b00      	cmp	r3, #0
   8465a:	d10d      	bne.n	84678 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   8465c:	4b08      	ldr	r3, [pc, #32]	; (84680 <udc_req_std_ep_set_feature+0x3c>)
   8465e:	889b      	ldrh	r3, [r3, #4]
   84660:	b2db      	uxtb	r3, r3
   84662:	4618      	mov	r0, r3
   84664:	4b07      	ldr	r3, [pc, #28]	; (84684 <udc_req_std_ep_set_feature+0x40>)
   84666:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   84668:	4b05      	ldr	r3, [pc, #20]	; (84680 <udc_req_std_ep_set_feature+0x3c>)
   8466a:	889b      	ldrh	r3, [r3, #4]
   8466c:	b2db      	uxtb	r3, r3
   8466e:	4618      	mov	r0, r3
   84670:	4b05      	ldr	r3, [pc, #20]	; (84688 <udc_req_std_ep_set_feature+0x44>)
   84672:	4798      	blx	r3
   84674:	4603      	mov	r3, r0
   84676:	e000      	b.n	8467a <udc_req_std_ep_set_feature+0x36>
	}
	return false;
   84678:	2300      	movs	r3, #0
}
   8467a:	4618      	mov	r0, r3
   8467c:	bd80      	pop	{r7, pc}
   8467e:	bf00      	nop
   84680:	20000d54 	.word	0x20000d54
   84684:	0008246d 	.word	0x0008246d
   84688:	0008211d 	.word	0x0008211d

0008468c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   8468c:	b580      	push	{r7, lr}
   8468e:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   84690:	4b05      	ldr	r3, [pc, #20]	; (846a8 <udc_valid_address+0x1c>)
   84692:	885b      	ldrh	r3, [r3, #2]
   84694:	b2db      	uxtb	r3, r3
   84696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   8469a:	b2db      	uxtb	r3, r3
   8469c:	4618      	mov	r0, r3
   8469e:	4b03      	ldr	r3, [pc, #12]	; (846ac <udc_valid_address+0x20>)
   846a0:	4798      	blx	r3
}
   846a2:	bf00      	nop
   846a4:	bd80      	pop	{r7, pc}
   846a6:	bf00      	nop
   846a8:	20000d54 	.word	0x20000d54
   846ac:	00081bf9 	.word	0x00081bf9

000846b0 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
   846b0:	b480      	push	{r7}
   846b2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   846b4:	4b06      	ldr	r3, [pc, #24]	; (846d0 <udc_req_std_dev_set_address+0x20>)
   846b6:	88db      	ldrh	r3, [r3, #6]
   846b8:	2b00      	cmp	r3, #0
   846ba:	d001      	beq.n	846c0 <udc_req_std_dev_set_address+0x10>
		return false;
   846bc:	2300      	movs	r3, #0
   846be:	e003      	b.n	846c8 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   846c0:	4b03      	ldr	r3, [pc, #12]	; (846d0 <udc_req_std_dev_set_address+0x20>)
   846c2:	4a04      	ldr	r2, [pc, #16]	; (846d4 <udc_req_std_dev_set_address+0x24>)
   846c4:	611a      	str	r2, [r3, #16]
	return true;
   846c6:	2301      	movs	r3, #1
}
   846c8:	4618      	mov	r0, r3
   846ca:	46bd      	mov	sp, r7
   846cc:	bc80      	pop	{r7}
   846ce:	4770      	bx	lr
   846d0:	20000d54 	.word	0x20000d54
   846d4:	0008468d 	.word	0x0008468d

000846d8 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
   846d8:	b580      	push	{r7, lr}
   846da:	b084      	sub	sp, #16
   846dc:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
   846de:	2300      	movs	r3, #0
   846e0:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   846e2:	4b29      	ldr	r3, [pc, #164]	; (84788 <udc_req_std_dev_get_str_desc+0xb0>)
   846e4:	885b      	ldrh	r3, [r3, #2]
   846e6:	b2db      	uxtb	r3, r3
   846e8:	2b03      	cmp	r3, #3
   846ea:	d820      	bhi.n	8472e <udc_req_std_dev_get_str_desc+0x56>
   846ec:	a201      	add	r2, pc, #4	; (adr r2, 846f4 <udc_req_std_dev_get_str_desc+0x1c>)
   846ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   846f2:	bf00      	nop
   846f4:	00084705 	.word	0x00084705
   846f8:	0008470f 	.word	0x0008470f
   846fc:	00084719 	.word	0x00084719
   84700:	00084723 	.word	0x00084723
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   84704:	2104      	movs	r1, #4
   84706:	4821      	ldr	r0, [pc, #132]	; (8478c <udc_req_std_dev_get_str_desc+0xb4>)
   84708:	4b21      	ldr	r3, [pc, #132]	; (84790 <udc_req_std_dev_get_str_desc+0xb8>)
   8470a:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
   8470c:	e011      	b.n	84732 <udc_req_std_dev_get_str_desc+0x5a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   8470e:	2315      	movs	r3, #21
   84710:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
   84712:	4b20      	ldr	r3, [pc, #128]	; (84794 <udc_req_std_dev_get_str_desc+0xbc>)
   84714:	60bb      	str	r3, [r7, #8]
		break;
   84716:	e00c      	b.n	84732 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   84718:	2313      	movs	r3, #19
   8471a:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
   8471c:	4b1e      	ldr	r3, [pc, #120]	; (84798 <udc_req_std_dev_get_str_desc+0xc0>)
   8471e:	60bb      	str	r3, [r7, #8]
		break;
   84720:	e007      	b.n	84732 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   84722:	2320      	movs	r3, #32
   84724:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
   84726:	4b1d      	ldr	r3, [pc, #116]	; (8479c <udc_req_std_dev_get_str_desc+0xc4>)
   84728:	4798      	blx	r3
   8472a:	60b8      	str	r0, [r7, #8]
		break;
   8472c:	e001      	b.n	84732 <udc_req_std_dev_get_str_desc+0x5a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
   8472e:	2300      	movs	r3, #0
   84730:	e026      	b.n	84780 <udc_req_std_dev_get_str_desc+0xa8>
	}

	if (str_length) {
   84732:	79fb      	ldrb	r3, [r7, #7]
   84734:	2b00      	cmp	r3, #0
   84736:	d022      	beq.n	8477e <udc_req_std_dev_get_str_desc+0xa6>
		for(i = 0; i < str_length; i++) {
   84738:	2300      	movs	r3, #0
   8473a:	73fb      	strb	r3, [r7, #15]
   8473c:	e00d      	b.n	8475a <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   8473e:	7bfb      	ldrb	r3, [r7, #15]
   84740:	7bfa      	ldrb	r2, [r7, #15]
   84742:	68b9      	ldr	r1, [r7, #8]
   84744:	440a      	add	r2, r1
   84746:	7812      	ldrb	r2, [r2, #0]
   84748:	b291      	uxth	r1, r2
   8474a:	4a15      	ldr	r2, [pc, #84]	; (847a0 <udc_req_std_dev_get_str_desc+0xc8>)
   8474c:	005b      	lsls	r3, r3, #1
   8474e:	4413      	add	r3, r2
   84750:	460a      	mov	r2, r1
   84752:	805a      	strh	r2, [r3, #2]
		for(i = 0; i < str_length; i++) {
   84754:	7bfb      	ldrb	r3, [r7, #15]
   84756:	3301      	adds	r3, #1
   84758:	73fb      	strb	r3, [r7, #15]
   8475a:	7bfa      	ldrb	r2, [r7, #15]
   8475c:	79fb      	ldrb	r3, [r7, #7]
   8475e:	429a      	cmp	r2, r3
   84760:	d3ed      	bcc.n	8473e <udc_req_std_dev_get_str_desc+0x66>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   84762:	79fb      	ldrb	r3, [r7, #7]
   84764:	3301      	adds	r3, #1
   84766:	b2db      	uxtb	r3, r3
   84768:	005b      	lsls	r3, r3, #1
   8476a:	b2da      	uxtb	r2, r3
   8476c:	4b0c      	ldr	r3, [pc, #48]	; (847a0 <udc_req_std_dev_get_str_desc+0xc8>)
   8476e:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
   84770:	4b0b      	ldr	r3, [pc, #44]	; (847a0 <udc_req_std_dev_get_str_desc+0xc8>)
   84772:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
   84774:	b29b      	uxth	r3, r3
   84776:	4619      	mov	r1, r3
   84778:	4809      	ldr	r0, [pc, #36]	; (847a0 <udc_req_std_dev_get_str_desc+0xc8>)
   8477a:	4b05      	ldr	r3, [pc, #20]	; (84790 <udc_req_std_dev_get_str_desc+0xb8>)
   8477c:	4798      	blx	r3
	}

	return true;
   8477e:	2301      	movs	r3, #1
}
   84780:	4618      	mov	r0, r3
   84782:	3710      	adds	r7, #16
   84784:	46bd      	mov	sp, r7
   84786:	bd80      	pop	{r7, pc}
   84788:	20000d54 	.word	0x20000d54
   8478c:	200002a8 	.word	0x200002a8
   84790:	00081c59 	.word	0x00081c59
   84794:	200002ac 	.word	0x200002ac
   84798:	200002c4 	.word	0x200002c4
   8479c:	00084165 	.word	0x00084165
   847a0:	200002d8 	.word	0x200002d8

000847a4 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
   847a4:	b580      	push	{r7, lr}
   847a6:	b082      	sub	sp, #8
   847a8:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   847aa:	4b80      	ldr	r3, [pc, #512]	; (849ac <udc_req_std_dev_get_descriptor+0x208>)
   847ac:	885b      	ldrh	r3, [r3, #2]
   847ae:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   847b0:	4b7e      	ldr	r3, [pc, #504]	; (849ac <udc_req_std_dev_get_descriptor+0x208>)
   847b2:	885b      	ldrh	r3, [r3, #2]
   847b4:	0a1b      	lsrs	r3, r3, #8
   847b6:	b29b      	uxth	r3, r3
   847b8:	b2db      	uxtb	r3, r3
   847ba:	3b01      	subs	r3, #1
   847bc:	2b0e      	cmp	r3, #14
   847be:	f200 80e2 	bhi.w	84986 <udc_req_std_dev_get_descriptor+0x1e2>
   847c2:	a201      	add	r2, pc, #4	; (adr r2, 847c8 <udc_req_std_dev_get_descriptor+0x24>)
   847c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   847c8:	00084805 	.word	0x00084805
   847cc:	00084841 	.word	0x00084841
   847d0:	00084973 	.word	0x00084973
   847d4:	00084987 	.word	0x00084987
   847d8:	00084987 	.word	0x00084987
   847dc:	000848bb 	.word	0x000848bb
   847e0:	000848d1 	.word	0x000848d1
   847e4:	00084987 	.word	0x00084987
   847e8:	00084987 	.word	0x00084987
   847ec:	00084987 	.word	0x00084987
   847f0:	00084987 	.word	0x00084987
   847f4:	00084987 	.word	0x00084987
   847f8:	00084987 	.word	0x00084987
   847fc:	00084987 	.word	0x00084987
   84800:	00084951 	.word	0x00084951
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   84804:	4b6a      	ldr	r3, [pc, #424]	; (849b0 <udc_req_std_dev_get_descriptor+0x20c>)
   84806:	4798      	blx	r3
   84808:	4603      	mov	r3, r0
   8480a:	f083 0301 	eor.w	r3, r3, #1
   8480e:	b2db      	uxtb	r3, r3
   84810:	2b00      	cmp	r3, #0
   84812:	d00a      	beq.n	8482a <udc_req_std_dev_get_descriptor+0x86>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
   84814:	4b67      	ldr	r3, [pc, #412]	; (849b4 <udc_req_std_dev_get_descriptor+0x210>)
   84816:	689a      	ldr	r2, [r3, #8]
				udc_config.confdev_hs->bLength);
   84818:	4b66      	ldr	r3, [pc, #408]	; (849b4 <udc_req_std_dev_get_descriptor+0x210>)
   8481a:	689b      	ldr	r3, [r3, #8]
   8481c:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   8481e:	b29b      	uxth	r3, r3
   84820:	4619      	mov	r1, r3
   84822:	4610      	mov	r0, r2
   84824:	4b64      	ldr	r3, [pc, #400]	; (849b8 <udc_req_std_dev_get_descriptor+0x214>)
   84826:	4798      	blx	r3
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
   84828:	e0b0      	b.n	8498c <udc_req_std_dev_get_descriptor+0x1e8>
				(uint8_t *) udc_config.confdev_lsfs,
   8482a:	4b62      	ldr	r3, [pc, #392]	; (849b4 <udc_req_std_dev_get_descriptor+0x210>)
   8482c:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
   8482e:	4b61      	ldr	r3, [pc, #388]	; (849b4 <udc_req_std_dev_get_descriptor+0x210>)
   84830:	681b      	ldr	r3, [r3, #0]
   84832:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   84834:	b29b      	uxth	r3, r3
   84836:	4619      	mov	r1, r3
   84838:	4610      	mov	r0, r2
   8483a:	4b5f      	ldr	r3, [pc, #380]	; (849b8 <udc_req_std_dev_get_descriptor+0x214>)
   8483c:	4798      	blx	r3
		break;
   8483e:	e0a5      	b.n	8498c <udc_req_std_dev_get_descriptor+0x1e8>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   84840:	4b5b      	ldr	r3, [pc, #364]	; (849b0 <udc_req_std_dev_get_descriptor+0x20c>)
   84842:	4798      	blx	r3
   84844:	4603      	mov	r3, r0
   84846:	2b00      	cmp	r3, #0
   84848:	d019      	beq.n	8487e <udc_req_std_dev_get_descriptor+0xda>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   8484a:	4b5a      	ldr	r3, [pc, #360]	; (849b4 <udc_req_std_dev_get_descriptor+0x210>)
   8484c:	689b      	ldr	r3, [r3, #8]
   8484e:	7c5b      	ldrb	r3, [r3, #17]
   84850:	79fa      	ldrb	r2, [r7, #7]
   84852:	429a      	cmp	r2, r3
   84854:	d301      	bcc.n	8485a <udc_req_std_dev_get_descriptor+0xb6>
					bNumConfigurations) {
				return false;
   84856:	2300      	movs	r3, #0
   84858:	e0a3      	b.n	849a2 <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   8485a:	4b56      	ldr	r3, [pc, #344]	; (849b4 <udc_req_std_dev_get_descriptor+0x210>)
   8485c:	691a      	ldr	r2, [r3, #16]
   8485e:	79fb      	ldrb	r3, [r7, #7]
   84860:	00db      	lsls	r3, r3, #3
   84862:	4413      	add	r3, r2
   84864:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   84866:	4b53      	ldr	r3, [pc, #332]	; (849b4 <udc_req_std_dev_get_descriptor+0x210>)
   84868:	691a      	ldr	r2, [r3, #16]
   8486a:	79fb      	ldrb	r3, [r7, #7]
   8486c:	00db      	lsls	r3, r3, #3
   8486e:	4413      	add	r3, r2
   84870:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   84872:	885b      	ldrh	r3, [r3, #2]
   84874:	b29b      	uxth	r3, r3
   84876:	4619      	mov	r1, r3
   84878:	4b4f      	ldr	r3, [pc, #316]	; (849b8 <udc_req_std_dev_get_descriptor+0x214>)
   8487a:	4798      	blx	r3
   8487c:	e018      	b.n	848b0 <udc_req_std_dev_get_descriptor+0x10c>
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   8487e:	4b4d      	ldr	r3, [pc, #308]	; (849b4 <udc_req_std_dev_get_descriptor+0x210>)
   84880:	681b      	ldr	r3, [r3, #0]
   84882:	7c5b      	ldrb	r3, [r3, #17]
   84884:	79fa      	ldrb	r2, [r7, #7]
   84886:	429a      	cmp	r2, r3
   84888:	d301      	bcc.n	8488e <udc_req_std_dev_get_descriptor+0xea>
					bNumConfigurations) {
				return false;
   8488a:	2300      	movs	r3, #0
   8488c:	e089      	b.n	849a2 <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   8488e:	4b49      	ldr	r3, [pc, #292]	; (849b4 <udc_req_std_dev_get_descriptor+0x210>)
   84890:	685a      	ldr	r2, [r3, #4]
   84892:	79fb      	ldrb	r3, [r7, #7]
   84894:	00db      	lsls	r3, r3, #3
   84896:	4413      	add	r3, r2
   84898:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   8489a:	4b46      	ldr	r3, [pc, #280]	; (849b4 <udc_req_std_dev_get_descriptor+0x210>)
   8489c:	685a      	ldr	r2, [r3, #4]
   8489e:	79fb      	ldrb	r3, [r7, #7]
   848a0:	00db      	lsls	r3, r3, #3
   848a2:	4413      	add	r3, r2
   848a4:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   848a6:	885b      	ldrh	r3, [r3, #2]
   848a8:	b29b      	uxth	r3, r3
   848aa:	4619      	mov	r1, r3
   848ac:	4b42      	ldr	r3, [pc, #264]	; (849b8 <udc_req_std_dev_get_descriptor+0x214>)
   848ae:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   848b0:	4b3e      	ldr	r3, [pc, #248]	; (849ac <udc_req_std_dev_get_descriptor+0x208>)
   848b2:	689b      	ldr	r3, [r3, #8]
   848b4:	2202      	movs	r2, #2
   848b6:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
   848b8:	e068      	b.n	8498c <udc_req_std_dev_get_descriptor+0x1e8>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   848ba:	4b3e      	ldr	r3, [pc, #248]	; (849b4 <udc_req_std_dev_get_descriptor+0x210>)
   848bc:	68da      	ldr	r2, [r3, #12]
				udc_config.qualifier->bLength);
   848be:	4b3d      	ldr	r3, [pc, #244]	; (849b4 <udc_req_std_dev_get_descriptor+0x210>)
   848c0:	68db      	ldr	r3, [r3, #12]
   848c2:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   848c4:	b29b      	uxth	r3, r3
   848c6:	4619      	mov	r1, r3
   848c8:	4610      	mov	r0, r2
   848ca:	4b3b      	ldr	r3, [pc, #236]	; (849b8 <udc_req_std_dev_get_descriptor+0x214>)
   848cc:	4798      	blx	r3
		break;
   848ce:	e05d      	b.n	8498c <udc_req_std_dev_get_descriptor+0x1e8>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   848d0:	4b37      	ldr	r3, [pc, #220]	; (849b0 <udc_req_std_dev_get_descriptor+0x20c>)
   848d2:	4798      	blx	r3
   848d4:	4603      	mov	r3, r0
   848d6:	f083 0301 	eor.w	r3, r3, #1
   848da:	b2db      	uxtb	r3, r3
   848dc:	2b00      	cmp	r3, #0
   848de:	d019      	beq.n	84914 <udc_req_std_dev_get_descriptor+0x170>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   848e0:	4b34      	ldr	r3, [pc, #208]	; (849b4 <udc_req_std_dev_get_descriptor+0x210>)
   848e2:	689b      	ldr	r3, [r3, #8]
   848e4:	7c5b      	ldrb	r3, [r3, #17]
   848e6:	79fa      	ldrb	r2, [r7, #7]
   848e8:	429a      	cmp	r2, r3
   848ea:	d301      	bcc.n	848f0 <udc_req_std_dev_get_descriptor+0x14c>
					bNumConfigurations) {
				return false;
   848ec:	2300      	movs	r3, #0
   848ee:	e058      	b.n	849a2 <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   848f0:	4b30      	ldr	r3, [pc, #192]	; (849b4 <udc_req_std_dev_get_descriptor+0x210>)
   848f2:	691a      	ldr	r2, [r3, #16]
   848f4:	79fb      	ldrb	r3, [r7, #7]
   848f6:	00db      	lsls	r3, r3, #3
   848f8:	4413      	add	r3, r2
   848fa:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   848fc:	4b2d      	ldr	r3, [pc, #180]	; (849b4 <udc_req_std_dev_get_descriptor+0x210>)
   848fe:	691a      	ldr	r2, [r3, #16]
   84900:	79fb      	ldrb	r3, [r7, #7]
   84902:	00db      	lsls	r3, r3, #3
   84904:	4413      	add	r3, r2
   84906:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   84908:	885b      	ldrh	r3, [r3, #2]
   8490a:	b29b      	uxth	r3, r3
   8490c:	4619      	mov	r1, r3
   8490e:	4b2a      	ldr	r3, [pc, #168]	; (849b8 <udc_req_std_dev_get_descriptor+0x214>)
   84910:	4798      	blx	r3
   84912:	e018      	b.n	84946 <udc_req_std_dev_get_descriptor+0x1a2>
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   84914:	4b27      	ldr	r3, [pc, #156]	; (849b4 <udc_req_std_dev_get_descriptor+0x210>)
   84916:	681b      	ldr	r3, [r3, #0]
   84918:	7c5b      	ldrb	r3, [r3, #17]
   8491a:	79fa      	ldrb	r2, [r7, #7]
   8491c:	429a      	cmp	r2, r3
   8491e:	d301      	bcc.n	84924 <udc_req_std_dev_get_descriptor+0x180>
					bNumConfigurations) {
				return false;
   84920:	2300      	movs	r3, #0
   84922:	e03e      	b.n	849a2 <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   84924:	4b23      	ldr	r3, [pc, #140]	; (849b4 <udc_req_std_dev_get_descriptor+0x210>)
   84926:	685a      	ldr	r2, [r3, #4]
   84928:	79fb      	ldrb	r3, [r7, #7]
   8492a:	00db      	lsls	r3, r3, #3
   8492c:	4413      	add	r3, r2
   8492e:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   84930:	4b20      	ldr	r3, [pc, #128]	; (849b4 <udc_req_std_dev_get_descriptor+0x210>)
   84932:	685a      	ldr	r2, [r3, #4]
   84934:	79fb      	ldrb	r3, [r7, #7]
   84936:	00db      	lsls	r3, r3, #3
   84938:	4413      	add	r3, r2
   8493a:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   8493c:	885b      	ldrh	r3, [r3, #2]
   8493e:	b29b      	uxth	r3, r3
   84940:	4619      	mov	r1, r3
   84942:	4b1d      	ldr	r3, [pc, #116]	; (849b8 <udc_req_std_dev_get_descriptor+0x214>)
   84944:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   84946:	4b19      	ldr	r3, [pc, #100]	; (849ac <udc_req_std_dev_get_descriptor+0x208>)
   84948:	689b      	ldr	r3, [r3, #8]
   8494a:	2207      	movs	r2, #7
   8494c:	705a      	strb	r2, [r3, #1]
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
   8494e:	e01d      	b.n	8498c <udc_req_std_dev_get_descriptor+0x1e8>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
   84950:	4b18      	ldr	r3, [pc, #96]	; (849b4 <udc_req_std_dev_get_descriptor+0x210>)
   84952:	695b      	ldr	r3, [r3, #20]
   84954:	2b00      	cmp	r3, #0
   84956:	d101      	bne.n	8495c <udc_req_std_dev_get_descriptor+0x1b8>
			return false;
   84958:	2300      	movs	r3, #0
   8495a:	e022      	b.n	849a2 <udc_req_std_dev_get_descriptor+0x1fe>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   8495c:	4b15      	ldr	r3, [pc, #84]	; (849b4 <udc_req_std_dev_get_descriptor+0x210>)
   8495e:	695a      	ldr	r2, [r3, #20]
				udc_config.conf_bos->wTotalLength);
   84960:	4b14      	ldr	r3, [pc, #80]	; (849b4 <udc_req_std_dev_get_descriptor+0x210>)
   84962:	695b      	ldr	r3, [r3, #20]
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   84964:	885b      	ldrh	r3, [r3, #2]
   84966:	b29b      	uxth	r3, r3
   84968:	4619      	mov	r1, r3
   8496a:	4610      	mov	r0, r2
   8496c:	4b12      	ldr	r3, [pc, #72]	; (849b8 <udc_req_std_dev_get_descriptor+0x214>)
   8496e:	4798      	blx	r3
		break;
   84970:	e00c      	b.n	8498c <udc_req_std_dev_get_descriptor+0x1e8>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
   84972:	4b12      	ldr	r3, [pc, #72]	; (849bc <udc_req_std_dev_get_descriptor+0x218>)
   84974:	4798      	blx	r3
   84976:	4603      	mov	r3, r0
   84978:	f083 0301 	eor.w	r3, r3, #1
   8497c:	b2db      	uxtb	r3, r3
   8497e:	2b00      	cmp	r3, #0
   84980:	d003      	beq.n	8498a <udc_req_std_dev_get_descriptor+0x1e6>
			return false;
   84982:	2300      	movs	r3, #0
   84984:	e00d      	b.n	849a2 <udc_req_std_dev_get_descriptor+0x1fe>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   84986:	2300      	movs	r3, #0
   84988:	e00b      	b.n	849a2 <udc_req_std_dev_get_descriptor+0x1fe>
		break;
   8498a:	bf00      	nop
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   8498c:	4b07      	ldr	r3, [pc, #28]	; (849ac <udc_req_std_dev_get_descriptor+0x208>)
   8498e:	88da      	ldrh	r2, [r3, #6]
   84990:	4b06      	ldr	r3, [pc, #24]	; (849ac <udc_req_std_dev_get_descriptor+0x208>)
   84992:	899b      	ldrh	r3, [r3, #12]
   84994:	429a      	cmp	r2, r3
   84996:	d203      	bcs.n	849a0 <udc_req_std_dev_get_descriptor+0x1fc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   84998:	4b04      	ldr	r3, [pc, #16]	; (849ac <udc_req_std_dev_get_descriptor+0x208>)
   8499a:	88da      	ldrh	r2, [r3, #6]
   8499c:	4b03      	ldr	r3, [pc, #12]	; (849ac <udc_req_std_dev_get_descriptor+0x208>)
   8499e:	819a      	strh	r2, [r3, #12]
	}
	return true;
   849a0:	2301      	movs	r3, #1
}
   849a2:	4618      	mov	r0, r3
   849a4:	3708      	adds	r7, #8
   849a6:	46bd      	mov	sp, r7
   849a8:	bd80      	pop	{r7, pc}
   849aa:	bf00      	nop
   849ac:	20000d54 	.word	0x20000d54
   849b0:	00081bd5 	.word	0x00081bd5
   849b4:	20000390 	.word	0x20000390
   849b8:	00081c59 	.word	0x00081c59
   849bc:	000846d9 	.word	0x000846d9

000849c0 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
   849c0:	b580      	push	{r7, lr}
   849c2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
   849c4:	4b06      	ldr	r3, [pc, #24]	; (849e0 <udc_req_std_dev_get_configuration+0x20>)
   849c6:	88db      	ldrh	r3, [r3, #6]
   849c8:	2b01      	cmp	r3, #1
   849ca:	d001      	beq.n	849d0 <udc_req_std_dev_get_configuration+0x10>
		return false;
   849cc:	2300      	movs	r3, #0
   849ce:	e004      	b.n	849da <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   849d0:	2101      	movs	r1, #1
   849d2:	4804      	ldr	r0, [pc, #16]	; (849e4 <udc_req_std_dev_get_configuration+0x24>)
   849d4:	4b04      	ldr	r3, [pc, #16]	; (849e8 <udc_req_std_dev_get_configuration+0x28>)
   849d6:	4798      	blx	r3
	return true;
   849d8:	2301      	movs	r3, #1
}
   849da:	4618      	mov	r0, r3
   849dc:	bd80      	pop	{r7, pc}
   849de:	bf00      	nop
   849e0:	20000d54 	.word	0x20000d54
   849e4:	20000d38 	.word	0x20000d38
   849e8:	00081c59 	.word	0x00081c59

000849ec <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
   849ec:	b580      	push	{r7, lr}
   849ee:	b082      	sub	sp, #8
   849f0:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   849f2:	4b37      	ldr	r3, [pc, #220]	; (84ad0 <udc_req_std_dev_set_configuration+0xe4>)
   849f4:	88db      	ldrh	r3, [r3, #6]
   849f6:	2b00      	cmp	r3, #0
   849f8:	d001      	beq.n	849fe <udc_req_std_dev_set_configuration+0x12>
		return false;
   849fa:	2300      	movs	r3, #0
   849fc:	e063      	b.n	84ac6 <udc_req_std_dev_set_configuration+0xda>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   849fe:	4b35      	ldr	r3, [pc, #212]	; (84ad4 <udc_req_std_dev_set_configuration+0xe8>)
   84a00:	4798      	blx	r3
   84a02:	4603      	mov	r3, r0
   84a04:	2b00      	cmp	r3, #0
   84a06:	d101      	bne.n	84a0c <udc_req_std_dev_set_configuration+0x20>
		return false;
   84a08:	2300      	movs	r3, #0
   84a0a:	e05c      	b.n	84ac6 <udc_req_std_dev_set_configuration+0xda>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   84a0c:	4b32      	ldr	r3, [pc, #200]	; (84ad8 <udc_req_std_dev_set_configuration+0xec>)
   84a0e:	4798      	blx	r3
   84a10:	4603      	mov	r3, r0
   84a12:	2b00      	cmp	r3, #0
   84a14:	d009      	beq.n	84a2a <udc_req_std_dev_set_configuration+0x3e>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84a16:	4b2e      	ldr	r3, [pc, #184]	; (84ad0 <udc_req_std_dev_set_configuration+0xe4>)
   84a18:	885b      	ldrh	r3, [r3, #2]
   84a1a:	b2db      	uxtb	r3, r3
				udc_config.confdev_hs->bNumConfigurations) {
   84a1c:	4a2f      	ldr	r2, [pc, #188]	; (84adc <udc_req_std_dev_set_configuration+0xf0>)
   84a1e:	6892      	ldr	r2, [r2, #8]
   84a20:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84a22:	4293      	cmp	r3, r2
   84a24:	dd0b      	ble.n	84a3e <udc_req_std_dev_set_configuration+0x52>
			return false;
   84a26:	2300      	movs	r3, #0
   84a28:	e04d      	b.n	84ac6 <udc_req_std_dev_set_configuration+0xda>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84a2a:	4b29      	ldr	r3, [pc, #164]	; (84ad0 <udc_req_std_dev_set_configuration+0xe4>)
   84a2c:	885b      	ldrh	r3, [r3, #2]
   84a2e:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
   84a30:	4a2a      	ldr	r2, [pc, #168]	; (84adc <udc_req_std_dev_set_configuration+0xf0>)
   84a32:	6812      	ldr	r2, [r2, #0]
   84a34:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84a36:	4293      	cmp	r3, r2
   84a38:	dd01      	ble.n	84a3e <udc_req_std_dev_set_configuration+0x52>
			return false;
   84a3a:	2300      	movs	r3, #0
   84a3c:	e043      	b.n	84ac6 <udc_req_std_dev_set_configuration+0xda>
		}
	}

	// Reset current configuration
	udc_reset();
   84a3e:	4b28      	ldr	r3, [pc, #160]	; (84ae0 <udc_req_std_dev_set_configuration+0xf4>)
   84a40:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   84a42:	4b23      	ldr	r3, [pc, #140]	; (84ad0 <udc_req_std_dev_set_configuration+0xe4>)
   84a44:	885b      	ldrh	r3, [r3, #2]
   84a46:	b2da      	uxtb	r2, r3
   84a48:	4b26      	ldr	r3, [pc, #152]	; (84ae4 <udc_req_std_dev_set_configuration+0xf8>)
   84a4a:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
   84a4c:	4b25      	ldr	r3, [pc, #148]	; (84ae4 <udc_req_std_dev_set_configuration+0xf8>)
   84a4e:	781b      	ldrb	r3, [r3, #0]
   84a50:	2b00      	cmp	r3, #0
   84a52:	d101      	bne.n	84a58 <udc_req_std_dev_set_configuration+0x6c>
		return true; // Default empty configuration requested
   84a54:	2301      	movs	r3, #1
   84a56:	e036      	b.n	84ac6 <udc_req_std_dev_set_configuration+0xda>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   84a58:	4b1f      	ldr	r3, [pc, #124]	; (84ad8 <udc_req_std_dev_set_configuration+0xec>)
   84a5a:	4798      	blx	r3
   84a5c:	4603      	mov	r3, r0
   84a5e:	2b00      	cmp	r3, #0
   84a60:	d00b      	beq.n	84a7a <udc_req_std_dev_set_configuration+0x8e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   84a62:	4b1e      	ldr	r3, [pc, #120]	; (84adc <udc_req_std_dev_set_configuration+0xf0>)
   84a64:	691a      	ldr	r2, [r3, #16]
   84a66:	4b1f      	ldr	r3, [pc, #124]	; (84ae4 <udc_req_std_dev_set_configuration+0xf8>)
   84a68:	781b      	ldrb	r3, [r3, #0]
   84a6a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   84a6e:	3b01      	subs	r3, #1
   84a70:	00db      	lsls	r3, r3, #3
   84a72:	4413      	add	r3, r2
   84a74:	4a1c      	ldr	r2, [pc, #112]	; (84ae8 <udc_req_std_dev_set_configuration+0xfc>)
   84a76:	6013      	str	r3, [r2, #0]
   84a78:	e00a      	b.n	84a90 <udc_req_std_dev_set_configuration+0xa4>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   84a7a:	4b18      	ldr	r3, [pc, #96]	; (84adc <udc_req_std_dev_set_configuration+0xf0>)
   84a7c:	685a      	ldr	r2, [r3, #4]
   84a7e:	4b19      	ldr	r3, [pc, #100]	; (84ae4 <udc_req_std_dev_set_configuration+0xf8>)
   84a80:	781b      	ldrb	r3, [r3, #0]
   84a82:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   84a86:	3b01      	subs	r3, #1
   84a88:	00db      	lsls	r3, r3, #3
   84a8a:	4413      	add	r3, r2
   84a8c:	4a16      	ldr	r2, [pc, #88]	; (84ae8 <udc_req_std_dev_set_configuration+0xfc>)
   84a8e:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84a90:	2300      	movs	r3, #0
   84a92:	71fb      	strb	r3, [r7, #7]
   84a94:	e00f      	b.n	84ab6 <udc_req_std_dev_set_configuration+0xca>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   84a96:	79fb      	ldrb	r3, [r7, #7]
   84a98:	2100      	movs	r1, #0
   84a9a:	4618      	mov	r0, r3
   84a9c:	4b13      	ldr	r3, [pc, #76]	; (84aec <udc_req_std_dev_set_configuration+0x100>)
   84a9e:	4798      	blx	r3
   84aa0:	4603      	mov	r3, r0
   84aa2:	f083 0301 	eor.w	r3, r3, #1
   84aa6:	b2db      	uxtb	r3, r3
   84aa8:	2b00      	cmp	r3, #0
   84aaa:	d001      	beq.n	84ab0 <udc_req_std_dev_set_configuration+0xc4>
			return false;
   84aac:	2300      	movs	r3, #0
   84aae:	e00a      	b.n	84ac6 <udc_req_std_dev_set_configuration+0xda>
			iface_num++) {
   84ab0:	79fb      	ldrb	r3, [r7, #7]
   84ab2:	3301      	adds	r3, #1
   84ab4:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84ab6:	4b0c      	ldr	r3, [pc, #48]	; (84ae8 <udc_req_std_dev_set_configuration+0xfc>)
   84ab8:	681b      	ldr	r3, [r3, #0]
   84aba:	681b      	ldr	r3, [r3, #0]
   84abc:	791b      	ldrb	r3, [r3, #4]
   84abe:	79fa      	ldrb	r2, [r7, #7]
   84ac0:	429a      	cmp	r2, r3
   84ac2:	d3e8      	bcc.n	84a96 <udc_req_std_dev_set_configuration+0xaa>
		}
	}
	return true;
   84ac4:	2301      	movs	r3, #1
}
   84ac6:	4618      	mov	r0, r3
   84ac8:	3708      	adds	r7, #8
   84aca:	46bd      	mov	sp, r7
   84acc:	bd80      	pop	{r7, pc}
   84ace:	bf00      	nop
   84ad0:	20000d54 	.word	0x20000d54
   84ad4:	00081c3d 	.word	0x00081c3d
   84ad8:	00081bd5 	.word	0x00081bd5
   84adc:	20000390 	.word	0x20000390
   84ae0:	000843f1 	.word	0x000843f1
   84ae4:	20000d38 	.word	0x20000d38
   84ae8:	20000d3c 	.word	0x20000d3c
   84aec:	00084349 	.word	0x00084349

00084af0 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
   84af0:	b580      	push	{r7, lr}
   84af2:	b082      	sub	sp, #8
   84af4:	af00      	add	r7, sp, #0
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   84af6:	4b1e      	ldr	r3, [pc, #120]	; (84b70 <udc_req_std_iface_get_setting+0x80>)
   84af8:	88db      	ldrh	r3, [r3, #6]
   84afa:	2b01      	cmp	r3, #1
   84afc:	d001      	beq.n	84b02 <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
   84afe:	2300      	movs	r3, #0
   84b00:	e032      	b.n	84b68 <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
   84b02:	4b1c      	ldr	r3, [pc, #112]	; (84b74 <udc_req_std_iface_get_setting+0x84>)
   84b04:	781b      	ldrb	r3, [r3, #0]
   84b06:	2b00      	cmp	r3, #0
   84b08:	d101      	bne.n	84b0e <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
   84b0a:	2300      	movs	r3, #0
   84b0c:	e02c      	b.n	84b68 <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84b0e:	4b18      	ldr	r3, [pc, #96]	; (84b70 <udc_req_std_iface_get_setting+0x80>)
   84b10:	889b      	ldrh	r3, [r3, #4]
   84b12:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   84b14:	4b18      	ldr	r3, [pc, #96]	; (84b78 <udc_req_std_iface_get_setting+0x88>)
   84b16:	681b      	ldr	r3, [r3, #0]
   84b18:	681b      	ldr	r3, [r3, #0]
   84b1a:	791b      	ldrb	r3, [r3, #4]
   84b1c:	79fa      	ldrb	r2, [r7, #7]
   84b1e:	429a      	cmp	r2, r3
   84b20:	d301      	bcc.n	84b26 <udc_req_std_iface_get_setting+0x36>
		return false;
   84b22:	2300      	movs	r3, #0
   84b24:	e020      	b.n	84b68 <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   84b26:	79fb      	ldrb	r3, [r7, #7]
   84b28:	2100      	movs	r1, #0
   84b2a:	4618      	mov	r0, r3
   84b2c:	4b13      	ldr	r3, [pc, #76]	; (84b7c <udc_req_std_iface_get_setting+0x8c>)
   84b2e:	4798      	blx	r3
   84b30:	4603      	mov	r3, r0
   84b32:	f083 0301 	eor.w	r3, r3, #1
   84b36:	b2db      	uxtb	r3, r3
   84b38:	2b00      	cmp	r3, #0
   84b3a:	d001      	beq.n	84b40 <udc_req_std_iface_get_setting+0x50>
		return false;
   84b3c:	2300      	movs	r3, #0
   84b3e:	e013      	b.n	84b68 <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   84b40:	4b0d      	ldr	r3, [pc, #52]	; (84b78 <udc_req_std_iface_get_setting+0x88>)
   84b42:	681b      	ldr	r3, [r3, #0]
   84b44:	685a      	ldr	r2, [r3, #4]
   84b46:	79fb      	ldrb	r3, [r7, #7]
   84b48:	009b      	lsls	r3, r3, #2
   84b4a:	4413      	add	r3, r2
   84b4c:	681b      	ldr	r3, [r3, #0]
   84b4e:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
   84b50:	683b      	ldr	r3, [r7, #0]
   84b52:	68db      	ldr	r3, [r3, #12]
   84b54:	4798      	blx	r3
   84b56:	4603      	mov	r3, r0
   84b58:	461a      	mov	r2, r3
   84b5a:	4b09      	ldr	r3, [pc, #36]	; (84b80 <udc_req_std_iface_get_setting+0x90>)
   84b5c:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   84b5e:	2101      	movs	r1, #1
   84b60:	4807      	ldr	r0, [pc, #28]	; (84b80 <udc_req_std_iface_get_setting+0x90>)
   84b62:	4b08      	ldr	r3, [pc, #32]	; (84b84 <udc_req_std_iface_get_setting+0x94>)
   84b64:	4798      	blx	r3
	return true;
   84b66:	2301      	movs	r3, #1
}
   84b68:	4618      	mov	r0, r3
   84b6a:	3708      	adds	r7, #8
   84b6c:	46bd      	mov	sp, r7
   84b6e:	bd80      	pop	{r7, pc}
   84b70:	20000d54 	.word	0x20000d54
   84b74:	20000d38 	.word	0x20000d38
   84b78:	20000d3c 	.word	0x20000d3c
   84b7c:	0008420d 	.word	0x0008420d
   84b80:	20000d46 	.word	0x20000d46
   84b84:	00081c59 	.word	0x00081c59

00084b88 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
   84b88:	b580      	push	{r7, lr}
   84b8a:	b082      	sub	sp, #8
   84b8c:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   84b8e:	4b14      	ldr	r3, [pc, #80]	; (84be0 <udc_req_std_iface_set_setting+0x58>)
   84b90:	88db      	ldrh	r3, [r3, #6]
   84b92:	2b00      	cmp	r3, #0
   84b94:	d001      	beq.n	84b9a <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
   84b96:	2300      	movs	r3, #0
   84b98:	e01e      	b.n	84bd8 <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
   84b9a:	4b12      	ldr	r3, [pc, #72]	; (84be4 <udc_req_std_iface_set_setting+0x5c>)
   84b9c:	781b      	ldrb	r3, [r3, #0]
   84b9e:	2b00      	cmp	r3, #0
   84ba0:	d101      	bne.n	84ba6 <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
   84ba2:	2300      	movs	r3, #0
   84ba4:	e018      	b.n	84bd8 <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84ba6:	4b0e      	ldr	r3, [pc, #56]	; (84be0 <udc_req_std_iface_set_setting+0x58>)
   84ba8:	889b      	ldrh	r3, [r3, #4]
   84baa:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   84bac:	4b0c      	ldr	r3, [pc, #48]	; (84be0 <udc_req_std_iface_set_setting+0x58>)
   84bae:	885b      	ldrh	r3, [r3, #2]
   84bb0:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   84bb2:	79fb      	ldrb	r3, [r7, #7]
   84bb4:	4618      	mov	r0, r3
   84bb6:	4b0c      	ldr	r3, [pc, #48]	; (84be8 <udc_req_std_iface_set_setting+0x60>)
   84bb8:	4798      	blx	r3
   84bba:	4603      	mov	r3, r0
   84bbc:	f083 0301 	eor.w	r3, r3, #1
   84bc0:	b2db      	uxtb	r3, r3
   84bc2:	2b00      	cmp	r3, #0
   84bc4:	d001      	beq.n	84bca <udc_req_std_iface_set_setting+0x42>
		return false;
   84bc6:	2300      	movs	r3, #0
   84bc8:	e006      	b.n	84bd8 <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   84bca:	79ba      	ldrb	r2, [r7, #6]
   84bcc:	79fb      	ldrb	r3, [r7, #7]
   84bce:	4611      	mov	r1, r2
   84bd0:	4618      	mov	r0, r3
   84bd2:	4b06      	ldr	r3, [pc, #24]	; (84bec <udc_req_std_iface_set_setting+0x64>)
   84bd4:	4798      	blx	r3
   84bd6:	4603      	mov	r3, r0
}
   84bd8:	4618      	mov	r0, r3
   84bda:	3708      	adds	r7, #8
   84bdc:	46bd      	mov	sp, r7
   84bde:	bd80      	pop	{r7, pc}
   84be0:	20000d54 	.word	0x20000d54
   84be4:	20000d38 	.word	0x20000d38
   84be8:	000842a9 	.word	0x000842a9
   84bec:	00084349 	.word	0x00084349

00084bf0 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
   84bf0:	b580      	push	{r7, lr}
   84bf2:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   84bf4:	4b4d      	ldr	r3, [pc, #308]	; (84d2c <udc_reqstd+0x13c>)
   84bf6:	781b      	ldrb	r3, [r3, #0]
   84bf8:	b25b      	sxtb	r3, r3
   84bfa:	2b00      	cmp	r3, #0
   84bfc:	da3e      	bge.n	84c7c <udc_reqstd+0x8c>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
   84bfe:	4b4b      	ldr	r3, [pc, #300]	; (84d2c <udc_reqstd+0x13c>)
   84c00:	88db      	ldrh	r3, [r3, #6]
   84c02:	2b00      	cmp	r3, #0
   84c04:	d101      	bne.n	84c0a <udc_reqstd+0x1a>
			return false; // Error for USB host
   84c06:	2300      	movs	r3, #0
   84c08:	e08e      	b.n	84d28 <udc_reqstd+0x138>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   84c0a:	4b48      	ldr	r3, [pc, #288]	; (84d2c <udc_reqstd+0x13c>)
   84c0c:	781b      	ldrb	r3, [r3, #0]
   84c0e:	f003 031f 	and.w	r3, r3, #31
   84c12:	2b00      	cmp	r3, #0
   84c14:	d114      	bne.n	84c40 <udc_reqstd+0x50>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   84c16:	4b45      	ldr	r3, [pc, #276]	; (84d2c <udc_reqstd+0x13c>)
   84c18:	785b      	ldrb	r3, [r3, #1]
   84c1a:	2b06      	cmp	r3, #6
   84c1c:	d008      	beq.n	84c30 <udc_reqstd+0x40>
   84c1e:	2b08      	cmp	r3, #8
   84c20:	d00a      	beq.n	84c38 <udc_reqstd+0x48>
   84c22:	2b00      	cmp	r3, #0
   84c24:	d000      	beq.n	84c28 <udc_reqstd+0x38>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
   84c26:	e00b      	b.n	84c40 <udc_reqstd+0x50>
				return udc_req_std_dev_get_status();
   84c28:	4b41      	ldr	r3, [pc, #260]	; (84d30 <udc_reqstd+0x140>)
   84c2a:	4798      	blx	r3
   84c2c:	4603      	mov	r3, r0
   84c2e:	e07b      	b.n	84d28 <udc_reqstd+0x138>
				return udc_req_std_dev_get_descriptor();
   84c30:	4b40      	ldr	r3, [pc, #256]	; (84d34 <udc_reqstd+0x144>)
   84c32:	4798      	blx	r3
   84c34:	4603      	mov	r3, r0
   84c36:	e077      	b.n	84d28 <udc_reqstd+0x138>
				return udc_req_std_dev_get_configuration();
   84c38:	4b3f      	ldr	r3, [pc, #252]	; (84d38 <udc_reqstd+0x148>)
   84c3a:	4798      	blx	r3
   84c3c:	4603      	mov	r3, r0
   84c3e:	e073      	b.n	84d28 <udc_reqstd+0x138>
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   84c40:	4b3a      	ldr	r3, [pc, #232]	; (84d2c <udc_reqstd+0x13c>)
   84c42:	781b      	ldrb	r3, [r3, #0]
   84c44:	f003 031f 	and.w	r3, r3, #31
   84c48:	2b01      	cmp	r3, #1
   84c4a:	d108      	bne.n	84c5e <udc_reqstd+0x6e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   84c4c:	4b37      	ldr	r3, [pc, #220]	; (84d2c <udc_reqstd+0x13c>)
   84c4e:	785b      	ldrb	r3, [r3, #1]
   84c50:	2b0a      	cmp	r3, #10
   84c52:	d000      	beq.n	84c56 <udc_reqstd+0x66>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
   84c54:	e003      	b.n	84c5e <udc_reqstd+0x6e>
				return udc_req_std_iface_get_setting();
   84c56:	4b39      	ldr	r3, [pc, #228]	; (84d3c <udc_reqstd+0x14c>)
   84c58:	4798      	blx	r3
   84c5a:	4603      	mov	r3, r0
   84c5c:	e064      	b.n	84d28 <udc_reqstd+0x138>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   84c5e:	4b33      	ldr	r3, [pc, #204]	; (84d2c <udc_reqstd+0x13c>)
   84c60:	781b      	ldrb	r3, [r3, #0]
   84c62:	f003 031f 	and.w	r3, r3, #31
   84c66:	2b02      	cmp	r3, #2
   84c68:	d15d      	bne.n	84d26 <udc_reqstd+0x136>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   84c6a:	4b30      	ldr	r3, [pc, #192]	; (84d2c <udc_reqstd+0x13c>)
   84c6c:	785b      	ldrb	r3, [r3, #1]
   84c6e:	2b00      	cmp	r3, #0
   84c70:	d000      	beq.n	84c74 <udc_reqstd+0x84>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
   84c72:	e058      	b.n	84d26 <udc_reqstd+0x136>
				return udc_req_std_ep_get_status();
   84c74:	4b32      	ldr	r3, [pc, #200]	; (84d40 <udc_reqstd+0x150>)
   84c76:	4798      	blx	r3
   84c78:	4603      	mov	r3, r0
   84c7a:	e055      	b.n	84d28 <udc_reqstd+0x138>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   84c7c:	4b2b      	ldr	r3, [pc, #172]	; (84d2c <udc_reqstd+0x13c>)
   84c7e:	781b      	ldrb	r3, [r3, #0]
   84c80:	f003 031f 	and.w	r3, r3, #31
   84c84:	2b00      	cmp	r3, #0
   84c86:	d12a      	bne.n	84cde <udc_reqstd+0xee>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   84c88:	4b28      	ldr	r3, [pc, #160]	; (84d2c <udc_reqstd+0x13c>)
   84c8a:	785b      	ldrb	r3, [r3, #1]
   84c8c:	3b01      	subs	r3, #1
   84c8e:	2b08      	cmp	r3, #8
   84c90:	d824      	bhi.n	84cdc <udc_reqstd+0xec>
   84c92:	a201      	add	r2, pc, #4	; (adr r2, 84c98 <udc_reqstd+0xa8>)
   84c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84c98:	00084cc5 	.word	0x00084cc5
   84c9c:	00084cdd 	.word	0x00084cdd
   84ca0:	00084ccd 	.word	0x00084ccd
   84ca4:	00084cdd 	.word	0x00084cdd
   84ca8:	00084cbd 	.word	0x00084cbd
   84cac:	00084cdd 	.word	0x00084cdd
   84cb0:	00084cdd 	.word	0x00084cdd
   84cb4:	00084cdd 	.word	0x00084cdd
   84cb8:	00084cd5 	.word	0x00084cd5
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
   84cbc:	4b21      	ldr	r3, [pc, #132]	; (84d44 <udc_reqstd+0x154>)
   84cbe:	4798      	blx	r3
   84cc0:	4603      	mov	r3, r0
   84cc2:	e031      	b.n	84d28 <udc_reqstd+0x138>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
   84cc4:	4b20      	ldr	r3, [pc, #128]	; (84d48 <udc_reqstd+0x158>)
   84cc6:	4798      	blx	r3
   84cc8:	4603      	mov	r3, r0
   84cca:	e02d      	b.n	84d28 <udc_reqstd+0x138>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   84ccc:	4b1f      	ldr	r3, [pc, #124]	; (84d4c <udc_reqstd+0x15c>)
   84cce:	4798      	blx	r3
   84cd0:	4603      	mov	r3, r0
   84cd2:	e029      	b.n	84d28 <udc_reqstd+0x138>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
   84cd4:	4b1e      	ldr	r3, [pc, #120]	; (84d50 <udc_reqstd+0x160>)
   84cd6:	4798      	blx	r3
   84cd8:	4603      	mov	r3, r0
   84cda:	e025      	b.n	84d28 <udc_reqstd+0x138>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
   84cdc:	bf00      	nop
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   84cde:	4b13      	ldr	r3, [pc, #76]	; (84d2c <udc_reqstd+0x13c>)
   84ce0:	781b      	ldrb	r3, [r3, #0]
   84ce2:	f003 031f 	and.w	r3, r3, #31
   84ce6:	2b01      	cmp	r3, #1
   84ce8:	d108      	bne.n	84cfc <udc_reqstd+0x10c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   84cea:	4b10      	ldr	r3, [pc, #64]	; (84d2c <udc_reqstd+0x13c>)
   84cec:	785b      	ldrb	r3, [r3, #1]
   84cee:	2b0b      	cmp	r3, #11
   84cf0:	d000      	beq.n	84cf4 <udc_reqstd+0x104>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
   84cf2:	e003      	b.n	84cfc <udc_reqstd+0x10c>
				return udc_req_std_iface_set_setting();
   84cf4:	4b17      	ldr	r3, [pc, #92]	; (84d54 <udc_reqstd+0x164>)
   84cf6:	4798      	blx	r3
   84cf8:	4603      	mov	r3, r0
   84cfa:	e015      	b.n	84d28 <udc_reqstd+0x138>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   84cfc:	4b0b      	ldr	r3, [pc, #44]	; (84d2c <udc_reqstd+0x13c>)
   84cfe:	781b      	ldrb	r3, [r3, #0]
   84d00:	f003 031f 	and.w	r3, r3, #31
   84d04:	2b02      	cmp	r3, #2
   84d06:	d10e      	bne.n	84d26 <udc_reqstd+0x136>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   84d08:	4b08      	ldr	r3, [pc, #32]	; (84d2c <udc_reqstd+0x13c>)
   84d0a:	785b      	ldrb	r3, [r3, #1]
   84d0c:	2b01      	cmp	r3, #1
   84d0e:	d002      	beq.n	84d16 <udc_reqstd+0x126>
   84d10:	2b03      	cmp	r3, #3
   84d12:	d004      	beq.n	84d1e <udc_reqstd+0x12e>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
   84d14:	e007      	b.n	84d26 <udc_reqstd+0x136>
				return udc_req_std_ep_clear_feature();
   84d16:	4b10      	ldr	r3, [pc, #64]	; (84d58 <udc_reqstd+0x168>)
   84d18:	4798      	blx	r3
   84d1a:	4603      	mov	r3, r0
   84d1c:	e004      	b.n	84d28 <udc_reqstd+0x138>
				return udc_req_std_ep_set_feature();
   84d1e:	4b0f      	ldr	r3, [pc, #60]	; (84d5c <udc_reqstd+0x16c>)
   84d20:	4798      	blx	r3
   84d22:	4603      	mov	r3, r0
   84d24:	e000      	b.n	84d28 <udc_reqstd+0x138>
			}
		}
#endif
	}
	return false;
   84d26:	2300      	movs	r3, #0
}
   84d28:	4618      	mov	r0, r3
   84d2a:	bd80      	pop	{r7, pc}
   84d2c:	20000d54 	.word	0x20000d54
   84d30:	000844a5 	.word	0x000844a5
   84d34:	000847a5 	.word	0x000847a5
   84d38:	000849c1 	.word	0x000849c1
   84d3c:	00084af1 	.word	0x00084af1
   84d40:	000844d1 	.word	0x000844d1
   84d44:	000846b1 	.word	0x000846b1
   84d48:	00084515 	.word	0x00084515
   84d4c:	00084589 	.word	0x00084589
   84d50:	000849ed 	.word	0x000849ed
   84d54:	00084b89 	.word	0x00084b89
   84d58:	00084551 	.word	0x00084551
   84d5c:	00084645 	.word	0x00084645

00084d60 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   84d60:	b580      	push	{r7, lr}
   84d62:	b082      	sub	sp, #8
   84d64:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   84d66:	4b20      	ldr	r3, [pc, #128]	; (84de8 <udc_req_iface+0x88>)
   84d68:	781b      	ldrb	r3, [r3, #0]
   84d6a:	2b00      	cmp	r3, #0
   84d6c:	d101      	bne.n	84d72 <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
   84d6e:	2300      	movs	r3, #0
   84d70:	e036      	b.n	84de0 <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84d72:	4b1e      	ldr	r3, [pc, #120]	; (84dec <udc_req_iface+0x8c>)
   84d74:	889b      	ldrh	r3, [r3, #4]
   84d76:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   84d78:	4b1d      	ldr	r3, [pc, #116]	; (84df0 <udc_req_iface+0x90>)
   84d7a:	681b      	ldr	r3, [r3, #0]
   84d7c:	681b      	ldr	r3, [r3, #0]
   84d7e:	791b      	ldrb	r3, [r3, #4]
   84d80:	79fa      	ldrb	r2, [r7, #7]
   84d82:	429a      	cmp	r2, r3
   84d84:	d301      	bcc.n	84d8a <udc_req_iface+0x2a>
		return false;
   84d86:	2300      	movs	r3, #0
   84d88:	e02a      	b.n	84de0 <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   84d8a:	79fb      	ldrb	r3, [r7, #7]
   84d8c:	2100      	movs	r1, #0
   84d8e:	4618      	mov	r0, r3
   84d90:	4b18      	ldr	r3, [pc, #96]	; (84df4 <udc_req_iface+0x94>)
   84d92:	4798      	blx	r3
   84d94:	4603      	mov	r3, r0
   84d96:	f083 0301 	eor.w	r3, r3, #1
   84d9a:	b2db      	uxtb	r3, r3
   84d9c:	2b00      	cmp	r3, #0
   84d9e:	d001      	beq.n	84da4 <udc_req_iface+0x44>
		return false;
   84da0:	2300      	movs	r3, #0
   84da2:	e01d      	b.n	84de0 <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   84da4:	4b12      	ldr	r3, [pc, #72]	; (84df0 <udc_req_iface+0x90>)
   84da6:	681b      	ldr	r3, [r3, #0]
   84da8:	685a      	ldr	r2, [r3, #4]
   84daa:	79fb      	ldrb	r3, [r7, #7]
   84dac:	009b      	lsls	r3, r3, #2
   84dae:	4413      	add	r3, r2
   84db0:	681b      	ldr	r3, [r3, #0]
   84db2:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84db4:	683b      	ldr	r3, [r7, #0]
   84db6:	68db      	ldr	r3, [r3, #12]
   84db8:	4798      	blx	r3
   84dba:	4603      	mov	r3, r0
   84dbc:	461a      	mov	r2, r3
   84dbe:	79fb      	ldrb	r3, [r7, #7]
   84dc0:	4611      	mov	r1, r2
   84dc2:	4618      	mov	r0, r3
   84dc4:	4b0b      	ldr	r3, [pc, #44]	; (84df4 <udc_req_iface+0x94>)
   84dc6:	4798      	blx	r3
   84dc8:	4603      	mov	r3, r0
   84dca:	f083 0301 	eor.w	r3, r3, #1
   84dce:	b2db      	uxtb	r3, r3
   84dd0:	2b00      	cmp	r3, #0
   84dd2:	d001      	beq.n	84dd8 <udc_req_iface+0x78>
		return false;
   84dd4:	2300      	movs	r3, #0
   84dd6:	e003      	b.n	84de0 <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   84dd8:	683b      	ldr	r3, [r7, #0]
   84dda:	689b      	ldr	r3, [r3, #8]
   84ddc:	4798      	blx	r3
   84dde:	4603      	mov	r3, r0
}
   84de0:	4618      	mov	r0, r3
   84de2:	3708      	adds	r7, #8
   84de4:	46bd      	mov	sp, r7
   84de6:	bd80      	pop	{r7, pc}
   84de8:	20000d38 	.word	0x20000d38
   84dec:	20000d54 	.word	0x20000d54
   84df0:	20000d3c 	.word	0x20000d3c
   84df4:	0008420d 	.word	0x0008420d

00084df8 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   84df8:	b580      	push	{r7, lr}
   84dfa:	b082      	sub	sp, #8
   84dfc:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   84dfe:	4b1e      	ldr	r3, [pc, #120]	; (84e78 <udc_req_ep+0x80>)
   84e00:	781b      	ldrb	r3, [r3, #0]
   84e02:	2b00      	cmp	r3, #0
   84e04:	d101      	bne.n	84e0a <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
   84e06:	2300      	movs	r3, #0
   84e08:	e032      	b.n	84e70 <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84e0a:	4b1c      	ldr	r3, [pc, #112]	; (84e7c <udc_req_ep+0x84>)
   84e0c:	889b      	ldrh	r3, [r3, #4]
   84e0e:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84e10:	2300      	movs	r3, #0
   84e12:	71fb      	strb	r3, [r7, #7]
   84e14:	e024      	b.n	84e60 <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   84e16:	4b1a      	ldr	r3, [pc, #104]	; (84e80 <udc_req_ep+0x88>)
   84e18:	681b      	ldr	r3, [r3, #0]
   84e1a:	685a      	ldr	r2, [r3, #4]
   84e1c:	79fb      	ldrb	r3, [r7, #7]
   84e1e:	009b      	lsls	r3, r3, #2
   84e20:	4413      	add	r3, r2
   84e22:	681b      	ldr	r3, [r3, #0]
   84e24:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84e26:	683b      	ldr	r3, [r7, #0]
   84e28:	68db      	ldr	r3, [r3, #12]
   84e2a:	4798      	blx	r3
   84e2c:	4603      	mov	r3, r0
   84e2e:	461a      	mov	r2, r3
   84e30:	79fb      	ldrb	r3, [r7, #7]
   84e32:	4611      	mov	r1, r2
   84e34:	4618      	mov	r0, r3
   84e36:	4b13      	ldr	r3, [pc, #76]	; (84e84 <udc_req_ep+0x8c>)
   84e38:	4798      	blx	r3
   84e3a:	4603      	mov	r3, r0
   84e3c:	f083 0301 	eor.w	r3, r3, #1
   84e40:	b2db      	uxtb	r3, r3
   84e42:	2b00      	cmp	r3, #0
   84e44:	d001      	beq.n	84e4a <udc_req_ep+0x52>
			return false;
   84e46:	2300      	movs	r3, #0
   84e48:	e012      	b.n	84e70 <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   84e4a:	683b      	ldr	r3, [r7, #0]
   84e4c:	689b      	ldr	r3, [r3, #8]
   84e4e:	4798      	blx	r3
   84e50:	4603      	mov	r3, r0
   84e52:	2b00      	cmp	r3, #0
   84e54:	d001      	beq.n	84e5a <udc_req_ep+0x62>
			return true;
   84e56:	2301      	movs	r3, #1
   84e58:	e00a      	b.n	84e70 <udc_req_ep+0x78>
			iface_num++) {
   84e5a:	79fb      	ldrb	r3, [r7, #7]
   84e5c:	3301      	adds	r3, #1
   84e5e:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84e60:	4b07      	ldr	r3, [pc, #28]	; (84e80 <udc_req_ep+0x88>)
   84e62:	681b      	ldr	r3, [r3, #0]
   84e64:	681b      	ldr	r3, [r3, #0]
   84e66:	791b      	ldrb	r3, [r3, #4]
   84e68:	79fa      	ldrb	r2, [r7, #7]
   84e6a:	429a      	cmp	r2, r3
   84e6c:	d3d3      	bcc.n	84e16 <udc_req_ep+0x1e>
		}
	}
	return false;
   84e6e:	2300      	movs	r3, #0
}
   84e70:	4618      	mov	r0, r3
   84e72:	3708      	adds	r7, #8
   84e74:	46bd      	mov	sp, r7
   84e76:	bd80      	pop	{r7, pc}
   84e78:	20000d38 	.word	0x20000d38
   84e7c:	20000d54 	.word	0x20000d54
   84e80:	20000d3c 	.word	0x20000d3c
   84e84:	0008420d 	.word	0x0008420d

00084e88 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   84e88:	b580      	push	{r7, lr}
   84e8a:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   84e8c:	4b1e      	ldr	r3, [pc, #120]	; (84f08 <udc_process_setup+0x80>)
   84e8e:	2200      	movs	r2, #0
   84e90:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   84e92:	4b1d      	ldr	r3, [pc, #116]	; (84f08 <udc_process_setup+0x80>)
   84e94:	2200      	movs	r2, #0
   84e96:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   84e98:	4b1b      	ldr	r3, [pc, #108]	; (84f08 <udc_process_setup+0x80>)
   84e9a:	2200      	movs	r2, #0
   84e9c:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   84e9e:	4b1a      	ldr	r3, [pc, #104]	; (84f08 <udc_process_setup+0x80>)
   84ea0:	781b      	ldrb	r3, [r3, #0]
   84ea2:	b25b      	sxtb	r3, r3
   84ea4:	2b00      	cmp	r3, #0
   84ea6:	da05      	bge.n	84eb4 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
   84ea8:	4b17      	ldr	r3, [pc, #92]	; (84f08 <udc_process_setup+0x80>)
   84eaa:	88db      	ldrh	r3, [r3, #6]
   84eac:	2b00      	cmp	r3, #0
   84eae:	d101      	bne.n	84eb4 <udc_process_setup+0x2c>
			return false; // Error from USB host
   84eb0:	2300      	movs	r3, #0
   84eb2:	e027      	b.n	84f04 <udc_process_setup+0x7c>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   84eb4:	4b14      	ldr	r3, [pc, #80]	; (84f08 <udc_process_setup+0x80>)
   84eb6:	781b      	ldrb	r3, [r3, #0]
   84eb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84ebc:	2b00      	cmp	r3, #0
   84ebe:	d106      	bne.n	84ece <udc_process_setup+0x46>
		if (udc_reqstd()) {
   84ec0:	4b12      	ldr	r3, [pc, #72]	; (84f0c <udc_process_setup+0x84>)
   84ec2:	4798      	blx	r3
   84ec4:	4603      	mov	r3, r0
   84ec6:	2b00      	cmp	r3, #0
   84ec8:	d001      	beq.n	84ece <udc_process_setup+0x46>
			return true;
   84eca:	2301      	movs	r3, #1
   84ecc:	e01a      	b.n	84f04 <udc_process_setup+0x7c>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   84ece:	4b0e      	ldr	r3, [pc, #56]	; (84f08 <udc_process_setup+0x80>)
   84ed0:	781b      	ldrb	r3, [r3, #0]
   84ed2:	f003 031f 	and.w	r3, r3, #31
   84ed6:	2b01      	cmp	r3, #1
   84ed8:	d106      	bne.n	84ee8 <udc_process_setup+0x60>
		if (udc_req_iface()) {
   84eda:	4b0d      	ldr	r3, [pc, #52]	; (84f10 <udc_process_setup+0x88>)
   84edc:	4798      	blx	r3
   84ede:	4603      	mov	r3, r0
   84ee0:	2b00      	cmp	r3, #0
   84ee2:	d001      	beq.n	84ee8 <udc_process_setup+0x60>
			return true;
   84ee4:	2301      	movs	r3, #1
   84ee6:	e00d      	b.n	84f04 <udc_process_setup+0x7c>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   84ee8:	4b07      	ldr	r3, [pc, #28]	; (84f08 <udc_process_setup+0x80>)
   84eea:	781b      	ldrb	r3, [r3, #0]
   84eec:	f003 031f 	and.w	r3, r3, #31
   84ef0:	2b02      	cmp	r3, #2
   84ef2:	d106      	bne.n	84f02 <udc_process_setup+0x7a>
		if (udc_req_ep()) {
   84ef4:	4b07      	ldr	r3, [pc, #28]	; (84f14 <udc_process_setup+0x8c>)
   84ef6:	4798      	blx	r3
   84ef8:	4603      	mov	r3, r0
   84efa:	2b00      	cmp	r3, #0
   84efc:	d001      	beq.n	84f02 <udc_process_setup+0x7a>
			return true;
   84efe:	2301      	movs	r3, #1
   84f00:	e000      	b.n	84f04 <udc_process_setup+0x7c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   84f02:	2300      	movs	r3, #0
#endif
}
   84f04:	4618      	mov	r0, r3
   84f06:	bd80      	pop	{r7, pc}
   84f08:	20000d54 	.word	0x20000d54
   84f0c:	00084bf1 	.word	0x00084bf1
   84f10:	00084d61 	.word	0x00084d61
   84f14:	00084df9 	.word	0x00084df9

00084f18 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
   84f18:	b5b0      	push	{r4, r5, r7, lr}
   84f1a:	b09c      	sub	sp, #112	; 0x70
   84f1c:	af00      	add	r7, sp, #0
   84f1e:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
   84f20:	687b      	ldr	r3, [r7, #4]
   84f22:	3b01      	subs	r3, #1
   84f24:	2b04      	cmp	r3, #4
   84f26:	f200 81d9 	bhi.w	852dc <pmc_sleep+0x3c4>
   84f2a:	a201      	add	r2, pc, #4	; (adr r2, 84f30 <pmc_sleep+0x18>)
   84f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84f30:	00084f45 	.word	0x00084f45
   84f34:	00084f45 	.word	0x00084f45
   84f38:	00084f77 	.word	0x00084f77
   84f3c:	00084f77 	.word	0x00084f77
   84f40:	000852c1 	.word	0x000852c1
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
		cpu_irq_enable();
		__WFI();
		break;
#else
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
   84f44:	4a80      	ldr	r2, [pc, #512]	; (85148 <pmc_sleep+0x230>)
   84f46:	4b80      	ldr	r3, [pc, #512]	; (85148 <pmc_sleep+0x230>)
   84f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   84f4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   84f4e:	6713      	str	r3, [r2, #112]	; 0x70
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
   84f50:	4a7e      	ldr	r2, [pc, #504]	; (8514c <pmc_sleep+0x234>)
   84f52:	4b7e      	ldr	r3, [pc, #504]	; (8514c <pmc_sleep+0x234>)
   84f54:	691b      	ldr	r3, [r3, #16]
   84f56:	f023 0304 	bic.w	r3, r3, #4
   84f5a:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   84f5c:	4b7c      	ldr	r3, [pc, #496]	; (85150 <pmc_sleep+0x238>)
   84f5e:	2201      	movs	r2, #1
   84f60:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   84f62:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84f66:	b662      	cpsie	i
		if (sleep_mode == SAM_PM_SMODE_SLEEP_WFI)
   84f68:	687b      	ldr	r3, [r7, #4]
   84f6a:	2b02      	cmp	r3, #2
   84f6c:	d101      	bne.n	84f72 <pmc_sleep+0x5a>
  __ASM volatile ("wfi");
   84f6e:	bf30      	wfi
			__WFI();
		else
			__WFE();
		break;
   84f70:	e1b4      	b.n	852dc <pmc_sleep+0x3c4>
  __ASM volatile ("wfe");
   84f72:	bf20      	wfe
   84f74:	e1b2      	b.n	852dc <pmc_sleep+0x3c4>
  __ASM volatile ("cpsid i");
   84f76:	b672      	cpsid	i
  __ASM volatile ("dmb");
   84f78:	f3bf 8f5f 	dmb	sy
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
#endif
		cpu_irq_disable();
   84f7c:	4b74      	ldr	r3, [pc, #464]	; (85150 <pmc_sleep+0x238>)
   84f7e:	2200      	movs	r2, #0
   84f80:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
   84f82:	4b74      	ldr	r3, [pc, #464]	; (85154 <pmc_sleep+0x23c>)
   84f84:	2201      	movs	r2, #1
   84f86:	701a      	strb	r2, [r3, #0]
		/* Backup the sub-system 1 status and stop sub-system 1 */
		uint32_t cpclk_backup = PMC->PMC_SCSR &
				(PMC_SCSR_CPCK | PMC_SCSR_CPBMCK);
		PMC->PMC_SCDR = cpclk_backup | PMC_SCDR_CPKEY_PASSWD;
#endif
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
   84f88:	687b      	ldr	r3, [r7, #4]
   84f8a:	2b04      	cmp	r3, #4
   84f8c:	bf0c      	ite	eq
   84f8e:	2301      	moveq	r3, #1
   84f90:	2300      	movne	r3, #0
   84f92:	b2da      	uxtb	r2, r3
   84f94:	f107 0320 	add.w	r3, r7, #32
   84f98:	64fb      	str	r3, [r7, #76]	; 0x4c
   84f9a:	f107 031c 	add.w	r3, r7, #28
   84f9e:	64bb      	str	r3, [r7, #72]	; 0x48
   84fa0:	f107 0318 	add.w	r3, r7, #24
   84fa4:	647b      	str	r3, [r7, #68]	; 0x44
   84fa6:	f107 0314 	add.w	r3, r7, #20
   84faa:	643b      	str	r3, [r7, #64]	; 0x40
   84fac:	f107 0310 	add.w	r3, r7, #16
   84fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   84fb2:	f107 030c 	add.w	r3, r7, #12
   84fb6:	63bb      	str	r3, [r7, #56]	; 0x38
   84fb8:	4613      	mov	r3, r2
   84fba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t mor  = PMC->CKGR_MOR;
   84fbe:	4b62      	ldr	r3, [pc, #392]	; (85148 <pmc_sleep+0x230>)
   84fc0:	6a1b      	ldr	r3, [r3, #32]
   84fc2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t mckr = PMC->PMC_MCKR;
   84fc4:	4b60      	ldr	r3, [pc, #384]	; (85148 <pmc_sleep+0x230>)
   84fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fmr  = EFC0->EEFC_FMR;
   84fca:	4b63      	ldr	r3, [pc, #396]	; (85158 <pmc_sleep+0x240>)
   84fcc:	681b      	ldr	r3, [r3, #0]
   84fce:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fmr1 = EFC1->EEFC_FMR;
   84fd0:	4b62      	ldr	r3, [pc, #392]	; (8515c <pmc_sleep+0x244>)
   84fd2:	681b      	ldr	r3, [r3, #0]
   84fd4:	627b      	str	r3, [r7, #36]	; 0x24
	if (p_osc_setting) {
   84fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   84fd8:	2b00      	cmp	r3, #0
   84fda:	d002      	beq.n	84fe2 <pmc_sleep+0xca>
		*p_osc_setting = mor;
   84fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   84fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   84fe0:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
   84fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   84fe4:	2b00      	cmp	r3, #0
   84fe6:	d003      	beq.n	84ff0 <pmc_sleep+0xd8>
		*p_pll0_setting = PMC->CKGR_PLLAR;
   84fe8:	4b57      	ldr	r3, [pc, #348]	; (85148 <pmc_sleep+0x230>)
   84fea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   84fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   84fee:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
   84ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   84ff2:	2b00      	cmp	r3, #0
   84ff4:	d003      	beq.n	84ffe <pmc_sleep+0xe6>
		*p_pll1_setting = PMC->CKGR_UCKR;
   84ff6:	4b54      	ldr	r3, [pc, #336]	; (85148 <pmc_sleep+0x230>)
   84ff8:	69da      	ldr	r2, [r3, #28]
   84ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   84ffc:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
   84ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85000:	2b00      	cmp	r3, #0
   85002:	d002      	beq.n	8500a <pmc_sleep+0xf2>
		*p_mck_setting  = mckr;
   85004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   85008:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
   8500a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8500c:	2b00      	cmp	r3, #0
   8500e:	d002      	beq.n	85016 <pmc_sleep+0xfe>
		*p_fmr_setting  = fmr;
   85010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   85012:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85014:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting1) {
   85016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   85018:	2b00      	cmp	r3, #0
   8501a:	d002      	beq.n	85022 <pmc_sleep+0x10a>
		*p_fmr_setting1 = fmr1;
   8501c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   8501e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   85020:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
   85022:	4a49      	ldr	r2, [pc, #292]	; (85148 <pmc_sleep+0x230>)
   85024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   85026:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8502a:	f043 0308 	orr.w	r3, r3, #8
   8502e:	6213      	str	r3, [r2, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
   85030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   85032:	f003 0303 	and.w	r3, r3, #3
   85036:	2b01      	cmp	r3, #1
   85038:	d90e      	bls.n	85058 <pmc_sleep+0x140>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
   8503a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8503c:	f023 0303 	bic.w	r3, r3, #3
   85040:	f043 0301 	orr.w	r3, r3, #1
   85044:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   85046:	4a40      	ldr	r2, [pc, #256]	; (85148 <pmc_sleep+0x230>)
   85048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8504a:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   8504c:	4b3e      	ldr	r3, [pc, #248]	; (85148 <pmc_sleep+0x230>)
   8504e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85050:	f003 0308 	and.w	r3, r3, #8
   85054:	2b00      	cmp	r3, #0
   85056:	d0f9      	beq.n	8504c <pmc_sleep+0x134>
	if (mckr & PMC_MCKR_PRES_Msk) {
   85058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8505a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8505e:	2b00      	cmp	r3, #0
   85060:	d00c      	beq.n	8507c <pmc_sleep+0x164>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
   85062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   85064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   85068:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   8506a:	4a37      	ldr	r2, [pc, #220]	; (85148 <pmc_sleep+0x230>)
   8506c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8506e:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   85070:	4b35      	ldr	r3, [pc, #212]	; (85148 <pmc_sleep+0x230>)
   85072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85074:	f003 0308 	and.w	r3, r3, #8
   85078:	2b00      	cmp	r3, #0
   8507a:	d0f9      	beq.n	85070 <pmc_sleep+0x158>
	pmc_disable_pllack();
   8507c:	4b38      	ldr	r3, [pc, #224]	; (85160 <pmc_sleep+0x248>)
   8507e:	4798      	blx	r3
	pmc_disable_upll_clock();
   85080:	4b38      	ldr	r3, [pc, #224]	; (85164 <pmc_sleep+0x24c>)
   85082:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   85084:	4b30      	ldr	r3, [pc, #192]	; (85148 <pmc_sleep+0x230>)
   85086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   8508c:	2b00      	cmp	r3, #0
   8508e:	d0f9      	beq.n	85084 <pmc_sleep+0x16c>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   85090:	4a2d      	ldr	r2, [pc, #180]	; (85148 <pmc_sleep+0x230>)
   85092:	4b2d      	ldr	r3, [pc, #180]	; (85148 <pmc_sleep+0x230>)
   85094:	6a1b      	ldr	r3, [r3, #32]
   85096:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   8509a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8509e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   850a2:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   850a4:	4b28      	ldr	r3, [pc, #160]	; (85148 <pmc_sleep+0x230>)
   850a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   850a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   850ac:	2b00      	cmp	r3, #0
   850ae:	d0f9      	beq.n	850a4 <pmc_sleep+0x18c>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
   850b0:	4a29      	ldr	r2, [pc, #164]	; (85158 <pmc_sleep+0x240>)
   850b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   850b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   850b8:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
   850ba:	4a28      	ldr	r2, [pc, #160]	; (8515c <pmc_sleep+0x244>)
   850bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   850be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   850c2:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
   850c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   850c8:	2b00      	cmp	r3, #0
   850ca:	d009      	beq.n	850e0 <pmc_sleep+0x1c8>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   850cc:	4a1e      	ldr	r2, [pc, #120]	; (85148 <pmc_sleep+0x230>)
   850ce:	4b1e      	ldr	r3, [pc, #120]	; (85148 <pmc_sleep+0x230>)
   850d0:	6a1b      	ldr	r3, [r3, #32]
   850d2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   850d6:	f023 0301 	bic.w	r3, r3, #1
   850da:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   850de:	6213      	str	r3, [r2, #32]
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
   850e0:	4b1b      	ldr	r3, [pc, #108]	; (85150 <pmc_sleep+0x238>)
   850e2:	2201      	movs	r2, #1
   850e4:	701a      	strb	r2, [r3, #0]
   850e6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   850ea:	b662      	cpsie	i

		pmc_enable_waitmode();
   850ec:	4b1e      	ldr	r3, [pc, #120]	; (85168 <pmc_sleep+0x250>)
   850ee:	4798      	blx	r3
  __ASM volatile ("cpsid i");
   850f0:	b672      	cpsid	i
   850f2:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
   850f6:	4b16      	ldr	r3, [pc, #88]	; (85150 <pmc_sleep+0x238>)
   850f8:	2200      	movs	r2, #0
   850fa:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
   850fc:	6a3d      	ldr	r5, [r7, #32]
   850fe:	69fc      	ldr	r4, [r7, #28]
   85100:	69b8      	ldr	r0, [r7, #24]
   85102:	6979      	ldr	r1, [r7, #20]
   85104:	693a      	ldr	r2, [r7, #16]
   85106:	68fb      	ldr	r3, [r7, #12]
   85108:	66fd      	str	r5, [r7, #108]	; 0x6c
   8510a:	66bc      	str	r4, [r7, #104]	; 0x68
   8510c:	6678      	str	r0, [r7, #100]	; 0x64
   8510e:	6639      	str	r1, [r7, #96]	; 0x60
   85110:	65fa      	str	r2, [r7, #92]	; 0x5c
   85112:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t pll_sr = 0;
   85114:	2300      	movs	r3, #0
   85116:	657b      	str	r3, [r7, #84]	; 0x54
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
   85118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   8511a:	f003 0302 	and.w	r3, r3, #2
   8511e:	2b00      	cmp	r3, #0
   85120:	d028      	beq.n	85174 <pmc_sleep+0x25c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   85122:	4909      	ldr	r1, [pc, #36]	; (85148 <pmc_sleep+0x230>)
   85124:	4b08      	ldr	r3, [pc, #32]	; (85148 <pmc_sleep+0x230>)
   85126:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   85128:	4a10      	ldr	r2, [pc, #64]	; (8516c <pmc_sleep+0x254>)
   8512a:	401a      	ands	r2, r3
   8512c:	4b10      	ldr	r3, [pc, #64]	; (85170 <pmc_sleep+0x258>)
   8512e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   85130:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   85132:	4a05      	ldr	r2, [pc, #20]	; (85148 <pmc_sleep+0x230>)
   85134:	4b04      	ldr	r3, [pc, #16]	; (85148 <pmc_sleep+0x230>)
   85136:	6a1b      	ldr	r3, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
   85138:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8513c:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   85140:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   85144:	6213      	str	r3, [r2, #32]
   85146:	e050      	b.n	851ea <pmc_sleep+0x2d2>
   85148:	400e0400 	.word	0x400e0400
   8514c:	e000ed00 	.word	0xe000ed00
   85150:	2000031a 	.word	0x2000031a
   85154:	20000d47 	.word	0x20000d47
   85158:	400e0800 	.word	0x400e0800
   8515c:	400e0a00 	.word	0x400e0a00
   85160:	000839d9 	.word	0x000839d9
   85164:	00083a09 	.word	0x00083a09
   85168:	00083b2d 	.word	0x00083b2d
   8516c:	fec8fffc 	.word	0xfec8fffc
   85170:	01370002 	.word	0x01370002
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
   85174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   85176:	f003 0301 	and.w	r3, r3, #1
   8517a:	2b00      	cmp	r3, #0
   8517c:	d035      	beq.n	851ea <pmc_sleep+0x2d2>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
   8517e:	4b59      	ldr	r3, [pc, #356]	; (852e4 <pmc_sleep+0x3cc>)
   85180:	6a1b      	ldr	r3, [r3, #32]
   85182:	f003 0301 	and.w	r3, r3, #1
   85186:	2b00      	cmp	r3, #0
   85188:	d111      	bne.n	851ae <pmc_sleep+0x296>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8518a:	4a56      	ldr	r2, [pc, #344]	; (852e4 <pmc_sleep+0x3cc>)
   8518c:	4b55      	ldr	r3, [pc, #340]	; (852e4 <pmc_sleep+0x3cc>)
   8518e:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   85190:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   85194:	f023 0303 	bic.w	r3, r3, #3
   85198:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8519c:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   851a0:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   851a2:	4b50      	ldr	r3, [pc, #320]	; (852e4 <pmc_sleep+0x3cc>)
   851a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   851a6:	f003 0301 	and.w	r3, r3, #1
   851aa:	2b00      	cmp	r3, #0
   851ac:	d0f9      	beq.n	851a2 <pmc_sleep+0x28a>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
   851ae:	4b4d      	ldr	r3, [pc, #308]	; (852e4 <pmc_sleep+0x3cc>)
   851b0:	6a1b      	ldr	r3, [r3, #32]
   851b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   851b6:	2b00      	cmp	r3, #0
   851b8:	d10d      	bne.n	851d6 <pmc_sleep+0x2be>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   851ba:	4a4a      	ldr	r2, [pc, #296]	; (852e4 <pmc_sleep+0x3cc>)
   851bc:	4b49      	ldr	r3, [pc, #292]	; (852e4 <pmc_sleep+0x3cc>)
   851be:	6a1b      	ldr	r3, [r3, #32]
   851c0:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   851c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   851c8:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   851ca:	4b46      	ldr	r3, [pc, #280]	; (852e4 <pmc_sleep+0x3cc>)
   851cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   851ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   851d2:	2b00      	cmp	r3, #0
   851d4:	d0f9      	beq.n	851ca <pmc_sleep+0x2b2>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   851d6:	4a43      	ldr	r2, [pc, #268]	; (852e4 <pmc_sleep+0x3cc>)
   851d8:	4b42      	ldr	r3, [pc, #264]	; (852e4 <pmc_sleep+0x3cc>)
   851da:	6a1b      	ldr	r3, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
   851dc:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   851e0:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   851e4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   851e8:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
   851ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
   851ec:	4b3e      	ldr	r3, [pc, #248]	; (852e8 <pmc_sleep+0x3d0>)
   851ee:	4013      	ands	r3, r2
   851f0:	2b00      	cmp	r3, #0
   851f2:	d008      	beq.n	85206 <pmc_sleep+0x2ee>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
   851f4:	4a3b      	ldr	r2, [pc, #236]	; (852e4 <pmc_sleep+0x3cc>)
   851f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   851f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   851fc:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
   851fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   85200:	f043 0302 	orr.w	r3, r3, #2
   85204:	657b      	str	r3, [r7, #84]	; 0x54
	if (pll1_setting & CKGR_UCKR_UPLLEN) {
   85206:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   85208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   8520c:	2b00      	cmp	r3, #0
   8520e:	d006      	beq.n	8521e <pmc_sleep+0x306>
		PMC->CKGR_UCKR = pll1_setting;
   85210:	4a34      	ldr	r2, [pc, #208]	; (852e4 <pmc_sleep+0x3cc>)
   85212:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   85214:	61d3      	str	r3, [r2, #28]
		pll_sr |= PMC_SR_LOCKU;
   85216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   85218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8521c:	657b      	str	r3, [r7, #84]	; 0x54
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
   8521e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   85220:	f003 0303 	and.w	r3, r3, #3
   85224:	2b02      	cmp	r3, #2
   85226:	d002      	beq.n	8522e <pmc_sleep+0x316>
   85228:	2b03      	cmp	r3, #3
   8522a:	d007      	beq.n	8523c <pmc_sleep+0x324>
   8522c:	e00c      	b.n	85248 <pmc_sleep+0x330>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
   8522e:	4b2d      	ldr	r3, [pc, #180]	; (852e4 <pmc_sleep+0x3cc>)
   85230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85232:	f003 0302 	and.w	r3, r3, #2
   85236:	2b00      	cmp	r3, #0
   85238:	d0f9      	beq.n	8522e <pmc_sleep+0x316>
   8523a:	e005      	b.n	85248 <pmc_sleep+0x330>
		while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   8523c:	4b29      	ldr	r3, [pc, #164]	; (852e4 <pmc_sleep+0x3cc>)
   8523e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85240:	f003 0340 	and.w	r3, r3, #64	; 0x40
   85244:	2b00      	cmp	r3, #0
   85246:	d0f9      	beq.n	8523c <pmc_sleep+0x324>
	mckr = PMC->PMC_MCKR;
   85248:	4b26      	ldr	r3, [pc, #152]	; (852e4 <pmc_sleep+0x3cc>)
   8524a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8524c:	653b      	str	r3, [r7, #80]	; 0x50
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   8524e:	4925      	ldr	r1, [pc, #148]	; (852e4 <pmc_sleep+0x3cc>)
   85250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   85252:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
   85256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   85258:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8525c:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   8525e:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   85260:	4b20      	ldr	r3, [pc, #128]	; (852e4 <pmc_sleep+0x3cc>)
   85262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85264:	f003 0308 	and.w	r3, r3, #8
   85268:	2b00      	cmp	r3, #0
   8526a:	d0f9      	beq.n	85260 <pmc_sleep+0x348>
	EFC0->EEFC_FMR = fmr_setting;
   8526c:	4a1f      	ldr	r2, [pc, #124]	; (852ec <pmc_sleep+0x3d4>)
   8526e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   85270:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr_setting1;
   85272:	4a1f      	ldr	r2, [pc, #124]	; (852f0 <pmc_sleep+0x3d8>)
   85274:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   85276:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
   85278:	4a1a      	ldr	r2, [pc, #104]	; (852e4 <pmc_sleep+0x3cc>)
   8527a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   8527c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   8527e:	4b19      	ldr	r3, [pc, #100]	; (852e4 <pmc_sleep+0x3cc>)
   85280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85282:	f003 0308 	and.w	r3, r3, #8
   85286:	2b00      	cmp	r3, #0
   85288:	d0f9      	beq.n	8527e <pmc_sleep+0x366>
	while (!(PMC->PMC_SR & pll_sr));
   8528a:	4b16      	ldr	r3, [pc, #88]	; (852e4 <pmc_sleep+0x3cc>)
   8528c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   8528e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   85290:	4013      	ands	r3, r2
   85292:	2b00      	cmp	r3, #0
   85294:	d0f9      	beq.n	8528a <pmc_sleep+0x372>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
   85296:	4b17      	ldr	r3, [pc, #92]	; (852f4 <pmc_sleep+0x3dc>)
   85298:	2200      	movs	r2, #0
   8529a:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
   8529c:	4b16      	ldr	r3, [pc, #88]	; (852f8 <pmc_sleep+0x3e0>)
   8529e:	681b      	ldr	r3, [r3, #0]
   852a0:	2b00      	cmp	r3, #0
   852a2:	d005      	beq.n	852b0 <pmc_sleep+0x398>
			callback_clocks_restored();
   852a4:	4b14      	ldr	r3, [pc, #80]	; (852f8 <pmc_sleep+0x3e0>)
   852a6:	681b      	ldr	r3, [r3, #0]
   852a8:	4798      	blx	r3
			callback_clocks_restored = NULL;
   852aa:	4b13      	ldr	r3, [pc, #76]	; (852f8 <pmc_sleep+0x3e0>)
   852ac:	2200      	movs	r2, #0
   852ae:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
   852b0:	4b12      	ldr	r3, [pc, #72]	; (852fc <pmc_sleep+0x3e4>)
   852b2:	2201      	movs	r2, #1
   852b4:	701a      	strb	r2, [r3, #0]
   852b6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   852ba:	b662      	cpsie	i

		break;
   852bc:	bf00      	nop
   852be:	e00d      	b.n	852dc <pmc_sleep+0x3c4>
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
   852c0:	4a0f      	ldr	r2, [pc, #60]	; (85300 <pmc_sleep+0x3e8>)
   852c2:	4b0f      	ldr	r3, [pc, #60]	; (85300 <pmc_sleep+0x3e8>)
   852c4:	691b      	ldr	r3, [r3, #16]
   852c6:	f043 0304 	orr.w	r3, r3, #4
   852ca:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
		cpu_irq_enable();
		__WFI() ;
#else
		cpu_irq_enable();
   852cc:	4b0b      	ldr	r3, [pc, #44]	; (852fc <pmc_sleep+0x3e4>)
   852ce:	2201      	movs	r2, #1
   852d0:	701a      	strb	r2, [r3, #0]
   852d2:	f3bf 8f5f 	dmb	sy
   852d6:	b662      	cpsie	i
  __ASM volatile ("wfe");
   852d8:	bf20      	wfe
		__WFE() ;
#endif
		break;
   852da:	bf00      	nop
#endif
	}
}
   852dc:	bf00      	nop
   852de:	3770      	adds	r7, #112	; 0x70
   852e0:	46bd      	mov	sp, r7
   852e2:	bdb0      	pop	{r4, r5, r7, pc}
   852e4:	400e0400 	.word	0x400e0400
   852e8:	07ff0000 	.word	0x07ff0000
   852ec:	400e0800 	.word	0x400e0800
   852f0:	400e0a00 	.word	0x400e0a00
   852f4:	20000d47 	.word	0x20000d47
   852f8:	20000d48 	.word	0x20000d48
   852fc:	2000031a 	.word	0x2000031a
   85300:	e000ed00 	.word	0xe000ed00

00085304 <pmc_is_wakeup_clocks_restored>:

bool pmc_is_wakeup_clocks_restored(void)
{
   85304:	b480      	push	{r7}
   85306:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
   85308:	4b08      	ldr	r3, [pc, #32]	; (8532c <pmc_is_wakeup_clocks_restored+0x28>)
   8530a:	781b      	ldrb	r3, [r3, #0]
   8530c:	b2db      	uxtb	r3, r3
   8530e:	2b00      	cmp	r3, #0
   85310:	bf14      	ite	ne
   85312:	2301      	movne	r3, #1
   85314:	2300      	moveq	r3, #0
   85316:	b2db      	uxtb	r3, r3
   85318:	f083 0301 	eor.w	r3, r3, #1
   8531c:	b2db      	uxtb	r3, r3
   8531e:	f003 0301 	and.w	r3, r3, #1
   85322:	b2db      	uxtb	r3, r3
}
   85324:	4618      	mov	r0, r3
   85326:	46bd      	mov	sp, r7
   85328:	bc80      	pop	{r7}
   8532a:	4770      	bx	lr
   8532c:	20000d47 	.word	0x20000d47

00085330 <sysclk_enable_peripheral_clock>:
{
   85330:	b580      	push	{r7, lr}
   85332:	b082      	sub	sp, #8
   85334:	af00      	add	r7, sp, #0
   85336:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   85338:	6878      	ldr	r0, [r7, #4]
   8533a:	4b03      	ldr	r3, [pc, #12]	; (85348 <sysclk_enable_peripheral_clock+0x18>)
   8533c:	4798      	blx	r3
}
   8533e:	bf00      	nop
   85340:	3708      	adds	r7, #8
   85342:	46bd      	mov	sp, r7
   85344:	bd80      	pop	{r7, pc}
   85346:	bf00      	nop
   85348:	00083a3d 	.word	0x00083a3d

0008534c <ioport_init>:
{
   8534c:	b580      	push	{r7, lr}
   8534e:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   85350:	200a      	movs	r0, #10
   85352:	4b03      	ldr	r3, [pc, #12]	; (85360 <ioport_init+0x14>)
   85354:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   85356:	200b      	movs	r0, #11
   85358:	4b01      	ldr	r3, [pc, #4]	; (85360 <ioport_init+0x14>)
   8535a:	4798      	blx	r3
}
   8535c:	bf00      	nop
   8535e:	bd80      	pop	{r7, pc}
   85360:	00085331 	.word	0x00085331

00085364 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   85364:	b580      	push	{r7, lr}
   85366:	af00      	add	r7, sp, #0
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   85368:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8536c:	201d      	movs	r0, #29
   8536e:	4b0a      	ldr	r3, [pc, #40]	; (85398 <iopins_normal+0x34>)
   85370:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   85372:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   85376:	201f      	movs	r0, #31
   85378:	4b07      	ldr	r3, [pc, #28]	; (85398 <iopins_normal+0x34>)
   8537a:	4798      	blx	r3
	//gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   8537c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   85380:	2018      	movs	r0, #24
   85382:	4b05      	ldr	r3, [pc, #20]	; (85398 <iopins_normal+0x34>)
   85384:	4798      	blx	r3
	//board_sram_pwron();

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   85386:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8538a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   8538e:	4803      	ldr	r0, [pc, #12]	; (8539c <iopins_normal+0x38>)
   85390:	4b03      	ldr	r3, [pc, #12]	; (853a0 <iopins_normal+0x3c>)
   85392:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   85394:	bf00      	nop
   85396:	bd80      	pop	{r7, pc}
   85398:	00083f1d 	.word	0x00083f1d
   8539c:	400e0c00 	.word	0x400e0c00
   853a0:	00084055 	.word	0x00084055

000853a4 <board_init>:

void board_init(void)
{
   853a4:	b580      	push	{r7, lr}
   853a6:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   853a8:	4b04      	ldr	r3, [pc, #16]	; (853bc <board_init+0x18>)
   853aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   853ae:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   853b0:	4b03      	ldr	r3, [pc, #12]	; (853c0 <board_init+0x1c>)
   853b2:	4798      	blx	r3

	iopins_normal();
   853b4:	4b03      	ldr	r3, [pc, #12]	; (853c4 <board_init+0x20>)
   853b6:	4798      	blx	r3

}
   853b8:	bf00      	nop
   853ba:	bd80      	pop	{r7, pc}
   853bc:	400e1250 	.word	0x400e1250
   853c0:	0008534d 	.word	0x0008534d
   853c4:	00085365 	.word	0x00085365

000853c8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   853c8:	b480      	push	{r7}
   853ca:	b083      	sub	sp, #12
   853cc:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   853ce:	4b10      	ldr	r3, [pc, #64]	; (85410 <cpu_irq_enter_critical+0x48>)
   853d0:	681b      	ldr	r3, [r3, #0]
   853d2:	2b00      	cmp	r3, #0
   853d4:	d112      	bne.n	853fc <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   853d6:	f3ef 8310 	mrs	r3, PRIMASK
   853da:	607b      	str	r3, [r7, #4]
  return(result);
   853dc:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   853de:	2b00      	cmp	r3, #0
   853e0:	d109      	bne.n	853f6 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i");
   853e2:	b672      	cpsid	i
  __ASM volatile ("dmb");
   853e4:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   853e8:	4b0a      	ldr	r3, [pc, #40]	; (85414 <cpu_irq_enter_critical+0x4c>)
   853ea:	2200      	movs	r2, #0
   853ec:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   853ee:	4b0a      	ldr	r3, [pc, #40]	; (85418 <cpu_irq_enter_critical+0x50>)
   853f0:	2201      	movs	r2, #1
   853f2:	701a      	strb	r2, [r3, #0]
   853f4:	e002      	b.n	853fc <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   853f6:	4b08      	ldr	r3, [pc, #32]	; (85418 <cpu_irq_enter_critical+0x50>)
   853f8:	2200      	movs	r2, #0
   853fa:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   853fc:	4b04      	ldr	r3, [pc, #16]	; (85410 <cpu_irq_enter_critical+0x48>)
   853fe:	681b      	ldr	r3, [r3, #0]
   85400:	3301      	adds	r3, #1
   85402:	4a03      	ldr	r2, [pc, #12]	; (85410 <cpu_irq_enter_critical+0x48>)
   85404:	6013      	str	r3, [r2, #0]
}
   85406:	bf00      	nop
   85408:	370c      	adds	r7, #12
   8540a:	46bd      	mov	sp, r7
   8540c:	bc80      	pop	{r7}
   8540e:	4770      	bx	lr
   85410:	20000d4c 	.word	0x20000d4c
   85414:	2000031a 	.word	0x2000031a
   85418:	20000d50 	.word	0x20000d50

0008541c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   8541c:	b480      	push	{r7}
   8541e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   85420:	4b0b      	ldr	r3, [pc, #44]	; (85450 <cpu_irq_leave_critical+0x34>)
   85422:	681b      	ldr	r3, [r3, #0]
   85424:	3b01      	subs	r3, #1
   85426:	4a0a      	ldr	r2, [pc, #40]	; (85450 <cpu_irq_leave_critical+0x34>)
   85428:	6013      	str	r3, [r2, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   8542a:	4b09      	ldr	r3, [pc, #36]	; (85450 <cpu_irq_leave_critical+0x34>)
   8542c:	681b      	ldr	r3, [r3, #0]
   8542e:	2b00      	cmp	r3, #0
   85430:	d10a      	bne.n	85448 <cpu_irq_leave_critical+0x2c>
   85432:	4b08      	ldr	r3, [pc, #32]	; (85454 <cpu_irq_leave_critical+0x38>)
   85434:	781b      	ldrb	r3, [r3, #0]
   85436:	b2db      	uxtb	r3, r3
   85438:	2b00      	cmp	r3, #0
   8543a:	d005      	beq.n	85448 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   8543c:	4b06      	ldr	r3, [pc, #24]	; (85458 <cpu_irq_leave_critical+0x3c>)
   8543e:	2201      	movs	r2, #1
   85440:	701a      	strb	r2, [r3, #0]
   85442:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85446:	b662      	cpsie	i
	}
}
   85448:	bf00      	nop
   8544a:	46bd      	mov	sp, r7
   8544c:	bc80      	pop	{r7}
   8544e:	4770      	bx	lr
   85450:	20000d4c 	.word	0x20000d4c
   85454:	20000d50 	.word	0x20000d50
   85458:	2000031a 	.word	0x2000031a

0008545c <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   8545c:	b480      	push	{r7}
   8545e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   85460:	4b57      	ldr	r3, [pc, #348]	; (855c0 <SystemCoreClockUpdate+0x164>)
   85462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85464:	f003 0303 	and.w	r3, r3, #3
   85468:	2b03      	cmp	r3, #3
   8546a:	f200 808a 	bhi.w	85582 <SystemCoreClockUpdate+0x126>
   8546e:	a201      	add	r2, pc, #4	; (adr r2, 85474 <SystemCoreClockUpdate+0x18>)
   85470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85474:	00085485 	.word	0x00085485
   85478:	000854a5 	.word	0x000854a5
   8547c:	000854f5 	.word	0x000854f5
   85480:	000854f5 	.word	0x000854f5
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   85484:	4b4f      	ldr	r3, [pc, #316]	; (855c4 <SystemCoreClockUpdate+0x168>)
   85486:	695b      	ldr	r3, [r3, #20]
   85488:	f003 0380 	and.w	r3, r3, #128	; 0x80
   8548c:	2b00      	cmp	r3, #0
   8548e:	d004      	beq.n	8549a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   85490:	4b4d      	ldr	r3, [pc, #308]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   85492:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85496:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   85498:	e073      	b.n	85582 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8549a:	4b4b      	ldr	r3, [pc, #300]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   8549c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   854a0:	601a      	str	r2, [r3, #0]
		break;
   854a2:	e06e      	b.n	85582 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   854a4:	4b46      	ldr	r3, [pc, #280]	; (855c0 <SystemCoreClockUpdate+0x164>)
   854a6:	6a1b      	ldr	r3, [r3, #32]
   854a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   854ac:	2b00      	cmp	r3, #0
   854ae:	d003      	beq.n	854b8 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   854b0:	4b45      	ldr	r3, [pc, #276]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   854b2:	4a46      	ldr	r2, [pc, #280]	; (855cc <SystemCoreClockUpdate+0x170>)
   854b4:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   854b6:	e064      	b.n	85582 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   854b8:	4b43      	ldr	r3, [pc, #268]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   854ba:	4a45      	ldr	r2, [pc, #276]	; (855d0 <SystemCoreClockUpdate+0x174>)
   854bc:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   854be:	4b40      	ldr	r3, [pc, #256]	; (855c0 <SystemCoreClockUpdate+0x164>)
   854c0:	6a1b      	ldr	r3, [r3, #32]
   854c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   854c6:	2b10      	cmp	r3, #16
   854c8:	d004      	beq.n	854d4 <SystemCoreClockUpdate+0x78>
   854ca:	2b20      	cmp	r3, #32
   854cc:	d008      	beq.n	854e0 <SystemCoreClockUpdate+0x84>
   854ce:	2b00      	cmp	r3, #0
   854d0:	d00e      	beq.n	854f0 <SystemCoreClockUpdate+0x94>
				break;
   854d2:	e00e      	b.n	854f2 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
   854d4:	4b3c      	ldr	r3, [pc, #240]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   854d6:	681b      	ldr	r3, [r3, #0]
   854d8:	005b      	lsls	r3, r3, #1
   854da:	4a3b      	ldr	r2, [pc, #236]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   854dc:	6013      	str	r3, [r2, #0]
				break;
   854de:	e008      	b.n	854f2 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
   854e0:	4b39      	ldr	r3, [pc, #228]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   854e2:	681a      	ldr	r2, [r3, #0]
   854e4:	4613      	mov	r3, r2
   854e6:	005b      	lsls	r3, r3, #1
   854e8:	4413      	add	r3, r2
   854ea:	4a37      	ldr	r2, [pc, #220]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   854ec:	6013      	str	r3, [r2, #0]
				break;
   854ee:	e000      	b.n	854f2 <SystemCoreClockUpdate+0x96>
				break;
   854f0:	bf00      	nop
		break;
   854f2:	e046      	b.n	85582 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   854f4:	4b32      	ldr	r3, [pc, #200]	; (855c0 <SystemCoreClockUpdate+0x164>)
   854f6:	6a1b      	ldr	r3, [r3, #32]
   854f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   854fc:	2b00      	cmp	r3, #0
   854fe:	d003      	beq.n	85508 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   85500:	4b31      	ldr	r3, [pc, #196]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   85502:	4a32      	ldr	r2, [pc, #200]	; (855cc <SystemCoreClockUpdate+0x170>)
   85504:	601a      	str	r2, [r3, #0]
   85506:	e01c      	b.n	85542 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   85508:	4b2f      	ldr	r3, [pc, #188]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   8550a:	4a31      	ldr	r2, [pc, #196]	; (855d0 <SystemCoreClockUpdate+0x174>)
   8550c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8550e:	4b2c      	ldr	r3, [pc, #176]	; (855c0 <SystemCoreClockUpdate+0x164>)
   85510:	6a1b      	ldr	r3, [r3, #32]
   85512:	f003 0370 	and.w	r3, r3, #112	; 0x70
   85516:	2b10      	cmp	r3, #16
   85518:	d004      	beq.n	85524 <SystemCoreClockUpdate+0xc8>
   8551a:	2b20      	cmp	r3, #32
   8551c:	d008      	beq.n	85530 <SystemCoreClockUpdate+0xd4>
   8551e:	2b00      	cmp	r3, #0
   85520:	d00e      	beq.n	85540 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   85522:	e00e      	b.n	85542 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 2U;
   85524:	4b28      	ldr	r3, [pc, #160]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   85526:	681b      	ldr	r3, [r3, #0]
   85528:	005b      	lsls	r3, r3, #1
   8552a:	4a27      	ldr	r2, [pc, #156]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   8552c:	6013      	str	r3, [r2, #0]
				break;
   8552e:	e008      	b.n	85542 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 3U;
   85530:	4b25      	ldr	r3, [pc, #148]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   85532:	681a      	ldr	r2, [r3, #0]
   85534:	4613      	mov	r3, r2
   85536:	005b      	lsls	r3, r3, #1
   85538:	4413      	add	r3, r2
   8553a:	4a23      	ldr	r2, [pc, #140]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   8553c:	6013      	str	r3, [r2, #0]
				break;
   8553e:	e000      	b.n	85542 <SystemCoreClockUpdate+0xe6>
				break;
   85540:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   85542:	4b1f      	ldr	r3, [pc, #124]	; (855c0 <SystemCoreClockUpdate+0x164>)
   85544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85546:	f003 0303 	and.w	r3, r3, #3
   8554a:	2b02      	cmp	r3, #2
   8554c:	d115      	bne.n	8557a <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8554e:	4b1c      	ldr	r3, [pc, #112]	; (855c0 <SystemCoreClockUpdate+0x164>)
   85550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   85552:	0c1b      	lsrs	r3, r3, #16
   85554:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                          CKGR_PLLAR_MULA_Pos) + 1U);
   85558:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8555a:	4a1b      	ldr	r2, [pc, #108]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   8555c:	6812      	ldr	r2, [r2, #0]
   8555e:	fb02 f303 	mul.w	r3, r2, r3
   85562:	4a19      	ldr	r2, [pc, #100]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   85564:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   85566:	4b16      	ldr	r3, [pc, #88]	; (855c0 <SystemCoreClockUpdate+0x164>)
   85568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   8556a:	b2db      	uxtb	r3, r3
   8556c:	4a16      	ldr	r2, [pc, #88]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   8556e:	6812      	ldr	r2, [r2, #0]
   85570:	fbb2 f3f3 	udiv	r3, r2, r3
   85574:	4a14      	ldr	r2, [pc, #80]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   85576:	6013      	str	r3, [r2, #0]
				                           CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   85578:	e002      	b.n	85580 <SystemCoreClockUpdate+0x124>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8557a:	4b13      	ldr	r3, [pc, #76]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   8557c:	4a15      	ldr	r2, [pc, #84]	; (855d4 <SystemCoreClockUpdate+0x178>)
   8557e:	601a      	str	r2, [r3, #0]
		break;
   85580:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   85582:	4b0f      	ldr	r3, [pc, #60]	; (855c0 <SystemCoreClockUpdate+0x164>)
   85584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85586:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8558a:	2b70      	cmp	r3, #112	; 0x70
   8558c:	d108      	bne.n	855a0 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   8558e:	4b0e      	ldr	r3, [pc, #56]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   85590:	681b      	ldr	r3, [r3, #0]
   85592:	4a11      	ldr	r2, [pc, #68]	; (855d8 <SystemCoreClockUpdate+0x17c>)
   85594:	fba2 2303 	umull	r2, r3, r2, r3
   85598:	085b      	lsrs	r3, r3, #1
   8559a:	4a0b      	ldr	r2, [pc, #44]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   8559c:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                           PMC_MCKR_PRES_Pos);
	}
}
   8559e:	e00a      	b.n	855b6 <SystemCoreClockUpdate+0x15a>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   855a0:	4b07      	ldr	r3, [pc, #28]	; (855c0 <SystemCoreClockUpdate+0x164>)
   855a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   855a4:	091b      	lsrs	r3, r3, #4
   855a6:	f003 0307 	and.w	r3, r3, #7
   855aa:	4a07      	ldr	r2, [pc, #28]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   855ac:	6812      	ldr	r2, [r2, #0]
   855ae:	fa22 f303 	lsr.w	r3, r2, r3
   855b2:	4a05      	ldr	r2, [pc, #20]	; (855c8 <SystemCoreClockUpdate+0x16c>)
   855b4:	6013      	str	r3, [r2, #0]
}
   855b6:	bf00      	nop
   855b8:	46bd      	mov	sp, r7
   855ba:	bc80      	pop	{r7}
   855bc:	4770      	bx	lr
   855be:	bf00      	nop
   855c0:	400e0400 	.word	0x400e0400
   855c4:	400e1210 	.word	0x400e1210
   855c8:	200003a8 	.word	0x200003a8
   855cc:	00b71b00 	.word	0x00b71b00
   855d0:	003d0900 	.word	0x003d0900
   855d4:	0e4e1c00 	.word	0x0e4e1c00
   855d8:	aaaaaaab 	.word	0xaaaaaaab

000855dc <__libc_init_array>:
   855dc:	b570      	push	{r4, r5, r6, lr}
   855de:	4e0f      	ldr	r6, [pc, #60]	; (8561c <__libc_init_array+0x40>)
   855e0:	4d0f      	ldr	r5, [pc, #60]	; (85620 <__libc_init_array+0x44>)
   855e2:	1b76      	subs	r6, r6, r5
   855e4:	10b6      	asrs	r6, r6, #2
   855e6:	bf18      	it	ne
   855e8:	2400      	movne	r4, #0
   855ea:	d005      	beq.n	855f8 <__libc_init_array+0x1c>
   855ec:	3401      	adds	r4, #1
   855ee:	f855 3b04 	ldr.w	r3, [r5], #4
   855f2:	4798      	blx	r3
   855f4:	42a6      	cmp	r6, r4
   855f6:	d1f9      	bne.n	855ec <__libc_init_array+0x10>
   855f8:	4e0a      	ldr	r6, [pc, #40]	; (85624 <__libc_init_array+0x48>)
   855fa:	4d0b      	ldr	r5, [pc, #44]	; (85628 <__libc_init_array+0x4c>)
   855fc:	f000 f8c4 	bl	85788 <_init>
   85600:	1b76      	subs	r6, r6, r5
   85602:	10b6      	asrs	r6, r6, #2
   85604:	bf18      	it	ne
   85606:	2400      	movne	r4, #0
   85608:	d006      	beq.n	85618 <__libc_init_array+0x3c>
   8560a:	3401      	adds	r4, #1
   8560c:	f855 3b04 	ldr.w	r3, [r5], #4
   85610:	4798      	blx	r3
   85612:	42a6      	cmp	r6, r4
   85614:	d1f9      	bne.n	8560a <__libc_init_array+0x2e>
   85616:	bd70      	pop	{r4, r5, r6, pc}
   85618:	bd70      	pop	{r4, r5, r6, pc}
   8561a:	bf00      	nop
   8561c:	00085794 	.word	0x00085794
   85620:	00085794 	.word	0x00085794
   85624:	0008579c 	.word	0x0008579c
   85628:	00085794 	.word	0x00085794

0008562c <register_fini>:
   8562c:	4b02      	ldr	r3, [pc, #8]	; (85638 <register_fini+0xc>)
   8562e:	b113      	cbz	r3, 85636 <register_fini+0xa>
   85630:	4802      	ldr	r0, [pc, #8]	; (8563c <register_fini+0x10>)
   85632:	f000 b805 	b.w	85640 <atexit>
   85636:	4770      	bx	lr
   85638:	00000000 	.word	0x00000000
   8563c:	0008564d 	.word	0x0008564d

00085640 <atexit>:
   85640:	2300      	movs	r3, #0
   85642:	4601      	mov	r1, r0
   85644:	461a      	mov	r2, r3
   85646:	4618      	mov	r0, r3
   85648:	f000 b81e 	b.w	85688 <__register_exitproc>

0008564c <__libc_fini_array>:
   8564c:	b538      	push	{r3, r4, r5, lr}
   8564e:	4c0a      	ldr	r4, [pc, #40]	; (85678 <__libc_fini_array+0x2c>)
   85650:	4d0a      	ldr	r5, [pc, #40]	; (8567c <__libc_fini_array+0x30>)
   85652:	1b64      	subs	r4, r4, r5
   85654:	10a4      	asrs	r4, r4, #2
   85656:	d00a      	beq.n	8566e <__libc_fini_array+0x22>
   85658:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   8565c:	3b01      	subs	r3, #1
   8565e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   85662:	3c01      	subs	r4, #1
   85664:	f855 3904 	ldr.w	r3, [r5], #-4
   85668:	4798      	blx	r3
   8566a:	2c00      	cmp	r4, #0
   8566c:	d1f9      	bne.n	85662 <__libc_fini_array+0x16>
   8566e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   85672:	f000 b893 	b.w	8579c <_fini>
   85676:	bf00      	nop
   85678:	000857ac 	.word	0x000857ac
   8567c:	000857a8 	.word	0x000857a8

00085680 <__retarget_lock_acquire_recursive>:
   85680:	4770      	bx	lr
   85682:	bf00      	nop

00085684 <__retarget_lock_release_recursive>:
   85684:	4770      	bx	lr
   85686:	bf00      	nop

00085688 <__register_exitproc>:
   85688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8568c:	4d2c      	ldr	r5, [pc, #176]	; (85740 <__register_exitproc+0xb8>)
   8568e:	4606      	mov	r6, r0
   85690:	6828      	ldr	r0, [r5, #0]
   85692:	4698      	mov	r8, r3
   85694:	460f      	mov	r7, r1
   85696:	4691      	mov	r9, r2
   85698:	f7ff fff2 	bl	85680 <__retarget_lock_acquire_recursive>
   8569c:	4b29      	ldr	r3, [pc, #164]	; (85744 <__register_exitproc+0xbc>)
   8569e:	681c      	ldr	r4, [r3, #0]
   856a0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   856a4:	2b00      	cmp	r3, #0
   856a6:	d03e      	beq.n	85726 <__register_exitproc+0x9e>
   856a8:	685a      	ldr	r2, [r3, #4]
   856aa:	2a1f      	cmp	r2, #31
   856ac:	dc1c      	bgt.n	856e8 <__register_exitproc+0x60>
   856ae:	f102 0e01 	add.w	lr, r2, #1
   856b2:	b176      	cbz	r6, 856d2 <__register_exitproc+0x4a>
   856b4:	2101      	movs	r1, #1
   856b6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   856ba:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   856be:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   856c2:	4091      	lsls	r1, r2
   856c4:	4308      	orrs	r0, r1
   856c6:	2e02      	cmp	r6, #2
   856c8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   856cc:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   856d0:	d023      	beq.n	8571a <__register_exitproc+0x92>
   856d2:	3202      	adds	r2, #2
   856d4:	f8c3 e004 	str.w	lr, [r3, #4]
   856d8:	6828      	ldr	r0, [r5, #0]
   856da:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   856de:	f7ff ffd1 	bl	85684 <__retarget_lock_release_recursive>
   856e2:	2000      	movs	r0, #0
   856e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   856e8:	4b17      	ldr	r3, [pc, #92]	; (85748 <__register_exitproc+0xc0>)
   856ea:	b30b      	cbz	r3, 85730 <__register_exitproc+0xa8>
   856ec:	f44f 70c8 	mov.w	r0, #400	; 0x190
   856f0:	f3af 8000 	nop.w
   856f4:	4603      	mov	r3, r0
   856f6:	b1d8      	cbz	r0, 85730 <__register_exitproc+0xa8>
   856f8:	2000      	movs	r0, #0
   856fa:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   856fe:	f04f 0e01 	mov.w	lr, #1
   85702:	6058      	str	r0, [r3, #4]
   85704:	6019      	str	r1, [r3, #0]
   85706:	4602      	mov	r2, r0
   85708:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8570c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   85710:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   85714:	2e00      	cmp	r6, #0
   85716:	d0dc      	beq.n	856d2 <__register_exitproc+0x4a>
   85718:	e7cc      	b.n	856b4 <__register_exitproc+0x2c>
   8571a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8571e:	4301      	orrs	r1, r0
   85720:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   85724:	e7d5      	b.n	856d2 <__register_exitproc+0x4a>
   85726:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8572a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8572e:	e7bb      	b.n	856a8 <__register_exitproc+0x20>
   85730:	6828      	ldr	r0, [r5, #0]
   85732:	f7ff ffa7 	bl	85684 <__retarget_lock_release_recursive>
   85736:	f04f 30ff 	mov.w	r0, #4294967295
   8573a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8573e:	bf00      	nop
   85740:	200007d8 	.word	0x200007d8
   85744:	00085784 	.word	0x00085784
   85748:	00000000 	.word	0x00000000
   8574c:	00000000 	.word	0x00000000
   85750:	00000000 	.word	0x00000000
   85754:	aaaaaa00 	.word	0xaaaaaa00
   85758:	aaaaaaaa 	.word	0xaaaaaaaa
   8575c:	eeeeeeaa 	.word	0xeeeeeeaa
   85760:	eeeeeeee 	.word	0xeeeeeeee
   85764:	fffffeee 	.word	0xfffffeee
   85768:	ffffffff 	.word	0xffffffff
   8576c:	ffffffff 	.word	0xffffffff
   85770:	dfbf7fff 	.word	0xdfbf7fff
   85774:	fdfbf7ef 	.word	0xfdfbf7ef
   85778:	dfbf7efc 	.word	0xdfbf7efc
   8577c:	fdfbf7ef 	.word	0xfdfbf7ef
   85780:	0000007e 	.word	0x0000007e

00085784 <_global_impure_ptr>:
   85784:	200003b0                                ... 

00085788 <_init>:
   85788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8578a:	bf00      	nop
   8578c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8578e:	bc08      	pop	{r3}
   85790:	469e      	mov	lr, r3
   85792:	4770      	bx	lr

00085794 <__init_array_start>:
   85794:	0008562d 	.word	0x0008562d

00085798 <__frame_dummy_init_array_entry>:
   85798:	000800e1                                ....

0008579c <_fini>:
   8579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8579e:	bf00      	nop
   857a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   857a2:	bc08      	pop	{r3}
   857a4:	469e      	mov	lr, r3
   857a6:	4770      	bx	lr

000857a8 <__fini_array_start>:
   857a8:	000800bd 	.word	0x000800bd

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b480      	push	{r7}
20000002:	b089      	sub	sp, #36	; 0x24
20000004:	af00      	add	r7, sp, #0
20000006:	60f8      	str	r0, [r7, #12]
20000008:	60b9      	str	r1, [r7, #8]
2000000a:	607a      	str	r2, [r7, #4]
2000000c:	603b      	str	r3, [r7, #0]
#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000000e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20000012:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000014:	683b      	ldr	r3, [r7, #0]
20000016:	2b00      	cmp	r3, #0
20000018:	d101      	bne.n	2000001e <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
2000001a:	2302      	movs	r3, #2
2000001c:	e03c      	b.n	20000098 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000001e:	68fb      	ldr	r3, [r7, #12]
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000026:	68fb      	ldr	r3, [r7, #12]
20000028:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000002a:	68bb      	ldr	r3, [r7, #8]
2000002c:	b2db      	uxtb	r3, r3
2000002e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000032:	68fb      	ldr	r3, [r7, #12]
20000034:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000036:	68fb      	ldr	r3, [r7, #12]
20000038:	689b      	ldr	r3, [r3, #8]
2000003a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000003c:	697b      	ldr	r3, [r7, #20]
2000003e:	f003 0301 	and.w	r3, r3, #1
20000042:	2b01      	cmp	r3, #1
20000044:	d0f7      	beq.n	20000036 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000046:	2300      	movs	r3, #0
20000048:	61fb      	str	r3, [r7, #28]
2000004a:	e00c      	b.n	20000066 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000004c:	69fb      	ldr	r3, [r7, #28]
2000004e:	009b      	lsls	r3, r3, #2
20000050:	683a      	ldr	r2, [r7, #0]
20000052:	4413      	add	r3, r2
20000054:	69fa      	ldr	r2, [r7, #28]
20000056:	0092      	lsls	r2, r2, #2
20000058:	69b9      	ldr	r1, [r7, #24]
2000005a:	440a      	add	r2, r1
2000005c:	6812      	ldr	r2, [r2, #0]
2000005e:	601a      	str	r2, [r3, #0]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000060:	69fb      	ldr	r3, [r7, #28]
20000062:	3301      	adds	r3, #1
20000064:	61fb      	str	r3, [r7, #28]
20000066:	69fa      	ldr	r2, [r7, #28]
20000068:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000006a:	429a      	cmp	r2, r3
2000006c:	d3ee      	bcc.n	2000004c <efc_perform_read_sequence+0x4c>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	b2db      	uxtb	r3, r3
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000072:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000007a:	68fb      	ldr	r3, [r7, #12]
2000007c:	689b      	ldr	r3, [r3, #8]
2000007e:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	697b      	ldr	r3, [r7, #20]
20000082:	f003 0301 	and.w	r3, r3, #1
20000086:	2b01      	cmp	r3, #1
20000088:	d1f7      	bne.n	2000007a <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	681b      	ldr	r3, [r3, #0]
2000008e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
20000096:	2300      	movs	r3, #0
}
20000098:	4618      	mov	r0, r3
2000009a:	3724      	adds	r7, #36	; 0x24
2000009c:	46bd      	mov	sp, r7
2000009e:	bc80      	pop	{r7}
200000a0:	4770      	bx	lr

200000a2 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000a2:	b480      	push	{r7}
200000a4:	b083      	sub	sp, #12
200000a6:	af00      	add	r7, sp, #0
200000a8:	6078      	str	r0, [r7, #4]
200000aa:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	683a      	ldr	r2, [r7, #0]
200000b0:	601a      	str	r2, [r3, #0]
}
200000b2:	bf00      	nop
200000b4:	370c      	adds	r7, #12
200000b6:	46bd      	mov	sp, r7
200000b8:	bc80      	pop	{r7}
200000ba:	4770      	bx	lr

200000bc <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000bc:	b480      	push	{r7}
200000be:	b085      	sub	sp, #20
200000c0:	af00      	add	r7, sp, #0
200000c2:	6078      	str	r0, [r7, #4]
200000c4:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000c6:	687b      	ldr	r3, [r7, #4]
200000c8:	683a      	ldr	r2, [r7, #0]
200000ca:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	689b      	ldr	r3, [r3, #8]
200000d0:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000d2:	68fb      	ldr	r3, [r7, #12]
200000d4:	f003 0301 	and.w	r3, r3, #1
200000d8:	2b01      	cmp	r3, #1
200000da:	d1f7      	bne.n	200000cc <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000dc:	68fb      	ldr	r3, [r7, #12]
200000de:	f003 0306 	and.w	r3, r3, #6
}
200000e2:	4618      	mov	r0, r3
200000e4:	3714      	adds	r7, #20
200000e6:	46bd      	mov	sp, r7
200000e8:	bc80      	pop	{r7}
200000ea:	4770      	bx	lr

200000ec <SystemInit>:
{
200000ec:	b480      	push	{r7}
200000ee:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000f0:	4b2a      	ldr	r3, [pc, #168]	; (2000019c <SystemInit+0xb0>)
200000f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000f6:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000f8:	4b29      	ldr	r3, [pc, #164]	; (200001a0 <SystemInit+0xb4>)
200000fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000fe:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000100:	4b28      	ldr	r3, [pc, #160]	; (200001a4 <SystemInit+0xb8>)
20000102:	6a1b      	ldr	r3, [r3, #32]
20000104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20000108:	2b00      	cmp	r3, #0
2000010a:	d109      	bne.n	20000120 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000010c:	4b25      	ldr	r3, [pc, #148]	; (200001a4 <SystemInit+0xb8>)
2000010e:	4a26      	ldr	r2, [pc, #152]	; (200001a8 <SystemInit+0xbc>)
20000110:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000112:	bf00      	nop
20000114:	4b23      	ldr	r3, [pc, #140]	; (200001a4 <SystemInit+0xb8>)
20000116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000118:	f003 0301 	and.w	r3, r3, #1
2000011c:	2b00      	cmp	r3, #0
2000011e:	d0f9      	beq.n	20000114 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000120:	4b20      	ldr	r3, [pc, #128]	; (200001a4 <SystemInit+0xb8>)
20000122:	4a22      	ldr	r2, [pc, #136]	; (200001ac <SystemInit+0xc0>)
20000124:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000126:	bf00      	nop
20000128:	4b1e      	ldr	r3, [pc, #120]	; (200001a4 <SystemInit+0xb8>)
2000012a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000012c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000130:	2b00      	cmp	r3, #0
20000132:	d0f9      	beq.n	20000128 <SystemInit+0x3c>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000134:	4a1b      	ldr	r2, [pc, #108]	; (200001a4 <SystemInit+0xb8>)
20000136:	4b1b      	ldr	r3, [pc, #108]	; (200001a4 <SystemInit+0xb8>)
20000138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000013a:	f023 0303 	bic.w	r3, r3, #3
2000013e:	f043 0301 	orr.w	r3, r3, #1
20000142:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000144:	bf00      	nop
20000146:	4b17      	ldr	r3, [pc, #92]	; (200001a4 <SystemInit+0xb8>)
20000148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000014a:	f003 0308 	and.w	r3, r3, #8
2000014e:	2b00      	cmp	r3, #0
20000150:	d0f9      	beq.n	20000146 <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000152:	4b14      	ldr	r3, [pc, #80]	; (200001a4 <SystemInit+0xb8>)
20000154:	4a16      	ldr	r2, [pc, #88]	; (200001b0 <SystemInit+0xc4>)
20000156:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000158:	bf00      	nop
2000015a:	4b12      	ldr	r3, [pc, #72]	; (200001a4 <SystemInit+0xb8>)
2000015c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000015e:	f003 0302 	and.w	r3, r3, #2
20000162:	2b00      	cmp	r3, #0
20000164:	d0f9      	beq.n	2000015a <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000166:	4b0f      	ldr	r3, [pc, #60]	; (200001a4 <SystemInit+0xb8>)
20000168:	2211      	movs	r2, #17
2000016a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000016c:	bf00      	nop
2000016e:	4b0d      	ldr	r3, [pc, #52]	; (200001a4 <SystemInit+0xb8>)
20000170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000172:	f003 0308 	and.w	r3, r3, #8
20000176:	2b00      	cmp	r3, #0
20000178:	d0f9      	beq.n	2000016e <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000017a:	4b0a      	ldr	r3, [pc, #40]	; (200001a4 <SystemInit+0xb8>)
2000017c:	2212      	movs	r2, #18
2000017e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000180:	bf00      	nop
20000182:	4b08      	ldr	r3, [pc, #32]	; (200001a4 <SystemInit+0xb8>)
20000184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000186:	f003 0308 	and.w	r3, r3, #8
2000018a:	2b00      	cmp	r3, #0
2000018c:	d0f9      	beq.n	20000182 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2000018e:	4b09      	ldr	r3, [pc, #36]	; (200001b4 <SystemInit+0xc8>)
20000190:	4a09      	ldr	r2, [pc, #36]	; (200001b8 <SystemInit+0xcc>)
20000192:	601a      	str	r2, [r3, #0]
}
20000194:	bf00      	nop
20000196:	46bd      	mov	sp, r7
20000198:	bc80      	pop	{r7}
2000019a:	4770      	bx	lr
2000019c:	400e0800 	.word	0x400e0800
200001a0:	400e0a00 	.word	0x400e0a00
200001a4:	400e0400 	.word	0x400e0400
200001a8:	00370809 	.word	0x00370809
200001ac:	01370809 	.word	0x01370809
200001b0:	200f3f01 	.word	0x200f3f01
200001b4:	200003a8 	.word	0x200003a8
200001b8:	05b8d800 	.word	0x05b8d800

200001bc <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200001bc:	b480      	push	{r7}
200001be:	b083      	sub	sp, #12
200001c0:	af00      	add	r7, sp, #0
200001c2:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200001c4:	687b      	ldr	r3, [r7, #4]
200001c6:	4a1f      	ldr	r2, [pc, #124]	; (20000244 <system_init_flash+0x88>)
200001c8:	4293      	cmp	r3, r2
200001ca:	d806      	bhi.n	200001da <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200001cc:	4b1e      	ldr	r3, [pc, #120]	; (20000248 <system_init_flash+0x8c>)
200001ce:	2200      	movs	r2, #0
200001d0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200001d2:	4b1e      	ldr	r3, [pc, #120]	; (2000024c <system_init_flash+0x90>)
200001d4:	2200      	movs	r2, #0
200001d6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
	}
}
200001d8:	e02e      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200001da:	687b      	ldr	r3, [r7, #4]
200001dc:	4a1c      	ldr	r2, [pc, #112]	; (20000250 <system_init_flash+0x94>)
200001de:	4293      	cmp	r3, r2
200001e0:	d808      	bhi.n	200001f4 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200001e2:	4b19      	ldr	r3, [pc, #100]	; (20000248 <system_init_flash+0x8c>)
200001e4:	f44f 7280 	mov.w	r2, #256	; 0x100
200001e8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200001ea:	4b18      	ldr	r3, [pc, #96]	; (2000024c <system_init_flash+0x90>)
200001ec:	f44f 7280 	mov.w	r2, #256	; 0x100
200001f0:	601a      	str	r2, [r3, #0]
}
200001f2:	e021      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200001f4:	687b      	ldr	r3, [r7, #4]
200001f6:	4a17      	ldr	r2, [pc, #92]	; (20000254 <system_init_flash+0x98>)
200001f8:	4293      	cmp	r3, r2
200001fa:	d808      	bhi.n	2000020e <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200001fc:	4b12      	ldr	r3, [pc, #72]	; (20000248 <system_init_flash+0x8c>)
200001fe:	f44f 7200 	mov.w	r2, #512	; 0x200
20000202:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000204:	4b11      	ldr	r3, [pc, #68]	; (2000024c <system_init_flash+0x90>)
20000206:	f44f 7200 	mov.w	r2, #512	; 0x200
2000020a:	601a      	str	r2, [r3, #0]
}
2000020c:	e014      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000020e:	687b      	ldr	r3, [r7, #4]
20000210:	4a11      	ldr	r2, [pc, #68]	; (20000258 <system_init_flash+0x9c>)
20000212:	4293      	cmp	r3, r2
20000214:	d808      	bhi.n	20000228 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000216:	4b0c      	ldr	r3, [pc, #48]	; (20000248 <system_init_flash+0x8c>)
20000218:	f44f 7240 	mov.w	r2, #768	; 0x300
2000021c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <system_init_flash+0x90>)
20000220:	f44f 7240 	mov.w	r2, #768	; 0x300
20000224:	601a      	str	r2, [r3, #0]
}
20000226:	e007      	b.n	20000238 <system_init_flash+0x7c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000228:	4b07      	ldr	r3, [pc, #28]	; (20000248 <system_init_flash+0x8c>)
2000022a:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000022e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000230:	4b06      	ldr	r3, [pc, #24]	; (2000024c <system_init_flash+0x90>)
20000232:	f44f 6280 	mov.w	r2, #1024	; 0x400
20000236:	601a      	str	r2, [r3, #0]
}
20000238:	bf00      	nop
2000023a:	370c      	adds	r7, #12
2000023c:	46bd      	mov	sp, r7
2000023e:	bc80      	pop	{r7}
20000240:	4770      	bx	lr
20000242:	bf00      	nop
20000244:	016e35ff 	.word	0x016e35ff
20000248:	400e0800 	.word	0x400e0800
2000024c:	400e0a00 	.word	0x400e0a00
20000250:	026259ff 	.word	0x026259ff
20000254:	044aa1ff 	.word	0x044aa1ff
20000258:	0501bcff 	.word	0x0501bcff

2000025c <usb_serial_number>:
2000025c:	30303030 30303030 30303030 44414544     000000000000DEAD
2000026c:	46454542 00000000 00000000 00000000     BEEF............
2000027c:	00000000                                ....

20000280 <pwr_list>:
20000280:	000808e5 00080905 00080925              ........%...

2000028c <main_b_vendor_enable>:
2000028c:	00000001                                ....

20000290 <xram>:
20000290:	60000000                                ...`

20000294 <udi_api_vendor>:
20000294:	00083b85 00083bc5 00083be1 00083c35     .;...;...;..5<..
200002a4:	00000000                                ....

200002a8 <udc_string_desc_languageid>:
200002a8:	04090304                                ....

200002ac <udc_string_manufacturer_name>:
200002ac:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
200002bc:	636e4920 0000002e                        Inc....

200002c4 <udc_string_product_name>:
200002c4:	6c6c6142 69747369 65472063 5743206c     Ballistic Gel CW
200002d4:	00313235                                521.

200002d8 <udc_string_desc>:
200002d8:	00000300 00000000 00000000 00000000     ................
200002e8:	00000000 00000000 00000000 00000000     ................
200002f8:	00000000 00000000 00000000 00000000     ................
20000308:	00000000 00000000 00000000 00000000     ................
20000318:	00010000                                         ..

2000031a <g_interrupt_enabled>:
2000031a:	01120001                                         ..

2000031c <udc_device_desc>:
2000031c:	02000112 40000000 c5212b3e 02010100     .......@>+!.....
2000032c:	00000103                                ....

20000330 <udc_device_qual>:
20000330:	0200060a 40000000 00000001              .......@....

2000033c <udc_desc_fs>:
2000033c:	00200209 80000101 000409fa ffff0200     .. .............
2000034c:	050700ff 00400281 02050700 00004002     ......@......@..

2000035c <udc_desc_hs>:
2000035c:	00200209 80000101 000409fa ffff0200     .. .............
2000036c:	050700ff 02000281 02050700 00020002     ................

2000037c <udi_apis>:
2000037c:	20000294                                ... 

20000380 <udc_config_lsfs>:
20000380:	2000033c 2000037c                       <.. |.. 

20000388 <udc_config_hs>:
20000388:	2000035c 2000037c                       \.. |.. 

20000390 <udc_config>:
20000390:	2000031c 20000380 2000031c 20000330     ... ... ... 0.. 
200003a0:	20000388 00000000                       ... ....

200003a8 <SystemCoreClock>:
200003a8:	003d0900 00000000                       ..=.....

200003b0 <impure_data>:
200003b0:	00000000 2000069c 20000704 2000076c     ....... ... l.. 
200003c0:	00000000 00000000 00000000 00000000     ................
200003d0:	00000000 00000000 00000000 00000000     ................
200003e0:	00000000 00000000 00000000 00000000     ................
200003f0:	00000000 00000000 00000000 00000000     ................
20000400:	00000000 00000000 00000000 00000000     ................
20000410:	00000000 00000000 00000000 00000000     ................
20000420:	00000000 00000000 00000000 00000000     ................
20000430:	00000000 00000000 00000000 00000000     ................
20000440:	00000000 00000000 00000000 00000000     ................
20000450:	00000000 00000000 00000001 00000000     ................
20000460:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
20000470:	00000000 00000000 00000000 00000000     ................
20000480:	00000000 00000000 00000000 00000000     ................
20000490:	00000000 00000000 00000000 00000000     ................
200004a0:	00000000 00000000 00000000 00000000     ................
200004b0:	00000000 00000000 00000000 00000000     ................
200004c0:	00000000 00000000 00000000 00000000     ................
200004d0:	00000000 00000000 00000000 00000000     ................
200004e0:	00000000 00000000 00000000 00000000     ................
200004f0:	00000000 00000000 00000000 00000000     ................
20000500:	00000000 00000000 00000000 00000000     ................
20000510:	00000000 00000000 00000000 00000000     ................
20000520:	00000000 00000000 00000000 00000000     ................
20000530:	00000000 00000000 00000000 00000000     ................
20000540:	00000000 00000000 00000000 00000000     ................
20000550:	00000000 00000000 00000000 00000000     ................
20000560:	00000000 00000000 00000000 00000000     ................
20000570:	00000000 00000000 00000000 00000000     ................
20000580:	00000000 00000000 00000000 00000000     ................
20000590:	00000000 00000000 00000000 00000000     ................
200005a0:	00000000 00000000 00000000 00000000     ................
200005b0:	00000000 00000000 00000000 00000000     ................
200005c0:	00000000 00000000 00000000 00000000     ................
200005d0:	00000000 00000000 00000000 00000000     ................
200005e0:	00000000 00000000 00000000 00000000     ................
200005f0:	00000000 00000000 00000000 00000000     ................
20000600:	00000000 00000000 00000000 00000000     ................
20000610:	00000000 00000000 00000000 00000000     ................
20000620:	00000000 00000000 00000000 00000000     ................
20000630:	00000000 00000000 00000000 00000000     ................
20000640:	00000000 00000000 00000000 00000000     ................
20000650:	00000000 00000000 00000000 00000000     ................
20000660:	00000000 00000000 00000000 00000000     ................
20000670:	00000000 00000000 00000000 00000000     ................
20000680:	00000000 00000000 00000000 00000000     ................
20000690:	00000000 00000000 00000000 00000000     ................
200006a0:	00000000 00000000 00000000 00000000     ................
200006b0:	00000000 00000000 00000000 00000000     ................
200006c0:	00000000 00000000 00000000 00000000     ................
200006d0:	00000000 00000000 00000000 00000000     ................
200006e0:	00000000 00000000 00000000 00000000     ................
200006f0:	00000000 00000000 00000000 00000000     ................
20000700:	00000000 00000000 00000000 00000000     ................
20000710:	00000000 00000000 00000000 00000000     ................
20000720:	00000000 00000000 00000000 00000000     ................
20000730:	00000000 00000000 00000000 00000000     ................
20000740:	00000000 00000000 00000000 00000000     ................
20000750:	00000000 00000000 00000000 00000000     ................
20000760:	00000000 00000000 00000000 00000000     ................
20000770:	00000000 00000000 00000000 00000000     ................
20000780:	00000000 00000000 00000000 00000000     ................
20000790:	00000000 00000000 00000000 00000000     ................
200007a0:	00000000 00000000 00000000 00000000     ................
200007b0:	00000000 00000000 00000000 00000000     ................
200007c0:	00000000 00000000 00000000 00000000     ................
200007d0:	00000000 00000000                       ........

200007d8 <__atexit_recursive_mutex>:
200007d8:	20000d74                                t.. 
