
cw570-CW570.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005c80  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000007dc  20000000  00085c80  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000005c0  200007dc  0008645c  000207dc  2**2
                  ALLOC
  3 .stack        00000400  20080000  20080000  00030000  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000207dc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020805  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001e9bb  00000000  00000000  0002085e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b4a  00000000  00000000  0003f219  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000859e  00000000  00000000  00042d63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f90  00000000  00000000  0004b301  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e40  00000000  00000000  0004c291  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017b47  00000000  00000000  0004d0d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001174e  00000000  00000000  00064c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000583e3  00000000  00000000  00076366  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004344  00000000  00000000  000ce74c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 04 08 20 65 36 08 00 31 46 08 00 31 46 08 00     ... e6..1F..1F..
   80010:	31 46 08 00 31 46 08 00 31 46 08 00 00 00 00 00     1F..1F..1F......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 31 46 08 00     ............1F..
   80030:	31 46 08 00 00 00 00 00 31 46 08 00 31 46 08 00     1F......1F..1F..
   80040:	31 46 08 00 31 46 08 00 31 46 08 00 31 46 08 00     1F..1F..1F..1F..
   80050:	31 46 08 00 31 46 08 00 31 46 08 00 31 46 08 00     1F..1F..1F..1F..
   80060:	31 46 08 00 31 46 08 00 e5 19 08 00 fd 19 08 00     1F..1F..........
   80070:	31 46 08 00 31 46 08 00 31 46 08 00 31 46 08 00     1F..1F..1F..1F..
   80080:	31 46 08 00 31 46 08 00 31 46 08 00 31 46 08 00     1F..1F..1F..1F..
   80090:	31 46 08 00 31 46 08 00 31 46 08 00 31 46 08 00     1F..1F..1F..1F..
   800a0:	31 46 08 00 31 46 08 00 31 46 08 00 31 46 08 00     1F..1F..1F..1F..
   800b0:	31 46 08 00 e9 1b 08 00 31 46 08 00                 1F......1F..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	200007dc 	.word	0x200007dc
   800d8:	00000000 	.word	0x00000000
   800dc:	00085c80 	.word	0x00085c80

000800e0 <frame_dummy>:
   800e0:	4b0c      	ldr	r3, [pc, #48]	; (80114 <frame_dummy+0x34>)
   800e2:	b143      	cbz	r3, 800f6 <frame_dummy+0x16>
   800e4:	480c      	ldr	r0, [pc, #48]	; (80118 <frame_dummy+0x38>)
   800e6:	b510      	push	{r4, lr}
   800e8:	490c      	ldr	r1, [pc, #48]	; (8011c <frame_dummy+0x3c>)
   800ea:	f3af 8000 	nop.w
   800ee:	480c      	ldr	r0, [pc, #48]	; (80120 <frame_dummy+0x40>)
   800f0:	6803      	ldr	r3, [r0, #0]
   800f2:	b923      	cbnz	r3, 800fe <frame_dummy+0x1e>
   800f4:	bd10      	pop	{r4, pc}
   800f6:	480a      	ldr	r0, [pc, #40]	; (80120 <frame_dummy+0x40>)
   800f8:	6803      	ldr	r3, [r0, #0]
   800fa:	b933      	cbnz	r3, 8010a <frame_dummy+0x2a>
   800fc:	4770      	bx	lr
   800fe:	4b09      	ldr	r3, [pc, #36]	; (80124 <frame_dummy+0x44>)
   80100:	2b00      	cmp	r3, #0
   80102:	d0f7      	beq.n	800f4 <frame_dummy+0x14>
   80104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80108:	4718      	bx	r3
   8010a:	4b06      	ldr	r3, [pc, #24]	; (80124 <frame_dummy+0x44>)
   8010c:	2b00      	cmp	r3, #0
   8010e:	d0f5      	beq.n	800fc <frame_dummy+0x1c>
   80110:	4718      	bx	r3
   80112:	bf00      	nop
   80114:	00000000 	.word	0x00000000
   80118:	00085c80 	.word	0x00085c80
   8011c:	200007e0 	.word	0x200007e0
   80120:	00085c80 	.word	0x00085c80
   80124:	00000000 	.word	0x00000000

00080128 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   80128:	b580      	push	{r7, lr}
   8012a:	b082      	sub	sp, #8
   8012c:	af00      	add	r7, sp, #0
   8012e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80130:	687b      	ldr	r3, [r7, #4]
   80132:	2b07      	cmp	r3, #7
   80134:	d82e      	bhi.n	80194 <osc_enable+0x6c>
   80136:	a201      	add	r2, pc, #4	; (adr r2, 8013c <osc_enable+0x14>)
   80138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8013c:	00080193 	.word	0x00080193
   80140:	0008015d 	.word	0x0008015d
   80144:	00080165 	.word	0x00080165
   80148:	0008016d 	.word	0x0008016d
   8014c:	00080175 	.word	0x00080175
   80150:	0008017d 	.word	0x0008017d
   80154:	00080185 	.word	0x00080185
   80158:	0008018d 	.word	0x0008018d
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   8015c:	2000      	movs	r0, #0
   8015e:	4b0f      	ldr	r3, [pc, #60]	; (8019c <osc_enable+0x74>)
   80160:	4798      	blx	r3
		break;
   80162:	e017      	b.n	80194 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80164:	2001      	movs	r0, #1
   80166:	4b0d      	ldr	r3, [pc, #52]	; (8019c <osc_enable+0x74>)
   80168:	4798      	blx	r3
		break;
   8016a:	e013      	b.n	80194 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   8016c:	2000      	movs	r0, #0
   8016e:	4b0c      	ldr	r3, [pc, #48]	; (801a0 <osc_enable+0x78>)
   80170:	4798      	blx	r3
		break;
   80172:	e00f      	b.n	80194 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80174:	2010      	movs	r0, #16
   80176:	4b0a      	ldr	r3, [pc, #40]	; (801a0 <osc_enable+0x78>)
   80178:	4798      	blx	r3
		break;
   8017a:	e00b      	b.n	80194 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   8017c:	2020      	movs	r0, #32
   8017e:	4b08      	ldr	r3, [pc, #32]	; (801a0 <osc_enable+0x78>)
   80180:	4798      	blx	r3
		break;
   80182:	e007      	b.n	80194 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80184:	203e      	movs	r0, #62	; 0x3e
   80186:	4b07      	ldr	r3, [pc, #28]	; (801a4 <osc_enable+0x7c>)
   80188:	4798      	blx	r3
				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
		break;
   8018a:	e003      	b.n	80194 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_osc_bypass_main_xtal();
   8018c:	4b06      	ldr	r3, [pc, #24]	; (801a8 <osc_enable+0x80>)
   8018e:	4798      	blx	r3
		break;
   80190:	e000      	b.n	80194 <osc_enable+0x6c>
		break;
   80192:	bf00      	nop
	}
}
   80194:	bf00      	nop
   80196:	3708      	adds	r7, #8
   80198:	46bd      	mov	sp, r7
   8019a:	bd80      	pop	{r7, pc}
   8019c:	00083bdd 	.word	0x00083bdd
   801a0:	00083c49 	.word	0x00083c49
   801a4:	00083cbd 	.word	0x00083cbd
   801a8:	00083d09 	.word	0x00083d09

000801ac <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   801ac:	b580      	push	{r7, lr}
   801ae:	b082      	sub	sp, #8
   801b0:	af00      	add	r7, sp, #0
   801b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   801b4:	687b      	ldr	r3, [r7, #4]
   801b6:	2b07      	cmp	r3, #7
   801b8:	d82f      	bhi.n	8021a <osc_is_ready+0x6e>
   801ba:	a201      	add	r2, pc, #4	; (adr r2, 801c0 <osc_is_ready+0x14>)
   801bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   801c0:	000801e1 	.word	0x000801e1
   801c4:	000801e5 	.word	0x000801e5
   801c8:	000801e5 	.word	0x000801e5
   801cc:	000801f7 	.word	0x000801f7
   801d0:	000801f7 	.word	0x000801f7
   801d4:	000801f7 	.word	0x000801f7
   801d8:	00080209 	.word	0x00080209
   801dc:	00080209 	.word	0x00080209
	case OSC_SLCK_32K_RC:
		return 1;
   801e0:	2301      	movs	r3, #1
   801e2:	e01b      	b.n	8021c <osc_is_ready+0x70>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   801e4:	4b0f      	ldr	r3, [pc, #60]	; (80224 <osc_is_ready+0x78>)
   801e6:	4798      	blx	r3
   801e8:	4603      	mov	r3, r0
   801ea:	2b00      	cmp	r3, #0
   801ec:	bf14      	ite	ne
   801ee:	2301      	movne	r3, #1
   801f0:	2300      	moveq	r3, #0
   801f2:	b2db      	uxtb	r3, r3
   801f4:	e012      	b.n	8021c <osc_is_ready+0x70>

	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();
   801f6:	4b0c      	ldr	r3, [pc, #48]	; (80228 <osc_is_ready+0x7c>)
   801f8:	4798      	blx	r3
   801fa:	4603      	mov	r3, r0
   801fc:	2b00      	cmp	r3, #0
   801fe:	bf14      	ite	ne
   80200:	2301      	movne	r3, #1
   80202:	2300      	moveq	r3, #0
   80204:	b2db      	uxtb	r3, r3
   80206:	e009      	b.n	8021c <osc_is_ready+0x70>

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   80208:	4b08      	ldr	r3, [pc, #32]	; (8022c <osc_is_ready+0x80>)
   8020a:	4798      	blx	r3
   8020c:	4603      	mov	r3, r0
   8020e:	2b00      	cmp	r3, #0
   80210:	bf14      	ite	ne
   80212:	2301      	movne	r3, #1
   80214:	2300      	moveq	r3, #0
   80216:	b2db      	uxtb	r3, r3
   80218:	e000      	b.n	8021c <osc_is_ready+0x70>
	}

	return 0;
   8021a:	2300      	movs	r3, #0
}
   8021c:	4618      	mov	r0, r3
   8021e:	3708      	adds	r7, #8
   80220:	46bd      	mov	sp, r7
   80222:	bd80      	pop	{r7, pc}
   80224:	00083c15 	.word	0x00083c15
   80228:	00083ca5 	.word	0x00083ca5
   8022c:	00083d55 	.word	0x00083d55

00080230 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80230:	b480      	push	{r7}
   80232:	b083      	sub	sp, #12
   80234:	af00      	add	r7, sp, #0
   80236:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80238:	687b      	ldr	r3, [r7, #4]
   8023a:	2b07      	cmp	r3, #7
   8023c:	d823      	bhi.n	80286 <osc_get_rate+0x56>
   8023e:	a201      	add	r2, pc, #4	; (adr r2, 80244 <osc_get_rate+0x14>)
   80240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80244:	00080265 	.word	0x00080265
   80248:	0008026b 	.word	0x0008026b
   8024c:	0008026f 	.word	0x0008026f
   80250:	00080273 	.word	0x00080273
   80254:	00080277 	.word	0x00080277
   80258:	0008027b 	.word	0x0008027b
   8025c:	0008027f 	.word	0x0008027f
   80260:	00080283 	.word	0x00080283
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80264:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80268:	e00e      	b.n	80288 <osc_get_rate+0x58>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8026a:	2300      	movs	r3, #0
   8026c:	e00c      	b.n	80288 <osc_get_rate+0x58>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   8026e:	2300      	movs	r3, #0
   80270:	e00a      	b.n	80288 <osc_get_rate+0x58>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80272:	4b08      	ldr	r3, [pc, #32]	; (80294 <osc_get_rate+0x64>)
   80274:	e008      	b.n	80288 <osc_get_rate+0x58>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80276:	4b08      	ldr	r3, [pc, #32]	; (80298 <osc_get_rate+0x68>)
   80278:	e006      	b.n	80288 <osc_get_rate+0x58>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8027a:	4b08      	ldr	r3, [pc, #32]	; (8029c <osc_get_rate+0x6c>)
   8027c:	e004      	b.n	80288 <osc_get_rate+0x58>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8027e:	4b07      	ldr	r3, [pc, #28]	; (8029c <osc_get_rate+0x6c>)
   80280:	e002      	b.n	80288 <osc_get_rate+0x58>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80282:	4b06      	ldr	r3, [pc, #24]	; (8029c <osc_get_rate+0x6c>)
   80284:	e000      	b.n	80288 <osc_get_rate+0x58>
	}

	return 0;
   80286:	2300      	movs	r3, #0
}
   80288:	4618      	mov	r0, r3
   8028a:	370c      	adds	r7, #12
   8028c:	46bd      	mov	sp, r7
   8028e:	bc80      	pop	{r7}
   80290:	4770      	bx	lr
   80292:	bf00      	nop
   80294:	003d0900 	.word	0x003d0900
   80298:	007a1200 	.word	0x007a1200
   8029c:	00b71b00 	.word	0x00b71b00

000802a0 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   802a0:	b580      	push	{r7, lr}
   802a2:	b082      	sub	sp, #8
   802a4:	af00      	add	r7, sp, #0
   802a6:	4603      	mov	r3, r0
   802a8:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   802aa:	bf00      	nop
   802ac:	79fb      	ldrb	r3, [r7, #7]
   802ae:	4618      	mov	r0, r3
   802b0:	4b05      	ldr	r3, [pc, #20]	; (802c8 <osc_wait_ready+0x28>)
   802b2:	4798      	blx	r3
   802b4:	4603      	mov	r3, r0
   802b6:	f083 0301 	eor.w	r3, r3, #1
   802ba:	b2db      	uxtb	r3, r3
   802bc:	2b00      	cmp	r3, #0
   802be:	d1f5      	bne.n	802ac <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   802c0:	bf00      	nop
   802c2:	3708      	adds	r7, #8
   802c4:	46bd      	mov	sp, r7
   802c6:	bd80      	pop	{r7, pc}
   802c8:	000801ad 	.word	0x000801ad

000802cc <pll_config_init>:
 *       hardware mul+1 is hidden in this implementation. Use mul as mul
 *       effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802cc:	b580      	push	{r7, lr}
   802ce:	b086      	sub	sp, #24
   802d0:	af00      	add	r7, sp, #0
   802d2:	60f8      	str	r0, [r7, #12]
   802d4:	607a      	str	r2, [r7, #4]
   802d6:	603b      	str	r3, [r7, #0]
   802d8:	460b      	mov	r3, r1
   802da:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802dc:	687b      	ldr	r3, [r7, #4]
   802de:	2b00      	cmp	r3, #0
   802e0:	d107      	bne.n	802f2 <pll_config_init+0x26>
   802e2:	683b      	ldr	r3, [r7, #0]
   802e4:	2b00      	cmp	r3, #0
   802e6:	d104      	bne.n	802f2 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   802e8:	68fb      	ldr	r3, [r7, #12]
   802ea:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   802ee:	601a      	str	r2, [r3, #0]
   802f0:	e019      	b.n	80326 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   802f2:	7afb      	ldrb	r3, [r7, #11]
   802f4:	4618      	mov	r0, r3
   802f6:	4b0e      	ldr	r3, [pc, #56]	; (80330 <pll_config_init+0x64>)
   802f8:	4798      	blx	r3
   802fa:	4602      	mov	r2, r0
   802fc:	687b      	ldr	r3, [r7, #4]
   802fe:	fbb2 f3f3 	udiv	r3, r2, r3
   80302:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   80304:	697b      	ldr	r3, [r7, #20]
   80306:	683a      	ldr	r2, [r7, #0]
   80308:	fb02 f303 	mul.w	r3, r2, r3
   8030c:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   8030e:	683b      	ldr	r3, [r7, #0]
   80310:	3b01      	subs	r3, #1
   80312:	041a      	lsls	r2, r3, #16
   80314:	4b07      	ldr	r3, [pc, #28]	; (80334 <pll_config_init+0x68>)
   80316:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   80318:	687a      	ldr	r2, [r7, #4]
   8031a:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   8031c:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   8031e:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   80322:	68fb      	ldr	r3, [r7, #12]
   80324:	601a      	str	r2, [r3, #0]
			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
   80326:	bf00      	nop
   80328:	3718      	adds	r7, #24
   8032a:	46bd      	mov	sp, r7
   8032c:	bd80      	pop	{r7, pc}
   8032e:	bf00      	nop
   80330:	00080231 	.word	0x00080231
   80334:	07ff0000 	.word	0x07ff0000

00080338 <pll_enable>:
	}
}

static inline void pll_enable(const struct pll_config *p_cfg,
		uint32_t ul_pll_id)
{
   80338:	b580      	push	{r7, lr}
   8033a:	b082      	sub	sp, #8
   8033c:	af00      	add	r7, sp, #0
   8033e:	6078      	str	r0, [r7, #4]
   80340:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80342:	683b      	ldr	r3, [r7, #0]
   80344:	2b00      	cmp	r3, #0
   80346:	d108      	bne.n	8035a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80348:	4b09      	ldr	r3, [pc, #36]	; (80370 <pll_enable+0x38>)
   8034a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8034c:	4a09      	ldr	r2, [pc, #36]	; (80374 <pll_enable+0x3c>)
   8034e:	687b      	ldr	r3, [r7, #4]
   80350:	681b      	ldr	r3, [r3, #0]
   80352:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80356:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   80358:	e005      	b.n	80366 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8035a:	4a06      	ldr	r2, [pc, #24]	; (80374 <pll_enable+0x3c>)
   8035c:	687b      	ldr	r3, [r7, #4]
   8035e:	681b      	ldr	r3, [r3, #0]
   80360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80364:	61d3      	str	r3, [r2, #28]
}
   80366:	bf00      	nop
   80368:	3708      	adds	r7, #8
   8036a:	46bd      	mov	sp, r7
   8036c:	bd80      	pop	{r7, pc}
   8036e:	bf00      	nop
   80370:	00083dc5 	.word	0x00083dc5
   80374:	400e0400 	.word	0x400e0400

00080378 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80378:	b580      	push	{r7, lr}
   8037a:	b082      	sub	sp, #8
   8037c:	af00      	add	r7, sp, #0
   8037e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80380:	687b      	ldr	r3, [r7, #4]
   80382:	2b00      	cmp	r3, #0
   80384:	d103      	bne.n	8038e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   80386:	4b05      	ldr	r3, [pc, #20]	; (8039c <pll_is_locked+0x24>)
   80388:	4798      	blx	r3
   8038a:	4603      	mov	r3, r0
   8038c:	e002      	b.n	80394 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   8038e:	4b04      	ldr	r3, [pc, #16]	; (803a0 <pll_is_locked+0x28>)
   80390:	4798      	blx	r3
   80392:	4603      	mov	r3, r0
	}
}
   80394:	4618      	mov	r0, r3
   80396:	3708      	adds	r7, #8
   80398:	46bd      	mov	sp, r7
   8039a:	bd80      	pop	{r7, pc}
   8039c:	00083ddd 	.word	0x00083ddd
   803a0:	00083e11 	.word	0x00083e11

000803a4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   803a4:	b580      	push	{r7, lr}
   803a6:	b082      	sub	sp, #8
   803a8:	af00      	add	r7, sp, #0
   803aa:	4603      	mov	r3, r0
   803ac:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   803ae:	79fb      	ldrb	r3, [r7, #7]
   803b0:	3b03      	subs	r3, #3
   803b2:	2b04      	cmp	r3, #4
   803b4:	d808      	bhi.n	803c8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   803b6:	79fb      	ldrb	r3, [r7, #7]
   803b8:	4618      	mov	r0, r3
   803ba:	4b06      	ldr	r3, [pc, #24]	; (803d4 <pll_enable_source+0x30>)
   803bc:	4798      	blx	r3
		osc_wait_ready(e_src);
   803be:	79fb      	ldrb	r3, [r7, #7]
   803c0:	4618      	mov	r0, r3
   803c2:	4b05      	ldr	r3, [pc, #20]	; (803d8 <pll_enable_source+0x34>)
   803c4:	4798      	blx	r3
		break;
   803c6:	e000      	b.n	803ca <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803c8:	bf00      	nop
	}
}
   803ca:	bf00      	nop
   803cc:	3708      	adds	r7, #8
   803ce:	46bd      	mov	sp, r7
   803d0:	bd80      	pop	{r7, pc}
   803d2:	bf00      	nop
   803d4:	00080129 	.word	0x00080129
   803d8:	000802a1 	.word	0x000802a1

000803dc <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int ul_pll_id)
{
   803dc:	b590      	push	{r4, r7, lr}
   803de:	b085      	sub	sp, #20
   803e0:	af00      	add	r7, sp, #0
   803e2:	6078      	str	r0, [r7, #4]
	struct pll_config pllcfg;

	if (pll_is_locked(ul_pll_id)) {
   803e4:	6878      	ldr	r0, [r7, #4]
   803e6:	4b21      	ldr	r3, [pc, #132]	; (8046c <pll_enable_config_defaults+0x90>)
   803e8:	4798      	blx	r3
   803ea:	4603      	mov	r3, r0
   803ec:	2b00      	cmp	r3, #0
   803ee:	d138      	bne.n	80462 <pll_enable_config_defaults+0x86>
		return; // Pll already running
	}
	switch (ul_pll_id) {
   803f0:	687b      	ldr	r3, [r7, #4]
   803f2:	2b00      	cmp	r3, #0
   803f4:	d002      	beq.n	803fc <pll_enable_config_defaults+0x20>
   803f6:	2b01      	cmp	r3, #1
   803f8:	d015      	beq.n	80426 <pll_enable_config_defaults+0x4a>
				CONFIG_PLL1_MUL);
		break;
#endif
	default:
		Assert(false);
		break;
   803fa:	e024      	b.n	80446 <pll_enable_config_defaults+0x6a>
		pll_enable_source(CONFIG_PLL0_SOURCE);
   803fc:	2006      	movs	r0, #6
   803fe:	4b1c      	ldr	r3, [pc, #112]	; (80470 <pll_enable_config_defaults+0x94>)
   80400:	4798      	blx	r3
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   80402:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   80406:	4b1b      	ldr	r3, [pc, #108]	; (80474 <pll_enable_config_defaults+0x98>)
   80408:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   8040a:	bf00      	nop
   8040c:	4b1a      	ldr	r3, [pc, #104]	; (80478 <pll_enable_config_defaults+0x9c>)
   8040e:	4798      	blx	r3
   80410:	4603      	mov	r3, r0
   80412:	2b00      	cmp	r3, #0
   80414:	d0fa      	beq.n	8040c <pll_enable_config_defaults+0x30>
		pll_config_init(&pllcfg,
   80416:	f107 000c 	add.w	r0, r7, #12
   8041a:	2310      	movs	r3, #16
   8041c:	2201      	movs	r2, #1
   8041e:	2106      	movs	r1, #6
   80420:	4c16      	ldr	r4, [pc, #88]	; (8047c <pll_enable_config_defaults+0xa0>)
   80422:	47a0      	blx	r4
		break;
   80424:	e00f      	b.n	80446 <pll_enable_config_defaults+0x6a>
		if (pmc_osc_is_bypassed_main_xtal()) {
   80426:	4b16      	ldr	r3, [pc, #88]	; (80480 <pll_enable_config_defaults+0xa4>)
   80428:	4798      	blx	r3
   8042a:	4603      	mov	r3, r0
   8042c:	2b00      	cmp	r3, #0
   8042e:	d102      	bne.n	80436 <pll_enable_config_defaults+0x5a>
			pll_enable_source(CONFIG_PLL1_SOURCE);
   80430:	2006      	movs	r0, #6
   80432:	4b0f      	ldr	r3, [pc, #60]	; (80470 <pll_enable_config_defaults+0x94>)
   80434:	4798      	blx	r3
		pll_config_init(&pllcfg,
   80436:	f107 000c 	add.w	r0, r7, #12
   8043a:	2300      	movs	r3, #0
   8043c:	2200      	movs	r2, #0
   8043e:	2106      	movs	r1, #6
   80440:	4c0e      	ldr	r4, [pc, #56]	; (8047c <pll_enable_config_defaults+0xa0>)
   80442:	47a0      	blx	r4
		break;
   80444:	bf00      	nop
	}
	pll_enable(&pllcfg, ul_pll_id);
   80446:	f107 030c 	add.w	r3, r7, #12
   8044a:	6879      	ldr	r1, [r7, #4]
   8044c:	4618      	mov	r0, r3
   8044e:	4b0d      	ldr	r3, [pc, #52]	; (80484 <pll_enable_config_defaults+0xa8>)
   80450:	4798      	blx	r3
	while (!pll_is_locked(ul_pll_id));
   80452:	bf00      	nop
   80454:	6878      	ldr	r0, [r7, #4]
   80456:	4b05      	ldr	r3, [pc, #20]	; (8046c <pll_enable_config_defaults+0x90>)
   80458:	4798      	blx	r3
   8045a:	4603      	mov	r3, r0
   8045c:	2b00      	cmp	r3, #0
   8045e:	d0f9      	beq.n	80454 <pll_enable_config_defaults+0x78>
   80460:	e000      	b.n	80464 <pll_enable_config_defaults+0x88>
		return; // Pll already running
   80462:	bf00      	nop
}
   80464:	3714      	adds	r7, #20
   80466:	46bd      	mov	sp, r7
   80468:	bd90      	pop	{r4, r7, pc}
   8046a:	bf00      	nop
   8046c:	00080379 	.word	0x00080379
   80470:	000803a5 	.word	0x000803a5
   80474:	00083d85 	.word	0x00083d85
   80478:	00083d6d 	.word	0x00083d6d
   8047c:	000802cd 	.word	0x000802cd
   80480:	00083d3d 	.word	0x00083d3d
   80484:	00080339 	.word	0x00080339

00080488 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
   80488:	b480      	push	{r7}
   8048a:	b08d      	sub	sp, #52	; 0x34
   8048c:	af00      	add	r7, sp, #0
   8048e:	6078      	str	r0, [r7, #4]
   80490:	6039      	str	r1, [r7, #0]
   80492:	687b      	ldr	r3, [r7, #4]
   80494:	62fb      	str	r3, [r7, #44]	; 0x2c
   80496:	683b      	ldr	r3, [r7, #0]
   80498:	62bb      	str	r3, [r7, #40]	; 0x28
   8049a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8049c:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   8049e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   804a0:	095a      	lsrs	r2, r3, #5
   804a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   804a4:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   804a6:	6a3b      	ldr	r3, [r7, #32]
   804a8:	f003 031f 	and.w	r3, r3, #31
   804ac:	2101      	movs	r1, #1
   804ae:	fa01 f303 	lsl.w	r3, r1, r3
   804b2:	61fa      	str	r2, [r7, #28]
   804b4:	61bb      	str	r3, [r7, #24]
   804b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   804b8:	617b      	str	r3, [r7, #20]
   804ba:	69fb      	ldr	r3, [r7, #28]
   804bc:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   804be:	693b      	ldr	r3, [r7, #16]
   804c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   804c4:	f203 7306 	addw	r3, r3, #1798	; 0x706
   804c8:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
   804ca:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
   804cc:	697b      	ldr	r3, [r7, #20]
   804ce:	f003 0308 	and.w	r3, r3, #8
   804d2:	2b00      	cmp	r3, #0
   804d4:	d003      	beq.n	804de <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   804d6:	68fb      	ldr	r3, [r7, #12]
   804d8:	69ba      	ldr	r2, [r7, #24]
   804da:	665a      	str	r2, [r3, #100]	; 0x64
   804dc:	e002      	b.n	804e4 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
   804de:	68fb      	ldr	r3, [r7, #12]
   804e0:	69ba      	ldr	r2, [r7, #24]
   804e2:	661a      	str	r2, [r3, #96]	; 0x60
	} else {
		base->PIO_PPDDR = mask;
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   804e4:	697b      	ldr	r3, [r7, #20]
   804e6:	f003 0320 	and.w	r3, r3, #32
   804ea:	2b00      	cmp	r3, #0
   804ec:	d003      	beq.n	804f6 <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   804ee:	68fb      	ldr	r3, [r7, #12]
   804f0:	69ba      	ldr	r2, [r7, #24]
   804f2:	651a      	str	r2, [r3, #80]	; 0x50
   804f4:	e002      	b.n	804fc <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_MDDR = mask;
   804f6:	68fb      	ldr	r3, [r7, #12]
   804f8:	69ba      	ldr	r2, [r7, #24]
   804fa:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   804fc:	697b      	ldr	r3, [r7, #20]
   804fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   80502:	2b00      	cmp	r3, #0
   80504:	d003      	beq.n	8050e <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   80506:	68fb      	ldr	r3, [r7, #12]
   80508:	69ba      	ldr	r2, [r7, #24]
   8050a:	621a      	str	r2, [r3, #32]
   8050c:	e002      	b.n	80514 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_IFDR = mask;
   8050e:	68fb      	ldr	r3, [r7, #12]
   80510:	69ba      	ldr	r2, [r7, #24]
   80512:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
   80514:	697b      	ldr	r3, [r7, #20]
   80516:	f003 0380 	and.w	r3, r3, #128	; 0x80
   8051a:	2b00      	cmp	r3, #0
   8051c:	d004      	beq.n	80528 <ioport_set_pin_mode+0xa0>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   8051e:	68fb      	ldr	r3, [r7, #12]
   80520:	69ba      	ldr	r2, [r7, #24]
   80522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   80526:	e003      	b.n	80530 <ioport_set_pin_mode+0xa8>
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80528:	68fb      	ldr	r3, [r7, #12]
   8052a:	69ba      	ldr	r2, [r7, #24]
   8052c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_IFSCDR = mask;
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
   80530:	697b      	ldr	r3, [r7, #20]
   80532:	f003 0301 	and.w	r3, r3, #1
   80536:	2b00      	cmp	r3, #0
   80538:	d006      	beq.n	80548 <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   8053a:	68fb      	ldr	r3, [r7, #12]
   8053c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8053e:	69bb      	ldr	r3, [r7, #24]
   80540:	431a      	orrs	r2, r3
   80542:	68fb      	ldr	r3, [r7, #12]
   80544:	671a      	str	r2, [r3, #112]	; 0x70
	arch_ioport_set_pin_mode(pin, mode);
}
   80546:	e006      	b.n	80556 <ioport_set_pin_mode+0xce>
	} else {
		base->PIO_ABSR &= ~mask;
   80548:	68fb      	ldr	r3, [r7, #12]
   8054a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8054c:	69bb      	ldr	r3, [r7, #24]
   8054e:	43db      	mvns	r3, r3
   80550:	401a      	ands	r2, r3
   80552:	68fb      	ldr	r3, [r7, #12]
   80554:	671a      	str	r2, [r3, #112]	; 0x70
   80556:	bf00      	nop
   80558:	3734      	adds	r7, #52	; 0x34
   8055a:	46bd      	mov	sp, r7
   8055c:	bc80      	pop	{r7}
   8055e:	4770      	bx	lr

00080560 <sleepmgr_sleep>:
#endif /* CONFIG_SLEEPMGR_ENABLE */
//! @}


static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
   80560:	b580      	push	{r7, lr}
   80562:	b082      	sub	sp, #8
   80564:	af00      	add	r7, sp, #0
   80566:	4603      	mov	r3, r0
   80568:	71fb      	strb	r3, [r7, #7]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8056a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8056c:	f3bf 8f5f 	dmb	sy
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
   80570:	4b05      	ldr	r3, [pc, #20]	; (80588 <sleepmgr_sleep+0x28>)
   80572:	2200      	movs	r2, #0
   80574:	701a      	strb	r2, [r3, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
   80576:	79fb      	ldrb	r3, [r7, #7]
   80578:	4618      	mov	r0, r3
   8057a:	4b04      	ldr	r3, [pc, #16]	; (8058c <sleepmgr_sleep+0x2c>)
   8057c:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
   8057e:	bf00      	nop
   80580:	3708      	adds	r7, #8
   80582:	46bd      	mov	sp, r7
   80584:	bd80      	pop	{r7, pc}
   80586:	bf00      	nop
   80588:	2000031a 	.word	0x2000031a
   8058c:	000853ed 	.word	0x000853ed

00080590 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
   80590:	b480      	push	{r7}
   80592:	b083      	sub	sp, #12
   80594:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   80596:	2300      	movs	r3, #0
   80598:	71fb      	strb	r3, [r7, #7]
   8059a:	e006      	b.n	805aa <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
   8059c:	79fb      	ldrb	r3, [r7, #7]
   8059e:	4a08      	ldr	r2, [pc, #32]	; (805c0 <sleepmgr_init+0x30>)
   805a0:	2100      	movs	r1, #0
   805a2:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   805a4:	79fb      	ldrb	r3, [r7, #7]
   805a6:	3301      	adds	r3, #1
   805a8:	71fb      	strb	r3, [r7, #7]
   805aa:	79fb      	ldrb	r3, [r7, #7]
   805ac:	2b04      	cmp	r3, #4
   805ae:	d9f5      	bls.n	8059c <sleepmgr_init+0xc>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   805b0:	4b03      	ldr	r3, [pc, #12]	; (805c0 <sleepmgr_init+0x30>)
   805b2:	2201      	movs	r2, #1
   805b4:	715a      	strb	r2, [r3, #5]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   805b6:	bf00      	nop
   805b8:	370c      	adds	r7, #12
   805ba:	46bd      	mov	sp, r7
   805bc:	bc80      	pop	{r7}
   805be:	4770      	bx	lr
   805c0:	20000d70 	.word	0x20000d70

000805c4 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
   805c4:	b480      	push	{r7}
   805c6:	b083      	sub	sp, #12
   805c8:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
   805ca:	2300      	movs	r3, #0
   805cc:	71fb      	strb	r3, [r7, #7]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
   805ce:	4b09      	ldr	r3, [pc, #36]	; (805f4 <sleepmgr_get_sleep_mode+0x30>)
   805d0:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
   805d2:	e005      	b.n	805e0 <sleepmgr_get_sleep_mode+0x1c>
		lock_ptr++;
   805d4:	683b      	ldr	r3, [r7, #0]
   805d6:	3301      	adds	r3, #1
   805d8:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
   805da:	79fb      	ldrb	r3, [r7, #7]
   805dc:	3301      	adds	r3, #1
   805de:	71fb      	strb	r3, [r7, #7]
	while (!(*lock_ptr)) {
   805e0:	683b      	ldr	r3, [r7, #0]
   805e2:	781b      	ldrb	r3, [r3, #0]
   805e4:	2b00      	cmp	r3, #0
   805e6:	d0f5      	beq.n	805d4 <sleepmgr_get_sleep_mode+0x10>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
   805e8:	79fb      	ldrb	r3, [r7, #7]
}
   805ea:	4618      	mov	r0, r3
   805ec:	370c      	adds	r7, #12
   805ee:	46bd      	mov	sp, r7
   805f0:	bc80      	pop	{r7}
   805f2:	4770      	bx	lr
   805f4:	20000d70 	.word	0x20000d70

000805f8 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
   805f8:	b580      	push	{r7, lr}
   805fa:	b082      	sub	sp, #8
   805fc:	af00      	add	r7, sp, #0
   805fe:	b672      	cpsid	i
   80600:	f3bf 8f5f 	dmb	sy
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
   80604:	4b0b      	ldr	r3, [pc, #44]	; (80634 <sleepmgr_enter_sleep+0x3c>)
   80606:	2200      	movs	r2, #0
   80608:	701a      	strb	r2, [r3, #0]

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
   8060a:	4b0b      	ldr	r3, [pc, #44]	; (80638 <sleepmgr_enter_sleep+0x40>)
   8060c:	4798      	blx	r3
   8060e:	4603      	mov	r3, r0
   80610:	71fb      	strb	r3, [r7, #7]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
   80612:	79fb      	ldrb	r3, [r7, #7]
   80614:	2b00      	cmp	r3, #0
   80616:	d106      	bne.n	80626 <sleepmgr_enter_sleep+0x2e>
		cpu_irq_enable();
   80618:	4b06      	ldr	r3, [pc, #24]	; (80634 <sleepmgr_enter_sleep+0x3c>)
   8061a:	2201      	movs	r2, #1
   8061c:	701a      	strb	r2, [r3, #0]
   8061e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   80622:	b662      	cpsie	i
		return;
   80624:	e003      	b.n	8062e <sleepmgr_enter_sleep+0x36>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
   80626:	79fb      	ldrb	r3, [r7, #7]
   80628:	4618      	mov	r0, r3
   8062a:	4b04      	ldr	r3, [pc, #16]	; (8063c <sleepmgr_enter_sleep+0x44>)
   8062c:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   8062e:	3708      	adds	r7, #8
   80630:	46bd      	mov	sp, r7
   80632:	bd80      	pop	{r7, pc}
   80634:	2000031a 	.word	0x2000031a
   80638:	000805c5 	.word	0x000805c5
   8063c:	00080561 	.word	0x00080561

00080640 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   80640:	b480      	push	{r7}
   80642:	b083      	sub	sp, #12
   80644:	af00      	add	r7, sp, #0
   80646:	6078      	str	r0, [r7, #4]
   80648:	6039      	str	r1, [r7, #0]
	ul_id = ul_id;
	p_cfg->ctrl = 0;
   8064a:	687b      	ldr	r3, [r7, #4]
   8064c:	2200      	movs	r2, #0
   8064e:	601a      	str	r2, [r3, #0]
}
   80650:	bf00      	nop
   80652:	370c      	adds	r7, #12
   80654:	46bd      	mov	sp, r7
   80656:	bc80      	pop	{r7}
   80658:	4770      	bx	lr
   8065a:	0000      	movs	r0, r0

0008065c <genclk_config_set_source>:
//! \name Programmable Clock Source and Prescaler configuration
//@{

static inline void genclk_config_set_source(struct genclk_config *p_cfg,
		enum genclk_source e_src)
{
   8065c:	b480      	push	{r7}
   8065e:	b083      	sub	sp, #12
   80660:	af00      	add	r7, sp, #0
   80662:	6078      	str	r0, [r7, #4]
   80664:	460b      	mov	r3, r1
   80666:	70fb      	strb	r3, [r7, #3]
	p_cfg->ctrl &= (~PMC_PCK_CSS_Msk);
   80668:	687b      	ldr	r3, [r7, #4]
   8066a:	681b      	ldr	r3, [r3, #0]
   8066c:	f023 0207 	bic.w	r2, r3, #7
   80670:	687b      	ldr	r3, [r7, #4]
   80672:	601a      	str	r2, [r3, #0]

	switch (e_src) {
   80674:	78fb      	ldrb	r3, [r7, #3]
   80676:	2b0a      	cmp	r3, #10
   80678:	d839      	bhi.n	806ee <genclk_config_set_source+0x92>
   8067a:	a201      	add	r2, pc, #4	; (adr r2, 80680 <genclk_config_set_source+0x24>)
   8067c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80680:	000806ad 	.word	0x000806ad
   80684:	000806ad 	.word	0x000806ad
   80688:	000806ad 	.word	0x000806ad
   8068c:	000806b7 	.word	0x000806b7
   80690:	000806b7 	.word	0x000806b7
   80694:	000806b7 	.word	0x000806b7
   80698:	000806b7 	.word	0x000806b7
   8069c:	000806b7 	.word	0x000806b7
   806a0:	000806c5 	.word	0x000806c5
   806a4:	000806d3 	.word	0x000806d3
   806a8:	000806e1 	.word	0x000806e1
	case GENCLK_PCK_SRC_SLCK_RC:
	case GENCLK_PCK_SRC_SLCK_XTAL:
	case GENCLK_PCK_SRC_SLCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_SLOW_CLK);
   806ac:	687b      	ldr	r3, [r7, #4]
   806ae:	681a      	ldr	r2, [r3, #0]
   806b0:	687b      	ldr	r3, [r7, #4]
   806b2:	601a      	str	r2, [r3, #0]
		break;
   806b4:	e01b      	b.n	806ee <genclk_config_set_source+0x92>
	case GENCLK_PCK_SRC_MAINCK_4M_RC:
	case GENCLK_PCK_SRC_MAINCK_8M_RC:
	case GENCLK_PCK_SRC_MAINCK_12M_RC:
	case GENCLK_PCK_SRC_MAINCK_XTAL:
	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_MAIN_CLK);
   806b6:	687b      	ldr	r3, [r7, #4]
   806b8:	681b      	ldr	r3, [r3, #0]
   806ba:	f043 0201 	orr.w	r2, r3, #1
   806be:	687b      	ldr	r3, [r7, #4]
   806c0:	601a      	str	r2, [r3, #0]
		break;
   806c2:	e014      	b.n	806ee <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLACK:
		p_cfg->ctrl |= (PMC_PCK_CSS_PLLA_CLK);
   806c4:	687b      	ldr	r3, [r7, #4]
   806c6:	681b      	ldr	r3, [r3, #0]
   806c8:	f043 0202 	orr.w	r2, r3, #2
   806cc:	687b      	ldr	r3, [r7, #4]
   806ce:	601a      	str	r2, [r3, #0]
		break;
   806d0:	e00d      	b.n	806ee <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLBCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_UPLL_CLK);
   806d2:	687b      	ldr	r3, [r7, #4]
   806d4:	681b      	ldr	r3, [r3, #0]
   806d6:	f043 0203 	orr.w	r2, r3, #3
   806da:	687b      	ldr	r3, [r7, #4]
   806dc:	601a      	str	r2, [r3, #0]
		break;
   806de:	e006      	b.n	806ee <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_MCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_MCK);
   806e0:	687b      	ldr	r3, [r7, #4]
   806e2:	681b      	ldr	r3, [r3, #0]
   806e4:	f043 0204 	orr.w	r2, r3, #4
   806e8:	687b      	ldr	r3, [r7, #4]
   806ea:	601a      	str	r2, [r3, #0]
		break;
   806ec:	bf00      	nop
	}
}
   806ee:	bf00      	nop
   806f0:	370c      	adds	r7, #12
   806f2:	46bd      	mov	sp, r7
   806f4:	bc80      	pop	{r7}
   806f6:	4770      	bx	lr

000806f8 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *p_cfg,
		uint32_t e_divider)
{
   806f8:	b480      	push	{r7}
   806fa:	b083      	sub	sp, #12
   806fc:	af00      	add	r7, sp, #0
   806fe:	6078      	str	r0, [r7, #4]
   80700:	6039      	str	r1, [r7, #0]
	p_cfg->ctrl &= ~PMC_PCK_PRES_Msk;
   80702:	687b      	ldr	r3, [r7, #4]
   80704:	681b      	ldr	r3, [r3, #0]
   80706:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   8070a:	687b      	ldr	r3, [r7, #4]
   8070c:	601a      	str	r2, [r3, #0]
	p_cfg->ctrl |= e_divider;
   8070e:	687b      	ldr	r3, [r7, #4]
   80710:	681a      	ldr	r2, [r3, #0]
   80712:	683b      	ldr	r3, [r7, #0]
   80714:	431a      	orrs	r2, r3
   80716:	687b      	ldr	r3, [r7, #4]
   80718:	601a      	str	r2, [r3, #0]
}
   8071a:	bf00      	nop
   8071c:	370c      	adds	r7, #12
   8071e:	46bd      	mov	sp, r7
   80720:	bc80      	pop	{r7}
   80722:	4770      	bx	lr

00080724 <genclk_enable>:

//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   80724:	b580      	push	{r7, lr}
   80726:	b082      	sub	sp, #8
   80728:	af00      	add	r7, sp, #0
   8072a:	6078      	str	r0, [r7, #4]
   8072c:	6039      	str	r1, [r7, #0]
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   8072e:	4907      	ldr	r1, [pc, #28]	; (8074c <genclk_enable+0x28>)
   80730:	687b      	ldr	r3, [r7, #4]
   80732:	681a      	ldr	r2, [r3, #0]
   80734:	683b      	ldr	r3, [r7, #0]
   80736:	3310      	adds	r3, #16
   80738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	pmc_enable_pck(ul_id);
   8073c:	6838      	ldr	r0, [r7, #0]
   8073e:	4b04      	ldr	r3, [pc, #16]	; (80750 <genclk_enable+0x2c>)
   80740:	4798      	blx	r3
}
   80742:	bf00      	nop
   80744:	3708      	adds	r7, #8
   80746:	46bd      	mov	sp, r7
   80748:	bd80      	pop	{r7, pc}
   8074a:	bf00      	nop
   8074c:	400e0400 	.word	0x400e0400
   80750:	00083ec9 	.word	0x00083ec9

00080754 <genclk_enable_source>:
{
	pmc_disable_pck(ul_id);
}

static inline void genclk_enable_source(enum genclk_source e_src)
{
   80754:	b580      	push	{r7, lr}
   80756:	b082      	sub	sp, #8
   80758:	af00      	add	r7, sp, #0
   8075a:	4603      	mov	r3, r0
   8075c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   8075e:	79fb      	ldrb	r3, [r7, #7]
   80760:	2b0a      	cmp	r3, #10
   80762:	f200 80a2 	bhi.w	808aa <genclk_enable_source+0x156>
   80766:	a201      	add	r2, pc, #4	; (adr r2, 8076c <genclk_enable_source+0x18>)
   80768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8076c:	00080799 	.word	0x00080799
   80770:	000807bb 	.word	0x000807bb
   80774:	000807db 	.word	0x000807db
   80778:	000807fb 	.word	0x000807fb
   8077c:	0008081b 	.word	0x0008081b
   80780:	0008083b 	.word	0x0008083b
   80784:	0008085b 	.word	0x0008085b
   80788:	0008087b 	.word	0x0008087b
   8078c:	0008089b 	.word	0x0008089b
   80790:	000808a3 	.word	0x000808a3
   80794:	000808ab 	.word	0x000808ab
	case GENCLK_PCK_SRC_SLCK_RC:
		if (!osc_is_ready(OSC_SLCK_32K_RC)) {
   80798:	2000      	movs	r0, #0
   8079a:	4b4e      	ldr	r3, [pc, #312]	; (808d4 <genclk_enable_source+0x180>)
   8079c:	4798      	blx	r3
   8079e:	4603      	mov	r3, r0
   807a0:	f083 0301 	eor.w	r3, r3, #1
   807a4:	b2db      	uxtb	r3, r3
   807a6:	2b00      	cmp	r3, #0
   807a8:	f000 8081 	beq.w	808ae <genclk_enable_source+0x15a>
			osc_enable(OSC_SLCK_32K_RC);
   807ac:	2000      	movs	r0, #0
   807ae:	4b4a      	ldr	r3, [pc, #296]	; (808d8 <genclk_enable_source+0x184>)
   807b0:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_RC);
   807b2:	2000      	movs	r0, #0
   807b4:	4b49      	ldr	r3, [pc, #292]	; (808dc <genclk_enable_source+0x188>)
   807b6:	4798      	blx	r3
		}
		break;
   807b8:	e079      	b.n	808ae <genclk_enable_source+0x15a>

	case GENCLK_PCK_SRC_SLCK_XTAL:
		if (!osc_is_ready(OSC_SLCK_32K_XTAL)) {
   807ba:	2001      	movs	r0, #1
   807bc:	4b45      	ldr	r3, [pc, #276]	; (808d4 <genclk_enable_source+0x180>)
   807be:	4798      	blx	r3
   807c0:	4603      	mov	r3, r0
   807c2:	f083 0301 	eor.w	r3, r3, #1
   807c6:	b2db      	uxtb	r3, r3
   807c8:	2b00      	cmp	r3, #0
   807ca:	d072      	beq.n	808b2 <genclk_enable_source+0x15e>
			osc_enable(OSC_SLCK_32K_XTAL);
   807cc:	2001      	movs	r0, #1
   807ce:	4b42      	ldr	r3, [pc, #264]	; (808d8 <genclk_enable_source+0x184>)
   807d0:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_XTAL);
   807d2:	2001      	movs	r0, #1
   807d4:	4b41      	ldr	r3, [pc, #260]	; (808dc <genclk_enable_source+0x188>)
   807d6:	4798      	blx	r3
		}
		break;
   807d8:	e06b      	b.n	808b2 <genclk_enable_source+0x15e>

	case GENCLK_PCK_SRC_SLCK_BYPASS:
		if (!osc_is_ready(OSC_SLCK_32K_BYPASS)) {
   807da:	2002      	movs	r0, #2
   807dc:	4b3d      	ldr	r3, [pc, #244]	; (808d4 <genclk_enable_source+0x180>)
   807de:	4798      	blx	r3
   807e0:	4603      	mov	r3, r0
   807e2:	f083 0301 	eor.w	r3, r3, #1
   807e6:	b2db      	uxtb	r3, r3
   807e8:	2b00      	cmp	r3, #0
   807ea:	d064      	beq.n	808b6 <genclk_enable_source+0x162>
			osc_enable(OSC_SLCK_32K_BYPASS);
   807ec:	2002      	movs	r0, #2
   807ee:	4b3a      	ldr	r3, [pc, #232]	; (808d8 <genclk_enable_source+0x184>)
   807f0:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_BYPASS);
   807f2:	2002      	movs	r0, #2
   807f4:	4b39      	ldr	r3, [pc, #228]	; (808dc <genclk_enable_source+0x188>)
   807f6:	4798      	blx	r3
		}
		break;
   807f8:	e05d      	b.n	808b6 <genclk_enable_source+0x162>

	case GENCLK_PCK_SRC_MAINCK_4M_RC:
		if (!osc_is_ready(OSC_MAINCK_4M_RC)) {
   807fa:	2003      	movs	r0, #3
   807fc:	4b35      	ldr	r3, [pc, #212]	; (808d4 <genclk_enable_source+0x180>)
   807fe:	4798      	blx	r3
   80800:	4603      	mov	r3, r0
   80802:	f083 0301 	eor.w	r3, r3, #1
   80806:	b2db      	uxtb	r3, r3
   80808:	2b00      	cmp	r3, #0
   8080a:	d056      	beq.n	808ba <genclk_enable_source+0x166>
			osc_enable(OSC_MAINCK_4M_RC);
   8080c:	2003      	movs	r0, #3
   8080e:	4b32      	ldr	r3, [pc, #200]	; (808d8 <genclk_enable_source+0x184>)
   80810:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_4M_RC);
   80812:	2003      	movs	r0, #3
   80814:	4b31      	ldr	r3, [pc, #196]	; (808dc <genclk_enable_source+0x188>)
   80816:	4798      	blx	r3
		}
		break;
   80818:	e04f      	b.n	808ba <genclk_enable_source+0x166>

	case GENCLK_PCK_SRC_MAINCK_8M_RC:
		if (!osc_is_ready(OSC_MAINCK_8M_RC)) {
   8081a:	2004      	movs	r0, #4
   8081c:	4b2d      	ldr	r3, [pc, #180]	; (808d4 <genclk_enable_source+0x180>)
   8081e:	4798      	blx	r3
   80820:	4603      	mov	r3, r0
   80822:	f083 0301 	eor.w	r3, r3, #1
   80826:	b2db      	uxtb	r3, r3
   80828:	2b00      	cmp	r3, #0
   8082a:	d048      	beq.n	808be <genclk_enable_source+0x16a>
			osc_enable(OSC_MAINCK_8M_RC);
   8082c:	2004      	movs	r0, #4
   8082e:	4b2a      	ldr	r3, [pc, #168]	; (808d8 <genclk_enable_source+0x184>)
   80830:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_8M_RC);
   80832:	2004      	movs	r0, #4
   80834:	4b29      	ldr	r3, [pc, #164]	; (808dc <genclk_enable_source+0x188>)
   80836:	4798      	blx	r3
		}
		break;
   80838:	e041      	b.n	808be <genclk_enable_source+0x16a>

	case GENCLK_PCK_SRC_MAINCK_12M_RC:
		if (!osc_is_ready(OSC_MAINCK_12M_RC)) {
   8083a:	2005      	movs	r0, #5
   8083c:	4b25      	ldr	r3, [pc, #148]	; (808d4 <genclk_enable_source+0x180>)
   8083e:	4798      	blx	r3
   80840:	4603      	mov	r3, r0
   80842:	f083 0301 	eor.w	r3, r3, #1
   80846:	b2db      	uxtb	r3, r3
   80848:	2b00      	cmp	r3, #0
   8084a:	d03a      	beq.n	808c2 <genclk_enable_source+0x16e>
			osc_enable(OSC_MAINCK_12M_RC);
   8084c:	2005      	movs	r0, #5
   8084e:	4b22      	ldr	r3, [pc, #136]	; (808d8 <genclk_enable_source+0x184>)
   80850:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_12M_RC);
   80852:	2005      	movs	r0, #5
   80854:	4b21      	ldr	r3, [pc, #132]	; (808dc <genclk_enable_source+0x188>)
   80856:	4798      	blx	r3
		}
		break;
   80858:	e033      	b.n	808c2 <genclk_enable_source+0x16e>

	case GENCLK_PCK_SRC_MAINCK_XTAL:
		if (!osc_is_ready(OSC_MAINCK_XTAL)) {
   8085a:	2006      	movs	r0, #6
   8085c:	4b1d      	ldr	r3, [pc, #116]	; (808d4 <genclk_enable_source+0x180>)
   8085e:	4798      	blx	r3
   80860:	4603      	mov	r3, r0
   80862:	f083 0301 	eor.w	r3, r3, #1
   80866:	b2db      	uxtb	r3, r3
   80868:	2b00      	cmp	r3, #0
   8086a:	d02c      	beq.n	808c6 <genclk_enable_source+0x172>
			osc_enable(OSC_MAINCK_XTAL);
   8086c:	2006      	movs	r0, #6
   8086e:	4b1a      	ldr	r3, [pc, #104]	; (808d8 <genclk_enable_source+0x184>)
   80870:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_XTAL);
   80872:	2006      	movs	r0, #6
   80874:	4b19      	ldr	r3, [pc, #100]	; (808dc <genclk_enable_source+0x188>)
   80876:	4798      	blx	r3
		}
		break;
   80878:	e025      	b.n	808c6 <genclk_enable_source+0x172>

	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		if (!osc_is_ready(OSC_MAINCK_BYPASS)) {
   8087a:	2007      	movs	r0, #7
   8087c:	4b15      	ldr	r3, [pc, #84]	; (808d4 <genclk_enable_source+0x180>)
   8087e:	4798      	blx	r3
   80880:	4603      	mov	r3, r0
   80882:	f083 0301 	eor.w	r3, r3, #1
   80886:	b2db      	uxtb	r3, r3
   80888:	2b00      	cmp	r3, #0
   8088a:	d01e      	beq.n	808ca <genclk_enable_source+0x176>
			osc_enable(OSC_MAINCK_BYPASS);
   8088c:	2007      	movs	r0, #7
   8088e:	4b12      	ldr	r3, [pc, #72]	; (808d8 <genclk_enable_source+0x184>)
   80890:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_BYPASS);
   80892:	2007      	movs	r0, #7
   80894:	4b11      	ldr	r3, [pc, #68]	; (808dc <genclk_enable_source+0x188>)
   80896:	4798      	blx	r3
		}
		break;
   80898:	e017      	b.n	808ca <genclk_enable_source+0x176>

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_PCK_SRC_PLLACK:
		pll_enable_config_defaults(0);
   8089a:	2000      	movs	r0, #0
   8089c:	4b10      	ldr	r3, [pc, #64]	; (808e0 <genclk_enable_source+0x18c>)
   8089e:	4798      	blx	r3
		break;
   808a0:	e014      	b.n	808cc <genclk_enable_source+0x178>
#endif

#ifdef CONFIG_PLL1_SOURCE
	case GENCLK_PCK_SRC_PLLBCK:
		pll_enable_config_defaults(1);
   808a2:	2001      	movs	r0, #1
   808a4:	4b0e      	ldr	r3, [pc, #56]	; (808e0 <genclk_enable_source+0x18c>)
   808a6:	4798      	blx	r3
		break;
   808a8:	e010      	b.n	808cc <genclk_enable_source+0x178>
	case GENCLK_PCK_SRC_MCK:
		break;

	default:
		Assert(false);
		break;
   808aa:	bf00      	nop
   808ac:	e00e      	b.n	808cc <genclk_enable_source+0x178>
		break;
   808ae:	bf00      	nop
   808b0:	e00c      	b.n	808cc <genclk_enable_source+0x178>
		break;
   808b2:	bf00      	nop
   808b4:	e00a      	b.n	808cc <genclk_enable_source+0x178>
		break;
   808b6:	bf00      	nop
   808b8:	e008      	b.n	808cc <genclk_enable_source+0x178>
		break;
   808ba:	bf00      	nop
   808bc:	e006      	b.n	808cc <genclk_enable_source+0x178>
		break;
   808be:	bf00      	nop
   808c0:	e004      	b.n	808cc <genclk_enable_source+0x178>
		break;
   808c2:	bf00      	nop
   808c4:	e002      	b.n	808cc <genclk_enable_source+0x178>
		break;
   808c6:	bf00      	nop
   808c8:	e000      	b.n	808cc <genclk_enable_source+0x178>
		break;
   808ca:	bf00      	nop
	}
}
   808cc:	bf00      	nop
   808ce:	3708      	adds	r7, #8
   808d0:	46bd      	mov	sp, r7
   808d2:	bd80      	pop	{r7, pc}
   808d4:	000801ad 	.word	0x000801ad
   808d8:	00080129 	.word	0x00080129
   808dc:	000802a1 	.word	0x000802a1
   808e0:	000803dd 	.word	0x000803dd

000808e4 <phywhisperer_no_pwr>:

//Serial Number - will be read by device ID
char usb_serial_number[33] = "000000000000DEADBEEF";

void phywhisperer_no_pwr(void)
{
   808e4:	b480      	push	{r7}
   808e6:	af00      	add	r7, sp, #0
    PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   808e8:	4b05      	ldr	r3, [pc, #20]	; (80900 <phywhisperer_no_pwr+0x1c>)
   808ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   808ee:	635a      	str	r2, [r3, #52]	; 0x34
    PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   808f0:	4b03      	ldr	r3, [pc, #12]	; (80900 <phywhisperer_no_pwr+0x1c>)
   808f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   808f6:	635a      	str	r2, [r3, #52]	; 0x34
}
   808f8:	bf00      	nop
   808fa:	46bd      	mov	sp, r7
   808fc:	bc80      	pop	{r7}
   808fe:	4770      	bx	lr
   80900:	400e0c00 	.word	0x400e0c00

00080904 <phywhisperer_5V_pwr>:

void phywhisperer_5V_pwr(void)
{
   80904:	b480      	push	{r7}
   80906:	af00      	add	r7, sp, #0
    PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   80908:	4b05      	ldr	r3, [pc, #20]	; (80920 <phywhisperer_5V_pwr+0x1c>)
   8090a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8090e:	635a      	str	r2, [r3, #52]	; 0x34
    PIOA->PIO_SODR = (1 << F_VB5V); //enable host power
   80910:	4b03      	ldr	r3, [pc, #12]	; (80920 <phywhisperer_5V_pwr+0x1c>)
   80912:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80916:	631a      	str	r2, [r3, #48]	; 0x30
}
   80918:	bf00      	nop
   8091a:	46bd      	mov	sp, r7
   8091c:	bc80      	pop	{r7}
   8091e:	4770      	bx	lr
   80920:	400e0c00 	.word	0x400e0c00

00080924 <phywhisperer_host_pwr>:

void phywhisperer_host_pwr(void)
{
   80924:	b480      	push	{r7}
   80926:	af00      	add	r7, sp, #0
    PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   80928:	4b05      	ldr	r3, [pc, #20]	; (80940 <phywhisperer_host_pwr+0x1c>)
   8092a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8092e:	635a      	str	r2, [r3, #52]	; 0x34
    PIOA->PIO_SODR = (1 << F_VBHOST); //enable sniff power
   80930:	4b03      	ldr	r3, [pc, #12]	; (80940 <phywhisperer_host_pwr+0x1c>)
   80932:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   80936:	631a      	str	r2, [r3, #48]	; 0x30
}
   80938:	bf00      	nop
   8093a:	46bd      	mov	sp, r7
   8093c:	bc80      	pop	{r7}
   8093e:	4770      	bx	lr
   80940:	400e0c00 	.word	0x400e0c00

00080944 <pwr_st_from_io>:
        phywhisperer_host_pwr();
    }
}

uint8_t pwr_st_from_io(void)
{
   80944:	b480      	push	{r7}
   80946:	af00      	add	r7, sp, #0
    if (!(PIOA->PIO_ODSR & (1 << F_VBHOST)) && !(PIOA->PIO_ODSR & (1 << F_VB5V))) {
   80948:	4b17      	ldr	r3, [pc, #92]	; (809a8 <pwr_st_from_io+0x64>)
   8094a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8094c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   80950:	2b00      	cmp	r3, #0
   80952:	d107      	bne.n	80964 <pwr_st_from_io+0x20>
   80954:	4b14      	ldr	r3, [pc, #80]	; (809a8 <pwr_st_from_io+0x64>)
   80956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80958:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   8095c:	2b00      	cmp	r3, #0
   8095e:	d101      	bne.n	80964 <pwr_st_from_io+0x20>
        //USB off
        return 0;
   80960:	2300      	movs	r3, #0
   80962:	e01c      	b.n	8099e <pwr_st_from_io+0x5a>
    } else if (!(PIOA->PIO_ODSR & (1 << F_VBHOST)) && (PIOA->PIO_ODSR & (1 << F_VB5V))) {
   80964:	4b10      	ldr	r3, [pc, #64]	; (809a8 <pwr_st_from_io+0x64>)
   80966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   8096c:	2b00      	cmp	r3, #0
   8096e:	d107      	bne.n	80980 <pwr_st_from_io+0x3c>
   80970:	4b0d      	ldr	r3, [pc, #52]	; (809a8 <pwr_st_from_io+0x64>)
   80972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80974:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   80978:	2b00      	cmp	r3, #0
   8097a:	d001      	beq.n	80980 <pwr_st_from_io+0x3c>
        //Host power
        return 1;
   8097c:	2301      	movs	r3, #1
   8097e:	e00e      	b.n	8099e <pwr_st_from_io+0x5a>
    } else if ((PIOA->PIO_ODSR & (1 << F_VBHOST)) && !(PIOA->PIO_ODSR & (1 << F_VB5V))) {
   80980:	4b09      	ldr	r3, [pc, #36]	; (809a8 <pwr_st_from_io+0x64>)
   80982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   80988:	2b00      	cmp	r3, #0
   8098a:	d007      	beq.n	8099c <pwr_st_from_io+0x58>
   8098c:	4b06      	ldr	r3, [pc, #24]	; (809a8 <pwr_st_from_io+0x64>)
   8098e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80990:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   80994:	2b00      	cmp	r3, #0
   80996:	d101      	bne.n	8099c <pwr_st_from_io+0x58>
        //Sniffer power
        return 2;
   80998:	2302      	movs	r3, #2
   8099a:	e000      	b.n	8099e <pwr_st_from_io+0x5a>
    } else {
        //Everything's on...
        return 0xFF;
   8099c:	23ff      	movs	r3, #255	; 0xff
    }

}
   8099e:	4618      	mov	r0, r3
   809a0:	46bd      	mov	sp, r7
   809a2:	bc80      	pop	{r7}
   809a4:	4770      	bx	lr
   809a6:	bf00      	nop
   809a8:	400e0c00 	.word	0x400e0c00

000809ac <phywhisperer_setup_pins>:

void phywhisperer_setup_pins(void)
{
   809ac:	b580      	push	{r7, lr}
   809ae:	af00      	add	r7, sp, #0
    board_init();
   809b0:	4b2e      	ldr	r3, [pc, #184]	; (80a6c <phywhisperer_setup_pins+0xc0>)
   809b2:	4798      	blx	r3
    ioport_set_pin_mode(BUTTON_IN, IOPORT_MODE_PULLUP); //(1 << 2) = PULL UP
   809b4:	2108      	movs	r1, #8
   809b6:	2018      	movs	r0, #24
   809b8:	4b2d      	ldr	r3, [pc, #180]	; (80a70 <phywhisperer_setup_pins+0xc4>)
   809ba:	4798      	blx	r3
    PIOA->PIO_ODR = (1 << BUTTON_IN);
   809bc:	4b2d      	ldr	r3, [pc, #180]	; (80a74 <phywhisperer_setup_pins+0xc8>)
   809be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   809c2:	615a      	str	r2, [r3, #20]
    PIOA->PIO_PUER = (1 << BUTTON_IN); // enable pullup
   809c4:	4b2b      	ldr	r3, [pc, #172]	; (80a74 <phywhisperer_setup_pins+0xc8>)
   809c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   809ca:	665a      	str	r2, [r3, #100]	; 0x64
    PIOA->PIO_DIFSR = (1 << BUTTON_IN); //enable debounce
   809cc:	4b29      	ldr	r3, [pc, #164]	; (80a74 <phywhisperer_setup_pins+0xc8>)
   809ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   809d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    PIOA->PIO_OER = (1 << F_VB5V) | (1 << F_VBHOST); //enable output mode on VBHOST/VBSNIFF pins
   809d6:	4b27      	ldr	r3, [pc, #156]	; (80a74 <phywhisperer_setup_pins+0xc8>)
   809d8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
   809dc:	611a      	str	r2, [r3, #16]

    phywhisperer_host_pwr();
   809de:	4b26      	ldr	r3, [pc, #152]	; (80a78 <phywhisperer_setup_pins+0xcc>)
   809e0:	4798      	blx	r3

    /* Enable SMC */
    pmc_enable_periph_clk(ID_SMC);
   809e2:	2009      	movs	r0, #9
   809e4:	4b25      	ldr	r3, [pc, #148]	; (80a7c <phywhisperer_setup_pins+0xd0>)
   809e6:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   809e8:	4925      	ldr	r1, [pc, #148]	; (80a80 <phywhisperer_setup_pins+0xd4>)
   809ea:	2029      	movs	r0, #41	; 0x29
   809ec:	4b25      	ldr	r3, [pc, #148]	; (80a84 <phywhisperer_setup_pins+0xd8>)
   809ee:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   809f0:	4923      	ldr	r1, [pc, #140]	; (80a80 <phywhisperer_setup_pins+0xd4>)
   809f2:	202a      	movs	r0, #42	; 0x2a
   809f4:	4b23      	ldr	r3, [pc, #140]	; (80a84 <phywhisperer_setup_pins+0xd8>)
   809f6:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   809f8:	4921      	ldr	r1, [pc, #132]	; (80a80 <phywhisperer_setup_pins+0xd4>)
   809fa:	202b      	movs	r0, #43	; 0x2b
   809fc:	4b21      	ldr	r3, [pc, #132]	; (80a84 <phywhisperer_setup_pins+0xd8>)
   809fe:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   80a00:	491f      	ldr	r1, [pc, #124]	; (80a80 <phywhisperer_setup_pins+0xd4>)
   80a02:	202c      	movs	r0, #44	; 0x2c
   80a04:	4b1f      	ldr	r3, [pc, #124]	; (80a84 <phywhisperer_setup_pins+0xd8>)
   80a06:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   80a08:	491d      	ldr	r1, [pc, #116]	; (80a80 <phywhisperer_setup_pins+0xd4>)
   80a0a:	202d      	movs	r0, #45	; 0x2d
   80a0c:	4b1d      	ldr	r3, [pc, #116]	; (80a84 <phywhisperer_setup_pins+0xd8>)
   80a0e:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   80a10:	491b      	ldr	r1, [pc, #108]	; (80a80 <phywhisperer_setup_pins+0xd4>)
   80a12:	202e      	movs	r0, #46	; 0x2e
   80a14:	4b1b      	ldr	r3, [pc, #108]	; (80a84 <phywhisperer_setup_pins+0xd8>)
   80a16:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   80a18:	4919      	ldr	r1, [pc, #100]	; (80a80 <phywhisperer_setup_pins+0xd4>)
   80a1a:	202f      	movs	r0, #47	; 0x2f
   80a1c:	4b19      	ldr	r3, [pc, #100]	; (80a84 <phywhisperer_setup_pins+0xd8>)
   80a1e:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   80a20:	4917      	ldr	r1, [pc, #92]	; (80a80 <phywhisperer_setup_pins+0xd4>)
   80a22:	2030      	movs	r0, #48	; 0x30
   80a24:	4b17      	ldr	r3, [pc, #92]	; (80a84 <phywhisperer_setup_pins+0xd8>)
   80a26:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   80a28:	4915      	ldr	r1, [pc, #84]	; (80a80 <phywhisperer_setup_pins+0xd4>)
   80a2a:	2033      	movs	r0, #51	; 0x33
   80a2c:	4b15      	ldr	r3, [pc, #84]	; (80a84 <phywhisperer_setup_pins+0xd8>)
   80a2e:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   80a30:	4913      	ldr	r1, [pc, #76]	; (80a80 <phywhisperer_setup_pins+0xd4>)
   80a32:	2037      	movs	r0, #55	; 0x37
   80a34:	4b13      	ldr	r3, [pc, #76]	; (80a84 <phywhisperer_setup_pins+0xd8>)
   80a36:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   80a38:	4911      	ldr	r1, [pc, #68]	; (80a80 <phywhisperer_setup_pins+0xd4>)
   80a3a:	2034      	movs	r0, #52	; 0x34
   80a3c:	4b11      	ldr	r3, [pc, #68]	; (80a84 <phywhisperer_setup_pins+0xd8>)
   80a3e:	4798      	blx	r3

    smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   80a40:	4a11      	ldr	r2, [pc, #68]	; (80a88 <phywhisperer_setup_pins+0xdc>)
   80a42:	2100      	movs	r1, #0
   80a44:	4811      	ldr	r0, [pc, #68]	; (80a8c <phywhisperer_setup_pins+0xe0>)
   80a46:	4b12      	ldr	r3, [pc, #72]	; (80a90 <phywhisperer_setup_pins+0xe4>)
   80a48:	4798      	blx	r3
                         | SMC_SETUP_NCS_WR_SETUP(1)
                         | SMC_SETUP_NRD_SETUP(1)
                         | SMC_SETUP_NCS_RD_SETUP(1));
    smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   80a4a:	4a12      	ldr	r2, [pc, #72]	; (80a94 <phywhisperer_setup_pins+0xe8>)
   80a4c:	2100      	movs	r1, #0
   80a4e:	480f      	ldr	r0, [pc, #60]	; (80a8c <phywhisperer_setup_pins+0xe0>)
   80a50:	4b11      	ldr	r3, [pc, #68]	; (80a98 <phywhisperer_setup_pins+0xec>)
   80a52:	4798      	blx	r3
                         | SMC_PULSE_NCS_WR_PULSE(1)
                         | SMC_PULSE_NRD_PULSE(3)
                         | SMC_PULSE_NCS_RD_PULSE(1));
    smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   80a54:	4a11      	ldr	r2, [pc, #68]	; (80a9c <phywhisperer_setup_pins+0xf0>)
   80a56:	2100      	movs	r1, #0
   80a58:	480c      	ldr	r0, [pc, #48]	; (80a8c <phywhisperer_setup_pins+0xe0>)
   80a5a:	4b11      	ldr	r3, [pc, #68]	; (80aa0 <phywhisperer_setup_pins+0xf4>)
   80a5c:	4798      	blx	r3
                         | SMC_CYCLE_NRD_CYCLE(4));
    smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   80a5e:	2203      	movs	r2, #3
   80a60:	2100      	movs	r1, #0
   80a62:	480a      	ldr	r0, [pc, #40]	; (80a8c <phywhisperer_setup_pins+0xe0>)
   80a64:	4b0f      	ldr	r3, [pc, #60]	; (80aa4 <phywhisperer_setup_pins+0xf8>)
   80a66:	4798      	blx	r3
                 | SMC_MODE_DBW_BIT_8);
}
   80a68:	bf00      	nop
   80a6a:	bd80      	pop	{r7, pc}
   80a6c:	00085879 	.word	0x00085879
   80a70:	00080489 	.word	0x00080489
   80a74:	400e0c00 	.word	0x400e0c00
   80a78:	00080925 	.word	0x00080925
   80a7c:	00083e29 	.word	0x00083e29
   80a80:	08000001 	.word	0x08000001
   80a84:	000843f1 	.word	0x000843f1
   80a88:	01010100 	.word	0x01010100
   80a8c:	400e0000 	.word	0x400e0000
   80a90:	00081889 	.word	0x00081889
   80a94:	01030101 	.word	0x01030101
   80a98:	000818b3 	.word	0x000818b3
   80a9c:	00040002 	.word	0x00040002
   80aa0:	000818dd 	.word	0x000818dd
   80aa4:	00081907 	.word	0x00081907

00080aa8 <hacky_delay>:

void hacky_delay(void)
{
   80aa8:	b480      	push	{r7}
   80aaa:	b083      	sub	sp, #12
   80aac:	af00      	add	r7, sp, #0
    for (volatile uint32_t i = 0; i < 250000; i++);
   80aae:	2300      	movs	r3, #0
   80ab0:	607b      	str	r3, [r7, #4]
   80ab2:	e002      	b.n	80aba <hacky_delay+0x12>
   80ab4:	687b      	ldr	r3, [r7, #4]
   80ab6:	3301      	adds	r3, #1
   80ab8:	607b      	str	r3, [r7, #4]
   80aba:	687b      	ldr	r3, [r7, #4]
   80abc:	4a03      	ldr	r2, [pc, #12]	; (80acc <hacky_delay+0x24>)
   80abe:	4293      	cmp	r3, r2
   80ac0:	d9f8      	bls.n	80ab4 <hacky_delay+0xc>
}
   80ac2:	bf00      	nop
   80ac4:	370c      	adds	r7, #12
   80ac6:	46bd      	mov	sp, r7
   80ac8:	bc80      	pop	{r7}
   80aca:	4770      	bx	lr
   80acc:	0003d08f 	.word	0x0003d08f

00080ad0 <genclk_enable_config>:

static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
   80ad0:	b580      	push	{r7, lr}
   80ad2:	b086      	sub	sp, #24
   80ad4:	af00      	add	r7, sp, #0
   80ad6:	60f8      	str	r0, [r7, #12]
   80ad8:	460b      	mov	r3, r1
   80ada:	607a      	str	r2, [r7, #4]
   80adc:	72fb      	strb	r3, [r7, #11]
    struct genclk_config gcfg;

    genclk_config_defaults(&gcfg, id);
   80ade:	f107 0314 	add.w	r3, r7, #20
   80ae2:	68f9      	ldr	r1, [r7, #12]
   80ae4:	4618      	mov	r0, r3
   80ae6:	4b0e      	ldr	r3, [pc, #56]	; (80b20 <genclk_enable_config+0x50>)
   80ae8:	4798      	blx	r3
    genclk_enable_source(src);
   80aea:	7afb      	ldrb	r3, [r7, #11]
   80aec:	4618      	mov	r0, r3
   80aee:	4b0d      	ldr	r3, [pc, #52]	; (80b24 <genclk_enable_config+0x54>)
   80af0:	4798      	blx	r3
    genclk_config_set_source(&gcfg, src);
   80af2:	7afa      	ldrb	r2, [r7, #11]
   80af4:	f107 0314 	add.w	r3, r7, #20
   80af8:	4611      	mov	r1, r2
   80afa:	4618      	mov	r0, r3
   80afc:	4b0a      	ldr	r3, [pc, #40]	; (80b28 <genclk_enable_config+0x58>)
   80afe:	4798      	blx	r3
    genclk_config_set_divider(&gcfg, divider);
   80b00:	f107 0314 	add.w	r3, r7, #20
   80b04:	6879      	ldr	r1, [r7, #4]
   80b06:	4618      	mov	r0, r3
   80b08:	4b08      	ldr	r3, [pc, #32]	; (80b2c <genclk_enable_config+0x5c>)
   80b0a:	4798      	blx	r3
    genclk_enable(&gcfg, id);
   80b0c:	f107 0314 	add.w	r3, r7, #20
   80b10:	68f9      	ldr	r1, [r7, #12]
   80b12:	4618      	mov	r0, r3
   80b14:	4b06      	ldr	r3, [pc, #24]	; (80b30 <genclk_enable_config+0x60>)
   80b16:	4798      	blx	r3
}
   80b18:	bf00      	nop
   80b1a:	3718      	adds	r7, #24
   80b1c:	46bd      	mov	sp, r7
   80b1e:	bd80      	pop	{r7, pc}
   80b20:	00080641 	.word	0x00080641
   80b24:	00080755 	.word	0x00080755
   80b28:	0008065d 	.word	0x0008065d
   80b2c:	000806f9 	.word	0x000806f9
   80b30:	00080725 	.word	0x00080725

00080b34 <main>:

void (*pwr_list[])(void) = {phywhisperer_no_pwr, phywhisperer_5V_pwr, phywhisperer_host_pwr};

int main(void)
{
   80b34:	b580      	push	{r7, lr}
   80b36:	b086      	sub	sp, #24
   80b38:	af00      	add	r7, sp, #0
    uint32_t serial_number[4];

    // Read Device-ID from SAM3U. Do this before enabling interrupts etc.
    flash_read_unique_id(serial_number, sizeof(serial_number));
   80b3a:	1d3b      	adds	r3, r7, #4
   80b3c:	2110      	movs	r1, #16
   80b3e:	4618      	mov	r0, r3
   80b40:	4b29      	ldr	r3, [pc, #164]	; (80be8 <main+0xb4>)
   80b42:	4798      	blx	r3

    irq_initialize_vectors();
    cpu_irq_enable();
   80b44:	4b29      	ldr	r3, [pc, #164]	; (80bec <main+0xb8>)
   80b46:	2201      	movs	r2, #1
   80b48:	701a      	strb	r2, [r3, #0]
   80b4a:	f3bf 8f5f 	dmb	sy
   80b4e:	b662      	cpsie	i

    // Initialize the sleep manager
    sleepmgr_init();
   80b50:	4b27      	ldr	r3, [pc, #156]	; (80bf0 <main+0xbc>)
   80b52:	4798      	blx	r3
#if !SAMD21 && !SAMR21
    sysclk_init();
   80b54:	4b27      	ldr	r3, [pc, #156]	; (80bf4 <main+0xc0>)
   80b56:	4798      	blx	r3
    phywhisperer_setup_pins();
   80b58:	4b27      	ldr	r3, [pc, #156]	; (80bf8 <main+0xc4>)
   80b5a:	4798      	blx	r3
#else
    system_init();
#endif
    genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
   80b5c:	2200      	movs	r2, #0
   80b5e:	210a      	movs	r1, #10
   80b60:	2000      	movs	r0, #0
   80b62:	4b26      	ldr	r3, [pc, #152]	; (80bfc <main+0xc8>)
   80b64:	4798      	blx	r3
    udc_start();
   80b66:	4b26      	ldr	r3, [pc, #152]	; (80c00 <main+0xcc>)
   80b68:	4798      	blx	r3
    gpio_set_pin_high(LED0_GPIO);
   80b6a:	201d      	movs	r0, #29
   80b6c:	4b25      	ldr	r3, [pc, #148]	; (80c04 <main+0xd0>)
   80b6e:	4798      	blx	r3
    gpio_set_pin_low(LED1_GPIO);
   80b70:	201f      	movs	r0, #31
   80b72:	4b25      	ldr	r3, [pc, #148]	; (80c08 <main+0xd4>)
   80b74:	4798      	blx	r3

    phywhisperer_no_pwr();
   80b76:	4b25      	ldr	r3, [pc, #148]	; (80c0c <main+0xd8>)
   80b78:	4798      	blx	r3
    USB_PWR_STATE = 0;
   80b7a:	4b25      	ldr	r3, [pc, #148]	; (80c10 <main+0xdc>)
   80b7c:	2200      	movs	r2, #0
   80b7e:	701a      	strb	r2, [r3, #0]

    uint8_t curr_pwr_setting = 0;
   80b80:	2300      	movs	r3, #0
   80b82:	75fb      	strb	r3, [r7, #23]
    while(1) {
        sleepmgr_enter_sleep();
   80b84:	4b23      	ldr	r3, [pc, #140]	; (80c14 <main+0xe0>)
   80b86:	4798      	blx	r3
        uint8_t button_status = !(PIOA->PIO_PDSR & (1 << BUTTON_IN));
   80b88:	4b23      	ldr	r3, [pc, #140]	; (80c18 <main+0xe4>)
   80b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80b90:	2b00      	cmp	r3, #0
   80b92:	bf0c      	ite	eq
   80b94:	2301      	moveq	r3, #1
   80b96:	2300      	movne	r3, #0
   80b98:	b2db      	uxtb	r3, r3
   80b9a:	75bb      	strb	r3, [r7, #22]
        if (button_status){
   80b9c:	7dbb      	ldrb	r3, [r7, #22]
   80b9e:	2b00      	cmp	r3, #0
   80ba0:	d0f0      	beq.n	80b84 <main+0x50>
            hacky_delay(); //delay to try to debounce
   80ba2:	4b1e      	ldr	r3, [pc, #120]	; (80c1c <main+0xe8>)
   80ba4:	4798      	blx	r3
            while (!(PIOA->PIO_PDSR & (1 << BUTTON_IN))); //wait for trigger to be unpressed
   80ba6:	bf00      	nop
   80ba8:	4b1b      	ldr	r3, [pc, #108]	; (80c18 <main+0xe4>)
   80baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80bac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80bb0:	2b00      	cmp	r3, #0
   80bb2:	d0f9      	beq.n	80ba8 <main+0x74>

            if (USB_PWR_STATE && USB_PWR_STATE <= 2) {
   80bb4:	4b16      	ldr	r3, [pc, #88]	; (80c10 <main+0xdc>)
   80bb6:	781b      	ldrb	r3, [r3, #0]
   80bb8:	2b00      	cmp	r3, #0
   80bba:	d012      	beq.n	80be2 <main+0xae>
   80bbc:	4b14      	ldr	r3, [pc, #80]	; (80c10 <main+0xdc>)
   80bbe:	781b      	ldrb	r3, [r3, #0]
   80bc0:	2b02      	cmp	r3, #2
   80bc2:	d80e      	bhi.n	80be2 <main+0xae>
                if (pwr_st_from_io()) { //currently on
   80bc4:	4b16      	ldr	r3, [pc, #88]	; (80c20 <main+0xec>)
   80bc6:	4798      	blx	r3
   80bc8:	4603      	mov	r3, r0
   80bca:	2b00      	cmp	r3, #0
   80bcc:	d002      	beq.n	80bd4 <main+0xa0>
                    phywhisperer_no_pwr();
   80bce:	4b0f      	ldr	r3, [pc, #60]	; (80c0c <main+0xd8>)
   80bd0:	4798      	blx	r3
   80bd2:	e006      	b.n	80be2 <main+0xae>
                } else {
                    pwr_list[USB_PWR_STATE]();
   80bd4:	4b0e      	ldr	r3, [pc, #56]	; (80c10 <main+0xdc>)
   80bd6:	781b      	ldrb	r3, [r3, #0]
   80bd8:	461a      	mov	r2, r3
   80bda:	4b12      	ldr	r3, [pc, #72]	; (80c24 <main+0xf0>)
   80bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80be0:	4798      	blx	r3
                }
            }
            hacky_delay();
   80be2:	4b0e      	ldr	r3, [pc, #56]	; (80c1c <main+0xe8>)
   80be4:	4798      	blx	r3
    while(1) {
   80be6:	e7cd      	b.n	80b84 <main+0x50>
   80be8:	00081585 	.word	0x00081585
   80bec:	2000031a 	.word	0x2000031a
   80bf0:	00080591 	.word	0x00080591
   80bf4:	00083a51 	.word	0x00083a51
   80bf8:	000809ad 	.word	0x000809ad
   80bfc:	00080ad1 	.word	0x00080ad1
   80c00:	000848b5 	.word	0x000848b5
   80c04:	00084391 	.word	0x00084391
   80c08:	000843c1 	.word	0x000843c1
   80c0c:	000808e5 	.word	0x000808e5
   80c10:	200007f8 	.word	0x200007f8
   80c14:	000805f9 	.word	0x000805f9
   80c18:	400e0c00 	.word	0x400e0c00
   80c1c:	00080aa9 	.word	0x00080aa9
   80c20:	00080945 	.word	0x00080945
   80c24:	20000280 	.word	0x20000280

00080c28 <osc_enable>:
{
   80c28:	b580      	push	{r7, lr}
   80c2a:	b082      	sub	sp, #8
   80c2c:	af00      	add	r7, sp, #0
   80c2e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80c30:	687b      	ldr	r3, [r7, #4]
   80c32:	2b07      	cmp	r3, #7
   80c34:	d82e      	bhi.n	80c94 <osc_enable+0x6c>
   80c36:	a201      	add	r2, pc, #4	; (adr r2, 80c3c <osc_enable+0x14>)
   80c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80c3c:	00080c93 	.word	0x00080c93
   80c40:	00080c5d 	.word	0x00080c5d
   80c44:	00080c65 	.word	0x00080c65
   80c48:	00080c6d 	.word	0x00080c6d
   80c4c:	00080c75 	.word	0x00080c75
   80c50:	00080c7d 	.word	0x00080c7d
   80c54:	00080c85 	.word	0x00080c85
   80c58:	00080c8d 	.word	0x00080c8d
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80c5c:	2000      	movs	r0, #0
   80c5e:	4b0f      	ldr	r3, [pc, #60]	; (80c9c <osc_enable+0x74>)
   80c60:	4798      	blx	r3
		break;
   80c62:	e017      	b.n	80c94 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80c64:	2001      	movs	r0, #1
   80c66:	4b0d      	ldr	r3, [pc, #52]	; (80c9c <osc_enable+0x74>)
   80c68:	4798      	blx	r3
		break;
   80c6a:	e013      	b.n	80c94 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80c6c:	2000      	movs	r0, #0
   80c6e:	4b0c      	ldr	r3, [pc, #48]	; (80ca0 <osc_enable+0x78>)
   80c70:	4798      	blx	r3
		break;
   80c72:	e00f      	b.n	80c94 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80c74:	2010      	movs	r0, #16
   80c76:	4b0a      	ldr	r3, [pc, #40]	; (80ca0 <osc_enable+0x78>)
   80c78:	4798      	blx	r3
		break;
   80c7a:	e00b      	b.n	80c94 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80c7c:	2020      	movs	r0, #32
   80c7e:	4b08      	ldr	r3, [pc, #32]	; (80ca0 <osc_enable+0x78>)
   80c80:	4798      	blx	r3
		break;
   80c82:	e007      	b.n	80c94 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80c84:	203e      	movs	r0, #62	; 0x3e
   80c86:	4b07      	ldr	r3, [pc, #28]	; (80ca4 <osc_enable+0x7c>)
   80c88:	4798      	blx	r3
		break;
   80c8a:	e003      	b.n	80c94 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   80c8c:	4b06      	ldr	r3, [pc, #24]	; (80ca8 <osc_enable+0x80>)
   80c8e:	4798      	blx	r3
		break;
   80c90:	e000      	b.n	80c94 <osc_enable+0x6c>
		break;
   80c92:	bf00      	nop
}
   80c94:	bf00      	nop
   80c96:	3708      	adds	r7, #8
   80c98:	46bd      	mov	sp, r7
   80c9a:	bd80      	pop	{r7, pc}
   80c9c:	00083bdd 	.word	0x00083bdd
   80ca0:	00083c49 	.word	0x00083c49
   80ca4:	00083cbd 	.word	0x00083cbd
   80ca8:	00083d09 	.word	0x00083d09

00080cac <osc_is_ready>:
{
   80cac:	b580      	push	{r7, lr}
   80cae:	b082      	sub	sp, #8
   80cb0:	af00      	add	r7, sp, #0
   80cb2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80cb4:	687b      	ldr	r3, [r7, #4]
   80cb6:	2b07      	cmp	r3, #7
   80cb8:	d82f      	bhi.n	80d1a <osc_is_ready+0x6e>
   80cba:	a201      	add	r2, pc, #4	; (adr r2, 80cc0 <osc_is_ready+0x14>)
   80cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80cc0:	00080ce1 	.word	0x00080ce1
   80cc4:	00080ce5 	.word	0x00080ce5
   80cc8:	00080ce5 	.word	0x00080ce5
   80ccc:	00080cf7 	.word	0x00080cf7
   80cd0:	00080cf7 	.word	0x00080cf7
   80cd4:	00080cf7 	.word	0x00080cf7
   80cd8:	00080d09 	.word	0x00080d09
   80cdc:	00080d09 	.word	0x00080d09
		return 1;
   80ce0:	2301      	movs	r3, #1
   80ce2:	e01b      	b.n	80d1c <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   80ce4:	4b0f      	ldr	r3, [pc, #60]	; (80d24 <osc_is_ready+0x78>)
   80ce6:	4798      	blx	r3
   80ce8:	4603      	mov	r3, r0
   80cea:	2b00      	cmp	r3, #0
   80cec:	bf14      	ite	ne
   80cee:	2301      	movne	r3, #1
   80cf0:	2300      	moveq	r3, #0
   80cf2:	b2db      	uxtb	r3, r3
   80cf4:	e012      	b.n	80d1c <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   80cf6:	4b0c      	ldr	r3, [pc, #48]	; (80d28 <osc_is_ready+0x7c>)
   80cf8:	4798      	blx	r3
   80cfa:	4603      	mov	r3, r0
   80cfc:	2b00      	cmp	r3, #0
   80cfe:	bf14      	ite	ne
   80d00:	2301      	movne	r3, #1
   80d02:	2300      	moveq	r3, #0
   80d04:	b2db      	uxtb	r3, r3
   80d06:	e009      	b.n	80d1c <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   80d08:	4b08      	ldr	r3, [pc, #32]	; (80d2c <osc_is_ready+0x80>)
   80d0a:	4798      	blx	r3
   80d0c:	4603      	mov	r3, r0
   80d0e:	2b00      	cmp	r3, #0
   80d10:	bf14      	ite	ne
   80d12:	2301      	movne	r3, #1
   80d14:	2300      	moveq	r3, #0
   80d16:	b2db      	uxtb	r3, r3
   80d18:	e000      	b.n	80d1c <osc_is_ready+0x70>
	return 0;
   80d1a:	2300      	movs	r3, #0
}
   80d1c:	4618      	mov	r0, r3
   80d1e:	3708      	adds	r7, #8
   80d20:	46bd      	mov	sp, r7
   80d22:	bd80      	pop	{r7, pc}
   80d24:	00083c15 	.word	0x00083c15
   80d28:	00083ca5 	.word	0x00083ca5
   80d2c:	00083d55 	.word	0x00083d55

00080d30 <osc_wait_ready>:
{
   80d30:	b580      	push	{r7, lr}
   80d32:	b082      	sub	sp, #8
   80d34:	af00      	add	r7, sp, #0
   80d36:	4603      	mov	r3, r0
   80d38:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   80d3a:	bf00      	nop
   80d3c:	79fb      	ldrb	r3, [r7, #7]
   80d3e:	4618      	mov	r0, r3
   80d40:	4b05      	ldr	r3, [pc, #20]	; (80d58 <osc_wait_ready+0x28>)
   80d42:	4798      	blx	r3
   80d44:	4603      	mov	r3, r0
   80d46:	f083 0301 	eor.w	r3, r3, #1
   80d4a:	b2db      	uxtb	r3, r3
   80d4c:	2b00      	cmp	r3, #0
   80d4e:	d1f5      	bne.n	80d3c <osc_wait_ready+0xc>
}
   80d50:	bf00      	nop
   80d52:	3708      	adds	r7, #8
   80d54:	46bd      	mov	sp, r7
   80d56:	bd80      	pop	{r7, pc}
   80d58:	00080cad 	.word	0x00080cad

00080d5c <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
   80d5c:	b580      	push	{r7, lr}
   80d5e:	af00      	add	r7, sp, #0
	udd_detach();
   80d60:	4b01      	ldr	r3, [pc, #4]	; (80d68 <udc_detach+0xc>)
   80d62:	4798      	blx	r3
}
   80d64:	bf00      	nop
   80d66:	bd80      	pop	{r7, pc}
   80d68:	00081efd 	.word	0x00081efd

00080d6c <main_suspend_action>:
void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   80d6c:	b480      	push	{r7}
   80d6e:	af00      	add	r7, sp, #0
}
   80d70:	bf00      	nop
   80d72:	46bd      	mov	sp, r7
   80d74:	bc80      	pop	{r7}
   80d76:	4770      	bx	lr

00080d78 <main_resume_action>:

void main_resume_action(void)
{
   80d78:	b480      	push	{r7}
   80d7a:	af00      	add	r7, sp, #0
}
   80d7c:	bf00      	nop
   80d7e:	46bd      	mov	sp, r7
   80d80:	bc80      	pop	{r7}
   80d82:	4770      	bx	lr

00080d84 <main_sof_action>:

void main_sof_action(void)
{
   80d84:	b480      	push	{r7}
   80d86:	af00      	add	r7, sp, #0
    if (!main_b_vendor_enable)
   80d88:	4b04      	ldr	r3, [pc, #16]	; (80d9c <main_sof_action+0x18>)
   80d8a:	781b      	ldrb	r3, [r3, #0]
   80d8c:	b2db      	uxtb	r3, r3
   80d8e:	f083 0301 	eor.w	r3, r3, #1
   80d92:	b2db      	uxtb	r3, r3
   80d94:	2b00      	cmp	r3, #0
        return;
}
   80d96:	46bd      	mov	sp, r7
   80d98:	bc80      	pop	{r7}
   80d9a:	4770      	bx	lr
   80d9c:	2000028c 	.word	0x2000028c

00080da0 <main_vendor_enable>:

bool main_vendor_enable(void)
{
   80da0:	b580      	push	{r7, lr}
   80da2:	af00      	add	r7, sp, #0
    main_b_vendor_enable = true;
   80da4:	4b05      	ldr	r3, [pc, #20]	; (80dbc <main_vendor_enable+0x1c>)
   80da6:	2201      	movs	r2, #1
   80da8:	701a      	strb	r2, [r3, #0]
    // Start data reception on OUT endpoints
#if UDI_VENDOR_EPS_SIZE_BULK_FS
    //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   80daa:	4a05      	ldr	r2, [pc, #20]	; (80dc0 <main_vendor_enable+0x20>)
   80dac:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80db0:	4804      	ldr	r0, [pc, #16]	; (80dc4 <main_vendor_enable+0x24>)
   80db2:	4b05      	ldr	r3, [pc, #20]	; (80dc8 <main_vendor_enable+0x28>)
   80db4:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
#endif
    return true;
   80db6:	2301      	movs	r3, #1
}
   80db8:	4618      	mov	r0, r3
   80dba:	bd80      	pop	{r7, pc}
   80dbc:	2000028c 	.word	0x2000028c
   80dc0:	000812c5 	.word	0x000812c5
   80dc4:	200007fc 	.word	0x200007fc
   80dc8:	00084061 	.word	0x00084061

00080dcc <main_vendor_disable>:

void main_vendor_disable(void)
{
   80dcc:	b480      	push	{r7}
   80dce:	af00      	add	r7, sp, #0
    main_b_vendor_enable = false;
   80dd0:	4b03      	ldr	r3, [pc, #12]	; (80de0 <main_vendor_disable+0x14>)
   80dd2:	2200      	movs	r2, #0
   80dd4:	701a      	strb	r2, [r3, #0]
}
   80dd6:	bf00      	nop
   80dd8:	46bd      	mov	sp, r7
   80dda:	bc80      	pop	{r7}
   80ddc:	4770      	bx	lr
   80dde:	bf00      	nop
   80de0:	2000028c 	.word	0x2000028c

00080de4 <ctrl_readmem_bulk>:
void ctrl_writemem_bulk(void);
void ctrl_writemem_ctrl(void);
void ctrl_progfpga_bulk(void);


void ctrl_readmem_bulk(void){
   80de4:	b580      	push	{r7, lr}
   80de6:	b082      	sub	sp, #8
   80de8:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80dea:	4b0e      	ldr	r3, [pc, #56]	; (80e24 <ctrl_readmem_bulk+0x40>)
   80dec:	681b      	ldr	r3, [r3, #0]
   80dee:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80df0:	4b0c      	ldr	r3, [pc, #48]	; (80e24 <ctrl_readmem_bulk+0x40>)
   80df2:	685b      	ldr	r3, [r3, #4]
   80df4:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80df6:	4b0c      	ldr	r3, [pc, #48]	; (80e28 <ctrl_readmem_bulk+0x44>)
   80df8:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   80dfa:	bf00      	nop
   80dfc:	2002      	movs	r0, #2
   80dfe:	4b0b      	ldr	r3, [pc, #44]	; (80e2c <ctrl_readmem_bulk+0x48>)
   80e00:	4798      	blx	r3
   80e02:	4603      	mov	r3, r0
   80e04:	2b00      	cmp	r3, #0
   80e06:	d0f9      	beq.n	80dfc <ctrl_readmem_bulk+0x18>

    FPGA_setaddr(address);
   80e08:	6838      	ldr	r0, [r7, #0]
   80e0a:	4b09      	ldr	r3, [pc, #36]	; (80e30 <ctrl_readmem_bulk+0x4c>)
   80e0c:	4798      	blx	r3

    /* Do memory read */
    udi_vendor_bulk_in_run(
   80e0e:	4a09      	ldr	r2, [pc, #36]	; (80e34 <ctrl_readmem_bulk+0x50>)
   80e10:	6879      	ldr	r1, [r7, #4]
   80e12:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   80e16:	4b08      	ldr	r3, [pc, #32]	; (80e38 <ctrl_readmem_bulk+0x54>)
   80e18:	4798      	blx	r3
        (uint8_t *) PSRAM_BASE_ADDRESS,
        buflen,
        main_vendor_bulk_in_received
        );
}
   80e1a:	bf00      	nop
   80e1c:	3708      	adds	r7, #8
   80e1e:	46bd      	mov	sp, r7
   80e20:	bd80      	pop	{r7, pc}
   80e22:	bf00      	nop
   80e24:	20000bfc 	.word	0x20000bfc
   80e28:	000813c5 	.word	0x000813c5
   80e2c:	00081385 	.word	0x00081385
   80e30:	000813f5 	.word	0x000813f5
   80e34:	0008128d 	.word	0x0008128d
   80e38:	00084035 	.word	0x00084035

00080e3c <ctrl_readmem_ctrl>:

void ctrl_readmem_ctrl(void){
   80e3c:	b580      	push	{r7, lr}
   80e3e:	b082      	sub	sp, #8
   80e40:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80e42:	4b0e      	ldr	r3, [pc, #56]	; (80e7c <ctrl_readmem_ctrl+0x40>)
   80e44:	681b      	ldr	r3, [r3, #0]
   80e46:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80e48:	4b0c      	ldr	r3, [pc, #48]	; (80e7c <ctrl_readmem_ctrl+0x40>)
   80e4a:	685b      	ldr	r3, [r3, #4]
   80e4c:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80e4e:	4b0c      	ldr	r3, [pc, #48]	; (80e80 <ctrl_readmem_ctrl+0x44>)
   80e50:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   80e52:	bf00      	nop
   80e54:	2005      	movs	r0, #5
   80e56:	4b0b      	ldr	r3, [pc, #44]	; (80e84 <ctrl_readmem_ctrl+0x48>)
   80e58:	4798      	blx	r3
   80e5a:	4603      	mov	r3, r0
   80e5c:	2b00      	cmp	r3, #0
   80e5e:	d0f9      	beq.n	80e54 <ctrl_readmem_ctrl+0x18>

    /* Set address */
    FPGA_setaddr(address);
   80e60:	6838      	ldr	r0, [r7, #0]
   80e62:	4b09      	ldr	r3, [pc, #36]	; (80e88 <ctrl_readmem_ctrl+0x4c>)
   80e64:	4798      	blx	r3

    /* Do memory read */
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   80e66:	4b09      	ldr	r3, [pc, #36]	; (80e8c <ctrl_readmem_ctrl+0x50>)
   80e68:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   80e6c:	601a      	str	r2, [r3, #0]

    /* Set size to read */
    ctrlmemread_size = buflen;
   80e6e:	4a08      	ldr	r2, [pc, #32]	; (80e90 <ctrl_readmem_ctrl+0x54>)
   80e70:	687b      	ldr	r3, [r7, #4]
   80e72:	6013      	str	r3, [r2, #0]

    /* Start Transaction */
}
   80e74:	bf00      	nop
   80e76:	3708      	adds	r7, #8
   80e78:	46bd      	mov	sp, r7
   80e7a:	bd80      	pop	{r7, pc}
   80e7c:	20000bfc 	.word	0x20000bfc
   80e80:	000813c5 	.word	0x000813c5
   80e84:	00081385 	.word	0x00081385
   80e88:	000813f5 	.word	0x000813f5
   80e8c:	20000c40 	.word	0x20000c40
   80e90:	20000c44 	.word	0x20000c44

00080e94 <ctrl_writemem_ctrl>:


void ctrl_writemem_ctrl(void){
   80e94:	b580      	push	{r7, lr}
   80e96:	b084      	sub	sp, #16
   80e98:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80e9a:	4b16      	ldr	r3, [pc, #88]	; (80ef4 <ctrl_writemem_ctrl+0x60>)
   80e9c:	681b      	ldr	r3, [r3, #0]
   80e9e:	60bb      	str	r3, [r7, #8]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80ea0:	4b14      	ldr	r3, [pc, #80]	; (80ef4 <ctrl_writemem_ctrl+0x60>)
   80ea2:	685b      	ldr	r3, [r3, #4]
   80ea4:	607b      	str	r3, [r7, #4]

    uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
   80ea6:	4b14      	ldr	r3, [pc, #80]	; (80ef8 <ctrl_writemem_ctrl+0x64>)
   80ea8:	603b      	str	r3, [r7, #0]

    //printf("Writing to %x, %d\n", address, buflen);

    FPGA_releaselock();
   80eaa:	4b14      	ldr	r3, [pc, #80]	; (80efc <ctrl_writemem_ctrl+0x68>)
   80eac:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   80eae:	bf00      	nop
   80eb0:	2001      	movs	r0, #1
   80eb2:	4b13      	ldr	r3, [pc, #76]	; (80f00 <ctrl_writemem_ctrl+0x6c>)
   80eb4:	4798      	blx	r3
   80eb6:	4603      	mov	r3, r0
   80eb8:	2b00      	cmp	r3, #0
   80eba:	d0f9      	beq.n	80eb0 <ctrl_writemem_ctrl+0x1c>

    /* Set address */
    FPGA_setaddr(address);
   80ebc:	6878      	ldr	r0, [r7, #4]
   80ebe:	4b11      	ldr	r3, [pc, #68]	; (80f04 <ctrl_writemem_ctrl+0x70>)
   80ec0:	4798      	blx	r3

    /* Start Transaction */

    /* Do memory write */
    for(unsigned int i = 0; i < buflen; i++){
   80ec2:	2300      	movs	r3, #0
   80ec4:	60fb      	str	r3, [r7, #12]
   80ec6:	e00b      	b.n	80ee0 <ctrl_writemem_ctrl+0x4c>
        xram[i] = ctrlbuf_payload[i];
   80ec8:	4b0f      	ldr	r3, [pc, #60]	; (80f08 <ctrl_writemem_ctrl+0x74>)
   80eca:	681a      	ldr	r2, [r3, #0]
   80ecc:	68fb      	ldr	r3, [r7, #12]
   80ece:	4413      	add	r3, r2
   80ed0:	6839      	ldr	r1, [r7, #0]
   80ed2:	68fa      	ldr	r2, [r7, #12]
   80ed4:	440a      	add	r2, r1
   80ed6:	7812      	ldrb	r2, [r2, #0]
   80ed8:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < buflen; i++){
   80eda:	68fb      	ldr	r3, [r7, #12]
   80edc:	3301      	adds	r3, #1
   80ede:	60fb      	str	r3, [r7, #12]
   80ee0:	68fa      	ldr	r2, [r7, #12]
   80ee2:	68bb      	ldr	r3, [r7, #8]
   80ee4:	429a      	cmp	r2, r3
   80ee6:	d3ef      	bcc.n	80ec8 <ctrl_writemem_ctrl+0x34>
    }

    FPGA_releaselock();
   80ee8:	4b04      	ldr	r3, [pc, #16]	; (80efc <ctrl_writemem_ctrl+0x68>)
   80eea:	4798      	blx	r3
}
   80eec:	bf00      	nop
   80eee:	3710      	adds	r7, #16
   80ef0:	46bd      	mov	sp, r7
   80ef2:	bd80      	pop	{r7, pc}
   80ef4:	20000bfc 	.word	0x20000bfc
   80ef8:	20000c04 	.word	0x20000c04
   80efc:	000813c5 	.word	0x000813c5
   80f00:	00081385 	.word	0x00081385
   80f04:	000813f5 	.word	0x000813f5
   80f08:	20000290 	.word	0x20000290

00080f0c <ctrl_writemem_bulk>:

static uint32_t bulkread_address = 0;
static uint32_t bulkread_len = 0;

void ctrl_writemem_bulk(void){
   80f0c:	b580      	push	{r7, lr}
   80f0e:	b082      	sub	sp, #8
   80f10:	af00      	add	r7, sp, #0
//uint32_t buflen = *(CTRLBUFFER_WORDPTR);
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80f12:	4b09      	ldr	r3, [pc, #36]	; (80f38 <ctrl_writemem_bulk+0x2c>)
   80f14:	685b      	ldr	r3, [r3, #4]
   80f16:	607b      	str	r3, [r7, #4]

    // TODO: see block in
    FPGA_releaselock();
   80f18:	4b08      	ldr	r3, [pc, #32]	; (80f3c <ctrl_writemem_bulk+0x30>)
   80f1a:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   80f1c:	bf00      	nop
   80f1e:	2004      	movs	r0, #4
   80f20:	4b07      	ldr	r3, [pc, #28]	; (80f40 <ctrl_writemem_bulk+0x34>)
   80f22:	4798      	blx	r3
   80f24:	4603      	mov	r3, r0
   80f26:	2b00      	cmp	r3, #0
   80f28:	d0f9      	beq.n	80f1e <ctrl_writemem_bulk+0x12>

    /* Set address */
    FPGA_setaddr(address);
   80f2a:	6878      	ldr	r0, [r7, #4]
   80f2c:	4b05      	ldr	r3, [pc, #20]	; (80f44 <ctrl_writemem_bulk+0x38>)
   80f2e:	4798      	blx	r3

    /* Transaction done in generic callback */
}
   80f30:	bf00      	nop
   80f32:	3708      	adds	r7, #8
   80f34:	46bd      	mov	sp, r7
   80f36:	bd80      	pop	{r7, pc}
   80f38:	20000bfc 	.word	0x20000bfc
   80f3c:	000813c5 	.word	0x000813c5
   80f40:	00081385 	.word	0x00081385
   80f44:	000813f5 	.word	0x000813f5

00080f48 <ctrl_sam3ucfg_cb>:

static void ctrl_sam3ucfg_cb(void)
{
   80f48:	b580      	push	{r7, lr}
   80f4a:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   80f4c:	4b18      	ldr	r3, [pc, #96]	; (80fb0 <ctrl_sam3ucfg_cb+0x68>)
   80f4e:	885b      	ldrh	r3, [r3, #2]
   80f50:	b2db      	uxtb	r3, r3
   80f52:	2b02      	cmp	r3, #2
   80f54:	d00e      	beq.n	80f74 <ctrl_sam3ucfg_cb+0x2c>
   80f56:	2b03      	cmp	r3, #3
   80f58:	d010      	beq.n	80f7c <ctrl_sam3ucfg_cb+0x34>
   80f5a:	2b01      	cmp	r3, #1
   80f5c:	d000      	beq.n	80f60 <ctrl_sam3ucfg_cb+0x18>
        /* Make the jump */
        break;

        /* Oh well, sucks to be you */
    default:
        break;
   80f5e:	e024      	b.n	80faa <ctrl_sam3ucfg_cb+0x62>
        osc_enable(OSC_MAINCK_XTAL);
   80f60:	2006      	movs	r0, #6
   80f62:	4b14      	ldr	r3, [pc, #80]	; (80fb4 <ctrl_sam3ucfg_cb+0x6c>)
   80f64:	4798      	blx	r3
        osc_wait_ready(OSC_MAINCK_XTAL);
   80f66:	2006      	movs	r0, #6
   80f68:	4b13      	ldr	r3, [pc, #76]	; (80fb8 <ctrl_sam3ucfg_cb+0x70>)
   80f6a:	4798      	blx	r3
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   80f6c:	2010      	movs	r0, #16
   80f6e:	4b13      	ldr	r3, [pc, #76]	; (80fbc <ctrl_sam3ucfg_cb+0x74>)
   80f70:	4798      	blx	r3
        break;
   80f72:	e01a      	b.n	80faa <ctrl_sam3ucfg_cb+0x62>
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80f74:	2010      	movs	r0, #16
   80f76:	4b12      	ldr	r3, [pc, #72]	; (80fc0 <ctrl_sam3ucfg_cb+0x78>)
   80f78:	4798      	blx	r3
        break;
   80f7a:	e016      	b.n	80faa <ctrl_sam3ucfg_cb+0x62>
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   80f7c:	2201      	movs	r2, #1
   80f7e:	210c      	movs	r1, #12
   80f80:	4810      	ldr	r0, [pc, #64]	; (80fc4 <ctrl_sam3ucfg_cb+0x7c>)
   80f82:	4b11      	ldr	r3, [pc, #68]	; (80fc8 <ctrl_sam3ucfg_cb+0x80>)
   80f84:	4798      	blx	r3
        udc_detach();
   80f86:	4b11      	ldr	r3, [pc, #68]	; (80fcc <ctrl_sam3ucfg_cb+0x84>)
   80f88:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   80f8a:	bf00      	nop
   80f8c:	4b10      	ldr	r3, [pc, #64]	; (80fd0 <ctrl_sam3ucfg_cb+0x88>)
   80f8e:	685b      	ldr	r3, [r3, #4]
   80f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80f94:	2b00      	cmp	r3, #0
   80f96:	d1f9      	bne.n	80f8c <ctrl_sam3ucfg_cb+0x44>
        RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   80f98:	4a0d      	ldr	r2, [pc, #52]	; (80fd0 <ctrl_sam3ucfg_cb+0x88>)
   80f9a:	4b0d      	ldr	r3, [pc, #52]	; (80fd0 <ctrl_sam3ucfg_cb+0x88>)
   80f9c:	681b      	ldr	r3, [r3, #0]
   80f9e:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80fa2:	f043 0305 	orr.w	r3, r3, #5
   80fa6:	6013      	str	r3, [r2, #0]
        while(1);
   80fa8:	e7fe      	b.n	80fa8 <ctrl_sam3ucfg_cb+0x60>
    }
}
   80faa:	bf00      	nop
   80fac:	bd80      	pop	{r7, pc}
   80fae:	bf00      	nop
   80fb0:	20000d58 	.word	0x20000d58
   80fb4:	00080c29 	.word	0x00080c29
   80fb8:	00080d31 	.word	0x00080d31
   80fbc:	00083add 	.word	0x00083add
   80fc0:	00083b5d 	.word	0x00083b5d
   80fc4:	400e0800 	.word	0x400e0800
   80fc8:	00084115 	.word	0x00084115
   80fcc:	00080d5d 	.word	0x00080d5d
   80fd0:	400e1200 	.word	0x400e1200

00080fd4 <ctrl_progfpga_bulk>:

void ctrl_progfpga_bulk(void){
   80fd4:	b580      	push	{r7, lr}
   80fd6:	af00      	add	r7, sp, #0

    switch(udd_g_ctrlreq.req.wValue){
   80fd8:	4b0b      	ldr	r3, [pc, #44]	; (81008 <ctrl_progfpga_bulk+0x34>)
   80fda:	885b      	ldrh	r3, [r3, #2]
   80fdc:	2ba1      	cmp	r3, #161	; 0xa1
   80fde:	d007      	beq.n	80ff0 <ctrl_progfpga_bulk+0x1c>
   80fe0:	2ba2      	cmp	r3, #162	; 0xa2
   80fe2:	d00b      	beq.n	80ffc <ctrl_progfpga_bulk+0x28>
   80fe4:	2ba0      	cmp	r3, #160	; 0xa0
   80fe6:	d000      	beq.n	80fea <ctrl_progfpga_bulk+0x16>
        /* Done */
        blockendpoint_usage = bep_emem;
        break;

    default:
        break;
   80fe8:	e00c      	b.n	81004 <ctrl_progfpga_bulk+0x30>
        fpga_program_setup1();
   80fea:	4b08      	ldr	r3, [pc, #32]	; (8100c <ctrl_progfpga_bulk+0x38>)
   80fec:	4798      	blx	r3
        break;
   80fee:	e009      	b.n	81004 <ctrl_progfpga_bulk+0x30>
        fpga_program_setup2();
   80ff0:	4b07      	ldr	r3, [pc, #28]	; (81010 <ctrl_progfpga_bulk+0x3c>)
   80ff2:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   80ff4:	4b07      	ldr	r3, [pc, #28]	; (81014 <ctrl_progfpga_bulk+0x40>)
   80ff6:	220a      	movs	r2, #10
   80ff8:	701a      	strb	r2, [r3, #0]
        break;
   80ffa:	e003      	b.n	81004 <ctrl_progfpga_bulk+0x30>
        blockendpoint_usage = bep_emem;
   80ffc:	4b05      	ldr	r3, [pc, #20]	; (81014 <ctrl_progfpga_bulk+0x40>)
   80ffe:	2200      	movs	r2, #0
   81000:	701a      	strb	r2, [r3, #0]
        break;
   81002:	bf00      	nop
    }
}
   81004:	bf00      	nop
   81006:	bd80      	pop	{r7, pc}
   81008:	20000d58 	.word	0x20000d58
   8100c:	000814cd 	.word	0x000814cd
   81010:	0008154d 	.word	0x0008154d
   81014:	20000c3c 	.word	0x20000c3c

00081018 <ctrl_change_pwr>:

void ctrl_change_pwr(void) {
   81018:	b480      	push	{r7}
   8101a:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.wValue) {
   8101c:	4b18      	ldr	r3, [pc, #96]	; (81080 <ctrl_change_pwr+0x68>)
   8101e:	885b      	ldrh	r3, [r3, #2]
   81020:	2b01      	cmp	r3, #1
   81022:	d010      	beq.n	81046 <ctrl_change_pwr+0x2e>
   81024:	2b02      	cmp	r3, #2
   81026:	d01a      	beq.n	8105e <ctrl_change_pwr+0x46>
   81028:	2b00      	cmp	r3, #0
   8102a:	d000      	beq.n	8102e <ctrl_change_pwr+0x16>
        PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
        PIOA->PIO_SODR = (1 << F_VBHOST); //enable sniff power
        USB_PWR_STATE = 2;
        break;
    }
}
   8102c:	e023      	b.n	81076 <ctrl_change_pwr+0x5e>
        PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   8102e:	4b15      	ldr	r3, [pc, #84]	; (81084 <ctrl_change_pwr+0x6c>)
   81030:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   81034:	635a      	str	r2, [r3, #52]	; 0x34
        PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   81036:	4b13      	ldr	r3, [pc, #76]	; (81084 <ctrl_change_pwr+0x6c>)
   81038:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8103c:	635a      	str	r2, [r3, #52]	; 0x34
        USB_PWR_STATE = 0;
   8103e:	4b12      	ldr	r3, [pc, #72]	; (81088 <ctrl_change_pwr+0x70>)
   81040:	2200      	movs	r2, #0
   81042:	701a      	strb	r2, [r3, #0]
        break;
   81044:	e017      	b.n	81076 <ctrl_change_pwr+0x5e>
        PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   81046:	4b0f      	ldr	r3, [pc, #60]	; (81084 <ctrl_change_pwr+0x6c>)
   81048:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8104c:	635a      	str	r2, [r3, #52]	; 0x34
        PIOA->PIO_SODR = (1 << F_VB5V); //enable host power
   8104e:	4b0d      	ldr	r3, [pc, #52]	; (81084 <ctrl_change_pwr+0x6c>)
   81050:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   81054:	631a      	str	r2, [r3, #48]	; 0x30
        USB_PWR_STATE = 1;
   81056:	4b0c      	ldr	r3, [pc, #48]	; (81088 <ctrl_change_pwr+0x70>)
   81058:	2201      	movs	r2, #1
   8105a:	701a      	strb	r2, [r3, #0]
        break;
   8105c:	e00b      	b.n	81076 <ctrl_change_pwr+0x5e>
        PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   8105e:	4b09      	ldr	r3, [pc, #36]	; (81084 <ctrl_change_pwr+0x6c>)
   81060:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   81064:	635a      	str	r2, [r3, #52]	; 0x34
        PIOA->PIO_SODR = (1 << F_VBHOST); //enable sniff power
   81066:	4b07      	ldr	r3, [pc, #28]	; (81084 <ctrl_change_pwr+0x6c>)
   81068:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8106c:	631a      	str	r2, [r3, #48]	; 0x30
        USB_PWR_STATE = 2;
   8106e:	4b06      	ldr	r3, [pc, #24]	; (81088 <ctrl_change_pwr+0x70>)
   81070:	2202      	movs	r2, #2
   81072:	701a      	strb	r2, [r3, #0]
        break;
   81074:	bf00      	nop
}
   81076:	bf00      	nop
   81078:	46bd      	mov	sp, r7
   8107a:	bc80      	pop	{r7}
   8107c:	4770      	bx	lr
   8107e:	bf00      	nop
   81080:	20000d58 	.word	0x20000d58
   81084:	400e0c00 	.word	0x400e0c00
   81088:	200007f8 	.word	0x200007f8

0008108c <main_setup_out_received>:

bool main_setup_out_received(void)
{
   8108c:	b580      	push	{r7, lr}
   8108e:	af00      	add	r7, sp, #0
    //Add buffer if used
    udd_g_ctrlreq.payload = ctrlbuffer;
   81090:	4b43      	ldr	r3, [pc, #268]	; (811a0 <main_setup_out_received+0x114>)
   81092:	4a44      	ldr	r2, [pc, #272]	; (811a4 <main_setup_out_received+0x118>)
   81094:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   81096:	4b42      	ldr	r3, [pc, #264]	; (811a0 <main_setup_out_received+0x114>)
   81098:	88db      	ldrh	r3, [r3, #6]
   8109a:	2b40      	cmp	r3, #64	; 0x40
   8109c:	bf28      	it	cs
   8109e:	2340      	movcs	r3, #64	; 0x40
   810a0:	b29a      	uxth	r2, r3
   810a2:	4b3f      	ldr	r3, [pc, #252]	; (811a0 <main_setup_out_received+0x114>)
   810a4:	819a      	strh	r2, [r3, #12]

    blockendpoint_usage = bep_emem;
   810a6:	4b40      	ldr	r3, [pc, #256]	; (811a8 <main_setup_out_received+0x11c>)
   810a8:	2200      	movs	r2, #0
   810aa:	701a      	strb	r2, [r3, #0]
    static uint8_t  respbuf[128];
    switch(udd_g_ctrlreq.req.bRequest){
   810ac:	4b3c      	ldr	r3, [pc, #240]	; (811a0 <main_setup_out_received+0x114>)
   810ae:	785b      	ldrb	r3, [r3, #1]
   810b0:	3b10      	subs	r3, #16
   810b2:	2b14      	cmp	r3, #20
   810b4:	d867      	bhi.n	81186 <main_setup_out_received+0xfa>
   810b6:	a201      	add	r2, pc, #4	; (adr r2, 810bc <main_setup_out_received+0x30>)
   810b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   810bc:	00081111 	.word	0x00081111
   810c0:	0008113d 	.word	0x0008113d
   810c4:	00081127 	.word	0x00081127
   810c8:	00081153 	.word	0x00081153
   810cc:	00081187 	.word	0x00081187
   810d0:	00081187 	.word	0x00081187
   810d4:	00081169 	.word	0x00081169
   810d8:	00081187 	.word	0x00081187
   810dc:	00081187 	.word	0x00081187
   810e0:	00081187 	.word	0x00081187
   810e4:	00081187 	.word	0x00081187
   810e8:	00081187 	.word	0x00081187
   810ec:	00081187 	.word	0x00081187
   810f0:	00081187 	.word	0x00081187
   810f4:	00081187 	.word	0x00081187
   810f8:	00081187 	.word	0x00081187
   810fc:	00081187 	.word	0x00081187
   81100:	00081187 	.word	0x00081187
   81104:	00081173 	.word	0x00081173
   81108:	00081187 	.word	0x00081187
   8110c:	0008117d 	.word	0x0008117d
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   81110:	2006      	movs	r0, #6
   81112:	4b26      	ldr	r3, [pc, #152]	; (811ac <main_setup_out_received+0x120>)
   81114:	4798      	blx	r3
   81116:	4603      	mov	r3, r0
   81118:	2b00      	cmp	r3, #0
   8111a:	d036      	beq.n	8118a <main_setup_out_received+0xfe>
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   8111c:	4b20      	ldr	r3, [pc, #128]	; (811a0 <main_setup_out_received+0x114>)
   8111e:	4a24      	ldr	r2, [pc, #144]	; (811b0 <main_setup_out_received+0x124>)
   81120:	611a      	str	r2, [r3, #16]
            return true;
   81122:	2301      	movs	r3, #1
   81124:	e039      	b.n	8119a <main_setup_out_received+0x10e>
        }
        break;
    case REQ_MEMREAD_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   81126:	2006      	movs	r0, #6
   81128:	4b20      	ldr	r3, [pc, #128]	; (811ac <main_setup_out_received+0x120>)
   8112a:	4798      	blx	r3
   8112c:	4603      	mov	r3, r0
   8112e:	2b00      	cmp	r3, #0
   81130:	d02d      	beq.n	8118e <main_setup_out_received+0x102>
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   81132:	4b1b      	ldr	r3, [pc, #108]	; (811a0 <main_setup_out_received+0x114>)
   81134:	4a1f      	ldr	r2, [pc, #124]	; (811b4 <main_setup_out_received+0x128>)
   81136:	611a      	str	r2, [r3, #16]
            return true;
   81138:	2301      	movs	r3, #1
   8113a:	e02e      	b.n	8119a <main_setup_out_received+0x10e>
        break;


        /* Memory Write */
    case REQ_MEMWRITE_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   8113c:	2006      	movs	r0, #6
   8113e:	4b1b      	ldr	r3, [pc, #108]	; (811ac <main_setup_out_received+0x120>)
   81140:	4798      	blx	r3
   81142:	4603      	mov	r3, r0
   81144:	2b00      	cmp	r3, #0
   81146:	d024      	beq.n	81192 <main_setup_out_received+0x106>
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   81148:	4b15      	ldr	r3, [pc, #84]	; (811a0 <main_setup_out_received+0x114>)
   8114a:	4a1b      	ldr	r2, [pc, #108]	; (811b8 <main_setup_out_received+0x12c>)
   8114c:	611a      	str	r2, [r3, #16]
            return true;
   8114e:	2301      	movs	r3, #1
   81150:	e023      	b.n	8119a <main_setup_out_received+0x10e>
        }
        break;


    case REQ_MEMWRITE_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   81152:	2006      	movs	r0, #6
   81154:	4b15      	ldr	r3, [pc, #84]	; (811ac <main_setup_out_received+0x120>)
   81156:	4798      	blx	r3
   81158:	4603      	mov	r3, r0
   8115a:	2b00      	cmp	r3, #0
   8115c:	d01b      	beq.n	81196 <main_setup_out_received+0x10a>
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   8115e:	4b10      	ldr	r3, [pc, #64]	; (811a0 <main_setup_out_received+0x114>)
   81160:	4a16      	ldr	r2, [pc, #88]	; (811bc <main_setup_out_received+0x130>)
   81162:	611a      	str	r2, [r3, #16]
            return true;
   81164:	2301      	movs	r3, #1
   81166:	e018      	b.n	8119a <main_setup_out_received+0x10e>
        }
        break;

    case REQ_FPGA_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   81168:	4b0d      	ldr	r3, [pc, #52]	; (811a0 <main_setup_out_received+0x114>)
   8116a:	4a15      	ldr	r2, [pc, #84]	; (811c0 <main_setup_out_received+0x134>)
   8116c:	611a      	str	r2, [r3, #16]
        return true;
   8116e:	2301      	movs	r3, #1
   81170:	e013      	b.n	8119a <main_setup_out_received+0x10e>

    case REQ_SAM3U_CFG:
        udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
   81172:	4b0b      	ldr	r3, [pc, #44]	; (811a0 <main_setup_out_received+0x114>)
   81174:	4a13      	ldr	r2, [pc, #76]	; (811c4 <main_setup_out_received+0x138>)
   81176:	611a      	str	r2, [r3, #16]
        return true;
   81178:	2301      	movs	r3, #1
   8117a:	e00e      	b.n	8119a <main_setup_out_received+0x10e>

    case REQ_CHANGE_PWR:
        //TODO
        udd_g_ctrlreq.callback = ctrl_change_pwr;
   8117c:	4b08      	ldr	r3, [pc, #32]	; (811a0 <main_setup_out_received+0x114>)
   8117e:	4a12      	ldr	r2, [pc, #72]	; (811c8 <main_setup_out_received+0x13c>)
   81180:	611a      	str	r2, [r3, #16]
        return true;
   81182:	2301      	movs	r3, #1
   81184:	e009      	b.n	8119a <main_setup_out_received+0x10e>
    default:
        return false;
   81186:	2300      	movs	r3, #0
   81188:	e007      	b.n	8119a <main_setup_out_received+0x10e>
        break;
   8118a:	bf00      	nop
   8118c:	e004      	b.n	81198 <main_setup_out_received+0x10c>
        break;
   8118e:	bf00      	nop
   81190:	e002      	b.n	81198 <main_setup_out_received+0x10c>
        break;
   81192:	bf00      	nop
   81194:	e000      	b.n	81198 <main_setup_out_received+0x10c>
        break;
   81196:	bf00      	nop
    }

    return false;
   81198:	2300      	movs	r3, #0
}
   8119a:	4618      	mov	r0, r3
   8119c:	bd80      	pop	{r7, pc}
   8119e:	bf00      	nop
   811a0:	20000d58 	.word	0x20000d58
   811a4:	20000bfc 	.word	0x20000bfc
   811a8:	20000c3c 	.word	0x20000c3c
   811ac:	00081385 	.word	0x00081385
   811b0:	00080de5 	.word	0x00080de5
   811b4:	00080e3d 	.word	0x00080e3d
   811b8:	00080f0d 	.word	0x00080f0d
   811bc:	00080e95 	.word	0x00080e95
   811c0:	00080fd5 	.word	0x00080fd5
   811c4:	00080f49 	.word	0x00080f49
   811c8:	00081019 	.word	0x00081019

000811cc <main_setup_in_received>:
  && (udd_g_ctrlreq.req.bRequest == 0)
  && (0 != udd_g_ctrlreq.req.wLength)
*/

bool main_setup_in_received(void)
{
   811cc:	b580      	push	{r7, lr}
   811ce:	af00      	add	r7, sp, #0
    */

    static uint8_t  respbuf[64];
    unsigned int cnt;

    switch(udd_g_ctrlreq.req.bRequest){
   811d0:	4b27      	ldr	r3, [pc, #156]	; (81270 <main_setup_in_received+0xa4>)
   811d2:	785b      	ldrb	r3, [r3, #1]
   811d4:	2b15      	cmp	r3, #21
   811d6:	d02a      	beq.n	8122e <main_setup_in_received+0x62>
   811d8:	2b17      	cmp	r3, #23
   811da:	d017      	beq.n	8120c <main_setup_in_received+0x40>
   811dc:	2b12      	cmp	r3, #18
   811de:	d143      	bne.n	81268 <main_setup_in_received+0x9c>
    case REQ_MEMREAD_CTRL:
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   811e0:	4b24      	ldr	r3, [pc, #144]	; (81274 <main_setup_in_received+0xa8>)
   811e2:	681b      	ldr	r3, [r3, #0]
   811e4:	4a22      	ldr	r2, [pc, #136]	; (81270 <main_setup_in_received+0xa4>)
   811e6:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   811e8:	4b23      	ldr	r3, [pc, #140]	; (81278 <main_setup_in_received+0xac>)
   811ea:	681b      	ldr	r3, [r3, #0]
   811ec:	b29a      	uxth	r2, r3
   811ee:	4b20      	ldr	r3, [pc, #128]	; (81270 <main_setup_in_received+0xa4>)
   811f0:	819a      	strh	r2, [r3, #12]
        ctrlmemread_size = 0;
   811f2:	4b21      	ldr	r3, [pc, #132]	; (81278 <main_setup_in_received+0xac>)
   811f4:	2200      	movs	r2, #0
   811f6:	601a      	str	r2, [r3, #0]

        if (FPGA_lockstatus() == fpga_ctrlmem){
   811f8:	4b20      	ldr	r3, [pc, #128]	; (8127c <main_setup_in_received+0xb0>)
   811fa:	4798      	blx	r3
   811fc:	4603      	mov	r3, r0
   811fe:	2b05      	cmp	r3, #5
   81200:	d102      	bne.n	81208 <main_setup_in_received+0x3c>
            FPGA_setlock(fpga_unlocked);
   81202:	2000      	movs	r0, #0
   81204:	4b1e      	ldr	r3, [pc, #120]	; (81280 <main_setup_in_received+0xb4>)
   81206:	4798      	blx	r3
        }

        return true;
   81208:	2301      	movs	r3, #1
   8120a:	e02e      	b.n	8126a <main_setup_in_received+0x9e>
        break;

    case REQ_FW_VERSION:
        respbuf[0] = FW_VER_MAJOR;
   8120c:	4b1d      	ldr	r3, [pc, #116]	; (81284 <main_setup_in_received+0xb8>)
   8120e:	2200      	movs	r2, #0
   81210:	701a      	strb	r2, [r3, #0]
        respbuf[1] = FW_VER_MINOR;
   81212:	4b1c      	ldr	r3, [pc, #112]	; (81284 <main_setup_in_received+0xb8>)
   81214:	220a      	movs	r2, #10
   81216:	705a      	strb	r2, [r3, #1]
        respbuf[2] = FW_VER_DEBUG;
   81218:	4b1a      	ldr	r3, [pc, #104]	; (81284 <main_setup_in_received+0xb8>)
   8121a:	2200      	movs	r2, #0
   8121c:	709a      	strb	r2, [r3, #2]
        udd_g_ctrlreq.payload = respbuf;
   8121e:	4b14      	ldr	r3, [pc, #80]	; (81270 <main_setup_in_received+0xa4>)
   81220:	4a18      	ldr	r2, [pc, #96]	; (81284 <main_setup_in_received+0xb8>)
   81222:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 3;
   81224:	4b12      	ldr	r3, [pc, #72]	; (81270 <main_setup_in_received+0xa4>)
   81226:	2203      	movs	r2, #3
   81228:	819a      	strh	r2, [r3, #12]
        return true;
   8122a:	2301      	movs	r3, #1
   8122c:	e01d      	b.n	8126a <main_setup_in_received+0x9e>
        break;

    case REQ_FPGA_STATUS:
        respbuf[0] = FPGA_ISDONE();
   8122e:	2013      	movs	r0, #19
   81230:	4b15      	ldr	r3, [pc, #84]	; (81288 <main_setup_in_received+0xbc>)
   81232:	4798      	blx	r3
   81234:	4603      	mov	r3, r0
   81236:	2b00      	cmp	r3, #0
   81238:	bf14      	ite	ne
   8123a:	2301      	movne	r3, #1
   8123c:	2300      	moveq	r3, #0
   8123e:	b2db      	uxtb	r3, r3
   81240:	461a      	mov	r2, r3
   81242:	4b10      	ldr	r3, [pc, #64]	; (81284 <main_setup_in_received+0xb8>)
   81244:	701a      	strb	r2, [r3, #0]
        respbuf[1] = 0;
   81246:	4b0f      	ldr	r3, [pc, #60]	; (81284 <main_setup_in_received+0xb8>)
   81248:	2200      	movs	r2, #0
   8124a:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   8124c:	4b0d      	ldr	r3, [pc, #52]	; (81284 <main_setup_in_received+0xb8>)
   8124e:	2200      	movs	r2, #0
   81250:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   81252:	4b0c      	ldr	r3, [pc, #48]	; (81284 <main_setup_in_received+0xb8>)
   81254:	2200      	movs	r2, #0
   81256:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   81258:	4b05      	ldr	r3, [pc, #20]	; (81270 <main_setup_in_received+0xa4>)
   8125a:	4a0a      	ldr	r2, [pc, #40]	; (81284 <main_setup_in_received+0xb8>)
   8125c:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 4;
   8125e:	4b04      	ldr	r3, [pc, #16]	; (81270 <main_setup_in_received+0xa4>)
   81260:	2204      	movs	r2, #4
   81262:	819a      	strh	r2, [r3, #12]
        return true;
   81264:	2301      	movs	r3, #1
   81266:	e000      	b.n	8126a <main_setup_in_received+0x9e>
        break;
    default:
        return false;
   81268:	2300      	movs	r3, #0
    }
    return false;
}
   8126a:	4618      	mov	r0, r3
   8126c:	bd80      	pop	{r7, pc}
   8126e:	bf00      	nop
   81270:	20000d58 	.word	0x20000d58
   81274:	20000c40 	.word	0x20000c40
   81278:	20000c44 	.word	0x20000c44
   8127c:	000813dd 	.word	0x000813dd
   81280:	00081385 	.word	0x00081385
   81284:	20000c48 	.word	0x20000c48
   81288:	00084361 	.word	0x00084361

0008128c <main_vendor_bulk_in_received>:

void main_vendor_bulk_in_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
   8128c:	b580      	push	{r7, lr}
   8128e:	b082      	sub	sp, #8
   81290:	af00      	add	r7, sp, #0
   81292:	4603      	mov	r3, r0
   81294:	6039      	str	r1, [r7, #0]
   81296:	71fb      	strb	r3, [r7, #7]
   81298:	4613      	mov	r3, r2
   8129a:	71bb      	strb	r3, [r7, #6]
    UNUSED(nb_transfered);
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   8129c:	79fb      	ldrb	r3, [r7, #7]
   8129e:	2b00      	cmp	r3, #0
   812a0:	d108      	bne.n	812b4 <main_vendor_bulk_in_received+0x28>
        return; // Transfer aborted/error
    }

    if (FPGA_lockstatus() == fpga_blockin){
   812a2:	4b06      	ldr	r3, [pc, #24]	; (812bc <main_vendor_bulk_in_received+0x30>)
   812a4:	4798      	blx	r3
   812a6:	4603      	mov	r3, r0
   812a8:	2b02      	cmp	r3, #2
   812aa:	d104      	bne.n	812b6 <main_vendor_bulk_in_received+0x2a>
        FPGA_setlock(fpga_unlocked);
   812ac:	2000      	movs	r0, #0
   812ae:	4b04      	ldr	r3, [pc, #16]	; (812c0 <main_vendor_bulk_in_received+0x34>)
   812b0:	4798      	blx	r3
   812b2:	e000      	b.n	812b6 <main_vendor_bulk_in_received+0x2a>
        return; // Transfer aborted/error
   812b4:	bf00      	nop
    }
}
   812b6:	3708      	adds	r7, #8
   812b8:	46bd      	mov	sp, r7
   812ba:	bd80      	pop	{r7, pc}
   812bc:	000813dd 	.word	0x000813dd
   812c0:	00081385 	.word	0x00081385

000812c4 <main_vendor_bulk_out_received>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep)
{
   812c4:	b580      	push	{r7, lr}
   812c6:	b084      	sub	sp, #16
   812c8:	af00      	add	r7, sp, #0
   812ca:	4603      	mov	r3, r0
   812cc:	6039      	str	r1, [r7, #0]
   812ce:	71fb      	strb	r3, [r7, #7]
   812d0:	4613      	mov	r3, r2
   812d2:	71bb      	strb	r3, [r7, #6]
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   812d4:	79fb      	ldrb	r3, [r7, #7]
   812d6:	2b00      	cmp	r3, #0
   812d8:	d006      	beq.n	812e8 <main_vendor_bulk_out_received+0x24>
        // Transfer aborted

        //restart
        udi_vendor_bulk_out_run(
   812da:	4a22      	ldr	r2, [pc, #136]	; (81364 <main_vendor_bulk_out_received+0xa0>)
   812dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
   812e0:	4821      	ldr	r0, [pc, #132]	; (81368 <main_vendor_bulk_out_received+0xa4>)
   812e2:	4b22      	ldr	r3, [pc, #136]	; (8136c <main_vendor_bulk_out_received+0xa8>)
   812e4:	4798      	blx	r3
            main_buf_loopback,
            sizeof(main_buf_loopback),
            main_vendor_bulk_out_received);

        return;
   812e6:	e039      	b.n	8135c <main_vendor_bulk_out_received+0x98>
    }

    if (blockendpoint_usage == bep_emem){
   812e8:	4b21      	ldr	r3, [pc, #132]	; (81370 <main_vendor_bulk_out_received+0xac>)
   812ea:	781b      	ldrb	r3, [r3, #0]
   812ec:	2b00      	cmp	r3, #0
   812ee:	d11a      	bne.n	81326 <main_vendor_bulk_out_received+0x62>
        for(unsigned int i = 0; i < nb_transfered; i++){
   812f0:	2300      	movs	r3, #0
   812f2:	60fb      	str	r3, [r7, #12]
   812f4:	e00b      	b.n	8130e <main_vendor_bulk_out_received+0x4a>
            xram[i] = main_buf_loopback[i];
   812f6:	4b1f      	ldr	r3, [pc, #124]	; (81374 <main_vendor_bulk_out_received+0xb0>)
   812f8:	681a      	ldr	r2, [r3, #0]
   812fa:	68fb      	ldr	r3, [r7, #12]
   812fc:	4413      	add	r3, r2
   812fe:	491a      	ldr	r1, [pc, #104]	; (81368 <main_vendor_bulk_out_received+0xa4>)
   81300:	68fa      	ldr	r2, [r7, #12]
   81302:	440a      	add	r2, r1
   81304:	7812      	ldrb	r2, [r2, #0]
   81306:	701a      	strb	r2, [r3, #0]
        for(unsigned int i = 0; i < nb_transfered; i++){
   81308:	68fb      	ldr	r3, [r7, #12]
   8130a:	3301      	adds	r3, #1
   8130c:	60fb      	str	r3, [r7, #12]
   8130e:	68fa      	ldr	r2, [r7, #12]
   81310:	683b      	ldr	r3, [r7, #0]
   81312:	429a      	cmp	r2, r3
   81314:	d3ef      	bcc.n	812f6 <main_vendor_bulk_out_received+0x32>
        }

        if (FPGA_lockstatus() == fpga_blockout){
   81316:	4b18      	ldr	r3, [pc, #96]	; (81378 <main_vendor_bulk_out_received+0xb4>)
   81318:	4798      	blx	r3
   8131a:	4603      	mov	r3, r0
   8131c:	2b04      	cmp	r3, #4
   8131e:	d117      	bne.n	81350 <main_vendor_bulk_out_received+0x8c>
            FPGA_releaselock();
   81320:	4b16      	ldr	r3, [pc, #88]	; (8137c <main_vendor_bulk_out_received+0xb8>)
   81322:	4798      	blx	r3
   81324:	e014      	b.n	81350 <main_vendor_bulk_out_received+0x8c>
        }
    } else if (blockendpoint_usage == bep_fpgabitstream){
   81326:	4b12      	ldr	r3, [pc, #72]	; (81370 <main_vendor_bulk_out_received+0xac>)
   81328:	781b      	ldrb	r3, [r3, #0]
   8132a:	2b0a      	cmp	r3, #10
   8132c:	d110      	bne.n	81350 <main_vendor_bulk_out_received+0x8c>

        /* Send byte to FPGA - this could eventually be done via SPI */
        // TODO: is this dangerous?
        for(unsigned int i = 0; i < nb_transfered; i++){
   8132e:	2300      	movs	r3, #0
   81330:	60bb      	str	r3, [r7, #8]
   81332:	e009      	b.n	81348 <main_vendor_bulk_out_received+0x84>
            fpga_program_sendbyte(main_buf_loopback[i]);
   81334:	4a0c      	ldr	r2, [pc, #48]	; (81368 <main_vendor_bulk_out_received+0xa4>)
   81336:	68bb      	ldr	r3, [r7, #8]
   81338:	4413      	add	r3, r2
   8133a:	781b      	ldrb	r3, [r3, #0]
   8133c:	4618      	mov	r0, r3
   8133e:	4b10      	ldr	r3, [pc, #64]	; (81380 <main_vendor_bulk_out_received+0xbc>)
   81340:	4798      	blx	r3
        for(unsigned int i = 0; i < nb_transfered; i++){
   81342:	68bb      	ldr	r3, [r7, #8]
   81344:	3301      	adds	r3, #1
   81346:	60bb      	str	r3, [r7, #8]
   81348:	68ba      	ldr	r2, [r7, #8]
   8134a:	683b      	ldr	r3, [r7, #0]
   8134c:	429a      	cmp	r2, r3
   8134e:	d3f1      	bcc.n	81334 <main_vendor_bulk_out_received+0x70>
#endif
    }

    //printf("BULKOUT: %d bytes\n", (int)nb_transfered);

    udi_vendor_bulk_out_run(
   81350:	4a04      	ldr	r2, [pc, #16]	; (81364 <main_vendor_bulk_out_received+0xa0>)
   81352:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81356:	4804      	ldr	r0, [pc, #16]	; (81368 <main_vendor_bulk_out_received+0xa4>)
   81358:	4b04      	ldr	r3, [pc, #16]	; (8136c <main_vendor_bulk_out_received+0xa8>)
   8135a:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
}
   8135c:	3710      	adds	r7, #16
   8135e:	46bd      	mov	sp, r7
   81360:	bd80      	pop	{r7, pc}
   81362:	bf00      	nop
   81364:	000812c5 	.word	0x000812c5
   81368:	200007fc 	.word	0x200007fc
   8136c:	00084061 	.word	0x00084061
   81370:	20000c3c 	.word	0x20000c3c
   81374:	20000290 	.word	0x20000290
   81378:	000813dd 	.word	0x000813dd
   8137c:	000813c5 	.word	0x000813c5
   81380:	00081561 	.word	0x00081561

00081384 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   81384:	b580      	push	{r7, lr}
   81386:	b084      	sub	sp, #16
   81388:	af00      	add	r7, sp, #0
   8138a:	4603      	mov	r3, r0
   8138c:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
   8138e:	2300      	movs	r3, #0
   81390:	60fb      	str	r3, [r7, #12]
  cpu_irq_enter_critical();
   81392:	4b09      	ldr	r3, [pc, #36]	; (813b8 <FPGA_setlock+0x34>)
   81394:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   81396:	4b09      	ldr	r3, [pc, #36]	; (813bc <FPGA_setlock+0x38>)
   81398:	781b      	ldrb	r3, [r3, #0]
   8139a:	b2db      	uxtb	r3, r3
   8139c:	2b00      	cmp	r3, #0
   8139e:	d104      	bne.n	813aa <FPGA_setlock+0x26>
  {
    ret = 1;
   813a0:	2301      	movs	r3, #1
   813a2:	60fb      	str	r3, [r7, #12]
    _fpga_locked = lockstatus;
   813a4:	4a05      	ldr	r2, [pc, #20]	; (813bc <FPGA_setlock+0x38>)
   813a6:	79fb      	ldrb	r3, [r7, #7]
   813a8:	7013      	strb	r3, [r2, #0]
  }
  cpu_irq_leave_critical();
   813aa:	4b05      	ldr	r3, [pc, #20]	; (813c0 <FPGA_setlock+0x3c>)
   813ac:	4798      	blx	r3
  return ret;
   813ae:	68fb      	ldr	r3, [r7, #12]
}
   813b0:	4618      	mov	r0, r3
   813b2:	3710      	adds	r7, #16
   813b4:	46bd      	mov	sp, r7
   813b6:	bd80      	pop	{r7, pc}
   813b8:	0008589d 	.word	0x0008589d
   813bc:	20000c88 	.word	0x20000c88
   813c0:	000858f1 	.word	0x000858f1

000813c4 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
   813c4:	b480      	push	{r7}
   813c6:	af00      	add	r7, sp, #0
  _fpga_locked = fpga_unlocked;
   813c8:	4b03      	ldr	r3, [pc, #12]	; (813d8 <FPGA_releaselock+0x14>)
   813ca:	2200      	movs	r2, #0
   813cc:	701a      	strb	r2, [r3, #0]
}
   813ce:	bf00      	nop
   813d0:	46bd      	mov	sp, r7
   813d2:	bc80      	pop	{r7}
   813d4:	4770      	bx	lr
   813d6:	bf00      	nop
   813d8:	20000c88 	.word	0x20000c88

000813dc <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
   813dc:	b480      	push	{r7}
   813de:	af00      	add	r7, sp, #0
  return _fpga_locked;
   813e0:	4b03      	ldr	r3, [pc, #12]	; (813f0 <FPGA_lockstatus+0x14>)
   813e2:	781b      	ldrb	r3, [r3, #0]
   813e4:	b2db      	uxtb	r3, r3
}
   813e6:	4618      	mov	r0, r3
   813e8:	46bd      	mov	sp, r7
   813ea:	bc80      	pop	{r7}
   813ec:	4770      	bx	lr
   813ee:	bf00      	nop
   813f0:	20000c88 	.word	0x20000c88

000813f4 <FPGA_setaddr>:
  FPGA_releaselock();
  cpu_irq_leave_critical();
}

void FPGA_setaddr(uint32_t addr)
{
   813f4:	b580      	push	{r7, lr}
   813f6:	b082      	sub	sp, #8
   813f8:	af00      	add	r7, sp, #0
   813fa:	6078      	str	r0, [r7, #4]
  pio_sync_output_write(FPGA_ADDR_PORT, addr);
   813fc:	6879      	ldr	r1, [r7, #4]
   813fe:	4803      	ldr	r0, [pc, #12]	; (8140c <FPGA_setaddr+0x18>)
   81400:	4b03      	ldr	r3, [pc, #12]	; (81410 <FPGA_setaddr+0x1c>)
   81402:	4798      	blx	r3
  //maybe needed?
  /* gpio_set_pin_low(FPGA_ALE_GPIO); */
  /* gpio_set_pin_high(FPGA_ALE_GPIO); */
}
   81404:	bf00      	nop
   81406:	3708      	adds	r7, #8
   81408:	46bd      	mov	sp, r7
   8140a:	bd80      	pop	{r7, pc}
   8140c:	400e0e00 	.word	0x400e0e00
   81410:	00084301 	.word	0x00084301

00081414 <osc_get_rate>:
{
   81414:	b480      	push	{r7}
   81416:	b083      	sub	sp, #12
   81418:	af00      	add	r7, sp, #0
   8141a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8141c:	687b      	ldr	r3, [r7, #4]
   8141e:	2b07      	cmp	r3, #7
   81420:	d823      	bhi.n	8146a <osc_get_rate+0x56>
   81422:	a201      	add	r2, pc, #4	; (adr r2, 81428 <osc_get_rate+0x14>)
   81424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81428:	00081449 	.word	0x00081449
   8142c:	0008144f 	.word	0x0008144f
   81430:	00081453 	.word	0x00081453
   81434:	00081457 	.word	0x00081457
   81438:	0008145b 	.word	0x0008145b
   8143c:	0008145f 	.word	0x0008145f
   81440:	00081463 	.word	0x00081463
   81444:	00081467 	.word	0x00081467
		return OSC_SLCK_32K_RC_HZ;
   81448:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8144c:	e00e      	b.n	8146c <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   8144e:	2300      	movs	r3, #0
   81450:	e00c      	b.n	8146c <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   81452:	2300      	movs	r3, #0
   81454:	e00a      	b.n	8146c <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   81456:	4b08      	ldr	r3, [pc, #32]	; (81478 <osc_get_rate+0x64>)
   81458:	e008      	b.n	8146c <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   8145a:	4b08      	ldr	r3, [pc, #32]	; (8147c <osc_get_rate+0x68>)
   8145c:	e006      	b.n	8146c <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   8145e:	4b08      	ldr	r3, [pc, #32]	; (81480 <osc_get_rate+0x6c>)
   81460:	e004      	b.n	8146c <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   81462:	4b07      	ldr	r3, [pc, #28]	; (81480 <osc_get_rate+0x6c>)
   81464:	e002      	b.n	8146c <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   81466:	4b06      	ldr	r3, [pc, #24]	; (81480 <osc_get_rate+0x6c>)
   81468:	e000      	b.n	8146c <osc_get_rate+0x58>
	return 0;
   8146a:	2300      	movs	r3, #0
}
   8146c:	4618      	mov	r0, r3
   8146e:	370c      	adds	r7, #12
   81470:	46bd      	mov	sp, r7
   81472:	bc80      	pop	{r7}
   81474:	4770      	bx	lr
   81476:	bf00      	nop
   81478:	003d0900 	.word	0x003d0900
   8147c:	007a1200 	.word	0x007a1200
   81480:	00b71b00 	.word	0x00b71b00

00081484 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   81484:	b580      	push	{r7, lr}
   81486:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   81488:	2006      	movs	r0, #6
   8148a:	4b03      	ldr	r3, [pc, #12]	; (81498 <sysclk_get_main_hz+0x14>)
   8148c:	4798      	blx	r3
   8148e:	4603      	mov	r3, r0
   81490:	011b      	lsls	r3, r3, #4
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   81492:	4618      	mov	r0, r3
   81494:	bd80      	pop	{r7, pc}
   81496:	bf00      	nop
   81498:	00081415 	.word	0x00081415

0008149c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   8149c:	b580      	push	{r7, lr}
   8149e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   814a0:	4b02      	ldr	r3, [pc, #8]	; (814ac <sysclk_get_cpu_hz+0x10>)
   814a2:	4798      	blx	r3
   814a4:	4603      	mov	r3, r0
   814a6:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   814a8:	4618      	mov	r0, r3
   814aa:	bd80      	pop	{r7, pc}
   814ac:	00081485 	.word	0x00081485

000814b0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   814b0:	b580      	push	{r7, lr}
   814b2:	b082      	sub	sp, #8
   814b4:	af00      	add	r7, sp, #0
   814b6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   814b8:	6878      	ldr	r0, [r7, #4]
   814ba:	4b03      	ldr	r3, [pc, #12]	; (814c8 <sysclk_enable_peripheral_clock+0x18>)
   814bc:	4798      	blx	r3
}
   814be:	bf00      	nop
   814c0:	3708      	adds	r7, #8
   814c2:	46bd      	mov	sp, r7
   814c4:	bd80      	pop	{r7, pc}
   814c6:	bf00      	nop
   814c8:	00083e29 	.word	0x00083e29

000814cc <fpga_program_setup1>:
    FPGA_NPROG_HIGH();
}

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   814cc:	b580      	push	{r7, lr}
   814ce:	b084      	sub	sp, #16
   814d0:	af00      	add	r7, sp, #0
    /* Init - set program low to erase FPGA */
    FPGA_NPROG_LOW();
   814d2:	2014      	movs	r0, #20
   814d4:	4b14      	ldr	r3, [pc, #80]	; (81528 <fpga_program_setup1+0x5c>)
   814d6:	4798      	blx	r3

    usart_spi_opt_t spiopts;
    spiopts.baudrate = 10000000UL;
   814d8:	4b14      	ldr	r3, [pc, #80]	; (8152c <fpga_program_setup1+0x60>)
   814da:	603b      	str	r3, [r7, #0]
    spiopts.char_length = US_MR_CHRL_8_BIT;
   814dc:	23c0      	movs	r3, #192	; 0xc0
   814de:	607b      	str	r3, [r7, #4]
    spiopts.channel_mode = US_MR_CHMODE_NORMAL;
   814e0:	2300      	movs	r3, #0
   814e2:	60fb      	str	r3, [r7, #12]
    spiopts.spi_mode = SPI_MODE_0;
   814e4:	2300      	movs	r3, #0
   814e6:	60bb      	str	r3, [r7, #8]

    sysclk_enable_peripheral_clock(FPGA_PROG_USART_ID);
   814e8:	200d      	movs	r0, #13
   814ea:	4b11      	ldr	r3, [pc, #68]	; (81530 <fpga_program_setup1+0x64>)
   814ec:	4798      	blx	r3
    usart_init_spi_master(FPGA_PROG_USART, &spiopts, sysclk_get_cpu_hz());
   814ee:	4b11      	ldr	r3, [pc, #68]	; (81534 <fpga_program_setup1+0x68>)
   814f0:	4798      	blx	r3
   814f2:	4602      	mov	r2, r0
   814f4:	463b      	mov	r3, r7
   814f6:	4619      	mov	r1, r3
   814f8:	480f      	ldr	r0, [pc, #60]	; (81538 <fpga_program_setup1+0x6c>)
   814fa:	4b10      	ldr	r3, [pc, #64]	; (8153c <fpga_program_setup1+0x70>)
   814fc:	4798      	blx	r3
    FPGA_DO_SETUP();
   814fe:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81502:	2012      	movs	r0, #18
   81504:	4b0e      	ldr	r3, [pc, #56]	; (81540 <fpga_program_setup1+0x74>)
   81506:	4798      	blx	r3
    FPGA_CCLK_SETUP();
   81508:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8150c:	2011      	movs	r0, #17
   8150e:	4b0c      	ldr	r3, [pc, #48]	; (81540 <fpga_program_setup1+0x74>)
   81510:	4798      	blx	r3

    //pin setup doesn't transfer control over to USART, so have to do it manually
    PIOA->PIO_PDR = (1 << PIN_FPGA_DO_GPIO) | (1 << PIN_FPGA_CCLK_GPIO);
   81512:	4b0c      	ldr	r3, [pc, #48]	; (81544 <fpga_program_setup1+0x78>)
   81514:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   81518:	605a      	str	r2, [r3, #4]
    usart_enable_tx(FPGA_PROG_USART);
   8151a:	4807      	ldr	r0, [pc, #28]	; (81538 <fpga_program_setup1+0x6c>)
   8151c:	4b0a      	ldr	r3, [pc, #40]	; (81548 <fpga_program_setup1+0x7c>)
   8151e:	4798      	blx	r3
}
   81520:	bf00      	nop
   81522:	3710      	adds	r7, #16
   81524:	46bd      	mov	sp, r7
   81526:	bd80      	pop	{r7, pc}
   81528:	000843c1 	.word	0x000843c1
   8152c:	00989680 	.word	0x00989680
   81530:	000814b1 	.word	0x000814b1
   81534:	0008149d 	.word	0x0008149d
   81538:	40090000 	.word	0x40090000
   8153c:	00081695 	.word	0x00081695
   81540:	000843f1 	.word	0x000843f1
   81544:	400e0c00 	.word	0x400e0c00
   81548:	000817a5 	.word	0x000817a5

0008154c <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   8154c:	b580      	push	{r7, lr}
   8154e:	af00      	add	r7, sp, #0
    FPGA_NPROG_HIGH();
   81550:	2014      	movs	r0, #20
   81552:	4b02      	ldr	r3, [pc, #8]	; (8155c <fpga_program_setup2+0x10>)
   81554:	4798      	blx	r3
}
   81556:	bf00      	nop
   81558:	bd80      	pop	{r7, pc}
   8155a:	bf00      	nop
   8155c:	00084391 	.word	0x00084391

00081560 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   81560:	b580      	push	{r7, lr}
   81562:	b082      	sub	sp, #8
   81564:	af00      	add	r7, sp, #0
   81566:	4603      	mov	r3, r0
   81568:	71fb      	strb	r3, [r7, #7]
    //For debug only
    //fpga_total_bs_len++;
    usart_putchar(FPGA_PROG_USART, databyte);
   8156a:	79fb      	ldrb	r3, [r7, #7]
   8156c:	4619      	mov	r1, r3
   8156e:	4803      	ldr	r0, [pc, #12]	; (8157c <fpga_program_sendbyte+0x1c>)
   81570:	4b03      	ldr	r3, [pc, #12]	; (81580 <fpga_program_sendbyte+0x20>)
   81572:	4798      	blx	r3
}
   81574:	bf00      	nop
   81576:	3708      	adds	r7, #8
   81578:	46bd      	mov	sp, r7
   8157a:	bd80      	pop	{r7, pc}
   8157c:	40090000 	.word	0x40090000
   81580:	0008183b 	.word	0x0008183b

00081584 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   81584:	b590      	push	{r4, r7, lr}
   81586:	b08b      	sub	sp, #44	; 0x2c
   81588:	af02      	add	r7, sp, #8
   8158a:	6078      	str	r0, [r7, #4]
   8158c:	6039      	str	r1, [r7, #0]
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   8158e:	f107 020c 	add.w	r2, r7, #12
   81592:	2304      	movs	r3, #4
   81594:	9300      	str	r3, [sp, #0]
   81596:	4613      	mov	r3, r2
   81598:	220f      	movs	r2, #15
   8159a:	210e      	movs	r1, #14
   8159c:	4813      	ldr	r0, [pc, #76]	; (815ec <flash_read_unique_id+0x68>)
   8159e:	4c14      	ldr	r4, [pc, #80]	; (815f0 <flash_read_unique_id+0x6c>)
   815a0:	47a0      	blx	r4
   815a2:	4603      	mov	r3, r0
   815a4:	2b00      	cmp	r3, #0
   815a6:	d001      	beq.n	815ac <flash_read_unique_id+0x28>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   815a8:	2310      	movs	r3, #16
   815aa:	e01b      	b.n	815e4 <flash_read_unique_id+0x60>
	}

	if (ul_size > 4) {
   815ac:	683b      	ldr	r3, [r7, #0]
   815ae:	2b04      	cmp	r3, #4
   815b0:	d901      	bls.n	815b6 <flash_read_unique_id+0x32>
		/* Only 4 dword to store unique ID */
		ul_size = 4;
   815b2:	2304      	movs	r3, #4
   815b4:	603b      	str	r3, [r7, #0]
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   815b6:	2300      	movs	r3, #0
   815b8:	61fb      	str	r3, [r7, #28]
   815ba:	e00e      	b.n	815da <flash_read_unique_id+0x56>
		pul_data[ul_idx] = uid_buf[ul_idx];
   815bc:	69fb      	ldr	r3, [r7, #28]
   815be:	009b      	lsls	r3, r3, #2
   815c0:	687a      	ldr	r2, [r7, #4]
   815c2:	441a      	add	r2, r3
   815c4:	69fb      	ldr	r3, [r7, #28]
   815c6:	009b      	lsls	r3, r3, #2
   815c8:	f107 0120 	add.w	r1, r7, #32
   815cc:	440b      	add	r3, r1
   815ce:	f853 3c14 	ldr.w	r3, [r3, #-20]
   815d2:	6013      	str	r3, [r2, #0]
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   815d4:	69fb      	ldr	r3, [r7, #28]
   815d6:	3301      	adds	r3, #1
   815d8:	61fb      	str	r3, [r7, #28]
   815da:	69fa      	ldr	r2, [r7, #28]
   815dc:	683b      	ldr	r3, [r7, #0]
   815de:	429a      	cmp	r2, r3
   815e0:	d3ec      	bcc.n	815bc <flash_read_unique_id+0x38>
	}

	return FLASH_RC_OK;
   815e2:	2300      	movs	r3, #0
}
   815e4:	4618      	mov	r0, r3
   815e6:	3724      	adds	r7, #36	; 0x24
   815e8:	46bd      	mov	sp, r7
   815ea:	bd90      	pop	{r4, r7, pc}
   815ec:	400e0800 	.word	0x400e0800
   815f0:	20000001 	.word	0x20000001

000815f4 <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   815f4:	b480      	push	{r7}
   815f6:	b087      	sub	sp, #28
   815f8:	af00      	add	r7, sp, #0
   815fa:	60f8      	str	r0, [r7, #12]
   815fc:	60b9      	str	r1, [r7, #8]
   815fe:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   81600:	68bb      	ldr	r3, [r7, #8]
   81602:	085a      	lsrs	r2, r3, #1
   81604:	687b      	ldr	r3, [r7, #4]
   81606:	441a      	add	r2, r3
   81608:	68bb      	ldr	r3, [r7, #8]
   8160a:	fbb2 f3f3 	udiv	r3, r2, r3
   8160e:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   81610:	697b      	ldr	r3, [r7, #20]
   81612:	2b03      	cmp	r3, #3
   81614:	d903      	bls.n	8161e <usart_set_spi_master_baudrate+0x2a>
   81616:	697b      	ldr	r3, [r7, #20]
   81618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   8161c:	d301      	bcc.n	81622 <usart_set_spi_master_baudrate+0x2e>
		return 1;
   8161e:	2301      	movs	r3, #1
   81620:	e003      	b.n	8162a <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   81622:	68fb      	ldr	r3, [r7, #12]
   81624:	697a      	ldr	r2, [r7, #20]
   81626:	621a      	str	r2, [r3, #32]

	return 0;
   81628:	2300      	movs	r3, #0
}
   8162a:	4618      	mov	r0, r3
   8162c:	371c      	adds	r7, #28
   8162e:	46bd      	mov	sp, r7
   81630:	bc80      	pop	{r7}
   81632:	4770      	bx	lr

00081634 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   81634:	b580      	push	{r7, lr}
   81636:	b082      	sub	sp, #8
   81638:	af00      	add	r7, sp, #0
   8163a:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   8163c:	6878      	ldr	r0, [r7, #4]
   8163e:	4b0f      	ldr	r3, [pc, #60]	; (8167c <usart_reset+0x48>)
   81640:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   81642:	687b      	ldr	r3, [r7, #4]
   81644:	2200      	movs	r2, #0
   81646:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   81648:	687b      	ldr	r3, [r7, #4]
   8164a:	2200      	movs	r2, #0
   8164c:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   8164e:	687b      	ldr	r3, [r7, #4]
   81650:	2200      	movs	r2, #0
   81652:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   81654:	6878      	ldr	r0, [r7, #4]
   81656:	4b0a      	ldr	r3, [pc, #40]	; (81680 <usart_reset+0x4c>)
   81658:	4798      	blx	r3
	usart_reset_rx(p_usart);
   8165a:	6878      	ldr	r0, [r7, #4]
   8165c:	4b09      	ldr	r3, [pc, #36]	; (81684 <usart_reset+0x50>)
   8165e:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   81660:	6878      	ldr	r0, [r7, #4]
   81662:	4b09      	ldr	r3, [pc, #36]	; (81688 <usart_reset+0x54>)
   81664:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   81666:	6878      	ldr	r0, [r7, #4]
   81668:	4b08      	ldr	r3, [pc, #32]	; (8168c <usart_reset+0x58>)
   8166a:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
   8166c:	6878      	ldr	r0, [r7, #4]
   8166e:	4b08      	ldr	r3, [pc, #32]	; (81690 <usart_reset+0x5c>)
   81670:	4798      	blx	r3
#endif
}
   81672:	bf00      	nop
   81674:	3708      	adds	r7, #8
   81676:	46bd      	mov	sp, r7
   81678:	bd80      	pop	{r7, pc}
   8167a:	bf00      	nop
   8167c:	00081869 	.word	0x00081869
   81680:	000817bd 	.word	0x000817bd
   81684:	000817d5 	.word	0x000817d5
   81688:	000817ed 	.word	0x000817ed
   8168c:	00081821 	.word	0x00081821
   81690:	00081807 	.word	0x00081807

00081694 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   81694:	b580      	push	{r7, lr}
   81696:	b084      	sub	sp, #16
   81698:	af00      	add	r7, sp, #0
   8169a:	60f8      	str	r0, [r7, #12]
   8169c:	60b9      	str	r1, [r7, #8]
   8169e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   816a0:	68f8      	ldr	r0, [r7, #12]
   816a2:	4b3d      	ldr	r3, [pc, #244]	; (81798 <usart_init_spi_master+0x104>)
   816a4:	4798      	blx	r3

	ul_reg_val = 0;
   816a6:	4b3d      	ldr	r3, [pc, #244]	; (8179c <usart_init_spi_master+0x108>)
   816a8:	2200      	movs	r2, #0
   816aa:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   816ac:	68bb      	ldr	r3, [r7, #8]
   816ae:	2b00      	cmp	r3, #0
   816b0:	d00d      	beq.n	816ce <usart_init_spi_master+0x3a>
   816b2:	68bb      	ldr	r3, [r7, #8]
   816b4:	689b      	ldr	r3, [r3, #8]
   816b6:	2b03      	cmp	r3, #3
   816b8:	d809      	bhi.n	816ce <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   816ba:	68bb      	ldr	r3, [r7, #8]
   816bc:	681b      	ldr	r3, [r3, #0]
   816be:	687a      	ldr	r2, [r7, #4]
   816c0:	4619      	mov	r1, r3
   816c2:	68f8      	ldr	r0, [r7, #12]
   816c4:	4b36      	ldr	r3, [pc, #216]	; (817a0 <usart_init_spi_master+0x10c>)
   816c6:	4798      	blx	r3
   816c8:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   816ca:	2b00      	cmp	r3, #0
   816cc:	d001      	beq.n	816d2 <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   816ce:	2301      	movs	r3, #1
   816d0:	e05d      	b.n	8178e <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   816d2:	68bb      	ldr	r3, [r7, #8]
   816d4:	685a      	ldr	r2, [r3, #4]
   816d6:	4b31      	ldr	r3, [pc, #196]	; (8179c <usart_init_spi_master+0x108>)
   816d8:	681b      	ldr	r3, [r3, #0]
   816da:	4313      	orrs	r3, r2
   816dc:	4a2f      	ldr	r2, [pc, #188]	; (8179c <usart_init_spi_master+0x108>)
   816de:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   816e0:	68bb      	ldr	r3, [r7, #8]
   816e2:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   816e4:	4b2d      	ldr	r3, [pc, #180]	; (8179c <usart_init_spi_master+0x108>)
   816e6:	681b      	ldr	r3, [r3, #0]
   816e8:	4313      	orrs	r3, r2
   816ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   816ee:	f043 030e 	orr.w	r3, r3, #14
   816f2:	4a2a      	ldr	r2, [pc, #168]	; (8179c <usart_init_spi_master+0x108>)
   816f4:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   816f6:	68bb      	ldr	r3, [r7, #8]
   816f8:	689b      	ldr	r3, [r3, #8]
   816fa:	2b03      	cmp	r3, #3
   816fc:	d83e      	bhi.n	8177c <usart_init_spi_master+0xe8>
   816fe:	a201      	add	r2, pc, #4	; (adr r2, 81704 <usart_init_spi_master+0x70>)
   81700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81704:	00081715 	.word	0x00081715
   81708:	0008172f 	.word	0x0008172f
   8170c:	00081749 	.word	0x00081749
   81710:	00081763 	.word	0x00081763
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   81714:	4b21      	ldr	r3, [pc, #132]	; (8179c <usart_init_spi_master+0x108>)
   81716:	681b      	ldr	r3, [r3, #0]
   81718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8171c:	4a1f      	ldr	r2, [pc, #124]	; (8179c <usart_init_spi_master+0x108>)
   8171e:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   81720:	4b1e      	ldr	r3, [pc, #120]	; (8179c <usart_init_spi_master+0x108>)
   81722:	681b      	ldr	r3, [r3, #0]
   81724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   81728:	4a1c      	ldr	r2, [pc, #112]	; (8179c <usart_init_spi_master+0x108>)
   8172a:	6013      	str	r3, [r2, #0]
		break;
   8172c:	e027      	b.n	8177e <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   8172e:	4b1b      	ldr	r3, [pc, #108]	; (8179c <usart_init_spi_master+0x108>)
   81730:	681b      	ldr	r3, [r3, #0]
   81732:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   81736:	4a19      	ldr	r2, [pc, #100]	; (8179c <usart_init_spi_master+0x108>)
   81738:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   8173a:	4b18      	ldr	r3, [pc, #96]	; (8179c <usart_init_spi_master+0x108>)
   8173c:	681b      	ldr	r3, [r3, #0]
   8173e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   81742:	4a16      	ldr	r2, [pc, #88]	; (8179c <usart_init_spi_master+0x108>)
   81744:	6013      	str	r3, [r2, #0]
		break;
   81746:	e01a      	b.n	8177e <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   81748:	4b14      	ldr	r3, [pc, #80]	; (8179c <usart_init_spi_master+0x108>)
   8174a:	681b      	ldr	r3, [r3, #0]
   8174c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   81750:	4a12      	ldr	r2, [pc, #72]	; (8179c <usart_init_spi_master+0x108>)
   81752:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   81754:	4b11      	ldr	r3, [pc, #68]	; (8179c <usart_init_spi_master+0x108>)
   81756:	681b      	ldr	r3, [r3, #0]
   81758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8175c:	4a0f      	ldr	r2, [pc, #60]	; (8179c <usart_init_spi_master+0x108>)
   8175e:	6013      	str	r3, [r2, #0]
		break;
   81760:	e00d      	b.n	8177e <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   81762:	4b0e      	ldr	r3, [pc, #56]	; (8179c <usart_init_spi_master+0x108>)
   81764:	681b      	ldr	r3, [r3, #0]
   81766:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   8176a:	4a0c      	ldr	r2, [pc, #48]	; (8179c <usart_init_spi_master+0x108>)
   8176c:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   8176e:	4b0b      	ldr	r3, [pc, #44]	; (8179c <usart_init_spi_master+0x108>)
   81770:	681b      	ldr	r3, [r3, #0]
   81772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81776:	4a09      	ldr	r2, [pc, #36]	; (8179c <usart_init_spi_master+0x108>)
   81778:	6013      	str	r3, [r2, #0]
		break;
   8177a:	e000      	b.n	8177e <usart_init_spi_master+0xea>

	default:
		break;
   8177c:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   8177e:	68fb      	ldr	r3, [r7, #12]
   81780:	685a      	ldr	r2, [r3, #4]
   81782:	4b06      	ldr	r3, [pc, #24]	; (8179c <usart_init_spi_master+0x108>)
   81784:	681b      	ldr	r3, [r3, #0]
   81786:	431a      	orrs	r2, r3
   81788:	68fb      	ldr	r3, [r7, #12]
   8178a:	605a      	str	r2, [r3, #4]

	return 0;
   8178c:	2300      	movs	r3, #0
}
   8178e:	4618      	mov	r0, r3
   81790:	3710      	adds	r7, #16
   81792:	46bd      	mov	sp, r7
   81794:	bd80      	pop	{r7, pc}
   81796:	bf00      	nop
   81798:	00081635 	.word	0x00081635
   8179c:	20000c8c 	.word	0x20000c8c
   817a0:	000815f5 	.word	0x000815f5

000817a4 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   817a4:	b480      	push	{r7}
   817a6:	b083      	sub	sp, #12
   817a8:	af00      	add	r7, sp, #0
   817aa:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   817ac:	687b      	ldr	r3, [r7, #4]
   817ae:	2240      	movs	r2, #64	; 0x40
   817b0:	601a      	str	r2, [r3, #0]
}
   817b2:	bf00      	nop
   817b4:	370c      	adds	r7, #12
   817b6:	46bd      	mov	sp, r7
   817b8:	bc80      	pop	{r7}
   817ba:	4770      	bx	lr

000817bc <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   817bc:	b480      	push	{r7}
   817be:	b083      	sub	sp, #12
   817c0:	af00      	add	r7, sp, #0
   817c2:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   817c4:	687b      	ldr	r3, [r7, #4]
   817c6:	2288      	movs	r2, #136	; 0x88
   817c8:	601a      	str	r2, [r3, #0]
}
   817ca:	bf00      	nop
   817cc:	370c      	adds	r7, #12
   817ce:	46bd      	mov	sp, r7
   817d0:	bc80      	pop	{r7}
   817d2:	4770      	bx	lr

000817d4 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   817d4:	b480      	push	{r7}
   817d6:	b083      	sub	sp, #12
   817d8:	af00      	add	r7, sp, #0
   817da:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   817dc:	687b      	ldr	r3, [r7, #4]
   817de:	2224      	movs	r2, #36	; 0x24
   817e0:	601a      	str	r2, [r3, #0]
}
   817e2:	bf00      	nop
   817e4:	370c      	adds	r7, #12
   817e6:	46bd      	mov	sp, r7
   817e8:	bc80      	pop	{r7}
   817ea:	4770      	bx	lr

000817ec <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   817ec:	b480      	push	{r7}
   817ee:	b083      	sub	sp, #12
   817f0:	af00      	add	r7, sp, #0
   817f2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   817f4:	687b      	ldr	r3, [r7, #4]
   817f6:	f44f 7280 	mov.w	r2, #256	; 0x100
   817fa:	601a      	str	r2, [r3, #0]
}
   817fc:	bf00      	nop
   817fe:	370c      	adds	r7, #12
   81800:	46bd      	mov	sp, r7
   81802:	bc80      	pop	{r7}
   81804:	4770      	bx	lr

00081806 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
   81806:	b480      	push	{r7}
   81808:	b083      	sub	sp, #12
   8180a:	af00      	add	r7, sp, #0
   8180c:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
   8180e:	687b      	ldr	r3, [r7, #4]
   81810:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   81814:	601a      	str	r2, [r3, #0]
}
   81816:	bf00      	nop
   81818:	370c      	adds	r7, #12
   8181a:	46bd      	mov	sp, r7
   8181c:	bc80      	pop	{r7}
   8181e:	4770      	bx	lr

00081820 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   81820:	b480      	push	{r7}
   81822:	b083      	sub	sp, #12
   81824:	af00      	add	r7, sp, #0
   81826:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   81828:	687b      	ldr	r3, [r7, #4]
   8182a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8182e:	601a      	str	r2, [r3, #0]
}
   81830:	bf00      	nop
   81832:	370c      	adds	r7, #12
   81834:	46bd      	mov	sp, r7
   81836:	bc80      	pop	{r7}
   81838:	4770      	bx	lr

0008183a <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
   8183a:	b480      	push	{r7}
   8183c:	b083      	sub	sp, #12
   8183e:	af00      	add	r7, sp, #0
   81840:	6078      	str	r0, [r7, #4]
   81842:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81844:	bf00      	nop
   81846:	687b      	ldr	r3, [r7, #4]
   81848:	695b      	ldr	r3, [r3, #20]
   8184a:	f003 0302 	and.w	r3, r3, #2
   8184e:	2b00      	cmp	r3, #0
   81850:	d0f9      	beq.n	81846 <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   81852:	683b      	ldr	r3, [r7, #0]
   81854:	f3c3 0208 	ubfx	r2, r3, #0, #9
   81858:	687b      	ldr	r3, [r7, #4]
   8185a:	61da      	str	r2, [r3, #28]

	return 0;
   8185c:	2300      	movs	r3, #0
}
   8185e:	4618      	mov	r0, r3
   81860:	370c      	adds	r7, #12
   81862:	46bd      	mov	sp, r7
   81864:	bc80      	pop	{r7}
   81866:	4770      	bx	lr

00081868 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   81868:	b480      	push	{r7}
   8186a:	b083      	sub	sp, #12
   8186c:	af00      	add	r7, sp, #0
   8186e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   81870:	687b      	ldr	r3, [r7, #4]
   81872:	4a04      	ldr	r2, [pc, #16]	; (81884 <usart_disable_writeprotect+0x1c>)
   81874:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   81878:	bf00      	nop
   8187a:	370c      	adds	r7, #12
   8187c:	46bd      	mov	sp, r7
   8187e:	bc80      	pop	{r7}
   81880:	4770      	bx	lr
   81882:	bf00      	nop
   81884:	55534100 	.word	0x55534100

00081888 <smc_set_setup_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
   81888:	b480      	push	{r7}
   8188a:	b085      	sub	sp, #20
   8188c:	af00      	add	r7, sp, #0
   8188e:	60f8      	str	r0, [r7, #12]
   81890:	60b9      	str	r1, [r7, #8]
   81892:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   81894:	68f9      	ldr	r1, [r7, #12]
   81896:	68ba      	ldr	r2, [r7, #8]
   81898:	4613      	mov	r3, r2
   8189a:	009b      	lsls	r3, r3, #2
   8189c:	4413      	add	r3, r2
   8189e:	009b      	lsls	r3, r3, #2
   818a0:	440b      	add	r3, r1
   818a2:	3370      	adds	r3, #112	; 0x70
   818a4:	687a      	ldr	r2, [r7, #4]
   818a6:	601a      	str	r2, [r3, #0]
}
   818a8:	bf00      	nop
   818aa:	3714      	adds	r7, #20
   818ac:	46bd      	mov	sp, r7
   818ae:	bc80      	pop	{r7}
   818b0:	4770      	bx	lr

000818b2 <smc_set_pulse_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
   818b2:	b480      	push	{r7}
   818b4:	b085      	sub	sp, #20
   818b6:	af00      	add	r7, sp, #0
   818b8:	60f8      	str	r0, [r7, #12]
   818ba:	60b9      	str	r1, [r7, #8]
   818bc:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   818be:	68f9      	ldr	r1, [r7, #12]
   818c0:	68ba      	ldr	r2, [r7, #8]
   818c2:	4613      	mov	r3, r2
   818c4:	009b      	lsls	r3, r3, #2
   818c6:	4413      	add	r3, r2
   818c8:	009b      	lsls	r3, r3, #2
   818ca:	440b      	add	r3, r1
   818cc:	3374      	adds	r3, #116	; 0x74
   818ce:	687a      	ldr	r2, [r7, #4]
   818d0:	601a      	str	r2, [r3, #0]
}
   818d2:	bf00      	nop
   818d4:	3714      	adds	r7, #20
   818d6:	46bd      	mov	sp, r7
   818d8:	bc80      	pop	{r7}
   818da:	4770      	bx	lr

000818dc <smc_set_cycle_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
   818dc:	b480      	push	{r7}
   818de:	b085      	sub	sp, #20
   818e0:	af00      	add	r7, sp, #0
   818e2:	60f8      	str	r0, [r7, #12]
   818e4:	60b9      	str	r1, [r7, #8]
   818e6:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   818e8:	68f9      	ldr	r1, [r7, #12]
   818ea:	68ba      	ldr	r2, [r7, #8]
   818ec:	4613      	mov	r3, r2
   818ee:	009b      	lsls	r3, r3, #2
   818f0:	4413      	add	r3, r2
   818f2:	009b      	lsls	r3, r3, #2
   818f4:	440b      	add	r3, r1
   818f6:	3378      	adds	r3, #120	; 0x78
   818f8:	687a      	ldr	r2, [r7, #4]
   818fa:	601a      	str	r2, [r3, #0]
}
   818fc:	bf00      	nop
   818fe:	3714      	adds	r7, #20
   81900:	46bd      	mov	sp, r7
   81902:	bc80      	pop	{r7}
   81904:	4770      	bx	lr

00081906 <smc_set_mode>:
 * \param p_smc Pointer to an SMC instance.
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
   81906:	b480      	push	{r7}
   81908:	b085      	sub	sp, #20
   8190a:	af00      	add	r7, sp, #0
   8190c:	60f8      	str	r0, [r7, #12]
   8190e:	60b9      	str	r1, [r7, #8]
   81910:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   81912:	68f9      	ldr	r1, [r7, #12]
   81914:	68ba      	ldr	r2, [r7, #8]
   81916:	4613      	mov	r3, r2
   81918:	009b      	lsls	r3, r3, #2
   8191a:	4413      	add	r3, r2
   8191c:	009b      	lsls	r3, r3, #2
   8191e:	440b      	add	r3, r1
   81920:	3380      	adds	r3, #128	; 0x80
   81922:	687a      	ldr	r2, [r7, #4]
   81924:	601a      	str	r2, [r3, #0]
}
   81926:	bf00      	nop
   81928:	3714      	adds	r7, #20
   8192a:	46bd      	mov	sp, r7
   8192c:	bc80      	pop	{r7}
   8192e:	4770      	bx	lr

00081930 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81930:	b580      	push	{r7, lr}
   81932:	b084      	sub	sp, #16
   81934:	af00      	add	r7, sp, #0
   81936:	6078      	str	r0, [r7, #4]
   81938:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8193a:	6878      	ldr	r0, [r7, #4]
   8193c:	4b26      	ldr	r3, [pc, #152]	; (819d8 <pio_handler_process+0xa8>)
   8193e:	4798      	blx	r3
   81940:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   81942:	6878      	ldr	r0, [r7, #4]
   81944:	4b25      	ldr	r3, [pc, #148]	; (819dc <pio_handler_process+0xac>)
   81946:	4798      	blx	r3
   81948:	4602      	mov	r2, r0
   8194a:	68fb      	ldr	r3, [r7, #12]
   8194c:	4013      	ands	r3, r2
   8194e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   81950:	68fb      	ldr	r3, [r7, #12]
   81952:	2b00      	cmp	r3, #0
   81954:	d03c      	beq.n	819d0 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
   81956:	2300      	movs	r3, #0
   81958:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   8195a:	e034      	b.n	819c6 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   8195c:	4a20      	ldr	r2, [pc, #128]	; (819e0 <pio_handler_process+0xb0>)
   8195e:	68bb      	ldr	r3, [r7, #8]
   81960:	011b      	lsls	r3, r3, #4
   81962:	4413      	add	r3, r2
   81964:	681a      	ldr	r2, [r3, #0]
   81966:	683b      	ldr	r3, [r7, #0]
   81968:	429a      	cmp	r2, r3
   8196a:	d126      	bne.n	819ba <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8196c:	4a1c      	ldr	r2, [pc, #112]	; (819e0 <pio_handler_process+0xb0>)
   8196e:	68bb      	ldr	r3, [r7, #8]
   81970:	011b      	lsls	r3, r3, #4
   81972:	4413      	add	r3, r2
   81974:	3304      	adds	r3, #4
   81976:	681a      	ldr	r2, [r3, #0]
   81978:	68fb      	ldr	r3, [r7, #12]
   8197a:	4013      	ands	r3, r2
   8197c:	2b00      	cmp	r3, #0
   8197e:	d01c      	beq.n	819ba <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81980:	4a17      	ldr	r2, [pc, #92]	; (819e0 <pio_handler_process+0xb0>)
   81982:	68bb      	ldr	r3, [r7, #8]
   81984:	011b      	lsls	r3, r3, #4
   81986:	4413      	add	r3, r2
   81988:	330c      	adds	r3, #12
   8198a:	681b      	ldr	r3, [r3, #0]
   8198c:	4914      	ldr	r1, [pc, #80]	; (819e0 <pio_handler_process+0xb0>)
   8198e:	68ba      	ldr	r2, [r7, #8]
   81990:	0112      	lsls	r2, r2, #4
   81992:	440a      	add	r2, r1
   81994:	6810      	ldr	r0, [r2, #0]
   81996:	4912      	ldr	r1, [pc, #72]	; (819e0 <pio_handler_process+0xb0>)
   81998:	68ba      	ldr	r2, [r7, #8]
   8199a:	0112      	lsls	r2, r2, #4
   8199c:	440a      	add	r2, r1
   8199e:	3204      	adds	r2, #4
   819a0:	6812      	ldr	r2, [r2, #0]
   819a2:	4611      	mov	r1, r2
   819a4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   819a6:	4a0e      	ldr	r2, [pc, #56]	; (819e0 <pio_handler_process+0xb0>)
   819a8:	68bb      	ldr	r3, [r7, #8]
   819aa:	011b      	lsls	r3, r3, #4
   819ac:	4413      	add	r3, r2
   819ae:	3304      	adds	r3, #4
   819b0:	681b      	ldr	r3, [r3, #0]
   819b2:	43db      	mvns	r3, r3
   819b4:	68fa      	ldr	r2, [r7, #12]
   819b6:	4013      	ands	r3, r2
   819b8:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   819ba:	68bb      	ldr	r3, [r7, #8]
   819bc:	3301      	adds	r3, #1
   819be:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
   819c0:	68bb      	ldr	r3, [r7, #8]
   819c2:	2b06      	cmp	r3, #6
   819c4:	d803      	bhi.n	819ce <pio_handler_process+0x9e>
		while (status != 0) {
   819c6:	68fb      	ldr	r3, [r7, #12]
   819c8:	2b00      	cmp	r3, #0
   819ca:	d1c7      	bne.n	8195c <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   819cc:	e000      	b.n	819d0 <pio_handler_process+0xa0>
				break;
   819ce:	bf00      	nop
}
   819d0:	bf00      	nop
   819d2:	3710      	adds	r7, #16
   819d4:	46bd      	mov	sp, r7
   819d6:	bd80      	pop	{r7, pc}
   819d8:	00084335 	.word	0x00084335
   819dc:	0008434b 	.word	0x0008434b
   819e0:	20000c90 	.word	0x20000c90

000819e4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   819e4:	b580      	push	{r7, lr}
   819e6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   819e8:	210a      	movs	r1, #10
   819ea:	4802      	ldr	r0, [pc, #8]	; (819f4 <PIOA_Handler+0x10>)
   819ec:	4b02      	ldr	r3, [pc, #8]	; (819f8 <PIOA_Handler+0x14>)
   819ee:	4798      	blx	r3
}
   819f0:	bf00      	nop
   819f2:	bd80      	pop	{r7, pc}
   819f4:	400e0c00 	.word	0x400e0c00
   819f8:	00081931 	.word	0x00081931

000819fc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   819fc:	b580      	push	{r7, lr}
   819fe:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   81a00:	210b      	movs	r1, #11
   81a02:	4802      	ldr	r0, [pc, #8]	; (81a0c <PIOB_Handler+0x10>)
   81a04:	4b02      	ldr	r3, [pc, #8]	; (81a10 <PIOB_Handler+0x14>)
   81a06:	4798      	blx	r3
}
   81a08:	bf00      	nop
   81a0a:	bd80      	pop	{r7, pc}
   81a0c:	400e0e00 	.word	0x400e0e00
   81a10:	00081931 	.word	0x00081931

00081a14 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   81a14:	b480      	push	{r7}
   81a16:	b083      	sub	sp, #12
   81a18:	af00      	add	r7, sp, #0
   81a1a:	4603      	mov	r3, r0
   81a1c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81a1e:	4908      	ldr	r1, [pc, #32]	; (81a40 <NVIC_EnableIRQ+0x2c>)
   81a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81a24:	095b      	lsrs	r3, r3, #5
   81a26:	79fa      	ldrb	r2, [r7, #7]
   81a28:	f002 021f 	and.w	r2, r2, #31
   81a2c:	2001      	movs	r0, #1
   81a2e:	fa00 f202 	lsl.w	r2, r0, r2
   81a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81a36:	bf00      	nop
   81a38:	370c      	adds	r7, #12
   81a3a:	46bd      	mov	sp, r7
   81a3c:	bc80      	pop	{r7}
   81a3e:	4770      	bx	lr
   81a40:	e000e100 	.word	0xe000e100

00081a44 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   81a44:	b480      	push	{r7}
   81a46:	b083      	sub	sp, #12
   81a48:	af00      	add	r7, sp, #0
   81a4a:	4603      	mov	r3, r0
   81a4c:	6039      	str	r1, [r7, #0]
   81a4e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   81a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81a54:	2b00      	cmp	r3, #0
   81a56:	da0b      	bge.n	81a70 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81a58:	490d      	ldr	r1, [pc, #52]	; (81a90 <NVIC_SetPriority+0x4c>)
   81a5a:	79fb      	ldrb	r3, [r7, #7]
   81a5c:	f003 030f 	and.w	r3, r3, #15
   81a60:	3b04      	subs	r3, #4
   81a62:	683a      	ldr	r2, [r7, #0]
   81a64:	b2d2      	uxtb	r2, r2
   81a66:	0112      	lsls	r2, r2, #4
   81a68:	b2d2      	uxtb	r2, r2
   81a6a:	440b      	add	r3, r1
   81a6c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   81a6e:	e009      	b.n	81a84 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81a70:	4908      	ldr	r1, [pc, #32]	; (81a94 <NVIC_SetPriority+0x50>)
   81a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81a76:	683a      	ldr	r2, [r7, #0]
   81a78:	b2d2      	uxtb	r2, r2
   81a7a:	0112      	lsls	r2, r2, #4
   81a7c:	b2d2      	uxtb	r2, r2
   81a7e:	440b      	add	r3, r1
   81a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   81a84:	bf00      	nop
   81a86:	370c      	adds	r7, #12
   81a88:	46bd      	mov	sp, r7
   81a8a:	bc80      	pop	{r7}
   81a8c:	4770      	bx	lr
   81a8e:	bf00      	nop
   81a90:	e000ed00 	.word	0xe000ed00
   81a94:	e000e100 	.word	0xe000e100

00081a98 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   81a98:	b480      	push	{r7}
   81a9a:	b083      	sub	sp, #12
   81a9c:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81a9e:	f3ef 8310 	mrs	r3, PRIMASK
   81aa2:	603b      	str	r3, [r7, #0]
  return(result);
   81aa4:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   81aa6:	2b00      	cmp	r3, #0
   81aa8:	bf0c      	ite	eq
   81aaa:	2301      	moveq	r3, #1
   81aac:	2300      	movne	r3, #0
   81aae:	b2db      	uxtb	r3, r3
   81ab0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   81ab2:	b672      	cpsid	i
   81ab4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81ab8:	4b04      	ldr	r3, [pc, #16]	; (81acc <cpu_irq_save+0x34>)
   81aba:	2200      	movs	r2, #0
   81abc:	701a      	strb	r2, [r3, #0]
	return flags;
   81abe:	687b      	ldr	r3, [r7, #4]
}
   81ac0:	4618      	mov	r0, r3
   81ac2:	370c      	adds	r7, #12
   81ac4:	46bd      	mov	sp, r7
   81ac6:	bc80      	pop	{r7}
   81ac8:	4770      	bx	lr
   81aca:	bf00      	nop
   81acc:	2000031a 	.word	0x2000031a

00081ad0 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   81ad0:	b480      	push	{r7}
   81ad2:	b083      	sub	sp, #12
   81ad4:	af00      	add	r7, sp, #0
   81ad6:	6078      	str	r0, [r7, #4]
	return (flags);
   81ad8:	687b      	ldr	r3, [r7, #4]
   81ada:	2b00      	cmp	r3, #0
   81adc:	bf14      	ite	ne
   81ade:	2301      	movne	r3, #1
   81ae0:	2300      	moveq	r3, #0
   81ae2:	b2db      	uxtb	r3, r3
}
   81ae4:	4618      	mov	r0, r3
   81ae6:	370c      	adds	r7, #12
   81ae8:	46bd      	mov	sp, r7
   81aea:	bc80      	pop	{r7}
   81aec:	4770      	bx	lr
   81aee:	0000      	movs	r0, r0

00081af0 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   81af0:	b580      	push	{r7, lr}
   81af2:	b082      	sub	sp, #8
   81af4:	af00      	add	r7, sp, #0
   81af6:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   81af8:	6878      	ldr	r0, [r7, #4]
   81afa:	4b07      	ldr	r3, [pc, #28]	; (81b18 <cpu_irq_restore+0x28>)
   81afc:	4798      	blx	r3
   81afe:	4603      	mov	r3, r0
   81b00:	2b00      	cmp	r3, #0
   81b02:	d005      	beq.n	81b10 <cpu_irq_restore+0x20>
		cpu_irq_enable();
   81b04:	4b05      	ldr	r3, [pc, #20]	; (81b1c <cpu_irq_restore+0x2c>)
   81b06:	2201      	movs	r2, #1
   81b08:	701a      	strb	r2, [r3, #0]
   81b0a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81b0e:	b662      	cpsie	i
}
   81b10:	bf00      	nop
   81b12:	3708      	adds	r7, #8
   81b14:	46bd      	mov	sp, r7
   81b16:	bd80      	pop	{r7, pc}
   81b18:	00081ad1 	.word	0x00081ad1
   81b1c:	2000031a 	.word	0x2000031a

00081b20 <sleepmgr_lock_mode>:
{
   81b20:	b580      	push	{r7, lr}
   81b22:	b084      	sub	sp, #16
   81b24:	af00      	add	r7, sp, #0
   81b26:	4603      	mov	r3, r0
   81b28:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   81b2a:	4b08      	ldr	r3, [pc, #32]	; (81b4c <sleepmgr_lock_mode+0x2c>)
   81b2c:	4798      	blx	r3
   81b2e:	60f8      	str	r0, [r7, #12]
	++sleepmgr_locks[mode];
   81b30:	79fb      	ldrb	r3, [r7, #7]
   81b32:	4a07      	ldr	r2, [pc, #28]	; (81b50 <sleepmgr_lock_mode+0x30>)
   81b34:	5cd2      	ldrb	r2, [r2, r3]
   81b36:	3201      	adds	r2, #1
   81b38:	b2d1      	uxtb	r1, r2
   81b3a:	4a05      	ldr	r2, [pc, #20]	; (81b50 <sleepmgr_lock_mode+0x30>)
   81b3c:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   81b3e:	68f8      	ldr	r0, [r7, #12]
   81b40:	4b04      	ldr	r3, [pc, #16]	; (81b54 <sleepmgr_lock_mode+0x34>)
   81b42:	4798      	blx	r3
}
   81b44:	bf00      	nop
   81b46:	3710      	adds	r7, #16
   81b48:	46bd      	mov	sp, r7
   81b4a:	bd80      	pop	{r7, pc}
   81b4c:	00081a99 	.word	0x00081a99
   81b50:	20000d70 	.word	0x20000d70
   81b54:	00081af1 	.word	0x00081af1

00081b58 <sleepmgr_unlock_mode>:
{
   81b58:	b580      	push	{r7, lr}
   81b5a:	b084      	sub	sp, #16
   81b5c:	af00      	add	r7, sp, #0
   81b5e:	4603      	mov	r3, r0
   81b60:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   81b62:	4b08      	ldr	r3, [pc, #32]	; (81b84 <sleepmgr_unlock_mode+0x2c>)
   81b64:	4798      	blx	r3
   81b66:	60f8      	str	r0, [r7, #12]
	--sleepmgr_locks[mode];
   81b68:	79fb      	ldrb	r3, [r7, #7]
   81b6a:	4a07      	ldr	r2, [pc, #28]	; (81b88 <sleepmgr_unlock_mode+0x30>)
   81b6c:	5cd2      	ldrb	r2, [r2, r3]
   81b6e:	3a01      	subs	r2, #1
   81b70:	b2d1      	uxtb	r1, r2
   81b72:	4a05      	ldr	r2, [pc, #20]	; (81b88 <sleepmgr_unlock_mode+0x30>)
   81b74:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   81b76:	68f8      	ldr	r0, [r7, #12]
   81b78:	4b04      	ldr	r3, [pc, #16]	; (81b8c <sleepmgr_unlock_mode+0x34>)
   81b7a:	4798      	blx	r3
}
   81b7c:	bf00      	nop
   81b7e:	3710      	adds	r7, #16
   81b80:	46bd      	mov	sp, r7
   81b82:	bd80      	pop	{r7, pc}
   81b84:	00081a99 	.word	0x00081a99
   81b88:	20000d70 	.word	0x20000d70
   81b8c:	00081af1 	.word	0x00081af1

00081b90 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
   81b90:	b580      	push	{r7, lr}
   81b92:	b082      	sub	sp, #8
   81b94:	af00      	add	r7, sp, #0
   81b96:	4603      	mov	r3, r0
   81b98:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
   81b9a:	79fb      	ldrb	r3, [r7, #7]
   81b9c:	f083 0301 	eor.w	r3, r3, #1
   81ba0:	b2db      	uxtb	r3, r3
   81ba2:	2b00      	cmp	r3, #0
   81ba4:	d006      	beq.n	81bb4 <udd_sleep_mode+0x24>
   81ba6:	4b0d      	ldr	r3, [pc, #52]	; (81bdc <udd_sleep_mode+0x4c>)
   81ba8:	781b      	ldrb	r3, [r3, #0]
   81baa:	2b00      	cmp	r3, #0
   81bac:	d002      	beq.n	81bb4 <udd_sleep_mode+0x24>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   81bae:	2002      	movs	r0, #2
   81bb0:	4b0b      	ldr	r3, [pc, #44]	; (81be0 <udd_sleep_mode+0x50>)
   81bb2:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
   81bb4:	79fb      	ldrb	r3, [r7, #7]
   81bb6:	2b00      	cmp	r3, #0
   81bb8:	d009      	beq.n	81bce <udd_sleep_mode+0x3e>
   81bba:	4b08      	ldr	r3, [pc, #32]	; (81bdc <udd_sleep_mode+0x4c>)
   81bbc:	781b      	ldrb	r3, [r3, #0]
   81bbe:	f083 0301 	eor.w	r3, r3, #1
   81bc2:	b2db      	uxtb	r3, r3
   81bc4:	2b00      	cmp	r3, #0
   81bc6:	d002      	beq.n	81bce <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   81bc8:	2002      	movs	r0, #2
   81bca:	4b06      	ldr	r3, [pc, #24]	; (81be4 <udd_sleep_mode+0x54>)
   81bcc:	4798      	blx	r3
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   81bce:	4a03      	ldr	r2, [pc, #12]	; (81bdc <udd_sleep_mode+0x4c>)
   81bd0:	79fb      	ldrb	r3, [r7, #7]
   81bd2:	7013      	strb	r3, [r2, #0]
}
   81bd4:	bf00      	nop
   81bd6:	3708      	adds	r7, #8
   81bd8:	46bd      	mov	sp, r7
   81bda:	bd80      	pop	{r7, pc}
   81bdc:	20000d00 	.word	0x20000d00
   81be0:	00081b59 	.word	0x00081b59
   81be4:	00081b21 	.word	0x00081b21

00081be8 <UDPHS_Handler>:
 * Here, the global interrupt mask is not clear when an USB interrupt is enabled
 * because this one can not be occurred during the USB ISR (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests in peripheral modules.
 */
ISR(UDD_USB_INT_FUN)
{
   81be8:	b580      	push	{r7, lr}
   81bea:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   81bec:	201d      	movs	r0, #29
   81bee:	4b5e      	ldr	r3, [pc, #376]	; (81d68 <UDPHS_Handler+0x180>)
   81bf0:	4798      	blx	r3
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   81bf2:	4b5e      	ldr	r3, [pc, #376]	; (81d6c <UDPHS_Handler+0x184>)
   81bf4:	4798      	blx	r3
   81bf6:	4603      	mov	r3, r0
   81bf8:	f083 0301 	eor.w	r3, r3, #1
   81bfc:	b2db      	uxtb	r3, r3
   81bfe:	2b00      	cmp	r3, #0
   81c00:	d00c      	beq.n	81c1c <UDPHS_Handler+0x34>
   81c02:	4b5b      	ldr	r3, [pc, #364]	; (81d70 <UDPHS_Handler+0x188>)
   81c04:	695b      	ldr	r3, [r3, #20]
   81c06:	f003 0302 	and.w	r3, r3, #2
   81c0a:	2b00      	cmp	r3, #0
   81c0c:	d106      	bne.n	81c1c <UDPHS_Handler+0x34>
  __ASM volatile ("cpsid i");
   81c0e:	b672      	cpsid	i
   81c10:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   81c14:	4b57      	ldr	r3, [pc, #348]	; (81d74 <UDPHS_Handler+0x18c>)
   81c16:	2200      	movs	r2, #0
   81c18:	701a      	strb	r2, [r3, #0]
		return;
   81c1a:	e0a4      	b.n	81d66 <UDPHS_Handler+0x17e>
	}

	if (Is_udd_sof()) {
   81c1c:	4b54      	ldr	r3, [pc, #336]	; (81d70 <UDPHS_Handler+0x188>)
   81c1e:	695b      	ldr	r3, [r3, #20]
   81c20:	f003 0308 	and.w	r3, r3, #8
   81c24:	2b00      	cmp	r3, #0
   81c26:	d00d      	beq.n	81c44 <UDPHS_Handler+0x5c>
		udd_ack_sof();
   81c28:	4b51      	ldr	r3, [pc, #324]	; (81d70 <UDPHS_Handler+0x188>)
   81c2a:	2208      	movs	r2, #8
   81c2c:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   81c2e:	4b50      	ldr	r3, [pc, #320]	; (81d70 <UDPHS_Handler+0x188>)
   81c30:	695b      	ldr	r3, [r3, #20]
   81c32:	f003 0301 	and.w	r3, r3, #1
   81c36:	2b00      	cmp	r3, #0
   81c38:	d101      	bne.n	81c3e <UDPHS_Handler+0x56>
			udc_sof_notify();
   81c3a:	4b4f      	ldr	r3, [pc, #316]	; (81d78 <UDPHS_Handler+0x190>)
   81c3c:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   81c3e:	4b4f      	ldr	r3, [pc, #316]	; (81d7c <UDPHS_Handler+0x194>)
   81c40:	4798      	blx	r3
#endif
		goto udd_interrupt_sof_end;
   81c42:	e08e      	b.n	81d62 <UDPHS_Handler+0x17a>
	}

	if (Is_udd_msof()) {
   81c44:	4b4a      	ldr	r3, [pc, #296]	; (81d70 <UDPHS_Handler+0x188>)
   81c46:	695b      	ldr	r3, [r3, #20]
   81c48:	f003 0304 	and.w	r3, r3, #4
   81c4c:	2b00      	cmp	r3, #0
   81c4e:	d005      	beq.n	81c5c <UDPHS_Handler+0x74>
		udd_ack_msof();
   81c50:	4b47      	ldr	r3, [pc, #284]	; (81d70 <UDPHS_Handler+0x188>)
   81c52:	2204      	movs	r2, #4
   81c54:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   81c56:	4b48      	ldr	r3, [pc, #288]	; (81d78 <UDPHS_Handler+0x190>)
   81c58:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   81c5a:	e082      	b.n	81d62 <UDPHS_Handler+0x17a>
	}
	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');

	if (udd_ctrl_interrupt()) {
   81c5c:	4b48      	ldr	r3, [pc, #288]	; (81d80 <UDPHS_Handler+0x198>)
   81c5e:	4798      	blx	r3
   81c60:	4603      	mov	r3, r0
   81c62:	2b00      	cmp	r3, #0
   81c64:	d17a      	bne.n	81d5c <UDPHS_Handler+0x174>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
   81c66:	4b47      	ldr	r3, [pc, #284]	; (81d84 <UDPHS_Handler+0x19c>)
   81c68:	4798      	blx	r3
   81c6a:	4603      	mov	r3, r0
   81c6c:	2b00      	cmp	r3, #0
   81c6e:	d177      	bne.n	81d60 <UDPHS_Handler+0x178>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   81c70:	4b3f      	ldr	r3, [pc, #252]	; (81d70 <UDPHS_Handler+0x188>)
   81c72:	695b      	ldr	r3, [r3, #20]
   81c74:	f003 0310 	and.w	r3, r3, #16
   81c78:	2b00      	cmp	r3, #0
   81c7a:	d01d      	beq.n	81cb8 <UDPHS_Handler+0xd0>
		dbg_print("EoR ");
		udd_ack_reset();
   81c7c:	4b3c      	ldr	r3, [pc, #240]	; (81d70 <UDPHS_Handler+0x188>)
   81c7e:	2210      	movs	r2, #16
   81c80:	619a      	str	r2, [r3, #24]
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
   81c82:	4b41      	ldr	r3, [pc, #260]	; (81d88 <UDPHS_Handler+0x1a0>)
   81c84:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
   81c86:	4b41      	ldr	r3, [pc, #260]	; (81d8c <UDPHS_Handler+0x1a4>)
   81c88:	4798      	blx	r3
		// Reset endpoint control
		udd_reset_ep_ctrl();
   81c8a:	4b41      	ldr	r3, [pc, #260]	; (81d90 <UDPHS_Handler+0x1a8>)
   81c8c:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
   81c8e:	4b41      	ldr	r3, [pc, #260]	; (81d94 <UDPHS_Handler+0x1ac>)
   81c90:	4798      	blx	r3
		// Enable SOF interrupts cleared by USB reset event
		udd_enable_sof_interrupt();
   81c92:	4a37      	ldr	r2, [pc, #220]	; (81d70 <UDPHS_Handler+0x188>)
   81c94:	4b36      	ldr	r3, [pc, #216]	; (81d70 <UDPHS_Handler+0x188>)
   81c96:	691b      	ldr	r3, [r3, #16]
   81c98:	f043 0308 	orr.w	r3, r3, #8
   81c9c:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   81c9e:	4a34      	ldr	r2, [pc, #208]	; (81d70 <UDPHS_Handler+0x188>)
   81ca0:	4b33      	ldr	r3, [pc, #204]	; (81d70 <UDPHS_Handler+0x188>)
   81ca2:	691b      	ldr	r3, [r3, #16]
   81ca4:	f043 0304 	orr.w	r3, r3, #4
   81ca8:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   81caa:	4a31      	ldr	r2, [pc, #196]	; (81d70 <UDPHS_Handler+0x188>)
   81cac:	4b30      	ldr	r3, [pc, #192]	; (81d70 <UDPHS_Handler+0x188>)
   81cae:	691b      	ldr	r3, [r3, #16]
   81cb0:	f043 0302 	orr.w	r3, r3, #2
   81cb4:	6113      	str	r3, [r2, #16]
		goto udd_interrupt_end;
   81cb6:	e054      	b.n	81d62 <UDPHS_Handler+0x17a>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   81cb8:	4b2d      	ldr	r3, [pc, #180]	; (81d70 <UDPHS_Handler+0x188>)
   81cba:	691b      	ldr	r3, [r3, #16]
   81cbc:	f003 0302 	and.w	r3, r3, #2
   81cc0:	2b00      	cmp	r3, #0
   81cc2:	d020      	beq.n	81d06 <UDPHS_Handler+0x11e>
   81cc4:	4b2a      	ldr	r3, [pc, #168]	; (81d70 <UDPHS_Handler+0x188>)
   81cc6:	695b      	ldr	r3, [r3, #20]
   81cc8:	f003 0302 	and.w	r3, r3, #2
   81ccc:	2b00      	cmp	r3, #0
   81cce:	d01a      	beq.n	81d06 <UDPHS_Handler+0x11e>
		dbg_print("Susp ");
		// Remove old wakeup status
		udd_ack_wake_up();
   81cd0:	4b27      	ldr	r3, [pc, #156]	; (81d70 <UDPHS_Handler+0x188>)
   81cd2:	2220      	movs	r2, #32
   81cd4:	619a      	str	r2, [r3, #24]
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   81cd6:	4a26      	ldr	r2, [pc, #152]	; (81d70 <UDPHS_Handler+0x188>)
   81cd8:	4b25      	ldr	r3, [pc, #148]	; (81d70 <UDPHS_Handler+0x188>)
   81cda:	691b      	ldr	r3, [r3, #16]
   81cdc:	f023 0302 	bic.w	r3, r3, #2
   81ce0:	6113      	str	r3, [r2, #16]
		udd_enable_wake_up_interrupt();
   81ce2:	4a23      	ldr	r2, [pc, #140]	; (81d70 <UDPHS_Handler+0x188>)
   81ce4:	4b22      	ldr	r3, [pc, #136]	; (81d70 <UDPHS_Handler+0x188>)
   81ce6:	691b      	ldr	r3, [r3, #16]
   81ce8:	f043 0320 	orr.w	r3, r3, #32
   81cec:	6113      	str	r3, [r2, #16]

		// The wakeup interrupt is generated even if the device controller clock is disabled.
		udd_ack_suspend();
   81cee:	4b20      	ldr	r3, [pc, #128]	; (81d70 <UDPHS_Handler+0x188>)
   81cf0:	2202      	movs	r2, #2
   81cf2:	619a      	str	r2, [r3, #24]

		udd_disable_periph_ck();
   81cf4:	201d      	movs	r0, #29
   81cf6:	4b28      	ldr	r3, [pc, #160]	; (81d98 <UDPHS_Handler+0x1b0>)
   81cf8:	4798      	blx	r3

#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   81cfa:	4b28      	ldr	r3, [pc, #160]	; (81d9c <UDPHS_Handler+0x1b4>)
   81cfc:	4798      	blx	r3
#endif
		udd_sleep_mode(false); // Enter in SUSPEND mode
   81cfe:	2000      	movs	r0, #0
   81d00:	4b27      	ldr	r3, [pc, #156]	; (81da0 <UDPHS_Handler+0x1b8>)
   81d02:	4798      	blx	r3
		goto udd_interrupt_end;
   81d04:	e02d      	b.n	81d62 <UDPHS_Handler+0x17a>
	}

	// On wakeup, _IEN is reseted only with EoR enabled
	if (Is_udd_wake_up()) {
   81d06:	4b1a      	ldr	r3, [pc, #104]	; (81d70 <UDPHS_Handler+0x188>)
   81d08:	695b      	ldr	r3, [r3, #20]
   81d0a:	f003 0320 	and.w	r3, r3, #32
   81d0e:	2b00      	cmp	r3, #0
   81d10:	d028      	beq.n	81d64 <UDPHS_Handler+0x17c>
		udd_sleep_mode(true); // Enter in IDLE mode
   81d12:	2001      	movs	r0, #1
   81d14:	4b22      	ldr	r3, [pc, #136]	; (81da0 <UDPHS_Handler+0x1b8>)
   81d16:	4798      	blx	r3
		// Remove old suspend status
		udd_ack_suspend();
   81d18:	4b15      	ldr	r3, [pc, #84]	; (81d70 <UDPHS_Handler+0x188>)
   81d1a:	2202      	movs	r2, #2
   81d1c:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wake_up();
   81d1e:	4b14      	ldr	r3, [pc, #80]	; (81d70 <UDPHS_Handler+0x188>)
   81d20:	2220      	movs	r2, #32
   81d22:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_disable_wake_up_interrupt();
   81d24:	4a12      	ldr	r2, [pc, #72]	; (81d70 <UDPHS_Handler+0x188>)
   81d26:	4b12      	ldr	r3, [pc, #72]	; (81d70 <UDPHS_Handler+0x188>)
   81d28:	691b      	ldr	r3, [r3, #16]
   81d2a:	f023 0320 	bic.w	r3, r3, #32
   81d2e:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   81d30:	4a0f      	ldr	r2, [pc, #60]	; (81d70 <UDPHS_Handler+0x188>)
   81d32:	4b0f      	ldr	r3, [pc, #60]	; (81d70 <UDPHS_Handler+0x188>)
   81d34:	691b      	ldr	r3, [r3, #16]
   81d36:	f043 0302 	orr.w	r3, r3, #2
   81d3a:	6113      	str	r3, [r2, #16]
		udd_enable_sof_interrupt();
   81d3c:	4a0c      	ldr	r2, [pc, #48]	; (81d70 <UDPHS_Handler+0x188>)
   81d3e:	4b0c      	ldr	r3, [pc, #48]	; (81d70 <UDPHS_Handler+0x188>)
   81d40:	691b      	ldr	r3, [r3, #16]
   81d42:	f043 0308 	orr.w	r3, r3, #8
   81d46:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   81d48:	4a09      	ldr	r2, [pc, #36]	; (81d70 <UDPHS_Handler+0x188>)
   81d4a:	4b09      	ldr	r3, [pc, #36]	; (81d70 <UDPHS_Handler+0x188>)
   81d4c:	691b      	ldr	r3, [r3, #16]
   81d4e:	f043 0304 	orr.w	r3, r3, #4
   81d52:	6113      	str	r3, [r2, #16]

#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   81d54:	4b13      	ldr	r3, [pc, #76]	; (81da4 <UDPHS_Handler+0x1bc>)
   81d56:	4798      	blx	r3
#endif
		dbg_print("Wkup ");
		goto udd_interrupt_end;
   81d58:	bf00      	nop
   81d5a:	e002      	b.n	81d62 <UDPHS_Handler+0x17a>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
   81d5c:	bf00      	nop
   81d5e:	e000      	b.n	81d62 <UDPHS_Handler+0x17a>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
   81d60:	bf00      	nop
udd_interrupt_end:
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
	//dbg_print("m%08x", UDPHS->UDPHS_IEN);
	dbg_print("\n\r");
udd_interrupt_sof_end:
	return;
   81d62:	bf00      	nop
   81d64:	bf00      	nop
}
   81d66:	bd80      	pop	{r7, pc}
   81d68:	00083e29 	.word	0x00083e29
   81d6c:	000857d9 	.word	0x000857d9
   81d70:	400a4000 	.word	0x400a4000
   81d74:	2000031a 	.word	0x2000031a
   81d78:	00084919 	.word	0x00084919
   81d7c:	00080d85 	.word	0x00080d85
   81d80:	00083059 	.word	0x00083059
   81d84:	00083471 	.word	0x00083471
   81d88:	00083199 	.word	0x00083199
   81d8c:	000848c5 	.word	0x000848c5
   81d90:	000829b9 	.word	0x000829b9
   81d94:	00082a39 	.word	0x00082a39
   81d98:	00083e79 	.word	0x00083e79
   81d9c:	00080d6d 	.word	0x00080d6d
   81da0:	00081b91 	.word	0x00081b91
   81da4:	00080d79 	.word	0x00080d79

00081da8 <udd_enable>:
#endif
}


void udd_enable(void)
{
   81da8:	b580      	push	{r7, lr}
   81daa:	b082      	sub	sp, #8
   81dac:	af00      	add	r7, sp, #0
	irqflags_t flags;
	sysclk_enable_usb();
   81dae:	4b19      	ldr	r3, [pc, #100]	; (81e14 <udd_enable+0x6c>)
   81db0:	4798      	blx	r3

	udd_enable_periph_ck();
   81db2:	201d      	movs	r0, #29
   81db4:	4b18      	ldr	r3, [pc, #96]	; (81e18 <udd_enable+0x70>)
   81db6:	4798      	blx	r3

	flags = cpu_irq_save();
   81db8:	4b18      	ldr	r3, [pc, #96]	; (81e1c <udd_enable+0x74>)
   81dba:	4798      	blx	r3
   81dbc:	6078      	str	r0, [r7, #4]

	//** Enable USB hardware
	udd_enable_periph();
   81dbe:	4a18      	ldr	r2, [pc, #96]	; (81e20 <udd_enable+0x78>)
   81dc0:	4b17      	ldr	r3, [pc, #92]	; (81e20 <udd_enable+0x78>)
   81dc2:	681b      	ldr	r3, [r3, #0]
   81dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   81dc8:	6013      	str	r3, [r2, #0]

	// Cortex-M3, uses NVIC, no need to register IRQ handler
	// Here, only the Device mode is possible,
	// UDPHS interrupt is UDD interrupt
	NVIC_SetPriority((IRQn_Type) ID_UDPHS, UDD_USB_INT_LEVEL);
   81dca:	2105      	movs	r1, #5
   81dcc:	201d      	movs	r0, #29
   81dce:	4b15      	ldr	r3, [pc, #84]	; (81e24 <udd_enable+0x7c>)
   81dd0:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDPHS);
   81dd2:	201d      	movs	r0, #29
   81dd4:	4b14      	ldr	r3, [pc, #80]	; (81e28 <udd_enable+0x80>)
   81dd6:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
   81dd8:	4b14      	ldr	r3, [pc, #80]	; (81e2c <udd_enable+0x84>)
   81dda:	4798      	blx	r3
#endif

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   81ddc:	4a10      	ldr	r2, [pc, #64]	; (81e20 <udd_enable+0x78>)
   81dde:	4b10      	ldr	r3, [pc, #64]	; (81e20 <udd_enable+0x78>)
   81de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   81de4:	f023 0303 	bic.w	r3, r3, #3
   81de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
#else
	udd_high_speed_disable();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   81dec:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   81df0:	4b0f      	ldr	r3, [pc, #60]	; (81e30 <udd_enable+0x88>)
   81df2:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
   81df4:	4b0f      	ldr	r3, [pc, #60]	; (81e34 <udd_enable+0x8c>)
   81df6:	2200      	movs	r2, #0
   81df8:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
   81dfa:	2003      	movs	r0, #3
   81dfc:	4b0e      	ldr	r3, [pc, #56]	; (81e38 <udd_enable+0x90>)
   81dfe:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
   81e00:	4b0e      	ldr	r3, [pc, #56]	; (81e3c <udd_enable+0x94>)
   81e02:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
   81e04:	6878      	ldr	r0, [r7, #4]
   81e06:	4b0e      	ldr	r3, [pc, #56]	; (81e40 <udd_enable+0x98>)
   81e08:	4798      	blx	r3
}
   81e0a:	bf00      	nop
   81e0c:	3708      	adds	r7, #8
   81e0e:	46bd      	mov	sp, r7
   81e10:	bd80      	pop	{r7, pc}
   81e12:	bf00      	nop
   81e14:	00083a11 	.word	0x00083a11
   81e18:	00083e29 	.word	0x00083e29
   81e1c:	00081a99 	.word	0x00081a99
   81e20:	400a4000 	.word	0x400a4000
   81e24:	00081a45 	.word	0x00081a45
   81e28:	00081a15 	.word	0x00081a15
   81e2c:	0008313d 	.word	0x0008313d
   81e30:	00083eed 	.word	0x00083eed
   81e34:	20000d00 	.word	0x20000d00
   81e38:	00081b21 	.word	0x00081b21
   81e3c:	00081e45 	.word	0x00081e45
   81e40:	00081af1 	.word	0x00081af1

00081e44 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   81e44:	b580      	push	{r7, lr}
   81e46:	b082      	sub	sp, #8
   81e48:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
   81e4a:	4b26      	ldr	r3, [pc, #152]	; (81ee4 <udd_attach+0xa0>)
   81e4c:	4798      	blx	r3
   81e4e:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   81e50:	2001      	movs	r0, #1
   81e52:	4b25      	ldr	r3, [pc, #148]	; (81ee8 <udd_attach+0xa4>)
   81e54:	4798      	blx	r3
	udd_enable_periph_ck();
   81e56:	201d      	movs	r0, #29
   81e58:	4b24      	ldr	r3, [pc, #144]	; (81eec <udd_attach+0xa8>)
   81e5a:	4798      	blx	r3

	// Authorize attach if Vbus is present
	udd_attach_device();
   81e5c:	4a24      	ldr	r2, [pc, #144]	; (81ef0 <udd_attach+0xac>)
   81e5e:	4b24      	ldr	r3, [pc, #144]	; (81ef0 <udd_attach+0xac>)
   81e60:	681b      	ldr	r3, [r3, #0]
   81e62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81e66:	6013      	str	r3, [r2, #0]
   81e68:	4a21      	ldr	r2, [pc, #132]	; (81ef0 <udd_attach+0xac>)
   81e6a:	4b21      	ldr	r3, [pc, #132]	; (81ef0 <udd_attach+0xac>)
   81e6c:	681b      	ldr	r3, [r3, #0]
   81e6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   81e72:	6013      	str	r3, [r2, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   81e74:	4a1e      	ldr	r2, [pc, #120]	; (81ef0 <udd_attach+0xac>)
   81e76:	4b1e      	ldr	r3, [pc, #120]	; (81ef0 <udd_attach+0xac>)
   81e78:	691b      	ldr	r3, [r3, #16]
   81e7a:	f043 0310 	orr.w	r3, r3, #16
   81e7e:	6113      	str	r3, [r2, #16]
	udd_enable_suspend_interrupt();
   81e80:	4a1b      	ldr	r2, [pc, #108]	; (81ef0 <udd_attach+0xac>)
   81e82:	4b1b      	ldr	r3, [pc, #108]	; (81ef0 <udd_attach+0xac>)
   81e84:	691b      	ldr	r3, [r3, #16]
   81e86:	f043 0302 	orr.w	r3, r3, #2
   81e8a:	6113      	str	r3, [r2, #16]
	udd_enable_wake_up_interrupt();
   81e8c:	4a18      	ldr	r2, [pc, #96]	; (81ef0 <udd_attach+0xac>)
   81e8e:	4b18      	ldr	r3, [pc, #96]	; (81ef0 <udd_attach+0xac>)
   81e90:	691b      	ldr	r3, [r3, #16]
   81e92:	f043 0320 	orr.w	r3, r3, #32
   81e96:	6113      	str	r3, [r2, #16]
	udd_enable_sof_interrupt();
   81e98:	4a15      	ldr	r2, [pc, #84]	; (81ef0 <udd_attach+0xac>)
   81e9a:	4b15      	ldr	r3, [pc, #84]	; (81ef0 <udd_attach+0xac>)
   81e9c:	691b      	ldr	r3, [r3, #16]
   81e9e:	f043 0308 	orr.w	r3, r3, #8
   81ea2:	6113      	str	r3, [r2, #16]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   81ea4:	4a12      	ldr	r2, [pc, #72]	; (81ef0 <udd_attach+0xac>)
   81ea6:	4b12      	ldr	r3, [pc, #72]	; (81ef0 <udd_attach+0xac>)
   81ea8:	691b      	ldr	r3, [r3, #16]
   81eaa:	f043 0304 	orr.w	r3, r3, #4
   81eae:	6113      	str	r3, [r2, #16]
#endif
	// Reset following interrupts flag
	udd_ack_sof();
   81eb0:	4b0f      	ldr	r3, [pc, #60]	; (81ef0 <udd_attach+0xac>)
   81eb2:	2208      	movs	r2, #8
   81eb4:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   81eb6:	4b0e      	ldr	r3, [pc, #56]	; (81ef0 <udd_attach+0xac>)
   81eb8:	2204      	movs	r2, #4
   81eba:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   81ebc:	4b0c      	ldr	r3, [pc, #48]	; (81ef0 <udd_attach+0xac>)
   81ebe:	2210      	movs	r2, #16
   81ec0:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   81ec2:	4b0b      	ldr	r3, [pc, #44]	; (81ef0 <udd_attach+0xac>)
   81ec4:	2202      	movs	r2, #2
   81ec6:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   81ec8:	4b09      	ldr	r3, [pc, #36]	; (81ef0 <udd_attach+0xac>)
   81eca:	2220      	movs	r2, #32
   81ecc:	619a      	str	r2, [r3, #24]

	udd_disable_periph_ck();
   81ece:	201d      	movs	r0, #29
   81ed0:	4b08      	ldr	r3, [pc, #32]	; (81ef4 <udd_attach+0xb0>)
   81ed2:	4798      	blx	r3
	cpu_irq_restore(flags);
   81ed4:	6878      	ldr	r0, [r7, #4]
   81ed6:	4b08      	ldr	r3, [pc, #32]	; (81ef8 <udd_attach+0xb4>)
   81ed8:	4798      	blx	r3
}
   81eda:	bf00      	nop
   81edc:	3708      	adds	r7, #8
   81ede:	46bd      	mov	sp, r7
   81ee0:	bd80      	pop	{r7, pc}
   81ee2:	bf00      	nop
   81ee4:	00081a99 	.word	0x00081a99
   81ee8:	00081b91 	.word	0x00081b91
   81eec:	00083e29 	.word	0x00083e29
   81ef0:	400a4000 	.word	0x400a4000
   81ef4:	00083e79 	.word	0x00083e79
   81ef8:	00081af1 	.word	0x00081af1

00081efc <udd_detach>:


void udd_detach(void)
{
   81efc:	b580      	push	{r7, lr}
   81efe:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   81f00:	201d      	movs	r0, #29
   81f02:	4b0b      	ldr	r3, [pc, #44]	; (81f30 <udd_detach+0x34>)
   81f04:	4798      	blx	r3
	// Detach device from the bus
	udd_detach_device();
   81f06:	4a0b      	ldr	r2, [pc, #44]	; (81f34 <udd_detach+0x38>)
   81f08:	4b0a      	ldr	r3, [pc, #40]	; (81f34 <udd_detach+0x38>)
   81f0a:	681b      	ldr	r3, [r3, #0]
   81f0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   81f10:	6013      	str	r3, [r2, #0]
   81f12:	4a08      	ldr	r2, [pc, #32]	; (81f34 <udd_detach+0x38>)
   81f14:	4b07      	ldr	r3, [pc, #28]	; (81f34 <udd_detach+0x38>)
   81f16:	681b      	ldr	r3, [r3, #0]
   81f18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81f1c:	6013      	str	r3, [r2, #0]
	udd_disable_periph_ck();
   81f1e:	201d      	movs	r0, #29
   81f20:	4b05      	ldr	r3, [pc, #20]	; (81f38 <udd_detach+0x3c>)
   81f22:	4798      	blx	r3
	udd_sleep_mode(false);
   81f24:	2000      	movs	r0, #0
   81f26:	4b05      	ldr	r3, [pc, #20]	; (81f3c <udd_detach+0x40>)
   81f28:	4798      	blx	r3
}
   81f2a:	bf00      	nop
   81f2c:	bd80      	pop	{r7, pc}
   81f2e:	bf00      	nop
   81f30:	00083e29 	.word	0x00083e29
   81f34:	400a4000 	.word	0x400a4000
   81f38:	00083e79 	.word	0x00083e79
   81f3c:	00081b91 	.word	0x00081b91

00081f40 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
   81f40:	b480      	push	{r7}
   81f42:	af00      	add	r7, sp, #0
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   81f44:	4b06      	ldr	r3, [pc, #24]	; (81f60 <udd_is_high_speed+0x20>)
   81f46:	695b      	ldr	r3, [r3, #20]
   81f48:	f003 0301 	and.w	r3, r3, #1
   81f4c:	2b00      	cmp	r3, #0
   81f4e:	bf14      	ite	ne
   81f50:	2301      	movne	r3, #1
   81f52:	2300      	moveq	r3, #0
   81f54:	b2db      	uxtb	r3, r3
#else
	return false;
#endif
}
   81f56:	4618      	mov	r0, r3
   81f58:	46bd      	mov	sp, r7
   81f5a:	bc80      	pop	{r7}
   81f5c:	4770      	bx	lr
   81f5e:	bf00      	nop
   81f60:	400a4000 	.word	0x400a4000

00081f64 <udd_set_address>:


void udd_set_address(uint8_t address)
{
   81f64:	b480      	push	{r7}
   81f66:	b083      	sub	sp, #12
   81f68:	af00      	add	r7, sp, #0
   81f6a:	4603      	mov	r3, r0
   81f6c:	71fb      	strb	r3, [r7, #7]
	dbg_print("Addr%d ", address);
	udd_disable_address();
   81f6e:	4a0d      	ldr	r2, [pc, #52]	; (81fa4 <udd_set_address+0x40>)
   81f70:	4b0c      	ldr	r3, [pc, #48]	; (81fa4 <udd_set_address+0x40>)
   81f72:	681b      	ldr	r3, [r3, #0]
   81f74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   81f78:	6013      	str	r3, [r2, #0]
	udd_configure_address(address);
   81f7a:	490a      	ldr	r1, [pc, #40]	; (81fa4 <udd_set_address+0x40>)
   81f7c:	4b09      	ldr	r3, [pc, #36]	; (81fa4 <udd_set_address+0x40>)
   81f7e:	681b      	ldr	r3, [r3, #0]
   81f80:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   81f84:	79fb      	ldrb	r3, [r7, #7]
   81f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   81f8a:	4313      	orrs	r3, r2
   81f8c:	600b      	str	r3, [r1, #0]
	udd_enable_address();
   81f8e:	4a05      	ldr	r2, [pc, #20]	; (81fa4 <udd_set_address+0x40>)
   81f90:	4b04      	ldr	r3, [pc, #16]	; (81fa4 <udd_set_address+0x40>)
   81f92:	681b      	ldr	r3, [r3, #0]
   81f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81f98:	6013      	str	r3, [r2, #0]
}
   81f9a:	bf00      	nop
   81f9c:	370c      	adds	r7, #12
   81f9e:	46bd      	mov	sp, r7
   81fa0:	bc80      	pop	{r7}
   81fa2:	4770      	bx	lr
   81fa4:	400a4000 	.word	0x400a4000

00081fa8 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
   81fa8:	b480      	push	{r7}
   81faa:	af00      	add	r7, sp, #0
	return udd_get_configured_address();
   81fac:	4b04      	ldr	r3, [pc, #16]	; (81fc0 <udd_getaddress+0x18>)
   81fae:	681b      	ldr	r3, [r3, #0]
   81fb0:	b2db      	uxtb	r3, r3
   81fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   81fb6:	b2db      	uxtb	r3, r3
}
   81fb8:	4618      	mov	r0, r3
   81fba:	46bd      	mov	sp, r7
   81fbc:	bc80      	pop	{r7}
   81fbe:	4770      	bx	lr
   81fc0:	400a4000 	.word	0x400a4000

00081fc4 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
   81fc4:	b480      	push	{r7}
   81fc6:	b083      	sub	sp, #12
   81fc8:	af00      	add	r7, sp, #0
   81fca:	6078      	str	r0, [r7, #4]
   81fcc:	460b      	mov	r3, r1
   81fce:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
   81fd0:	4a05      	ldr	r2, [pc, #20]	; (81fe8 <udd_set_setup_payload+0x24>)
   81fd2:	687b      	ldr	r3, [r7, #4]
   81fd4:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   81fd6:	4a04      	ldr	r2, [pc, #16]	; (81fe8 <udd_set_setup_payload+0x24>)
   81fd8:	887b      	ldrh	r3, [r7, #2]
   81fda:	8193      	strh	r3, [r2, #12]
}
   81fdc:	bf00      	nop
   81fde:	370c      	adds	r7, #12
   81fe0:	46bd      	mov	sp, r7
   81fe2:	bc80      	pop	{r7}
   81fe4:	4770      	bx	lr
   81fe6:	bf00      	nop
   81fe8:	20000d58 	.word	0x20000d58

00081fec <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   81fec:	b590      	push	{r4, r7, lr}
   81fee:	b089      	sub	sp, #36	; 0x24
   81ff0:	af02      	add	r7, sp, #8
   81ff2:	4603      	mov	r3, r0
   81ff4:	71fb      	strb	r3, [r7, #7]
   81ff6:	460b      	mov	r3, r1
   81ff8:	71bb      	strb	r3, [r7, #6]
   81ffa:	4613      	mov	r3, r2
   81ffc:	80bb      	strh	r3, [r7, #4]
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, nb_tran = 0, i;
   81ffe:	2300      	movs	r3, #0
   82000:	74fb      	strb	r3, [r7, #19]
	bool b_iso_hbw = false;
   82002:	2300      	movs	r3, #0
   82004:	747b      	strb	r3, [r7, #17]

	b_dir_in = ep & USB_EP_DIR_IN;
   82006:	79fb      	ldrb	r3, [r7, #7]
   82008:	f003 0380 	and.w	r3, r3, #128	; 0x80
   8200c:	2b00      	cmp	r3, #0
   8200e:	bf14      	ite	ne
   82010:	2301      	movne	r3, #1
   82012:	2300      	moveq	r3, #0
   82014:	743b      	strb	r3, [r7, #16]
	ep = ep & USB_EP_ADDR_MASK;
   82016:	79fb      	ldrb	r3, [r7, #7]
   82018:	f003 030f 	and.w	r3, r3, #15
   8201c:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
   8201e:	79fb      	ldrb	r3, [r7, #7]
   82020:	2b02      	cmp	r3, #2
   82022:	d901      	bls.n	82028 <udd_ep_alloc+0x3c>
		return false;
   82024:	2300      	movs	r3, #0
   82026:	e1b2      	b.n	8238e <udd_ep_alloc+0x3a2>
	}
	if (Is_udd_endpoint_enabled(ep)) {
   82028:	4ab2      	ldr	r2, [pc, #712]	; (822f4 <udd_ep_alloc+0x308>)
   8202a:	79fb      	ldrb	r3, [r7, #7]
   8202c:	015b      	lsls	r3, r3, #5
   8202e:	4413      	add	r3, r2
   82030:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   82034:	681b      	ldr	r3, [r3, #0]
   82036:	f003 0301 	and.w	r3, r3, #1
   8203a:	2b00      	cmp	r3, #0
   8203c:	d001      	beq.n	82042 <udd_ep_alloc+0x56>
		return false;
   8203e:	2300      	movs	r3, #0
   82040:	e1a5      	b.n	8238e <udd_ep_alloc+0x3a2>
	}

	// Bank choice
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   82042:	79bb      	ldrb	r3, [r7, #6]
   82044:	f003 0303 	and.w	r3, r3, #3
   82048:	2b02      	cmp	r3, #2
   8204a:	d01a      	beq.n	82082 <udd_ep_alloc+0x96>
   8204c:	2b03      	cmp	r3, #3
   8204e:	d015      	beq.n	8207c <udd_ep_alloc+0x90>
   82050:	2b01      	cmp	r3, #1
   82052:	d119      	bne.n	82088 <udd_ep_alloc+0x9c>
	case USB_EP_TYPE_ISOCHRONOUS:
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   82054:	79fb      	ldrb	r3, [r7, #7]
   82056:	2b00      	cmp	r3, #0
   82058:	d007      	beq.n	8206a <udd_ep_alloc+0x7e>
   8205a:	79fb      	ldrb	r3, [r7, #7]
   8205c:	2b03      	cmp	r3, #3
   8205e:	d004      	beq.n	8206a <udd_ep_alloc+0x7e>
   82060:	79fb      	ldrb	r3, [r7, #7]
   82062:	2b04      	cmp	r3, #4
   82064:	d001      	beq.n	8206a <udd_ep_alloc+0x7e>
   82066:	2301      	movs	r3, #1
   82068:	e000      	b.n	8206c <udd_ep_alloc+0x80>
   8206a:	2300      	movs	r3, #0
   8206c:	747b      	strb	r3, [r7, #17]
   8206e:	7c7b      	ldrb	r3, [r7, #17]
   82070:	f003 0301 	and.w	r3, r3, #1
   82074:	747b      	strb	r3, [r7, #17]
		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
   82076:	2301      	movs	r3, #1
   82078:	757b      	strb	r3, [r7, #21]
		break;
   8207a:	e007      	b.n	8208c <udd_ep_alloc+0xa0>
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
   8207c:	2301      	movs	r3, #1
   8207e:	757b      	strb	r3, [r7, #21]
		break;
   82080:	e004      	b.n	8208c <udd_ep_alloc+0xa0>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   82082:	2302      	movs	r3, #2
   82084:	757b      	strb	r3, [r7, #21]
		break;
   82086:	e001      	b.n	8208c <udd_ep_alloc+0xa0>
	default:
		Assert(false);
		return false;
   82088:	2300      	movs	r3, #0
   8208a:	e180      	b.n	8238e <udd_ep_alloc+0x3a2>
	}
	switch (nb_bank) {
   8208c:	7d7b      	ldrb	r3, [r7, #21]
   8208e:	2b02      	cmp	r3, #2
   82090:	d006      	beq.n	820a0 <udd_ep_alloc+0xb4>
   82092:	2b03      	cmp	r3, #3
   82094:	d007      	beq.n	820a6 <udd_ep_alloc+0xba>
   82096:	2b01      	cmp	r3, #1
   82098:	d108      	bne.n	820ac <udd_ep_alloc+0xc0>
	case 1:
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   8209a:	2301      	movs	r3, #1
   8209c:	753b      	strb	r3, [r7, #20]
		break;
   8209e:	e007      	b.n	820b0 <udd_ep_alloc+0xc4>
	case 2:
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   820a0:	2302      	movs	r3, #2
   820a2:	753b      	strb	r3, [r7, #20]
		break;
   820a4:	e004      	b.n	820b0 <udd_ep_alloc+0xc4>
	case 3:
		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   820a6:	2303      	movs	r3, #3
   820a8:	753b      	strb	r3, [r7, #20]
		break;
   820aa:	e001      	b.n	820b0 <udd_ep_alloc+0xc4>
	default:
		Assert(false);
		return false;
   820ac:	2300      	movs	r3, #0
   820ae:	e16e      	b.n	8238e <udd_ep_alloc+0x3a2>
	}
	if (b_iso_hbw) {
   820b0:	7c7b      	ldrb	r3, [r7, #17]
   820b2:	2b00      	cmp	r3, #0
   820b4:	d017      	beq.n	820e6 <udd_ep_alloc+0xfa>
		switch(MaxEndpointSize & (0x3u << 11)) {
   820b6:	88bb      	ldrh	r3, [r7, #4]
   820b8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   820bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   820c0:	d003      	beq.n	820ca <udd_ep_alloc+0xde>
   820c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   820c6:	d003      	beq.n	820d0 <udd_ep_alloc+0xe4>
   820c8:	e005      	b.n	820d6 <udd_ep_alloc+0xea>
		case (0x1u << 11):
			nb_tran = 2;
   820ca:	2302      	movs	r3, #2
   820cc:	74fb      	strb	r3, [r7, #19]
			break;
   820ce:	e005      	b.n	820dc <udd_ep_alloc+0xf0>
		case (0x2u << 11):
			nb_tran = 3;
   820d0:	2303      	movs	r3, #3
   820d2:	74fb      	strb	r3, [r7, #19]
			break;
   820d4:	e002      	b.n	820dc <udd_ep_alloc+0xf0>
		default:
			nb_tran = 1;
   820d6:	2301      	movs	r3, #1
   820d8:	74fb      	strb	r3, [r7, #19]
			break;
   820da:	bf00      	nop
		}
		MaxEndpointSize &= ~(0x3u << 11);
   820dc:	88bb      	ldrh	r3, [r7, #4]
   820de:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
   820e2:	80bb      	strh	r3, [r7, #4]
   820e4:	e006      	b.n	820f4 <udd_ep_alloc+0x108>
	} else if (MaxEndpointSize & (0x3u << 11)) {
   820e6:	88bb      	ldrh	r3, [r7, #4]
   820e8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   820ec:	2b00      	cmp	r3, #0
   820ee:	d001      	beq.n	820f4 <udd_ep_alloc+0x108>
		// High BW not supported
		return false;
   820f0:	2300      	movs	r3, #0
   820f2:	e14c      	b.n	8238e <udd_ep_alloc+0x3a2>
	Assert(MaxEndpointSize <= udd_get_endpoint_size_max(ep));
	Assert(nb_bank <= udd_get_endpoint_bank_max_nbr(ep));

	// Set configuration of new endpoint
	// Note: NB_TRANS is at maximum for isochronous endpoint, else 0 (ignored).
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   820f4:	4c7f      	ldr	r4, [pc, #508]	; (822f4 <udd_ep_alloc+0x308>)
   820f6:	79f9      	ldrb	r1, [r7, #7]
   820f8:	4a7e      	ldr	r2, [pc, #504]	; (822f4 <udd_ep_alloc+0x308>)
   820fa:	79fb      	ldrb	r3, [r7, #7]
   820fc:	3308      	adds	r3, #8
   820fe:	015b      	lsls	r3, r3, #5
   82100:	4413      	add	r3, r2
   82102:	681b      	ldr	r3, [r3, #0]
   82104:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   82108:	f023 0303 	bic.w	r3, r3, #3
   8210c:	79ba      	ldrb	r2, [r7, #6]
   8210e:	0112      	lsls	r2, r2, #4
   82110:	f002 0030 	and.w	r0, r2, #48	; 0x30
   82114:	7c3a      	ldrb	r2, [r7, #16]
   82116:	2a00      	cmp	r2, #0
   82118:	d001      	beq.n	8211e <udd_ep_alloc+0x132>
   8211a:	2208      	movs	r2, #8
   8211c:	e000      	b.n	82120 <udd_ep_alloc+0x134>
   8211e:	2200      	movs	r2, #0
   82120:	4310      	orrs	r0, r2
   82122:	88ba      	ldrh	r2, [r7, #4]
   82124:	2a08      	cmp	r2, #8
   82126:	d903      	bls.n	82130 <udd_ep_alloc+0x144>
   82128:	88ba      	ldrh	r2, [r7, #4]
   8212a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   8212e:	da08      	bge.n	82142 <udd_ep_alloc+0x156>
   82130:	88ba      	ldrh	r2, [r7, #4]
   82132:	2a08      	cmp	r2, #8
   82134:	d903      	bls.n	8213e <udd_ep_alloc+0x152>
   82136:	88ba      	ldrh	r2, [r7, #4]
   82138:	0052      	lsls	r2, r2, #1
   8213a:	3a01      	subs	r2, #1
   8213c:	e003      	b.n	82146 <udd_ep_alloc+0x15a>
   8213e:	220f      	movs	r2, #15
   82140:	e001      	b.n	82146 <udd_ep_alloc+0x15a>
   82142:	f240 72ff 	movw	r2, #2047	; 0x7ff
   82146:	fab2 f282 	clz	r2, r2
   8214a:	f1c2 021c 	rsb	r2, r2, #28
   8214e:	4310      	orrs	r0, r2
   82150:	7d3a      	ldrb	r2, [r7, #20]
   82152:	0192      	lsls	r2, r2, #6
   82154:	b2d2      	uxtb	r2, r2
   82156:	4310      	orrs	r0, r2
   82158:	7c7a      	ldrb	r2, [r7, #17]
   8215a:	2a00      	cmp	r2, #0
   8215c:	d004      	beq.n	82168 <udd_ep_alloc+0x17c>
   8215e:	7cfa      	ldrb	r2, [r7, #19]
   82160:	0212      	lsls	r2, r2, #8
   82162:	f402 7240 	and.w	r2, r2, #768	; 0x300
   82166:	e000      	b.n	8216a <udd_ep_alloc+0x17e>
   82168:	2200      	movs	r2, #0
   8216a:	4302      	orrs	r2, r0
   8216c:	f3c2 0209 	ubfx	r2, r2, #0, #10
   82170:	431a      	orrs	r2, r3
   82172:	f101 0308 	add.w	r3, r1, #8
   82176:	015b      	lsls	r3, r3, #5
   82178:	4423      	add	r3, r4
   8217a:	601a      	str	r2, [r3, #0]
			MaxEndpointSize, bank, (b_iso_hbw)?nb_tran:0);
	if (!Is_udd_endpoint_mapped(ep)) {
   8217c:	4a5d      	ldr	r2, [pc, #372]	; (822f4 <udd_ep_alloc+0x308>)
   8217e:	79fb      	ldrb	r3, [r7, #7]
   82180:	3308      	adds	r3, #8
   82182:	015b      	lsls	r3, r3, #5
   82184:	4413      	add	r3, r2
   82186:	681b      	ldr	r3, [r3, #0]
   82188:	2b00      	cmp	r3, #0
   8218a:	db01      	blt.n	82190 <udd_ep_alloc+0x1a4>
		return false;
   8218c:	2300      	movs	r3, #0
   8218e:	e0fe      	b.n	8238e <udd_ep_alloc+0x3a2>
	}
	udd_enable_endpoint(ep);
   82190:	4a58      	ldr	r2, [pc, #352]	; (822f4 <udd_ep_alloc+0x308>)
   82192:	79fb      	ldrb	r3, [r7, #7]
   82194:	3308      	adds	r3, #8
   82196:	015b      	lsls	r3, r3, #5
   82198:	4413      	add	r3, r2
   8219a:	3304      	adds	r3, #4
   8219c:	2201      	movs	r2, #1
   8219e:	601a      	str	r2, [r3, #0]

	// To avoid conflict during reorganization of the DPRAM
	// the superior endpoint must be unallocated and reallocated
	ep_allocated = 0;
   821a0:	2300      	movs	r3, #0
   821a2:	82fb      	strh	r3, [r7, #22]

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   821a4:	2302      	movs	r3, #2
   821a6:	74bb      	strb	r3, [r7, #18]
   821a8:	e039      	b.n	8221e <udd_ep_alloc+0x232>
		if (Is_udd_endpoint_enabled(i)) {
   821aa:	4a52      	ldr	r2, [pc, #328]	; (822f4 <udd_ep_alloc+0x308>)
   821ac:	7cbb      	ldrb	r3, [r7, #18]
   821ae:	015b      	lsls	r3, r3, #5
   821b0:	4413      	add	r3, r2
   821b2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   821b6:	681b      	ldr	r3, [r3, #0]
   821b8:	f003 0301 	and.w	r3, r3, #1
   821bc:	2b00      	cmp	r3, #0
   821be:	d02b      	beq.n	82218 <udd_ep_alloc+0x22c>
			// Save number of bank value
			bank = udd_get_endpoint_bank(i);
   821c0:	4a4c      	ldr	r2, [pc, #304]	; (822f4 <udd_ep_alloc+0x308>)
   821c2:	7cbb      	ldrb	r3, [r7, #18]
   821c4:	3308      	adds	r3, #8
   821c6:	015b      	lsls	r3, r3, #5
   821c8:	4413      	add	r3, r2
   821ca:	681b      	ldr	r3, [r3, #0]
   821cc:	099b      	lsrs	r3, r3, #6
   821ce:	b2db      	uxtb	r3, r3
   821d0:	f003 0303 	and.w	r3, r3, #3
   821d4:	753b      	strb	r3, [r7, #20]
			ep_allocated |=  bank << (i * 2);
   821d6:	7d3a      	ldrb	r2, [r7, #20]
   821d8:	7cbb      	ldrb	r3, [r7, #18]
   821da:	005b      	lsls	r3, r3, #1
   821dc:	fa02 f303 	lsl.w	r3, r2, r3
   821e0:	b21a      	sxth	r2, r3
   821e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   821e6:	4313      	orrs	r3, r2
   821e8:	b21b      	sxth	r3, r3
   821ea:	82fb      	strh	r3, [r7, #22]
			// Disable and unallocate endpoint
			udd_disable_endpoint(i);
   821ec:	4a41      	ldr	r2, [pc, #260]	; (822f4 <udd_ep_alloc+0x308>)
   821ee:	7cbb      	ldrb	r3, [r7, #18]
   821f0:	015b      	lsls	r3, r3, #5
   821f2:	4413      	add	r3, r2
   821f4:	f503 7384 	add.w	r3, r3, #264	; 0x108
   821f8:	2201      	movs	r2, #1
   821fa:	601a      	str	r2, [r3, #0]
			udd_configure_endpoint_bank(i, 0);
   821fc:	493d      	ldr	r1, [pc, #244]	; (822f4 <udd_ep_alloc+0x308>)
   821fe:	7cbb      	ldrb	r3, [r7, #18]
   82200:	483c      	ldr	r0, [pc, #240]	; (822f4 <udd_ep_alloc+0x308>)
   82202:	7cba      	ldrb	r2, [r7, #18]
   82204:	3208      	adds	r2, #8
   82206:	0152      	lsls	r2, r2, #5
   82208:	4402      	add	r2, r0
   8220a:	6812      	ldr	r2, [r2, #0]
   8220c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   82210:	3308      	adds	r3, #8
   82212:	015b      	lsls	r3, r3, #5
   82214:	440b      	add	r3, r1
   82216:	601a      	str	r2, [r3, #0]
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   82218:	7cbb      	ldrb	r3, [r7, #18]
   8221a:	3b01      	subs	r3, #1
   8221c:	74bb      	strb	r3, [r7, #18]
   8221e:	7cba      	ldrb	r2, [r7, #18]
   82220:	79fb      	ldrb	r3, [r7, #7]
   82222:	429a      	cmp	r2, r3
   82224:	d2c1      	bcs.n	821aa <udd_ep_alloc+0x1be>

		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   82226:	79fb      	ldrb	r3, [r7, #7]
   82228:	74bb      	strb	r3, [r7, #18]
   8222a:	e0ab      	b.n	82384 <udd_ep_alloc+0x398>
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   8222c:	7cbb      	ldrb	r3, [r7, #18]
   8222e:	1e5a      	subs	r2, r3, #1
   82230:	4613      	mov	r3, r2
   82232:	005b      	lsls	r3, r3, #1
   82234:	4413      	add	r3, r2
   82236:	00db      	lsls	r3, r3, #3
   82238:	4a2f      	ldr	r2, [pc, #188]	; (822f8 <udd_ep_alloc+0x30c>)
   8223a:	4413      	add	r3, r2
   8223c:	60fb      	str	r3, [r7, #12]
		bool b_restart = ptr_job->busy;
   8223e:	68fb      	ldr	r3, [r7, #12]
   82240:	7d1b      	ldrb	r3, [r3, #20]
   82242:	f3c3 0300 	ubfx	r3, r3, #0, #1
   82246:	b2db      	uxtb	r3, r3
   82248:	2b00      	cmp	r3, #0
   8224a:	bf14      	ite	ne
   8224c:	2301      	movne	r3, #1
   8224e:	2300      	moveq	r3, #0
   82250:	72fb      	strb	r3, [r7, #11]
		// Unallocated banks?
		bank = (ep_allocated >> (i * 2)) & 0x03;
   82252:	8afa      	ldrh	r2, [r7, #22]
   82254:	7cbb      	ldrb	r3, [r7, #18]
   82256:	005b      	lsls	r3, r3, #1
   82258:	fa42 f303 	asr.w	r3, r2, r3
   8225c:	b2db      	uxtb	r3, r3
   8225e:	f003 0303 	and.w	r3, r3, #3
   82262:	753b      	strb	r3, [r7, #20]
		if (bank == 0) {
   82264:	7d3b      	ldrb	r3, [r7, #20]
   82266:	2b00      	cmp	r3, #0
   82268:	f000 8088 	beq.w	8237c <udd_ep_alloc+0x390>
			continue;
		}
		// Restart running job because
		// memory window slides up and its data is lost
		ptr_job->busy = false;
   8226c:	68fa      	ldr	r2, [r7, #12]
   8226e:	7d13      	ldrb	r3, [r2, #20]
   82270:	f36f 0300 	bfc	r3, #0, #1
   82274:	7513      	strb	r3, [r2, #20]
		// Re-allocate memory
		udd_configure_endpoint_bank(i, bank);
   82276:	481f      	ldr	r0, [pc, #124]	; (822f4 <udd_ep_alloc+0x308>)
   82278:	7cbb      	ldrb	r3, [r7, #18]
   8227a:	491e      	ldr	r1, [pc, #120]	; (822f4 <udd_ep_alloc+0x308>)
   8227c:	7cba      	ldrb	r2, [r7, #18]
   8227e:	3208      	adds	r2, #8
   82280:	0152      	lsls	r2, r2, #5
   82282:	440a      	add	r2, r1
   82284:	6812      	ldr	r2, [r2, #0]
   82286:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
   8228a:	7d3a      	ldrb	r2, [r7, #20]
   8228c:	0192      	lsls	r2, r2, #6
   8228e:	b2d2      	uxtb	r2, r2
   82290:	430a      	orrs	r2, r1
   82292:	3308      	adds	r3, #8
   82294:	015b      	lsls	r3, r3, #5
   82296:	4403      	add	r3, r0
   82298:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint(i);
   8229a:	4a16      	ldr	r2, [pc, #88]	; (822f4 <udd_ep_alloc+0x308>)
   8229c:	7cbb      	ldrb	r3, [r7, #18]
   8229e:	3308      	adds	r3, #8
   822a0:	015b      	lsls	r3, r3, #5
   822a2:	4413      	add	r3, r2
   822a4:	3304      	adds	r3, #4
   822a6:	2201      	movs	r2, #1
   822a8:	601a      	str	r2, [r3, #0]
		if (!Is_udd_endpoint_mapped(i)) {
   822aa:	4a12      	ldr	r2, [pc, #72]	; (822f4 <udd_ep_alloc+0x308>)
   822ac:	7cbb      	ldrb	r3, [r7, #18]
   822ae:	3308      	adds	r3, #8
   822b0:	015b      	lsls	r3, r3, #5
   822b2:	4413      	add	r3, r2
   822b4:	681b      	ldr	r3, [r3, #0]
   822b6:	2b00      	cmp	r3, #0
   822b8:	db20      	blt.n	822fc <udd_ep_alloc+0x310>
			dbg_print("ErrRealloc%d-JobE ", i);
			if (NULL == ptr_job->call_trans) {
   822ba:	68fb      	ldr	r3, [r7, #12]
   822bc:	681b      	ldr	r3, [r3, #0]
   822be:	2b00      	cmp	r3, #0
   822c0:	d101      	bne.n	822c6 <udd_ep_alloc+0x2da>
				return false;
   822c2:	2300      	movs	r3, #0
   822c4:	e063      	b.n	8238e <udd_ep_alloc+0x3a2>
			}
			if (Is_udd_endpoint_in(i)) {
   822c6:	4a0b      	ldr	r2, [pc, #44]	; (822f4 <udd_ep_alloc+0x308>)
   822c8:	7cbb      	ldrb	r3, [r7, #18]
   822ca:	3308      	adds	r3, #8
   822cc:	015b      	lsls	r3, r3, #5
   822ce:	4413      	add	r3, r2
   822d0:	681b      	ldr	r3, [r3, #0]
   822d2:	f003 0308 	and.w	r3, r3, #8
   822d6:	2b00      	cmp	r3, #0
   822d8:	d003      	beq.n	822e2 <udd_ep_alloc+0x2f6>
				i |= USB_EP_DIR_IN;
   822da:	7cbb      	ldrb	r3, [r7, #18]
   822dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   822e0:	74bb      	strb	r3, [r7, #18]
			}
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   822e2:	68fb      	ldr	r3, [r7, #12]
   822e4:	681b      	ldr	r3, [r3, #0]
   822e6:	68fa      	ldr	r2, [r7, #12]
   822e8:	68d1      	ldr	r1, [r2, #12]
   822ea:	7cba      	ldrb	r2, [r7, #18]
   822ec:	2001      	movs	r0, #1
   822ee:	4798      	blx	r3
					ptr_job->buf_cnt, i);
			return false;
   822f0:	2300      	movs	r3, #0
   822f2:	e04c      	b.n	8238e <udd_ep_alloc+0x3a2>
   822f4:	400a4000 	.word	0x400a4000
   822f8:	20000d08 	.word	0x20000d08
		}
		udd_enable_endpoint_bank_autoswitch(i);
   822fc:	4926      	ldr	r1, [pc, #152]	; (82398 <udd_ep_alloc+0x3ac>)
   822fe:	7cbb      	ldrb	r3, [r7, #18]
   82300:	4825      	ldr	r0, [pc, #148]	; (82398 <udd_ep_alloc+0x3ac>)
   82302:	7cba      	ldrb	r2, [r7, #18]
   82304:	3208      	adds	r2, #8
   82306:	0152      	lsls	r2, r2, #5
   82308:	4402      	add	r2, r0
   8230a:	3204      	adds	r2, #4
   8230c:	6812      	ldr	r2, [r2, #0]
   8230e:	f042 0202 	orr.w	r2, r2, #2
   82312:	3308      	adds	r3, #8
   82314:	015b      	lsls	r3, r3, #5
   82316:	440b      	add	r3, r1
   82318:	3304      	adds	r3, #4
   8231a:	601a      	str	r2, [r3, #0]
		if (b_restart) {
   8231c:	7afb      	ldrb	r3, [r7, #11]
   8231e:	2b00      	cmp	r3, #0
   82320:	d02d      	beq.n	8237e <udd_ep_alloc+0x392>
			// Re-run the job remaining part
			ptr_job->buf_cnt -= ptr_job->buf_load;
   82322:	68fb      	ldr	r3, [r7, #12]
   82324:	68da      	ldr	r2, [r3, #12]
   82326:	68fb      	ldr	r3, [r7, #12]
   82328:	691b      	ldr	r3, [r3, #16]
   8232a:	1ad2      	subs	r2, r2, r3
   8232c:	68fb      	ldr	r3, [r7, #12]
   8232e:	60da      	str	r2, [r3, #12]
			b_restart = udd_ep_run(i,
					ptr_job->b_shortpacket,
   82330:	68fb      	ldr	r3, [r7, #12]
   82332:	7d1b      	ldrb	r3, [r3, #20]
   82334:	f3c3 0340 	ubfx	r3, r3, #1, #1
   82338:	b2db      	uxtb	r3, r3
			b_restart = udd_ep_run(i,
   8233a:	2b00      	cmp	r3, #0
   8233c:	bf14      	ite	ne
   8233e:	2301      	movne	r3, #1
   82340:	2300      	moveq	r3, #0
   82342:	b2d9      	uxtb	r1, r3
					&ptr_job->buf[ptr_job->buf_cnt],
   82344:	68fb      	ldr	r3, [r7, #12]
   82346:	685a      	ldr	r2, [r3, #4]
   82348:	68fb      	ldr	r3, [r7, #12]
   8234a:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   8234c:	18d4      	adds	r4, r2, r3
					ptr_job->buf_size
   8234e:	68fb      	ldr	r3, [r7, #12]
   82350:	689a      	ldr	r2, [r3, #8]
						- ptr_job->buf_cnt,
   82352:	68fb      	ldr	r3, [r7, #12]
   82354:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   82356:	1ad2      	subs	r2, r2, r3
   82358:	68fb      	ldr	r3, [r7, #12]
   8235a:	681b      	ldr	r3, [r3, #0]
   8235c:	7cb8      	ldrb	r0, [r7, #18]
   8235e:	9300      	str	r3, [sp, #0]
   82360:	4613      	mov	r3, r2
   82362:	4622      	mov	r2, r4
   82364:	4c0d      	ldr	r4, [pc, #52]	; (8239c <udd_ep_alloc+0x3b0>)
   82366:	47a0      	blx	r4
   82368:	4603      	mov	r3, r0
   8236a:	72fb      	strb	r3, [r7, #11]
					ptr_job->call_trans);
			if (!b_restart) {
   8236c:	7afb      	ldrb	r3, [r7, #11]
   8236e:	f083 0301 	eor.w	r3, r3, #1
   82372:	b2db      	uxtb	r3, r3
   82374:	2b00      	cmp	r3, #0
   82376:	d002      	beq.n	8237e <udd_ep_alloc+0x392>
				dbg_print("ErrReRun%d ", i);
				return false;
   82378:	2300      	movs	r3, #0
   8237a:	e008      	b.n	8238e <udd_ep_alloc+0x3a2>
			continue;
   8237c:	bf00      	nop
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   8237e:	7cbb      	ldrb	r3, [r7, #18]
   82380:	3301      	adds	r3, #1
   82382:	74bb      	strb	r3, [r7, #18]
   82384:	7cbb      	ldrb	r3, [r7, #18]
   82386:	2b02      	cmp	r3, #2
   82388:	f67f af50 	bls.w	8222c <udd_ep_alloc+0x240>
			}
		}
	}
	dbg_print("ep_alloc(%d:%08x) ", ep, UDPHS->UDPHS_EPT[ep].UDPHS_EPTCFG);
	return true;
   8238c:	2301      	movs	r3, #1
}
   8238e:	4618      	mov	r0, r3
   82390:	371c      	adds	r7, #28
   82392:	46bd      	mov	sp, r7
   82394:	bd90      	pop	{r4, r7, pc}
   82396:	bf00      	nop
   82398:	400a4000 	.word	0x400a4000
   8239c:	000826cd 	.word	0x000826cd

000823a0 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
   823a0:	b580      	push	{r7, lr}
   823a2:	b084      	sub	sp, #16
   823a4:	af00      	add	r7, sp, #0
   823a6:	4603      	mov	r3, r0
   823a8:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   823aa:	79fb      	ldrb	r3, [r7, #7]
   823ac:	f003 030f 	and.w	r3, r3, #15
   823b0:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   823b2:	7bfb      	ldrb	r3, [r7, #15]
   823b4:	2b02      	cmp	r3, #2
   823b6:	d828      	bhi.n	8240a <udd_ep_free+0x6a>
		return;
	}
	udd_disable_endpoint(ep_index);
   823b8:	4a16      	ldr	r2, [pc, #88]	; (82414 <udd_ep_free+0x74>)
   823ba:	7bfb      	ldrb	r3, [r7, #15]
   823bc:	015b      	lsls	r3, r3, #5
   823be:	4413      	add	r3, r2
   823c0:	f503 7384 	add.w	r3, r3, #264	; 0x108
   823c4:	2201      	movs	r2, #1
   823c6:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint_bank(ep_index, 0);
   823c8:	4912      	ldr	r1, [pc, #72]	; (82414 <udd_ep_free+0x74>)
   823ca:	7bfb      	ldrb	r3, [r7, #15]
   823cc:	4811      	ldr	r0, [pc, #68]	; (82414 <udd_ep_free+0x74>)
   823ce:	7bfa      	ldrb	r2, [r7, #15]
   823d0:	3208      	adds	r2, #8
   823d2:	0152      	lsls	r2, r2, #5
   823d4:	4402      	add	r2, r0
   823d6:	6812      	ldr	r2, [r2, #0]
   823d8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   823dc:	3308      	adds	r3, #8
   823de:	015b      	lsls	r3, r3, #5
   823e0:	440b      	add	r3, r1
   823e2:	601a      	str	r2, [r3, #0]
	udd_ep_abort_job(ep);
   823e4:	79fb      	ldrb	r3, [r7, #7]
   823e6:	4618      	mov	r0, r3
   823e8:	4b0b      	ldr	r3, [pc, #44]	; (82418 <udd_ep_free+0x78>)
   823ea:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   823ec:	7bfb      	ldrb	r3, [r7, #15]
   823ee:	1e5a      	subs	r2, r3, #1
   823f0:	490a      	ldr	r1, [pc, #40]	; (8241c <udd_ep_free+0x7c>)
   823f2:	4613      	mov	r3, r2
   823f4:	005b      	lsls	r3, r3, #1
   823f6:	4413      	add	r3, r2
   823f8:	00db      	lsls	r3, r3, #3
   823fa:	440b      	add	r3, r1
   823fc:	f103 0210 	add.w	r2, r3, #16
   82400:	7913      	ldrb	r3, [r2, #4]
   82402:	f36f 0382 	bfc	r3, #2, #1
   82406:	7113      	strb	r3, [r2, #4]
   82408:	e000      	b.n	8240c <udd_ep_free+0x6c>
		return;
   8240a:	bf00      	nop
}
   8240c:	3710      	adds	r7, #16
   8240e:	46bd      	mov	sp, r7
   82410:	bd80      	pop	{r7, pc}
   82412:	bf00      	nop
   82414:	400a4000 	.word	0x400a4000
   82418:	000831dd 	.word	0x000831dd
   8241c:	20000d08 	.word	0x20000d08

00082420 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
   82420:	b480      	push	{r7}
   82422:	b085      	sub	sp, #20
   82424:	af00      	add	r7, sp, #0
   82426:	4603      	mov	r3, r0
   82428:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8242a:	79fb      	ldrb	r3, [r7, #7]
   8242c:	f003 030f 	and.w	r3, r3, #15
   82430:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   82432:	7bfb      	ldrb	r3, [r7, #15]
   82434:	1e5a      	subs	r2, r3, #1
   82436:	4613      	mov	r3, r2
   82438:	005b      	lsls	r3, r3, #1
   8243a:	4413      	add	r3, r2
   8243c:	00db      	lsls	r3, r3, #3
   8243e:	4a10      	ldr	r2, [pc, #64]	; (82480 <udd_ep_is_halted+0x60>)
   82440:	4413      	add	r3, r2
   82442:	60bb      	str	r3, [r7, #8]
	return (Is_udd_endpoint_stall_requested(ep_index)
   82444:	4a0f      	ldr	r2, [pc, #60]	; (82484 <udd_ep_is_halted+0x64>)
   82446:	7bfb      	ldrb	r3, [r7, #15]
   82448:	015b      	lsls	r3, r3, #5
   8244a:	4413      	add	r3, r2
   8244c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   82450:	681b      	ldr	r3, [r3, #0]
   82452:	f003 0320 	and.w	r3, r3, #32
			|| ptr_job->stall_requested);
   82456:	2b00      	cmp	r3, #0
   82458:	d106      	bne.n	82468 <udd_ep_is_halted+0x48>
   8245a:	68bb      	ldr	r3, [r7, #8]
   8245c:	7d1b      	ldrb	r3, [r3, #20]
   8245e:	f003 0304 	and.w	r3, r3, #4
   82462:	b2db      	uxtb	r3, r3
   82464:	2b00      	cmp	r3, #0
   82466:	d001      	beq.n	8246c <udd_ep_is_halted+0x4c>
   82468:	2301      	movs	r3, #1
   8246a:	e000      	b.n	8246e <udd_ep_is_halted+0x4e>
   8246c:	2300      	movs	r3, #0
   8246e:	f003 0301 	and.w	r3, r3, #1
   82472:	b2db      	uxtb	r3, r3
}
   82474:	4618      	mov	r0, r3
   82476:	3714      	adds	r7, #20
   82478:	46bd      	mov	sp, r7
   8247a:	bc80      	pop	{r7}
   8247c:	4770      	bx	lr
   8247e:	bf00      	nop
   82480:	20000d08 	.word	0x20000d08
   82484:	400a4000 	.word	0x400a4000

00082488 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   82488:	b480      	push	{r7}
   8248a:	b085      	sub	sp, #20
   8248c:	af00      	add	r7, sp, #0
   8248e:	4603      	mov	r3, r0
   82490:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82492:	79fb      	ldrb	r3, [r7, #7]
   82494:	f003 030f 	and.w	r3, r3, #15
   82498:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   8249a:	7bfb      	ldrb	r3, [r7, #15]
   8249c:	2b02      	cmp	r3, #2
   8249e:	d901      	bls.n	824a4 <udd_ep_set_halt+0x1c>
		return false;
   824a0:	2300      	movs	r3, #0
   824a2:	e071      	b.n	82588 <udd_ep_set_halt+0x100>
	}

	ptr_job = &udd_ep_job[ep_index - 1];
   824a4:	7bfb      	ldrb	r3, [r7, #15]
   824a6:	1e5a      	subs	r2, r3, #1
   824a8:	4613      	mov	r3, r2
   824aa:	005b      	lsls	r3, r3, #1
   824ac:	4413      	add	r3, r2
   824ae:	00db      	lsls	r3, r3, #3
   824b0:	4a38      	ldr	r2, [pc, #224]	; (82594 <udd_ep_set_halt+0x10c>)
   824b2:	4413      	add	r3, r2
   824b4:	60bb      	str	r3, [r7, #8]

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   824b6:	4a38      	ldr	r2, [pc, #224]	; (82598 <udd_ep_set_halt+0x110>)
   824b8:	7bfb      	ldrb	r3, [r7, #15]
   824ba:	015b      	lsls	r3, r3, #5
   824bc:	4413      	add	r3, r2
   824be:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   824c2:	681b      	ldr	r3, [r3, #0]
   824c4:	f003 0320 	and.w	r3, r3, #32
   824c8:	2b00      	cmp	r3, #0
   824ca:	d106      	bne.n	824da <udd_ep_set_halt+0x52>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   824cc:	68bb      	ldr	r3, [r7, #8]
   824ce:	7d1b      	ldrb	r3, [r3, #20]
   824d0:	f003 0304 	and.w	r3, r3, #4
   824d4:	b2db      	uxtb	r3, r3
   824d6:	2b00      	cmp	r3, #0
   824d8:	d001      	beq.n	824de <udd_ep_set_halt+0x56>
		return true; // Already STALL
   824da:	2301      	movs	r3, #1
   824dc:	e054      	b.n	82588 <udd_ep_set_halt+0x100>
	}

	if (ptr_job->busy == true) {
   824de:	68bb      	ldr	r3, [r7, #8]
   824e0:	7d1b      	ldrb	r3, [r3, #20]
   824e2:	f003 0301 	and.w	r3, r3, #1
   824e6:	b2db      	uxtb	r3, r3
   824e8:	2b00      	cmp	r3, #0
   824ea:	d001      	beq.n	824f0 <udd_ep_set_halt+0x68>
		return false; // Job on going, stall impossible
   824ec:	2300      	movs	r3, #0
   824ee:	e04b      	b.n	82588 <udd_ep_set_halt+0x100>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   824f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   824f4:	2b00      	cmp	r3, #0
   824f6:	da25      	bge.n	82544 <udd_ep_set_halt+0xbc>
   824f8:	4a27      	ldr	r2, [pc, #156]	; (82598 <udd_ep_set_halt+0x110>)
   824fa:	7bfb      	ldrb	r3, [r7, #15]
   824fc:	015b      	lsls	r3, r3, #5
   824fe:	4413      	add	r3, r2
   82500:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   82504:	681b      	ldr	r3, [r3, #0]
   82506:	0c9b      	lsrs	r3, r3, #18
   82508:	f003 0303 	and.w	r3, r3, #3
   8250c:	2b00      	cmp	r3, #0
   8250e:	d019      	beq.n	82544 <udd_ep_set_halt+0xbc>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
   82510:	68ba      	ldr	r2, [r7, #8]
   82512:	7d13      	ldrb	r3, [r2, #20]
   82514:	f043 0304 	orr.w	r3, r3, #4
   82518:	7513      	strb	r3, [r2, #20]
			udd_enable_bank_interrupt(ep_index);
   8251a:	4a1f      	ldr	r2, [pc, #124]	; (82598 <udd_ep_set_halt+0x110>)
   8251c:	7bfb      	ldrb	r3, [r7, #15]
   8251e:	3308      	adds	r3, #8
   82520:	015b      	lsls	r3, r3, #5
   82522:	4413      	add	r3, r2
   82524:	3304      	adds	r3, #4
   82526:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   8252a:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep_index);
   8252c:	491a      	ldr	r1, [pc, #104]	; (82598 <udd_ep_set_halt+0x110>)
   8252e:	4b1a      	ldr	r3, [pc, #104]	; (82598 <udd_ep_set_halt+0x110>)
   82530:	691a      	ldr	r2, [r3, #16]
   82532:	7bfb      	ldrb	r3, [r7, #15]
   82534:	f44f 7080 	mov.w	r0, #256	; 0x100
   82538:	fa00 f303 	lsl.w	r3, r0, r3
   8253c:	4313      	orrs	r3, r2
   8253e:	610b      	str	r3, [r1, #16]
			dbg_print("<reqHalt%x> ", ep);
			return true;
   82540:	2301      	movs	r3, #1
   82542:	e021      	b.n	82588 <udd_ep_set_halt+0x100>
	}

	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   82544:	4914      	ldr	r1, [pc, #80]	; (82598 <udd_ep_set_halt+0x110>)
   82546:	7bfb      	ldrb	r3, [r7, #15]
   82548:	4813      	ldr	r0, [pc, #76]	; (82598 <udd_ep_set_halt+0x110>)
   8254a:	7bfa      	ldrb	r2, [r7, #15]
   8254c:	0152      	lsls	r2, r2, #5
   8254e:	4402      	add	r2, r0
   82550:	f502 7284 	add.w	r2, r2, #264	; 0x108
   82554:	6812      	ldr	r2, [r2, #0]
   82556:	f022 0202 	bic.w	r2, r2, #2
   8255a:	015b      	lsls	r3, r3, #5
   8255c:	440b      	add	r3, r1
   8255e:	f503 7384 	add.w	r3, r3, #264	; 0x108
   82562:	601a      	str	r2, [r3, #0]
	udd_ack_stall(ep_index);
   82564:	4a0c      	ldr	r2, [pc, #48]	; (82598 <udd_ep_set_halt+0x110>)
   82566:	7bfb      	ldrb	r3, [r7, #15]
   82568:	015b      	lsls	r3, r3, #5
   8256a:	4413      	add	r3, r2
   8256c:	f503 738c 	add.w	r3, r3, #280	; 0x118
   82570:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   82574:	601a      	str	r2, [r3, #0]
	udd_enable_stall_handshake(ep_index);
   82576:	4a08      	ldr	r2, [pc, #32]	; (82598 <udd_ep_set_halt+0x110>)
   82578:	7bfb      	ldrb	r3, [r7, #15]
   8257a:	015b      	lsls	r3, r3, #5
   8257c:	4413      	add	r3, r2
   8257e:	f503 738a 	add.w	r3, r3, #276	; 0x114
   82582:	2220      	movs	r2, #32
   82584:	601a      	str	r2, [r3, #0]
	dbg_print("<Halt%x> ", ep);
	return true;
   82586:	2301      	movs	r3, #1
}
   82588:	4618      	mov	r0, r3
   8258a:	3714      	adds	r7, #20
   8258c:	46bd      	mov	sp, r7
   8258e:	bc80      	pop	{r7}
   82590:	4770      	bx	lr
   82592:	bf00      	nop
   82594:	20000d08 	.word	0x20000d08
   82598:	400a4000 	.word	0x400a4000

0008259c <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   8259c:	b580      	push	{r7, lr}
   8259e:	b084      	sub	sp, #16
   825a0:	af00      	add	r7, sp, #0
   825a2:	4603      	mov	r3, r0
   825a4:	71fb      	strb	r3, [r7, #7]
	bool b_stall_cleared = false;
   825a6:	2300      	movs	r3, #0
   825a8:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   825aa:	79fb      	ldrb	r3, [r7, #7]
   825ac:	f003 030f 	and.w	r3, r3, #15
   825b0:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
   825b2:	79fb      	ldrb	r3, [r7, #7]
   825b4:	2b02      	cmp	r3, #2
   825b6:	d901      	bls.n	825bc <udd_ep_clear_halt+0x20>
		return false;
   825b8:	2300      	movs	r3, #0
   825ba:	e07e      	b.n	826ba <udd_ep_clear_halt+0x11e>
	ptr_job = &udd_ep_job[ep - 1];
   825bc:	79fb      	ldrb	r3, [r7, #7]
   825be:	1e5a      	subs	r2, r3, #1
   825c0:	4613      	mov	r3, r2
   825c2:	005b      	lsls	r3, r3, #1
   825c4:	4413      	add	r3, r2
   825c6:	00db      	lsls	r3, r3, #3
   825c8:	4a3e      	ldr	r2, [pc, #248]	; (826c4 <udd_ep_clear_halt+0x128>)
   825ca:	4413      	add	r3, r2
   825cc:	60bb      	str	r3, [r7, #8]

	if (ptr_job->stall_requested) {
   825ce:	68bb      	ldr	r3, [r7, #8]
   825d0:	7d1b      	ldrb	r3, [r3, #20]
   825d2:	f003 0304 	and.w	r3, r3, #4
   825d6:	b2db      	uxtb	r3, r3
   825d8:	2b00      	cmp	r3, #0
   825da:	d01a      	beq.n	82612 <udd_ep_clear_halt+0x76>
		// Endpoint stall has been requested but not done
		// Remove stall request
		dbg_print("<unWHalt%x> ", ep);
		ptr_job->stall_requested = false;
   825dc:	68ba      	ldr	r2, [r7, #8]
   825de:	7d13      	ldrb	r3, [r2, #20]
   825e0:	f36f 0382 	bfc	r3, #2, #1
   825e4:	7513      	strb	r3, [r2, #20]
		udd_disable_bank_interrupt(ep);
   825e6:	4a38      	ldr	r2, [pc, #224]	; (826c8 <udd_ep_clear_halt+0x12c>)
   825e8:	79fb      	ldrb	r3, [r7, #7]
   825ea:	015b      	lsls	r3, r3, #5
   825ec:	4413      	add	r3, r2
   825ee:	f503 7384 	add.w	r3, r3, #264	; 0x108
   825f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   825f6:	601a      	str	r2, [r3, #0]
		udd_disable_endpoint_interrupt(ep);
   825f8:	4933      	ldr	r1, [pc, #204]	; (826c8 <udd_ep_clear_halt+0x12c>)
   825fa:	4b33      	ldr	r3, [pc, #204]	; (826c8 <udd_ep_clear_halt+0x12c>)
   825fc:	691a      	ldr	r2, [r3, #16]
   825fe:	79fb      	ldrb	r3, [r7, #7]
   82600:	f44f 7080 	mov.w	r0, #256	; 0x100
   82604:	fa00 f303 	lsl.w	r3, r0, r3
   82608:	43db      	mvns	r3, r3
   8260a:	4013      	ands	r3, r2
   8260c:	610b      	str	r3, [r1, #16]
		b_stall_cleared = true;
   8260e:	2301      	movs	r3, #1
   82610:	73fb      	strb	r3, [r7, #15]
	}
	if (Is_udd_endpoint_stall_requested(ep)) {
   82612:	4a2d      	ldr	r2, [pc, #180]	; (826c8 <udd_ep_clear_halt+0x12c>)
   82614:	79fb      	ldrb	r3, [r7, #7]
   82616:	015b      	lsls	r3, r3, #5
   82618:	4413      	add	r3, r2
   8261a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8261e:	681b      	ldr	r3, [r3, #0]
   82620:	f003 0320 	and.w	r3, r3, #32
   82624:	2b00      	cmp	r3, #0
   82626:	d035      	beq.n	82694 <udd_ep_clear_halt+0xf8>
		dbg_print("<unHalt%x> ", ep);
		if (Is_udd_stall(ep)) {
   82628:	4a27      	ldr	r2, [pc, #156]	; (826c8 <udd_ep_clear_halt+0x12c>)
   8262a:	79fb      	ldrb	r3, [r7, #7]
   8262c:	015b      	lsls	r3, r3, #5
   8262e:	4413      	add	r3, r2
   82630:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   82634:	681b      	ldr	r3, [r3, #0]
   82636:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   8263a:	2b00      	cmp	r3, #0
   8263c:	d010      	beq.n	82660 <udd_ep_clear_halt+0xc4>
			udd_ack_stall(ep);
   8263e:	4a22      	ldr	r2, [pc, #136]	; (826c8 <udd_ep_clear_halt+0x12c>)
   82640:	79fb      	ldrb	r3, [r7, #7]
   82642:	015b      	lsls	r3, r3, #5
   82644:	4413      	add	r3, r2
   82646:	f503 738c 	add.w	r3, r3, #280	; 0x118
   8264a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8264e:	601a      	str	r2, [r3, #0]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
   82650:	4a1d      	ldr	r2, [pc, #116]	; (826c8 <udd_ep_clear_halt+0x12c>)
   82652:	79fb      	ldrb	r3, [r7, #7]
   82654:	015b      	lsls	r3, r3, #5
   82656:	4413      	add	r3, r2
   82658:	f503 738c 	add.w	r3, r3, #280	; 0x118
   8265c:	2240      	movs	r2, #64	; 0x40
   8265e:	601a      	str	r2, [r3, #0]
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
   82660:	4a19      	ldr	r2, [pc, #100]	; (826c8 <udd_ep_clear_halt+0x12c>)
   82662:	79fb      	ldrb	r3, [r7, #7]
   82664:	015b      	lsls	r3, r3, #5
   82666:	4413      	add	r3, r2
   82668:	f503 738c 	add.w	r3, r3, #280	; 0x118
   8266c:	2220      	movs	r2, #32
   8266e:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_bank_autoswitch(ep);
   82670:	4915      	ldr	r1, [pc, #84]	; (826c8 <udd_ep_clear_halt+0x12c>)
   82672:	79fb      	ldrb	r3, [r7, #7]
   82674:	4814      	ldr	r0, [pc, #80]	; (826c8 <udd_ep_clear_halt+0x12c>)
   82676:	79fa      	ldrb	r2, [r7, #7]
   82678:	3208      	adds	r2, #8
   8267a:	0152      	lsls	r2, r2, #5
   8267c:	4402      	add	r2, r0
   8267e:	3204      	adds	r2, #4
   82680:	6812      	ldr	r2, [r2, #0]
   82682:	f042 0202 	orr.w	r2, r2, #2
   82686:	3308      	adds	r3, #8
   82688:	015b      	lsls	r3, r3, #5
   8268a:	440b      	add	r3, r1
   8268c:	3304      	adds	r3, #4
   8268e:	601a      	str	r2, [r3, #0]
		b_stall_cleared = true;
   82690:	2301      	movs	r3, #1
   82692:	73fb      	strb	r3, [r7, #15]
	}
	if (b_stall_cleared) {
   82694:	7bfb      	ldrb	r3, [r7, #15]
   82696:	2b00      	cmp	r3, #0
   82698:	d00e      	beq.n	826b8 <udd_ep_clear_halt+0x11c>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   8269a:	68bb      	ldr	r3, [r7, #8]
   8269c:	7d1b      	ldrb	r3, [r3, #20]
   8269e:	f003 0301 	and.w	r3, r3, #1
   826a2:	b2db      	uxtb	r3, r3
   826a4:	2b00      	cmp	r3, #0
   826a6:	d007      	beq.n	826b8 <udd_ep_clear_halt+0x11c>
			ptr_job->busy = false;
   826a8:	68ba      	ldr	r2, [r7, #8]
   826aa:	7d13      	ldrb	r3, [r2, #20]
   826ac:	f36f 0300 	bfc	r3, #0, #1
   826b0:	7513      	strb	r3, [r2, #20]
			ptr_job->call_nohalt();
   826b2:	68bb      	ldr	r3, [r7, #8]
   826b4:	681b      	ldr	r3, [r3, #0]
   826b6:	4798      	blx	r3
		}
	}
	return true;
   826b8:	2301      	movs	r3, #1
}
   826ba:	4618      	mov	r0, r3
   826bc:	3710      	adds	r7, #16
   826be:	46bd      	mov	sp, r7
   826c0:	bd80      	pop	{r7, pc}
   826c2:	bf00      	nop
   826c4:	20000d08 	.word	0x20000d08
   826c8:	400a4000 	.word	0x400a4000

000826cc <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   826cc:	b580      	push	{r7, lr}
   826ce:	b086      	sub	sp, #24
   826d0:	af00      	add	r7, sp, #0
   826d2:	60ba      	str	r2, [r7, #8]
   826d4:	607b      	str	r3, [r7, #4]
   826d6:	4603      	mov	r3, r0
   826d8:	73fb      	strb	r3, [r7, #15]
   826da:	460b      	mov	r3, r1
   826dc:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   826de:	7bfb      	ldrb	r3, [r7, #15]
   826e0:	f003 030f 	and.w	r3, r3, #15
   826e4:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
   826e6:	7bfb      	ldrb	r3, [r7, #15]
   826e8:	2b02      	cmp	r3, #2
   826ea:	d901      	bls.n	826f0 <udd_ep_run+0x24>
		return false;
   826ec:	2300      	movs	r3, #0
   826ee:	e064      	b.n	827ba <udd_ep_run+0xee>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   826f0:	7bfb      	ldrb	r3, [r7, #15]
   826f2:	1e5a      	subs	r2, r3, #1
   826f4:	4613      	mov	r3, r2
   826f6:	005b      	lsls	r3, r3, #1
   826f8:	4413      	add	r3, r2
   826fa:	00db      	lsls	r3, r3, #3
   826fc:	4a31      	ldr	r2, [pc, #196]	; (827c4 <udd_ep_run+0xf8>)
   826fe:	4413      	add	r3, r2
   82700:	617b      	str	r3, [r7, #20]

	if ((!Is_udd_endpoint_enabled(ep))
   82702:	4a31      	ldr	r2, [pc, #196]	; (827c8 <udd_ep_run+0xfc>)
   82704:	7bfb      	ldrb	r3, [r7, #15]
   82706:	015b      	lsls	r3, r3, #5
   82708:	4413      	add	r3, r2
   8270a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   8270e:	681b      	ldr	r3, [r3, #0]
   82710:	f003 0301 	and.w	r3, r3, #1
   82714:	2b00      	cmp	r3, #0
   82716:	d011      	beq.n	8273c <udd_ep_run+0x70>
			|| Is_udd_endpoint_stall_requested(ep)
   82718:	4a2b      	ldr	r2, [pc, #172]	; (827c8 <udd_ep_run+0xfc>)
   8271a:	7bfb      	ldrb	r3, [r7, #15]
   8271c:	015b      	lsls	r3, r3, #5
   8271e:	4413      	add	r3, r2
   82720:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   82724:	681b      	ldr	r3, [r3, #0]
   82726:	f003 0320 	and.w	r3, r3, #32
   8272a:	2b00      	cmp	r3, #0
   8272c:	d106      	bne.n	8273c <udd_ep_run+0x70>
			|| ptr_job->stall_requested) {
   8272e:	697b      	ldr	r3, [r7, #20]
   82730:	7d1b      	ldrb	r3, [r3, #20]
   82732:	f003 0304 	and.w	r3, r3, #4
   82736:	b2db      	uxtb	r3, r3
   82738:	2b00      	cmp	r3, #0
   8273a:	d001      	beq.n	82740 <udd_ep_run+0x74>
		return false; // Endpoint is halted
   8273c:	2300      	movs	r3, #0
   8273e:	e03c      	b.n	827ba <udd_ep_run+0xee>
	}

	flags = cpu_irq_save();
   82740:	4b22      	ldr	r3, [pc, #136]	; (827cc <udd_ep_run+0x100>)
   82742:	4798      	blx	r3
   82744:	6138      	str	r0, [r7, #16]
	if (ptr_job->busy == true) {
   82746:	697b      	ldr	r3, [r7, #20]
   82748:	7d1b      	ldrb	r3, [r3, #20]
   8274a:	f003 0301 	and.w	r3, r3, #1
   8274e:	b2db      	uxtb	r3, r3
   82750:	2b00      	cmp	r3, #0
   82752:	d004      	beq.n	8275e <udd_ep_run+0x92>
		cpu_irq_restore(flags);
   82754:	6938      	ldr	r0, [r7, #16]
   82756:	4b1e      	ldr	r3, [pc, #120]	; (827d0 <udd_ep_run+0x104>)
   82758:	4798      	blx	r3
		return false; // Job already on going
   8275a:	2300      	movs	r3, #0
   8275c:	e02d      	b.n	827ba <udd_ep_run+0xee>
	}
	ptr_job->busy = true;
   8275e:	697a      	ldr	r2, [r7, #20]
   82760:	7d13      	ldrb	r3, [r2, #20]
   82762:	f043 0301 	orr.w	r3, r3, #1
   82766:	7513      	strb	r3, [r2, #20]
	cpu_irq_restore(flags);
   82768:	6938      	ldr	r0, [r7, #16]
   8276a:	4b19      	ldr	r3, [pc, #100]	; (827d0 <udd_ep_run+0x104>)
   8276c:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   8276e:	697b      	ldr	r3, [r7, #20]
   82770:	68ba      	ldr	r2, [r7, #8]
   82772:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
   82774:	697b      	ldr	r3, [r7, #20]
   82776:	687a      	ldr	r2, [r7, #4]
   82778:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
   8277a:	697b      	ldr	r3, [r7, #20]
   8277c:	2200      	movs	r2, #0
   8277e:	60da      	str	r2, [r3, #12]
	ptr_job->buf_load = 0;
   82780:	697b      	ldr	r3, [r7, #20]
   82782:	2200      	movs	r2, #0
   82784:	611a      	str	r2, [r3, #16]
	ptr_job->call_trans = callback;
   82786:	697b      	ldr	r3, [r7, #20]
   82788:	6a3a      	ldr	r2, [r7, #32]
   8278a:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   8278c:	7bbb      	ldrb	r3, [r7, #14]
   8278e:	2b00      	cmp	r3, #0
   82790:	d102      	bne.n	82798 <udd_ep_run+0xcc>
   82792:	687b      	ldr	r3, [r7, #4]
   82794:	2b00      	cmp	r3, #0
   82796:	d101      	bne.n	8279c <udd_ep_run+0xd0>
   82798:	2301      	movs	r3, #1
   8279a:	e000      	b.n	8279e <udd_ep_run+0xd2>
   8279c:	2300      	movs	r3, #0
   8279e:	b2db      	uxtb	r3, r3
   827a0:	f003 0301 	and.w	r3, r3, #1
   827a4:	b2d9      	uxtb	r1, r3
   827a6:	697a      	ldr	r2, [r7, #20]
   827a8:	7d13      	ldrb	r3, [r2, #20]
   827aa:	f361 0341 	bfi	r3, r1, #1, #1
   827ae:	7513      	strb	r3, [r2, #20]

	// Request first DMA transfer
	//dbg_print("runDMA%d\n\r", ep);
	udd_ep_trans_done(ep);
   827b0:	7bfb      	ldrb	r3, [r7, #15]
   827b2:	4618      	mov	r0, r3
   827b4:	4b07      	ldr	r3, [pc, #28]	; (827d4 <udd_ep_run+0x108>)
   827b6:	4798      	blx	r3
	return true;
   827b8:	2301      	movs	r3, #1
}
   827ba:	4618      	mov	r0, r3
   827bc:	3718      	adds	r7, #24
   827be:	46bd      	mov	sp, r7
   827c0:	bd80      	pop	{r7, pc}
   827c2:	bf00      	nop
   827c4:	20000d08 	.word	0x20000d08
   827c8:	400a4000 	.word	0x400a4000
   827cc:	00081a99 	.word	0x00081a99
   827d0:	00081af1 	.word	0x00081af1
   827d4:	00083289 	.word	0x00083289

000827d8 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
   827d8:	b580      	push	{r7, lr}
   827da:	b084      	sub	sp, #16
   827dc:	af00      	add	r7, sp, #0
   827de:	4603      	mov	r3, r0
   827e0:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   827e2:	79fb      	ldrb	r3, [r7, #7]
   827e4:	f003 030f 	and.w	r3, r3, #15
   827e8:	73fb      	strb	r3, [r7, #15]
	// Stop DMA transfer
	udd_endpoint_dma_set_control(ep_index, 0);
   827ea:	7bfb      	ldrb	r3, [r7, #15]
   827ec:	011a      	lsls	r2, r3, #4
   827ee:	4b19      	ldr	r3, [pc, #100]	; (82854 <udd_ep_abort+0x7c>)
   827f0:	4413      	add	r3, r2
   827f2:	2200      	movs	r2, #0
   827f4:	609a      	str	r2, [r3, #8]
	// Kill banks for IN
	if (ep & USB_EP_DIR_IN) {
   827f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   827fa:	2b00      	cmp	r3, #0
   827fc:	da21      	bge.n	82842 <udd_ep_abort+0x6a>
		for(;udd_nb_busy_bank(ep_index);) {
   827fe:	e014      	b.n	8282a <udd_ep_abort+0x52>
			udd_kill_last_in_bank(ep_index);
   82800:	4a15      	ldr	r2, [pc, #84]	; (82858 <udd_ep_abort+0x80>)
   82802:	7bfb      	ldrb	r3, [r7, #15]
   82804:	015b      	lsls	r3, r3, #5
   82806:	4413      	add	r3, r2
   82808:	f503 738a 	add.w	r3, r3, #276	; 0x114
   8280c:	f44f 7200 	mov.w	r2, #512	; 0x200
   82810:	601a      	str	r2, [r3, #0]
			while(Is_udd_kill_last(ep_index));
   82812:	bf00      	nop
   82814:	4a10      	ldr	r2, [pc, #64]	; (82858 <udd_ep_abort+0x80>)
   82816:	7bfb      	ldrb	r3, [r7, #15]
   82818:	015b      	lsls	r3, r3, #5
   8281a:	4413      	add	r3, r2
   8281c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   82820:	681b      	ldr	r3, [r3, #0]
   82822:	f403 7300 	and.w	r3, r3, #512	; 0x200
   82826:	2b00      	cmp	r3, #0
   82828:	d1f4      	bne.n	82814 <udd_ep_abort+0x3c>
		for(;udd_nb_busy_bank(ep_index);) {
   8282a:	4a0b      	ldr	r2, [pc, #44]	; (82858 <udd_ep_abort+0x80>)
   8282c:	7bfb      	ldrb	r3, [r7, #15]
   8282e:	015b      	lsls	r3, r3, #5
   82830:	4413      	add	r3, r2
   82832:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   82836:	681b      	ldr	r3, [r3, #0]
   82838:	0c9b      	lsrs	r3, r3, #18
   8283a:	f003 0303 	and.w	r3, r3, #3
   8283e:	2b00      	cmp	r3, #0
   82840:	d1de      	bne.n	82800 <udd_ep_abort+0x28>
		}
	}
	udd_ep_abort_job(ep);
   82842:	79fb      	ldrb	r3, [r7, #7]
   82844:	4618      	mov	r0, r3
   82846:	4b05      	ldr	r3, [pc, #20]	; (8285c <udd_ep_abort+0x84>)
   82848:	4798      	blx	r3
}
   8284a:	bf00      	nop
   8284c:	3710      	adds	r7, #16
   8284e:	46bd      	mov	sp, r7
   82850:	bd80      	pop	{r7, pc}
   82852:	bf00      	nop
   82854:	400a4300 	.word	0x400a4300
   82858:	400a4000 	.word	0x400a4000
   8285c:	000831dd 	.word	0x000831dd

00082860 <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
   82860:	b480      	push	{r7}
   82862:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   82864:	4a0a      	ldr	r2, [pc, #40]	; (82890 <udd_test_mode_j+0x30>)
   82866:	4b0a      	ldr	r3, [pc, #40]	; (82890 <udd_test_mode_j+0x30>)
   82868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8286c:	f023 0303 	bic.w	r3, r3, #3
   82870:	f043 0302 	orr.w	r3, r3, #2
   82874:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   82878:	4a05      	ldr	r2, [pc, #20]	; (82890 <udd_test_mode_j+0x30>)
   8287a:	4b05      	ldr	r3, [pc, #20]	; (82890 <udd_test_mode_j+0x30>)
   8287c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   82880:	f043 0304 	orr.w	r3, r3, #4
   82884:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   82888:	bf00      	nop
   8288a:	46bd      	mov	sp, r7
   8288c:	bc80      	pop	{r7}
   8288e:	4770      	bx	lr
   82890:	400a4000 	.word	0x400a4000

00082894 <udd_test_mode_k>:


void udd_test_mode_k(void)
{
   82894:	b480      	push	{r7}
   82896:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   82898:	4a0a      	ldr	r2, [pc, #40]	; (828c4 <udd_test_mode_k+0x30>)
   8289a:	4b0a      	ldr	r3, [pc, #40]	; (828c4 <udd_test_mode_k+0x30>)
   8289c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   828a0:	f023 0303 	bic.w	r3, r3, #3
   828a4:	f043 0302 	orr.w	r3, r3, #2
   828a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   828ac:	4a05      	ldr	r2, [pc, #20]	; (828c4 <udd_test_mode_k+0x30>)
   828ae:	4b05      	ldr	r3, [pc, #20]	; (828c4 <udd_test_mode_k+0x30>)
   828b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   828b4:	f043 0308 	orr.w	r3, r3, #8
   828b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   828bc:	bf00      	nop
   828be:	46bd      	mov	sp, r7
   828c0:	bc80      	pop	{r7}
   828c2:	4770      	bx	lr
   828c4:	400a4000 	.word	0x400a4000

000828c8 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
   828c8:	b480      	push	{r7}
   828ca:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   828cc:	4a06      	ldr	r2, [pc, #24]	; (828e8 <udd_test_mode_se0_nak+0x20>)
   828ce:	4b06      	ldr	r3, [pc, #24]	; (828e8 <udd_test_mode_se0_nak+0x20>)
   828d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   828d4:	f023 0303 	bic.w	r3, r3, #3
   828d8:	f043 0302 	orr.w	r3, r3, #2
   828dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   828e0:	bf00      	nop
   828e2:	46bd      	mov	sp, r7
   828e4:	bc80      	pop	{r7}
   828e6:	4770      	bx	lr
   828e8:	400a4000 	.word	0x400a4000

000828ec <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
   828ec:	b4b0      	push	{r4, r5, r7}
   828ee:	b093      	sub	sp, #76	; 0x4c
   828f0:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   828f2:	4b2e      	ldr	r3, [pc, #184]	; (829ac <udd_test_mode_packet+0xc0>)
   828f4:	1d3c      	adds	r4, r7, #4
   828f6:	461d      	mov	r5, r3
   828f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   828fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   828fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   828fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82904:	e895 0003 	ldmia.w	r5, {r0, r1}
   82908:	6020      	str	r0, [r4, #0]
   8290a:	3404      	adds	r4, #4
   8290c:	7021      	strb	r1, [r4, #0]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   8290e:	4b28      	ldr	r3, [pc, #160]	; (829b0 <udd_test_mode_packet+0xc4>)
   82910:	2201      	movs	r2, #1
   82912:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   82916:	4a26      	ldr	r2, [pc, #152]	; (829b0 <udd_test_mode_packet+0xc4>)
   82918:	4b25      	ldr	r3, [pc, #148]	; (829b0 <udd_test_mode_packet+0xc4>)
   8291a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   8291e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   82922:	f023 0303 	bic.w	r3, r3, #3
   82926:	f043 036b 	orr.w	r3, r3, #107	; 0x6b
   8292a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_EP_TYPE_BULK, // Type: bulk
			1, // dir: IN
			64, //Size
			1, // Bank Number
			0); // NB Trans (not used for bulk ept)
	udd_enable_endpoint(0);
   8292e:	4b20      	ldr	r3, [pc, #128]	; (829b0 <udd_test_mode_packet+0xc4>)
   82930:	2201      	movs	r2, #1
   82932:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	udd_enable_hs_test_mode();
   82936:	4a1e      	ldr	r2, [pc, #120]	; (829b0 <udd_test_mode_packet+0xc4>)
   82938:	4b1d      	ldr	r3, [pc, #116]	; (829b0 <udd_test_mode_packet+0xc4>)
   8293a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8293e:	f023 0303 	bic.w	r3, r3, #3
   82942:	f043 0302 	orr.w	r3, r3, #2
   82946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   8294a:	4a19      	ldr	r2, [pc, #100]	; (829b0 <udd_test_mode_packet+0xc4>)
   8294c:	4b18      	ldr	r3, [pc, #96]	; (829b0 <udd_test_mode_packet+0xc4>)
   8294e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   82952:	f043 0310 	orr.w	r3, r3, #16
   82956:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8295a:	4b16      	ldr	r3, [pc, #88]	; (829b4 <udd_test_mode_packet+0xc8>)
   8295c:	643b      	str	r3, [r7, #64]	; 0x40
	ptr_src = test_packet;
   8295e:	1d3b      	adds	r3, r7, #4
   82960:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (i = 0; i < sizeof(test_packet); i++) {
   82962:	2300      	movs	r3, #0
   82964:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   82968:	e00c      	b.n	82984 <udd_test_mode_packet+0x98>
		*ptr_dest++ = *ptr_src++;
   8296a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8296c:	1c5a      	adds	r2, r3, #1
   8296e:	643a      	str	r2, [r7, #64]	; 0x40
   82970:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   82972:	1c51      	adds	r1, r2, #1
   82974:	63f9      	str	r1, [r7, #60]	; 0x3c
   82976:	7812      	ldrb	r2, [r2, #0]
   82978:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   8297a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   8297e:	3301      	adds	r3, #1
   82980:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   82984:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   82988:	2b34      	cmp	r3, #52	; 0x34
   8298a:	d9ee      	bls.n	8296a <udd_test_mode_packet+0x7e>
	}
	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   8298c:	4b08      	ldr	r3, [pc, #32]	; (829b0 <udd_test_mode_packet+0xc4>)
   8298e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82992:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   82996:	4b06      	ldr	r3, [pc, #24]	; (829b0 <udd_test_mode_packet+0xc4>)
   82998:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8299c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   829a0:	bf00      	nop
   829a2:	374c      	adds	r7, #76	; 0x4c
   829a4:	46bd      	mov	sp, r7
   829a6:	bcb0      	pop	{r4, r5, r7}
   829a8:	4770      	bx	lr
   829aa:	bf00      	nop
   829ac:	00085c20 	.word	0x00085c20
   829b0:	400a4000 	.word	0x400a4000
   829b4:	20180000 	.word	0x20180000

000829b8 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
   829b8:	b580      	push	{r7, lr}
   829ba:	b082      	sub	sp, #8
   829bc:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   829be:	4a1b      	ldr	r2, [pc, #108]	; (82a2c <udd_reset_ep_ctrl+0x74>)
   829c0:	4b1a      	ldr	r3, [pc, #104]	; (82a2c <udd_reset_ep_ctrl+0x74>)
   829c2:	681b      	ldr	r3, [r3, #0]
   829c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   829c8:	6013      	str	r3, [r2, #0]
	udd_enable_address();
   829ca:	4a18      	ldr	r2, [pc, #96]	; (82a2c <udd_reset_ep_ctrl+0x74>)
   829cc:	4b17      	ldr	r3, [pc, #92]	; (82a2c <udd_reset_ep_ctrl+0x74>)
   829ce:	681b      	ldr	r3, [r3, #0]
   829d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   829d4:	6013      	str	r3, [r2, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   829d6:	4a15      	ldr	r2, [pc, #84]	; (82a2c <udd_reset_ep_ctrl+0x74>)
   829d8:	4b14      	ldr	r3, [pc, #80]	; (82a2c <udd_reset_ep_ctrl+0x74>)
   829da:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   829de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   829e2:	f023 0303 	bic.w	r3, r3, #3
   829e6:	f043 0343 	orr.w	r3, r3, #67	; 0x43
   829ea:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_DEVICE_EP_CTRL_SIZE,
			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
			0);

	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
	udd_enable_endpoint(0);
   829ee:	4b0f      	ldr	r3, [pc, #60]	; (82a2c <udd_reset_ep_ctrl+0x74>)
   829f0:	2201      	movs	r2, #1
   829f2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	flags = cpu_irq_save();
   829f6:	4b0e      	ldr	r3, [pc, #56]	; (82a30 <udd_reset_ep_ctrl+0x78>)
   829f8:	4798      	blx	r3
   829fa:	6078      	str	r0, [r7, #4]
	udd_enable_setup_received_interrupt(0);
   829fc:	4b0b      	ldr	r3, [pc, #44]	; (82a2c <udd_reset_ep_ctrl+0x74>)
   829fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82a02:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   82a06:	4b09      	ldr	r3, [pc, #36]	; (82a2c <udd_reset_ep_ctrl+0x74>)
   82a08:	f44f 7200 	mov.w	r2, #512	; 0x200
   82a0c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   82a10:	4a06      	ldr	r2, [pc, #24]	; (82a2c <udd_reset_ep_ctrl+0x74>)
   82a12:	4b06      	ldr	r3, [pc, #24]	; (82a2c <udd_reset_ep_ctrl+0x74>)
   82a14:	691b      	ldr	r3, [r3, #16]
   82a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   82a1a:	6113      	str	r3, [r2, #16]
	cpu_irq_restore(flags);
   82a1c:	6878      	ldr	r0, [r7, #4]
   82a1e:	4b05      	ldr	r3, [pc, #20]	; (82a34 <udd_reset_ep_ctrl+0x7c>)
   82a20:	4798      	blx	r3
}
   82a22:	bf00      	nop
   82a24:	3708      	adds	r7, #8
   82a26:	46bd      	mov	sp, r7
   82a28:	bd80      	pop	{r7, pc}
   82a2a:	bf00      	nop
   82a2c:	400a4000 	.word	0x400a4000
   82a30:	00081a99 	.word	0x00081a99
   82a34:	00081af1 	.word	0x00081af1

00082a38 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
   82a38:	b580      	push	{r7, lr}
   82a3a:	b082      	sub	sp, #8
   82a3c:	af00      	add	r7, sp, #0
	irqflags_t flags;

	dbg_print("ctlInit ");

	flags = cpu_irq_save();
   82a3e:	4b10      	ldr	r3, [pc, #64]	; (82a80 <udd_ctrl_init+0x48>)
   82a40:	4798      	blx	r3
   82a42:	6078      	str	r0, [r7, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   82a44:	4b0f      	ldr	r3, [pc, #60]	; (82a84 <udd_ctrl_init+0x4c>)
   82a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82a4a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   82a4e:	6878      	ldr	r0, [r7, #4]
   82a50:	4b0d      	ldr	r3, [pc, #52]	; (82a88 <udd_ctrl_init+0x50>)
   82a52:	4798      	blx	r3

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   82a54:	4b0b      	ldr	r3, [pc, #44]	; (82a84 <udd_ctrl_init+0x4c>)
   82a56:	f44f 7200 	mov.w	r2, #512	; 0x200
   82a5a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   82a5e:	4b0b      	ldr	r3, [pc, #44]	; (82a8c <udd_ctrl_init+0x54>)
   82a60:	2200      	movs	r2, #0
   82a62:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   82a64:	4b09      	ldr	r3, [pc, #36]	; (82a8c <udd_ctrl_init+0x54>)
   82a66:	2200      	movs	r2, #0
   82a68:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
   82a6a:	4b08      	ldr	r3, [pc, #32]	; (82a8c <udd_ctrl_init+0x54>)
   82a6c:	2200      	movs	r2, #0
   82a6e:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   82a70:	4b07      	ldr	r3, [pc, #28]	; (82a90 <udd_ctrl_init+0x58>)
   82a72:	2200      	movs	r2, #0
   82a74:	701a      	strb	r2, [r3, #0]
}
   82a76:	bf00      	nop
   82a78:	3708      	adds	r7, #8
   82a7a:	46bd      	mov	sp, r7
   82a7c:	bd80      	pop	{r7, pc}
   82a7e:	bf00      	nop
   82a80:	00081a99 	.word	0x00081a99
   82a84:	400a4000 	.word	0x400a4000
   82a88:	00081af1 	.word	0x00081af1
   82a8c:	20000d58 	.word	0x20000d58
   82a90:	20000d01 	.word	0x20000d01

00082a94 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
   82a94:	b580      	push	{r7, lr}
   82a96:	b084      	sub	sp, #16
   82a98:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   82a9a:	4b40      	ldr	r3, [pc, #256]	; (82b9c <udd_ctrl_setup_received+0x108>)
   82a9c:	781b      	ldrb	r3, [r3, #0]
   82a9e:	2b00      	cmp	r3, #0
   82aa0:	d003      	beq.n	82aaa <udd_ctrl_setup_received+0x16>
		dbg_print("sErr ");
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
   82aa2:	4b3f      	ldr	r3, [pc, #252]	; (82ba0 <udd_ctrl_setup_received+0x10c>)
   82aa4:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   82aa6:	4b3f      	ldr	r3, [pc, #252]	; (82ba4 <udd_ctrl_setup_received+0x110>)
   82aa8:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   82aaa:	4b3f      	ldr	r3, [pc, #252]	; (82ba8 <udd_ctrl_setup_received+0x114>)
   82aac:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   82ab0:	0d1b      	lsrs	r3, r3, #20
   82ab2:	f3c3 030a 	ubfx	r3, r3, #0, #11
   82ab6:	2b08      	cmp	r3, #8
   82ab8:	d007      	beq.n	82aca <udd_ctrl_setup_received+0x36>
		dbg_print("cntErr ");
		udd_ctrl_stall_data();
   82aba:	4b3c      	ldr	r3, [pc, #240]	; (82bac <udd_ctrl_setup_received+0x118>)
   82abc:	4798      	blx	r3
		udd_ack_setup_received(0);
   82abe:	4b3a      	ldr	r3, [pc, #232]	; (82ba8 <udd_ctrl_setup_received+0x114>)
   82ac0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82ac4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   82ac8:	e064      	b.n	82b94 <udd_ctrl_setup_received+0x100>
	}

	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   82aca:	4b39      	ldr	r3, [pc, #228]	; (82bb0 <udd_ctrl_setup_received+0x11c>)
   82acc:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
   82ace:	2300      	movs	r3, #0
   82ad0:	73fb      	strb	r3, [r7, #15]
   82ad2:	e00a      	b.n	82aea <udd_ctrl_setup_received+0x56>
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   82ad4:	7bfb      	ldrb	r3, [r7, #15]
   82ad6:	4a37      	ldr	r2, [pc, #220]	; (82bb4 <udd_ctrl_setup_received+0x120>)
   82ad8:	441a      	add	r2, r3
   82ada:	68bb      	ldr	r3, [r7, #8]
   82adc:	1c59      	adds	r1, r3, #1
   82ade:	60b9      	str	r1, [r7, #8]
   82ae0:	781b      	ldrb	r3, [r3, #0]
   82ae2:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < 8; i++) {
   82ae4:	7bfb      	ldrb	r3, [r7, #15]
   82ae6:	3301      	adds	r3, #1
   82ae8:	73fb      	strb	r3, [r7, #15]
   82aea:	7bfb      	ldrb	r3, [r7, #15]
   82aec:	2b07      	cmp	r3, #7
   82aee:	d9f1      	bls.n	82ad4 <udd_ctrl_setup_received+0x40>
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
   82af0:	4b30      	ldr	r3, [pc, #192]	; (82bb4 <udd_ctrl_setup_received+0x120>)
   82af2:	885a      	ldrh	r2, [r3, #2]
   82af4:	4b2f      	ldr	r3, [pc, #188]	; (82bb4 <udd_ctrl_setup_received+0x120>)
   82af6:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
   82af8:	4b2e      	ldr	r3, [pc, #184]	; (82bb4 <udd_ctrl_setup_received+0x120>)
   82afa:	889a      	ldrh	r2, [r3, #4]
   82afc:	4b2d      	ldr	r3, [pc, #180]	; (82bb4 <udd_ctrl_setup_received+0x120>)
   82afe:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
   82b00:	4b2c      	ldr	r3, [pc, #176]	; (82bb4 <udd_ctrl_setup_received+0x120>)
   82b02:	88da      	ldrh	r2, [r3, #6]
   82b04:	4b2b      	ldr	r3, [pc, #172]	; (82bb4 <udd_ctrl_setup_received+0x120>)
   82b06:	80da      	strh	r2, [r3, #6]
			udd_g_ctrlreq.req.bRequest, udd_g_ctrlreq.req.bmRequestType,
			udd_g_ctrlreq.req.wValue, udd_g_ctrlreq.req.wIndex,
			udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   82b08:	4b2b      	ldr	r3, [pc, #172]	; (82bb8 <udd_ctrl_setup_received+0x124>)
   82b0a:	4798      	blx	r3
   82b0c:	4603      	mov	r3, r0
   82b0e:	f083 0301 	eor.w	r3, r3, #1
   82b12:	b2db      	uxtb	r3, r3
   82b14:	2b00      	cmp	r3, #0
   82b16:	d007      	beq.n	82b28 <udd_ctrl_setup_received+0x94>
		// Setup request unknown then stall it
		dbg_print("ProcErr ");
		udd_ctrl_stall_data();
   82b18:	4b24      	ldr	r3, [pc, #144]	; (82bac <udd_ctrl_setup_received+0x118>)
   82b1a:	4798      	blx	r3
		udd_ack_setup_received(0);
   82b1c:	4b22      	ldr	r3, [pc, #136]	; (82ba8 <udd_ctrl_setup_received+0x114>)
   82b1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82b22:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   82b26:	e035      	b.n	82b94 <udd_ctrl_setup_received+0x100>
	}
	udd_ack_setup_received(0);
   82b28:	4b1f      	ldr	r3, [pc, #124]	; (82ba8 <udd_ctrl_setup_received+0x114>)
   82b2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82b2e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	if (Udd_setup_is_in()) {
   82b32:	4b20      	ldr	r3, [pc, #128]	; (82bb4 <udd_ctrl_setup_received+0x120>)
   82b34:	781b      	ldrb	r3, [r3, #0]
   82b36:	b25b      	sxtb	r3, r3
   82b38:	2b00      	cmp	r3, #0
   82b3a:	da0b      	bge.n	82b54 <udd_ctrl_setup_received+0xc0>
		dbg_print("_I ");
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   82b3c:	4b1f      	ldr	r3, [pc, #124]	; (82bbc <udd_ctrl_setup_received+0x128>)
   82b3e:	2200      	movs	r2, #0
   82b40:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   82b42:	4b1f      	ldr	r3, [pc, #124]	; (82bc0 <udd_ctrl_setup_received+0x12c>)
   82b44:	2200      	movs	r2, #0
   82b46:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   82b48:	4b14      	ldr	r3, [pc, #80]	; (82b9c <udd_ctrl_setup_received+0x108>)
   82b4a:	2202      	movs	r2, #2
   82b4c:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   82b4e:	4b1d      	ldr	r3, [pc, #116]	; (82bc4 <udd_ctrl_setup_received+0x130>)
   82b50:	4798      	blx	r3
   82b52:	e01f      	b.n	82b94 <udd_ctrl_setup_received+0x100>
	} else {
		dbg_print("_O ");
		if (0 == udd_g_ctrlreq.req.wLength) {
   82b54:	4b17      	ldr	r3, [pc, #92]	; (82bb4 <udd_ctrl_setup_received+0x120>)
   82b56:	88db      	ldrh	r3, [r3, #6]
   82b58:	2b00      	cmp	r3, #0
   82b5a:	d102      	bne.n	82b62 <udd_ctrl_setup_received+0xce>
			// No data phase requested
			dbg_print("Zl ");
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   82b5c:	4b1a      	ldr	r3, [pc, #104]	; (82bc8 <udd_ctrl_setup_received+0x134>)
   82b5e:	4798      	blx	r3
			return;
   82b60:	e018      	b.n	82b94 <udd_ctrl_setup_received+0x100>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   82b62:	4b16      	ldr	r3, [pc, #88]	; (82bbc <udd_ctrl_setup_received+0x128>)
   82b64:	2200      	movs	r2, #0
   82b66:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   82b68:	4b15      	ldr	r3, [pc, #84]	; (82bc0 <udd_ctrl_setup_received+0x12c>)
   82b6a:	2200      	movs	r2, #0
   82b6c:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   82b6e:	4b0b      	ldr	r3, [pc, #44]	; (82b9c <udd_ctrl_setup_received+0x108>)
   82b70:	2201      	movs	r2, #1
   82b72:	701a      	strb	r2, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   82b74:	4b0c      	ldr	r3, [pc, #48]	; (82ba8 <udd_ctrl_setup_received+0x114>)
   82b76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   82b7a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		flags = cpu_irq_save();
   82b7e:	4b13      	ldr	r3, [pc, #76]	; (82bcc <udd_ctrl_setup_received+0x138>)
   82b80:	4798      	blx	r3
   82b82:	6078      	str	r0, [r7, #4]
		udd_enable_nak_in_interrupt(0);
   82b84:	4b08      	ldr	r3, [pc, #32]	; (82ba8 <udd_ctrl_setup_received+0x114>)
   82b86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   82b8a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		cpu_irq_restore(flags);
   82b8e:	6878      	ldr	r0, [r7, #4]
   82b90:	4b0f      	ldr	r3, [pc, #60]	; (82bd0 <udd_ctrl_setup_received+0x13c>)
   82b92:	4798      	blx	r3
	}
}
   82b94:	3710      	adds	r7, #16
   82b96:	46bd      	mov	sp, r7
   82b98:	bd80      	pop	{r7, pc}
   82b9a:	bf00      	nop
   82b9c:	20000d01 	.word	0x20000d01
   82ba0:	0008303d 	.word	0x0008303d
   82ba4:	00082a39 	.word	0x00082a39
   82ba8:	400a4000 	.word	0x400a4000
   82bac:	00082f71 	.word	0x00082f71
   82bb0:	20180000 	.word	0x20180000
   82bb4:	20000d58 	.word	0x20000d58
   82bb8:	0008535d 	.word	0x0008535d
   82bbc:	20000d02 	.word	0x20000d02
   82bc0:	20000d04 	.word	0x20000d04
   82bc4:	00082bd5 	.word	0x00082bd5
   82bc8:	00082f95 	.word	0x00082f95
   82bcc:	00081a99 	.word	0x00081a99
   82bd0:	00081af1 	.word	0x00081af1

00082bd4 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
   82bd4:	b580      	push	{r7, lr}
   82bd6:	b084      	sub	sp, #16
   82bd8:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
   82bda:	4b4c      	ldr	r3, [pc, #304]	; (82d0c <udd_ctrl_in_sent+0x138>)
   82bdc:	4798      	blx	r3
   82bde:	6038      	str	r0, [r7, #0]
	udd_disable_in_send_interrupt(0);
   82be0:	4b4b      	ldr	r3, [pc, #300]	; (82d10 <udd_ctrl_in_sent+0x13c>)
   82be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82be6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   82bea:	6838      	ldr	r0, [r7, #0]
   82bec:	4b49      	ldr	r3, [pc, #292]	; (82d14 <udd_ctrl_in_sent+0x140>)
   82bee:	4798      	blx	r3

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   82bf0:	4b49      	ldr	r3, [pc, #292]	; (82d18 <udd_ctrl_in_sent+0x144>)
   82bf2:	781b      	ldrb	r3, [r3, #0]
   82bf4:	2b03      	cmp	r3, #3
   82bf6:	d104      	bne.n	82c02 <udd_ctrl_in_sent+0x2e>
		dbg_print("ZlpE\n\r");
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   82bf8:	4b48      	ldr	r3, [pc, #288]	; (82d1c <udd_ctrl_in_sent+0x148>)
   82bfa:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   82bfc:	4b48      	ldr	r3, [pc, #288]	; (82d20 <udd_ctrl_in_sent+0x14c>)
   82bfe:	4798      	blx	r3
		return;
   82c00:	e081      	b.n	82d06 <udd_ctrl_in_sent+0x132>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   82c02:	4b48      	ldr	r3, [pc, #288]	; (82d24 <udd_ctrl_in_sent+0x150>)
   82c04:	899a      	ldrh	r2, [r3, #12]
   82c06:	4b48      	ldr	r3, [pc, #288]	; (82d28 <udd_ctrl_in_sent+0x154>)
   82c08:	881b      	ldrh	r3, [r3, #0]
   82c0a:	1ad3      	subs	r3, r2, r3
   82c0c:	81fb      	strh	r3, [r7, #14]
	if (0 == nb_remain) {
   82c0e:	89fb      	ldrh	r3, [r7, #14]
   82c10:	2b00      	cmp	r3, #0
   82c12:	d127      	bne.n	82c64 <udd_ctrl_in_sent+0x90>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   82c14:	4b45      	ldr	r3, [pc, #276]	; (82d2c <udd_ctrl_in_sent+0x158>)
   82c16:	881a      	ldrh	r2, [r3, #0]
   82c18:	4b43      	ldr	r3, [pc, #268]	; (82d28 <udd_ctrl_in_sent+0x154>)
   82c1a:	881b      	ldrh	r3, [r3, #0]
   82c1c:	4413      	add	r3, r2
   82c1e:	b29a      	uxth	r2, r3
   82c20:	4b42      	ldr	r3, [pc, #264]	; (82d2c <udd_ctrl_in_sent+0x158>)
   82c22:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   82c24:	4b3f      	ldr	r3, [pc, #252]	; (82d24 <udd_ctrl_in_sent+0x150>)
   82c26:	88da      	ldrh	r2, [r3, #6]
   82c28:	4b40      	ldr	r3, [pc, #256]	; (82d2c <udd_ctrl_in_sent+0x158>)
   82c2a:	881b      	ldrh	r3, [r3, #0]
   82c2c:	429a      	cmp	r2, r3
   82c2e:	d003      	beq.n	82c38 <udd_ctrl_in_sent+0x64>
				|| b_shortpacket) {
   82c30:	4b3f      	ldr	r3, [pc, #252]	; (82d30 <udd_ctrl_in_sent+0x15c>)
   82c32:	781b      	ldrb	r3, [r3, #0]
   82c34:	2b00      	cmp	r3, #0
   82c36:	d002      	beq.n	82c3e <udd_ctrl_in_sent+0x6a>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			dbg_print("_zO ");
			udd_ctrl_send_zlp_out();
   82c38:	4b3e      	ldr	r3, [pc, #248]	; (82d34 <udd_ctrl_in_sent+0x160>)
   82c3a:	4798      	blx	r3
			return;
   82c3c:	e063      	b.n	82d06 <udd_ctrl_in_sent+0x132>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   82c3e:	4b39      	ldr	r3, [pc, #228]	; (82d24 <udd_ctrl_in_sent+0x150>)
   82c40:	695b      	ldr	r3, [r3, #20]
   82c42:	2b00      	cmp	r3, #0
   82c44:	d00e      	beq.n	82c64 <udd_ctrl_in_sent+0x90>
				|| (!udd_g_ctrlreq.over_under_run())) {
   82c46:	4b37      	ldr	r3, [pc, #220]	; (82d24 <udd_ctrl_in_sent+0x150>)
   82c48:	695b      	ldr	r3, [r3, #20]
   82c4a:	4798      	blx	r3
   82c4c:	4603      	mov	r3, r0
   82c4e:	f083 0301 	eor.w	r3, r3, #1
   82c52:	b2db      	uxtb	r3, r3
   82c54:	2b00      	cmp	r3, #0
   82c56:	d105      	bne.n	82c64 <udd_ctrl_in_sent+0x90>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   82c58:	4b33      	ldr	r3, [pc, #204]	; (82d28 <udd_ctrl_in_sent+0x154>)
   82c5a:	2200      	movs	r2, #0
   82c5c:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   82c5e:	4b31      	ldr	r3, [pc, #196]	; (82d24 <udd_ctrl_in_sent+0x150>)
   82c60:	899b      	ldrh	r3, [r3, #12]
   82c62:	81fb      	strh	r3, [r7, #14]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   82c64:	89fb      	ldrh	r3, [r7, #14]
   82c66:	2b3f      	cmp	r3, #63	; 0x3f
   82c68:	d905      	bls.n	82c76 <udd_ctrl_in_sent+0xa2>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   82c6a:	2340      	movs	r3, #64	; 0x40
   82c6c:	81fb      	strh	r3, [r7, #14]
		b_shortpacket = false;
   82c6e:	4b30      	ldr	r3, [pc, #192]	; (82d30 <udd_ctrl_in_sent+0x15c>)
   82c70:	2200      	movs	r2, #0
   82c72:	701a      	strb	r2, [r3, #0]
   82c74:	e002      	b.n	82c7c <udd_ctrl_in_sent+0xa8>
	} else {
		b_shortpacket = true;
   82c76:	4b2e      	ldr	r3, [pc, #184]	; (82d30 <udd_ctrl_in_sent+0x15c>)
   82c78:	2201      	movs	r2, #1
   82c7a:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   82c7c:	4b2e      	ldr	r3, [pc, #184]	; (82d38 <udd_ctrl_in_sent+0x164>)
   82c7e:	60bb      	str	r3, [r7, #8]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   82c80:	4b28      	ldr	r3, [pc, #160]	; (82d24 <udd_ctrl_in_sent+0x150>)
   82c82:	689b      	ldr	r3, [r3, #8]
   82c84:	4a28      	ldr	r2, [pc, #160]	; (82d28 <udd_ctrl_in_sent+0x154>)
   82c86:	8812      	ldrh	r2, [r2, #0]
   82c88:	4413      	add	r3, r2
   82c8a:	607b      	str	r3, [r7, #4]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
   82c8c:	4b1f      	ldr	r3, [pc, #124]	; (82d0c <udd_ctrl_in_sent+0x138>)
   82c8e:	4798      	blx	r3
   82c90:	6038      	str	r0, [r7, #0]
	if (Is_udd_out_received(0)) {
   82c92:	4b1f      	ldr	r3, [pc, #124]	; (82d10 <udd_ctrl_in_sent+0x13c>)
   82c94:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   82c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
   82c9c:	2b00      	cmp	r3, #0
   82c9e:	d006      	beq.n	82cae <udd_ctrl_in_sent+0xda>
		dbg_print("Abort ");
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
   82ca0:	6838      	ldr	r0, [r7, #0]
   82ca2:	4b1c      	ldr	r3, [pc, #112]	; (82d14 <udd_ctrl_in_sent+0x140>)
   82ca4:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   82ca6:	4b1c      	ldr	r3, [pc, #112]	; (82d18 <udd_ctrl_in_sent+0x144>)
   82ca8:	2204      	movs	r2, #4
   82caa:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   82cac:	e02b      	b.n	82d06 <udd_ctrl_in_sent+0x132>
	}
	// dbg_print("t%d ", nb_remain);
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   82cae:	2300      	movs	r3, #0
   82cb0:	737b      	strb	r3, [r7, #13]
   82cb2:	e00a      	b.n	82cca <udd_ctrl_in_sent+0xf6>
		*ptr_dest++ = *ptr_src++;
   82cb4:	68bb      	ldr	r3, [r7, #8]
   82cb6:	1c5a      	adds	r2, r3, #1
   82cb8:	60ba      	str	r2, [r7, #8]
   82cba:	687a      	ldr	r2, [r7, #4]
   82cbc:	1c51      	adds	r1, r2, #1
   82cbe:	6079      	str	r1, [r7, #4]
   82cc0:	7812      	ldrb	r2, [r2, #0]
   82cc2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_remain; i++) {
   82cc4:	7b7b      	ldrb	r3, [r7, #13]
   82cc6:	3301      	adds	r3, #1
   82cc8:	737b      	strb	r3, [r7, #13]
   82cca:	7b7b      	ldrb	r3, [r7, #13]
   82ccc:	b29b      	uxth	r3, r3
   82cce:	89fa      	ldrh	r2, [r7, #14]
   82cd0:	429a      	cmp	r2, r3
   82cd2:	d8ef      	bhi.n	82cb4 <udd_ctrl_in_sent+0xe0>
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   82cd4:	4b14      	ldr	r3, [pc, #80]	; (82d28 <udd_ctrl_in_sent+0x154>)
   82cd6:	881a      	ldrh	r2, [r3, #0]
   82cd8:	89fb      	ldrh	r3, [r7, #14]
   82cda:	4413      	add	r3, r2
   82cdc:	b29a      	uxth	r2, r3
   82cde:	4b12      	ldr	r3, [pc, #72]	; (82d28 <udd_ctrl_in_sent+0x154>)
   82ce0:	801a      	strh	r2, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   82ce2:	4b0b      	ldr	r3, [pc, #44]	; (82d10 <udd_ctrl_in_sent+0x13c>)
   82ce4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82ce8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   82cec:	4b08      	ldr	r3, [pc, #32]	; (82d10 <udd_ctrl_in_sent+0x13c>)
   82cee:	f44f 6200 	mov.w	r2, #2048	; 0x800
   82cf2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   82cf6:	4b06      	ldr	r3, [pc, #24]	; (82d10 <udd_ctrl_in_sent+0x13c>)
   82cf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82cfc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
   82d00:	6838      	ldr	r0, [r7, #0]
   82d02:	4b04      	ldr	r3, [pc, #16]	; (82d14 <udd_ctrl_in_sent+0x140>)
   82d04:	4798      	blx	r3
}
   82d06:	3710      	adds	r7, #16
   82d08:	46bd      	mov	sp, r7
   82d0a:	bd80      	pop	{r7, pc}
   82d0c:	00081a99 	.word	0x00081a99
   82d10:	400a4000 	.word	0x400a4000
   82d14:	00081af1 	.word	0x00081af1
   82d18:	20000d01 	.word	0x20000d01
   82d1c:	0008303d 	.word	0x0008303d
   82d20:	00082a39 	.word	0x00082a39
   82d24:	20000d58 	.word	0x20000d58
   82d28:	20000d04 	.word	0x20000d04
   82d2c:	20000d02 	.word	0x20000d02
   82d30:	20000d38 	.word	0x20000d38
   82d34:	00082ff9 	.word	0x00082ff9
   82d38:	20180000 	.word	0x20180000

00082d3c <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
   82d3c:	b580      	push	{r7, lr}
   82d3e:	b084      	sub	sp, #16
   82d40:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   82d42:	4b61      	ldr	r3, [pc, #388]	; (82ec8 <udd_ctrl_out_received+0x18c>)
   82d44:	781b      	ldrb	r3, [r3, #0]
   82d46:	2b01      	cmp	r3, #1
   82d48:	d00f      	beq.n	82d6a <udd_ctrl_out_received+0x2e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   82d4a:	4b5f      	ldr	r3, [pc, #380]	; (82ec8 <udd_ctrl_out_received+0x18c>)
   82d4c:	781b      	ldrb	r3, [r3, #0]
   82d4e:	2b02      	cmp	r3, #2
   82d50:	d003      	beq.n	82d5a <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   82d52:	4b5d      	ldr	r3, [pc, #372]	; (82ec8 <udd_ctrl_out_received+0x18c>)
   82d54:	781b      	ldrb	r3, [r3, #0]
   82d56:	2b04      	cmp	r3, #4
   82d58:	d102      	bne.n	82d60 <udd_ctrl_out_received+0x24>
			dbg_print("EoStp\n\r");
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
   82d5a:	4b5c      	ldr	r3, [pc, #368]	; (82ecc <udd_ctrl_out_received+0x190>)
   82d5c:	4798      	blx	r3
   82d5e:	e001      	b.n	82d64 <udd_ctrl_out_received+0x28>
		} else {
			dbg_print("ErrStp\n\r");
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   82d60:	4b5b      	ldr	r3, [pc, #364]	; (82ed0 <udd_ctrl_out_received+0x194>)
   82d62:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   82d64:	4b5b      	ldr	r3, [pc, #364]	; (82ed4 <udd_ctrl_out_received+0x198>)
   82d66:	4798      	blx	r3
		return;
   82d68:	e0ab      	b.n	82ec2 <udd_ctrl_out_received+0x186>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   82d6a:	4b5b      	ldr	r3, [pc, #364]	; (82ed8 <udd_ctrl_out_received+0x19c>)
   82d6c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   82d70:	0d1b      	lsrs	r3, r3, #20
   82d72:	b29b      	uxth	r3, r3
   82d74:	f3c3 030a 	ubfx	r3, r3, #0, #11
   82d78:	81bb      	strh	r3, [r7, #12]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   82d7a:	4b58      	ldr	r3, [pc, #352]	; (82edc <udd_ctrl_out_received+0x1a0>)
   82d7c:	899b      	ldrh	r3, [r3, #12]
   82d7e:	461a      	mov	r2, r3
   82d80:	4b57      	ldr	r3, [pc, #348]	; (82ee0 <udd_ctrl_out_received+0x1a4>)
   82d82:	881b      	ldrh	r3, [r3, #0]
   82d84:	4619      	mov	r1, r3
   82d86:	89bb      	ldrh	r3, [r7, #12]
   82d88:	440b      	add	r3, r1
   82d8a:	429a      	cmp	r2, r3
   82d8c:	da05      	bge.n	82d9a <udd_ctrl_out_received+0x5e>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   82d8e:	4b53      	ldr	r3, [pc, #332]	; (82edc <udd_ctrl_out_received+0x1a0>)
   82d90:	899a      	ldrh	r2, [r3, #12]
   82d92:	4b53      	ldr	r3, [pc, #332]	; (82ee0 <udd_ctrl_out_received+0x1a4>)
   82d94:	881b      	ldrh	r3, [r3, #0]
   82d96:	1ad3      	subs	r3, r2, r3
   82d98:	81bb      	strh	r3, [r7, #12]
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   82d9a:	4b52      	ldr	r3, [pc, #328]	; (82ee4 <udd_ctrl_out_received+0x1a8>)
   82d9c:	60bb      	str	r3, [r7, #8]
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   82d9e:	4b4f      	ldr	r3, [pc, #316]	; (82edc <udd_ctrl_out_received+0x1a0>)
   82da0:	689b      	ldr	r3, [r3, #8]
   82da2:	4a4f      	ldr	r2, [pc, #316]	; (82ee0 <udd_ctrl_out_received+0x1a4>)
   82da4:	8812      	ldrh	r2, [r2, #0]
   82da6:	4413      	add	r3, r2
   82da8:	607b      	str	r3, [r7, #4]
	for (i = 0; i < nb_data; i++) {
   82daa:	2300      	movs	r3, #0
   82dac:	73fb      	strb	r3, [r7, #15]
   82dae:	e00a      	b.n	82dc6 <udd_ctrl_out_received+0x8a>
		*ptr_dest++ = *ptr_src++;
   82db0:	687b      	ldr	r3, [r7, #4]
   82db2:	1c5a      	adds	r2, r3, #1
   82db4:	607a      	str	r2, [r7, #4]
   82db6:	68ba      	ldr	r2, [r7, #8]
   82db8:	1c51      	adds	r1, r2, #1
   82dba:	60b9      	str	r1, [r7, #8]
   82dbc:	7812      	ldrb	r2, [r2, #0]
   82dbe:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_data; i++) {
   82dc0:	7bfb      	ldrb	r3, [r7, #15]
   82dc2:	3301      	adds	r3, #1
   82dc4:	73fb      	strb	r3, [r7, #15]
   82dc6:	7bfb      	ldrb	r3, [r7, #15]
   82dc8:	b29b      	uxth	r3, r3
   82dca:	89ba      	ldrh	r2, [r7, #12]
   82dcc:	429a      	cmp	r2, r3
   82dce:	d8ef      	bhi.n	82db0 <udd_ctrl_out_received+0x74>
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   82dd0:	4b43      	ldr	r3, [pc, #268]	; (82ee0 <udd_ctrl_out_received+0x1a4>)
   82dd2:	881a      	ldrh	r2, [r3, #0]
   82dd4:	89bb      	ldrh	r3, [r7, #12]
   82dd6:	4413      	add	r3, r2
   82dd8:	b29a      	uxth	r2, r3
   82dda:	4b41      	ldr	r3, [pc, #260]	; (82ee0 <udd_ctrl_out_received+0x1a4>)
   82ddc:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   82dde:	89bb      	ldrh	r3, [r7, #12]
   82de0:	2b40      	cmp	r3, #64	; 0x40
   82de2:	d10a      	bne.n	82dfa <udd_ctrl_out_received+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   82de4:	4b3d      	ldr	r3, [pc, #244]	; (82edc <udd_ctrl_out_received+0x1a0>)
   82de6:	88db      	ldrh	r3, [r3, #6]
   82de8:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_buf_cnt +
   82dea:	4b3f      	ldr	r3, [pc, #252]	; (82ee8 <udd_ctrl_out_received+0x1ac>)
   82dec:	881b      	ldrh	r3, [r3, #0]
   82dee:	4619      	mov	r1, r3
   82df0:	4b3b      	ldr	r3, [pc, #236]	; (82ee0 <udd_ctrl_out_received+0x1a4>)
   82df2:	881b      	ldrh	r3, [r3, #0]
   82df4:	440b      	add	r3, r1
			|| (udd_g_ctrlreq.req.wLength <=
   82df6:	429a      	cmp	r2, r3
   82df8:	dc20      	bgt.n	82e3c <udd_ctrl_out_received+0x100>
			udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   82dfa:	4b39      	ldr	r3, [pc, #228]	; (82ee0 <udd_ctrl_out_received+0x1a4>)
   82dfc:	881a      	ldrh	r2, [r3, #0]
   82dfe:	4b37      	ldr	r3, [pc, #220]	; (82edc <udd_ctrl_out_received+0x1a0>)
   82e00:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   82e02:	4b36      	ldr	r3, [pc, #216]	; (82edc <udd_ctrl_out_received+0x1a0>)
   82e04:	695b      	ldr	r3, [r3, #20]
   82e06:	2b00      	cmp	r3, #0
   82e08:	d010      	beq.n	82e2c <udd_ctrl_out_received+0xf0>
			if (!udd_g_ctrlreq.over_under_run()) {
   82e0a:	4b34      	ldr	r3, [pc, #208]	; (82edc <udd_ctrl_out_received+0x1a0>)
   82e0c:	695b      	ldr	r3, [r3, #20]
   82e0e:	4798      	blx	r3
   82e10:	4603      	mov	r3, r0
   82e12:	f083 0301 	eor.w	r3, r3, #1
   82e16:	b2db      	uxtb	r3, r3
   82e18:	2b00      	cmp	r3, #0
   82e1a:	d007      	beq.n	82e2c <udd_ctrl_out_received+0xf0>
				// Stall ZLP
				udd_ctrl_stall_data();
   82e1c:	4b2c      	ldr	r3, [pc, #176]	; (82ed0 <udd_ctrl_out_received+0x194>)
   82e1e:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   82e20:	4b2d      	ldr	r3, [pc, #180]	; (82ed8 <udd_ctrl_out_received+0x19c>)
   82e22:	f44f 7200 	mov.w	r2, #512	; 0x200
   82e26:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   82e2a:	e04a      	b.n	82ec2 <udd_ctrl_out_received+0x186>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   82e2c:	4b2a      	ldr	r3, [pc, #168]	; (82ed8 <udd_ctrl_out_received+0x19c>)
   82e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
   82e32:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   82e36:	4b2d      	ldr	r3, [pc, #180]	; (82eec <udd_ctrl_out_received+0x1b0>)
   82e38:	4798      	blx	r3
		return;
   82e3a:	e042      	b.n	82ec2 <udd_ctrl_out_received+0x186>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   82e3c:	4b27      	ldr	r3, [pc, #156]	; (82edc <udd_ctrl_out_received+0x1a0>)
   82e3e:	899a      	ldrh	r2, [r3, #12]
   82e40:	4b27      	ldr	r3, [pc, #156]	; (82ee0 <udd_ctrl_out_received+0x1a4>)
   82e42:	881b      	ldrh	r3, [r3, #0]
   82e44:	429a      	cmp	r2, r3
   82e46:	d127      	bne.n	82e98 <udd_ctrl_out_received+0x15c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   82e48:	4b24      	ldr	r3, [pc, #144]	; (82edc <udd_ctrl_out_received+0x1a0>)
   82e4a:	695b      	ldr	r3, [r3, #20]
   82e4c:	2b00      	cmp	r3, #0
   82e4e:	d107      	bne.n	82e60 <udd_ctrl_out_received+0x124>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
   82e50:	4b1f      	ldr	r3, [pc, #124]	; (82ed0 <udd_ctrl_out_received+0x194>)
   82e52:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   82e54:	4b20      	ldr	r3, [pc, #128]	; (82ed8 <udd_ctrl_out_received+0x19c>)
   82e56:	f44f 7200 	mov.w	r2, #512	; 0x200
   82e5a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   82e5e:	e030      	b.n	82ec2 <udd_ctrl_out_received+0x186>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   82e60:	4b1e      	ldr	r3, [pc, #120]	; (82edc <udd_ctrl_out_received+0x1a0>)
   82e62:	695b      	ldr	r3, [r3, #20]
   82e64:	4798      	blx	r3
   82e66:	4603      	mov	r3, r0
   82e68:	f083 0301 	eor.w	r3, r3, #1
   82e6c:	b2db      	uxtb	r3, r3
   82e6e:	2b00      	cmp	r3, #0
   82e70:	d007      	beq.n	82e82 <udd_ctrl_out_received+0x146>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   82e72:	4b17      	ldr	r3, [pc, #92]	; (82ed0 <udd_ctrl_out_received+0x194>)
   82e74:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   82e76:	4b18      	ldr	r3, [pc, #96]	; (82ed8 <udd_ctrl_out_received+0x19c>)
   82e78:	f44f 7200 	mov.w	r2, #512	; 0x200
   82e7c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   82e80:	e01f      	b.n	82ec2 <udd_ctrl_out_received+0x186>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   82e82:	4b19      	ldr	r3, [pc, #100]	; (82ee8 <udd_ctrl_out_received+0x1ac>)
   82e84:	881a      	ldrh	r2, [r3, #0]
   82e86:	4b16      	ldr	r3, [pc, #88]	; (82ee0 <udd_ctrl_out_received+0x1a4>)
   82e88:	881b      	ldrh	r3, [r3, #0]
   82e8a:	4413      	add	r3, r2
   82e8c:	b29a      	uxth	r2, r3
   82e8e:	4b16      	ldr	r3, [pc, #88]	; (82ee8 <udd_ctrl_out_received+0x1ac>)
   82e90:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   82e92:	4b13      	ldr	r3, [pc, #76]	; (82ee0 <udd_ctrl_out_received+0x1a4>)
   82e94:	2200      	movs	r2, #0
   82e96:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   82e98:	4b0f      	ldr	r3, [pc, #60]	; (82ed8 <udd_ctrl_out_received+0x19c>)
   82e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
   82e9e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   82ea2:	4b0d      	ldr	r3, [pc, #52]	; (82ed8 <udd_ctrl_out_received+0x19c>)
   82ea4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   82ea8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	flags = cpu_irq_save();
   82eac:	4b10      	ldr	r3, [pc, #64]	; (82ef0 <udd_ctrl_out_received+0x1b4>)
   82eae:	4798      	blx	r3
   82eb0:	6038      	str	r0, [r7, #0]
	udd_enable_nak_in_interrupt(0);
   82eb2:	4b09      	ldr	r3, [pc, #36]	; (82ed8 <udd_ctrl_out_received+0x19c>)
   82eb4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   82eb8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   82ebc:	6838      	ldr	r0, [r7, #0]
   82ebe:	4b0d      	ldr	r3, [pc, #52]	; (82ef4 <udd_ctrl_out_received+0x1b8>)
   82ec0:	4798      	blx	r3
}
   82ec2:	3710      	adds	r7, #16
   82ec4:	46bd      	mov	sp, r7
   82ec6:	bd80      	pop	{r7, pc}
   82ec8:	20000d01 	.word	0x20000d01
   82ecc:	0008303d 	.word	0x0008303d
   82ed0:	00082f71 	.word	0x00082f71
   82ed4:	00082a39 	.word	0x00082a39
   82ed8:	400a4000 	.word	0x400a4000
   82edc:	20000d58 	.word	0x20000d58
   82ee0:	20000d04 	.word	0x20000d04
   82ee4:	20180000 	.word	0x20180000
   82ee8:	20000d02 	.word	0x20000d02
   82eec:	00082f95 	.word	0x00082f95
   82ef0:	00081a99 	.word	0x00081a99
   82ef4:	00081af1 	.word	0x00081af1

00082ef8 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
   82ef8:	b580      	push	{r7, lr}
   82efa:	af00      	add	r7, sp, #0
	if (Is_udd_out_received(0))
   82efc:	4b0c      	ldr	r3, [pc, #48]	; (82f30 <udd_ctrl_underflow+0x38>)
   82efe:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   82f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
   82f06:	2b00      	cmp	r3, #0
   82f08:	d10f      	bne.n	82f2a <udd_ctrl_underflow+0x32>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   82f0a:	4b0a      	ldr	r3, [pc, #40]	; (82f34 <udd_ctrl_underflow+0x3c>)
   82f0c:	781b      	ldrb	r3, [r3, #0]
   82f0e:	2b01      	cmp	r3, #1
   82f10:	d102      	bne.n	82f18 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   82f12:	4b09      	ldr	r3, [pc, #36]	; (82f38 <udd_ctrl_underflow+0x40>)
   82f14:	4798      	blx	r3
   82f16:	e009      	b.n	82f2c <udd_ctrl_underflow+0x34>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   82f18:	4b06      	ldr	r3, [pc, #24]	; (82f34 <udd_ctrl_underflow+0x3c>)
   82f1a:	781b      	ldrb	r3, [r3, #0]
   82f1c:	2b04      	cmp	r3, #4
   82f1e:	d105      	bne.n	82f2c <udd_ctrl_underflow+0x34>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   82f20:	4b03      	ldr	r3, [pc, #12]	; (82f30 <udd_ctrl_underflow+0x38>)
   82f22:	2220      	movs	r2, #32
   82f24:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   82f28:	e000      	b.n	82f2c <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received
   82f2a:	bf00      	nop
	}
}
   82f2c:	bd80      	pop	{r7, pc}
   82f2e:	bf00      	nop
   82f30:	400a4000 	.word	0x400a4000
   82f34:	20000d01 	.word	0x20000d01
   82f38:	00082f95 	.word	0x00082f95

00082f3c <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
   82f3c:	b480      	push	{r7}
   82f3e:	af00      	add	r7, sp, #0
	if (Is_udd_in_send(0))
   82f40:	4b09      	ldr	r3, [pc, #36]	; (82f68 <udd_ctrl_overflow+0x2c>)
   82f42:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   82f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   82f4a:	2b00      	cmp	r3, #0
   82f4c:	d108      	bne.n	82f60 <udd_ctrl_overflow+0x24>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   82f4e:	4b07      	ldr	r3, [pc, #28]	; (82f6c <udd_ctrl_overflow+0x30>)
   82f50:	781b      	ldrb	r3, [r3, #0]
   82f52:	2b03      	cmp	r3, #3
   82f54:	d105      	bne.n	82f62 <udd_ctrl_overflow+0x26>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   82f56:	4b04      	ldr	r3, [pc, #16]	; (82f68 <udd_ctrl_overflow+0x2c>)
   82f58:	2220      	movs	r2, #32
   82f5a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   82f5e:	e000      	b.n	82f62 <udd_ctrl_overflow+0x26>
		return; // overflow ignored if IN data is received
   82f60:	bf00      	nop
	}
}
   82f62:	46bd      	mov	sp, r7
   82f64:	bc80      	pop	{r7}
   82f66:	4770      	bx	lr
   82f68:	400a4000 	.word	0x400a4000
   82f6c:	20000d01 	.word	0x20000d01

00082f70 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
   82f70:	b480      	push	{r7}
   82f72:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   82f74:	4b05      	ldr	r3, [pc, #20]	; (82f8c <udd_ctrl_stall_data+0x1c>)
   82f76:	2205      	movs	r2, #5
   82f78:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   82f7a:	4b05      	ldr	r3, [pc, #20]	; (82f90 <udd_ctrl_stall_data+0x20>)
   82f7c:	2220      	movs	r2, #32
   82f7e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   82f82:	bf00      	nop
   82f84:	46bd      	mov	sp, r7
   82f86:	bc80      	pop	{r7}
   82f88:	4770      	bx	lr
   82f8a:	bf00      	nop
   82f8c:	20000d01 	.word	0x20000d01
   82f90:	400a4000 	.word	0x400a4000

00082f94 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
   82f94:	b580      	push	{r7, lr}
   82f96:	b082      	sub	sp, #8
   82f98:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   82f9a:	4b13      	ldr	r3, [pc, #76]	; (82fe8 <udd_ctrl_send_zlp_in+0x54>)
   82f9c:	2203      	movs	r2, #3
   82f9e:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
   82fa0:	4b12      	ldr	r3, [pc, #72]	; (82fec <udd_ctrl_send_zlp_in+0x58>)
   82fa2:	4798      	blx	r3
   82fa4:	6078      	str	r0, [r7, #4]
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   82fa6:	4b12      	ldr	r3, [pc, #72]	; (82ff0 <udd_ctrl_send_zlp_in+0x5c>)
   82fa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82fac:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   82fb0:	4b0f      	ldr	r3, [pc, #60]	; (82ff0 <udd_ctrl_send_zlp_in+0x5c>)
   82fb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   82fb6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   82fba:	4b0d      	ldr	r3, [pc, #52]	; (82ff0 <udd_ctrl_send_zlp_in+0x5c>)
   82fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82fc0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   82fc4:	4b0a      	ldr	r3, [pc, #40]	; (82ff0 <udd_ctrl_send_zlp_in+0x5c>)
   82fc6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82fca:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   82fce:	4b08      	ldr	r3, [pc, #32]	; (82ff0 <udd_ctrl_send_zlp_in+0x5c>)
   82fd0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82fd4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   82fd8:	6878      	ldr	r0, [r7, #4]
   82fda:	4b06      	ldr	r3, [pc, #24]	; (82ff4 <udd_ctrl_send_zlp_in+0x60>)
   82fdc:	4798      	blx	r3
}
   82fde:	bf00      	nop
   82fe0:	3708      	adds	r7, #8
   82fe2:	46bd      	mov	sp, r7
   82fe4:	bd80      	pop	{r7, pc}
   82fe6:	bf00      	nop
   82fe8:	20000d01 	.word	0x20000d01
   82fec:	00081a99 	.word	0x00081a99
   82ff0:	400a4000 	.word	0x400a4000
   82ff4:	00081af1 	.word	0x00081af1

00082ff8 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
   82ff8:	b580      	push	{r7, lr}
   82ffa:	b082      	sub	sp, #8
   82ffc:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   82ffe:	4b0b      	ldr	r3, [pc, #44]	; (8302c <udd_ctrl_send_zlp_out+0x34>)
   83000:	2204      	movs	r2, #4
   83002:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
   83004:	4b0a      	ldr	r3, [pc, #40]	; (83030 <udd_ctrl_send_zlp_out+0x38>)
   83006:	4798      	blx	r3
   83008:	6078      	str	r0, [r7, #4]
	udd_ack_nak_in(0);
   8300a:	4b0a      	ldr	r3, [pc, #40]	; (83034 <udd_ctrl_send_zlp_out+0x3c>)
   8300c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83010:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   83014:	4b07      	ldr	r3, [pc, #28]	; (83034 <udd_ctrl_send_zlp_out+0x3c>)
   83016:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8301a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   8301e:	6878      	ldr	r0, [r7, #4]
   83020:	4b05      	ldr	r3, [pc, #20]	; (83038 <udd_ctrl_send_zlp_out+0x40>)
   83022:	4798      	blx	r3
}
   83024:	bf00      	nop
   83026:	3708      	adds	r7, #8
   83028:	46bd      	mov	sp, r7
   8302a:	bd80      	pop	{r7, pc}
   8302c:	20000d01 	.word	0x20000d01
   83030:	00081a99 	.word	0x00081a99
   83034:	400a4000 	.word	0x400a4000
   83038:	00081af1 	.word	0x00081af1

0008303c <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   8303c:	b580      	push	{r7, lr}
   8303e:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   83040:	4b04      	ldr	r3, [pc, #16]	; (83054 <udd_ctrl_endofrequest+0x18>)
   83042:	691b      	ldr	r3, [r3, #16]
   83044:	2b00      	cmp	r3, #0
   83046:	d002      	beq.n	8304e <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
   83048:	4b02      	ldr	r3, [pc, #8]	; (83054 <udd_ctrl_endofrequest+0x18>)
   8304a:	691b      	ldr	r3, [r3, #16]
   8304c:	4798      	blx	r3
	}
}
   8304e:	bf00      	nop
   83050:	bd80      	pop	{r7, pc}
   83052:	bf00      	nop
   83054:	20000d58 	.word	0x20000d58

00083058 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
   83058:	b580      	push	{r7, lr}
   8305a:	b082      	sub	sp, #8
   8305c:	af00      	add	r7, sp, #0
	uint32_t status = udd_get_endpoint_status(0);
   8305e:	4b31      	ldr	r3, [pc, #196]	; (83124 <udd_ctrl_interrupt+0xcc>)
   83060:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   83064:	607b      	str	r3, [r7, #4]

	if (!Is_udd_endpoint_interrupt(0)) {
   83066:	4b2f      	ldr	r3, [pc, #188]	; (83124 <udd_ctrl_interrupt+0xcc>)
   83068:	695b      	ldr	r3, [r3, #20]
   8306a:	f403 7380 	and.w	r3, r3, #256	; 0x100
   8306e:	2b00      	cmp	r3, #0
   83070:	d101      	bne.n	83076 <udd_ctrl_interrupt+0x1e>
		return false; // No interrupt events on control endpoint
   83072:	2300      	movs	r3, #0
   83074:	e052      	b.n	8311c <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   83076:	4b2b      	ldr	r3, [pc, #172]	; (83124 <udd_ctrl_interrupt+0xcc>)
   83078:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8307c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   83080:	4b28      	ldr	r3, [pc, #160]	; (83124 <udd_ctrl_interrupt+0xcc>)
   83082:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83086:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	// Search event on control endpoint
	if (Is_udd_endpoint_status_setup_received(status)) {
   8308a:	687b      	ldr	r3, [r7, #4]
   8308c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   83090:	2b00      	cmp	r3, #0
   83092:	d003      	beq.n	8309c <udd_ctrl_interrupt+0x44>
		// SETUP packet received
		dbg_print("Stp ");
		udd_ctrl_setup_received();
   83094:	4b24      	ldr	r3, [pc, #144]	; (83128 <udd_ctrl_interrupt+0xd0>)
   83096:	4798      	blx	r3
		return true;
   83098:	2301      	movs	r3, #1
   8309a:	e03f      	b.n	8311c <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_in_sent(status)
   8309c:	687b      	ldr	r3, [r7, #4]
   8309e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   830a2:	2b00      	cmp	r3, #0
   830a4:	d00a      	beq.n	830bc <udd_ctrl_interrupt+0x64>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   830a6:	4b1f      	ldr	r3, [pc, #124]	; (83124 <udd_ctrl_interrupt+0xcc>)
   830a8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   830ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   830b0:	2b00      	cmp	r3, #0
   830b2:	d003      	beq.n	830bc <udd_ctrl_interrupt+0x64>
		// IN packet sent
		dbg_print("In ");
		udd_ctrl_in_sent();
   830b4:	4b1d      	ldr	r3, [pc, #116]	; (8312c <udd_ctrl_interrupt+0xd4>)
   830b6:	4798      	blx	r3
		return true;
   830b8:	2301      	movs	r3, #1
   830ba:	e02f      	b.n	8311c <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_out_received(status)) {
   830bc:	687b      	ldr	r3, [r7, #4]
   830be:	f403 7300 	and.w	r3, r3, #512	; 0x200
   830c2:	2b00      	cmp	r3, #0
   830c4:	d003      	beq.n	830ce <udd_ctrl_interrupt+0x76>
		// OUT packet received
		dbg_print("Out ");
		udd_ctrl_out_received();
   830c6:	4b1a      	ldr	r3, [pc, #104]	; (83130 <udd_ctrl_interrupt+0xd8>)
   830c8:	4798      	blx	r3
		return true;
   830ca:	2301      	movs	r3, #1
   830cc:	e026      	b.n	8311c <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_stall(status)) {
   830ce:	687b      	ldr	r3, [r7, #4]
   830d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   830d4:	2b00      	cmp	r3, #0
   830d6:	d004      	beq.n	830e2 <udd_ctrl_interrupt+0x8a>
		dbg_print("Stall\n\r");
		// STALLed
		udd_ack_stall(0);
   830d8:	4b12      	ldr	r3, [pc, #72]	; (83124 <udd_ctrl_interrupt+0xcc>)
   830da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   830de:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	if (Is_udd_endpoint_status_nak_out(status)) {
   830e2:	687b      	ldr	r3, [r7, #4]
   830e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   830e8:	2b00      	cmp	r3, #0
   830ea:	d008      	beq.n	830fe <udd_ctrl_interrupt+0xa6>
		// Overflow on OUT packet
		dbg_print("NakO ");
		udd_ack_nak_out(0);
   830ec:	4b0d      	ldr	r3, [pc, #52]	; (83124 <udd_ctrl_interrupt+0xcc>)
   830ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   830f2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_overflow();
   830f6:	4b0f      	ldr	r3, [pc, #60]	; (83134 <udd_ctrl_interrupt+0xdc>)
   830f8:	4798      	blx	r3
		return true;
   830fa:	2301      	movs	r3, #1
   830fc:	e00e      	b.n	8311c <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_nak_in(status)) {
   830fe:	687b      	ldr	r3, [r7, #4]
   83100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   83104:	2b00      	cmp	r3, #0
   83106:	d008      	beq.n	8311a <udd_ctrl_interrupt+0xc2>
		// Underflow on IN packet
		dbg_print("NakI ");
		udd_ack_nak_in(0);
   83108:	4b06      	ldr	r3, [pc, #24]	; (83124 <udd_ctrl_interrupt+0xcc>)
   8310a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8310e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_underflow();
   83112:	4b09      	ldr	r3, [pc, #36]	; (83138 <udd_ctrl_interrupt+0xe0>)
   83114:	4798      	blx	r3
		return true;
   83116:	2301      	movs	r3, #1
   83118:	e000      	b.n	8311c <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("UnH ");
	return false;
   8311a:	2300      	movs	r3, #0
}
   8311c:	4618      	mov	r0, r3
   8311e:	3708      	adds	r7, #8
   83120:	46bd      	mov	sp, r7
   83122:	bd80      	pop	{r7, pc}
   83124:	400a4000 	.word	0x400a4000
   83128:	00082a95 	.word	0x00082a95
   8312c:	00082bd5 	.word	0x00082bd5
   83130:	00082d3d 	.word	0x00082d3d
   83134:	00082f3d 	.word	0x00082f3d
   83138:	00082ef9 	.word	0x00082ef9

0008313c <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
   8313c:	b480      	push	{r7}
   8313e:	b083      	sub	sp, #12
   83140:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83142:	2300      	movs	r3, #0
   83144:	71fb      	strb	r3, [r7, #7]
   83146:	e01c      	b.n	83182 <udd_ep_job_table_reset+0x46>
		udd_ep_job[i].busy = false;
   83148:	79fa      	ldrb	r2, [r7, #7]
   8314a:	4912      	ldr	r1, [pc, #72]	; (83194 <udd_ep_job_table_reset+0x58>)
   8314c:	4613      	mov	r3, r2
   8314e:	005b      	lsls	r3, r3, #1
   83150:	4413      	add	r3, r2
   83152:	00db      	lsls	r3, r3, #3
   83154:	440b      	add	r3, r1
   83156:	f103 0210 	add.w	r2, r3, #16
   8315a:	7913      	ldrb	r3, [r2, #4]
   8315c:	f36f 0300 	bfc	r3, #0, #1
   83160:	7113      	strb	r3, [r2, #4]
		udd_ep_job[i].stall_requested = false;
   83162:	79fa      	ldrb	r2, [r7, #7]
   83164:	490b      	ldr	r1, [pc, #44]	; (83194 <udd_ep_job_table_reset+0x58>)
   83166:	4613      	mov	r3, r2
   83168:	005b      	lsls	r3, r3, #1
   8316a:	4413      	add	r3, r2
   8316c:	00db      	lsls	r3, r3, #3
   8316e:	440b      	add	r3, r1
   83170:	f103 0210 	add.w	r2, r3, #16
   83174:	7913      	ldrb	r3, [r2, #4]
   83176:	f36f 0382 	bfc	r3, #2, #1
   8317a:	7113      	strb	r3, [r2, #4]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8317c:	79fb      	ldrb	r3, [r7, #7]
   8317e:	3301      	adds	r3, #1
   83180:	71fb      	strb	r3, [r7, #7]
   83182:	79fb      	ldrb	r3, [r7, #7]
   83184:	2b01      	cmp	r3, #1
   83186:	d9df      	bls.n	83148 <udd_ep_job_table_reset+0xc>
	}
}
   83188:	bf00      	nop
   8318a:	370c      	adds	r7, #12
   8318c:	46bd      	mov	sp, r7
   8318e:	bc80      	pop	{r7}
   83190:	4770      	bx	lr
   83192:	bf00      	nop
   83194:	20000d08 	.word	0x20000d08

00083198 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
   83198:	b580      	push	{r7, lr}
   8319a:	b082      	sub	sp, #8
   8319c:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8319e:	2300      	movs	r3, #0
   831a0:	71fb      	strb	r3, [r7, #7]
   831a2:	e010      	b.n	831c6 <udd_ep_job_table_kill+0x2e>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   831a4:	79fa      	ldrb	r2, [r7, #7]
   831a6:	4613      	mov	r3, r2
   831a8:	005b      	lsls	r3, r3, #1
   831aa:	4413      	add	r3, r2
   831ac:	00db      	lsls	r3, r3, #3
   831ae:	4a09      	ldr	r2, [pc, #36]	; (831d4 <udd_ep_job_table_kill+0x3c>)
   831b0:	1898      	adds	r0, r3, r2
   831b2:	79fb      	ldrb	r3, [r7, #7]
   831b4:	3301      	adds	r3, #1
   831b6:	b2db      	uxtb	r3, r3
   831b8:	461a      	mov	r2, r3
   831ba:	2101      	movs	r1, #1
   831bc:	4b06      	ldr	r3, [pc, #24]	; (831d8 <udd_ep_job_table_kill+0x40>)
   831be:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   831c0:	79fb      	ldrb	r3, [r7, #7]
   831c2:	3301      	adds	r3, #1
   831c4:	71fb      	strb	r3, [r7, #7]
   831c6:	79fb      	ldrb	r3, [r7, #7]
   831c8:	2b01      	cmp	r3, #1
   831ca:	d9eb      	bls.n	831a4 <udd_ep_job_table_kill+0xc>
	}
}
   831cc:	bf00      	nop
   831ce:	3708      	adds	r7, #8
   831d0:	46bd      	mov	sp, r7
   831d2:	bd80      	pop	{r7, pc}
   831d4:	20000d08 	.word	0x20000d08
   831d8:	00083219 	.word	0x00083219

000831dc <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   831dc:	b580      	push	{r7, lr}
   831de:	b082      	sub	sp, #8
   831e0:	af00      	add	r7, sp, #0
   831e2:	4603      	mov	r3, r0
   831e4:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
   831e6:	79fb      	ldrb	r3, [r7, #7]
   831e8:	f003 030f 	and.w	r3, r3, #15
   831ec:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   831ee:	79fb      	ldrb	r3, [r7, #7]
   831f0:	1e5a      	subs	r2, r3, #1
   831f2:	4613      	mov	r3, r2
   831f4:	005b      	lsls	r3, r3, #1
   831f6:	4413      	add	r3, r2
   831f8:	00db      	lsls	r3, r3, #3
   831fa:	4a05      	ldr	r2, [pc, #20]	; (83210 <udd_ep_abort_job+0x34>)
   831fc:	4413      	add	r3, r2
   831fe:	79fa      	ldrb	r2, [r7, #7]
   83200:	2101      	movs	r1, #1
   83202:	4618      	mov	r0, r3
   83204:	4b03      	ldr	r3, [pc, #12]	; (83214 <udd_ep_abort_job+0x38>)
   83206:	4798      	blx	r3
}
   83208:	bf00      	nop
   8320a:	3708      	adds	r7, #8
   8320c:	46bd      	mov	sp, r7
   8320e:	bd80      	pop	{r7, pc}
   83210:	20000d08 	.word	0x20000d08
   83214:	00083219 	.word	0x00083219

00083218 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   83218:	b580      	push	{r7, lr}
   8321a:	b082      	sub	sp, #8
   8321c:	af00      	add	r7, sp, #0
   8321e:	6078      	str	r0, [r7, #4]
   83220:	460b      	mov	r3, r1
   83222:	70fb      	strb	r3, [r7, #3]
   83224:	4613      	mov	r3, r2
   83226:	70bb      	strb	r3, [r7, #2]
	if (ptr_job->busy == false) {
   83228:	687b      	ldr	r3, [r7, #4]
   8322a:	7d1b      	ldrb	r3, [r3, #20]
   8322c:	f003 0301 	and.w	r3, r3, #1
   83230:	b2db      	uxtb	r3, r3
   83232:	2b00      	cmp	r3, #0
   83234:	d01f      	beq.n	83276 <udd_ep_finish_job+0x5e>
		return; // No on-going job
	}
	ptr_job->busy = false;
   83236:	687a      	ldr	r2, [r7, #4]
   83238:	7d13      	ldrb	r3, [r2, #20]
   8323a:	f36f 0300 	bfc	r3, #0, #1
   8323e:	7513      	strb	r3, [r2, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   83240:	687b      	ldr	r3, [r7, #4]
   83242:	681b      	ldr	r3, [r3, #0]
   83244:	2b00      	cmp	r3, #0
   83246:	d018      	beq.n	8327a <udd_ep_finish_job+0x62>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   83248:	4a0e      	ldr	r2, [pc, #56]	; (83284 <udd_ep_finish_job+0x6c>)
   8324a:	78bb      	ldrb	r3, [r7, #2]
   8324c:	3308      	adds	r3, #8
   8324e:	015b      	lsls	r3, r3, #5
   83250:	4413      	add	r3, r2
   83252:	681b      	ldr	r3, [r3, #0]
   83254:	f003 0308 	and.w	r3, r3, #8
   83258:	2b00      	cmp	r3, #0
   8325a:	d003      	beq.n	83264 <udd_ep_finish_job+0x4c>
		ep_num |= USB_EP_DIR_IN;
   8325c:	78bb      	ldrb	r3, [r7, #2]
   8325e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   83262:	70bb      	strb	r3, [r7, #2]
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   83264:	687b      	ldr	r3, [r7, #4]
   83266:	681b      	ldr	r3, [r3, #0]
   83268:	78fa      	ldrb	r2, [r7, #3]
   8326a:	4610      	mov	r0, r2
   8326c:	687a      	ldr	r2, [r7, #4]
   8326e:	6891      	ldr	r1, [r2, #8]
   83270:	78ba      	ldrb	r2, [r7, #2]
   83272:	4798      	blx	r3
   83274:	e002      	b.n	8327c <udd_ep_finish_job+0x64>
		return; // No on-going job
   83276:	bf00      	nop
   83278:	e000      	b.n	8327c <udd_ep_finish_job+0x64>
		return; // No callback linked to job
   8327a:	bf00      	nop
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   8327c:	3708      	adds	r7, #8
   8327e:	46bd      	mov	sp, r7
   83280:	bd80      	pop	{r7, pc}
   83282:	bf00      	nop
   83284:	400a4000 	.word	0x400a4000

00083288 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   83288:	b580      	push	{r7, lr}
   8328a:	b086      	sub	sp, #24
   8328c:	af00      	add	r7, sp, #0
   8328e:	4603      	mov	r3, r0
   83290:	71fb      	strb	r3, [r7, #7]
	uint32_t udd_dma_ctrl = 0;
   83292:	2300      	movs	r3, #0
   83294:	617b      	str	r3, [r7, #20]
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   83296:	79fb      	ldrb	r3, [r7, #7]
   83298:	1e5a      	subs	r2, r3, #1
   8329a:	4613      	mov	r3, r2
   8329c:	005b      	lsls	r3, r3, #1
   8329e:	4413      	add	r3, r2
   832a0:	00db      	lsls	r3, r3, #3
   832a2:	4a6d      	ldr	r2, [pc, #436]	; (83458 <udd_ep_trans_done+0x1d0>)
   832a4:	4413      	add	r3, r2
   832a6:	60fb      	str	r3, [r7, #12]

	if (!ptr_job->busy) {
   832a8:	68fb      	ldr	r3, [r7, #12]
   832aa:	7d1b      	ldrb	r3, [r3, #20]
   832ac:	f003 0301 	and.w	r3, r3, #1
   832b0:	b2db      	uxtb	r3, r3
   832b2:	2b00      	cmp	r3, #0
   832b4:	f000 80cb 	beq.w	8344e <udd_ep_trans_done+0x1c6>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   832b8:	68fb      	ldr	r3, [r7, #12]
   832ba:	68da      	ldr	r2, [r3, #12]
   832bc:	68fb      	ldr	r3, [r7, #12]
   832be:	689b      	ldr	r3, [r3, #8]
   832c0:	429a      	cmp	r2, r3
   832c2:	f000 8098 	beq.w	833f6 <udd_ep_trans_done+0x16e>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   832c6:	68fb      	ldr	r3, [r7, #12]
   832c8:	689a      	ldr	r2, [r3, #8]
   832ca:	68fb      	ldr	r3, [r7, #12]
   832cc:	68db      	ldr	r3, [r3, #12]
   832ce:	1ad3      	subs	r3, r2, r3
   832d0:	613b      	str	r3, [r7, #16]

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   832d2:	693b      	ldr	r3, [r7, #16]
   832d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   832d8:	d905      	bls.n	832e6 <udd_ep_trans_done+0x5e>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   832da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   832de:	613b      	str	r3, [r7, #16]

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   832e0:	2300      	movs	r3, #0
   832e2:	617b      	str	r3, [r7, #20]
   832e4:	e002      	b.n	832ec <udd_ep_trans_done+0x64>
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   832e6:	693b      	ldr	r3, [r7, #16]
   832e8:	041b      	lsls	r3, r3, #16
   832ea:	617b      	str	r3, [r7, #20]
		}
		if (Is_udd_endpoint_in(ep)) {
   832ec:	4a5b      	ldr	r2, [pc, #364]	; (8345c <udd_ep_trans_done+0x1d4>)
   832ee:	79fb      	ldrb	r3, [r7, #7]
   832f0:	3308      	adds	r3, #8
   832f2:	015b      	lsls	r3, r3, #5
   832f4:	4413      	add	r3, r2
   832f6:	681b      	ldr	r3, [r3, #0]
   832f8:	f003 0308 	and.w	r3, r3, #8
   832fc:	2b00      	cmp	r3, #0
   832fe:	d01d      	beq.n	8333c <udd_ep_trans_done+0xb4>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   83300:	4a56      	ldr	r2, [pc, #344]	; (8345c <udd_ep_trans_done+0x1d4>)
   83302:	79fb      	ldrb	r3, [r7, #7]
   83304:	3308      	adds	r3, #8
   83306:	015b      	lsls	r3, r3, #5
   83308:	4413      	add	r3, r2
   8330a:	681b      	ldr	r3, [r3, #0]
   8330c:	f003 0307 	and.w	r3, r3, #7
   83310:	2208      	movs	r2, #8
   83312:	fa02 f303 	lsl.w	r3, r2, r3
   83316:	461a      	mov	r2, r3
   83318:	693b      	ldr	r3, [r7, #16]
   8331a:	fbb3 f1f2 	udiv	r1, r3, r2
   8331e:	fb02 f201 	mul.w	r2, r2, r1
   83322:	1a9b      	subs	r3, r3, r2
   83324:	2b00      	cmp	r3, #0
   83326:	d027      	beq.n	83378 <udd_ep_trans_done+0xf0>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   83328:	697b      	ldr	r3, [r7, #20]
   8332a:	f043 0308 	orr.w	r3, r3, #8
   8332e:	617b      	str	r3, [r7, #20]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   83330:	68fa      	ldr	r2, [r7, #12]
   83332:	7d13      	ldrb	r3, [r2, #20]
   83334:	f36f 0341 	bfc	r3, #1, #1
   83338:	7513      	strb	r3, [r2, #20]
   8333a:	e01d      	b.n	83378 <udd_ep_trans_done+0xf0>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   8333c:	4a47      	ldr	r2, [pc, #284]	; (8345c <udd_ep_trans_done+0x1d4>)
   8333e:	79fb      	ldrb	r3, [r7, #7]
   83340:	3308      	adds	r3, #8
   83342:	015b      	lsls	r3, r3, #5
   83344:	4413      	add	r3, r2
   83346:	681b      	ldr	r3, [r3, #0]
   83348:	091b      	lsrs	r3, r3, #4
   8334a:	f003 0303 	and.w	r3, r3, #3
   8334e:	2b01      	cmp	r3, #1
   83350:	d10e      	bne.n	83370 <udd_ep_trans_done+0xe8>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   83352:	4a42      	ldr	r2, [pc, #264]	; (8345c <udd_ep_trans_done+0x1d4>)
   83354:	79fb      	ldrb	r3, [r7, #7]
   83356:	3308      	adds	r3, #8
   83358:	015b      	lsls	r3, r3, #5
   8335a:	4413      	add	r3, r2
   8335c:	681b      	ldr	r3, [r3, #0]
   8335e:	f003 0307 	and.w	r3, r3, #7
   83362:	2208      	movs	r2, #8
   83364:	fa02 f303 	lsl.w	r3, r2, r3
   83368:	461a      	mov	r2, r3
   8336a:	693b      	ldr	r3, [r7, #16]
   8336c:	429a      	cmp	r2, r3
   8336e:	d303      	bcc.n	83378 <udd_ep_trans_done+0xf0>

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   83370:	697b      	ldr	r3, [r7, #20]
   83372:	f043 0314 	orr.w	r3, r3, #20
   83376:	617b      	str	r3, [r7, #20]
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   83378:	79fb      	ldrb	r3, [r7, #7]
   8337a:	011a      	lsls	r2, r3, #4
   8337c:	4b38      	ldr	r3, [pc, #224]	; (83460 <udd_ep_trans_done+0x1d8>)
   8337e:	4413      	add	r3, r2
   83380:	68fa      	ldr	r2, [r7, #12]
   83382:	6851      	ldr	r1, [r2, #4]
   83384:	68fa      	ldr	r2, [r7, #12]
   83386:	68d2      	ldr	r2, [r2, #12]
   83388:	440a      	add	r2, r1
   8338a:	605a      	str	r2, [r3, #4]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   8338c:	697b      	ldr	r3, [r7, #20]
   8338e:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   83392:	617b      	str	r3, [r7, #20]

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
   83394:	4b33      	ldr	r3, [pc, #204]	; (83464 <udd_ep_trans_done+0x1dc>)
   83396:	4798      	blx	r3
   83398:	60b8      	str	r0, [r7, #8]
		if (!(udd_endpoint_dma_get_status(ep)
   8339a:	79fb      	ldrb	r3, [r7, #7]
   8339c:	011a      	lsls	r2, r3, #4
   8339e:	4b30      	ldr	r3, [pc, #192]	; (83460 <udd_ep_trans_done+0x1d8>)
   833a0:	4413      	add	r3, r2
   833a2:	68db      	ldr	r3, [r3, #12]
				& UDPHS_DMASTATUS_END_TR_ST)) {
   833a4:	f003 0310 	and.w	r3, r3, #16
		if (!(udd_endpoint_dma_get_status(ep)
   833a8:	2b00      	cmp	r3, #0
   833aa:	d11d      	bne.n	833e8 <udd_ep_trans_done+0x160>
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   833ac:	79fb      	ldrb	r3, [r7, #7]
   833ae:	011a      	lsls	r2, r3, #4
   833b0:	4b2b      	ldr	r3, [pc, #172]	; (83460 <udd_ep_trans_done+0x1d8>)
   833b2:	4413      	add	r3, r2
   833b4:	697a      	ldr	r2, [r7, #20]
   833b6:	609a      	str	r2, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   833b8:	68fb      	ldr	r3, [r7, #12]
   833ba:	68da      	ldr	r2, [r3, #12]
   833bc:	693b      	ldr	r3, [r7, #16]
   833be:	441a      	add	r2, r3
   833c0:	68fb      	ldr	r3, [r7, #12]
   833c2:	60da      	str	r2, [r3, #12]
			ptr_job->buf_load = next_trans;
   833c4:	68fb      	ldr	r3, [r7, #12]
   833c6:	693a      	ldr	r2, [r7, #16]
   833c8:	611a      	str	r2, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   833ca:	4924      	ldr	r1, [pc, #144]	; (8345c <udd_ep_trans_done+0x1d4>)
   833cc:	4b23      	ldr	r3, [pc, #140]	; (8345c <udd_ep_trans_done+0x1d4>)
   833ce:	691a      	ldr	r2, [r3, #16]
   833d0:	79fb      	ldrb	r3, [r7, #7]
   833d2:	3b01      	subs	r3, #1
   833d4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   833d8:	fa00 f303 	lsl.w	r3, r0, r3
   833dc:	4313      	orrs	r3, r2
   833de:	610b      	str	r3, [r1, #16]
			cpu_irq_restore(flags);
   833e0:	68b8      	ldr	r0, [r7, #8]
   833e2:	4b21      	ldr	r3, [pc, #132]	; (83468 <udd_ep_trans_done+0x1e0>)
   833e4:	4798      	blx	r3
			return;
   833e6:	e033      	b.n	83450 <udd_ep_trans_done+0x1c8>
		}
		cpu_irq_restore(flags);
   833e8:	68b8      	ldr	r0, [r7, #8]
   833ea:	4b1f      	ldr	r3, [pc, #124]	; (83468 <udd_ep_trans_done+0x1e0>)
   833ec:	4798      	blx	r3

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   833ee:	68fb      	ldr	r3, [r7, #12]
   833f0:	68da      	ldr	r2, [r3, #12]
   833f2:	68fb      	ldr	r3, [r7, #12]
   833f4:	609a      	str	r2, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   833f6:	4a19      	ldr	r2, [pc, #100]	; (8345c <udd_ep_trans_done+0x1d4>)
   833f8:	79fb      	ldrb	r3, [r7, #7]
   833fa:	3308      	adds	r3, #8
   833fc:	015b      	lsls	r3, r3, #5
   833fe:	4413      	add	r3, r2
   83400:	681b      	ldr	r3, [r3, #0]
   83402:	f003 0308 	and.w	r3, r3, #8
   83406:	2b00      	cmp	r3, #0
   83408:	d01a      	beq.n	83440 <udd_ep_trans_done+0x1b8>
		if (ptr_job->b_shortpacket) {
   8340a:	68fb      	ldr	r3, [r7, #12]
   8340c:	7d1b      	ldrb	r3, [r3, #20]
   8340e:	f003 0302 	and.w	r3, r3, #2
   83412:	b2db      	uxtb	r3, r3
   83414:	2b00      	cmp	r3, #0
   83416:	d013      	beq.n	83440 <udd_ep_trans_done+0x1b8>
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   83418:	4a10      	ldr	r2, [pc, #64]	; (8345c <udd_ep_trans_done+0x1d4>)
   8341a:	79fb      	ldrb	r3, [r7, #7]
   8341c:	3308      	adds	r3, #8
   8341e:	015b      	lsls	r3, r3, #5
   83420:	4413      	add	r3, r2
   83422:	3304      	adds	r3, #4
   83424:	f44f 6200 	mov.w	r2, #2048	; 0x800
   83428:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep);
   8342a:	490c      	ldr	r1, [pc, #48]	; (8345c <udd_ep_trans_done+0x1d4>)
   8342c:	4b0b      	ldr	r3, [pc, #44]	; (8345c <udd_ep_trans_done+0x1d4>)
   8342e:	691a      	ldr	r2, [r3, #16]
   83430:	79fb      	ldrb	r3, [r7, #7]
   83432:	f44f 7080 	mov.w	r0, #256	; 0x100
   83436:	fa00 f303 	lsl.w	r3, r0, r3
   8343a:	4313      	orrs	r3, r2
   8343c:	610b      	str	r3, [r1, #16]
			return;
   8343e:	e007      	b.n	83450 <udd_ep_trans_done+0x1c8>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   83440:	79fb      	ldrb	r3, [r7, #7]
   83442:	461a      	mov	r2, r3
   83444:	2100      	movs	r1, #0
   83446:	68f8      	ldr	r0, [r7, #12]
   83448:	4b08      	ldr	r3, [pc, #32]	; (8346c <udd_ep_trans_done+0x1e4>)
   8344a:	4798      	blx	r3
   8344c:	e000      	b.n	83450 <udd_ep_trans_done+0x1c8>
		return; // No job is running, then ignore it (system error)
   8344e:	bf00      	nop
}
   83450:	3718      	adds	r7, #24
   83452:	46bd      	mov	sp, r7
   83454:	bd80      	pop	{r7, pc}
   83456:	bf00      	nop
   83458:	20000d08 	.word	0x20000d08
   8345c:	400a4000 	.word	0x400a4000
   83460:	400a4300 	.word	0x400a4300
   83464:	00081a99 	.word	0x00081a99
   83468:	00081af1 	.word	0x00081af1
   8346c:	00083219 	.word	0x00083219

00083470 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
   83470:	b580      	push	{r7, lr}
   83472:	b084      	sub	sp, #16
   83474:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   83476:	2301      	movs	r3, #1
   83478:	73fb      	strb	r3, [r7, #15]
   8347a:	e0e0      	b.n	8363e <udd_ep_interrupt+0x1ce>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   8347c:	7bfb      	ldrb	r3, [r7, #15]
   8347e:	1e5a      	subs	r2, r3, #1
   83480:	4613      	mov	r3, r2
   83482:	005b      	lsls	r3, r3, #1
   83484:	4413      	add	r3, r2
   83486:	00db      	lsls	r3, r3, #3
   83488:	4a71      	ldr	r2, [pc, #452]	; (83650 <udd_ep_interrupt+0x1e0>)
   8348a:	4413      	add	r3, r2
   8348c:	60bb      	str	r3, [r7, #8]

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   8348e:	4b71      	ldr	r3, [pc, #452]	; (83654 <udd_ep_interrupt+0x1e4>)
   83490:	691a      	ldr	r2, [r3, #16]
   83492:	7bfb      	ldrb	r3, [r7, #15]
   83494:	3b01      	subs	r3, #1
   83496:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   8349a:	fa01 f303 	lsl.w	r3, r1, r3
   8349e:	4013      	ands	r3, r2
   834a0:	2b00      	cmp	r3, #0
   834a2:	d03c      	beq.n	8351e <udd_ep_interrupt+0xae>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   834a4:	4b6b      	ldr	r3, [pc, #428]	; (83654 <udd_ep_interrupt+0x1e4>)
   834a6:	695a      	ldr	r2, [r3, #20]
   834a8:	7bfb      	ldrb	r3, [r7, #15]
   834aa:	3b01      	subs	r3, #1
   834ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   834b0:	fa01 f303 	lsl.w	r3, r1, r3
   834b4:	4013      	ands	r3, r2
   834b6:	2b00      	cmp	r3, #0
   834b8:	d031      	beq.n	8351e <udd_ep_interrupt+0xae>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   834ba:	7bfb      	ldrb	r3, [r7, #15]
   834bc:	011a      	lsls	r2, r3, #4
   834be:	4b66      	ldr	r3, [pc, #408]	; (83658 <udd_ep_interrupt+0x1e8>)
   834c0:	4413      	add	r3, r2
   834c2:	68db      	ldr	r3, [r3, #12]
					& UDPHS_DMASTATUS_CHANN_ENB) {
   834c4:	f003 0301 	and.w	r3, r3, #1
			if (udd_endpoint_dma_get_status(ep)
   834c8:	2b00      	cmp	r3, #0
   834ca:	d001      	beq.n	834d0 <udd_ep_interrupt+0x60>
				return true; // Ignore EOT_STA interrupt
   834cc:	2301      	movs	r3, #1
   834ce:	e0bb      	b.n	83648 <udd_ep_interrupt+0x1d8>
			}
			dbg_print("dma%d: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   834d0:	4960      	ldr	r1, [pc, #384]	; (83654 <udd_ep_interrupt+0x1e4>)
   834d2:	4b60      	ldr	r3, [pc, #384]	; (83654 <udd_ep_interrupt+0x1e4>)
   834d4:	691a      	ldr	r2, [r3, #16]
   834d6:	7bfb      	ldrb	r3, [r7, #15]
   834d8:	3b01      	subs	r3, #1
   834da:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   834de:	fa00 f303 	lsl.w	r3, r0, r3
   834e2:	43db      	mvns	r3, r3
   834e4:	4013      	ands	r3, r2
   834e6:	610b      	str	r3, [r1, #16]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   834e8:	7bfb      	ldrb	r3, [r7, #15]
   834ea:	011a      	lsls	r2, r3, #4
   834ec:	4b5a      	ldr	r3, [pc, #360]	; (83658 <udd_ep_interrupt+0x1e8>)
   834ee:	4413      	add	r3, r2
   834f0:	68db      	ldr	r3, [r3, #12]
					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
   834f2:	0c1b      	lsrs	r3, r3, #16
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   834f4:	b29b      	uxth	r3, r3
   834f6:	607b      	str	r3, [r7, #4]
			if (nb_remaining) {
   834f8:	687b      	ldr	r3, [r7, #4]
   834fa:	2b00      	cmp	r3, #0
   834fc:	d009      	beq.n	83512 <udd_ep_interrupt+0xa2>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   834fe:	68bb      	ldr	r3, [r7, #8]
   83500:	68da      	ldr	r2, [r3, #12]
   83502:	687b      	ldr	r3, [r7, #4]
   83504:	1ad2      	subs	r2, r2, r3
   83506:	68bb      	ldr	r3, [r7, #8]
   83508:	60da      	str	r2, [r3, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   8350a:	68bb      	ldr	r3, [r7, #8]
   8350c:	68da      	ldr	r2, [r3, #12]
   8350e:	68bb      	ldr	r3, [r7, #8]
   83510:	609a      	str	r2, [r3, #8]
			}
			udd_ep_trans_done(ep);
   83512:	7bfb      	ldrb	r3, [r7, #15]
   83514:	4618      	mov	r0, r3
   83516:	4b51      	ldr	r3, [pc, #324]	; (8365c <udd_ep_interrupt+0x1ec>)
   83518:	4798      	blx	r3
			return true;
   8351a:	2301      	movs	r3, #1
   8351c:	e094      	b.n	83648 <udd_ep_interrupt+0x1d8>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   8351e:	4b4d      	ldr	r3, [pc, #308]	; (83654 <udd_ep_interrupt+0x1e4>)
   83520:	691a      	ldr	r2, [r3, #16]
   83522:	7bfb      	ldrb	r3, [r7, #15]
   83524:	f44f 7180 	mov.w	r1, #256	; 0x100
   83528:	fa01 f303 	lsl.w	r3, r1, r3
   8352c:	4013      	ands	r3, r2
   8352e:	2b00      	cmp	r3, #0
   83530:	f000 8082 	beq.w	83638 <udd_ep_interrupt+0x1c8>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   83534:	4a47      	ldr	r2, [pc, #284]	; (83654 <udd_ep_interrupt+0x1e4>)
   83536:	7bfb      	ldrb	r3, [r7, #15]
   83538:	015b      	lsls	r3, r3, #5
   8353a:	4413      	add	r3, r2
   8353c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   83540:	681b      	ldr	r3, [r3, #0]
   83542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   83546:	2b00      	cmp	r3, #0
   83548:	d024      	beq.n	83594 <udd_ep_interrupt+0x124>
					&& !Is_udd_tx_pkt_ready(ep)) {
   8354a:	4a42      	ldr	r2, [pc, #264]	; (83654 <udd_ep_interrupt+0x1e4>)
   8354c:	7bfb      	ldrb	r3, [r7, #15]
   8354e:	015b      	lsls	r3, r3, #5
   83550:	4413      	add	r3, r2
   83552:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83556:	681b      	ldr	r3, [r3, #0]
   83558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   8355c:	2b00      	cmp	r3, #0
   8355e:	d119      	bne.n	83594 <udd_ep_interrupt+0x124>
				udd_disable_tx_pkt_ready_interrupt(ep);
   83560:	4a3c      	ldr	r2, [pc, #240]	; (83654 <udd_ep_interrupt+0x1e4>)
   83562:	7bfb      	ldrb	r3, [r7, #15]
   83564:	015b      	lsls	r3, r3, #5
   83566:	4413      	add	r3, r2
   83568:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8356c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   83570:	601a      	str	r2, [r3, #0]
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   83572:	4a38      	ldr	r2, [pc, #224]	; (83654 <udd_ep_interrupt+0x1e4>)
   83574:	7bfb      	ldrb	r3, [r7, #15]
   83576:	015b      	lsls	r3, r3, #5
   83578:	4413      	add	r3, r2
   8357a:	f503 738a 	add.w	r3, r3, #276	; 0x114
   8357e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   83582:	601a      	str	r2, [r3, #0]
				udd_ep_finish_job(ptr_job, false, ep);
   83584:	7bfb      	ldrb	r3, [r7, #15]
   83586:	461a      	mov	r2, r3
   83588:	2100      	movs	r1, #0
   8358a:	68b8      	ldr	r0, [r7, #8]
   8358c:	4b34      	ldr	r3, [pc, #208]	; (83660 <udd_ep_interrupt+0x1f0>)
   8358e:	4798      	blx	r3
				return true;
   83590:	2301      	movs	r3, #1
   83592:	e059      	b.n	83648 <udd_ep_interrupt+0x1d8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   83594:	4a2f      	ldr	r2, [pc, #188]	; (83654 <udd_ep_interrupt+0x1e4>)
   83596:	7bfb      	ldrb	r3, [r7, #15]
   83598:	015b      	lsls	r3, r3, #5
   8359a:	4413      	add	r3, r2
   8359c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   835a0:	681b      	ldr	r3, [r3, #0]
   835a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   835a6:	2b00      	cmp	r3, #0
   835a8:	d046      	beq.n	83638 <udd_ep_interrupt+0x1c8>
					&& (0 == udd_nb_busy_bank(ep))) {
   835aa:	4a2a      	ldr	r2, [pc, #168]	; (83654 <udd_ep_interrupt+0x1e4>)
   835ac:	7bfb      	ldrb	r3, [r7, #15]
   835ae:	015b      	lsls	r3, r3, #5
   835b0:	4413      	add	r3, r2
   835b2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   835b6:	681b      	ldr	r3, [r3, #0]
   835b8:	0c9b      	lsrs	r3, r3, #18
   835ba:	f003 0303 	and.w	r3, r3, #3
   835be:	2b00      	cmp	r3, #0
   835c0:	d13a      	bne.n	83638 <udd_ep_interrupt+0x1c8>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   835c2:	4a24      	ldr	r2, [pc, #144]	; (83654 <udd_ep_interrupt+0x1e4>)
   835c4:	7bfb      	ldrb	r3, [r7, #15]
   835c6:	015b      	lsls	r3, r3, #5
   835c8:	4413      	add	r3, r2
   835ca:	f503 7384 	add.w	r3, r3, #264	; 0x108
   835ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   835d2:	601a      	str	r2, [r3, #0]
				udd_disable_endpoint_interrupt(ep);
   835d4:	491f      	ldr	r1, [pc, #124]	; (83654 <udd_ep_interrupt+0x1e4>)
   835d6:	4b1f      	ldr	r3, [pc, #124]	; (83654 <udd_ep_interrupt+0x1e4>)
   835d8:	691a      	ldr	r2, [r3, #16]
   835da:	7bfb      	ldrb	r3, [r7, #15]
   835dc:	f44f 7080 	mov.w	r0, #256	; 0x100
   835e0:	fa00 f303 	lsl.w	r3, r0, r3
   835e4:	43db      	mvns	r3, r3
   835e6:	4013      	ands	r3, r2
   835e8:	610b      	str	r3, [r1, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   835ea:	68ba      	ldr	r2, [r7, #8]
   835ec:	7d13      	ldrb	r3, [r2, #20]
   835ee:	f36f 0382 	bfc	r3, #2, #1
   835f2:	7513      	strb	r3, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   835f4:	4917      	ldr	r1, [pc, #92]	; (83654 <udd_ep_interrupt+0x1e4>)
   835f6:	7bfb      	ldrb	r3, [r7, #15]
   835f8:	4816      	ldr	r0, [pc, #88]	; (83654 <udd_ep_interrupt+0x1e4>)
   835fa:	7bfa      	ldrb	r2, [r7, #15]
   835fc:	0152      	lsls	r2, r2, #5
   835fe:	4402      	add	r2, r0
   83600:	f502 7284 	add.w	r2, r2, #264	; 0x108
   83604:	6812      	ldr	r2, [r2, #0]
   83606:	f022 0202 	bic.w	r2, r2, #2
   8360a:	015b      	lsls	r3, r3, #5
   8360c:	440b      	add	r3, r1
   8360e:	f503 7384 	add.w	r3, r3, #264	; 0x108
   83612:	601a      	str	r2, [r3, #0]
				udd_enable_stall_handshake(ep);
   83614:	4a0f      	ldr	r2, [pc, #60]	; (83654 <udd_ep_interrupt+0x1e4>)
   83616:	7bfb      	ldrb	r3, [r7, #15]
   83618:	015b      	lsls	r3, r3, #5
   8361a:	4413      	add	r3, r2
   8361c:	f503 738a 	add.w	r3, r3, #276	; 0x114
   83620:	2220      	movs	r2, #32
   83622:	601a      	str	r2, [r3, #0]
				udd_reset_data_toggle(ep);
   83624:	4a0b      	ldr	r2, [pc, #44]	; (83654 <udd_ep_interrupt+0x1e4>)
   83626:	7bfb      	ldrb	r3, [r7, #15]
   83628:	015b      	lsls	r3, r3, #5
   8362a:	4413      	add	r3, r2
   8362c:	f503 738c 	add.w	r3, r3, #280	; 0x118
   83630:	2240      	movs	r2, #64	; 0x40
   83632:	601a      	str	r2, [r3, #0]
				//dbg_print("exHalt%x ", ep);
				return true;
   83634:	2301      	movs	r3, #1
   83636:	e007      	b.n	83648 <udd_ep_interrupt+0x1d8>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   83638:	7bfb      	ldrb	r3, [r7, #15]
   8363a:	3301      	adds	r3, #1
   8363c:	73fb      	strb	r3, [r7, #15]
   8363e:	7bfb      	ldrb	r3, [r7, #15]
   83640:	2b02      	cmp	r3, #2
   83642:	f67f af1b 	bls.w	8347c <udd_ep_interrupt+0xc>
			}
		}
	}
	return false;
   83646:	2300      	movs	r3, #0
}
   83648:	4618      	mov	r0, r3
   8364a:	3710      	adds	r7, #16
   8364c:	46bd      	mov	sp, r7
   8364e:	bd80      	pop	{r7, pc}
   83650:	20000d08 	.word	0x20000d08
   83654:	400a4000 	.word	0x400a4000
   83658:	400a4300 	.word	0x400a4300
   8365c:	00083289 	.word	0x00083289
   83660:	00083219 	.word	0x00083219

00083664 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   83664:	b580      	push	{r7, lr}
   83666:	b082      	sub	sp, #8
   83668:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   8366a:	4b1e      	ldr	r3, [pc, #120]	; (836e4 <Reset_Handler+0x80>)
   8366c:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   8366e:	4b1e      	ldr	r3, [pc, #120]	; (836e8 <Reset_Handler+0x84>)
   83670:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   83672:	687a      	ldr	r2, [r7, #4]
   83674:	683b      	ldr	r3, [r7, #0]
   83676:	429a      	cmp	r2, r3
   83678:	d00c      	beq.n	83694 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   8367a:	e007      	b.n	8368c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   8367c:	683b      	ldr	r3, [r7, #0]
   8367e:	1d1a      	adds	r2, r3, #4
   83680:	603a      	str	r2, [r7, #0]
   83682:	687a      	ldr	r2, [r7, #4]
   83684:	1d11      	adds	r1, r2, #4
   83686:	6079      	str	r1, [r7, #4]
   83688:	6812      	ldr	r2, [r2, #0]
   8368a:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   8368c:	683b      	ldr	r3, [r7, #0]
   8368e:	4a17      	ldr	r2, [pc, #92]	; (836ec <Reset_Handler+0x88>)
   83690:	4293      	cmp	r3, r2
   83692:	d3f3      	bcc.n	8367c <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83694:	4b16      	ldr	r3, [pc, #88]	; (836f0 <Reset_Handler+0x8c>)
   83696:	603b      	str	r3, [r7, #0]
   83698:	e004      	b.n	836a4 <Reset_Handler+0x40>
		*pDest++ = 0;
   8369a:	683b      	ldr	r3, [r7, #0]
   8369c:	1d1a      	adds	r2, r3, #4
   8369e:	603a      	str	r2, [r7, #0]
   836a0:	2200      	movs	r2, #0
   836a2:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   836a4:	683b      	ldr	r3, [r7, #0]
   836a6:	4a13      	ldr	r2, [pc, #76]	; (836f4 <Reset_Handler+0x90>)
   836a8:	4293      	cmp	r3, r2
   836aa:	d3f6      	bcc.n	8369a <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   836ac:	4b12      	ldr	r3, [pc, #72]	; (836f8 <Reset_Handler+0x94>)
   836ae:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   836b0:	4a12      	ldr	r2, [pc, #72]	; (836fc <Reset_Handler+0x98>)
   836b2:	687b      	ldr	r3, [r7, #4]
   836b4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   836b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   836bc:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   836be:	687b      	ldr	r3, [r7, #4]
   836c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   836c4:	d309      	bcc.n	836da <Reset_Handler+0x76>
   836c6:	687b      	ldr	r3, [r7, #4]
   836c8:	4a0d      	ldr	r2, [pc, #52]	; (83700 <Reset_Handler+0x9c>)
   836ca:	4293      	cmp	r3, r2
   836cc:	d805      	bhi.n	836da <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   836ce:	4a0b      	ldr	r2, [pc, #44]	; (836fc <Reset_Handler+0x98>)
   836d0:	4b0a      	ldr	r3, [pc, #40]	; (836fc <Reset_Handler+0x98>)
   836d2:	689b      	ldr	r3, [r3, #8]
   836d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   836d8:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   836da:	4b0a      	ldr	r3, [pc, #40]	; (83704 <Reset_Handler+0xa0>)
   836dc:	4798      	blx	r3

	/* Branch to main function */
	main();
   836de:	4b0a      	ldr	r3, [pc, #40]	; (83708 <Reset_Handler+0xa4>)
   836e0:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   836e2:	e7fe      	b.n	836e2 <Reset_Handler+0x7e>
   836e4:	00085c80 	.word	0x00085c80
   836e8:	20000000 	.word	0x20000000
   836ec:	200007dc 	.word	0x200007dc
   836f0:	200007dc 	.word	0x200007dc
   836f4:	20000d9c 	.word	0x20000d9c
   836f8:	00080000 	.word	0x00080000
   836fc:	e000ed00 	.word	0xe000ed00
   83700:	20003fff 	.word	0x20003fff
   83704:	00085ab1 	.word	0x00085ab1
   83708:	00080b35 	.word	0x00080b35

0008370c <osc_enable>:
{
   8370c:	b580      	push	{r7, lr}
   8370e:	b082      	sub	sp, #8
   83710:	af00      	add	r7, sp, #0
   83712:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83714:	687b      	ldr	r3, [r7, #4]
   83716:	2b07      	cmp	r3, #7
   83718:	d82e      	bhi.n	83778 <osc_enable+0x6c>
   8371a:	a201      	add	r2, pc, #4	; (adr r2, 83720 <osc_enable+0x14>)
   8371c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83720:	00083777 	.word	0x00083777
   83724:	00083741 	.word	0x00083741
   83728:	00083749 	.word	0x00083749
   8372c:	00083751 	.word	0x00083751
   83730:	00083759 	.word	0x00083759
   83734:	00083761 	.word	0x00083761
   83738:	00083769 	.word	0x00083769
   8373c:	00083771 	.word	0x00083771
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   83740:	2000      	movs	r0, #0
   83742:	4b0f      	ldr	r3, [pc, #60]	; (83780 <osc_enable+0x74>)
   83744:	4798      	blx	r3
		break;
   83746:	e017      	b.n	83778 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   83748:	2001      	movs	r0, #1
   8374a:	4b0d      	ldr	r3, [pc, #52]	; (83780 <osc_enable+0x74>)
   8374c:	4798      	blx	r3
		break;
   8374e:	e013      	b.n	83778 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   83750:	2000      	movs	r0, #0
   83752:	4b0c      	ldr	r3, [pc, #48]	; (83784 <osc_enable+0x78>)
   83754:	4798      	blx	r3
		break;
   83756:	e00f      	b.n	83778 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   83758:	2010      	movs	r0, #16
   8375a:	4b0a      	ldr	r3, [pc, #40]	; (83784 <osc_enable+0x78>)
   8375c:	4798      	blx	r3
		break;
   8375e:	e00b      	b.n	83778 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   83760:	2020      	movs	r0, #32
   83762:	4b08      	ldr	r3, [pc, #32]	; (83784 <osc_enable+0x78>)
   83764:	4798      	blx	r3
		break;
   83766:	e007      	b.n	83778 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   83768:	203e      	movs	r0, #62	; 0x3e
   8376a:	4b07      	ldr	r3, [pc, #28]	; (83788 <osc_enable+0x7c>)
   8376c:	4798      	blx	r3
		break;
   8376e:	e003      	b.n	83778 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   83770:	4b06      	ldr	r3, [pc, #24]	; (8378c <osc_enable+0x80>)
   83772:	4798      	blx	r3
		break;
   83774:	e000      	b.n	83778 <osc_enable+0x6c>
		break;
   83776:	bf00      	nop
}
   83778:	bf00      	nop
   8377a:	3708      	adds	r7, #8
   8377c:	46bd      	mov	sp, r7
   8377e:	bd80      	pop	{r7, pc}
   83780:	00083bdd 	.word	0x00083bdd
   83784:	00083c49 	.word	0x00083c49
   83788:	00083cbd 	.word	0x00083cbd
   8378c:	00083d09 	.word	0x00083d09

00083790 <osc_is_ready>:
{
   83790:	b580      	push	{r7, lr}
   83792:	b082      	sub	sp, #8
   83794:	af00      	add	r7, sp, #0
   83796:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83798:	687b      	ldr	r3, [r7, #4]
   8379a:	2b07      	cmp	r3, #7
   8379c:	d82f      	bhi.n	837fe <osc_is_ready+0x6e>
   8379e:	a201      	add	r2, pc, #4	; (adr r2, 837a4 <osc_is_ready+0x14>)
   837a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   837a4:	000837c5 	.word	0x000837c5
   837a8:	000837c9 	.word	0x000837c9
   837ac:	000837c9 	.word	0x000837c9
   837b0:	000837db 	.word	0x000837db
   837b4:	000837db 	.word	0x000837db
   837b8:	000837db 	.word	0x000837db
   837bc:	000837ed 	.word	0x000837ed
   837c0:	000837ed 	.word	0x000837ed
		return 1;
   837c4:	2301      	movs	r3, #1
   837c6:	e01b      	b.n	83800 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   837c8:	4b0f      	ldr	r3, [pc, #60]	; (83808 <osc_is_ready+0x78>)
   837ca:	4798      	blx	r3
   837cc:	4603      	mov	r3, r0
   837ce:	2b00      	cmp	r3, #0
   837d0:	bf14      	ite	ne
   837d2:	2301      	movne	r3, #1
   837d4:	2300      	moveq	r3, #0
   837d6:	b2db      	uxtb	r3, r3
   837d8:	e012      	b.n	83800 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   837da:	4b0c      	ldr	r3, [pc, #48]	; (8380c <osc_is_ready+0x7c>)
   837dc:	4798      	blx	r3
   837de:	4603      	mov	r3, r0
   837e0:	2b00      	cmp	r3, #0
   837e2:	bf14      	ite	ne
   837e4:	2301      	movne	r3, #1
   837e6:	2300      	moveq	r3, #0
   837e8:	b2db      	uxtb	r3, r3
   837ea:	e009      	b.n	83800 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   837ec:	4b08      	ldr	r3, [pc, #32]	; (83810 <osc_is_ready+0x80>)
   837ee:	4798      	blx	r3
   837f0:	4603      	mov	r3, r0
   837f2:	2b00      	cmp	r3, #0
   837f4:	bf14      	ite	ne
   837f6:	2301      	movne	r3, #1
   837f8:	2300      	moveq	r3, #0
   837fa:	b2db      	uxtb	r3, r3
   837fc:	e000      	b.n	83800 <osc_is_ready+0x70>
	return 0;
   837fe:	2300      	movs	r3, #0
}
   83800:	4618      	mov	r0, r3
   83802:	3708      	adds	r7, #8
   83804:	46bd      	mov	sp, r7
   83806:	bd80      	pop	{r7, pc}
   83808:	00083c15 	.word	0x00083c15
   8380c:	00083ca5 	.word	0x00083ca5
   83810:	00083d55 	.word	0x00083d55

00083814 <osc_get_rate>:
{
   83814:	b480      	push	{r7}
   83816:	b083      	sub	sp, #12
   83818:	af00      	add	r7, sp, #0
   8381a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8381c:	687b      	ldr	r3, [r7, #4]
   8381e:	2b07      	cmp	r3, #7
   83820:	d823      	bhi.n	8386a <osc_get_rate+0x56>
   83822:	a201      	add	r2, pc, #4	; (adr r2, 83828 <osc_get_rate+0x14>)
   83824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83828:	00083849 	.word	0x00083849
   8382c:	0008384f 	.word	0x0008384f
   83830:	00083853 	.word	0x00083853
   83834:	00083857 	.word	0x00083857
   83838:	0008385b 	.word	0x0008385b
   8383c:	0008385f 	.word	0x0008385f
   83840:	00083863 	.word	0x00083863
   83844:	00083867 	.word	0x00083867
		return OSC_SLCK_32K_RC_HZ;
   83848:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8384c:	e00e      	b.n	8386c <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   8384e:	2300      	movs	r3, #0
   83850:	e00c      	b.n	8386c <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   83852:	2300      	movs	r3, #0
   83854:	e00a      	b.n	8386c <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   83856:	4b08      	ldr	r3, [pc, #32]	; (83878 <osc_get_rate+0x64>)
   83858:	e008      	b.n	8386c <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   8385a:	4b08      	ldr	r3, [pc, #32]	; (8387c <osc_get_rate+0x68>)
   8385c:	e006      	b.n	8386c <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   8385e:	4b08      	ldr	r3, [pc, #32]	; (83880 <osc_get_rate+0x6c>)
   83860:	e004      	b.n	8386c <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   83862:	4b07      	ldr	r3, [pc, #28]	; (83880 <osc_get_rate+0x6c>)
   83864:	e002      	b.n	8386c <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   83866:	4b06      	ldr	r3, [pc, #24]	; (83880 <osc_get_rate+0x6c>)
   83868:	e000      	b.n	8386c <osc_get_rate+0x58>
	return 0;
   8386a:	2300      	movs	r3, #0
}
   8386c:	4618      	mov	r0, r3
   8386e:	370c      	adds	r7, #12
   83870:	46bd      	mov	sp, r7
   83872:	bc80      	pop	{r7}
   83874:	4770      	bx	lr
   83876:	bf00      	nop
   83878:	003d0900 	.word	0x003d0900
   8387c:	007a1200 	.word	0x007a1200
   83880:	00b71b00 	.word	0x00b71b00

00083884 <osc_wait_ready>:
{
   83884:	b580      	push	{r7, lr}
   83886:	b082      	sub	sp, #8
   83888:	af00      	add	r7, sp, #0
   8388a:	4603      	mov	r3, r0
   8388c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8388e:	bf00      	nop
   83890:	79fb      	ldrb	r3, [r7, #7]
   83892:	4618      	mov	r0, r3
   83894:	4b05      	ldr	r3, [pc, #20]	; (838ac <osc_wait_ready+0x28>)
   83896:	4798      	blx	r3
   83898:	4603      	mov	r3, r0
   8389a:	f083 0301 	eor.w	r3, r3, #1
   8389e:	b2db      	uxtb	r3, r3
   838a0:	2b00      	cmp	r3, #0
   838a2:	d1f5      	bne.n	83890 <osc_wait_ready+0xc>
}
   838a4:	bf00      	nop
   838a6:	3708      	adds	r7, #8
   838a8:	46bd      	mov	sp, r7
   838aa:	bd80      	pop	{r7, pc}
   838ac:	00083791 	.word	0x00083791

000838b0 <pll_config_init>:
{
   838b0:	b580      	push	{r7, lr}
   838b2:	b086      	sub	sp, #24
   838b4:	af00      	add	r7, sp, #0
   838b6:	60f8      	str	r0, [r7, #12]
   838b8:	607a      	str	r2, [r7, #4]
   838ba:	603b      	str	r3, [r7, #0]
   838bc:	460b      	mov	r3, r1
   838be:	72fb      	strb	r3, [r7, #11]
	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   838c0:	687b      	ldr	r3, [r7, #4]
   838c2:	2b00      	cmp	r3, #0
   838c4:	d107      	bne.n	838d6 <pll_config_init+0x26>
   838c6:	683b      	ldr	r3, [r7, #0]
   838c8:	2b00      	cmp	r3, #0
   838ca:	d104      	bne.n	838d6 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   838cc:	68fb      	ldr	r3, [r7, #12]
   838ce:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   838d2:	601a      	str	r2, [r3, #0]
   838d4:	e019      	b.n	8390a <pll_config_init+0x5a>
		vco_hz = osc_get_rate(e_src) / ul_div;
   838d6:	7afb      	ldrb	r3, [r7, #11]
   838d8:	4618      	mov	r0, r3
   838da:	4b0e      	ldr	r3, [pc, #56]	; (83914 <pll_config_init+0x64>)
   838dc:	4798      	blx	r3
   838de:	4602      	mov	r2, r0
   838e0:	687b      	ldr	r3, [r7, #4]
   838e2:	fbb2 f3f3 	udiv	r3, r2, r3
   838e6:	617b      	str	r3, [r7, #20]
		vco_hz *= ul_mul;
   838e8:	697b      	ldr	r3, [r7, #20]
   838ea:	683a      	ldr	r2, [r7, #0]
   838ec:	fb02 f303 	mul.w	r3, r2, r3
   838f0:	617b      	str	r3, [r7, #20]
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   838f2:	683b      	ldr	r3, [r7, #0]
   838f4:	3b01      	subs	r3, #1
   838f6:	041a      	lsls	r2, r3, #16
   838f8:	4b07      	ldr	r3, [pc, #28]	; (83918 <pll_config_init+0x68>)
   838fa:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   838fc:	687a      	ldr	r2, [r7, #4]
   838fe:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   83900:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   83902:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   83906:	68fb      	ldr	r3, [r7, #12]
   83908:	601a      	str	r2, [r3, #0]
}
   8390a:	bf00      	nop
   8390c:	3718      	adds	r7, #24
   8390e:	46bd      	mov	sp, r7
   83910:	bd80      	pop	{r7, pc}
   83912:	bf00      	nop
   83914:	00083815 	.word	0x00083815
   83918:	07ff0000 	.word	0x07ff0000

0008391c <pll_enable>:
{
   8391c:	b580      	push	{r7, lr}
   8391e:	b082      	sub	sp, #8
   83920:	af00      	add	r7, sp, #0
   83922:	6078      	str	r0, [r7, #4]
   83924:	6039      	str	r1, [r7, #0]
	if (ul_pll_id == PLLA_ID) {
   83926:	683b      	ldr	r3, [r7, #0]
   83928:	2b00      	cmp	r3, #0
   8392a:	d108      	bne.n	8393e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   8392c:	4b09      	ldr	r3, [pc, #36]	; (83954 <pll_enable+0x38>)
   8392e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   83930:	4a09      	ldr	r2, [pc, #36]	; (83958 <pll_enable+0x3c>)
   83932:	687b      	ldr	r3, [r7, #4]
   83934:	681b      	ldr	r3, [r3, #0]
   83936:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8393a:	6293      	str	r3, [r2, #40]	; 0x28
}
   8393c:	e005      	b.n	8394a <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8393e:	4a06      	ldr	r2, [pc, #24]	; (83958 <pll_enable+0x3c>)
   83940:	687b      	ldr	r3, [r7, #4]
   83942:	681b      	ldr	r3, [r3, #0]
   83944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83948:	61d3      	str	r3, [r2, #28]
}
   8394a:	bf00      	nop
   8394c:	3708      	adds	r7, #8
   8394e:	46bd      	mov	sp, r7
   83950:	bd80      	pop	{r7, pc}
   83952:	bf00      	nop
   83954:	00083dc5 	.word	0x00083dc5
   83958:	400e0400 	.word	0x400e0400

0008395c <pll_is_locked>:
{
   8395c:	b580      	push	{r7, lr}
   8395e:	b082      	sub	sp, #8
   83960:	af00      	add	r7, sp, #0
   83962:	6078      	str	r0, [r7, #4]
	if (ul_pll_id == PLLA_ID) {
   83964:	687b      	ldr	r3, [r7, #4]
   83966:	2b00      	cmp	r3, #0
   83968:	d103      	bne.n	83972 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8396a:	4b05      	ldr	r3, [pc, #20]	; (83980 <pll_is_locked+0x24>)
   8396c:	4798      	blx	r3
   8396e:	4603      	mov	r3, r0
   83970:	e002      	b.n	83978 <pll_is_locked+0x1c>
		return pmc_is_locked_upll();
   83972:	4b04      	ldr	r3, [pc, #16]	; (83984 <pll_is_locked+0x28>)
   83974:	4798      	blx	r3
   83976:	4603      	mov	r3, r0
}
   83978:	4618      	mov	r0, r3
   8397a:	3708      	adds	r7, #8
   8397c:	46bd      	mov	sp, r7
   8397e:	bd80      	pop	{r7, pc}
   83980:	00083ddd 	.word	0x00083ddd
   83984:	00083e11 	.word	0x00083e11

00083988 <pll_enable_source>:
{
   83988:	b580      	push	{r7, lr}
   8398a:	b082      	sub	sp, #8
   8398c:	af00      	add	r7, sp, #0
   8398e:	4603      	mov	r3, r0
   83990:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   83992:	79fb      	ldrb	r3, [r7, #7]
   83994:	3b03      	subs	r3, #3
   83996:	2b04      	cmp	r3, #4
   83998:	d808      	bhi.n	839ac <pll_enable_source+0x24>
		osc_enable(e_src);
   8399a:	79fb      	ldrb	r3, [r7, #7]
   8399c:	4618      	mov	r0, r3
   8399e:	4b06      	ldr	r3, [pc, #24]	; (839b8 <pll_enable_source+0x30>)
   839a0:	4798      	blx	r3
		osc_wait_ready(e_src);
   839a2:	79fb      	ldrb	r3, [r7, #7]
   839a4:	4618      	mov	r0, r3
   839a6:	4b05      	ldr	r3, [pc, #20]	; (839bc <pll_enable_source+0x34>)
   839a8:	4798      	blx	r3
		break;
   839aa:	e000      	b.n	839ae <pll_enable_source+0x26>
		break;
   839ac:	bf00      	nop
}
   839ae:	bf00      	nop
   839b0:	3708      	adds	r7, #8
   839b2:	46bd      	mov	sp, r7
   839b4:	bd80      	pop	{r7, pc}
   839b6:	bf00      	nop
   839b8:	0008370d 	.word	0x0008370d
   839bc:	00083885 	.word	0x00083885

000839c0 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   839c0:	b580      	push	{r7, lr}
   839c2:	b082      	sub	sp, #8
   839c4:	af00      	add	r7, sp, #0
   839c6:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   839c8:	bf00      	nop
   839ca:	6878      	ldr	r0, [r7, #4]
   839cc:	4b04      	ldr	r3, [pc, #16]	; (839e0 <pll_wait_for_lock+0x20>)
   839ce:	4798      	blx	r3
   839d0:	4603      	mov	r3, r0
   839d2:	2b00      	cmp	r3, #0
   839d4:	d0f9      	beq.n	839ca <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   839d6:	2300      	movs	r3, #0
}
   839d8:	4618      	mov	r0, r3
   839da:	3708      	adds	r7, #8
   839dc:	46bd      	mov	sp, r7
   839de:	bd80      	pop	{r7, pc}
   839e0:	0008395d 	.word	0x0008395d

000839e4 <sysclk_get_main_hz>:
{
   839e4:	b580      	push	{r7, lr}
   839e6:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   839e8:	2006      	movs	r0, #6
   839ea:	4b03      	ldr	r3, [pc, #12]	; (839f8 <sysclk_get_main_hz+0x14>)
   839ec:	4798      	blx	r3
   839ee:	4603      	mov	r3, r0
   839f0:	011b      	lsls	r3, r3, #4
}
   839f2:	4618      	mov	r0, r3
   839f4:	bd80      	pop	{r7, pc}
   839f6:	bf00      	nop
   839f8:	00083815 	.word	0x00083815

000839fc <sysclk_get_cpu_hz>:
{
   839fc:	b580      	push	{r7, lr}
   839fe:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   83a00:	4b02      	ldr	r3, [pc, #8]	; (83a0c <sysclk_get_cpu_hz+0x10>)
   83a02:	4798      	blx	r3
   83a04:	4603      	mov	r3, r0
   83a06:	085b      	lsrs	r3, r3, #1
}
   83a08:	4618      	mov	r0, r3
   83a0a:	bd80      	pop	{r7, pc}
   83a0c:	000839e5 	.word	0x000839e5

00083a10 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   83a10:	b590      	push	{r4, r7, lr}
   83a12:	b083      	sub	sp, #12
   83a14:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	pll_enable_source(CONFIG_PLL1_SOURCE);
   83a16:	2006      	movs	r0, #6
   83a18:	4b09      	ldr	r3, [pc, #36]	; (83a40 <sysclk_enable_usb+0x30>)
   83a1a:	4798      	blx	r3
	pll_config_defaults(&pllcfg, 1);
   83a1c:	1d38      	adds	r0, r7, #4
   83a1e:	2300      	movs	r3, #0
   83a20:	2200      	movs	r2, #0
   83a22:	2106      	movs	r1, #6
   83a24:	4c07      	ldr	r4, [pc, #28]	; (83a44 <sysclk_enable_usb+0x34>)
   83a26:	47a0      	blx	r4
	pll_enable(&pllcfg, 1);
   83a28:	1d3b      	adds	r3, r7, #4
   83a2a:	2101      	movs	r1, #1
   83a2c:	4618      	mov	r0, r3
   83a2e:	4b06      	ldr	r3, [pc, #24]	; (83a48 <sysclk_enable_usb+0x38>)
   83a30:	4798      	blx	r3
	pll_wait_for_lock(1);
   83a32:	2001      	movs	r0, #1
   83a34:	4b05      	ldr	r3, [pc, #20]	; (83a4c <sysclk_enable_usb+0x3c>)
   83a36:	4798      	blx	r3
}
   83a38:	bf00      	nop
   83a3a:	370c      	adds	r7, #12
   83a3c:	46bd      	mov	sp, r7
   83a3e:	bd90      	pop	{r4, r7, pc}
   83a40:	00083989 	.word	0x00083989
   83a44:	000838b1 	.word	0x000838b1
   83a48:	0008391d 	.word	0x0008391d
   83a4c:	000839c1 	.word	0x000839c1

00083a50 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   83a50:	b590      	push	{r4, r7, lr}
   83a52:	b083      	sub	sp, #12
   83a54:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   83a56:	4816      	ldr	r0, [pc, #88]	; (83ab0 <sysclk_init+0x60>)
   83a58:	4b16      	ldr	r3, [pc, #88]	; (83ab4 <sysclk_init+0x64>)
   83a5a:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   83a5c:	2006      	movs	r0, #6
   83a5e:	4b16      	ldr	r3, [pc, #88]	; (83ab8 <sysclk_init+0x68>)
   83a60:	4798      	blx	r3
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   83a62:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   83a66:	4b15      	ldr	r3, [pc, #84]	; (83abc <sysclk_init+0x6c>)
   83a68:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   83a6a:	bf00      	nop
   83a6c:	4b14      	ldr	r3, [pc, #80]	; (83ac0 <sysclk_init+0x70>)
   83a6e:	4798      	blx	r3
   83a70:	4603      	mov	r3, r0
   83a72:	2b00      	cmp	r3, #0
   83a74:	d0fa      	beq.n	83a6c <sysclk_init+0x1c>
		}
		pll_config_defaults(&pllcfg, 0);
   83a76:	1d38      	adds	r0, r7, #4
   83a78:	2310      	movs	r3, #16
   83a7a:	2201      	movs	r2, #1
   83a7c:	2106      	movs	r1, #6
   83a7e:	4c11      	ldr	r4, [pc, #68]	; (83ac4 <sysclk_init+0x74>)
   83a80:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   83a82:	1d3b      	adds	r3, r7, #4
   83a84:	2100      	movs	r1, #0
   83a86:	4618      	mov	r0, r3
   83a88:	4b0f      	ldr	r3, [pc, #60]	; (83ac8 <sysclk_init+0x78>)
   83a8a:	4798      	blx	r3
		pll_wait_for_lock(0);
   83a8c:	2000      	movs	r0, #0
   83a8e:	4b0f      	ldr	r3, [pc, #60]	; (83acc <sysclk_init+0x7c>)
   83a90:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   83a92:	2010      	movs	r0, #16
   83a94:	4b0e      	ldr	r3, [pc, #56]	; (83ad0 <sysclk_init+0x80>)
   83a96:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   83a98:	4b0e      	ldr	r3, [pc, #56]	; (83ad4 <sysclk_init+0x84>)
   83a9a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83a9c:	4b0e      	ldr	r3, [pc, #56]	; (83ad8 <sysclk_init+0x88>)
   83a9e:	4798      	blx	r3
   83aa0:	4603      	mov	r3, r0
   83aa2:	4618      	mov	r0, r3
   83aa4:	4b03      	ldr	r3, [pc, #12]	; (83ab4 <sysclk_init+0x64>)
   83aa6:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   83aa8:	bf00      	nop
   83aaa:	370c      	adds	r7, #12
   83aac:	46bd      	mov	sp, r7
   83aae:	bd90      	pop	{r4, r7, pc}
   83ab0:	05b8d800 	.word	0x05b8d800
   83ab4:	200001bd 	.word	0x200001bd
   83ab8:	00083989 	.word	0x00083989
   83abc:	00083d85 	.word	0x00083d85
   83ac0:	00083d6d 	.word	0x00083d6d
   83ac4:	000838b1 	.word	0x000838b1
   83ac8:	0008391d 	.word	0x0008391d
   83acc:	000839c1 	.word	0x000839c1
   83ad0:	00083b5d 	.word	0x00083b5d
   83ad4:	00085931 	.word	0x00085931
   83ad8:	000839fd 	.word	0x000839fd

00083adc <pmc_switch_mck_to_mainck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
   83adc:	b480      	push	{r7}
   83ade:	b085      	sub	sp, #20
   83ae0:	af00      	add	r7, sp, #0
   83ae2:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83ae4:	4a1c      	ldr	r2, [pc, #112]	; (83b58 <pmc_switch_mck_to_mainck+0x7c>)
   83ae6:	4b1c      	ldr	r3, [pc, #112]	; (83b58 <pmc_switch_mck_to_mainck+0x7c>)
   83ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83aea:	f023 0303 	bic.w	r3, r3, #3
   83aee:	f043 0301 	orr.w	r3, r3, #1
   83af2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83af4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83af8:	60fb      	str	r3, [r7, #12]
   83afa:	e007      	b.n	83b0c <pmc_switch_mck_to_mainck+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83afc:	68fb      	ldr	r3, [r7, #12]
   83afe:	2b00      	cmp	r3, #0
   83b00:	d101      	bne.n	83b06 <pmc_switch_mck_to_mainck+0x2a>
			return 1;
   83b02:	2301      	movs	r3, #1
   83b04:	e023      	b.n	83b4e <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   83b06:	68fb      	ldr	r3, [r7, #12]
   83b08:	3b01      	subs	r3, #1
   83b0a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83b0c:	4b12      	ldr	r3, [pc, #72]	; (83b58 <pmc_switch_mck_to_mainck+0x7c>)
   83b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83b10:	f003 0308 	and.w	r3, r3, #8
   83b14:	2b00      	cmp	r3, #0
   83b16:	d0f1      	beq.n	83afc <pmc_switch_mck_to_mainck+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83b18:	490f      	ldr	r1, [pc, #60]	; (83b58 <pmc_switch_mck_to_mainck+0x7c>)
   83b1a:	4b0f      	ldr	r3, [pc, #60]	; (83b58 <pmc_switch_mck_to_mainck+0x7c>)
   83b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83b1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   83b22:	687b      	ldr	r3, [r7, #4]
   83b24:	4313      	orrs	r3, r2
   83b26:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83b28:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83b2c:	60fb      	str	r3, [r7, #12]
   83b2e:	e007      	b.n	83b40 <pmc_switch_mck_to_mainck+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83b30:	68fb      	ldr	r3, [r7, #12]
   83b32:	2b00      	cmp	r3, #0
   83b34:	d101      	bne.n	83b3a <pmc_switch_mck_to_mainck+0x5e>
			return 1;
   83b36:	2301      	movs	r3, #1
   83b38:	e009      	b.n	83b4e <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   83b3a:	68fb      	ldr	r3, [r7, #12]
   83b3c:	3b01      	subs	r3, #1
   83b3e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83b40:	4b05      	ldr	r3, [pc, #20]	; (83b58 <pmc_switch_mck_to_mainck+0x7c>)
   83b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83b44:	f003 0308 	and.w	r3, r3, #8
   83b48:	2b00      	cmp	r3, #0
   83b4a:	d0f1      	beq.n	83b30 <pmc_switch_mck_to_mainck+0x54>
		}
	}

	return 0;
   83b4c:	2300      	movs	r3, #0
}
   83b4e:	4618      	mov	r0, r3
   83b50:	3714      	adds	r7, #20
   83b52:	46bd      	mov	sp, r7
   83b54:	bc80      	pop	{r7}
   83b56:	4770      	bx	lr
   83b58:	400e0400 	.word	0x400e0400

00083b5c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   83b5c:	b480      	push	{r7}
   83b5e:	b085      	sub	sp, #20
   83b60:	af00      	add	r7, sp, #0
   83b62:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83b64:	491c      	ldr	r1, [pc, #112]	; (83bd8 <pmc_switch_mck_to_pllack+0x7c>)
   83b66:	4b1c      	ldr	r3, [pc, #112]	; (83bd8 <pmc_switch_mck_to_pllack+0x7c>)
   83b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83b6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   83b6e:	687b      	ldr	r3, [r7, #4]
   83b70:	4313      	orrs	r3, r2
   83b72:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83b74:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83b78:	60fb      	str	r3, [r7, #12]
   83b7a:	e007      	b.n	83b8c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83b7c:	68fb      	ldr	r3, [r7, #12]
   83b7e:	2b00      	cmp	r3, #0
   83b80:	d101      	bne.n	83b86 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   83b82:	2301      	movs	r3, #1
   83b84:	e023      	b.n	83bce <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   83b86:	68fb      	ldr	r3, [r7, #12]
   83b88:	3b01      	subs	r3, #1
   83b8a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83b8c:	4b12      	ldr	r3, [pc, #72]	; (83bd8 <pmc_switch_mck_to_pllack+0x7c>)
   83b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83b90:	f003 0308 	and.w	r3, r3, #8
   83b94:	2b00      	cmp	r3, #0
   83b96:	d0f1      	beq.n	83b7c <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83b98:	4a0f      	ldr	r2, [pc, #60]	; (83bd8 <pmc_switch_mck_to_pllack+0x7c>)
   83b9a:	4b0f      	ldr	r3, [pc, #60]	; (83bd8 <pmc_switch_mck_to_pllack+0x7c>)
   83b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83b9e:	f023 0303 	bic.w	r3, r3, #3
   83ba2:	f043 0302 	orr.w	r3, r3, #2
   83ba6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83ba8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83bac:	60fb      	str	r3, [r7, #12]
   83bae:	e007      	b.n	83bc0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83bb0:	68fb      	ldr	r3, [r7, #12]
   83bb2:	2b00      	cmp	r3, #0
   83bb4:	d101      	bne.n	83bba <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   83bb6:	2301      	movs	r3, #1
   83bb8:	e009      	b.n	83bce <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   83bba:	68fb      	ldr	r3, [r7, #12]
   83bbc:	3b01      	subs	r3, #1
   83bbe:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83bc0:	4b05      	ldr	r3, [pc, #20]	; (83bd8 <pmc_switch_mck_to_pllack+0x7c>)
   83bc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83bc4:	f003 0308 	and.w	r3, r3, #8
   83bc8:	2b00      	cmp	r3, #0
   83bca:	d0f1      	beq.n	83bb0 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   83bcc:	2300      	movs	r3, #0
}
   83bce:	4618      	mov	r0, r3
   83bd0:	3714      	adds	r7, #20
   83bd2:	46bd      	mov	sp, r7
   83bd4:	bc80      	pop	{r7}
   83bd6:	4770      	bx	lr
   83bd8:	400e0400 	.word	0x400e0400

00083bdc <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   83bdc:	b480      	push	{r7}
   83bde:	b083      	sub	sp, #12
   83be0:	af00      	add	r7, sp, #0
   83be2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   83be4:	687b      	ldr	r3, [r7, #4]
   83be6:	2b01      	cmp	r3, #1
   83be8:	d107      	bne.n	83bfa <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   83bea:	4a08      	ldr	r2, [pc, #32]	; (83c0c <pmc_switch_sclk_to_32kxtal+0x30>)
   83bec:	4b07      	ldr	r3, [pc, #28]	; (83c0c <pmc_switch_sclk_to_32kxtal+0x30>)
   83bee:	689b      	ldr	r3, [r3, #8]
   83bf0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   83bf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83bf8:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   83bfa:	4b04      	ldr	r3, [pc, #16]	; (83c0c <pmc_switch_sclk_to_32kxtal+0x30>)
   83bfc:	4a04      	ldr	r2, [pc, #16]	; (83c10 <pmc_switch_sclk_to_32kxtal+0x34>)
   83bfe:	601a      	str	r2, [r3, #0]
}
   83c00:	bf00      	nop
   83c02:	370c      	adds	r7, #12
   83c04:	46bd      	mov	sp, r7
   83c06:	bc80      	pop	{r7}
   83c08:	4770      	bx	lr
   83c0a:	bf00      	nop
   83c0c:	400e1210 	.word	0x400e1210
   83c10:	a5000008 	.word	0xa5000008

00083c14 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   83c14:	b480      	push	{r7}
   83c16:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   83c18:	4b09      	ldr	r3, [pc, #36]	; (83c40 <pmc_osc_is_ready_32kxtal+0x2c>)
   83c1a:	695b      	ldr	r3, [r3, #20]
   83c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   83c20:	2b00      	cmp	r3, #0
   83c22:	d007      	beq.n	83c34 <pmc_osc_is_ready_32kxtal+0x20>
   83c24:	4b07      	ldr	r3, [pc, #28]	; (83c44 <pmc_osc_is_ready_32kxtal+0x30>)
   83c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83c2c:	2b00      	cmp	r3, #0
   83c2e:	d001      	beq.n	83c34 <pmc_osc_is_ready_32kxtal+0x20>
   83c30:	2301      	movs	r3, #1
   83c32:	e000      	b.n	83c36 <pmc_osc_is_ready_32kxtal+0x22>
   83c34:	2300      	movs	r3, #0
}
   83c36:	4618      	mov	r0, r3
   83c38:	46bd      	mov	sp, r7
   83c3a:	bc80      	pop	{r7}
   83c3c:	4770      	bx	lr
   83c3e:	bf00      	nop
   83c40:	400e1210 	.word	0x400e1210
   83c44:	400e0400 	.word	0x400e0400

00083c48 <pmc_osc_enable_fastrc>:
 * \brief Enable fast RC oscillator.
 *
 * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 */
void pmc_osc_enable_fastrc(uint32_t ul_rc)
{
   83c48:	b480      	push	{r7}
   83c4a:	b083      	sub	sp, #12
   83c4c:	af00      	add	r7, sp, #0
   83c4e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   83c50:	4a13      	ldr	r2, [pc, #76]	; (83ca0 <pmc_osc_enable_fastrc+0x58>)
   83c52:	4b13      	ldr	r3, [pc, #76]	; (83ca0 <pmc_osc_enable_fastrc+0x58>)
   83c54:	6a1b      	ldr	r3, [r3, #32]
   83c56:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83c5a:	f043 0308 	orr.w	r3, r3, #8
   83c5e:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83c60:	bf00      	nop
   83c62:	4b0f      	ldr	r3, [pc, #60]	; (83ca0 <pmc_osc_enable_fastrc+0x58>)
   83c64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83c6a:	2b00      	cmp	r3, #0
   83c6c:	d0f9      	beq.n	83c62 <pmc_osc_enable_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83c6e:	490c      	ldr	r1, [pc, #48]	; (83ca0 <pmc_osc_enable_fastrc+0x58>)
   83c70:	4b0b      	ldr	r3, [pc, #44]	; (83ca0 <pmc_osc_enable_fastrc+0x58>)
   83c72:	6a1b      	ldr	r3, [r3, #32]
   83c74:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_rc;
   83c7c:	687a      	ldr	r2, [r7, #4]
   83c7e:	4313      	orrs	r3, r2
   83c80:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83c84:	620b      	str	r3, [r1, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83c86:	bf00      	nop
   83c88:	4b05      	ldr	r3, [pc, #20]	; (83ca0 <pmc_osc_enable_fastrc+0x58>)
   83c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83c90:	2b00      	cmp	r3, #0
   83c92:	d0f9      	beq.n	83c88 <pmc_osc_enable_fastrc+0x40>
}
   83c94:	bf00      	nop
   83c96:	370c      	adds	r7, #12
   83c98:	46bd      	mov	sp, r7
   83c9a:	bc80      	pop	{r7}
   83c9c:	4770      	bx	lr
   83c9e:	bf00      	nop
   83ca0:	400e0400 	.word	0x400e0400

00083ca4 <pmc_osc_is_ready_fastrc>:
 * \brief Check if the main fastrc is ready.
 *
 * \retval 0 Xtal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_fastrc(void)
{
   83ca4:	b480      	push	{r7}
   83ca6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
   83ca8:	4b03      	ldr	r3, [pc, #12]	; (83cb8 <pmc_osc_is_ready_fastrc+0x14>)
   83caa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
}
   83cb0:	4618      	mov	r0, r3
   83cb2:	46bd      	mov	sp, r7
   83cb4:	bc80      	pop	{r7}
   83cb6:	4770      	bx	lr
   83cb8:	400e0400 	.word	0x400e0400

00083cbc <pmc_osc_enable_main_xtal>:
 * \brief Enable main XTAL oscillator.
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
   83cbc:	b480      	push	{r7}
   83cbe:	b085      	sub	sp, #20
   83cc0:	af00      	add	r7, sp, #0
   83cc2:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   83cc4:	4b0f      	ldr	r3, [pc, #60]	; (83d04 <pmc_osc_enable_main_xtal+0x48>)
   83cc6:	6a1b      	ldr	r3, [r3, #32]
   83cc8:	60fb      	str	r3, [r7, #12]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   83cca:	68fb      	ldr	r3, [r7, #12]
   83ccc:	f023 0303 	bic.w	r3, r3, #3
   83cd0:	60fb      	str	r3, [r7, #12]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83cd2:	687b      	ldr	r3, [r7, #4]
   83cd4:	021b      	lsls	r3, r3, #8
   83cd6:	b29a      	uxth	r2, r3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83cd8:	68fb      	ldr	r3, [r7, #12]
   83cda:	4313      	orrs	r3, r2
   83cdc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83ce0:	f043 0301 	orr.w	r3, r3, #1
   83ce4:	60fb      	str	r3, [r7, #12]
	PMC->CKGR_MOR = mor;
   83ce6:	4a07      	ldr	r2, [pc, #28]	; (83d04 <pmc_osc_enable_main_xtal+0x48>)
   83ce8:	68fb      	ldr	r3, [r7, #12]
   83cea:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83cec:	bf00      	nop
   83cee:	4b05      	ldr	r3, [pc, #20]	; (83d04 <pmc_osc_enable_main_xtal+0x48>)
   83cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83cf2:	f003 0301 	and.w	r3, r3, #1
   83cf6:	2b00      	cmp	r3, #0
   83cf8:	d0f9      	beq.n	83cee <pmc_osc_enable_main_xtal+0x32>
}
   83cfa:	bf00      	nop
   83cfc:	3714      	adds	r7, #20
   83cfe:	46bd      	mov	sp, r7
   83d00:	bc80      	pop	{r7}
   83d02:	4770      	bx	lr
   83d04:	400e0400 	.word	0x400e0400

00083d08 <pmc_osc_bypass_main_xtal>:

/**
 * \brief Bypass main XTAL.
 */
void pmc_osc_bypass_main_xtal(void)
{
   83d08:	b480      	push	{r7}
   83d0a:	b083      	sub	sp, #12
   83d0c:	af00      	add	r7, sp, #0
	uint32_t mor = PMC->CKGR_MOR;
   83d0e:	4b0a      	ldr	r3, [pc, #40]	; (83d38 <pmc_osc_bypass_main_xtal+0x30>)
   83d10:	6a1b      	ldr	r3, [r3, #32]
   83d12:	607b      	str	r3, [r7, #4]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   83d14:	687b      	ldr	r3, [r7, #4]
   83d16:	f023 0303 	bic.w	r3, r3, #3
   83d1a:	607b      	str	r3, [r7, #4]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
   83d1c:	687b      	ldr	r3, [r7, #4]
   83d1e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83d22:	f043 0302 	orr.w	r3, r3, #2
   83d26:	607b      	str	r3, [r7, #4]
	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
	PMC->CKGR_MOR = mor;
   83d28:	4a03      	ldr	r2, [pc, #12]	; (83d38 <pmc_osc_bypass_main_xtal+0x30>)
   83d2a:	687b      	ldr	r3, [r7, #4]
   83d2c:	6213      	str	r3, [r2, #32]
	/* The MOSCXTS in PMC_SR is automatically set */
}
   83d2e:	bf00      	nop
   83d30:	370c      	adds	r7, #12
   83d32:	46bd      	mov	sp, r7
   83d34:	bc80      	pop	{r7}
   83d36:	4770      	bx	lr
   83d38:	400e0400 	.word	0x400e0400

00083d3c <pmc_osc_is_bypassed_main_xtal>:
 * \brief Check if the main crystal is bypassed.
 *
 * \retval 0 Xtal is bypassed, otherwise not.
 */
uint32_t pmc_osc_is_bypassed_main_xtal(void)
{
   83d3c:	b480      	push	{r7}
   83d3e:	af00      	add	r7, sp, #0
	return (PMC->CKGR_MOR & CKGR_MOR_MOSCXTBY);
   83d40:	4b03      	ldr	r3, [pc, #12]	; (83d50 <pmc_osc_is_bypassed_main_xtal+0x14>)
   83d42:	6a1b      	ldr	r3, [r3, #32]
   83d44:	f003 0302 	and.w	r3, r3, #2
}
   83d48:	4618      	mov	r0, r3
   83d4a:	46bd      	mov	sp, r7
   83d4c:	bc80      	pop	{r7}
   83d4e:	4770      	bx	lr
   83d50:	400e0400 	.word	0x400e0400

00083d54 <pmc_osc_is_ready_main_xtal>:
 * \note If main crystal is bypassed, it's always ready.
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
   83d54:	b480      	push	{r7}
   83d56:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   83d58:	4b03      	ldr	r3, [pc, #12]	; (83d68 <pmc_osc_is_ready_main_xtal+0x14>)
   83d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83d5c:	f003 0301 	and.w	r3, r3, #1
}
   83d60:	4618      	mov	r0, r3
   83d62:	46bd      	mov	sp, r7
   83d64:	bc80      	pop	{r7}
   83d66:	4770      	bx	lr
   83d68:	400e0400 	.word	0x400e0400

00083d6c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   83d6c:	b480      	push	{r7}
   83d6e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83d70:	4b03      	ldr	r3, [pc, #12]	; (83d80 <pmc_osc_is_ready_mainck+0x14>)
   83d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   83d78:	4618      	mov	r0, r3
   83d7a:	46bd      	mov	sp, r7
   83d7c:	bc80      	pop	{r7}
   83d7e:	4770      	bx	lr
   83d80:	400e0400 	.word	0x400e0400

00083d84 <pmc_mainck_osc_select>:
 * \note This function will not enable/disable RC or Main Crystal.
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
   83d84:	b480      	push	{r7}
   83d86:	b085      	sub	sp, #20
   83d88:	af00      	add	r7, sp, #0
   83d8a:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   83d8c:	4b0c      	ldr	r3, [pc, #48]	; (83dc0 <pmc_mainck_osc_select+0x3c>)
   83d8e:	6a1b      	ldr	r3, [r3, #32]
   83d90:	60fb      	str	r3, [r7, #12]
	if (ul_xtal_rc) {
   83d92:	687b      	ldr	r3, [r7, #4]
   83d94:	2b00      	cmp	r3, #0
   83d96:	d004      	beq.n	83da2 <pmc_mainck_osc_select+0x1e>
		mor |=  CKGR_MOR_MOSCSEL;
   83d98:	68fb      	ldr	r3, [r7, #12]
   83d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   83d9e:	60fb      	str	r3, [r7, #12]
   83da0:	e003      	b.n	83daa <pmc_mainck_osc_select+0x26>
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   83da2:	68fb      	ldr	r3, [r7, #12]
   83da4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   83da8:	60fb      	str	r3, [r7, #12]
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   83daa:	4a05      	ldr	r2, [pc, #20]	; (83dc0 <pmc_mainck_osc_select+0x3c>)
   83dac:	68fb      	ldr	r3, [r7, #12]
   83dae:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83db2:	6213      	str	r3, [r2, #32]
}
   83db4:	bf00      	nop
   83db6:	3714      	adds	r7, #20
   83db8:	46bd      	mov	sp, r7
   83dba:	bc80      	pop	{r7}
   83dbc:	4770      	bx	lr
   83dbe:	bf00      	nop
   83dc0:	400e0400 	.word	0x400e0400

00083dc4 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   83dc4:	b480      	push	{r7}
   83dc6:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83dc8:	4b03      	ldr	r3, [pc, #12]	; (83dd8 <pmc_disable_pllack+0x14>)
   83dca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83dce:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   83dd0:	bf00      	nop
   83dd2:	46bd      	mov	sp, r7
   83dd4:	bc80      	pop	{r7}
   83dd6:	4770      	bx	lr
   83dd8:	400e0400 	.word	0x400e0400

00083ddc <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   83ddc:	b480      	push	{r7}
   83dde:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83de0:	4b03      	ldr	r3, [pc, #12]	; (83df0 <pmc_is_locked_pllack+0x14>)
   83de2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83de4:	f003 0302 	and.w	r3, r3, #2
}
   83de8:	4618      	mov	r0, r3
   83dea:	46bd      	mov	sp, r7
   83dec:	bc80      	pop	{r7}
   83dee:	4770      	bx	lr
   83df0:	400e0400 	.word	0x400e0400

00083df4 <pmc_disable_upll_clock>:

/**
 * \brief Disable UPLL clock.
 */
void pmc_disable_upll_clock(void)
{
   83df4:	b480      	push	{r7}
   83df6:	af00      	add	r7, sp, #0
	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   83df8:	4a04      	ldr	r2, [pc, #16]	; (83e0c <pmc_disable_upll_clock+0x18>)
   83dfa:	4b04      	ldr	r3, [pc, #16]	; (83e0c <pmc_disable_upll_clock+0x18>)
   83dfc:	69db      	ldr	r3, [r3, #28]
   83dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   83e02:	61d3      	str	r3, [r2, #28]
}
   83e04:	bf00      	nop
   83e06:	46bd      	mov	sp, r7
   83e08:	bc80      	pop	{r7}
   83e0a:	4770      	bx	lr
   83e0c:	400e0400 	.word	0x400e0400

00083e10 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   83e10:	b480      	push	{r7}
   83e12:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   83e14:	4b03      	ldr	r3, [pc, #12]	; (83e24 <pmc_is_locked_upll+0x14>)
   83e16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   83e1c:	4618      	mov	r0, r3
   83e1e:	46bd      	mov	sp, r7
   83e20:	bc80      	pop	{r7}
   83e22:	4770      	bx	lr
   83e24:	400e0400 	.word	0x400e0400

00083e28 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   83e28:	b480      	push	{r7}
   83e2a:	b083      	sub	sp, #12
   83e2c:	af00      	add	r7, sp, #0
   83e2e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   83e30:	687b      	ldr	r3, [r7, #4]
   83e32:	2b1d      	cmp	r3, #29
   83e34:	d901      	bls.n	83e3a <pmc_enable_periph_clk+0x12>
		return 1;
   83e36:	2301      	movs	r3, #1
   83e38:	e016      	b.n	83e68 <pmc_enable_periph_clk+0x40>
	}

	if (ul_id < 32) {
   83e3a:	687b      	ldr	r3, [r7, #4]
   83e3c:	2b1f      	cmp	r3, #31
   83e3e:	d812      	bhi.n	83e66 <pmc_enable_periph_clk+0x3e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   83e40:	4b0c      	ldr	r3, [pc, #48]	; (83e74 <pmc_enable_periph_clk+0x4c>)
   83e42:	699a      	ldr	r2, [r3, #24]
   83e44:	2101      	movs	r1, #1
   83e46:	687b      	ldr	r3, [r7, #4]
   83e48:	fa01 f303 	lsl.w	r3, r1, r3
   83e4c:	401a      	ands	r2, r3
   83e4e:	2101      	movs	r1, #1
   83e50:	687b      	ldr	r3, [r7, #4]
   83e52:	fa01 f303 	lsl.w	r3, r1, r3
   83e56:	429a      	cmp	r2, r3
   83e58:	d005      	beq.n	83e66 <pmc_enable_periph_clk+0x3e>
			PMC->PMC_PCER0 = 1 << ul_id;
   83e5a:	4a06      	ldr	r2, [pc, #24]	; (83e74 <pmc_enable_periph_clk+0x4c>)
   83e5c:	2101      	movs	r1, #1
   83e5e:	687b      	ldr	r3, [r7, #4]
   83e60:	fa01 f303 	lsl.w	r3, r1, r3
   83e64:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   83e66:	2300      	movs	r3, #0
}
   83e68:	4618      	mov	r0, r3
   83e6a:	370c      	adds	r7, #12
   83e6c:	46bd      	mov	sp, r7
   83e6e:	bc80      	pop	{r7}
   83e70:	4770      	bx	lr
   83e72:	bf00      	nop
   83e74:	400e0400 	.word	0x400e0400

00083e78 <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
   83e78:	b480      	push	{r7}
   83e7a:	b083      	sub	sp, #12
   83e7c:	af00      	add	r7, sp, #0
   83e7e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   83e80:	687b      	ldr	r3, [r7, #4]
   83e82:	2b1d      	cmp	r3, #29
   83e84:	d901      	bls.n	83e8a <pmc_disable_periph_clk+0x12>
		return 1;
   83e86:	2301      	movs	r3, #1
   83e88:	e016      	b.n	83eb8 <pmc_disable_periph_clk+0x40>
	}

	if (ul_id < 32) {
   83e8a:	687b      	ldr	r3, [r7, #4]
   83e8c:	2b1f      	cmp	r3, #31
   83e8e:	d812      	bhi.n	83eb6 <pmc_disable_periph_clk+0x3e>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   83e90:	4b0c      	ldr	r3, [pc, #48]	; (83ec4 <pmc_disable_periph_clk+0x4c>)
   83e92:	699a      	ldr	r2, [r3, #24]
   83e94:	2101      	movs	r1, #1
   83e96:	687b      	ldr	r3, [r7, #4]
   83e98:	fa01 f303 	lsl.w	r3, r1, r3
   83e9c:	401a      	ands	r2, r3
   83e9e:	2101      	movs	r1, #1
   83ea0:	687b      	ldr	r3, [r7, #4]
   83ea2:	fa01 f303 	lsl.w	r3, r1, r3
   83ea6:	429a      	cmp	r2, r3
   83ea8:	d105      	bne.n	83eb6 <pmc_disable_periph_clk+0x3e>
			PMC->PMC_PCDR0 = 1 << ul_id;
   83eaa:	4a06      	ldr	r2, [pc, #24]	; (83ec4 <pmc_disable_periph_clk+0x4c>)
   83eac:	2101      	movs	r1, #1
   83eae:	687b      	ldr	r3, [r7, #4]
   83eb0:	fa01 f303 	lsl.w	r3, r1, r3
   83eb4:	6153      	str	r3, [r2, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   83eb6:	2300      	movs	r3, #0
}
   83eb8:	4618      	mov	r0, r3
   83eba:	370c      	adds	r7, #12
   83ebc:	46bd      	mov	sp, r7
   83ebe:	bc80      	pop	{r7}
   83ec0:	4770      	bx	lr
   83ec2:	bf00      	nop
   83ec4:	400e0400 	.word	0x400e0400

00083ec8 <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
   83ec8:	b480      	push	{r7}
   83eca:	b083      	sub	sp, #12
   83ecc:	af00      	add	r7, sp, #0
   83ece:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   83ed0:	4a05      	ldr	r2, [pc, #20]	; (83ee8 <pmc_enable_pck+0x20>)
   83ed2:	f44f 7180 	mov.w	r1, #256	; 0x100
   83ed6:	687b      	ldr	r3, [r7, #4]
   83ed8:	fa01 f303 	lsl.w	r3, r1, r3
   83edc:	6013      	str	r3, [r2, #0]
}
   83ede:	bf00      	nop
   83ee0:	370c      	adds	r7, #12
   83ee2:	46bd      	mov	sp, r7
   83ee4:	bc80      	pop	{r7}
   83ee6:	4770      	bx	lr
   83ee8:	400e0400 	.word	0x400e0400

00083eec <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
   83eec:	b480      	push	{r7}
   83eee:	b083      	sub	sp, #12
   83ef0:	af00      	add	r7, sp, #0
   83ef2:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   83ef4:	687b      	ldr	r3, [r7, #4]
   83ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
   83efa:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
   83efc:	4905      	ldr	r1, [pc, #20]	; (83f14 <pmc_set_fast_startup_input+0x28>)
   83efe:	4b05      	ldr	r3, [pc, #20]	; (83f14 <pmc_set_fast_startup_input+0x28>)
   83f00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83f02:	687b      	ldr	r3, [r7, #4]
   83f04:	4313      	orrs	r3, r2
   83f06:	670b      	str	r3, [r1, #112]	; 0x70
}
   83f08:	bf00      	nop
   83f0a:	370c      	adds	r7, #12
   83f0c:	46bd      	mov	sp, r7
   83f0e:	bc80      	pop	{r7}
   83f10:	4770      	bx	lr
   83f12:	bf00      	nop
   83f14:	400e0400 	.word	0x400e0400

00083f18 <pmc_enable_waitmode>:
/**
 * \brief Enable Wait Mode. Enter condition: WFE + (SLEEPDEEP bit = 0) +
 * (LPM bit = 1)
 */
void pmc_enable_waitmode(void)
{
   83f18:	b480      	push	{r7}
   83f1a:	b083      	sub	sp, #12
   83f1c:	af00      	add	r7, sp, #0
	uint32_t i;

	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
   83f1e:	4a12      	ldr	r2, [pc, #72]	; (83f68 <pmc_enable_waitmode+0x50>)
   83f20:	4b11      	ldr	r3, [pc, #68]	; (83f68 <pmc_enable_waitmode+0x50>)
   83f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   83f24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83f28:	6713      	str	r3, [r2, #112]	; 0x70
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
   83f2a:	4a10      	ldr	r2, [pc, #64]	; (83f6c <pmc_enable_waitmode+0x54>)
   83f2c:	4b0f      	ldr	r3, [pc, #60]	; (83f6c <pmc_enable_waitmode+0x54>)
   83f2e:	691b      	ldr	r3, [r3, #16]
   83f30:	f023 0304 	bic.w	r3, r3, #4
   83f34:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfe");
   83f36:	bf20      	wfe
	__WFE();

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
   83f38:	2300      	movs	r3, #0
   83f3a:	607b      	str	r3, [r7, #4]
   83f3c:	e003      	b.n	83f46 <pmc_enable_waitmode+0x2e>
  __ASM volatile ("nop");
   83f3e:	bf00      	nop
   83f40:	687b      	ldr	r3, [r7, #4]
   83f42:	3301      	adds	r3, #1
   83f44:	607b      	str	r3, [r7, #4]
   83f46:	687b      	ldr	r3, [r7, #4]
   83f48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   83f4c:	d3f7      	bcc.n	83f3e <pmc_enable_waitmode+0x26>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
   83f4e:	bf00      	nop
   83f50:	4b05      	ldr	r3, [pc, #20]	; (83f68 <pmc_enable_waitmode+0x50>)
   83f52:	6a1b      	ldr	r3, [r3, #32]
   83f54:	f003 0308 	and.w	r3, r3, #8
   83f58:	2b00      	cmp	r3, #0
   83f5a:	d0f9      	beq.n	83f50 <pmc_enable_waitmode+0x38>

}
   83f5c:	bf00      	nop
   83f5e:	370c      	adds	r7, #12
   83f60:	46bd      	mov	sp, r7
   83f62:	bc80      	pop	{r7}
   83f64:	4770      	bx	lr
   83f66:	bf00      	nop
   83f68:	400e0400 	.word	0x400e0400
   83f6c:	e000ed00 	.word	0xe000ed00

00083f70 <udi_vendor_enable>:
/**
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
   83f70:	b580      	push	{r7, lr}
   83f72:	af00      	add	r7, sp, #0
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   83f74:	4b0b      	ldr	r3, [pc, #44]	; (83fa4 <udi_vendor_enable+0x34>)
   83f76:	4798      	blx	r3
   83f78:	4603      	mov	r3, r0
   83f7a:	78da      	ldrb	r2, [r3, #3]
   83f7c:	4b0a      	ldr	r3, [pc, #40]	; (83fa8 <udi_vendor_enable+0x38>)
   83f7e:	701a      	strb	r2, [r3, #0]
	if (0 == udi_vendor_alternate_setting) {
   83f80:	4b09      	ldr	r3, [pc, #36]	; (83fa8 <udi_vendor_enable+0x38>)
   83f82:	781b      	ldrb	r3, [r3, #0]
   83f84:	2b00      	cmp	r3, #0
   83f86:	d109      	bne.n	83f9c <udi_vendor_enable+0x2c>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
   83f88:	4b08      	ldr	r3, [pc, #32]	; (83fac <udi_vendor_enable+0x3c>)
   83f8a:	4798      	blx	r3
   83f8c:	4603      	mov	r3, r0
   83f8e:	f083 0301 	eor.w	r3, r3, #1
   83f92:	b2db      	uxtb	r3, r3
   83f94:	2b00      	cmp	r3, #0
   83f96:	d001      	beq.n	83f9c <udi_vendor_enable+0x2c>
			return false;
   83f98:	2300      	movs	r3, #0
   83f9a:	e000      	b.n	83f9e <udi_vendor_enable+0x2e>
		}
	}
	return true;
   83f9c:	2301      	movs	r3, #1
}
   83f9e:	4618      	mov	r0, r3
   83fa0:	bd80      	pop	{r7, pc}
   83fa2:	bf00      	nop
   83fa4:	0008464d 	.word	0x0008464d
   83fa8:	20000d39 	.word	0x20000d39
   83fac:	00080da1 	.word	0x00080da1

00083fb0 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
   83fb0:	b580      	push	{r7, lr}
   83fb2:	af00      	add	r7, sp, #0
	if (0 == udi_vendor_alternate_setting) {
   83fb4:	4b03      	ldr	r3, [pc, #12]	; (83fc4 <udi_vendor_disable+0x14>)
   83fb6:	781b      	ldrb	r3, [r3, #0]
   83fb8:	2b00      	cmp	r3, #0
   83fba:	d101      	bne.n	83fc0 <udi_vendor_disable+0x10>
		UDI_VENDOR_DISABLE_EXT();
   83fbc:	4b02      	ldr	r3, [pc, #8]	; (83fc8 <udi_vendor_disable+0x18>)
   83fbe:	4798      	blx	r3
	}
}
   83fc0:	bf00      	nop
   83fc2:	bd80      	pop	{r7, pc}
   83fc4:	20000d39 	.word	0x20000d39
   83fc8:	00080dcd 	.word	0x00080dcd

00083fcc <udi_vendor_setup>:

bool udi_vendor_setup(void)
{
   83fcc:	b580      	push	{r7, lr}
   83fce:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   83fd0:	4b10      	ldr	r3, [pc, #64]	; (84014 <udi_vendor_setup+0x48>)
   83fd2:	781b      	ldrb	r3, [r3, #0]
   83fd4:	b25b      	sxtb	r3, r3
   83fd6:	2b00      	cmp	r3, #0
   83fd8:	da09      	bge.n	83fee <udi_vendor_setup+0x22>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83fda:	4b0e      	ldr	r3, [pc, #56]	; (84014 <udi_vendor_setup+0x48>)
   83fdc:	781b      	ldrb	r3, [r3, #0]
   83fde:	f003 0360 	and.w	r3, r3, #96	; 0x60
   83fe2:	2b40      	cmp	r3, #64	; 0x40
   83fe4:	d103      	bne.n	83fee <udi_vendor_setup+0x22>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   83fe6:	4b0c      	ldr	r3, [pc, #48]	; (84018 <udi_vendor_setup+0x4c>)
   83fe8:	4798      	blx	r3
   83fea:	4603      	mov	r3, r0
   83fec:	e00f      	b.n	8400e <udi_vendor_setup+0x42>
		}
	}
	if (Udd_setup_is_out()) {
   83fee:	4b09      	ldr	r3, [pc, #36]	; (84014 <udi_vendor_setup+0x48>)
   83ff0:	781b      	ldrb	r3, [r3, #0]
   83ff2:	b25b      	sxtb	r3, r3
   83ff4:	2b00      	cmp	r3, #0
   83ff6:	db09      	blt.n	8400c <udi_vendor_setup+0x40>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83ff8:	4b06      	ldr	r3, [pc, #24]	; (84014 <udi_vendor_setup+0x48>)
   83ffa:	781b      	ldrb	r3, [r3, #0]
   83ffc:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84000:	2b40      	cmp	r3, #64	; 0x40
   84002:	d103      	bne.n	8400c <udi_vendor_setup+0x40>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   84004:	4b05      	ldr	r3, [pc, #20]	; (8401c <udi_vendor_setup+0x50>)
   84006:	4798      	blx	r3
   84008:	4603      	mov	r3, r0
   8400a:	e000      	b.n	8400e <udi_vendor_setup+0x42>
		}
	}
	return false; // Not supported request
   8400c:	2300      	movs	r3, #0
}
   8400e:	4618      	mov	r0, r3
   84010:	bd80      	pop	{r7, pc}
   84012:	bf00      	nop
   84014:	20000d58 	.word	0x20000d58
   84018:	000811cd 	.word	0x000811cd
   8401c:	0008108d 	.word	0x0008108d

00084020 <udi_vendor_getsetting>:

uint8_t udi_vendor_getsetting(void)
{
   84020:	b480      	push	{r7}
   84022:	af00      	add	r7, sp, #0
	return udi_vendor_alternate_setting;
   84024:	4b02      	ldr	r3, [pc, #8]	; (84030 <udi_vendor_getsetting+0x10>)
   84026:	781b      	ldrb	r3, [r3, #0]
}
   84028:	4618      	mov	r0, r3
   8402a:	46bd      	mov	sp, r7
   8402c:	bc80      	pop	{r7}
   8402e:	4770      	bx	lr
   84030:	20000d39 	.word	0x20000d39

00084034 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84034:	b590      	push	{r4, r7, lr}
   84036:	b087      	sub	sp, #28
   84038:	af02      	add	r7, sp, #8
   8403a:	60f8      	str	r0, [r7, #12]
   8403c:	60b9      	str	r1, [r7, #8]
   8403e:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   84040:	687b      	ldr	r3, [r7, #4]
   84042:	9300      	str	r3, [sp, #0]
   84044:	68bb      	ldr	r3, [r7, #8]
   84046:	68fa      	ldr	r2, [r7, #12]
   84048:	2100      	movs	r1, #0
   8404a:	2081      	movs	r0, #129	; 0x81
   8404c:	4c03      	ldr	r4, [pc, #12]	; (8405c <udi_vendor_bulk_in_run+0x28>)
   8404e:	47a0      	blx	r4
   84050:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   84052:	4618      	mov	r0, r3
   84054:	3714      	adds	r7, #20
   84056:	46bd      	mov	sp, r7
   84058:	bd90      	pop	{r4, r7, pc}
   8405a:	bf00      	nop
   8405c:	000826cd 	.word	0x000826cd

00084060 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84060:	b590      	push	{r4, r7, lr}
   84062:	b087      	sub	sp, #28
   84064:	af02      	add	r7, sp, #8
   84066:	60f8      	str	r0, [r7, #12]
   84068:	60b9      	str	r1, [r7, #8]
   8406a:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   8406c:	687b      	ldr	r3, [r7, #4]
   8406e:	9300      	str	r3, [sp, #0]
   84070:	68bb      	ldr	r3, [r7, #8]
   84072:	68fa      	ldr	r2, [r7, #12]
   84074:	2100      	movs	r1, #0
   84076:	2002      	movs	r0, #2
   84078:	4c03      	ldr	r4, [pc, #12]	; (84088 <udi_vendor_bulk_out_run+0x28>)
   8407a:	47a0      	blx	r4
   8407c:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   8407e:	4618      	mov	r0, r3
   84080:	3714      	adds	r7, #20
   84082:	46bd      	mov	sp, r7
   84084:	bd90      	pop	{r4, r7, pc}
   84086:	bf00      	nop
   84088:	000826cd 	.word	0x000826cd

0008408c <cpu_irq_save>:
{
   8408c:	b480      	push	{r7}
   8408e:	b083      	sub	sp, #12
   84090:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84092:	f3ef 8310 	mrs	r3, PRIMASK
   84096:	603b      	str	r3, [r7, #0]
  return(result);
   84098:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   8409a:	2b00      	cmp	r3, #0
   8409c:	bf0c      	ite	eq
   8409e:	2301      	moveq	r3, #1
   840a0:	2300      	movne	r3, #0
   840a2:	b2db      	uxtb	r3, r3
   840a4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   840a6:	b672      	cpsid	i
  __ASM volatile ("dmb");
   840a8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   840ac:	4b04      	ldr	r3, [pc, #16]	; (840c0 <cpu_irq_save+0x34>)
   840ae:	2200      	movs	r2, #0
   840b0:	701a      	strb	r2, [r3, #0]
	return flags;
   840b2:	687b      	ldr	r3, [r7, #4]
}
   840b4:	4618      	mov	r0, r3
   840b6:	370c      	adds	r7, #12
   840b8:	46bd      	mov	sp, r7
   840ba:	bc80      	pop	{r7}
   840bc:	4770      	bx	lr
   840be:	bf00      	nop
   840c0:	2000031a 	.word	0x2000031a

000840c4 <cpu_irq_is_enabled_flags>:
{
   840c4:	b480      	push	{r7}
   840c6:	b083      	sub	sp, #12
   840c8:	af00      	add	r7, sp, #0
   840ca:	6078      	str	r0, [r7, #4]
	return (flags);
   840cc:	687b      	ldr	r3, [r7, #4]
   840ce:	2b00      	cmp	r3, #0
   840d0:	bf14      	ite	ne
   840d2:	2301      	movne	r3, #1
   840d4:	2300      	moveq	r3, #0
   840d6:	b2db      	uxtb	r3, r3
}
   840d8:	4618      	mov	r0, r3
   840da:	370c      	adds	r7, #12
   840dc:	46bd      	mov	sp, r7
   840de:	bc80      	pop	{r7}
   840e0:	4770      	bx	lr
   840e2:	0000      	movs	r0, r0

000840e4 <cpu_irq_restore>:
{
   840e4:	b580      	push	{r7, lr}
   840e6:	b082      	sub	sp, #8
   840e8:	af00      	add	r7, sp, #0
   840ea:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   840ec:	6878      	ldr	r0, [r7, #4]
   840ee:	4b07      	ldr	r3, [pc, #28]	; (8410c <cpu_irq_restore+0x28>)
   840f0:	4798      	blx	r3
   840f2:	4603      	mov	r3, r0
   840f4:	2b00      	cmp	r3, #0
   840f6:	d005      	beq.n	84104 <cpu_irq_restore+0x20>
		cpu_irq_enable();
   840f8:	4b05      	ldr	r3, [pc, #20]	; (84110 <cpu_irq_restore+0x2c>)
   840fa:	2201      	movs	r2, #1
   840fc:	701a      	strb	r2, [r3, #0]
   840fe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84102:	b662      	cpsie	i
}
   84104:	bf00      	nop
   84106:	3708      	adds	r7, #8
   84108:	46bd      	mov	sp, r7
   8410a:	bd80      	pop	{r7, pc}
   8410c:	000840c5 	.word	0x000840c5
   84110:	2000031a 	.word	0x2000031a

00084114 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   84114:	b580      	push	{r7, lr}
   84116:	b086      	sub	sp, #24
   84118:	af00      	add	r7, sp, #0
   8411a:	60f8      	str	r0, [r7, #12]
   8411c:	60b9      	str	r1, [r7, #8]
   8411e:	607a      	str	r2, [r7, #4]
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   84120:	68bb      	ldr	r3, [r7, #8]
   84122:	2b0e      	cmp	r3, #14
   84124:	d002      	beq.n	8412c <efc_perform_command+0x18>
   84126:	68bb      	ldr	r3, [r7, #8]
   84128:	2b0f      	cmp	r3, #15
   8412a:	d102      	bne.n	84132 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   8412c:	f04f 33ff 	mov.w	r3, #4294967295
   84130:	e016      	b.n	84160 <efc_perform_command+0x4c>
	}

	flags = cpu_irq_save();
   84132:	4b0d      	ldr	r3, [pc, #52]	; (84168 <efc_perform_command+0x54>)
   84134:	4798      	blx	r3
   84136:	6178      	str	r0, [r7, #20]
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   84138:	687b      	ldr	r3, [r7, #4]
   8413a:	021b      	lsls	r3, r3, #8
   8413c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   84140:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   84144:	68ba      	ldr	r2, [r7, #8]
   84146:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   84148:	4313      	orrs	r3, r2
	result = efc_perform_fcr(p_efc,
   8414a:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   8414e:	4619      	mov	r1, r3
   84150:	68f8      	ldr	r0, [r7, #12]
   84152:	4b06      	ldr	r3, [pc, #24]	; (8416c <efc_perform_command+0x58>)
   84154:	4798      	blx	r3
   84156:	6138      	str	r0, [r7, #16]
	cpu_irq_restore(flags);
   84158:	6978      	ldr	r0, [r7, #20]
   8415a:	4b05      	ldr	r3, [pc, #20]	; (84170 <efc_perform_command+0x5c>)
   8415c:	4798      	blx	r3
	return result;
   8415e:	693b      	ldr	r3, [r7, #16]
}
   84160:	4618      	mov	r0, r3
   84162:	3718      	adds	r7, #24
   84164:	46bd      	mov	sp, r7
   84166:	bd80      	pop	{r7, pc}
   84168:	0008408d 	.word	0x0008408d
   8416c:	200000bd 	.word	0x200000bd
   84170:	000840e5 	.word	0x000840e5

00084174 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   84174:	b480      	push	{r7}
   84176:	b085      	sub	sp, #20
   84178:	af00      	add	r7, sp, #0
   8417a:	60f8      	str	r0, [r7, #12]
   8417c:	60b9      	str	r1, [r7, #8]
   8417e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   84180:	687b      	ldr	r3, [r7, #4]
   84182:	2b00      	cmp	r3, #0
   84184:	d003      	beq.n	8418e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   84186:	68fb      	ldr	r3, [r7, #12]
   84188:	68ba      	ldr	r2, [r7, #8]
   8418a:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   8418c:	e002      	b.n	84194 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
   8418e:	68fb      	ldr	r3, [r7, #12]
   84190:	68ba      	ldr	r2, [r7, #8]
   84192:	661a      	str	r2, [r3, #96]	; 0x60
}
   84194:	bf00      	nop
   84196:	3714      	adds	r7, #20
   84198:	46bd      	mov	sp, r7
   8419a:	bc80      	pop	{r7}
   8419c:	4770      	bx	lr

0008419e <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   8419e:	b480      	push	{r7}
   841a0:	b087      	sub	sp, #28
   841a2:	af00      	add	r7, sp, #0
   841a4:	60f8      	str	r0, [r7, #12]
   841a6:	60b9      	str	r1, [r7, #8]
   841a8:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   841aa:	68fb      	ldr	r3, [r7, #12]
   841ac:	687a      	ldr	r2, [r7, #4]
   841ae:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   841b0:	68bb      	ldr	r3, [r7, #8]
   841b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   841b6:	d01f      	beq.n	841f8 <pio_set_peripheral+0x5a>
   841b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   841bc:	d805      	bhi.n	841ca <pio_set_peripheral+0x2c>
   841be:	2b00      	cmp	r3, #0
   841c0:	d027      	beq.n	84212 <pio_set_peripheral+0x74>
   841c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   841c6:	d00a      	beq.n	841de <pio_set_peripheral+0x40>
   841c8:	e01f      	b.n	8420a <pio_set_peripheral+0x6c>
   841ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   841ce:	d020      	beq.n	84212 <pio_set_peripheral+0x74>
   841d0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   841d4:	d01d      	beq.n	84212 <pio_set_peripheral+0x74>
   841d6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   841da:	d01a      	beq.n	84212 <pio_set_peripheral+0x74>
   841dc:	e015      	b.n	8420a <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   841de:	68fb      	ldr	r3, [r7, #12]
   841e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   841e2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   841e4:	68fb      	ldr	r3, [r7, #12]
   841e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   841e8:	687b      	ldr	r3, [r7, #4]
   841ea:	43d9      	mvns	r1, r3
   841ec:	697b      	ldr	r3, [r7, #20]
   841ee:	400b      	ands	r3, r1
   841f0:	401a      	ands	r2, r3
   841f2:	68fb      	ldr	r3, [r7, #12]
   841f4:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   841f6:	e008      	b.n	8420a <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   841f8:	68fb      	ldr	r3, [r7, #12]
   841fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   841fc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   841fe:	687a      	ldr	r2, [r7, #4]
   84200:	697b      	ldr	r3, [r7, #20]
   84202:	431a      	orrs	r2, r3
   84204:	68fb      	ldr	r3, [r7, #12]
   84206:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   84208:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8420a:	68fb      	ldr	r3, [r7, #12]
   8420c:	687a      	ldr	r2, [r7, #4]
   8420e:	605a      	str	r2, [r3, #4]
   84210:	e000      	b.n	84214 <pio_set_peripheral+0x76>
		return;
   84212:	bf00      	nop
}
   84214:	371c      	adds	r7, #28
   84216:	46bd      	mov	sp, r7
   84218:	bc80      	pop	{r7}
   8421a:	4770      	bx	lr

0008421c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   8421c:	b580      	push	{r7, lr}
   8421e:	b084      	sub	sp, #16
   84220:	af00      	add	r7, sp, #0
   84222:	60f8      	str	r0, [r7, #12]
   84224:	60b9      	str	r1, [r7, #8]
   84226:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   84228:	68b9      	ldr	r1, [r7, #8]
   8422a:	68f8      	ldr	r0, [r7, #12]
   8422c:	4b19      	ldr	r3, [pc, #100]	; (84294 <pio_set_input+0x78>)
   8422e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   84230:	687b      	ldr	r3, [r7, #4]
   84232:	f003 0301 	and.w	r3, r3, #1
   84236:	461a      	mov	r2, r3
   84238:	68b9      	ldr	r1, [r7, #8]
   8423a:	68f8      	ldr	r0, [r7, #12]
   8423c:	4b16      	ldr	r3, [pc, #88]	; (84298 <pio_set_input+0x7c>)
   8423e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   84240:	687b      	ldr	r3, [r7, #4]
   84242:	f003 030a 	and.w	r3, r3, #10
   84246:	2b00      	cmp	r3, #0
   84248:	d003      	beq.n	84252 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   8424a:	68fb      	ldr	r3, [r7, #12]
   8424c:	68ba      	ldr	r2, [r7, #8]
   8424e:	621a      	str	r2, [r3, #32]
   84250:	e002      	b.n	84258 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   84252:	68fb      	ldr	r3, [r7, #12]
   84254:	68ba      	ldr	r2, [r7, #8]
   84256:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   84258:	687b      	ldr	r3, [r7, #4]
   8425a:	f003 0302 	and.w	r3, r3, #2
   8425e:	2b00      	cmp	r3, #0
   84260:	d004      	beq.n	8426c <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   84262:	68fb      	ldr	r3, [r7, #12]
   84264:	68ba      	ldr	r2, [r7, #8]
   84266:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   8426a:	e008      	b.n	8427e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8426c:	687b      	ldr	r3, [r7, #4]
   8426e:	f003 0308 	and.w	r3, r3, #8
   84272:	2b00      	cmp	r3, #0
   84274:	d003      	beq.n	8427e <pio_set_input+0x62>
			p_pio->PIO_DIFSR = ul_mask;
   84276:	68fb      	ldr	r3, [r7, #12]
   84278:	68ba      	ldr	r2, [r7, #8]
   8427a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8427e:	68fb      	ldr	r3, [r7, #12]
   84280:	68ba      	ldr	r2, [r7, #8]
   84282:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   84284:	68fb      	ldr	r3, [r7, #12]
   84286:	68ba      	ldr	r2, [r7, #8]
   84288:	601a      	str	r2, [r3, #0]
}
   8428a:	bf00      	nop
   8428c:	3710      	adds	r7, #16
   8428e:	46bd      	mov	sp, r7
   84290:	bd80      	pop	{r7, pc}
   84292:	bf00      	nop
   84294:	0008431b 	.word	0x0008431b
   84298:	00084175 	.word	0x00084175

0008429c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8429c:	b580      	push	{r7, lr}
   8429e:	b084      	sub	sp, #16
   842a0:	af00      	add	r7, sp, #0
   842a2:	60f8      	str	r0, [r7, #12]
   842a4:	60b9      	str	r1, [r7, #8]
   842a6:	607a      	str	r2, [r7, #4]
   842a8:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   842aa:	68b9      	ldr	r1, [r7, #8]
   842ac:	68f8      	ldr	r0, [r7, #12]
   842ae:	4b12      	ldr	r3, [pc, #72]	; (842f8 <pio_set_output+0x5c>)
   842b0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   842b2:	69ba      	ldr	r2, [r7, #24]
   842b4:	68b9      	ldr	r1, [r7, #8]
   842b6:	68f8      	ldr	r0, [r7, #12]
   842b8:	4b10      	ldr	r3, [pc, #64]	; (842fc <pio_set_output+0x60>)
   842ba:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   842bc:	683b      	ldr	r3, [r7, #0]
   842be:	2b00      	cmp	r3, #0
   842c0:	d003      	beq.n	842ca <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   842c2:	68fb      	ldr	r3, [r7, #12]
   842c4:	68ba      	ldr	r2, [r7, #8]
   842c6:	651a      	str	r2, [r3, #80]	; 0x50
   842c8:	e002      	b.n	842d0 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   842ca:	68fb      	ldr	r3, [r7, #12]
   842cc:	68ba      	ldr	r2, [r7, #8]
   842ce:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   842d0:	687b      	ldr	r3, [r7, #4]
   842d2:	2b00      	cmp	r3, #0
   842d4:	d003      	beq.n	842de <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   842d6:	68fb      	ldr	r3, [r7, #12]
   842d8:	68ba      	ldr	r2, [r7, #8]
   842da:	631a      	str	r2, [r3, #48]	; 0x30
   842dc:	e002      	b.n	842e4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   842de:	68fb      	ldr	r3, [r7, #12]
   842e0:	68ba      	ldr	r2, [r7, #8]
   842e2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   842e4:	68fb      	ldr	r3, [r7, #12]
   842e6:	68ba      	ldr	r2, [r7, #8]
   842e8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   842ea:	68fb      	ldr	r3, [r7, #12]
   842ec:	68ba      	ldr	r2, [r7, #8]
   842ee:	601a      	str	r2, [r3, #0]
}
   842f0:	bf00      	nop
   842f2:	3710      	adds	r7, #16
   842f4:	46bd      	mov	sp, r7
   842f6:	bd80      	pop	{r7, pc}
   842f8:	0008431b 	.word	0x0008431b
   842fc:	00084175 	.word	0x00084175

00084300 <pio_sync_output_write>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_sync_output_write(Pio *p_pio, const uint32_t ul_mask)
{
   84300:	b480      	push	{r7}
   84302:	b083      	sub	sp, #12
   84304:	af00      	add	r7, sp, #0
   84306:	6078      	str	r0, [r7, #4]
   84308:	6039      	str	r1, [r7, #0]
	p_pio->PIO_ODSR = ul_mask;
   8430a:	687b      	ldr	r3, [r7, #4]
   8430c:	683a      	ldr	r2, [r7, #0]
   8430e:	639a      	str	r2, [r3, #56]	; 0x38
}
   84310:	bf00      	nop
   84312:	370c      	adds	r7, #12
   84314:	46bd      	mov	sp, r7
   84316:	bc80      	pop	{r7}
   84318:	4770      	bx	lr

0008431a <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   8431a:	b480      	push	{r7}
   8431c:	b083      	sub	sp, #12
   8431e:	af00      	add	r7, sp, #0
   84320:	6078      	str	r0, [r7, #4]
   84322:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   84324:	687b      	ldr	r3, [r7, #4]
   84326:	683a      	ldr	r2, [r7, #0]
   84328:	645a      	str	r2, [r3, #68]	; 0x44
}
   8432a:	bf00      	nop
   8432c:	370c      	adds	r7, #12
   8432e:	46bd      	mov	sp, r7
   84330:	bc80      	pop	{r7}
   84332:	4770      	bx	lr

00084334 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   84334:	b480      	push	{r7}
   84336:	b083      	sub	sp, #12
   84338:	af00      	add	r7, sp, #0
   8433a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   8433c:	687b      	ldr	r3, [r7, #4]
   8433e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   84340:	4618      	mov	r0, r3
   84342:	370c      	adds	r7, #12
   84344:	46bd      	mov	sp, r7
   84346:	bc80      	pop	{r7}
   84348:	4770      	bx	lr

0008434a <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   8434a:	b480      	push	{r7}
   8434c:	b083      	sub	sp, #12
   8434e:	af00      	add	r7, sp, #0
   84350:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   84352:	687b      	ldr	r3, [r7, #4]
   84354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   84356:	4618      	mov	r0, r3
   84358:	370c      	adds	r7, #12
   8435a:	46bd      	mov	sp, r7
   8435c:	bc80      	pop	{r7}
   8435e:	4770      	bx	lr

00084360 <pio_get_pin_value>:
 *       level.
 * \note If pin is input: PIOx must be clocked to sample the signal.
 *       See PMC driver.
 */
uint32_t pio_get_pin_value(uint32_t ul_pin)
{
   84360:	b580      	push	{r7, lr}
   84362:	b084      	sub	sp, #16
   84364:	af00      	add	r7, sp, #0
   84366:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   84368:	6878      	ldr	r0, [r7, #4]
   8436a:	4b08      	ldr	r3, [pc, #32]	; (8438c <pio_get_pin_value+0x2c>)
   8436c:	4798      	blx	r3
   8436e:	60f8      	str	r0, [r7, #12]

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   84370:	68fb      	ldr	r3, [r7, #12]
   84372:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   84374:	687b      	ldr	r3, [r7, #4]
   84376:	f003 031f 	and.w	r3, r3, #31
   8437a:	fa22 f303 	lsr.w	r3, r2, r3
   8437e:	f003 0301 	and.w	r3, r3, #1
}
   84382:	4618      	mov	r0, r3
   84384:	3710      	adds	r7, #16
   84386:	46bd      	mov	sp, r7
   84388:	bd80      	pop	{r7, pc}
   8438a:	bf00      	nop
   8438c:	0008460d 	.word	0x0008460d

00084390 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   84390:	b580      	push	{r7, lr}
   84392:	b084      	sub	sp, #16
   84394:	af00      	add	r7, sp, #0
   84396:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   84398:	6878      	ldr	r0, [r7, #4]
   8439a:	4b08      	ldr	r3, [pc, #32]	; (843bc <pio_set_pin_high+0x2c>)
   8439c:	4798      	blx	r3
   8439e:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   843a0:	687b      	ldr	r3, [r7, #4]
   843a2:	f003 031f 	and.w	r3, r3, #31
   843a6:	2201      	movs	r2, #1
   843a8:	fa02 f303 	lsl.w	r3, r2, r3
   843ac:	461a      	mov	r2, r3
   843ae:	68fb      	ldr	r3, [r7, #12]
   843b0:	631a      	str	r2, [r3, #48]	; 0x30
}
   843b2:	bf00      	nop
   843b4:	3710      	adds	r7, #16
   843b6:	46bd      	mov	sp, r7
   843b8:	bd80      	pop	{r7, pc}
   843ba:	bf00      	nop
   843bc:	0008460d 	.word	0x0008460d

000843c0 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   843c0:	b580      	push	{r7, lr}
   843c2:	b084      	sub	sp, #16
   843c4:	af00      	add	r7, sp, #0
   843c6:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   843c8:	6878      	ldr	r0, [r7, #4]
   843ca:	4b08      	ldr	r3, [pc, #32]	; (843ec <pio_set_pin_low+0x2c>)
   843cc:	4798      	blx	r3
   843ce:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   843d0:	687b      	ldr	r3, [r7, #4]
   843d2:	f003 031f 	and.w	r3, r3, #31
   843d6:	2201      	movs	r2, #1
   843d8:	fa02 f303 	lsl.w	r3, r2, r3
   843dc:	461a      	mov	r2, r3
   843de:	68fb      	ldr	r3, [r7, #12]
   843e0:	635a      	str	r2, [r3, #52]	; 0x34
}
   843e2:	bf00      	nop
   843e4:	3710      	adds	r7, #16
   843e6:	46bd      	mov	sp, r7
   843e8:	bd80      	pop	{r7, pc}
   843ea:	bf00      	nop
   843ec:	0008460d 	.word	0x0008460d

000843f0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   843f0:	b590      	push	{r4, r7, lr}
   843f2:	b087      	sub	sp, #28
   843f4:	af02      	add	r7, sp, #8
   843f6:	6078      	str	r0, [r7, #4]
   843f8:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   843fa:	6878      	ldr	r0, [r7, #4]
   843fc:	4b45      	ldr	r3, [pc, #276]	; (84514 <pio_configure_pin+0x124>)
   843fe:	4798      	blx	r3
   84400:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   84402:	683b      	ldr	r3, [r7, #0]
   84404:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   84408:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8440c:	d046      	beq.n	8449c <pio_configure_pin+0xac>
   8440e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   84412:	d806      	bhi.n	84422 <pio_configure_pin+0x32>
   84414:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   84418:	d00a      	beq.n	84430 <pio_configure_pin+0x40>
   8441a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8441e:	d022      	beq.n	84466 <pio_configure_pin+0x76>
   84420:	e070      	b.n	84504 <pio_configure_pin+0x114>
   84422:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   84426:	d045      	beq.n	844b4 <pio_configure_pin+0xc4>
   84428:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8442c:	d042      	beq.n	844b4 <pio_configure_pin+0xc4>
   8442e:	e069      	b.n	84504 <pio_configure_pin+0x114>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   84430:	687b      	ldr	r3, [r7, #4]
   84432:	f003 031f 	and.w	r3, r3, #31
   84436:	2201      	movs	r2, #1
   84438:	fa02 f303 	lsl.w	r3, r2, r3
   8443c:	461a      	mov	r2, r3
   8443e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   84442:	68f8      	ldr	r0, [r7, #12]
   84444:	4b34      	ldr	r3, [pc, #208]	; (84518 <pio_configure_pin+0x128>)
   84446:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   84448:	687b      	ldr	r3, [r7, #4]
   8444a:	f003 031f 	and.w	r3, r3, #31
   8444e:	2201      	movs	r2, #1
   84450:	fa02 f303 	lsl.w	r3, r2, r3
   84454:	4619      	mov	r1, r3
   84456:	683b      	ldr	r3, [r7, #0]
   84458:	f003 0301 	and.w	r3, r3, #1
   8445c:	461a      	mov	r2, r3
   8445e:	68f8      	ldr	r0, [r7, #12]
   84460:	4b2e      	ldr	r3, [pc, #184]	; (8451c <pio_configure_pin+0x12c>)
   84462:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   84464:	e050      	b.n	84508 <pio_configure_pin+0x118>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   84466:	687b      	ldr	r3, [r7, #4]
   84468:	f003 031f 	and.w	r3, r3, #31
   8446c:	2201      	movs	r2, #1
   8446e:	fa02 f303 	lsl.w	r3, r2, r3
   84472:	461a      	mov	r2, r3
   84474:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   84478:	68f8      	ldr	r0, [r7, #12]
   8447a:	4b27      	ldr	r3, [pc, #156]	; (84518 <pio_configure_pin+0x128>)
   8447c:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   8447e:	687b      	ldr	r3, [r7, #4]
   84480:	f003 031f 	and.w	r3, r3, #31
   84484:	2201      	movs	r2, #1
   84486:	fa02 f303 	lsl.w	r3, r2, r3
   8448a:	4619      	mov	r1, r3
   8448c:	683b      	ldr	r3, [r7, #0]
   8448e:	f003 0301 	and.w	r3, r3, #1
   84492:	461a      	mov	r2, r3
   84494:	68f8      	ldr	r0, [r7, #12]
   84496:	4b21      	ldr	r3, [pc, #132]	; (8451c <pio_configure_pin+0x12c>)
   84498:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   8449a:	e035      	b.n	84508 <pio_configure_pin+0x118>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8449c:	687b      	ldr	r3, [r7, #4]
   8449e:	f003 031f 	and.w	r3, r3, #31
   844a2:	2201      	movs	r2, #1
   844a4:	fa02 f303 	lsl.w	r3, r2, r3
   844a8:	683a      	ldr	r2, [r7, #0]
   844aa:	4619      	mov	r1, r3
   844ac:	68f8      	ldr	r0, [r7, #12]
   844ae:	4b1c      	ldr	r3, [pc, #112]	; (84520 <pio_configure_pin+0x130>)
   844b0:	4798      	blx	r3
		break;
   844b2:	e029      	b.n	84508 <pio_configure_pin+0x118>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   844b4:	687b      	ldr	r3, [r7, #4]
   844b6:	f003 031f 	and.w	r3, r3, #31
   844ba:	2201      	movs	r2, #1
   844bc:	fa02 f303 	lsl.w	r3, r2, r3
   844c0:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   844c2:	683b      	ldr	r3, [r7, #0]
   844c4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   844c8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   844cc:	bf0c      	ite	eq
   844ce:	2301      	moveq	r3, #1
   844d0:	2300      	movne	r3, #0
   844d2:	b2db      	uxtb	r3, r3
   844d4:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   844d6:	683b      	ldr	r3, [r7, #0]
   844d8:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   844dc:	2b00      	cmp	r3, #0
   844de:	bf14      	ite	ne
   844e0:	2301      	movne	r3, #1
   844e2:	2300      	moveq	r3, #0
   844e4:	b2db      	uxtb	r3, r3
   844e6:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   844e8:	683b      	ldr	r3, [r7, #0]
   844ea:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   844ee:	2b00      	cmp	r3, #0
   844f0:	bf14      	ite	ne
   844f2:	2301      	movne	r3, #1
   844f4:	2300      	moveq	r3, #0
   844f6:	b2db      	uxtb	r3, r3
   844f8:	9300      	str	r3, [sp, #0]
   844fa:	4603      	mov	r3, r0
   844fc:	68f8      	ldr	r0, [r7, #12]
   844fe:	4c09      	ldr	r4, [pc, #36]	; (84524 <pio_configure_pin+0x134>)
   84500:	47a0      	blx	r4
		break;
   84502:	e001      	b.n	84508 <pio_configure_pin+0x118>

	default:
		return 0;
   84504:	2300      	movs	r3, #0
   84506:	e000      	b.n	8450a <pio_configure_pin+0x11a>
	}

	return 1;
   84508:	2301      	movs	r3, #1
}
   8450a:	4618      	mov	r0, r3
   8450c:	3714      	adds	r7, #20
   8450e:	46bd      	mov	sp, r7
   84510:	bd90      	pop	{r4, r7, pc}
   84512:	bf00      	nop
   84514:	0008460d 	.word	0x0008460d
   84518:	0008419f 	.word	0x0008419f
   8451c:	00084175 	.word	0x00084175
   84520:	0008421d 	.word	0x0008421d
   84524:	0008429d 	.word	0x0008429d

00084528 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   84528:	b590      	push	{r4, r7, lr}
   8452a:	b087      	sub	sp, #28
   8452c:	af02      	add	r7, sp, #8
   8452e:	60f8      	str	r0, [r7, #12]
   84530:	60b9      	str	r1, [r7, #8]
   84532:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   84534:	687b      	ldr	r3, [r7, #4]
   84536:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   8453a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8453e:	d02e      	beq.n	8459e <pio_configure_pin_group+0x76>
   84540:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   84544:	d806      	bhi.n	84554 <pio_configure_pin_group+0x2c>
   84546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8454a:	d00a      	beq.n	84562 <pio_configure_pin_group+0x3a>
   8454c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   84550:	d016      	beq.n	84580 <pio_configure_pin_group+0x58>
   84552:	e04c      	b.n	845ee <pio_configure_pin_group+0xc6>
   84554:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   84558:	d027      	beq.n	845aa <pio_configure_pin_group+0x82>
   8455a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8455e:	d024      	beq.n	845aa <pio_configure_pin_group+0x82>
   84560:	e045      	b.n	845ee <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   84562:	68ba      	ldr	r2, [r7, #8]
   84564:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   84568:	68f8      	ldr	r0, [r7, #12]
   8456a:	4b24      	ldr	r3, [pc, #144]	; (845fc <pio_configure_pin_group+0xd4>)
   8456c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   8456e:	687b      	ldr	r3, [r7, #4]
   84570:	f003 0301 	and.w	r3, r3, #1
   84574:	461a      	mov	r2, r3
   84576:	68b9      	ldr	r1, [r7, #8]
   84578:	68f8      	ldr	r0, [r7, #12]
   8457a:	4b21      	ldr	r3, [pc, #132]	; (84600 <pio_configure_pin_group+0xd8>)
   8457c:	4798      	blx	r3
		break;
   8457e:	e038      	b.n	845f2 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   84580:	68ba      	ldr	r2, [r7, #8]
   84582:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   84586:	68f8      	ldr	r0, [r7, #12]
   84588:	4b1c      	ldr	r3, [pc, #112]	; (845fc <pio_configure_pin_group+0xd4>)
   8458a:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   8458c:	687b      	ldr	r3, [r7, #4]
   8458e:	f003 0301 	and.w	r3, r3, #1
   84592:	461a      	mov	r2, r3
   84594:	68b9      	ldr	r1, [r7, #8]
   84596:	68f8      	ldr	r0, [r7, #12]
   84598:	4b19      	ldr	r3, [pc, #100]	; (84600 <pio_configure_pin_group+0xd8>)
   8459a:	4798      	blx	r3
		break;
   8459c:	e029      	b.n	845f2 <pio_configure_pin_group+0xca>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8459e:	687a      	ldr	r2, [r7, #4]
   845a0:	68b9      	ldr	r1, [r7, #8]
   845a2:	68f8      	ldr	r0, [r7, #12]
   845a4:	4b17      	ldr	r3, [pc, #92]	; (84604 <pio_configure_pin_group+0xdc>)
   845a6:	4798      	blx	r3
		break;
   845a8:	e023      	b.n	845f2 <pio_configure_pin_group+0xca>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   845aa:	687b      	ldr	r3, [r7, #4]
   845ac:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   845b0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   845b4:	bf0c      	ite	eq
   845b6:	2301      	moveq	r3, #1
   845b8:	2300      	movne	r3, #0
   845ba:	b2db      	uxtb	r3, r3
   845bc:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   845be:	687b      	ldr	r3, [r7, #4]
   845c0:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask,
   845c4:	2b00      	cmp	r3, #0
   845c6:	bf14      	ite	ne
   845c8:	2301      	movne	r3, #1
   845ca:	2300      	moveq	r3, #0
   845cc:	b2db      	uxtb	r3, r3
   845ce:	4619      	mov	r1, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   845d0:	687b      	ldr	r3, [r7, #4]
   845d2:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask,
   845d6:	2b00      	cmp	r3, #0
   845d8:	bf14      	ite	ne
   845da:	2301      	movne	r3, #1
   845dc:	2300      	moveq	r3, #0
   845de:	b2db      	uxtb	r3, r3
   845e0:	9300      	str	r3, [sp, #0]
   845e2:	460b      	mov	r3, r1
   845e4:	68b9      	ldr	r1, [r7, #8]
   845e6:	68f8      	ldr	r0, [r7, #12]
   845e8:	4c07      	ldr	r4, [pc, #28]	; (84608 <pio_configure_pin_group+0xe0>)
   845ea:	47a0      	blx	r4
		break;
   845ec:	e001      	b.n	845f2 <pio_configure_pin_group+0xca>

	default:
		return 0;
   845ee:	2300      	movs	r3, #0
   845f0:	e000      	b.n	845f4 <pio_configure_pin_group+0xcc>
	}

	return 1;
   845f2:	2301      	movs	r3, #1
}
   845f4:	4618      	mov	r0, r3
   845f6:	3714      	adds	r7, #20
   845f8:	46bd      	mov	sp, r7
   845fa:	bd90      	pop	{r4, r7, pc}
   845fc:	0008419f 	.word	0x0008419f
   84600:	00084175 	.word	0x00084175
   84604:	0008421d 	.word	0x0008421d
   84608:	0008429d 	.word	0x0008429d

0008460c <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
   8460c:	b480      	push	{r7}
   8460e:	b085      	sub	sp, #20
   84610:	af00      	add	r7, sp, #0
   84612:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84614:	687b      	ldr	r3, [r7, #4]
   84616:	095b      	lsrs	r3, r3, #5
   84618:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8461c:	f203 7306 	addw	r3, r3, #1798	; 0x706
   84620:	025b      	lsls	r3, r3, #9
   84622:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
   84624:	68fb      	ldr	r3, [r7, #12]
}
   84626:	4618      	mov	r0, r3
   84628:	3714      	adds	r7, #20
   8462a:	46bd      	mov	sp, r7
   8462c:	bc80      	pop	{r7}
   8462e:	4770      	bx	lr

00084630 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   84630:	b480      	push	{r7}
   84632:	af00      	add	r7, sp, #0
	while (1) {
   84634:	e7fe      	b.n	84634 <Dummy_Handler+0x4>
   84636:	0000      	movs	r0, r0

00084638 <udc_get_string_serial_name>:
 * to a suitable pointer. This will also require the serial number length
 * define USB_DEVICE_GET_SERIAL_NAME_LENGTH.
 */
#if defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	static const uint8_t *udc_get_string_serial_name(void)
	{
   84638:	b480      	push	{r7}
   8463a:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_GET_SERIAL_NAME_POINTER;
   8463c:	4b02      	ldr	r3, [pc, #8]	; (84648 <udc_get_string_serial_name+0x10>)
	}
   8463e:	4618      	mov	r0, r3
   84640:	46bd      	mov	sp, r7
   84642:	bc80      	pop	{r7}
   84644:	4770      	bx	lr
   84646:	bf00      	nop
   84648:	2000025c 	.word	0x2000025c

0008464c <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
   8464c:	b480      	push	{r7}
   8464e:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
   84650:	4b02      	ldr	r3, [pc, #8]	; (8465c <udc_get_interface_desc+0x10>)
   84652:	681b      	ldr	r3, [r3, #0]
}
   84654:	4618      	mov	r0, r3
   84656:	46bd      	mov	sp, r7
   84658:	bc80      	pop	{r7}
   8465a:	4770      	bx	lr
   8465c:	20000d44 	.word	0x20000d44

00084660 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
   84660:	b480      	push	{r7}
   84662:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   84664:	4b06      	ldr	r3, [pc, #24]	; (84680 <udc_get_eof_conf+0x20>)
   84666:	681b      	ldr	r3, [r3, #0]
   84668:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   8466a:	4a05      	ldr	r2, [pc, #20]	; (84680 <udc_get_eof_conf+0x20>)
   8466c:	6812      	ldr	r2, [r2, #0]
   8466e:	6812      	ldr	r2, [r2, #0]
   84670:	8852      	ldrh	r2, [r2, #2]
   84672:	b292      	uxth	r2, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   84674:	4413      	add	r3, r2
}
   84676:	4618      	mov	r0, r3
   84678:	46bd      	mov	sp, r7
   8467a:	bc80      	pop	{r7}
   8467c:	4770      	bx	lr
   8467e:	bf00      	nop
   84680:	20000d40 	.word	0x20000d40

00084684 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   84684:	b580      	push	{r7, lr}
   84686:	b084      	sub	sp, #16
   84688:	af00      	add	r7, sp, #0
   8468a:	6078      	str	r0, [r7, #4]
   8468c:	460b      	mov	r3, r1
   8468e:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   84690:	4b12      	ldr	r3, [pc, #72]	; (846dc <udc_next_desc_in_iface+0x58>)
   84692:	4798      	blx	r3
   84694:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   84696:	687b      	ldr	r3, [r7, #4]
   84698:	781b      	ldrb	r3, [r3, #0]
   8469a:	461a      	mov	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   8469c:	687b      	ldr	r3, [r7, #4]
   8469e:	4413      	add	r3, r2
   846a0:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   846a2:	e010      	b.n	846c6 <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   846a4:	687b      	ldr	r3, [r7, #4]
   846a6:	785b      	ldrb	r3, [r3, #1]
   846a8:	2b04      	cmp	r3, #4
   846aa:	d011      	beq.n	846d0 <udc_next_desc_in_iface+0x4c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   846ac:	687b      	ldr	r3, [r7, #4]
   846ae:	785b      	ldrb	r3, [r3, #1]
   846b0:	78fa      	ldrb	r2, [r7, #3]
   846b2:	429a      	cmp	r2, r3
   846b4:	d101      	bne.n	846ba <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
   846b6:	687b      	ldr	r3, [r7, #4]
   846b8:	e00c      	b.n	846d4 <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   846ba:	687b      	ldr	r3, [r7, #4]
   846bc:	781b      	ldrb	r3, [r3, #0]
   846be:	461a      	mov	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   846c0:	687b      	ldr	r3, [r7, #4]
   846c2:	4413      	add	r3, r2
   846c4:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
   846c6:	68fa      	ldr	r2, [r7, #12]
   846c8:	687b      	ldr	r3, [r7, #4]
   846ca:	429a      	cmp	r2, r3
   846cc:	d8ea      	bhi.n	846a4 <udc_next_desc_in_iface+0x20>
   846ce:	e000      	b.n	846d2 <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
   846d0:	bf00      	nop
	}
	return NULL; // No specific descriptor found
   846d2:	2300      	movs	r3, #0
}
   846d4:	4618      	mov	r0, r3
   846d6:	3710      	adds	r7, #16
   846d8:	46bd      	mov	sp, r7
   846da:	bd80      	pop	{r7, pc}
   846dc:	00084661 	.word	0x00084661

000846e0 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   846e0:	b580      	push	{r7, lr}
   846e2:	b084      	sub	sp, #16
   846e4:	af00      	add	r7, sp, #0
   846e6:	4603      	mov	r3, r0
   846e8:	460a      	mov	r2, r1
   846ea:	71fb      	strb	r3, [r7, #7]
   846ec:	4613      	mov	r3, r2
   846ee:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   846f0:	4b1e      	ldr	r3, [pc, #120]	; (8476c <udc_update_iface_desc+0x8c>)
   846f2:	781b      	ldrb	r3, [r3, #0]
   846f4:	2b00      	cmp	r3, #0
   846f6:	d101      	bne.n	846fc <udc_update_iface_desc+0x1c>
		return false;
   846f8:	2300      	movs	r3, #0
   846fa:	e032      	b.n	84762 <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   846fc:	4b1c      	ldr	r3, [pc, #112]	; (84770 <udc_update_iface_desc+0x90>)
   846fe:	681b      	ldr	r3, [r3, #0]
   84700:	681b      	ldr	r3, [r3, #0]
   84702:	791b      	ldrb	r3, [r3, #4]
   84704:	79fa      	ldrb	r2, [r7, #7]
   84706:	429a      	cmp	r2, r3
   84708:	d301      	bcc.n	8470e <udc_update_iface_desc+0x2e>
		return false;
   8470a:	2300      	movs	r3, #0
   8470c:	e029      	b.n	84762 <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
   8470e:	4b18      	ldr	r3, [pc, #96]	; (84770 <udc_update_iface_desc+0x90>)
   84710:	681b      	ldr	r3, [r3, #0]
   84712:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   84714:	4a17      	ldr	r2, [pc, #92]	; (84774 <udc_update_iface_desc+0x94>)
   84716:	6013      	str	r3, [r2, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   84718:	4b17      	ldr	r3, [pc, #92]	; (84778 <udc_update_iface_desc+0x98>)
   8471a:	4798      	blx	r3
   8471c:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
   8471e:	e01a      	b.n	84756 <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   84720:	4b14      	ldr	r3, [pc, #80]	; (84774 <udc_update_iface_desc+0x94>)
   84722:	681b      	ldr	r3, [r3, #0]
   84724:	785b      	ldrb	r3, [r3, #1]
   84726:	2b04      	cmp	r3, #4
   84728:	d10d      	bne.n	84746 <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   8472a:	4b12      	ldr	r3, [pc, #72]	; (84774 <udc_update_iface_desc+0x94>)
   8472c:	681b      	ldr	r3, [r3, #0]
   8472e:	789b      	ldrb	r3, [r3, #2]
   84730:	79fa      	ldrb	r2, [r7, #7]
   84732:	429a      	cmp	r2, r3
   84734:	d107      	bne.n	84746 <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
   84736:	4b0f      	ldr	r3, [pc, #60]	; (84774 <udc_update_iface_desc+0x94>)
   84738:	681b      	ldr	r3, [r3, #0]
   8473a:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   8473c:	79ba      	ldrb	r2, [r7, #6]
   8473e:	429a      	cmp	r2, r3
   84740:	d101      	bne.n	84746 <udc_update_iface_desc+0x66>
				return true; // Interface found
   84742:	2301      	movs	r3, #1
   84744:	e00d      	b.n	84762 <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   84746:	4b0b      	ldr	r3, [pc, #44]	; (84774 <udc_update_iface_desc+0x94>)
   84748:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   8474a:	4a0a      	ldr	r2, [pc, #40]	; (84774 <udc_update_iface_desc+0x94>)
   8474c:	6812      	ldr	r2, [r2, #0]
   8474e:	7812      	ldrb	r2, [r2, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   84750:	4413      	add	r3, r2
   84752:	4a08      	ldr	r2, [pc, #32]	; (84774 <udc_update_iface_desc+0x94>)
   84754:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   84756:	4b07      	ldr	r3, [pc, #28]	; (84774 <udc_update_iface_desc+0x94>)
   84758:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
   8475a:	68fa      	ldr	r2, [r7, #12]
   8475c:	429a      	cmp	r2, r3
   8475e:	d8df      	bhi.n	84720 <udc_update_iface_desc+0x40>
	}
	return false; // Interface not found
   84760:	2300      	movs	r3, #0
}
   84762:	4618      	mov	r0, r3
   84764:	3710      	adds	r7, #16
   84766:	46bd      	mov	sp, r7
   84768:	bd80      	pop	{r7, pc}
   8476a:	bf00      	nop
   8476c:	20000d3c 	.word	0x20000d3c
   84770:	20000d40 	.word	0x20000d40
   84774:	20000d44 	.word	0x20000d44
   84778:	00084661 	.word	0x00084661

0008477c <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   8477c:	b580      	push	{r7, lr}
   8477e:	b084      	sub	sp, #16
   84780:	af00      	add	r7, sp, #0
   84782:	4603      	mov	r3, r0
   84784:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   84786:	79fb      	ldrb	r3, [r7, #7]
   84788:	2100      	movs	r1, #0
   8478a:	4618      	mov	r0, r3
   8478c:	4b1e      	ldr	r3, [pc, #120]	; (84808 <udc_iface_disable+0x8c>)
   8478e:	4798      	blx	r3
   84790:	4603      	mov	r3, r0
   84792:	f083 0301 	eor.w	r3, r3, #1
   84796:	b2db      	uxtb	r3, r3
   84798:	2b00      	cmp	r3, #0
   8479a:	d001      	beq.n	847a0 <udc_iface_disable+0x24>
		return false;
   8479c:	2300      	movs	r3, #0
   8479e:	e02f      	b.n	84800 <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   847a0:	4b1a      	ldr	r3, [pc, #104]	; (8480c <udc_iface_disable+0x90>)
   847a2:	681b      	ldr	r3, [r3, #0]
   847a4:	685a      	ldr	r2, [r3, #4]
   847a6:	79fb      	ldrb	r3, [r7, #7]
   847a8:	009b      	lsls	r3, r3, #2
   847aa:	4413      	add	r3, r2
   847ac:	681b      	ldr	r3, [r3, #0]
   847ae:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   847b0:	68bb      	ldr	r3, [r7, #8]
   847b2:	68db      	ldr	r3, [r3, #12]
   847b4:	4798      	blx	r3
   847b6:	4603      	mov	r3, r0
   847b8:	461a      	mov	r2, r3
   847ba:	79fb      	ldrb	r3, [r7, #7]
   847bc:	4611      	mov	r1, r2
   847be:	4618      	mov	r0, r3
   847c0:	4b11      	ldr	r3, [pc, #68]	; (84808 <udc_iface_disable+0x8c>)
   847c2:	4798      	blx	r3
   847c4:	4603      	mov	r3, r0
   847c6:	f083 0301 	eor.w	r3, r3, #1
   847ca:	b2db      	uxtb	r3, r3
   847cc:	2b00      	cmp	r3, #0
   847ce:	d001      	beq.n	847d4 <udc_iface_disable+0x58>
		return false;
   847d0:	2300      	movs	r3, #0
   847d2:	e015      	b.n	84800 <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   847d4:	4b0e      	ldr	r3, [pc, #56]	; (84810 <udc_iface_disable+0x94>)
   847d6:	681b      	ldr	r3, [r3, #0]
   847d8:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   847da:	2105      	movs	r1, #5
   847dc:	68f8      	ldr	r0, [r7, #12]
   847de:	4b0d      	ldr	r3, [pc, #52]	; (84814 <udc_iface_disable+0x98>)
   847e0:	4798      	blx	r3
   847e2:	60f8      	str	r0, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   847e4:	68fb      	ldr	r3, [r7, #12]
   847e6:	2b00      	cmp	r3, #0
   847e8:	d005      	beq.n	847f6 <udc_iface_disable+0x7a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   847ea:	68fb      	ldr	r3, [r7, #12]
   847ec:	789b      	ldrb	r3, [r3, #2]
   847ee:	4618      	mov	r0, r3
   847f0:	4b09      	ldr	r3, [pc, #36]	; (84818 <udc_iface_disable+0x9c>)
   847f2:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   847f4:	e7f1      	b.n	847da <udc_iface_disable+0x5e>
				break;
   847f6:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
   847f8:	68bb      	ldr	r3, [r7, #8]
   847fa:	685b      	ldr	r3, [r3, #4]
   847fc:	4798      	blx	r3
	return true;
   847fe:	2301      	movs	r3, #1
}
   84800:	4618      	mov	r0, r3
   84802:	3710      	adds	r7, #16
   84804:	46bd      	mov	sp, r7
   84806:	bd80      	pop	{r7, pc}
   84808:	000846e1 	.word	0x000846e1
   8480c:	20000d40 	.word	0x20000d40
   84810:	20000d44 	.word	0x20000d44
   84814:	00084685 	.word	0x00084685
   84818:	000823a1 	.word	0x000823a1

0008481c <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   8481c:	b580      	push	{r7, lr}
   8481e:	b084      	sub	sp, #16
   84820:	af00      	add	r7, sp, #0
   84822:	4603      	mov	r3, r0
   84824:	460a      	mov	r2, r1
   84826:	71fb      	strb	r3, [r7, #7]
   84828:	4613      	mov	r3, r2
   8482a:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   8482c:	79ba      	ldrb	r2, [r7, #6]
   8482e:	79fb      	ldrb	r3, [r7, #7]
   84830:	4611      	mov	r1, r2
   84832:	4618      	mov	r0, r3
   84834:	4b1a      	ldr	r3, [pc, #104]	; (848a0 <udc_iface_enable+0x84>)
   84836:	4798      	blx	r3
   84838:	4603      	mov	r3, r0
   8483a:	f083 0301 	eor.w	r3, r3, #1
   8483e:	b2db      	uxtb	r3, r3
   84840:	2b00      	cmp	r3, #0
   84842:	d001      	beq.n	84848 <udc_iface_enable+0x2c>
		return false;
   84844:	2300      	movs	r3, #0
   84846:	e027      	b.n	84898 <udc_iface_enable+0x7c>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   84848:	4b16      	ldr	r3, [pc, #88]	; (848a4 <udc_iface_enable+0x88>)
   8484a:	681b      	ldr	r3, [r3, #0]
   8484c:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   8484e:	2105      	movs	r1, #5
   84850:	68f8      	ldr	r0, [r7, #12]
   84852:	4b15      	ldr	r3, [pc, #84]	; (848a8 <udc_iface_enable+0x8c>)
   84854:	4798      	blx	r3
   84856:	60f8      	str	r0, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   84858:	68fb      	ldr	r3, [r7, #12]
   8485a:	2b00      	cmp	r3, #0
   8485c:	d011      	beq.n	84882 <udc_iface_enable+0x66>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   8485e:	68fb      	ldr	r3, [r7, #12]
   84860:	7898      	ldrb	r0, [r3, #2]
   84862:	68fb      	ldr	r3, [r7, #12]
   84864:	78d9      	ldrb	r1, [r3, #3]
   84866:	68fb      	ldr	r3, [r7, #12]
   84868:	889b      	ldrh	r3, [r3, #4]
   8486a:	b29b      	uxth	r3, r3
   8486c:	461a      	mov	r2, r3
   8486e:	4b0f      	ldr	r3, [pc, #60]	; (848ac <udc_iface_enable+0x90>)
   84870:	4798      	blx	r3
   84872:	4603      	mov	r3, r0
   84874:	f083 0301 	eor.w	r3, r3, #1
   84878:	b2db      	uxtb	r3, r3
   8487a:	2b00      	cmp	r3, #0
   8487c:	d0e7      	beq.n	8484e <udc_iface_enable+0x32>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
   8487e:	2300      	movs	r3, #0
   84880:	e00a      	b.n	84898 <udc_iface_enable+0x7c>
			break;
   84882:	bf00      	nop
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   84884:	4b0a      	ldr	r3, [pc, #40]	; (848b0 <udc_iface_enable+0x94>)
   84886:	681b      	ldr	r3, [r3, #0]
   84888:	685a      	ldr	r2, [r3, #4]
   8488a:	79fb      	ldrb	r3, [r7, #7]
   8488c:	009b      	lsls	r3, r3, #2
   8488e:	4413      	add	r3, r2
   84890:	681b      	ldr	r3, [r3, #0]
   84892:	681b      	ldr	r3, [r3, #0]
   84894:	4798      	blx	r3
   84896:	4603      	mov	r3, r0
}
   84898:	4618      	mov	r0, r3
   8489a:	3710      	adds	r7, #16
   8489c:	46bd      	mov	sp, r7
   8489e:	bd80      	pop	{r7, pc}
   848a0:	000846e1 	.word	0x000846e1
   848a4:	20000d44 	.word	0x20000d44
   848a8:	00084685 	.word	0x00084685
   848ac:	00081fed 	.word	0x00081fed
   848b0:	20000d40 	.word	0x20000d40

000848b4 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   848b4:	b580      	push	{r7, lr}
   848b6:	af00      	add	r7, sp, #0
	udd_enable();
   848b8:	4b01      	ldr	r3, [pc, #4]	; (848c0 <udc_start+0xc>)
   848ba:	4798      	blx	r3
}
   848bc:	bf00      	nop
   848be:	bd80      	pop	{r7, pc}
   848c0:	00081da9 	.word	0x00081da9

000848c4 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   848c4:	b580      	push	{r7, lr}
   848c6:	b082      	sub	sp, #8
   848c8:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   848ca:	4b0f      	ldr	r3, [pc, #60]	; (84908 <udc_reset+0x44>)
   848cc:	781b      	ldrb	r3, [r3, #0]
   848ce:	2b00      	cmp	r3, #0
   848d0:	d010      	beq.n	848f4 <udc_reset+0x30>
		for (iface_num = 0;
   848d2:	2300      	movs	r3, #0
   848d4:	71fb      	strb	r3, [r7, #7]
   848d6:	e006      	b.n	848e6 <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   848d8:	79fb      	ldrb	r3, [r7, #7]
   848da:	4618      	mov	r0, r3
   848dc:	4b0b      	ldr	r3, [pc, #44]	; (8490c <udc_reset+0x48>)
   848de:	4798      	blx	r3
				iface_num++) {
   848e0:	79fb      	ldrb	r3, [r7, #7]
   848e2:	3301      	adds	r3, #1
   848e4:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   848e6:	4b0a      	ldr	r3, [pc, #40]	; (84910 <udc_reset+0x4c>)
   848e8:	681b      	ldr	r3, [r3, #0]
   848ea:	681b      	ldr	r3, [r3, #0]
   848ec:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   848ee:	79fa      	ldrb	r2, [r7, #7]
   848f0:	429a      	cmp	r2, r3
   848f2:	d3f1      	bcc.n	848d8 <udc_reset+0x14>
		}
	}
	udc_num_configuration = 0;
   848f4:	4b04      	ldr	r3, [pc, #16]	; (84908 <udc_reset+0x44>)
   848f6:	2200      	movs	r2, #0
   848f8:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   848fa:	4b06      	ldr	r3, [pc, #24]	; (84914 <udc_reset+0x50>)
   848fc:	2200      	movs	r2, #0
   848fe:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
   84900:	bf00      	nop
   84902:	3708      	adds	r7, #8
   84904:	46bd      	mov	sp, r7
   84906:	bd80      	pop	{r7, pc}
   84908:	20000d3c 	.word	0x20000d3c
   8490c:	0008477d 	.word	0x0008477d
   84910:	20000d40 	.word	0x20000d40
   84914:	20000d3a 	.word	0x20000d3a

00084918 <udc_sof_notify>:

void udc_sof_notify(void)
{
   84918:	b580      	push	{r7, lr}
   8491a:	b082      	sub	sp, #8
   8491c:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   8491e:	4b14      	ldr	r3, [pc, #80]	; (84970 <udc_sof_notify+0x58>)
   84920:	781b      	ldrb	r3, [r3, #0]
   84922:	2b00      	cmp	r3, #0
   84924:	d01f      	beq.n	84966 <udc_sof_notify+0x4e>
		for (iface_num = 0;
   84926:	2300      	movs	r3, #0
   84928:	71fb      	strb	r3, [r7, #7]
   8492a:	e015      	b.n	84958 <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   8492c:	4b11      	ldr	r3, [pc, #68]	; (84974 <udc_sof_notify+0x5c>)
   8492e:	681b      	ldr	r3, [r3, #0]
   84930:	685a      	ldr	r2, [r3, #4]
   84932:	79fb      	ldrb	r3, [r7, #7]
   84934:	009b      	lsls	r3, r3, #2
   84936:	4413      	add	r3, r2
   84938:	681b      	ldr	r3, [r3, #0]
   8493a:	691b      	ldr	r3, [r3, #16]
   8493c:	2b00      	cmp	r3, #0
   8493e:	d008      	beq.n	84952 <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   84940:	4b0c      	ldr	r3, [pc, #48]	; (84974 <udc_sof_notify+0x5c>)
   84942:	681b      	ldr	r3, [r3, #0]
   84944:	685a      	ldr	r2, [r3, #4]
   84946:	79fb      	ldrb	r3, [r7, #7]
   84948:	009b      	lsls	r3, r3, #2
   8494a:	4413      	add	r3, r2
   8494c:	681b      	ldr	r3, [r3, #0]
   8494e:	691b      	ldr	r3, [r3, #16]
   84950:	4798      	blx	r3
				iface_num++) {
   84952:	79fb      	ldrb	r3, [r7, #7]
   84954:	3301      	adds	r3, #1
   84956:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84958:	4b06      	ldr	r3, [pc, #24]	; (84974 <udc_sof_notify+0x5c>)
   8495a:	681b      	ldr	r3, [r3, #0]
   8495c:	681b      	ldr	r3, [r3, #0]
   8495e:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   84960:	79fa      	ldrb	r2, [r7, #7]
   84962:	429a      	cmp	r2, r3
   84964:	d3e2      	bcc.n	8492c <udc_sof_notify+0x14>
			}
		}
	}
}
   84966:	bf00      	nop
   84968:	3708      	adds	r7, #8
   8496a:	46bd      	mov	sp, r7
   8496c:	bd80      	pop	{r7, pc}
   8496e:	bf00      	nop
   84970:	20000d3c 	.word	0x20000d3c
   84974:	20000d40 	.word	0x20000d40

00084978 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
   84978:	b580      	push	{r7, lr}
   8497a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   8497c:	4b06      	ldr	r3, [pc, #24]	; (84998 <udc_req_std_dev_get_status+0x20>)
   8497e:	88db      	ldrh	r3, [r3, #6]
   84980:	2b02      	cmp	r3, #2
   84982:	d001      	beq.n	84988 <udc_req_std_dev_get_status+0x10>
		return false;
   84984:	2300      	movs	r3, #0
   84986:	e004      	b.n	84992 <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   84988:	2102      	movs	r1, #2
   8498a:	4804      	ldr	r0, [pc, #16]	; (8499c <udc_req_std_dev_get_status+0x24>)
   8498c:	4b04      	ldr	r3, [pc, #16]	; (849a0 <udc_req_std_dev_get_status+0x28>)
   8498e:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   84990:	2301      	movs	r3, #1
}
   84992:	4618      	mov	r0, r3
   84994:	bd80      	pop	{r7, pc}
   84996:	bf00      	nop
   84998:	20000d58 	.word	0x20000d58
   8499c:	20000d3a 	.word	0x20000d3a
   849a0:	00081fc5 	.word	0x00081fc5

000849a4 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
   849a4:	b580      	push	{r7, lr}
   849a6:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   849a8:	4b0b      	ldr	r3, [pc, #44]	; (849d8 <udc_req_std_ep_get_status+0x34>)
   849aa:	88db      	ldrh	r3, [r3, #6]
   849ac:	2b02      	cmp	r3, #2
   849ae:	d001      	beq.n	849b4 <udc_req_std_ep_get_status+0x10>
		return false;
   849b0:	2300      	movs	r3, #0
   849b2:	e00e      	b.n	849d2 <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   849b4:	4b08      	ldr	r3, [pc, #32]	; (849d8 <udc_req_std_ep_get_status+0x34>)
   849b6:	889b      	ldrh	r3, [r3, #4]
   849b8:	b2db      	uxtb	r3, r3
   849ba:	4618      	mov	r0, r3
   849bc:	4b07      	ldr	r3, [pc, #28]	; (849dc <udc_req_std_ep_get_status+0x38>)
   849be:	4798      	blx	r3
   849c0:	4603      	mov	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   849c2:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   849c4:	4b06      	ldr	r3, [pc, #24]	; (849e0 <udc_req_std_ep_get_status+0x3c>)
   849c6:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   849c8:	2102      	movs	r1, #2
   849ca:	4805      	ldr	r0, [pc, #20]	; (849e0 <udc_req_std_ep_get_status+0x3c>)
   849cc:	4b05      	ldr	r3, [pc, #20]	; (849e4 <udc_req_std_ep_get_status+0x40>)
   849ce:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
   849d0:	2301      	movs	r3, #1
}
   849d2:	4618      	mov	r0, r3
   849d4:	bd80      	pop	{r7, pc}
   849d6:	bf00      	nop
   849d8:	20000d58 	.word	0x20000d58
   849dc:	00082421 	.word	0x00082421
   849e0:	20000d48 	.word	0x20000d48
   849e4:	00081fc5 	.word	0x00081fc5

000849e8 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
   849e8:	b480      	push	{r7}
   849ea:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   849ec:	4b0b      	ldr	r3, [pc, #44]	; (84a1c <udc_req_std_dev_clear_feature+0x34>)
   849ee:	88db      	ldrh	r3, [r3, #6]
   849f0:	2b00      	cmp	r3, #0
   849f2:	d001      	beq.n	849f8 <udc_req_std_dev_clear_feature+0x10>
		return false;
   849f4:	2300      	movs	r3, #0
   849f6:	e00d      	b.n	84a14 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   849f8:	4b08      	ldr	r3, [pc, #32]	; (84a1c <udc_req_std_dev_clear_feature+0x34>)
   849fa:	885b      	ldrh	r3, [r3, #2]
   849fc:	2b01      	cmp	r3, #1
   849fe:	d108      	bne.n	84a12 <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   84a00:	4b07      	ldr	r3, [pc, #28]	; (84a20 <udc_req_std_dev_clear_feature+0x38>)
   84a02:	881b      	ldrh	r3, [r3, #0]
   84a04:	f023 0302 	bic.w	r3, r3, #2
   84a08:	b29a      	uxth	r2, r3
   84a0a:	4b05      	ldr	r3, [pc, #20]	; (84a20 <udc_req_std_dev_clear_feature+0x38>)
   84a0c:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   84a0e:	2301      	movs	r3, #1
   84a10:	e000      	b.n	84a14 <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
   84a12:	2300      	movs	r3, #0
}
   84a14:	4618      	mov	r0, r3
   84a16:	46bd      	mov	sp, r7
   84a18:	bc80      	pop	{r7}
   84a1a:	4770      	bx	lr
   84a1c:	20000d58 	.word	0x20000d58
   84a20:	20000d3a 	.word	0x20000d3a

00084a24 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
   84a24:	b580      	push	{r7, lr}
   84a26:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84a28:	4b0a      	ldr	r3, [pc, #40]	; (84a54 <udc_req_std_ep_clear_feature+0x30>)
   84a2a:	88db      	ldrh	r3, [r3, #6]
   84a2c:	2b00      	cmp	r3, #0
   84a2e:	d001      	beq.n	84a34 <udc_req_std_ep_clear_feature+0x10>
		return false;
   84a30:	2300      	movs	r3, #0
   84a32:	e00c      	b.n	84a4e <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84a34:	4b07      	ldr	r3, [pc, #28]	; (84a54 <udc_req_std_ep_clear_feature+0x30>)
   84a36:	885b      	ldrh	r3, [r3, #2]
   84a38:	2b00      	cmp	r3, #0
   84a3a:	d107      	bne.n	84a4c <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   84a3c:	4b05      	ldr	r3, [pc, #20]	; (84a54 <udc_req_std_ep_clear_feature+0x30>)
   84a3e:	889b      	ldrh	r3, [r3, #4]
   84a40:	b2db      	uxtb	r3, r3
   84a42:	4618      	mov	r0, r3
   84a44:	4b04      	ldr	r3, [pc, #16]	; (84a58 <udc_req_std_ep_clear_feature+0x34>)
   84a46:	4798      	blx	r3
   84a48:	4603      	mov	r3, r0
   84a4a:	e000      	b.n	84a4e <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
   84a4c:	2300      	movs	r3, #0
}
   84a4e:	4618      	mov	r0, r3
   84a50:	bd80      	pop	{r7, pc}
   84a52:	bf00      	nop
   84a54:	20000d58 	.word	0x20000d58
   84a58:	0008259d 	.word	0x0008259d

00084a5c <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
   84a5c:	b580      	push	{r7, lr}
   84a5e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84a60:	4b26      	ldr	r3, [pc, #152]	; (84afc <udc_req_std_dev_set_feature+0xa0>)
   84a62:	88db      	ldrh	r3, [r3, #6]
   84a64:	2b00      	cmp	r3, #0
   84a66:	d001      	beq.n	84a6c <udc_req_std_dev_set_feature+0x10>
		return false;
   84a68:	2300      	movs	r3, #0
   84a6a:	e045      	b.n	84af8 <udc_req_std_dev_set_feature+0x9c>
	}

	switch (udd_g_ctrlreq.req.wValue) {
   84a6c:	4b23      	ldr	r3, [pc, #140]	; (84afc <udc_req_std_dev_set_feature+0xa0>)
   84a6e:	885b      	ldrh	r3, [r3, #2]
   84a70:	2b01      	cmp	r3, #1
   84a72:	d002      	beq.n	84a7a <udc_req_std_dev_set_feature+0x1e>
   84a74:	2b02      	cmp	r3, #2
   84a76:	d002      	beq.n	84a7e <udc_req_std_dev_set_feature+0x22>
			break;
		}
		break;
#endif
	default:
		break;
   84a78:	e03d      	b.n	84af6 <udc_req_std_dev_set_feature+0x9a>
		return false;
   84a7a:	2300      	movs	r3, #0
   84a7c:	e03c      	b.n	84af8 <udc_req_std_dev_set_feature+0x9c>
		if (!udd_is_high_speed()) {
   84a7e:	4b20      	ldr	r3, [pc, #128]	; (84b00 <udc_req_std_dev_set_feature+0xa4>)
   84a80:	4798      	blx	r3
   84a82:	4603      	mov	r3, r0
   84a84:	f083 0301 	eor.w	r3, r3, #1
   84a88:	b2db      	uxtb	r3, r3
   84a8a:	2b00      	cmp	r3, #0
   84a8c:	d130      	bne.n	84af0 <udc_req_std_dev_set_feature+0x94>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   84a8e:	4b1b      	ldr	r3, [pc, #108]	; (84afc <udc_req_std_dev_set_feature+0xa0>)
   84a90:	889b      	ldrh	r3, [r3, #4]
   84a92:	b2db      	uxtb	r3, r3
   84a94:	2b00      	cmp	r3, #0
   84a96:	d12d      	bne.n	84af4 <udc_req_std_dev_set_feature+0x98>
		udc_reset();
   84a98:	4b1a      	ldr	r3, [pc, #104]	; (84b04 <udc_req_std_dev_set_feature+0xa8>)
   84a9a:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   84a9c:	4b17      	ldr	r3, [pc, #92]	; (84afc <udc_req_std_dev_set_feature+0xa0>)
   84a9e:	889b      	ldrh	r3, [r3, #4]
   84aa0:	0a1b      	lsrs	r3, r3, #8
   84aa2:	b29b      	uxth	r3, r3
   84aa4:	b2db      	uxtb	r3, r3
   84aa6:	3b01      	subs	r3, #1
   84aa8:	2b03      	cmp	r3, #3
   84aaa:	d81f      	bhi.n	84aec <udc_req_std_dev_set_feature+0x90>
   84aac:	a201      	add	r2, pc, #4	; (adr r2, 84ab4 <udc_req_std_dev_set_feature+0x58>)
   84aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84ab2:	bf00      	nop
   84ab4:	00084ac5 	.word	0x00084ac5
   84ab8:	00084acf 	.word	0x00084acf
   84abc:	00084ad9 	.word	0x00084ad9
   84ac0:	00084ae3 	.word	0x00084ae3
			udd_g_ctrlreq.callback = udd_test_mode_j;
   84ac4:	4b0d      	ldr	r3, [pc, #52]	; (84afc <udc_req_std_dev_set_feature+0xa0>)
   84ac6:	4a10      	ldr	r2, [pc, #64]	; (84b08 <udc_req_std_dev_set_feature+0xac>)
   84ac8:	611a      	str	r2, [r3, #16]
			return true;
   84aca:	2301      	movs	r3, #1
   84acc:	e014      	b.n	84af8 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   84ace:	4b0b      	ldr	r3, [pc, #44]	; (84afc <udc_req_std_dev_set_feature+0xa0>)
   84ad0:	4a0e      	ldr	r2, [pc, #56]	; (84b0c <udc_req_std_dev_set_feature+0xb0>)
   84ad2:	611a      	str	r2, [r3, #16]
			return true;
   84ad4:	2301      	movs	r3, #1
   84ad6:	e00f      	b.n	84af8 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   84ad8:	4b08      	ldr	r3, [pc, #32]	; (84afc <udc_req_std_dev_set_feature+0xa0>)
   84ada:	4a0d      	ldr	r2, [pc, #52]	; (84b10 <udc_req_std_dev_set_feature+0xb4>)
   84adc:	611a      	str	r2, [r3, #16]
			return true;
   84ade:	2301      	movs	r3, #1
   84ae0:	e00a      	b.n	84af8 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   84ae2:	4b06      	ldr	r3, [pc, #24]	; (84afc <udc_req_std_dev_set_feature+0xa0>)
   84ae4:	4a0b      	ldr	r2, [pc, #44]	; (84b14 <udc_req_std_dev_set_feature+0xb8>)
   84ae6:	611a      	str	r2, [r3, #16]
			return true;
   84ae8:	2301      	movs	r3, #1
   84aea:	e005      	b.n	84af8 <udc_req_std_dev_set_feature+0x9c>
			break;
   84aec:	bf00      	nop
		break;
   84aee:	e002      	b.n	84af6 <udc_req_std_dev_set_feature+0x9a>
			break;
   84af0:	bf00      	nop
   84af2:	e000      	b.n	84af6 <udc_req_std_dev_set_feature+0x9a>
			break;
   84af4:	bf00      	nop
	}
	return false;
   84af6:	2300      	movs	r3, #0
}
   84af8:	4618      	mov	r0, r3
   84afa:	bd80      	pop	{r7, pc}
   84afc:	20000d58 	.word	0x20000d58
   84b00:	00081f41 	.word	0x00081f41
   84b04:	000848c5 	.word	0x000848c5
   84b08:	00082861 	.word	0x00082861
   84b0c:	00082895 	.word	0x00082895
   84b10:	000828c9 	.word	0x000828c9
   84b14:	000828ed 	.word	0x000828ed

00084b18 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
   84b18:	b580      	push	{r7, lr}
   84b1a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84b1c:	4b0d      	ldr	r3, [pc, #52]	; (84b54 <udc_req_std_ep_set_feature+0x3c>)
   84b1e:	88db      	ldrh	r3, [r3, #6]
   84b20:	2b00      	cmp	r3, #0
   84b22:	d001      	beq.n	84b28 <udc_req_std_ep_set_feature+0x10>
		return false;
   84b24:	2300      	movs	r3, #0
   84b26:	e012      	b.n	84b4e <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84b28:	4b0a      	ldr	r3, [pc, #40]	; (84b54 <udc_req_std_ep_set_feature+0x3c>)
   84b2a:	885b      	ldrh	r3, [r3, #2]
   84b2c:	2b00      	cmp	r3, #0
   84b2e:	d10d      	bne.n	84b4c <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   84b30:	4b08      	ldr	r3, [pc, #32]	; (84b54 <udc_req_std_ep_set_feature+0x3c>)
   84b32:	889b      	ldrh	r3, [r3, #4]
   84b34:	b2db      	uxtb	r3, r3
   84b36:	4618      	mov	r0, r3
   84b38:	4b07      	ldr	r3, [pc, #28]	; (84b58 <udc_req_std_ep_set_feature+0x40>)
   84b3a:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   84b3c:	4b05      	ldr	r3, [pc, #20]	; (84b54 <udc_req_std_ep_set_feature+0x3c>)
   84b3e:	889b      	ldrh	r3, [r3, #4]
   84b40:	b2db      	uxtb	r3, r3
   84b42:	4618      	mov	r0, r3
   84b44:	4b05      	ldr	r3, [pc, #20]	; (84b5c <udc_req_std_ep_set_feature+0x44>)
   84b46:	4798      	blx	r3
   84b48:	4603      	mov	r3, r0
   84b4a:	e000      	b.n	84b4e <udc_req_std_ep_set_feature+0x36>
	}
	return false;
   84b4c:	2300      	movs	r3, #0
}
   84b4e:	4618      	mov	r0, r3
   84b50:	bd80      	pop	{r7, pc}
   84b52:	bf00      	nop
   84b54:	20000d58 	.word	0x20000d58
   84b58:	000827d9 	.word	0x000827d9
   84b5c:	00082489 	.word	0x00082489

00084b60 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   84b60:	b580      	push	{r7, lr}
   84b62:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   84b64:	4b05      	ldr	r3, [pc, #20]	; (84b7c <udc_valid_address+0x1c>)
   84b66:	885b      	ldrh	r3, [r3, #2]
   84b68:	b2db      	uxtb	r3, r3
   84b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   84b6e:	b2db      	uxtb	r3, r3
   84b70:	4618      	mov	r0, r3
   84b72:	4b03      	ldr	r3, [pc, #12]	; (84b80 <udc_valid_address+0x20>)
   84b74:	4798      	blx	r3
}
   84b76:	bf00      	nop
   84b78:	bd80      	pop	{r7, pc}
   84b7a:	bf00      	nop
   84b7c:	20000d58 	.word	0x20000d58
   84b80:	00081f65 	.word	0x00081f65

00084b84 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
   84b84:	b480      	push	{r7}
   84b86:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84b88:	4b06      	ldr	r3, [pc, #24]	; (84ba4 <udc_req_std_dev_set_address+0x20>)
   84b8a:	88db      	ldrh	r3, [r3, #6]
   84b8c:	2b00      	cmp	r3, #0
   84b8e:	d001      	beq.n	84b94 <udc_req_std_dev_set_address+0x10>
		return false;
   84b90:	2300      	movs	r3, #0
   84b92:	e003      	b.n	84b9c <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   84b94:	4b03      	ldr	r3, [pc, #12]	; (84ba4 <udc_req_std_dev_set_address+0x20>)
   84b96:	4a04      	ldr	r2, [pc, #16]	; (84ba8 <udc_req_std_dev_set_address+0x24>)
   84b98:	611a      	str	r2, [r3, #16]
	return true;
   84b9a:	2301      	movs	r3, #1
}
   84b9c:	4618      	mov	r0, r3
   84b9e:	46bd      	mov	sp, r7
   84ba0:	bc80      	pop	{r7}
   84ba2:	4770      	bx	lr
   84ba4:	20000d58 	.word	0x20000d58
   84ba8:	00084b61 	.word	0x00084b61

00084bac <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
   84bac:	b580      	push	{r7, lr}
   84bae:	b084      	sub	sp, #16
   84bb0:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
   84bb2:	2300      	movs	r3, #0
   84bb4:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   84bb6:	4b29      	ldr	r3, [pc, #164]	; (84c5c <udc_req_std_dev_get_str_desc+0xb0>)
   84bb8:	885b      	ldrh	r3, [r3, #2]
   84bba:	b2db      	uxtb	r3, r3
   84bbc:	2b03      	cmp	r3, #3
   84bbe:	d820      	bhi.n	84c02 <udc_req_std_dev_get_str_desc+0x56>
   84bc0:	a201      	add	r2, pc, #4	; (adr r2, 84bc8 <udc_req_std_dev_get_str_desc+0x1c>)
   84bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84bc6:	bf00      	nop
   84bc8:	00084bd9 	.word	0x00084bd9
   84bcc:	00084be3 	.word	0x00084be3
   84bd0:	00084bed 	.word	0x00084bed
   84bd4:	00084bf7 	.word	0x00084bf7
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   84bd8:	2104      	movs	r1, #4
   84bda:	4821      	ldr	r0, [pc, #132]	; (84c60 <udc_req_std_dev_get_str_desc+0xb4>)
   84bdc:	4b21      	ldr	r3, [pc, #132]	; (84c64 <udc_req_std_dev_get_str_desc+0xb8>)
   84bde:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
   84be0:	e011      	b.n	84c06 <udc_req_std_dev_get_str_desc+0x5a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   84be2:	2315      	movs	r3, #21
   84be4:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
   84be6:	4b20      	ldr	r3, [pc, #128]	; (84c68 <udc_req_std_dev_get_str_desc+0xbc>)
   84be8:	60bb      	str	r3, [r7, #8]
		break;
   84bea:	e00c      	b.n	84c06 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   84bec:	2313      	movs	r3, #19
   84bee:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
   84bf0:	4b1e      	ldr	r3, [pc, #120]	; (84c6c <udc_req_std_dev_get_str_desc+0xc0>)
   84bf2:	60bb      	str	r3, [r7, #8]
		break;
   84bf4:	e007      	b.n	84c06 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   84bf6:	2320      	movs	r3, #32
   84bf8:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
   84bfa:	4b1d      	ldr	r3, [pc, #116]	; (84c70 <udc_req_std_dev_get_str_desc+0xc4>)
   84bfc:	4798      	blx	r3
   84bfe:	60b8      	str	r0, [r7, #8]
		break;
   84c00:	e001      	b.n	84c06 <udc_req_std_dev_get_str_desc+0x5a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
   84c02:	2300      	movs	r3, #0
   84c04:	e026      	b.n	84c54 <udc_req_std_dev_get_str_desc+0xa8>
	}

	if (str_length) {
   84c06:	79fb      	ldrb	r3, [r7, #7]
   84c08:	2b00      	cmp	r3, #0
   84c0a:	d022      	beq.n	84c52 <udc_req_std_dev_get_str_desc+0xa6>
		for(i = 0; i < str_length; i++) {
   84c0c:	2300      	movs	r3, #0
   84c0e:	73fb      	strb	r3, [r7, #15]
   84c10:	e00d      	b.n	84c2e <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   84c12:	7bfb      	ldrb	r3, [r7, #15]
   84c14:	7bfa      	ldrb	r2, [r7, #15]
   84c16:	68b9      	ldr	r1, [r7, #8]
   84c18:	440a      	add	r2, r1
   84c1a:	7812      	ldrb	r2, [r2, #0]
   84c1c:	b291      	uxth	r1, r2
   84c1e:	4a15      	ldr	r2, [pc, #84]	; (84c74 <udc_req_std_dev_get_str_desc+0xc8>)
   84c20:	005b      	lsls	r3, r3, #1
   84c22:	4413      	add	r3, r2
   84c24:	460a      	mov	r2, r1
   84c26:	805a      	strh	r2, [r3, #2]
		for(i = 0; i < str_length; i++) {
   84c28:	7bfb      	ldrb	r3, [r7, #15]
   84c2a:	3301      	adds	r3, #1
   84c2c:	73fb      	strb	r3, [r7, #15]
   84c2e:	7bfa      	ldrb	r2, [r7, #15]
   84c30:	79fb      	ldrb	r3, [r7, #7]
   84c32:	429a      	cmp	r2, r3
   84c34:	d3ed      	bcc.n	84c12 <udc_req_std_dev_get_str_desc+0x66>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   84c36:	79fb      	ldrb	r3, [r7, #7]
   84c38:	3301      	adds	r3, #1
   84c3a:	b2db      	uxtb	r3, r3
   84c3c:	005b      	lsls	r3, r3, #1
   84c3e:	b2da      	uxtb	r2, r3
   84c40:	4b0c      	ldr	r3, [pc, #48]	; (84c74 <udc_req_std_dev_get_str_desc+0xc8>)
   84c42:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
   84c44:	4b0b      	ldr	r3, [pc, #44]	; (84c74 <udc_req_std_dev_get_str_desc+0xc8>)
   84c46:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
   84c48:	b29b      	uxth	r3, r3
   84c4a:	4619      	mov	r1, r3
   84c4c:	4809      	ldr	r0, [pc, #36]	; (84c74 <udc_req_std_dev_get_str_desc+0xc8>)
   84c4e:	4b05      	ldr	r3, [pc, #20]	; (84c64 <udc_req_std_dev_get_str_desc+0xb8>)
   84c50:	4798      	blx	r3
	}

	return true;
   84c52:	2301      	movs	r3, #1
}
   84c54:	4618      	mov	r0, r3
   84c56:	3710      	adds	r7, #16
   84c58:	46bd      	mov	sp, r7
   84c5a:	bd80      	pop	{r7, pc}
   84c5c:	20000d58 	.word	0x20000d58
   84c60:	200002a8 	.word	0x200002a8
   84c64:	00081fc5 	.word	0x00081fc5
   84c68:	200002ac 	.word	0x200002ac
   84c6c:	200002c4 	.word	0x200002c4
   84c70:	00084639 	.word	0x00084639
   84c74:	200002d8 	.word	0x200002d8

00084c78 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
   84c78:	b580      	push	{r7, lr}
   84c7a:	b082      	sub	sp, #8
   84c7c:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   84c7e:	4b80      	ldr	r3, [pc, #512]	; (84e80 <udc_req_std_dev_get_descriptor+0x208>)
   84c80:	885b      	ldrh	r3, [r3, #2]
   84c82:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   84c84:	4b7e      	ldr	r3, [pc, #504]	; (84e80 <udc_req_std_dev_get_descriptor+0x208>)
   84c86:	885b      	ldrh	r3, [r3, #2]
   84c88:	0a1b      	lsrs	r3, r3, #8
   84c8a:	b29b      	uxth	r3, r3
   84c8c:	b2db      	uxtb	r3, r3
   84c8e:	3b01      	subs	r3, #1
   84c90:	2b0e      	cmp	r3, #14
   84c92:	f200 80e2 	bhi.w	84e5a <udc_req_std_dev_get_descriptor+0x1e2>
   84c96:	a201      	add	r2, pc, #4	; (adr r2, 84c9c <udc_req_std_dev_get_descriptor+0x24>)
   84c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84c9c:	00084cd9 	.word	0x00084cd9
   84ca0:	00084d15 	.word	0x00084d15
   84ca4:	00084e47 	.word	0x00084e47
   84ca8:	00084e5b 	.word	0x00084e5b
   84cac:	00084e5b 	.word	0x00084e5b
   84cb0:	00084d8f 	.word	0x00084d8f
   84cb4:	00084da5 	.word	0x00084da5
   84cb8:	00084e5b 	.word	0x00084e5b
   84cbc:	00084e5b 	.word	0x00084e5b
   84cc0:	00084e5b 	.word	0x00084e5b
   84cc4:	00084e5b 	.word	0x00084e5b
   84cc8:	00084e5b 	.word	0x00084e5b
   84ccc:	00084e5b 	.word	0x00084e5b
   84cd0:	00084e5b 	.word	0x00084e5b
   84cd4:	00084e25 	.word	0x00084e25
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   84cd8:	4b6a      	ldr	r3, [pc, #424]	; (84e84 <udc_req_std_dev_get_descriptor+0x20c>)
   84cda:	4798      	blx	r3
   84cdc:	4603      	mov	r3, r0
   84cde:	f083 0301 	eor.w	r3, r3, #1
   84ce2:	b2db      	uxtb	r3, r3
   84ce4:	2b00      	cmp	r3, #0
   84ce6:	d00a      	beq.n	84cfe <udc_req_std_dev_get_descriptor+0x86>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
   84ce8:	4b67      	ldr	r3, [pc, #412]	; (84e88 <udc_req_std_dev_get_descriptor+0x210>)
   84cea:	689a      	ldr	r2, [r3, #8]
				udc_config.confdev_hs->bLength);
   84cec:	4b66      	ldr	r3, [pc, #408]	; (84e88 <udc_req_std_dev_get_descriptor+0x210>)
   84cee:	689b      	ldr	r3, [r3, #8]
   84cf0:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   84cf2:	b29b      	uxth	r3, r3
   84cf4:	4619      	mov	r1, r3
   84cf6:	4610      	mov	r0, r2
   84cf8:	4b64      	ldr	r3, [pc, #400]	; (84e8c <udc_req_std_dev_get_descriptor+0x214>)
   84cfa:	4798      	blx	r3
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
   84cfc:	e0b0      	b.n	84e60 <udc_req_std_dev_get_descriptor+0x1e8>
				(uint8_t *) udc_config.confdev_lsfs,
   84cfe:	4b62      	ldr	r3, [pc, #392]	; (84e88 <udc_req_std_dev_get_descriptor+0x210>)
   84d00:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
   84d02:	4b61      	ldr	r3, [pc, #388]	; (84e88 <udc_req_std_dev_get_descriptor+0x210>)
   84d04:	681b      	ldr	r3, [r3, #0]
   84d06:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   84d08:	b29b      	uxth	r3, r3
   84d0a:	4619      	mov	r1, r3
   84d0c:	4610      	mov	r0, r2
   84d0e:	4b5f      	ldr	r3, [pc, #380]	; (84e8c <udc_req_std_dev_get_descriptor+0x214>)
   84d10:	4798      	blx	r3
		break;
   84d12:	e0a5      	b.n	84e60 <udc_req_std_dev_get_descriptor+0x1e8>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   84d14:	4b5b      	ldr	r3, [pc, #364]	; (84e84 <udc_req_std_dev_get_descriptor+0x20c>)
   84d16:	4798      	blx	r3
   84d18:	4603      	mov	r3, r0
   84d1a:	2b00      	cmp	r3, #0
   84d1c:	d019      	beq.n	84d52 <udc_req_std_dev_get_descriptor+0xda>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   84d1e:	4b5a      	ldr	r3, [pc, #360]	; (84e88 <udc_req_std_dev_get_descriptor+0x210>)
   84d20:	689b      	ldr	r3, [r3, #8]
   84d22:	7c5b      	ldrb	r3, [r3, #17]
   84d24:	79fa      	ldrb	r2, [r7, #7]
   84d26:	429a      	cmp	r2, r3
   84d28:	d301      	bcc.n	84d2e <udc_req_std_dev_get_descriptor+0xb6>
					bNumConfigurations) {
				return false;
   84d2a:	2300      	movs	r3, #0
   84d2c:	e0a3      	b.n	84e76 <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   84d2e:	4b56      	ldr	r3, [pc, #344]	; (84e88 <udc_req_std_dev_get_descriptor+0x210>)
   84d30:	691a      	ldr	r2, [r3, #16]
   84d32:	79fb      	ldrb	r3, [r7, #7]
   84d34:	00db      	lsls	r3, r3, #3
   84d36:	4413      	add	r3, r2
   84d38:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   84d3a:	4b53      	ldr	r3, [pc, #332]	; (84e88 <udc_req_std_dev_get_descriptor+0x210>)
   84d3c:	691a      	ldr	r2, [r3, #16]
   84d3e:	79fb      	ldrb	r3, [r7, #7]
   84d40:	00db      	lsls	r3, r3, #3
   84d42:	4413      	add	r3, r2
   84d44:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   84d46:	885b      	ldrh	r3, [r3, #2]
   84d48:	b29b      	uxth	r3, r3
   84d4a:	4619      	mov	r1, r3
   84d4c:	4b4f      	ldr	r3, [pc, #316]	; (84e8c <udc_req_std_dev_get_descriptor+0x214>)
   84d4e:	4798      	blx	r3
   84d50:	e018      	b.n	84d84 <udc_req_std_dev_get_descriptor+0x10c>
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   84d52:	4b4d      	ldr	r3, [pc, #308]	; (84e88 <udc_req_std_dev_get_descriptor+0x210>)
   84d54:	681b      	ldr	r3, [r3, #0]
   84d56:	7c5b      	ldrb	r3, [r3, #17]
   84d58:	79fa      	ldrb	r2, [r7, #7]
   84d5a:	429a      	cmp	r2, r3
   84d5c:	d301      	bcc.n	84d62 <udc_req_std_dev_get_descriptor+0xea>
					bNumConfigurations) {
				return false;
   84d5e:	2300      	movs	r3, #0
   84d60:	e089      	b.n	84e76 <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   84d62:	4b49      	ldr	r3, [pc, #292]	; (84e88 <udc_req_std_dev_get_descriptor+0x210>)
   84d64:	685a      	ldr	r2, [r3, #4]
   84d66:	79fb      	ldrb	r3, [r7, #7]
   84d68:	00db      	lsls	r3, r3, #3
   84d6a:	4413      	add	r3, r2
   84d6c:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   84d6e:	4b46      	ldr	r3, [pc, #280]	; (84e88 <udc_req_std_dev_get_descriptor+0x210>)
   84d70:	685a      	ldr	r2, [r3, #4]
   84d72:	79fb      	ldrb	r3, [r7, #7]
   84d74:	00db      	lsls	r3, r3, #3
   84d76:	4413      	add	r3, r2
   84d78:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   84d7a:	885b      	ldrh	r3, [r3, #2]
   84d7c:	b29b      	uxth	r3, r3
   84d7e:	4619      	mov	r1, r3
   84d80:	4b42      	ldr	r3, [pc, #264]	; (84e8c <udc_req_std_dev_get_descriptor+0x214>)
   84d82:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   84d84:	4b3e      	ldr	r3, [pc, #248]	; (84e80 <udc_req_std_dev_get_descriptor+0x208>)
   84d86:	689b      	ldr	r3, [r3, #8]
   84d88:	2202      	movs	r2, #2
   84d8a:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
   84d8c:	e068      	b.n	84e60 <udc_req_std_dev_get_descriptor+0x1e8>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   84d8e:	4b3e      	ldr	r3, [pc, #248]	; (84e88 <udc_req_std_dev_get_descriptor+0x210>)
   84d90:	68da      	ldr	r2, [r3, #12]
				udc_config.qualifier->bLength);
   84d92:	4b3d      	ldr	r3, [pc, #244]	; (84e88 <udc_req_std_dev_get_descriptor+0x210>)
   84d94:	68db      	ldr	r3, [r3, #12]
   84d96:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   84d98:	b29b      	uxth	r3, r3
   84d9a:	4619      	mov	r1, r3
   84d9c:	4610      	mov	r0, r2
   84d9e:	4b3b      	ldr	r3, [pc, #236]	; (84e8c <udc_req_std_dev_get_descriptor+0x214>)
   84da0:	4798      	blx	r3
		break;
   84da2:	e05d      	b.n	84e60 <udc_req_std_dev_get_descriptor+0x1e8>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   84da4:	4b37      	ldr	r3, [pc, #220]	; (84e84 <udc_req_std_dev_get_descriptor+0x20c>)
   84da6:	4798      	blx	r3
   84da8:	4603      	mov	r3, r0
   84daa:	f083 0301 	eor.w	r3, r3, #1
   84dae:	b2db      	uxtb	r3, r3
   84db0:	2b00      	cmp	r3, #0
   84db2:	d019      	beq.n	84de8 <udc_req_std_dev_get_descriptor+0x170>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   84db4:	4b34      	ldr	r3, [pc, #208]	; (84e88 <udc_req_std_dev_get_descriptor+0x210>)
   84db6:	689b      	ldr	r3, [r3, #8]
   84db8:	7c5b      	ldrb	r3, [r3, #17]
   84dba:	79fa      	ldrb	r2, [r7, #7]
   84dbc:	429a      	cmp	r2, r3
   84dbe:	d301      	bcc.n	84dc4 <udc_req_std_dev_get_descriptor+0x14c>
					bNumConfigurations) {
				return false;
   84dc0:	2300      	movs	r3, #0
   84dc2:	e058      	b.n	84e76 <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   84dc4:	4b30      	ldr	r3, [pc, #192]	; (84e88 <udc_req_std_dev_get_descriptor+0x210>)
   84dc6:	691a      	ldr	r2, [r3, #16]
   84dc8:	79fb      	ldrb	r3, [r7, #7]
   84dca:	00db      	lsls	r3, r3, #3
   84dcc:	4413      	add	r3, r2
   84dce:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   84dd0:	4b2d      	ldr	r3, [pc, #180]	; (84e88 <udc_req_std_dev_get_descriptor+0x210>)
   84dd2:	691a      	ldr	r2, [r3, #16]
   84dd4:	79fb      	ldrb	r3, [r7, #7]
   84dd6:	00db      	lsls	r3, r3, #3
   84dd8:	4413      	add	r3, r2
   84dda:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   84ddc:	885b      	ldrh	r3, [r3, #2]
   84dde:	b29b      	uxth	r3, r3
   84de0:	4619      	mov	r1, r3
   84de2:	4b2a      	ldr	r3, [pc, #168]	; (84e8c <udc_req_std_dev_get_descriptor+0x214>)
   84de4:	4798      	blx	r3
   84de6:	e018      	b.n	84e1a <udc_req_std_dev_get_descriptor+0x1a2>
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   84de8:	4b27      	ldr	r3, [pc, #156]	; (84e88 <udc_req_std_dev_get_descriptor+0x210>)
   84dea:	681b      	ldr	r3, [r3, #0]
   84dec:	7c5b      	ldrb	r3, [r3, #17]
   84dee:	79fa      	ldrb	r2, [r7, #7]
   84df0:	429a      	cmp	r2, r3
   84df2:	d301      	bcc.n	84df8 <udc_req_std_dev_get_descriptor+0x180>
					bNumConfigurations) {
				return false;
   84df4:	2300      	movs	r3, #0
   84df6:	e03e      	b.n	84e76 <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   84df8:	4b23      	ldr	r3, [pc, #140]	; (84e88 <udc_req_std_dev_get_descriptor+0x210>)
   84dfa:	685a      	ldr	r2, [r3, #4]
   84dfc:	79fb      	ldrb	r3, [r7, #7]
   84dfe:	00db      	lsls	r3, r3, #3
   84e00:	4413      	add	r3, r2
   84e02:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   84e04:	4b20      	ldr	r3, [pc, #128]	; (84e88 <udc_req_std_dev_get_descriptor+0x210>)
   84e06:	685a      	ldr	r2, [r3, #4]
   84e08:	79fb      	ldrb	r3, [r7, #7]
   84e0a:	00db      	lsls	r3, r3, #3
   84e0c:	4413      	add	r3, r2
   84e0e:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   84e10:	885b      	ldrh	r3, [r3, #2]
   84e12:	b29b      	uxth	r3, r3
   84e14:	4619      	mov	r1, r3
   84e16:	4b1d      	ldr	r3, [pc, #116]	; (84e8c <udc_req_std_dev_get_descriptor+0x214>)
   84e18:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   84e1a:	4b19      	ldr	r3, [pc, #100]	; (84e80 <udc_req_std_dev_get_descriptor+0x208>)
   84e1c:	689b      	ldr	r3, [r3, #8]
   84e1e:	2207      	movs	r2, #7
   84e20:	705a      	strb	r2, [r3, #1]
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
   84e22:	e01d      	b.n	84e60 <udc_req_std_dev_get_descriptor+0x1e8>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
   84e24:	4b18      	ldr	r3, [pc, #96]	; (84e88 <udc_req_std_dev_get_descriptor+0x210>)
   84e26:	695b      	ldr	r3, [r3, #20]
   84e28:	2b00      	cmp	r3, #0
   84e2a:	d101      	bne.n	84e30 <udc_req_std_dev_get_descriptor+0x1b8>
			return false;
   84e2c:	2300      	movs	r3, #0
   84e2e:	e022      	b.n	84e76 <udc_req_std_dev_get_descriptor+0x1fe>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   84e30:	4b15      	ldr	r3, [pc, #84]	; (84e88 <udc_req_std_dev_get_descriptor+0x210>)
   84e32:	695a      	ldr	r2, [r3, #20]
				udc_config.conf_bos->wTotalLength);
   84e34:	4b14      	ldr	r3, [pc, #80]	; (84e88 <udc_req_std_dev_get_descriptor+0x210>)
   84e36:	695b      	ldr	r3, [r3, #20]
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   84e38:	885b      	ldrh	r3, [r3, #2]
   84e3a:	b29b      	uxth	r3, r3
   84e3c:	4619      	mov	r1, r3
   84e3e:	4610      	mov	r0, r2
   84e40:	4b12      	ldr	r3, [pc, #72]	; (84e8c <udc_req_std_dev_get_descriptor+0x214>)
   84e42:	4798      	blx	r3
		break;
   84e44:	e00c      	b.n	84e60 <udc_req_std_dev_get_descriptor+0x1e8>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
   84e46:	4b12      	ldr	r3, [pc, #72]	; (84e90 <udc_req_std_dev_get_descriptor+0x218>)
   84e48:	4798      	blx	r3
   84e4a:	4603      	mov	r3, r0
   84e4c:	f083 0301 	eor.w	r3, r3, #1
   84e50:	b2db      	uxtb	r3, r3
   84e52:	2b00      	cmp	r3, #0
   84e54:	d003      	beq.n	84e5e <udc_req_std_dev_get_descriptor+0x1e6>
			return false;
   84e56:	2300      	movs	r3, #0
   84e58:	e00d      	b.n	84e76 <udc_req_std_dev_get_descriptor+0x1fe>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   84e5a:	2300      	movs	r3, #0
   84e5c:	e00b      	b.n	84e76 <udc_req_std_dev_get_descriptor+0x1fe>
		break;
   84e5e:	bf00      	nop
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   84e60:	4b07      	ldr	r3, [pc, #28]	; (84e80 <udc_req_std_dev_get_descriptor+0x208>)
   84e62:	88da      	ldrh	r2, [r3, #6]
   84e64:	4b06      	ldr	r3, [pc, #24]	; (84e80 <udc_req_std_dev_get_descriptor+0x208>)
   84e66:	899b      	ldrh	r3, [r3, #12]
   84e68:	429a      	cmp	r2, r3
   84e6a:	d203      	bcs.n	84e74 <udc_req_std_dev_get_descriptor+0x1fc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   84e6c:	4b04      	ldr	r3, [pc, #16]	; (84e80 <udc_req_std_dev_get_descriptor+0x208>)
   84e6e:	88da      	ldrh	r2, [r3, #6]
   84e70:	4b03      	ldr	r3, [pc, #12]	; (84e80 <udc_req_std_dev_get_descriptor+0x208>)
   84e72:	819a      	strh	r2, [r3, #12]
	}
	return true;
   84e74:	2301      	movs	r3, #1
}
   84e76:	4618      	mov	r0, r3
   84e78:	3708      	adds	r7, #8
   84e7a:	46bd      	mov	sp, r7
   84e7c:	bd80      	pop	{r7, pc}
   84e7e:	bf00      	nop
   84e80:	20000d58 	.word	0x20000d58
   84e84:	00081f41 	.word	0x00081f41
   84e88:	20000390 	.word	0x20000390
   84e8c:	00081fc5 	.word	0x00081fc5
   84e90:	00084bad 	.word	0x00084bad

00084e94 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
   84e94:	b580      	push	{r7, lr}
   84e96:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
   84e98:	4b06      	ldr	r3, [pc, #24]	; (84eb4 <udc_req_std_dev_get_configuration+0x20>)
   84e9a:	88db      	ldrh	r3, [r3, #6]
   84e9c:	2b01      	cmp	r3, #1
   84e9e:	d001      	beq.n	84ea4 <udc_req_std_dev_get_configuration+0x10>
		return false;
   84ea0:	2300      	movs	r3, #0
   84ea2:	e004      	b.n	84eae <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   84ea4:	2101      	movs	r1, #1
   84ea6:	4804      	ldr	r0, [pc, #16]	; (84eb8 <udc_req_std_dev_get_configuration+0x24>)
   84ea8:	4b04      	ldr	r3, [pc, #16]	; (84ebc <udc_req_std_dev_get_configuration+0x28>)
   84eaa:	4798      	blx	r3
	return true;
   84eac:	2301      	movs	r3, #1
}
   84eae:	4618      	mov	r0, r3
   84eb0:	bd80      	pop	{r7, pc}
   84eb2:	bf00      	nop
   84eb4:	20000d58 	.word	0x20000d58
   84eb8:	20000d3c 	.word	0x20000d3c
   84ebc:	00081fc5 	.word	0x00081fc5

00084ec0 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
   84ec0:	b580      	push	{r7, lr}
   84ec2:	b082      	sub	sp, #8
   84ec4:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   84ec6:	4b37      	ldr	r3, [pc, #220]	; (84fa4 <udc_req_std_dev_set_configuration+0xe4>)
   84ec8:	88db      	ldrh	r3, [r3, #6]
   84eca:	2b00      	cmp	r3, #0
   84ecc:	d001      	beq.n	84ed2 <udc_req_std_dev_set_configuration+0x12>
		return false;
   84ece:	2300      	movs	r3, #0
   84ed0:	e063      	b.n	84f9a <udc_req_std_dev_set_configuration+0xda>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   84ed2:	4b35      	ldr	r3, [pc, #212]	; (84fa8 <udc_req_std_dev_set_configuration+0xe8>)
   84ed4:	4798      	blx	r3
   84ed6:	4603      	mov	r3, r0
   84ed8:	2b00      	cmp	r3, #0
   84eda:	d101      	bne.n	84ee0 <udc_req_std_dev_set_configuration+0x20>
		return false;
   84edc:	2300      	movs	r3, #0
   84ede:	e05c      	b.n	84f9a <udc_req_std_dev_set_configuration+0xda>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   84ee0:	4b32      	ldr	r3, [pc, #200]	; (84fac <udc_req_std_dev_set_configuration+0xec>)
   84ee2:	4798      	blx	r3
   84ee4:	4603      	mov	r3, r0
   84ee6:	2b00      	cmp	r3, #0
   84ee8:	d009      	beq.n	84efe <udc_req_std_dev_set_configuration+0x3e>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84eea:	4b2e      	ldr	r3, [pc, #184]	; (84fa4 <udc_req_std_dev_set_configuration+0xe4>)
   84eec:	885b      	ldrh	r3, [r3, #2]
   84eee:	b2db      	uxtb	r3, r3
				udc_config.confdev_hs->bNumConfigurations) {
   84ef0:	4a2f      	ldr	r2, [pc, #188]	; (84fb0 <udc_req_std_dev_set_configuration+0xf0>)
   84ef2:	6892      	ldr	r2, [r2, #8]
   84ef4:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84ef6:	4293      	cmp	r3, r2
   84ef8:	dd0b      	ble.n	84f12 <udc_req_std_dev_set_configuration+0x52>
			return false;
   84efa:	2300      	movs	r3, #0
   84efc:	e04d      	b.n	84f9a <udc_req_std_dev_set_configuration+0xda>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84efe:	4b29      	ldr	r3, [pc, #164]	; (84fa4 <udc_req_std_dev_set_configuration+0xe4>)
   84f00:	885b      	ldrh	r3, [r3, #2]
   84f02:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
   84f04:	4a2a      	ldr	r2, [pc, #168]	; (84fb0 <udc_req_std_dev_set_configuration+0xf0>)
   84f06:	6812      	ldr	r2, [r2, #0]
   84f08:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84f0a:	4293      	cmp	r3, r2
   84f0c:	dd01      	ble.n	84f12 <udc_req_std_dev_set_configuration+0x52>
			return false;
   84f0e:	2300      	movs	r3, #0
   84f10:	e043      	b.n	84f9a <udc_req_std_dev_set_configuration+0xda>
		}
	}

	// Reset current configuration
	udc_reset();
   84f12:	4b28      	ldr	r3, [pc, #160]	; (84fb4 <udc_req_std_dev_set_configuration+0xf4>)
   84f14:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   84f16:	4b23      	ldr	r3, [pc, #140]	; (84fa4 <udc_req_std_dev_set_configuration+0xe4>)
   84f18:	885b      	ldrh	r3, [r3, #2]
   84f1a:	b2da      	uxtb	r2, r3
   84f1c:	4b26      	ldr	r3, [pc, #152]	; (84fb8 <udc_req_std_dev_set_configuration+0xf8>)
   84f1e:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
   84f20:	4b25      	ldr	r3, [pc, #148]	; (84fb8 <udc_req_std_dev_set_configuration+0xf8>)
   84f22:	781b      	ldrb	r3, [r3, #0]
   84f24:	2b00      	cmp	r3, #0
   84f26:	d101      	bne.n	84f2c <udc_req_std_dev_set_configuration+0x6c>
		return true; // Default empty configuration requested
   84f28:	2301      	movs	r3, #1
   84f2a:	e036      	b.n	84f9a <udc_req_std_dev_set_configuration+0xda>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   84f2c:	4b1f      	ldr	r3, [pc, #124]	; (84fac <udc_req_std_dev_set_configuration+0xec>)
   84f2e:	4798      	blx	r3
   84f30:	4603      	mov	r3, r0
   84f32:	2b00      	cmp	r3, #0
   84f34:	d00b      	beq.n	84f4e <udc_req_std_dev_set_configuration+0x8e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   84f36:	4b1e      	ldr	r3, [pc, #120]	; (84fb0 <udc_req_std_dev_set_configuration+0xf0>)
   84f38:	691a      	ldr	r2, [r3, #16]
   84f3a:	4b1f      	ldr	r3, [pc, #124]	; (84fb8 <udc_req_std_dev_set_configuration+0xf8>)
   84f3c:	781b      	ldrb	r3, [r3, #0]
   84f3e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   84f42:	3b01      	subs	r3, #1
   84f44:	00db      	lsls	r3, r3, #3
   84f46:	4413      	add	r3, r2
   84f48:	4a1c      	ldr	r2, [pc, #112]	; (84fbc <udc_req_std_dev_set_configuration+0xfc>)
   84f4a:	6013      	str	r3, [r2, #0]
   84f4c:	e00a      	b.n	84f64 <udc_req_std_dev_set_configuration+0xa4>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   84f4e:	4b18      	ldr	r3, [pc, #96]	; (84fb0 <udc_req_std_dev_set_configuration+0xf0>)
   84f50:	685a      	ldr	r2, [r3, #4]
   84f52:	4b19      	ldr	r3, [pc, #100]	; (84fb8 <udc_req_std_dev_set_configuration+0xf8>)
   84f54:	781b      	ldrb	r3, [r3, #0]
   84f56:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   84f5a:	3b01      	subs	r3, #1
   84f5c:	00db      	lsls	r3, r3, #3
   84f5e:	4413      	add	r3, r2
   84f60:	4a16      	ldr	r2, [pc, #88]	; (84fbc <udc_req_std_dev_set_configuration+0xfc>)
   84f62:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84f64:	2300      	movs	r3, #0
   84f66:	71fb      	strb	r3, [r7, #7]
   84f68:	e00f      	b.n	84f8a <udc_req_std_dev_set_configuration+0xca>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   84f6a:	79fb      	ldrb	r3, [r7, #7]
   84f6c:	2100      	movs	r1, #0
   84f6e:	4618      	mov	r0, r3
   84f70:	4b13      	ldr	r3, [pc, #76]	; (84fc0 <udc_req_std_dev_set_configuration+0x100>)
   84f72:	4798      	blx	r3
   84f74:	4603      	mov	r3, r0
   84f76:	f083 0301 	eor.w	r3, r3, #1
   84f7a:	b2db      	uxtb	r3, r3
   84f7c:	2b00      	cmp	r3, #0
   84f7e:	d001      	beq.n	84f84 <udc_req_std_dev_set_configuration+0xc4>
			return false;
   84f80:	2300      	movs	r3, #0
   84f82:	e00a      	b.n	84f9a <udc_req_std_dev_set_configuration+0xda>
			iface_num++) {
   84f84:	79fb      	ldrb	r3, [r7, #7]
   84f86:	3301      	adds	r3, #1
   84f88:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84f8a:	4b0c      	ldr	r3, [pc, #48]	; (84fbc <udc_req_std_dev_set_configuration+0xfc>)
   84f8c:	681b      	ldr	r3, [r3, #0]
   84f8e:	681b      	ldr	r3, [r3, #0]
   84f90:	791b      	ldrb	r3, [r3, #4]
   84f92:	79fa      	ldrb	r2, [r7, #7]
   84f94:	429a      	cmp	r2, r3
   84f96:	d3e8      	bcc.n	84f6a <udc_req_std_dev_set_configuration+0xaa>
		}
	}
	return true;
   84f98:	2301      	movs	r3, #1
}
   84f9a:	4618      	mov	r0, r3
   84f9c:	3708      	adds	r7, #8
   84f9e:	46bd      	mov	sp, r7
   84fa0:	bd80      	pop	{r7, pc}
   84fa2:	bf00      	nop
   84fa4:	20000d58 	.word	0x20000d58
   84fa8:	00081fa9 	.word	0x00081fa9
   84fac:	00081f41 	.word	0x00081f41
   84fb0:	20000390 	.word	0x20000390
   84fb4:	000848c5 	.word	0x000848c5
   84fb8:	20000d3c 	.word	0x20000d3c
   84fbc:	20000d40 	.word	0x20000d40
   84fc0:	0008481d 	.word	0x0008481d

00084fc4 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
   84fc4:	b580      	push	{r7, lr}
   84fc6:	b082      	sub	sp, #8
   84fc8:	af00      	add	r7, sp, #0
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   84fca:	4b1e      	ldr	r3, [pc, #120]	; (85044 <udc_req_std_iface_get_setting+0x80>)
   84fcc:	88db      	ldrh	r3, [r3, #6]
   84fce:	2b01      	cmp	r3, #1
   84fd0:	d001      	beq.n	84fd6 <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
   84fd2:	2300      	movs	r3, #0
   84fd4:	e032      	b.n	8503c <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
   84fd6:	4b1c      	ldr	r3, [pc, #112]	; (85048 <udc_req_std_iface_get_setting+0x84>)
   84fd8:	781b      	ldrb	r3, [r3, #0]
   84fda:	2b00      	cmp	r3, #0
   84fdc:	d101      	bne.n	84fe2 <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
   84fde:	2300      	movs	r3, #0
   84fe0:	e02c      	b.n	8503c <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84fe2:	4b18      	ldr	r3, [pc, #96]	; (85044 <udc_req_std_iface_get_setting+0x80>)
   84fe4:	889b      	ldrh	r3, [r3, #4]
   84fe6:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   84fe8:	4b18      	ldr	r3, [pc, #96]	; (8504c <udc_req_std_iface_get_setting+0x88>)
   84fea:	681b      	ldr	r3, [r3, #0]
   84fec:	681b      	ldr	r3, [r3, #0]
   84fee:	791b      	ldrb	r3, [r3, #4]
   84ff0:	79fa      	ldrb	r2, [r7, #7]
   84ff2:	429a      	cmp	r2, r3
   84ff4:	d301      	bcc.n	84ffa <udc_req_std_iface_get_setting+0x36>
		return false;
   84ff6:	2300      	movs	r3, #0
   84ff8:	e020      	b.n	8503c <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   84ffa:	79fb      	ldrb	r3, [r7, #7]
   84ffc:	2100      	movs	r1, #0
   84ffe:	4618      	mov	r0, r3
   85000:	4b13      	ldr	r3, [pc, #76]	; (85050 <udc_req_std_iface_get_setting+0x8c>)
   85002:	4798      	blx	r3
   85004:	4603      	mov	r3, r0
   85006:	f083 0301 	eor.w	r3, r3, #1
   8500a:	b2db      	uxtb	r3, r3
   8500c:	2b00      	cmp	r3, #0
   8500e:	d001      	beq.n	85014 <udc_req_std_iface_get_setting+0x50>
		return false;
   85010:	2300      	movs	r3, #0
   85012:	e013      	b.n	8503c <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   85014:	4b0d      	ldr	r3, [pc, #52]	; (8504c <udc_req_std_iface_get_setting+0x88>)
   85016:	681b      	ldr	r3, [r3, #0]
   85018:	685a      	ldr	r2, [r3, #4]
   8501a:	79fb      	ldrb	r3, [r7, #7]
   8501c:	009b      	lsls	r3, r3, #2
   8501e:	4413      	add	r3, r2
   85020:	681b      	ldr	r3, [r3, #0]
   85022:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
   85024:	683b      	ldr	r3, [r7, #0]
   85026:	68db      	ldr	r3, [r3, #12]
   85028:	4798      	blx	r3
   8502a:	4603      	mov	r3, r0
   8502c:	461a      	mov	r2, r3
   8502e:	4b09      	ldr	r3, [pc, #36]	; (85054 <udc_req_std_iface_get_setting+0x90>)
   85030:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   85032:	2101      	movs	r1, #1
   85034:	4807      	ldr	r0, [pc, #28]	; (85054 <udc_req_std_iface_get_setting+0x90>)
   85036:	4b08      	ldr	r3, [pc, #32]	; (85058 <udc_req_std_iface_get_setting+0x94>)
   85038:	4798      	blx	r3
	return true;
   8503a:	2301      	movs	r3, #1
}
   8503c:	4618      	mov	r0, r3
   8503e:	3708      	adds	r7, #8
   85040:	46bd      	mov	sp, r7
   85042:	bd80      	pop	{r7, pc}
   85044:	20000d58 	.word	0x20000d58
   85048:	20000d3c 	.word	0x20000d3c
   8504c:	20000d40 	.word	0x20000d40
   85050:	000846e1 	.word	0x000846e1
   85054:	20000d4a 	.word	0x20000d4a
   85058:	00081fc5 	.word	0x00081fc5

0008505c <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
   8505c:	b580      	push	{r7, lr}
   8505e:	b082      	sub	sp, #8
   85060:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   85062:	4b14      	ldr	r3, [pc, #80]	; (850b4 <udc_req_std_iface_set_setting+0x58>)
   85064:	88db      	ldrh	r3, [r3, #6]
   85066:	2b00      	cmp	r3, #0
   85068:	d001      	beq.n	8506e <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
   8506a:	2300      	movs	r3, #0
   8506c:	e01e      	b.n	850ac <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
   8506e:	4b12      	ldr	r3, [pc, #72]	; (850b8 <udc_req_std_iface_set_setting+0x5c>)
   85070:	781b      	ldrb	r3, [r3, #0]
   85072:	2b00      	cmp	r3, #0
   85074:	d101      	bne.n	8507a <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
   85076:	2300      	movs	r3, #0
   85078:	e018      	b.n	850ac <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8507a:	4b0e      	ldr	r3, [pc, #56]	; (850b4 <udc_req_std_iface_set_setting+0x58>)
   8507c:	889b      	ldrh	r3, [r3, #4]
   8507e:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   85080:	4b0c      	ldr	r3, [pc, #48]	; (850b4 <udc_req_std_iface_set_setting+0x58>)
   85082:	885b      	ldrh	r3, [r3, #2]
   85084:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   85086:	79fb      	ldrb	r3, [r7, #7]
   85088:	4618      	mov	r0, r3
   8508a:	4b0c      	ldr	r3, [pc, #48]	; (850bc <udc_req_std_iface_set_setting+0x60>)
   8508c:	4798      	blx	r3
   8508e:	4603      	mov	r3, r0
   85090:	f083 0301 	eor.w	r3, r3, #1
   85094:	b2db      	uxtb	r3, r3
   85096:	2b00      	cmp	r3, #0
   85098:	d001      	beq.n	8509e <udc_req_std_iface_set_setting+0x42>
		return false;
   8509a:	2300      	movs	r3, #0
   8509c:	e006      	b.n	850ac <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   8509e:	79ba      	ldrb	r2, [r7, #6]
   850a0:	79fb      	ldrb	r3, [r7, #7]
   850a2:	4611      	mov	r1, r2
   850a4:	4618      	mov	r0, r3
   850a6:	4b06      	ldr	r3, [pc, #24]	; (850c0 <udc_req_std_iface_set_setting+0x64>)
   850a8:	4798      	blx	r3
   850aa:	4603      	mov	r3, r0
}
   850ac:	4618      	mov	r0, r3
   850ae:	3708      	adds	r7, #8
   850b0:	46bd      	mov	sp, r7
   850b2:	bd80      	pop	{r7, pc}
   850b4:	20000d58 	.word	0x20000d58
   850b8:	20000d3c 	.word	0x20000d3c
   850bc:	0008477d 	.word	0x0008477d
   850c0:	0008481d 	.word	0x0008481d

000850c4 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
   850c4:	b580      	push	{r7, lr}
   850c6:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   850c8:	4b4d      	ldr	r3, [pc, #308]	; (85200 <udc_reqstd+0x13c>)
   850ca:	781b      	ldrb	r3, [r3, #0]
   850cc:	b25b      	sxtb	r3, r3
   850ce:	2b00      	cmp	r3, #0
   850d0:	da3e      	bge.n	85150 <udc_reqstd+0x8c>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
   850d2:	4b4b      	ldr	r3, [pc, #300]	; (85200 <udc_reqstd+0x13c>)
   850d4:	88db      	ldrh	r3, [r3, #6]
   850d6:	2b00      	cmp	r3, #0
   850d8:	d101      	bne.n	850de <udc_reqstd+0x1a>
			return false; // Error for USB host
   850da:	2300      	movs	r3, #0
   850dc:	e08e      	b.n	851fc <udc_reqstd+0x138>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   850de:	4b48      	ldr	r3, [pc, #288]	; (85200 <udc_reqstd+0x13c>)
   850e0:	781b      	ldrb	r3, [r3, #0]
   850e2:	f003 031f 	and.w	r3, r3, #31
   850e6:	2b00      	cmp	r3, #0
   850e8:	d114      	bne.n	85114 <udc_reqstd+0x50>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   850ea:	4b45      	ldr	r3, [pc, #276]	; (85200 <udc_reqstd+0x13c>)
   850ec:	785b      	ldrb	r3, [r3, #1]
   850ee:	2b06      	cmp	r3, #6
   850f0:	d008      	beq.n	85104 <udc_reqstd+0x40>
   850f2:	2b08      	cmp	r3, #8
   850f4:	d00a      	beq.n	8510c <udc_reqstd+0x48>
   850f6:	2b00      	cmp	r3, #0
   850f8:	d000      	beq.n	850fc <udc_reqstd+0x38>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
   850fa:	e00b      	b.n	85114 <udc_reqstd+0x50>
				return udc_req_std_dev_get_status();
   850fc:	4b41      	ldr	r3, [pc, #260]	; (85204 <udc_reqstd+0x140>)
   850fe:	4798      	blx	r3
   85100:	4603      	mov	r3, r0
   85102:	e07b      	b.n	851fc <udc_reqstd+0x138>
				return udc_req_std_dev_get_descriptor();
   85104:	4b40      	ldr	r3, [pc, #256]	; (85208 <udc_reqstd+0x144>)
   85106:	4798      	blx	r3
   85108:	4603      	mov	r3, r0
   8510a:	e077      	b.n	851fc <udc_reqstd+0x138>
				return udc_req_std_dev_get_configuration();
   8510c:	4b3f      	ldr	r3, [pc, #252]	; (8520c <udc_reqstd+0x148>)
   8510e:	4798      	blx	r3
   85110:	4603      	mov	r3, r0
   85112:	e073      	b.n	851fc <udc_reqstd+0x138>
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   85114:	4b3a      	ldr	r3, [pc, #232]	; (85200 <udc_reqstd+0x13c>)
   85116:	781b      	ldrb	r3, [r3, #0]
   85118:	f003 031f 	and.w	r3, r3, #31
   8511c:	2b01      	cmp	r3, #1
   8511e:	d108      	bne.n	85132 <udc_reqstd+0x6e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   85120:	4b37      	ldr	r3, [pc, #220]	; (85200 <udc_reqstd+0x13c>)
   85122:	785b      	ldrb	r3, [r3, #1]
   85124:	2b0a      	cmp	r3, #10
   85126:	d000      	beq.n	8512a <udc_reqstd+0x66>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
   85128:	e003      	b.n	85132 <udc_reqstd+0x6e>
				return udc_req_std_iface_get_setting();
   8512a:	4b39      	ldr	r3, [pc, #228]	; (85210 <udc_reqstd+0x14c>)
   8512c:	4798      	blx	r3
   8512e:	4603      	mov	r3, r0
   85130:	e064      	b.n	851fc <udc_reqstd+0x138>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   85132:	4b33      	ldr	r3, [pc, #204]	; (85200 <udc_reqstd+0x13c>)
   85134:	781b      	ldrb	r3, [r3, #0]
   85136:	f003 031f 	and.w	r3, r3, #31
   8513a:	2b02      	cmp	r3, #2
   8513c:	d15d      	bne.n	851fa <udc_reqstd+0x136>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   8513e:	4b30      	ldr	r3, [pc, #192]	; (85200 <udc_reqstd+0x13c>)
   85140:	785b      	ldrb	r3, [r3, #1]
   85142:	2b00      	cmp	r3, #0
   85144:	d000      	beq.n	85148 <udc_reqstd+0x84>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
   85146:	e058      	b.n	851fa <udc_reqstd+0x136>
				return udc_req_std_ep_get_status();
   85148:	4b32      	ldr	r3, [pc, #200]	; (85214 <udc_reqstd+0x150>)
   8514a:	4798      	blx	r3
   8514c:	4603      	mov	r3, r0
   8514e:	e055      	b.n	851fc <udc_reqstd+0x138>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   85150:	4b2b      	ldr	r3, [pc, #172]	; (85200 <udc_reqstd+0x13c>)
   85152:	781b      	ldrb	r3, [r3, #0]
   85154:	f003 031f 	and.w	r3, r3, #31
   85158:	2b00      	cmp	r3, #0
   8515a:	d12a      	bne.n	851b2 <udc_reqstd+0xee>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   8515c:	4b28      	ldr	r3, [pc, #160]	; (85200 <udc_reqstd+0x13c>)
   8515e:	785b      	ldrb	r3, [r3, #1]
   85160:	3b01      	subs	r3, #1
   85162:	2b08      	cmp	r3, #8
   85164:	d824      	bhi.n	851b0 <udc_reqstd+0xec>
   85166:	a201      	add	r2, pc, #4	; (adr r2, 8516c <udc_reqstd+0xa8>)
   85168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8516c:	00085199 	.word	0x00085199
   85170:	000851b1 	.word	0x000851b1
   85174:	000851a1 	.word	0x000851a1
   85178:	000851b1 	.word	0x000851b1
   8517c:	00085191 	.word	0x00085191
   85180:	000851b1 	.word	0x000851b1
   85184:	000851b1 	.word	0x000851b1
   85188:	000851b1 	.word	0x000851b1
   8518c:	000851a9 	.word	0x000851a9
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
   85190:	4b21      	ldr	r3, [pc, #132]	; (85218 <udc_reqstd+0x154>)
   85192:	4798      	blx	r3
   85194:	4603      	mov	r3, r0
   85196:	e031      	b.n	851fc <udc_reqstd+0x138>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
   85198:	4b20      	ldr	r3, [pc, #128]	; (8521c <udc_reqstd+0x158>)
   8519a:	4798      	blx	r3
   8519c:	4603      	mov	r3, r0
   8519e:	e02d      	b.n	851fc <udc_reqstd+0x138>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   851a0:	4b1f      	ldr	r3, [pc, #124]	; (85220 <udc_reqstd+0x15c>)
   851a2:	4798      	blx	r3
   851a4:	4603      	mov	r3, r0
   851a6:	e029      	b.n	851fc <udc_reqstd+0x138>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
   851a8:	4b1e      	ldr	r3, [pc, #120]	; (85224 <udc_reqstd+0x160>)
   851aa:	4798      	blx	r3
   851ac:	4603      	mov	r3, r0
   851ae:	e025      	b.n	851fc <udc_reqstd+0x138>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
   851b0:	bf00      	nop
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   851b2:	4b13      	ldr	r3, [pc, #76]	; (85200 <udc_reqstd+0x13c>)
   851b4:	781b      	ldrb	r3, [r3, #0]
   851b6:	f003 031f 	and.w	r3, r3, #31
   851ba:	2b01      	cmp	r3, #1
   851bc:	d108      	bne.n	851d0 <udc_reqstd+0x10c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   851be:	4b10      	ldr	r3, [pc, #64]	; (85200 <udc_reqstd+0x13c>)
   851c0:	785b      	ldrb	r3, [r3, #1]
   851c2:	2b0b      	cmp	r3, #11
   851c4:	d000      	beq.n	851c8 <udc_reqstd+0x104>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
   851c6:	e003      	b.n	851d0 <udc_reqstd+0x10c>
				return udc_req_std_iface_set_setting();
   851c8:	4b17      	ldr	r3, [pc, #92]	; (85228 <udc_reqstd+0x164>)
   851ca:	4798      	blx	r3
   851cc:	4603      	mov	r3, r0
   851ce:	e015      	b.n	851fc <udc_reqstd+0x138>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   851d0:	4b0b      	ldr	r3, [pc, #44]	; (85200 <udc_reqstd+0x13c>)
   851d2:	781b      	ldrb	r3, [r3, #0]
   851d4:	f003 031f 	and.w	r3, r3, #31
   851d8:	2b02      	cmp	r3, #2
   851da:	d10e      	bne.n	851fa <udc_reqstd+0x136>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   851dc:	4b08      	ldr	r3, [pc, #32]	; (85200 <udc_reqstd+0x13c>)
   851de:	785b      	ldrb	r3, [r3, #1]
   851e0:	2b01      	cmp	r3, #1
   851e2:	d002      	beq.n	851ea <udc_reqstd+0x126>
   851e4:	2b03      	cmp	r3, #3
   851e6:	d004      	beq.n	851f2 <udc_reqstd+0x12e>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
   851e8:	e007      	b.n	851fa <udc_reqstd+0x136>
				return udc_req_std_ep_clear_feature();
   851ea:	4b10      	ldr	r3, [pc, #64]	; (8522c <udc_reqstd+0x168>)
   851ec:	4798      	blx	r3
   851ee:	4603      	mov	r3, r0
   851f0:	e004      	b.n	851fc <udc_reqstd+0x138>
				return udc_req_std_ep_set_feature();
   851f2:	4b0f      	ldr	r3, [pc, #60]	; (85230 <udc_reqstd+0x16c>)
   851f4:	4798      	blx	r3
   851f6:	4603      	mov	r3, r0
   851f8:	e000      	b.n	851fc <udc_reqstd+0x138>
			}
		}
#endif
	}
	return false;
   851fa:	2300      	movs	r3, #0
}
   851fc:	4618      	mov	r0, r3
   851fe:	bd80      	pop	{r7, pc}
   85200:	20000d58 	.word	0x20000d58
   85204:	00084979 	.word	0x00084979
   85208:	00084c79 	.word	0x00084c79
   8520c:	00084e95 	.word	0x00084e95
   85210:	00084fc5 	.word	0x00084fc5
   85214:	000849a5 	.word	0x000849a5
   85218:	00084b85 	.word	0x00084b85
   8521c:	000849e9 	.word	0x000849e9
   85220:	00084a5d 	.word	0x00084a5d
   85224:	00084ec1 	.word	0x00084ec1
   85228:	0008505d 	.word	0x0008505d
   8522c:	00084a25 	.word	0x00084a25
   85230:	00084b19 	.word	0x00084b19

00085234 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   85234:	b580      	push	{r7, lr}
   85236:	b082      	sub	sp, #8
   85238:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   8523a:	4b20      	ldr	r3, [pc, #128]	; (852bc <udc_req_iface+0x88>)
   8523c:	781b      	ldrb	r3, [r3, #0]
   8523e:	2b00      	cmp	r3, #0
   85240:	d101      	bne.n	85246 <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
   85242:	2300      	movs	r3, #0
   85244:	e036      	b.n	852b4 <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   85246:	4b1e      	ldr	r3, [pc, #120]	; (852c0 <udc_req_iface+0x8c>)
   85248:	889b      	ldrh	r3, [r3, #4]
   8524a:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8524c:	4b1d      	ldr	r3, [pc, #116]	; (852c4 <udc_req_iface+0x90>)
   8524e:	681b      	ldr	r3, [r3, #0]
   85250:	681b      	ldr	r3, [r3, #0]
   85252:	791b      	ldrb	r3, [r3, #4]
   85254:	79fa      	ldrb	r2, [r7, #7]
   85256:	429a      	cmp	r2, r3
   85258:	d301      	bcc.n	8525e <udc_req_iface+0x2a>
		return false;
   8525a:	2300      	movs	r3, #0
   8525c:	e02a      	b.n	852b4 <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   8525e:	79fb      	ldrb	r3, [r7, #7]
   85260:	2100      	movs	r1, #0
   85262:	4618      	mov	r0, r3
   85264:	4b18      	ldr	r3, [pc, #96]	; (852c8 <udc_req_iface+0x94>)
   85266:	4798      	blx	r3
   85268:	4603      	mov	r3, r0
   8526a:	f083 0301 	eor.w	r3, r3, #1
   8526e:	b2db      	uxtb	r3, r3
   85270:	2b00      	cmp	r3, #0
   85272:	d001      	beq.n	85278 <udc_req_iface+0x44>
		return false;
   85274:	2300      	movs	r3, #0
   85276:	e01d      	b.n	852b4 <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   85278:	4b12      	ldr	r3, [pc, #72]	; (852c4 <udc_req_iface+0x90>)
   8527a:	681b      	ldr	r3, [r3, #0]
   8527c:	685a      	ldr	r2, [r3, #4]
   8527e:	79fb      	ldrb	r3, [r7, #7]
   85280:	009b      	lsls	r3, r3, #2
   85282:	4413      	add	r3, r2
   85284:	681b      	ldr	r3, [r3, #0]
   85286:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   85288:	683b      	ldr	r3, [r7, #0]
   8528a:	68db      	ldr	r3, [r3, #12]
   8528c:	4798      	blx	r3
   8528e:	4603      	mov	r3, r0
   85290:	461a      	mov	r2, r3
   85292:	79fb      	ldrb	r3, [r7, #7]
   85294:	4611      	mov	r1, r2
   85296:	4618      	mov	r0, r3
   85298:	4b0b      	ldr	r3, [pc, #44]	; (852c8 <udc_req_iface+0x94>)
   8529a:	4798      	blx	r3
   8529c:	4603      	mov	r3, r0
   8529e:	f083 0301 	eor.w	r3, r3, #1
   852a2:	b2db      	uxtb	r3, r3
   852a4:	2b00      	cmp	r3, #0
   852a6:	d001      	beq.n	852ac <udc_req_iface+0x78>
		return false;
   852a8:	2300      	movs	r3, #0
   852aa:	e003      	b.n	852b4 <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   852ac:	683b      	ldr	r3, [r7, #0]
   852ae:	689b      	ldr	r3, [r3, #8]
   852b0:	4798      	blx	r3
   852b2:	4603      	mov	r3, r0
}
   852b4:	4618      	mov	r0, r3
   852b6:	3708      	adds	r7, #8
   852b8:	46bd      	mov	sp, r7
   852ba:	bd80      	pop	{r7, pc}
   852bc:	20000d3c 	.word	0x20000d3c
   852c0:	20000d58 	.word	0x20000d58
   852c4:	20000d40 	.word	0x20000d40
   852c8:	000846e1 	.word	0x000846e1

000852cc <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   852cc:	b580      	push	{r7, lr}
   852ce:	b082      	sub	sp, #8
   852d0:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   852d2:	4b1e      	ldr	r3, [pc, #120]	; (8534c <udc_req_ep+0x80>)
   852d4:	781b      	ldrb	r3, [r3, #0]
   852d6:	2b00      	cmp	r3, #0
   852d8:	d101      	bne.n	852de <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
   852da:	2300      	movs	r3, #0
   852dc:	e032      	b.n	85344 <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   852de:	4b1c      	ldr	r3, [pc, #112]	; (85350 <udc_req_ep+0x84>)
   852e0:	889b      	ldrh	r3, [r3, #4]
   852e2:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   852e4:	2300      	movs	r3, #0
   852e6:	71fb      	strb	r3, [r7, #7]
   852e8:	e024      	b.n	85334 <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   852ea:	4b1a      	ldr	r3, [pc, #104]	; (85354 <udc_req_ep+0x88>)
   852ec:	681b      	ldr	r3, [r3, #0]
   852ee:	685a      	ldr	r2, [r3, #4]
   852f0:	79fb      	ldrb	r3, [r7, #7]
   852f2:	009b      	lsls	r3, r3, #2
   852f4:	4413      	add	r3, r2
   852f6:	681b      	ldr	r3, [r3, #0]
   852f8:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   852fa:	683b      	ldr	r3, [r7, #0]
   852fc:	68db      	ldr	r3, [r3, #12]
   852fe:	4798      	blx	r3
   85300:	4603      	mov	r3, r0
   85302:	461a      	mov	r2, r3
   85304:	79fb      	ldrb	r3, [r7, #7]
   85306:	4611      	mov	r1, r2
   85308:	4618      	mov	r0, r3
   8530a:	4b13      	ldr	r3, [pc, #76]	; (85358 <udc_req_ep+0x8c>)
   8530c:	4798      	blx	r3
   8530e:	4603      	mov	r3, r0
   85310:	f083 0301 	eor.w	r3, r3, #1
   85314:	b2db      	uxtb	r3, r3
   85316:	2b00      	cmp	r3, #0
   85318:	d001      	beq.n	8531e <udc_req_ep+0x52>
			return false;
   8531a:	2300      	movs	r3, #0
   8531c:	e012      	b.n	85344 <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   8531e:	683b      	ldr	r3, [r7, #0]
   85320:	689b      	ldr	r3, [r3, #8]
   85322:	4798      	blx	r3
   85324:	4603      	mov	r3, r0
   85326:	2b00      	cmp	r3, #0
   85328:	d001      	beq.n	8532e <udc_req_ep+0x62>
			return true;
   8532a:	2301      	movs	r3, #1
   8532c:	e00a      	b.n	85344 <udc_req_ep+0x78>
			iface_num++) {
   8532e:	79fb      	ldrb	r3, [r7, #7]
   85330:	3301      	adds	r3, #1
   85332:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85334:	4b07      	ldr	r3, [pc, #28]	; (85354 <udc_req_ep+0x88>)
   85336:	681b      	ldr	r3, [r3, #0]
   85338:	681b      	ldr	r3, [r3, #0]
   8533a:	791b      	ldrb	r3, [r3, #4]
   8533c:	79fa      	ldrb	r2, [r7, #7]
   8533e:	429a      	cmp	r2, r3
   85340:	d3d3      	bcc.n	852ea <udc_req_ep+0x1e>
		}
	}
	return false;
   85342:	2300      	movs	r3, #0
}
   85344:	4618      	mov	r0, r3
   85346:	3708      	adds	r7, #8
   85348:	46bd      	mov	sp, r7
   8534a:	bd80      	pop	{r7, pc}
   8534c:	20000d3c 	.word	0x20000d3c
   85350:	20000d58 	.word	0x20000d58
   85354:	20000d40 	.word	0x20000d40
   85358:	000846e1 	.word	0x000846e1

0008535c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   8535c:	b580      	push	{r7, lr}
   8535e:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   85360:	4b1e      	ldr	r3, [pc, #120]	; (853dc <udc_process_setup+0x80>)
   85362:	2200      	movs	r2, #0
   85364:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   85366:	4b1d      	ldr	r3, [pc, #116]	; (853dc <udc_process_setup+0x80>)
   85368:	2200      	movs	r2, #0
   8536a:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   8536c:	4b1b      	ldr	r3, [pc, #108]	; (853dc <udc_process_setup+0x80>)
   8536e:	2200      	movs	r2, #0
   85370:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   85372:	4b1a      	ldr	r3, [pc, #104]	; (853dc <udc_process_setup+0x80>)
   85374:	781b      	ldrb	r3, [r3, #0]
   85376:	b25b      	sxtb	r3, r3
   85378:	2b00      	cmp	r3, #0
   8537a:	da05      	bge.n	85388 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
   8537c:	4b17      	ldr	r3, [pc, #92]	; (853dc <udc_process_setup+0x80>)
   8537e:	88db      	ldrh	r3, [r3, #6]
   85380:	2b00      	cmp	r3, #0
   85382:	d101      	bne.n	85388 <udc_process_setup+0x2c>
			return false; // Error from USB host
   85384:	2300      	movs	r3, #0
   85386:	e027      	b.n	853d8 <udc_process_setup+0x7c>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   85388:	4b14      	ldr	r3, [pc, #80]	; (853dc <udc_process_setup+0x80>)
   8538a:	781b      	ldrb	r3, [r3, #0]
   8538c:	f003 0360 	and.w	r3, r3, #96	; 0x60
   85390:	2b00      	cmp	r3, #0
   85392:	d106      	bne.n	853a2 <udc_process_setup+0x46>
		if (udc_reqstd()) {
   85394:	4b12      	ldr	r3, [pc, #72]	; (853e0 <udc_process_setup+0x84>)
   85396:	4798      	blx	r3
   85398:	4603      	mov	r3, r0
   8539a:	2b00      	cmp	r3, #0
   8539c:	d001      	beq.n	853a2 <udc_process_setup+0x46>
			return true;
   8539e:	2301      	movs	r3, #1
   853a0:	e01a      	b.n	853d8 <udc_process_setup+0x7c>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   853a2:	4b0e      	ldr	r3, [pc, #56]	; (853dc <udc_process_setup+0x80>)
   853a4:	781b      	ldrb	r3, [r3, #0]
   853a6:	f003 031f 	and.w	r3, r3, #31
   853aa:	2b01      	cmp	r3, #1
   853ac:	d106      	bne.n	853bc <udc_process_setup+0x60>
		if (udc_req_iface()) {
   853ae:	4b0d      	ldr	r3, [pc, #52]	; (853e4 <udc_process_setup+0x88>)
   853b0:	4798      	blx	r3
   853b2:	4603      	mov	r3, r0
   853b4:	2b00      	cmp	r3, #0
   853b6:	d001      	beq.n	853bc <udc_process_setup+0x60>
			return true;
   853b8:	2301      	movs	r3, #1
   853ba:	e00d      	b.n	853d8 <udc_process_setup+0x7c>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   853bc:	4b07      	ldr	r3, [pc, #28]	; (853dc <udc_process_setup+0x80>)
   853be:	781b      	ldrb	r3, [r3, #0]
   853c0:	f003 031f 	and.w	r3, r3, #31
   853c4:	2b02      	cmp	r3, #2
   853c6:	d106      	bne.n	853d6 <udc_process_setup+0x7a>
		if (udc_req_ep()) {
   853c8:	4b07      	ldr	r3, [pc, #28]	; (853e8 <udc_process_setup+0x8c>)
   853ca:	4798      	blx	r3
   853cc:	4603      	mov	r3, r0
   853ce:	2b00      	cmp	r3, #0
   853d0:	d001      	beq.n	853d6 <udc_process_setup+0x7a>
			return true;
   853d2:	2301      	movs	r3, #1
   853d4:	e000      	b.n	853d8 <udc_process_setup+0x7c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   853d6:	2300      	movs	r3, #0
#endif
}
   853d8:	4618      	mov	r0, r3
   853da:	bd80      	pop	{r7, pc}
   853dc:	20000d58 	.word	0x20000d58
   853e0:	000850c5 	.word	0x000850c5
   853e4:	00085235 	.word	0x00085235
   853e8:	000852cd 	.word	0x000852cd

000853ec <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
   853ec:	b5b0      	push	{r4, r5, r7, lr}
   853ee:	b09c      	sub	sp, #112	; 0x70
   853f0:	af00      	add	r7, sp, #0
   853f2:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
   853f4:	687b      	ldr	r3, [r7, #4]
   853f6:	3b01      	subs	r3, #1
   853f8:	2b04      	cmp	r3, #4
   853fa:	f200 81d9 	bhi.w	857b0 <pmc_sleep+0x3c4>
   853fe:	a201      	add	r2, pc, #4	; (adr r2, 85404 <pmc_sleep+0x18>)
   85400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85404:	00085419 	.word	0x00085419
   85408:	00085419 	.word	0x00085419
   8540c:	0008544b 	.word	0x0008544b
   85410:	0008544b 	.word	0x0008544b
   85414:	00085795 	.word	0x00085795
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
		cpu_irq_enable();
		__WFI();
		break;
#else
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
   85418:	4a80      	ldr	r2, [pc, #512]	; (8561c <pmc_sleep+0x230>)
   8541a:	4b80      	ldr	r3, [pc, #512]	; (8561c <pmc_sleep+0x230>)
   8541c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   8541e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   85422:	6713      	str	r3, [r2, #112]	; 0x70
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
   85424:	4a7e      	ldr	r2, [pc, #504]	; (85620 <pmc_sleep+0x234>)
   85426:	4b7e      	ldr	r3, [pc, #504]	; (85620 <pmc_sleep+0x234>)
   85428:	691b      	ldr	r3, [r3, #16]
   8542a:	f023 0304 	bic.w	r3, r3, #4
   8542e:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   85430:	4b7c      	ldr	r3, [pc, #496]	; (85624 <pmc_sleep+0x238>)
   85432:	2201      	movs	r2, #1
   85434:	701a      	strb	r2, [r3, #0]
   85436:	f3bf 8f5f 	dmb	sy
   8543a:	b662      	cpsie	i
		if (sleep_mode == SAM_PM_SMODE_SLEEP_WFI)
   8543c:	687b      	ldr	r3, [r7, #4]
   8543e:	2b02      	cmp	r3, #2
   85440:	d101      	bne.n	85446 <pmc_sleep+0x5a>
  __ASM volatile ("wfi");
   85442:	bf30      	wfi
			__WFI();
		else
			__WFE();
		break;
   85444:	e1b4      	b.n	857b0 <pmc_sleep+0x3c4>
  __ASM volatile ("wfe");
   85446:	bf20      	wfe
   85448:	e1b2      	b.n	857b0 <pmc_sleep+0x3c4>
  __ASM volatile ("cpsid i");
   8544a:	b672      	cpsid	i
  __ASM volatile ("dmb");
   8544c:	f3bf 8f5f 	dmb	sy
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
#endif
		cpu_irq_disable();
   85450:	4b74      	ldr	r3, [pc, #464]	; (85624 <pmc_sleep+0x238>)
   85452:	2200      	movs	r2, #0
   85454:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
   85456:	4b74      	ldr	r3, [pc, #464]	; (85628 <pmc_sleep+0x23c>)
   85458:	2201      	movs	r2, #1
   8545a:	701a      	strb	r2, [r3, #0]
		/* Backup the sub-system 1 status and stop sub-system 1 */
		uint32_t cpclk_backup = PMC->PMC_SCSR &
				(PMC_SCSR_CPCK | PMC_SCSR_CPBMCK);
		PMC->PMC_SCDR = cpclk_backup | PMC_SCDR_CPKEY_PASSWD;
#endif
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
   8545c:	687b      	ldr	r3, [r7, #4]
   8545e:	2b04      	cmp	r3, #4
   85460:	bf0c      	ite	eq
   85462:	2301      	moveq	r3, #1
   85464:	2300      	movne	r3, #0
   85466:	b2da      	uxtb	r2, r3
   85468:	f107 0320 	add.w	r3, r7, #32
   8546c:	64fb      	str	r3, [r7, #76]	; 0x4c
   8546e:	f107 031c 	add.w	r3, r7, #28
   85472:	64bb      	str	r3, [r7, #72]	; 0x48
   85474:	f107 0318 	add.w	r3, r7, #24
   85478:	647b      	str	r3, [r7, #68]	; 0x44
   8547a:	f107 0314 	add.w	r3, r7, #20
   8547e:	643b      	str	r3, [r7, #64]	; 0x40
   85480:	f107 0310 	add.w	r3, r7, #16
   85484:	63fb      	str	r3, [r7, #60]	; 0x3c
   85486:	f107 030c 	add.w	r3, r7, #12
   8548a:	63bb      	str	r3, [r7, #56]	; 0x38
   8548c:	4613      	mov	r3, r2
   8548e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t mor  = PMC->CKGR_MOR;
   85492:	4b62      	ldr	r3, [pc, #392]	; (8561c <pmc_sleep+0x230>)
   85494:	6a1b      	ldr	r3, [r3, #32]
   85496:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t mckr = PMC->PMC_MCKR;
   85498:	4b60      	ldr	r3, [pc, #384]	; (8561c <pmc_sleep+0x230>)
   8549a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8549c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fmr  = EFC0->EEFC_FMR;
   8549e:	4b63      	ldr	r3, [pc, #396]	; (8562c <pmc_sleep+0x240>)
   854a0:	681b      	ldr	r3, [r3, #0]
   854a2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fmr1 = EFC1->EEFC_FMR;
   854a4:	4b62      	ldr	r3, [pc, #392]	; (85630 <pmc_sleep+0x244>)
   854a6:	681b      	ldr	r3, [r3, #0]
   854a8:	627b      	str	r3, [r7, #36]	; 0x24
	if (p_osc_setting) {
   854aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   854ac:	2b00      	cmp	r3, #0
   854ae:	d002      	beq.n	854b6 <pmc_sleep+0xca>
		*p_osc_setting = mor;
   854b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   854b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   854b4:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
   854b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   854b8:	2b00      	cmp	r3, #0
   854ba:	d003      	beq.n	854c4 <pmc_sleep+0xd8>
		*p_pll0_setting = PMC->CKGR_PLLAR;
   854bc:	4b57      	ldr	r3, [pc, #348]	; (8561c <pmc_sleep+0x230>)
   854be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   854c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   854c2:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
   854c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   854c6:	2b00      	cmp	r3, #0
   854c8:	d003      	beq.n	854d2 <pmc_sleep+0xe6>
		*p_pll1_setting = PMC->CKGR_UCKR;
   854ca:	4b54      	ldr	r3, [pc, #336]	; (8561c <pmc_sleep+0x230>)
   854cc:	69da      	ldr	r2, [r3, #28]
   854ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   854d0:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
   854d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   854d4:	2b00      	cmp	r3, #0
   854d6:	d002      	beq.n	854de <pmc_sleep+0xf2>
		*p_mck_setting  = mckr;
   854d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   854da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   854dc:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
   854de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   854e0:	2b00      	cmp	r3, #0
   854e2:	d002      	beq.n	854ea <pmc_sleep+0xfe>
		*p_fmr_setting  = fmr;
   854e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   854e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   854e8:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting1) {
   854ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   854ec:	2b00      	cmp	r3, #0
   854ee:	d002      	beq.n	854f6 <pmc_sleep+0x10a>
		*p_fmr_setting1 = fmr1;
   854f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   854f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   854f4:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
   854f6:	4a49      	ldr	r2, [pc, #292]	; (8561c <pmc_sleep+0x230>)
   854f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   854fa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   854fe:	f043 0308 	orr.w	r3, r3, #8
   85502:	6213      	str	r3, [r2, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
   85504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   85506:	f003 0303 	and.w	r3, r3, #3
   8550a:	2b01      	cmp	r3, #1
   8550c:	d90e      	bls.n	8552c <pmc_sleep+0x140>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
   8550e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   85510:	f023 0303 	bic.w	r3, r3, #3
   85514:	f043 0301 	orr.w	r3, r3, #1
   85518:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   8551a:	4a40      	ldr	r2, [pc, #256]	; (8561c <pmc_sleep+0x230>)
   8551c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8551e:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   85520:	4b3e      	ldr	r3, [pc, #248]	; (8561c <pmc_sleep+0x230>)
   85522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85524:	f003 0308 	and.w	r3, r3, #8
   85528:	2b00      	cmp	r3, #0
   8552a:	d0f9      	beq.n	85520 <pmc_sleep+0x134>
	if (mckr & PMC_MCKR_PRES_Msk) {
   8552c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8552e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   85532:	2b00      	cmp	r3, #0
   85534:	d00c      	beq.n	85550 <pmc_sleep+0x164>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
   85536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   85538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   8553c:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   8553e:	4a37      	ldr	r2, [pc, #220]	; (8561c <pmc_sleep+0x230>)
   85540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   85542:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   85544:	4b35      	ldr	r3, [pc, #212]	; (8561c <pmc_sleep+0x230>)
   85546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85548:	f003 0308 	and.w	r3, r3, #8
   8554c:	2b00      	cmp	r3, #0
   8554e:	d0f9      	beq.n	85544 <pmc_sleep+0x158>
	pmc_disable_pllack();
   85550:	4b38      	ldr	r3, [pc, #224]	; (85634 <pmc_sleep+0x248>)
   85552:	4798      	blx	r3
	pmc_disable_upll_clock();
   85554:	4b38      	ldr	r3, [pc, #224]	; (85638 <pmc_sleep+0x24c>)
   85556:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   85558:	4b30      	ldr	r3, [pc, #192]	; (8561c <pmc_sleep+0x230>)
   8555a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8555c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   85560:	2b00      	cmp	r3, #0
   85562:	d0f9      	beq.n	85558 <pmc_sleep+0x16c>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   85564:	4a2d      	ldr	r2, [pc, #180]	; (8561c <pmc_sleep+0x230>)
   85566:	4b2d      	ldr	r3, [pc, #180]	; (8561c <pmc_sleep+0x230>)
   85568:	6a1b      	ldr	r3, [r3, #32]
   8556a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   8556e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   85572:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85576:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   85578:	4b28      	ldr	r3, [pc, #160]	; (8561c <pmc_sleep+0x230>)
   8557a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8557c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   85580:	2b00      	cmp	r3, #0
   85582:	d0f9      	beq.n	85578 <pmc_sleep+0x18c>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
   85584:	4a29      	ldr	r2, [pc, #164]	; (8562c <pmc_sleep+0x240>)
   85586:	6abb      	ldr	r3, [r7, #40]	; 0x28
   85588:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   8558c:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
   8558e:	4a28      	ldr	r2, [pc, #160]	; (85630 <pmc_sleep+0x244>)
   85590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   85592:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   85596:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
   85598:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   8559c:	2b00      	cmp	r3, #0
   8559e:	d009      	beq.n	855b4 <pmc_sleep+0x1c8>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   855a0:	4a1e      	ldr	r2, [pc, #120]	; (8561c <pmc_sleep+0x230>)
   855a2:	4b1e      	ldr	r3, [pc, #120]	; (8561c <pmc_sleep+0x230>)
   855a4:	6a1b      	ldr	r3, [r3, #32]
   855a6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   855aa:	f023 0301 	bic.w	r3, r3, #1
   855ae:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   855b2:	6213      	str	r3, [r2, #32]
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
   855b4:	4b1b      	ldr	r3, [pc, #108]	; (85624 <pmc_sleep+0x238>)
   855b6:	2201      	movs	r2, #1
   855b8:	701a      	strb	r2, [r3, #0]
   855ba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   855be:	b662      	cpsie	i

		pmc_enable_waitmode();
   855c0:	4b1e      	ldr	r3, [pc, #120]	; (8563c <pmc_sleep+0x250>)
   855c2:	4798      	blx	r3
  __ASM volatile ("cpsid i");
   855c4:	b672      	cpsid	i
   855c6:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
   855ca:	4b16      	ldr	r3, [pc, #88]	; (85624 <pmc_sleep+0x238>)
   855cc:	2200      	movs	r2, #0
   855ce:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
   855d0:	6a3d      	ldr	r5, [r7, #32]
   855d2:	69fc      	ldr	r4, [r7, #28]
   855d4:	69b8      	ldr	r0, [r7, #24]
   855d6:	6979      	ldr	r1, [r7, #20]
   855d8:	693a      	ldr	r2, [r7, #16]
   855da:	68fb      	ldr	r3, [r7, #12]
   855dc:	66fd      	str	r5, [r7, #108]	; 0x6c
   855de:	66bc      	str	r4, [r7, #104]	; 0x68
   855e0:	6678      	str	r0, [r7, #100]	; 0x64
   855e2:	6639      	str	r1, [r7, #96]	; 0x60
   855e4:	65fa      	str	r2, [r7, #92]	; 0x5c
   855e6:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t pll_sr = 0;
   855e8:	2300      	movs	r3, #0
   855ea:	657b      	str	r3, [r7, #84]	; 0x54
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
   855ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   855ee:	f003 0302 	and.w	r3, r3, #2
   855f2:	2b00      	cmp	r3, #0
   855f4:	d028      	beq.n	85648 <pmc_sleep+0x25c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   855f6:	4909      	ldr	r1, [pc, #36]	; (8561c <pmc_sleep+0x230>)
   855f8:	4b08      	ldr	r3, [pc, #32]	; (8561c <pmc_sleep+0x230>)
   855fa:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   855fc:	4a10      	ldr	r2, [pc, #64]	; (85640 <pmc_sleep+0x254>)
   855fe:	401a      	ands	r2, r3
   85600:	4b10      	ldr	r3, [pc, #64]	; (85644 <pmc_sleep+0x258>)
   85602:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   85604:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   85606:	4a05      	ldr	r2, [pc, #20]	; (8561c <pmc_sleep+0x230>)
   85608:	4b04      	ldr	r3, [pc, #16]	; (8561c <pmc_sleep+0x230>)
   8560a:	6a1b      	ldr	r3, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
   8560c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   85610:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   85614:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   85618:	6213      	str	r3, [r2, #32]
   8561a:	e050      	b.n	856be <pmc_sleep+0x2d2>
   8561c:	400e0400 	.word	0x400e0400
   85620:	e000ed00 	.word	0xe000ed00
   85624:	2000031a 	.word	0x2000031a
   85628:	20000d4b 	.word	0x20000d4b
   8562c:	400e0800 	.word	0x400e0800
   85630:	400e0a00 	.word	0x400e0a00
   85634:	00083dc5 	.word	0x00083dc5
   85638:	00083df5 	.word	0x00083df5
   8563c:	00083f19 	.word	0x00083f19
   85640:	fec8fffc 	.word	0xfec8fffc
   85644:	01370002 	.word	0x01370002
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
   85648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   8564a:	f003 0301 	and.w	r3, r3, #1
   8564e:	2b00      	cmp	r3, #0
   85650:	d035      	beq.n	856be <pmc_sleep+0x2d2>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
   85652:	4b59      	ldr	r3, [pc, #356]	; (857b8 <pmc_sleep+0x3cc>)
   85654:	6a1b      	ldr	r3, [r3, #32]
   85656:	f003 0301 	and.w	r3, r3, #1
   8565a:	2b00      	cmp	r3, #0
   8565c:	d111      	bne.n	85682 <pmc_sleep+0x296>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8565e:	4a56      	ldr	r2, [pc, #344]	; (857b8 <pmc_sleep+0x3cc>)
   85660:	4b55      	ldr	r3, [pc, #340]	; (857b8 <pmc_sleep+0x3cc>)
   85662:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   85664:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   85668:	f023 0303 	bic.w	r3, r3, #3
   8566c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85670:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   85674:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   85676:	4b50      	ldr	r3, [pc, #320]	; (857b8 <pmc_sleep+0x3cc>)
   85678:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8567a:	f003 0301 	and.w	r3, r3, #1
   8567e:	2b00      	cmp	r3, #0
   85680:	d0f9      	beq.n	85676 <pmc_sleep+0x28a>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
   85682:	4b4d      	ldr	r3, [pc, #308]	; (857b8 <pmc_sleep+0x3cc>)
   85684:	6a1b      	ldr	r3, [r3, #32]
   85686:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8568a:	2b00      	cmp	r3, #0
   8568c:	d10d      	bne.n	856aa <pmc_sleep+0x2be>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8568e:	4a4a      	ldr	r2, [pc, #296]	; (857b8 <pmc_sleep+0x3cc>)
   85690:	4b49      	ldr	r3, [pc, #292]	; (857b8 <pmc_sleep+0x3cc>)
   85692:	6a1b      	ldr	r3, [r3, #32]
   85694:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   85698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8569c:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   8569e:	4b46      	ldr	r3, [pc, #280]	; (857b8 <pmc_sleep+0x3cc>)
   856a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   856a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   856a6:	2b00      	cmp	r3, #0
   856a8:	d0f9      	beq.n	8569e <pmc_sleep+0x2b2>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   856aa:	4a43      	ldr	r2, [pc, #268]	; (857b8 <pmc_sleep+0x3cc>)
   856ac:	4b42      	ldr	r3, [pc, #264]	; (857b8 <pmc_sleep+0x3cc>)
   856ae:	6a1b      	ldr	r3, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
   856b0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   856b4:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   856b8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   856bc:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
   856be:	6eba      	ldr	r2, [r7, #104]	; 0x68
   856c0:	4b3e      	ldr	r3, [pc, #248]	; (857bc <pmc_sleep+0x3d0>)
   856c2:	4013      	ands	r3, r2
   856c4:	2b00      	cmp	r3, #0
   856c6:	d008      	beq.n	856da <pmc_sleep+0x2ee>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
   856c8:	4a3b      	ldr	r2, [pc, #236]	; (857b8 <pmc_sleep+0x3cc>)
   856ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   856cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   856d0:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
   856d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   856d4:	f043 0302 	orr.w	r3, r3, #2
   856d8:	657b      	str	r3, [r7, #84]	; 0x54
	if (pll1_setting & CKGR_UCKR_UPLLEN) {
   856da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   856dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   856e0:	2b00      	cmp	r3, #0
   856e2:	d006      	beq.n	856f2 <pmc_sleep+0x306>
		PMC->CKGR_UCKR = pll1_setting;
   856e4:	4a34      	ldr	r2, [pc, #208]	; (857b8 <pmc_sleep+0x3cc>)
   856e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   856e8:	61d3      	str	r3, [r2, #28]
		pll_sr |= PMC_SR_LOCKU;
   856ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   856ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   856f0:	657b      	str	r3, [r7, #84]	; 0x54
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
   856f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   856f4:	f003 0303 	and.w	r3, r3, #3
   856f8:	2b02      	cmp	r3, #2
   856fa:	d002      	beq.n	85702 <pmc_sleep+0x316>
   856fc:	2b03      	cmp	r3, #3
   856fe:	d007      	beq.n	85710 <pmc_sleep+0x324>
   85700:	e00c      	b.n	8571c <pmc_sleep+0x330>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
   85702:	4b2d      	ldr	r3, [pc, #180]	; (857b8 <pmc_sleep+0x3cc>)
   85704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85706:	f003 0302 	and.w	r3, r3, #2
   8570a:	2b00      	cmp	r3, #0
   8570c:	d0f9      	beq.n	85702 <pmc_sleep+0x316>
   8570e:	e005      	b.n	8571c <pmc_sleep+0x330>
		while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   85710:	4b29      	ldr	r3, [pc, #164]	; (857b8 <pmc_sleep+0x3cc>)
   85712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85714:	f003 0340 	and.w	r3, r3, #64	; 0x40
   85718:	2b00      	cmp	r3, #0
   8571a:	d0f9      	beq.n	85710 <pmc_sleep+0x324>
	mckr = PMC->PMC_MCKR;
   8571c:	4b26      	ldr	r3, [pc, #152]	; (857b8 <pmc_sleep+0x3cc>)
   8571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85720:	653b      	str	r3, [r7, #80]	; 0x50
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   85722:	4925      	ldr	r1, [pc, #148]	; (857b8 <pmc_sleep+0x3cc>)
   85724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   85726:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
   8572a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   8572c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   85730:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   85732:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   85734:	4b20      	ldr	r3, [pc, #128]	; (857b8 <pmc_sleep+0x3cc>)
   85736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85738:	f003 0308 	and.w	r3, r3, #8
   8573c:	2b00      	cmp	r3, #0
   8573e:	d0f9      	beq.n	85734 <pmc_sleep+0x348>
	EFC0->EEFC_FMR = fmr_setting;
   85740:	4a1f      	ldr	r2, [pc, #124]	; (857c0 <pmc_sleep+0x3d4>)
   85742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   85744:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr_setting1;
   85746:	4a1f      	ldr	r2, [pc, #124]	; (857c4 <pmc_sleep+0x3d8>)
   85748:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   8574a:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
   8574c:	4a1a      	ldr	r2, [pc, #104]	; (857b8 <pmc_sleep+0x3cc>)
   8574e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   85750:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   85752:	4b19      	ldr	r3, [pc, #100]	; (857b8 <pmc_sleep+0x3cc>)
   85754:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85756:	f003 0308 	and.w	r3, r3, #8
   8575a:	2b00      	cmp	r3, #0
   8575c:	d0f9      	beq.n	85752 <pmc_sleep+0x366>
	while (!(PMC->PMC_SR & pll_sr));
   8575e:	4b16      	ldr	r3, [pc, #88]	; (857b8 <pmc_sleep+0x3cc>)
   85760:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   85762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   85764:	4013      	ands	r3, r2
   85766:	2b00      	cmp	r3, #0
   85768:	d0f9      	beq.n	8575e <pmc_sleep+0x372>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
   8576a:	4b17      	ldr	r3, [pc, #92]	; (857c8 <pmc_sleep+0x3dc>)
   8576c:	2200      	movs	r2, #0
   8576e:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
   85770:	4b16      	ldr	r3, [pc, #88]	; (857cc <pmc_sleep+0x3e0>)
   85772:	681b      	ldr	r3, [r3, #0]
   85774:	2b00      	cmp	r3, #0
   85776:	d005      	beq.n	85784 <pmc_sleep+0x398>
			callback_clocks_restored();
   85778:	4b14      	ldr	r3, [pc, #80]	; (857cc <pmc_sleep+0x3e0>)
   8577a:	681b      	ldr	r3, [r3, #0]
   8577c:	4798      	blx	r3
			callback_clocks_restored = NULL;
   8577e:	4b13      	ldr	r3, [pc, #76]	; (857cc <pmc_sleep+0x3e0>)
   85780:	2200      	movs	r2, #0
   85782:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
   85784:	4b12      	ldr	r3, [pc, #72]	; (857d0 <pmc_sleep+0x3e4>)
   85786:	2201      	movs	r2, #1
   85788:	701a      	strb	r2, [r3, #0]
   8578a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8578e:	b662      	cpsie	i

		break;
   85790:	bf00      	nop
   85792:	e00d      	b.n	857b0 <pmc_sleep+0x3c4>
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
   85794:	4a0f      	ldr	r2, [pc, #60]	; (857d4 <pmc_sleep+0x3e8>)
   85796:	4b0f      	ldr	r3, [pc, #60]	; (857d4 <pmc_sleep+0x3e8>)
   85798:	691b      	ldr	r3, [r3, #16]
   8579a:	f043 0304 	orr.w	r3, r3, #4
   8579e:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
		cpu_irq_enable();
		__WFI() ;
#else
		cpu_irq_enable();
   857a0:	4b0b      	ldr	r3, [pc, #44]	; (857d0 <pmc_sleep+0x3e4>)
   857a2:	2201      	movs	r2, #1
   857a4:	701a      	strb	r2, [r3, #0]
   857a6:	f3bf 8f5f 	dmb	sy
   857aa:	b662      	cpsie	i
  __ASM volatile ("wfe");
   857ac:	bf20      	wfe
		__WFE() ;
#endif
		break;
   857ae:	bf00      	nop
#endif
	}
}
   857b0:	bf00      	nop
   857b2:	3770      	adds	r7, #112	; 0x70
   857b4:	46bd      	mov	sp, r7
   857b6:	bdb0      	pop	{r4, r5, r7, pc}
   857b8:	400e0400 	.word	0x400e0400
   857bc:	07ff0000 	.word	0x07ff0000
   857c0:	400e0800 	.word	0x400e0800
   857c4:	400e0a00 	.word	0x400e0a00
   857c8:	20000d4b 	.word	0x20000d4b
   857cc:	20000d4c 	.word	0x20000d4c
   857d0:	2000031a 	.word	0x2000031a
   857d4:	e000ed00 	.word	0xe000ed00

000857d8 <pmc_is_wakeup_clocks_restored>:

bool pmc_is_wakeup_clocks_restored(void)
{
   857d8:	b480      	push	{r7}
   857da:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
   857dc:	4b08      	ldr	r3, [pc, #32]	; (85800 <pmc_is_wakeup_clocks_restored+0x28>)
   857de:	781b      	ldrb	r3, [r3, #0]
   857e0:	b2db      	uxtb	r3, r3
   857e2:	2b00      	cmp	r3, #0
   857e4:	bf14      	ite	ne
   857e6:	2301      	movne	r3, #1
   857e8:	2300      	moveq	r3, #0
   857ea:	b2db      	uxtb	r3, r3
   857ec:	f083 0301 	eor.w	r3, r3, #1
   857f0:	b2db      	uxtb	r3, r3
   857f2:	f003 0301 	and.w	r3, r3, #1
   857f6:	b2db      	uxtb	r3, r3
}
   857f8:	4618      	mov	r0, r3
   857fa:	46bd      	mov	sp, r7
   857fc:	bc80      	pop	{r7}
   857fe:	4770      	bx	lr
   85800:	20000d4b 	.word	0x20000d4b

00085804 <sysclk_enable_peripheral_clock>:
{
   85804:	b580      	push	{r7, lr}
   85806:	b082      	sub	sp, #8
   85808:	af00      	add	r7, sp, #0
   8580a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   8580c:	6878      	ldr	r0, [r7, #4]
   8580e:	4b03      	ldr	r3, [pc, #12]	; (8581c <sysclk_enable_peripheral_clock+0x18>)
   85810:	4798      	blx	r3
}
   85812:	bf00      	nop
   85814:	3708      	adds	r7, #8
   85816:	46bd      	mov	sp, r7
   85818:	bd80      	pop	{r7, pc}
   8581a:	bf00      	nop
   8581c:	00083e29 	.word	0x00083e29

00085820 <ioport_init>:
{
   85820:	b580      	push	{r7, lr}
   85822:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   85824:	200a      	movs	r0, #10
   85826:	4b03      	ldr	r3, [pc, #12]	; (85834 <ioport_init+0x14>)
   85828:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   8582a:	200b      	movs	r0, #11
   8582c:	4b01      	ldr	r3, [pc, #4]	; (85834 <ioport_init+0x14>)
   8582e:	4798      	blx	r3
}
   85830:	bf00      	nop
   85832:	bd80      	pop	{r7, pc}
   85834:	00085805 	.word	0x00085805

00085838 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   85838:	b580      	push	{r7, lr}
   8583a:	af00      	add	r7, sp, #0
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8583c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   85840:	201d      	movs	r0, #29
   85842:	4b0a      	ldr	r3, [pc, #40]	; (8586c <iopins_normal+0x34>)
   85844:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   85846:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8584a:	201f      	movs	r0, #31
   8584c:	4b07      	ldr	r3, [pc, #28]	; (8586c <iopins_normal+0x34>)
   8584e:	4798      	blx	r3
	//gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   85850:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   85854:	2018      	movs	r0, #24
   85856:	4b05      	ldr	r3, [pc, #20]	; (8586c <iopins_normal+0x34>)
   85858:	4798      	blx	r3
	//board_sram_pwron();

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8585a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8585e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   85862:	4803      	ldr	r0, [pc, #12]	; (85870 <iopins_normal+0x38>)
   85864:	4b03      	ldr	r3, [pc, #12]	; (85874 <iopins_normal+0x3c>)
   85866:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   85868:	bf00      	nop
   8586a:	bd80      	pop	{r7, pc}
   8586c:	000843f1 	.word	0x000843f1
   85870:	400e0c00 	.word	0x400e0c00
   85874:	00084529 	.word	0x00084529

00085878 <board_init>:

void board_init(void)
{
   85878:	b580      	push	{r7, lr}
   8587a:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8587c:	4b04      	ldr	r3, [pc, #16]	; (85890 <board_init+0x18>)
   8587e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85882:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   85884:	4b03      	ldr	r3, [pc, #12]	; (85894 <board_init+0x1c>)
   85886:	4798      	blx	r3

	iopins_normal();
   85888:	4b03      	ldr	r3, [pc, #12]	; (85898 <board_init+0x20>)
   8588a:	4798      	blx	r3

}
   8588c:	bf00      	nop
   8588e:	bd80      	pop	{r7, pc}
   85890:	400e1250 	.word	0x400e1250
   85894:	00085821 	.word	0x00085821
   85898:	00085839 	.word	0x00085839

0008589c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   8589c:	b480      	push	{r7}
   8589e:	b083      	sub	sp, #12
   858a0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   858a2:	4b10      	ldr	r3, [pc, #64]	; (858e4 <cpu_irq_enter_critical+0x48>)
   858a4:	681b      	ldr	r3, [r3, #0]
   858a6:	2b00      	cmp	r3, #0
   858a8:	d112      	bne.n	858d0 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   858aa:	f3ef 8310 	mrs	r3, PRIMASK
   858ae:	607b      	str	r3, [r7, #4]
  return(result);
   858b0:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   858b2:	2b00      	cmp	r3, #0
   858b4:	d109      	bne.n	858ca <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i");
   858b6:	b672      	cpsid	i
  __ASM volatile ("dmb");
   858b8:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   858bc:	4b0a      	ldr	r3, [pc, #40]	; (858e8 <cpu_irq_enter_critical+0x4c>)
   858be:	2200      	movs	r2, #0
   858c0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   858c2:	4b0a      	ldr	r3, [pc, #40]	; (858ec <cpu_irq_enter_critical+0x50>)
   858c4:	2201      	movs	r2, #1
   858c6:	701a      	strb	r2, [r3, #0]
   858c8:	e002      	b.n	858d0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   858ca:	4b08      	ldr	r3, [pc, #32]	; (858ec <cpu_irq_enter_critical+0x50>)
   858cc:	2200      	movs	r2, #0
   858ce:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   858d0:	4b04      	ldr	r3, [pc, #16]	; (858e4 <cpu_irq_enter_critical+0x48>)
   858d2:	681b      	ldr	r3, [r3, #0]
   858d4:	3301      	adds	r3, #1
   858d6:	4a03      	ldr	r2, [pc, #12]	; (858e4 <cpu_irq_enter_critical+0x48>)
   858d8:	6013      	str	r3, [r2, #0]
}
   858da:	bf00      	nop
   858dc:	370c      	adds	r7, #12
   858de:	46bd      	mov	sp, r7
   858e0:	bc80      	pop	{r7}
   858e2:	4770      	bx	lr
   858e4:	20000d50 	.word	0x20000d50
   858e8:	2000031a 	.word	0x2000031a
   858ec:	20000d54 	.word	0x20000d54

000858f0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   858f0:	b480      	push	{r7}
   858f2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   858f4:	4b0b      	ldr	r3, [pc, #44]	; (85924 <cpu_irq_leave_critical+0x34>)
   858f6:	681b      	ldr	r3, [r3, #0]
   858f8:	3b01      	subs	r3, #1
   858fa:	4a0a      	ldr	r2, [pc, #40]	; (85924 <cpu_irq_leave_critical+0x34>)
   858fc:	6013      	str	r3, [r2, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   858fe:	4b09      	ldr	r3, [pc, #36]	; (85924 <cpu_irq_leave_critical+0x34>)
   85900:	681b      	ldr	r3, [r3, #0]
   85902:	2b00      	cmp	r3, #0
   85904:	d10a      	bne.n	8591c <cpu_irq_leave_critical+0x2c>
   85906:	4b08      	ldr	r3, [pc, #32]	; (85928 <cpu_irq_leave_critical+0x38>)
   85908:	781b      	ldrb	r3, [r3, #0]
   8590a:	b2db      	uxtb	r3, r3
   8590c:	2b00      	cmp	r3, #0
   8590e:	d005      	beq.n	8591c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   85910:	4b06      	ldr	r3, [pc, #24]	; (8592c <cpu_irq_leave_critical+0x3c>)
   85912:	2201      	movs	r2, #1
   85914:	701a      	strb	r2, [r3, #0]
   85916:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8591a:	b662      	cpsie	i
	}
}
   8591c:	bf00      	nop
   8591e:	46bd      	mov	sp, r7
   85920:	bc80      	pop	{r7}
   85922:	4770      	bx	lr
   85924:	20000d50 	.word	0x20000d50
   85928:	20000d54 	.word	0x20000d54
   8592c:	2000031a 	.word	0x2000031a

00085930 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   85930:	b480      	push	{r7}
   85932:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   85934:	4b57      	ldr	r3, [pc, #348]	; (85a94 <SystemCoreClockUpdate+0x164>)
   85936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85938:	f003 0303 	and.w	r3, r3, #3
   8593c:	2b03      	cmp	r3, #3
   8593e:	f200 808a 	bhi.w	85a56 <SystemCoreClockUpdate+0x126>
   85942:	a201      	add	r2, pc, #4	; (adr r2, 85948 <SystemCoreClockUpdate+0x18>)
   85944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85948:	00085959 	.word	0x00085959
   8594c:	00085979 	.word	0x00085979
   85950:	000859c9 	.word	0x000859c9
   85954:	000859c9 	.word	0x000859c9
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   85958:	4b4f      	ldr	r3, [pc, #316]	; (85a98 <SystemCoreClockUpdate+0x168>)
   8595a:	695b      	ldr	r3, [r3, #20]
   8595c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   85960:	2b00      	cmp	r3, #0
   85962:	d004      	beq.n	8596e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   85964:	4b4d      	ldr	r3, [pc, #308]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   85966:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8596a:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   8596c:	e073      	b.n	85a56 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8596e:	4b4b      	ldr	r3, [pc, #300]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   85970:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   85974:	601a      	str	r2, [r3, #0]
		break;
   85976:	e06e      	b.n	85a56 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   85978:	4b46      	ldr	r3, [pc, #280]	; (85a94 <SystemCoreClockUpdate+0x164>)
   8597a:	6a1b      	ldr	r3, [r3, #32]
   8597c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   85980:	2b00      	cmp	r3, #0
   85982:	d003      	beq.n	8598c <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   85984:	4b45      	ldr	r3, [pc, #276]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   85986:	4a46      	ldr	r2, [pc, #280]	; (85aa0 <SystemCoreClockUpdate+0x170>)
   85988:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   8598a:	e064      	b.n	85a56 <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8598c:	4b43      	ldr	r3, [pc, #268]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   8598e:	4a45      	ldr	r2, [pc, #276]	; (85aa4 <SystemCoreClockUpdate+0x174>)
   85990:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   85992:	4b40      	ldr	r3, [pc, #256]	; (85a94 <SystemCoreClockUpdate+0x164>)
   85994:	6a1b      	ldr	r3, [r3, #32]
   85996:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8599a:	2b10      	cmp	r3, #16
   8599c:	d004      	beq.n	859a8 <SystemCoreClockUpdate+0x78>
   8599e:	2b20      	cmp	r3, #32
   859a0:	d008      	beq.n	859b4 <SystemCoreClockUpdate+0x84>
   859a2:	2b00      	cmp	r3, #0
   859a4:	d00e      	beq.n	859c4 <SystemCoreClockUpdate+0x94>
				break;
   859a6:	e00e      	b.n	859c6 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
   859a8:	4b3c      	ldr	r3, [pc, #240]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   859aa:	681b      	ldr	r3, [r3, #0]
   859ac:	005b      	lsls	r3, r3, #1
   859ae:	4a3b      	ldr	r2, [pc, #236]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   859b0:	6013      	str	r3, [r2, #0]
				break;
   859b2:	e008      	b.n	859c6 <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
   859b4:	4b39      	ldr	r3, [pc, #228]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   859b6:	681a      	ldr	r2, [r3, #0]
   859b8:	4613      	mov	r3, r2
   859ba:	005b      	lsls	r3, r3, #1
   859bc:	4413      	add	r3, r2
   859be:	4a37      	ldr	r2, [pc, #220]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   859c0:	6013      	str	r3, [r2, #0]
				break;
   859c2:	e000      	b.n	859c6 <SystemCoreClockUpdate+0x96>
				break;
   859c4:	bf00      	nop
		break;
   859c6:	e046      	b.n	85a56 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   859c8:	4b32      	ldr	r3, [pc, #200]	; (85a94 <SystemCoreClockUpdate+0x164>)
   859ca:	6a1b      	ldr	r3, [r3, #32]
   859cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   859d0:	2b00      	cmp	r3, #0
   859d2:	d003      	beq.n	859dc <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   859d4:	4b31      	ldr	r3, [pc, #196]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   859d6:	4a32      	ldr	r2, [pc, #200]	; (85aa0 <SystemCoreClockUpdate+0x170>)
   859d8:	601a      	str	r2, [r3, #0]
   859da:	e01c      	b.n	85a16 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   859dc:	4b2f      	ldr	r3, [pc, #188]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   859de:	4a31      	ldr	r2, [pc, #196]	; (85aa4 <SystemCoreClockUpdate+0x174>)
   859e0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   859e2:	4b2c      	ldr	r3, [pc, #176]	; (85a94 <SystemCoreClockUpdate+0x164>)
   859e4:	6a1b      	ldr	r3, [r3, #32]
   859e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   859ea:	2b10      	cmp	r3, #16
   859ec:	d004      	beq.n	859f8 <SystemCoreClockUpdate+0xc8>
   859ee:	2b20      	cmp	r3, #32
   859f0:	d008      	beq.n	85a04 <SystemCoreClockUpdate+0xd4>
   859f2:	2b00      	cmp	r3, #0
   859f4:	d00e      	beq.n	85a14 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   859f6:	e00e      	b.n	85a16 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 2U;
   859f8:	4b28      	ldr	r3, [pc, #160]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   859fa:	681b      	ldr	r3, [r3, #0]
   859fc:	005b      	lsls	r3, r3, #1
   859fe:	4a27      	ldr	r2, [pc, #156]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   85a00:	6013      	str	r3, [r2, #0]
				break;
   85a02:	e008      	b.n	85a16 <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 3U;
   85a04:	4b25      	ldr	r3, [pc, #148]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   85a06:	681a      	ldr	r2, [r3, #0]
   85a08:	4613      	mov	r3, r2
   85a0a:	005b      	lsls	r3, r3, #1
   85a0c:	4413      	add	r3, r2
   85a0e:	4a23      	ldr	r2, [pc, #140]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   85a10:	6013      	str	r3, [r2, #0]
				break;
   85a12:	e000      	b.n	85a16 <SystemCoreClockUpdate+0xe6>
				break;
   85a14:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   85a16:	4b1f      	ldr	r3, [pc, #124]	; (85a94 <SystemCoreClockUpdate+0x164>)
   85a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85a1a:	f003 0303 	and.w	r3, r3, #3
   85a1e:	2b02      	cmp	r3, #2
   85a20:	d115      	bne.n	85a4e <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   85a22:	4b1c      	ldr	r3, [pc, #112]	; (85a94 <SystemCoreClockUpdate+0x164>)
   85a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   85a26:	0c1b      	lsrs	r3, r3, #16
   85a28:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                          CKGR_PLLAR_MULA_Pos) + 1U);
   85a2c:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   85a2e:	4a1b      	ldr	r2, [pc, #108]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   85a30:	6812      	ldr	r2, [r2, #0]
   85a32:	fb02 f303 	mul.w	r3, r2, r3
   85a36:	4a19      	ldr	r2, [pc, #100]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   85a38:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   85a3a:	4b16      	ldr	r3, [pc, #88]	; (85a94 <SystemCoreClockUpdate+0x164>)
   85a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   85a3e:	b2db      	uxtb	r3, r3
   85a40:	4a16      	ldr	r2, [pc, #88]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   85a42:	6812      	ldr	r2, [r2, #0]
   85a44:	fbb2 f3f3 	udiv	r3, r2, r3
   85a48:	4a14      	ldr	r2, [pc, #80]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   85a4a:	6013      	str	r3, [r2, #0]
				                           CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   85a4c:	e002      	b.n	85a54 <SystemCoreClockUpdate+0x124>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   85a4e:	4b13      	ldr	r3, [pc, #76]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   85a50:	4a15      	ldr	r2, [pc, #84]	; (85aa8 <SystemCoreClockUpdate+0x178>)
   85a52:	601a      	str	r2, [r3, #0]
		break;
   85a54:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   85a56:	4b0f      	ldr	r3, [pc, #60]	; (85a94 <SystemCoreClockUpdate+0x164>)
   85a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85a5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   85a5e:	2b70      	cmp	r3, #112	; 0x70
   85a60:	d108      	bne.n	85a74 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   85a62:	4b0e      	ldr	r3, [pc, #56]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   85a64:	681b      	ldr	r3, [r3, #0]
   85a66:	4a11      	ldr	r2, [pc, #68]	; (85aac <SystemCoreClockUpdate+0x17c>)
   85a68:	fba2 2303 	umull	r2, r3, r2, r3
   85a6c:	085b      	lsrs	r3, r3, #1
   85a6e:	4a0b      	ldr	r2, [pc, #44]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   85a70:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                           PMC_MCKR_PRES_Pos);
	}
}
   85a72:	e00a      	b.n	85a8a <SystemCoreClockUpdate+0x15a>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   85a74:	4b07      	ldr	r3, [pc, #28]	; (85a94 <SystemCoreClockUpdate+0x164>)
   85a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85a78:	091b      	lsrs	r3, r3, #4
   85a7a:	f003 0307 	and.w	r3, r3, #7
   85a7e:	4a07      	ldr	r2, [pc, #28]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   85a80:	6812      	ldr	r2, [r2, #0]
   85a82:	fa22 f303 	lsr.w	r3, r2, r3
   85a86:	4a05      	ldr	r2, [pc, #20]	; (85a9c <SystemCoreClockUpdate+0x16c>)
   85a88:	6013      	str	r3, [r2, #0]
}
   85a8a:	bf00      	nop
   85a8c:	46bd      	mov	sp, r7
   85a8e:	bc80      	pop	{r7}
   85a90:	4770      	bx	lr
   85a92:	bf00      	nop
   85a94:	400e0400 	.word	0x400e0400
   85a98:	400e1210 	.word	0x400e1210
   85a9c:	200003a8 	.word	0x200003a8
   85aa0:	00b71b00 	.word	0x00b71b00
   85aa4:	003d0900 	.word	0x003d0900
   85aa8:	0e4e1c00 	.word	0x0e4e1c00
   85aac:	aaaaaaab 	.word	0xaaaaaaab

00085ab0 <__libc_init_array>:
   85ab0:	b570      	push	{r4, r5, r6, lr}
   85ab2:	4e0f      	ldr	r6, [pc, #60]	; (85af0 <__libc_init_array+0x40>)
   85ab4:	4d0f      	ldr	r5, [pc, #60]	; (85af4 <__libc_init_array+0x44>)
   85ab6:	1b76      	subs	r6, r6, r5
   85ab8:	10b6      	asrs	r6, r6, #2
   85aba:	bf18      	it	ne
   85abc:	2400      	movne	r4, #0
   85abe:	d005      	beq.n	85acc <__libc_init_array+0x1c>
   85ac0:	3401      	adds	r4, #1
   85ac2:	f855 3b04 	ldr.w	r3, [r5], #4
   85ac6:	4798      	blx	r3
   85ac8:	42a6      	cmp	r6, r4
   85aca:	d1f9      	bne.n	85ac0 <__libc_init_array+0x10>
   85acc:	4e0a      	ldr	r6, [pc, #40]	; (85af8 <__libc_init_array+0x48>)
   85ace:	4d0b      	ldr	r5, [pc, #44]	; (85afc <__libc_init_array+0x4c>)
   85ad0:	f000 f8c4 	bl	85c5c <_init>
   85ad4:	1b76      	subs	r6, r6, r5
   85ad6:	10b6      	asrs	r6, r6, #2
   85ad8:	bf18      	it	ne
   85ada:	2400      	movne	r4, #0
   85adc:	d006      	beq.n	85aec <__libc_init_array+0x3c>
   85ade:	3401      	adds	r4, #1
   85ae0:	f855 3b04 	ldr.w	r3, [r5], #4
   85ae4:	4798      	blx	r3
   85ae6:	42a6      	cmp	r6, r4
   85ae8:	d1f9      	bne.n	85ade <__libc_init_array+0x2e>
   85aea:	bd70      	pop	{r4, r5, r6, pc}
   85aec:	bd70      	pop	{r4, r5, r6, pc}
   85aee:	bf00      	nop
   85af0:	00085c68 	.word	0x00085c68
   85af4:	00085c68 	.word	0x00085c68
   85af8:	00085c70 	.word	0x00085c70
   85afc:	00085c68 	.word	0x00085c68

00085b00 <register_fini>:
   85b00:	4b02      	ldr	r3, [pc, #8]	; (85b0c <register_fini+0xc>)
   85b02:	b113      	cbz	r3, 85b0a <register_fini+0xa>
   85b04:	4802      	ldr	r0, [pc, #8]	; (85b10 <register_fini+0x10>)
   85b06:	f000 b805 	b.w	85b14 <atexit>
   85b0a:	4770      	bx	lr
   85b0c:	00000000 	.word	0x00000000
   85b10:	00085b21 	.word	0x00085b21

00085b14 <atexit>:
   85b14:	2300      	movs	r3, #0
   85b16:	4601      	mov	r1, r0
   85b18:	461a      	mov	r2, r3
   85b1a:	4618      	mov	r0, r3
   85b1c:	f000 b81e 	b.w	85b5c <__register_exitproc>

00085b20 <__libc_fini_array>:
   85b20:	b538      	push	{r3, r4, r5, lr}
   85b22:	4c0a      	ldr	r4, [pc, #40]	; (85b4c <__libc_fini_array+0x2c>)
   85b24:	4d0a      	ldr	r5, [pc, #40]	; (85b50 <__libc_fini_array+0x30>)
   85b26:	1b64      	subs	r4, r4, r5
   85b28:	10a4      	asrs	r4, r4, #2
   85b2a:	d00a      	beq.n	85b42 <__libc_fini_array+0x22>
   85b2c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   85b30:	3b01      	subs	r3, #1
   85b32:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   85b36:	3c01      	subs	r4, #1
   85b38:	f855 3904 	ldr.w	r3, [r5], #-4
   85b3c:	4798      	blx	r3
   85b3e:	2c00      	cmp	r4, #0
   85b40:	d1f9      	bne.n	85b36 <__libc_fini_array+0x16>
   85b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   85b46:	f000 b893 	b.w	85c70 <_fini>
   85b4a:	bf00      	nop
   85b4c:	00085c80 	.word	0x00085c80
   85b50:	00085c7c 	.word	0x00085c7c

00085b54 <__retarget_lock_acquire_recursive>:
   85b54:	4770      	bx	lr
   85b56:	bf00      	nop

00085b58 <__retarget_lock_release_recursive>:
   85b58:	4770      	bx	lr
   85b5a:	bf00      	nop

00085b5c <__register_exitproc>:
   85b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85b60:	4d2c      	ldr	r5, [pc, #176]	; (85c14 <__register_exitproc+0xb8>)
   85b62:	4606      	mov	r6, r0
   85b64:	6828      	ldr	r0, [r5, #0]
   85b66:	4698      	mov	r8, r3
   85b68:	460f      	mov	r7, r1
   85b6a:	4691      	mov	r9, r2
   85b6c:	f7ff fff2 	bl	85b54 <__retarget_lock_acquire_recursive>
   85b70:	4b29      	ldr	r3, [pc, #164]	; (85c18 <__register_exitproc+0xbc>)
   85b72:	681c      	ldr	r4, [r3, #0]
   85b74:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   85b78:	2b00      	cmp	r3, #0
   85b7a:	d03e      	beq.n	85bfa <__register_exitproc+0x9e>
   85b7c:	685a      	ldr	r2, [r3, #4]
   85b7e:	2a1f      	cmp	r2, #31
   85b80:	dc1c      	bgt.n	85bbc <__register_exitproc+0x60>
   85b82:	f102 0e01 	add.w	lr, r2, #1
   85b86:	b176      	cbz	r6, 85ba6 <__register_exitproc+0x4a>
   85b88:	2101      	movs	r1, #1
   85b8a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   85b8e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   85b92:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   85b96:	4091      	lsls	r1, r2
   85b98:	4308      	orrs	r0, r1
   85b9a:	2e02      	cmp	r6, #2
   85b9c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   85ba0:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   85ba4:	d023      	beq.n	85bee <__register_exitproc+0x92>
   85ba6:	3202      	adds	r2, #2
   85ba8:	f8c3 e004 	str.w	lr, [r3, #4]
   85bac:	6828      	ldr	r0, [r5, #0]
   85bae:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   85bb2:	f7ff ffd1 	bl	85b58 <__retarget_lock_release_recursive>
   85bb6:	2000      	movs	r0, #0
   85bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85bbc:	4b17      	ldr	r3, [pc, #92]	; (85c1c <__register_exitproc+0xc0>)
   85bbe:	b30b      	cbz	r3, 85c04 <__register_exitproc+0xa8>
   85bc0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   85bc4:	f3af 8000 	nop.w
   85bc8:	4603      	mov	r3, r0
   85bca:	b1d8      	cbz	r0, 85c04 <__register_exitproc+0xa8>
   85bcc:	2000      	movs	r0, #0
   85bce:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   85bd2:	f04f 0e01 	mov.w	lr, #1
   85bd6:	6058      	str	r0, [r3, #4]
   85bd8:	6019      	str	r1, [r3, #0]
   85bda:	4602      	mov	r2, r0
   85bdc:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   85be0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   85be4:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   85be8:	2e00      	cmp	r6, #0
   85bea:	d0dc      	beq.n	85ba6 <__register_exitproc+0x4a>
   85bec:	e7cc      	b.n	85b88 <__register_exitproc+0x2c>
   85bee:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   85bf2:	4301      	orrs	r1, r0
   85bf4:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   85bf8:	e7d5      	b.n	85ba6 <__register_exitproc+0x4a>
   85bfa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   85bfe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   85c02:	e7bb      	b.n	85b7c <__register_exitproc+0x20>
   85c04:	6828      	ldr	r0, [r5, #0]
   85c06:	f7ff ffa7 	bl	85b58 <__retarget_lock_release_recursive>
   85c0a:	f04f 30ff 	mov.w	r0, #4294967295
   85c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85c12:	bf00      	nop
   85c14:	200007d8 	.word	0x200007d8
   85c18:	00085c58 	.word	0x00085c58
   85c1c:	00000000 	.word	0x00000000
   85c20:	00000000 	.word	0x00000000
   85c24:	00000000 	.word	0x00000000
   85c28:	aaaaaa00 	.word	0xaaaaaa00
   85c2c:	aaaaaaaa 	.word	0xaaaaaaaa
   85c30:	eeeeeeaa 	.word	0xeeeeeeaa
   85c34:	eeeeeeee 	.word	0xeeeeeeee
   85c38:	fffffeee 	.word	0xfffffeee
   85c3c:	ffffffff 	.word	0xffffffff
   85c40:	ffffffff 	.word	0xffffffff
   85c44:	dfbf7fff 	.word	0xdfbf7fff
   85c48:	fdfbf7ef 	.word	0xfdfbf7ef
   85c4c:	dfbf7efc 	.word	0xdfbf7efc
   85c50:	fdfbf7ef 	.word	0xfdfbf7ef
   85c54:	0000007e 	.word	0x0000007e

00085c58 <_global_impure_ptr>:
   85c58:	200003b0                                ... 

00085c5c <_init>:
   85c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85c5e:	bf00      	nop
   85c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85c62:	bc08      	pop	{r3}
   85c64:	469e      	mov	lr, r3
   85c66:	4770      	bx	lr

00085c68 <__init_array_start>:
   85c68:	00085b01 	.word	0x00085b01

00085c6c <__frame_dummy_init_array_entry>:
   85c6c:	000800e1                                ....

00085c70 <_fini>:
   85c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85c72:	bf00      	nop
   85c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85c76:	bc08      	pop	{r3}
   85c78:	469e      	mov	lr, r3
   85c7a:	4770      	bx	lr

00085c7c <__fini_array_start>:
   85c7c:	000800bd 	.word	0x000800bd

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b480      	push	{r7}
20000002:	b089      	sub	sp, #36	; 0x24
20000004:	af00      	add	r7, sp, #0
20000006:	60f8      	str	r0, [r7, #12]
20000008:	60b9      	str	r1, [r7, #8]
2000000a:	607a      	str	r2, [r7, #4]
2000000c:	603b      	str	r3, [r7, #0]
#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000000e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20000012:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000014:	683b      	ldr	r3, [r7, #0]
20000016:	2b00      	cmp	r3, #0
20000018:	d101      	bne.n	2000001e <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
2000001a:	2302      	movs	r3, #2
2000001c:	e03c      	b.n	20000098 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000001e:	68fb      	ldr	r3, [r7, #12]
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000026:	68fb      	ldr	r3, [r7, #12]
20000028:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000002a:	68bb      	ldr	r3, [r7, #8]
2000002c:	b2db      	uxtb	r3, r3
2000002e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000032:	68fb      	ldr	r3, [r7, #12]
20000034:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000036:	68fb      	ldr	r3, [r7, #12]
20000038:	689b      	ldr	r3, [r3, #8]
2000003a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000003c:	697b      	ldr	r3, [r7, #20]
2000003e:	f003 0301 	and.w	r3, r3, #1
20000042:	2b01      	cmp	r3, #1
20000044:	d0f7      	beq.n	20000036 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000046:	2300      	movs	r3, #0
20000048:	61fb      	str	r3, [r7, #28]
2000004a:	e00c      	b.n	20000066 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000004c:	69fb      	ldr	r3, [r7, #28]
2000004e:	009b      	lsls	r3, r3, #2
20000050:	683a      	ldr	r2, [r7, #0]
20000052:	4413      	add	r3, r2
20000054:	69fa      	ldr	r2, [r7, #28]
20000056:	0092      	lsls	r2, r2, #2
20000058:	69b9      	ldr	r1, [r7, #24]
2000005a:	440a      	add	r2, r1
2000005c:	6812      	ldr	r2, [r2, #0]
2000005e:	601a      	str	r2, [r3, #0]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000060:	69fb      	ldr	r3, [r7, #28]
20000062:	3301      	adds	r3, #1
20000064:	61fb      	str	r3, [r7, #28]
20000066:	69fa      	ldr	r2, [r7, #28]
20000068:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000006a:	429a      	cmp	r2, r3
2000006c:	d3ee      	bcc.n	2000004c <efc_perform_read_sequence+0x4c>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	b2db      	uxtb	r3, r3
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000072:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000007a:	68fb      	ldr	r3, [r7, #12]
2000007c:	689b      	ldr	r3, [r3, #8]
2000007e:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	697b      	ldr	r3, [r7, #20]
20000082:	f003 0301 	and.w	r3, r3, #1
20000086:	2b01      	cmp	r3, #1
20000088:	d1f7      	bne.n	2000007a <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	681b      	ldr	r3, [r3, #0]
2000008e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
20000096:	2300      	movs	r3, #0
}
20000098:	4618      	mov	r0, r3
2000009a:	3724      	adds	r7, #36	; 0x24
2000009c:	46bd      	mov	sp, r7
2000009e:	bc80      	pop	{r7}
200000a0:	4770      	bx	lr

200000a2 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000a2:	b480      	push	{r7}
200000a4:	b083      	sub	sp, #12
200000a6:	af00      	add	r7, sp, #0
200000a8:	6078      	str	r0, [r7, #4]
200000aa:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	683a      	ldr	r2, [r7, #0]
200000b0:	601a      	str	r2, [r3, #0]
}
200000b2:	bf00      	nop
200000b4:	370c      	adds	r7, #12
200000b6:	46bd      	mov	sp, r7
200000b8:	bc80      	pop	{r7}
200000ba:	4770      	bx	lr

200000bc <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000bc:	b480      	push	{r7}
200000be:	b085      	sub	sp, #20
200000c0:	af00      	add	r7, sp, #0
200000c2:	6078      	str	r0, [r7, #4]
200000c4:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000c6:	687b      	ldr	r3, [r7, #4]
200000c8:	683a      	ldr	r2, [r7, #0]
200000ca:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	689b      	ldr	r3, [r3, #8]
200000d0:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000d2:	68fb      	ldr	r3, [r7, #12]
200000d4:	f003 0301 	and.w	r3, r3, #1
200000d8:	2b01      	cmp	r3, #1
200000da:	d1f7      	bne.n	200000cc <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000dc:	68fb      	ldr	r3, [r7, #12]
200000de:	f003 0306 	and.w	r3, r3, #6
}
200000e2:	4618      	mov	r0, r3
200000e4:	3714      	adds	r7, #20
200000e6:	46bd      	mov	sp, r7
200000e8:	bc80      	pop	{r7}
200000ea:	4770      	bx	lr

200000ec <SystemInit>:
{
200000ec:	b480      	push	{r7}
200000ee:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000f0:	4b2a      	ldr	r3, [pc, #168]	; (2000019c <SystemInit+0xb0>)
200000f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000f6:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000f8:	4b29      	ldr	r3, [pc, #164]	; (200001a0 <SystemInit+0xb4>)
200000fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000fe:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000100:	4b28      	ldr	r3, [pc, #160]	; (200001a4 <SystemInit+0xb8>)
20000102:	6a1b      	ldr	r3, [r3, #32]
20000104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20000108:	2b00      	cmp	r3, #0
2000010a:	d109      	bne.n	20000120 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000010c:	4b25      	ldr	r3, [pc, #148]	; (200001a4 <SystemInit+0xb8>)
2000010e:	4a26      	ldr	r2, [pc, #152]	; (200001a8 <SystemInit+0xbc>)
20000110:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000112:	bf00      	nop
20000114:	4b23      	ldr	r3, [pc, #140]	; (200001a4 <SystemInit+0xb8>)
20000116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000118:	f003 0301 	and.w	r3, r3, #1
2000011c:	2b00      	cmp	r3, #0
2000011e:	d0f9      	beq.n	20000114 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000120:	4b20      	ldr	r3, [pc, #128]	; (200001a4 <SystemInit+0xb8>)
20000122:	4a22      	ldr	r2, [pc, #136]	; (200001ac <SystemInit+0xc0>)
20000124:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000126:	bf00      	nop
20000128:	4b1e      	ldr	r3, [pc, #120]	; (200001a4 <SystemInit+0xb8>)
2000012a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000012c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000130:	2b00      	cmp	r3, #0
20000132:	d0f9      	beq.n	20000128 <SystemInit+0x3c>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000134:	4a1b      	ldr	r2, [pc, #108]	; (200001a4 <SystemInit+0xb8>)
20000136:	4b1b      	ldr	r3, [pc, #108]	; (200001a4 <SystemInit+0xb8>)
20000138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000013a:	f023 0303 	bic.w	r3, r3, #3
2000013e:	f043 0301 	orr.w	r3, r3, #1
20000142:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000144:	bf00      	nop
20000146:	4b17      	ldr	r3, [pc, #92]	; (200001a4 <SystemInit+0xb8>)
20000148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000014a:	f003 0308 	and.w	r3, r3, #8
2000014e:	2b00      	cmp	r3, #0
20000150:	d0f9      	beq.n	20000146 <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000152:	4b14      	ldr	r3, [pc, #80]	; (200001a4 <SystemInit+0xb8>)
20000154:	4a16      	ldr	r2, [pc, #88]	; (200001b0 <SystemInit+0xc4>)
20000156:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000158:	bf00      	nop
2000015a:	4b12      	ldr	r3, [pc, #72]	; (200001a4 <SystemInit+0xb8>)
2000015c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000015e:	f003 0302 	and.w	r3, r3, #2
20000162:	2b00      	cmp	r3, #0
20000164:	d0f9      	beq.n	2000015a <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000166:	4b0f      	ldr	r3, [pc, #60]	; (200001a4 <SystemInit+0xb8>)
20000168:	2211      	movs	r2, #17
2000016a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000016c:	bf00      	nop
2000016e:	4b0d      	ldr	r3, [pc, #52]	; (200001a4 <SystemInit+0xb8>)
20000170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000172:	f003 0308 	and.w	r3, r3, #8
20000176:	2b00      	cmp	r3, #0
20000178:	d0f9      	beq.n	2000016e <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000017a:	4b0a      	ldr	r3, [pc, #40]	; (200001a4 <SystemInit+0xb8>)
2000017c:	2212      	movs	r2, #18
2000017e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000180:	bf00      	nop
20000182:	4b08      	ldr	r3, [pc, #32]	; (200001a4 <SystemInit+0xb8>)
20000184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000186:	f003 0308 	and.w	r3, r3, #8
2000018a:	2b00      	cmp	r3, #0
2000018c:	d0f9      	beq.n	20000182 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2000018e:	4b09      	ldr	r3, [pc, #36]	; (200001b4 <SystemInit+0xc8>)
20000190:	4a09      	ldr	r2, [pc, #36]	; (200001b8 <SystemInit+0xcc>)
20000192:	601a      	str	r2, [r3, #0]
}
20000194:	bf00      	nop
20000196:	46bd      	mov	sp, r7
20000198:	bc80      	pop	{r7}
2000019a:	4770      	bx	lr
2000019c:	400e0800 	.word	0x400e0800
200001a0:	400e0a00 	.word	0x400e0a00
200001a4:	400e0400 	.word	0x400e0400
200001a8:	00370809 	.word	0x00370809
200001ac:	01370809 	.word	0x01370809
200001b0:	200f3f01 	.word	0x200f3f01
200001b4:	200003a8 	.word	0x200003a8
200001b8:	05b8d800 	.word	0x05b8d800

200001bc <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200001bc:	b480      	push	{r7}
200001be:	b083      	sub	sp, #12
200001c0:	af00      	add	r7, sp, #0
200001c2:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200001c4:	687b      	ldr	r3, [r7, #4]
200001c6:	4a1f      	ldr	r2, [pc, #124]	; (20000244 <system_init_flash+0x88>)
200001c8:	4293      	cmp	r3, r2
200001ca:	d806      	bhi.n	200001da <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200001cc:	4b1e      	ldr	r3, [pc, #120]	; (20000248 <system_init_flash+0x8c>)
200001ce:	2200      	movs	r2, #0
200001d0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200001d2:	4b1e      	ldr	r3, [pc, #120]	; (2000024c <system_init_flash+0x90>)
200001d4:	2200      	movs	r2, #0
200001d6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
	}
}
200001d8:	e02e      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200001da:	687b      	ldr	r3, [r7, #4]
200001dc:	4a1c      	ldr	r2, [pc, #112]	; (20000250 <system_init_flash+0x94>)
200001de:	4293      	cmp	r3, r2
200001e0:	d808      	bhi.n	200001f4 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200001e2:	4b19      	ldr	r3, [pc, #100]	; (20000248 <system_init_flash+0x8c>)
200001e4:	f44f 7280 	mov.w	r2, #256	; 0x100
200001e8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200001ea:	4b18      	ldr	r3, [pc, #96]	; (2000024c <system_init_flash+0x90>)
200001ec:	f44f 7280 	mov.w	r2, #256	; 0x100
200001f0:	601a      	str	r2, [r3, #0]
}
200001f2:	e021      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200001f4:	687b      	ldr	r3, [r7, #4]
200001f6:	4a17      	ldr	r2, [pc, #92]	; (20000254 <system_init_flash+0x98>)
200001f8:	4293      	cmp	r3, r2
200001fa:	d808      	bhi.n	2000020e <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200001fc:	4b12      	ldr	r3, [pc, #72]	; (20000248 <system_init_flash+0x8c>)
200001fe:	f44f 7200 	mov.w	r2, #512	; 0x200
20000202:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000204:	4b11      	ldr	r3, [pc, #68]	; (2000024c <system_init_flash+0x90>)
20000206:	f44f 7200 	mov.w	r2, #512	; 0x200
2000020a:	601a      	str	r2, [r3, #0]
}
2000020c:	e014      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000020e:	687b      	ldr	r3, [r7, #4]
20000210:	4a11      	ldr	r2, [pc, #68]	; (20000258 <system_init_flash+0x9c>)
20000212:	4293      	cmp	r3, r2
20000214:	d808      	bhi.n	20000228 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000216:	4b0c      	ldr	r3, [pc, #48]	; (20000248 <system_init_flash+0x8c>)
20000218:	f44f 7240 	mov.w	r2, #768	; 0x300
2000021c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <system_init_flash+0x90>)
20000220:	f44f 7240 	mov.w	r2, #768	; 0x300
20000224:	601a      	str	r2, [r3, #0]
}
20000226:	e007      	b.n	20000238 <system_init_flash+0x7c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000228:	4b07      	ldr	r3, [pc, #28]	; (20000248 <system_init_flash+0x8c>)
2000022a:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000022e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000230:	4b06      	ldr	r3, [pc, #24]	; (2000024c <system_init_flash+0x90>)
20000232:	f44f 6280 	mov.w	r2, #1024	; 0x400
20000236:	601a      	str	r2, [r3, #0]
}
20000238:	bf00      	nop
2000023a:	370c      	adds	r7, #12
2000023c:	46bd      	mov	sp, r7
2000023e:	bc80      	pop	{r7}
20000240:	4770      	bx	lr
20000242:	bf00      	nop
20000244:	016e35ff 	.word	0x016e35ff
20000248:	400e0800 	.word	0x400e0800
2000024c:	400e0a00 	.word	0x400e0a00
20000250:	026259ff 	.word	0x026259ff
20000254:	044aa1ff 	.word	0x044aa1ff
20000258:	0501bcff 	.word	0x0501bcff

2000025c <usb_serial_number>:
2000025c:	30303030 30303030 30303030 44414544     000000000000DEAD
2000026c:	46454542 00000000 00000000 00000000     BEEF............
2000027c:	00000000                                ....

20000280 <pwr_list>:
20000280:	000808e5 00080905 00080925              ........%...

2000028c <main_b_vendor_enable>:
2000028c:	00000001                                ....

20000290 <xram>:
20000290:	60000000                                ...`

20000294 <udi_api_vendor>:
20000294:	00083f71 00083fb1 00083fcd 00084021     q?...?...?..!@..
200002a4:	00000000                                ....

200002a8 <udc_string_desc_languageid>:
200002a8:	04090304                                ....

200002ac <udc_string_manufacturer_name>:
200002ac:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
200002bc:	636e4920 0000002e                        Inc....

200002c4 <udc_string_product_name>:
200002c4:	6c6c6142 69747369 65472063 5743206c     Ballistic Gel CW
200002d4:	00313235                                521.

200002d8 <udc_string_desc>:
200002d8:	00000300 00000000 00000000 00000000     ................
200002e8:	00000000 00000000 00000000 00000000     ................
200002f8:	00000000 00000000 00000000 00000000     ................
20000308:	00000000 00000000 00000000 00000000     ................
20000318:	00010000                                         ..

2000031a <g_interrupt_enabled>:
2000031a:	01120001                                         ..

2000031c <udc_device_desc>:
2000031c:	02000112 40000000 c5212b3e 02010100     .......@>+!.....
2000032c:	00000103                                ....

20000330 <udc_device_qual>:
20000330:	0200060a 40000000 00000001              .......@....

2000033c <udc_desc_fs>:
2000033c:	00200209 80000101 000409fa ffff0200     .. .............
2000034c:	050700ff 00400281 02050700 00004002     ......@......@..

2000035c <udc_desc_hs>:
2000035c:	00200209 80000101 000409fa ffff0200     .. .............
2000036c:	050700ff 02000281 02050700 00020002     ................

2000037c <udi_apis>:
2000037c:	20000294                                ... 

20000380 <udc_config_lsfs>:
20000380:	2000033c 2000037c                       <.. |.. 

20000388 <udc_config_hs>:
20000388:	2000035c 2000037c                       \.. |.. 

20000390 <udc_config>:
20000390:	2000031c 20000380 2000031c 20000330     ... ... ... 0.. 
200003a0:	20000388 00000000                       ... ....

200003a8 <SystemCoreClock>:
200003a8:	003d0900 00000000                       ..=.....

200003b0 <impure_data>:
200003b0:	00000000 2000069c 20000704 2000076c     ....... ... l.. 
200003c0:	00000000 00000000 00000000 00000000     ................
200003d0:	00000000 00000000 00000000 00000000     ................
200003e0:	00000000 00000000 00000000 00000000     ................
200003f0:	00000000 00000000 00000000 00000000     ................
20000400:	00000000 00000000 00000000 00000000     ................
20000410:	00000000 00000000 00000000 00000000     ................
20000420:	00000000 00000000 00000000 00000000     ................
20000430:	00000000 00000000 00000000 00000000     ................
20000440:	00000000 00000000 00000000 00000000     ................
20000450:	00000000 00000000 00000001 00000000     ................
20000460:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
20000470:	00000000 00000000 00000000 00000000     ................
20000480:	00000000 00000000 00000000 00000000     ................
20000490:	00000000 00000000 00000000 00000000     ................
200004a0:	00000000 00000000 00000000 00000000     ................
200004b0:	00000000 00000000 00000000 00000000     ................
200004c0:	00000000 00000000 00000000 00000000     ................
200004d0:	00000000 00000000 00000000 00000000     ................
200004e0:	00000000 00000000 00000000 00000000     ................
200004f0:	00000000 00000000 00000000 00000000     ................
20000500:	00000000 00000000 00000000 00000000     ................
20000510:	00000000 00000000 00000000 00000000     ................
20000520:	00000000 00000000 00000000 00000000     ................
20000530:	00000000 00000000 00000000 00000000     ................
20000540:	00000000 00000000 00000000 00000000     ................
20000550:	00000000 00000000 00000000 00000000     ................
20000560:	00000000 00000000 00000000 00000000     ................
20000570:	00000000 00000000 00000000 00000000     ................
20000580:	00000000 00000000 00000000 00000000     ................
20000590:	00000000 00000000 00000000 00000000     ................
200005a0:	00000000 00000000 00000000 00000000     ................
200005b0:	00000000 00000000 00000000 00000000     ................
200005c0:	00000000 00000000 00000000 00000000     ................
200005d0:	00000000 00000000 00000000 00000000     ................
200005e0:	00000000 00000000 00000000 00000000     ................
200005f0:	00000000 00000000 00000000 00000000     ................
20000600:	00000000 00000000 00000000 00000000     ................
20000610:	00000000 00000000 00000000 00000000     ................
20000620:	00000000 00000000 00000000 00000000     ................
20000630:	00000000 00000000 00000000 00000000     ................
20000640:	00000000 00000000 00000000 00000000     ................
20000650:	00000000 00000000 00000000 00000000     ................
20000660:	00000000 00000000 00000000 00000000     ................
20000670:	00000000 00000000 00000000 00000000     ................
20000680:	00000000 00000000 00000000 00000000     ................
20000690:	00000000 00000000 00000000 00000000     ................
200006a0:	00000000 00000000 00000000 00000000     ................
200006b0:	00000000 00000000 00000000 00000000     ................
200006c0:	00000000 00000000 00000000 00000000     ................
200006d0:	00000000 00000000 00000000 00000000     ................
200006e0:	00000000 00000000 00000000 00000000     ................
200006f0:	00000000 00000000 00000000 00000000     ................
20000700:	00000000 00000000 00000000 00000000     ................
20000710:	00000000 00000000 00000000 00000000     ................
20000720:	00000000 00000000 00000000 00000000     ................
20000730:	00000000 00000000 00000000 00000000     ................
20000740:	00000000 00000000 00000000 00000000     ................
20000750:	00000000 00000000 00000000 00000000     ................
20000760:	00000000 00000000 00000000 00000000     ................
20000770:	00000000 00000000 00000000 00000000     ................
20000780:	00000000 00000000 00000000 00000000     ................
20000790:	00000000 00000000 00000000 00000000     ................
200007a0:	00000000 00000000 00000000 00000000     ................
200007b0:	00000000 00000000 00000000 00000000     ................
200007c0:	00000000 00000000 00000000 00000000     ................
200007d0:	00000000 00000000                       ........

200007d8 <__atexit_recursive_mutex>:
200007d8:	20000d78                                x.. 
