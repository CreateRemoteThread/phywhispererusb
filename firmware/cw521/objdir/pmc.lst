   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "pmc.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .section .text.pmc_mck_set_prescaler,"ax",%progbits
  27              	 .align 1
  28              	 .global pmc_mck_set_prescaler
  29              	 .syntax unified
  30              	 .thumb
  31              	 .thumb_func
  32              	 .fpu softvfp
  34              	pmc_mck_set_prescaler:
  35              	.LFB67:
  36              	 .file 1 ".././hal/sam3u1c/pmc.c"
   1:.././hal/sam3u1c/pmc.c **** /**
   2:.././hal/sam3u1c/pmc.c ****  * \file
   3:.././hal/sam3u1c/pmc.c ****  *
   4:.././hal/sam3u1c/pmc.c ****  * \brief Power Management Controller (PMC) driver for SAM.
   5:.././hal/sam3u1c/pmc.c ****  *
   6:.././hal/sam3u1c/pmc.c ****  * Copyright (c) 2011 - 2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/pmc.c ****  *
   8:.././hal/sam3u1c/pmc.c ****  * \asf_license_start
   9:.././hal/sam3u1c/pmc.c ****  *
  10:.././hal/sam3u1c/pmc.c ****  * \page License
  11:.././hal/sam3u1c/pmc.c ****  *
  12:.././hal/sam3u1c/pmc.c ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/pmc.c ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/pmc.c ****  *
  15:.././hal/sam3u1c/pmc.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/pmc.c ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/pmc.c ****  *
  18:.././hal/sam3u1c/pmc.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/pmc.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/pmc.c ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/pmc.c ****  *
  22:.././hal/sam3u1c/pmc.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/pmc.c ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/pmc.c ****  *
  25:.././hal/sam3u1c/pmc.c ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/pmc.c ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/pmc.c ****  *
  28:.././hal/sam3u1c/pmc.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/pmc.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/pmc.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/pmc.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/pmc.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/pmc.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/pmc.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/pmc.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/pmc.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/pmc.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/pmc.c ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/pmc.c ****  *
  40:.././hal/sam3u1c/pmc.c ****  * \asf_license_stop
  41:.././hal/sam3u1c/pmc.c ****  *
  42:.././hal/sam3u1c/pmc.c ****  */
  43:.././hal/sam3u1c/pmc.c **** 
  44:.././hal/sam3u1c/pmc.c **** #include "pmc.h"
  45:.././hal/sam3u1c/pmc.c **** 
  46:.././hal/sam3u1c/pmc.c **** #if (SAM3N)
  47:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    31
  48:.././hal/sam3u1c/pmc.c **** #elif (SAM3XA)
  49:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    44
  50:.././hal/sam3u1c/pmc.c **** #elif (SAM3U)
  51:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    29
  52:.././hal/sam3u1c/pmc.c **** #elif (SAM3S || SAM4S)
  53:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    34
  54:.././hal/sam3u1c/pmc.c **** #elif (SAM4E)
  55:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    47
  56:.././hal/sam3u1c/pmc.c **** #elif (SAM4N)
  57:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    31
  58:.././hal/sam3u1c/pmc.c **** #elif (SAM4C || SAM4CM || SAM4CP)
  59:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    43
  60:.././hal/sam3u1c/pmc.c **** #elif (SAMG51)
  61:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    47
  62:.././hal/sam3u1c/pmc.c **** #elif (SAMG53)
  63:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    47
  64:.././hal/sam3u1c/pmc.c **** #elif (SAMG54)
  65:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    47
  66:.././hal/sam3u1c/pmc.c **** #elif (SAMG55)
  67:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    50
  68:.././hal/sam3u1c/pmc.c **** #endif
  69:.././hal/sam3u1c/pmc.c **** 
  70:.././hal/sam3u1c/pmc.c **** /// @cond 0
  71:.././hal/sam3u1c/pmc.c **** /**INDENT-OFF**/
  72:.././hal/sam3u1c/pmc.c **** #ifdef __cplusplus
  73:.././hal/sam3u1c/pmc.c **** extern "C" {
  74:.././hal/sam3u1c/pmc.c **** #endif
  75:.././hal/sam3u1c/pmc.c **** /**INDENT-ON**/
  76:.././hal/sam3u1c/pmc.c **** /// @endcond
  77:.././hal/sam3u1c/pmc.c **** 
  78:.././hal/sam3u1c/pmc.c **** /**
  79:.././hal/sam3u1c/pmc.c ****  * \defgroup sam_drivers_pmc_group Power Management Controller (PMC)
  80:.././hal/sam3u1c/pmc.c ****  *
  81:.././hal/sam3u1c/pmc.c ****  * \par Purpose
  82:.././hal/sam3u1c/pmc.c ****  *
  83:.././hal/sam3u1c/pmc.c ****  * The Power Management Controller (PMC) optimizes power consumption by
  84:.././hal/sam3u1c/pmc.c ****  * controlling all system and user peripheral clocks. The PMC enables/disables
  85:.././hal/sam3u1c/pmc.c ****  * the clock inputs to many of the peripherals and the Cortex-M Processor.
  86:.././hal/sam3u1c/pmc.c ****  *
  87:.././hal/sam3u1c/pmc.c ****  * @{
  88:.././hal/sam3u1c/pmc.c ****  */
  89:.././hal/sam3u1c/pmc.c **** 
  90:.././hal/sam3u1c/pmc.c **** /**
  91:.././hal/sam3u1c/pmc.c ****  * \brief Set the prescaler of the MCK.
  92:.././hal/sam3u1c/pmc.c ****  *
  93:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Prescaler value.
  94:.././hal/sam3u1c/pmc.c ****  */
  95:.././hal/sam3u1c/pmc.c **** void pmc_mck_set_prescaler(uint32_t ul_pres)
  96:.././hal/sam3u1c/pmc.c **** {
  37              	 .loc 1 96 0
  38              	 .cfi_startproc
  39              	 
  40              	 
  41              	 
  42 0000 80B4     	 push {r7}
  43              	.LCFI0:
  44              	 .cfi_def_cfa_offset 4
  45              	 .cfi_offset 7,-4
  46 0002 83B0     	 sub sp,sp,#12
  47              	.LCFI1:
  48              	 .cfi_def_cfa_offset 16
  49 0004 00AF     	 add r7,sp,#0
  50              	.LCFI2:
  51              	 .cfi_def_cfa_register 7
  52 0006 7860     	 str r0,[r7,#4]
  97:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
  53              	 .loc 1 97 0
  54 0008 0949     	 ldr r1,.L3
  98:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  55              	 .loc 1 98 0
  56 000a 094B     	 ldr r3,.L3
  57 000c 1B6B     	 ldr r3,[r3,#48]
  58 000e 23F07002 	 bic r2,r3,#112
  59 0012 7B68     	 ldr r3,[r7,#4]
  60 0014 1343     	 orrs r3,r3,r2
  97:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
  61              	 .loc 1 97 0
  62 0016 0B63     	 str r3,[r1,#48]
  99:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  63              	 .loc 1 99 0
  64 0018 00BF     	 nop
  65              	.L2:
  66              	 .loc 1 99 0 is_stmt 0 discriminator 1
  67 001a 054B     	 ldr r3,.L3
  68 001c 9B6E     	 ldr r3,[r3,#104]
  69 001e 03F00803 	 and r3,r3,#8
  70 0022 002B     	 cmp r3,#0
  71 0024 F9D0     	 beq .L2
 100:.././hal/sam3u1c/pmc.c **** }
  72              	 .loc 1 100 0 is_stmt 1
  73 0026 00BF     	 nop
  74 0028 0C37     	 adds r7,r7,#12
  75              	.LCFI3:
  76              	 .cfi_def_cfa_offset 4
  77 002a BD46     	 mov sp,r7
  78              	.LCFI4:
  79              	 .cfi_def_cfa_register 13
  80              	 
  81 002c 80BC     	 pop {r7}
  82              	.LCFI5:
  83              	 .cfi_restore 7
  84              	 .cfi_def_cfa_offset 0
  85 002e 7047     	 bx lr
  86              	.L4:
  87              	 .align 2
  88              	.L3:
  89 0030 00040E40 	 .word 1074660352
  90              	 .cfi_endproc
  91              	.LFE67:
  93              	 .section .text.pmc_mck_set_source,"ax",%progbits
  94              	 .align 1
  95              	 .global pmc_mck_set_source
  96              	 .syntax unified
  97              	 .thumb
  98              	 .thumb_func
  99              	 .fpu softvfp
 101              	pmc_mck_set_source:
 102              	.LFB68:
 101:.././hal/sam3u1c/pmc.c **** 
 102:.././hal/sam3u1c/pmc.c **** /**
 103:.././hal/sam3u1c/pmc.c ****  * \brief Set the source of the MCK.
 104:.././hal/sam3u1c/pmc.c ****  *
 105:.././hal/sam3u1c/pmc.c ****  * \param ul_source Source selection value.
 106:.././hal/sam3u1c/pmc.c ****  */
 107:.././hal/sam3u1c/pmc.c **** void pmc_mck_set_source(uint32_t ul_source)
 108:.././hal/sam3u1c/pmc.c **** {
 103              	 .loc 1 108 0
 104              	 .cfi_startproc
 105              	 
 106              	 
 107              	 
 108 0000 80B4     	 push {r7}
 109              	.LCFI6:
 110              	 .cfi_def_cfa_offset 4
 111              	 .cfi_offset 7,-4
 112 0002 83B0     	 sub sp,sp,#12
 113              	.LCFI7:
 114              	 .cfi_def_cfa_offset 16
 115 0004 00AF     	 add r7,sp,#0
 116              	.LCFI8:
 117              	 .cfi_def_cfa_register 7
 118 0006 7860     	 str r0,[r7,#4]
 109:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
 119              	 .loc 1 109 0
 120 0008 0949     	 ldr r1,.L7
 110:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) | ul_source;
 121              	 .loc 1 110 0
 122 000a 094B     	 ldr r3,.L7
 123 000c 1B6B     	 ldr r3,[r3,#48]
 124 000e 23F00302 	 bic r2,r3,#3
 125 0012 7B68     	 ldr r3,[r7,#4]
 126 0014 1343     	 orrs r3,r3,r2
 109:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
 127              	 .loc 1 109 0
 128 0016 0B63     	 str r3,[r1,#48]
 111:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
 129              	 .loc 1 111 0
 130 0018 00BF     	 nop
 131              	.L6:
 132              	 .loc 1 111 0 is_stmt 0 discriminator 1
 133 001a 054B     	 ldr r3,.L7
 134 001c 9B6E     	 ldr r3,[r3,#104]
 135 001e 03F00803 	 and r3,r3,#8
 136 0022 002B     	 cmp r3,#0
 137 0024 F9D0     	 beq .L6
 112:.././hal/sam3u1c/pmc.c **** }
 138              	 .loc 1 112 0 is_stmt 1
 139 0026 00BF     	 nop
 140 0028 0C37     	 adds r7,r7,#12
 141              	.LCFI9:
 142              	 .cfi_def_cfa_offset 4
 143 002a BD46     	 mov sp,r7
 144              	.LCFI10:
 145              	 .cfi_def_cfa_register 13
 146              	 
 147 002c 80BC     	 pop {r7}
 148              	.LCFI11:
 149              	 .cfi_restore 7
 150              	 .cfi_def_cfa_offset 0
 151 002e 7047     	 bx lr
 152              	.L8:
 153              	 .align 2
 154              	.L7:
 155 0030 00040E40 	 .word 1074660352
 156              	 .cfi_endproc
 157              	.LFE68:
 159              	 .section .text.pmc_switch_mck_to_sclk,"ax",%progbits
 160              	 .align 1
 161              	 .global pmc_switch_mck_to_sclk
 162              	 .syntax unified
 163              	 .thumb
 164              	 .thumb_func
 165              	 .fpu softvfp
 167              	pmc_switch_mck_to_sclk:
 168              	.LFB69:
 113:.././hal/sam3u1c/pmc.c **** 
 114:.././hal/sam3u1c/pmc.c **** /**
 115:.././hal/sam3u1c/pmc.c ****  * \brief Switch master clock source selection to slow clock.
 116:.././hal/sam3u1c/pmc.c ****  *
 117:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Processor clock prescaler.
 118:.././hal/sam3u1c/pmc.c ****  *
 119:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 120:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 121:.././hal/sam3u1c/pmc.c ****  */
 122:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_mck_to_sclk(uint32_t ul_pres)
 123:.././hal/sam3u1c/pmc.c **** {
 169              	 .loc 1 123 0
 170              	 .cfi_startproc
 171              	 
 172              	 
 173              	 
 174 0000 80B4     	 push {r7}
 175              	.LCFI12:
 176              	 .cfi_def_cfa_offset 4
 177              	 .cfi_offset 7,-4
 178 0002 85B0     	 sub sp,sp,#20
 179              	.LCFI13:
 180              	 .cfi_def_cfa_offset 24
 181 0004 00AF     	 add r7,sp,#0
 182              	.LCFI14:
 183              	 .cfi_def_cfa_register 7
 184 0006 7860     	 str r0,[r7,#4]
 124:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 125:.././hal/sam3u1c/pmc.c **** 
 126:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 185              	 .loc 1 126 0
 186 0008 1B4A     	 ldr r2,.L17
 187 000a 1B4B     	 ldr r3,.L17
 188 000c 1B6B     	 ldr r3,[r3,#48]
 189 000e 23F00303 	 bic r3,r3,#3
 190 0012 1363     	 str r3,[r2,#48]
 127:.././hal/sam3u1c/pmc.c **** 			PMC_MCKR_CSS_SLOW_CLK;
 128:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 191              	 .loc 1 128 0
 192 0014 4FF40063 	 mov r3,#2048
 193 0018 FB60     	 str r3,[r7,#12]
 194 001a 07E0     	 b .L10
 195              	.L13:
 129:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 130:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 196              	 .loc 1 130 0
 197 001c FB68     	 ldr r3,[r7,#12]
 198 001e 002B     	 cmp r3,#0
 199 0020 01D1     	 bne .L11
 131:.././hal/sam3u1c/pmc.c **** 			return 1;
 200              	 .loc 1 131 0
 201 0022 0123     	 movs r3,#1
 202 0024 23E0     	 b .L12
 203              	.L11:
 129:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 204              	 .loc 1 129 0
 205 0026 FB68     	 ldr r3,[r7,#12]
 206 0028 013B     	 subs r3,r3,#1
 207 002a FB60     	 str r3,[r7,#12]
 208              	.L10:
 128:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 209              	 .loc 1 128 0 discriminator 1
 210 002c 124B     	 ldr r3,.L17
 211 002e 9B6E     	 ldr r3,[r3,#104]
 212 0030 03F00803 	 and r3,r3,#8
 213 0034 002B     	 cmp r3,#0
 214 0036 F1D0     	 beq .L13
 132:.././hal/sam3u1c/pmc.c **** 		}
 133:.././hal/sam3u1c/pmc.c **** 	}
 134:.././hal/sam3u1c/pmc.c **** 
 135:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 215              	 .loc 1 135 0
 216 0038 0F49     	 ldr r1,.L17
 217 003a 0F4B     	 ldr r3,.L17
 218 003c 1B6B     	 ldr r3,[r3,#48]
 219 003e 23F07002 	 bic r2,r3,#112
 220 0042 7B68     	 ldr r3,[r7,#4]
 221 0044 1343     	 orrs r3,r3,r2
 222 0046 0B63     	 str r3,[r1,#48]
 136:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 223              	 .loc 1 136 0
 224 0048 4FF40063 	 mov r3,#2048
 225 004c FB60     	 str r3,[r7,#12]
 226 004e 07E0     	 b .L14
 227              	.L16:
 137:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 138:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 228              	 .loc 1 138 0
 229 0050 FB68     	 ldr r3,[r7,#12]
 230 0052 002B     	 cmp r3,#0
 231 0054 01D1     	 bne .L15
 139:.././hal/sam3u1c/pmc.c **** 			return 1;
 232              	 .loc 1 139 0
 233 0056 0123     	 movs r3,#1
 234 0058 09E0     	 b .L12
 235              	.L15:
 137:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 236              	 .loc 1 137 0
 237 005a FB68     	 ldr r3,[r7,#12]
 238 005c 013B     	 subs r3,r3,#1
 239 005e FB60     	 str r3,[r7,#12]
 240              	.L14:
 136:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 241              	 .loc 1 136 0 discriminator 1
 242 0060 054B     	 ldr r3,.L17
 243 0062 9B6E     	 ldr r3,[r3,#104]
 244 0064 03F00803 	 and r3,r3,#8
 245 0068 002B     	 cmp r3,#0
 246 006a F1D0     	 beq .L16
 140:.././hal/sam3u1c/pmc.c **** 		}
 141:.././hal/sam3u1c/pmc.c **** 	}
 142:.././hal/sam3u1c/pmc.c **** 
 143:.././hal/sam3u1c/pmc.c **** 	return 0;
 247              	 .loc 1 143 0
 248 006c 0023     	 movs r3,#0
 249              	.L12:
 144:.././hal/sam3u1c/pmc.c **** }
 250              	 .loc 1 144 0
 251 006e 1846     	 mov r0,r3
 252 0070 1437     	 adds r7,r7,#20
 253              	.LCFI15:
 254              	 .cfi_def_cfa_offset 4
 255 0072 BD46     	 mov sp,r7
 256              	.LCFI16:
 257              	 .cfi_def_cfa_register 13
 258              	 
 259 0074 80BC     	 pop {r7}
 260              	.LCFI17:
 261              	 .cfi_restore 7
 262              	 .cfi_def_cfa_offset 0
 263 0076 7047     	 bx lr
 264              	.L18:
 265              	 .align 2
 266              	.L17:
 267 0078 00040E40 	 .word 1074660352
 268              	 .cfi_endproc
 269              	.LFE69:
 271              	 .section .text.pmc_switch_mck_to_mainck,"ax",%progbits
 272              	 .align 1
 273              	 .global pmc_switch_mck_to_mainck
 274              	 .syntax unified
 275              	 .thumb
 276              	 .thumb_func
 277              	 .fpu softvfp
 279              	pmc_switch_mck_to_mainck:
 280              	.LFB70:
 145:.././hal/sam3u1c/pmc.c **** 
 146:.././hal/sam3u1c/pmc.c **** /**
 147:.././hal/sam3u1c/pmc.c ****  * \brief Switch master clock source selection to main clock.
 148:.././hal/sam3u1c/pmc.c ****  *
 149:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Processor clock prescaler.
 150:.././hal/sam3u1c/pmc.c ****  *
 151:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 152:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 153:.././hal/sam3u1c/pmc.c ****  */
 154:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
 155:.././hal/sam3u1c/pmc.c **** {
 281              	 .loc 1 155 0
 282              	 .cfi_startproc
 283              	 
 284              	 
 285              	 
 286 0000 80B4     	 push {r7}
 287              	.LCFI18:
 288              	 .cfi_def_cfa_offset 4
 289              	 .cfi_offset 7,-4
 290 0002 85B0     	 sub sp,sp,#20
 291              	.LCFI19:
 292              	 .cfi_def_cfa_offset 24
 293 0004 00AF     	 add r7,sp,#0
 294              	.LCFI20:
 295              	 .cfi_def_cfa_register 7
 296 0006 7860     	 str r0,[r7,#4]
 156:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 157:.././hal/sam3u1c/pmc.c **** 
 158:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 297              	 .loc 1 158 0
 298 0008 1C4A     	 ldr r2,.L27
 299 000a 1C4B     	 ldr r3,.L27
 300 000c 1B6B     	 ldr r3,[r3,#48]
 301 000e 23F00303 	 bic r3,r3,#3
 302 0012 43F00103 	 orr r3,r3,#1
 303 0016 1363     	 str r3,[r2,#48]
 159:.././hal/sam3u1c/pmc.c **** 			PMC_MCKR_CSS_MAIN_CLK;
 160:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 304              	 .loc 1 160 0
 305 0018 4FF40063 	 mov r3,#2048
 306 001c FB60     	 str r3,[r7,#12]
 307 001e 07E0     	 b .L20
 308              	.L23:
 161:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 162:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 309              	 .loc 1 162 0
 310 0020 FB68     	 ldr r3,[r7,#12]
 311 0022 002B     	 cmp r3,#0
 312 0024 01D1     	 bne .L21
 163:.././hal/sam3u1c/pmc.c **** 			return 1;
 313              	 .loc 1 163 0
 314 0026 0123     	 movs r3,#1
 315 0028 23E0     	 b .L22
 316              	.L21:
 161:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 317              	 .loc 1 161 0
 318 002a FB68     	 ldr r3,[r7,#12]
 319 002c 013B     	 subs r3,r3,#1
 320 002e FB60     	 str r3,[r7,#12]
 321              	.L20:
 160:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 322              	 .loc 1 160 0 discriminator 1
 323 0030 124B     	 ldr r3,.L27
 324 0032 9B6E     	 ldr r3,[r3,#104]
 325 0034 03F00803 	 and r3,r3,#8
 326 0038 002B     	 cmp r3,#0
 327 003a F1D0     	 beq .L23
 164:.././hal/sam3u1c/pmc.c **** 		}
 165:.././hal/sam3u1c/pmc.c **** 	}
 166:.././hal/sam3u1c/pmc.c **** 
 167:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 328              	 .loc 1 167 0
 329 003c 0F49     	 ldr r1,.L27
 330 003e 0F4B     	 ldr r3,.L27
 331 0040 1B6B     	 ldr r3,[r3,#48]
 332 0042 23F07002 	 bic r2,r3,#112
 333 0046 7B68     	 ldr r3,[r7,#4]
 334 0048 1343     	 orrs r3,r3,r2
 335 004a 0B63     	 str r3,[r1,#48]
 168:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 336              	 .loc 1 168 0
 337 004c 4FF40063 	 mov r3,#2048
 338 0050 FB60     	 str r3,[r7,#12]
 339 0052 07E0     	 b .L24
 340              	.L26:
 169:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 170:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 341              	 .loc 1 170 0
 342 0054 FB68     	 ldr r3,[r7,#12]
 343 0056 002B     	 cmp r3,#0
 344 0058 01D1     	 bne .L25
 171:.././hal/sam3u1c/pmc.c **** 			return 1;
 345              	 .loc 1 171 0
 346 005a 0123     	 movs r3,#1
 347 005c 09E0     	 b .L22
 348              	.L25:
 169:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 349              	 .loc 1 169 0
 350 005e FB68     	 ldr r3,[r7,#12]
 351 0060 013B     	 subs r3,r3,#1
 352 0062 FB60     	 str r3,[r7,#12]
 353              	.L24:
 168:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 354              	 .loc 1 168 0 discriminator 1
 355 0064 054B     	 ldr r3,.L27
 356 0066 9B6E     	 ldr r3,[r3,#104]
 357 0068 03F00803 	 and r3,r3,#8
 358 006c 002B     	 cmp r3,#0
 359 006e F1D0     	 beq .L26
 172:.././hal/sam3u1c/pmc.c **** 		}
 173:.././hal/sam3u1c/pmc.c **** 	}
 174:.././hal/sam3u1c/pmc.c **** 
 175:.././hal/sam3u1c/pmc.c **** 	return 0;
 360              	 .loc 1 175 0
 361 0070 0023     	 movs r3,#0
 362              	.L22:
 176:.././hal/sam3u1c/pmc.c **** }
 363              	 .loc 1 176 0
 364 0072 1846     	 mov r0,r3
 365 0074 1437     	 adds r7,r7,#20
 366              	.LCFI21:
 367              	 .cfi_def_cfa_offset 4
 368 0076 BD46     	 mov sp,r7
 369              	.LCFI22:
 370              	 .cfi_def_cfa_register 13
 371              	 
 372 0078 80BC     	 pop {r7}
 373              	.LCFI23:
 374              	 .cfi_restore 7
 375              	 .cfi_def_cfa_offset 0
 376 007a 7047     	 bx lr
 377              	.L28:
 378              	 .align 2
 379              	.L27:
 380 007c 00040E40 	 .word 1074660352
 381              	 .cfi_endproc
 382              	.LFE70:
 384              	 .section .text.pmc_switch_mck_to_pllack,"ax",%progbits
 385              	 .align 1
 386              	 .global pmc_switch_mck_to_pllack
 387              	 .syntax unified
 388              	 .thumb
 389              	 .thumb_func
 390              	 .fpu softvfp
 392              	pmc_switch_mck_to_pllack:
 393              	.LFB71:
 177:.././hal/sam3u1c/pmc.c **** 
 178:.././hal/sam3u1c/pmc.c **** /**
 179:.././hal/sam3u1c/pmc.c ****  * \brief Switch master clock source selection to PLLA clock.
 180:.././hal/sam3u1c/pmc.c ****  *
 181:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Processor clock prescaler.
 182:.././hal/sam3u1c/pmc.c ****  *
 183:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 184:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 185:.././hal/sam3u1c/pmc.c ****  */
 186:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
 187:.././hal/sam3u1c/pmc.c **** {
 394              	 .loc 1 187 0
 395              	 .cfi_startproc
 396              	 
 397              	 
 398              	 
 399 0000 80B4     	 push {r7}
 400              	.LCFI24:
 401              	 .cfi_def_cfa_offset 4
 402              	 .cfi_offset 7,-4
 403 0002 85B0     	 sub sp,sp,#20
 404              	.LCFI25:
 405              	 .cfi_def_cfa_offset 24
 406 0004 00AF     	 add r7,sp,#0
 407              	.LCFI26:
 408              	 .cfi_def_cfa_register 7
 409 0006 7860     	 str r0,[r7,#4]
 188:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 189:.././hal/sam3u1c/pmc.c **** 
 190:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 410              	 .loc 1 190 0
 411 0008 1C49     	 ldr r1,.L37
 412 000a 1C4B     	 ldr r3,.L37
 413 000c 1B6B     	 ldr r3,[r3,#48]
 414 000e 23F07002 	 bic r2,r3,#112
 415 0012 7B68     	 ldr r3,[r7,#4]
 416 0014 1343     	 orrs r3,r3,r2
 417 0016 0B63     	 str r3,[r1,#48]
 191:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 418              	 .loc 1 191 0
 419 0018 4FF40063 	 mov r3,#2048
 420 001c FB60     	 str r3,[r7,#12]
 421 001e 07E0     	 b .L30
 422              	.L33:
 192:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 193:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 423              	 .loc 1 193 0
 424 0020 FB68     	 ldr r3,[r7,#12]
 425 0022 002B     	 cmp r3,#0
 426 0024 01D1     	 bne .L31
 194:.././hal/sam3u1c/pmc.c **** 			return 1;
 427              	 .loc 1 194 0
 428 0026 0123     	 movs r3,#1
 429 0028 23E0     	 b .L32
 430              	.L31:
 192:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 431              	 .loc 1 192 0
 432 002a FB68     	 ldr r3,[r7,#12]
 433 002c 013B     	 subs r3,r3,#1
 434 002e FB60     	 str r3,[r7,#12]
 435              	.L30:
 191:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 436              	 .loc 1 191 0 discriminator 1
 437 0030 124B     	 ldr r3,.L37
 438 0032 9B6E     	 ldr r3,[r3,#104]
 439 0034 03F00803 	 and r3,r3,#8
 440 0038 002B     	 cmp r3,#0
 441 003a F1D0     	 beq .L33
 195:.././hal/sam3u1c/pmc.c **** 		}
 196:.././hal/sam3u1c/pmc.c **** 	}
 197:.././hal/sam3u1c/pmc.c **** 
 198:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 442              	 .loc 1 198 0
 443 003c 0F4A     	 ldr r2,.L37
 444 003e 0F4B     	 ldr r3,.L37
 445 0040 1B6B     	 ldr r3,[r3,#48]
 446 0042 23F00303 	 bic r3,r3,#3
 447 0046 43F00203 	 orr r3,r3,#2
 448 004a 1363     	 str r3,[r2,#48]
 199:.././hal/sam3u1c/pmc.c **** 			PMC_MCKR_CSS_PLLA_CLK;
 200:.././hal/sam3u1c/pmc.c **** 
 201:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 449              	 .loc 1 201 0
 450 004c 4FF40063 	 mov r3,#2048
 451 0050 FB60     	 str r3,[r7,#12]
 452 0052 07E0     	 b .L34
 453              	.L36:
 202:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 203:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 454              	 .loc 1 203 0
 455 0054 FB68     	 ldr r3,[r7,#12]
 456 0056 002B     	 cmp r3,#0
 457 0058 01D1     	 bne .L35
 204:.././hal/sam3u1c/pmc.c **** 			return 1;
 458              	 .loc 1 204 0
 459 005a 0123     	 movs r3,#1
 460 005c 09E0     	 b .L32
 461              	.L35:
 202:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 462              	 .loc 1 202 0
 463 005e FB68     	 ldr r3,[r7,#12]
 464 0060 013B     	 subs r3,r3,#1
 465 0062 FB60     	 str r3,[r7,#12]
 466              	.L34:
 201:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 467              	 .loc 1 201 0 discriminator 1
 468 0064 054B     	 ldr r3,.L37
 469 0066 9B6E     	 ldr r3,[r3,#104]
 470 0068 03F00803 	 and r3,r3,#8
 471 006c 002B     	 cmp r3,#0
 472 006e F1D0     	 beq .L36
 205:.././hal/sam3u1c/pmc.c **** 		}
 206:.././hal/sam3u1c/pmc.c **** 	}
 207:.././hal/sam3u1c/pmc.c **** 
 208:.././hal/sam3u1c/pmc.c **** 	return 0;
 473              	 .loc 1 208 0
 474 0070 0023     	 movs r3,#0
 475              	.L32:
 209:.././hal/sam3u1c/pmc.c **** }
 476              	 .loc 1 209 0
 477 0072 1846     	 mov r0,r3
 478 0074 1437     	 adds r7,r7,#20
 479              	.LCFI27:
 480              	 .cfi_def_cfa_offset 4
 481 0076 BD46     	 mov sp,r7
 482              	.LCFI28:
 483              	 .cfi_def_cfa_register 13
 484              	 
 485 0078 80BC     	 pop {r7}
 486              	.LCFI29:
 487              	 .cfi_restore 7
 488              	 .cfi_def_cfa_offset 0
 489 007a 7047     	 bx lr
 490              	.L38:
 491              	 .align 2
 492              	.L37:
 493 007c 00040E40 	 .word 1074660352
 494              	 .cfi_endproc
 495              	.LFE71:
 497              	 .section .text.pmc_switch_mck_to_upllck,"ax",%progbits
 498              	 .align 1
 499              	 .global pmc_switch_mck_to_upllck
 500              	 .syntax unified
 501              	 .thumb
 502              	 .thumb_func
 503              	 .fpu softvfp
 505              	pmc_switch_mck_to_upllck:
 506              	.LFB72:
 210:.././hal/sam3u1c/pmc.c **** 
 211:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP || SAMG55)
 212:.././hal/sam3u1c/pmc.c **** /**
 213:.././hal/sam3u1c/pmc.c ****  * \brief Switch master clock source selection to PLLB clock.
 214:.././hal/sam3u1c/pmc.c ****  *
 215:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Processor clock prescaler.
 216:.././hal/sam3u1c/pmc.c ****  *
 217:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 218:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 219:.././hal/sam3u1c/pmc.c ****  */
 220:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
 221:.././hal/sam3u1c/pmc.c **** {
 222:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 223:.././hal/sam3u1c/pmc.c **** 
 224:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 225:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 226:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 227:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 228:.././hal/sam3u1c/pmc.c **** 			return 1;
 229:.././hal/sam3u1c/pmc.c **** 		}
 230:.././hal/sam3u1c/pmc.c **** 	}
 231:.././hal/sam3u1c/pmc.c **** 
 232:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 233:.././hal/sam3u1c/pmc.c **** 			PMC_MCKR_CSS_PLLB_CLK;
 234:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 235:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 236:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 237:.././hal/sam3u1c/pmc.c **** 			return 1;
 238:.././hal/sam3u1c/pmc.c **** 		}
 239:.././hal/sam3u1c/pmc.c **** 	}
 240:.././hal/sam3u1c/pmc.c **** 
 241:.././hal/sam3u1c/pmc.c **** 	return 0;
 242:.././hal/sam3u1c/pmc.c **** }
 243:.././hal/sam3u1c/pmc.c **** #endif
 244:.././hal/sam3u1c/pmc.c **** 
 245:.././hal/sam3u1c/pmc.c **** #if (SAM3XA || SAM3U)
 246:.././hal/sam3u1c/pmc.c **** /**
 247:.././hal/sam3u1c/pmc.c ****  * \brief Switch master clock source selection to UPLL clock.
 248:.././hal/sam3u1c/pmc.c ****  *
 249:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Processor clock prescaler.
 250:.././hal/sam3u1c/pmc.c ****  *
 251:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 252:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 253:.././hal/sam3u1c/pmc.c ****  */
 254:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_mck_to_upllck(uint32_t ul_pres)
 255:.././hal/sam3u1c/pmc.c **** {
 507              	 .loc 1 255 0
 508              	 .cfi_startproc
 509              	 
 510              	 
 511              	 
 512 0000 80B4     	 push {r7}
 513              	.LCFI30:
 514              	 .cfi_def_cfa_offset 4
 515              	 .cfi_offset 7,-4
 516 0002 85B0     	 sub sp,sp,#20
 517              	.LCFI31:
 518              	 .cfi_def_cfa_offset 24
 519 0004 00AF     	 add r7,sp,#0
 520              	.LCFI32:
 521              	 .cfi_def_cfa_register 7
 522 0006 7860     	 str r0,[r7,#4]
 256:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 257:.././hal/sam3u1c/pmc.c **** 
 258:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 523              	 .loc 1 258 0
 524 0008 1B49     	 ldr r1,.L47
 525 000a 1B4B     	 ldr r3,.L47
 526 000c 1B6B     	 ldr r3,[r3,#48]
 527 000e 23F07002 	 bic r2,r3,#112
 528 0012 7B68     	 ldr r3,[r7,#4]
 529 0014 1343     	 orrs r3,r3,r2
 530 0016 0B63     	 str r3,[r1,#48]
 259:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 531              	 .loc 1 259 0
 532 0018 4FF40063 	 mov r3,#2048
 533 001c FB60     	 str r3,[r7,#12]
 534 001e 07E0     	 b .L40
 535              	.L43:
 260:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 261:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 536              	 .loc 1 261 0
 537 0020 FB68     	 ldr r3,[r7,#12]
 538 0022 002B     	 cmp r3,#0
 539 0024 01D1     	 bne .L41
 262:.././hal/sam3u1c/pmc.c **** 			return 1;
 540              	 .loc 1 262 0
 541 0026 0123     	 movs r3,#1
 542 0028 21E0     	 b .L42
 543              	.L41:
 260:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 544              	 .loc 1 260 0
 545 002a FB68     	 ldr r3,[r7,#12]
 546 002c 013B     	 subs r3,r3,#1
 547 002e FB60     	 str r3,[r7,#12]
 548              	.L40:
 259:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 549              	 .loc 1 259 0 discriminator 1
 550 0030 114B     	 ldr r3,.L47
 551 0032 9B6E     	 ldr r3,[r3,#104]
 552 0034 03F00803 	 and r3,r3,#8
 553 0038 002B     	 cmp r3,#0
 554 003a F1D0     	 beq .L43
 263:.././hal/sam3u1c/pmc.c **** 		}
 264:.././hal/sam3u1c/pmc.c **** 	}
 265:.././hal/sam3u1c/pmc.c **** 
 266:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 555              	 .loc 1 266 0
 556 003c 0E4A     	 ldr r2,.L47
 557 003e 0E4B     	 ldr r3,.L47
 558 0040 1B6B     	 ldr r3,[r3,#48]
 559 0042 43F00303 	 orr r3,r3,#3
 560 0046 1363     	 str r3,[r2,#48]
 267:.././hal/sam3u1c/pmc.c **** 			PMC_MCKR_CSS_UPLL_CLK;
 268:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 561              	 .loc 1 268 0
 562 0048 4FF40063 	 mov r3,#2048
 563 004c FB60     	 str r3,[r7,#12]
 564 004e 07E0     	 b .L44
 565              	.L46:
 269:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 270:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 566              	 .loc 1 270 0
 567 0050 FB68     	 ldr r3,[r7,#12]
 568 0052 002B     	 cmp r3,#0
 569 0054 01D1     	 bne .L45
 271:.././hal/sam3u1c/pmc.c **** 			return 1;
 570              	 .loc 1 271 0
 571 0056 0123     	 movs r3,#1
 572 0058 09E0     	 b .L42
 573              	.L45:
 269:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 574              	 .loc 1 269 0
 575 005a FB68     	 ldr r3,[r7,#12]
 576 005c 013B     	 subs r3,r3,#1
 577 005e FB60     	 str r3,[r7,#12]
 578              	.L44:
 268:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 579              	 .loc 1 268 0 discriminator 1
 580 0060 054B     	 ldr r3,.L47
 581 0062 9B6E     	 ldr r3,[r3,#104]
 582 0064 03F00803 	 and r3,r3,#8
 583 0068 002B     	 cmp r3,#0
 584 006a F1D0     	 beq .L46
 272:.././hal/sam3u1c/pmc.c **** 		}
 273:.././hal/sam3u1c/pmc.c **** 	}
 274:.././hal/sam3u1c/pmc.c **** 
 275:.././hal/sam3u1c/pmc.c **** 	return 0;
 585              	 .loc 1 275 0
 586 006c 0023     	 movs r3,#0
 587              	.L42:
 276:.././hal/sam3u1c/pmc.c **** }
 588              	 .loc 1 276 0
 589 006e 1846     	 mov r0,r3
 590 0070 1437     	 adds r7,r7,#20
 591              	.LCFI33:
 592              	 .cfi_def_cfa_offset 4
 593 0072 BD46     	 mov sp,r7
 594              	.LCFI34:
 595              	 .cfi_def_cfa_register 13
 596              	 
 597 0074 80BC     	 pop {r7}
 598              	.LCFI35:
 599              	 .cfi_restore 7
 600              	 .cfi_def_cfa_offset 0
 601 0076 7047     	 bx lr
 602              	.L48:
 603              	 .align 2
 604              	.L47:
 605 0078 00040E40 	 .word 1074660352
 606              	 .cfi_endproc
 607              	.LFE72:
 609              	 .section .text.pmc_switch_sclk_to_32kxtal,"ax",%progbits
 610              	 .align 1
 611              	 .global pmc_switch_sclk_to_32kxtal
 612              	 .syntax unified
 613              	 .thumb
 614              	 .thumb_func
 615              	 .fpu softvfp
 617              	pmc_switch_sclk_to_32kxtal:
 618              	.LFB73:
 277:.././hal/sam3u1c/pmc.c **** #endif
 278:.././hal/sam3u1c/pmc.c **** 
 279:.././hal/sam3u1c/pmc.c **** /**
 280:.././hal/sam3u1c/pmc.c ****  * \brief Switch slow clock source selection to external 32k (Xtal or Bypass).
 281:.././hal/sam3u1c/pmc.c ****  *
 282:.././hal/sam3u1c/pmc.c ****  * \note This function disables the PLLs.
 283:.././hal/sam3u1c/pmc.c ****  *
 284:.././hal/sam3u1c/pmc.c ****  * \note Switching SCLK back to 32krc is only possible by shutting down the
 285:.././hal/sam3u1c/pmc.c ****  *       VDDIO power supply.
 286:.././hal/sam3u1c/pmc.c ****  *
 287:.././hal/sam3u1c/pmc.c ****  * \param ul_bypass 0 for Xtal, 1 for bypass.
 288:.././hal/sam3u1c/pmc.c ****  */
 289:.././hal/sam3u1c/pmc.c **** void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
 290:.././hal/sam3u1c/pmc.c **** {
 619              	 .loc 1 290 0
 620              	 .cfi_startproc
 621              	 
 622              	 
 623              	 
 624 0000 80B4     	 push {r7}
 625              	.LCFI36:
 626              	 .cfi_def_cfa_offset 4
 627              	 .cfi_offset 7,-4
 628 0002 83B0     	 sub sp,sp,#12
 629              	.LCFI37:
 630              	 .cfi_def_cfa_offset 16
 631 0004 00AF     	 add r7,sp,#0
 632              	.LCFI38:
 633              	 .cfi_def_cfa_register 7
 634 0006 7860     	 str r0,[r7,#4]
 291:.././hal/sam3u1c/pmc.c **** 	/* Set Bypass mode if required */
 292:.././hal/sam3u1c/pmc.c **** 	if (ul_bypass == 1) {
 635              	 .loc 1 292 0
 636 0008 7B68     	 ldr r3,[r7,#4]
 637 000a 012B     	 cmp r3,#1
 638 000c 07D1     	 bne .L50
 293:.././hal/sam3u1c/pmc.c **** 		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
 639              	 .loc 1 293 0
 640 000e 084A     	 ldr r2,.L51
 641 0010 074B     	 ldr r3,.L51
 642 0012 9B68     	 ldr r3,[r3,#8]
 643 0014 43F02543 	 orr r3,r3,#-1526726656
 644 0018 43F48013 	 orr r3,r3,#1048576
 645 001c 9360     	 str r3,[r2,#8]
 646              	.L50:
 294:.././hal/sam3u1c/pmc.c **** 			SUPC_MR_OSCBYPASS;
 295:.././hal/sam3u1c/pmc.c **** 	}
 296:.././hal/sam3u1c/pmc.c **** 
 297:.././hal/sam3u1c/pmc.c **** 	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
 647              	 .loc 1 297 0
 648 001e 044B     	 ldr r3,.L51
 649 0020 044A     	 ldr r2,.L51+4
 650 0022 1A60     	 str r2,[r3]
 298:.././hal/sam3u1c/pmc.c **** }
 651              	 .loc 1 298 0
 652 0024 00BF     	 nop
 653 0026 0C37     	 adds r7,r7,#12
 654              	.LCFI39:
 655              	 .cfi_def_cfa_offset 4
 656 0028 BD46     	 mov sp,r7
 657              	.LCFI40:
 658              	 .cfi_def_cfa_register 13
 659              	 
 660 002a 80BC     	 pop {r7}
 661              	.LCFI41:
 662              	 .cfi_restore 7
 663              	 .cfi_def_cfa_offset 0
 664 002c 7047     	 bx lr
 665              	.L52:
 666 002e 00BF     	 .align 2
 667              	.L51:
 668 0030 10120E40 	 .word 1074663952
 669 0034 080000A5 	 .word -1526726648
 670              	 .cfi_endproc
 671              	.LFE73:
 673              	 .section .text.pmc_osc_is_ready_32kxtal,"ax",%progbits
 674              	 .align 1
 675              	 .global pmc_osc_is_ready_32kxtal
 676              	 .syntax unified
 677              	 .thumb
 678              	 .thumb_func
 679              	 .fpu softvfp
 681              	pmc_osc_is_ready_32kxtal:
 682              	.LFB74:
 299:.././hal/sam3u1c/pmc.c **** 
 300:.././hal/sam3u1c/pmc.c **** /**
 301:.././hal/sam3u1c/pmc.c ****  * \brief Check if the external 32k Xtal is ready.
 302:.././hal/sam3u1c/pmc.c ****  *
 303:.././hal/sam3u1c/pmc.c ****  * \retval 1 External 32k Xtal is ready.
 304:.././hal/sam3u1c/pmc.c ****  * \retval 0 External 32k Xtal is not ready.
 305:.././hal/sam3u1c/pmc.c ****  */
 306:.././hal/sam3u1c/pmc.c **** uint32_t pmc_osc_is_ready_32kxtal(void)
 307:.././hal/sam3u1c/pmc.c **** {
 683              	 .loc 1 307 0
 684              	 .cfi_startproc
 685              	 
 686              	 
 687              	 
 688 0000 80B4     	 push {r7}
 689              	.LCFI42:
 690              	 .cfi_def_cfa_offset 4
 691              	 .cfi_offset 7,-4
 692 0002 00AF     	 add r7,sp,#0
 693              	.LCFI43:
 694              	 .cfi_def_cfa_register 7
 308:.././hal/sam3u1c/pmc.c **** 	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
 695              	 .loc 1 308 0
 696 0004 094B     	 ldr r3,.L57
 697 0006 5B69     	 ldr r3,[r3,#20]
 698 0008 03F08003 	 and r3,r3,#128
 309:.././hal/sam3u1c/pmc.c **** 			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
 699              	 .loc 1 309 0
 700 000c 002B     	 cmp r3,#0
 701 000e 07D0     	 beq .L54
 702              	 .loc 1 309 0 is_stmt 0 discriminator 1
 703 0010 074B     	 ldr r3,.L57+4
 704 0012 9B6E     	 ldr r3,[r3,#104]
 705 0014 03F08003 	 and r3,r3,#128
 706 0018 002B     	 cmp r3,#0
 707 001a 01D0     	 beq .L54
 708              	 .loc 1 309 0 discriminator 3
 709 001c 0123     	 movs r3,#1
 710 001e 00E0     	 b .L55
 711              	.L54:
 712              	 .loc 1 309 0 discriminator 4
 713 0020 0023     	 movs r3,#0
 714              	.L55:
 310:.././hal/sam3u1c/pmc.c **** }
 715              	 .loc 1 310 0 is_stmt 1 discriminator 6
 716 0022 1846     	 mov r0,r3
 717 0024 BD46     	 mov sp,r7
 718              	.LCFI44:
 719              	 .cfi_def_cfa_register 13
 720              	 
 721 0026 80BC     	 pop {r7}
 722              	.LCFI45:
 723              	 .cfi_restore 7
 724              	 .cfi_def_cfa_offset 0
 725 0028 7047     	 bx lr
 726              	.L58:
 727 002a 00BF     	 .align 2
 728              	.L57:
 729 002c 10120E40 	 .word 1074663952
 730 0030 00040E40 	 .word 1074660352
 731              	 .cfi_endproc
 732              	.LFE74:
 734              	 .section .text.pmc_switch_mainck_to_fastrc,"ax",%progbits
 735              	 .align 1
 736              	 .global pmc_switch_mainck_to_fastrc
 737              	 .syntax unified
 738              	 .thumb
 739              	 .thumb_func
 740              	 .fpu softvfp
 742              	pmc_switch_mainck_to_fastrc:
 743              	.LFB75:
 311:.././hal/sam3u1c/pmc.c **** 
 312:.././hal/sam3u1c/pmc.c **** /**
 313:.././hal/sam3u1c/pmc.c ****  * \brief Switch main clock source selection to internal fast RC.
 314:.././hal/sam3u1c/pmc.c ****  *
 315:.././hal/sam3u1c/pmc.c ****  * \param ul_moscrcf Fast RC oscillator(4/8/12Mhz).
 316:.././hal/sam3u1c/pmc.c ****  *
 317:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 318:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 319:.././hal/sam3u1c/pmc.c ****  * \retval 2 Invalid frequency.
 320:.././hal/sam3u1c/pmc.c ****  */
 321:.././hal/sam3u1c/pmc.c **** void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
 322:.././hal/sam3u1c/pmc.c **** {
 744              	 .loc 1 322 0
 745              	 .cfi_startproc
 746              	 
 747              	 
 748              	 
 749 0000 80B4     	 push {r7}
 750              	.LCFI46:
 751              	 .cfi_def_cfa_offset 4
 752              	 .cfi_offset 7,-4
 753 0002 83B0     	 sub sp,sp,#12
 754              	.LCFI47:
 755              	 .cfi_def_cfa_offset 16
 756 0004 00AF     	 add r7,sp,#0
 757              	.LCFI48:
 758              	 .cfi_def_cfa_register 7
 759 0006 7860     	 str r0,[r7,#4]
 323:.././hal/sam3u1c/pmc.c **** 	/* Enable Fast RC oscillator but DO NOT switch to RC now */
 324:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
 760              	 .loc 1 324 0
 761 0008 184A     	 ldr r2,.L62
 762 000a 184B     	 ldr r3,.L62
 763 000c 1B6A     	 ldr r3,[r3,#32]
 764 000e 43F45C13 	 orr r3,r3,#3604480
 765 0012 43F00803 	 orr r3,r3,#8
 766 0016 1362     	 str r3,[r2,#32]
 325:.././hal/sam3u1c/pmc.c **** 
 326:.././hal/sam3u1c/pmc.c **** 	/* Wait the Fast RC to stabilize */
 327:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 767              	 .loc 1 327 0
 768 0018 00BF     	 nop
 769              	.L60:
 770              	 .loc 1 327 0 is_stmt 0 discriminator 1
 771 001a 144B     	 ldr r3,.L62
 772 001c 9B6E     	 ldr r3,[r3,#104]
 773 001e 03F40033 	 and r3,r3,#131072
 774 0022 002B     	 cmp r3,#0
 775 0024 F9D0     	 beq .L60
 328:.././hal/sam3u1c/pmc.c **** 
 329:.././hal/sam3u1c/pmc.c **** 	/* Change Fast RC oscillator frequency */
 330:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
 776              	 .loc 1 330 0 is_stmt 1
 777 0026 1149     	 ldr r1,.L62
 778 0028 104B     	 ldr r3,.L62
 779 002a 1B6A     	 ldr r3,[r3,#32]
 780 002c 23F45C13 	 bic r3,r3,#3604480
 781 0030 23F07003 	 bic r3,r3,#112
 331:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
 782              	 .loc 1 331 0
 783 0034 7A68     	 ldr r2,[r7,#4]
 784 0036 1343     	 orrs r3,r3,r2
 785 0038 43F45C13 	 orr r3,r3,#3604480
 330:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
 786              	 .loc 1 330 0
 787 003c 0B62     	 str r3,[r1,#32]
 332:.././hal/sam3u1c/pmc.c **** 
 333:.././hal/sam3u1c/pmc.c **** 	/* Wait the Fast RC to stabilize */
 334:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 788              	 .loc 1 334 0
 789 003e 00BF     	 nop
 790              	.L61:
 791              	 .loc 1 334 0 is_stmt 0 discriminator 1
 792 0040 0A4B     	 ldr r3,.L62
 793 0042 9B6E     	 ldr r3,[r3,#104]
 794 0044 03F40033 	 and r3,r3,#131072
 795 0048 002B     	 cmp r3,#0
 796 004a F9D0     	 beq .L61
 335:.././hal/sam3u1c/pmc.c **** 
 336:.././hal/sam3u1c/pmc.c **** 	/* Switch to Fast RC */
 337:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
 797              	 .loc 1 337 0 is_stmt 1
 798 004c 074A     	 ldr r2,.L62
 799 004e 074B     	 ldr r3,.L62
 800 0050 1B6A     	 ldr r3,[r3,#32]
 801 0052 23F09B73 	 bic r3,r3,#20316160
 802 0056 23F48033 	 bic r3,r3,#65536
 803 005a 43F45C13 	 orr r3,r3,#3604480
 804 005e 1362     	 str r3,[r2,#32]
 338:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD;
 339:.././hal/sam3u1c/pmc.c **** }
 805              	 .loc 1 339 0
 806 0060 00BF     	 nop
 807 0062 0C37     	 adds r7,r7,#12
 808              	.LCFI49:
 809              	 .cfi_def_cfa_offset 4
 810 0064 BD46     	 mov sp,r7
 811              	.LCFI50:
 812              	 .cfi_def_cfa_register 13
 813              	 
 814 0066 80BC     	 pop {r7}
 815              	.LCFI51:
 816              	 .cfi_restore 7
 817              	 .cfi_def_cfa_offset 0
 818 0068 7047     	 bx lr
 819              	.L63:
 820 006a 00BF     	 .align 2
 821              	.L62:
 822 006c 00040E40 	 .word 1074660352
 823              	 .cfi_endproc
 824              	.LFE75:
 826              	 .section .text.pmc_osc_enable_fastrc,"ax",%progbits
 827              	 .align 1
 828              	 .global pmc_osc_enable_fastrc
 829              	 .syntax unified
 830              	 .thumb
 831              	 .thumb_func
 832              	 .fpu softvfp
 834              	pmc_osc_enable_fastrc:
 835              	.LFB76:
 340:.././hal/sam3u1c/pmc.c **** 
 341:.././hal/sam3u1c/pmc.c **** /**
 342:.././hal/sam3u1c/pmc.c ****  * \brief Enable fast RC oscillator.
 343:.././hal/sam3u1c/pmc.c ****  *
 344:.././hal/sam3u1c/pmc.c ****  * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 345:.././hal/sam3u1c/pmc.c ****  */
 346:.././hal/sam3u1c/pmc.c **** void pmc_osc_enable_fastrc(uint32_t ul_rc)
 347:.././hal/sam3u1c/pmc.c **** {
 836              	 .loc 1 347 0
 837              	 .cfi_startproc
 838              	 
 839              	 
 840              	 
 841 0000 80B4     	 push {r7}
 842              	.LCFI52:
 843              	 .cfi_def_cfa_offset 4
 844              	 .cfi_offset 7,-4
 845 0002 83B0     	 sub sp,sp,#12
 846              	.LCFI53:
 847              	 .cfi_def_cfa_offset 16
 848 0004 00AF     	 add r7,sp,#0
 849              	.LCFI54:
 850              	 .cfi_def_cfa_register 7
 851 0006 7860     	 str r0,[r7,#4]
 348:.././hal/sam3u1c/pmc.c **** 	/* Enable Fast RC oscillator but DO NOT switch to RC */
 349:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
 852              	 .loc 1 349 0
 853 0008 134A     	 ldr r2,.L67
 854 000a 134B     	 ldr r3,.L67
 855 000c 1B6A     	 ldr r3,[r3,#32]
 856 000e 43F45C13 	 orr r3,r3,#3604480
 857 0012 43F00803 	 orr r3,r3,#8
 858 0016 1362     	 str r3,[r2,#32]
 350:.././hal/sam3u1c/pmc.c **** 	/* Wait the Fast RC to stabilize */
 351:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 859              	 .loc 1 351 0
 860 0018 00BF     	 nop
 861              	.L65:
 862              	 .loc 1 351 0 is_stmt 0 discriminator 1
 863 001a 0F4B     	 ldr r3,.L67
 864 001c 9B6E     	 ldr r3,[r3,#104]
 865 001e 03F40033 	 and r3,r3,#131072
 866 0022 002B     	 cmp r3,#0
 867 0024 F9D0     	 beq .L65
 352:.././hal/sam3u1c/pmc.c **** 
 353:.././hal/sam3u1c/pmc.c **** 	/* Change Fast RC oscillator frequency */
 354:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
 868              	 .loc 1 354 0 is_stmt 1
 869 0026 0C49     	 ldr r1,.L67
 870 0028 0B4B     	 ldr r3,.L67
 871 002a 1B6A     	 ldr r3,[r3,#32]
 872 002c 23F45C13 	 bic r3,r3,#3604480
 873 0030 23F07003 	 bic r3,r3,#112
 355:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_rc;
 874              	 .loc 1 355 0
 875 0034 7A68     	 ldr r2,[r7,#4]
 876 0036 1343     	 orrs r3,r3,r2
 877 0038 43F45C13 	 orr r3,r3,#3604480
 354:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_rc;
 878              	 .loc 1 354 0
 879 003c 0B62     	 str r3,[r1,#32]
 356:.././hal/sam3u1c/pmc.c **** 	/* Wait the Fast RC to stabilize */
 357:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 880              	 .loc 1 357 0
 881 003e 00BF     	 nop
 882              	.L66:
 883              	 .loc 1 357 0 is_stmt 0 discriminator 1
 884 0040 054B     	 ldr r3,.L67
 885 0042 9B6E     	 ldr r3,[r3,#104]
 886 0044 03F40033 	 and r3,r3,#131072
 887 0048 002B     	 cmp r3,#0
 888 004a F9D0     	 beq .L66
 358:.././hal/sam3u1c/pmc.c **** }
 889              	 .loc 1 358 0 is_stmt 1
 890 004c 00BF     	 nop
 891 004e 0C37     	 adds r7,r7,#12
 892              	.LCFI55:
 893              	 .cfi_def_cfa_offset 4
 894 0050 BD46     	 mov sp,r7
 895              	.LCFI56:
 896              	 .cfi_def_cfa_register 13
 897              	 
 898 0052 80BC     	 pop {r7}
 899              	.LCFI57:
 900              	 .cfi_restore 7
 901              	 .cfi_def_cfa_offset 0
 902 0054 7047     	 bx lr
 903              	.L68:
 904 0056 00BF     	 .align 2
 905              	.L67:
 906 0058 00040E40 	 .word 1074660352
 907              	 .cfi_endproc
 908              	.LFE76:
 910              	 .section .text.pmc_osc_disable_fastrc,"ax",%progbits
 911              	 .align 1
 912              	 .global pmc_osc_disable_fastrc
 913              	 .syntax unified
 914              	 .thumb
 915              	 .thumb_func
 916              	 .fpu softvfp
 918              	pmc_osc_disable_fastrc:
 919              	.LFB77:
 359:.././hal/sam3u1c/pmc.c **** 
 360:.././hal/sam3u1c/pmc.c **** /**
 361:.././hal/sam3u1c/pmc.c ****  * \brief Disable the internal fast RC.
 362:.././hal/sam3u1c/pmc.c ****  */
 363:.././hal/sam3u1c/pmc.c **** void pmc_osc_disable_fastrc(void)
 364:.././hal/sam3u1c/pmc.c **** {
 920              	 .loc 1 364 0
 921              	 .cfi_startproc
 922              	 
 923              	 
 924              	 
 925 0000 80B4     	 push {r7}
 926              	.LCFI58:
 927              	 .cfi_def_cfa_offset 4
 928              	 .cfi_offset 7,-4
 929 0002 00AF     	 add r7,sp,#0
 930              	.LCFI59:
 931              	 .cfi_def_cfa_register 7
 365:.././hal/sam3u1c/pmc.c **** 	/* Disable Fast RC oscillator */
 366:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
 932              	 .loc 1 366 0
 933 0004 064A     	 ldr r2,.L70
 934 0006 064B     	 ldr r3,.L70
 935 0008 1B6A     	 ldr r3,[r3,#32]
 367:.././hal/sam3u1c/pmc.c **** 					~CKGR_MOR_MOSCRCF_Msk)
 368:.././hal/sam3u1c/pmc.c **** 				| CKGR_MOR_KEY_PASSWD;
 936              	 .loc 1 368 0
 937 000a 23F45C13 	 bic r3,r3,#3604480
 938 000e 23F07803 	 bic r3,r3,#120
 939 0012 43F45C13 	 orr r3,r3,#3604480
 366:.././hal/sam3u1c/pmc.c **** 					~CKGR_MOR_MOSCRCF_Msk)
 940              	 .loc 1 366 0
 941 0016 1362     	 str r3,[r2,#32]
 369:.././hal/sam3u1c/pmc.c **** }
 942              	 .loc 1 369 0
 943 0018 00BF     	 nop
 944 001a BD46     	 mov sp,r7
 945              	.LCFI60:
 946              	 .cfi_def_cfa_register 13
 947              	 
 948 001c 80BC     	 pop {r7}
 949              	.LCFI61:
 950              	 .cfi_restore 7
 951              	 .cfi_def_cfa_offset 0
 952 001e 7047     	 bx lr
 953              	.L71:
 954              	 .align 2
 955              	.L70:
 956 0020 00040E40 	 .word 1074660352
 957              	 .cfi_endproc
 958              	.LFE77:
 960              	 .section .text.pmc_osc_is_ready_fastrc,"ax",%progbits
 961              	 .align 1
 962              	 .global pmc_osc_is_ready_fastrc
 963              	 .syntax unified
 964              	 .thumb
 965              	 .thumb_func
 966              	 .fpu softvfp
 968              	pmc_osc_is_ready_fastrc:
 969              	.LFB78:
 370:.././hal/sam3u1c/pmc.c **** 
 371:.././hal/sam3u1c/pmc.c **** /**
 372:.././hal/sam3u1c/pmc.c ****  * \brief Check if the main fastrc is ready.
 373:.././hal/sam3u1c/pmc.c ****  *
 374:.././hal/sam3u1c/pmc.c ****  * \retval 0 Xtal is not ready, otherwise ready.
 375:.././hal/sam3u1c/pmc.c ****  */
 376:.././hal/sam3u1c/pmc.c **** uint32_t pmc_osc_is_ready_fastrc(void)
 377:.././hal/sam3u1c/pmc.c **** {
 970              	 .loc 1 377 0
 971              	 .cfi_startproc
 972              	 
 973              	 
 974              	 
 975 0000 80B4     	 push {r7}
 976              	.LCFI62:
 977              	 .cfi_def_cfa_offset 4
 978              	 .cfi_offset 7,-4
 979 0002 00AF     	 add r7,sp,#0
 980              	.LCFI63:
 981              	 .cfi_def_cfa_register 7
 378:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
 982              	 .loc 1 378 0
 983 0004 034B     	 ldr r3,.L74
 984 0006 9B6E     	 ldr r3,[r3,#104]
 985 0008 03F40033 	 and r3,r3,#131072
 379:.././hal/sam3u1c/pmc.c **** }
 986              	 .loc 1 379 0
 987 000c 1846     	 mov r0,r3
 988 000e BD46     	 mov sp,r7
 989              	.LCFI64:
 990              	 .cfi_def_cfa_register 13
 991              	 
 992 0010 80BC     	 pop {r7}
 993              	.LCFI65:
 994              	 .cfi_restore 7
 995              	 .cfi_def_cfa_offset 0
 996 0012 7047     	 bx lr
 997              	.L75:
 998              	 .align 2
 999              	.L74:
 1000 0014 00040E40 	 .word 1074660352
 1001              	 .cfi_endproc
 1002              	.LFE78:
 1004              	 .section .text.pmc_osc_enable_main_xtal,"ax",%progbits
 1005              	 .align 1
 1006              	 .global pmc_osc_enable_main_xtal
 1007              	 .syntax unified
 1008              	 .thumb
 1009              	 .thumb_func
 1010              	 .fpu softvfp
 1012              	pmc_osc_enable_main_xtal:
 1013              	.LFB79:
 380:.././hal/sam3u1c/pmc.c **** 
 381:.././hal/sam3u1c/pmc.c **** /**
 382:.././hal/sam3u1c/pmc.c ****  * \brief Enable main XTAL oscillator.
 383:.././hal/sam3u1c/pmc.c ****  *
 384:.././hal/sam3u1c/pmc.c ****  * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 385:.././hal/sam3u1c/pmc.c ****  */
 386:.././hal/sam3u1c/pmc.c **** void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
 387:.././hal/sam3u1c/pmc.c **** {
 1014              	 .loc 1 387 0
 1015              	 .cfi_startproc
 1016              	 
 1017              	 
 1018              	 
 1019 0000 80B4     	 push {r7}
 1020              	.LCFI66:
 1021              	 .cfi_def_cfa_offset 4
 1022              	 .cfi_offset 7,-4
 1023 0002 85B0     	 sub sp,sp,#20
 1024              	.LCFI67:
 1025              	 .cfi_def_cfa_offset 24
 1026 0004 00AF     	 add r7,sp,#0
 1027              	.LCFI68:
 1028              	 .cfi_def_cfa_register 7
 1029 0006 7860     	 str r0,[r7,#4]
 388:.././hal/sam3u1c/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 1030              	 .loc 1 388 0
 1031 0008 0F4B     	 ldr r3,.L78
 1032 000a 1B6A     	 ldr r3,[r3,#32]
 1033 000c FB60     	 str r3,[r7,#12]
 389:.././hal/sam3u1c/pmc.c **** 	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
 1034              	 .loc 1 389 0
 1035 000e FB68     	 ldr r3,[r7,#12]
 1036 0010 23F00303 	 bic r3,r3,#3
 1037 0014 FB60     	 str r3,[r7,#12]
 390:.././hal/sam3u1c/pmc.c **** 	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 391:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 1038              	 .loc 1 391 0
 1039 0016 7B68     	 ldr r3,[r7,#4]
 1040 0018 1B02     	 lsls r3,r3,#8
 1041 001a 9AB2     	 uxth r2,r3
 390:.././hal/sam3u1c/pmc.c **** 	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 1042              	 .loc 1 390 0
 1043 001c FB68     	 ldr r3,[r7,#12]
 1044 001e 1343     	 orrs r3,r3,r2
 1045 0020 43F45C13 	 orr r3,r3,#3604480
 1046 0024 43F00103 	 orr r3,r3,#1
 1047 0028 FB60     	 str r3,[r7,#12]
 392:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = mor;
 1048              	 .loc 1 392 0
 1049 002a 074A     	 ldr r2,.L78
 1050 002c FB68     	 ldr r3,[r7,#12]
 1051 002e 1362     	 str r3,[r2,#32]
 393:.././hal/sam3u1c/pmc.c **** 	/* Wait the main Xtal to stabilize */
 394:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
 1052              	 .loc 1 394 0
 1053 0030 00BF     	 nop
 1054              	.L77:
 1055              	 .loc 1 394 0 is_stmt 0 discriminator 1
 1056 0032 054B     	 ldr r3,.L78
 1057 0034 9B6E     	 ldr r3,[r3,#104]
 1058 0036 03F00103 	 and r3,r3,#1
 1059 003a 002B     	 cmp r3,#0
 1060 003c F9D0     	 beq .L77
 395:.././hal/sam3u1c/pmc.c **** }
 1061              	 .loc 1 395 0 is_stmt 1
 1062 003e 00BF     	 nop
 1063 0040 1437     	 adds r7,r7,#20
 1064              	.LCFI69:
 1065              	 .cfi_def_cfa_offset 4
 1066 0042 BD46     	 mov sp,r7
 1067              	.LCFI70:
 1068              	 .cfi_def_cfa_register 13
 1069              	 
 1070 0044 80BC     	 pop {r7}
 1071              	.LCFI71:
 1072              	 .cfi_restore 7
 1073              	 .cfi_def_cfa_offset 0
 1074 0046 7047     	 bx lr
 1075              	.L79:
 1076              	 .align 2
 1077              	.L78:
 1078 0048 00040E40 	 .word 1074660352
 1079              	 .cfi_endproc
 1080              	.LFE79:
 1082              	 .section .text.pmc_osc_bypass_main_xtal,"ax",%progbits
 1083              	 .align 1
 1084              	 .global pmc_osc_bypass_main_xtal
 1085              	 .syntax unified
 1086              	 .thumb
 1087              	 .thumb_func
 1088              	 .fpu softvfp
 1090              	pmc_osc_bypass_main_xtal:
 1091              	.LFB80:
 396:.././hal/sam3u1c/pmc.c **** 
 397:.././hal/sam3u1c/pmc.c **** /**
 398:.././hal/sam3u1c/pmc.c ****  * \brief Bypass main XTAL.
 399:.././hal/sam3u1c/pmc.c ****  */
 400:.././hal/sam3u1c/pmc.c **** void pmc_osc_bypass_main_xtal(void)
 401:.././hal/sam3u1c/pmc.c **** {
 1092              	 .loc 1 401 0
 1093              	 .cfi_startproc
 1094              	 
 1095              	 
 1096              	 
 1097 0000 80B4     	 push {r7}
 1098              	.LCFI72:
 1099              	 .cfi_def_cfa_offset 4
 1100              	 .cfi_offset 7,-4
 1101 0002 83B0     	 sub sp,sp,#12
 1102              	.LCFI73:
 1103              	 .cfi_def_cfa_offset 16
 1104 0004 00AF     	 add r7,sp,#0
 1105              	.LCFI74:
 1106              	 .cfi_def_cfa_register 7
 402:.././hal/sam3u1c/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 1107              	 .loc 1 402 0
 1108 0006 0A4B     	 ldr r3,.L81
 1109 0008 1B6A     	 ldr r3,[r3,#32]
 1110 000a 7B60     	 str r3,[r7,#4]
 403:.././hal/sam3u1c/pmc.c **** 	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
 1111              	 .loc 1 403 0
 1112 000c 7B68     	 ldr r3,[r7,#4]
 1113 000e 23F00303 	 bic r3,r3,#3
 1114 0012 7B60     	 str r3,[r7,#4]
 404:.././hal/sam3u1c/pmc.c **** 	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
 1115              	 .loc 1 404 0
 1116 0014 7B68     	 ldr r3,[r7,#4]
 1117 0016 43F45C13 	 orr r3,r3,#3604480
 1118 001a 43F00203 	 orr r3,r3,#2
 1119 001e 7B60     	 str r3,[r7,#4]
 405:.././hal/sam3u1c/pmc.c **** 	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
 406:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = mor;
 1120              	 .loc 1 406 0
 1121 0020 034A     	 ldr r2,.L81
 1122 0022 7B68     	 ldr r3,[r7,#4]
 1123 0024 1362     	 str r3,[r2,#32]
 407:.././hal/sam3u1c/pmc.c **** 	/* The MOSCXTS in PMC_SR is automatically set */
 408:.././hal/sam3u1c/pmc.c **** }
 1124              	 .loc 1 408 0
 1125 0026 00BF     	 nop
 1126 0028 0C37     	 adds r7,r7,#12
 1127              	.LCFI75:
 1128              	 .cfi_def_cfa_offset 4
 1129 002a BD46     	 mov sp,r7
 1130              	.LCFI76:
 1131              	 .cfi_def_cfa_register 13
 1132              	 
 1133 002c 80BC     	 pop {r7}
 1134              	.LCFI77:
 1135              	 .cfi_restore 7
 1136              	 .cfi_def_cfa_offset 0
 1137 002e 7047     	 bx lr
 1138              	.L82:
 1139              	 .align 2
 1140              	.L81:
 1141 0030 00040E40 	 .word 1074660352
 1142              	 .cfi_endproc
 1143              	.LFE80:
 1145              	 .section .text.pmc_osc_disable_main_xtal,"ax",%progbits
 1146              	 .align 1
 1147              	 .global pmc_osc_disable_main_xtal
 1148              	 .syntax unified
 1149              	 .thumb
 1150              	 .thumb_func
 1151              	 .fpu softvfp
 1153              	pmc_osc_disable_main_xtal:
 1154              	.LFB81:
 409:.././hal/sam3u1c/pmc.c **** 
 410:.././hal/sam3u1c/pmc.c **** /**
 411:.././hal/sam3u1c/pmc.c ****  * \brief Disable the main Xtal.
 412:.././hal/sam3u1c/pmc.c ****  */
 413:.././hal/sam3u1c/pmc.c **** void pmc_osc_disable_main_xtal(void)
 414:.././hal/sam3u1c/pmc.c **** {
 1155              	 .loc 1 414 0
 1156              	 .cfi_startproc
 1157              	 
 1158              	 
 1159              	 
 1160 0000 80B4     	 push {r7}
 1161              	.LCFI78:
 1162              	 .cfi_def_cfa_offset 4
 1163              	 .cfi_offset 7,-4
 1164 0002 83B0     	 sub sp,sp,#12
 1165              	.LCFI79:
 1166              	 .cfi_def_cfa_offset 16
 1167 0004 00AF     	 add r7,sp,#0
 1168              	.LCFI80:
 1169              	 .cfi_def_cfa_register 7
 415:.././hal/sam3u1c/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 1170              	 .loc 1 415 0
 1171 0006 084B     	 ldr r3,.L84
 1172 0008 1B6A     	 ldr r3,[r3,#32]
 1173 000a 7B60     	 str r3,[r7,#4]
 416:.././hal/sam3u1c/pmc.c **** 	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
 1174              	 .loc 1 416 0
 1175 000c 7B68     	 ldr r3,[r7,#4]
 1176 000e 23F00303 	 bic r3,r3,#3
 1177 0012 7B60     	 str r3,[r7,#4]
 417:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
 1178              	 .loc 1 417 0
 1179 0014 044A     	 ldr r2,.L84
 1180 0016 7B68     	 ldr r3,[r7,#4]
 1181 0018 43F45C13 	 orr r3,r3,#3604480
 1182 001c 1362     	 str r3,[r2,#32]
 418:.././hal/sam3u1c/pmc.c **** }
 1183              	 .loc 1 418 0
 1184 001e 00BF     	 nop
 1185 0020 0C37     	 adds r7,r7,#12
 1186              	.LCFI81:
 1187              	 .cfi_def_cfa_offset 4
 1188 0022 BD46     	 mov sp,r7
 1189              	.LCFI82:
 1190              	 .cfi_def_cfa_register 13
 1191              	 
 1192 0024 80BC     	 pop {r7}
 1193              	.LCFI83:
 1194              	 .cfi_restore 7
 1195              	 .cfi_def_cfa_offset 0
 1196 0026 7047     	 bx lr
 1197              	.L85:
 1198              	 .align 2
 1199              	.L84:
 1200 0028 00040E40 	 .word 1074660352
 1201              	 .cfi_endproc
 1202              	.LFE81:
 1204              	 .section .text.pmc_osc_is_bypassed_main_xtal,"ax",%progbits
 1205              	 .align 1
 1206              	 .global pmc_osc_is_bypassed_main_xtal
 1207              	 .syntax unified
 1208              	 .thumb
 1209              	 .thumb_func
 1210              	 .fpu softvfp
 1212              	pmc_osc_is_bypassed_main_xtal:
 1213              	.LFB82:
 419:.././hal/sam3u1c/pmc.c **** 
 420:.././hal/sam3u1c/pmc.c **** /**
 421:.././hal/sam3u1c/pmc.c ****  * \brief Check if the main crystal is bypassed.
 422:.././hal/sam3u1c/pmc.c ****  *
 423:.././hal/sam3u1c/pmc.c ****  * \retval 0 Xtal is bypassed, otherwise not.
 424:.././hal/sam3u1c/pmc.c ****  */
 425:.././hal/sam3u1c/pmc.c **** uint32_t pmc_osc_is_bypassed_main_xtal(void)
 426:.././hal/sam3u1c/pmc.c **** {
 1214              	 .loc 1 426 0
 1215              	 .cfi_startproc
 1216              	 
 1217              	 
 1218              	 
 1219 0000 80B4     	 push {r7}
 1220              	.LCFI84:
 1221              	 .cfi_def_cfa_offset 4
 1222              	 .cfi_offset 7,-4
 1223 0002 00AF     	 add r7,sp,#0
 1224              	.LCFI85:
 1225              	 .cfi_def_cfa_register 7
 427:.././hal/sam3u1c/pmc.c **** 	return (PMC->CKGR_MOR & CKGR_MOR_MOSCXTBY);
 1226              	 .loc 1 427 0
 1227 0004 034B     	 ldr r3,.L88
 1228 0006 1B6A     	 ldr r3,[r3,#32]
 1229 0008 03F00203 	 and r3,r3,#2
 428:.././hal/sam3u1c/pmc.c **** }
 1230              	 .loc 1 428 0
 1231 000c 1846     	 mov r0,r3
 1232 000e BD46     	 mov sp,r7
 1233              	.LCFI86:
 1234              	 .cfi_def_cfa_register 13
 1235              	 
 1236 0010 80BC     	 pop {r7}
 1237              	.LCFI87:
 1238              	 .cfi_restore 7
 1239              	 .cfi_def_cfa_offset 0
 1240 0012 7047     	 bx lr
 1241              	.L89:
 1242              	 .align 2
 1243              	.L88:
 1244 0014 00040E40 	 .word 1074660352
 1245              	 .cfi_endproc
 1246              	.LFE82:
 1248              	 .section .text.pmc_osc_is_ready_main_xtal,"ax",%progbits
 1249              	 .align 1
 1250              	 .global pmc_osc_is_ready_main_xtal
 1251              	 .syntax unified
 1252              	 .thumb
 1253              	 .thumb_func
 1254              	 .fpu softvfp
 1256              	pmc_osc_is_ready_main_xtal:
 1257              	.LFB83:
 429:.././hal/sam3u1c/pmc.c **** 
 430:.././hal/sam3u1c/pmc.c **** /**
 431:.././hal/sam3u1c/pmc.c ****  * \brief Check if the main crystal is ready.
 432:.././hal/sam3u1c/pmc.c ****  *
 433:.././hal/sam3u1c/pmc.c ****  * \note If main crystal is bypassed, it's always ready.
 434:.././hal/sam3u1c/pmc.c ****  *
 435:.././hal/sam3u1c/pmc.c ****  * \retval 0 main crystal is not ready, otherwise ready.
 436:.././hal/sam3u1c/pmc.c ****  */
 437:.././hal/sam3u1c/pmc.c **** uint32_t pmc_osc_is_ready_main_xtal(void)
 438:.././hal/sam3u1c/pmc.c **** {
 1258              	 .loc 1 438 0
 1259              	 .cfi_startproc
 1260              	 
 1261              	 
 1262              	 
 1263 0000 80B4     	 push {r7}
 1264              	.LCFI88:
 1265              	 .cfi_def_cfa_offset 4
 1266              	 .cfi_offset 7,-4
 1267 0002 00AF     	 add r7,sp,#0
 1268              	.LCFI89:
 1269              	 .cfi_def_cfa_register 7
 439:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
 1270              	 .loc 1 439 0
 1271 0004 034B     	 ldr r3,.L92
 1272 0006 9B6E     	 ldr r3,[r3,#104]
 1273 0008 03F00103 	 and r3,r3,#1
 440:.././hal/sam3u1c/pmc.c **** }
 1274              	 .loc 1 440 0
 1275 000c 1846     	 mov r0,r3
 1276 000e BD46     	 mov sp,r7
 1277              	.LCFI90:
 1278              	 .cfi_def_cfa_register 13
 1279              	 
 1280 0010 80BC     	 pop {r7}
 1281              	.LCFI91:
 1282              	 .cfi_restore 7
 1283              	 .cfi_def_cfa_offset 0
 1284 0012 7047     	 bx lr
 1285              	.L93:
 1286              	 .align 2
 1287              	.L92:
 1288 0014 00040E40 	 .word 1074660352
 1289              	 .cfi_endproc
 1290              	.LFE83:
 1292              	 .section .text.pmc_switch_mainck_to_xtal,"ax",%progbits
 1293              	 .align 1
 1294              	 .global pmc_switch_mainck_to_xtal
 1295              	 .syntax unified
 1296              	 .thumb
 1297              	 .thumb_func
 1298              	 .fpu softvfp
 1300              	pmc_switch_mainck_to_xtal:
 1301              	.LFB84:
 441:.././hal/sam3u1c/pmc.c **** 
 442:.././hal/sam3u1c/pmc.c **** /**
 443:.././hal/sam3u1c/pmc.c ****  * \brief Switch main clock source selection to external Xtal/Bypass.
 444:.././hal/sam3u1c/pmc.c ****  *
 445:.././hal/sam3u1c/pmc.c ****  * \note The function may switch MCK to SCLK if MCK source is MAINCK to avoid
 446:.././hal/sam3u1c/pmc.c ****  *       any system crash.
 447:.././hal/sam3u1c/pmc.c ****  *
 448:.././hal/sam3u1c/pmc.c ****  * \note If used in Xtal mode, the Xtal is automatically enabled.
 449:.././hal/sam3u1c/pmc.c ****  *
 450:.././hal/sam3u1c/pmc.c ****  * \param ul_bypass 0 for Xtal, 1 for bypass.
 451:.././hal/sam3u1c/pmc.c ****  *
 452:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 453:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 454:.././hal/sam3u1c/pmc.c ****  */
 455:.././hal/sam3u1c/pmc.c **** void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
 456:.././hal/sam3u1c/pmc.c **** 		uint32_t ul_xtal_startup_time)
 457:.././hal/sam3u1c/pmc.c **** {
 1302              	 .loc 1 457 0
 1303              	 .cfi_startproc
 1304              	 
 1305              	 
 1306              	 
 1307 0000 80B4     	 push {r7}
 1308              	.LCFI92:
 1309              	 .cfi_def_cfa_offset 4
 1310              	 .cfi_offset 7,-4
 1311 0002 83B0     	 sub sp,sp,#12
 1312              	.LCFI93:
 1313              	 .cfi_def_cfa_offset 16
 1314 0004 00AF     	 add r7,sp,#0
 1315              	.LCFI94:
 1316              	 .cfi_def_cfa_register 7
 1317 0006 7860     	 str r0,[r7,#4]
 1318 0008 3960     	 str r1,[r7]
 458:.././hal/sam3u1c/pmc.c **** 	/* Enable Main Xtal oscillator */
 459:.././hal/sam3u1c/pmc.c **** 	if (ul_bypass) {
 1319              	 .loc 1 459 0
 1320 000a 7B68     	 ldr r3,[r7,#4]
 1321 000c 002B     	 cmp r3,#0
 1322 000e 08D0     	 beq .L95
 460:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 1323              	 .loc 1 460 0
 1324 0010 1649     	 ldr r1,.L99
 1325 0012 164B     	 ldr r3,.L99
 1326 0014 1B6A     	 ldr r3,[r3,#32]
 461:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
 1327              	 .loc 1 461 0
 1328 0016 164A     	 ldr r2,.L99+4
 1329 0018 1A40     	 ands r2,r2,r3
 1330 001a 164B     	 ldr r3,.L99+8
 1331 001c 1343     	 orrs r3,r3,r2
 460:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 1332              	 .loc 1 460 0
 1333 001e 0B62     	 str r3,[r1,#32]
 462:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_MOSCSEL;
 463:.././hal/sam3u1c/pmc.c **** 	} else {
 464:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
 465:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 466:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 467:.././hal/sam3u1c/pmc.c **** 		/* Wait the Xtal to stabilize */
 468:.././hal/sam3u1c/pmc.c **** 		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
 469:.././hal/sam3u1c/pmc.c **** 
 470:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
 471:.././hal/sam3u1c/pmc.c **** 	}
 472:.././hal/sam3u1c/pmc.c **** }
 1334              	 .loc 1 472 0
 1335 0020 1EE0     	 b .L98
 1336              	.L95:
 464:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 1337              	 .loc 1 464 0
 1338 0022 1249     	 ldr r1,.L99
 1339 0024 114B     	 ldr r3,.L99
 1340 0026 1B6A     	 ldr r3,[r3,#32]
 465:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 1341              	 .loc 1 465 0
 1342 0028 23F45C13 	 bic r3,r3,#3604480
 1343 002c 23F00303 	 bic r3,r3,#3
 466:.././hal/sam3u1c/pmc.c **** 		/* Wait the Xtal to stabilize */
 1344              	 .loc 1 466 0
 1345 0030 3A68     	 ldr r2,[r7]
 1346 0032 1202     	 lsls r2,r2,#8
 1347 0034 92B2     	 uxth r2,r2
 465:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 1348              	 .loc 1 465 0
 1349 0036 1343     	 orrs r3,r3,r2
 1350 0038 43F45C13 	 orr r3,r3,#3604480
 1351 003c 43F00103 	 orr r3,r3,#1
 464:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 1352              	 .loc 1 464 0
 1353 0040 0B62     	 str r3,[r1,#32]
 468:.././hal/sam3u1c/pmc.c **** 
 1354              	 .loc 1 468 0
 1355 0042 00BF     	 nop
 1356              	.L97:
 468:.././hal/sam3u1c/pmc.c **** 
 1357              	 .loc 1 468 0 is_stmt 0 discriminator 1
 1358 0044 094B     	 ldr r3,.L99
 1359 0046 9B6E     	 ldr r3,[r3,#104]
 1360 0048 03F00103 	 and r3,r3,#1
 1361 004c 002B     	 cmp r3,#0
 1362 004e F9D0     	 beq .L97
 470:.././hal/sam3u1c/pmc.c **** 	}
 1363              	 .loc 1 470 0 is_stmt 1
 1364 0050 064A     	 ldr r2,.L99
 1365 0052 064B     	 ldr r3,.L99
 1366 0054 1B6A     	 ldr r3,[r3,#32]
 1367 0056 43F09B73 	 orr r3,r3,#20316160
 1368 005a 43F48033 	 orr r3,r3,#65536
 1369 005e 1362     	 str r3,[r2,#32]
 1370              	.L98:
 1371              	 .loc 1 472 0
 1372 0060 00BF     	 nop
 1373 0062 0C37     	 adds r7,r7,#12
 1374              	.LCFI95:
 1375              	 .cfi_def_cfa_offset 4
 1376 0064 BD46     	 mov sp,r7
 1377              	.LCFI96:
 1378              	 .cfi_def_cfa_register 13
 1379              	 
 1380 0066 80BC     	 pop {r7}
 1381              	.LCFI97:
 1382              	 .cfi_restore 7
 1383              	 .cfi_def_cfa_offset 0
 1384 0068 7047     	 bx lr
 1385              	.L100:
 1386 006a 00BF     	 .align 2
 1387              	.L99:
 1388 006c 00040E40 	 .word 1074660352
 1389 0070 FCFFC8FE 	 .word -20381700
 1390 0074 02003701 	 .word 20381698
 1391              	 .cfi_endproc
 1392              	.LFE84:
 1394              	 .section .text.pmc_osc_disable_xtal,"ax",%progbits
 1395              	 .align 1
 1396              	 .global pmc_osc_disable_xtal
 1397              	 .syntax unified
 1398              	 .thumb
 1399              	 .thumb_func
 1400              	 .fpu softvfp
 1402              	pmc_osc_disable_xtal:
 1403              	.LFB85:
 473:.././hal/sam3u1c/pmc.c **** 
 474:.././hal/sam3u1c/pmc.c **** /**
 475:.././hal/sam3u1c/pmc.c ****  * \brief Disable the external Xtal.
 476:.././hal/sam3u1c/pmc.c ****  *
 477:.././hal/sam3u1c/pmc.c ****  * \param ul_bypass 0 for Xtal, 1 for bypass.
 478:.././hal/sam3u1c/pmc.c ****  */
 479:.././hal/sam3u1c/pmc.c **** void pmc_osc_disable_xtal(uint32_t ul_bypass)
 480:.././hal/sam3u1c/pmc.c **** {
 1404              	 .loc 1 480 0
 1405              	 .cfi_startproc
 1406              	 
 1407              	 
 1408              	 
 1409 0000 80B4     	 push {r7}
 1410              	.LCFI98:
 1411              	 .cfi_def_cfa_offset 4
 1412              	 .cfi_offset 7,-4
 1413 0002 83B0     	 sub sp,sp,#12
 1414              	.LCFI99:
 1415              	 .cfi_def_cfa_offset 16
 1416 0004 00AF     	 add r7,sp,#0
 1417              	.LCFI100:
 1418              	 .cfi_def_cfa_register 7
 1419 0006 7860     	 str r0,[r7,#4]
 481:.././hal/sam3u1c/pmc.c **** 	/* Disable xtal oscillator */
 482:.././hal/sam3u1c/pmc.c **** 	if (ul_bypass) {
 1420              	 .loc 1 482 0
 1421 0008 7B68     	 ldr r3,[r7,#4]
 1422 000a 002B     	 cmp r3,#0
 1423 000c 0AD0     	 beq .L102
 483:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
 1424              	 .loc 1 483 0
 1425 000e 0D4A     	 ldr r2,.L105
 1426 0010 0C4B     	 ldr r3,.L105
 1427 0012 1B6A     	 ldr r3,[r3,#32]
 1428 0014 23F45C13 	 bic r3,r3,#3604480
 1429 0018 23F00203 	 bic r3,r3,#2
 1430 001c 43F45C13 	 orr r3,r3,#3604480
 1431 0020 1362     	 str r3,[r2,#32]
 484:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 485:.././hal/sam3u1c/pmc.c **** 	} else {
 486:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 487:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 488:.././hal/sam3u1c/pmc.c **** 	}
 489:.././hal/sam3u1c/pmc.c **** }
 1432              	 .loc 1 489 0
 1433 0022 09E0     	 b .L104
 1434              	.L102:
 486:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 1435              	 .loc 1 486 0
 1436 0024 074A     	 ldr r2,.L105
 1437 0026 074B     	 ldr r3,.L105
 1438 0028 1B6A     	 ldr r3,[r3,#32]
 1439 002a 23F45C13 	 bic r3,r3,#3604480
 1440 002e 23F00103 	 bic r3,r3,#1
 1441 0032 43F45C13 	 orr r3,r3,#3604480
 1442 0036 1362     	 str r3,[r2,#32]
 1443              	.L104:
 1444              	 .loc 1 489 0
 1445 0038 00BF     	 nop
 1446 003a 0C37     	 adds r7,r7,#12
 1447              	.LCFI101:
 1448              	 .cfi_def_cfa_offset 4
 1449 003c BD46     	 mov sp,r7
 1450              	.LCFI102:
 1451              	 .cfi_def_cfa_register 13
 1452              	 
 1453 003e 80BC     	 pop {r7}
 1454              	.LCFI103:
 1455              	 .cfi_restore 7
 1456              	 .cfi_def_cfa_offset 0
 1457 0040 7047     	 bx lr
 1458              	.L106:
 1459 0042 00BF     	 .align 2
 1460              	.L105:
 1461 0044 00040E40 	 .word 1074660352
 1462              	 .cfi_endproc
 1463              	.LFE85:
 1465              	 .section .text.pmc_osc_is_ready_mainck,"ax",%progbits
 1466              	 .align 1
 1467              	 .global pmc_osc_is_ready_mainck
 1468              	 .syntax unified
 1469              	 .thumb
 1470              	 .thumb_func
 1471              	 .fpu softvfp
 1473              	pmc_osc_is_ready_mainck:
 1474              	.LFB86:
 490:.././hal/sam3u1c/pmc.c **** 
 491:.././hal/sam3u1c/pmc.c **** /**
 492:.././hal/sam3u1c/pmc.c ****  * \brief Check if the MAINCK is ready. Depending on MOSCEL, MAINCK can be one
 493:.././hal/sam3u1c/pmc.c ****  * of Xtal, bypass or internal RC.
 494:.././hal/sam3u1c/pmc.c ****  *
 495:.././hal/sam3u1c/pmc.c ****  * \retval 1 Xtal is ready.
 496:.././hal/sam3u1c/pmc.c ****  * \retval 0 Xtal is not ready.
 497:.././hal/sam3u1c/pmc.c ****  */
 498:.././hal/sam3u1c/pmc.c **** uint32_t pmc_osc_is_ready_mainck(void)
 499:.././hal/sam3u1c/pmc.c **** {
 1475              	 .loc 1 499 0
 1476              	 .cfi_startproc
 1477              	 
 1478              	 
 1479              	 
 1480 0000 80B4     	 push {r7}
 1481              	.LCFI104:
 1482              	 .cfi_def_cfa_offset 4
 1483              	 .cfi_offset 7,-4
 1484 0002 00AF     	 add r7,sp,#0
 1485              	.LCFI105:
 1486              	 .cfi_def_cfa_register 7
 500:.././hal/sam3u1c/pmc.c **** 	return PMC->PMC_SR & PMC_SR_MOSCSELS;
 1487              	 .loc 1 500 0
 1488 0004 034B     	 ldr r3,.L109
 1489 0006 9B6E     	 ldr r3,[r3,#104]
 1490 0008 03F48033 	 and r3,r3,#65536
 501:.././hal/sam3u1c/pmc.c **** }
 1491              	 .loc 1 501 0
 1492 000c 1846     	 mov r0,r3
 1493 000e BD46     	 mov sp,r7
 1494              	.LCFI106:
 1495              	 .cfi_def_cfa_register 13
 1496              	 
 1497 0010 80BC     	 pop {r7}
 1498              	.LCFI107:
 1499              	 .cfi_restore 7
 1500              	 .cfi_def_cfa_offset 0
 1501 0012 7047     	 bx lr
 1502              	.L110:
 1503              	 .align 2
 1504              	.L109:
 1505 0014 00040E40 	 .word 1074660352
 1506              	 .cfi_endproc
 1507              	.LFE86:
 1509              	 .section .text.pmc_mainck_osc_select,"ax",%progbits
 1510              	 .align 1
 1511              	 .global pmc_mainck_osc_select
 1512              	 .syntax unified
 1513              	 .thumb
 1514              	 .thumb_func
 1515              	 .fpu softvfp
 1517              	pmc_mainck_osc_select:
 1518              	.LFB87:
 502:.././hal/sam3u1c/pmc.c **** 
 503:.././hal/sam3u1c/pmc.c **** /**
 504:.././hal/sam3u1c/pmc.c ****  * \brief Select Main Crystal or internal RC as main clock source.
 505:.././hal/sam3u1c/pmc.c ****  *
 506:.././hal/sam3u1c/pmc.c ****  * \note This function will not enable/disable RC or Main Crystal.
 507:.././hal/sam3u1c/pmc.c ****  *
 508:.././hal/sam3u1c/pmc.c ****  * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 509:.././hal/sam3u1c/pmc.c ****  */
 510:.././hal/sam3u1c/pmc.c **** void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
 511:.././hal/sam3u1c/pmc.c **** {
 1519              	 .loc 1 511 0
 1520              	 .cfi_startproc
 1521              	 
 1522              	 
 1523              	 
 1524 0000 80B4     	 push {r7}
 1525              	.LCFI108:
 1526              	 .cfi_def_cfa_offset 4
 1527              	 .cfi_offset 7,-4
 1528 0002 85B0     	 sub sp,sp,#20
 1529              	.LCFI109:
 1530              	 .cfi_def_cfa_offset 24
 1531 0004 00AF     	 add r7,sp,#0
 1532              	.LCFI110:
 1533              	 .cfi_def_cfa_register 7
 1534 0006 7860     	 str r0,[r7,#4]
 512:.././hal/sam3u1c/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 1535              	 .loc 1 512 0
 1536 0008 0C4B     	 ldr r3,.L114
 1537 000a 1B6A     	 ldr r3,[r3,#32]
 1538 000c FB60     	 str r3,[r7,#12]
 513:.././hal/sam3u1c/pmc.c **** 	if (ul_xtal_rc) {
 1539              	 .loc 1 513 0
 1540 000e 7B68     	 ldr r3,[r7,#4]
 1541 0010 002B     	 cmp r3,#0
 1542 0012 04D0     	 beq .L112
 514:.././hal/sam3u1c/pmc.c **** 		mor |=  CKGR_MOR_MOSCSEL;
 1543              	 .loc 1 514 0
 1544 0014 FB68     	 ldr r3,[r7,#12]
 1545 0016 43F08073 	 orr r3,r3,#16777216
 1546 001a FB60     	 str r3,[r7,#12]
 1547 001c 03E0     	 b .L113
 1548              	.L112:
 515:.././hal/sam3u1c/pmc.c **** 	} else {
 516:.././hal/sam3u1c/pmc.c **** 		mor &= ~CKGR_MOR_MOSCSEL;
 1549              	 .loc 1 516 0
 1550 001e FB68     	 ldr r3,[r7,#12]
 1551 0020 23F08073 	 bic r3,r3,#16777216
 1552 0024 FB60     	 str r3,[r7,#12]
 1553              	.L113:
 517:.././hal/sam3u1c/pmc.c **** 	}
 518:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
 1554              	 .loc 1 518 0
 1555 0026 054A     	 ldr r2,.L114
 1556 0028 FB68     	 ldr r3,[r7,#12]
 1557 002a 43F45C13 	 orr r3,r3,#3604480
 1558 002e 1362     	 str r3,[r2,#32]
 519:.././hal/sam3u1c/pmc.c **** }
 1559              	 .loc 1 519 0
 1560 0030 00BF     	 nop
 1561 0032 1437     	 adds r7,r7,#20
 1562              	.LCFI111:
 1563              	 .cfi_def_cfa_offset 4
 1564 0034 BD46     	 mov sp,r7
 1565              	.LCFI112:
 1566              	 .cfi_def_cfa_register 13
 1567              	 
 1568 0036 80BC     	 pop {r7}
 1569              	.LCFI113:
 1570              	 .cfi_restore 7
 1571              	 .cfi_def_cfa_offset 0
 1572 0038 7047     	 bx lr
 1573              	.L115:
 1574 003a 00BF     	 .align 2
 1575              	.L114:
 1576 003c 00040E40 	 .word 1074660352
 1577              	 .cfi_endproc
 1578              	.LFE87:
 1580              	 .section .text.pmc_enable_pllack,"ax",%progbits
 1581              	 .align 1
 1582              	 .global pmc_enable_pllack
 1583              	 .syntax unified
 1584              	 .thumb
 1585              	 .thumb_func
 1586              	 .fpu softvfp
 1588              	pmc_enable_pllack:
 1589              	.LFB88:
 520:.././hal/sam3u1c/pmc.c **** 
 521:.././hal/sam3u1c/pmc.c **** /**
 522:.././hal/sam3u1c/pmc.c ****  * \brief Enable PLLA clock.
 523:.././hal/sam3u1c/pmc.c ****  *
 524:.././hal/sam3u1c/pmc.c ****  * \param mula PLLA multiplier.
 525:.././hal/sam3u1c/pmc.c ****  * \param pllacount PLLA counter.
 526:.././hal/sam3u1c/pmc.c ****  * \param diva Divider.
 527:.././hal/sam3u1c/pmc.c ****  */
 528:.././hal/sam3u1c/pmc.c **** void pmc_enable_pllack(uint32_t mula, uint32_t pllacount, uint32_t diva)
 529:.././hal/sam3u1c/pmc.c **** {
 1590              	 .loc 1 529 0
 1591              	 .cfi_startproc
 1592              	 
 1593              	 
 1594 0000 80B5     	 push {r7,lr}
 1595              	.LCFI114:
 1596              	 .cfi_def_cfa_offset 8
 1597              	 .cfi_offset 7,-8
 1598              	 .cfi_offset 14,-4
 1599 0002 84B0     	 sub sp,sp,#16
 1600              	.LCFI115:
 1601              	 .cfi_def_cfa_offset 24
 1602 0004 00AF     	 add r7,sp,#0
 1603              	.LCFI116:
 1604              	 .cfi_def_cfa_register 7
 1605 0006 F860     	 str r0,[r7,#12]
 1606 0008 B960     	 str r1,[r7,#8]
 1607 000a 7A60     	 str r2,[r7,#4]
 530:.././hal/sam3u1c/pmc.c **** 	/* first disable the PLL to unlock the lock */
 531:.././hal/sam3u1c/pmc.c **** 	pmc_disable_pllack();
 1608              	 .loc 1 531 0
 1609 000c 0E4B     	 ldr r3,.L118
 1610 000e 9847     	 blx r3
 1611              	.LVL0:
 532:.././hal/sam3u1c/pmc.c **** 
 533:.././hal/sam3u1c/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP || SAMG)
 534:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
 535:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 536:.././hal/sam3u1c/pmc.c **** #else
 537:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
 1612              	 .loc 1 537 0
 1613 0010 0E48     	 ldr r0,.L118+4
 1614 0012 7B68     	 ldr r3,[r7,#4]
 1615 0014 DAB2     	 uxtb r2,r3
 538:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 1616              	 .loc 1 538 0
 1617 0016 BB68     	 ldr r3,[r7,#8]
 1618 0018 1B02     	 lsls r3,r3,#8
 1619 001a 03F47C53 	 and r3,r3,#16128
 537:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 1620              	 .loc 1 537 0
 1621 001e 1A43     	 orrs r2,r2,r3
 1622              	 .loc 1 538 0
 1623 0020 FB68     	 ldr r3,[r7,#12]
 1624 0022 1904     	 lsls r1,r3,#16
 1625 0024 0A4B     	 ldr r3,.L118+8
 1626 0026 0B40     	 ands r3,r3,r1
 1627 0028 1343     	 orrs r3,r3,r2
 1628 002a 43F00053 	 orr r3,r3,#536870912
 537:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 1629              	 .loc 1 537 0
 1630 002e 8362     	 str r3,[r0,#40]
 539:.././hal/sam3u1c/pmc.c **** #endif
 540:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_SR & PMC_SR_LOCKA) == 0);
 1631              	 .loc 1 540 0
 1632 0030 00BF     	 nop
 1633              	.L117:
 1634              	 .loc 1 540 0 is_stmt 0 discriminator 1
 1635 0032 064B     	 ldr r3,.L118+4
 1636 0034 9B6E     	 ldr r3,[r3,#104]
 1637 0036 03F00203 	 and r3,r3,#2
 1638 003a 002B     	 cmp r3,#0
 1639 003c F9D0     	 beq .L117
 541:.././hal/sam3u1c/pmc.c **** }
 1640              	 .loc 1 541 0 is_stmt 1
 1641 003e 00BF     	 nop
 1642 0040 1037     	 adds r7,r7,#16
 1643              	.LCFI117:
 1644              	 .cfi_def_cfa_offset 8
 1645 0042 BD46     	 mov sp,r7
 1646              	.LCFI118:
 1647              	 .cfi_def_cfa_register 13
 1648              	 
 1649 0044 80BD     	 pop {r7,pc}
 1650              	.L119:
 1651 0046 00BF     	 .align 2
 1652              	.L118:
 1653 0048 00000000 	 .word pmc_disable_pllack
 1654 004c 00040E40 	 .word 1074660352
 1655 0050 0000FF07 	 .word 134152192
 1656              	 .cfi_endproc
 1657              	.LFE88:
 1659              	 .section .text.pmc_disable_pllack,"ax",%progbits
 1660              	 .align 1
 1661              	 .global pmc_disable_pllack
 1662              	 .syntax unified
 1663              	 .thumb
 1664              	 .thumb_func
 1665              	 .fpu softvfp
 1667              	pmc_disable_pllack:
 1668              	.LFB89:
 542:.././hal/sam3u1c/pmc.c **** 
 543:.././hal/sam3u1c/pmc.c **** /**
 544:.././hal/sam3u1c/pmc.c ****  * \brief Disable PLLA clock.
 545:.././hal/sam3u1c/pmc.c ****  */
 546:.././hal/sam3u1c/pmc.c **** void pmc_disable_pllack(void)
 547:.././hal/sam3u1c/pmc.c **** {
 1669              	 .loc 1 547 0
 1670              	 .cfi_startproc
 1671              	 
 1672              	 
 1673              	 
 1674 0000 80B4     	 push {r7}
 1675              	.LCFI119:
 1676              	 .cfi_def_cfa_offset 4
 1677              	 .cfi_offset 7,-4
 1678 0002 00AF     	 add r7,sp,#0
 1679              	.LCFI120:
 1680              	 .cfi_def_cfa_register 7
 548:.././hal/sam3u1c/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP || SAMG)
 549:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
 550:.././hal/sam3u1c/pmc.c **** #else
 551:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
 1681              	 .loc 1 551 0
 1682 0004 034B     	 ldr r3,.L121
 1683 0006 4FF00052 	 mov r2,#536870912
 1684 000a 9A62     	 str r2,[r3,#40]
 552:.././hal/sam3u1c/pmc.c **** #endif
 553:.././hal/sam3u1c/pmc.c **** }
 1685              	 .loc 1 553 0
 1686 000c 00BF     	 nop
 1687 000e BD46     	 mov sp,r7
 1688              	.LCFI121:
 1689              	 .cfi_def_cfa_register 13
 1690              	 
 1691 0010 80BC     	 pop {r7}
 1692              	.LCFI122:
 1693              	 .cfi_restore 7
 1694              	 .cfi_def_cfa_offset 0
 1695 0012 7047     	 bx lr
 1696              	.L122:
 1697              	 .align 2
 1698              	.L121:
 1699 0014 00040E40 	 .word 1074660352
 1700              	 .cfi_endproc
 1701              	.LFE89:
 1703              	 .section .text.pmc_is_locked_pllack,"ax",%progbits
 1704              	 .align 1
 1705              	 .global pmc_is_locked_pllack
 1706              	 .syntax unified
 1707              	 .thumb
 1708              	 .thumb_func
 1709              	 .fpu softvfp
 1711              	pmc_is_locked_pllack:
 1712              	.LFB90:
 554:.././hal/sam3u1c/pmc.c **** 
 555:.././hal/sam3u1c/pmc.c **** /**
 556:.././hal/sam3u1c/pmc.c ****  * \brief Is PLLA locked?
 557:.././hal/sam3u1c/pmc.c ****  *
 558:.././hal/sam3u1c/pmc.c ****  * \retval 0 Not locked.
 559:.././hal/sam3u1c/pmc.c ****  * \retval 1 Locked.
 560:.././hal/sam3u1c/pmc.c ****  */
 561:.././hal/sam3u1c/pmc.c **** uint32_t pmc_is_locked_pllack(void)
 562:.././hal/sam3u1c/pmc.c **** {
 1713              	 .loc 1 562 0
 1714              	 .cfi_startproc
 1715              	 
 1716              	 
 1717              	 
 1718 0000 80B4     	 push {r7}
 1719              	.LCFI123:
 1720              	 .cfi_def_cfa_offset 4
 1721              	 .cfi_offset 7,-4
 1722 0002 00AF     	 add r7,sp,#0
 1723              	.LCFI124:
 1724              	 .cfi_def_cfa_register 7
 563:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_LOCKA);
 1725              	 .loc 1 563 0
 1726 0004 034B     	 ldr r3,.L125
 1727 0006 9B6E     	 ldr r3,[r3,#104]
 1728 0008 03F00203 	 and r3,r3,#2
 564:.././hal/sam3u1c/pmc.c **** }
 1729              	 .loc 1 564 0
 1730 000c 1846     	 mov r0,r3
 1731 000e BD46     	 mov sp,r7
 1732              	.LCFI125:
 1733              	 .cfi_def_cfa_register 13
 1734              	 
 1735 0010 80BC     	 pop {r7}
 1736              	.LCFI126:
 1737              	 .cfi_restore 7
 1738              	 .cfi_def_cfa_offset 0
 1739 0012 7047     	 bx lr
 1740              	.L126:
 1741              	 .align 2
 1742              	.L125:
 1743 0014 00040E40 	 .word 1074660352
 1744              	 .cfi_endproc
 1745              	.LFE90:
 1747              	 .section .text.pmc_enable_upll_clock,"ax",%progbits
 1748              	 .align 1
 1749              	 .global pmc_enable_upll_clock
 1750              	 .syntax unified
 1751              	 .thumb
 1752              	 .thumb_func
 1753              	 .fpu softvfp
 1755              	pmc_enable_upll_clock:
 1756              	.LFB91:
 565:.././hal/sam3u1c/pmc.c **** 
 566:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP || SAMG55)
 567:.././hal/sam3u1c/pmc.c **** /**
 568:.././hal/sam3u1c/pmc.c ****  * \brief Enable PLLB clock.
 569:.././hal/sam3u1c/pmc.c ****  *
 570:.././hal/sam3u1c/pmc.c ****  * \param mulb PLLB multiplier.
 571:.././hal/sam3u1c/pmc.c ****  * \param pllbcount PLLB counter.
 572:.././hal/sam3u1c/pmc.c ****  * \param divb Divider.
 573:.././hal/sam3u1c/pmc.c ****  */
 574:.././hal/sam3u1c/pmc.c **** void pmc_enable_pllbck(uint32_t mulb, uint32_t pllbcount, uint32_t divb)
 575:.././hal/sam3u1c/pmc.c **** {
 576:.././hal/sam3u1c/pmc.c **** 	/* first disable the PLL to unlock the lock */
 577:.././hal/sam3u1c/pmc.c **** 	pmc_disable_pllbck();
 578:.././hal/sam3u1c/pmc.c **** 
 579:.././hal/sam3u1c/pmc.c **** #if SAMG55
 580:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(divb) |
 581:.././hal/sam3u1c/pmc.c **** 		CKGR_PLLAR_PLLACOUNT(pllbcount) | CKGR_PLLAR_MULA(mulb);
 582:.././hal/sam3u1c/pmc.c **** #else
 583:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLBR =
 584:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLBR_DIVB(divb) | CKGR_PLLBR_PLLBCOUNT(pllbcount)
 585:.././hal/sam3u1c/pmc.c **** 			| CKGR_PLLBR_MULB(mulb);
 586:.././hal/sam3u1c/pmc.c **** #endif
 587:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_SR & PMC_SR_LOCKB) == 0);
 588:.././hal/sam3u1c/pmc.c **** }
 589:.././hal/sam3u1c/pmc.c **** 
 590:.././hal/sam3u1c/pmc.c **** /**
 591:.././hal/sam3u1c/pmc.c ****  * \brief Disable PLLB clock.
 592:.././hal/sam3u1c/pmc.c ****  */
 593:.././hal/sam3u1c/pmc.c **** void pmc_disable_pllbck(void)
 594:.././hal/sam3u1c/pmc.c **** {
 595:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
 596:.././hal/sam3u1c/pmc.c **** }
 597:.././hal/sam3u1c/pmc.c **** 
 598:.././hal/sam3u1c/pmc.c **** /**
 599:.././hal/sam3u1c/pmc.c ****  * \brief Is PLLB locked?
 600:.././hal/sam3u1c/pmc.c ****  *
 601:.././hal/sam3u1c/pmc.c ****  * \retval 0 Not locked.
 602:.././hal/sam3u1c/pmc.c ****  * \retval 1 Locked.
 603:.././hal/sam3u1c/pmc.c ****  */
 604:.././hal/sam3u1c/pmc.c **** uint32_t pmc_is_locked_pllbck(void)
 605:.././hal/sam3u1c/pmc.c **** {
 606:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_LOCKB);
 607:.././hal/sam3u1c/pmc.c **** }
 608:.././hal/sam3u1c/pmc.c **** #endif
 609:.././hal/sam3u1c/pmc.c **** 
 610:.././hal/sam3u1c/pmc.c **** #if (SAM3XA || SAM3U)
 611:.././hal/sam3u1c/pmc.c **** /**
 612:.././hal/sam3u1c/pmc.c ****  * \brief Enable UPLL clock.
 613:.././hal/sam3u1c/pmc.c ****  */
 614:.././hal/sam3u1c/pmc.c **** void pmc_enable_upll_clock(void)
 615:.././hal/sam3u1c/pmc.c **** {
 1757              	 .loc 1 615 0
 1758              	 .cfi_startproc
 1759              	 
 1760              	 
 1761              	 
 1762 0000 80B4     	 push {r7}
 1763              	.LCFI127:
 1764              	 .cfi_def_cfa_offset 4
 1765              	 .cfi_offset 7,-4
 1766 0002 00AF     	 add r7,sp,#0
 1767              	.LCFI128:
 1768              	 .cfi_def_cfa_register 7
 616:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
 1769              	 .loc 1 616 0
 1770 0004 074B     	 ldr r3,.L129
 1771 0006 4FF44412 	 mov r2,#3211264
 1772 000a DA61     	 str r2,[r3,#28]
 617:.././hal/sam3u1c/pmc.c **** 
 618:.././hal/sam3u1c/pmc.c **** 	/* Wait UTMI PLL Lock Status */
 619:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
 1773              	 .loc 1 619 0
 1774 000c 00BF     	 nop
 1775              	.L128:
 1776              	 .loc 1 619 0 is_stmt 0 discriminator 1
 1777 000e 054B     	 ldr r3,.L129
 1778 0010 9B6E     	 ldr r3,[r3,#104]
 1779 0012 03F04003 	 and r3,r3,#64
 1780 0016 002B     	 cmp r3,#0
 1781 0018 F9D0     	 beq .L128
 620:.././hal/sam3u1c/pmc.c **** }
 1782              	 .loc 1 620 0 is_stmt 1
 1783 001a 00BF     	 nop
 1784 001c BD46     	 mov sp,r7
 1785              	.LCFI129:
 1786              	 .cfi_def_cfa_register 13
 1787              	 
 1788 001e 80BC     	 pop {r7}
 1789              	.LCFI130:
 1790              	 .cfi_restore 7
 1791              	 .cfi_def_cfa_offset 0
 1792 0020 7047     	 bx lr
 1793              	.L130:
 1794 0022 00BF     	 .align 2
 1795              	.L129:
 1796 0024 00040E40 	 .word 1074660352
 1797              	 .cfi_endproc
 1798              	.LFE91:
 1800              	 .section .text.pmc_disable_upll_clock,"ax",%progbits
 1801              	 .align 1
 1802              	 .global pmc_disable_upll_clock
 1803              	 .syntax unified
 1804              	 .thumb
 1805              	 .thumb_func
 1806              	 .fpu softvfp
 1808              	pmc_disable_upll_clock:
 1809              	.LFB92:
 621:.././hal/sam3u1c/pmc.c **** 
 622:.././hal/sam3u1c/pmc.c **** /**
 623:.././hal/sam3u1c/pmc.c ****  * \brief Disable UPLL clock.
 624:.././hal/sam3u1c/pmc.c ****  */
 625:.././hal/sam3u1c/pmc.c **** void pmc_disable_upll_clock(void)
 626:.././hal/sam3u1c/pmc.c **** {
 1810              	 .loc 1 626 0
 1811              	 .cfi_startproc
 1812              	 
 1813              	 
 1814              	 
 1815 0000 80B4     	 push {r7}
 1816              	.LCFI131:
 1817              	 .cfi_def_cfa_offset 4
 1818              	 .cfi_offset 7,-4
 1819 0002 00AF     	 add r7,sp,#0
 1820              	.LCFI132:
 1821              	 .cfi_def_cfa_register 7
 627:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
 1822              	 .loc 1 627 0
 1823 0004 044A     	 ldr r2,.L132
 1824 0006 044B     	 ldr r3,.L132
 1825 0008 DB69     	 ldr r3,[r3,#28]
 1826 000a 23F48033 	 bic r3,r3,#65536
 1827 000e D361     	 str r3,[r2,#28]
 628:.././hal/sam3u1c/pmc.c **** }
 1828              	 .loc 1 628 0
 1829 0010 00BF     	 nop
 1830 0012 BD46     	 mov sp,r7
 1831              	.LCFI133:
 1832              	 .cfi_def_cfa_register 13
 1833              	 
 1834 0014 80BC     	 pop {r7}
 1835              	.LCFI134:
 1836              	 .cfi_restore 7
 1837              	 .cfi_def_cfa_offset 0
 1838 0016 7047     	 bx lr
 1839              	.L133:
 1840              	 .align 2
 1841              	.L132:
 1842 0018 00040E40 	 .word 1074660352
 1843              	 .cfi_endproc
 1844              	.LFE92:
 1846              	 .section .text.pmc_is_locked_upll,"ax",%progbits
 1847              	 .align 1
 1848              	 .global pmc_is_locked_upll
 1849              	 .syntax unified
 1850              	 .thumb
 1851              	 .thumb_func
 1852              	 .fpu softvfp
 1854              	pmc_is_locked_upll:
 1855              	.LFB93:
 629:.././hal/sam3u1c/pmc.c **** 
 630:.././hal/sam3u1c/pmc.c **** /**
 631:.././hal/sam3u1c/pmc.c ****  * \brief Is UPLL locked?
 632:.././hal/sam3u1c/pmc.c ****  *
 633:.././hal/sam3u1c/pmc.c ****  * \retval 0 Not locked.
 634:.././hal/sam3u1c/pmc.c ****  * \retval 1 Locked.
 635:.././hal/sam3u1c/pmc.c ****  */
 636:.././hal/sam3u1c/pmc.c **** uint32_t pmc_is_locked_upll(void)
 637:.././hal/sam3u1c/pmc.c **** {
 1856              	 .loc 1 637 0
 1857              	 .cfi_startproc
 1858              	 
 1859              	 
 1860              	 
 1861 0000 80B4     	 push {r7}
 1862              	.LCFI135:
 1863              	 .cfi_def_cfa_offset 4
 1864              	 .cfi_offset 7,-4
 1865 0002 00AF     	 add r7,sp,#0
 1866              	.LCFI136:
 1867              	 .cfi_def_cfa_register 7
 638:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_LOCKU);
 1868              	 .loc 1 638 0
 1869 0004 034B     	 ldr r3,.L136
 1870 0006 9B6E     	 ldr r3,[r3,#104]
 1871 0008 03F04003 	 and r3,r3,#64
 639:.././hal/sam3u1c/pmc.c **** }
 1872              	 .loc 1 639 0
 1873 000c 1846     	 mov r0,r3
 1874 000e BD46     	 mov sp,r7
 1875              	.LCFI137:
 1876              	 .cfi_def_cfa_register 13
 1877              	 
 1878 0010 80BC     	 pop {r7}
 1879              	.LCFI138:
 1880              	 .cfi_restore 7
 1881              	 .cfi_def_cfa_offset 0
 1882 0012 7047     	 bx lr
 1883              	.L137:
 1884              	 .align 2
 1885              	.L136:
 1886 0014 00040E40 	 .word 1074660352
 1887              	 .cfi_endproc
 1888              	.LFE93:
 1890              	 .section .text.pmc_enable_periph_clk,"ax",%progbits
 1891              	 .align 1
 1892              	 .global pmc_enable_periph_clk
 1893              	 .syntax unified
 1894              	 .thumb
 1895              	 .thumb_func
 1896              	 .fpu softvfp
 1898              	pmc_enable_periph_clk:
 1899              	.LFB94:
 640:.././hal/sam3u1c/pmc.c **** #endif
 641:.././hal/sam3u1c/pmc.c **** 
 642:.././hal/sam3u1c/pmc.c **** /**
 643:.././hal/sam3u1c/pmc.c ****  * \brief Enable the specified peripheral clock.
 644:.././hal/sam3u1c/pmc.c ****  *
 645:.././hal/sam3u1c/pmc.c ****  * \note The ID must NOT be shifted (i.e., 1 << ID_xxx).
 646:.././hal/sam3u1c/pmc.c ****  *
 647:.././hal/sam3u1c/pmc.c ****  * \param ul_id Peripheral ID (ID_xxx).
 648:.././hal/sam3u1c/pmc.c ****  *
 649:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 650:.././hal/sam3u1c/pmc.c ****  * \retval 1 Invalid parameter.
 651:.././hal/sam3u1c/pmc.c ****  */
 652:.././hal/sam3u1c/pmc.c **** uint32_t pmc_enable_periph_clk(uint32_t ul_id)
 653:.././hal/sam3u1c/pmc.c **** {
 1900              	 .loc 1 653 0
 1901              	 .cfi_startproc
 1902              	 
 1903              	 
 1904              	 
 1905 0000 80B4     	 push {r7}
 1906              	.LCFI139:
 1907              	 .cfi_def_cfa_offset 4
 1908              	 .cfi_offset 7,-4
 1909 0002 83B0     	 sub sp,sp,#12
 1910              	.LCFI140:
 1911              	 .cfi_def_cfa_offset 16
 1912 0004 00AF     	 add r7,sp,#0
 1913              	.LCFI141:
 1914              	 .cfi_def_cfa_register 7
 1915 0006 7860     	 str r0,[r7,#4]
 654:.././hal/sam3u1c/pmc.c **** 	if (ul_id > MAX_PERIPH_ID) {
 1916              	 .loc 1 654 0
 1917 0008 7B68     	 ldr r3,[r7,#4]
 1918 000a 1D2B     	 cmp r3,#29
 1919 000c 01D9     	 bls .L139
 655:.././hal/sam3u1c/pmc.c **** 		return 1;
 1920              	 .loc 1 655 0
 1921 000e 0123     	 movs r3,#1
 1922 0010 16E0     	 b .L140
 1923              	.L139:
 656:.././hal/sam3u1c/pmc.c **** 	}
 657:.././hal/sam3u1c/pmc.c **** 
 658:.././hal/sam3u1c/pmc.c **** 	if (ul_id < 32) {
 1924              	 .loc 1 658 0
 1925 0012 7B68     	 ldr r3,[r7,#4]
 1926 0014 1F2B     	 cmp r3,#31
 1927 0016 12D8     	 bhi .L141
 659:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
 1928              	 .loc 1 659 0
 1929 0018 0C4B     	 ldr r3,.L142
 1930 001a 9A69     	 ldr r2,[r3,#24]
 1931 001c 0121     	 movs r1,#1
 1932 001e 7B68     	 ldr r3,[r7,#4]
 1933 0020 01FA03F3 	 lsl r3,r1,r3
 1934 0024 1A40     	 ands r2,r2,r3
 1935 0026 0121     	 movs r1,#1
 1936 0028 7B68     	 ldr r3,[r7,#4]
 1937 002a 01FA03F3 	 lsl r3,r1,r3
 1938 002e 9A42     	 cmp r2,r3
 1939 0030 05D0     	 beq .L141
 660:.././hal/sam3u1c/pmc.c **** 			PMC->PMC_PCER0 = 1 << ul_id;
 1940              	 .loc 1 660 0
 1941 0032 064A     	 ldr r2,.L142
 1942 0034 0121     	 movs r1,#1
 1943 0036 7B68     	 ldr r3,[r7,#4]
 1944 0038 01FA03F3 	 lsl r3,r1,r3
 1945 003c 1361     	 str r3,[r2,#16]
 1946              	.L141:
 661:.././hal/sam3u1c/pmc.c **** 		}
 662:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
 663:.././hal/sam3u1c/pmc.c **** 	} else {
 664:.././hal/sam3u1c/pmc.c **** 		ul_id -= 32;
 665:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
 666:.././hal/sam3u1c/pmc.c **** 			PMC->PMC_PCER1 = 1 << ul_id;
 667:.././hal/sam3u1c/pmc.c **** 		}
 668:.././hal/sam3u1c/pmc.c **** #endif
 669:.././hal/sam3u1c/pmc.c **** 	}
 670:.././hal/sam3u1c/pmc.c **** 
 671:.././hal/sam3u1c/pmc.c **** 	return 0;
 1947              	 .loc 1 671 0
 1948 003e 0023     	 movs r3,#0
 1949              	.L140:
 672:.././hal/sam3u1c/pmc.c **** }
 1950              	 .loc 1 672 0
 1951 0040 1846     	 mov r0,r3
 1952 0042 0C37     	 adds r7,r7,#12
 1953              	.LCFI142:
 1954              	 .cfi_def_cfa_offset 4
 1955 0044 BD46     	 mov sp,r7
 1956              	.LCFI143:
 1957              	 .cfi_def_cfa_register 13
 1958              	 
 1959 0046 80BC     	 pop {r7}
 1960              	.LCFI144:
 1961              	 .cfi_restore 7
 1962              	 .cfi_def_cfa_offset 0
 1963 0048 7047     	 bx lr
 1964              	.L143:
 1965 004a 00BF     	 .align 2
 1966              	.L142:
 1967 004c 00040E40 	 .word 1074660352
 1968              	 .cfi_endproc
 1969              	.LFE94:
 1971              	 .section .text.pmc_disable_periph_clk,"ax",%progbits
 1972              	 .align 1
 1973              	 .global pmc_disable_periph_clk
 1974              	 .syntax unified
 1975              	 .thumb
 1976              	 .thumb_func
 1977              	 .fpu softvfp
 1979              	pmc_disable_periph_clk:
 1980              	.LFB95:
 673:.././hal/sam3u1c/pmc.c **** 
 674:.././hal/sam3u1c/pmc.c **** /**
 675:.././hal/sam3u1c/pmc.c ****  * \brief Disable the specified peripheral clock.
 676:.././hal/sam3u1c/pmc.c ****  *
 677:.././hal/sam3u1c/pmc.c ****  * \note The ID must NOT be shifted (i.e., 1 << ID_xxx).
 678:.././hal/sam3u1c/pmc.c ****  *
 679:.././hal/sam3u1c/pmc.c ****  * \param ul_id Peripheral ID (ID_xxx).
 680:.././hal/sam3u1c/pmc.c ****  *
 681:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 682:.././hal/sam3u1c/pmc.c ****  * \retval 1 Invalid parameter.
 683:.././hal/sam3u1c/pmc.c ****  */
 684:.././hal/sam3u1c/pmc.c **** uint32_t pmc_disable_periph_clk(uint32_t ul_id)
 685:.././hal/sam3u1c/pmc.c **** {
 1981              	 .loc 1 685 0
 1982              	 .cfi_startproc
 1983              	 
 1984              	 
 1985              	 
 1986 0000 80B4     	 push {r7}
 1987              	.LCFI145:
 1988              	 .cfi_def_cfa_offset 4
 1989              	 .cfi_offset 7,-4
 1990 0002 83B0     	 sub sp,sp,#12
 1991              	.LCFI146:
 1992              	 .cfi_def_cfa_offset 16
 1993 0004 00AF     	 add r7,sp,#0
 1994              	.LCFI147:
 1995              	 .cfi_def_cfa_register 7
 1996 0006 7860     	 str r0,[r7,#4]
 686:.././hal/sam3u1c/pmc.c **** 	if (ul_id > MAX_PERIPH_ID) {
 1997              	 .loc 1 686 0
 1998 0008 7B68     	 ldr r3,[r7,#4]
 1999 000a 1D2B     	 cmp r3,#29
 2000 000c 01D9     	 bls .L145
 687:.././hal/sam3u1c/pmc.c **** 		return 1;
 2001              	 .loc 1 687 0
 2002 000e 0123     	 movs r3,#1
 2003 0010 16E0     	 b .L146
 2004              	.L145:
 688:.././hal/sam3u1c/pmc.c **** 	}
 689:.././hal/sam3u1c/pmc.c **** 
 690:.././hal/sam3u1c/pmc.c **** 	if (ul_id < 32) {
 2005              	 .loc 1 690 0
 2006 0012 7B68     	 ldr r3,[r7,#4]
 2007 0014 1F2B     	 cmp r3,#31
 2008 0016 12D8     	 bhi .L147
 691:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
 2009              	 .loc 1 691 0
 2010 0018 0C4B     	 ldr r3,.L148
 2011 001a 9A69     	 ldr r2,[r3,#24]
 2012 001c 0121     	 movs r1,#1
 2013 001e 7B68     	 ldr r3,[r7,#4]
 2014 0020 01FA03F3 	 lsl r3,r1,r3
 2015 0024 1A40     	 ands r2,r2,r3
 2016 0026 0121     	 movs r1,#1
 2017 0028 7B68     	 ldr r3,[r7,#4]
 2018 002a 01FA03F3 	 lsl r3,r1,r3
 2019 002e 9A42     	 cmp r2,r3
 2020 0030 05D1     	 bne .L147
 692:.././hal/sam3u1c/pmc.c **** 			PMC->PMC_PCDR0 = 1 << ul_id;
 2021              	 .loc 1 692 0
 2022 0032 064A     	 ldr r2,.L148
 2023 0034 0121     	 movs r1,#1
 2024 0036 7B68     	 ldr r3,[r7,#4]
 2025 0038 01FA03F3 	 lsl r3,r1,r3
 2026 003c 5361     	 str r3,[r2,#20]
 2027              	.L147:
 693:.././hal/sam3u1c/pmc.c **** 		}
 694:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
 695:.././hal/sam3u1c/pmc.c **** 	} else {
 696:.././hal/sam3u1c/pmc.c **** 		ul_id -= 32;
 697:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
 698:.././hal/sam3u1c/pmc.c **** 			PMC->PMC_PCDR1 = 1 << ul_id;
 699:.././hal/sam3u1c/pmc.c **** 		}
 700:.././hal/sam3u1c/pmc.c **** #endif
 701:.././hal/sam3u1c/pmc.c **** 	}
 702:.././hal/sam3u1c/pmc.c **** 	return 0;
 2028              	 .loc 1 702 0
 2029 003e 0023     	 movs r3,#0
 2030              	.L146:
 703:.././hal/sam3u1c/pmc.c **** }
 2031              	 .loc 1 703 0
 2032 0040 1846     	 mov r0,r3
 2033 0042 0C37     	 adds r7,r7,#12
 2034              	.LCFI148:
 2035              	 .cfi_def_cfa_offset 4
 2036 0044 BD46     	 mov sp,r7
 2037              	.LCFI149:
 2038              	 .cfi_def_cfa_register 13
 2039              	 
 2040 0046 80BC     	 pop {r7}
 2041              	.LCFI150:
 2042              	 .cfi_restore 7
 2043              	 .cfi_def_cfa_offset 0
 2044 0048 7047     	 bx lr
 2045              	.L149:
 2046 004a 00BF     	 .align 2
 2047              	.L148:
 2048 004c 00040E40 	 .word 1074660352
 2049              	 .cfi_endproc
 2050              	.LFE95:
 2052              	 .section .text.pmc_enable_all_periph_clk,"ax",%progbits
 2053              	 .align 1
 2054              	 .global pmc_enable_all_periph_clk
 2055              	 .syntax unified
 2056              	 .thumb
 2057              	 .thumb_func
 2058              	 .fpu softvfp
 2060              	pmc_enable_all_periph_clk:
 2061              	.LFB96:
 704:.././hal/sam3u1c/pmc.c **** 
 705:.././hal/sam3u1c/pmc.c **** /**
 706:.././hal/sam3u1c/pmc.c ****  * \brief Enable all peripheral clocks.
 707:.././hal/sam3u1c/pmc.c ****  */
 708:.././hal/sam3u1c/pmc.c **** void pmc_enable_all_periph_clk(void)
 709:.././hal/sam3u1c/pmc.c **** {
 2062              	 .loc 1 709 0
 2063              	 .cfi_startproc
 2064              	 
 2065              	 
 2066              	 
 2067 0000 80B4     	 push {r7}
 2068              	.LCFI151:
 2069              	 .cfi_def_cfa_offset 4
 2070              	 .cfi_offset 7,-4
 2071 0002 00AF     	 add r7,sp,#0
 2072              	.LCFI152:
 2073              	 .cfi_def_cfa_register 7
 710:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCER0 = PMC_MASK_STATUS0;
 2074              	 .loc 1 710 0
 2075 0004 074B     	 ldr r3,.L152
 2076 0006 6FF00302 	 mvn r2,#3
 2077 000a 1A61     	 str r2,[r3,#16]
 711:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_PCSR0 & PMC_MASK_STATUS0) != PMC_MASK_STATUS0);
 2078              	 .loc 1 711 0
 2079 000c 00BF     	 nop
 2080              	.L151:
 2081              	 .loc 1 711 0 is_stmt 0 discriminator 1
 2082 000e 054B     	 ldr r3,.L152
 2083 0010 9B69     	 ldr r3,[r3,#24]
 2084 0012 23F00303 	 bic r3,r3,#3
 2085 0016 13F1040F 	 cmn r3,#4
 2086 001a F8D1     	 bne .L151
 712:.././hal/sam3u1c/pmc.c **** 
 713:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
 714:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCER1 = PMC_MASK_STATUS1;
 715:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_PCSR1 & PMC_MASK_STATUS1) != PMC_MASK_STATUS1);
 716:.././hal/sam3u1c/pmc.c **** #endif
 717:.././hal/sam3u1c/pmc.c **** }
 2087              	 .loc 1 717 0 is_stmt 1
 2088 001c 00BF     	 nop
 2089 001e BD46     	 mov sp,r7
 2090              	.LCFI153:
 2091              	 .cfi_def_cfa_register 13
 2092              	 
 2093 0020 80BC     	 pop {r7}
 2094              	.LCFI154:
 2095              	 .cfi_restore 7
 2096              	 .cfi_def_cfa_offset 0
 2097 0022 7047     	 bx lr
 2098              	.L153:
 2099              	 .align 2
 2100              	.L152:
 2101 0024 00040E40 	 .word 1074660352
 2102              	 .cfi_endproc
 2103              	.LFE96:
 2105              	 .section .text.pmc_disable_all_periph_clk,"ax",%progbits
 2106              	 .align 1
 2107              	 .global pmc_disable_all_periph_clk
 2108              	 .syntax unified
 2109              	 .thumb
 2110              	 .thumb_func
 2111              	 .fpu softvfp
 2113              	pmc_disable_all_periph_clk:
 2114              	.LFB97:
 718:.././hal/sam3u1c/pmc.c **** 
 719:.././hal/sam3u1c/pmc.c **** /**
 720:.././hal/sam3u1c/pmc.c ****  * \brief Disable all peripheral clocks.
 721:.././hal/sam3u1c/pmc.c ****  */
 722:.././hal/sam3u1c/pmc.c **** void pmc_disable_all_periph_clk(void)
 723:.././hal/sam3u1c/pmc.c **** {
 2115              	 .loc 1 723 0
 2116              	 .cfi_startproc
 2117              	 
 2118              	 
 2119              	 
 2120 0000 80B4     	 push {r7}
 2121              	.LCFI155:
 2122              	 .cfi_def_cfa_offset 4
 2123              	 .cfi_offset 7,-4
 2124 0002 00AF     	 add r7,sp,#0
 2125              	.LCFI156:
 2126              	 .cfi_def_cfa_register 7
 724:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCDR0 = PMC_MASK_STATUS0;
 2127              	 .loc 1 724 0
 2128 0004 074B     	 ldr r3,.L156
 2129 0006 6FF00302 	 mvn r2,#3
 2130 000a 5A61     	 str r2,[r3,#20]
 725:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_PCSR0 & PMC_MASK_STATUS0) != 0);
 2131              	 .loc 1 725 0
 2132 000c 00BF     	 nop
 2133              	.L155:
 2134              	 .loc 1 725 0 is_stmt 0 discriminator 1
 2135 000e 054B     	 ldr r3,.L156
 2136 0010 9B69     	 ldr r3,[r3,#24]
 2137 0012 23F00303 	 bic r3,r3,#3
 2138 0016 002B     	 cmp r3,#0
 2139 0018 F9D1     	 bne .L155
 726:.././hal/sam3u1c/pmc.c **** 
 727:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
 728:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCDR1 = PMC_MASK_STATUS1;
 729:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_PCSR1 & PMC_MASK_STATUS1) != 0);
 730:.././hal/sam3u1c/pmc.c **** #endif
 731:.././hal/sam3u1c/pmc.c **** }
 2140              	 .loc 1 731 0 is_stmt 1
 2141 001a 00BF     	 nop
 2142 001c BD46     	 mov sp,r7
 2143              	.LCFI157:
 2144              	 .cfi_def_cfa_register 13
 2145              	 
 2146 001e 80BC     	 pop {r7}
 2147              	.LCFI158:
 2148              	 .cfi_restore 7
 2149              	 .cfi_def_cfa_offset 0
 2150 0020 7047     	 bx lr
 2151              	.L157:
 2152 0022 00BF     	 .align 2
 2153              	.L156:
 2154 0024 00040E40 	 .word 1074660352
 2155              	 .cfi_endproc
 2156              	.LFE97:
 2158              	 .section .text.pmc_is_periph_clk_enabled,"ax",%progbits
 2159              	 .align 1
 2160              	 .global pmc_is_periph_clk_enabled
 2161              	 .syntax unified
 2162              	 .thumb
 2163              	 .thumb_func
 2164              	 .fpu softvfp
 2166              	pmc_is_periph_clk_enabled:
 2167              	.LFB98:
 732:.././hal/sam3u1c/pmc.c **** 
 733:.././hal/sam3u1c/pmc.c **** /**
 734:.././hal/sam3u1c/pmc.c ****  * \brief Check if the specified peripheral clock is enabled.
 735:.././hal/sam3u1c/pmc.c ****  *
 736:.././hal/sam3u1c/pmc.c ****  * \note The ID must NOT be shifted (i.e., 1 << ID_xxx).
 737:.././hal/sam3u1c/pmc.c ****  *
 738:.././hal/sam3u1c/pmc.c ****  * \param ul_id Peripheral ID (ID_xxx).
 739:.././hal/sam3u1c/pmc.c ****  *
 740:.././hal/sam3u1c/pmc.c ****  * \retval 0 Peripheral clock is disabled or unknown.
 741:.././hal/sam3u1c/pmc.c ****  * \retval 1 Peripheral clock is enabled.
 742:.././hal/sam3u1c/pmc.c ****  */
 743:.././hal/sam3u1c/pmc.c **** uint32_t pmc_is_periph_clk_enabled(uint32_t ul_id)
 744:.././hal/sam3u1c/pmc.c **** {
 2168              	 .loc 1 744 0
 2169              	 .cfi_startproc
 2170              	 
 2171              	 
 2172              	 
 2173 0000 80B4     	 push {r7}
 2174              	.LCFI159:
 2175              	 .cfi_def_cfa_offset 4
 2176              	 .cfi_offset 7,-4
 2177 0002 83B0     	 sub sp,sp,#12
 2178              	.LCFI160:
 2179              	 .cfi_def_cfa_offset 16
 2180 0004 00AF     	 add r7,sp,#0
 2181              	.LCFI161:
 2182              	 .cfi_def_cfa_register 7
 2183 0006 7860     	 str r0,[r7,#4]
 745:.././hal/sam3u1c/pmc.c **** 	if (ul_id > MAX_PERIPH_ID) {
 2184              	 .loc 1 745 0
 2185 0008 7B68     	 ldr r3,[r7,#4]
 2186 000a 1D2B     	 cmp r3,#29
 2187 000c 01D9     	 bls .L159
 746:.././hal/sam3u1c/pmc.c **** 		return 0;
 2188              	 .loc 1 746 0
 2189 000e 0023     	 movs r3,#0
 2190 0010 0BE0     	 b .L160
 2191              	.L159:
 747:.././hal/sam3u1c/pmc.c **** 	}
 748:.././hal/sam3u1c/pmc.c **** 
 749:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
 750:.././hal/sam3u1c/pmc.c **** 	if (ul_id < 32) {
 751:.././hal/sam3u1c/pmc.c **** #endif
 752:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR0 & (1u << ul_id))) {
 2192              	 .loc 1 752 0
 2193 0012 084B     	 ldr r3,.L162
 2194 0014 9A69     	 ldr r2,[r3,#24]
 2195 0016 0121     	 movs r1,#1
 2196 0018 7B68     	 ldr r3,[r7,#4]
 2197 001a 01FA03F3 	 lsl r3,r1,r3
 2198 001e 1340     	 ands r3,r3,r2
 2199 0020 002B     	 cmp r3,#0
 2200 0022 01D0     	 beq .L161
 753:.././hal/sam3u1c/pmc.c **** 			return 1;
 2201              	 .loc 1 753 0
 2202 0024 0123     	 movs r3,#1
 2203 0026 00E0     	 b .L160
 2204              	.L161:
 754:.././hal/sam3u1c/pmc.c **** 		} else {
 755:.././hal/sam3u1c/pmc.c **** 			return 0;
 2205              	 .loc 1 755 0
 2206 0028 0023     	 movs r3,#0
 2207              	.L160:
 756:.././hal/sam3u1c/pmc.c **** 		}
 757:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
 758:.././hal/sam3u1c/pmc.c **** 	} else {
 759:.././hal/sam3u1c/pmc.c **** 		ul_id -= 32;
 760:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id))) {
 761:.././hal/sam3u1c/pmc.c **** 			return 1;
 762:.././hal/sam3u1c/pmc.c **** 		} else {
 763:.././hal/sam3u1c/pmc.c **** 			return 0;
 764:.././hal/sam3u1c/pmc.c **** 		}
 765:.././hal/sam3u1c/pmc.c **** 	}
 766:.././hal/sam3u1c/pmc.c **** #endif
 767:.././hal/sam3u1c/pmc.c **** }
 2208              	 .loc 1 767 0
 2209 002a 1846     	 mov r0,r3
 2210 002c 0C37     	 adds r7,r7,#12
 2211              	.LCFI162:
 2212              	 .cfi_def_cfa_offset 4
 2213 002e BD46     	 mov sp,r7
 2214              	.LCFI163:
 2215              	 .cfi_def_cfa_register 13
 2216              	 
 2217 0030 80BC     	 pop {r7}
 2218              	.LCFI164:
 2219              	 .cfi_restore 7
 2220              	 .cfi_def_cfa_offset 0
 2221 0032 7047     	 bx lr
 2222              	.L163:
 2223              	 .align 2
 2224              	.L162:
 2225 0034 00040E40 	 .word 1074660352
 2226              	 .cfi_endproc
 2227              	.LFE98:
 2229              	 .section .text.pmc_pck_set_prescaler,"ax",%progbits
 2230              	 .align 1
 2231              	 .global pmc_pck_set_prescaler
 2232              	 .syntax unified
 2233              	 .thumb
 2234              	 .thumb_func
 2235              	 .fpu softvfp
 2237              	pmc_pck_set_prescaler:
 2238              	.LFB99:
 768:.././hal/sam3u1c/pmc.c **** 
 769:.././hal/sam3u1c/pmc.c **** /**
 770:.././hal/sam3u1c/pmc.c ****  * \brief Set the prescaler for the specified programmable clock.
 771:.././hal/sam3u1c/pmc.c ****  *
 772:.././hal/sam3u1c/pmc.c ****  * \param ul_id Peripheral ID.
 773:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Prescaler value.
 774:.././hal/sam3u1c/pmc.c ****  */
 775:.././hal/sam3u1c/pmc.c **** void pmc_pck_set_prescaler(uint32_t ul_id, uint32_t ul_pres)
 776:.././hal/sam3u1c/pmc.c **** {
 2239              	 .loc 1 776 0
 2240              	 .cfi_startproc
 2241              	 
 2242              	 
 2243              	 
 2244 0000 80B4     	 push {r7}
 2245              	.LCFI165:
 2246              	 .cfi_def_cfa_offset 4
 2247              	 .cfi_offset 7,-4
 2248 0002 83B0     	 sub sp,sp,#12
 2249              	.LCFI166:
 2250              	 .cfi_def_cfa_offset 16
 2251 0004 00AF     	 add r7,sp,#0
 2252              	.LCFI167:
 2253              	 .cfi_def_cfa_register 7
 2254 0006 7860     	 str r0,[r7,#4]
 2255 0008 3960     	 str r1,[r7]
 777:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 2256              	 .loc 1 777 0
 2257 000a 1449     	 ldr r1,.L168
 778:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_PRES_Msk) | ul_pres;
 2258              	 .loc 1 778 0
 2259 000c 134A     	 ldr r2,.L168
 2260 000e 7B68     	 ldr r3,[r7,#4]
 2261 0010 1033     	 adds r3,r3,#16
 2262 0012 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2263 0016 23F07002 	 bic r2,r3,#112
 2264 001a 3B68     	 ldr r3,[r7]
 2265 001c 1A43     	 orrs r2,r2,r3
 777:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 2266              	 .loc 1 777 0
 2267 001e 7B68     	 ldr r3,[r7,#4]
 2268 0020 1033     	 adds r3,r3,#16
 2269 0022 41F82320 	 str r2,[r1,r3,lsl#2]
 779:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
 2270              	 .loc 1 779 0
 2271 0026 00BF     	 nop
 2272              	.L166:
 2273 0028 0C4B     	 ldr r3,.L168
 2274 002a 1A68     	 ldr r2,[r3]
 2275 002c 4FF48071 	 mov r1,#256
 2276 0030 7B68     	 ldr r3,[r7,#4]
 2277 0032 01FA03F3 	 lsl r3,r1,r3
 2278 0036 1340     	 ands r3,r3,r2
 2279 0038 002B     	 cmp r3,#0
 2280 003a 09D0     	 beq .L167
 780:.././hal/sam3u1c/pmc.c **** 			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
 2281              	 .loc 1 780 0
 2282 003c 074B     	 ldr r3,.L168
 2283 003e 9A6E     	 ldr r2,[r3,#104]
 2284 0040 4FF48071 	 mov r1,#256
 2285 0044 7B68     	 ldr r3,[r7,#4]
 2286 0046 01FA03F3 	 lsl r3,r1,r3
 2287 004a 1340     	 ands r3,r3,r2
 2288 004c 002B     	 cmp r3,#0
 2289 004e EBD0     	 beq .L166
 2290              	.L167:
 781:.././hal/sam3u1c/pmc.c **** }
 2291              	 .loc 1 781 0
 2292 0050 00BF     	 nop
 2293 0052 0C37     	 adds r7,r7,#12
 2294              	.LCFI168:
 2295              	 .cfi_def_cfa_offset 4
 2296 0054 BD46     	 mov sp,r7
 2297              	.LCFI169:
 2298              	 .cfi_def_cfa_register 13
 2299              	 
 2300 0056 80BC     	 pop {r7}
 2301              	.LCFI170:
 2302              	 .cfi_restore 7
 2303              	 .cfi_def_cfa_offset 0
 2304 0058 7047     	 bx lr
 2305              	.L169:
 2306 005a 00BF     	 .align 2
 2307              	.L168:
 2308 005c 00040E40 	 .word 1074660352
 2309              	 .cfi_endproc
 2310              	.LFE99:
 2312              	 .section .text.pmc_pck_set_source,"ax",%progbits
 2313              	 .align 1
 2314              	 .global pmc_pck_set_source
 2315              	 .syntax unified
 2316              	 .thumb
 2317              	 .thumb_func
 2318              	 .fpu softvfp
 2320              	pmc_pck_set_source:
 2321              	.LFB100:
 782:.././hal/sam3u1c/pmc.c **** 
 783:.././hal/sam3u1c/pmc.c **** /**
 784:.././hal/sam3u1c/pmc.c ****  * \brief Set the source oscillator for the specified programmable clock.
 785:.././hal/sam3u1c/pmc.c ****  *
 786:.././hal/sam3u1c/pmc.c ****  * \param ul_id Peripheral ID.
 787:.././hal/sam3u1c/pmc.c ****  * \param ul_source Source selection value.
 788:.././hal/sam3u1c/pmc.c ****  */
 789:.././hal/sam3u1c/pmc.c **** void pmc_pck_set_source(uint32_t ul_id, uint32_t ul_source)
 790:.././hal/sam3u1c/pmc.c **** {
 2322              	 .loc 1 790 0
 2323              	 .cfi_startproc
 2324              	 
 2325              	 
 2326              	 
 2327 0000 80B4     	 push {r7}
 2328              	.LCFI171:
 2329              	 .cfi_def_cfa_offset 4
 2330              	 .cfi_offset 7,-4
 2331 0002 83B0     	 sub sp,sp,#12
 2332              	.LCFI172:
 2333              	 .cfi_def_cfa_offset 16
 2334 0004 00AF     	 add r7,sp,#0
 2335              	.LCFI173:
 2336              	 .cfi_def_cfa_register 7
 2337 0006 7860     	 str r0,[r7,#4]
 2338 0008 3960     	 str r1,[r7]
 791:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 2339              	 .loc 1 791 0
 2340 000a 1449     	 ldr r1,.L174
 792:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_CSS_Msk) | ul_source;
 2341              	 .loc 1 792 0
 2342 000c 134A     	 ldr r2,.L174
 2343 000e 7B68     	 ldr r3,[r7,#4]
 2344 0010 1033     	 adds r3,r3,#16
 2345 0012 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2346 0016 23F00702 	 bic r2,r3,#7
 2347 001a 3B68     	 ldr r3,[r7]
 2348 001c 1A43     	 orrs r2,r2,r3
 791:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 2349              	 .loc 1 791 0
 2350 001e 7B68     	 ldr r3,[r7,#4]
 2351 0020 1033     	 adds r3,r3,#16
 2352 0022 41F82320 	 str r2,[r1,r3,lsl#2]
 793:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
 2353              	 .loc 1 793 0
 2354 0026 00BF     	 nop
 2355              	.L172:
 2356 0028 0C4B     	 ldr r3,.L174
 2357 002a 1A68     	 ldr r2,[r3]
 2358 002c 4FF48071 	 mov r1,#256
 2359 0030 7B68     	 ldr r3,[r7,#4]
 2360 0032 01FA03F3 	 lsl r3,r1,r3
 2361 0036 1340     	 ands r3,r3,r2
 2362 0038 002B     	 cmp r3,#0
 2363 003a 09D0     	 beq .L173
 794:.././hal/sam3u1c/pmc.c **** 			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
 2364              	 .loc 1 794 0
 2365 003c 074B     	 ldr r3,.L174
 2366 003e 9A6E     	 ldr r2,[r3,#104]
 2367 0040 4FF48071 	 mov r1,#256
 2368 0044 7B68     	 ldr r3,[r7,#4]
 2369 0046 01FA03F3 	 lsl r3,r1,r3
 2370 004a 1340     	 ands r3,r3,r2
 2371 004c 002B     	 cmp r3,#0
 2372 004e EBD0     	 beq .L172
 2373              	.L173:
 795:.././hal/sam3u1c/pmc.c **** }
 2374              	 .loc 1 795 0
 2375 0050 00BF     	 nop
 2376 0052 0C37     	 adds r7,r7,#12
 2377              	.LCFI174:
 2378              	 .cfi_def_cfa_offset 4
 2379 0054 BD46     	 mov sp,r7
 2380              	.LCFI175:
 2381              	 .cfi_def_cfa_register 13
 2382              	 
 2383 0056 80BC     	 pop {r7}
 2384              	.LCFI176:
 2385              	 .cfi_restore 7
 2386              	 .cfi_def_cfa_offset 0
 2387 0058 7047     	 bx lr
 2388              	.L175:
 2389 005a 00BF     	 .align 2
 2390              	.L174:
 2391 005c 00040E40 	 .word 1074660352
 2392              	 .cfi_endproc
 2393              	.LFE100:
 2395              	 .section .text.pmc_switch_pck_to_sclk,"ax",%progbits
 2396              	 .align 1
 2397              	 .global pmc_switch_pck_to_sclk
 2398              	 .syntax unified
 2399              	 .thumb
 2400              	 .thumb_func
 2401              	 .fpu softvfp
 2403              	pmc_switch_pck_to_sclk:
 2404              	.LFB101:
 796:.././hal/sam3u1c/pmc.c **** 
 797:.././hal/sam3u1c/pmc.c **** /**
 798:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to slow clock.
 799:.././hal/sam3u1c/pmc.c ****  *
 800:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 801:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 802:.././hal/sam3u1c/pmc.c ****  *
 803:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 804:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 805:.././hal/sam3u1c/pmc.c ****  */
 806:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_sclk(uint32_t ul_id, uint32_t ul_pres)
 807:.././hal/sam3u1c/pmc.c **** {
 2405              	 .loc 1 807 0
 2406              	 .cfi_startproc
 2407              	 
 2408              	 
 2409              	 
 2410 0000 80B4     	 push {r7}
 2411              	.LCFI177:
 2412              	 .cfi_def_cfa_offset 4
 2413              	 .cfi_offset 7,-4
 2414 0002 85B0     	 sub sp,sp,#20
 2415              	.LCFI178:
 2416              	 .cfi_def_cfa_offset 24
 2417 0004 00AF     	 add r7,sp,#0
 2418              	.LCFI179:
 2419              	 .cfi_def_cfa_register 7
 2420 0006 7860     	 str r0,[r7,#4]
 2421 0008 3960     	 str r1,[r7]
 808:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 809:.././hal/sam3u1c/pmc.c **** 
 810:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_SLOW_CLK | ul_pres;
 2422              	 .loc 1 810 0
 2423 000a 1149     	 ldr r1,.L181
 2424 000c 7B68     	 ldr r3,[r7,#4]
 2425 000e 1033     	 adds r3,r3,#16
 2426 0010 3A68     	 ldr r2,[r7]
 2427 0012 41F82320 	 str r2,[r1,r3,lsl#2]
 811:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2428              	 .loc 1 811 0
 2429 0016 4FF40063 	 mov r3,#2048
 2430 001a FB60     	 str r3,[r7,#12]
 2431 001c 07E0     	 b .L177
 2432              	.L180:
 812:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 813:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2433              	 .loc 1 813 0
 2434 001e FB68     	 ldr r3,[r7,#12]
 2435 0020 002B     	 cmp r3,#0
 2436 0022 01D1     	 bne .L178
 814:.././hal/sam3u1c/pmc.c **** 			return 1;
 2437              	 .loc 1 814 0
 2438 0024 0123     	 movs r3,#1
 2439 0026 0DE0     	 b .L179
 2440              	.L178:
 812:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2441              	 .loc 1 812 0 discriminator 1
 2442 0028 FB68     	 ldr r3,[r7,#12]
 2443 002a 013B     	 subs r3,r3,#1
 2444 002c FB60     	 str r3,[r7,#12]
 2445              	.L177:
 2446 002e 084B     	 ldr r3,.L181
 2447 0030 9A6E     	 ldr r2,[r3,#104]
 2448 0032 4FF48071 	 mov r1,#256
 2449 0036 7B68     	 ldr r3,[r7,#4]
 2450 0038 01FA03F3 	 lsl r3,r1,r3
 2451 003c 1340     	 ands r3,r3,r2
 811:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2452              	 .loc 1 811 0 discriminator 1
 2453 003e 002B     	 cmp r3,#0
 2454 0040 EDD0     	 beq .L180
 815:.././hal/sam3u1c/pmc.c **** 		}
 816:.././hal/sam3u1c/pmc.c **** 	}
 817:.././hal/sam3u1c/pmc.c **** 
 818:.././hal/sam3u1c/pmc.c **** 	return 0;
 2455              	 .loc 1 818 0
 2456 0042 0023     	 movs r3,#0
 2457              	.L179:
 819:.././hal/sam3u1c/pmc.c **** }
 2458              	 .loc 1 819 0
 2459 0044 1846     	 mov r0,r3
 2460 0046 1437     	 adds r7,r7,#20
 2461              	.LCFI180:
 2462              	 .cfi_def_cfa_offset 4
 2463 0048 BD46     	 mov sp,r7
 2464              	.LCFI181:
 2465              	 .cfi_def_cfa_register 13
 2466              	 
 2467 004a 80BC     	 pop {r7}
 2468              	.LCFI182:
 2469              	 .cfi_restore 7
 2470              	 .cfi_def_cfa_offset 0
 2471 004c 7047     	 bx lr
 2472              	.L182:
 2473 004e 00BF     	 .align 2
 2474              	.L181:
 2475 0050 00040E40 	 .word 1074660352
 2476              	 .cfi_endproc
 2477              	.LFE101:
 2479              	 .section .text.pmc_switch_pck_to_mainck,"ax",%progbits
 2480              	 .align 1
 2481              	 .global pmc_switch_pck_to_mainck
 2482              	 .syntax unified
 2483              	 .thumb
 2484              	 .thumb_func
 2485              	 .fpu softvfp
 2487              	pmc_switch_pck_to_mainck:
 2488              	.LFB102:
 820:.././hal/sam3u1c/pmc.c **** 
 821:.././hal/sam3u1c/pmc.c **** /**
 822:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to main clock.
 823:.././hal/sam3u1c/pmc.c ****  *
 824:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 825:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 826:.././hal/sam3u1c/pmc.c ****  *
 827:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 828:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 829:.././hal/sam3u1c/pmc.c ****  */
 830:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_mainck(uint32_t ul_id, uint32_t ul_pres)
 831:.././hal/sam3u1c/pmc.c **** {
 2489              	 .loc 1 831 0
 2490              	 .cfi_startproc
 2491              	 
 2492              	 
 2493              	 
 2494 0000 80B4     	 push {r7}
 2495              	.LCFI183:
 2496              	 .cfi_def_cfa_offset 4
 2497              	 .cfi_offset 7,-4
 2498 0002 85B0     	 sub sp,sp,#20
 2499              	.LCFI184:
 2500              	 .cfi_def_cfa_offset 24
 2501 0004 00AF     	 add r7,sp,#0
 2502              	.LCFI185:
 2503              	 .cfi_def_cfa_register 7
 2504 0006 7860     	 str r0,[r7,#4]
 2505 0008 3960     	 str r1,[r7]
 832:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 833:.././hal/sam3u1c/pmc.c **** 
 834:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MAIN_CLK | ul_pres;
 2506              	 .loc 1 834 0
 2507 000a 1249     	 ldr r1,.L188
 2508 000c 3B68     	 ldr r3,[r7]
 2509 000e 43F00102 	 orr r2,r3,#1
 2510 0012 7B68     	 ldr r3,[r7,#4]
 2511 0014 1033     	 adds r3,r3,#16
 2512 0016 41F82320 	 str r2,[r1,r3,lsl#2]
 835:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2513              	 .loc 1 835 0
 2514 001a 4FF40063 	 mov r3,#2048
 2515 001e FB60     	 str r3,[r7,#12]
 2516 0020 07E0     	 b .L184
 2517              	.L187:
 836:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 837:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2518              	 .loc 1 837 0
 2519 0022 FB68     	 ldr r3,[r7,#12]
 2520 0024 002B     	 cmp r3,#0
 2521 0026 01D1     	 bne .L185
 838:.././hal/sam3u1c/pmc.c **** 			return 1;
 2522              	 .loc 1 838 0
 2523 0028 0123     	 movs r3,#1
 2524 002a 0DE0     	 b .L186
 2525              	.L185:
 836:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2526              	 .loc 1 836 0 discriminator 1
 2527 002c FB68     	 ldr r3,[r7,#12]
 2528 002e 013B     	 subs r3,r3,#1
 2529 0030 FB60     	 str r3,[r7,#12]
 2530              	.L184:
 2531 0032 084B     	 ldr r3,.L188
 2532 0034 9A6E     	 ldr r2,[r3,#104]
 2533 0036 4FF48071 	 mov r1,#256
 2534 003a 7B68     	 ldr r3,[r7,#4]
 2535 003c 01FA03F3 	 lsl r3,r1,r3
 2536 0040 1340     	 ands r3,r3,r2
 835:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2537              	 .loc 1 835 0 discriminator 1
 2538 0042 002B     	 cmp r3,#0
 2539 0044 EDD0     	 beq .L187
 839:.././hal/sam3u1c/pmc.c **** 		}
 840:.././hal/sam3u1c/pmc.c **** 	}
 841:.././hal/sam3u1c/pmc.c **** 
 842:.././hal/sam3u1c/pmc.c **** 	return 0;
 2540              	 .loc 1 842 0
 2541 0046 0023     	 movs r3,#0
 2542              	.L186:
 843:.././hal/sam3u1c/pmc.c **** }
 2543              	 .loc 1 843 0
 2544 0048 1846     	 mov r0,r3
 2545 004a 1437     	 adds r7,r7,#20
 2546              	.LCFI186:
 2547              	 .cfi_def_cfa_offset 4
 2548 004c BD46     	 mov sp,r7
 2549              	.LCFI187:
 2550              	 .cfi_def_cfa_register 13
 2551              	 
 2552 004e 80BC     	 pop {r7}
 2553              	.LCFI188:
 2554              	 .cfi_restore 7
 2555              	 .cfi_def_cfa_offset 0
 2556 0050 7047     	 bx lr
 2557              	.L189:
 2558 0052 00BF     	 .align 2
 2559              	.L188:
 2560 0054 00040E40 	 .word 1074660352
 2561              	 .cfi_endproc
 2562              	.LFE102:
 2564              	 .section .text.pmc_switch_pck_to_pllack,"ax",%progbits
 2565              	 .align 1
 2566              	 .global pmc_switch_pck_to_pllack
 2567              	 .syntax unified
 2568              	 .thumb
 2569              	 .thumb_func
 2570              	 .fpu softvfp
 2572              	pmc_switch_pck_to_pllack:
 2573              	.LFB103:
 844:.././hal/sam3u1c/pmc.c **** 
 845:.././hal/sam3u1c/pmc.c **** /**
 846:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to PLLA clock.
 847:.././hal/sam3u1c/pmc.c ****  *
 848:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 849:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 850:.././hal/sam3u1c/pmc.c ****  *
 851:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 852:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 853:.././hal/sam3u1c/pmc.c ****  */
 854:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_pllack(uint32_t ul_id, uint32_t ul_pres)
 855:.././hal/sam3u1c/pmc.c **** {
 2574              	 .loc 1 855 0
 2575              	 .cfi_startproc
 2576              	 
 2577              	 
 2578              	 
 2579 0000 80B4     	 push {r7}
 2580              	.LCFI189:
 2581              	 .cfi_def_cfa_offset 4
 2582              	 .cfi_offset 7,-4
 2583 0002 85B0     	 sub sp,sp,#20
 2584              	.LCFI190:
 2585              	 .cfi_def_cfa_offset 24
 2586 0004 00AF     	 add r7,sp,#0
 2587              	.LCFI191:
 2588              	 .cfi_def_cfa_register 7
 2589 0006 7860     	 str r0,[r7,#4]
 2590 0008 3960     	 str r1,[r7]
 856:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 857:.././hal/sam3u1c/pmc.c **** 
 858:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLA_CLK | ul_pres;
 2591              	 .loc 1 858 0
 2592 000a 1249     	 ldr r1,.L195
 2593 000c 3B68     	 ldr r3,[r7]
 2594 000e 43F00202 	 orr r2,r3,#2
 2595 0012 7B68     	 ldr r3,[r7,#4]
 2596 0014 1033     	 adds r3,r3,#16
 2597 0016 41F82320 	 str r2,[r1,r3,lsl#2]
 859:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2598              	 .loc 1 859 0
 2599 001a 4FF40063 	 mov r3,#2048
 2600 001e FB60     	 str r3,[r7,#12]
 2601 0020 07E0     	 b .L191
 2602              	.L194:
 860:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 861:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2603              	 .loc 1 861 0
 2604 0022 FB68     	 ldr r3,[r7,#12]
 2605 0024 002B     	 cmp r3,#0
 2606 0026 01D1     	 bne .L192
 862:.././hal/sam3u1c/pmc.c **** 			return 1;
 2607              	 .loc 1 862 0
 2608 0028 0123     	 movs r3,#1
 2609 002a 0DE0     	 b .L193
 2610              	.L192:
 860:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2611              	 .loc 1 860 0 discriminator 1
 2612 002c FB68     	 ldr r3,[r7,#12]
 2613 002e 013B     	 subs r3,r3,#1
 2614 0030 FB60     	 str r3,[r7,#12]
 2615              	.L191:
 2616 0032 084B     	 ldr r3,.L195
 2617 0034 9A6E     	 ldr r2,[r3,#104]
 2618 0036 4FF48071 	 mov r1,#256
 2619 003a 7B68     	 ldr r3,[r7,#4]
 2620 003c 01FA03F3 	 lsl r3,r1,r3
 2621 0040 1340     	 ands r3,r3,r2
 859:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2622              	 .loc 1 859 0 discriminator 1
 2623 0042 002B     	 cmp r3,#0
 2624 0044 EDD0     	 beq .L194
 863:.././hal/sam3u1c/pmc.c **** 		}
 864:.././hal/sam3u1c/pmc.c **** 	}
 865:.././hal/sam3u1c/pmc.c **** 
 866:.././hal/sam3u1c/pmc.c **** 	return 0;
 2625              	 .loc 1 866 0
 2626 0046 0023     	 movs r3,#0
 2627              	.L193:
 867:.././hal/sam3u1c/pmc.c **** }
 2628              	 .loc 1 867 0
 2629 0048 1846     	 mov r0,r3
 2630 004a 1437     	 adds r7,r7,#20
 2631              	.LCFI192:
 2632              	 .cfi_def_cfa_offset 4
 2633 004c BD46     	 mov sp,r7
 2634              	.LCFI193:
 2635              	 .cfi_def_cfa_register 13
 2636              	 
 2637 004e 80BC     	 pop {r7}
 2638              	.LCFI194:
 2639              	 .cfi_restore 7
 2640              	 .cfi_def_cfa_offset 0
 2641 0050 7047     	 bx lr
 2642              	.L196:
 2643 0052 00BF     	 .align 2
 2644              	.L195:
 2645 0054 00040E40 	 .word 1074660352
 2646              	 .cfi_endproc
 2647              	.LFE103:
 2649              	 .section .text.pmc_switch_pck_to_upllck,"ax",%progbits
 2650              	 .align 1
 2651              	 .global pmc_switch_pck_to_upllck
 2652              	 .syntax unified
 2653              	 .thumb
 2654              	 .thumb_func
 2655              	 .fpu softvfp
 2657              	pmc_switch_pck_to_upllck:
 2658              	.LFB104:
 868:.././hal/sam3u1c/pmc.c **** 
 869:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP || SAMG55)
 870:.././hal/sam3u1c/pmc.c **** /**
 871:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to PLLB clock.
 872:.././hal/sam3u1c/pmc.c ****  *
 873:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 874:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 875:.././hal/sam3u1c/pmc.c ****  *
 876:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 877:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 878:.././hal/sam3u1c/pmc.c ****  */
 879:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_pllbck(uint32_t ul_id, uint32_t ul_pres)
 880:.././hal/sam3u1c/pmc.c **** {
 881:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 882:.././hal/sam3u1c/pmc.c **** 
 883:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLB_CLK | ul_pres;
 884:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 885:.././hal/sam3u1c/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 886:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 887:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 888:.././hal/sam3u1c/pmc.c **** 			return 1;
 889:.././hal/sam3u1c/pmc.c **** 		}
 890:.././hal/sam3u1c/pmc.c **** 	}
 891:.././hal/sam3u1c/pmc.c **** 
 892:.././hal/sam3u1c/pmc.c **** 	return 0;
 893:.././hal/sam3u1c/pmc.c **** }
 894:.././hal/sam3u1c/pmc.c **** #endif
 895:.././hal/sam3u1c/pmc.c **** 
 896:.././hal/sam3u1c/pmc.c **** #if (SAM3XA || SAM3U)
 897:.././hal/sam3u1c/pmc.c **** /**
 898:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to UPLL clock.
 899:.././hal/sam3u1c/pmc.c ****  *
 900:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 901:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 902:.././hal/sam3u1c/pmc.c ****  *
 903:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 904:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 905:.././hal/sam3u1c/pmc.c ****  */
 906:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_upllck(uint32_t ul_id, uint32_t ul_pres)
 907:.././hal/sam3u1c/pmc.c **** {
 2659              	 .loc 1 907 0
 2660              	 .cfi_startproc
 2661              	 
 2662              	 
 2663              	 
 2664 0000 80B4     	 push {r7}
 2665              	.LCFI195:
 2666              	 .cfi_def_cfa_offset 4
 2667              	 .cfi_offset 7,-4
 2668 0002 85B0     	 sub sp,sp,#20
 2669              	.LCFI196:
 2670              	 .cfi_def_cfa_offset 24
 2671 0004 00AF     	 add r7,sp,#0
 2672              	.LCFI197:
 2673              	 .cfi_def_cfa_register 7
 2674 0006 7860     	 str r0,[r7,#4]
 2675 0008 3960     	 str r1,[r7]
 908:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 909:.././hal/sam3u1c/pmc.c **** 
 910:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_UPLL_CLK | ul_pres;
 2676              	 .loc 1 910 0
 2677 000a 1249     	 ldr r1,.L202
 2678 000c 3B68     	 ldr r3,[r7]
 2679 000e 43F00302 	 orr r2,r3,#3
 2680 0012 7B68     	 ldr r3,[r7,#4]
 2681 0014 1033     	 adds r3,r3,#16
 2682 0016 41F82320 	 str r2,[r1,r3,lsl#2]
 911:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2683              	 .loc 1 911 0
 2684 001a 4FF40063 	 mov r3,#2048
 2685 001e FB60     	 str r3,[r7,#12]
 2686 0020 07E0     	 b .L198
 2687              	.L201:
 912:.././hal/sam3u1c/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 913:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 914:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2688              	 .loc 1 914 0
 2689 0022 FB68     	 ldr r3,[r7,#12]
 2690 0024 002B     	 cmp r3,#0
 2691 0026 01D1     	 bne .L199
 915:.././hal/sam3u1c/pmc.c **** 			return 1;
 2692              	 .loc 1 915 0
 2693 0028 0123     	 movs r3,#1
 2694 002a 0DE0     	 b .L200
 2695              	.L199:
 913:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2696              	 .loc 1 913 0
 2697 002c FB68     	 ldr r3,[r7,#12]
 2698 002e 013B     	 subs r3,r3,#1
 2699 0030 FB60     	 str r3,[r7,#12]
 2700              	.L198:
 912:.././hal/sam3u1c/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 2701              	 .loc 1 912 0 discriminator 1
 2702 0032 084B     	 ldr r3,.L202
 2703 0034 9A6E     	 ldr r2,[r3,#104]
 2704 0036 4FF48071 	 mov r1,#256
 2705 003a 7B68     	 ldr r3,[r7,#4]
 2706 003c 01FA03F3 	 lsl r3,r1,r3
 2707 0040 1340     	 ands r3,r3,r2
 911:.././hal/sam3u1c/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 2708              	 .loc 1 911 0 discriminator 1
 2709 0042 002B     	 cmp r3,#0
 2710 0044 EDD0     	 beq .L201
 916:.././hal/sam3u1c/pmc.c **** 		}
 917:.././hal/sam3u1c/pmc.c **** 	}
 918:.././hal/sam3u1c/pmc.c **** 
 919:.././hal/sam3u1c/pmc.c **** 	return 0;
 2711              	 .loc 1 919 0
 2712 0046 0023     	 movs r3,#0
 2713              	.L200:
 920:.././hal/sam3u1c/pmc.c **** }
 2714              	 .loc 1 920 0
 2715 0048 1846     	 mov r0,r3
 2716 004a 1437     	 adds r7,r7,#20
 2717              	.LCFI198:
 2718              	 .cfi_def_cfa_offset 4
 2719 004c BD46     	 mov sp,r7
 2720              	.LCFI199:
 2721              	 .cfi_def_cfa_register 13
 2722              	 
 2723 004e 80BC     	 pop {r7}
 2724              	.LCFI200:
 2725              	 .cfi_restore 7
 2726              	 .cfi_def_cfa_offset 0
 2727 0050 7047     	 bx lr
 2728              	.L203:
 2729 0052 00BF     	 .align 2
 2730              	.L202:
 2731 0054 00040E40 	 .word 1074660352
 2732              	 .cfi_endproc
 2733              	.LFE104:
 2735              	 .section .text.pmc_switch_pck_to_mck,"ax",%progbits
 2736              	 .align 1
 2737              	 .global pmc_switch_pck_to_mck
 2738              	 .syntax unified
 2739              	 .thumb
 2740              	 .thumb_func
 2741              	 .fpu softvfp
 2743              	pmc_switch_pck_to_mck:
 2744              	.LFB105:
 921:.././hal/sam3u1c/pmc.c **** #endif
 922:.././hal/sam3u1c/pmc.c **** 
 923:.././hal/sam3u1c/pmc.c **** /**
 924:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to mck.
 925:.././hal/sam3u1c/pmc.c ****  *
 926:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 927:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 928:.././hal/sam3u1c/pmc.c ****  *
 929:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 930:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 931:.././hal/sam3u1c/pmc.c ****  */
 932:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
 933:.././hal/sam3u1c/pmc.c **** {
 2745              	 .loc 1 933 0
 2746              	 .cfi_startproc
 2747              	 
 2748              	 
 2749              	 
 2750 0000 80B4     	 push {r7}
 2751              	.LCFI201:
 2752              	 .cfi_def_cfa_offset 4
 2753              	 .cfi_offset 7,-4
 2754 0002 85B0     	 sub sp,sp,#20
 2755              	.LCFI202:
 2756              	 .cfi_def_cfa_offset 24
 2757 0004 00AF     	 add r7,sp,#0
 2758              	.LCFI203:
 2759              	 .cfi_def_cfa_register 7
 2760 0006 7860     	 str r0,[r7,#4]
 2761 0008 3960     	 str r1,[r7]
 934:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 935:.././hal/sam3u1c/pmc.c **** 
 936:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
 2762              	 .loc 1 936 0
 2763 000a 1249     	 ldr r1,.L209
 2764 000c 3B68     	 ldr r3,[r7]
 2765 000e 43F00402 	 orr r2,r3,#4
 2766 0012 7B68     	 ldr r3,[r7,#4]
 2767 0014 1033     	 adds r3,r3,#16
 2768 0016 41F82320 	 str r2,[r1,r3,lsl#2]
 937:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2769              	 .loc 1 937 0
 2770 001a 4FF40063 	 mov r3,#2048
 2771 001e FB60     	 str r3,[r7,#12]
 2772 0020 07E0     	 b .L205
 2773              	.L208:
 938:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 939:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2774              	 .loc 1 939 0
 2775 0022 FB68     	 ldr r3,[r7,#12]
 2776 0024 002B     	 cmp r3,#0
 2777 0026 01D1     	 bne .L206
 940:.././hal/sam3u1c/pmc.c **** 			return 1;
 2778              	 .loc 1 940 0
 2779 0028 0123     	 movs r3,#1
 2780 002a 0DE0     	 b .L207
 2781              	.L206:
 938:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2782              	 .loc 1 938 0 discriminator 1
 2783 002c FB68     	 ldr r3,[r7,#12]
 2784 002e 013B     	 subs r3,r3,#1
 2785 0030 FB60     	 str r3,[r7,#12]
 2786              	.L205:
 2787 0032 084B     	 ldr r3,.L209
 2788 0034 9A6E     	 ldr r2,[r3,#104]
 2789 0036 4FF48071 	 mov r1,#256
 2790 003a 7B68     	 ldr r3,[r7,#4]
 2791 003c 01FA03F3 	 lsl r3,r1,r3
 2792 0040 1340     	 ands r3,r3,r2
 937:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2793              	 .loc 1 937 0 discriminator 1
 2794 0042 002B     	 cmp r3,#0
 2795 0044 EDD0     	 beq .L208
 941:.././hal/sam3u1c/pmc.c **** 		}
 942:.././hal/sam3u1c/pmc.c **** 	}
 943:.././hal/sam3u1c/pmc.c **** 
 944:.././hal/sam3u1c/pmc.c **** 	return 0;
 2796              	 .loc 1 944 0
 2797 0046 0023     	 movs r3,#0
 2798              	.L207:
 945:.././hal/sam3u1c/pmc.c **** }
 2799              	 .loc 1 945 0
 2800 0048 1846     	 mov r0,r3
 2801 004a 1437     	 adds r7,r7,#20
 2802              	.LCFI204:
 2803              	 .cfi_def_cfa_offset 4
 2804 004c BD46     	 mov sp,r7
 2805              	.LCFI205:
 2806              	 .cfi_def_cfa_register 13
 2807              	 
 2808 004e 80BC     	 pop {r7}
 2809              	.LCFI206:
 2810              	 .cfi_restore 7
 2811              	 .cfi_def_cfa_offset 0
 2812 0050 7047     	 bx lr
 2813              	.L210:
 2814 0052 00BF     	 .align 2
 2815              	.L209:
 2816 0054 00040E40 	 .word 1074660352
 2817              	 .cfi_endproc
 2818              	.LFE105:
 2820              	 .section .text.pmc_enable_pck,"ax",%progbits
 2821              	 .align 1
 2822              	 .global pmc_enable_pck
 2823              	 .syntax unified
 2824              	 .thumb
 2825              	 .thumb_func
 2826              	 .fpu softvfp
 2828              	pmc_enable_pck:
 2829              	.LFB106:
 946:.././hal/sam3u1c/pmc.c **** 
 947:.././hal/sam3u1c/pmc.c **** /**
 948:.././hal/sam3u1c/pmc.c ****  * \brief Enable the specified programmable clock.
 949:.././hal/sam3u1c/pmc.c ****  *
 950:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 951:.././hal/sam3u1c/pmc.c ****  */
 952:.././hal/sam3u1c/pmc.c **** void pmc_enable_pck(uint32_t ul_id)
 953:.././hal/sam3u1c/pmc.c **** {
 2830              	 .loc 1 953 0
 2831              	 .cfi_startproc
 2832              	 
 2833              	 
 2834              	 
 2835 0000 80B4     	 push {r7}
 2836              	.LCFI207:
 2837              	 .cfi_def_cfa_offset 4
 2838              	 .cfi_offset 7,-4
 2839 0002 83B0     	 sub sp,sp,#12
 2840              	.LCFI208:
 2841              	 .cfi_def_cfa_offset 16
 2842 0004 00AF     	 add r7,sp,#0
 2843              	.LCFI209:
 2844              	 .cfi_def_cfa_register 7
 2845 0006 7860     	 str r0,[r7,#4]
 954:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
 2846              	 .loc 1 954 0
 2847 0008 054A     	 ldr r2,.L212
 2848 000a 4FF48071 	 mov r1,#256
 2849 000e 7B68     	 ldr r3,[r7,#4]
 2850 0010 01FA03F3 	 lsl r3,r1,r3
 2851 0014 1360     	 str r3,[r2]
 955:.././hal/sam3u1c/pmc.c **** }
 2852              	 .loc 1 955 0
 2853 0016 00BF     	 nop
 2854 0018 0C37     	 adds r7,r7,#12
 2855              	.LCFI210:
 2856              	 .cfi_def_cfa_offset 4
 2857 001a BD46     	 mov sp,r7
 2858              	.LCFI211:
 2859              	 .cfi_def_cfa_register 13
 2860              	 
 2861 001c 80BC     	 pop {r7}
 2862              	.LCFI212:
 2863              	 .cfi_restore 7
 2864              	 .cfi_def_cfa_offset 0
 2865 001e 7047     	 bx lr
 2866              	.L213:
 2867              	 .align 2
 2868              	.L212:
 2869 0020 00040E40 	 .word 1074660352
 2870              	 .cfi_endproc
 2871              	.LFE106:
 2873              	 .section .text.pmc_disable_pck,"ax",%progbits
 2874              	 .align 1
 2875              	 .global pmc_disable_pck
 2876              	 .syntax unified
 2877              	 .thumb
 2878              	 .thumb_func
 2879              	 .fpu softvfp
 2881              	pmc_disable_pck:
 2882              	.LFB107:
 956:.././hal/sam3u1c/pmc.c **** 
 957:.././hal/sam3u1c/pmc.c **** /**
 958:.././hal/sam3u1c/pmc.c ****  * \brief Disable the specified programmable clock.
 959:.././hal/sam3u1c/pmc.c ****  *
 960:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 961:.././hal/sam3u1c/pmc.c ****  */
 962:.././hal/sam3u1c/pmc.c **** void pmc_disable_pck(uint32_t ul_id)
 963:.././hal/sam3u1c/pmc.c **** {
 2883              	 .loc 1 963 0
 2884              	 .cfi_startproc
 2885              	 
 2886              	 
 2887              	 
 2888 0000 80B4     	 push {r7}
 2889              	.LCFI213:
 2890              	 .cfi_def_cfa_offset 4
 2891              	 .cfi_offset 7,-4
 2892 0002 83B0     	 sub sp,sp,#12
 2893              	.LCFI214:
 2894              	 .cfi_def_cfa_offset 16
 2895 0004 00AF     	 add r7,sp,#0
 2896              	.LCFI215:
 2897              	 .cfi_def_cfa_register 7
 2898 0006 7860     	 str r0,[r7,#4]
 964:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
 2899              	 .loc 1 964 0
 2900 0008 054A     	 ldr r2,.L215
 2901 000a 4FF48071 	 mov r1,#256
 2902 000e 7B68     	 ldr r3,[r7,#4]
 2903 0010 01FA03F3 	 lsl r3,r1,r3
 2904 0014 5360     	 str r3,[r2,#4]
 965:.././hal/sam3u1c/pmc.c **** }
 2905              	 .loc 1 965 0
 2906 0016 00BF     	 nop
 2907 0018 0C37     	 adds r7,r7,#12
 2908              	.LCFI216:
 2909              	 .cfi_def_cfa_offset 4
 2910 001a BD46     	 mov sp,r7
 2911              	.LCFI217:
 2912              	 .cfi_def_cfa_register 13
 2913              	 
 2914 001c 80BC     	 pop {r7}
 2915              	.LCFI218:
 2916              	 .cfi_restore 7
 2917              	 .cfi_def_cfa_offset 0
 2918 001e 7047     	 bx lr
 2919              	.L216:
 2920              	 .align 2
 2921              	.L215:
 2922 0020 00040E40 	 .word 1074660352
 2923              	 .cfi_endproc
 2924              	.LFE107:
 2926              	 .section .text.pmc_enable_all_pck,"ax",%progbits
 2927              	 .align 1
 2928              	 .global pmc_enable_all_pck
 2929              	 .syntax unified
 2930              	 .thumb
 2931              	 .thumb_func
 2932              	 .fpu softvfp
 2934              	pmc_enable_all_pck:
 2935              	.LFB108:
 966:.././hal/sam3u1c/pmc.c **** 
 967:.././hal/sam3u1c/pmc.c **** /**
 968:.././hal/sam3u1c/pmc.c ****  * \brief Enable all programmable clocks.
 969:.././hal/sam3u1c/pmc.c ****  */
 970:.././hal/sam3u1c/pmc.c **** void pmc_enable_all_pck(void)
 971:.././hal/sam3u1c/pmc.c **** {
 2936              	 .loc 1 971 0
 2937              	 .cfi_startproc
 2938              	 
 2939              	 
 2940              	 
 2941 0000 80B4     	 push {r7}
 2942              	.LCFI219:
 2943              	 .cfi_def_cfa_offset 4
 2944              	 .cfi_offset 7,-4
 2945 0002 00AF     	 add r7,sp,#0
 2946              	.LCFI220:
 2947              	 .cfi_def_cfa_register 7
 972:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_PCK0 | PMC_SCER_PCK1 | PMC_SCER_PCK2;
 2948              	 .loc 1 972 0
 2949 0004 034B     	 ldr r3,.L218
 2950 0006 4FF4E062 	 mov r2,#1792
 2951 000a 1A60     	 str r2,[r3]
 973:.././hal/sam3u1c/pmc.c **** }
 2952              	 .loc 1 973 0
 2953 000c 00BF     	 nop
 2954 000e BD46     	 mov sp,r7
 2955              	.LCFI221:
 2956              	 .cfi_def_cfa_register 13
 2957              	 
 2958 0010 80BC     	 pop {r7}
 2959              	.LCFI222:
 2960              	 .cfi_restore 7
 2961              	 .cfi_def_cfa_offset 0
 2962 0012 7047     	 bx lr
 2963              	.L219:
 2964              	 .align 2
 2965              	.L218:
 2966 0014 00040E40 	 .word 1074660352
 2967              	 .cfi_endproc
 2968              	.LFE108:
 2970              	 .section .text.pmc_disable_all_pck,"ax",%progbits
 2971              	 .align 1
 2972              	 .global pmc_disable_all_pck
 2973              	 .syntax unified
 2974              	 .thumb
 2975              	 .thumb_func
 2976              	 .fpu softvfp
 2978              	pmc_disable_all_pck:
 2979              	.LFB109:
 974:.././hal/sam3u1c/pmc.c **** 
 975:.././hal/sam3u1c/pmc.c **** /**
 976:.././hal/sam3u1c/pmc.c ****  * \brief Disable all programmable clocks.
 977:.././hal/sam3u1c/pmc.c ****  */
 978:.././hal/sam3u1c/pmc.c **** void pmc_disable_all_pck(void)
 979:.././hal/sam3u1c/pmc.c **** {
 2980              	 .loc 1 979 0
 2981              	 .cfi_startproc
 2982              	 
 2983              	 
 2984              	 
 2985 0000 80B4     	 push {r7}
 2986              	.LCFI223:
 2987              	 .cfi_def_cfa_offset 4
 2988              	 .cfi_offset 7,-4
 2989 0002 00AF     	 add r7,sp,#0
 2990              	.LCFI224:
 2991              	 .cfi_def_cfa_register 7
 980:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_PCK0 | PMC_SCDR_PCK1 | PMC_SCDR_PCK2;
 2992              	 .loc 1 980 0
 2993 0004 034B     	 ldr r3,.L221
 2994 0006 4FF4E062 	 mov r2,#1792
 2995 000a 5A60     	 str r2,[r3,#4]
 981:.././hal/sam3u1c/pmc.c **** }
 2996              	 .loc 1 981 0
 2997 000c 00BF     	 nop
 2998 000e BD46     	 mov sp,r7
 2999              	.LCFI225:
 3000              	 .cfi_def_cfa_register 13
 3001              	 
 3002 0010 80BC     	 pop {r7}
 3003              	.LCFI226:
 3004              	 .cfi_restore 7
 3005              	 .cfi_def_cfa_offset 0
 3006 0012 7047     	 bx lr
 3007              	.L222:
 3008              	 .align 2
 3009              	.L221:
 3010 0014 00040E40 	 .word 1074660352
 3011              	 .cfi_endproc
 3012              	.LFE109:
 3014              	 .section .text.pmc_is_pck_enabled,"ax",%progbits
 3015              	 .align 1
 3016              	 .global pmc_is_pck_enabled
 3017              	 .syntax unified
 3018              	 .thumb
 3019              	 .thumb_func
 3020              	 .fpu softvfp
 3022              	pmc_is_pck_enabled:
 3023              	.LFB110:
 982:.././hal/sam3u1c/pmc.c **** 
 983:.././hal/sam3u1c/pmc.c **** /**
 984:.././hal/sam3u1c/pmc.c ****  * \brief Check if the specified programmable clock is enabled.
 985:.././hal/sam3u1c/pmc.c ****  *
 986:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 987:.././hal/sam3u1c/pmc.c ****  *
 988:.././hal/sam3u1c/pmc.c ****  * \retval 0 Programmable clock is disabled or unknown.
 989:.././hal/sam3u1c/pmc.c ****  * \retval 1 Programmable clock is enabled.
 990:.././hal/sam3u1c/pmc.c ****  */
 991:.././hal/sam3u1c/pmc.c **** uint32_t pmc_is_pck_enabled(uint32_t ul_id)
 992:.././hal/sam3u1c/pmc.c **** {
 3024              	 .loc 1 992 0
 3025              	 .cfi_startproc
 3026              	 
 3027              	 
 3028              	 
 3029 0000 80B4     	 push {r7}
 3030              	.LCFI227:
 3031              	 .cfi_def_cfa_offset 4
 3032              	 .cfi_offset 7,-4
 3033 0002 83B0     	 sub sp,sp,#12
 3034              	.LCFI228:
 3035              	 .cfi_def_cfa_offset 16
 3036 0004 00AF     	 add r7,sp,#0
 3037              	.LCFI229:
 3038              	 .cfi_def_cfa_register 7
 3039 0006 7860     	 str r0,[r7,#4]
 993:.././hal/sam3u1c/pmc.c **** 	if (ul_id > 2) {
 3040              	 .loc 1 993 0
 3041 0008 7B68     	 ldr r3,[r7,#4]
 3042 000a 022B     	 cmp r3,#2
 3043 000c 01D9     	 bls .L224
 994:.././hal/sam3u1c/pmc.c **** 		return 0;
 3044              	 .loc 1 994 0
 3045 000e 0023     	 movs r3,#0
 3046 0010 07E0     	 b .L225
 3047              	.L224:
 995:.././hal/sam3u1c/pmc.c **** 	}
 996:.././hal/sam3u1c/pmc.c **** 
 997:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SCSR & (PMC_SCSR_PCK0 << ul_id));
 3048              	 .loc 1 997 0
 3049 0012 064B     	 ldr r3,.L226
 3050 0014 9A68     	 ldr r2,[r3,#8]
 3051 0016 4FF48071 	 mov r1,#256
 3052 001a 7B68     	 ldr r3,[r7,#4]
 3053 001c 01FA03F3 	 lsl r3,r1,r3
 3054 0020 1340     	 ands r3,r3,r2
 3055              	.L225:
 998:.././hal/sam3u1c/pmc.c **** }
 3056              	 .loc 1 998 0
 3057 0022 1846     	 mov r0,r3
 3058 0024 0C37     	 adds r7,r7,#12
 3059              	.LCFI230:
 3060              	 .cfi_def_cfa_offset 4
 3061 0026 BD46     	 mov sp,r7
 3062              	.LCFI231:
 3063              	 .cfi_def_cfa_register 13
 3064              	 
 3065 0028 80BC     	 pop {r7}
 3066              	.LCFI232:
 3067              	 .cfi_restore 7
 3068              	 .cfi_def_cfa_offset 0
 3069 002a 7047     	 bx lr
 3070              	.L227:
 3071              	 .align 2
 3072              	.L226:
 3073 002c 00040E40 	 .word 1074660352
 3074              	 .cfi_endproc
 3075              	.LFE110:
 3077              	 .section .text.pmc_enable_interrupt,"ax",%progbits
 3078              	 .align 1
 3079              	 .global pmc_enable_interrupt
 3080              	 .syntax unified
 3081              	 .thumb
 3082              	 .thumb_func
 3083              	 .fpu softvfp
 3085              	pmc_enable_interrupt:
 3086              	.LFB111:
 999:.././hal/sam3u1c/pmc.c **** 
1000:.././hal/sam3u1c/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP)
1001:.././hal/sam3u1c/pmc.c **** /**
1002:.././hal/sam3u1c/pmc.c ****  * \brief Enable Coprocessor Clocks.
1003:.././hal/sam3u1c/pmc.c ****  */
1004:.././hal/sam3u1c/pmc.c **** void pmc_enable_cpck(void)
1005:.././hal/sam3u1c/pmc.c **** {
1006:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_CPCK | PMC_SCER_CPKEY_PASSWD;
1007:.././hal/sam3u1c/pmc.c **** }
1008:.././hal/sam3u1c/pmc.c **** 
1009:.././hal/sam3u1c/pmc.c **** /**
1010:.././hal/sam3u1c/pmc.c ****  * \brief Disable Coprocessor Clocks.
1011:.././hal/sam3u1c/pmc.c ****  */
1012:.././hal/sam3u1c/pmc.c **** void pmc_disable_cpck(void)
1013:.././hal/sam3u1c/pmc.c **** {
1014:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_CPCK | PMC_SCDR_CPKEY_PASSWD;
1015:.././hal/sam3u1c/pmc.c **** }
1016:.././hal/sam3u1c/pmc.c **** 
1017:.././hal/sam3u1c/pmc.c **** /**
1018:.././hal/sam3u1c/pmc.c ****  * \brief Check if the Coprocessor Clocks is enabled.
1019:.././hal/sam3u1c/pmc.c ****  *
1020:.././hal/sam3u1c/pmc.c ****  * \retval 0 Coprocessor Clocks is disabled.
1021:.././hal/sam3u1c/pmc.c ****  * \retval 1 Coprocessor Clocks is enabled.
1022:.././hal/sam3u1c/pmc.c ****  */
1023:.././hal/sam3u1c/pmc.c **** bool pmc_is_cpck_enabled(void)
1024:.././hal/sam3u1c/pmc.c **** {
1025:.././hal/sam3u1c/pmc.c **** 	if(PMC->PMC_SCSR & PMC_SCSR_CPCK) {
1026:.././hal/sam3u1c/pmc.c **** 		return 1;
1027:.././hal/sam3u1c/pmc.c **** 	} else {
1028:.././hal/sam3u1c/pmc.c **** 		return 0;
1029:.././hal/sam3u1c/pmc.c **** 	}
1030:.././hal/sam3u1c/pmc.c **** }
1031:.././hal/sam3u1c/pmc.c **** 
1032:.././hal/sam3u1c/pmc.c **** /**
1033:.././hal/sam3u1c/pmc.c ****  * \brief Enable Coprocessor Bus Master Clocks.
1034:.././hal/sam3u1c/pmc.c ****  */
1035:.././hal/sam3u1c/pmc.c **** void pmc_enable_cpbmck(void)
1036:.././hal/sam3u1c/pmc.c **** {
1037:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_CPCK | PMC_SCER_CPKEY_PASSWD;
1038:.././hal/sam3u1c/pmc.c **** }
1039:.././hal/sam3u1c/pmc.c **** 
1040:.././hal/sam3u1c/pmc.c **** /**
1041:.././hal/sam3u1c/pmc.c ****  * \brief Disable Coprocessor Bus Master Clocks.
1042:.././hal/sam3u1c/pmc.c ****  */
1043:.././hal/sam3u1c/pmc.c **** void pmc_disable_cpbmck(void)
1044:.././hal/sam3u1c/pmc.c **** {
1045:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_CPCK | PMC_SCDR_CPKEY_PASSWD;
1046:.././hal/sam3u1c/pmc.c **** }
1047:.././hal/sam3u1c/pmc.c **** 
1048:.././hal/sam3u1c/pmc.c **** /**
1049:.././hal/sam3u1c/pmc.c ****  * \brief Check if the Coprocessor Bus Master Clocks is enabled.
1050:.././hal/sam3u1c/pmc.c ****  *
1051:.././hal/sam3u1c/pmc.c ****  * \retval 0 Coprocessor Bus Master Clocks is disabled.
1052:.././hal/sam3u1c/pmc.c ****  * \retval 1 Coprocessor Bus Master Clocks is enabled.
1053:.././hal/sam3u1c/pmc.c ****  */
1054:.././hal/sam3u1c/pmc.c **** bool pmc_is_cpbmck_enabled(void)
1055:.././hal/sam3u1c/pmc.c **** {
1056:.././hal/sam3u1c/pmc.c **** 	if(PMC->PMC_SCSR & PMC_SCSR_CPBMCK) {
1057:.././hal/sam3u1c/pmc.c **** 		return 1;
1058:.././hal/sam3u1c/pmc.c **** 	} else {
1059:.././hal/sam3u1c/pmc.c **** 		return 0;
1060:.././hal/sam3u1c/pmc.c **** 	}
1061:.././hal/sam3u1c/pmc.c **** }
1062:.././hal/sam3u1c/pmc.c **** 
1063:.././hal/sam3u1c/pmc.c **** /**
1064:.././hal/sam3u1c/pmc.c ****  * \brief Set the prescaler for the Coprocessor Master Clock.
1065:.././hal/sam3u1c/pmc.c ****  *
1066:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Prescaler value.
1067:.././hal/sam3u1c/pmc.c ****  */
1068:.././hal/sam3u1c/pmc.c **** void pmc_cpck_set_prescaler(uint32_t ul_pres)
1069:.././hal/sam3u1c/pmc.c **** {
1070:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
1071:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_CPPRES_Msk)) | PMC_MCKR_CPPRES(ul_pres);
1072:.././hal/sam3u1c/pmc.c **** }
1073:.././hal/sam3u1c/pmc.c **** 
1074:.././hal/sam3u1c/pmc.c **** /**
1075:.././hal/sam3u1c/pmc.c ****  * \brief Set the source for the Coprocessor Master Clock.
1076:.././hal/sam3u1c/pmc.c ****  *
1077:.././hal/sam3u1c/pmc.c ****  * \param ul_source Source selection value.
1078:.././hal/sam3u1c/pmc.c ****  */
1079:.././hal/sam3u1c/pmc.c **** void pmc_cpck_set_source(uint32_t ul_source)
1080:.././hal/sam3u1c/pmc.c **** {
1081:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
1082:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_CPCSS_Msk)) | ul_source;
1083:.././hal/sam3u1c/pmc.c **** }
1084:.././hal/sam3u1c/pmc.c **** #endif
1085:.././hal/sam3u1c/pmc.c **** 
1086:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAMG55)
1087:.././hal/sam3u1c/pmc.c **** /**
1088:.././hal/sam3u1c/pmc.c ****  * \brief Switch UDP (USB) clock source selection to PLLA clock.
1089:.././hal/sam3u1c/pmc.c ****  *
1090:.././hal/sam3u1c/pmc.c ****  * \param ul_usbdiv Clock divisor.
1091:.././hal/sam3u1c/pmc.c ****  */
1092:.././hal/sam3u1c/pmc.c **** void pmc_switch_udpck_to_pllack(uint32_t ul_usbdiv)
1093:.././hal/sam3u1c/pmc.c **** {
1094:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv);
1095:.././hal/sam3u1c/pmc.c **** }
1096:.././hal/sam3u1c/pmc.c **** #endif
1097:.././hal/sam3u1c/pmc.c **** 
1098:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM4S || SAMG55)
1099:.././hal/sam3u1c/pmc.c **** /**
1100:.././hal/sam3u1c/pmc.c ****  * \brief Switch UDP (USB) clock source selection to PLLB clock.
1101:.././hal/sam3u1c/pmc.c ****  *
1102:.././hal/sam3u1c/pmc.c ****  * \param ul_usbdiv Clock divisor.
1103:.././hal/sam3u1c/pmc.c ****  */
1104:.././hal/sam3u1c/pmc.c **** void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
1105:.././hal/sam3u1c/pmc.c **** {
1106:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
1107:.././hal/sam3u1c/pmc.c **** }
1108:.././hal/sam3u1c/pmc.c **** #endif
1109:.././hal/sam3u1c/pmc.c **** 
1110:.././hal/sam3u1c/pmc.c **** #if (SAM3XA)
1111:.././hal/sam3u1c/pmc.c **** /**
1112:.././hal/sam3u1c/pmc.c ****  * \brief Switch UDP (USB) clock source selection to UPLL clock.
1113:.././hal/sam3u1c/pmc.c ****  *
1114:.././hal/sam3u1c/pmc.c ****  * \param ul_usbdiv Clock divisor.
1115:.././hal/sam3u1c/pmc.c ****  */
1116:.././hal/sam3u1c/pmc.c **** void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
1117:.././hal/sam3u1c/pmc.c **** {
1118:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
1119:.././hal/sam3u1c/pmc.c **** }
1120:.././hal/sam3u1c/pmc.c **** #endif
1121:.././hal/sam3u1c/pmc.c **** 
1122:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAMG55)
1123:.././hal/sam3u1c/pmc.c **** /**
1124:.././hal/sam3u1c/pmc.c ****  * \brief Enable UDP (USB) clock.
1125:.././hal/sam3u1c/pmc.c ****  */
1126:.././hal/sam3u1c/pmc.c **** void pmc_enable_udpck(void)
1127:.././hal/sam3u1c/pmc.c **** {
1128:.././hal/sam3u1c/pmc.c **** # if (SAM3S || SAM4S || SAM4E || SAMG55)
1129:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_UDP;
1130:.././hal/sam3u1c/pmc.c **** # else
1131:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
1132:.././hal/sam3u1c/pmc.c **** # endif
1133:.././hal/sam3u1c/pmc.c **** }
1134:.././hal/sam3u1c/pmc.c **** 
1135:.././hal/sam3u1c/pmc.c **** /**
1136:.././hal/sam3u1c/pmc.c ****  * \brief Disable UDP (USB) clock.
1137:.././hal/sam3u1c/pmc.c ****  */
1138:.././hal/sam3u1c/pmc.c **** void pmc_disable_udpck(void)
1139:.././hal/sam3u1c/pmc.c **** {
1140:.././hal/sam3u1c/pmc.c **** # if (SAM3S || SAM4S || SAM4E || SAMG55)
1141:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_UDP;
1142:.././hal/sam3u1c/pmc.c **** # else
1143:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_UOTGCLK;
1144:.././hal/sam3u1c/pmc.c **** # endif
1145:.././hal/sam3u1c/pmc.c **** }
1146:.././hal/sam3u1c/pmc.c **** #endif
1147:.././hal/sam3u1c/pmc.c **** 
1148:.././hal/sam3u1c/pmc.c **** /**
1149:.././hal/sam3u1c/pmc.c ****  * \brief Enable PMC interrupts.
1150:.././hal/sam3u1c/pmc.c ****  *
1151:.././hal/sam3u1c/pmc.c ****  * \param ul_sources Interrupt sources bit map.
1152:.././hal/sam3u1c/pmc.c ****  */
1153:.././hal/sam3u1c/pmc.c **** void pmc_enable_interrupt(uint32_t ul_sources)
1154:.././hal/sam3u1c/pmc.c **** {
 3087              	 .loc 1 1154 0
 3088              	 .cfi_startproc
 3089              	 
 3090              	 
 3091              	 
 3092 0000 80B4     	 push {r7}
 3093              	.LCFI233:
 3094              	 .cfi_def_cfa_offset 4
 3095              	 .cfi_offset 7,-4
 3096 0002 83B0     	 sub sp,sp,#12
 3097              	.LCFI234:
 3098              	 .cfi_def_cfa_offset 16
 3099 0004 00AF     	 add r7,sp,#0
 3100              	.LCFI235:
 3101              	 .cfi_def_cfa_register 7
 3102 0006 7860     	 str r0,[r7,#4]
1155:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_IER = ul_sources;
 3103              	 .loc 1 1155 0
 3104 0008 034A     	 ldr r2,.L229
 3105 000a 7B68     	 ldr r3,[r7,#4]
 3106 000c 1366     	 str r3,[r2,#96]
1156:.././hal/sam3u1c/pmc.c **** }
 3107              	 .loc 1 1156 0
 3108 000e 00BF     	 nop
 3109 0010 0C37     	 adds r7,r7,#12
 3110              	.LCFI236:
 3111              	 .cfi_def_cfa_offset 4
 3112 0012 BD46     	 mov sp,r7
 3113              	.LCFI237:
 3114              	 .cfi_def_cfa_register 13
 3115              	 
 3116 0014 80BC     	 pop {r7}
 3117              	.LCFI238:
 3118              	 .cfi_restore 7
 3119              	 .cfi_def_cfa_offset 0
 3120 0016 7047     	 bx lr
 3121              	.L230:
 3122              	 .align 2
 3123              	.L229:
 3124 0018 00040E40 	 .word 1074660352
 3125              	 .cfi_endproc
 3126              	.LFE111:
 3128              	 .section .text.pmc_disable_interrupt,"ax",%progbits
 3129              	 .align 1
 3130              	 .global pmc_disable_interrupt
 3131              	 .syntax unified
 3132              	 .thumb
 3133              	 .thumb_func
 3134              	 .fpu softvfp
 3136              	pmc_disable_interrupt:
 3137              	.LFB112:
1157:.././hal/sam3u1c/pmc.c **** 
1158:.././hal/sam3u1c/pmc.c **** /**
1159:.././hal/sam3u1c/pmc.c ****  * \brief Disable PMC interrupts.
1160:.././hal/sam3u1c/pmc.c ****  *
1161:.././hal/sam3u1c/pmc.c ****  * \param ul_sources Interrupt sources bit map.
1162:.././hal/sam3u1c/pmc.c ****  */
1163:.././hal/sam3u1c/pmc.c **** void pmc_disable_interrupt(uint32_t ul_sources)
1164:.././hal/sam3u1c/pmc.c **** {
 3138              	 .loc 1 1164 0
 3139              	 .cfi_startproc
 3140              	 
 3141              	 
 3142              	 
 3143 0000 80B4     	 push {r7}
 3144              	.LCFI239:
 3145              	 .cfi_def_cfa_offset 4
 3146              	 .cfi_offset 7,-4
 3147 0002 83B0     	 sub sp,sp,#12
 3148              	.LCFI240:
 3149              	 .cfi_def_cfa_offset 16
 3150 0004 00AF     	 add r7,sp,#0
 3151              	.LCFI241:
 3152              	 .cfi_def_cfa_register 7
 3153 0006 7860     	 str r0,[r7,#4]
1165:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_IDR = ul_sources;
 3154              	 .loc 1 1165 0
 3155 0008 034A     	 ldr r2,.L232
 3156 000a 7B68     	 ldr r3,[r7,#4]
 3157 000c 5366     	 str r3,[r2,#100]
1166:.././hal/sam3u1c/pmc.c **** }
 3158              	 .loc 1 1166 0
 3159 000e 00BF     	 nop
 3160 0010 0C37     	 adds r7,r7,#12
 3161              	.LCFI242:
 3162              	 .cfi_def_cfa_offset 4
 3163 0012 BD46     	 mov sp,r7
 3164              	.LCFI243:
 3165              	 .cfi_def_cfa_register 13
 3166              	 
 3167 0014 80BC     	 pop {r7}
 3168              	.LCFI244:
 3169              	 .cfi_restore 7
 3170              	 .cfi_def_cfa_offset 0
 3171 0016 7047     	 bx lr
 3172              	.L233:
 3173              	 .align 2
 3174              	.L232:
 3175 0018 00040E40 	 .word 1074660352
 3176              	 .cfi_endproc
 3177              	.LFE112:
 3179              	 .section .text.pmc_get_interrupt_mask,"ax",%progbits
 3180              	 .align 1
 3181              	 .global pmc_get_interrupt_mask
 3182              	 .syntax unified
 3183              	 .thumb
 3184              	 .thumb_func
 3185              	 .fpu softvfp
 3187              	pmc_get_interrupt_mask:
 3188              	.LFB113:
1167:.././hal/sam3u1c/pmc.c **** 
1168:.././hal/sam3u1c/pmc.c **** /**
1169:.././hal/sam3u1c/pmc.c ****  * \brief Get PMC interrupt mask.
1170:.././hal/sam3u1c/pmc.c ****  *
1171:.././hal/sam3u1c/pmc.c ****  * \return The interrupt mask value.
1172:.././hal/sam3u1c/pmc.c ****  */
1173:.././hal/sam3u1c/pmc.c **** uint32_t pmc_get_interrupt_mask(void)
1174:.././hal/sam3u1c/pmc.c **** {
 3189              	 .loc 1 1174 0
 3190              	 .cfi_startproc
 3191              	 
 3192              	 
 3193              	 
 3194 0000 80B4     	 push {r7}
 3195              	.LCFI245:
 3196              	 .cfi_def_cfa_offset 4
 3197              	 .cfi_offset 7,-4
 3198 0002 00AF     	 add r7,sp,#0
 3199              	.LCFI246:
 3200              	 .cfi_def_cfa_register 7
1175:.././hal/sam3u1c/pmc.c **** 	return PMC->PMC_IMR;
 3201              	 .loc 1 1175 0
 3202 0004 024B     	 ldr r3,.L236
 3203 0006 DB6E     	 ldr r3,[r3,#108]
1176:.././hal/sam3u1c/pmc.c **** }
 3204              	 .loc 1 1176 0
 3205 0008 1846     	 mov r0,r3
 3206 000a BD46     	 mov sp,r7
 3207              	.LCFI247:
 3208              	 .cfi_def_cfa_register 13
 3209              	 
 3210 000c 80BC     	 pop {r7}
 3211              	.LCFI248:
 3212              	 .cfi_restore 7
 3213              	 .cfi_def_cfa_offset 0
 3214 000e 7047     	 bx lr
 3215              	.L237:
 3216              	 .align 2
 3217              	.L236:
 3218 0010 00040E40 	 .word 1074660352
 3219              	 .cfi_endproc
 3220              	.LFE113:
 3222              	 .section .text.pmc_get_status,"ax",%progbits
 3223              	 .align 1
 3224              	 .global pmc_get_status
 3225              	 .syntax unified
 3226              	 .thumb
 3227              	 .thumb_func
 3228              	 .fpu softvfp
 3230              	pmc_get_status:
 3231              	.LFB114:
1177:.././hal/sam3u1c/pmc.c **** 
1178:.././hal/sam3u1c/pmc.c **** /**
1179:.././hal/sam3u1c/pmc.c ****  * \brief Get current status.
1180:.././hal/sam3u1c/pmc.c ****  *
1181:.././hal/sam3u1c/pmc.c ****  * \return The current PMC status.
1182:.././hal/sam3u1c/pmc.c ****  */
1183:.././hal/sam3u1c/pmc.c **** uint32_t pmc_get_status(void)
1184:.././hal/sam3u1c/pmc.c **** {
 3232              	 .loc 1 1184 0
 3233              	 .cfi_startproc
 3234              	 
 3235              	 
 3236              	 
 3237 0000 80B4     	 push {r7}
 3238              	.LCFI249:
 3239              	 .cfi_def_cfa_offset 4
 3240              	 .cfi_offset 7,-4
 3241 0002 00AF     	 add r7,sp,#0
 3242              	.LCFI250:
 3243              	 .cfi_def_cfa_register 7
1185:.././hal/sam3u1c/pmc.c **** 	return PMC->PMC_SR;
 3244              	 .loc 1 1185 0
 3245 0004 024B     	 ldr r3,.L240
 3246 0006 9B6E     	 ldr r3,[r3,#104]
1186:.././hal/sam3u1c/pmc.c **** }
 3247              	 .loc 1 1186 0
 3248 0008 1846     	 mov r0,r3
 3249 000a BD46     	 mov sp,r7
 3250              	.LCFI251:
 3251              	 .cfi_def_cfa_register 13
 3252              	 
 3253 000c 80BC     	 pop {r7}
 3254              	.LCFI252:
 3255              	 .cfi_restore 7
 3256              	 .cfi_def_cfa_offset 0
 3257 000e 7047     	 bx lr
 3258              	.L241:
 3259              	 .align 2
 3260              	.L240:
 3261 0010 00040E40 	 .word 1074660352
 3262              	 .cfi_endproc
 3263              	.LFE114:
 3265              	 .section .text.pmc_set_fast_startup_input,"ax",%progbits
 3266              	 .align 1
 3267              	 .global pmc_set_fast_startup_input
 3268              	 .syntax unified
 3269              	 .thumb
 3270              	 .thumb_func
 3271              	 .fpu softvfp
 3273              	pmc_set_fast_startup_input:
 3274              	.LFB115:
1187:.././hal/sam3u1c/pmc.c **** 
1188:.././hal/sam3u1c/pmc.c **** /**
1189:.././hal/sam3u1c/pmc.c ****  * \brief Set the wake-up inputs for fast startup mode registers
1190:.././hal/sam3u1c/pmc.c ****  *        (event generation).
1191:.././hal/sam3u1c/pmc.c ****  *
1192:.././hal/sam3u1c/pmc.c ****  * \param ul_inputs Wake up inputs to enable.
1193:.././hal/sam3u1c/pmc.c ****  */
1194:.././hal/sam3u1c/pmc.c **** void pmc_set_fast_startup_input(uint32_t ul_inputs)
1195:.././hal/sam3u1c/pmc.c **** {
 3275              	 .loc 1 1195 0
 3276              	 .cfi_startproc
 3277              	 
 3278              	 
 3279              	 
 3280 0000 80B4     	 push {r7}
 3281              	.LCFI253:
 3282              	 .cfi_def_cfa_offset 4
 3283              	 .cfi_offset 7,-4
 3284 0002 83B0     	 sub sp,sp,#12
 3285              	.LCFI254:
 3286              	 .cfi_def_cfa_offset 16
 3287 0004 00AF     	 add r7,sp,#0
 3288              	.LCFI255:
 3289              	 .cfi_def_cfa_register 7
 3290 0006 7860     	 str r0,[r7,#4]
1196:.././hal/sam3u1c/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
 3291              	 .loc 1 1196 0
 3292 0008 7B68     	 ldr r3,[r7,#4]
 3293 000a C3F31203 	 ubfx r3,r3,#0,#19
 3294 000e 7B60     	 str r3,[r7,#4]
1197:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR |= ul_inputs;
 3295              	 .loc 1 1197 0
 3296 0010 0549     	 ldr r1,.L243
 3297 0012 054B     	 ldr r3,.L243
 3298 0014 1A6F     	 ldr r2,[r3,#112]
 3299 0016 7B68     	 ldr r3,[r7,#4]
 3300 0018 1343     	 orrs r3,r3,r2
 3301 001a 0B67     	 str r3,[r1,#112]
1198:.././hal/sam3u1c/pmc.c **** }
 3302              	 .loc 1 1198 0
 3303 001c 00BF     	 nop
 3304 001e 0C37     	 adds r7,r7,#12
 3305              	.LCFI256:
 3306              	 .cfi_def_cfa_offset 4
 3307 0020 BD46     	 mov sp,r7
 3308              	.LCFI257:
 3309              	 .cfi_def_cfa_register 13
 3310              	 
 3311 0022 80BC     	 pop {r7}
 3312              	.LCFI258:
 3313              	 .cfi_restore 7
 3314              	 .cfi_def_cfa_offset 0
 3315 0024 7047     	 bx lr
 3316              	.L244:
 3317 0026 00BF     	 .align 2
 3318              	.L243:
 3319 0028 00040E40 	 .word 1074660352
 3320              	 .cfi_endproc
 3321              	.LFE115:
 3323              	 .section .text.pmc_clr_fast_startup_input,"ax",%progbits
 3324              	 .align 1
 3325              	 .global pmc_clr_fast_startup_input
 3326              	 .syntax unified
 3327              	 .thumb
 3328              	 .thumb_func
 3329              	 .fpu softvfp
 3331              	pmc_clr_fast_startup_input:
 3332              	.LFB116:
1199:.././hal/sam3u1c/pmc.c **** 
1200:.././hal/sam3u1c/pmc.c **** /**
1201:.././hal/sam3u1c/pmc.c ****  * \brief Clear the wake-up inputs for fast startup mode registers
1202:.././hal/sam3u1c/pmc.c ****  *        (remove event generation).
1203:.././hal/sam3u1c/pmc.c ****  *
1204:.././hal/sam3u1c/pmc.c ****  * \param ul_inputs Wake up inputs to disable.
1205:.././hal/sam3u1c/pmc.c ****  */
1206:.././hal/sam3u1c/pmc.c **** void pmc_clr_fast_startup_input(uint32_t ul_inputs)
1207:.././hal/sam3u1c/pmc.c **** {
 3333              	 .loc 1 1207 0
 3334              	 .cfi_startproc
 3335              	 
 3336              	 
 3337              	 
 3338 0000 80B4     	 push {r7}
 3339              	.LCFI259:
 3340              	 .cfi_def_cfa_offset 4
 3341              	 .cfi_offset 7,-4
 3342 0002 83B0     	 sub sp,sp,#12
 3343              	.LCFI260:
 3344              	 .cfi_def_cfa_offset 16
 3345 0004 00AF     	 add r7,sp,#0
 3346              	.LCFI261:
 3347              	 .cfi_def_cfa_register 7
 3348 0006 7860     	 str r0,[r7,#4]
1208:.././hal/sam3u1c/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
 3349              	 .loc 1 1208 0
 3350 0008 7B68     	 ldr r3,[r7,#4]
 3351 000a C3F31203 	 ubfx r3,r3,#0,#19
 3352 000e 7B60     	 str r3,[r7,#4]
1209:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR &= ~ul_inputs;
 3353              	 .loc 1 1209 0
 3354 0010 0549     	 ldr r1,.L246
 3355 0012 054B     	 ldr r3,.L246
 3356 0014 1A6F     	 ldr r2,[r3,#112]
 3357 0016 7B68     	 ldr r3,[r7,#4]
 3358 0018 DB43     	 mvns r3,r3
 3359 001a 1340     	 ands r3,r3,r2
 3360 001c 0B67     	 str r3,[r1,#112]
1210:.././hal/sam3u1c/pmc.c **** }
 3361              	 .loc 1 1210 0
 3362 001e 00BF     	 nop
 3363 0020 0C37     	 adds r7,r7,#12
 3364              	.LCFI262:
 3365              	 .cfi_def_cfa_offset 4
 3366 0022 BD46     	 mov sp,r7
 3367              	.LCFI263:
 3368              	 .cfi_def_cfa_register 13
 3369              	 
 3370 0024 80BC     	 pop {r7}
 3371              	.LCFI264:
 3372              	 .cfi_restore 7
 3373              	 .cfi_def_cfa_offset 0
 3374 0026 7047     	 bx lr
 3375              	.L247:
 3376              	 .align 2
 3377              	.L246:
 3378 0028 00040E40 	 .word 1074660352
 3379              	 .cfi_endproc
 3380              	.LFE116:
 3382              	 .section .text.pmc_enable_sleepmode,"ax",%progbits
 3383              	 .align 1
 3384              	 .global pmc_enable_sleepmode
 3385              	 .syntax unified
 3386              	 .thumb
 3387              	 .thumb_func
 3388              	 .fpu softvfp
 3390              	pmc_enable_sleepmode:
 3391              	.LFB117:
1211:.././hal/sam3u1c/pmc.c **** 
1212:.././hal/sam3u1c/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP)
1213:.././hal/sam3u1c/pmc.c **** /**
1214:.././hal/sam3u1c/pmc.c ****  * \brief Set the wake-up inputs of coprocessor for fast startup mode registers
1215:.././hal/sam3u1c/pmc.c ****  *        (event generation).
1216:.././hal/sam3u1c/pmc.c ****  *
1217:.././hal/sam3u1c/pmc.c ****  * \param ul_inputs Wake up inputs to enable.
1218:.././hal/sam3u1c/pmc.c ****  */
1219:.././hal/sam3u1c/pmc.c **** void pmc_cp_set_fast_startup_input(uint32_t ul_inputs)
1220:.././hal/sam3u1c/pmc.c **** {
1221:.././hal/sam3u1c/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
1222:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_CPFSMR |= ul_inputs;
1223:.././hal/sam3u1c/pmc.c **** }
1224:.././hal/sam3u1c/pmc.c **** 
1225:.././hal/sam3u1c/pmc.c **** /**
1226:.././hal/sam3u1c/pmc.c ****  * \brief Clear the wake-up inputs of coprocessor for fast startup mode registers
1227:.././hal/sam3u1c/pmc.c ****  *        (remove event generation).
1228:.././hal/sam3u1c/pmc.c ****  *
1229:.././hal/sam3u1c/pmc.c ****  * \param ul_inputs Wake up inputs to disable.
1230:.././hal/sam3u1c/pmc.c ****  */
1231:.././hal/sam3u1c/pmc.c **** void pmc_cp_clr_fast_startup_input(uint32_t ul_inputs)
1232:.././hal/sam3u1c/pmc.c **** {
1233:.././hal/sam3u1c/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
1234:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_CPFSMR &= ~ul_inputs;
1235:.././hal/sam3u1c/pmc.c **** }
1236:.././hal/sam3u1c/pmc.c **** #endif
1237:.././hal/sam3u1c/pmc.c **** 
1238:.././hal/sam3u1c/pmc.c **** #if (!(SAMG51 || SAMG53 || SAMG54))
1239:.././hal/sam3u1c/pmc.c **** /**
1240:.././hal/sam3u1c/pmc.c ****  * \brief Enable Sleep Mode.
1241:.././hal/sam3u1c/pmc.c ****  * Enter condition: (WFE or WFI) + (SLEEPDEEP bit = 0) + (LPM bit = 0)
1242:.././hal/sam3u1c/pmc.c ****  *
1243:.././hal/sam3u1c/pmc.c ****  * \param uc_type 0 for wait for interrupt, 1 for wait for event.
1244:.././hal/sam3u1c/pmc.c ****  * \note For SAM4S, SAM4C, SAM4CM, SAM4CP and SAM4E series,
1245:.././hal/sam3u1c/pmc.c ****  * since only WFI is effective, uc_type = 1 will be treated as uc_type = 0.
1246:.././hal/sam3u1c/pmc.c ****  */
1247:.././hal/sam3u1c/pmc.c **** void pmc_enable_sleepmode(uint8_t uc_type)
1248:.././hal/sam3u1c/pmc.c **** {
 3392              	 .loc 1 1248 0
 3393              	 .cfi_startproc
 3394              	 
 3395              	 
 3396              	 
 3397 0000 80B4     	 push {r7}
 3398              	.LCFI265:
 3399              	 .cfi_def_cfa_offset 4
 3400              	 .cfi_offset 7,-4
 3401 0002 83B0     	 sub sp,sp,#12
 3402              	.LCFI266:
 3403              	 .cfi_def_cfa_offset 16
 3404 0004 00AF     	 add r7,sp,#0
 3405              	.LCFI267:
 3406              	 .cfi_def_cfa_register 7
 3407 0006 0346     	 mov r3,r0
 3408 0008 FB71     	 strb r3,[r7,#7]
1249:.././hal/sam3u1c/pmc.c **** #if !(SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP)
1250:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR &= (uint32_t) ~ PMC_FSMR_LPM; // Enter Sleep mode
 3409              	 .loc 1 1250 0
 3410 000a 0B4A     	 ldr r2,.L252
 3411 000c 0A4B     	 ldr r3,.L252
 3412 000e 1B6F     	 ldr r3,[r3,#112]
 3413 0010 23F48013 	 bic r3,r3,#1048576
 3414 0014 1367     	 str r3,[r2,#112]
1251:.././hal/sam3u1c/pmc.c **** #endif
1252:.././hal/sam3u1c/pmc.c **** 	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; // Deep sleep
 3415              	 .loc 1 1252 0
 3416 0016 094A     	 ldr r2,.L252+4
 3417 0018 084B     	 ldr r3,.L252+4
 3418 001a 1B69     	 ldr r3,[r3,#16]
 3419 001c 23F00403 	 bic r3,r3,#4
 3420 0020 1361     	 str r3,[r2,#16]
1253:.././hal/sam3u1c/pmc.c **** 
1254:.././hal/sam3u1c/pmc.c **** #if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP)
1255:.././hal/sam3u1c/pmc.c **** 	UNUSED(uc_type);
1256:.././hal/sam3u1c/pmc.c **** 	__WFI();
1257:.././hal/sam3u1c/pmc.c **** #else
1258:.././hal/sam3u1c/pmc.c **** 	if (uc_type == 0) {
 3421              	 .loc 1 1258 0
 3422 0022 FB79     	 ldrb r3,[r7,#7]
 3423 0024 002B     	 cmp r3,#0
 3424 0026 01D1     	 bne .L249
 3425              	.LBB12:
 3426              	.LBB13:
 3427              	 .file 2 ".././hal/sam3u1c/inc/core_cmInstr.h"
   1:.././hal/sam3u1c/inc/core_cmInstr.h **** /**************************************************************************//**
   2:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @version  V3.00
   5:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @date     07. February 2012
   6:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
   7:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @note
   8:.././hal/sam3u1c/inc/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  10:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @par
  11:.././hal/sam3u1c/inc/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:.././hal/sam3u1c/inc/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:.././hal/sam3u1c/inc/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  15:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @par
  16:.././hal/sam3u1c/inc/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:.././hal/sam3u1c/inc/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:.././hal/sam3u1c/inc/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:.././hal/sam3u1c/inc/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:.././hal/sam3u1c/inc/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  22:.././hal/sam3u1c/inc/core_cmInstr.h ****  ******************************************************************************/
  23:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  24:.././hal/sam3u1c/inc/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  27:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  28:.././hal/sam3u1c/inc/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:.././hal/sam3u1c/inc/core_cmInstr.h ****   Access to dedicated instructions
  31:.././hal/sam3u1c/inc/core_cmInstr.h ****   @{
  32:.././hal/sam3u1c/inc/core_cmInstr.h **** */
  33:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  34:.././hal/sam3u1c/inc/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:.././hal/sam3u1c/inc/core_cmInstr.h **** /* ARM armcc specific functions */
  36:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  37:.././hal/sam3u1c/inc/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:.././hal/sam3u1c/inc/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:.././hal/sam3u1c/inc/core_cmInstr.h **** #endif
  40:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  41:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  42:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  No Operation
  43:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  44:.././hal/sam3u1c/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  46:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __NOP                             __nop
  47:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  48:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  49:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  51:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:.././hal/sam3u1c/inc/core_cmInstr.h ****     until one of a number of events occurs.
  53:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  54:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __WFI                             __wfi
  55:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  56:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  57:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Event
  58:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  59:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:.././hal/sam3u1c/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  62:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __WFE                             __wfe
  63:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  64:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  65:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Send Event
  66:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  67:.././hal/sam3u1c/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  69:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __SEV                             __sev
  70:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  71:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  72:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  74:.././hal/sam3u1c/inc/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:.././hal/sam3u1c/inc/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:.././hal/sam3u1c/inc/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  78:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  80:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  81:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  83:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:.././hal/sam3u1c/inc/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  86:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  88:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  89:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  91:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:.././hal/sam3u1c/inc/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  94:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  96:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  97:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  99:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 101:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 103:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 104:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __REV                             __rev
 105:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 106:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 107:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 109:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 111:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 113:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 114:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 116:.././hal/sam3u1c/inc/core_cmInstr.h ****   rev16 r0, r0
 117:.././hal/sam3u1c/inc/core_cmInstr.h ****   bx lr
 118:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 119:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 120:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 121:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 123:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 125:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 127:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 128:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 130:.././hal/sam3u1c/inc/core_cmInstr.h ****   revsh r0, r0
 131:.././hal/sam3u1c/inc/core_cmInstr.h ****   bx lr
 132:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 133:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 134:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 135:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 137:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 139:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Rotated value
 142:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 143:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __ROR                             __ror
 144:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 145:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 146:.././hal/sam3u1c/inc/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 148:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 150:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 152:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 154:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 155:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __RBIT                            __rbit
 156:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 157:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 158:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 160:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 162:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 165:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 167:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 168:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 170:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 172:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 175:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 177:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 178:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 180:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 182:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 185:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 187:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 188:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 190:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 192:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 193:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 195:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 196:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 197:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 199:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 200:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 202:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 204:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 205:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 207:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 208:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 209:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 211:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 212:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 214:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 216:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 217:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 219:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 220:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 221:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 223:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 224:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 226:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 228:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 229:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CLREX                           __clrex
 230:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 231:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 232:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Signed Saturate
 233:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 234:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function saturates a signed value.
 235:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 236:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             Saturated value
 239:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 240:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __SSAT                            __ssat
 241:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 242:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 243:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 245:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function saturates an unsigned value.
 246:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 247:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             Saturated value
 250:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 251:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __USAT                            __usat
 252:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 253:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 254:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Count leading zeros
 255:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 256:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 258:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             number of leading zeros in value
 260:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 261:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CLZ                             __clz
 262:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 263:.././hal/sam3u1c/inc/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 265:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 266:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 267:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:.././hal/sam3u1c/inc/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 270:.././hal/sam3u1c/inc/core_cmInstr.h **** #include <cmsis_iar.h>
 271:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 272:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 273:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:.././hal/sam3u1c/inc/core_cmInstr.h **** /* TI CCS specific functions */
 275:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 276:.././hal/sam3u1c/inc/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 278:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 279:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:.././hal/sam3u1c/inc/core_cmInstr.h **** /* GNU gcc specific functions */
 281:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 282:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  No Operation
 283:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 284:.././hal/sam3u1c/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 286:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 287:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 288:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("nop");
 289:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 290:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 291:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 292:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
 293:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 294:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 295:.././hal/sam3u1c/inc/core_cmInstr.h ****     until one of a number of events occurs.
 296:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 297:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 298:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 299:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("wfi");
 3428              	 .loc 2 299 0
 3429              	 .syntax unified
 3430              	
 3431 0028 30BF     	 wfi
 3432              	
 3433              	 .thumb
 3434              	 .syntax unified
 3435              	.LBE13:
 3436              	.LBE12:
1259:.././hal/sam3u1c/pmc.c **** 		__WFI();
1260:.././hal/sam3u1c/pmc.c **** 	} else {
1261:.././hal/sam3u1c/pmc.c **** 		__WFE();
1262:.././hal/sam3u1c/pmc.c **** 	}
1263:.././hal/sam3u1c/pmc.c **** #endif
1264:.././hal/sam3u1c/pmc.c **** }
 3437              	 .loc 1 1264 0
 3438 002a 00E0     	 b .L251
 3439              	.L249:
 3440              	.LBB14:
 3441              	.LBB15:
 300:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 301:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 302:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 303:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Event
 304:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 305:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 306:.././hal/sam3u1c/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 307:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 308:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 309:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 310:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("wfe");
 3442              	 .loc 2 310 0
 3443              	 .syntax unified
 3444              	
 3445 002c 20BF     	 wfe
 3446              	
 3447              	 .thumb
 3448              	 .syntax unified
 3449              	.L251:
 3450              	.LBE15:
 3451              	.LBE14:
 3452              	 .loc 1 1264 0
 3453 002e 00BF     	 nop
 3454 0030 0C37     	 adds r7,r7,#12
 3455              	.LCFI268:
 3456              	 .cfi_def_cfa_offset 4
 3457 0032 BD46     	 mov sp,r7
 3458              	.LCFI269:
 3459              	 .cfi_def_cfa_register 13
 3460              	 
 3461 0034 80BC     	 pop {r7}
 3462              	.LCFI270:
 3463              	 .cfi_restore 7
 3464              	 .cfi_def_cfa_offset 0
 3465 0036 7047     	 bx lr
 3466              	.L253:
 3467              	 .align 2
 3468              	.L252:
 3469 0038 00040E40 	 .word 1074660352
 3470 003c 00ED00E0 	 .word -536810240
 3471              	 .cfi_endproc
 3472              	.LFE117:
 3474              	 .section .text.pmc_enable_waitmode,"ax",%progbits
 3475              	 .align 1
 3476              	 .global pmc_enable_waitmode
 3477              	 .syntax unified
 3478              	 .thumb
 3479              	 .thumb_func
 3480              	 .fpu softvfp
 3482              	pmc_enable_waitmode:
 3483              	.LFB118:
1265:.././hal/sam3u1c/pmc.c **** #endif
1266:.././hal/sam3u1c/pmc.c **** 
1267:.././hal/sam3u1c/pmc.c **** #if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAMG || SAM4CP)
1268:.././hal/sam3u1c/pmc.c **** static uint32_t ul_flash_in_wait_mode = PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN;
1269:.././hal/sam3u1c/pmc.c **** /**
1270:.././hal/sam3u1c/pmc.c ****  * \brief Set the embedded flash state in wait mode
1271:.././hal/sam3u1c/pmc.c ****  *
1272:.././hal/sam3u1c/pmc.c ****  * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
1273:.././hal/sam3u1c/pmc.c ****  * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
1274:.././hal/sam3u1c/pmc.c ****  */
1275:.././hal/sam3u1c/pmc.c **** void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
1276:.././hal/sam3u1c/pmc.c **** {
1277:.././hal/sam3u1c/pmc.c **** 	ul_flash_in_wait_mode = ul_flash_state;
1278:.././hal/sam3u1c/pmc.c **** }
1279:.././hal/sam3u1c/pmc.c **** 
1280:.././hal/sam3u1c/pmc.c **** /**
1281:.././hal/sam3u1c/pmc.c ****  * \brief Enable Wait Mode. Enter condition: (WAITMODE bit = 1) +
1282:.././hal/sam3u1c/pmc.c ****  * (SLEEPDEEP bit = 0) + FLPM
1283:.././hal/sam3u1c/pmc.c ****  *
1284:.././hal/sam3u1c/pmc.c ****  * \note In this function the FWS is reset to 0 to get best flash access
1285:.././hal/sam3u1c/pmc.c ****  * performance while running on fast wake up RC clock. Make sure the
1286:.././hal/sam3u1c/pmc.c ****  * non-zero FWS value is saved before invoking this function, and restored
1287:.././hal/sam3u1c/pmc.c ****  * after system woken up, to avoid flash access error.
1288:.././hal/sam3u1c/pmc.c ****  * See \ref pmc_sleep() for entering different sleep modes.
1289:.././hal/sam3u1c/pmc.c ****  */
1290:.././hal/sam3u1c/pmc.c **** void pmc_enable_waitmode(void)
1291:.././hal/sam3u1c/pmc.c **** {
1292:.././hal/sam3u1c/pmc.c **** 	uint32_t i;
1293:.././hal/sam3u1c/pmc.c **** 
1294:.././hal/sam3u1c/pmc.c **** 	/* Flash in wait mode */
1295:.././hal/sam3u1c/pmc.c **** 	i = PMC->PMC_FSMR;
1296:.././hal/sam3u1c/pmc.c **** 	i &= ~PMC_FSMR_FLPM_Msk;
1297:.././hal/sam3u1c/pmc.c **** 	i |= ul_flash_in_wait_mode;
1298:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR = i;
1299:.././hal/sam3u1c/pmc.c **** 
1300:.././hal/sam3u1c/pmc.c **** 	/* Clear SLEEPDEEP bit */
1301:.././hal/sam3u1c/pmc.c **** 	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk;
1302:.././hal/sam3u1c/pmc.c **** 
1303:.././hal/sam3u1c/pmc.c **** 	/* Set the WAITMODE bit = 1 */
1304:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
1305:.././hal/sam3u1c/pmc.c **** 
1306:.././hal/sam3u1c/pmc.c **** 	/* Waiting for Master Clock Ready MCKRDY = 1 */
1307:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
1308:.././hal/sam3u1c/pmc.c **** 
1309:.././hal/sam3u1c/pmc.c **** 	/* Waiting for MOSCRCEN bit cleared is strongly recommended
1310:.././hal/sam3u1c/pmc.c **** 	 * to ensure that the core will not execute undesired instructions
1311:.././hal/sam3u1c/pmc.c **** 	 */
1312:.././hal/sam3u1c/pmc.c **** 	for (i = 0; i < 500; i++) {
1313:.././hal/sam3u1c/pmc.c **** 		__NOP();
1314:.././hal/sam3u1c/pmc.c **** 	}
1315:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
1316:.././hal/sam3u1c/pmc.c **** 
1317:.././hal/sam3u1c/pmc.c **** #if (!SAMG)
1318:.././hal/sam3u1c/pmc.c **** 	/* Restore Flash in idle mode */
1319:.././hal/sam3u1c/pmc.c **** 	i = PMC->PMC_FSMR;
1320:.././hal/sam3u1c/pmc.c **** 	i &= ~PMC_FSMR_FLPM_Msk;
1321:.././hal/sam3u1c/pmc.c **** 	i |= PMC_WAIT_MODE_FLASH_IDLE;
1322:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR = i;
1323:.././hal/sam3u1c/pmc.c **** #endif
1324:.././hal/sam3u1c/pmc.c **** }
1325:.././hal/sam3u1c/pmc.c **** #else
1326:.././hal/sam3u1c/pmc.c **** /**
1327:.././hal/sam3u1c/pmc.c ****  * \brief Enable Wait Mode. Enter condition: WFE + (SLEEPDEEP bit = 0) +
1328:.././hal/sam3u1c/pmc.c ****  * (LPM bit = 1)
1329:.././hal/sam3u1c/pmc.c ****  */
1330:.././hal/sam3u1c/pmc.c **** void pmc_enable_waitmode(void)
1331:.././hal/sam3u1c/pmc.c **** {
 3484              	 .loc 1 1331 0
 3485              	 .cfi_startproc
 3486              	 
 3487              	 
 3488              	 
 3489 0000 80B4     	 push {r7}
 3490              	.LCFI271:
 3491              	 .cfi_def_cfa_offset 4
 3492              	 .cfi_offset 7,-4
 3493 0002 83B0     	 sub sp,sp,#12
 3494              	.LCFI272:
 3495              	 .cfi_def_cfa_offset 16
 3496 0004 00AF     	 add r7,sp,#0
 3497              	.LCFI273:
 3498              	 .cfi_def_cfa_register 7
1332:.././hal/sam3u1c/pmc.c **** 	uint32_t i;
1333:.././hal/sam3u1c/pmc.c **** 
1334:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
 3499              	 .loc 1 1334 0
 3500 0006 124A     	 ldr r2,.L258
 3501 0008 114B     	 ldr r3,.L258
 3502 000a 1B6F     	 ldr r3,[r3,#112]
 3503 000c 43F48013 	 orr r3,r3,#1048576
 3504 0010 1367     	 str r3,[r2,#112]
1335:.././hal/sam3u1c/pmc.c **** 	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
 3505              	 .loc 1 1335 0
 3506 0012 104A     	 ldr r2,.L258+4
 3507 0014 0F4B     	 ldr r3,.L258+4
 3508 0016 1B69     	 ldr r3,[r3,#16]
 3509 0018 23F00403 	 bic r3,r3,#4
 3510 001c 1361     	 str r3,[r2,#16]
 3511              	.LBB16:
 3512              	.LBB17:
 3513              	 .loc 2 310 0
 3514              	 .syntax unified
 3515              	
 3516 001e 20BF     	 wfe
 3517              	
 3518              	 .thumb
 3519              	 .syntax unified
 3520              	.LBE17:
 3521              	.LBE16:
1336:.././hal/sam3u1c/pmc.c **** 
1337:.././hal/sam3u1c/pmc.c **** 	__WFE();
1338:.././hal/sam3u1c/pmc.c **** 
1339:.././hal/sam3u1c/pmc.c **** 	/* Waiting for MOSCRCEN bit cleared is strongly recommended
1340:.././hal/sam3u1c/pmc.c **** 	 * to ensure that the core will not execute undesired instructions
1341:.././hal/sam3u1c/pmc.c **** 	 */
1342:.././hal/sam3u1c/pmc.c **** 	for (i = 0; i < 500; i++) {
 3522              	 .loc 1 1342 0
 3523 0020 0023     	 movs r3,#0
 3524 0022 7B60     	 str r3,[r7,#4]
 3525 0024 03E0     	 b .L255
 3526              	.L256:
 3527              	.LBB18:
 3528              	.LBB19:
 288:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 3529              	 .loc 2 288 0 discriminator 3
 3530              	 .syntax unified
 3531              	
 3532 0026 00BF     	 nop
 3533              	
 3534              	 .thumb
 3535              	 .syntax unified
 3536              	.LBE19:
 3537              	.LBE18:
 3538              	 .loc 1 1342 0 discriminator 3
 3539 0028 7B68     	 ldr r3,[r7,#4]
 3540 002a 0133     	 adds r3,r3,#1
 3541 002c 7B60     	 str r3,[r7,#4]
 3542              	.L255:
 3543              	 .loc 1 1342 0 is_stmt 0 discriminator 1
 3544 002e 7B68     	 ldr r3,[r7,#4]
 3545 0030 B3F5FA7F 	 cmp r3,#500
 3546 0034 F7D3     	 bcc .L256
1343:.././hal/sam3u1c/pmc.c **** 		__NOP();
1344:.././hal/sam3u1c/pmc.c **** 	}
1345:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
 3547              	 .loc 1 1345 0 is_stmt 1
 3548 0036 00BF     	 nop
 3549              	.L257:
 3550              	 .loc 1 1345 0 is_stmt 0 discriminator 1
 3551 0038 054B     	 ldr r3,.L258
 3552 003a 1B6A     	 ldr r3,[r3,#32]
 3553 003c 03F00803 	 and r3,r3,#8
 3554 0040 002B     	 cmp r3,#0
 3555 0042 F9D0     	 beq .L257
1346:.././hal/sam3u1c/pmc.c **** 
1347:.././hal/sam3u1c/pmc.c **** }
 3556              	 .loc 1 1347 0 is_stmt 1
 3557 0044 00BF     	 nop
 3558 0046 0C37     	 adds r7,r7,#12
 3559              	.LCFI274:
 3560              	 .cfi_def_cfa_offset 4
 3561 0048 BD46     	 mov sp,r7
 3562              	.LCFI275:
 3563              	 .cfi_def_cfa_register 13
 3564              	 
 3565 004a 80BC     	 pop {r7}
 3566              	.LCFI276:
 3567              	 .cfi_restore 7
 3568              	 .cfi_def_cfa_offset 0
 3569 004c 7047     	 bx lr
 3570              	.L259:
 3571 004e 00BF     	 .align 2
 3572              	.L258:
 3573 0050 00040E40 	 .word 1074660352
 3574 0054 00ED00E0 	 .word -536810240
 3575              	 .cfi_endproc
 3576              	.LFE118:
 3578              	 .section .text.pmc_enable_backupmode,"ax",%progbits
 3579              	 .align 1
 3580              	 .global pmc_enable_backupmode
 3581              	 .syntax unified
 3582              	 .thumb
 3583              	 .thumb_func
 3584              	 .fpu softvfp
 3586              	pmc_enable_backupmode:
 3587              	.LFB119:
1348:.././hal/sam3u1c/pmc.c **** #endif
1349:.././hal/sam3u1c/pmc.c **** 
1350:.././hal/sam3u1c/pmc.c **** #if (!(SAMG51 || SAMG53 || SAMG54))
1351:.././hal/sam3u1c/pmc.c **** /**
1352:.././hal/sam3u1c/pmc.c ****  * \brief Enable Backup Mode. Enter condition: WFE/(VROFF bit = 1) +
1353:.././hal/sam3u1c/pmc.c ****  * (SLEEPDEEP bit = 1)
1354:.././hal/sam3u1c/pmc.c ****  */
1355:.././hal/sam3u1c/pmc.c **** void pmc_enable_backupmode(void)
1356:.././hal/sam3u1c/pmc.c **** {
 3588              	 .loc 1 1356 0
 3589              	 .cfi_startproc
 3590              	 
 3591              	 
 3592              	 
 3593 0000 80B4     	 push {r7}
 3594              	.LCFI277:
 3595              	 .cfi_def_cfa_offset 4
 3596              	 .cfi_offset 7,-4
 3597 0002 00AF     	 add r7,sp,#0
 3598              	.LCFI278:
 3599              	 .cfi_def_cfa_register 7
1357:.././hal/sam3u1c/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP)
1358:.././hal/sam3u1c/pmc.c **** 	uint32_t tmp = SUPC->SUPC_MR & ~(SUPC_MR_BUPPOREN | SUPC_MR_KEY_Msk);
1359:.././hal/sam3u1c/pmc.c **** 	SUPC->SUPC_MR = tmp | SUPC_MR_KEY_PASSWD;
1360:.././hal/sam3u1c/pmc.c **** 	while (SUPC->SUPC_SR & SUPC_SR_BUPPORS);
1361:.././hal/sam3u1c/pmc.c **** #endif
1362:.././hal/sam3u1c/pmc.c **** 	SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 3600              	 .loc 1 1362 0
 3601 0004 054A     	 ldr r2,.L261
 3602 0006 054B     	 ldr r3,.L261
 3603 0008 1B69     	 ldr r3,[r3,#16]
 3604 000a 43F00403 	 orr r3,r3,#4
 3605 000e 1361     	 str r3,[r2,#16]
 3606              	.LBB20:
 3607              	.LBB21:
 3608              	 .loc 2 310 0
 3609              	 .syntax unified
 3610              	
 3611 0010 20BF     	 wfe
 3612              	
 3613              	 .thumb
 3614              	 .syntax unified
 3615              	.LBE21:
 3616              	.LBE20:
1363:.././hal/sam3u1c/pmc.c **** #if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
1364:.././hal/sam3u1c/pmc.c **** 	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
1365:.././hal/sam3u1c/pmc.c **** 	__WFE();
1366:.././hal/sam3u1c/pmc.c **** 	__WFI();
1367:.././hal/sam3u1c/pmc.c **** #else
1368:.././hal/sam3u1c/pmc.c **** 	__WFE();
1369:.././hal/sam3u1c/pmc.c **** #endif
1370:.././hal/sam3u1c/pmc.c **** }
 3617              	 .loc 1 1370 0
 3618 0012 00BF     	 nop
 3619 0014 BD46     	 mov sp,r7
 3620              	.LCFI279:
 3621              	 .cfi_def_cfa_register 13
 3622              	 
 3623 0016 80BC     	 pop {r7}
 3624              	.LCFI280:
 3625              	 .cfi_restore 7
 3626              	 .cfi_def_cfa_offset 0
 3627 0018 7047     	 bx lr
 3628              	.L262:
 3629 001a 00BF     	 .align 2
 3630              	.L261:
 3631 001c 00ED00E0 	 .word -536810240
 3632              	 .cfi_endproc
 3633              	.LFE119:
 3635              	 .section .text.pmc_enable_clock_failure_detector,"ax",%progbits
 3636              	 .align 1
 3637              	 .global pmc_enable_clock_failure_detector
 3638              	 .syntax unified
 3639              	 .thumb
 3640              	 .thumb_func
 3641              	 .fpu softvfp
 3643              	pmc_enable_clock_failure_detector:
 3644              	.LFB120:
1371:.././hal/sam3u1c/pmc.c **** #endif
1372:.././hal/sam3u1c/pmc.c **** 
1373:.././hal/sam3u1c/pmc.c **** /**
1374:.././hal/sam3u1c/pmc.c ****  * \brief Enable Clock Failure Detector.
1375:.././hal/sam3u1c/pmc.c ****  */
1376:.././hal/sam3u1c/pmc.c **** void pmc_enable_clock_failure_detector(void)
1377:.././hal/sam3u1c/pmc.c **** {
 3645              	 .loc 1 1377 0
 3646              	 .cfi_startproc
 3647              	 
 3648              	 
 3649              	 
 3650 0000 80B4     	 push {r7}
 3651              	.LCFI281:
 3652              	 .cfi_def_cfa_offset 4
 3653              	 .cfi_offset 7,-4
 3654 0002 83B0     	 sub sp,sp,#12
 3655              	.LCFI282:
 3656              	 .cfi_def_cfa_offset 16
 3657 0004 00AF     	 add r7,sp,#0
 3658              	.LCFI283:
 3659              	 .cfi_def_cfa_register 7
1378:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR;
 3660              	 .loc 1 1378 0
 3661 0006 074B     	 ldr r3,.L264
 3662 0008 1B6A     	 ldr r3,[r3,#32]
 3663 000a 7B60     	 str r3,[r7,#4]
1379:.././hal/sam3u1c/pmc.c **** 
1380:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | CKGR_MOR_CFDEN | ul_reg;
 3664              	 .loc 1 1380 0
 3665 000c 054A     	 ldr r2,.L264
 3666 000e 7B68     	 ldr r3,[r7,#4]
 3667 0010 43F00D73 	 orr r3,r3,#36962304
 3668 0014 43F44033 	 orr r3,r3,#196608
 3669 0018 1362     	 str r3,[r2,#32]
1381:.././hal/sam3u1c/pmc.c **** }
 3670              	 .loc 1 1381 0
 3671 001a 00BF     	 nop
 3672 001c 0C37     	 adds r7,r7,#12
 3673              	.LCFI284:
 3674              	 .cfi_def_cfa_offset 4
 3675 001e BD46     	 mov sp,r7
 3676              	.LCFI285:
 3677              	 .cfi_def_cfa_register 13
 3678              	 
 3679 0020 80BC     	 pop {r7}
 3680              	.LCFI286:
 3681              	 .cfi_restore 7
 3682              	 .cfi_def_cfa_offset 0
 3683 0022 7047     	 bx lr
 3684              	.L265:
 3685              	 .align 2
 3686              	.L264:
 3687 0024 00040E40 	 .word 1074660352
 3688              	 .cfi_endproc
 3689              	.LFE120:
 3691              	 .section .text.pmc_disable_clock_failure_detector,"ax",%progbits
 3692              	 .align 1
 3693              	 .global pmc_disable_clock_failure_detector
 3694              	 .syntax unified
 3695              	 .thumb
 3696              	 .thumb_func
 3697              	 .fpu softvfp
 3699              	pmc_disable_clock_failure_detector:
 3700              	.LFB121:
1382:.././hal/sam3u1c/pmc.c **** 
1383:.././hal/sam3u1c/pmc.c **** /**
1384:.././hal/sam3u1c/pmc.c ****  * \brief Disable Clock Failure Detector.
1385:.././hal/sam3u1c/pmc.c ****  */
1386:.././hal/sam3u1c/pmc.c **** void pmc_disable_clock_failure_detector(void)
1387:.././hal/sam3u1c/pmc.c **** {
 3701              	 .loc 1 1387 0
 3702              	 .cfi_startproc
 3703              	 
 3704              	 
 3705              	 
 3706 0000 80B4     	 push {r7}
 3707              	.LCFI287:
 3708              	 .cfi_def_cfa_offset 4
 3709              	 .cfi_offset 7,-4
 3710 0002 83B0     	 sub sp,sp,#12
 3711              	.LCFI288:
 3712              	 .cfi_def_cfa_offset 16
 3713 0004 00AF     	 add r7,sp,#0
 3714              	.LCFI289:
 3715              	 .cfi_def_cfa_register 7
1388:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR & (~CKGR_MOR_CFDEN);
 3716              	 .loc 1 1388 0
 3717 0006 074B     	 ldr r3,.L267
 3718 0008 1B6A     	 ldr r3,[r3,#32]
 3719 000a 23F00073 	 bic r3,r3,#33554432
 3720 000e 7B60     	 str r3,[r7,#4]
1389:.././hal/sam3u1c/pmc.c **** 
1390:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | ul_reg;
 3721              	 .loc 1 1390 0
 3722 0010 044A     	 ldr r2,.L267
 3723 0012 7B68     	 ldr r3,[r7,#4]
 3724 0014 43F45C13 	 orr r3,r3,#3604480
 3725 0018 1362     	 str r3,[r2,#32]
1391:.././hal/sam3u1c/pmc.c **** }
 3726              	 .loc 1 1391 0
 3727 001a 00BF     	 nop
 3728 001c 0C37     	 adds r7,r7,#12
 3729              	.LCFI290:
 3730              	 .cfi_def_cfa_offset 4
 3731 001e BD46     	 mov sp,r7
 3732              	.LCFI291:
 3733              	 .cfi_def_cfa_register 13
 3734              	 
 3735 0020 80BC     	 pop {r7}
 3736              	.LCFI292:
 3737              	 .cfi_restore 7
 3738              	 .cfi_def_cfa_offset 0
 3739 0022 7047     	 bx lr
 3740              	.L268:
 3741              	 .align 2
 3742              	.L267:
 3743 0024 00040E40 	 .word 1074660352
 3744              	 .cfi_endproc
 3745              	.LFE121:
 3747              	 .section .text.pmc_set_writeprotect,"ax",%progbits
 3748              	 .align 1
 3749              	 .global pmc_set_writeprotect
 3750              	 .syntax unified
 3751              	 .thumb
 3752              	 .thumb_func
 3753              	 .fpu softvfp
 3755              	pmc_set_writeprotect:
 3756              	.LFB122:
1392:.././hal/sam3u1c/pmc.c **** 
1393:.././hal/sam3u1c/pmc.c **** #if (SAM4N || SAM4C || SAM4CM || SAM4CP)
1394:.././hal/sam3u1c/pmc.c **** /**
1395:.././hal/sam3u1c/pmc.c ****  * \brief Enable Slow Crystal Oscillator Frequency Monitoring.
1396:.././hal/sam3u1c/pmc.c ****  */
1397:.././hal/sam3u1c/pmc.c **** void pmc_enable_sclk_osc_freq_monitor(void)
1398:.././hal/sam3u1c/pmc.c **** {
1399:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR;
1400:.././hal/sam3u1c/pmc.c **** 
1401:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | CKGR_MOR_XT32KFME | ul_reg;
1402:.././hal/sam3u1c/pmc.c **** }
1403:.././hal/sam3u1c/pmc.c **** 
1404:.././hal/sam3u1c/pmc.c **** /**
1405:.././hal/sam3u1c/pmc.c ****  * \brief Disable Slow Crystal Oscillator Frequency Monitoring.
1406:.././hal/sam3u1c/pmc.c ****  */
1407:.././hal/sam3u1c/pmc.c **** void pmc_disable_sclk_osc_freq_monitor(void)
1408:.././hal/sam3u1c/pmc.c **** {
1409:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR & (~CKGR_MOR_XT32KFME);
1410:.././hal/sam3u1c/pmc.c **** 
1411:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | ul_reg;
1412:.././hal/sam3u1c/pmc.c **** }
1413:.././hal/sam3u1c/pmc.c **** #endif
1414:.././hal/sam3u1c/pmc.c **** 
1415:.././hal/sam3u1c/pmc.c **** /**
1416:.././hal/sam3u1c/pmc.c ****  * \brief Enable or disable write protect of PMC registers.
1417:.././hal/sam3u1c/pmc.c ****  *
1418:.././hal/sam3u1c/pmc.c ****  * \param ul_enable 1 to enable, 0 to disable.
1419:.././hal/sam3u1c/pmc.c ****  */
1420:.././hal/sam3u1c/pmc.c **** void pmc_set_writeprotect(uint32_t ul_enable)
1421:.././hal/sam3u1c/pmc.c **** {
 3757              	 .loc 1 1421 0
 3758              	 .cfi_startproc
 3759              	 
 3760              	 
 3761              	 
 3762 0000 80B4     	 push {r7}
 3763              	.LCFI293:
 3764              	 .cfi_def_cfa_offset 4
 3765              	 .cfi_offset 7,-4
 3766 0002 83B0     	 sub sp,sp,#12
 3767              	.LCFI294:
 3768              	 .cfi_def_cfa_offset 16
 3769 0004 00AF     	 add r7,sp,#0
 3770              	.LCFI295:
 3771              	 .cfi_def_cfa_register 7
 3772 0006 7860     	 str r0,[r7,#4]
1422:.././hal/sam3u1c/pmc.c **** 	if (ul_enable) {
 3773              	 .loc 1 1422 0
 3774 0008 7B68     	 ldr r3,[r7,#4]
 3775 000a 002B     	 cmp r3,#0
 3776 000c 04D0     	 beq .L270
1423:.././hal/sam3u1c/pmc.c **** 		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD | PMC_WPMR_WPEN;
 3777              	 .loc 1 1423 0
 3778 000e 074B     	 ldr r3,.L273
 3779 0010 074A     	 ldr r2,.L273+4
 3780 0012 C3F8E420 	 str r2,[r3,#228]
1424:.././hal/sam3u1c/pmc.c **** 	} else {
1425:.././hal/sam3u1c/pmc.c **** 		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD;
1426:.././hal/sam3u1c/pmc.c **** 	}
1427:.././hal/sam3u1c/pmc.c **** }
 3781              	 .loc 1 1427 0
 3782 0016 03E0     	 b .L272
 3783              	.L270:
1425:.././hal/sam3u1c/pmc.c **** 	}
 3784              	 .loc 1 1425 0
 3785 0018 044B     	 ldr r3,.L273
 3786 001a 064A     	 ldr r2,.L273+8
 3787 001c C3F8E420 	 str r2,[r3,#228]
 3788              	.L272:
 3789              	 .loc 1 1427 0
 3790 0020 00BF     	 nop
 3791 0022 0C37     	 adds r7,r7,#12
 3792              	.LCFI296:
 3793              	 .cfi_def_cfa_offset 4
 3794 0024 BD46     	 mov sp,r7
 3795              	.LCFI297:
 3796              	 .cfi_def_cfa_register 13
 3797              	 
 3798 0026 80BC     	 pop {r7}
 3799              	.LCFI298:
 3800              	 .cfi_restore 7
 3801              	 .cfi_def_cfa_offset 0
 3802 0028 7047     	 bx lr
 3803              	.L274:
 3804 002a 00BF     	 .align 2
 3805              	.L273:
 3806 002c 00040E40 	 .word 1074660352
 3807 0030 01434D50 	 .word 1347240705
 3808 0034 00434D50 	 .word 1347240704
 3809              	 .cfi_endproc
 3810              	.LFE122:
 3812              	 .section .text.pmc_get_writeprotect_status,"ax",%progbits
 3813              	 .align 1
 3814              	 .global pmc_get_writeprotect_status
 3815              	 .syntax unified
 3816              	 .thumb
 3817              	 .thumb_func
 3818              	 .fpu softvfp
 3820              	pmc_get_writeprotect_status:
 3821              	.LFB123:
1428:.././hal/sam3u1c/pmc.c **** 
1429:.././hal/sam3u1c/pmc.c **** /**
1430:.././hal/sam3u1c/pmc.c ****  * \brief Return write protect status.
1431:.././hal/sam3u1c/pmc.c ****  *
1432:.././hal/sam3u1c/pmc.c ****  * \retval 0 Protection disabled.
1433:.././hal/sam3u1c/pmc.c ****  * \retval 1 Protection enabled.
1434:.././hal/sam3u1c/pmc.c ****  */
1435:.././hal/sam3u1c/pmc.c **** uint32_t pmc_get_writeprotect_status(void)
1436:.././hal/sam3u1c/pmc.c **** {
 3822              	 .loc 1 1436 0
 3823              	 .cfi_startproc
 3824              	 
 3825              	 
 3826              	 
 3827 0000 80B4     	 push {r7}
 3828              	.LCFI299:
 3829              	 .cfi_def_cfa_offset 4
 3830              	 .cfi_offset 7,-4
 3831 0002 00AF     	 add r7,sp,#0
 3832              	.LCFI300:
 3833              	 .cfi_def_cfa_register 7
1437:.././hal/sam3u1c/pmc.c **** 	return PMC->PMC_WPMR & PMC_WPMR_WPEN;
 3834              	 .loc 1 1437 0
 3835 0004 044B     	 ldr r3,.L277
 3836 0006 D3F8E430 	 ldr r3,[r3,#228]
 3837 000a 03F00103 	 and r3,r3,#1
1438:.././hal/sam3u1c/pmc.c **** }
 3838              	 .loc 1 1438 0
 3839 000e 1846     	 mov r0,r3
 3840 0010 BD46     	 mov sp,r7
 3841              	.LCFI301:
 3842              	 .cfi_def_cfa_register 13
 3843              	 
 3844 0012 80BC     	 pop {r7}
 3845              	.LCFI302:
 3846              	 .cfi_restore 7
 3847              	 .cfi_def_cfa_offset 0
 3848 0014 7047     	 bx lr
 3849              	.L278:
 3850 0016 00BF     	 .align 2
 3851              	.L277:
 3852 0018 00040E40 	 .word 1074660352
 3853              	 .cfi_endproc
 3854              	.LFE123:
 3856              	 .text
 3857              	.Letext0:
 3858              	 .file 3 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 3859              	 .file 4 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 3860              	 .file 5 ".././hal/sam3u1c/inc/sam3u1c.h"
 3861              	 .file 6 ".././hal/sam3u1c/inc/core_cm3.h"
 3862              	 .file 7 ".././hal/sam3u1c/inc/system_sam3u.h"
 3863              	 .file 8 ".././hal/sam3u1c/inc/component/component_pmc.h"
 3864              	 .file 9 ".././hal/sam3u1c/inc/component/component_supc.h"
 3865              	 .file 10 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\lock.h"
 3866              	 .file 11 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_types.h"
 3867              	 .file 12 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 3868              	 .file 13 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\reent.h"
 3869              	 .file 14 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\stdlib.h"
 3870              	 .file 15 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pmc.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:27     .text.pmc_mck_set_prescaler:00000000 $t
    {standard input}:34     .text.pmc_mck_set_prescaler:00000000 pmc_mck_set_prescaler
    {standard input}:89     .text.pmc_mck_set_prescaler:00000030 $d
    {standard input}:94     .text.pmc_mck_set_source:00000000 $t
    {standard input}:101    .text.pmc_mck_set_source:00000000 pmc_mck_set_source
    {standard input}:155    .text.pmc_mck_set_source:00000030 $d
    {standard input}:160    .text.pmc_switch_mck_to_sclk:00000000 $t
    {standard input}:167    .text.pmc_switch_mck_to_sclk:00000000 pmc_switch_mck_to_sclk
    {standard input}:267    .text.pmc_switch_mck_to_sclk:00000078 $d
    {standard input}:272    .text.pmc_switch_mck_to_mainck:00000000 $t
    {standard input}:279    .text.pmc_switch_mck_to_mainck:00000000 pmc_switch_mck_to_mainck
    {standard input}:380    .text.pmc_switch_mck_to_mainck:0000007c $d
    {standard input}:385    .text.pmc_switch_mck_to_pllack:00000000 $t
    {standard input}:392    .text.pmc_switch_mck_to_pllack:00000000 pmc_switch_mck_to_pllack
    {standard input}:493    .text.pmc_switch_mck_to_pllack:0000007c $d
    {standard input}:498    .text.pmc_switch_mck_to_upllck:00000000 $t
    {standard input}:505    .text.pmc_switch_mck_to_upllck:00000000 pmc_switch_mck_to_upllck
    {standard input}:605    .text.pmc_switch_mck_to_upllck:00000078 $d
    {standard input}:610    .text.pmc_switch_sclk_to_32kxtal:00000000 $t
    {standard input}:617    .text.pmc_switch_sclk_to_32kxtal:00000000 pmc_switch_sclk_to_32kxtal
    {standard input}:668    .text.pmc_switch_sclk_to_32kxtal:00000030 $d
    {standard input}:674    .text.pmc_osc_is_ready_32kxtal:00000000 $t
    {standard input}:681    .text.pmc_osc_is_ready_32kxtal:00000000 pmc_osc_is_ready_32kxtal
    {standard input}:729    .text.pmc_osc_is_ready_32kxtal:0000002c $d
    {standard input}:735    .text.pmc_switch_mainck_to_fastrc:00000000 $t
    {standard input}:742    .text.pmc_switch_mainck_to_fastrc:00000000 pmc_switch_mainck_to_fastrc
    {standard input}:822    .text.pmc_switch_mainck_to_fastrc:0000006c $d
    {standard input}:827    .text.pmc_osc_enable_fastrc:00000000 $t
    {standard input}:834    .text.pmc_osc_enable_fastrc:00000000 pmc_osc_enable_fastrc
    {standard input}:906    .text.pmc_osc_enable_fastrc:00000058 $d
    {standard input}:911    .text.pmc_osc_disable_fastrc:00000000 $t
    {standard input}:918    .text.pmc_osc_disable_fastrc:00000000 pmc_osc_disable_fastrc
    {standard input}:956    .text.pmc_osc_disable_fastrc:00000020 $d
    {standard input}:961    .text.pmc_osc_is_ready_fastrc:00000000 $t
    {standard input}:968    .text.pmc_osc_is_ready_fastrc:00000000 pmc_osc_is_ready_fastrc
    {standard input}:1000   .text.pmc_osc_is_ready_fastrc:00000014 $d
    {standard input}:1005   .text.pmc_osc_enable_main_xtal:00000000 $t
    {standard input}:1012   .text.pmc_osc_enable_main_xtal:00000000 pmc_osc_enable_main_xtal
    {standard input}:1078   .text.pmc_osc_enable_main_xtal:00000048 $d
    {standard input}:1083   .text.pmc_osc_bypass_main_xtal:00000000 $t
    {standard input}:1090   .text.pmc_osc_bypass_main_xtal:00000000 pmc_osc_bypass_main_xtal
    {standard input}:1141   .text.pmc_osc_bypass_main_xtal:00000030 $d
    {standard input}:1146   .text.pmc_osc_disable_main_xtal:00000000 $t
    {standard input}:1153   .text.pmc_osc_disable_main_xtal:00000000 pmc_osc_disable_main_xtal
    {standard input}:1200   .text.pmc_osc_disable_main_xtal:00000028 $d
    {standard input}:1205   .text.pmc_osc_is_bypassed_main_xtal:00000000 $t
    {standard input}:1212   .text.pmc_osc_is_bypassed_main_xtal:00000000 pmc_osc_is_bypassed_main_xtal
    {standard input}:1244   .text.pmc_osc_is_bypassed_main_xtal:00000014 $d
    {standard input}:1249   .text.pmc_osc_is_ready_main_xtal:00000000 $t
    {standard input}:1256   .text.pmc_osc_is_ready_main_xtal:00000000 pmc_osc_is_ready_main_xtal
    {standard input}:1288   .text.pmc_osc_is_ready_main_xtal:00000014 $d
    {standard input}:1293   .text.pmc_switch_mainck_to_xtal:00000000 $t
    {standard input}:1300   .text.pmc_switch_mainck_to_xtal:00000000 pmc_switch_mainck_to_xtal
    {standard input}:1388   .text.pmc_switch_mainck_to_xtal:0000006c $d
    {standard input}:1395   .text.pmc_osc_disable_xtal:00000000 $t
    {standard input}:1402   .text.pmc_osc_disable_xtal:00000000 pmc_osc_disable_xtal
    {standard input}:1461   .text.pmc_osc_disable_xtal:00000044 $d
    {standard input}:1466   .text.pmc_osc_is_ready_mainck:00000000 $t
    {standard input}:1473   .text.pmc_osc_is_ready_mainck:00000000 pmc_osc_is_ready_mainck
    {standard input}:1505   .text.pmc_osc_is_ready_mainck:00000014 $d
    {standard input}:1510   .text.pmc_mainck_osc_select:00000000 $t
    {standard input}:1517   .text.pmc_mainck_osc_select:00000000 pmc_mainck_osc_select
    {standard input}:1576   .text.pmc_mainck_osc_select:0000003c $d
    {standard input}:1581   .text.pmc_enable_pllack:00000000 $t
    {standard input}:1588   .text.pmc_enable_pllack:00000000 pmc_enable_pllack
    {standard input}:1653   .text.pmc_enable_pllack:00000048 $d
    {standard input}:1667   .text.pmc_disable_pllack:00000000 pmc_disable_pllack
    {standard input}:1660   .text.pmc_disable_pllack:00000000 $t
    {standard input}:1699   .text.pmc_disable_pllack:00000014 $d
    {standard input}:1704   .text.pmc_is_locked_pllack:00000000 $t
    {standard input}:1711   .text.pmc_is_locked_pllack:00000000 pmc_is_locked_pllack
    {standard input}:1743   .text.pmc_is_locked_pllack:00000014 $d
    {standard input}:1748   .text.pmc_enable_upll_clock:00000000 $t
    {standard input}:1755   .text.pmc_enable_upll_clock:00000000 pmc_enable_upll_clock
    {standard input}:1796   .text.pmc_enable_upll_clock:00000024 $d
    {standard input}:1801   .text.pmc_disable_upll_clock:00000000 $t
    {standard input}:1808   .text.pmc_disable_upll_clock:00000000 pmc_disable_upll_clock
    {standard input}:1842   .text.pmc_disable_upll_clock:00000018 $d
    {standard input}:1847   .text.pmc_is_locked_upll:00000000 $t
    {standard input}:1854   .text.pmc_is_locked_upll:00000000 pmc_is_locked_upll
    {standard input}:1886   .text.pmc_is_locked_upll:00000014 $d
    {standard input}:1891   .text.pmc_enable_periph_clk:00000000 $t
    {standard input}:1898   .text.pmc_enable_periph_clk:00000000 pmc_enable_periph_clk
    {standard input}:1967   .text.pmc_enable_periph_clk:0000004c $d
    {standard input}:1972   .text.pmc_disable_periph_clk:00000000 $t
    {standard input}:1979   .text.pmc_disable_periph_clk:00000000 pmc_disable_periph_clk
    {standard input}:2048   .text.pmc_disable_periph_clk:0000004c $d
    {standard input}:2053   .text.pmc_enable_all_periph_clk:00000000 $t
    {standard input}:2060   .text.pmc_enable_all_periph_clk:00000000 pmc_enable_all_periph_clk
    {standard input}:2101   .text.pmc_enable_all_periph_clk:00000024 $d
    {standard input}:2106   .text.pmc_disable_all_periph_clk:00000000 $t
    {standard input}:2113   .text.pmc_disable_all_periph_clk:00000000 pmc_disable_all_periph_clk
    {standard input}:2154   .text.pmc_disable_all_periph_clk:00000024 $d
    {standard input}:2159   .text.pmc_is_periph_clk_enabled:00000000 $t
    {standard input}:2166   .text.pmc_is_periph_clk_enabled:00000000 pmc_is_periph_clk_enabled
    {standard input}:2225   .text.pmc_is_periph_clk_enabled:00000034 $d
    {standard input}:2230   .text.pmc_pck_set_prescaler:00000000 $t
    {standard input}:2237   .text.pmc_pck_set_prescaler:00000000 pmc_pck_set_prescaler
    {standard input}:2308   .text.pmc_pck_set_prescaler:0000005c $d
    {standard input}:2313   .text.pmc_pck_set_source:00000000 $t
    {standard input}:2320   .text.pmc_pck_set_source:00000000 pmc_pck_set_source
    {standard input}:2391   .text.pmc_pck_set_source:0000005c $d
    {standard input}:2396   .text.pmc_switch_pck_to_sclk:00000000 $t
    {standard input}:2403   .text.pmc_switch_pck_to_sclk:00000000 pmc_switch_pck_to_sclk
    {standard input}:2475   .text.pmc_switch_pck_to_sclk:00000050 $d
    {standard input}:2480   .text.pmc_switch_pck_to_mainck:00000000 $t
    {standard input}:2487   .text.pmc_switch_pck_to_mainck:00000000 pmc_switch_pck_to_mainck
    {standard input}:2560   .text.pmc_switch_pck_to_mainck:00000054 $d
    {standard input}:2565   .text.pmc_switch_pck_to_pllack:00000000 $t
    {standard input}:2572   .text.pmc_switch_pck_to_pllack:00000000 pmc_switch_pck_to_pllack
    {standard input}:2645   .text.pmc_switch_pck_to_pllack:00000054 $d
    {standard input}:2650   .text.pmc_switch_pck_to_upllck:00000000 $t
    {standard input}:2657   .text.pmc_switch_pck_to_upllck:00000000 pmc_switch_pck_to_upllck
    {standard input}:2731   .text.pmc_switch_pck_to_upllck:00000054 $d
    {standard input}:2736   .text.pmc_switch_pck_to_mck:00000000 $t
    {standard input}:2743   .text.pmc_switch_pck_to_mck:00000000 pmc_switch_pck_to_mck
    {standard input}:2816   .text.pmc_switch_pck_to_mck:00000054 $d
    {standard input}:2821   .text.pmc_enable_pck:00000000 $t
    {standard input}:2828   .text.pmc_enable_pck:00000000 pmc_enable_pck
    {standard input}:2869   .text.pmc_enable_pck:00000020 $d
    {standard input}:2874   .text.pmc_disable_pck:00000000 $t
    {standard input}:2881   .text.pmc_disable_pck:00000000 pmc_disable_pck
    {standard input}:2922   .text.pmc_disable_pck:00000020 $d
    {standard input}:2927   .text.pmc_enable_all_pck:00000000 $t
    {standard input}:2934   .text.pmc_enable_all_pck:00000000 pmc_enable_all_pck
    {standard input}:2966   .text.pmc_enable_all_pck:00000014 $d
    {standard input}:2971   .text.pmc_disable_all_pck:00000000 $t
    {standard input}:2978   .text.pmc_disable_all_pck:00000000 pmc_disable_all_pck
    {standard input}:3010   .text.pmc_disable_all_pck:00000014 $d
    {standard input}:3015   .text.pmc_is_pck_enabled:00000000 $t
    {standard input}:3022   .text.pmc_is_pck_enabled:00000000 pmc_is_pck_enabled
    {standard input}:3073   .text.pmc_is_pck_enabled:0000002c $d
    {standard input}:3078   .text.pmc_enable_interrupt:00000000 $t
    {standard input}:3085   .text.pmc_enable_interrupt:00000000 pmc_enable_interrupt
    {standard input}:3124   .text.pmc_enable_interrupt:00000018 $d
    {standard input}:3129   .text.pmc_disable_interrupt:00000000 $t
    {standard input}:3136   .text.pmc_disable_interrupt:00000000 pmc_disable_interrupt
    {standard input}:3175   .text.pmc_disable_interrupt:00000018 $d
    {standard input}:3180   .text.pmc_get_interrupt_mask:00000000 $t
    {standard input}:3187   .text.pmc_get_interrupt_mask:00000000 pmc_get_interrupt_mask
    {standard input}:3218   .text.pmc_get_interrupt_mask:00000010 $d
    {standard input}:3223   .text.pmc_get_status:00000000 $t
    {standard input}:3230   .text.pmc_get_status:00000000 pmc_get_status
    {standard input}:3261   .text.pmc_get_status:00000010 $d
    {standard input}:3266   .text.pmc_set_fast_startup_input:00000000 $t
    {standard input}:3273   .text.pmc_set_fast_startup_input:00000000 pmc_set_fast_startup_input
    {standard input}:3319   .text.pmc_set_fast_startup_input:00000028 $d
    {standard input}:3324   .text.pmc_clr_fast_startup_input:00000000 $t
    {standard input}:3331   .text.pmc_clr_fast_startup_input:00000000 pmc_clr_fast_startup_input
    {standard input}:3378   .text.pmc_clr_fast_startup_input:00000028 $d
    {standard input}:3383   .text.pmc_enable_sleepmode:00000000 $t
    {standard input}:3390   .text.pmc_enable_sleepmode:00000000 pmc_enable_sleepmode
    {standard input}:3469   .text.pmc_enable_sleepmode:00000038 $d
    {standard input}:3475   .text.pmc_enable_waitmode:00000000 $t
    {standard input}:3482   .text.pmc_enable_waitmode:00000000 pmc_enable_waitmode
    {standard input}:3573   .text.pmc_enable_waitmode:00000050 $d
    {standard input}:3579   .text.pmc_enable_backupmode:00000000 $t
    {standard input}:3586   .text.pmc_enable_backupmode:00000000 pmc_enable_backupmode
    {standard input}:3631   .text.pmc_enable_backupmode:0000001c $d
    {standard input}:3636   .text.pmc_enable_clock_failure_detector:00000000 $t
    {standard input}:3643   .text.pmc_enable_clock_failure_detector:00000000 pmc_enable_clock_failure_detector
    {standard input}:3687   .text.pmc_enable_clock_failure_detector:00000024 $d
    {standard input}:3692   .text.pmc_disable_clock_failure_detector:00000000 $t
    {standard input}:3699   .text.pmc_disable_clock_failure_detector:00000000 pmc_disable_clock_failure_detector
    {standard input}:3743   .text.pmc_disable_clock_failure_detector:00000024 $d
    {standard input}:3748   .text.pmc_set_writeprotect:00000000 $t
    {standard input}:3755   .text.pmc_set_writeprotect:00000000 pmc_set_writeprotect
    {standard input}:3806   .text.pmc_set_writeprotect:0000002c $d
    {standard input}:3813   .text.pmc_get_writeprotect_status:00000000 $t
    {standard input}:3820   .text.pmc_get_writeprotect_status:00000000 pmc_get_writeprotect_status
    {standard input}:3852   .text.pmc_get_writeprotect_status:00000018 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.e23d094898ba82b639bd2bf6d23b6497
                           .group:00000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._newlib_version.h.4.3572908597b70d672d181fc7fc501c19
                           .group:00000000 wm4.features.h.33.863f3be0b2e521e624fcc7d6fa31d2ca
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.newlib.h.8.5f2124c7e712be65f83b91ff86a0b1c1
                           .group:00000000 wm4.config.h.219.65a553ab5bef5482f0d7880b0d33015e
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.cdefs.h.47.776a25dae4205bae6cce27d545bc475b
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.183.c226d164ceca1f2ecb9ae9360c54a098
                           .group:00000000 wm4.reent.h.17.23b059516345f8f5abfa01ddc379570f
                           .group:00000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.30.bbece7fa40993a78092dcc5805132560
                           .group:00000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.8188691c2279eac7a223caa50f6694b9
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.pmc.h.58.e82ab76d364abd9761d4d0905e15fc60

NO UNDEFINED SYMBOLS
