   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "usb.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .section .text.osc_enable,"ax",%progbits
  27              	 .align 1
  28              	 .syntax unified
  29              	 .thumb
  30              	 .thumb_func
  31              	 .fpu softvfp
  33              	osc_enable:
  34              	.LFB67:
  35              	 .file 1 ".././hal/sam3u1c/inc/sam3u/osc.h"
   1:.././hal/sam3u1c/inc/sam3u/osc.h **** /**
   2:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \file
   3:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   4:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \brief Chip-specific oscillator management functions.
   5:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   6:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Copyright (c) 2011 - 2013 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   8:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  10:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \page License
  11:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  12:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sam3u/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  15:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  18:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  22:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  25:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  28:.././hal/sam3u1c/inc/sam3u/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sam3u/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sam3u/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sam3u/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sam3u/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sam3u/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sam3u/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sam3u/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sam3u/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sam3u/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sam3u/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  40:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  42:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  43:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  44:.././hal/sam3u1c/inc/sam3u/osc.h **** #ifndef CHIP_OSC_H_INCLUDED
  45:.././hal/sam3u1c/inc/sam3u/osc.h **** #define CHIP_OSC_H_INCLUDED
  46:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  47:.././hal/sam3u1c/inc/sam3u/osc.h **** #include "board.h"
  48:.././hal/sam3u1c/inc/sam3u/osc.h **** #include "pmc.h"
  49:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  50:.././hal/sam3u1c/inc/sam3u/osc.h **** /// @cond 0
  51:.././hal/sam3u1c/inc/sam3u/osc.h **** /**INDENT-OFF**/
  52:.././hal/sam3u1c/inc/sam3u/osc.h **** #ifdef __cplusplus
  53:.././hal/sam3u1c/inc/sam3u/osc.h **** extern "C" {
  54:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  55:.././hal/sam3u1c/inc/sam3u/osc.h **** /**INDENT-ON**/
  56:.././hal/sam3u1c/inc/sam3u/osc.h **** /// @endcond
  57:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  58:.././hal/sam3u1c/inc/sam3u/osc.h **** /*
  59:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Below BOARD_XXX macros are related to the specific board, and
  60:.././hal/sam3u1c/inc/sam3u/osc.h ****  * should be defined by the board code, otherwise default value are used.
  61:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  62:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_SLCK_XTAL)
  63:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board slow clock xtal frequency has not been defined.
  64:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_SLCK_XTAL      (32768UL)
  65:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  66:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  67:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_SLCK_BYPASS)
  68:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board slow clock bypass frequency has not been defined.
  69:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_SLCK_BYPASS    (32768UL)
  70:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  71:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  72:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_MAINCK_XTAL)
  73:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock xtal frequency has not been defined.
  74:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_MAINCK_XTAL    (12000000UL)
  75:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  76:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  77:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_MAINCK_BYPASS)
  78:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock bypass frequency has not been defined.
  79:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_MAINCK_BYPASS  (12000000UL)
  80:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  81:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  82:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_OSC_STARTUP_US)
  83:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock xtal startup time has not been defined.
  84:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_OSC_STARTUP_US      (15625UL)
  85:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  86:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  87:.././hal/sam3u1c/inc/sam3u/osc.h **** /**
  88:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \weakgroup osc_group
  89:.././hal/sam3u1c/inc/sam3u/osc.h ****  * @{
  90:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  91:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  92:.././hal/sam3u1c/inc/sam3u/osc.h **** //! \name Oscillator identifiers
  93:.././hal/sam3u1c/inc/sam3u/osc.h **** //@{
  94:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_RC             0    //!< Internal 32kHz RC oscillator.
  95:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_XTAL           1    //!< External 32kHz crystal oscillator.
  96:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_BYPASS         2    //!< External 32kHz bypass oscillator.
  97:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_4M_RC            3    //!< Internal 4MHz RC oscillator.
  98:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_8M_RC            4    //!< Internal 8MHz RC oscillator.
  99:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_12M_RC           5    //!< Internal 12MHz RC oscillator.
 100:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_XTAL             6    //!< External crystal oscillator.
 101:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_BYPASS           7    //!< External bypass oscillator.
 102:.././hal/sam3u1c/inc/sam3u/osc.h **** //@}
 103:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 104:.././hal/sam3u1c/inc/sam3u/osc.h **** //! \name Oscillator clock speed in hertz
 105:.././hal/sam3u1c/inc/sam3u/osc.h **** //@{
 106:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_RC_HZ          CHIP_FREQ_SLCK_RC               //!< Internal 32kHz RC oscillat
 107:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_XTAL_HZ        BOARD_FREQ_SLCK_XTAL            //!< External 32kHz crystal osc
 108:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_BYPASS_HZ      BOARD_FREQ_SLCK_BYPASS          //!< External 32kHz bypass osci
 109:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_4M_RC_HZ         CHIP_FREQ_MAINCK_RC_4MHZ        //!< Internal 4MHz RC oscillato
 110:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_8M_RC_HZ         CHIP_FREQ_MAINCK_RC_8MHZ        //!< Internal 8MHz RC oscillato
 111:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_12M_RC_HZ        CHIP_FREQ_MAINCK_RC_12MHZ       //!< Internal 12MHz RC oscillat
 112:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillato
 113:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator
 114:.././hal/sam3u1c/inc/sam3u/osc.h **** //@}
 115:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 116:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline void osc_enable(uint32_t ul_id)
 117:.././hal/sam3u1c/inc/sam3u/osc.h **** {
  36              	 .loc 1 117 0
  37              	 .cfi_startproc
  38              	 
  39              	 
  40 0000 80B5     	 push {r7,lr}
  41              	.LCFI0:
  42              	 .cfi_def_cfa_offset 8
  43              	 .cfi_offset 7,-8
  44              	 .cfi_offset 14,-4
  45 0002 82B0     	 sub sp,sp,#8
  46              	.LCFI1:
  47              	 .cfi_def_cfa_offset 16
  48 0004 00AF     	 add r7,sp,#0
  49              	.LCFI2:
  50              	 .cfi_def_cfa_register 7
  51 0006 7860     	 str r0,[r7,#4]
 118:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
  52              	 .loc 1 118 0
  53 0008 7B68     	 ldr r3,[r7,#4]
  54 000a 072B     	 cmp r3,#7
  55 000c 2ED8     	 bhi .L12
  56 000e 01A2     	 adr r2,.L4
  57 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
  58              	 .p2align 2
  59              	.L4:
  60 0014 6B000000 	 .word .L13+1
  61 0018 35000000 	 .word .L5+1
  62 001c 3D000000 	 .word .L6+1
  63 0020 45000000 	 .word .L7+1
  64 0024 4D000000 	 .word .L8+1
  65 0028 55000000 	 .word .L9+1
  66 002c 5D000000 	 .word .L10+1
  67 0030 65000000 	 .word .L11+1
  68              	 .p2align 1
  69              	.L5:
 119:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 120:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 121:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 122:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 123:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  70              	 .loc 1 123 0
  71 0034 0020     	 movs r0,#0
  72 0036 0F4B     	 ldr r3,.L14
  73 0038 9847     	 blx r3
  74              	.LVL0:
 124:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  75              	 .loc 1 124 0
  76 003a 17E0     	 b .L2
  77              	.L6:
 125:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 126:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 127:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  78              	 .loc 1 127 0
  79 003c 0120     	 movs r0,#1
  80 003e 0D4B     	 ldr r3,.L14
  81 0040 9847     	 blx r3
  82              	.LVL1:
 128:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  83              	 .loc 1 128 0
  84 0042 13E0     	 b .L2
  85              	.L7:
 129:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 130:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 131:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 132:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  86              	 .loc 1 132 0
  87 0044 0020     	 movs r0,#0
  88 0046 0C4B     	 ldr r3,.L14+4
  89 0048 9847     	 blx r3
  90              	.LVL2:
 133:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  91              	 .loc 1 133 0
  92 004a 0FE0     	 b .L2
  93              	.L8:
 134:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 135:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 136:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  94              	 .loc 1 136 0
  95 004c 1020     	 movs r0,#16
  96 004e 0A4B     	 ldr r3,.L14+4
  97 0050 9847     	 blx r3
  98              	.LVL3:
 137:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  99              	 .loc 1 137 0
 100 0052 0BE0     	 b .L2
 101              	.L9:
 138:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 139:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 140:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
 102              	 .loc 1 140 0
 103 0054 2020     	 movs r0,#32
 104 0056 084B     	 ldr r3,.L14+4
 105 0058 9847     	 blx r3
 106              	.LVL4:
 141:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 107              	 .loc 1 141 0
 108 005a 07E0     	 b .L2
 109              	.L10:
 142:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 143:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 144:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 145:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
 110              	 .loc 1 145 0
 111 005c 3E20     	 movs r0,#62
 112 005e 074B     	 ldr r3,.L14+8
 113 0060 9847     	 blx r3
 114              	.LVL5:
 146:.././hal/sam3u1c/inc/sam3u/osc.h **** 				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
 147:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 115              	 .loc 1 147 0
 116 0062 03E0     	 b .L2
 117              	.L11:
 148:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 149:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 150:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_bypass_main_xtal();
 118              	 .loc 1 150 0
 119 0064 064B     	 ldr r3,.L14+12
 120 0066 9847     	 blx r3
 121              	.LVL6:
 151:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 122              	 .loc 1 151 0
 123 0068 00E0     	 b .L2
 124              	.L13:
 120:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 125              	 .loc 1 120 0
 126 006a 00BF     	 nop
 127              	.L2:
 128              	.L12:
 152:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 153:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 129              	 .loc 1 153 0
 130 006c 00BF     	 nop
 131 006e 0837     	 adds r7,r7,#8
 132              	.LCFI3:
 133              	 .cfi_def_cfa_offset 8
 134 0070 BD46     	 mov sp,r7
 135              	.LCFI4:
 136              	 .cfi_def_cfa_register 13
 137              	 
 138 0072 80BD     	 pop {r7,pc}
 139              	.L15:
 140              	 .align 2
 141              	.L14:
 142 0074 00000000 	 .word pmc_switch_sclk_to_32kxtal
 143 0078 00000000 	 .word pmc_osc_enable_fastrc
 144 007c 00000000 	 .word pmc_osc_enable_main_xtal
 145 0080 00000000 	 .word pmc_osc_bypass_main_xtal
 146              	 .cfi_endproc
 147              	.LFE67:
 149              	 .section .text.osc_is_ready,"ax",%progbits
 150              	 .align 1
 151              	 .syntax unified
 152              	 .thumb
 153              	 .thumb_func
 154              	 .fpu softvfp
 156              	osc_is_ready:
 157              	.LFB69:
 154:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 155:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline void osc_disable(uint32_t ul_id)
 156:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 157:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 158:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 159:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 160:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 161:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 162:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 163:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 164:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 165:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 166:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_fastrc();
 167:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 168:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 169:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 170:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_xtal(PMC_OSC_XTAL);
 171:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 172:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 173:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 174:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_xtal(PMC_OSC_BYPASS);
 175:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 176:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 177:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 178:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 179:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline bool osc_is_ready(uint32_t ul_id)
 180:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 158              	 .loc 1 180 0
 159              	 .cfi_startproc
 160              	 
 161              	 
 162 0000 80B5     	 push {r7,lr}
 163              	.LCFI5:
 164              	 .cfi_def_cfa_offset 8
 165              	 .cfi_offset 7,-8
 166              	 .cfi_offset 14,-4
 167 0002 82B0     	 sub sp,sp,#8
 168              	.LCFI6:
 169              	 .cfi_def_cfa_offset 16
 170 0004 00AF     	 add r7,sp,#0
 171              	.LCFI7:
 172              	 .cfi_def_cfa_register 7
 173 0006 7860     	 str r0,[r7,#4]
 181:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 174              	 .loc 1 181 0
 175 0008 7B68     	 ldr r3,[r7,#4]
 176 000a 072B     	 cmp r3,#7
 177 000c 2FD8     	 bhi .L17
 178 000e 01A2     	 adr r2,.L19
 179 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 180              	 .p2align 2
 181              	.L19:
 182 0014 35000000 	 .word .L18+1
 183 0018 39000000 	 .word .L20+1
 184 001c 39000000 	 .word .L20+1
 185 0020 4B000000 	 .word .L21+1
 186 0024 4B000000 	 .word .L21+1
 187 0028 4B000000 	 .word .L21+1
 188 002c 5D000000 	 .word .L22+1
 189 0030 5D000000 	 .word .L22+1
 190              	 .p2align 1
 191              	.L18:
 182:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 183:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return 1;
 192              	 .loc 1 183 0
 193 0034 0123     	 movs r3,#1
 194 0036 1BE0     	 b .L23
 195              	.L20:
 184:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 185:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 186:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 187:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_32kxtal();
 196              	 .loc 1 187 0
 197 0038 0F4B     	 ldr r3,.L24
 198 003a 9847     	 blx r3
 199              	.LVL7:
 200 003c 0346     	 mov r3,r0
 201 003e 002B     	 cmp r3,#0
 202 0040 14BF     	 ite ne
 203 0042 0123     	 movne r3,#1
 204 0044 0023     	 moveq r3,#0
 205 0046 DBB2     	 uxtb r3,r3
 206 0048 12E0     	 b .L23
 207              	.L21:
 188:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 189:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 190:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 191:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 192:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_fastrc();
 208              	 .loc 1 192 0
 209 004a 0C4B     	 ldr r3,.L24+4
 210 004c 9847     	 blx r3
 211              	.LVL8:
 212 004e 0346     	 mov r3,r0
 213 0050 002B     	 cmp r3,#0
 214 0052 14BF     	 ite ne
 215 0054 0123     	 movne r3,#1
 216 0056 0023     	 moveq r3,#0
 217 0058 DBB2     	 uxtb r3,r3
 218 005a 09E0     	 b .L23
 219              	.L22:
 193:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 194:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 195:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 196:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_main_xtal();
 220              	 .loc 1 196 0
 221 005c 084B     	 ldr r3,.L24+8
 222 005e 9847     	 blx r3
 223              	.LVL9:
 224 0060 0346     	 mov r3,r0
 225 0062 002B     	 cmp r3,#0
 226 0064 14BF     	 ite ne
 227 0066 0123     	 movne r3,#1
 228 0068 0023     	 moveq r3,#0
 229 006a DBB2     	 uxtb r3,r3
 230 006c 00E0     	 b .L23
 231              	.L17:
 197:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 198:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 199:.././hal/sam3u1c/inc/sam3u/osc.h **** 	return 0;
 232              	 .loc 1 199 0
 233 006e 0023     	 movs r3,#0
 234              	.L23:
 200:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 235              	 .loc 1 200 0
 236 0070 1846     	 mov r0,r3
 237 0072 0837     	 adds r7,r7,#8
 238              	.LCFI8:
 239              	 .cfi_def_cfa_offset 8
 240 0074 BD46     	 mov sp,r7
 241              	.LCFI9:
 242              	 .cfi_def_cfa_register 13
 243              	 
 244 0076 80BD     	 pop {r7,pc}
 245              	.L25:
 246              	 .align 2
 247              	.L24:
 248 0078 00000000 	 .word pmc_osc_is_ready_32kxtal
 249 007c 00000000 	 .word pmc_osc_is_ready_fastrc
 250 0080 00000000 	 .word pmc_osc_is_ready_main_xtal
 251              	 .cfi_endproc
 252              	.LFE69:
 254              	 .section .text.osc_wait_ready,"ax",%progbits
 255              	 .align 1
 256              	 .syntax unified
 257              	 .thumb
 258              	 .thumb_func
 259              	 .fpu softvfp
 261              	osc_wait_ready:
 262              	.LFB71:
 263              	 .file 2 ".././hal/sam3u1c/inc/osc.h"
   1:.././hal/sam3u1c/inc/osc.h **** /**
   2:.././hal/sam3u1c/inc/osc.h ****  * \file
   3:.././hal/sam3u1c/inc/osc.h ****  *
   4:.././hal/sam3u1c/inc/osc.h ****  * \brief Oscillator management
   5:.././hal/sam3u1c/inc/osc.h ****  *
   6:.././hal/sam3u1c/inc/osc.h ****  * Copyright (c) 2010-2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/osc.h ****  *
   8:.././hal/sam3u1c/inc/osc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/osc.h ****  *
  10:.././hal/sam3u1c/inc/osc.h ****  * \page License
  11:.././hal/sam3u1c/inc/osc.h ****  *
  12:.././hal/sam3u1c/inc/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/osc.h ****  *
  15:.././hal/sam3u1c/inc/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/osc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/osc.h ****  *
  18:.././hal/sam3u1c/inc/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/osc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/osc.h ****  *
  22:.././hal/sam3u1c/inc/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/osc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/osc.h ****  *
  25:.././hal/sam3u1c/inc/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/osc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/osc.h ****  *
  28:.././hal/sam3u1c/inc/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/osc.h ****  *
  40:.././hal/sam3u1c/inc/osc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/osc.h ****  *
  42:.././hal/sam3u1c/inc/osc.h ****  */
  43:.././hal/sam3u1c/inc/osc.h **** #ifndef OSC_H_INCLUDED
  44:.././hal/sam3u1c/inc/osc.h **** #define OSC_H_INCLUDED
  45:.././hal/sam3u1c/inc/osc.h **** 
  46:.././hal/sam3u1c/inc/osc.h **** #include "parts.h"
  47:.././hal/sam3u1c/inc/osc.h **** #include "conf_clock.h"
  48:.././hal/sam3u1c/inc/osc.h **** 
  49:.././hal/sam3u1c/inc/osc.h **** #if SAM3S
  50:.././hal/sam3u1c/inc/osc.h **** # include "sam3s/osc.h"
  51:.././hal/sam3u1c/inc/osc.h **** #elif SAM3XA
  52:.././hal/sam3u1c/inc/osc.h **** # include "sam3x/osc.h"
  53:.././hal/sam3u1c/inc/osc.h **** #elif SAM3U
  54:.././hal/sam3u1c/inc/osc.h **** # include "sam3u/osc.h"
  55:.././hal/sam3u1c/inc/osc.h **** #elif SAM3N
  56:.././hal/sam3u1c/inc/osc.h **** # include "sam3n/osc.h"
  57:.././hal/sam3u1c/inc/osc.h **** #elif SAM4S
  58:.././hal/sam3u1c/inc/osc.h **** # include "sam4s/osc.h"
  59:.././hal/sam3u1c/inc/osc.h **** #elif SAM4E
  60:.././hal/sam3u1c/inc/osc.h **** # include "sam4e/osc.h"
  61:.././hal/sam3u1c/inc/osc.h **** #elif SAM4C
  62:.././hal/sam3u1c/inc/osc.h **** # include "sam4c/osc.h"
  63:.././hal/sam3u1c/inc/osc.h **** #elif SAM4CM
  64:.././hal/sam3u1c/inc/osc.h **** # include "sam4cm/osc.h"
  65:.././hal/sam3u1c/inc/osc.h **** #elif SAM4CP
  66:.././hal/sam3u1c/inc/osc.h **** # include "sam4cp/osc.h"
  67:.././hal/sam3u1c/inc/osc.h **** #elif SAM4L
  68:.././hal/sam3u1c/inc/osc.h **** # include "sam4l/osc.h"
  69:.././hal/sam3u1c/inc/osc.h **** #elif SAM4N
  70:.././hal/sam3u1c/inc/osc.h **** # include "sam4n/osc.h"
  71:.././hal/sam3u1c/inc/osc.h **** #elif SAMG
  72:.././hal/sam3u1c/inc/osc.h **** # include "samg/osc.h"
  73:.././hal/sam3u1c/inc/osc.h **** #elif (UC3A0 || UC3A1)
  74:.././hal/sam3u1c/inc/osc.h **** # include "uc3a0_a1/osc.h"
  75:.././hal/sam3u1c/inc/osc.h **** #elif UC3A3
  76:.././hal/sam3u1c/inc/osc.h **** # include "uc3a3_a4/osc.h"
  77:.././hal/sam3u1c/inc/osc.h **** #elif UC3B
  78:.././hal/sam3u1c/inc/osc.h **** # include "uc3b0_b1/osc.h"
  79:.././hal/sam3u1c/inc/osc.h **** #elif UC3C
  80:.././hal/sam3u1c/inc/osc.h **** # include "uc3c/osc.h"
  81:.././hal/sam3u1c/inc/osc.h **** #elif UC3D
  82:.././hal/sam3u1c/inc/osc.h **** # include "uc3d/osc.h"
  83:.././hal/sam3u1c/inc/osc.h **** #elif UC3L
  84:.././hal/sam3u1c/inc/osc.h **** # include "uc3l/osc.h"
  85:.././hal/sam3u1c/inc/osc.h **** #elif XMEGA
  86:.././hal/sam3u1c/inc/osc.h **** # include "xmega/osc.h"
  87:.././hal/sam3u1c/inc/osc.h **** #else
  88:.././hal/sam3u1c/inc/osc.h **** # error Unsupported chip type
  89:.././hal/sam3u1c/inc/osc.h **** #endif
  90:.././hal/sam3u1c/inc/osc.h **** 
  91:.././hal/sam3u1c/inc/osc.h **** /**
  92:.././hal/sam3u1c/inc/osc.h ****  * \ingroup clk_group
  93:.././hal/sam3u1c/inc/osc.h ****  * \defgroup osc_group Oscillator Management
  94:.././hal/sam3u1c/inc/osc.h ****  *
  95:.././hal/sam3u1c/inc/osc.h ****  * This group contains functions and definitions related to configuring
  96:.././hal/sam3u1c/inc/osc.h ****  * and enabling/disabling on-chip oscillators. Internal RC-oscillators,
  97:.././hal/sam3u1c/inc/osc.h ****  * external crystal oscillators and external clock generators are
  98:.././hal/sam3u1c/inc/osc.h ****  * supported by this module. What all of these have in common is that
  99:.././hal/sam3u1c/inc/osc.h ****  * they swing at a fixed, nominal frequency which is normally not
 100:.././hal/sam3u1c/inc/osc.h ****  * adjustable.
 101:.././hal/sam3u1c/inc/osc.h ****  *
 102:.././hal/sam3u1c/inc/osc.h ****  * \par Example: Enabling an oscillator
 103:.././hal/sam3u1c/inc/osc.h ****  *
 104:.././hal/sam3u1c/inc/osc.h ****  * The following example demonstrates how to enable the external
 105:.././hal/sam3u1c/inc/osc.h ****  * oscillator on XMEGA A and wait for it to be ready to use. The
 106:.././hal/sam3u1c/inc/osc.h ****  * oscillator identifiers are platform-specific, so while the same
 107:.././hal/sam3u1c/inc/osc.h ****  * procedure is used on all platforms, the parameter to osc_enable()
 108:.././hal/sam3u1c/inc/osc.h ****  * will be different from device to device.
 109:.././hal/sam3u1c/inc/osc.h ****  * \code
 110:.././hal/sam3u1c/inc/osc.h **** 	osc_enable(OSC_ID_XOSC);
 111:.././hal/sam3u1c/inc/osc.h **** 	osc_wait_ready(OSC_ID_XOSC); \endcode
 112:.././hal/sam3u1c/inc/osc.h ****  *
 113:.././hal/sam3u1c/inc/osc.h ****  * \section osc_group_board Board-specific Definitions
 114:.././hal/sam3u1c/inc/osc.h ****  * If external oscillators are used, the board code must provide the
 115:.././hal/sam3u1c/inc/osc.h ****  * following definitions for each of those:
 116:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_HZ: The nominal frequency of the oscillator.
 117:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_STARTUP_US: The startup time of the
 118:.././hal/sam3u1c/inc/osc.h ****  *     oscillator in microseconds.
 119:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_TYPE: The type of oscillator connected, i.e.
 120:.././hal/sam3u1c/inc/osc.h ****  *     whether it's a crystal or external clock, and sometimes what kind
 121:.././hal/sam3u1c/inc/osc.h ****  *     of crystal it is. The meaning of this value is platform-specific.
 122:.././hal/sam3u1c/inc/osc.h ****  *
 123:.././hal/sam3u1c/inc/osc.h ****  * @{
 124:.././hal/sam3u1c/inc/osc.h ****  */
 125:.././hal/sam3u1c/inc/osc.h **** 
 126:.././hal/sam3u1c/inc/osc.h **** //! \name Oscillator Management
 127:.././hal/sam3u1c/inc/osc.h **** //@{
 128:.././hal/sam3u1c/inc/osc.h **** /**
 129:.././hal/sam3u1c/inc/osc.h ****  * \fn void osc_enable(uint8_t id)
 130:.././hal/sam3u1c/inc/osc.h ****  * \brief Enable oscillator \a id
 131:.././hal/sam3u1c/inc/osc.h ****  *
 132:.././hal/sam3u1c/inc/osc.h ****  * The startup time and mode value is automatically determined based on
 133:.././hal/sam3u1c/inc/osc.h ****  * definitions in the board code.
 134:.././hal/sam3u1c/inc/osc.h ****  */
 135:.././hal/sam3u1c/inc/osc.h **** /**
 136:.././hal/sam3u1c/inc/osc.h ****  * \fn void osc_disable(uint8_t id)
 137:.././hal/sam3u1c/inc/osc.h ****  * \brief Disable oscillator \a id
 138:.././hal/sam3u1c/inc/osc.h ****  */
 139:.././hal/sam3u1c/inc/osc.h **** /**
 140:.././hal/sam3u1c/inc/osc.h ****  * \fn osc_is_ready(uint8_t id)
 141:.././hal/sam3u1c/inc/osc.h ****  * \brief Determine whether oscillator \a id is ready.
 142:.././hal/sam3u1c/inc/osc.h ****  * \retval true Oscillator \a id is running and ready to use as a clock
 143:.././hal/sam3u1c/inc/osc.h ****  * source.
 144:.././hal/sam3u1c/inc/osc.h ****  * \retval false Oscillator \a id is not running.
 145:.././hal/sam3u1c/inc/osc.h ****  */
 146:.././hal/sam3u1c/inc/osc.h **** /**
 147:.././hal/sam3u1c/inc/osc.h ****  * \fn uint32_t osc_get_rate(uint8_t id)
 148:.././hal/sam3u1c/inc/osc.h ****  * \brief Return the frequency of oscillator \a id in Hz
 149:.././hal/sam3u1c/inc/osc.h ****  */
 150:.././hal/sam3u1c/inc/osc.h **** 
 151:.././hal/sam3u1c/inc/osc.h **** #ifndef __ASSEMBLY__
 152:.././hal/sam3u1c/inc/osc.h **** 
 153:.././hal/sam3u1c/inc/osc.h **** /**
 154:.././hal/sam3u1c/inc/osc.h ****  * \brief Wait until the oscillator identified by \a id is ready
 155:.././hal/sam3u1c/inc/osc.h ****  *
 156:.././hal/sam3u1c/inc/osc.h ****  * This function will busy-wait for the oscillator identified by \a id
 157:.././hal/sam3u1c/inc/osc.h ****  * to become stable and ready to use as a clock source.
 158:.././hal/sam3u1c/inc/osc.h ****  *
 159:.././hal/sam3u1c/inc/osc.h ****  * \param id A number identifying the oscillator to wait for.
 160:.././hal/sam3u1c/inc/osc.h ****  */
 161:.././hal/sam3u1c/inc/osc.h **** static inline void osc_wait_ready(uint8_t id)
 162:.././hal/sam3u1c/inc/osc.h **** {
 264              	 .loc 2 162 0
 265              	 .cfi_startproc
 266              	 
 267              	 
 268 0000 80B5     	 push {r7,lr}
 269              	.LCFI10:
 270              	 .cfi_def_cfa_offset 8
 271              	 .cfi_offset 7,-8
 272              	 .cfi_offset 14,-4
 273 0002 82B0     	 sub sp,sp,#8
 274              	.LCFI11:
 275              	 .cfi_def_cfa_offset 16
 276 0004 00AF     	 add r7,sp,#0
 277              	.LCFI12:
 278              	 .cfi_def_cfa_register 7
 279 0006 0346     	 mov r3,r0
 280 0008 FB71     	 strb r3,[r7,#7]
 163:.././hal/sam3u1c/inc/osc.h **** 	while (!osc_is_ready(id)) {
 281              	 .loc 2 163 0
 282 000a 00BF     	 nop
 283              	.L27:
 284              	 .loc 2 163 0 is_stmt 0 discriminator 1
 285 000c FB79     	 ldrb r3,[r7,#7]
 286 000e 1846     	 mov r0,r3
 287 0010 054B     	 ldr r3,.L28
 288 0012 9847     	 blx r3
 289              	.LVL10:
 290 0014 0346     	 mov r3,r0
 291 0016 83F00103 	 eor r3,r3,#1
 292 001a DBB2     	 uxtb r3,r3
 293 001c 002B     	 cmp r3,#0
 294 001e F5D1     	 bne .L27
 164:.././hal/sam3u1c/inc/osc.h **** 		/* Do nothing */
 165:.././hal/sam3u1c/inc/osc.h **** 	}
 166:.././hal/sam3u1c/inc/osc.h **** }
 295              	 .loc 2 166 0 is_stmt 1
 296 0020 00BF     	 nop
 297 0022 0837     	 adds r7,r7,#8
 298              	.LCFI13:
 299              	 .cfi_def_cfa_offset 8
 300 0024 BD46     	 mov sp,r7
 301              	.LCFI14:
 302              	 .cfi_def_cfa_register 13
 303              	 
 304 0026 80BD     	 pop {r7,pc}
 305              	.L29:
 306              	 .align 2
 307              	.L28:
 308 0028 00000000 	 .word osc_is_ready
 309              	 .cfi_endproc
 310              	.LFE71:
 312              	 .global g_captureinprogress
 313              	 .section .data.g_captureinprogress,"aw",%progbits
 316              	g_captureinprogress:
 317 0000 01       	 .byte 1
 318              	 .section .data.main_b_vendor_enable,"aw",%progbits
 321              	main_b_vendor_enable:
 322 0000 01       	 .byte 1
 323              	 .section .bss.main_buf_loopback,"aw",%nobits
 324              	 .align 2
 327              	main_buf_loopback:
 328 0000 00000000 	 .space 1024
 328      00000000 
 328      00000000 
 328      00000000 
 328      00000000 
 329              	 .section .text.main_suspend_action,"ax",%progbits
 330              	 .align 1
 331              	 .global main_suspend_action
 332              	 .syntax unified
 333              	 .thumb
 334              	 .thumb_func
 335              	 .fpu softvfp
 337              	main_suspend_action:
 338              	.LFB188:
 339              	 .file 3 "usb.c"
   1:usb.c         **** /*
   2:usb.c         ****   Copyright (c) 2014-2015 NewAE Technology Inc. All rights reserved.
   3:usb.c         ****   This program is free software: you can redistribute it and/or modify
   4:usb.c         ****   it under the terms of the GNU General Public License as published by
   5:usb.c         ****   the Free Software Foundation, either version 3 of the License, or
   6:usb.c         ****   (at your option) any later version.
   7:usb.c         ****   This program is distributed in the hope that it will be useful,
   8:usb.c         ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
   9:usb.c         ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  10:usb.c         ****   GNU General Public License for more details.
  11:usb.c         ****   You should have received a copy of the GNU General Public License
  12:usb.c         ****   along with this program.  If not, see <http://www.gnu.org/licenses/>.
  13:usb.c         **** */
  14:usb.c         **** 
  15:usb.c         **** #include <asf.h>
  16:usb.c         **** #include "conf_usb.h"
  17:usb.c         **** #include "stdio_serial.h"
  18:usb.c         **** #include "ui.h"
  19:usb.c         **** #include "genclk.h"
  20:usb.c         **** #include "usb.h"
  21:usb.c         **** #include "usb_xmem.h"
  22:usb.c         **** #include "fpga_program.h"
  23:usb.c         **** #include <string.h>
  24:usb.c         **** 
  25:usb.c         **** #define FW_VER_MAJOR 0
  26:usb.c         **** #define FW_VER_MINOR 10
  27:usb.c         **** #define FW_VER_DEBUG 0
  28:usb.c         **** 
  29:usb.c         **** #define REQ_MEMREAD_BULK 0x10
  30:usb.c         **** #define REQ_MEMWRITE_BULK 0x11
  31:usb.c         **** #define REQ_MEMREAD_CTRL 0x12
  32:usb.c         **** #define REQ_MEMWRITE_CTRL 0x13
  33:usb.c         **** #define REQ_MEMSTREAM 0x14
  34:usb.c         **** #define REQ_FPGA_STATUS 0x15
  35:usb.c         **** #define REQ_FPGA_PROGRAM 0x16
  36:usb.c         **** #define REQ_FW_VERSION 0x17
  37:usb.c         **** #define REQ_USART0_DATA 0x1A
  38:usb.c         **** #define REQ_USART0_CONFIG 0x1B
  39:usb.c         **** #define REQ_SCARD_DATA 0x1C
  40:usb.c         **** #define REQ_SCARD_CONFIG 0x1D
  41:usb.c         **** #define REQ_SCARD_AUX 0x1E
  42:usb.c         **** #define REQ_USART2DUMP_ENABLE 0x1F
  43:usb.c         **** #define REQ_XMEGA_PROGRAM 0x20
  44:usb.c         **** #define REQ_AVR_PROGRAM 0x21
  45:usb.c         **** #define REQ_SAM3U_CFG 0x22
  46:usb.c         **** #define REQ_CC_PROGRAM 0x23
  47:usb.c         **** 
  48:usb.c         **** volatile bool g_captureinprogress = true;
  49:usb.c         **** 
  50:usb.c         **** static volatile bool main_b_vendor_enable = true;
  51:usb.c         **** 
  52:usb.c         **** COMPILER_WORD_ALIGNED
  53:usb.c         **** static uint8_t main_buf_loopback[MAIN_LOOPBACK_SIZE];
  54:usb.c         **** 
  55:usb.c         **** void main_vendor_bulk_in_received(udd_ep_status_t status,
  56:usb.c         ****                                   iram_size_t nb_transfered, udd_ep_id_t ep);
  57:usb.c         **** void main_vendor_bulk_out_received(udd_ep_status_t status,
  58:usb.c         ****                                    iram_size_t nb_transfered, udd_ep_id_t ep);
  59:usb.c         **** 
  60:usb.c         **** //this stuff just turns leds on and off
  61:usb.c         **** void main_suspend_action(void)
  62:usb.c         **** {
 340              	 .loc 3 62 0
 341              	 .cfi_startproc
 342              	 
 343              	 
 344              	 
 345 0000 80B4     	 push {r7}
 346              	.LCFI15:
 347              	 .cfi_def_cfa_offset 4
 348              	 .cfi_offset 7,-4
 349 0002 00AF     	 add r7,sp,#0
 350              	.LCFI16:
 351              	 .cfi_def_cfa_register 7
  63:usb.c         **** }
 352              	 .loc 3 63 0
 353 0004 00BF     	 nop
 354 0006 BD46     	 mov sp,r7
 355              	.LCFI17:
 356              	 .cfi_def_cfa_register 13
 357              	 
 358 0008 80BC     	 pop {r7}
 359              	.LCFI18:
 360              	 .cfi_restore 7
 361              	 .cfi_def_cfa_offset 0
 362 000a 7047     	 bx lr
 363              	 .cfi_endproc
 364              	.LFE188:
 366              	 .section .text.main_resume_action,"ax",%progbits
 367              	 .align 1
 368              	 .global main_resume_action
 369              	 .syntax unified
 370              	 .thumb
 371              	 .thumb_func
 372              	 .fpu softvfp
 374              	main_resume_action:
 375              	.LFB189:
  64:usb.c         **** 
  65:usb.c         **** void main_resume_action(void)
  66:usb.c         **** {
 376              	 .loc 3 66 0
 377              	 .cfi_startproc
 378              	 
 379              	 
 380              	 
 381 0000 80B4     	 push {r7}
 382              	.LCFI19:
 383              	 .cfi_def_cfa_offset 4
 384              	 .cfi_offset 7,-4
 385 0002 00AF     	 add r7,sp,#0
 386              	.LCFI20:
 387              	 .cfi_def_cfa_register 7
  67:usb.c         **** }
 388              	 .loc 3 67 0
 389 0004 00BF     	 nop
 390 0006 BD46     	 mov sp,r7
 391              	.LCFI21:
 392              	 .cfi_def_cfa_register 13
 393              	 
 394 0008 80BC     	 pop {r7}
 395              	.LCFI22:
 396              	 .cfi_restore 7
 397              	 .cfi_def_cfa_offset 0
 398 000a 7047     	 bx lr
 399              	 .cfi_endproc
 400              	.LFE189:
 402              	 .section .text.main_sof_action,"ax",%progbits
 403              	 .align 1
 404              	 .global main_sof_action
 405              	 .syntax unified
 406              	 .thumb
 407              	 .thumb_func
 408              	 .fpu softvfp
 410              	main_sof_action:
 411              	.LFB190:
  68:usb.c         **** 
  69:usb.c         **** void main_sof_action(void)
  70:usb.c         **** {
 412              	 .loc 3 70 0
 413              	 .cfi_startproc
 414              	 
 415              	 
 416              	 
 417 0000 80B4     	 push {r7}
 418              	.LCFI23:
 419              	 .cfi_def_cfa_offset 4
 420              	 .cfi_offset 7,-4
 421 0002 00AF     	 add r7,sp,#0
 422              	.LCFI24:
 423              	 .cfi_def_cfa_register 7
  71:usb.c         ****      if (!main_b_vendor_enable)
 424              	 .loc 3 71 0
 425 0004 044B     	 ldr r3,.L34
 426 0006 1B78     	 ldrb r3,[r3]
 427 0008 DBB2     	 uxtb r3,r3
 428 000a 83F00103 	 eor r3,r3,#1
 429 000e DBB2     	 uxtb r3,r3
 430 0010 002B     	 cmp r3,#0
  72:usb.c         ****           return;
  73:usb.c         **** }
 431              	 .loc 3 73 0
 432 0012 BD46     	 mov sp,r7
 433              	.LCFI25:
 434              	 .cfi_def_cfa_register 13
 435              	 
 436 0014 80BC     	 pop {r7}
 437              	.LCFI26:
 438              	 .cfi_restore 7
 439              	 .cfi_def_cfa_offset 0
 440 0016 7047     	 bx lr
 441              	.L35:
 442              	 .align 2
 443              	.L34:
 444 0018 00000000 	 .word main_b_vendor_enable
 445              	 .cfi_endproc
 446              	.LFE190:
 448              	 .section .text.main_vendor_enable,"ax",%progbits
 449              	 .align 1
 450              	 .global main_vendor_enable
 451              	 .syntax unified
 452              	 .thumb
 453              	 .thumb_func
 454              	 .fpu softvfp
 456              	main_vendor_enable:
 457              	.LFB191:
  74:usb.c         **** 
  75:usb.c         **** bool main_vendor_enable(void)
  76:usb.c         **** {
 458              	 .loc 3 76 0
 459              	 .cfi_startproc
 460              	 
 461              	 
 462 0000 80B5     	 push {r7,lr}
 463              	.LCFI27:
 464              	 .cfi_def_cfa_offset 8
 465              	 .cfi_offset 7,-8
 466              	 .cfi_offset 14,-4
 467 0002 00AF     	 add r7,sp,#0
 468              	.LCFI28:
 469              	 .cfi_def_cfa_register 7
  77:usb.c         ****      main_b_vendor_enable = true;
 470              	 .loc 3 77 0
 471 0004 054B     	 ldr r3,.L38
 472 0006 0122     	 movs r2,#1
 473 0008 1A70     	 strb r2,[r3]
  78:usb.c         ****      // Start data reception on OUT endpoints
  79:usb.c         **** #if UDI_VENDOR_EPS_SIZE_BULK_FS
  80:usb.c         ****      //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
  81:usb.c         ****      udi_vendor_bulk_out_run(
 474              	 .loc 3 81 0
 475 000a 054A     	 ldr r2,.L38+4
 476 000c 4FF48061 	 mov r1,#1024
 477 0010 0448     	 ldr r0,.L38+8
 478 0012 054B     	 ldr r3,.L38+12
 479 0014 9847     	 blx r3
 480              	.LVL11:
  82:usb.c         ****           main_buf_loopback,
  83:usb.c         ****           sizeof(main_buf_loopback),
  84:usb.c         ****           main_vendor_bulk_out_received);
  85:usb.c         **** #endif
  86:usb.c         ****      return true;
 481              	 .loc 3 86 0
 482 0016 0123     	 movs r3,#1
  87:usb.c         **** }
 483              	 .loc 3 87 0
 484 0018 1846     	 mov r0,r3
 485 001a 80BD     	 pop {r7,pc}
 486              	.L39:
 487              	 .align 2
 488              	.L38:
 489 001c 00000000 	 .word main_b_vendor_enable
 490 0020 00000000 	 .word main_vendor_bulk_out_received
 491 0024 00000000 	 .word main_buf_loopback
 492 0028 00000000 	 .word udi_vendor_bulk_out_run
 493              	 .cfi_endproc
 494              	.LFE191:
 496              	 .section .text.main_vendor_disable,"ax",%progbits
 497              	 .align 1
 498              	 .global main_vendor_disable
 499              	 .syntax unified
 500              	 .thumb
 501              	 .thumb_func
 502              	 .fpu softvfp
 504              	main_vendor_disable:
 505              	.LFB192:
  88:usb.c         **** 
  89:usb.c         **** void main_vendor_disable(void)
  90:usb.c         **** {
 506              	 .loc 3 90 0
 507              	 .cfi_startproc
 508              	 
 509              	 
 510              	 
 511 0000 80B4     	 push {r7}
 512              	.LCFI29:
 513              	 .cfi_def_cfa_offset 4
 514              	 .cfi_offset 7,-4
 515 0002 00AF     	 add r7,sp,#0
 516              	.LCFI30:
 517              	 .cfi_def_cfa_register 7
  91:usb.c         ****      main_b_vendor_enable = false;
 518              	 .loc 3 91 0
 519 0004 034B     	 ldr r3,.L41
 520 0006 0022     	 movs r2,#0
 521 0008 1A70     	 strb r2,[r3]
  92:usb.c         **** }
 522              	 .loc 3 92 0
 523 000a 00BF     	 nop
 524 000c BD46     	 mov sp,r7
 525              	.LCFI31:
 526              	 .cfi_def_cfa_register 13
 527              	 
 528 000e 80BC     	 pop {r7}
 529              	.LCFI32:
 530              	 .cfi_restore 7
 531              	 .cfi_def_cfa_offset 0
 532 0010 7047     	 bx lr
 533              	.L42:
 534 0012 00BF     	 .align 2
 535              	.L41:
 536 0014 00000000 	 .word main_b_vendor_enable
 537              	 .cfi_endproc
 538              	.LFE192:
 540              	 .section .bss.ctrlbuffer,"aw",%nobits
 541              	 .align 2
 544              	ctrlbuffer:
 545 0000 00000000 	 .space 64
 545      00000000 
 545      00000000 
 545      00000000 
 545      00000000 
 546              	 .section .bss.blockendpoint_usage,"aw",%nobits
 549              	blockendpoint_usage:
 550 0000 00       	 .space 1
 551              	 .section .bss.ctrlmemread_buf,"aw",%nobits
 552              	 .align 2
 555              	ctrlmemread_buf:
 556 0000 00000000 	 .space 4
 557              	 .section .bss.ctrlmemread_size,"aw",%nobits
 558              	 .align 2
 561              	ctrlmemread_size:
 562 0000 00000000 	 .space 4
 563              	 .section .text.ctrl_readmem_bulk,"ax",%progbits
 564              	 .align 1
 565              	 .global ctrl_readmem_bulk
 566              	 .syntax unified
 567              	 .thumb
 568              	 .thumb_func
 569              	 .fpu softvfp
 571              	ctrl_readmem_bulk:
 572              	.LFB193:
  93:usb.c         **** 
  94:usb.c         **** #define REQ_MEMREAD_BULK 0x10
  95:usb.c         **** #define REQ_MEMWRITE_BULK 0x11
  96:usb.c         **** #define REQ_MEMREAD_CTRL 0x12
  97:usb.c         **** #define REQ_MEMWRITE_CTRL 0x13
  98:usb.c         **** #define REQ_FW_VERSION 0x17
  99:usb.c         **** #define REQ_SAM3U_CFG 0x22
 100:usb.c         **** 
 101:usb.c         **** COMPILER_WORD_ALIGNED static uint8_t ctrlbuffer[64];
 102:usb.c         **** #define CTRLBUFFER_WORDPTR ((uint32_t *) ((void *)ctrlbuffer))
 103:usb.c         **** 
 104:usb.c         **** typedef enum {
 105:usb.c         ****      bep_emem=0,
 106:usb.c         ****      bep_fpgabitstream=10
 107:usb.c         **** } blockep_usage_t;
 108:usb.c         **** 
 109:usb.c         **** static blockep_usage_t blockendpoint_usage = bep_emem;
 110:usb.c         **** 
 111:usb.c         **** static uint8_t * ctrlmemread_buf;
 112:usb.c         **** static unsigned int ctrlmemread_size;
 113:usb.c         **** 
 114:usb.c         **** void ctrl_readmem_bulk(void);
 115:usb.c         **** void ctrl_readmem_ctrl(void);
 116:usb.c         **** void ctrl_writemem_bulk(void);
 117:usb.c         **** void ctrl_writemem_ctrl(void);
 118:usb.c         **** void ctrl_progfpga_bulk(void);
 119:usb.c         **** 
 120:usb.c         **** 
 121:usb.c         **** void ctrl_readmem_bulk(void){
 573              	 .loc 3 121 0
 574              	 .cfi_startproc
 575              	 
 576              	 
 577 0000 80B5     	 push {r7,lr}
 578              	.LCFI33:
 579              	 .cfi_def_cfa_offset 8
 580              	 .cfi_offset 7,-8
 581              	 .cfi_offset 14,-4
 582 0002 82B0     	 sub sp,sp,#8
 583              	.LCFI34:
 584              	 .cfi_def_cfa_offset 16
 585 0004 00AF     	 add r7,sp,#0
 586              	.LCFI35:
 587              	 .cfi_def_cfa_register 7
 122:usb.c         ****      uint32_t buflen = *(CTRLBUFFER_WORDPTR);
 588              	 .loc 3 122 0
 589 0006 0E4B     	 ldr r3,.L45
 590 0008 1B68     	 ldr r3,[r3]
 591 000a 7B60     	 str r3,[r7,#4]
 123:usb.c         ****      uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
 592              	 .loc 3 123 0
 593 000c 0C4B     	 ldr r3,.L45
 594 000e 5B68     	 ldr r3,[r3,#4]
 595 0010 3B60     	 str r3,[r7]
 124:usb.c         **** 
 125:usb.c         ****      FPGA_releaselock();
 596              	 .loc 3 125 0
 597 0012 0C4B     	 ldr r3,.L45+4
 598 0014 9847     	 blx r3
 599              	.LVL12:
 126:usb.c         ****      while(!FPGA_setlock(fpga_blockin));
 600              	 .loc 3 126 0
 601 0016 00BF     	 nop
 602              	.L44:
 603              	 .loc 3 126 0 is_stmt 0 discriminator 1
 604 0018 0220     	 movs r0,#2
 605 001a 0B4B     	 ldr r3,.L45+8
 606 001c 9847     	 blx r3
 607              	.LVL13:
 608 001e 0346     	 mov r3,r0
 609 0020 002B     	 cmp r3,#0
 610 0022 F9D0     	 beq .L44
 127:usb.c         **** 
 128:usb.c         ****      FPGA_setaddr(address);
 611              	 .loc 3 128 0 is_stmt 1
 612 0024 3868     	 ldr r0,[r7]
 613 0026 094B     	 ldr r3,.L45+12
 614 0028 9847     	 blx r3
 615              	.LVL14:
 129:usb.c         **** 
 130:usb.c         ****      /* Do memory read */
 131:usb.c         ****      udi_vendor_bulk_in_run(
 616              	 .loc 3 131 0
 617 002a 094A     	 ldr r2,.L45+16
 618 002c 7968     	 ldr r1,[r7,#4]
 619 002e 4FF0C040 	 mov r0,#1610612736
 620 0032 084B     	 ldr r3,.L45+20
 621 0034 9847     	 blx r3
 622              	.LVL15:
 132:usb.c         ****           (uint8_t *) PSRAM_BASE_ADDRESS,
 133:usb.c         ****           buflen,
 134:usb.c         ****           main_vendor_bulk_in_received
 135:usb.c         ****           );
 136:usb.c         **** }
 623              	 .loc 3 136 0
 624 0036 00BF     	 nop
 625 0038 0837     	 adds r7,r7,#8
 626              	.LCFI36:
 627              	 .cfi_def_cfa_offset 8
 628 003a BD46     	 mov sp,r7
 629              	.LCFI37:
 630              	 .cfi_def_cfa_register 13
 631              	 
 632 003c 80BD     	 pop {r7,pc}
 633              	.L46:
 634 003e 00BF     	 .align 2
 635              	.L45:
 636 0040 00000000 	 .word ctrlbuffer
 637 0044 00000000 	 .word FPGA_releaselock
 638 0048 00000000 	 .word FPGA_setlock
 639 004c 00000000 	 .word FPGA_setaddr
 640 0050 00000000 	 .word main_vendor_bulk_in_received
 641 0054 00000000 	 .word udi_vendor_bulk_in_run
 642              	 .cfi_endproc
 643              	.LFE193:
 645              	 .section .text.ctrl_readmem_ctrl,"ax",%progbits
 646              	 .align 1
 647              	 .global ctrl_readmem_ctrl
 648              	 .syntax unified
 649              	 .thumb
 650              	 .thumb_func
 651              	 .fpu softvfp
 653              	ctrl_readmem_ctrl:
 654              	.LFB194:
 137:usb.c         **** 
 138:usb.c         **** void ctrl_readmem_ctrl(void){
 655              	 .loc 3 138 0
 656              	 .cfi_startproc
 657              	 
 658              	 
 659 0000 80B5     	 push {r7,lr}
 660              	.LCFI38:
 661              	 .cfi_def_cfa_offset 8
 662              	 .cfi_offset 7,-8
 663              	 .cfi_offset 14,-4
 664 0002 82B0     	 sub sp,sp,#8
 665              	.LCFI39:
 666              	 .cfi_def_cfa_offset 16
 667 0004 00AF     	 add r7,sp,#0
 668              	.LCFI40:
 669              	 .cfi_def_cfa_register 7
 139:usb.c         ****      uint32_t buflen = *(CTRLBUFFER_WORDPTR);
 670              	 .loc 3 139 0
 671 0006 0E4B     	 ldr r3,.L49
 672 0008 1B68     	 ldr r3,[r3]
 673 000a 7B60     	 str r3,[r7,#4]
 140:usb.c         ****      uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
 674              	 .loc 3 140 0
 675 000c 0C4B     	 ldr r3,.L49
 676 000e 5B68     	 ldr r3,[r3,#4]
 677 0010 3B60     	 str r3,[r7]
 141:usb.c         **** 
 142:usb.c         ****      FPGA_releaselock();
 678              	 .loc 3 142 0
 679 0012 0C4B     	 ldr r3,.L49+4
 680 0014 9847     	 blx r3
 681              	.LVL16:
 143:usb.c         ****      while(!FPGA_setlock(fpga_ctrlmem));
 682              	 .loc 3 143 0
 683 0016 00BF     	 nop
 684              	.L48:
 685              	 .loc 3 143 0 is_stmt 0 discriminator 1
 686 0018 0520     	 movs r0,#5
 687 001a 0B4B     	 ldr r3,.L49+8
 688 001c 9847     	 blx r3
 689              	.LVL17:
 690 001e 0346     	 mov r3,r0
 691 0020 002B     	 cmp r3,#0
 692 0022 F9D0     	 beq .L48
 144:usb.c         **** 
 145:usb.c         ****      /* Set address */
 146:usb.c         ****      FPGA_setaddr(address);
 693              	 .loc 3 146 0 is_stmt 1
 694 0024 3868     	 ldr r0,[r7]
 695 0026 094B     	 ldr r3,.L49+12
 696 0028 9847     	 blx r3
 697              	.LVL18:
 147:usb.c         **** 
 148:usb.c         ****      /* Do memory read */
 149:usb.c         ****      ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
 698              	 .loc 3 149 0
 699 002a 094B     	 ldr r3,.L49+16
 700 002c 4FF0C042 	 mov r2,#1610612736
 701 0030 1A60     	 str r2,[r3]
 150:usb.c         **** 
 151:usb.c         ****      /* Set size to read */
 152:usb.c         ****      ctrlmemread_size = buflen;
 702              	 .loc 3 152 0
 703 0032 084A     	 ldr r2,.L49+20
 704 0034 7B68     	 ldr r3,[r7,#4]
 705 0036 1360     	 str r3,[r2]
 153:usb.c         **** 
 154:usb.c         ****      /* Start Transaction */
 155:usb.c         **** }
 706              	 .loc 3 155 0
 707 0038 00BF     	 nop
 708 003a 0837     	 adds r7,r7,#8
 709              	.LCFI41:
 710              	 .cfi_def_cfa_offset 8
 711 003c BD46     	 mov sp,r7
 712              	.LCFI42:
 713              	 .cfi_def_cfa_register 13
 714              	 
 715 003e 80BD     	 pop {r7,pc}
 716              	.L50:
 717              	 .align 2
 718              	.L49:
 719 0040 00000000 	 .word ctrlbuffer
 720 0044 00000000 	 .word FPGA_releaselock
 721 0048 00000000 	 .word FPGA_setlock
 722 004c 00000000 	 .word FPGA_setaddr
 723 0050 00000000 	 .word ctrlmemread_buf
 724 0054 00000000 	 .word ctrlmemread_size
 725              	 .cfi_endproc
 726              	.LFE194:
 728              	 .section .text.ctrl_writemem_ctrl,"ax",%progbits
 729              	 .align 1
 730              	 .global ctrl_writemem_ctrl
 731              	 .syntax unified
 732              	 .thumb
 733              	 .thumb_func
 734              	 .fpu softvfp
 736              	ctrl_writemem_ctrl:
 737              	.LFB195:
 156:usb.c         **** 
 157:usb.c         **** 
 158:usb.c         **** void ctrl_writemem_ctrl(void){
 738              	 .loc 3 158 0
 739              	 .cfi_startproc
 740              	 
 741              	 
 742 0000 80B5     	 push {r7,lr}
 743              	.LCFI43:
 744              	 .cfi_def_cfa_offset 8
 745              	 .cfi_offset 7,-8
 746              	 .cfi_offset 14,-4
 747 0002 84B0     	 sub sp,sp,#16
 748              	.LCFI44:
 749              	 .cfi_def_cfa_offset 24
 750 0004 00AF     	 add r7,sp,#0
 751              	.LCFI45:
 752              	 .cfi_def_cfa_register 7
 159:usb.c         ****      uint32_t buflen = *(CTRLBUFFER_WORDPTR);
 753              	 .loc 3 159 0
 754 0006 164B     	 ldr r3,.L55
 755 0008 1B68     	 ldr r3,[r3]
 756 000a BB60     	 str r3,[r7,#8]
 160:usb.c         ****      uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
 757              	 .loc 3 160 0
 758 000c 144B     	 ldr r3,.L55
 759 000e 5B68     	 ldr r3,[r3,#4]
 760 0010 7B60     	 str r3,[r7,#4]
 161:usb.c         **** 
 162:usb.c         ****      uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
 761              	 .loc 3 162 0
 762 0012 144B     	 ldr r3,.L55+4
 763 0014 3B60     	 str r3,[r7]
 163:usb.c         **** 
 164:usb.c         ****      //printf("Writing to %x, %d\n", address, buflen);
 165:usb.c         **** 
 166:usb.c         ****      FPGA_releaselock();
 764              	 .loc 3 166 0
 765 0016 144B     	 ldr r3,.L55+8
 766 0018 9847     	 blx r3
 767              	.LVL19:
 167:usb.c         ****      while(!FPGA_setlock(fpga_generic));
 768              	 .loc 3 167 0
 769 001a 00BF     	 nop
 770              	.L52:
 771              	 .loc 3 167 0 is_stmt 0 discriminator 1
 772 001c 0120     	 movs r0,#1
 773 001e 134B     	 ldr r3,.L55+12
 774 0020 9847     	 blx r3
 775              	.LVL20:
 776 0022 0346     	 mov r3,r0
 777 0024 002B     	 cmp r3,#0
 778 0026 F9D0     	 beq .L52
 168:usb.c         **** 
 169:usb.c         ****      /* Set address */
 170:usb.c         ****      FPGA_setaddr(address);
 779              	 .loc 3 170 0 is_stmt 1
 780 0028 7868     	 ldr r0,[r7,#4]
 781 002a 114B     	 ldr r3,.L55+16
 782 002c 9847     	 blx r3
 783              	.LVL21:
 784              	.LBB2:
 171:usb.c         **** 
 172:usb.c         ****      /* Start Transaction */
 173:usb.c         **** 
 174:usb.c         ****      /* Do memory write */
 175:usb.c         ****      for(unsigned int i = 0; i < buflen; i++){
 785              	 .loc 3 175 0
 786 002e 0023     	 movs r3,#0
 787 0030 FB60     	 str r3,[r7,#12]
 788 0032 0BE0     	 b .L53
 789              	.L54:
 176:usb.c         ****           xram[i] = ctrlbuf_payload[i];
 790              	 .loc 3 176 0 discriminator 3
 791 0034 0F4B     	 ldr r3,.L55+20
 792 0036 1A68     	 ldr r2,[r3]
 793 0038 FB68     	 ldr r3,[r7,#12]
 794 003a 1344     	 add r3,r3,r2
 795 003c 3968     	 ldr r1,[r7]
 796 003e FA68     	 ldr r2,[r7,#12]
 797 0040 0A44     	 add r2,r2,r1
 798 0042 1278     	 ldrb r2,[r2]
 799 0044 1A70     	 strb r2,[r3]
 175:usb.c         ****           xram[i] = ctrlbuf_payload[i];
 800              	 .loc 3 175 0 discriminator 3
 801 0046 FB68     	 ldr r3,[r7,#12]
 802 0048 0133     	 adds r3,r3,#1
 803 004a FB60     	 str r3,[r7,#12]
 804              	.L53:
 175:usb.c         ****           xram[i] = ctrlbuf_payload[i];
 805              	 .loc 3 175 0 is_stmt 0 discriminator 1
 806 004c FA68     	 ldr r2,[r7,#12]
 807 004e BB68     	 ldr r3,[r7,#8]
 808 0050 9A42     	 cmp r2,r3
 809 0052 EFD3     	 bcc .L54
 810              	.LBE2:
 177:usb.c         ****      }
 178:usb.c         **** 
 179:usb.c         ****      FPGA_releaselock();
 811              	 .loc 3 179 0 is_stmt 1
 812 0054 044B     	 ldr r3,.L55+8
 813 0056 9847     	 blx r3
 814              	.LVL22:
 180:usb.c         **** }
 815              	 .loc 3 180 0
 816 0058 00BF     	 nop
 817 005a 1037     	 adds r7,r7,#16
 818              	.LCFI46:
 819              	 .cfi_def_cfa_offset 8
 820 005c BD46     	 mov sp,r7
 821              	.LCFI47:
 822              	 .cfi_def_cfa_register 13
 823              	 
 824 005e 80BD     	 pop {r7,pc}
 825              	.L56:
 826              	 .align 2
 827              	.L55:
 828 0060 00000000 	 .word ctrlbuffer
 829 0064 08000000 	 .word ctrlbuffer+8
 830 0068 00000000 	 .word FPGA_releaselock
 831 006c 00000000 	 .word FPGA_setlock
 832 0070 00000000 	 .word FPGA_setaddr
 833 0074 00000000 	 .word xram
 834              	 .cfi_endproc
 835              	.LFE195:
 837              	 .section .bss.bulkread_address,"aw",%nobits
 838              	 .align 2
 841              	bulkread_address:
 842 0000 00000000 	 .space 4
 843              	 .section .bss.bulkread_len,"aw",%nobits
 844              	 .align 2
 847              	bulkread_len:
 848 0000 00000000 	 .space 4
 849              	 .section .text.ctrl_writemem_bulk,"ax",%progbits
 850              	 .align 1
 851              	 .global ctrl_writemem_bulk
 852              	 .syntax unified
 853              	 .thumb
 854              	 .thumb_func
 855              	 .fpu softvfp
 857              	ctrl_writemem_bulk:
 858              	.LFB196:
 181:usb.c         **** 
 182:usb.c         **** static uint32_t bulkread_address = 0;
 183:usb.c         **** static uint32_t bulkread_len = 0;
 184:usb.c         **** 
 185:usb.c         **** void ctrl_writemem_bulk(void){
 859              	 .loc 3 185 0
 860              	 .cfi_startproc
 861              	 
 862              	 
 863 0000 80B5     	 push {r7,lr}
 864              	.LCFI48:
 865              	 .cfi_def_cfa_offset 8
 866              	 .cfi_offset 7,-8
 867              	 .cfi_offset 14,-4
 868 0002 82B0     	 sub sp,sp,#8
 869              	.LCFI49:
 870              	 .cfi_def_cfa_offset 16
 871 0004 00AF     	 add r7,sp,#0
 872              	.LCFI50:
 873              	 .cfi_def_cfa_register 7
 186:usb.c         **** //uint32_t buflen = *(CTRLBUFFER_WORDPTR);
 187:usb.c         ****      uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
 874              	 .loc 3 187 0
 875 0006 094B     	 ldr r3,.L59
 876 0008 5B68     	 ldr r3,[r3,#4]
 877 000a 7B60     	 str r3,[r7,#4]
 188:usb.c         **** 
 189:usb.c         ****      // TODO: see block in
 190:usb.c         ****      FPGA_releaselock();
 878              	 .loc 3 190 0
 879 000c 084B     	 ldr r3,.L59+4
 880 000e 9847     	 blx r3
 881              	.LVL23:
 191:usb.c         ****      while(!FPGA_setlock(fpga_blockout));
 882              	 .loc 3 191 0
 883 0010 00BF     	 nop
 884              	.L58:
 885              	 .loc 3 191 0 is_stmt 0 discriminator 1
 886 0012 0420     	 movs r0,#4
 887 0014 074B     	 ldr r3,.L59+8
 888 0016 9847     	 blx r3
 889              	.LVL24:
 890 0018 0346     	 mov r3,r0
 891 001a 002B     	 cmp r3,#0
 892 001c F9D0     	 beq .L58
 192:usb.c         **** 
 193:usb.c         ****      /* Set address */
 194:usb.c         ****      FPGA_setaddr(address);
 893              	 .loc 3 194 0 is_stmt 1
 894 001e 7868     	 ldr r0,[r7,#4]
 895 0020 054B     	 ldr r3,.L59+12
 896 0022 9847     	 blx r3
 897              	.LVL25:
 195:usb.c         **** 
 196:usb.c         ****      /* Transaction done in generic callback */
 197:usb.c         **** }
 898              	 .loc 3 197 0
 899 0024 00BF     	 nop
 900 0026 0837     	 adds r7,r7,#8
 901              	.LCFI51:
 902              	 .cfi_def_cfa_offset 8
 903 0028 BD46     	 mov sp,r7
 904              	.LCFI52:
 905              	 .cfi_def_cfa_register 13
 906              	 
 907 002a 80BD     	 pop {r7,pc}
 908              	.L60:
 909              	 .align 2
 910              	.L59:
 911 002c 00000000 	 .word ctrlbuffer
 912 0030 00000000 	 .word FPGA_releaselock
 913 0034 00000000 	 .word FPGA_setlock
 914 0038 00000000 	 .word FPGA_setaddr
 915              	 .cfi_endproc
 916              	.LFE196:
 918              	 .section .text.ctrl_sam3ucfg_cb,"ax",%progbits
 919              	 .align 1
 920              	 .syntax unified
 921              	 .thumb
 922              	 .thumb_func
 923              	 .fpu softvfp
 925              	ctrl_sam3ucfg_cb:
 926              	.LFB197:
 198:usb.c         **** 
 199:usb.c         **** static void ctrl_sam3ucfg_cb(void)
 200:usb.c         **** {
 927              	 .loc 3 200 0
 928              	 .cfi_startproc
 929              	 
 930              	 
 931 0000 80B5     	 push {r7,lr}
 932              	.LCFI53:
 933              	 .cfi_def_cfa_offset 8
 934              	 .cfi_offset 7,-8
 935              	 .cfi_offset 14,-4
 936 0002 00AF     	 add r7,sp,#0
 937              	.LCFI54:
 938              	 .cfi_def_cfa_register 7
 201:usb.c         ****      switch(udd_g_ctrlreq.req.wValue & 0xFF)
 939              	 .loc 3 201 0
 940 0004 0D4B     	 ldr r3,.L68
 941 0006 5B88     	 ldrh r3,[r3,#2]
 942 0008 DBB2     	 uxtb r3,r3
 943 000a 022B     	 cmp r3,#2
 944 000c 0ED0     	 beq .L63
 945 000e 032B     	 cmp r3,#3
 946 0010 10D0     	 beq .L67
 947 0012 012B     	 cmp r3,#1
 948 0014 00D0     	 beq .L65
 202:usb.c         ****      {
 203:usb.c         ****           /* Turn on slow clock */
 204:usb.c         ****      case 0x01:
 205:usb.c         ****           osc_enable(OSC_MAINCK_XTAL);
 206:usb.c         ****           osc_wait_ready(OSC_MAINCK_XTAL);
 207:usb.c         ****           pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
 208:usb.c         ****           break;
 209:usb.c         **** 
 210:usb.c         ****           /* Turn off slow clock */
 211:usb.c         ****      case 0x02:
 212:usb.c         ****           pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
 213:usb.c         ****           break;
 214:usb.c         **** 
 215:usb.c         ****           /* Jump to ROM-resident bootloader */
 216:usb.c         ****      case 0x03:
 217:usb.c         ****           /* Turn off connected stuff */
 218:usb.c         **** 
 219:usb.c         ****           /* Disconnect USB (will kill stuff) */
 220:usb.c         **** 
 221:usb.c         ****           /* Make the jump */
 222:usb.c         ****           break;
 223:usb.c         **** 
 224:usb.c         ****           /* Oh well, sucks to be you */
 225:usb.c         ****      default:
 226:usb.c         ****           break;
 949              	 .loc 3 226 0
 950 0016 0EE0     	 b .L66
 951              	.L65:
 205:usb.c         ****           osc_wait_ready(OSC_MAINCK_XTAL);
 952              	 .loc 3 205 0
 953 0018 0620     	 movs r0,#6
 954 001a 094B     	 ldr r3,.L68+4
 955 001c 9847     	 blx r3
 956              	.LVL26:
 206:usb.c         ****           pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
 957              	 .loc 3 206 0
 958 001e 0620     	 movs r0,#6
 959 0020 084B     	 ldr r3,.L68+8
 960 0022 9847     	 blx r3
 961              	.LVL27:
 207:usb.c         ****           break;
 962              	 .loc 3 207 0
 963 0024 1020     	 movs r0,#16
 964 0026 084B     	 ldr r3,.L68+12
 965 0028 9847     	 blx r3
 966              	.LVL28:
 208:usb.c         **** 
 967              	 .loc 3 208 0
 968 002a 04E0     	 b .L66
 969              	.L63:
 212:usb.c         ****           break;
 970              	 .loc 3 212 0
 971 002c 1020     	 movs r0,#16
 972 002e 074B     	 ldr r3,.L68+16
 973 0030 9847     	 blx r3
 974              	.LVL29:
 213:usb.c         **** 
 975              	 .loc 3 213 0
 976 0032 00E0     	 b .L66
 977              	.L67:
 222:usb.c         **** 
 978              	 .loc 3 222 0
 979 0034 00BF     	 nop
 980              	.L66:
 227:usb.c         ****      }
 228:usb.c         **** }
 981              	 .loc 3 228 0
 982 0036 00BF     	 nop
 983 0038 80BD     	 pop {r7,pc}
 984              	.L69:
 985 003a 00BF     	 .align 2
 986              	.L68:
 987 003c 00000000 	 .word udd_g_ctrlreq
 988 0040 00000000 	 .word osc_enable
 989 0044 00000000 	 .word osc_wait_ready
 990 0048 00000000 	 .word pmc_switch_mck_to_mainck
 991 004c 00000000 	 .word pmc_switch_mck_to_pllack
 992              	 .cfi_endproc
 993              	.LFE197:
 995              	 .section .text.ctrl_progfpga_bulk,"ax",%progbits
 996              	 .align 1
 997              	 .global ctrl_progfpga_bulk
 998              	 .syntax unified
 999              	 .thumb
 1000              	 .thumb_func
 1001              	 .fpu softvfp
 1003              	ctrl_progfpga_bulk:
 1004              	.LFB198:
 229:usb.c         **** 
 230:usb.c         **** void ctrl_progfpga_bulk(void){
 1005              	 .loc 3 230 0
 1006              	 .cfi_startproc
 1007              	 
 1008              	 
 1009 0000 80B5     	 push {r7,lr}
 1010              	.LCFI55:
 1011              	 .cfi_def_cfa_offset 8
 1012              	 .cfi_offset 7,-8
 1013              	 .cfi_offset 14,-4
 1014 0002 00AF     	 add r7,sp,#0
 1015              	.LCFI56:
 1016              	 .cfi_def_cfa_register 7
 231:usb.c         **** 
 232:usb.c         ****      switch(udd_g_ctrlreq.req.wValue){
 1017              	 .loc 3 232 0
 1018 0004 0B4B     	 ldr r3,.L76
 1019 0006 5B88     	 ldrh r3,[r3,#2]
 1020 0008 A12B     	 cmp r3,#161
 1021 000a 07D0     	 beq .L72
 1022 000c A22B     	 cmp r3,#162
 1023 000e 0BD0     	 beq .L73
 1024 0010 A02B     	 cmp r3,#160
 1025 0012 00D0     	 beq .L74
 233:usb.c         ****      case 0xA0:
 234:usb.c         ****           fpga_program_setup1();
 235:usb.c         ****           break;
 236:usb.c         **** 
 237:usb.c         ****      case 0xA1:
 238:usb.c         ****           /* Waiting on data... */
 239:usb.c         ****           fpga_program_setup2();
 240:usb.c         ****           blockendpoint_usage = bep_fpgabitstream;
 241:usb.c         ****           break;
 242:usb.c         **** 
 243:usb.c         ****      case 0xA2:
 244:usb.c         ****           /* Done */
 245:usb.c         ****           blockendpoint_usage = bep_emem;
 246:usb.c         ****           break;
 247:usb.c         **** 
 248:usb.c         ****      default:
 249:usb.c         ****           break;
 1026              	 .loc 3 249 0
 1027 0014 0CE0     	 b .L75
 1028              	.L74:
 234:usb.c         ****           break;
 1029              	 .loc 3 234 0
 1030 0016 084B     	 ldr r3,.L76+4
 1031 0018 9847     	 blx r3
 1032              	.LVL30:
 235:usb.c         **** 
 1033              	 .loc 3 235 0
 1034 001a 09E0     	 b .L75
 1035              	.L72:
 239:usb.c         ****           blockendpoint_usage = bep_fpgabitstream;
 1036              	 .loc 3 239 0
 1037 001c 074B     	 ldr r3,.L76+8
 1038 001e 9847     	 blx r3
 1039              	.LVL31:
 240:usb.c         ****           break;
 1040              	 .loc 3 240 0
 1041 0020 074B     	 ldr r3,.L76+12
 1042 0022 0A22     	 movs r2,#10
 1043 0024 1A70     	 strb r2,[r3]
 241:usb.c         **** 
 1044              	 .loc 3 241 0
 1045 0026 03E0     	 b .L75
 1046              	.L73:
 245:usb.c         ****           break;
 1047              	 .loc 3 245 0
 1048 0028 054B     	 ldr r3,.L76+12
 1049 002a 0022     	 movs r2,#0
 1050 002c 1A70     	 strb r2,[r3]
 246:usb.c         **** 
 1051              	 .loc 3 246 0
 1052 002e 00BF     	 nop
 1053              	.L75:
 250:usb.c         ****      }
 251:usb.c         **** }
 1054              	 .loc 3 251 0
 1055 0030 00BF     	 nop
 1056 0032 80BD     	 pop {r7,pc}
 1057              	.L77:
 1058              	 .align 2
 1059              	.L76:
 1060 0034 00000000 	 .word udd_g_ctrlreq
 1061 0038 00000000 	 .word fpga_program_setup1
 1062 003c 00000000 	 .word fpga_program_setup2
 1063 0040 00000000 	 .word blockendpoint_usage
 1064              	 .cfi_endproc
 1065              	.LFE198:
 1067              	 .section .text.main_setup_out_received,"ax",%progbits
 1068              	 .align 1
 1069              	 .global main_setup_out_received
 1070              	 .syntax unified
 1071              	 .thumb
 1072              	 .thumb_func
 1073              	 .fpu softvfp
 1075              	main_setup_out_received:
 1076              	.LFB199:
 252:usb.c         **** 
 253:usb.c         **** bool main_setup_out_received(void)
 254:usb.c         **** {
 1077              	 .loc 3 254 0
 1078              	 .cfi_startproc
 1079              	 
 1080              	 
 1081 0000 80B5     	 push {r7,lr}
 1082              	.LCFI57:
 1083              	 .cfi_def_cfa_offset 8
 1084              	 .cfi_offset 7,-8
 1085              	 .cfi_offset 14,-4
 1086 0002 00AF     	 add r7,sp,#0
 1087              	.LCFI58:
 1088              	 .cfi_def_cfa_register 7
 255:usb.c         ****      //Add buffer if used
 256:usb.c         ****      udd_g_ctrlreq.payload = ctrlbuffer;
 1089              	 .loc 3 256 0
 1090 0004 304B     	 ldr r3,.L96
 1091 0006 314A     	 ldr r2,.L96+4
 1092 0008 9A60     	 str r2,[r3,#8]
 257:usb.c         ****      udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
 1093              	 .loc 3 257 0
 1094 000a 2F4B     	 ldr r3,.L96
 1095 000c DB88     	 ldrh r3,[r3,#6]
 1096 000e 402B     	 cmp r3,#64
 1097 0010 28BF     	 it cs
 1098 0012 4023     	 movcs r3,#64
 1099 0014 9AB2     	 uxth r2,r3
 1100 0016 2C4B     	 ldr r3,.L96
 1101 0018 9A81     	 strh r2,[r3,#12]
 258:usb.c         **** 
 259:usb.c         ****      blockendpoint_usage = bep_emem;
 1102              	 .loc 3 259 0
 1103 001a 2D4B     	 ldr r3,.L96+8
 1104 001c 0022     	 movs r2,#0
 1105 001e 1A70     	 strb r2,[r3]
 260:usb.c         ****      static uint8_t  respbuf[128];
 261:usb.c         ****      switch(udd_g_ctrlreq.req.bRequest){
 1106              	 .loc 3 261 0
 1107 0020 294B     	 ldr r3,.L96
 1108 0022 5B78     	 ldrb r3,[r3,#1]
 1109 0024 103B     	 subs r3,r3,#16
 1110 0026 062B     	 cmp r3,#6
 1111 0028 41D8     	 bhi .L79
 1112 002a 01A2     	 adr r2,.L81
 1113 002c 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1114              	 .p2align 2
 1115              	.L81:
 1116 0030 4D000000 	 .word .L80+1
 1117 0034 79000000 	 .word .L82+1
 1118 0038 63000000 	 .word .L83+1
 1119 003c 8F000000 	 .word .L84+1
 1120 0040 AF000000 	 .word .L79+1
 1121 0044 AF000000 	 .word .L79+1
 1122 0048 A5000000 	 .word .L85+1
 1123              	 .p2align 1
 1124              	.L80:
 262:usb.c         ****           /* Memory Read */
 263:usb.c         ****      case REQ_MEMREAD_BULK:
 264:usb.c         ****           if (FPGA_setlock(fpga_usblocked)){
 1125              	 .loc 3 264 0
 1126 004c 0620     	 movs r0,#6
 1127 004e 214B     	 ldr r3,.L96+12
 1128 0050 9847     	 blx r3
 1129              	.LVL32:
 1130 0052 0346     	 mov r3,r0
 1131 0054 002B     	 cmp r3,#0
 1132 0056 2CD0     	 beq .L92
 265:usb.c         ****                udd_g_ctrlreq.callback = ctrl_readmem_bulk;
 1133              	 .loc 3 265 0
 1134 0058 1B4B     	 ldr r3,.L96
 1135 005a 1F4A     	 ldr r2,.L96+16
 1136 005c 1A61     	 str r2,[r3,#16]
 266:usb.c         ****                return true;
 1137              	 .loc 3 266 0
 1138 005e 0123     	 movs r3,#1
 1139 0060 2FE0     	 b .L87
 1140              	.L83:
 267:usb.c         ****           }
 268:usb.c         ****           break;
 269:usb.c         ****      case REQ_MEMREAD_CTRL:
 270:usb.c         ****           if (FPGA_setlock(fpga_usblocked)){
 1141              	 .loc 3 270 0
 1142 0062 0620     	 movs r0,#6
 1143 0064 1B4B     	 ldr r3,.L96+12
 1144 0066 9847     	 blx r3
 1145              	.LVL33:
 1146 0068 0346     	 mov r3,r0
 1147 006a 002B     	 cmp r3,#0
 1148 006c 23D0     	 beq .L93
 271:usb.c         ****                udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
 1149              	 .loc 3 271 0
 1150 006e 164B     	 ldr r3,.L96
 1151 0070 1A4A     	 ldr r2,.L96+20
 1152 0072 1A61     	 str r2,[r3,#16]
 272:usb.c         ****                return true;
 1153              	 .loc 3 272 0
 1154 0074 0123     	 movs r3,#1
 1155 0076 24E0     	 b .L87
 1156              	.L82:
 273:usb.c         ****           }
 274:usb.c         ****           break;
 275:usb.c         **** 
 276:usb.c         **** 
 277:usb.c         ****           /* Memory Write */
 278:usb.c         ****      case REQ_MEMWRITE_BULK:
 279:usb.c         ****           if (FPGA_setlock(fpga_usblocked)){
 1157              	 .loc 3 279 0
 1158 0078 0620     	 movs r0,#6
 1159 007a 164B     	 ldr r3,.L96+12
 1160 007c 9847     	 blx r3
 1161              	.LVL34:
 1162 007e 0346     	 mov r3,r0
 1163 0080 002B     	 cmp r3,#0
 1164 0082 1AD0     	 beq .L94
 280:usb.c         ****                udd_g_ctrlreq.callback = ctrl_writemem_bulk;
 1165              	 .loc 3 280 0
 1166 0084 104B     	 ldr r3,.L96
 1167 0086 164A     	 ldr r2,.L96+24
 1168 0088 1A61     	 str r2,[r3,#16]
 281:usb.c         ****                return true;
 1169              	 .loc 3 281 0
 1170 008a 0123     	 movs r3,#1
 1171 008c 19E0     	 b .L87
 1172              	.L84:
 282:usb.c         ****           }
 283:usb.c         ****           break;
 284:usb.c         **** 
 285:usb.c         **** 
 286:usb.c         ****      case REQ_MEMWRITE_CTRL:
 287:usb.c         ****           if (FPGA_setlock(fpga_usblocked)){
 1173              	 .loc 3 287 0
 1174 008e 0620     	 movs r0,#6
 1175 0090 104B     	 ldr r3,.L96+12
 1176 0092 9847     	 blx r3
 1177              	.LVL35:
 1178 0094 0346     	 mov r3,r0
 1179 0096 002B     	 cmp r3,#0
 1180 0098 11D0     	 beq .L95
 288:usb.c         ****                udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
 1181              	 .loc 3 288 0
 1182 009a 0B4B     	 ldr r3,.L96
 1183 009c 114A     	 ldr r2,.L96+28
 1184 009e 1A61     	 str r2,[r3,#16]
 289:usb.c         ****                return true;
 1185              	 .loc 3 289 0
 1186 00a0 0123     	 movs r3,#1
 1187 00a2 0EE0     	 b .L87
 1188              	.L85:
 290:usb.c         ****           }
 291:usb.c         ****           break;
 292:usb.c         **** 
 293:usb.c         ****      case REQ_FPGA_PROGRAM:
 294:usb.c         ****           udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
 1189              	 .loc 3 294 0
 1190 00a4 084B     	 ldr r3,.L96
 1191 00a6 104A     	 ldr r2,.L96+32
 1192 00a8 1A61     	 str r2,[r3,#16]
 295:usb.c         ****           return true;
 1193              	 .loc 3 295 0
 1194 00aa 0123     	 movs r3,#1
 1195 00ac 09E0     	 b .L87
 1196              	.L79:
 296:usb.c         ****      default:
 297:usb.c         ****           return false;
 1197              	 .loc 3 297 0
 1198 00ae 0023     	 movs r3,#0
 1199 00b0 07E0     	 b .L87
 1200              	.L92:
 268:usb.c         ****      case REQ_MEMREAD_CTRL:
 1201              	 .loc 3 268 0
 1202 00b2 00BF     	 nop
 1203 00b4 04E0     	 b .L88
 1204              	.L93:
 274:usb.c         **** 
 1205              	 .loc 3 274 0
 1206 00b6 00BF     	 nop
 1207 00b8 02E0     	 b .L88
 1208              	.L94:
 283:usb.c         **** 
 1209              	 .loc 3 283 0
 1210 00ba 00BF     	 nop
 1211 00bc 00E0     	 b .L88
 1212              	.L95:
 291:usb.c         **** 
 1213              	 .loc 3 291 0
 1214 00be 00BF     	 nop
 1215              	.L88:
 298:usb.c         ****      }
 299:usb.c         **** 
 300:usb.c         ****      return false;
 1216              	 .loc 3 300 0
 1217 00c0 0023     	 movs r3,#0
 1218              	.L87:
 301:usb.c         **** }
 1219              	 .loc 3 301 0
 1220 00c2 1846     	 mov r0,r3
 1221 00c4 80BD     	 pop {r7,pc}
 1222              	.L97:
 1223 00c6 00BF     	 .align 2
 1224              	.L96:
 1225 00c8 00000000 	 .word udd_g_ctrlreq
 1226 00cc 00000000 	 .word ctrlbuffer
 1227 00d0 00000000 	 .word blockendpoint_usage
 1228 00d4 00000000 	 .word FPGA_setlock
 1229 00d8 00000000 	 .word ctrl_readmem_bulk
 1230 00dc 00000000 	 .word ctrl_readmem_ctrl
 1231 00e0 00000000 	 .word ctrl_writemem_bulk
 1232 00e4 00000000 	 .word ctrl_writemem_ctrl
 1233 00e8 00000000 	 .word ctrl_progfpga_bulk
 1234              	 .cfi_endproc
 1235              	.LFE199:
 1237              	 .section .text.main_setup_in_received,"ax",%progbits
 1238              	 .align 1
 1239              	 .global main_setup_in_received
 1240              	 .syntax unified
 1241              	 .thumb
 1242              	 .thumb_func
 1243              	 .fpu softvfp
 1245              	main_setup_in_received:
 1246              	.LFB200:
 302:usb.c         **** 
 303:usb.c         **** 
 304:usb.c         **** /*
 305:usb.c         ****   udd_g_ctrlreq.req.bRequest == 0
 306:usb.c         ****   && (udd_g_ctrlreq.req.bRequest == 0)
 307:usb.c         ****   && (0 != udd_g_ctrlreq.req.wLength)
 308:usb.c         **** */
 309:usb.c         **** 
 310:usb.c         **** bool main_setup_in_received(void)
 311:usb.c         **** {
 1247              	 .loc 3 311 0
 1248              	 .cfi_startproc
 1249              	 
 1250              	 
 1251 0000 80B5     	 push {r7,lr}
 1252              	.LCFI59:
 1253              	 .cfi_def_cfa_offset 8
 1254              	 .cfi_offset 7,-8
 1255              	 .cfi_offset 14,-4
 1256 0002 00AF     	 add r7,sp,#0
 1257              	.LCFI60:
 1258              	 .cfi_def_cfa_register 7
 312:usb.c         ****      /*
 313:usb.c         ****        udd_g_ctrlreq.payload = main_buf_loopback;
 314:usb.c         ****        udd_g_ctrlreq.payload_size =
 315:usb.c         ****        min( udd_g_ctrlreq.req.wLength,
 316:usb.c         ****        sizeof(main_buf_loopback) );
 317:usb.c         ****      */
 318:usb.c         **** 
 319:usb.c         ****      static uint8_t  respbuf[64];
 320:usb.c         ****      unsigned int cnt;
 321:usb.c         **** 
 322:usb.c         ****      switch(udd_g_ctrlreq.req.bRequest){
 1259              	 .loc 3 322 0
 1260 0004 274B     	 ldr r3,.L106
 1261 0006 5B78     	 ldrb r3,[r3,#1]
 1262 0008 152B     	 cmp r3,#21
 1263 000a 2AD0     	 beq .L100
 1264 000c 172B     	 cmp r3,#23
 1265 000e 17D0     	 beq .L101
 1266 0010 122B     	 cmp r3,#18
 1267 0012 43D1     	 bne .L105
 323:usb.c         ****      case REQ_MEMREAD_CTRL:
 324:usb.c         ****           udd_g_ctrlreq.payload = ctrlmemread_buf;
 1268              	 .loc 3 324 0
 1269 0014 244B     	 ldr r3,.L106+4
 1270 0016 1B68     	 ldr r3,[r3]
 1271 0018 224A     	 ldr r2,.L106
 1272 001a 9360     	 str r3,[r2,#8]
 325:usb.c         ****           udd_g_ctrlreq.payload_size = ctrlmemread_size;
 1273              	 .loc 3 325 0
 1274 001c 234B     	 ldr r3,.L106+8
 1275 001e 1B68     	 ldr r3,[r3]
 1276 0020 9AB2     	 uxth r2,r3
 1277 0022 204B     	 ldr r3,.L106
 1278 0024 9A81     	 strh r2,[r3,#12]
 326:usb.c         ****           ctrlmemread_size = 0;
 1279              	 .loc 3 326 0
 1280 0026 214B     	 ldr r3,.L106+8
 1281 0028 0022     	 movs r2,#0
 1282 002a 1A60     	 str r2,[r3]
 327:usb.c         **** 
 328:usb.c         ****           if (FPGA_lockstatus() == fpga_ctrlmem){
 1283              	 .loc 3 328 0
 1284 002c 204B     	 ldr r3,.L106+12
 1285 002e 9847     	 blx r3
 1286              	.LVL36:
 1287 0030 0346     	 mov r3,r0
 1288 0032 052B     	 cmp r3,#5
 1289 0034 02D1     	 bne .L103
 329:usb.c         ****                FPGA_setlock(fpga_unlocked);
 1290              	 .loc 3 329 0
 1291 0036 0020     	 movs r0,#0
 1292 0038 1E4B     	 ldr r3,.L106+16
 1293 003a 9847     	 blx r3
 1294              	.LVL37:
 1295              	.L103:
 330:usb.c         ****           }
 331:usb.c         **** 
 332:usb.c         ****           return true;
 1296              	 .loc 3 332 0
 1297 003c 0123     	 movs r3,#1
 1298 003e 2EE0     	 b .L104
 1299              	.L101:
 333:usb.c         ****           break;
 334:usb.c         **** 
 335:usb.c         ****      case REQ_FW_VERSION:
 336:usb.c         ****           respbuf[0] = FW_VER_MAJOR;
 1300              	 .loc 3 336 0
 1301 0040 1D4B     	 ldr r3,.L106+20
 1302 0042 0022     	 movs r2,#0
 1303 0044 1A70     	 strb r2,[r3]
 337:usb.c         ****           respbuf[1] = FW_VER_MINOR;
 1304              	 .loc 3 337 0
 1305 0046 1C4B     	 ldr r3,.L106+20
 1306 0048 0A22     	 movs r2,#10
 1307 004a 5A70     	 strb r2,[r3,#1]
 338:usb.c         ****           respbuf[2] = FW_VER_DEBUG;
 1308              	 .loc 3 338 0
 1309 004c 1A4B     	 ldr r3,.L106+20
 1310 004e 0022     	 movs r2,#0
 1311 0050 9A70     	 strb r2,[r3,#2]
 339:usb.c         ****           udd_g_ctrlreq.payload = respbuf;
 1312              	 .loc 3 339 0
 1313 0052 144B     	 ldr r3,.L106
 1314 0054 184A     	 ldr r2,.L106+20
 1315 0056 9A60     	 str r2,[r3,#8]
 340:usb.c         ****           udd_g_ctrlreq.payload_size = 3;
 1316              	 .loc 3 340 0
 1317 0058 124B     	 ldr r3,.L106
 1318 005a 0322     	 movs r2,#3
 1319 005c 9A81     	 strh r2,[r3,#12]
 341:usb.c         ****           return true;
 1320              	 .loc 3 341 0
 1321 005e 0123     	 movs r3,#1
 1322 0060 1DE0     	 b .L104
 1323              	.L100:
 342:usb.c         ****           break;
 343:usb.c         **** 
 344:usb.c         ****      case REQ_FPGA_STATUS:
 345:usb.c         ****           respbuf[0] = FPGA_ISDONE();
 1324              	 .loc 3 345 0
 1325 0062 1320     	 movs r0,#19
 1326 0064 154B     	 ldr r3,.L106+24
 1327 0066 9847     	 blx r3
 1328              	.LVL38:
 1329 0068 0346     	 mov r3,r0
 1330 006a 002B     	 cmp r3,#0
 1331 006c 14BF     	 ite ne
 1332 006e 0123     	 movne r3,#1
 1333 0070 0023     	 moveq r3,#0
 1334 0072 DBB2     	 uxtb r3,r3
 1335 0074 1A46     	 mov r2,r3
 1336 0076 104B     	 ldr r3,.L106+20
 1337 0078 1A70     	 strb r2,[r3]
 346:usb.c         ****           respbuf[1] = 0;
 1338              	 .loc 3 346 0
 1339 007a 0F4B     	 ldr r3,.L106+20
 1340 007c 0022     	 movs r2,#0
 1341 007e 5A70     	 strb r2,[r3,#1]
 347:usb.c         ****           respbuf[2] = 0;
 1342              	 .loc 3 347 0
 1343 0080 0D4B     	 ldr r3,.L106+20
 1344 0082 0022     	 movs r2,#0
 1345 0084 9A70     	 strb r2,[r3,#2]
 348:usb.c         ****           respbuf[3] = 0;
 1346              	 .loc 3 348 0
 1347 0086 0C4B     	 ldr r3,.L106+20
 1348 0088 0022     	 movs r2,#0
 1349 008a DA70     	 strb r2,[r3,#3]
 349:usb.c         ****           udd_g_ctrlreq.payload = respbuf;
 1350              	 .loc 3 349 0
 1351 008c 054B     	 ldr r3,.L106
 1352 008e 0A4A     	 ldr r2,.L106+20
 1353 0090 9A60     	 str r2,[r3,#8]
 350:usb.c         ****           udd_g_ctrlreq.payload_size = 4;
 1354              	 .loc 3 350 0
 1355 0092 044B     	 ldr r3,.L106
 1356 0094 0422     	 movs r2,#4
 1357 0096 9A81     	 strh r2,[r3,#12]
 351:usb.c         ****           return true;
 1358              	 .loc 3 351 0
 1359 0098 0123     	 movs r3,#1
 1360 009a 00E0     	 b .L104
 1361              	.L105:
 352:usb.c         ****           break;
 353:usb.c         ****      default:
 354:usb.c         ****           return false;
 1362              	 .loc 3 354 0
 1363 009c 0023     	 movs r3,#0
 1364              	.L104:
 355:usb.c         ****      }
 356:usb.c         ****      return false;
 357:usb.c         **** }
 1365              	 .loc 3 357 0
 1366 009e 1846     	 mov r0,r3
 1367 00a0 80BD     	 pop {r7,pc}
 1368              	.L107:
 1369 00a2 00BF     	 .align 2
 1370              	.L106:
 1371 00a4 00000000 	 .word udd_g_ctrlreq
 1372 00a8 00000000 	 .word ctrlmemread_buf
 1373 00ac 00000000 	 .word ctrlmemread_size
 1374 00b0 00000000 	 .word FPGA_lockstatus
 1375 00b4 00000000 	 .word FPGA_setlock
 1376 00b8 00000000 	 .word respbuf.9168
 1377 00bc 00000000 	 .word pio_get_pin_value
 1378              	 .cfi_endproc
 1379              	.LFE200:
 1381              	 .section .text.main_vendor_bulk_in_received,"ax",%progbits
 1382              	 .align 1
 1383              	 .global main_vendor_bulk_in_received
 1384              	 .syntax unified
 1385              	 .thumb
 1386              	 .thumb_func
 1387              	 .fpu softvfp
 1389              	main_vendor_bulk_in_received:
 1390              	.LFB201:
 358:usb.c         **** 
 359:usb.c         **** void main_vendor_bulk_in_received(udd_ep_status_t status,
 360:usb.c         ****                                   iram_size_t nb_transfered, udd_ep_id_t ep)
 361:usb.c         **** {
 1391              	 .loc 3 361 0
 1392              	 .cfi_startproc
 1393              	 
 1394              	 
 1395 0000 80B5     	 push {r7,lr}
 1396              	.LCFI61:
 1397              	 .cfi_def_cfa_offset 8
 1398              	 .cfi_offset 7,-8
 1399              	 .cfi_offset 14,-4
 1400 0002 82B0     	 sub sp,sp,#8
 1401              	.LCFI62:
 1402              	 .cfi_def_cfa_offset 16
 1403 0004 00AF     	 add r7,sp,#0
 1404              	.LCFI63:
 1405              	 .cfi_def_cfa_register 7
 1406 0006 0346     	 mov r3,r0
 1407 0008 3960     	 str r1,[r7]
 1408 000a FB71     	 strb r3,[r7,#7]
 1409 000c 1346     	 mov r3,r2
 1410 000e BB71     	 strb r3,[r7,#6]
 362:usb.c         ****      UNUSED(nb_transfered);
 363:usb.c         ****      UNUSED(ep);
 364:usb.c         ****      if (UDD_EP_TRANSFER_OK != status) {
 1411              	 .loc 3 364 0
 1412 0010 FB79     	 ldrb r3,[r7,#7]
 1413 0012 002B     	 cmp r3,#0
 1414 0014 08D1     	 bne .L111
 365:usb.c         ****           return; // Transfer aborted/error
 366:usb.c         ****      }
 367:usb.c         **** 
 368:usb.c         ****      if (FPGA_lockstatus() == fpga_blockin){
 1415              	 .loc 3 368 0
 1416 0016 064B     	 ldr r3,.L112
 1417 0018 9847     	 blx r3
 1418              	.LVL39:
 1419 001a 0346     	 mov r3,r0
 1420 001c 022B     	 cmp r3,#2
 1421 001e 04D1     	 bne .L108
 369:usb.c         ****           FPGA_setlock(fpga_unlocked);
 1422              	 .loc 3 369 0
 1423 0020 0020     	 movs r0,#0
 1424 0022 044B     	 ldr r3,.L112+4
 1425 0024 9847     	 blx r3
 1426              	.LVL40:
 1427 0026 00E0     	 b .L108
 1428              	.L111:
 365:usb.c         ****           return; // Transfer aborted/error
 1429              	 .loc 3 365 0
 1430 0028 00BF     	 nop
 1431              	.L108:
 370:usb.c         ****      }
 371:usb.c         **** }
 1432              	 .loc 3 371 0
 1433 002a 0837     	 adds r7,r7,#8
 1434              	.LCFI64:
 1435              	 .cfi_def_cfa_offset 8
 1436 002c BD46     	 mov sp,r7
 1437              	.LCFI65:
 1438              	 .cfi_def_cfa_register 13
 1439              	 
 1440 002e 80BD     	 pop {r7,pc}
 1441              	.L113:
 1442              	 .align 2
 1443              	.L112:
 1444 0030 00000000 	 .word FPGA_lockstatus
 1445 0034 00000000 	 .word FPGA_setlock
 1446              	 .cfi_endproc
 1447              	.LFE201:
 1449              	 .section .text.main_vendor_bulk_out_received,"ax",%progbits
 1450              	 .align 1
 1451              	 .global main_vendor_bulk_out_received
 1452              	 .syntax unified
 1453              	 .thumb
 1454              	 .thumb_func
 1455              	 .fpu softvfp
 1457              	main_vendor_bulk_out_received:
 1458              	.LFB202:
 372:usb.c         **** 
 373:usb.c         **** void main_vendor_bulk_out_received(udd_ep_status_t status,
 374:usb.c         ****                                    iram_size_t nb_transfered, udd_ep_id_t ep)
 375:usb.c         **** {
 1459              	 .loc 3 375 0
 1460              	 .cfi_startproc
 1461              	 
 1462              	 
 1463 0000 80B5     	 push {r7,lr}
 1464              	.LCFI66:
 1465              	 .cfi_def_cfa_offset 8
 1466              	 .cfi_offset 7,-8
 1467              	 .cfi_offset 14,-4
 1468 0002 84B0     	 sub sp,sp,#16
 1469              	.LCFI67:
 1470              	 .cfi_def_cfa_offset 24
 1471 0004 00AF     	 add r7,sp,#0
 1472              	.LCFI68:
 1473              	 .cfi_def_cfa_register 7
 1474 0006 0346     	 mov r3,r0
 1475 0008 3960     	 str r1,[r7]
 1476 000a FB71     	 strb r3,[r7,#7]
 1477 000c 1346     	 mov r3,r2
 1478 000e BB71     	 strb r3,[r7,#6]
 376:usb.c         ****      UNUSED(ep);
 377:usb.c         ****      if (UDD_EP_TRANSFER_OK != status) {
 1479              	 .loc 3 377 0
 1480 0010 FB79     	 ldrb r3,[r7,#7]
 1481 0012 002B     	 cmp r3,#0
 1482 0014 06D0     	 beq .L115
 378:usb.c         ****           // Transfer aborted
 379:usb.c         **** 
 380:usb.c         ****           //restart
 381:usb.c         ****           udi_vendor_bulk_out_run(
 1483              	 .loc 3 381 0
 1484 0016 224A     	 ldr r2,.L124
 1485 0018 4FF48061 	 mov r1,#1024
 1486 001c 2148     	 ldr r0,.L124+4
 1487 001e 224B     	 ldr r3,.L124+8
 1488 0020 9847     	 blx r3
 1489              	.LVL41:
 382:usb.c         ****                main_buf_loopback,
 383:usb.c         ****                sizeof(main_buf_loopback),
 384:usb.c         ****                main_vendor_bulk_out_received);
 385:usb.c         **** 
 386:usb.c         ****           return;
 1490              	 .loc 3 386 0
 1491 0022 39E0     	 b .L114
 1492              	.L115:
 387:usb.c         ****      }
 388:usb.c         **** 
 389:usb.c         ****      if (blockendpoint_usage == bep_emem){
 1493              	 .loc 3 389 0
 1494 0024 214B     	 ldr r3,.L124+12
 1495 0026 1B78     	 ldrb r3,[r3]
 1496 0028 002B     	 cmp r3,#0
 1497 002a 1AD1     	 bne .L117
 1498              	.LBB3:
 390:usb.c         ****           for(unsigned int i = 0; i < nb_transfered; i++){
 1499              	 .loc 3 390 0
 1500 002c 0023     	 movs r3,#0
 1501 002e FB60     	 str r3,[r7,#12]
 1502 0030 0BE0     	 b .L118
 1503              	.L119:
 391:usb.c         ****                xram[i] = main_buf_loopback[i];
 1504              	 .loc 3 391 0 discriminator 3
 1505 0032 1F4B     	 ldr r3,.L124+16
 1506 0034 1A68     	 ldr r2,[r3]
 1507 0036 FB68     	 ldr r3,[r7,#12]
 1508 0038 1344     	 add r3,r3,r2
 1509 003a 1A49     	 ldr r1,.L124+4
 1510 003c FA68     	 ldr r2,[r7,#12]
 1511 003e 0A44     	 add r2,r2,r1
 1512 0040 1278     	 ldrb r2,[r2]
 1513 0042 1A70     	 strb r2,[r3]
 390:usb.c         ****           for(unsigned int i = 0; i < nb_transfered; i++){
 1514              	 .loc 3 390 0 discriminator 3
 1515 0044 FB68     	 ldr r3,[r7,#12]
 1516 0046 0133     	 adds r3,r3,#1
 1517 0048 FB60     	 str r3,[r7,#12]
 1518              	.L118:
 390:usb.c         ****           for(unsigned int i = 0; i < nb_transfered; i++){
 1519              	 .loc 3 390 0 is_stmt 0 discriminator 1
 1520 004a FA68     	 ldr r2,[r7,#12]
 1521 004c 3B68     	 ldr r3,[r7]
 1522 004e 9A42     	 cmp r2,r3
 1523 0050 EFD3     	 bcc .L119
 1524              	.LBE3:
 392:usb.c         ****           }
 393:usb.c         **** 
 394:usb.c         ****           if (FPGA_lockstatus() == fpga_blockout){
 1525              	 .loc 3 394 0 is_stmt 1
 1526 0052 184B     	 ldr r3,.L124+20
 1527 0054 9847     	 blx r3
 1528              	.LVL42:
 1529 0056 0346     	 mov r3,r0
 1530 0058 042B     	 cmp r3,#4
 1531 005a 17D1     	 bne .L121
 395:usb.c         ****                FPGA_releaselock();
 1532              	 .loc 3 395 0
 1533 005c 164B     	 ldr r3,.L124+24
 1534 005e 9847     	 blx r3
 1535              	.LVL43:
 1536 0060 14E0     	 b .L121
 1537              	.L117:
 396:usb.c         ****           }
 397:usb.c         ****      } else if (blockendpoint_usage == bep_fpgabitstream){
 1538              	 .loc 3 397 0
 1539 0062 124B     	 ldr r3,.L124+12
 1540 0064 1B78     	 ldrb r3,[r3]
 1541 0066 0A2B     	 cmp r3,#10
 1542 0068 10D1     	 bne .L121
 1543              	.LBB4:
 398:usb.c         **** 
 399:usb.c         ****           /* Send byte to FPGA - this could eventually be done via SPI */
 400:usb.c         ****           // TODO: is this dangerous?
 401:usb.c         ****           for(unsigned int i = 0; i < nb_transfered; i++){
 1544              	 .loc 3 401 0
 1545 006a 0023     	 movs r3,#0
 1546 006c BB60     	 str r3,[r7,#8]
 1547 006e 09E0     	 b .L122
 1548              	.L123:
 402:usb.c         ****                fpga_program_sendbyte(main_buf_loopback[i]);
 1549              	 .loc 3 402 0 discriminator 3
 1550 0070 0C4A     	 ldr r2,.L124+4
 1551 0072 BB68     	 ldr r3,[r7,#8]
 1552 0074 1344     	 add r3,r3,r2
 1553 0076 1B78     	 ldrb r3,[r3]
 1554 0078 1846     	 mov r0,r3
 1555 007a 104B     	 ldr r3,.L124+28
 1556 007c 9847     	 blx r3
 1557              	.LVL44:
 401:usb.c         ****                fpga_program_sendbyte(main_buf_loopback[i]);
 1558              	 .loc 3 401 0 discriminator 3
 1559 007e BB68     	 ldr r3,[r7,#8]
 1560 0080 0133     	 adds r3,r3,#1
 1561 0082 BB60     	 str r3,[r7,#8]
 1562              	.L122:
 401:usb.c         ****                fpga_program_sendbyte(main_buf_loopback[i]);
 1563              	 .loc 3 401 0 is_stmt 0 discriminator 1
 1564 0084 BA68     	 ldr r2,[r7,#8]
 1565 0086 3B68     	 ldr r3,[r7]
 1566 0088 9A42     	 cmp r2,r3
 1567 008a F1D3     	 bcc .L123
 1568              	.L121:
 1569              	.LBE4:
 403:usb.c         ****           }
 404:usb.c         **** #if FPGA_USE_BITBANG
 405:usb.c         ****           FPGA_CCLK_LOW();
 406:usb.c         **** #endif
 407:usb.c         ****      }
 408:usb.c         **** 
 409:usb.c         ****      //printf("BULKOUT: %d bytes\n", (int)nb_transfered);
 410:usb.c         **** 
 411:usb.c         ****      udi_vendor_bulk_out_run(
 1570              	 .loc 3 411 0 is_stmt 1
 1571 008c 044A     	 ldr r2,.L124
 1572 008e 4FF48061 	 mov r1,#1024
 1573 0092 0448     	 ldr r0,.L124+4
 1574 0094 044B     	 ldr r3,.L124+8
 1575 0096 9847     	 blx r3
 1576              	.LVL45:
 1577              	.L114:
 412:usb.c         ****           main_buf_loopback,
 413:usb.c         ****           sizeof(main_buf_loopback),
 414:usb.c         ****           main_vendor_bulk_out_received);
 415:usb.c         **** }
 1578              	 .loc 3 415 0
 1579 0098 1037     	 adds r7,r7,#16
 1580              	.LCFI69:
 1581              	 .cfi_def_cfa_offset 8
 1582 009a BD46     	 mov sp,r7
 1583              	.LCFI70:
 1584              	 .cfi_def_cfa_register 13
 1585              	 
 1586 009c 80BD     	 pop {r7,pc}
 1587              	.L125:
 1588 009e 00BF     	 .align 2
 1589              	.L124:
 1590 00a0 00000000 	 .word main_vendor_bulk_out_received
 1591 00a4 00000000 	 .word main_buf_loopback
 1592 00a8 00000000 	 .word udi_vendor_bulk_out_run
 1593 00ac 00000000 	 .word blockendpoint_usage
 1594 00b0 00000000 	 .word xram
 1595 00b4 00000000 	 .word FPGA_lockstatus
 1596 00b8 00000000 	 .word FPGA_releaselock
 1597 00bc 00000000 	 .word fpga_program_sendbyte
 1598              	 .cfi_endproc
 1599              	.LFE202:
 1601              	 .section .bss.respbuf.9157,"aw",%nobits
 1602              	 .align 2
 1605              	respbuf.9157:
 1606 0000 00000000 	 .space 128
 1606      00000000 
 1606      00000000 
 1606      00000000 
 1606      00000000 
 1607              	 .section .bss.respbuf.9168,"aw",%nobits
 1608              	 .align 2
 1611              	respbuf.9168:
 1612 0000 00000000 	 .space 64
 1612      00000000 
 1612      00000000 
 1612      00000000 
 1612      00000000 
 1613              	 .text
 1614              	.Letext0:
 1615              	 .file 4 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 1616              	 .file 5 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 1617              	 .file 6 ".././hal/sam3u1c/inc/core_cm3.h"
 1618              	 .file 7 ".././hal/sam3u1c/inc/system_sam3u.h"
 1619              	 .file 8 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\lock.h"
 1620              	 .file 9 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_types.h"
 1621              	 .file 10 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 1622              	 .file 11 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\reent.h"
 1623              	 .file 12 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\stdlib.h"
 1624              	 .file 13 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
 1625              	 .file 14 ".././hal/sam3u1c/inc/compiler.h"
 1626              	 .file 15 ".././hal/sam3u1c/inc/sam/sleepmgr.h"
 1627              	 .file 16 "./conf_usb.h"
 1628              	 .file 17 ".././hal/sam3u1c/inc/usb_protocol.h"
 1629              	 .file 18 ".././hal/sam3u1c/inc/udi.h"
 1630              	 .file 19 ".././hal/sam3u1c/inc/udc_desc.h"
 1631              	 .file 20 ".././hal/sam3u1c/inc/udd.h"
 1632              	 .file 21 ".././hal/sam3u1c/inc/udi_vendor.h"
 1633              	 .file 22 ".././hal/sam3u1c/inc/stdio_serial.h"
 1634              	 .file 23 ".././hal/sam3u1c/inc/usb.h"
 1635              	 .file 24 "usb_xmem.h"
 1636              	 .file 25 "fpga_program.h"
 1637              	 .file 26 ".././hal/sam3u1c/inc/pio.h"
 1638              	 .file 27 ".././hal/sam3u1c/inc/pmc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 usb.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:27     .text.osc_enable:00000000 $t
    {standard input}:33     .text.osc_enable:00000000 osc_enable
    {standard input}:60     .text.osc_enable:00000014 $d
    {standard input}:68     .text.osc_enable:00000034 $t
    {standard input}:142    .text.osc_enable:00000074 $d
    {standard input}:150    .text.osc_is_ready:00000000 $t
    {standard input}:156    .text.osc_is_ready:00000000 osc_is_ready
    {standard input}:182    .text.osc_is_ready:00000014 $d
    {standard input}:190    .text.osc_is_ready:00000034 $t
    {standard input}:248    .text.osc_is_ready:00000078 $d
    {standard input}:255    .text.osc_wait_ready:00000000 $t
    {standard input}:261    .text.osc_wait_ready:00000000 osc_wait_ready
    {standard input}:308    .text.osc_wait_ready:00000028 $d
    {standard input}:316    .data.g_captureinprogress:00000000 g_captureinprogress
    {standard input}:321    .data.main_b_vendor_enable:00000000 main_b_vendor_enable
    {standard input}:324    .bss.main_buf_loopback:00000000 $d
    {standard input}:327    .bss.main_buf_loopback:00000000 main_buf_loopback
    {standard input}:330    .text.main_suspend_action:00000000 $t
    {standard input}:337    .text.main_suspend_action:00000000 main_suspend_action
    {standard input}:367    .text.main_resume_action:00000000 $t
    {standard input}:374    .text.main_resume_action:00000000 main_resume_action
    {standard input}:403    .text.main_sof_action:00000000 $t
    {standard input}:410    .text.main_sof_action:00000000 main_sof_action
    {standard input}:444    .text.main_sof_action:00000018 $d
    {standard input}:449    .text.main_vendor_enable:00000000 $t
    {standard input}:456    .text.main_vendor_enable:00000000 main_vendor_enable
    {standard input}:489    .text.main_vendor_enable:0000001c $d
    {standard input}:1457   .text.main_vendor_bulk_out_received:00000000 main_vendor_bulk_out_received
    {standard input}:497    .text.main_vendor_disable:00000000 $t
    {standard input}:504    .text.main_vendor_disable:00000000 main_vendor_disable
    {standard input}:536    .text.main_vendor_disable:00000014 $d
    {standard input}:541    .bss.ctrlbuffer:00000000 $d
    {standard input}:544    .bss.ctrlbuffer:00000000 ctrlbuffer
    {standard input}:549    .bss.blockendpoint_usage:00000000 blockendpoint_usage
    {standard input}:550    .bss.blockendpoint_usage:00000000 $d
    {standard input}:552    .bss.ctrlmemread_buf:00000000 $d
    {standard input}:555    .bss.ctrlmemread_buf:00000000 ctrlmemread_buf
    {standard input}:558    .bss.ctrlmemread_size:00000000 $d
    {standard input}:561    .bss.ctrlmemread_size:00000000 ctrlmemread_size
    {standard input}:564    .text.ctrl_readmem_bulk:00000000 $t
    {standard input}:571    .text.ctrl_readmem_bulk:00000000 ctrl_readmem_bulk
    {standard input}:636    .text.ctrl_readmem_bulk:00000040 $d
    {standard input}:1389   .text.main_vendor_bulk_in_received:00000000 main_vendor_bulk_in_received
    {standard input}:646    .text.ctrl_readmem_ctrl:00000000 $t
    {standard input}:653    .text.ctrl_readmem_ctrl:00000000 ctrl_readmem_ctrl
    {standard input}:719    .text.ctrl_readmem_ctrl:00000040 $d
    {standard input}:729    .text.ctrl_writemem_ctrl:00000000 $t
    {standard input}:736    .text.ctrl_writemem_ctrl:00000000 ctrl_writemem_ctrl
    {standard input}:828    .text.ctrl_writemem_ctrl:00000060 $d
    {standard input}:838    .bss.bulkread_address:00000000 $d
    {standard input}:841    .bss.bulkread_address:00000000 bulkread_address
    {standard input}:844    .bss.bulkread_len:00000000 $d
    {standard input}:847    .bss.bulkread_len:00000000 bulkread_len
    {standard input}:850    .text.ctrl_writemem_bulk:00000000 $t
    {standard input}:857    .text.ctrl_writemem_bulk:00000000 ctrl_writemem_bulk
    {standard input}:911    .text.ctrl_writemem_bulk:0000002c $d
    {standard input}:919    .text.ctrl_sam3ucfg_cb:00000000 $t
    {standard input}:925    .text.ctrl_sam3ucfg_cb:00000000 ctrl_sam3ucfg_cb
    {standard input}:987    .text.ctrl_sam3ucfg_cb:0000003c $d
    {standard input}:996    .text.ctrl_progfpga_bulk:00000000 $t
    {standard input}:1003   .text.ctrl_progfpga_bulk:00000000 ctrl_progfpga_bulk
    {standard input}:1060   .text.ctrl_progfpga_bulk:00000034 $d
    {standard input}:1068   .text.main_setup_out_received:00000000 $t
    {standard input}:1075   .text.main_setup_out_received:00000000 main_setup_out_received
    {standard input}:1116   .text.main_setup_out_received:00000030 $d
    {standard input}:1123   .text.main_setup_out_received:0000004c $t
    {standard input}:1225   .text.main_setup_out_received:000000c8 $d
    {standard input}:1238   .text.main_setup_in_received:00000000 $t
    {standard input}:1245   .text.main_setup_in_received:00000000 main_setup_in_received
    {standard input}:1371   .text.main_setup_in_received:000000a4 $d
    {standard input}:1611   .bss.respbuf.9168:00000000 respbuf.9168
    {standard input}:1382   .text.main_vendor_bulk_in_received:00000000 $t
    {standard input}:1444   .text.main_vendor_bulk_in_received:00000030 $d
    {standard input}:1450   .text.main_vendor_bulk_out_received:00000000 $t
    {standard input}:1590   .text.main_vendor_bulk_out_received:000000a0 $d
    {standard input}:1602   .bss.respbuf.9157:00000000 $d
    {standard input}:1605   .bss.respbuf.9157:00000000 respbuf.9157
    {standard input}:1608   .bss.respbuf.9168:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.e23d094898ba82b639bd2bf6d23b6497
                           .group:00000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._newlib_version.h.4.3572908597b70d672d181fc7fc501c19
                           .group:00000000 wm4.features.h.33.863f3be0b2e521e624fcc7d6fa31d2ca
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.newlib.h.8.5f2124c7e712be65f83b91ff86a0b1c1
                           .group:00000000 wm4.config.h.219.65a553ab5bef5482f0d7880b0d33015e
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.cdefs.h.47.776a25dae4205bae6cce27d545bc475b
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.183.c226d164ceca1f2ecb9ae9360c54a098
                           .group:00000000 wm4.reent.h.17.23b059516345f8f5abfa01ddc379570f
                           .group:00000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.30.bbece7fa40993a78092dcc5805132560
                           .group:00000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.8188691c2279eac7a223caa50f6694b9
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.conf_clock.h.45.5dc276d21b4d793a62f1a9757cc18d5c
                           .group:00000000 wm4.board.h.48.ce8d06c36cc583d9bf62738411f62e4d
                           .group:00000000 wm4.cw521.h.62.49e8a34af6a9b815e03b7858792ba391
                           .group:00000000 wm4.pmc.h.45.bbe1bf97a811e3b283420b2eeadf0b35
                           .group:00000000 wm4.osc.h.94.b766cddafe899eca01d775f7b2906680
                           .group:00000000 wm4.pll.h.45.a605c31ca466ae25752a678e8572be48
                           .group:00000000 wm4.sysclk.h.156.541a142b0016a365728ea1f7c0e3db84
                           .group:00000000 wm4.cycle_counter.h.44.fde38fb1acfd6555d72e65fae6e86af5
                           .group:00000000 wm4.delay.h.105.f2a8ab5e71eab0684cf6985b5c2fc9e8
                           .group:00000000 wm4.efc.h.45.ec5734119c630498df26106bacf9a684
                           .group:00000000 wm4.flash_efc.h.90.a4a39259055880dc10b861c5fe1b99e7
                           .group:00000000 wm4.pio.h.45.95f22b0ea02ddc698ec54fc56bf6f38c
                           .group:00000000 wm4.sam_gpio.h.50.76a45c51855d665134f8211cd601d693
                           .group:00000000 wm4.ioport_pio.h.44.373b34364b4ef25fac62017cd942a761
                           .group:00000000 wm4.sleep.h.45.ef10e1aee6f903405be19980a8333b7f
                           .group:00000000 wm4.smc.h.45.17a94aa976bb62b1109d03e8a314a569
                           .group:00000000 wm4.spi.h.45.712c66be09ffbac297c2e00923077297
                           .group:00000000 wm4.conf_sleepmgr.h.44.d825b913294720022fefe7201514fca3
                           .group:00000000 wm4.twi.h.45.ba70de99d200dafba570ce8f7058737a
                           .group:00000000 wm4.twi_master.h.90.08c062d0fa8f8aeea342ceeb79263395
                           .group:00000000 wm4.twi_slave.h.45.8b3d1a3d2e43ebc7d0161f4142989871
                           .group:00000000 wm4.uart.h.45.a5af743b8064bd84d1a6438457096e18
                           .group:00000000 wm4.usart.h.46.eae6fe592b7ea0768efef8d312e7f44f
                           .group:00000000 wm4.conf_uart_serial.h.45.245cdceaa1a3811fd043bf660ce38054
                           .group:00000000 wm4.conf_usb.h.45.dde1b096e128cb4c70cbe39d63ef79bf
                           .group:00000000 wm4.udi_vendor_conf.h.56.4348c8e521d040f44df868219dae6785
                           .group:00000000 wm4.usb_atmel.h.45.c31b525dbe01f8d9e2022a03356ec174
                           .group:00000000 wm4.usb_protocol.h.63.850c58f3469fce50a9ac9a6854f7594b
                           .group:00000000 wm4.usb_protocol_vendor.h.45.83dfe073428ff799abc3ed1c7b04c77d
                           .group:00000000 wm4.udc_desc.h.77.5fec235bd7553e7256e345e020840072
                           .group:00000000 wm4.udd.h.103.3ccc59b50c14ec70568e6136eeb22d56
                           .group:00000000 wm4.udi_vendor.h.125.7b9085237d4d4a9757f4c148fba1918d
                           .group:00000000 wm4.genclk.h.45.f7865052b40a907e4bab1a8f483a50e2
                           .group:00000000 wm4.usb.h.20.f560de5b472e2e451b5cba954e5d0064
                           .group:00000000 wm4.usb_xmem.h.16.42bf4bb18f59d3917a7b8509dbb4b874
                           .group:00000000 wm4.fpga_program.h.36.595c50b3111aee41a44bf68f78909aea
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd

UNDEFINED SYMBOLS
pmc_switch_sclk_to_32kxtal
pmc_osc_enable_fastrc
pmc_osc_enable_main_xtal
pmc_osc_bypass_main_xtal
pmc_osc_is_ready_32kxtal
pmc_osc_is_ready_fastrc
pmc_osc_is_ready_main_xtal
udi_vendor_bulk_out_run
FPGA_releaselock
FPGA_setlock
FPGA_setaddr
udi_vendor_bulk_in_run
xram
udd_g_ctrlreq
pmc_switch_mck_to_mainck
pmc_switch_mck_to_pllack
fpga_program_setup1
fpga_program_setup2
FPGA_lockstatus
pio_get_pin_value
fpga_program_sendbyte
