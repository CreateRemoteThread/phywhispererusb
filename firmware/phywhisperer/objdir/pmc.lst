   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "pmc.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .section .text.pmc_mck_set_prescaler,"ax",%progbits
  27              	 .align 1
  28              	 .global pmc_mck_set_prescaler
  29              	 .syntax unified
  30              	 .thumb
  31              	 .thumb_func
  32              	 .fpu softvfp
  34              	pmc_mck_set_prescaler:
  35              	.LFB69:
  36              	 .file 1 ".././hal/sam3u1c/pmc.c"
   1:.././hal/sam3u1c/pmc.c **** /**
   2:.././hal/sam3u1c/pmc.c ****  * \file
   3:.././hal/sam3u1c/pmc.c ****  *
   4:.././hal/sam3u1c/pmc.c ****  * \brief Power Management Controller (PMC) driver for SAM.
   5:.././hal/sam3u1c/pmc.c ****  *
   6:.././hal/sam3u1c/pmc.c ****  * Copyright (c) 2011 - 2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/pmc.c ****  *
   8:.././hal/sam3u1c/pmc.c ****  * \asf_license_start
   9:.././hal/sam3u1c/pmc.c ****  *
  10:.././hal/sam3u1c/pmc.c ****  * \page License
  11:.././hal/sam3u1c/pmc.c ****  *
  12:.././hal/sam3u1c/pmc.c ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/pmc.c ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/pmc.c ****  *
  15:.././hal/sam3u1c/pmc.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/pmc.c ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/pmc.c ****  *
  18:.././hal/sam3u1c/pmc.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/pmc.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/pmc.c ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/pmc.c ****  *
  22:.././hal/sam3u1c/pmc.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/pmc.c ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/pmc.c ****  *
  25:.././hal/sam3u1c/pmc.c ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/pmc.c ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/pmc.c ****  *
  28:.././hal/sam3u1c/pmc.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/pmc.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/pmc.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/pmc.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/pmc.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/pmc.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/pmc.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/pmc.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/pmc.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/pmc.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/pmc.c ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/pmc.c ****  *
  40:.././hal/sam3u1c/pmc.c ****  * \asf_license_stop
  41:.././hal/sam3u1c/pmc.c ****  *
  42:.././hal/sam3u1c/pmc.c ****  */
  43:.././hal/sam3u1c/pmc.c **** 
  44:.././hal/sam3u1c/pmc.c **** #include "pmc.h"
  45:.././hal/sam3u1c/pmc.c **** 
  46:.././hal/sam3u1c/pmc.c **** #if (SAM3N)
  47:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    31
  48:.././hal/sam3u1c/pmc.c **** #elif (SAM3XA)
  49:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    44
  50:.././hal/sam3u1c/pmc.c **** #elif (SAM3U)
  51:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    29
  52:.././hal/sam3u1c/pmc.c **** #elif (SAM3S || SAM4S)
  53:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    34
  54:.././hal/sam3u1c/pmc.c **** #elif (SAM4E)
  55:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    47
  56:.././hal/sam3u1c/pmc.c **** #elif (SAM4N)
  57:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    31
  58:.././hal/sam3u1c/pmc.c **** #elif (SAM4C || SAM4CM || SAM4CP)
  59:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    43
  60:.././hal/sam3u1c/pmc.c **** #elif (SAMG51)
  61:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    47
  62:.././hal/sam3u1c/pmc.c **** #elif (SAMG53)
  63:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    47
  64:.././hal/sam3u1c/pmc.c **** #elif (SAMG54)
  65:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    47
  66:.././hal/sam3u1c/pmc.c **** #elif (SAMG55)
  67:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    50
  68:.././hal/sam3u1c/pmc.c **** #endif
  69:.././hal/sam3u1c/pmc.c **** 
  70:.././hal/sam3u1c/pmc.c **** /// @cond 0
  71:.././hal/sam3u1c/pmc.c **** /**INDENT-OFF**/
  72:.././hal/sam3u1c/pmc.c **** #ifdef __cplusplus
  73:.././hal/sam3u1c/pmc.c **** extern "C" {
  74:.././hal/sam3u1c/pmc.c **** #endif
  75:.././hal/sam3u1c/pmc.c **** /**INDENT-ON**/
  76:.././hal/sam3u1c/pmc.c **** /// @endcond
  77:.././hal/sam3u1c/pmc.c **** 
  78:.././hal/sam3u1c/pmc.c **** /**
  79:.././hal/sam3u1c/pmc.c ****  * \defgroup sam_drivers_pmc_group Power Management Controller (PMC)
  80:.././hal/sam3u1c/pmc.c ****  *
  81:.././hal/sam3u1c/pmc.c ****  * \par Purpose
  82:.././hal/sam3u1c/pmc.c ****  *
  83:.././hal/sam3u1c/pmc.c ****  * The Power Management Controller (PMC) optimizes power consumption by
  84:.././hal/sam3u1c/pmc.c ****  * controlling all system and user peripheral clocks. The PMC enables/disables
  85:.././hal/sam3u1c/pmc.c ****  * the clock inputs to many of the peripherals and the Cortex-M Processor.
  86:.././hal/sam3u1c/pmc.c ****  *
  87:.././hal/sam3u1c/pmc.c ****  * @{
  88:.././hal/sam3u1c/pmc.c ****  */
  89:.././hal/sam3u1c/pmc.c **** 
  90:.././hal/sam3u1c/pmc.c **** /**
  91:.././hal/sam3u1c/pmc.c ****  * \brief Set the prescaler of the MCK.
  92:.././hal/sam3u1c/pmc.c ****  *
  93:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Prescaler value.
  94:.././hal/sam3u1c/pmc.c ****  */
  95:.././hal/sam3u1c/pmc.c **** void pmc_mck_set_prescaler(uint32_t ul_pres)
  96:.././hal/sam3u1c/pmc.c **** {
  37              	 .loc 1 96 0
  38              	 .cfi_startproc
  39              	 
  40              	 
  41              	 
  42 0000 80B4     	 push {r7}
  43              	.LCFI0:
  44              	 .cfi_def_cfa_offset 4
  45              	 .cfi_offset 7,-4
  46 0002 83B0     	 sub sp,sp,#12
  47              	.LCFI1:
  48              	 .cfi_def_cfa_offset 16
  49 0004 00AF     	 add r7,sp,#0
  50              	.LCFI2:
  51              	 .cfi_def_cfa_register 7
  52 0006 7860     	 str r0,[r7,#4]
  97:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
  98:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  53              	 .loc 1 98 0
  54 0008 094B     	 ldr r3,.L3
  55 000a 1B6B     	 ldr r3,[r3,#48]
  56 000c 23F07002 	 bic r2,r3,#112
  97:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
  57              	 .loc 1 97 0
  58 0010 0749     	 ldr r1,.L3
  59              	 .loc 1 98 0
  60 0012 7B68     	 ldr r3,[r7,#4]
  61 0014 1343     	 orrs r3,r3,r2
  97:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
  62              	 .loc 1 97 0
  63 0016 0B63     	 str r3,[r1,#48]
  99:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  64              	 .loc 1 99 0
  65 0018 00BF     	 nop
  66              	.L2:
  67              	 .loc 1 99 0 is_stmt 0 discriminator 1
  68 001a 054B     	 ldr r3,.L3
  69 001c 9B6E     	 ldr r3,[r3,#104]
  70 001e 03F00803 	 and r3,r3,#8
  71 0022 002B     	 cmp r3,#0
  72 0024 F9D0     	 beq .L2
 100:.././hal/sam3u1c/pmc.c **** }
  73              	 .loc 1 100 0 is_stmt 1
  74 0026 00BF     	 nop
  75 0028 0C37     	 adds r7,r7,#12
  76              	.LCFI3:
  77              	 .cfi_def_cfa_offset 4
  78 002a BD46     	 mov sp,r7
  79              	.LCFI4:
  80              	 .cfi_def_cfa_register 13
  81              	 
  82 002c 80BC     	 pop {r7}
  83              	.LCFI5:
  84              	 .cfi_restore 7
  85              	 .cfi_def_cfa_offset 0
  86 002e 7047     	 bx lr
  87              	.L4:
  88              	 .align 2
  89              	.L3:
  90 0030 00040E40 	 .word 1074660352
  91              	 .cfi_endproc
  92              	.LFE69:
  94              	 .section .text.pmc_mck_set_source,"ax",%progbits
  95              	 .align 1
  96              	 .global pmc_mck_set_source
  97              	 .syntax unified
  98              	 .thumb
  99              	 .thumb_func
 100              	 .fpu softvfp
 102              	pmc_mck_set_source:
 103              	.LFB70:
 101:.././hal/sam3u1c/pmc.c **** 
 102:.././hal/sam3u1c/pmc.c **** /**
 103:.././hal/sam3u1c/pmc.c ****  * \brief Set the source of the MCK.
 104:.././hal/sam3u1c/pmc.c ****  *
 105:.././hal/sam3u1c/pmc.c ****  * \param ul_source Source selection value.
 106:.././hal/sam3u1c/pmc.c ****  */
 107:.././hal/sam3u1c/pmc.c **** void pmc_mck_set_source(uint32_t ul_source)
 108:.././hal/sam3u1c/pmc.c **** {
 104              	 .loc 1 108 0
 105              	 .cfi_startproc
 106              	 
 107              	 
 108              	 
 109 0000 80B4     	 push {r7}
 110              	.LCFI6:
 111              	 .cfi_def_cfa_offset 4
 112              	 .cfi_offset 7,-4
 113 0002 83B0     	 sub sp,sp,#12
 114              	.LCFI7:
 115              	 .cfi_def_cfa_offset 16
 116 0004 00AF     	 add r7,sp,#0
 117              	.LCFI8:
 118              	 .cfi_def_cfa_register 7
 119 0006 7860     	 str r0,[r7,#4]
 109:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
 110:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) | ul_source;
 120              	 .loc 1 110 0
 121 0008 094B     	 ldr r3,.L7
 122 000a 1B6B     	 ldr r3,[r3,#48]
 123 000c 23F00302 	 bic r2,r3,#3
 109:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
 124              	 .loc 1 109 0
 125 0010 0749     	 ldr r1,.L7
 126              	 .loc 1 110 0
 127 0012 7B68     	 ldr r3,[r7,#4]
 128 0014 1343     	 orrs r3,r3,r2
 109:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
 129              	 .loc 1 109 0
 130 0016 0B63     	 str r3,[r1,#48]
 111:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
 131              	 .loc 1 111 0
 132 0018 00BF     	 nop
 133              	.L6:
 134              	 .loc 1 111 0 is_stmt 0 discriminator 1
 135 001a 054B     	 ldr r3,.L7
 136 001c 9B6E     	 ldr r3,[r3,#104]
 137 001e 03F00803 	 and r3,r3,#8
 138 0022 002B     	 cmp r3,#0
 139 0024 F9D0     	 beq .L6
 112:.././hal/sam3u1c/pmc.c **** }
 140              	 .loc 1 112 0 is_stmt 1
 141 0026 00BF     	 nop
 142 0028 0C37     	 adds r7,r7,#12
 143              	.LCFI9:
 144              	 .cfi_def_cfa_offset 4
 145 002a BD46     	 mov sp,r7
 146              	.LCFI10:
 147              	 .cfi_def_cfa_register 13
 148              	 
 149 002c 80BC     	 pop {r7}
 150              	.LCFI11:
 151              	 .cfi_restore 7
 152              	 .cfi_def_cfa_offset 0
 153 002e 7047     	 bx lr
 154              	.L8:
 155              	 .align 2
 156              	.L7:
 157 0030 00040E40 	 .word 1074660352
 158              	 .cfi_endproc
 159              	.LFE70:
 161              	 .section .text.pmc_switch_mck_to_sclk,"ax",%progbits
 162              	 .align 1
 163              	 .global pmc_switch_mck_to_sclk
 164              	 .syntax unified
 165              	 .thumb
 166              	 .thumb_func
 167              	 .fpu softvfp
 169              	pmc_switch_mck_to_sclk:
 170              	.LFB71:
 113:.././hal/sam3u1c/pmc.c **** 
 114:.././hal/sam3u1c/pmc.c **** /**
 115:.././hal/sam3u1c/pmc.c ****  * \brief Switch master clock source selection to slow clock.
 116:.././hal/sam3u1c/pmc.c ****  *
 117:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Processor clock prescaler.
 118:.././hal/sam3u1c/pmc.c ****  *
 119:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 120:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 121:.././hal/sam3u1c/pmc.c ****  */
 122:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_mck_to_sclk(uint32_t ul_pres)
 123:.././hal/sam3u1c/pmc.c **** {
 171              	 .loc 1 123 0
 172              	 .cfi_startproc
 173              	 
 174              	 
 175              	 
 176 0000 80B4     	 push {r7}
 177              	.LCFI12:
 178              	 .cfi_def_cfa_offset 4
 179              	 .cfi_offset 7,-4
 180 0002 85B0     	 sub sp,sp,#20
 181              	.LCFI13:
 182              	 .cfi_def_cfa_offset 24
 183 0004 00AF     	 add r7,sp,#0
 184              	.LCFI14:
 185              	 .cfi_def_cfa_register 7
 186 0006 7860     	 str r0,[r7,#4]
 124:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 125:.././hal/sam3u1c/pmc.c **** 
 126:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 187              	 .loc 1 126 0
 188 0008 1B4B     	 ldr r3,.L17
 189 000a 1B6B     	 ldr r3,[r3,#48]
 190 000c 1A4A     	 ldr r2,.L17
 191 000e 23F00303 	 bic r3,r3,#3
 192 0012 1363     	 str r3,[r2,#48]
 127:.././hal/sam3u1c/pmc.c **** 			PMC_MCKR_CSS_SLOW_CLK;
 128:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 193              	 .loc 1 128 0
 194 0014 4FF40063 	 mov r3,#2048
 195 0018 FB60     	 str r3,[r7,#12]
 196 001a 07E0     	 b .L10
 197              	.L13:
 129:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 130:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 198              	 .loc 1 130 0
 199 001c FB68     	 ldr r3,[r7,#12]
 200 001e 002B     	 cmp r3,#0
 201 0020 01D1     	 bne .L11
 131:.././hal/sam3u1c/pmc.c **** 			return 1;
 202              	 .loc 1 131 0
 203 0022 0123     	 movs r3,#1
 204 0024 23E0     	 b .L12
 205              	.L11:
 129:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 206              	 .loc 1 129 0
 207 0026 FB68     	 ldr r3,[r7,#12]
 208 0028 013B     	 subs r3,r3,#1
 209 002a FB60     	 str r3,[r7,#12]
 210              	.L10:
 128:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 211              	 .loc 1 128 0 discriminator 1
 212 002c 124B     	 ldr r3,.L17
 213 002e 9B6E     	 ldr r3,[r3,#104]
 214 0030 03F00803 	 and r3,r3,#8
 215 0034 002B     	 cmp r3,#0
 216 0036 F1D0     	 beq .L13
 132:.././hal/sam3u1c/pmc.c **** 		}
 133:.././hal/sam3u1c/pmc.c **** 	}
 134:.././hal/sam3u1c/pmc.c **** 
 135:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 217              	 .loc 1 135 0
 218 0038 0F4B     	 ldr r3,.L17
 219 003a 1B6B     	 ldr r3,[r3,#48]
 220 003c 23F07002 	 bic r2,r3,#112
 221 0040 0D49     	 ldr r1,.L17
 222 0042 7B68     	 ldr r3,[r7,#4]
 223 0044 1343     	 orrs r3,r3,r2
 224 0046 0B63     	 str r3,[r1,#48]
 136:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 225              	 .loc 1 136 0
 226 0048 4FF40063 	 mov r3,#2048
 227 004c FB60     	 str r3,[r7,#12]
 228 004e 07E0     	 b .L14
 229              	.L16:
 137:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 138:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 230              	 .loc 1 138 0
 231 0050 FB68     	 ldr r3,[r7,#12]
 232 0052 002B     	 cmp r3,#0
 233 0054 01D1     	 bne .L15
 139:.././hal/sam3u1c/pmc.c **** 			return 1;
 234              	 .loc 1 139 0
 235 0056 0123     	 movs r3,#1
 236 0058 09E0     	 b .L12
 237              	.L15:
 137:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 238              	 .loc 1 137 0
 239 005a FB68     	 ldr r3,[r7,#12]
 240 005c 013B     	 subs r3,r3,#1
 241 005e FB60     	 str r3,[r7,#12]
 242              	.L14:
 136:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 243              	 .loc 1 136 0 discriminator 1
 244 0060 054B     	 ldr r3,.L17
 245 0062 9B6E     	 ldr r3,[r3,#104]
 246 0064 03F00803 	 and r3,r3,#8
 247 0068 002B     	 cmp r3,#0
 248 006a F1D0     	 beq .L16
 140:.././hal/sam3u1c/pmc.c **** 		}
 141:.././hal/sam3u1c/pmc.c **** 	}
 142:.././hal/sam3u1c/pmc.c **** 
 143:.././hal/sam3u1c/pmc.c **** 	return 0;
 249              	 .loc 1 143 0
 250 006c 0023     	 movs r3,#0
 251              	.L12:
 144:.././hal/sam3u1c/pmc.c **** }
 252              	 .loc 1 144 0
 253 006e 1846     	 mov r0,r3
 254 0070 1437     	 adds r7,r7,#20
 255              	.LCFI15:
 256              	 .cfi_def_cfa_offset 4
 257 0072 BD46     	 mov sp,r7
 258              	.LCFI16:
 259              	 .cfi_def_cfa_register 13
 260              	 
 261 0074 80BC     	 pop {r7}
 262              	.LCFI17:
 263              	 .cfi_restore 7
 264              	 .cfi_def_cfa_offset 0
 265 0076 7047     	 bx lr
 266              	.L18:
 267              	 .align 2
 268              	.L17:
 269 0078 00040E40 	 .word 1074660352
 270              	 .cfi_endproc
 271              	.LFE71:
 273              	 .section .text.pmc_switch_mck_to_mainck,"ax",%progbits
 274              	 .align 1
 275              	 .global pmc_switch_mck_to_mainck
 276              	 .syntax unified
 277              	 .thumb
 278              	 .thumb_func
 279              	 .fpu softvfp
 281              	pmc_switch_mck_to_mainck:
 282              	.LFB72:
 145:.././hal/sam3u1c/pmc.c **** 
 146:.././hal/sam3u1c/pmc.c **** /**
 147:.././hal/sam3u1c/pmc.c ****  * \brief Switch master clock source selection to main clock.
 148:.././hal/sam3u1c/pmc.c ****  *
 149:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Processor clock prescaler.
 150:.././hal/sam3u1c/pmc.c ****  *
 151:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 152:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 153:.././hal/sam3u1c/pmc.c ****  */
 154:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
 155:.././hal/sam3u1c/pmc.c **** {
 283              	 .loc 1 155 0
 284              	 .cfi_startproc
 285              	 
 286              	 
 287              	 
 288 0000 80B4     	 push {r7}
 289              	.LCFI18:
 290              	 .cfi_def_cfa_offset 4
 291              	 .cfi_offset 7,-4
 292 0002 85B0     	 sub sp,sp,#20
 293              	.LCFI19:
 294              	 .cfi_def_cfa_offset 24
 295 0004 00AF     	 add r7,sp,#0
 296              	.LCFI20:
 297              	 .cfi_def_cfa_register 7
 298 0006 7860     	 str r0,[r7,#4]
 156:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 157:.././hal/sam3u1c/pmc.c **** 
 158:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 299              	 .loc 1 158 0
 300 0008 1C4B     	 ldr r3,.L27
 301 000a 1B6B     	 ldr r3,[r3,#48]
 302 000c 23F00303 	 bic r3,r3,#3
 303 0010 1A4A     	 ldr r2,.L27
 304 0012 43F00103 	 orr r3,r3,#1
 305 0016 1363     	 str r3,[r2,#48]
 159:.././hal/sam3u1c/pmc.c **** 			PMC_MCKR_CSS_MAIN_CLK;
 160:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 306              	 .loc 1 160 0
 307 0018 4FF40063 	 mov r3,#2048
 308 001c FB60     	 str r3,[r7,#12]
 309 001e 07E0     	 b .L20
 310              	.L23:
 161:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 162:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 311              	 .loc 1 162 0
 312 0020 FB68     	 ldr r3,[r7,#12]
 313 0022 002B     	 cmp r3,#0
 314 0024 01D1     	 bne .L21
 163:.././hal/sam3u1c/pmc.c **** 			return 1;
 315              	 .loc 1 163 0
 316 0026 0123     	 movs r3,#1
 317 0028 23E0     	 b .L22
 318              	.L21:
 161:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 319              	 .loc 1 161 0
 320 002a FB68     	 ldr r3,[r7,#12]
 321 002c 013B     	 subs r3,r3,#1
 322 002e FB60     	 str r3,[r7,#12]
 323              	.L20:
 160:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 324              	 .loc 1 160 0 discriminator 1
 325 0030 124B     	 ldr r3,.L27
 326 0032 9B6E     	 ldr r3,[r3,#104]
 327 0034 03F00803 	 and r3,r3,#8
 328 0038 002B     	 cmp r3,#0
 329 003a F1D0     	 beq .L23
 164:.././hal/sam3u1c/pmc.c **** 		}
 165:.././hal/sam3u1c/pmc.c **** 	}
 166:.././hal/sam3u1c/pmc.c **** 
 167:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 330              	 .loc 1 167 0
 331 003c 0F4B     	 ldr r3,.L27
 332 003e 1B6B     	 ldr r3,[r3,#48]
 333 0040 23F07002 	 bic r2,r3,#112
 334 0044 0D49     	 ldr r1,.L27
 335 0046 7B68     	 ldr r3,[r7,#4]
 336 0048 1343     	 orrs r3,r3,r2
 337 004a 0B63     	 str r3,[r1,#48]
 168:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 338              	 .loc 1 168 0
 339 004c 4FF40063 	 mov r3,#2048
 340 0050 FB60     	 str r3,[r7,#12]
 341 0052 07E0     	 b .L24
 342              	.L26:
 169:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 170:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 343              	 .loc 1 170 0
 344 0054 FB68     	 ldr r3,[r7,#12]
 345 0056 002B     	 cmp r3,#0
 346 0058 01D1     	 bne .L25
 171:.././hal/sam3u1c/pmc.c **** 			return 1;
 347              	 .loc 1 171 0
 348 005a 0123     	 movs r3,#1
 349 005c 09E0     	 b .L22
 350              	.L25:
 169:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 351              	 .loc 1 169 0
 352 005e FB68     	 ldr r3,[r7,#12]
 353 0060 013B     	 subs r3,r3,#1
 354 0062 FB60     	 str r3,[r7,#12]
 355              	.L24:
 168:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 356              	 .loc 1 168 0 discriminator 1
 357 0064 054B     	 ldr r3,.L27
 358 0066 9B6E     	 ldr r3,[r3,#104]
 359 0068 03F00803 	 and r3,r3,#8
 360 006c 002B     	 cmp r3,#0
 361 006e F1D0     	 beq .L26
 172:.././hal/sam3u1c/pmc.c **** 		}
 173:.././hal/sam3u1c/pmc.c **** 	}
 174:.././hal/sam3u1c/pmc.c **** 
 175:.././hal/sam3u1c/pmc.c **** 	return 0;
 362              	 .loc 1 175 0
 363 0070 0023     	 movs r3,#0
 364              	.L22:
 176:.././hal/sam3u1c/pmc.c **** }
 365              	 .loc 1 176 0
 366 0072 1846     	 mov r0,r3
 367 0074 1437     	 adds r7,r7,#20
 368              	.LCFI21:
 369              	 .cfi_def_cfa_offset 4
 370 0076 BD46     	 mov sp,r7
 371              	.LCFI22:
 372              	 .cfi_def_cfa_register 13
 373              	 
 374 0078 80BC     	 pop {r7}
 375              	.LCFI23:
 376              	 .cfi_restore 7
 377              	 .cfi_def_cfa_offset 0
 378 007a 7047     	 bx lr
 379              	.L28:
 380              	 .align 2
 381              	.L27:
 382 007c 00040E40 	 .word 1074660352
 383              	 .cfi_endproc
 384              	.LFE72:
 386              	 .section .text.pmc_switch_mck_to_pllack,"ax",%progbits
 387              	 .align 1
 388              	 .global pmc_switch_mck_to_pllack
 389              	 .syntax unified
 390              	 .thumb
 391              	 .thumb_func
 392              	 .fpu softvfp
 394              	pmc_switch_mck_to_pllack:
 395              	.LFB73:
 177:.././hal/sam3u1c/pmc.c **** 
 178:.././hal/sam3u1c/pmc.c **** /**
 179:.././hal/sam3u1c/pmc.c ****  * \brief Switch master clock source selection to PLLA clock.
 180:.././hal/sam3u1c/pmc.c ****  *
 181:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Processor clock prescaler.
 182:.././hal/sam3u1c/pmc.c ****  *
 183:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 184:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 185:.././hal/sam3u1c/pmc.c ****  */
 186:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
 187:.././hal/sam3u1c/pmc.c **** {
 396              	 .loc 1 187 0
 397              	 .cfi_startproc
 398              	 
 399              	 
 400              	 
 401 0000 80B4     	 push {r7}
 402              	.LCFI24:
 403              	 .cfi_def_cfa_offset 4
 404              	 .cfi_offset 7,-4
 405 0002 85B0     	 sub sp,sp,#20
 406              	.LCFI25:
 407              	 .cfi_def_cfa_offset 24
 408 0004 00AF     	 add r7,sp,#0
 409              	.LCFI26:
 410              	 .cfi_def_cfa_register 7
 411 0006 7860     	 str r0,[r7,#4]
 188:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 189:.././hal/sam3u1c/pmc.c **** 
 190:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 412              	 .loc 1 190 0
 413 0008 1C4B     	 ldr r3,.L37
 414 000a 1B6B     	 ldr r3,[r3,#48]
 415 000c 23F07002 	 bic r2,r3,#112
 416 0010 1A49     	 ldr r1,.L37
 417 0012 7B68     	 ldr r3,[r7,#4]
 418 0014 1343     	 orrs r3,r3,r2
 419 0016 0B63     	 str r3,[r1,#48]
 191:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 420              	 .loc 1 191 0
 421 0018 4FF40063 	 mov r3,#2048
 422 001c FB60     	 str r3,[r7,#12]
 423 001e 07E0     	 b .L30
 424              	.L33:
 192:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 193:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 425              	 .loc 1 193 0
 426 0020 FB68     	 ldr r3,[r7,#12]
 427 0022 002B     	 cmp r3,#0
 428 0024 01D1     	 bne .L31
 194:.././hal/sam3u1c/pmc.c **** 			return 1;
 429              	 .loc 1 194 0
 430 0026 0123     	 movs r3,#1
 431 0028 23E0     	 b .L32
 432              	.L31:
 192:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 433              	 .loc 1 192 0
 434 002a FB68     	 ldr r3,[r7,#12]
 435 002c 013B     	 subs r3,r3,#1
 436 002e FB60     	 str r3,[r7,#12]
 437              	.L30:
 191:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 438              	 .loc 1 191 0 discriminator 1
 439 0030 124B     	 ldr r3,.L37
 440 0032 9B6E     	 ldr r3,[r3,#104]
 441 0034 03F00803 	 and r3,r3,#8
 442 0038 002B     	 cmp r3,#0
 443 003a F1D0     	 beq .L33
 195:.././hal/sam3u1c/pmc.c **** 		}
 196:.././hal/sam3u1c/pmc.c **** 	}
 197:.././hal/sam3u1c/pmc.c **** 
 198:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 444              	 .loc 1 198 0
 445 003c 0F4B     	 ldr r3,.L37
 446 003e 1B6B     	 ldr r3,[r3,#48]
 447 0040 23F00303 	 bic r3,r3,#3
 448 0044 0D4A     	 ldr r2,.L37
 449 0046 43F00203 	 orr r3,r3,#2
 450 004a 1363     	 str r3,[r2,#48]
 199:.././hal/sam3u1c/pmc.c **** 			PMC_MCKR_CSS_PLLA_CLK;
 200:.././hal/sam3u1c/pmc.c **** 
 201:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 451              	 .loc 1 201 0
 452 004c 4FF40063 	 mov r3,#2048
 453 0050 FB60     	 str r3,[r7,#12]
 454 0052 07E0     	 b .L34
 455              	.L36:
 202:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 203:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 456              	 .loc 1 203 0
 457 0054 FB68     	 ldr r3,[r7,#12]
 458 0056 002B     	 cmp r3,#0
 459 0058 01D1     	 bne .L35
 204:.././hal/sam3u1c/pmc.c **** 			return 1;
 460              	 .loc 1 204 0
 461 005a 0123     	 movs r3,#1
 462 005c 09E0     	 b .L32
 463              	.L35:
 202:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 464              	 .loc 1 202 0
 465 005e FB68     	 ldr r3,[r7,#12]
 466 0060 013B     	 subs r3,r3,#1
 467 0062 FB60     	 str r3,[r7,#12]
 468              	.L34:
 201:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 469              	 .loc 1 201 0 discriminator 1
 470 0064 054B     	 ldr r3,.L37
 471 0066 9B6E     	 ldr r3,[r3,#104]
 472 0068 03F00803 	 and r3,r3,#8
 473 006c 002B     	 cmp r3,#0
 474 006e F1D0     	 beq .L36
 205:.././hal/sam3u1c/pmc.c **** 		}
 206:.././hal/sam3u1c/pmc.c **** 	}
 207:.././hal/sam3u1c/pmc.c **** 
 208:.././hal/sam3u1c/pmc.c **** 	return 0;
 475              	 .loc 1 208 0
 476 0070 0023     	 movs r3,#0
 477              	.L32:
 209:.././hal/sam3u1c/pmc.c **** }
 478              	 .loc 1 209 0
 479 0072 1846     	 mov r0,r3
 480 0074 1437     	 adds r7,r7,#20
 481              	.LCFI27:
 482              	 .cfi_def_cfa_offset 4
 483 0076 BD46     	 mov sp,r7
 484              	.LCFI28:
 485              	 .cfi_def_cfa_register 13
 486              	 
 487 0078 80BC     	 pop {r7}
 488              	.LCFI29:
 489              	 .cfi_restore 7
 490              	 .cfi_def_cfa_offset 0
 491 007a 7047     	 bx lr
 492              	.L38:
 493              	 .align 2
 494              	.L37:
 495 007c 00040E40 	 .word 1074660352
 496              	 .cfi_endproc
 497              	.LFE73:
 499              	 .section .text.pmc_switch_mck_to_upllck,"ax",%progbits
 500              	 .align 1
 501              	 .global pmc_switch_mck_to_upllck
 502              	 .syntax unified
 503              	 .thumb
 504              	 .thumb_func
 505              	 .fpu softvfp
 507              	pmc_switch_mck_to_upllck:
 508              	.LFB74:
 210:.././hal/sam3u1c/pmc.c **** 
 211:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP || SAMG55)
 212:.././hal/sam3u1c/pmc.c **** /**
 213:.././hal/sam3u1c/pmc.c ****  * \brief Switch master clock source selection to PLLB clock.
 214:.././hal/sam3u1c/pmc.c ****  *
 215:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Processor clock prescaler.
 216:.././hal/sam3u1c/pmc.c ****  *
 217:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 218:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 219:.././hal/sam3u1c/pmc.c ****  */
 220:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
 221:.././hal/sam3u1c/pmc.c **** {
 222:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 223:.././hal/sam3u1c/pmc.c **** 
 224:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 225:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 226:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 227:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 228:.././hal/sam3u1c/pmc.c **** 			return 1;
 229:.././hal/sam3u1c/pmc.c **** 		}
 230:.././hal/sam3u1c/pmc.c **** 	}
 231:.././hal/sam3u1c/pmc.c **** 
 232:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 233:.././hal/sam3u1c/pmc.c **** 			PMC_MCKR_CSS_PLLB_CLK;
 234:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 235:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 236:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 237:.././hal/sam3u1c/pmc.c **** 			return 1;
 238:.././hal/sam3u1c/pmc.c **** 		}
 239:.././hal/sam3u1c/pmc.c **** 	}
 240:.././hal/sam3u1c/pmc.c **** 
 241:.././hal/sam3u1c/pmc.c **** 	return 0;
 242:.././hal/sam3u1c/pmc.c **** }
 243:.././hal/sam3u1c/pmc.c **** #endif
 244:.././hal/sam3u1c/pmc.c **** 
 245:.././hal/sam3u1c/pmc.c **** #if (SAM3XA || SAM3U)
 246:.././hal/sam3u1c/pmc.c **** /**
 247:.././hal/sam3u1c/pmc.c ****  * \brief Switch master clock source selection to UPLL clock.
 248:.././hal/sam3u1c/pmc.c ****  *
 249:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Processor clock prescaler.
 250:.././hal/sam3u1c/pmc.c ****  *
 251:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 252:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 253:.././hal/sam3u1c/pmc.c ****  */
 254:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_mck_to_upllck(uint32_t ul_pres)
 255:.././hal/sam3u1c/pmc.c **** {
 509              	 .loc 1 255 0
 510              	 .cfi_startproc
 511              	 
 512              	 
 513              	 
 514 0000 80B4     	 push {r7}
 515              	.LCFI30:
 516              	 .cfi_def_cfa_offset 4
 517              	 .cfi_offset 7,-4
 518 0002 85B0     	 sub sp,sp,#20
 519              	.LCFI31:
 520              	 .cfi_def_cfa_offset 24
 521 0004 00AF     	 add r7,sp,#0
 522              	.LCFI32:
 523              	 .cfi_def_cfa_register 7
 524 0006 7860     	 str r0,[r7,#4]
 256:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 257:.././hal/sam3u1c/pmc.c **** 
 258:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 525              	 .loc 1 258 0
 526 0008 1B4B     	 ldr r3,.L47
 527 000a 1B6B     	 ldr r3,[r3,#48]
 528 000c 23F07002 	 bic r2,r3,#112
 529 0010 1949     	 ldr r1,.L47
 530 0012 7B68     	 ldr r3,[r7,#4]
 531 0014 1343     	 orrs r3,r3,r2
 532 0016 0B63     	 str r3,[r1,#48]
 259:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 533              	 .loc 1 259 0
 534 0018 4FF40063 	 mov r3,#2048
 535 001c FB60     	 str r3,[r7,#12]
 536 001e 07E0     	 b .L40
 537              	.L43:
 260:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 261:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 538              	 .loc 1 261 0
 539 0020 FB68     	 ldr r3,[r7,#12]
 540 0022 002B     	 cmp r3,#0
 541 0024 01D1     	 bne .L41
 262:.././hal/sam3u1c/pmc.c **** 			return 1;
 542              	 .loc 1 262 0
 543 0026 0123     	 movs r3,#1
 544 0028 21E0     	 b .L42
 545              	.L41:
 260:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 546              	 .loc 1 260 0
 547 002a FB68     	 ldr r3,[r7,#12]
 548 002c 013B     	 subs r3,r3,#1
 549 002e FB60     	 str r3,[r7,#12]
 550              	.L40:
 259:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 551              	 .loc 1 259 0 discriminator 1
 552 0030 114B     	 ldr r3,.L47
 553 0032 9B6E     	 ldr r3,[r3,#104]
 554 0034 03F00803 	 and r3,r3,#8
 555 0038 002B     	 cmp r3,#0
 556 003a F1D0     	 beq .L43
 263:.././hal/sam3u1c/pmc.c **** 		}
 264:.././hal/sam3u1c/pmc.c **** 	}
 265:.././hal/sam3u1c/pmc.c **** 
 266:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 557              	 .loc 1 266 0
 558 003c 0E4B     	 ldr r3,.L47
 559 003e 1B6B     	 ldr r3,[r3,#48]
 560 0040 0D4A     	 ldr r2,.L47
 561 0042 43F00303 	 orr r3,r3,#3
 562 0046 1363     	 str r3,[r2,#48]
 267:.././hal/sam3u1c/pmc.c **** 			PMC_MCKR_CSS_UPLL_CLK;
 268:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 563              	 .loc 1 268 0
 564 0048 4FF40063 	 mov r3,#2048
 565 004c FB60     	 str r3,[r7,#12]
 566 004e 07E0     	 b .L44
 567              	.L46:
 269:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 270:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 568              	 .loc 1 270 0
 569 0050 FB68     	 ldr r3,[r7,#12]
 570 0052 002B     	 cmp r3,#0
 571 0054 01D1     	 bne .L45
 271:.././hal/sam3u1c/pmc.c **** 			return 1;
 572              	 .loc 1 271 0
 573 0056 0123     	 movs r3,#1
 574 0058 09E0     	 b .L42
 575              	.L45:
 269:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 576              	 .loc 1 269 0
 577 005a FB68     	 ldr r3,[r7,#12]
 578 005c 013B     	 subs r3,r3,#1
 579 005e FB60     	 str r3,[r7,#12]
 580              	.L44:
 268:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 581              	 .loc 1 268 0 discriminator 1
 582 0060 054B     	 ldr r3,.L47
 583 0062 9B6E     	 ldr r3,[r3,#104]
 584 0064 03F00803 	 and r3,r3,#8
 585 0068 002B     	 cmp r3,#0
 586 006a F1D0     	 beq .L46
 272:.././hal/sam3u1c/pmc.c **** 		}
 273:.././hal/sam3u1c/pmc.c **** 	}
 274:.././hal/sam3u1c/pmc.c **** 
 275:.././hal/sam3u1c/pmc.c **** 	return 0;
 587              	 .loc 1 275 0
 588 006c 0023     	 movs r3,#0
 589              	.L42:
 276:.././hal/sam3u1c/pmc.c **** }
 590              	 .loc 1 276 0
 591 006e 1846     	 mov r0,r3
 592 0070 1437     	 adds r7,r7,#20
 593              	.LCFI33:
 594              	 .cfi_def_cfa_offset 4
 595 0072 BD46     	 mov sp,r7
 596              	.LCFI34:
 597              	 .cfi_def_cfa_register 13
 598              	 
 599 0074 80BC     	 pop {r7}
 600              	.LCFI35:
 601              	 .cfi_restore 7
 602              	 .cfi_def_cfa_offset 0
 603 0076 7047     	 bx lr
 604              	.L48:
 605              	 .align 2
 606              	.L47:
 607 0078 00040E40 	 .word 1074660352
 608              	 .cfi_endproc
 609              	.LFE74:
 611              	 .section .text.pmc_switch_sclk_to_32kxtal,"ax",%progbits
 612              	 .align 1
 613              	 .global pmc_switch_sclk_to_32kxtal
 614              	 .syntax unified
 615              	 .thumb
 616              	 .thumb_func
 617              	 .fpu softvfp
 619              	pmc_switch_sclk_to_32kxtal:
 620              	.LFB75:
 277:.././hal/sam3u1c/pmc.c **** #endif
 278:.././hal/sam3u1c/pmc.c **** 
 279:.././hal/sam3u1c/pmc.c **** /**
 280:.././hal/sam3u1c/pmc.c ****  * \brief Switch slow clock source selection to external 32k (Xtal or Bypass).
 281:.././hal/sam3u1c/pmc.c ****  *
 282:.././hal/sam3u1c/pmc.c ****  * \note This function disables the PLLs.
 283:.././hal/sam3u1c/pmc.c ****  *
 284:.././hal/sam3u1c/pmc.c ****  * \note Switching SCLK back to 32krc is only possible by shutting down the
 285:.././hal/sam3u1c/pmc.c ****  *       VDDIO power supply.
 286:.././hal/sam3u1c/pmc.c ****  *
 287:.././hal/sam3u1c/pmc.c ****  * \param ul_bypass 0 for Xtal, 1 for bypass.
 288:.././hal/sam3u1c/pmc.c ****  */
 289:.././hal/sam3u1c/pmc.c **** void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
 290:.././hal/sam3u1c/pmc.c **** {
 621              	 .loc 1 290 0
 622              	 .cfi_startproc
 623              	 
 624              	 
 625              	 
 626 0000 80B4     	 push {r7}
 627              	.LCFI36:
 628              	 .cfi_def_cfa_offset 4
 629              	 .cfi_offset 7,-4
 630 0002 83B0     	 sub sp,sp,#12
 631              	.LCFI37:
 632              	 .cfi_def_cfa_offset 16
 633 0004 00AF     	 add r7,sp,#0
 634              	.LCFI38:
 635              	 .cfi_def_cfa_register 7
 636 0006 7860     	 str r0,[r7,#4]
 291:.././hal/sam3u1c/pmc.c **** 	/* Set Bypass mode if required */
 292:.././hal/sam3u1c/pmc.c **** 	if (ul_bypass == 1) {
 637              	 .loc 1 292 0
 638 0008 7B68     	 ldr r3,[r7,#4]
 639 000a 012B     	 cmp r3,#1
 640 000c 07D1     	 bne .L50
 293:.././hal/sam3u1c/pmc.c **** 		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
 641              	 .loc 1 293 0
 642 000e 084B     	 ldr r3,.L51
 643 0010 9B68     	 ldr r3,[r3,#8]
 644 0012 074A     	 ldr r2,.L51
 645 0014 43F02543 	 orr r3,r3,#-1526726656
 646 0018 43F48013 	 orr r3,r3,#1048576
 647 001c 9360     	 str r3,[r2,#8]
 648              	.L50:
 294:.././hal/sam3u1c/pmc.c **** 			SUPC_MR_OSCBYPASS;
 295:.././hal/sam3u1c/pmc.c **** 	}
 296:.././hal/sam3u1c/pmc.c **** 
 297:.././hal/sam3u1c/pmc.c **** 	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
 649              	 .loc 1 297 0
 650 001e 044B     	 ldr r3,.L51
 651 0020 044A     	 ldr r2,.L51+4
 652 0022 1A60     	 str r2,[r3]
 298:.././hal/sam3u1c/pmc.c **** }
 653              	 .loc 1 298 0
 654 0024 00BF     	 nop
 655 0026 0C37     	 adds r7,r7,#12
 656              	.LCFI39:
 657              	 .cfi_def_cfa_offset 4
 658 0028 BD46     	 mov sp,r7
 659              	.LCFI40:
 660              	 .cfi_def_cfa_register 13
 661              	 
 662 002a 80BC     	 pop {r7}
 663              	.LCFI41:
 664              	 .cfi_restore 7
 665              	 .cfi_def_cfa_offset 0
 666 002c 7047     	 bx lr
 667              	.L52:
 668 002e 00BF     	 .align 2
 669              	.L51:
 670 0030 10120E40 	 .word 1074663952
 671 0034 080000A5 	 .word -1526726648
 672              	 .cfi_endproc
 673              	.LFE75:
 675              	 .section .text.pmc_osc_is_ready_32kxtal,"ax",%progbits
 676              	 .align 1
 677              	 .global pmc_osc_is_ready_32kxtal
 678              	 .syntax unified
 679              	 .thumb
 680              	 .thumb_func
 681              	 .fpu softvfp
 683              	pmc_osc_is_ready_32kxtal:
 684              	.LFB76:
 299:.././hal/sam3u1c/pmc.c **** 
 300:.././hal/sam3u1c/pmc.c **** /**
 301:.././hal/sam3u1c/pmc.c ****  * \brief Check if the external 32k Xtal is ready.
 302:.././hal/sam3u1c/pmc.c ****  *
 303:.././hal/sam3u1c/pmc.c ****  * \retval 1 External 32k Xtal is ready.
 304:.././hal/sam3u1c/pmc.c ****  * \retval 0 External 32k Xtal is not ready.
 305:.././hal/sam3u1c/pmc.c ****  */
 306:.././hal/sam3u1c/pmc.c **** uint32_t pmc_osc_is_ready_32kxtal(void)
 307:.././hal/sam3u1c/pmc.c **** {
 685              	 .loc 1 307 0
 686              	 .cfi_startproc
 687              	 
 688              	 
 689              	 
 690 0000 80B4     	 push {r7}
 691              	.LCFI42:
 692              	 .cfi_def_cfa_offset 4
 693              	 .cfi_offset 7,-4
 694 0002 00AF     	 add r7,sp,#0
 695              	.LCFI43:
 696              	 .cfi_def_cfa_register 7
 308:.././hal/sam3u1c/pmc.c **** 	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
 697              	 .loc 1 308 0
 698 0004 094B     	 ldr r3,.L57
 699 0006 5B69     	 ldr r3,[r3,#20]
 700 0008 03F08003 	 and r3,r3,#128
 309:.././hal/sam3u1c/pmc.c **** 			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
 701              	 .loc 1 309 0
 702 000c 002B     	 cmp r3,#0
 703 000e 07D0     	 beq .L54
 704              	 .loc 1 309 0 is_stmt 0 discriminator 1
 705 0010 074B     	 ldr r3,.L57+4
 706 0012 9B6E     	 ldr r3,[r3,#104]
 707 0014 03F08003 	 and r3,r3,#128
 708 0018 002B     	 cmp r3,#0
 709 001a 01D0     	 beq .L54
 710              	 .loc 1 309 0 discriminator 3
 711 001c 0123     	 movs r3,#1
 712 001e 00E0     	 b .L55
 713              	.L54:
 714              	 .loc 1 309 0 discriminator 4
 715 0020 0023     	 movs r3,#0
 716              	.L55:
 310:.././hal/sam3u1c/pmc.c **** }
 717              	 .loc 1 310 0 is_stmt 1 discriminator 6
 718 0022 1846     	 mov r0,r3
 719 0024 BD46     	 mov sp,r7
 720              	.LCFI44:
 721              	 .cfi_def_cfa_register 13
 722              	 
 723 0026 80BC     	 pop {r7}
 724              	.LCFI45:
 725              	 .cfi_restore 7
 726              	 .cfi_def_cfa_offset 0
 727 0028 7047     	 bx lr
 728              	.L58:
 729 002a 00BF     	 .align 2
 730              	.L57:
 731 002c 10120E40 	 .word 1074663952
 732 0030 00040E40 	 .word 1074660352
 733              	 .cfi_endproc
 734              	.LFE76:
 736              	 .section .text.pmc_switch_mainck_to_fastrc,"ax",%progbits
 737              	 .align 1
 738              	 .global pmc_switch_mainck_to_fastrc
 739              	 .syntax unified
 740              	 .thumb
 741              	 .thumb_func
 742              	 .fpu softvfp
 744              	pmc_switch_mainck_to_fastrc:
 745              	.LFB77:
 311:.././hal/sam3u1c/pmc.c **** 
 312:.././hal/sam3u1c/pmc.c **** /**
 313:.././hal/sam3u1c/pmc.c ****  * \brief Switch main clock source selection to internal fast RC.
 314:.././hal/sam3u1c/pmc.c ****  *
 315:.././hal/sam3u1c/pmc.c ****  * \param ul_moscrcf Fast RC oscillator(4/8/12Mhz).
 316:.././hal/sam3u1c/pmc.c ****  *
 317:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 318:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 319:.././hal/sam3u1c/pmc.c ****  * \retval 2 Invalid frequency.
 320:.././hal/sam3u1c/pmc.c ****  */
 321:.././hal/sam3u1c/pmc.c **** void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
 322:.././hal/sam3u1c/pmc.c **** {
 746              	 .loc 1 322 0
 747              	 .cfi_startproc
 748              	 
 749              	 
 750              	 
 751 0000 80B4     	 push {r7}
 752              	.LCFI46:
 753              	 .cfi_def_cfa_offset 4
 754              	 .cfi_offset 7,-4
 755 0002 83B0     	 sub sp,sp,#12
 756              	.LCFI47:
 757              	 .cfi_def_cfa_offset 16
 758 0004 00AF     	 add r7,sp,#0
 759              	.LCFI48:
 760              	 .cfi_def_cfa_register 7
 761 0006 7860     	 str r0,[r7,#4]
 323:.././hal/sam3u1c/pmc.c **** 	/* Enable Fast RC oscillator but DO NOT switch to RC now */
 324:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
 762              	 .loc 1 324 0
 763 0008 184B     	 ldr r3,.L62
 764 000a 1B6A     	 ldr r3,[r3,#32]
 765 000c 174A     	 ldr r2,.L62
 766 000e 43F45C13 	 orr r3,r3,#3604480
 767 0012 43F00803 	 orr r3,r3,#8
 768 0016 1362     	 str r3,[r2,#32]
 325:.././hal/sam3u1c/pmc.c **** 
 326:.././hal/sam3u1c/pmc.c **** 	/* Wait the Fast RC to stabilize */
 327:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 769              	 .loc 1 327 0
 770 0018 00BF     	 nop
 771              	.L60:
 772              	 .loc 1 327 0 is_stmt 0 discriminator 1
 773 001a 144B     	 ldr r3,.L62
 774 001c 9B6E     	 ldr r3,[r3,#104]
 775 001e 03F40033 	 and r3,r3,#131072
 776 0022 002B     	 cmp r3,#0
 777 0024 F9D0     	 beq .L60
 328:.././hal/sam3u1c/pmc.c **** 
 329:.././hal/sam3u1c/pmc.c **** 	/* Change Fast RC oscillator frequency */
 330:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
 778              	 .loc 1 330 0 is_stmt 1
 779 0026 114B     	 ldr r3,.L62
 780 0028 1B6A     	 ldr r3,[r3,#32]
 781 002a 23F45C13 	 bic r3,r3,#3604480
 782 002e 23F07003 	 bic r3,r3,#112
 331:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
 783              	 .loc 1 331 0
 784 0032 7A68     	 ldr r2,[r7,#4]
 785 0034 1343     	 orrs r3,r3,r2
 330:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
 786              	 .loc 1 330 0
 787 0036 0D4A     	 ldr r2,.L62
 788              	 .loc 1 331 0
 789 0038 43F45C13 	 orr r3,r3,#3604480
 330:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
 790              	 .loc 1 330 0
 791 003c 1362     	 str r3,[r2,#32]
 332:.././hal/sam3u1c/pmc.c **** 
 333:.././hal/sam3u1c/pmc.c **** 	/* Wait the Fast RC to stabilize */
 334:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 792              	 .loc 1 334 0
 793 003e 00BF     	 nop
 794              	.L61:
 795              	 .loc 1 334 0 is_stmt 0 discriminator 1
 796 0040 0A4B     	 ldr r3,.L62
 797 0042 9B6E     	 ldr r3,[r3,#104]
 798 0044 03F40033 	 and r3,r3,#131072
 799 0048 002B     	 cmp r3,#0
 800 004a F9D0     	 beq .L61
 335:.././hal/sam3u1c/pmc.c **** 
 336:.././hal/sam3u1c/pmc.c **** 	/* Switch to Fast RC */
 337:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
 801              	 .loc 1 337 0 is_stmt 1
 802 004c 074B     	 ldr r3,.L62
 803 004e 1B6A     	 ldr r3,[r3,#32]
 804 0050 23F09B73 	 bic r3,r3,#20316160
 805 0054 23F48033 	 bic r3,r3,#65536
 806 0058 044A     	 ldr r2,.L62
 807 005a 43F45C13 	 orr r3,r3,#3604480
 808 005e 1362     	 str r3,[r2,#32]
 338:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD;
 339:.././hal/sam3u1c/pmc.c **** }
 809              	 .loc 1 339 0
 810 0060 00BF     	 nop
 811 0062 0C37     	 adds r7,r7,#12
 812              	.LCFI49:
 813              	 .cfi_def_cfa_offset 4
 814 0064 BD46     	 mov sp,r7
 815              	.LCFI50:
 816              	 .cfi_def_cfa_register 13
 817              	 
 818 0066 80BC     	 pop {r7}
 819              	.LCFI51:
 820              	 .cfi_restore 7
 821              	 .cfi_def_cfa_offset 0
 822 0068 7047     	 bx lr
 823              	.L63:
 824 006a 00BF     	 .align 2
 825              	.L62:
 826 006c 00040E40 	 .word 1074660352
 827              	 .cfi_endproc
 828              	.LFE77:
 830              	 .section .text.pmc_osc_enable_fastrc,"ax",%progbits
 831              	 .align 1
 832              	 .global pmc_osc_enable_fastrc
 833              	 .syntax unified
 834              	 .thumb
 835              	 .thumb_func
 836              	 .fpu softvfp
 838              	pmc_osc_enable_fastrc:
 839              	.LFB78:
 340:.././hal/sam3u1c/pmc.c **** 
 341:.././hal/sam3u1c/pmc.c **** /**
 342:.././hal/sam3u1c/pmc.c ****  * \brief Enable fast RC oscillator.
 343:.././hal/sam3u1c/pmc.c ****  *
 344:.././hal/sam3u1c/pmc.c ****  * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 345:.././hal/sam3u1c/pmc.c ****  */
 346:.././hal/sam3u1c/pmc.c **** void pmc_osc_enable_fastrc(uint32_t ul_rc)
 347:.././hal/sam3u1c/pmc.c **** {
 840              	 .loc 1 347 0
 841              	 .cfi_startproc
 842              	 
 843              	 
 844              	 
 845 0000 80B4     	 push {r7}
 846              	.LCFI52:
 847              	 .cfi_def_cfa_offset 4
 848              	 .cfi_offset 7,-4
 849 0002 83B0     	 sub sp,sp,#12
 850              	.LCFI53:
 851              	 .cfi_def_cfa_offset 16
 852 0004 00AF     	 add r7,sp,#0
 853              	.LCFI54:
 854              	 .cfi_def_cfa_register 7
 855 0006 7860     	 str r0,[r7,#4]
 348:.././hal/sam3u1c/pmc.c **** 	/* Enable Fast RC oscillator but DO NOT switch to RC */
 349:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
 856              	 .loc 1 349 0
 857 0008 134B     	 ldr r3,.L67
 858 000a 1B6A     	 ldr r3,[r3,#32]
 859 000c 124A     	 ldr r2,.L67
 860 000e 43F45C13 	 orr r3,r3,#3604480
 861 0012 43F00803 	 orr r3,r3,#8
 862 0016 1362     	 str r3,[r2,#32]
 350:.././hal/sam3u1c/pmc.c **** 	/* Wait the Fast RC to stabilize */
 351:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 863              	 .loc 1 351 0
 864 0018 00BF     	 nop
 865              	.L65:
 866              	 .loc 1 351 0 is_stmt 0 discriminator 1
 867 001a 0F4B     	 ldr r3,.L67
 868 001c 9B6E     	 ldr r3,[r3,#104]
 869 001e 03F40033 	 and r3,r3,#131072
 870 0022 002B     	 cmp r3,#0
 871 0024 F9D0     	 beq .L65
 352:.././hal/sam3u1c/pmc.c **** 
 353:.././hal/sam3u1c/pmc.c **** 	/* Change Fast RC oscillator frequency */
 354:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
 872              	 .loc 1 354 0 is_stmt 1
 873 0026 0C4B     	 ldr r3,.L67
 874 0028 1B6A     	 ldr r3,[r3,#32]
 875 002a 23F45C13 	 bic r3,r3,#3604480
 876 002e 23F07003 	 bic r3,r3,#112
 355:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_rc;
 877              	 .loc 1 355 0
 878 0032 7A68     	 ldr r2,[r7,#4]
 879 0034 1343     	 orrs r3,r3,r2
 354:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_rc;
 880              	 .loc 1 354 0
 881 0036 084A     	 ldr r2,.L67
 882              	 .loc 1 355 0
 883 0038 43F45C13 	 orr r3,r3,#3604480
 354:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_rc;
 884              	 .loc 1 354 0
 885 003c 1362     	 str r3,[r2,#32]
 356:.././hal/sam3u1c/pmc.c **** 	/* Wait the Fast RC to stabilize */
 357:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 886              	 .loc 1 357 0
 887 003e 00BF     	 nop
 888              	.L66:
 889              	 .loc 1 357 0 is_stmt 0 discriminator 1
 890 0040 054B     	 ldr r3,.L67
 891 0042 9B6E     	 ldr r3,[r3,#104]
 892 0044 03F40033 	 and r3,r3,#131072
 893 0048 002B     	 cmp r3,#0
 894 004a F9D0     	 beq .L66
 358:.././hal/sam3u1c/pmc.c **** }
 895              	 .loc 1 358 0 is_stmt 1
 896 004c 00BF     	 nop
 897 004e 0C37     	 adds r7,r7,#12
 898              	.LCFI55:
 899              	 .cfi_def_cfa_offset 4
 900 0050 BD46     	 mov sp,r7
 901              	.LCFI56:
 902              	 .cfi_def_cfa_register 13
 903              	 
 904 0052 80BC     	 pop {r7}
 905              	.LCFI57:
 906              	 .cfi_restore 7
 907              	 .cfi_def_cfa_offset 0
 908 0054 7047     	 bx lr
 909              	.L68:
 910 0056 00BF     	 .align 2
 911              	.L67:
 912 0058 00040E40 	 .word 1074660352
 913              	 .cfi_endproc
 914              	.LFE78:
 916              	 .section .text.pmc_osc_disable_fastrc,"ax",%progbits
 917              	 .align 1
 918              	 .global pmc_osc_disable_fastrc
 919              	 .syntax unified
 920              	 .thumb
 921              	 .thumb_func
 922              	 .fpu softvfp
 924              	pmc_osc_disable_fastrc:
 925              	.LFB79:
 359:.././hal/sam3u1c/pmc.c **** 
 360:.././hal/sam3u1c/pmc.c **** /**
 361:.././hal/sam3u1c/pmc.c ****  * \brief Disable the internal fast RC.
 362:.././hal/sam3u1c/pmc.c ****  */
 363:.././hal/sam3u1c/pmc.c **** void pmc_osc_disable_fastrc(void)
 364:.././hal/sam3u1c/pmc.c **** {
 926              	 .loc 1 364 0
 927              	 .cfi_startproc
 928              	 
 929              	 
 930              	 
 931 0000 80B4     	 push {r7}
 932              	.LCFI58:
 933              	 .cfi_def_cfa_offset 4
 934              	 .cfi_offset 7,-4
 935 0002 00AF     	 add r7,sp,#0
 936              	.LCFI59:
 937              	 .cfi_def_cfa_register 7
 365:.././hal/sam3u1c/pmc.c **** 	/* Disable Fast RC oscillator */
 366:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
 938              	 .loc 1 366 0
 939 0004 064B     	 ldr r3,.L70
 940 0006 1B6A     	 ldr r3,[r3,#32]
 367:.././hal/sam3u1c/pmc.c **** 					~CKGR_MOR_MOSCRCF_Msk)
 368:.././hal/sam3u1c/pmc.c **** 				| CKGR_MOR_KEY_PASSWD;
 941              	 .loc 1 368 0
 942 0008 23F45C13 	 bic r3,r3,#3604480
 943 000c 23F07803 	 bic r3,r3,#120
 366:.././hal/sam3u1c/pmc.c **** 					~CKGR_MOR_MOSCRCF_Msk)
 944              	 .loc 1 366 0
 945 0010 034A     	 ldr r2,.L70
 946              	 .loc 1 368 0
 947 0012 43F45C13 	 orr r3,r3,#3604480
 366:.././hal/sam3u1c/pmc.c **** 					~CKGR_MOR_MOSCRCF_Msk)
 948              	 .loc 1 366 0
 949 0016 1362     	 str r3,[r2,#32]
 369:.././hal/sam3u1c/pmc.c **** }
 950              	 .loc 1 369 0
 951 0018 00BF     	 nop
 952 001a BD46     	 mov sp,r7
 953              	.LCFI60:
 954              	 .cfi_def_cfa_register 13
 955              	 
 956 001c 80BC     	 pop {r7}
 957              	.LCFI61:
 958              	 .cfi_restore 7
 959              	 .cfi_def_cfa_offset 0
 960 001e 7047     	 bx lr
 961              	.L71:
 962              	 .align 2
 963              	.L70:
 964 0020 00040E40 	 .word 1074660352
 965              	 .cfi_endproc
 966              	.LFE79:
 968              	 .section .text.pmc_osc_is_ready_fastrc,"ax",%progbits
 969              	 .align 1
 970              	 .global pmc_osc_is_ready_fastrc
 971              	 .syntax unified
 972              	 .thumb
 973              	 .thumb_func
 974              	 .fpu softvfp
 976              	pmc_osc_is_ready_fastrc:
 977              	.LFB80:
 370:.././hal/sam3u1c/pmc.c **** 
 371:.././hal/sam3u1c/pmc.c **** /**
 372:.././hal/sam3u1c/pmc.c ****  * \brief Check if the main fastrc is ready.
 373:.././hal/sam3u1c/pmc.c ****  *
 374:.././hal/sam3u1c/pmc.c ****  * \retval 0 Xtal is not ready, otherwise ready.
 375:.././hal/sam3u1c/pmc.c ****  */
 376:.././hal/sam3u1c/pmc.c **** uint32_t pmc_osc_is_ready_fastrc(void)
 377:.././hal/sam3u1c/pmc.c **** {
 978              	 .loc 1 377 0
 979              	 .cfi_startproc
 980              	 
 981              	 
 982              	 
 983 0000 80B4     	 push {r7}
 984              	.LCFI62:
 985              	 .cfi_def_cfa_offset 4
 986              	 .cfi_offset 7,-4
 987 0002 00AF     	 add r7,sp,#0
 988              	.LCFI63:
 989              	 .cfi_def_cfa_register 7
 378:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
 990              	 .loc 1 378 0
 991 0004 034B     	 ldr r3,.L74
 992 0006 9B6E     	 ldr r3,[r3,#104]
 993 0008 03F40033 	 and r3,r3,#131072
 379:.././hal/sam3u1c/pmc.c **** }
 994              	 .loc 1 379 0
 995 000c 1846     	 mov r0,r3
 996 000e BD46     	 mov sp,r7
 997              	.LCFI64:
 998              	 .cfi_def_cfa_register 13
 999              	 
 1000 0010 80BC     	 pop {r7}
 1001              	.LCFI65:
 1002              	 .cfi_restore 7
 1003              	 .cfi_def_cfa_offset 0
 1004 0012 7047     	 bx lr
 1005              	.L75:
 1006              	 .align 2
 1007              	.L74:
 1008 0014 00040E40 	 .word 1074660352
 1009              	 .cfi_endproc
 1010              	.LFE80:
 1012              	 .section .text.pmc_osc_enable_main_xtal,"ax",%progbits
 1013              	 .align 1
 1014              	 .global pmc_osc_enable_main_xtal
 1015              	 .syntax unified
 1016              	 .thumb
 1017              	 .thumb_func
 1018              	 .fpu softvfp
 1020              	pmc_osc_enable_main_xtal:
 1021              	.LFB81:
 380:.././hal/sam3u1c/pmc.c **** 
 381:.././hal/sam3u1c/pmc.c **** /**
 382:.././hal/sam3u1c/pmc.c ****  * \brief Enable main XTAL oscillator.
 383:.././hal/sam3u1c/pmc.c ****  *
 384:.././hal/sam3u1c/pmc.c ****  * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 385:.././hal/sam3u1c/pmc.c ****  */
 386:.././hal/sam3u1c/pmc.c **** void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
 387:.././hal/sam3u1c/pmc.c **** {
 1022              	 .loc 1 387 0
 1023              	 .cfi_startproc
 1024              	 
 1025              	 
 1026              	 
 1027 0000 80B4     	 push {r7}
 1028              	.LCFI66:
 1029              	 .cfi_def_cfa_offset 4
 1030              	 .cfi_offset 7,-4
 1031 0002 85B0     	 sub sp,sp,#20
 1032              	.LCFI67:
 1033              	 .cfi_def_cfa_offset 24
 1034 0004 00AF     	 add r7,sp,#0
 1035              	.LCFI68:
 1036              	 .cfi_def_cfa_register 7
 1037 0006 7860     	 str r0,[r7,#4]
 388:.././hal/sam3u1c/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 1038              	 .loc 1 388 0
 1039 0008 0F4B     	 ldr r3,.L78
 1040 000a 1B6A     	 ldr r3,[r3,#32]
 1041 000c FB60     	 str r3,[r7,#12]
 389:.././hal/sam3u1c/pmc.c **** 	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
 1042              	 .loc 1 389 0
 1043 000e FB68     	 ldr r3,[r7,#12]
 1044 0010 23F00303 	 bic r3,r3,#3
 1045 0014 FB60     	 str r3,[r7,#12]
 390:.././hal/sam3u1c/pmc.c **** 	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 391:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 1046              	 .loc 1 391 0
 1047 0016 7B68     	 ldr r3,[r7,#4]
 1048 0018 1B02     	 lsls r3,r3,#8
 1049 001a 9AB2     	 uxth r2,r3
 390:.././hal/sam3u1c/pmc.c **** 	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 1050              	 .loc 1 390 0
 1051 001c FB68     	 ldr r3,[r7,#12]
 1052 001e 1343     	 orrs r3,r3,r2
 1053 0020 43F45C13 	 orr r3,r3,#3604480
 1054 0024 43F00103 	 orr r3,r3,#1
 1055 0028 FB60     	 str r3,[r7,#12]
 392:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = mor;
 1056              	 .loc 1 392 0
 1057 002a 074A     	 ldr r2,.L78
 1058 002c FB68     	 ldr r3,[r7,#12]
 1059 002e 1362     	 str r3,[r2,#32]
 393:.././hal/sam3u1c/pmc.c **** 	/* Wait the main Xtal to stabilize */
 394:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
 1060              	 .loc 1 394 0
 1061 0030 00BF     	 nop
 1062              	.L77:
 1063              	 .loc 1 394 0 is_stmt 0 discriminator 1
 1064 0032 054B     	 ldr r3,.L78
 1065 0034 9B6E     	 ldr r3,[r3,#104]
 1066 0036 03F00103 	 and r3,r3,#1
 1067 003a 002B     	 cmp r3,#0
 1068 003c F9D0     	 beq .L77
 395:.././hal/sam3u1c/pmc.c **** }
 1069              	 .loc 1 395 0 is_stmt 1
 1070 003e 00BF     	 nop
 1071 0040 1437     	 adds r7,r7,#20
 1072              	.LCFI69:
 1073              	 .cfi_def_cfa_offset 4
 1074 0042 BD46     	 mov sp,r7
 1075              	.LCFI70:
 1076              	 .cfi_def_cfa_register 13
 1077              	 
 1078 0044 80BC     	 pop {r7}
 1079              	.LCFI71:
 1080              	 .cfi_restore 7
 1081              	 .cfi_def_cfa_offset 0
 1082 0046 7047     	 bx lr
 1083              	.L79:
 1084              	 .align 2
 1085              	.L78:
 1086 0048 00040E40 	 .word 1074660352
 1087              	 .cfi_endproc
 1088              	.LFE81:
 1090              	 .section .text.pmc_osc_bypass_main_xtal,"ax",%progbits
 1091              	 .align 1
 1092              	 .global pmc_osc_bypass_main_xtal
 1093              	 .syntax unified
 1094              	 .thumb
 1095              	 .thumb_func
 1096              	 .fpu softvfp
 1098              	pmc_osc_bypass_main_xtal:
 1099              	.LFB82:
 396:.././hal/sam3u1c/pmc.c **** 
 397:.././hal/sam3u1c/pmc.c **** /**
 398:.././hal/sam3u1c/pmc.c ****  * \brief Bypass main XTAL.
 399:.././hal/sam3u1c/pmc.c ****  */
 400:.././hal/sam3u1c/pmc.c **** void pmc_osc_bypass_main_xtal(void)
 401:.././hal/sam3u1c/pmc.c **** {
 1100              	 .loc 1 401 0
 1101              	 .cfi_startproc
 1102              	 
 1103              	 
 1104              	 
 1105 0000 80B4     	 push {r7}
 1106              	.LCFI72:
 1107              	 .cfi_def_cfa_offset 4
 1108              	 .cfi_offset 7,-4
 1109 0002 83B0     	 sub sp,sp,#12
 1110              	.LCFI73:
 1111              	 .cfi_def_cfa_offset 16
 1112 0004 00AF     	 add r7,sp,#0
 1113              	.LCFI74:
 1114              	 .cfi_def_cfa_register 7
 402:.././hal/sam3u1c/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 1115              	 .loc 1 402 0
 1116 0006 0A4B     	 ldr r3,.L81
 1117 0008 1B6A     	 ldr r3,[r3,#32]
 1118 000a 7B60     	 str r3,[r7,#4]
 403:.././hal/sam3u1c/pmc.c **** 	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
 1119              	 .loc 1 403 0
 1120 000c 7B68     	 ldr r3,[r7,#4]
 1121 000e 23F00303 	 bic r3,r3,#3
 1122 0012 7B60     	 str r3,[r7,#4]
 404:.././hal/sam3u1c/pmc.c **** 	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
 1123              	 .loc 1 404 0
 1124 0014 7B68     	 ldr r3,[r7,#4]
 1125 0016 43F45C13 	 orr r3,r3,#3604480
 1126 001a 43F00203 	 orr r3,r3,#2
 1127 001e 7B60     	 str r3,[r7,#4]
 405:.././hal/sam3u1c/pmc.c **** 	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
 406:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = mor;
 1128              	 .loc 1 406 0
 1129 0020 034A     	 ldr r2,.L81
 1130 0022 7B68     	 ldr r3,[r7,#4]
 1131 0024 1362     	 str r3,[r2,#32]
 407:.././hal/sam3u1c/pmc.c **** 	/* The MOSCXTS in PMC_SR is automatically set */
 408:.././hal/sam3u1c/pmc.c **** }
 1132              	 .loc 1 408 0
 1133 0026 00BF     	 nop
 1134 0028 0C37     	 adds r7,r7,#12
 1135              	.LCFI75:
 1136              	 .cfi_def_cfa_offset 4
 1137 002a BD46     	 mov sp,r7
 1138              	.LCFI76:
 1139              	 .cfi_def_cfa_register 13
 1140              	 
 1141 002c 80BC     	 pop {r7}
 1142              	.LCFI77:
 1143              	 .cfi_restore 7
 1144              	 .cfi_def_cfa_offset 0
 1145 002e 7047     	 bx lr
 1146              	.L82:
 1147              	 .align 2
 1148              	.L81:
 1149 0030 00040E40 	 .word 1074660352
 1150              	 .cfi_endproc
 1151              	.LFE82:
 1153              	 .section .text.pmc_osc_disable_main_xtal,"ax",%progbits
 1154              	 .align 1
 1155              	 .global pmc_osc_disable_main_xtal
 1156              	 .syntax unified
 1157              	 .thumb
 1158              	 .thumb_func
 1159              	 .fpu softvfp
 1161              	pmc_osc_disable_main_xtal:
 1162              	.LFB83:
 409:.././hal/sam3u1c/pmc.c **** 
 410:.././hal/sam3u1c/pmc.c **** /**
 411:.././hal/sam3u1c/pmc.c ****  * \brief Disable the main Xtal.
 412:.././hal/sam3u1c/pmc.c ****  */
 413:.././hal/sam3u1c/pmc.c **** void pmc_osc_disable_main_xtal(void)
 414:.././hal/sam3u1c/pmc.c **** {
 1163              	 .loc 1 414 0
 1164              	 .cfi_startproc
 1165              	 
 1166              	 
 1167              	 
 1168 0000 80B4     	 push {r7}
 1169              	.LCFI78:
 1170              	 .cfi_def_cfa_offset 4
 1171              	 .cfi_offset 7,-4
 1172 0002 83B0     	 sub sp,sp,#12
 1173              	.LCFI79:
 1174              	 .cfi_def_cfa_offset 16
 1175 0004 00AF     	 add r7,sp,#0
 1176              	.LCFI80:
 1177              	 .cfi_def_cfa_register 7
 415:.././hal/sam3u1c/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 1178              	 .loc 1 415 0
 1179 0006 084B     	 ldr r3,.L84
 1180 0008 1B6A     	 ldr r3,[r3,#32]
 1181 000a 7B60     	 str r3,[r7,#4]
 416:.././hal/sam3u1c/pmc.c **** 	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
 1182              	 .loc 1 416 0
 1183 000c 7B68     	 ldr r3,[r7,#4]
 1184 000e 23F00303 	 bic r3,r3,#3
 1185 0012 7B60     	 str r3,[r7,#4]
 417:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
 1186              	 .loc 1 417 0
 1187 0014 044A     	 ldr r2,.L84
 1188 0016 7B68     	 ldr r3,[r7,#4]
 1189 0018 43F45C13 	 orr r3,r3,#3604480
 1190 001c 1362     	 str r3,[r2,#32]
 418:.././hal/sam3u1c/pmc.c **** }
 1191              	 .loc 1 418 0
 1192 001e 00BF     	 nop
 1193 0020 0C37     	 adds r7,r7,#12
 1194              	.LCFI81:
 1195              	 .cfi_def_cfa_offset 4
 1196 0022 BD46     	 mov sp,r7
 1197              	.LCFI82:
 1198              	 .cfi_def_cfa_register 13
 1199              	 
 1200 0024 80BC     	 pop {r7}
 1201              	.LCFI83:
 1202              	 .cfi_restore 7
 1203              	 .cfi_def_cfa_offset 0
 1204 0026 7047     	 bx lr
 1205              	.L85:
 1206              	 .align 2
 1207              	.L84:
 1208 0028 00040E40 	 .word 1074660352
 1209              	 .cfi_endproc
 1210              	.LFE83:
 1212              	 .section .text.pmc_osc_is_bypassed_main_xtal,"ax",%progbits
 1213              	 .align 1
 1214              	 .global pmc_osc_is_bypassed_main_xtal
 1215              	 .syntax unified
 1216              	 .thumb
 1217              	 .thumb_func
 1218              	 .fpu softvfp
 1220              	pmc_osc_is_bypassed_main_xtal:
 1221              	.LFB84:
 419:.././hal/sam3u1c/pmc.c **** 
 420:.././hal/sam3u1c/pmc.c **** /**
 421:.././hal/sam3u1c/pmc.c ****  * \brief Check if the main crystal is bypassed.
 422:.././hal/sam3u1c/pmc.c ****  *
 423:.././hal/sam3u1c/pmc.c ****  * \retval 0 Xtal is bypassed, otherwise not.
 424:.././hal/sam3u1c/pmc.c ****  */
 425:.././hal/sam3u1c/pmc.c **** uint32_t pmc_osc_is_bypassed_main_xtal(void)
 426:.././hal/sam3u1c/pmc.c **** {
 1222              	 .loc 1 426 0
 1223              	 .cfi_startproc
 1224              	 
 1225              	 
 1226              	 
 1227 0000 80B4     	 push {r7}
 1228              	.LCFI84:
 1229              	 .cfi_def_cfa_offset 4
 1230              	 .cfi_offset 7,-4
 1231 0002 00AF     	 add r7,sp,#0
 1232              	.LCFI85:
 1233              	 .cfi_def_cfa_register 7
 427:.././hal/sam3u1c/pmc.c **** 	return (PMC->CKGR_MOR & CKGR_MOR_MOSCXTBY);
 1234              	 .loc 1 427 0
 1235 0004 034B     	 ldr r3,.L88
 1236 0006 1B6A     	 ldr r3,[r3,#32]
 1237 0008 03F00203 	 and r3,r3,#2
 428:.././hal/sam3u1c/pmc.c **** }
 1238              	 .loc 1 428 0
 1239 000c 1846     	 mov r0,r3
 1240 000e BD46     	 mov sp,r7
 1241              	.LCFI86:
 1242              	 .cfi_def_cfa_register 13
 1243              	 
 1244 0010 80BC     	 pop {r7}
 1245              	.LCFI87:
 1246              	 .cfi_restore 7
 1247              	 .cfi_def_cfa_offset 0
 1248 0012 7047     	 bx lr
 1249              	.L89:
 1250              	 .align 2
 1251              	.L88:
 1252 0014 00040E40 	 .word 1074660352
 1253              	 .cfi_endproc
 1254              	.LFE84:
 1256              	 .section .text.pmc_osc_is_ready_main_xtal,"ax",%progbits
 1257              	 .align 1
 1258              	 .global pmc_osc_is_ready_main_xtal
 1259              	 .syntax unified
 1260              	 .thumb
 1261              	 .thumb_func
 1262              	 .fpu softvfp
 1264              	pmc_osc_is_ready_main_xtal:
 1265              	.LFB85:
 429:.././hal/sam3u1c/pmc.c **** 
 430:.././hal/sam3u1c/pmc.c **** /**
 431:.././hal/sam3u1c/pmc.c ****  * \brief Check if the main crystal is ready.
 432:.././hal/sam3u1c/pmc.c ****  *
 433:.././hal/sam3u1c/pmc.c ****  * \note If main crystal is bypassed, it's always ready.
 434:.././hal/sam3u1c/pmc.c ****  *
 435:.././hal/sam3u1c/pmc.c ****  * \retval 0 main crystal is not ready, otherwise ready.
 436:.././hal/sam3u1c/pmc.c ****  */
 437:.././hal/sam3u1c/pmc.c **** uint32_t pmc_osc_is_ready_main_xtal(void)
 438:.././hal/sam3u1c/pmc.c **** {
 1266              	 .loc 1 438 0
 1267              	 .cfi_startproc
 1268              	 
 1269              	 
 1270              	 
 1271 0000 80B4     	 push {r7}
 1272              	.LCFI88:
 1273              	 .cfi_def_cfa_offset 4
 1274              	 .cfi_offset 7,-4
 1275 0002 00AF     	 add r7,sp,#0
 1276              	.LCFI89:
 1277              	 .cfi_def_cfa_register 7
 439:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
 1278              	 .loc 1 439 0
 1279 0004 034B     	 ldr r3,.L92
 1280 0006 9B6E     	 ldr r3,[r3,#104]
 1281 0008 03F00103 	 and r3,r3,#1
 440:.././hal/sam3u1c/pmc.c **** }
 1282              	 .loc 1 440 0
 1283 000c 1846     	 mov r0,r3
 1284 000e BD46     	 mov sp,r7
 1285              	.LCFI90:
 1286              	 .cfi_def_cfa_register 13
 1287              	 
 1288 0010 80BC     	 pop {r7}
 1289              	.LCFI91:
 1290              	 .cfi_restore 7
 1291              	 .cfi_def_cfa_offset 0
 1292 0012 7047     	 bx lr
 1293              	.L93:
 1294              	 .align 2
 1295              	.L92:
 1296 0014 00040E40 	 .word 1074660352
 1297              	 .cfi_endproc
 1298              	.LFE85:
 1300              	 .section .text.pmc_switch_mainck_to_xtal,"ax",%progbits
 1301              	 .align 1
 1302              	 .global pmc_switch_mainck_to_xtal
 1303              	 .syntax unified
 1304              	 .thumb
 1305              	 .thumb_func
 1306              	 .fpu softvfp
 1308              	pmc_switch_mainck_to_xtal:
 1309              	.LFB86:
 441:.././hal/sam3u1c/pmc.c **** 
 442:.././hal/sam3u1c/pmc.c **** /**
 443:.././hal/sam3u1c/pmc.c ****  * \brief Switch main clock source selection to external Xtal/Bypass.
 444:.././hal/sam3u1c/pmc.c ****  *
 445:.././hal/sam3u1c/pmc.c ****  * \note The function may switch MCK to SCLK if MCK source is MAINCK to avoid
 446:.././hal/sam3u1c/pmc.c ****  *       any system crash.
 447:.././hal/sam3u1c/pmc.c ****  *
 448:.././hal/sam3u1c/pmc.c ****  * \note If used in Xtal mode, the Xtal is automatically enabled.
 449:.././hal/sam3u1c/pmc.c ****  *
 450:.././hal/sam3u1c/pmc.c ****  * \param ul_bypass 0 for Xtal, 1 for bypass.
 451:.././hal/sam3u1c/pmc.c ****  *
 452:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 453:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 454:.././hal/sam3u1c/pmc.c ****  */
 455:.././hal/sam3u1c/pmc.c **** void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
 456:.././hal/sam3u1c/pmc.c **** 		uint32_t ul_xtal_startup_time)
 457:.././hal/sam3u1c/pmc.c **** {
 1310              	 .loc 1 457 0
 1311              	 .cfi_startproc
 1312              	 
 1313              	 
 1314              	 
 1315 0000 80B4     	 push {r7}
 1316              	.LCFI92:
 1317              	 .cfi_def_cfa_offset 4
 1318              	 .cfi_offset 7,-4
 1319 0002 83B0     	 sub sp,sp,#12
 1320              	.LCFI93:
 1321              	 .cfi_def_cfa_offset 16
 1322 0004 00AF     	 add r7,sp,#0
 1323              	.LCFI94:
 1324              	 .cfi_def_cfa_register 7
 1325 0006 7860     	 str r0,[r7,#4]
 1326 0008 3960     	 str r1,[r7]
 458:.././hal/sam3u1c/pmc.c **** 	/* Enable Main Xtal oscillator */
 459:.././hal/sam3u1c/pmc.c **** 	if (ul_bypass) {
 1327              	 .loc 1 459 0
 1328 000a 7B68     	 ldr r3,[r7,#4]
 1329 000c 002B     	 cmp r3,#0
 1330 000e 08D0     	 beq .L95
 460:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 1331              	 .loc 1 460 0
 1332 0010 164B     	 ldr r3,.L99
 1333 0012 1B6A     	 ldr r3,[r3,#32]
 461:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
 1334              	 .loc 1 461 0
 1335 0014 164A     	 ldr r2,.L99+4
 1336 0016 1A40     	 ands r2,r2,r3
 460:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 1337              	 .loc 1 460 0
 1338 0018 1449     	 ldr r1,.L99
 1339              	 .loc 1 461 0
 1340 001a 164B     	 ldr r3,.L99+8
 1341 001c 1343     	 orrs r3,r3,r2
 460:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 1342              	 .loc 1 460 0
 1343 001e 0B62     	 str r3,[r1,#32]
 462:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_MOSCSEL;
 463:.././hal/sam3u1c/pmc.c **** 	} else {
 464:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
 465:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 466:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 467:.././hal/sam3u1c/pmc.c **** 		/* Wait the Xtal to stabilize */
 468:.././hal/sam3u1c/pmc.c **** 		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
 469:.././hal/sam3u1c/pmc.c **** 
 470:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
 471:.././hal/sam3u1c/pmc.c **** 	}
 472:.././hal/sam3u1c/pmc.c **** }
 1344              	 .loc 1 472 0
 1345 0020 1EE0     	 b .L98
 1346              	.L95:
 464:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 1347              	 .loc 1 464 0
 1348 0022 124B     	 ldr r3,.L99
 1349 0024 1B6A     	 ldr r3,[r3,#32]
 465:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 1350              	 .loc 1 465 0
 1351 0026 23F45C13 	 bic r3,r3,#3604480
 1352 002a 23F00303 	 bic r3,r3,#3
 466:.././hal/sam3u1c/pmc.c **** 		/* Wait the Xtal to stabilize */
 1353              	 .loc 1 466 0
 1354 002e 3A68     	 ldr r2,[r7]
 1355 0030 1202     	 lsls r2,r2,#8
 1356 0032 92B2     	 uxth r2,r2
 465:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 1357              	 .loc 1 465 0
 1358 0034 1343     	 orrs r3,r3,r2
 464:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 1359              	 .loc 1 464 0
 1360 0036 0D4A     	 ldr r2,.L99
 465:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 1361              	 .loc 1 465 0
 1362 0038 43F45C13 	 orr r3,r3,#3604480
 1363 003c 43F00103 	 orr r3,r3,#1
 464:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 1364              	 .loc 1 464 0
 1365 0040 1362     	 str r3,[r2,#32]
 468:.././hal/sam3u1c/pmc.c **** 
 1366              	 .loc 1 468 0
 1367 0042 00BF     	 nop
 1368              	.L97:
 468:.././hal/sam3u1c/pmc.c **** 
 1369              	 .loc 1 468 0 is_stmt 0 discriminator 1
 1370 0044 094B     	 ldr r3,.L99
 1371 0046 9B6E     	 ldr r3,[r3,#104]
 1372 0048 03F00103 	 and r3,r3,#1
 1373 004c 002B     	 cmp r3,#0
 1374 004e F9D0     	 beq .L97
 470:.././hal/sam3u1c/pmc.c **** 	}
 1375              	 .loc 1 470 0 is_stmt 1
 1376 0050 064B     	 ldr r3,.L99
 1377 0052 1B6A     	 ldr r3,[r3,#32]
 1378 0054 054A     	 ldr r2,.L99
 1379 0056 43F09B73 	 orr r3,r3,#20316160
 1380 005a 43F48033 	 orr r3,r3,#65536
 1381 005e 1362     	 str r3,[r2,#32]
 1382              	.L98:
 1383              	 .loc 1 472 0
 1384 0060 00BF     	 nop
 1385 0062 0C37     	 adds r7,r7,#12
 1386              	.LCFI95:
 1387              	 .cfi_def_cfa_offset 4
 1388 0064 BD46     	 mov sp,r7
 1389              	.LCFI96:
 1390              	 .cfi_def_cfa_register 13
 1391              	 
 1392 0066 80BC     	 pop {r7}
 1393              	.LCFI97:
 1394              	 .cfi_restore 7
 1395              	 .cfi_def_cfa_offset 0
 1396 0068 7047     	 bx lr
 1397              	.L100:
 1398 006a 00BF     	 .align 2
 1399              	.L99:
 1400 006c 00040E40 	 .word 1074660352
 1401 0070 FCFFC8FE 	 .word -20381700
 1402 0074 02003701 	 .word 20381698
 1403              	 .cfi_endproc
 1404              	.LFE86:
 1406              	 .section .text.pmc_osc_disable_xtal,"ax",%progbits
 1407              	 .align 1
 1408              	 .global pmc_osc_disable_xtal
 1409              	 .syntax unified
 1410              	 .thumb
 1411              	 .thumb_func
 1412              	 .fpu softvfp
 1414              	pmc_osc_disable_xtal:
 1415              	.LFB87:
 473:.././hal/sam3u1c/pmc.c **** 
 474:.././hal/sam3u1c/pmc.c **** /**
 475:.././hal/sam3u1c/pmc.c ****  * \brief Disable the external Xtal.
 476:.././hal/sam3u1c/pmc.c ****  *
 477:.././hal/sam3u1c/pmc.c ****  * \param ul_bypass 0 for Xtal, 1 for bypass.
 478:.././hal/sam3u1c/pmc.c ****  */
 479:.././hal/sam3u1c/pmc.c **** void pmc_osc_disable_xtal(uint32_t ul_bypass)
 480:.././hal/sam3u1c/pmc.c **** {
 1416              	 .loc 1 480 0
 1417              	 .cfi_startproc
 1418              	 
 1419              	 
 1420              	 
 1421 0000 80B4     	 push {r7}
 1422              	.LCFI98:
 1423              	 .cfi_def_cfa_offset 4
 1424              	 .cfi_offset 7,-4
 1425 0002 83B0     	 sub sp,sp,#12
 1426              	.LCFI99:
 1427              	 .cfi_def_cfa_offset 16
 1428 0004 00AF     	 add r7,sp,#0
 1429              	.LCFI100:
 1430              	 .cfi_def_cfa_register 7
 1431 0006 7860     	 str r0,[r7,#4]
 481:.././hal/sam3u1c/pmc.c **** 	/* Disable xtal oscillator */
 482:.././hal/sam3u1c/pmc.c **** 	if (ul_bypass) {
 1432              	 .loc 1 482 0
 1433 0008 7B68     	 ldr r3,[r7,#4]
 1434 000a 002B     	 cmp r3,#0
 1435 000c 0AD0     	 beq .L102
 483:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
 1436              	 .loc 1 483 0
 1437 000e 0D4B     	 ldr r3,.L105
 1438 0010 1B6A     	 ldr r3,[r3,#32]
 1439 0012 23F45C13 	 bic r3,r3,#3604480
 1440 0016 23F00203 	 bic r3,r3,#2
 1441 001a 0A4A     	 ldr r2,.L105
 1442 001c 43F45C13 	 orr r3,r3,#3604480
 1443 0020 1362     	 str r3,[r2,#32]
 484:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 485:.././hal/sam3u1c/pmc.c **** 	} else {
 486:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 487:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 488:.././hal/sam3u1c/pmc.c **** 	}
 489:.././hal/sam3u1c/pmc.c **** }
 1444              	 .loc 1 489 0
 1445 0022 09E0     	 b .L104
 1446              	.L102:
 486:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 1447              	 .loc 1 486 0
 1448 0024 074B     	 ldr r3,.L105
 1449 0026 1B6A     	 ldr r3,[r3,#32]
 1450 0028 23F45C13 	 bic r3,r3,#3604480
 1451 002c 23F00103 	 bic r3,r3,#1
 1452 0030 044A     	 ldr r2,.L105
 1453 0032 43F45C13 	 orr r3,r3,#3604480
 1454 0036 1362     	 str r3,[r2,#32]
 1455              	.L104:
 1456              	 .loc 1 489 0
 1457 0038 00BF     	 nop
 1458 003a 0C37     	 adds r7,r7,#12
 1459              	.LCFI101:
 1460              	 .cfi_def_cfa_offset 4
 1461 003c BD46     	 mov sp,r7
 1462              	.LCFI102:
 1463              	 .cfi_def_cfa_register 13
 1464              	 
 1465 003e 80BC     	 pop {r7}
 1466              	.LCFI103:
 1467              	 .cfi_restore 7
 1468              	 .cfi_def_cfa_offset 0
 1469 0040 7047     	 bx lr
 1470              	.L106:
 1471 0042 00BF     	 .align 2
 1472              	.L105:
 1473 0044 00040E40 	 .word 1074660352
 1474              	 .cfi_endproc
 1475              	.LFE87:
 1477              	 .section .text.pmc_osc_is_ready_mainck,"ax",%progbits
 1478              	 .align 1
 1479              	 .global pmc_osc_is_ready_mainck
 1480              	 .syntax unified
 1481              	 .thumb
 1482              	 .thumb_func
 1483              	 .fpu softvfp
 1485              	pmc_osc_is_ready_mainck:
 1486              	.LFB88:
 490:.././hal/sam3u1c/pmc.c **** 
 491:.././hal/sam3u1c/pmc.c **** /**
 492:.././hal/sam3u1c/pmc.c ****  * \brief Check if the MAINCK is ready. Depending on MOSCEL, MAINCK can be one
 493:.././hal/sam3u1c/pmc.c ****  * of Xtal, bypass or internal RC.
 494:.././hal/sam3u1c/pmc.c ****  *
 495:.././hal/sam3u1c/pmc.c ****  * \retval 1 Xtal is ready.
 496:.././hal/sam3u1c/pmc.c ****  * \retval 0 Xtal is not ready.
 497:.././hal/sam3u1c/pmc.c ****  */
 498:.././hal/sam3u1c/pmc.c **** uint32_t pmc_osc_is_ready_mainck(void)
 499:.././hal/sam3u1c/pmc.c **** {
 1487              	 .loc 1 499 0
 1488              	 .cfi_startproc
 1489              	 
 1490              	 
 1491              	 
 1492 0000 80B4     	 push {r7}
 1493              	.LCFI104:
 1494              	 .cfi_def_cfa_offset 4
 1495              	 .cfi_offset 7,-4
 1496 0002 00AF     	 add r7,sp,#0
 1497              	.LCFI105:
 1498              	 .cfi_def_cfa_register 7
 500:.././hal/sam3u1c/pmc.c **** 	return PMC->PMC_SR & PMC_SR_MOSCSELS;
 1499              	 .loc 1 500 0
 1500 0004 034B     	 ldr r3,.L109
 1501 0006 9B6E     	 ldr r3,[r3,#104]
 1502 0008 03F48033 	 and r3,r3,#65536
 501:.././hal/sam3u1c/pmc.c **** }
 1503              	 .loc 1 501 0
 1504 000c 1846     	 mov r0,r3
 1505 000e BD46     	 mov sp,r7
 1506              	.LCFI106:
 1507              	 .cfi_def_cfa_register 13
 1508              	 
 1509 0010 80BC     	 pop {r7}
 1510              	.LCFI107:
 1511              	 .cfi_restore 7
 1512              	 .cfi_def_cfa_offset 0
 1513 0012 7047     	 bx lr
 1514              	.L110:
 1515              	 .align 2
 1516              	.L109:
 1517 0014 00040E40 	 .word 1074660352
 1518              	 .cfi_endproc
 1519              	.LFE88:
 1521              	 .section .text.pmc_mainck_osc_select,"ax",%progbits
 1522              	 .align 1
 1523              	 .global pmc_mainck_osc_select
 1524              	 .syntax unified
 1525              	 .thumb
 1526              	 .thumb_func
 1527              	 .fpu softvfp
 1529              	pmc_mainck_osc_select:
 1530              	.LFB89:
 502:.././hal/sam3u1c/pmc.c **** 
 503:.././hal/sam3u1c/pmc.c **** /**
 504:.././hal/sam3u1c/pmc.c ****  * \brief Select Main Crystal or internal RC as main clock source.
 505:.././hal/sam3u1c/pmc.c ****  *
 506:.././hal/sam3u1c/pmc.c ****  * \note This function will not enable/disable RC or Main Crystal.
 507:.././hal/sam3u1c/pmc.c ****  *
 508:.././hal/sam3u1c/pmc.c ****  * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 509:.././hal/sam3u1c/pmc.c ****  */
 510:.././hal/sam3u1c/pmc.c **** void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
 511:.././hal/sam3u1c/pmc.c **** {
 1531              	 .loc 1 511 0
 1532              	 .cfi_startproc
 1533              	 
 1534              	 
 1535              	 
 1536 0000 80B4     	 push {r7}
 1537              	.LCFI108:
 1538              	 .cfi_def_cfa_offset 4
 1539              	 .cfi_offset 7,-4
 1540 0002 85B0     	 sub sp,sp,#20
 1541              	.LCFI109:
 1542              	 .cfi_def_cfa_offset 24
 1543 0004 00AF     	 add r7,sp,#0
 1544              	.LCFI110:
 1545              	 .cfi_def_cfa_register 7
 1546 0006 7860     	 str r0,[r7,#4]
 512:.././hal/sam3u1c/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 1547              	 .loc 1 512 0
 1548 0008 0C4B     	 ldr r3,.L114
 1549 000a 1B6A     	 ldr r3,[r3,#32]
 1550 000c FB60     	 str r3,[r7,#12]
 513:.././hal/sam3u1c/pmc.c **** 	if (ul_xtal_rc) {
 1551              	 .loc 1 513 0
 1552 000e 7B68     	 ldr r3,[r7,#4]
 1553 0010 002B     	 cmp r3,#0
 1554 0012 04D0     	 beq .L112
 514:.././hal/sam3u1c/pmc.c **** 		mor |=  CKGR_MOR_MOSCSEL;
 1555              	 .loc 1 514 0
 1556 0014 FB68     	 ldr r3,[r7,#12]
 1557 0016 43F08073 	 orr r3,r3,#16777216
 1558 001a FB60     	 str r3,[r7,#12]
 1559 001c 03E0     	 b .L113
 1560              	.L112:
 515:.././hal/sam3u1c/pmc.c **** 	} else {
 516:.././hal/sam3u1c/pmc.c **** 		mor &= ~CKGR_MOR_MOSCSEL;
 1561              	 .loc 1 516 0
 1562 001e FB68     	 ldr r3,[r7,#12]
 1563 0020 23F08073 	 bic r3,r3,#16777216
 1564 0024 FB60     	 str r3,[r7,#12]
 1565              	.L113:
 517:.././hal/sam3u1c/pmc.c **** 	}
 518:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
 1566              	 .loc 1 518 0
 1567 0026 054A     	 ldr r2,.L114
 1568 0028 FB68     	 ldr r3,[r7,#12]
 1569 002a 43F45C13 	 orr r3,r3,#3604480
 1570 002e 1362     	 str r3,[r2,#32]
 519:.././hal/sam3u1c/pmc.c **** }
 1571              	 .loc 1 519 0
 1572 0030 00BF     	 nop
 1573 0032 1437     	 adds r7,r7,#20
 1574              	.LCFI111:
 1575              	 .cfi_def_cfa_offset 4
 1576 0034 BD46     	 mov sp,r7
 1577              	.LCFI112:
 1578              	 .cfi_def_cfa_register 13
 1579              	 
 1580 0036 80BC     	 pop {r7}
 1581              	.LCFI113:
 1582              	 .cfi_restore 7
 1583              	 .cfi_def_cfa_offset 0
 1584 0038 7047     	 bx lr
 1585              	.L115:
 1586 003a 00BF     	 .align 2
 1587              	.L114:
 1588 003c 00040E40 	 .word 1074660352
 1589              	 .cfi_endproc
 1590              	.LFE89:
 1592              	 .section .text.pmc_enable_pllack,"ax",%progbits
 1593              	 .align 1
 1594              	 .global pmc_enable_pllack
 1595              	 .syntax unified
 1596              	 .thumb
 1597              	 .thumb_func
 1598              	 .fpu softvfp
 1600              	pmc_enable_pllack:
 1601              	.LFB90:
 520:.././hal/sam3u1c/pmc.c **** 
 521:.././hal/sam3u1c/pmc.c **** /**
 522:.././hal/sam3u1c/pmc.c ****  * \brief Enable PLLA clock.
 523:.././hal/sam3u1c/pmc.c ****  *
 524:.././hal/sam3u1c/pmc.c ****  * \param mula PLLA multiplier.
 525:.././hal/sam3u1c/pmc.c ****  * \param pllacount PLLA counter.
 526:.././hal/sam3u1c/pmc.c ****  * \param diva Divider.
 527:.././hal/sam3u1c/pmc.c ****  */
 528:.././hal/sam3u1c/pmc.c **** void pmc_enable_pllack(uint32_t mula, uint32_t pllacount, uint32_t diva)
 529:.././hal/sam3u1c/pmc.c **** {
 1602              	 .loc 1 529 0
 1603              	 .cfi_startproc
 1604              	 
 1605              	 
 1606 0000 80B5     	 push {r7,lr}
 1607              	.LCFI114:
 1608              	 .cfi_def_cfa_offset 8
 1609              	 .cfi_offset 7,-8
 1610              	 .cfi_offset 14,-4
 1611 0002 84B0     	 sub sp,sp,#16
 1612              	.LCFI115:
 1613              	 .cfi_def_cfa_offset 24
 1614 0004 00AF     	 add r7,sp,#0
 1615              	.LCFI116:
 1616              	 .cfi_def_cfa_register 7
 1617 0006 F860     	 str r0,[r7,#12]
 1618 0008 B960     	 str r1,[r7,#8]
 1619 000a 7A60     	 str r2,[r7,#4]
 530:.././hal/sam3u1c/pmc.c **** 	/* first disable the PLL to unlock the lock */
 531:.././hal/sam3u1c/pmc.c **** 	pmc_disable_pllack();
 1620              	 .loc 1 531 0
 1621 000c 0E4B     	 ldr r3,.L118
 1622 000e 9847     	 blx r3
 1623              	.LVL0:
 532:.././hal/sam3u1c/pmc.c **** 
 533:.././hal/sam3u1c/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP || SAMG)
 534:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
 535:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 536:.././hal/sam3u1c/pmc.c **** #else
 537:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
 1624              	 .loc 1 537 0
 1625 0010 7B68     	 ldr r3,[r7,#4]
 1626 0012 DAB2     	 uxtb r2,r3
 538:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 1627              	 .loc 1 538 0
 1628 0014 BB68     	 ldr r3,[r7,#8]
 1629 0016 1B02     	 lsls r3,r3,#8
 1630 0018 03F47C53 	 and r3,r3,#16128
 537:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 1631              	 .loc 1 537 0
 1632 001c 1A43     	 orrs r2,r2,r3
 1633              	 .loc 1 538 0
 1634 001e FB68     	 ldr r3,[r7,#12]
 1635 0020 1904     	 lsls r1,r3,#16
 1636 0022 0A4B     	 ldr r3,.L118+4
 1637 0024 0B40     	 ands r3,r3,r1
 1638 0026 1343     	 orrs r3,r3,r2
 537:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 1639              	 .loc 1 537 0
 1640 0028 094A     	 ldr r2,.L118+8
 1641              	 .loc 1 538 0
 1642 002a 43F00053 	 orr r3,r3,#536870912
 537:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 1643              	 .loc 1 537 0
 1644 002e 9362     	 str r3,[r2,#40]
 539:.././hal/sam3u1c/pmc.c **** #endif
 540:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_SR & PMC_SR_LOCKA) == 0);
 1645              	 .loc 1 540 0
 1646 0030 00BF     	 nop
 1647              	.L117:
 1648              	 .loc 1 540 0 is_stmt 0 discriminator 1
 1649 0032 074B     	 ldr r3,.L118+8
 1650 0034 9B6E     	 ldr r3,[r3,#104]
 1651 0036 03F00203 	 and r3,r3,#2
 1652 003a 002B     	 cmp r3,#0
 1653 003c F9D0     	 beq .L117
 541:.././hal/sam3u1c/pmc.c **** }
 1654              	 .loc 1 541 0 is_stmt 1
 1655 003e 00BF     	 nop
 1656 0040 1037     	 adds r7,r7,#16
 1657              	.LCFI117:
 1658              	 .cfi_def_cfa_offset 8
 1659 0042 BD46     	 mov sp,r7
 1660              	.LCFI118:
 1661              	 .cfi_def_cfa_register 13
 1662              	 
 1663 0044 80BD     	 pop {r7,pc}
 1664              	.L119:
 1665 0046 00BF     	 .align 2
 1666              	.L118:
 1667 0048 00000000 	 .word pmc_disable_pllack
 1668 004c 0000FF07 	 .word 134152192
 1669 0050 00040E40 	 .word 1074660352
 1670              	 .cfi_endproc
 1671              	.LFE90:
 1673              	 .section .text.pmc_disable_pllack,"ax",%progbits
 1674              	 .align 1
 1675              	 .global pmc_disable_pllack
 1676              	 .syntax unified
 1677              	 .thumb
 1678              	 .thumb_func
 1679              	 .fpu softvfp
 1681              	pmc_disable_pllack:
 1682              	.LFB91:
 542:.././hal/sam3u1c/pmc.c **** 
 543:.././hal/sam3u1c/pmc.c **** /**
 544:.././hal/sam3u1c/pmc.c ****  * \brief Disable PLLA clock.
 545:.././hal/sam3u1c/pmc.c ****  */
 546:.././hal/sam3u1c/pmc.c **** void pmc_disable_pllack(void)
 547:.././hal/sam3u1c/pmc.c **** {
 1683              	 .loc 1 547 0
 1684              	 .cfi_startproc
 1685              	 
 1686              	 
 1687              	 
 1688 0000 80B4     	 push {r7}
 1689              	.LCFI119:
 1690              	 .cfi_def_cfa_offset 4
 1691              	 .cfi_offset 7,-4
 1692 0002 00AF     	 add r7,sp,#0
 1693              	.LCFI120:
 1694              	 .cfi_def_cfa_register 7
 548:.././hal/sam3u1c/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP || SAMG)
 549:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
 550:.././hal/sam3u1c/pmc.c **** #else
 551:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
 1695              	 .loc 1 551 0
 1696 0004 034B     	 ldr r3,.L121
 1697 0006 4FF00052 	 mov r2,#536870912
 1698 000a 9A62     	 str r2,[r3,#40]
 552:.././hal/sam3u1c/pmc.c **** #endif
 553:.././hal/sam3u1c/pmc.c **** }
 1699              	 .loc 1 553 0
 1700 000c 00BF     	 nop
 1701 000e BD46     	 mov sp,r7
 1702              	.LCFI121:
 1703              	 .cfi_def_cfa_register 13
 1704              	 
 1705 0010 80BC     	 pop {r7}
 1706              	.LCFI122:
 1707              	 .cfi_restore 7
 1708              	 .cfi_def_cfa_offset 0
 1709 0012 7047     	 bx lr
 1710              	.L122:
 1711              	 .align 2
 1712              	.L121:
 1713 0014 00040E40 	 .word 1074660352
 1714              	 .cfi_endproc
 1715              	.LFE91:
 1717              	 .section .text.pmc_is_locked_pllack,"ax",%progbits
 1718              	 .align 1
 1719              	 .global pmc_is_locked_pllack
 1720              	 .syntax unified
 1721              	 .thumb
 1722              	 .thumb_func
 1723              	 .fpu softvfp
 1725              	pmc_is_locked_pllack:
 1726              	.LFB92:
 554:.././hal/sam3u1c/pmc.c **** 
 555:.././hal/sam3u1c/pmc.c **** /**
 556:.././hal/sam3u1c/pmc.c ****  * \brief Is PLLA locked?
 557:.././hal/sam3u1c/pmc.c ****  *
 558:.././hal/sam3u1c/pmc.c ****  * \retval 0 Not locked.
 559:.././hal/sam3u1c/pmc.c ****  * \retval 1 Locked.
 560:.././hal/sam3u1c/pmc.c ****  */
 561:.././hal/sam3u1c/pmc.c **** uint32_t pmc_is_locked_pllack(void)
 562:.././hal/sam3u1c/pmc.c **** {
 1727              	 .loc 1 562 0
 1728              	 .cfi_startproc
 1729              	 
 1730              	 
 1731              	 
 1732 0000 80B4     	 push {r7}
 1733              	.LCFI123:
 1734              	 .cfi_def_cfa_offset 4
 1735              	 .cfi_offset 7,-4
 1736 0002 00AF     	 add r7,sp,#0
 1737              	.LCFI124:
 1738              	 .cfi_def_cfa_register 7
 563:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_LOCKA);
 1739              	 .loc 1 563 0
 1740 0004 034B     	 ldr r3,.L125
 1741 0006 9B6E     	 ldr r3,[r3,#104]
 1742 0008 03F00203 	 and r3,r3,#2
 564:.././hal/sam3u1c/pmc.c **** }
 1743              	 .loc 1 564 0
 1744 000c 1846     	 mov r0,r3
 1745 000e BD46     	 mov sp,r7
 1746              	.LCFI125:
 1747              	 .cfi_def_cfa_register 13
 1748              	 
 1749 0010 80BC     	 pop {r7}
 1750              	.LCFI126:
 1751              	 .cfi_restore 7
 1752              	 .cfi_def_cfa_offset 0
 1753 0012 7047     	 bx lr
 1754              	.L126:
 1755              	 .align 2
 1756              	.L125:
 1757 0014 00040E40 	 .word 1074660352
 1758              	 .cfi_endproc
 1759              	.LFE92:
 1761              	 .section .text.pmc_enable_upll_clock,"ax",%progbits
 1762              	 .align 1
 1763              	 .global pmc_enable_upll_clock
 1764              	 .syntax unified
 1765              	 .thumb
 1766              	 .thumb_func
 1767              	 .fpu softvfp
 1769              	pmc_enable_upll_clock:
 1770              	.LFB93:
 565:.././hal/sam3u1c/pmc.c **** 
 566:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP || SAMG55)
 567:.././hal/sam3u1c/pmc.c **** /**
 568:.././hal/sam3u1c/pmc.c ****  * \brief Enable PLLB clock.
 569:.././hal/sam3u1c/pmc.c ****  *
 570:.././hal/sam3u1c/pmc.c ****  * \param mulb PLLB multiplier.
 571:.././hal/sam3u1c/pmc.c ****  * \param pllbcount PLLB counter.
 572:.././hal/sam3u1c/pmc.c ****  * \param divb Divider.
 573:.././hal/sam3u1c/pmc.c ****  */
 574:.././hal/sam3u1c/pmc.c **** void pmc_enable_pllbck(uint32_t mulb, uint32_t pllbcount, uint32_t divb)
 575:.././hal/sam3u1c/pmc.c **** {
 576:.././hal/sam3u1c/pmc.c **** 	/* first disable the PLL to unlock the lock */
 577:.././hal/sam3u1c/pmc.c **** 	pmc_disable_pllbck();
 578:.././hal/sam3u1c/pmc.c **** 
 579:.././hal/sam3u1c/pmc.c **** #if SAMG55
 580:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(divb) |
 581:.././hal/sam3u1c/pmc.c **** 		CKGR_PLLAR_PLLACOUNT(pllbcount) | CKGR_PLLAR_MULA(mulb);
 582:.././hal/sam3u1c/pmc.c **** #else
 583:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLBR =
 584:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLBR_DIVB(divb) | CKGR_PLLBR_PLLBCOUNT(pllbcount)
 585:.././hal/sam3u1c/pmc.c **** 			| CKGR_PLLBR_MULB(mulb);
 586:.././hal/sam3u1c/pmc.c **** #endif
 587:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_SR & PMC_SR_LOCKB) == 0);
 588:.././hal/sam3u1c/pmc.c **** }
 589:.././hal/sam3u1c/pmc.c **** 
 590:.././hal/sam3u1c/pmc.c **** /**
 591:.././hal/sam3u1c/pmc.c ****  * \brief Disable PLLB clock.
 592:.././hal/sam3u1c/pmc.c ****  */
 593:.././hal/sam3u1c/pmc.c **** void pmc_disable_pllbck(void)
 594:.././hal/sam3u1c/pmc.c **** {
 595:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
 596:.././hal/sam3u1c/pmc.c **** }
 597:.././hal/sam3u1c/pmc.c **** 
 598:.././hal/sam3u1c/pmc.c **** /**
 599:.././hal/sam3u1c/pmc.c ****  * \brief Is PLLB locked?
 600:.././hal/sam3u1c/pmc.c ****  *
 601:.././hal/sam3u1c/pmc.c ****  * \retval 0 Not locked.
 602:.././hal/sam3u1c/pmc.c ****  * \retval 1 Locked.
 603:.././hal/sam3u1c/pmc.c ****  */
 604:.././hal/sam3u1c/pmc.c **** uint32_t pmc_is_locked_pllbck(void)
 605:.././hal/sam3u1c/pmc.c **** {
 606:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_LOCKB);
 607:.././hal/sam3u1c/pmc.c **** }
 608:.././hal/sam3u1c/pmc.c **** #endif
 609:.././hal/sam3u1c/pmc.c **** 
 610:.././hal/sam3u1c/pmc.c **** #if (SAM3XA || SAM3U)
 611:.././hal/sam3u1c/pmc.c **** /**
 612:.././hal/sam3u1c/pmc.c ****  * \brief Enable UPLL clock.
 613:.././hal/sam3u1c/pmc.c ****  */
 614:.././hal/sam3u1c/pmc.c **** void pmc_enable_upll_clock(void)
 615:.././hal/sam3u1c/pmc.c **** {
 1771              	 .loc 1 615 0
 1772              	 .cfi_startproc
 1773              	 
 1774              	 
 1775              	 
 1776 0000 80B4     	 push {r7}
 1777              	.LCFI127:
 1778              	 .cfi_def_cfa_offset 4
 1779              	 .cfi_offset 7,-4
 1780 0002 00AF     	 add r7,sp,#0
 1781              	.LCFI128:
 1782              	 .cfi_def_cfa_register 7
 616:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
 1783              	 .loc 1 616 0
 1784 0004 074B     	 ldr r3,.L129
 1785 0006 4FF44412 	 mov r2,#3211264
 1786 000a DA61     	 str r2,[r3,#28]
 617:.././hal/sam3u1c/pmc.c **** 
 618:.././hal/sam3u1c/pmc.c **** 	/* Wait UTMI PLL Lock Status */
 619:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
 1787              	 .loc 1 619 0
 1788 000c 00BF     	 nop
 1789              	.L128:
 1790              	 .loc 1 619 0 is_stmt 0 discriminator 1
 1791 000e 054B     	 ldr r3,.L129
 1792 0010 9B6E     	 ldr r3,[r3,#104]
 1793 0012 03F04003 	 and r3,r3,#64
 1794 0016 002B     	 cmp r3,#0
 1795 0018 F9D0     	 beq .L128
 620:.././hal/sam3u1c/pmc.c **** }
 1796              	 .loc 1 620 0 is_stmt 1
 1797 001a 00BF     	 nop
 1798 001c BD46     	 mov sp,r7
 1799              	.LCFI129:
 1800              	 .cfi_def_cfa_register 13
 1801              	 
 1802 001e 80BC     	 pop {r7}
 1803              	.LCFI130:
 1804              	 .cfi_restore 7
 1805              	 .cfi_def_cfa_offset 0
 1806 0020 7047     	 bx lr
 1807              	.L130:
 1808 0022 00BF     	 .align 2
 1809              	.L129:
 1810 0024 00040E40 	 .word 1074660352
 1811              	 .cfi_endproc
 1812              	.LFE93:
 1814              	 .section .text.pmc_disable_upll_clock,"ax",%progbits
 1815              	 .align 1
 1816              	 .global pmc_disable_upll_clock
 1817              	 .syntax unified
 1818              	 .thumb
 1819              	 .thumb_func
 1820              	 .fpu softvfp
 1822              	pmc_disable_upll_clock:
 1823              	.LFB94:
 621:.././hal/sam3u1c/pmc.c **** 
 622:.././hal/sam3u1c/pmc.c **** /**
 623:.././hal/sam3u1c/pmc.c ****  * \brief Disable UPLL clock.
 624:.././hal/sam3u1c/pmc.c ****  */
 625:.././hal/sam3u1c/pmc.c **** void pmc_disable_upll_clock(void)
 626:.././hal/sam3u1c/pmc.c **** {
 1824              	 .loc 1 626 0
 1825              	 .cfi_startproc
 1826              	 
 1827              	 
 1828              	 
 1829 0000 80B4     	 push {r7}
 1830              	.LCFI131:
 1831              	 .cfi_def_cfa_offset 4
 1832              	 .cfi_offset 7,-4
 1833 0002 00AF     	 add r7,sp,#0
 1834              	.LCFI132:
 1835              	 .cfi_def_cfa_register 7
 627:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
 1836              	 .loc 1 627 0
 1837 0004 044B     	 ldr r3,.L132
 1838 0006 DB69     	 ldr r3,[r3,#28]
 1839 0008 034A     	 ldr r2,.L132
 1840 000a 23F48033 	 bic r3,r3,#65536
 1841 000e D361     	 str r3,[r2,#28]
 628:.././hal/sam3u1c/pmc.c **** }
 1842              	 .loc 1 628 0
 1843 0010 00BF     	 nop
 1844 0012 BD46     	 mov sp,r7
 1845              	.LCFI133:
 1846              	 .cfi_def_cfa_register 13
 1847              	 
 1848 0014 80BC     	 pop {r7}
 1849              	.LCFI134:
 1850              	 .cfi_restore 7
 1851              	 .cfi_def_cfa_offset 0
 1852 0016 7047     	 bx lr
 1853              	.L133:
 1854              	 .align 2
 1855              	.L132:
 1856 0018 00040E40 	 .word 1074660352
 1857              	 .cfi_endproc
 1858              	.LFE94:
 1860              	 .section .text.pmc_is_locked_upll,"ax",%progbits
 1861              	 .align 1
 1862              	 .global pmc_is_locked_upll
 1863              	 .syntax unified
 1864              	 .thumb
 1865              	 .thumb_func
 1866              	 .fpu softvfp
 1868              	pmc_is_locked_upll:
 1869              	.LFB95:
 629:.././hal/sam3u1c/pmc.c **** 
 630:.././hal/sam3u1c/pmc.c **** /**
 631:.././hal/sam3u1c/pmc.c ****  * \brief Is UPLL locked?
 632:.././hal/sam3u1c/pmc.c ****  *
 633:.././hal/sam3u1c/pmc.c ****  * \retval 0 Not locked.
 634:.././hal/sam3u1c/pmc.c ****  * \retval 1 Locked.
 635:.././hal/sam3u1c/pmc.c ****  */
 636:.././hal/sam3u1c/pmc.c **** uint32_t pmc_is_locked_upll(void)
 637:.././hal/sam3u1c/pmc.c **** {
 1870              	 .loc 1 637 0
 1871              	 .cfi_startproc
 1872              	 
 1873              	 
 1874              	 
 1875 0000 80B4     	 push {r7}
 1876              	.LCFI135:
 1877              	 .cfi_def_cfa_offset 4
 1878              	 .cfi_offset 7,-4
 1879 0002 00AF     	 add r7,sp,#0
 1880              	.LCFI136:
 1881              	 .cfi_def_cfa_register 7
 638:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_LOCKU);
 1882              	 .loc 1 638 0
 1883 0004 034B     	 ldr r3,.L136
 1884 0006 9B6E     	 ldr r3,[r3,#104]
 1885 0008 03F04003 	 and r3,r3,#64
 639:.././hal/sam3u1c/pmc.c **** }
 1886              	 .loc 1 639 0
 1887 000c 1846     	 mov r0,r3
 1888 000e BD46     	 mov sp,r7
 1889              	.LCFI137:
 1890              	 .cfi_def_cfa_register 13
 1891              	 
 1892 0010 80BC     	 pop {r7}
 1893              	.LCFI138:
 1894              	 .cfi_restore 7
 1895              	 .cfi_def_cfa_offset 0
 1896 0012 7047     	 bx lr
 1897              	.L137:
 1898              	 .align 2
 1899              	.L136:
 1900 0014 00040E40 	 .word 1074660352
 1901              	 .cfi_endproc
 1902              	.LFE95:
 1904              	 .section .text.pmc_enable_periph_clk,"ax",%progbits
 1905              	 .align 1
 1906              	 .global pmc_enable_periph_clk
 1907              	 .syntax unified
 1908              	 .thumb
 1909              	 .thumb_func
 1910              	 .fpu softvfp
 1912              	pmc_enable_periph_clk:
 1913              	.LFB96:
 640:.././hal/sam3u1c/pmc.c **** #endif
 641:.././hal/sam3u1c/pmc.c **** 
 642:.././hal/sam3u1c/pmc.c **** /**
 643:.././hal/sam3u1c/pmc.c ****  * \brief Enable the specified peripheral clock.
 644:.././hal/sam3u1c/pmc.c ****  *
 645:.././hal/sam3u1c/pmc.c ****  * \note The ID must NOT be shifted (i.e., 1 << ID_xxx).
 646:.././hal/sam3u1c/pmc.c ****  *
 647:.././hal/sam3u1c/pmc.c ****  * \param ul_id Peripheral ID (ID_xxx).
 648:.././hal/sam3u1c/pmc.c ****  *
 649:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 650:.././hal/sam3u1c/pmc.c ****  * \retval 1 Invalid parameter.
 651:.././hal/sam3u1c/pmc.c ****  */
 652:.././hal/sam3u1c/pmc.c **** uint32_t pmc_enable_periph_clk(uint32_t ul_id)
 653:.././hal/sam3u1c/pmc.c **** {
 1914              	 .loc 1 653 0
 1915              	 .cfi_startproc
 1916              	 
 1917              	 
 1918              	 
 1919 0000 80B4     	 push {r7}
 1920              	.LCFI139:
 1921              	 .cfi_def_cfa_offset 4
 1922              	 .cfi_offset 7,-4
 1923 0002 83B0     	 sub sp,sp,#12
 1924              	.LCFI140:
 1925              	 .cfi_def_cfa_offset 16
 1926 0004 00AF     	 add r7,sp,#0
 1927              	.LCFI141:
 1928              	 .cfi_def_cfa_register 7
 1929 0006 7860     	 str r0,[r7,#4]
 654:.././hal/sam3u1c/pmc.c **** 	if (ul_id > MAX_PERIPH_ID) {
 1930              	 .loc 1 654 0
 1931 0008 7B68     	 ldr r3,[r7,#4]
 1932 000a 1D2B     	 cmp r3,#29
 1933 000c 01D9     	 bls .L139
 655:.././hal/sam3u1c/pmc.c **** 		return 1;
 1934              	 .loc 1 655 0
 1935 000e 0123     	 movs r3,#1
 1936 0010 15E0     	 b .L140
 1937              	.L139:
 656:.././hal/sam3u1c/pmc.c **** 	}
 657:.././hal/sam3u1c/pmc.c **** 
 658:.././hal/sam3u1c/pmc.c **** 	if (ul_id < 32) {
 1938              	 .loc 1 658 0
 1939 0012 7B68     	 ldr r3,[r7,#4]
 1940 0014 1F2B     	 cmp r3,#31
 1941 0016 11D8     	 bhi .L141
 659:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
 1942              	 .loc 1 659 0
 1943 0018 0B4B     	 ldr r3,.L142
 1944 001a 9A69     	 ldr r2,[r3,#24]
 1945 001c 0121     	 movs r1,#1
 1946 001e 7B68     	 ldr r3,[r7,#4]
 1947 0020 01FA03F3 	 lsl r3,r1,r3
 1948 0024 1A40     	 ands r2,r2,r3
 1949 0026 0121     	 movs r1,#1
 1950 0028 7B68     	 ldr r3,[r7,#4]
 1951 002a 01FA03F3 	 lsl r3,r1,r3
 1952 002e 9A42     	 cmp r2,r3
 1953 0030 04D0     	 beq .L141
 660:.././hal/sam3u1c/pmc.c **** 			PMC->PMC_PCER0 = 1 << ul_id;
 1954              	 .loc 1 660 0
 1955 0032 0122     	 movs r2,#1
 1956 0034 7B68     	 ldr r3,[r7,#4]
 1957 0036 9A40     	 lsls r2,r2,r3
 1958 0038 034B     	 ldr r3,.L142
 1959 003a 1A61     	 str r2,[r3,#16]
 1960              	.L141:
 661:.././hal/sam3u1c/pmc.c **** 		}
 662:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
 663:.././hal/sam3u1c/pmc.c **** 	} else {
 664:.././hal/sam3u1c/pmc.c **** 		ul_id -= 32;
 665:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
 666:.././hal/sam3u1c/pmc.c **** 			PMC->PMC_PCER1 = 1 << ul_id;
 667:.././hal/sam3u1c/pmc.c **** 		}
 668:.././hal/sam3u1c/pmc.c **** #endif
 669:.././hal/sam3u1c/pmc.c **** 	}
 670:.././hal/sam3u1c/pmc.c **** 
 671:.././hal/sam3u1c/pmc.c **** 	return 0;
 1961              	 .loc 1 671 0
 1962 003c 0023     	 movs r3,#0
 1963              	.L140:
 672:.././hal/sam3u1c/pmc.c **** }
 1964              	 .loc 1 672 0
 1965 003e 1846     	 mov r0,r3
 1966 0040 0C37     	 adds r7,r7,#12
 1967              	.LCFI142:
 1968              	 .cfi_def_cfa_offset 4
 1969 0042 BD46     	 mov sp,r7
 1970              	.LCFI143:
 1971              	 .cfi_def_cfa_register 13
 1972              	 
 1973 0044 80BC     	 pop {r7}
 1974              	.LCFI144:
 1975              	 .cfi_restore 7
 1976              	 .cfi_def_cfa_offset 0
 1977 0046 7047     	 bx lr
 1978              	.L143:
 1979              	 .align 2
 1980              	.L142:
 1981 0048 00040E40 	 .word 1074660352
 1982              	 .cfi_endproc
 1983              	.LFE96:
 1985              	 .section .text.pmc_disable_periph_clk,"ax",%progbits
 1986              	 .align 1
 1987              	 .global pmc_disable_periph_clk
 1988              	 .syntax unified
 1989              	 .thumb
 1990              	 .thumb_func
 1991              	 .fpu softvfp
 1993              	pmc_disable_periph_clk:
 1994              	.LFB97:
 673:.././hal/sam3u1c/pmc.c **** 
 674:.././hal/sam3u1c/pmc.c **** /**
 675:.././hal/sam3u1c/pmc.c ****  * \brief Disable the specified peripheral clock.
 676:.././hal/sam3u1c/pmc.c ****  *
 677:.././hal/sam3u1c/pmc.c ****  * \note The ID must NOT be shifted (i.e., 1 << ID_xxx).
 678:.././hal/sam3u1c/pmc.c ****  *
 679:.././hal/sam3u1c/pmc.c ****  * \param ul_id Peripheral ID (ID_xxx).
 680:.././hal/sam3u1c/pmc.c ****  *
 681:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 682:.././hal/sam3u1c/pmc.c ****  * \retval 1 Invalid parameter.
 683:.././hal/sam3u1c/pmc.c ****  */
 684:.././hal/sam3u1c/pmc.c **** uint32_t pmc_disable_periph_clk(uint32_t ul_id)
 685:.././hal/sam3u1c/pmc.c **** {
 1995              	 .loc 1 685 0
 1996              	 .cfi_startproc
 1997              	 
 1998              	 
 1999              	 
 2000 0000 80B4     	 push {r7}
 2001              	.LCFI145:
 2002              	 .cfi_def_cfa_offset 4
 2003              	 .cfi_offset 7,-4
 2004 0002 83B0     	 sub sp,sp,#12
 2005              	.LCFI146:
 2006              	 .cfi_def_cfa_offset 16
 2007 0004 00AF     	 add r7,sp,#0
 2008              	.LCFI147:
 2009              	 .cfi_def_cfa_register 7
 2010 0006 7860     	 str r0,[r7,#4]
 686:.././hal/sam3u1c/pmc.c **** 	if (ul_id > MAX_PERIPH_ID) {
 2011              	 .loc 1 686 0
 2012 0008 7B68     	 ldr r3,[r7,#4]
 2013 000a 1D2B     	 cmp r3,#29
 2014 000c 01D9     	 bls .L145
 687:.././hal/sam3u1c/pmc.c **** 		return 1;
 2015              	 .loc 1 687 0
 2016 000e 0123     	 movs r3,#1
 2017 0010 15E0     	 b .L146
 2018              	.L145:
 688:.././hal/sam3u1c/pmc.c **** 	}
 689:.././hal/sam3u1c/pmc.c **** 
 690:.././hal/sam3u1c/pmc.c **** 	if (ul_id < 32) {
 2019              	 .loc 1 690 0
 2020 0012 7B68     	 ldr r3,[r7,#4]
 2021 0014 1F2B     	 cmp r3,#31
 2022 0016 11D8     	 bhi .L147
 691:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
 2023              	 .loc 1 691 0
 2024 0018 0B4B     	 ldr r3,.L148
 2025 001a 9A69     	 ldr r2,[r3,#24]
 2026 001c 0121     	 movs r1,#1
 2027 001e 7B68     	 ldr r3,[r7,#4]
 2028 0020 01FA03F3 	 lsl r3,r1,r3
 2029 0024 1A40     	 ands r2,r2,r3
 2030 0026 0121     	 movs r1,#1
 2031 0028 7B68     	 ldr r3,[r7,#4]
 2032 002a 01FA03F3 	 lsl r3,r1,r3
 2033 002e 9A42     	 cmp r2,r3
 2034 0030 04D1     	 bne .L147
 692:.././hal/sam3u1c/pmc.c **** 			PMC->PMC_PCDR0 = 1 << ul_id;
 2035              	 .loc 1 692 0
 2036 0032 0122     	 movs r2,#1
 2037 0034 7B68     	 ldr r3,[r7,#4]
 2038 0036 9A40     	 lsls r2,r2,r3
 2039 0038 034B     	 ldr r3,.L148
 2040 003a 5A61     	 str r2,[r3,#20]
 2041              	.L147:
 693:.././hal/sam3u1c/pmc.c **** 		}
 694:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
 695:.././hal/sam3u1c/pmc.c **** 	} else {
 696:.././hal/sam3u1c/pmc.c **** 		ul_id -= 32;
 697:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
 698:.././hal/sam3u1c/pmc.c **** 			PMC->PMC_PCDR1 = 1 << ul_id;
 699:.././hal/sam3u1c/pmc.c **** 		}
 700:.././hal/sam3u1c/pmc.c **** #endif
 701:.././hal/sam3u1c/pmc.c **** 	}
 702:.././hal/sam3u1c/pmc.c **** 	return 0;
 2042              	 .loc 1 702 0
 2043 003c 0023     	 movs r3,#0
 2044              	.L146:
 703:.././hal/sam3u1c/pmc.c **** }
 2045              	 .loc 1 703 0
 2046 003e 1846     	 mov r0,r3
 2047 0040 0C37     	 adds r7,r7,#12
 2048              	.LCFI148:
 2049              	 .cfi_def_cfa_offset 4
 2050 0042 BD46     	 mov sp,r7
 2051              	.LCFI149:
 2052              	 .cfi_def_cfa_register 13
 2053              	 
 2054 0044 80BC     	 pop {r7}
 2055              	.LCFI150:
 2056              	 .cfi_restore 7
 2057              	 .cfi_def_cfa_offset 0
 2058 0046 7047     	 bx lr
 2059              	.L149:
 2060              	 .align 2
 2061              	.L148:
 2062 0048 00040E40 	 .word 1074660352
 2063              	 .cfi_endproc
 2064              	.LFE97:
 2066              	 .section .text.pmc_enable_all_periph_clk,"ax",%progbits
 2067              	 .align 1
 2068              	 .global pmc_enable_all_periph_clk
 2069              	 .syntax unified
 2070              	 .thumb
 2071              	 .thumb_func
 2072              	 .fpu softvfp
 2074              	pmc_enable_all_periph_clk:
 2075              	.LFB98:
 704:.././hal/sam3u1c/pmc.c **** 
 705:.././hal/sam3u1c/pmc.c **** /**
 706:.././hal/sam3u1c/pmc.c ****  * \brief Enable all peripheral clocks.
 707:.././hal/sam3u1c/pmc.c ****  */
 708:.././hal/sam3u1c/pmc.c **** void pmc_enable_all_periph_clk(void)
 709:.././hal/sam3u1c/pmc.c **** {
 2076              	 .loc 1 709 0
 2077              	 .cfi_startproc
 2078              	 
 2079              	 
 2080              	 
 2081 0000 80B4     	 push {r7}
 2082              	.LCFI151:
 2083              	 .cfi_def_cfa_offset 4
 2084              	 .cfi_offset 7,-4
 2085 0002 00AF     	 add r7,sp,#0
 2086              	.LCFI152:
 2087              	 .cfi_def_cfa_register 7
 710:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCER0 = PMC_MASK_STATUS0;
 2088              	 .loc 1 710 0
 2089 0004 074B     	 ldr r3,.L152
 2090 0006 6FF00302 	 mvn r2,#3
 2091 000a 1A61     	 str r2,[r3,#16]
 711:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_PCSR0 & PMC_MASK_STATUS0) != PMC_MASK_STATUS0);
 2092              	 .loc 1 711 0
 2093 000c 00BF     	 nop
 2094              	.L151:
 2095              	 .loc 1 711 0 is_stmt 0 discriminator 1
 2096 000e 054B     	 ldr r3,.L152
 2097 0010 9B69     	 ldr r3,[r3,#24]
 2098 0012 23F00303 	 bic r3,r3,#3
 2099 0016 13F1040F 	 cmn r3,#4
 2100 001a F8D1     	 bne .L151
 712:.././hal/sam3u1c/pmc.c **** 
 713:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
 714:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCER1 = PMC_MASK_STATUS1;
 715:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_PCSR1 & PMC_MASK_STATUS1) != PMC_MASK_STATUS1);
 716:.././hal/sam3u1c/pmc.c **** #endif
 717:.././hal/sam3u1c/pmc.c **** }
 2101              	 .loc 1 717 0 is_stmt 1
 2102 001c 00BF     	 nop
 2103 001e BD46     	 mov sp,r7
 2104              	.LCFI153:
 2105              	 .cfi_def_cfa_register 13
 2106              	 
 2107 0020 80BC     	 pop {r7}
 2108              	.LCFI154:
 2109              	 .cfi_restore 7
 2110              	 .cfi_def_cfa_offset 0
 2111 0022 7047     	 bx lr
 2112              	.L153:
 2113              	 .align 2
 2114              	.L152:
 2115 0024 00040E40 	 .word 1074660352
 2116              	 .cfi_endproc
 2117              	.LFE98:
 2119              	 .section .text.pmc_disable_all_periph_clk,"ax",%progbits
 2120              	 .align 1
 2121              	 .global pmc_disable_all_periph_clk
 2122              	 .syntax unified
 2123              	 .thumb
 2124              	 .thumb_func
 2125              	 .fpu softvfp
 2127              	pmc_disable_all_periph_clk:
 2128              	.LFB99:
 718:.././hal/sam3u1c/pmc.c **** 
 719:.././hal/sam3u1c/pmc.c **** /**
 720:.././hal/sam3u1c/pmc.c ****  * \brief Disable all peripheral clocks.
 721:.././hal/sam3u1c/pmc.c ****  */
 722:.././hal/sam3u1c/pmc.c **** void pmc_disable_all_periph_clk(void)
 723:.././hal/sam3u1c/pmc.c **** {
 2129              	 .loc 1 723 0
 2130              	 .cfi_startproc
 2131              	 
 2132              	 
 2133              	 
 2134 0000 80B4     	 push {r7}
 2135              	.LCFI155:
 2136              	 .cfi_def_cfa_offset 4
 2137              	 .cfi_offset 7,-4
 2138 0002 00AF     	 add r7,sp,#0
 2139              	.LCFI156:
 2140              	 .cfi_def_cfa_register 7
 724:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCDR0 = PMC_MASK_STATUS0;
 2141              	 .loc 1 724 0
 2142 0004 074B     	 ldr r3,.L156
 2143 0006 6FF00302 	 mvn r2,#3
 2144 000a 5A61     	 str r2,[r3,#20]
 725:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_PCSR0 & PMC_MASK_STATUS0) != 0);
 2145              	 .loc 1 725 0
 2146 000c 00BF     	 nop
 2147              	.L155:
 2148              	 .loc 1 725 0 is_stmt 0 discriminator 1
 2149 000e 054B     	 ldr r3,.L156
 2150 0010 9B69     	 ldr r3,[r3,#24]
 2151 0012 23F00303 	 bic r3,r3,#3
 2152 0016 002B     	 cmp r3,#0
 2153 0018 F9D1     	 bne .L155
 726:.././hal/sam3u1c/pmc.c **** 
 727:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
 728:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCDR1 = PMC_MASK_STATUS1;
 729:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_PCSR1 & PMC_MASK_STATUS1) != 0);
 730:.././hal/sam3u1c/pmc.c **** #endif
 731:.././hal/sam3u1c/pmc.c **** }
 2154              	 .loc 1 731 0 is_stmt 1
 2155 001a 00BF     	 nop
 2156 001c BD46     	 mov sp,r7
 2157              	.LCFI157:
 2158              	 .cfi_def_cfa_register 13
 2159              	 
 2160 001e 80BC     	 pop {r7}
 2161              	.LCFI158:
 2162              	 .cfi_restore 7
 2163              	 .cfi_def_cfa_offset 0
 2164 0020 7047     	 bx lr
 2165              	.L157:
 2166 0022 00BF     	 .align 2
 2167              	.L156:
 2168 0024 00040E40 	 .word 1074660352
 2169              	 .cfi_endproc
 2170              	.LFE99:
 2172              	 .section .text.pmc_is_periph_clk_enabled,"ax",%progbits
 2173              	 .align 1
 2174              	 .global pmc_is_periph_clk_enabled
 2175              	 .syntax unified
 2176              	 .thumb
 2177              	 .thumb_func
 2178              	 .fpu softvfp
 2180              	pmc_is_periph_clk_enabled:
 2181              	.LFB100:
 732:.././hal/sam3u1c/pmc.c **** 
 733:.././hal/sam3u1c/pmc.c **** /**
 734:.././hal/sam3u1c/pmc.c ****  * \brief Check if the specified peripheral clock is enabled.
 735:.././hal/sam3u1c/pmc.c ****  *
 736:.././hal/sam3u1c/pmc.c ****  * \note The ID must NOT be shifted (i.e., 1 << ID_xxx).
 737:.././hal/sam3u1c/pmc.c ****  *
 738:.././hal/sam3u1c/pmc.c ****  * \param ul_id Peripheral ID (ID_xxx).
 739:.././hal/sam3u1c/pmc.c ****  *
 740:.././hal/sam3u1c/pmc.c ****  * \retval 0 Peripheral clock is disabled or unknown.
 741:.././hal/sam3u1c/pmc.c ****  * \retval 1 Peripheral clock is enabled.
 742:.././hal/sam3u1c/pmc.c ****  */
 743:.././hal/sam3u1c/pmc.c **** uint32_t pmc_is_periph_clk_enabled(uint32_t ul_id)
 744:.././hal/sam3u1c/pmc.c **** {
 2182              	 .loc 1 744 0
 2183              	 .cfi_startproc
 2184              	 
 2185              	 
 2186              	 
 2187 0000 80B4     	 push {r7}
 2188              	.LCFI159:
 2189              	 .cfi_def_cfa_offset 4
 2190              	 .cfi_offset 7,-4
 2191 0002 83B0     	 sub sp,sp,#12
 2192              	.LCFI160:
 2193              	 .cfi_def_cfa_offset 16
 2194 0004 00AF     	 add r7,sp,#0
 2195              	.LCFI161:
 2196              	 .cfi_def_cfa_register 7
 2197 0006 7860     	 str r0,[r7,#4]
 745:.././hal/sam3u1c/pmc.c **** 	if (ul_id > MAX_PERIPH_ID) {
 2198              	 .loc 1 745 0
 2199 0008 7B68     	 ldr r3,[r7,#4]
 2200 000a 1D2B     	 cmp r3,#29
 2201 000c 01D9     	 bls .L159
 746:.././hal/sam3u1c/pmc.c **** 		return 0;
 2202              	 .loc 1 746 0
 2203 000e 0023     	 movs r3,#0
 2204 0010 0BE0     	 b .L160
 2205              	.L159:
 747:.././hal/sam3u1c/pmc.c **** 	}
 748:.././hal/sam3u1c/pmc.c **** 
 749:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
 750:.././hal/sam3u1c/pmc.c **** 	if (ul_id < 32) {
 751:.././hal/sam3u1c/pmc.c **** #endif
 752:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR0 & (1u << ul_id))) {
 2206              	 .loc 1 752 0
 2207 0012 084B     	 ldr r3,.L162
 2208 0014 9A69     	 ldr r2,[r3,#24]
 2209 0016 0121     	 movs r1,#1
 2210 0018 7B68     	 ldr r3,[r7,#4]
 2211 001a 01FA03F3 	 lsl r3,r1,r3
 2212 001e 1340     	 ands r3,r3,r2
 2213 0020 002B     	 cmp r3,#0
 2214 0022 01D0     	 beq .L161
 753:.././hal/sam3u1c/pmc.c **** 			return 1;
 2215              	 .loc 1 753 0
 2216 0024 0123     	 movs r3,#1
 2217 0026 00E0     	 b .L160
 2218              	.L161:
 754:.././hal/sam3u1c/pmc.c **** 		} else {
 755:.././hal/sam3u1c/pmc.c **** 			return 0;
 2219              	 .loc 1 755 0
 2220 0028 0023     	 movs r3,#0
 2221              	.L160:
 756:.././hal/sam3u1c/pmc.c **** 		}
 757:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
 758:.././hal/sam3u1c/pmc.c **** 	} else {
 759:.././hal/sam3u1c/pmc.c **** 		ul_id -= 32;
 760:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id))) {
 761:.././hal/sam3u1c/pmc.c **** 			return 1;
 762:.././hal/sam3u1c/pmc.c **** 		} else {
 763:.././hal/sam3u1c/pmc.c **** 			return 0;
 764:.././hal/sam3u1c/pmc.c **** 		}
 765:.././hal/sam3u1c/pmc.c **** 	}
 766:.././hal/sam3u1c/pmc.c **** #endif
 767:.././hal/sam3u1c/pmc.c **** }
 2222              	 .loc 1 767 0
 2223 002a 1846     	 mov r0,r3
 2224 002c 0C37     	 adds r7,r7,#12
 2225              	.LCFI162:
 2226              	 .cfi_def_cfa_offset 4
 2227 002e BD46     	 mov sp,r7
 2228              	.LCFI163:
 2229              	 .cfi_def_cfa_register 13
 2230              	 
 2231 0030 80BC     	 pop {r7}
 2232              	.LCFI164:
 2233              	 .cfi_restore 7
 2234              	 .cfi_def_cfa_offset 0
 2235 0032 7047     	 bx lr
 2236              	.L163:
 2237              	 .align 2
 2238              	.L162:
 2239 0034 00040E40 	 .word 1074660352
 2240              	 .cfi_endproc
 2241              	.LFE100:
 2243              	 .section .text.pmc_pck_set_prescaler,"ax",%progbits
 2244              	 .align 1
 2245              	 .global pmc_pck_set_prescaler
 2246              	 .syntax unified
 2247              	 .thumb
 2248              	 .thumb_func
 2249              	 .fpu softvfp
 2251              	pmc_pck_set_prescaler:
 2252              	.LFB101:
 768:.././hal/sam3u1c/pmc.c **** 
 769:.././hal/sam3u1c/pmc.c **** /**
 770:.././hal/sam3u1c/pmc.c ****  * \brief Set the prescaler for the specified programmable clock.
 771:.././hal/sam3u1c/pmc.c ****  *
 772:.././hal/sam3u1c/pmc.c ****  * \param ul_id Peripheral ID.
 773:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Prescaler value.
 774:.././hal/sam3u1c/pmc.c ****  */
 775:.././hal/sam3u1c/pmc.c **** void pmc_pck_set_prescaler(uint32_t ul_id, uint32_t ul_pres)
 776:.././hal/sam3u1c/pmc.c **** {
 2253              	 .loc 1 776 0
 2254              	 .cfi_startproc
 2255              	 
 2256              	 
 2257              	 
 2258 0000 80B4     	 push {r7}
 2259              	.LCFI165:
 2260              	 .cfi_def_cfa_offset 4
 2261              	 .cfi_offset 7,-4
 2262 0002 83B0     	 sub sp,sp,#12
 2263              	.LCFI166:
 2264              	 .cfi_def_cfa_offset 16
 2265 0004 00AF     	 add r7,sp,#0
 2266              	.LCFI167:
 2267              	 .cfi_def_cfa_register 7
 2268 0006 7860     	 str r0,[r7,#4]
 2269 0008 3960     	 str r1,[r7]
 777:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 778:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_PRES_Msk) | ul_pres;
 2270              	 .loc 1 778 0
 2271 000a 144A     	 ldr r2,.L168
 2272 000c 7B68     	 ldr r3,[r7,#4]
 2273 000e 1033     	 adds r3,r3,#16
 2274 0010 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2275 0014 23F07002 	 bic r2,r3,#112
 777:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 2276              	 .loc 1 777 0
 2277 0018 1049     	 ldr r1,.L168
 2278              	 .loc 1 778 0
 2279 001a 3B68     	 ldr r3,[r7]
 2280 001c 1A43     	 orrs r2,r2,r3
 777:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 2281              	 .loc 1 777 0
 2282 001e 7B68     	 ldr r3,[r7,#4]
 2283 0020 1033     	 adds r3,r3,#16
 2284 0022 41F82320 	 str r2,[r1,r3,lsl#2]
 779:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
 2285              	 .loc 1 779 0
 2286 0026 00BF     	 nop
 2287              	.L166:
 2288 0028 0C4B     	 ldr r3,.L168
 2289 002a 1A68     	 ldr r2,[r3]
 2290 002c 4FF48071 	 mov r1,#256
 2291 0030 7B68     	 ldr r3,[r7,#4]
 2292 0032 01FA03F3 	 lsl r3,r1,r3
 2293 0036 1340     	 ands r3,r3,r2
 2294 0038 002B     	 cmp r3,#0
 2295 003a 09D0     	 beq .L167
 780:.././hal/sam3u1c/pmc.c **** 			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
 2296              	 .loc 1 780 0
 2297 003c 074B     	 ldr r3,.L168
 2298 003e 9A6E     	 ldr r2,[r3,#104]
 2299 0040 4FF48071 	 mov r1,#256
 2300 0044 7B68     	 ldr r3,[r7,#4]
 2301 0046 01FA03F3 	 lsl r3,r1,r3
 2302 004a 1340     	 ands r3,r3,r2
 2303 004c 002B     	 cmp r3,#0
 2304 004e EBD0     	 beq .L166
 2305              	.L167:
 781:.././hal/sam3u1c/pmc.c **** }
 2306              	 .loc 1 781 0
 2307 0050 00BF     	 nop
 2308 0052 0C37     	 adds r7,r7,#12
 2309              	.LCFI168:
 2310              	 .cfi_def_cfa_offset 4
 2311 0054 BD46     	 mov sp,r7
 2312              	.LCFI169:
 2313              	 .cfi_def_cfa_register 13
 2314              	 
 2315 0056 80BC     	 pop {r7}
 2316              	.LCFI170:
 2317              	 .cfi_restore 7
 2318              	 .cfi_def_cfa_offset 0
 2319 0058 7047     	 bx lr
 2320              	.L169:
 2321 005a 00BF     	 .align 2
 2322              	.L168:
 2323 005c 00040E40 	 .word 1074660352
 2324              	 .cfi_endproc
 2325              	.LFE101:
 2327              	 .section .text.pmc_pck_set_source,"ax",%progbits
 2328              	 .align 1
 2329              	 .global pmc_pck_set_source
 2330              	 .syntax unified
 2331              	 .thumb
 2332              	 .thumb_func
 2333              	 .fpu softvfp
 2335              	pmc_pck_set_source:
 2336              	.LFB102:
 782:.././hal/sam3u1c/pmc.c **** 
 783:.././hal/sam3u1c/pmc.c **** /**
 784:.././hal/sam3u1c/pmc.c ****  * \brief Set the source oscillator for the specified programmable clock.
 785:.././hal/sam3u1c/pmc.c ****  *
 786:.././hal/sam3u1c/pmc.c ****  * \param ul_id Peripheral ID.
 787:.././hal/sam3u1c/pmc.c ****  * \param ul_source Source selection value.
 788:.././hal/sam3u1c/pmc.c ****  */
 789:.././hal/sam3u1c/pmc.c **** void pmc_pck_set_source(uint32_t ul_id, uint32_t ul_source)
 790:.././hal/sam3u1c/pmc.c **** {
 2337              	 .loc 1 790 0
 2338              	 .cfi_startproc
 2339              	 
 2340              	 
 2341              	 
 2342 0000 80B4     	 push {r7}
 2343              	.LCFI171:
 2344              	 .cfi_def_cfa_offset 4
 2345              	 .cfi_offset 7,-4
 2346 0002 83B0     	 sub sp,sp,#12
 2347              	.LCFI172:
 2348              	 .cfi_def_cfa_offset 16
 2349 0004 00AF     	 add r7,sp,#0
 2350              	.LCFI173:
 2351              	 .cfi_def_cfa_register 7
 2352 0006 7860     	 str r0,[r7,#4]
 2353 0008 3960     	 str r1,[r7]
 791:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 792:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_CSS_Msk) | ul_source;
 2354              	 .loc 1 792 0
 2355 000a 144A     	 ldr r2,.L174
 2356 000c 7B68     	 ldr r3,[r7,#4]
 2357 000e 1033     	 adds r3,r3,#16
 2358 0010 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2359 0014 23F00702 	 bic r2,r3,#7
 791:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 2360              	 .loc 1 791 0
 2361 0018 1049     	 ldr r1,.L174
 2362              	 .loc 1 792 0
 2363 001a 3B68     	 ldr r3,[r7]
 2364 001c 1A43     	 orrs r2,r2,r3
 791:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 2365              	 .loc 1 791 0
 2366 001e 7B68     	 ldr r3,[r7,#4]
 2367 0020 1033     	 adds r3,r3,#16
 2368 0022 41F82320 	 str r2,[r1,r3,lsl#2]
 793:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
 2369              	 .loc 1 793 0
 2370 0026 00BF     	 nop
 2371              	.L172:
 2372 0028 0C4B     	 ldr r3,.L174
 2373 002a 1A68     	 ldr r2,[r3]
 2374 002c 4FF48071 	 mov r1,#256
 2375 0030 7B68     	 ldr r3,[r7,#4]
 2376 0032 01FA03F3 	 lsl r3,r1,r3
 2377 0036 1340     	 ands r3,r3,r2
 2378 0038 002B     	 cmp r3,#0
 2379 003a 09D0     	 beq .L173
 794:.././hal/sam3u1c/pmc.c **** 			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
 2380              	 .loc 1 794 0
 2381 003c 074B     	 ldr r3,.L174
 2382 003e 9A6E     	 ldr r2,[r3,#104]
 2383 0040 4FF48071 	 mov r1,#256
 2384 0044 7B68     	 ldr r3,[r7,#4]
 2385 0046 01FA03F3 	 lsl r3,r1,r3
 2386 004a 1340     	 ands r3,r3,r2
 2387 004c 002B     	 cmp r3,#0
 2388 004e EBD0     	 beq .L172
 2389              	.L173:
 795:.././hal/sam3u1c/pmc.c **** }
 2390              	 .loc 1 795 0
 2391 0050 00BF     	 nop
 2392 0052 0C37     	 adds r7,r7,#12
 2393              	.LCFI174:
 2394              	 .cfi_def_cfa_offset 4
 2395 0054 BD46     	 mov sp,r7
 2396              	.LCFI175:
 2397              	 .cfi_def_cfa_register 13
 2398              	 
 2399 0056 80BC     	 pop {r7}
 2400              	.LCFI176:
 2401              	 .cfi_restore 7
 2402              	 .cfi_def_cfa_offset 0
 2403 0058 7047     	 bx lr
 2404              	.L175:
 2405 005a 00BF     	 .align 2
 2406              	.L174:
 2407 005c 00040E40 	 .word 1074660352
 2408              	 .cfi_endproc
 2409              	.LFE102:
 2411              	 .section .text.pmc_switch_pck_to_sclk,"ax",%progbits
 2412              	 .align 1
 2413              	 .global pmc_switch_pck_to_sclk
 2414              	 .syntax unified
 2415              	 .thumb
 2416              	 .thumb_func
 2417              	 .fpu softvfp
 2419              	pmc_switch_pck_to_sclk:
 2420              	.LFB103:
 796:.././hal/sam3u1c/pmc.c **** 
 797:.././hal/sam3u1c/pmc.c **** /**
 798:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to slow clock.
 799:.././hal/sam3u1c/pmc.c ****  *
 800:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 801:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 802:.././hal/sam3u1c/pmc.c ****  *
 803:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 804:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 805:.././hal/sam3u1c/pmc.c ****  */
 806:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_sclk(uint32_t ul_id, uint32_t ul_pres)
 807:.././hal/sam3u1c/pmc.c **** {
 2421              	 .loc 1 807 0
 2422              	 .cfi_startproc
 2423              	 
 2424              	 
 2425              	 
 2426 0000 80B4     	 push {r7}
 2427              	.LCFI177:
 2428              	 .cfi_def_cfa_offset 4
 2429              	 .cfi_offset 7,-4
 2430 0002 85B0     	 sub sp,sp,#20
 2431              	.LCFI178:
 2432              	 .cfi_def_cfa_offset 24
 2433 0004 00AF     	 add r7,sp,#0
 2434              	.LCFI179:
 2435              	 .cfi_def_cfa_register 7
 2436 0006 7860     	 str r0,[r7,#4]
 2437 0008 3960     	 str r1,[r7]
 808:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 809:.././hal/sam3u1c/pmc.c **** 
 810:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_SLOW_CLK | ul_pres;
 2438              	 .loc 1 810 0
 2439 000a 1149     	 ldr r1,.L181
 2440 000c 7B68     	 ldr r3,[r7,#4]
 2441 000e 1033     	 adds r3,r3,#16
 2442 0010 3A68     	 ldr r2,[r7]
 2443 0012 41F82320 	 str r2,[r1,r3,lsl#2]
 811:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2444              	 .loc 1 811 0
 2445 0016 4FF40063 	 mov r3,#2048
 2446 001a FB60     	 str r3,[r7,#12]
 2447 001c 07E0     	 b .L177
 2448              	.L180:
 812:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 813:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2449              	 .loc 1 813 0
 2450 001e FB68     	 ldr r3,[r7,#12]
 2451 0020 002B     	 cmp r3,#0
 2452 0022 01D1     	 bne .L178
 814:.././hal/sam3u1c/pmc.c **** 			return 1;
 2453              	 .loc 1 814 0
 2454 0024 0123     	 movs r3,#1
 2455 0026 0DE0     	 b .L179
 2456              	.L178:
 812:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2457              	 .loc 1 812 0 discriminator 1
 2458 0028 FB68     	 ldr r3,[r7,#12]
 2459 002a 013B     	 subs r3,r3,#1
 2460 002c FB60     	 str r3,[r7,#12]
 2461              	.L177:
 2462 002e 084B     	 ldr r3,.L181
 2463 0030 9A6E     	 ldr r2,[r3,#104]
 2464 0032 4FF48071 	 mov r1,#256
 2465 0036 7B68     	 ldr r3,[r7,#4]
 2466 0038 01FA03F3 	 lsl r3,r1,r3
 2467 003c 1340     	 ands r3,r3,r2
 811:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2468              	 .loc 1 811 0 discriminator 1
 2469 003e 002B     	 cmp r3,#0
 2470 0040 EDD0     	 beq .L180
 815:.././hal/sam3u1c/pmc.c **** 		}
 816:.././hal/sam3u1c/pmc.c **** 	}
 817:.././hal/sam3u1c/pmc.c **** 
 818:.././hal/sam3u1c/pmc.c **** 	return 0;
 2471              	 .loc 1 818 0
 2472 0042 0023     	 movs r3,#0
 2473              	.L179:
 819:.././hal/sam3u1c/pmc.c **** }
 2474              	 .loc 1 819 0
 2475 0044 1846     	 mov r0,r3
 2476 0046 1437     	 adds r7,r7,#20
 2477              	.LCFI180:
 2478              	 .cfi_def_cfa_offset 4
 2479 0048 BD46     	 mov sp,r7
 2480              	.LCFI181:
 2481              	 .cfi_def_cfa_register 13
 2482              	 
 2483 004a 80BC     	 pop {r7}
 2484              	.LCFI182:
 2485              	 .cfi_restore 7
 2486              	 .cfi_def_cfa_offset 0
 2487 004c 7047     	 bx lr
 2488              	.L182:
 2489 004e 00BF     	 .align 2
 2490              	.L181:
 2491 0050 00040E40 	 .word 1074660352
 2492              	 .cfi_endproc
 2493              	.LFE103:
 2495              	 .section .text.pmc_switch_pck_to_mainck,"ax",%progbits
 2496              	 .align 1
 2497              	 .global pmc_switch_pck_to_mainck
 2498              	 .syntax unified
 2499              	 .thumb
 2500              	 .thumb_func
 2501              	 .fpu softvfp
 2503              	pmc_switch_pck_to_mainck:
 2504              	.LFB104:
 820:.././hal/sam3u1c/pmc.c **** 
 821:.././hal/sam3u1c/pmc.c **** /**
 822:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to main clock.
 823:.././hal/sam3u1c/pmc.c ****  *
 824:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 825:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 826:.././hal/sam3u1c/pmc.c ****  *
 827:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 828:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 829:.././hal/sam3u1c/pmc.c ****  */
 830:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_mainck(uint32_t ul_id, uint32_t ul_pres)
 831:.././hal/sam3u1c/pmc.c **** {
 2505              	 .loc 1 831 0
 2506              	 .cfi_startproc
 2507              	 
 2508              	 
 2509              	 
 2510 0000 80B4     	 push {r7}
 2511              	.LCFI183:
 2512              	 .cfi_def_cfa_offset 4
 2513              	 .cfi_offset 7,-4
 2514 0002 85B0     	 sub sp,sp,#20
 2515              	.LCFI184:
 2516              	 .cfi_def_cfa_offset 24
 2517 0004 00AF     	 add r7,sp,#0
 2518              	.LCFI185:
 2519              	 .cfi_def_cfa_register 7
 2520 0006 7860     	 str r0,[r7,#4]
 2521 0008 3960     	 str r1,[r7]
 832:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 833:.././hal/sam3u1c/pmc.c **** 
 834:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MAIN_CLK | ul_pres;
 2522              	 .loc 1 834 0
 2523 000a 1249     	 ldr r1,.L188
 2524 000c 3B68     	 ldr r3,[r7]
 2525 000e 43F00102 	 orr r2,r3,#1
 2526 0012 7B68     	 ldr r3,[r7,#4]
 2527 0014 1033     	 adds r3,r3,#16
 2528 0016 41F82320 	 str r2,[r1,r3,lsl#2]
 835:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2529              	 .loc 1 835 0
 2530 001a 4FF40063 	 mov r3,#2048
 2531 001e FB60     	 str r3,[r7,#12]
 2532 0020 07E0     	 b .L184
 2533              	.L187:
 836:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 837:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2534              	 .loc 1 837 0
 2535 0022 FB68     	 ldr r3,[r7,#12]
 2536 0024 002B     	 cmp r3,#0
 2537 0026 01D1     	 bne .L185
 838:.././hal/sam3u1c/pmc.c **** 			return 1;
 2538              	 .loc 1 838 0
 2539 0028 0123     	 movs r3,#1
 2540 002a 0DE0     	 b .L186
 2541              	.L185:
 836:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2542              	 .loc 1 836 0 discriminator 1
 2543 002c FB68     	 ldr r3,[r7,#12]
 2544 002e 013B     	 subs r3,r3,#1
 2545 0030 FB60     	 str r3,[r7,#12]
 2546              	.L184:
 2547 0032 084B     	 ldr r3,.L188
 2548 0034 9A6E     	 ldr r2,[r3,#104]
 2549 0036 4FF48071 	 mov r1,#256
 2550 003a 7B68     	 ldr r3,[r7,#4]
 2551 003c 01FA03F3 	 lsl r3,r1,r3
 2552 0040 1340     	 ands r3,r3,r2
 835:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2553              	 .loc 1 835 0 discriminator 1
 2554 0042 002B     	 cmp r3,#0
 2555 0044 EDD0     	 beq .L187
 839:.././hal/sam3u1c/pmc.c **** 		}
 840:.././hal/sam3u1c/pmc.c **** 	}
 841:.././hal/sam3u1c/pmc.c **** 
 842:.././hal/sam3u1c/pmc.c **** 	return 0;
 2556              	 .loc 1 842 0
 2557 0046 0023     	 movs r3,#0
 2558              	.L186:
 843:.././hal/sam3u1c/pmc.c **** }
 2559              	 .loc 1 843 0
 2560 0048 1846     	 mov r0,r3
 2561 004a 1437     	 adds r7,r7,#20
 2562              	.LCFI186:
 2563              	 .cfi_def_cfa_offset 4
 2564 004c BD46     	 mov sp,r7
 2565              	.LCFI187:
 2566              	 .cfi_def_cfa_register 13
 2567              	 
 2568 004e 80BC     	 pop {r7}
 2569              	.LCFI188:
 2570              	 .cfi_restore 7
 2571              	 .cfi_def_cfa_offset 0
 2572 0050 7047     	 bx lr
 2573              	.L189:
 2574 0052 00BF     	 .align 2
 2575              	.L188:
 2576 0054 00040E40 	 .word 1074660352
 2577              	 .cfi_endproc
 2578              	.LFE104:
 2580              	 .section .text.pmc_switch_pck_to_pllack,"ax",%progbits
 2581              	 .align 1
 2582              	 .global pmc_switch_pck_to_pllack
 2583              	 .syntax unified
 2584              	 .thumb
 2585              	 .thumb_func
 2586              	 .fpu softvfp
 2588              	pmc_switch_pck_to_pllack:
 2589              	.LFB105:
 844:.././hal/sam3u1c/pmc.c **** 
 845:.././hal/sam3u1c/pmc.c **** /**
 846:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to PLLA clock.
 847:.././hal/sam3u1c/pmc.c ****  *
 848:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 849:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 850:.././hal/sam3u1c/pmc.c ****  *
 851:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 852:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 853:.././hal/sam3u1c/pmc.c ****  */
 854:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_pllack(uint32_t ul_id, uint32_t ul_pres)
 855:.././hal/sam3u1c/pmc.c **** {
 2590              	 .loc 1 855 0
 2591              	 .cfi_startproc
 2592              	 
 2593              	 
 2594              	 
 2595 0000 80B4     	 push {r7}
 2596              	.LCFI189:
 2597              	 .cfi_def_cfa_offset 4
 2598              	 .cfi_offset 7,-4
 2599 0002 85B0     	 sub sp,sp,#20
 2600              	.LCFI190:
 2601              	 .cfi_def_cfa_offset 24
 2602 0004 00AF     	 add r7,sp,#0
 2603              	.LCFI191:
 2604              	 .cfi_def_cfa_register 7
 2605 0006 7860     	 str r0,[r7,#4]
 2606 0008 3960     	 str r1,[r7]
 856:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 857:.././hal/sam3u1c/pmc.c **** 
 858:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLA_CLK | ul_pres;
 2607              	 .loc 1 858 0
 2608 000a 1249     	 ldr r1,.L195
 2609 000c 3B68     	 ldr r3,[r7]
 2610 000e 43F00202 	 orr r2,r3,#2
 2611 0012 7B68     	 ldr r3,[r7,#4]
 2612 0014 1033     	 adds r3,r3,#16
 2613 0016 41F82320 	 str r2,[r1,r3,lsl#2]
 859:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2614              	 .loc 1 859 0
 2615 001a 4FF40063 	 mov r3,#2048
 2616 001e FB60     	 str r3,[r7,#12]
 2617 0020 07E0     	 b .L191
 2618              	.L194:
 860:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 861:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2619              	 .loc 1 861 0
 2620 0022 FB68     	 ldr r3,[r7,#12]
 2621 0024 002B     	 cmp r3,#0
 2622 0026 01D1     	 bne .L192
 862:.././hal/sam3u1c/pmc.c **** 			return 1;
 2623              	 .loc 1 862 0
 2624 0028 0123     	 movs r3,#1
 2625 002a 0DE0     	 b .L193
 2626              	.L192:
 860:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2627              	 .loc 1 860 0 discriminator 1
 2628 002c FB68     	 ldr r3,[r7,#12]
 2629 002e 013B     	 subs r3,r3,#1
 2630 0030 FB60     	 str r3,[r7,#12]
 2631              	.L191:
 2632 0032 084B     	 ldr r3,.L195
 2633 0034 9A6E     	 ldr r2,[r3,#104]
 2634 0036 4FF48071 	 mov r1,#256
 2635 003a 7B68     	 ldr r3,[r7,#4]
 2636 003c 01FA03F3 	 lsl r3,r1,r3
 2637 0040 1340     	 ands r3,r3,r2
 859:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2638              	 .loc 1 859 0 discriminator 1
 2639 0042 002B     	 cmp r3,#0
 2640 0044 EDD0     	 beq .L194
 863:.././hal/sam3u1c/pmc.c **** 		}
 864:.././hal/sam3u1c/pmc.c **** 	}
 865:.././hal/sam3u1c/pmc.c **** 
 866:.././hal/sam3u1c/pmc.c **** 	return 0;
 2641              	 .loc 1 866 0
 2642 0046 0023     	 movs r3,#0
 2643              	.L193:
 867:.././hal/sam3u1c/pmc.c **** }
 2644              	 .loc 1 867 0
 2645 0048 1846     	 mov r0,r3
 2646 004a 1437     	 adds r7,r7,#20
 2647              	.LCFI192:
 2648              	 .cfi_def_cfa_offset 4
 2649 004c BD46     	 mov sp,r7
 2650              	.LCFI193:
 2651              	 .cfi_def_cfa_register 13
 2652              	 
 2653 004e 80BC     	 pop {r7}
 2654              	.LCFI194:
 2655              	 .cfi_restore 7
 2656              	 .cfi_def_cfa_offset 0
 2657 0050 7047     	 bx lr
 2658              	.L196:
 2659 0052 00BF     	 .align 2
 2660              	.L195:
 2661 0054 00040E40 	 .word 1074660352
 2662              	 .cfi_endproc
 2663              	.LFE105:
 2665              	 .section .text.pmc_switch_pck_to_upllck,"ax",%progbits
 2666              	 .align 1
 2667              	 .global pmc_switch_pck_to_upllck
 2668              	 .syntax unified
 2669              	 .thumb
 2670              	 .thumb_func
 2671              	 .fpu softvfp
 2673              	pmc_switch_pck_to_upllck:
 2674              	.LFB106:
 868:.././hal/sam3u1c/pmc.c **** 
 869:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP || SAMG55)
 870:.././hal/sam3u1c/pmc.c **** /**
 871:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to PLLB clock.
 872:.././hal/sam3u1c/pmc.c ****  *
 873:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 874:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 875:.././hal/sam3u1c/pmc.c ****  *
 876:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 877:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 878:.././hal/sam3u1c/pmc.c ****  */
 879:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_pllbck(uint32_t ul_id, uint32_t ul_pres)
 880:.././hal/sam3u1c/pmc.c **** {
 881:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 882:.././hal/sam3u1c/pmc.c **** 
 883:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLB_CLK | ul_pres;
 884:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 885:.././hal/sam3u1c/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 886:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 887:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 888:.././hal/sam3u1c/pmc.c **** 			return 1;
 889:.././hal/sam3u1c/pmc.c **** 		}
 890:.././hal/sam3u1c/pmc.c **** 	}
 891:.././hal/sam3u1c/pmc.c **** 
 892:.././hal/sam3u1c/pmc.c **** 	return 0;
 893:.././hal/sam3u1c/pmc.c **** }
 894:.././hal/sam3u1c/pmc.c **** #endif
 895:.././hal/sam3u1c/pmc.c **** 
 896:.././hal/sam3u1c/pmc.c **** #if (SAM3XA || SAM3U)
 897:.././hal/sam3u1c/pmc.c **** /**
 898:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to UPLL clock.
 899:.././hal/sam3u1c/pmc.c ****  *
 900:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 901:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 902:.././hal/sam3u1c/pmc.c ****  *
 903:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 904:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 905:.././hal/sam3u1c/pmc.c ****  */
 906:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_upllck(uint32_t ul_id, uint32_t ul_pres)
 907:.././hal/sam3u1c/pmc.c **** {
 2675              	 .loc 1 907 0
 2676              	 .cfi_startproc
 2677              	 
 2678              	 
 2679              	 
 2680 0000 80B4     	 push {r7}
 2681              	.LCFI195:
 2682              	 .cfi_def_cfa_offset 4
 2683              	 .cfi_offset 7,-4
 2684 0002 85B0     	 sub sp,sp,#20
 2685              	.LCFI196:
 2686              	 .cfi_def_cfa_offset 24
 2687 0004 00AF     	 add r7,sp,#0
 2688              	.LCFI197:
 2689              	 .cfi_def_cfa_register 7
 2690 0006 7860     	 str r0,[r7,#4]
 2691 0008 3960     	 str r1,[r7]
 908:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 909:.././hal/sam3u1c/pmc.c **** 
 910:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_UPLL_CLK | ul_pres;
 2692              	 .loc 1 910 0
 2693 000a 1249     	 ldr r1,.L202
 2694 000c 3B68     	 ldr r3,[r7]
 2695 000e 43F00302 	 orr r2,r3,#3
 2696 0012 7B68     	 ldr r3,[r7,#4]
 2697 0014 1033     	 adds r3,r3,#16
 2698 0016 41F82320 	 str r2,[r1,r3,lsl#2]
 911:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2699              	 .loc 1 911 0
 2700 001a 4FF40063 	 mov r3,#2048
 2701 001e FB60     	 str r3,[r7,#12]
 2702 0020 07E0     	 b .L198
 2703              	.L201:
 912:.././hal/sam3u1c/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 913:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 914:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2704              	 .loc 1 914 0
 2705 0022 FB68     	 ldr r3,[r7,#12]
 2706 0024 002B     	 cmp r3,#0
 2707 0026 01D1     	 bne .L199
 915:.././hal/sam3u1c/pmc.c **** 			return 1;
 2708              	 .loc 1 915 0
 2709 0028 0123     	 movs r3,#1
 2710 002a 0DE0     	 b .L200
 2711              	.L199:
 913:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2712              	 .loc 1 913 0
 2713 002c FB68     	 ldr r3,[r7,#12]
 2714 002e 013B     	 subs r3,r3,#1
 2715 0030 FB60     	 str r3,[r7,#12]
 2716              	.L198:
 912:.././hal/sam3u1c/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 2717              	 .loc 1 912 0 discriminator 1
 2718 0032 084B     	 ldr r3,.L202
 2719 0034 9A6E     	 ldr r2,[r3,#104]
 2720 0036 4FF48071 	 mov r1,#256
 2721 003a 7B68     	 ldr r3,[r7,#4]
 2722 003c 01FA03F3 	 lsl r3,r1,r3
 2723 0040 1340     	 ands r3,r3,r2
 911:.././hal/sam3u1c/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 2724              	 .loc 1 911 0 discriminator 1
 2725 0042 002B     	 cmp r3,#0
 2726 0044 EDD0     	 beq .L201
 916:.././hal/sam3u1c/pmc.c **** 		}
 917:.././hal/sam3u1c/pmc.c **** 	}
 918:.././hal/sam3u1c/pmc.c **** 
 919:.././hal/sam3u1c/pmc.c **** 	return 0;
 2727              	 .loc 1 919 0
 2728 0046 0023     	 movs r3,#0
 2729              	.L200:
 920:.././hal/sam3u1c/pmc.c **** }
 2730              	 .loc 1 920 0
 2731 0048 1846     	 mov r0,r3
 2732 004a 1437     	 adds r7,r7,#20
 2733              	.LCFI198:
 2734              	 .cfi_def_cfa_offset 4
 2735 004c BD46     	 mov sp,r7
 2736              	.LCFI199:
 2737              	 .cfi_def_cfa_register 13
 2738              	 
 2739 004e 80BC     	 pop {r7}
 2740              	.LCFI200:
 2741              	 .cfi_restore 7
 2742              	 .cfi_def_cfa_offset 0
 2743 0050 7047     	 bx lr
 2744              	.L203:
 2745 0052 00BF     	 .align 2
 2746              	.L202:
 2747 0054 00040E40 	 .word 1074660352
 2748              	 .cfi_endproc
 2749              	.LFE106:
 2751              	 .section .text.pmc_switch_pck_to_mck,"ax",%progbits
 2752              	 .align 1
 2753              	 .global pmc_switch_pck_to_mck
 2754              	 .syntax unified
 2755              	 .thumb
 2756              	 .thumb_func
 2757              	 .fpu softvfp
 2759              	pmc_switch_pck_to_mck:
 2760              	.LFB107:
 921:.././hal/sam3u1c/pmc.c **** #endif
 922:.././hal/sam3u1c/pmc.c **** 
 923:.././hal/sam3u1c/pmc.c **** /**
 924:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to mck.
 925:.././hal/sam3u1c/pmc.c ****  *
 926:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 927:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 928:.././hal/sam3u1c/pmc.c ****  *
 929:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 930:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 931:.././hal/sam3u1c/pmc.c ****  */
 932:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
 933:.././hal/sam3u1c/pmc.c **** {
 2761              	 .loc 1 933 0
 2762              	 .cfi_startproc
 2763              	 
 2764              	 
 2765              	 
 2766 0000 80B4     	 push {r7}
 2767              	.LCFI201:
 2768              	 .cfi_def_cfa_offset 4
 2769              	 .cfi_offset 7,-4
 2770 0002 85B0     	 sub sp,sp,#20
 2771              	.LCFI202:
 2772              	 .cfi_def_cfa_offset 24
 2773 0004 00AF     	 add r7,sp,#0
 2774              	.LCFI203:
 2775              	 .cfi_def_cfa_register 7
 2776 0006 7860     	 str r0,[r7,#4]
 2777 0008 3960     	 str r1,[r7]
 934:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 935:.././hal/sam3u1c/pmc.c **** 
 936:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
 2778              	 .loc 1 936 0
 2779 000a 1249     	 ldr r1,.L209
 2780 000c 3B68     	 ldr r3,[r7]
 2781 000e 43F00402 	 orr r2,r3,#4
 2782 0012 7B68     	 ldr r3,[r7,#4]
 2783 0014 1033     	 adds r3,r3,#16
 2784 0016 41F82320 	 str r2,[r1,r3,lsl#2]
 937:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2785              	 .loc 1 937 0
 2786 001a 4FF40063 	 mov r3,#2048
 2787 001e FB60     	 str r3,[r7,#12]
 2788 0020 07E0     	 b .L205
 2789              	.L208:
 938:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 939:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2790              	 .loc 1 939 0
 2791 0022 FB68     	 ldr r3,[r7,#12]
 2792 0024 002B     	 cmp r3,#0
 2793 0026 01D1     	 bne .L206
 940:.././hal/sam3u1c/pmc.c **** 			return 1;
 2794              	 .loc 1 940 0
 2795 0028 0123     	 movs r3,#1
 2796 002a 0DE0     	 b .L207
 2797              	.L206:
 938:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2798              	 .loc 1 938 0 discriminator 1
 2799 002c FB68     	 ldr r3,[r7,#12]
 2800 002e 013B     	 subs r3,r3,#1
 2801 0030 FB60     	 str r3,[r7,#12]
 2802              	.L205:
 2803 0032 084B     	 ldr r3,.L209
 2804 0034 9A6E     	 ldr r2,[r3,#104]
 2805 0036 4FF48071 	 mov r1,#256
 2806 003a 7B68     	 ldr r3,[r7,#4]
 2807 003c 01FA03F3 	 lsl r3,r1,r3
 2808 0040 1340     	 ands r3,r3,r2
 937:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2809              	 .loc 1 937 0 discriminator 1
 2810 0042 002B     	 cmp r3,#0
 2811 0044 EDD0     	 beq .L208
 941:.././hal/sam3u1c/pmc.c **** 		}
 942:.././hal/sam3u1c/pmc.c **** 	}
 943:.././hal/sam3u1c/pmc.c **** 
 944:.././hal/sam3u1c/pmc.c **** 	return 0;
 2812              	 .loc 1 944 0
 2813 0046 0023     	 movs r3,#0
 2814              	.L207:
 945:.././hal/sam3u1c/pmc.c **** }
 2815              	 .loc 1 945 0
 2816 0048 1846     	 mov r0,r3
 2817 004a 1437     	 adds r7,r7,#20
 2818              	.LCFI204:
 2819              	 .cfi_def_cfa_offset 4
 2820 004c BD46     	 mov sp,r7
 2821              	.LCFI205:
 2822              	 .cfi_def_cfa_register 13
 2823              	 
 2824 004e 80BC     	 pop {r7}
 2825              	.LCFI206:
 2826              	 .cfi_restore 7
 2827              	 .cfi_def_cfa_offset 0
 2828 0050 7047     	 bx lr
 2829              	.L210:
 2830 0052 00BF     	 .align 2
 2831              	.L209:
 2832 0054 00040E40 	 .word 1074660352
 2833              	 .cfi_endproc
 2834              	.LFE107:
 2836              	 .section .text.pmc_enable_pck,"ax",%progbits
 2837              	 .align 1
 2838              	 .global pmc_enable_pck
 2839              	 .syntax unified
 2840              	 .thumb
 2841              	 .thumb_func
 2842              	 .fpu softvfp
 2844              	pmc_enable_pck:
 2845              	.LFB108:
 946:.././hal/sam3u1c/pmc.c **** 
 947:.././hal/sam3u1c/pmc.c **** /**
 948:.././hal/sam3u1c/pmc.c ****  * \brief Enable the specified programmable clock.
 949:.././hal/sam3u1c/pmc.c ****  *
 950:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 951:.././hal/sam3u1c/pmc.c ****  */
 952:.././hal/sam3u1c/pmc.c **** void pmc_enable_pck(uint32_t ul_id)
 953:.././hal/sam3u1c/pmc.c **** {
 2846              	 .loc 1 953 0
 2847              	 .cfi_startproc
 2848              	 
 2849              	 
 2850              	 
 2851 0000 80B4     	 push {r7}
 2852              	.LCFI207:
 2853              	 .cfi_def_cfa_offset 4
 2854              	 .cfi_offset 7,-4
 2855 0002 83B0     	 sub sp,sp,#12
 2856              	.LCFI208:
 2857              	 .cfi_def_cfa_offset 16
 2858 0004 00AF     	 add r7,sp,#0
 2859              	.LCFI209:
 2860              	 .cfi_def_cfa_register 7
 2861 0006 7860     	 str r0,[r7,#4]
 954:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
 2862              	 .loc 1 954 0
 2863 0008 054A     	 ldr r2,.L212
 2864 000a 4FF48071 	 mov r1,#256
 2865 000e 7B68     	 ldr r3,[r7,#4]
 2866 0010 01FA03F3 	 lsl r3,r1,r3
 2867 0014 1360     	 str r3,[r2]
 955:.././hal/sam3u1c/pmc.c **** }
 2868              	 .loc 1 955 0
 2869 0016 00BF     	 nop
 2870 0018 0C37     	 adds r7,r7,#12
 2871              	.LCFI210:
 2872              	 .cfi_def_cfa_offset 4
 2873 001a BD46     	 mov sp,r7
 2874              	.LCFI211:
 2875              	 .cfi_def_cfa_register 13
 2876              	 
 2877 001c 80BC     	 pop {r7}
 2878              	.LCFI212:
 2879              	 .cfi_restore 7
 2880              	 .cfi_def_cfa_offset 0
 2881 001e 7047     	 bx lr
 2882              	.L213:
 2883              	 .align 2
 2884              	.L212:
 2885 0020 00040E40 	 .word 1074660352
 2886              	 .cfi_endproc
 2887              	.LFE108:
 2889              	 .section .text.pmc_disable_pck,"ax",%progbits
 2890              	 .align 1
 2891              	 .global pmc_disable_pck
 2892              	 .syntax unified
 2893              	 .thumb
 2894              	 .thumb_func
 2895              	 .fpu softvfp
 2897              	pmc_disable_pck:
 2898              	.LFB109:
 956:.././hal/sam3u1c/pmc.c **** 
 957:.././hal/sam3u1c/pmc.c **** /**
 958:.././hal/sam3u1c/pmc.c ****  * \brief Disable the specified programmable clock.
 959:.././hal/sam3u1c/pmc.c ****  *
 960:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 961:.././hal/sam3u1c/pmc.c ****  */
 962:.././hal/sam3u1c/pmc.c **** void pmc_disable_pck(uint32_t ul_id)
 963:.././hal/sam3u1c/pmc.c **** {
 2899              	 .loc 1 963 0
 2900              	 .cfi_startproc
 2901              	 
 2902              	 
 2903              	 
 2904 0000 80B4     	 push {r7}
 2905              	.LCFI213:
 2906              	 .cfi_def_cfa_offset 4
 2907              	 .cfi_offset 7,-4
 2908 0002 83B0     	 sub sp,sp,#12
 2909              	.LCFI214:
 2910              	 .cfi_def_cfa_offset 16
 2911 0004 00AF     	 add r7,sp,#0
 2912              	.LCFI215:
 2913              	 .cfi_def_cfa_register 7
 2914 0006 7860     	 str r0,[r7,#4]
 964:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
 2915              	 .loc 1 964 0
 2916 0008 054A     	 ldr r2,.L215
 2917 000a 4FF48071 	 mov r1,#256
 2918 000e 7B68     	 ldr r3,[r7,#4]
 2919 0010 01FA03F3 	 lsl r3,r1,r3
 2920 0014 5360     	 str r3,[r2,#4]
 965:.././hal/sam3u1c/pmc.c **** }
 2921              	 .loc 1 965 0
 2922 0016 00BF     	 nop
 2923 0018 0C37     	 adds r7,r7,#12
 2924              	.LCFI216:
 2925              	 .cfi_def_cfa_offset 4
 2926 001a BD46     	 mov sp,r7
 2927              	.LCFI217:
 2928              	 .cfi_def_cfa_register 13
 2929              	 
 2930 001c 80BC     	 pop {r7}
 2931              	.LCFI218:
 2932              	 .cfi_restore 7
 2933              	 .cfi_def_cfa_offset 0
 2934 001e 7047     	 bx lr
 2935              	.L216:
 2936              	 .align 2
 2937              	.L215:
 2938 0020 00040E40 	 .word 1074660352
 2939              	 .cfi_endproc
 2940              	.LFE109:
 2942              	 .section .text.pmc_enable_all_pck,"ax",%progbits
 2943              	 .align 1
 2944              	 .global pmc_enable_all_pck
 2945              	 .syntax unified
 2946              	 .thumb
 2947              	 .thumb_func
 2948              	 .fpu softvfp
 2950              	pmc_enable_all_pck:
 2951              	.LFB110:
 966:.././hal/sam3u1c/pmc.c **** 
 967:.././hal/sam3u1c/pmc.c **** /**
 968:.././hal/sam3u1c/pmc.c ****  * \brief Enable all programmable clocks.
 969:.././hal/sam3u1c/pmc.c ****  */
 970:.././hal/sam3u1c/pmc.c **** void pmc_enable_all_pck(void)
 971:.././hal/sam3u1c/pmc.c **** {
 2952              	 .loc 1 971 0
 2953              	 .cfi_startproc
 2954              	 
 2955              	 
 2956              	 
 2957 0000 80B4     	 push {r7}
 2958              	.LCFI219:
 2959              	 .cfi_def_cfa_offset 4
 2960              	 .cfi_offset 7,-4
 2961 0002 00AF     	 add r7,sp,#0
 2962              	.LCFI220:
 2963              	 .cfi_def_cfa_register 7
 972:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_PCK0 | PMC_SCER_PCK1 | PMC_SCER_PCK2;
 2964              	 .loc 1 972 0
 2965 0004 034B     	 ldr r3,.L218
 2966 0006 4FF4E062 	 mov r2,#1792
 2967 000a 1A60     	 str r2,[r3]
 973:.././hal/sam3u1c/pmc.c **** }
 2968              	 .loc 1 973 0
 2969 000c 00BF     	 nop
 2970 000e BD46     	 mov sp,r7
 2971              	.LCFI221:
 2972              	 .cfi_def_cfa_register 13
 2973              	 
 2974 0010 80BC     	 pop {r7}
 2975              	.LCFI222:
 2976              	 .cfi_restore 7
 2977              	 .cfi_def_cfa_offset 0
 2978 0012 7047     	 bx lr
 2979              	.L219:
 2980              	 .align 2
 2981              	.L218:
 2982 0014 00040E40 	 .word 1074660352
 2983              	 .cfi_endproc
 2984              	.LFE110:
 2986              	 .section .text.pmc_disable_all_pck,"ax",%progbits
 2987              	 .align 1
 2988              	 .global pmc_disable_all_pck
 2989              	 .syntax unified
 2990              	 .thumb
 2991              	 .thumb_func
 2992              	 .fpu softvfp
 2994              	pmc_disable_all_pck:
 2995              	.LFB111:
 974:.././hal/sam3u1c/pmc.c **** 
 975:.././hal/sam3u1c/pmc.c **** /**
 976:.././hal/sam3u1c/pmc.c ****  * \brief Disable all programmable clocks.
 977:.././hal/sam3u1c/pmc.c ****  */
 978:.././hal/sam3u1c/pmc.c **** void pmc_disable_all_pck(void)
 979:.././hal/sam3u1c/pmc.c **** {
 2996              	 .loc 1 979 0
 2997              	 .cfi_startproc
 2998              	 
 2999              	 
 3000              	 
 3001 0000 80B4     	 push {r7}
 3002              	.LCFI223:
 3003              	 .cfi_def_cfa_offset 4
 3004              	 .cfi_offset 7,-4
 3005 0002 00AF     	 add r7,sp,#0
 3006              	.LCFI224:
 3007              	 .cfi_def_cfa_register 7
 980:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_PCK0 | PMC_SCDR_PCK1 | PMC_SCDR_PCK2;
 3008              	 .loc 1 980 0
 3009 0004 034B     	 ldr r3,.L221
 3010 0006 4FF4E062 	 mov r2,#1792
 3011 000a 5A60     	 str r2,[r3,#4]
 981:.././hal/sam3u1c/pmc.c **** }
 3012              	 .loc 1 981 0
 3013 000c 00BF     	 nop
 3014 000e BD46     	 mov sp,r7
 3015              	.LCFI225:
 3016              	 .cfi_def_cfa_register 13
 3017              	 
 3018 0010 80BC     	 pop {r7}
 3019              	.LCFI226:
 3020              	 .cfi_restore 7
 3021              	 .cfi_def_cfa_offset 0
 3022 0012 7047     	 bx lr
 3023              	.L222:
 3024              	 .align 2
 3025              	.L221:
 3026 0014 00040E40 	 .word 1074660352
 3027              	 .cfi_endproc
 3028              	.LFE111:
 3030              	 .section .text.pmc_is_pck_enabled,"ax",%progbits
 3031              	 .align 1
 3032              	 .global pmc_is_pck_enabled
 3033              	 .syntax unified
 3034              	 .thumb
 3035              	 .thumb_func
 3036              	 .fpu softvfp
 3038              	pmc_is_pck_enabled:
 3039              	.LFB112:
 982:.././hal/sam3u1c/pmc.c **** 
 983:.././hal/sam3u1c/pmc.c **** /**
 984:.././hal/sam3u1c/pmc.c ****  * \brief Check if the specified programmable clock is enabled.
 985:.././hal/sam3u1c/pmc.c ****  *
 986:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 987:.././hal/sam3u1c/pmc.c ****  *
 988:.././hal/sam3u1c/pmc.c ****  * \retval 0 Programmable clock is disabled or unknown.
 989:.././hal/sam3u1c/pmc.c ****  * \retval 1 Programmable clock is enabled.
 990:.././hal/sam3u1c/pmc.c ****  */
 991:.././hal/sam3u1c/pmc.c **** uint32_t pmc_is_pck_enabled(uint32_t ul_id)
 992:.././hal/sam3u1c/pmc.c **** {
 3040              	 .loc 1 992 0
 3041              	 .cfi_startproc
 3042              	 
 3043              	 
 3044              	 
 3045 0000 80B4     	 push {r7}
 3046              	.LCFI227:
 3047              	 .cfi_def_cfa_offset 4
 3048              	 .cfi_offset 7,-4
 3049 0002 83B0     	 sub sp,sp,#12
 3050              	.LCFI228:
 3051              	 .cfi_def_cfa_offset 16
 3052 0004 00AF     	 add r7,sp,#0
 3053              	.LCFI229:
 3054              	 .cfi_def_cfa_register 7
 3055 0006 7860     	 str r0,[r7,#4]
 993:.././hal/sam3u1c/pmc.c **** 	if (ul_id > 2) {
 3056              	 .loc 1 993 0
 3057 0008 7B68     	 ldr r3,[r7,#4]
 3058 000a 022B     	 cmp r3,#2
 3059 000c 01D9     	 bls .L224
 994:.././hal/sam3u1c/pmc.c **** 		return 0;
 3060              	 .loc 1 994 0
 3061 000e 0023     	 movs r3,#0
 3062 0010 07E0     	 b .L225
 3063              	.L224:
 995:.././hal/sam3u1c/pmc.c **** 	}
 996:.././hal/sam3u1c/pmc.c **** 
 997:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SCSR & (PMC_SCSR_PCK0 << ul_id));
 3064              	 .loc 1 997 0
 3065 0012 064B     	 ldr r3,.L226
 3066 0014 9A68     	 ldr r2,[r3,#8]
 3067 0016 4FF48071 	 mov r1,#256
 3068 001a 7B68     	 ldr r3,[r7,#4]
 3069 001c 01FA03F3 	 lsl r3,r1,r3
 3070 0020 1340     	 ands r3,r3,r2
 3071              	.L225:
 998:.././hal/sam3u1c/pmc.c **** }
 3072              	 .loc 1 998 0
 3073 0022 1846     	 mov r0,r3
 3074 0024 0C37     	 adds r7,r7,#12
 3075              	.LCFI230:
 3076              	 .cfi_def_cfa_offset 4
 3077 0026 BD46     	 mov sp,r7
 3078              	.LCFI231:
 3079              	 .cfi_def_cfa_register 13
 3080              	 
 3081 0028 80BC     	 pop {r7}
 3082              	.LCFI232:
 3083              	 .cfi_restore 7
 3084              	 .cfi_def_cfa_offset 0
 3085 002a 7047     	 bx lr
 3086              	.L227:
 3087              	 .align 2
 3088              	.L226:
 3089 002c 00040E40 	 .word 1074660352
 3090              	 .cfi_endproc
 3091              	.LFE112:
 3093              	 .section .text.pmc_enable_interrupt,"ax",%progbits
 3094              	 .align 1
 3095              	 .global pmc_enable_interrupt
 3096              	 .syntax unified
 3097              	 .thumb
 3098              	 .thumb_func
 3099              	 .fpu softvfp
 3101              	pmc_enable_interrupt:
 3102              	.LFB113:
 999:.././hal/sam3u1c/pmc.c **** 
1000:.././hal/sam3u1c/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP)
1001:.././hal/sam3u1c/pmc.c **** /**
1002:.././hal/sam3u1c/pmc.c ****  * \brief Enable Coprocessor Clocks.
1003:.././hal/sam3u1c/pmc.c ****  */
1004:.././hal/sam3u1c/pmc.c **** void pmc_enable_cpck(void)
1005:.././hal/sam3u1c/pmc.c **** {
1006:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_CPCK | PMC_SCER_CPKEY_PASSWD;
1007:.././hal/sam3u1c/pmc.c **** }
1008:.././hal/sam3u1c/pmc.c **** 
1009:.././hal/sam3u1c/pmc.c **** /**
1010:.././hal/sam3u1c/pmc.c ****  * \brief Disable Coprocessor Clocks.
1011:.././hal/sam3u1c/pmc.c ****  */
1012:.././hal/sam3u1c/pmc.c **** void pmc_disable_cpck(void)
1013:.././hal/sam3u1c/pmc.c **** {
1014:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_CPCK | PMC_SCDR_CPKEY_PASSWD;
1015:.././hal/sam3u1c/pmc.c **** }
1016:.././hal/sam3u1c/pmc.c **** 
1017:.././hal/sam3u1c/pmc.c **** /**
1018:.././hal/sam3u1c/pmc.c ****  * \brief Check if the Coprocessor Clocks is enabled.
1019:.././hal/sam3u1c/pmc.c ****  *
1020:.././hal/sam3u1c/pmc.c ****  * \retval 0 Coprocessor Clocks is disabled.
1021:.././hal/sam3u1c/pmc.c ****  * \retval 1 Coprocessor Clocks is enabled.
1022:.././hal/sam3u1c/pmc.c ****  */
1023:.././hal/sam3u1c/pmc.c **** bool pmc_is_cpck_enabled(void)
1024:.././hal/sam3u1c/pmc.c **** {
1025:.././hal/sam3u1c/pmc.c **** 	if(PMC->PMC_SCSR & PMC_SCSR_CPCK) {
1026:.././hal/sam3u1c/pmc.c **** 		return 1;
1027:.././hal/sam3u1c/pmc.c **** 	} else {
1028:.././hal/sam3u1c/pmc.c **** 		return 0;
1029:.././hal/sam3u1c/pmc.c **** 	}
1030:.././hal/sam3u1c/pmc.c **** }
1031:.././hal/sam3u1c/pmc.c **** 
1032:.././hal/sam3u1c/pmc.c **** /**
1033:.././hal/sam3u1c/pmc.c ****  * \brief Enable Coprocessor Bus Master Clocks.
1034:.././hal/sam3u1c/pmc.c ****  */
1035:.././hal/sam3u1c/pmc.c **** void pmc_enable_cpbmck(void)
1036:.././hal/sam3u1c/pmc.c **** {
1037:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_CPCK | PMC_SCER_CPKEY_PASSWD;
1038:.././hal/sam3u1c/pmc.c **** }
1039:.././hal/sam3u1c/pmc.c **** 
1040:.././hal/sam3u1c/pmc.c **** /**
1041:.././hal/sam3u1c/pmc.c ****  * \brief Disable Coprocessor Bus Master Clocks.
1042:.././hal/sam3u1c/pmc.c ****  */
1043:.././hal/sam3u1c/pmc.c **** void pmc_disable_cpbmck(void)
1044:.././hal/sam3u1c/pmc.c **** {
1045:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_CPCK | PMC_SCDR_CPKEY_PASSWD;
1046:.././hal/sam3u1c/pmc.c **** }
1047:.././hal/sam3u1c/pmc.c **** 
1048:.././hal/sam3u1c/pmc.c **** /**
1049:.././hal/sam3u1c/pmc.c ****  * \brief Check if the Coprocessor Bus Master Clocks is enabled.
1050:.././hal/sam3u1c/pmc.c ****  *
1051:.././hal/sam3u1c/pmc.c ****  * \retval 0 Coprocessor Bus Master Clocks is disabled.
1052:.././hal/sam3u1c/pmc.c ****  * \retval 1 Coprocessor Bus Master Clocks is enabled.
1053:.././hal/sam3u1c/pmc.c ****  */
1054:.././hal/sam3u1c/pmc.c **** bool pmc_is_cpbmck_enabled(void)
1055:.././hal/sam3u1c/pmc.c **** {
1056:.././hal/sam3u1c/pmc.c **** 	if(PMC->PMC_SCSR & PMC_SCSR_CPBMCK) {
1057:.././hal/sam3u1c/pmc.c **** 		return 1;
1058:.././hal/sam3u1c/pmc.c **** 	} else {
1059:.././hal/sam3u1c/pmc.c **** 		return 0;
1060:.././hal/sam3u1c/pmc.c **** 	}
1061:.././hal/sam3u1c/pmc.c **** }
1062:.././hal/sam3u1c/pmc.c **** 
1063:.././hal/sam3u1c/pmc.c **** /**
1064:.././hal/sam3u1c/pmc.c ****  * \brief Set the prescaler for the Coprocessor Master Clock.
1065:.././hal/sam3u1c/pmc.c ****  *
1066:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Prescaler value.
1067:.././hal/sam3u1c/pmc.c ****  */
1068:.././hal/sam3u1c/pmc.c **** void pmc_cpck_set_prescaler(uint32_t ul_pres)
1069:.././hal/sam3u1c/pmc.c **** {
1070:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
1071:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_CPPRES_Msk)) | PMC_MCKR_CPPRES(ul_pres);
1072:.././hal/sam3u1c/pmc.c **** }
1073:.././hal/sam3u1c/pmc.c **** 
1074:.././hal/sam3u1c/pmc.c **** /**
1075:.././hal/sam3u1c/pmc.c ****  * \brief Set the source for the Coprocessor Master Clock.
1076:.././hal/sam3u1c/pmc.c ****  *
1077:.././hal/sam3u1c/pmc.c ****  * \param ul_source Source selection value.
1078:.././hal/sam3u1c/pmc.c ****  */
1079:.././hal/sam3u1c/pmc.c **** void pmc_cpck_set_source(uint32_t ul_source)
1080:.././hal/sam3u1c/pmc.c **** {
1081:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
1082:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_CPCSS_Msk)) | ul_source;
1083:.././hal/sam3u1c/pmc.c **** }
1084:.././hal/sam3u1c/pmc.c **** #endif
1085:.././hal/sam3u1c/pmc.c **** 
1086:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAMG55)
1087:.././hal/sam3u1c/pmc.c **** /**
1088:.././hal/sam3u1c/pmc.c ****  * \brief Switch UDP (USB) clock source selection to PLLA clock.
1089:.././hal/sam3u1c/pmc.c ****  *
1090:.././hal/sam3u1c/pmc.c ****  * \param ul_usbdiv Clock divisor.
1091:.././hal/sam3u1c/pmc.c ****  */
1092:.././hal/sam3u1c/pmc.c **** void pmc_switch_udpck_to_pllack(uint32_t ul_usbdiv)
1093:.././hal/sam3u1c/pmc.c **** {
1094:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv);
1095:.././hal/sam3u1c/pmc.c **** }
1096:.././hal/sam3u1c/pmc.c **** #endif
1097:.././hal/sam3u1c/pmc.c **** 
1098:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM4S || SAMG55)
1099:.././hal/sam3u1c/pmc.c **** /**
1100:.././hal/sam3u1c/pmc.c ****  * \brief Switch UDP (USB) clock source selection to PLLB clock.
1101:.././hal/sam3u1c/pmc.c ****  *
1102:.././hal/sam3u1c/pmc.c ****  * \param ul_usbdiv Clock divisor.
1103:.././hal/sam3u1c/pmc.c ****  */
1104:.././hal/sam3u1c/pmc.c **** void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
1105:.././hal/sam3u1c/pmc.c **** {
1106:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
1107:.././hal/sam3u1c/pmc.c **** }
1108:.././hal/sam3u1c/pmc.c **** #endif
1109:.././hal/sam3u1c/pmc.c **** 
1110:.././hal/sam3u1c/pmc.c **** #if (SAM3XA)
1111:.././hal/sam3u1c/pmc.c **** /**
1112:.././hal/sam3u1c/pmc.c ****  * \brief Switch UDP (USB) clock source selection to UPLL clock.
1113:.././hal/sam3u1c/pmc.c ****  *
1114:.././hal/sam3u1c/pmc.c ****  * \param ul_usbdiv Clock divisor.
1115:.././hal/sam3u1c/pmc.c ****  */
1116:.././hal/sam3u1c/pmc.c **** void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
1117:.././hal/sam3u1c/pmc.c **** {
1118:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
1119:.././hal/sam3u1c/pmc.c **** }
1120:.././hal/sam3u1c/pmc.c **** #endif
1121:.././hal/sam3u1c/pmc.c **** 
1122:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAMG55)
1123:.././hal/sam3u1c/pmc.c **** /**
1124:.././hal/sam3u1c/pmc.c ****  * \brief Enable UDP (USB) clock.
1125:.././hal/sam3u1c/pmc.c ****  */
1126:.././hal/sam3u1c/pmc.c **** void pmc_enable_udpck(void)
1127:.././hal/sam3u1c/pmc.c **** {
1128:.././hal/sam3u1c/pmc.c **** # if (SAM3S || SAM4S || SAM4E || SAMG55)
1129:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_UDP;
1130:.././hal/sam3u1c/pmc.c **** # else
1131:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
1132:.././hal/sam3u1c/pmc.c **** # endif
1133:.././hal/sam3u1c/pmc.c **** }
1134:.././hal/sam3u1c/pmc.c **** 
1135:.././hal/sam3u1c/pmc.c **** /**
1136:.././hal/sam3u1c/pmc.c ****  * \brief Disable UDP (USB) clock.
1137:.././hal/sam3u1c/pmc.c ****  */
1138:.././hal/sam3u1c/pmc.c **** void pmc_disable_udpck(void)
1139:.././hal/sam3u1c/pmc.c **** {
1140:.././hal/sam3u1c/pmc.c **** # if (SAM3S || SAM4S || SAM4E || SAMG55)
1141:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_UDP;
1142:.././hal/sam3u1c/pmc.c **** # else
1143:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_UOTGCLK;
1144:.././hal/sam3u1c/pmc.c **** # endif
1145:.././hal/sam3u1c/pmc.c **** }
1146:.././hal/sam3u1c/pmc.c **** #endif
1147:.././hal/sam3u1c/pmc.c **** 
1148:.././hal/sam3u1c/pmc.c **** /**
1149:.././hal/sam3u1c/pmc.c ****  * \brief Enable PMC interrupts.
1150:.././hal/sam3u1c/pmc.c ****  *
1151:.././hal/sam3u1c/pmc.c ****  * \param ul_sources Interrupt sources bit map.
1152:.././hal/sam3u1c/pmc.c ****  */
1153:.././hal/sam3u1c/pmc.c **** void pmc_enable_interrupt(uint32_t ul_sources)
1154:.././hal/sam3u1c/pmc.c **** {
 3103              	 .loc 1 1154 0
 3104              	 .cfi_startproc
 3105              	 
 3106              	 
 3107              	 
 3108 0000 80B4     	 push {r7}
 3109              	.LCFI233:
 3110              	 .cfi_def_cfa_offset 4
 3111              	 .cfi_offset 7,-4
 3112 0002 83B0     	 sub sp,sp,#12
 3113              	.LCFI234:
 3114              	 .cfi_def_cfa_offset 16
 3115 0004 00AF     	 add r7,sp,#0
 3116              	.LCFI235:
 3117              	 .cfi_def_cfa_register 7
 3118 0006 7860     	 str r0,[r7,#4]
1155:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_IER = ul_sources;
 3119              	 .loc 1 1155 0
 3120 0008 034A     	 ldr r2,.L229
 3121 000a 7B68     	 ldr r3,[r7,#4]
 3122 000c 1366     	 str r3,[r2,#96]
1156:.././hal/sam3u1c/pmc.c **** }
 3123              	 .loc 1 1156 0
 3124 000e 00BF     	 nop
 3125 0010 0C37     	 adds r7,r7,#12
 3126              	.LCFI236:
 3127              	 .cfi_def_cfa_offset 4
 3128 0012 BD46     	 mov sp,r7
 3129              	.LCFI237:
 3130              	 .cfi_def_cfa_register 13
 3131              	 
 3132 0014 80BC     	 pop {r7}
 3133              	.LCFI238:
 3134              	 .cfi_restore 7
 3135              	 .cfi_def_cfa_offset 0
 3136 0016 7047     	 bx lr
 3137              	.L230:
 3138              	 .align 2
 3139              	.L229:
 3140 0018 00040E40 	 .word 1074660352
 3141              	 .cfi_endproc
 3142              	.LFE113:
 3144              	 .section .text.pmc_disable_interrupt,"ax",%progbits
 3145              	 .align 1
 3146              	 .global pmc_disable_interrupt
 3147              	 .syntax unified
 3148              	 .thumb
 3149              	 .thumb_func
 3150              	 .fpu softvfp
 3152              	pmc_disable_interrupt:
 3153              	.LFB114:
1157:.././hal/sam3u1c/pmc.c **** 
1158:.././hal/sam3u1c/pmc.c **** /**
1159:.././hal/sam3u1c/pmc.c ****  * \brief Disable PMC interrupts.
1160:.././hal/sam3u1c/pmc.c ****  *
1161:.././hal/sam3u1c/pmc.c ****  * \param ul_sources Interrupt sources bit map.
1162:.././hal/sam3u1c/pmc.c ****  */
1163:.././hal/sam3u1c/pmc.c **** void pmc_disable_interrupt(uint32_t ul_sources)
1164:.././hal/sam3u1c/pmc.c **** {
 3154              	 .loc 1 1164 0
 3155              	 .cfi_startproc
 3156              	 
 3157              	 
 3158              	 
 3159 0000 80B4     	 push {r7}
 3160              	.LCFI239:
 3161              	 .cfi_def_cfa_offset 4
 3162              	 .cfi_offset 7,-4
 3163 0002 83B0     	 sub sp,sp,#12
 3164              	.LCFI240:
 3165              	 .cfi_def_cfa_offset 16
 3166 0004 00AF     	 add r7,sp,#0
 3167              	.LCFI241:
 3168              	 .cfi_def_cfa_register 7
 3169 0006 7860     	 str r0,[r7,#4]
1165:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_IDR = ul_sources;
 3170              	 .loc 1 1165 0
 3171 0008 034A     	 ldr r2,.L232
 3172 000a 7B68     	 ldr r3,[r7,#4]
 3173 000c 5366     	 str r3,[r2,#100]
1166:.././hal/sam3u1c/pmc.c **** }
 3174              	 .loc 1 1166 0
 3175 000e 00BF     	 nop
 3176 0010 0C37     	 adds r7,r7,#12
 3177              	.LCFI242:
 3178              	 .cfi_def_cfa_offset 4
 3179 0012 BD46     	 mov sp,r7
 3180              	.LCFI243:
 3181              	 .cfi_def_cfa_register 13
 3182              	 
 3183 0014 80BC     	 pop {r7}
 3184              	.LCFI244:
 3185              	 .cfi_restore 7
 3186              	 .cfi_def_cfa_offset 0
 3187 0016 7047     	 bx lr
 3188              	.L233:
 3189              	 .align 2
 3190              	.L232:
 3191 0018 00040E40 	 .word 1074660352
 3192              	 .cfi_endproc
 3193              	.LFE114:
 3195              	 .section .text.pmc_get_interrupt_mask,"ax",%progbits
 3196              	 .align 1
 3197              	 .global pmc_get_interrupt_mask
 3198              	 .syntax unified
 3199              	 .thumb
 3200              	 .thumb_func
 3201              	 .fpu softvfp
 3203              	pmc_get_interrupt_mask:
 3204              	.LFB115:
1167:.././hal/sam3u1c/pmc.c **** 
1168:.././hal/sam3u1c/pmc.c **** /**
1169:.././hal/sam3u1c/pmc.c ****  * \brief Get PMC interrupt mask.
1170:.././hal/sam3u1c/pmc.c ****  *
1171:.././hal/sam3u1c/pmc.c ****  * \return The interrupt mask value.
1172:.././hal/sam3u1c/pmc.c ****  */
1173:.././hal/sam3u1c/pmc.c **** uint32_t pmc_get_interrupt_mask(void)
1174:.././hal/sam3u1c/pmc.c **** {
 3205              	 .loc 1 1174 0
 3206              	 .cfi_startproc
 3207              	 
 3208              	 
 3209              	 
 3210 0000 80B4     	 push {r7}
 3211              	.LCFI245:
 3212              	 .cfi_def_cfa_offset 4
 3213              	 .cfi_offset 7,-4
 3214 0002 00AF     	 add r7,sp,#0
 3215              	.LCFI246:
 3216              	 .cfi_def_cfa_register 7
1175:.././hal/sam3u1c/pmc.c **** 	return PMC->PMC_IMR;
 3217              	 .loc 1 1175 0
 3218 0004 024B     	 ldr r3,.L236
 3219 0006 DB6E     	 ldr r3,[r3,#108]
1176:.././hal/sam3u1c/pmc.c **** }
 3220              	 .loc 1 1176 0
 3221 0008 1846     	 mov r0,r3
 3222 000a BD46     	 mov sp,r7
 3223              	.LCFI247:
 3224              	 .cfi_def_cfa_register 13
 3225              	 
 3226 000c 80BC     	 pop {r7}
 3227              	.LCFI248:
 3228              	 .cfi_restore 7
 3229              	 .cfi_def_cfa_offset 0
 3230 000e 7047     	 bx lr
 3231              	.L237:
 3232              	 .align 2
 3233              	.L236:
 3234 0010 00040E40 	 .word 1074660352
 3235              	 .cfi_endproc
 3236              	.LFE115:
 3238              	 .section .text.pmc_get_status,"ax",%progbits
 3239              	 .align 1
 3240              	 .global pmc_get_status
 3241              	 .syntax unified
 3242              	 .thumb
 3243              	 .thumb_func
 3244              	 .fpu softvfp
 3246              	pmc_get_status:
 3247              	.LFB116:
1177:.././hal/sam3u1c/pmc.c **** 
1178:.././hal/sam3u1c/pmc.c **** /**
1179:.././hal/sam3u1c/pmc.c ****  * \brief Get current status.
1180:.././hal/sam3u1c/pmc.c ****  *
1181:.././hal/sam3u1c/pmc.c ****  * \return The current PMC status.
1182:.././hal/sam3u1c/pmc.c ****  */
1183:.././hal/sam3u1c/pmc.c **** uint32_t pmc_get_status(void)
1184:.././hal/sam3u1c/pmc.c **** {
 3248              	 .loc 1 1184 0
 3249              	 .cfi_startproc
 3250              	 
 3251              	 
 3252              	 
 3253 0000 80B4     	 push {r7}
 3254              	.LCFI249:
 3255              	 .cfi_def_cfa_offset 4
 3256              	 .cfi_offset 7,-4
 3257 0002 00AF     	 add r7,sp,#0
 3258              	.LCFI250:
 3259              	 .cfi_def_cfa_register 7
1185:.././hal/sam3u1c/pmc.c **** 	return PMC->PMC_SR;
 3260              	 .loc 1 1185 0
 3261 0004 024B     	 ldr r3,.L240
 3262 0006 9B6E     	 ldr r3,[r3,#104]
1186:.././hal/sam3u1c/pmc.c **** }
 3263              	 .loc 1 1186 0
 3264 0008 1846     	 mov r0,r3
 3265 000a BD46     	 mov sp,r7
 3266              	.LCFI251:
 3267              	 .cfi_def_cfa_register 13
 3268              	 
 3269 000c 80BC     	 pop {r7}
 3270              	.LCFI252:
 3271              	 .cfi_restore 7
 3272              	 .cfi_def_cfa_offset 0
 3273 000e 7047     	 bx lr
 3274              	.L241:
 3275              	 .align 2
 3276              	.L240:
 3277 0010 00040E40 	 .word 1074660352
 3278              	 .cfi_endproc
 3279              	.LFE116:
 3281              	 .section .text.pmc_set_fast_startup_input,"ax",%progbits
 3282              	 .align 1
 3283              	 .global pmc_set_fast_startup_input
 3284              	 .syntax unified
 3285              	 .thumb
 3286              	 .thumb_func
 3287              	 .fpu softvfp
 3289              	pmc_set_fast_startup_input:
 3290              	.LFB117:
1187:.././hal/sam3u1c/pmc.c **** 
1188:.././hal/sam3u1c/pmc.c **** /**
1189:.././hal/sam3u1c/pmc.c ****  * \brief Set the wake-up inputs for fast startup mode registers
1190:.././hal/sam3u1c/pmc.c ****  *        (event generation).
1191:.././hal/sam3u1c/pmc.c ****  *
1192:.././hal/sam3u1c/pmc.c ****  * \param ul_inputs Wake up inputs to enable.
1193:.././hal/sam3u1c/pmc.c ****  */
1194:.././hal/sam3u1c/pmc.c **** void pmc_set_fast_startup_input(uint32_t ul_inputs)
1195:.././hal/sam3u1c/pmc.c **** {
 3291              	 .loc 1 1195 0
 3292              	 .cfi_startproc
 3293              	 
 3294              	 
 3295              	 
 3296 0000 80B4     	 push {r7}
 3297              	.LCFI253:
 3298              	 .cfi_def_cfa_offset 4
 3299              	 .cfi_offset 7,-4
 3300 0002 83B0     	 sub sp,sp,#12
 3301              	.LCFI254:
 3302              	 .cfi_def_cfa_offset 16
 3303 0004 00AF     	 add r7,sp,#0
 3304              	.LCFI255:
 3305              	 .cfi_def_cfa_register 7
 3306 0006 7860     	 str r0,[r7,#4]
1196:.././hal/sam3u1c/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
 3307              	 .loc 1 1196 0
 3308 0008 7B68     	 ldr r3,[r7,#4]
 3309 000a C3F31203 	 ubfx r3,r3,#0,#19
 3310 000e 7B60     	 str r3,[r7,#4]
1197:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR |= ul_inputs;
 3311              	 .loc 1 1197 0
 3312 0010 054B     	 ldr r3,.L243
 3313 0012 1A6F     	 ldr r2,[r3,#112]
 3314 0014 0449     	 ldr r1,.L243
 3315 0016 7B68     	 ldr r3,[r7,#4]
 3316 0018 1343     	 orrs r3,r3,r2
 3317 001a 0B67     	 str r3,[r1,#112]
1198:.././hal/sam3u1c/pmc.c **** }
 3318              	 .loc 1 1198 0
 3319 001c 00BF     	 nop
 3320 001e 0C37     	 adds r7,r7,#12
 3321              	.LCFI256:
 3322              	 .cfi_def_cfa_offset 4
 3323 0020 BD46     	 mov sp,r7
 3324              	.LCFI257:
 3325              	 .cfi_def_cfa_register 13
 3326              	 
 3327 0022 80BC     	 pop {r7}
 3328              	.LCFI258:
 3329              	 .cfi_restore 7
 3330              	 .cfi_def_cfa_offset 0
 3331 0024 7047     	 bx lr
 3332              	.L244:
 3333 0026 00BF     	 .align 2
 3334              	.L243:
 3335 0028 00040E40 	 .word 1074660352
 3336              	 .cfi_endproc
 3337              	.LFE117:
 3339              	 .section .text.pmc_clr_fast_startup_input,"ax",%progbits
 3340              	 .align 1
 3341              	 .global pmc_clr_fast_startup_input
 3342              	 .syntax unified
 3343              	 .thumb
 3344              	 .thumb_func
 3345              	 .fpu softvfp
 3347              	pmc_clr_fast_startup_input:
 3348              	.LFB118:
1199:.././hal/sam3u1c/pmc.c **** 
1200:.././hal/sam3u1c/pmc.c **** /**
1201:.././hal/sam3u1c/pmc.c ****  * \brief Clear the wake-up inputs for fast startup mode registers
1202:.././hal/sam3u1c/pmc.c ****  *        (remove event generation).
1203:.././hal/sam3u1c/pmc.c ****  *
1204:.././hal/sam3u1c/pmc.c ****  * \param ul_inputs Wake up inputs to disable.
1205:.././hal/sam3u1c/pmc.c ****  */
1206:.././hal/sam3u1c/pmc.c **** void pmc_clr_fast_startup_input(uint32_t ul_inputs)
1207:.././hal/sam3u1c/pmc.c **** {
 3349              	 .loc 1 1207 0
 3350              	 .cfi_startproc
 3351              	 
 3352              	 
 3353              	 
 3354 0000 80B4     	 push {r7}
 3355              	.LCFI259:
 3356              	 .cfi_def_cfa_offset 4
 3357              	 .cfi_offset 7,-4
 3358 0002 83B0     	 sub sp,sp,#12
 3359              	.LCFI260:
 3360              	 .cfi_def_cfa_offset 16
 3361 0004 00AF     	 add r7,sp,#0
 3362              	.LCFI261:
 3363              	 .cfi_def_cfa_register 7
 3364 0006 7860     	 str r0,[r7,#4]
1208:.././hal/sam3u1c/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
 3365              	 .loc 1 1208 0
 3366 0008 7B68     	 ldr r3,[r7,#4]
 3367 000a C3F31203 	 ubfx r3,r3,#0,#19
 3368 000e 7B60     	 str r3,[r7,#4]
1209:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR &= ~ul_inputs;
 3369              	 .loc 1 1209 0
 3370 0010 054B     	 ldr r3,.L246
 3371 0012 1A6F     	 ldr r2,[r3,#112]
 3372 0014 7B68     	 ldr r3,[r7,#4]
 3373 0016 DB43     	 mvns r3,r3
 3374 0018 0349     	 ldr r1,.L246
 3375 001a 1340     	 ands r3,r3,r2
 3376 001c 0B67     	 str r3,[r1,#112]
1210:.././hal/sam3u1c/pmc.c **** }
 3377              	 .loc 1 1210 0
 3378 001e 00BF     	 nop
 3379 0020 0C37     	 adds r7,r7,#12
 3380              	.LCFI262:
 3381              	 .cfi_def_cfa_offset 4
 3382 0022 BD46     	 mov sp,r7
 3383              	.LCFI263:
 3384              	 .cfi_def_cfa_register 13
 3385              	 
 3386 0024 80BC     	 pop {r7}
 3387              	.LCFI264:
 3388              	 .cfi_restore 7
 3389              	 .cfi_def_cfa_offset 0
 3390 0026 7047     	 bx lr
 3391              	.L247:
 3392              	 .align 2
 3393              	.L246:
 3394 0028 00040E40 	 .word 1074660352
 3395              	 .cfi_endproc
 3396              	.LFE118:
 3398              	 .section .text.pmc_enable_sleepmode,"ax",%progbits
 3399              	 .align 1
 3400              	 .global pmc_enable_sleepmode
 3401              	 .syntax unified
 3402              	 .thumb
 3403              	 .thumb_func
 3404              	 .fpu softvfp
 3406              	pmc_enable_sleepmode:
 3407              	.LFB119:
1211:.././hal/sam3u1c/pmc.c **** 
1212:.././hal/sam3u1c/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP)
1213:.././hal/sam3u1c/pmc.c **** /**
1214:.././hal/sam3u1c/pmc.c ****  * \brief Set the wake-up inputs of coprocessor for fast startup mode registers
1215:.././hal/sam3u1c/pmc.c ****  *        (event generation).
1216:.././hal/sam3u1c/pmc.c ****  *
1217:.././hal/sam3u1c/pmc.c ****  * \param ul_inputs Wake up inputs to enable.
1218:.././hal/sam3u1c/pmc.c ****  */
1219:.././hal/sam3u1c/pmc.c **** void pmc_cp_set_fast_startup_input(uint32_t ul_inputs)
1220:.././hal/sam3u1c/pmc.c **** {
1221:.././hal/sam3u1c/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
1222:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_CPFSMR |= ul_inputs;
1223:.././hal/sam3u1c/pmc.c **** }
1224:.././hal/sam3u1c/pmc.c **** 
1225:.././hal/sam3u1c/pmc.c **** /**
1226:.././hal/sam3u1c/pmc.c ****  * \brief Clear the wake-up inputs of coprocessor for fast startup mode registers
1227:.././hal/sam3u1c/pmc.c ****  *        (remove event generation).
1228:.././hal/sam3u1c/pmc.c ****  *
1229:.././hal/sam3u1c/pmc.c ****  * \param ul_inputs Wake up inputs to disable.
1230:.././hal/sam3u1c/pmc.c ****  */
1231:.././hal/sam3u1c/pmc.c **** void pmc_cp_clr_fast_startup_input(uint32_t ul_inputs)
1232:.././hal/sam3u1c/pmc.c **** {
1233:.././hal/sam3u1c/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
1234:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_CPFSMR &= ~ul_inputs;
1235:.././hal/sam3u1c/pmc.c **** }
1236:.././hal/sam3u1c/pmc.c **** #endif
1237:.././hal/sam3u1c/pmc.c **** 
1238:.././hal/sam3u1c/pmc.c **** #if (!(SAMG51 || SAMG53 || SAMG54))
1239:.././hal/sam3u1c/pmc.c **** /**
1240:.././hal/sam3u1c/pmc.c ****  * \brief Enable Sleep Mode.
1241:.././hal/sam3u1c/pmc.c ****  * Enter condition: (WFE or WFI) + (SLEEPDEEP bit = 0) + (LPM bit = 0)
1242:.././hal/sam3u1c/pmc.c ****  *
1243:.././hal/sam3u1c/pmc.c ****  * \param uc_type 0 for wait for interrupt, 1 for wait for event.
1244:.././hal/sam3u1c/pmc.c ****  * \note For SAM4S, SAM4C, SAM4CM, SAM4CP and SAM4E series,
1245:.././hal/sam3u1c/pmc.c ****  * since only WFI is effective, uc_type = 1 will be treated as uc_type = 0.
1246:.././hal/sam3u1c/pmc.c ****  */
1247:.././hal/sam3u1c/pmc.c **** void pmc_enable_sleepmode(uint8_t uc_type)
1248:.././hal/sam3u1c/pmc.c **** {
 3408              	 .loc 1 1248 0
 3409              	 .cfi_startproc
 3410              	 
 3411              	 
 3412              	 
 3413 0000 80B4     	 push {r7}
 3414              	.LCFI265:
 3415              	 .cfi_def_cfa_offset 4
 3416              	 .cfi_offset 7,-4
 3417 0002 83B0     	 sub sp,sp,#12
 3418              	.LCFI266:
 3419              	 .cfi_def_cfa_offset 16
 3420 0004 00AF     	 add r7,sp,#0
 3421              	.LCFI267:
 3422              	 .cfi_def_cfa_register 7
 3423 0006 0346     	 mov r3,r0
 3424 0008 FB71     	 strb r3,[r7,#7]
1249:.././hal/sam3u1c/pmc.c **** #if !(SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP)
1250:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR &= (uint32_t) ~ PMC_FSMR_LPM; // Enter Sleep mode
 3425              	 .loc 1 1250 0
 3426 000a 0B4B     	 ldr r3,.L252
 3427 000c 1B6F     	 ldr r3,[r3,#112]
 3428 000e 0A4A     	 ldr r2,.L252
 3429 0010 23F48013 	 bic r3,r3,#1048576
 3430 0014 1367     	 str r3,[r2,#112]
1251:.././hal/sam3u1c/pmc.c **** #endif
1252:.././hal/sam3u1c/pmc.c **** 	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; // Deep sleep
 3431              	 .loc 1 1252 0
 3432 0016 094B     	 ldr r3,.L252+4
 3433 0018 1B69     	 ldr r3,[r3,#16]
 3434 001a 084A     	 ldr r2,.L252+4
 3435 001c 23F00403 	 bic r3,r3,#4
 3436 0020 1361     	 str r3,[r2,#16]
1253:.././hal/sam3u1c/pmc.c **** 
1254:.././hal/sam3u1c/pmc.c **** #if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP)
1255:.././hal/sam3u1c/pmc.c **** 	UNUSED(uc_type);
1256:.././hal/sam3u1c/pmc.c **** 	__WFI();
1257:.././hal/sam3u1c/pmc.c **** #else
1258:.././hal/sam3u1c/pmc.c **** 	if (uc_type == 0) {
 3437              	 .loc 1 1258 0
 3438 0022 FB79     	 ldrb r3,[r7,#7]
 3439 0024 002B     	 cmp r3,#0
 3440 0026 01D1     	 bne .L249
 3441              	.LBB12:
 3442              	.LBB13:
 3443              	 .file 2 ".././hal/sam3u1c/inc/core_cmInstr.h"
   1:.././hal/sam3u1c/inc/core_cmInstr.h **** /**************************************************************************//**
   2:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @version  V3.00
   5:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @date     07. February 2012
   6:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
   7:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @note
   8:.././hal/sam3u1c/inc/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  10:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @par
  11:.././hal/sam3u1c/inc/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:.././hal/sam3u1c/inc/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:.././hal/sam3u1c/inc/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  15:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @par
  16:.././hal/sam3u1c/inc/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:.././hal/sam3u1c/inc/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:.././hal/sam3u1c/inc/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:.././hal/sam3u1c/inc/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:.././hal/sam3u1c/inc/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  22:.././hal/sam3u1c/inc/core_cmInstr.h ****  ******************************************************************************/
  23:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  24:.././hal/sam3u1c/inc/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  27:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  28:.././hal/sam3u1c/inc/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:.././hal/sam3u1c/inc/core_cmInstr.h ****   Access to dedicated instructions
  31:.././hal/sam3u1c/inc/core_cmInstr.h ****   @{
  32:.././hal/sam3u1c/inc/core_cmInstr.h **** */
  33:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  34:.././hal/sam3u1c/inc/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:.././hal/sam3u1c/inc/core_cmInstr.h **** /* ARM armcc specific functions */
  36:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  37:.././hal/sam3u1c/inc/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:.././hal/sam3u1c/inc/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:.././hal/sam3u1c/inc/core_cmInstr.h **** #endif
  40:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  41:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  42:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  No Operation
  43:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  44:.././hal/sam3u1c/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  46:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __NOP                             __nop
  47:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  48:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  49:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  51:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:.././hal/sam3u1c/inc/core_cmInstr.h ****     until one of a number of events occurs.
  53:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  54:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __WFI                             __wfi
  55:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  56:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  57:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Event
  58:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  59:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:.././hal/sam3u1c/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  62:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __WFE                             __wfe
  63:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  64:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  65:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Send Event
  66:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  67:.././hal/sam3u1c/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  69:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __SEV                             __sev
  70:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  71:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  72:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  74:.././hal/sam3u1c/inc/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:.././hal/sam3u1c/inc/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:.././hal/sam3u1c/inc/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  78:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  80:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  81:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  83:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:.././hal/sam3u1c/inc/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  86:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  88:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  89:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  91:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:.././hal/sam3u1c/inc/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  94:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  96:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  97:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  99:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 101:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 103:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 104:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __REV                             __rev
 105:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 106:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 107:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 109:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 111:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 113:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 114:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 116:.././hal/sam3u1c/inc/core_cmInstr.h ****   rev16 r0, r0
 117:.././hal/sam3u1c/inc/core_cmInstr.h ****   bx lr
 118:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 119:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 120:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 121:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 123:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 125:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 127:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 128:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 130:.././hal/sam3u1c/inc/core_cmInstr.h ****   revsh r0, r0
 131:.././hal/sam3u1c/inc/core_cmInstr.h ****   bx lr
 132:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 133:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 134:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 135:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 137:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 139:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Rotated value
 142:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 143:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __ROR                             __ror
 144:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 145:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 146:.././hal/sam3u1c/inc/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 148:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 150:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 152:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 154:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 155:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __RBIT                            __rbit
 156:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 157:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 158:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 160:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 162:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 165:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 167:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 168:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 170:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 172:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 175:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 177:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 178:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 180:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 182:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 185:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 187:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 188:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 190:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 192:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 193:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 195:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 196:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 197:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 199:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 200:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 202:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 204:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 205:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 207:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 208:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 209:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 211:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 212:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 214:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 216:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 217:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 219:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 220:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 221:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 223:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 224:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 226:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 228:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 229:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CLREX                           __clrex
 230:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 231:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 232:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Signed Saturate
 233:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 234:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function saturates a signed value.
 235:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 236:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             Saturated value
 239:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 240:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __SSAT                            __ssat
 241:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 242:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 243:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 245:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function saturates an unsigned value.
 246:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 247:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             Saturated value
 250:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 251:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __USAT                            __usat
 252:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 253:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 254:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Count leading zeros
 255:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 256:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 258:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             number of leading zeros in value
 260:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 261:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CLZ                             __clz
 262:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 263:.././hal/sam3u1c/inc/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 265:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 266:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 267:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:.././hal/sam3u1c/inc/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 270:.././hal/sam3u1c/inc/core_cmInstr.h **** #include <cmsis_iar.h>
 271:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 272:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 273:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:.././hal/sam3u1c/inc/core_cmInstr.h **** /* TI CCS specific functions */
 275:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 276:.././hal/sam3u1c/inc/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 278:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 279:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:.././hal/sam3u1c/inc/core_cmInstr.h **** /* GNU gcc specific functions */
 281:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 282:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  No Operation
 283:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 284:.././hal/sam3u1c/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 286:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 287:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 288:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("nop");
 289:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 290:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 291:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 292:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
 293:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 294:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 295:.././hal/sam3u1c/inc/core_cmInstr.h ****     until one of a number of events occurs.
 296:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 297:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 298:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 299:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("wfi");
 3444              	 .loc 2 299 0
 3445              	 .syntax unified
 3446              	
 3447 0028 30BF     	 wfi
 3448              	
 3449              	 .thumb
 3450              	 .syntax unified
 3451              	.LBE13:
 3452              	.LBE12:
1259:.././hal/sam3u1c/pmc.c **** 		__WFI();
1260:.././hal/sam3u1c/pmc.c **** 	} else {
1261:.././hal/sam3u1c/pmc.c **** 		__WFE();
1262:.././hal/sam3u1c/pmc.c **** 	}
1263:.././hal/sam3u1c/pmc.c **** #endif
1264:.././hal/sam3u1c/pmc.c **** }
 3453              	 .loc 1 1264 0
 3454 002a 00E0     	 b .L251
 3455              	.L249:
 3456              	.LBB14:
 3457              	.LBB15:
 300:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 301:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 302:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 303:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Event
 304:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 305:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 306:.././hal/sam3u1c/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 307:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 308:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 309:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 310:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("wfe");
 3458              	 .loc 2 310 0
 3459              	 .syntax unified
 3460              	
 3461 002c 20BF     	 wfe
 3462              	
 3463              	 .thumb
 3464              	 .syntax unified
 3465              	.L251:
 3466              	.LBE15:
 3467              	.LBE14:
 3468              	 .loc 1 1264 0
 3469 002e 00BF     	 nop
 3470 0030 0C37     	 adds r7,r7,#12
 3471              	.LCFI268:
 3472              	 .cfi_def_cfa_offset 4
 3473 0032 BD46     	 mov sp,r7
 3474              	.LCFI269:
 3475              	 .cfi_def_cfa_register 13
 3476              	 
 3477 0034 80BC     	 pop {r7}
 3478              	.LCFI270:
 3479              	 .cfi_restore 7
 3480              	 .cfi_def_cfa_offset 0
 3481 0036 7047     	 bx lr
 3482              	.L253:
 3483              	 .align 2
 3484              	.L252:
 3485 0038 00040E40 	 .word 1074660352
 3486 003c 00ED00E0 	 .word -536810240
 3487              	 .cfi_endproc
 3488              	.LFE119:
 3490              	 .section .text.pmc_enable_waitmode,"ax",%progbits
 3491              	 .align 1
 3492              	 .global pmc_enable_waitmode
 3493              	 .syntax unified
 3494              	 .thumb
 3495              	 .thumb_func
 3496              	 .fpu softvfp
 3498              	pmc_enable_waitmode:
 3499              	.LFB120:
1265:.././hal/sam3u1c/pmc.c **** #endif
1266:.././hal/sam3u1c/pmc.c **** 
1267:.././hal/sam3u1c/pmc.c **** #if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAMG || SAM4CP)
1268:.././hal/sam3u1c/pmc.c **** static uint32_t ul_flash_in_wait_mode = PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN;
1269:.././hal/sam3u1c/pmc.c **** /**
1270:.././hal/sam3u1c/pmc.c ****  * \brief Set the embedded flash state in wait mode
1271:.././hal/sam3u1c/pmc.c ****  *
1272:.././hal/sam3u1c/pmc.c ****  * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
1273:.././hal/sam3u1c/pmc.c ****  * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
1274:.././hal/sam3u1c/pmc.c ****  */
1275:.././hal/sam3u1c/pmc.c **** void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
1276:.././hal/sam3u1c/pmc.c **** {
1277:.././hal/sam3u1c/pmc.c **** 	ul_flash_in_wait_mode = ul_flash_state;
1278:.././hal/sam3u1c/pmc.c **** }
1279:.././hal/sam3u1c/pmc.c **** 
1280:.././hal/sam3u1c/pmc.c **** /**
1281:.././hal/sam3u1c/pmc.c ****  * \brief Enable Wait Mode. Enter condition: (WAITMODE bit = 1) +
1282:.././hal/sam3u1c/pmc.c ****  * (SLEEPDEEP bit = 0) + FLPM
1283:.././hal/sam3u1c/pmc.c ****  *
1284:.././hal/sam3u1c/pmc.c ****  * \note In this function the FWS is reset to 0 to get best flash access
1285:.././hal/sam3u1c/pmc.c ****  * performance while running on fast wake up RC clock. Make sure the
1286:.././hal/sam3u1c/pmc.c ****  * non-zero FWS value is saved before invoking this function, and restored
1287:.././hal/sam3u1c/pmc.c ****  * after system woken up, to avoid flash access error.
1288:.././hal/sam3u1c/pmc.c ****  * See \ref pmc_sleep() for entering different sleep modes.
1289:.././hal/sam3u1c/pmc.c ****  */
1290:.././hal/sam3u1c/pmc.c **** void pmc_enable_waitmode(void)
1291:.././hal/sam3u1c/pmc.c **** {
1292:.././hal/sam3u1c/pmc.c **** 	uint32_t i;
1293:.././hal/sam3u1c/pmc.c **** 
1294:.././hal/sam3u1c/pmc.c **** 	/* Flash in wait mode */
1295:.././hal/sam3u1c/pmc.c **** 	i = PMC->PMC_FSMR;
1296:.././hal/sam3u1c/pmc.c **** 	i &= ~PMC_FSMR_FLPM_Msk;
1297:.././hal/sam3u1c/pmc.c **** 	i |= ul_flash_in_wait_mode;
1298:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR = i;
1299:.././hal/sam3u1c/pmc.c **** 
1300:.././hal/sam3u1c/pmc.c **** 	/* Clear SLEEPDEEP bit */
1301:.././hal/sam3u1c/pmc.c **** 	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk;
1302:.././hal/sam3u1c/pmc.c **** 
1303:.././hal/sam3u1c/pmc.c **** 	/* Set the WAITMODE bit = 1 */
1304:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
1305:.././hal/sam3u1c/pmc.c **** 
1306:.././hal/sam3u1c/pmc.c **** 	/* Waiting for Master Clock Ready MCKRDY = 1 */
1307:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
1308:.././hal/sam3u1c/pmc.c **** 
1309:.././hal/sam3u1c/pmc.c **** 	/* Waiting for MOSCRCEN bit cleared is strongly recommended
1310:.././hal/sam3u1c/pmc.c **** 	 * to ensure that the core will not execute undesired instructions
1311:.././hal/sam3u1c/pmc.c **** 	 */
1312:.././hal/sam3u1c/pmc.c **** 	for (i = 0; i < 500; i++) {
1313:.././hal/sam3u1c/pmc.c **** 		__NOP();
1314:.././hal/sam3u1c/pmc.c **** 	}
1315:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
1316:.././hal/sam3u1c/pmc.c **** 
1317:.././hal/sam3u1c/pmc.c **** #if (!SAMG)
1318:.././hal/sam3u1c/pmc.c **** 	/* Restore Flash in idle mode */
1319:.././hal/sam3u1c/pmc.c **** 	i = PMC->PMC_FSMR;
1320:.././hal/sam3u1c/pmc.c **** 	i &= ~PMC_FSMR_FLPM_Msk;
1321:.././hal/sam3u1c/pmc.c **** 	i |= PMC_WAIT_MODE_FLASH_IDLE;
1322:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR = i;
1323:.././hal/sam3u1c/pmc.c **** #endif
1324:.././hal/sam3u1c/pmc.c **** }
1325:.././hal/sam3u1c/pmc.c **** #else
1326:.././hal/sam3u1c/pmc.c **** /**
1327:.././hal/sam3u1c/pmc.c ****  * \brief Enable Wait Mode. Enter condition: WFE + (SLEEPDEEP bit = 0) +
1328:.././hal/sam3u1c/pmc.c ****  * (LPM bit = 1)
1329:.././hal/sam3u1c/pmc.c ****  */
1330:.././hal/sam3u1c/pmc.c **** void pmc_enable_waitmode(void)
1331:.././hal/sam3u1c/pmc.c **** {
 3500              	 .loc 1 1331 0
 3501              	 .cfi_startproc
 3502              	 
 3503              	 
 3504              	 
 3505 0000 80B4     	 push {r7}
 3506              	.LCFI271:
 3507              	 .cfi_def_cfa_offset 4
 3508              	 .cfi_offset 7,-4
 3509 0002 83B0     	 sub sp,sp,#12
 3510              	.LCFI272:
 3511              	 .cfi_def_cfa_offset 16
 3512 0004 00AF     	 add r7,sp,#0
 3513              	.LCFI273:
 3514              	 .cfi_def_cfa_register 7
1332:.././hal/sam3u1c/pmc.c **** 	uint32_t i;
1333:.././hal/sam3u1c/pmc.c **** 
1334:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
 3515              	 .loc 1 1334 0
 3516 0006 124B     	 ldr r3,.L258
 3517 0008 1B6F     	 ldr r3,[r3,#112]
 3518 000a 114A     	 ldr r2,.L258
 3519 000c 43F48013 	 orr r3,r3,#1048576
 3520 0010 1367     	 str r3,[r2,#112]
1335:.././hal/sam3u1c/pmc.c **** 	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
 3521              	 .loc 1 1335 0
 3522 0012 104B     	 ldr r3,.L258+4
 3523 0014 1B69     	 ldr r3,[r3,#16]
 3524 0016 0F4A     	 ldr r2,.L258+4
 3525 0018 23F00403 	 bic r3,r3,#4
 3526 001c 1361     	 str r3,[r2,#16]
 3527              	.LBB16:
 3528              	.LBB17:
 3529              	 .loc 2 310 0
 3530              	 .syntax unified
 3531              	
 3532 001e 20BF     	 wfe
 3533              	
 3534              	 .thumb
 3535              	 .syntax unified
 3536              	.LBE17:
 3537              	.LBE16:
1336:.././hal/sam3u1c/pmc.c **** 
1337:.././hal/sam3u1c/pmc.c **** 	__WFE();
1338:.././hal/sam3u1c/pmc.c **** 
1339:.././hal/sam3u1c/pmc.c **** 	/* Waiting for MOSCRCEN bit cleared is strongly recommended
1340:.././hal/sam3u1c/pmc.c **** 	 * to ensure that the core will not execute undesired instructions
1341:.././hal/sam3u1c/pmc.c **** 	 */
1342:.././hal/sam3u1c/pmc.c **** 	for (i = 0; i < 500; i++) {
 3538              	 .loc 1 1342 0
 3539 0020 0023     	 movs r3,#0
 3540 0022 7B60     	 str r3,[r7,#4]
 3541 0024 03E0     	 b .L255
 3542              	.L256:
 3543              	.LBB18:
 3544              	.LBB19:
 288:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 3545              	 .loc 2 288 0 discriminator 3
 3546              	 .syntax unified
 3547              	
 3548 0026 00BF     	 nop
 3549              	
 3550              	 .thumb
 3551              	 .syntax unified
 3552              	.LBE19:
 3553              	.LBE18:
 3554              	 .loc 1 1342 0 discriminator 3
 3555 0028 7B68     	 ldr r3,[r7,#4]
 3556 002a 0133     	 adds r3,r3,#1
 3557 002c 7B60     	 str r3,[r7,#4]
 3558              	.L255:
 3559              	 .loc 1 1342 0 is_stmt 0 discriminator 1
 3560 002e 7B68     	 ldr r3,[r7,#4]
 3561 0030 B3F5FA7F 	 cmp r3,#500
 3562 0034 F7D3     	 bcc .L256
1343:.././hal/sam3u1c/pmc.c **** 		__NOP();
1344:.././hal/sam3u1c/pmc.c **** 	}
1345:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
 3563              	 .loc 1 1345 0 is_stmt 1
 3564 0036 00BF     	 nop
 3565              	.L257:
 3566              	 .loc 1 1345 0 is_stmt 0 discriminator 1
 3567 0038 054B     	 ldr r3,.L258
 3568 003a 1B6A     	 ldr r3,[r3,#32]
 3569 003c 03F00803 	 and r3,r3,#8
 3570 0040 002B     	 cmp r3,#0
 3571 0042 F9D0     	 beq .L257
1346:.././hal/sam3u1c/pmc.c **** 
1347:.././hal/sam3u1c/pmc.c **** }
 3572              	 .loc 1 1347 0 is_stmt 1
 3573 0044 00BF     	 nop
 3574 0046 0C37     	 adds r7,r7,#12
 3575              	.LCFI274:
 3576              	 .cfi_def_cfa_offset 4
 3577 0048 BD46     	 mov sp,r7
 3578              	.LCFI275:
 3579              	 .cfi_def_cfa_register 13
 3580              	 
 3581 004a 80BC     	 pop {r7}
 3582              	.LCFI276:
 3583              	 .cfi_restore 7
 3584              	 .cfi_def_cfa_offset 0
 3585 004c 7047     	 bx lr
 3586              	.L259:
 3587 004e 00BF     	 .align 2
 3588              	.L258:
 3589 0050 00040E40 	 .word 1074660352
 3590 0054 00ED00E0 	 .word -536810240
 3591              	 .cfi_endproc
 3592              	.LFE120:
 3594              	 .section .text.pmc_enable_backupmode,"ax",%progbits
 3595              	 .align 1
 3596              	 .global pmc_enable_backupmode
 3597              	 .syntax unified
 3598              	 .thumb
 3599              	 .thumb_func
 3600              	 .fpu softvfp
 3602              	pmc_enable_backupmode:
 3603              	.LFB121:
1348:.././hal/sam3u1c/pmc.c **** #endif
1349:.././hal/sam3u1c/pmc.c **** 
1350:.././hal/sam3u1c/pmc.c **** #if (!(SAMG51 || SAMG53 || SAMG54))
1351:.././hal/sam3u1c/pmc.c **** /**
1352:.././hal/sam3u1c/pmc.c ****  * \brief Enable Backup Mode. Enter condition: WFE/(VROFF bit = 1) +
1353:.././hal/sam3u1c/pmc.c ****  * (SLEEPDEEP bit = 1)
1354:.././hal/sam3u1c/pmc.c ****  */
1355:.././hal/sam3u1c/pmc.c **** void pmc_enable_backupmode(void)
1356:.././hal/sam3u1c/pmc.c **** {
 3604              	 .loc 1 1356 0
 3605              	 .cfi_startproc
 3606              	 
 3607              	 
 3608              	 
 3609 0000 80B4     	 push {r7}
 3610              	.LCFI277:
 3611              	 .cfi_def_cfa_offset 4
 3612              	 .cfi_offset 7,-4
 3613 0002 00AF     	 add r7,sp,#0
 3614              	.LCFI278:
 3615              	 .cfi_def_cfa_register 7
1357:.././hal/sam3u1c/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP)
1358:.././hal/sam3u1c/pmc.c **** 	uint32_t tmp = SUPC->SUPC_MR & ~(SUPC_MR_BUPPOREN | SUPC_MR_KEY_Msk);
1359:.././hal/sam3u1c/pmc.c **** 	SUPC->SUPC_MR = tmp | SUPC_MR_KEY_PASSWD;
1360:.././hal/sam3u1c/pmc.c **** 	while (SUPC->SUPC_SR & SUPC_SR_BUPPORS);
1361:.././hal/sam3u1c/pmc.c **** #endif
1362:.././hal/sam3u1c/pmc.c **** 	SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 3616              	 .loc 1 1362 0
 3617 0004 054B     	 ldr r3,.L261
 3618 0006 1B69     	 ldr r3,[r3,#16]
 3619 0008 044A     	 ldr r2,.L261
 3620 000a 43F00403 	 orr r3,r3,#4
 3621 000e 1361     	 str r3,[r2,#16]
 3622              	.LBB20:
 3623              	.LBB21:
 3624              	 .loc 2 310 0
 3625              	 .syntax unified
 3626              	
 3627 0010 20BF     	 wfe
 3628              	
 3629              	 .thumb
 3630              	 .syntax unified
 3631              	.LBE21:
 3632              	.LBE20:
1363:.././hal/sam3u1c/pmc.c **** #if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
1364:.././hal/sam3u1c/pmc.c **** 	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
1365:.././hal/sam3u1c/pmc.c **** 	__WFE();
1366:.././hal/sam3u1c/pmc.c **** 	__WFI();
1367:.././hal/sam3u1c/pmc.c **** #else
1368:.././hal/sam3u1c/pmc.c **** 	__WFE();
1369:.././hal/sam3u1c/pmc.c **** #endif
1370:.././hal/sam3u1c/pmc.c **** }
 3633              	 .loc 1 1370 0
 3634 0012 00BF     	 nop
 3635 0014 BD46     	 mov sp,r7
 3636              	.LCFI279:
 3637              	 .cfi_def_cfa_register 13
 3638              	 
 3639 0016 80BC     	 pop {r7}
 3640              	.LCFI280:
 3641              	 .cfi_restore 7
 3642              	 .cfi_def_cfa_offset 0
 3643 0018 7047     	 bx lr
 3644              	.L262:
 3645 001a 00BF     	 .align 2
 3646              	.L261:
 3647 001c 00ED00E0 	 .word -536810240
 3648              	 .cfi_endproc
 3649              	.LFE121:
 3651              	 .section .text.pmc_enable_clock_failure_detector,"ax",%progbits
 3652              	 .align 1
 3653              	 .global pmc_enable_clock_failure_detector
 3654              	 .syntax unified
 3655              	 .thumb
 3656              	 .thumb_func
 3657              	 .fpu softvfp
 3659              	pmc_enable_clock_failure_detector:
 3660              	.LFB122:
1371:.././hal/sam3u1c/pmc.c **** #endif
1372:.././hal/sam3u1c/pmc.c **** 
1373:.././hal/sam3u1c/pmc.c **** /**
1374:.././hal/sam3u1c/pmc.c ****  * \brief Enable Clock Failure Detector.
1375:.././hal/sam3u1c/pmc.c ****  */
1376:.././hal/sam3u1c/pmc.c **** void pmc_enable_clock_failure_detector(void)
1377:.././hal/sam3u1c/pmc.c **** {
 3661              	 .loc 1 1377 0
 3662              	 .cfi_startproc
 3663              	 
 3664              	 
 3665              	 
 3666 0000 80B4     	 push {r7}
 3667              	.LCFI281:
 3668              	 .cfi_def_cfa_offset 4
 3669              	 .cfi_offset 7,-4
 3670 0002 83B0     	 sub sp,sp,#12
 3671              	.LCFI282:
 3672              	 .cfi_def_cfa_offset 16
 3673 0004 00AF     	 add r7,sp,#0
 3674              	.LCFI283:
 3675              	 .cfi_def_cfa_register 7
1378:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR;
 3676              	 .loc 1 1378 0
 3677 0006 074B     	 ldr r3,.L264
 3678 0008 1B6A     	 ldr r3,[r3,#32]
 3679 000a 7B60     	 str r3,[r7,#4]
1379:.././hal/sam3u1c/pmc.c **** 
1380:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | CKGR_MOR_CFDEN | ul_reg;
 3680              	 .loc 1 1380 0
 3681 000c 054A     	 ldr r2,.L264
 3682 000e 7B68     	 ldr r3,[r7,#4]
 3683 0010 43F00D73 	 orr r3,r3,#36962304
 3684 0014 43F44033 	 orr r3,r3,#196608
 3685 0018 1362     	 str r3,[r2,#32]
1381:.././hal/sam3u1c/pmc.c **** }
 3686              	 .loc 1 1381 0
 3687 001a 00BF     	 nop
 3688 001c 0C37     	 adds r7,r7,#12
 3689              	.LCFI284:
 3690              	 .cfi_def_cfa_offset 4
 3691 001e BD46     	 mov sp,r7
 3692              	.LCFI285:
 3693              	 .cfi_def_cfa_register 13
 3694              	 
 3695 0020 80BC     	 pop {r7}
 3696              	.LCFI286:
 3697              	 .cfi_restore 7
 3698              	 .cfi_def_cfa_offset 0
 3699 0022 7047     	 bx lr
 3700              	.L265:
 3701              	 .align 2
 3702              	.L264:
 3703 0024 00040E40 	 .word 1074660352
 3704              	 .cfi_endproc
 3705              	.LFE122:
 3707              	 .section .text.pmc_disable_clock_failure_detector,"ax",%progbits
 3708              	 .align 1
 3709              	 .global pmc_disable_clock_failure_detector
 3710              	 .syntax unified
 3711              	 .thumb
 3712              	 .thumb_func
 3713              	 .fpu softvfp
 3715              	pmc_disable_clock_failure_detector:
 3716              	.LFB123:
1382:.././hal/sam3u1c/pmc.c **** 
1383:.././hal/sam3u1c/pmc.c **** /**
1384:.././hal/sam3u1c/pmc.c ****  * \brief Disable Clock Failure Detector.
1385:.././hal/sam3u1c/pmc.c ****  */
1386:.././hal/sam3u1c/pmc.c **** void pmc_disable_clock_failure_detector(void)
1387:.././hal/sam3u1c/pmc.c **** {
 3717              	 .loc 1 1387 0
 3718              	 .cfi_startproc
 3719              	 
 3720              	 
 3721              	 
 3722 0000 80B4     	 push {r7}
 3723              	.LCFI287:
 3724              	 .cfi_def_cfa_offset 4
 3725              	 .cfi_offset 7,-4
 3726 0002 83B0     	 sub sp,sp,#12
 3727              	.LCFI288:
 3728              	 .cfi_def_cfa_offset 16
 3729 0004 00AF     	 add r7,sp,#0
 3730              	.LCFI289:
 3731              	 .cfi_def_cfa_register 7
1388:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR & (~CKGR_MOR_CFDEN);
 3732              	 .loc 1 1388 0
 3733 0006 074B     	 ldr r3,.L267
 3734 0008 1B6A     	 ldr r3,[r3,#32]
 3735 000a 23F00073 	 bic r3,r3,#33554432
 3736 000e 7B60     	 str r3,[r7,#4]
1389:.././hal/sam3u1c/pmc.c **** 
1390:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | ul_reg;
 3737              	 .loc 1 1390 0
 3738 0010 044A     	 ldr r2,.L267
 3739 0012 7B68     	 ldr r3,[r7,#4]
 3740 0014 43F45C13 	 orr r3,r3,#3604480
 3741 0018 1362     	 str r3,[r2,#32]
1391:.././hal/sam3u1c/pmc.c **** }
 3742              	 .loc 1 1391 0
 3743 001a 00BF     	 nop
 3744 001c 0C37     	 adds r7,r7,#12
 3745              	.LCFI290:
 3746              	 .cfi_def_cfa_offset 4
 3747 001e BD46     	 mov sp,r7
 3748              	.LCFI291:
 3749              	 .cfi_def_cfa_register 13
 3750              	 
 3751 0020 80BC     	 pop {r7}
 3752              	.LCFI292:
 3753              	 .cfi_restore 7
 3754              	 .cfi_def_cfa_offset 0
 3755 0022 7047     	 bx lr
 3756              	.L268:
 3757              	 .align 2
 3758              	.L267:
 3759 0024 00040E40 	 .word 1074660352
 3760              	 .cfi_endproc
 3761              	.LFE123:
 3763              	 .section .text.pmc_set_writeprotect,"ax",%progbits
 3764              	 .align 1
 3765              	 .global pmc_set_writeprotect
 3766              	 .syntax unified
 3767              	 .thumb
 3768              	 .thumb_func
 3769              	 .fpu softvfp
 3771              	pmc_set_writeprotect:
 3772              	.LFB124:
1392:.././hal/sam3u1c/pmc.c **** 
1393:.././hal/sam3u1c/pmc.c **** #if (SAM4N || SAM4C || SAM4CM || SAM4CP)
1394:.././hal/sam3u1c/pmc.c **** /**
1395:.././hal/sam3u1c/pmc.c ****  * \brief Enable Slow Crystal Oscillator Frequency Monitoring.
1396:.././hal/sam3u1c/pmc.c ****  */
1397:.././hal/sam3u1c/pmc.c **** void pmc_enable_sclk_osc_freq_monitor(void)
1398:.././hal/sam3u1c/pmc.c **** {
1399:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR;
1400:.././hal/sam3u1c/pmc.c **** 
1401:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | CKGR_MOR_XT32KFME | ul_reg;
1402:.././hal/sam3u1c/pmc.c **** }
1403:.././hal/sam3u1c/pmc.c **** 
1404:.././hal/sam3u1c/pmc.c **** /**
1405:.././hal/sam3u1c/pmc.c ****  * \brief Disable Slow Crystal Oscillator Frequency Monitoring.
1406:.././hal/sam3u1c/pmc.c ****  */
1407:.././hal/sam3u1c/pmc.c **** void pmc_disable_sclk_osc_freq_monitor(void)
1408:.././hal/sam3u1c/pmc.c **** {
1409:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR & (~CKGR_MOR_XT32KFME);
1410:.././hal/sam3u1c/pmc.c **** 
1411:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | ul_reg;
1412:.././hal/sam3u1c/pmc.c **** }
1413:.././hal/sam3u1c/pmc.c **** #endif
1414:.././hal/sam3u1c/pmc.c **** 
1415:.././hal/sam3u1c/pmc.c **** /**
1416:.././hal/sam3u1c/pmc.c ****  * \brief Enable or disable write protect of PMC registers.
1417:.././hal/sam3u1c/pmc.c ****  *
1418:.././hal/sam3u1c/pmc.c ****  * \param ul_enable 1 to enable, 0 to disable.
1419:.././hal/sam3u1c/pmc.c ****  */
1420:.././hal/sam3u1c/pmc.c **** void pmc_set_writeprotect(uint32_t ul_enable)
1421:.././hal/sam3u1c/pmc.c **** {
 3773              	 .loc 1 1421 0
 3774              	 .cfi_startproc
 3775              	 
 3776              	 
 3777              	 
 3778 0000 80B4     	 push {r7}
 3779              	.LCFI293:
 3780              	 .cfi_def_cfa_offset 4
 3781              	 .cfi_offset 7,-4
 3782 0002 83B0     	 sub sp,sp,#12
 3783              	.LCFI294:
 3784              	 .cfi_def_cfa_offset 16
 3785 0004 00AF     	 add r7,sp,#0
 3786              	.LCFI295:
 3787              	 .cfi_def_cfa_register 7
 3788 0006 7860     	 str r0,[r7,#4]
1422:.././hal/sam3u1c/pmc.c **** 	if (ul_enable) {
 3789              	 .loc 1 1422 0
 3790 0008 7B68     	 ldr r3,[r7,#4]
 3791 000a 002B     	 cmp r3,#0
 3792 000c 04D0     	 beq .L270
1423:.././hal/sam3u1c/pmc.c **** 		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD | PMC_WPMR_WPEN;
 3793              	 .loc 1 1423 0
 3794 000e 074B     	 ldr r3,.L273
 3795 0010 074A     	 ldr r2,.L273+4
 3796 0012 C3F8E420 	 str r2,[r3,#228]
1424:.././hal/sam3u1c/pmc.c **** 	} else {
1425:.././hal/sam3u1c/pmc.c **** 		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD;
1426:.././hal/sam3u1c/pmc.c **** 	}
1427:.././hal/sam3u1c/pmc.c **** }
 3797              	 .loc 1 1427 0
 3798 0016 03E0     	 b .L272
 3799              	.L270:
1425:.././hal/sam3u1c/pmc.c **** 	}
 3800              	 .loc 1 1425 0
 3801 0018 044B     	 ldr r3,.L273
 3802 001a 064A     	 ldr r2,.L273+8
 3803 001c C3F8E420 	 str r2,[r3,#228]
 3804              	.L272:
 3805              	 .loc 1 1427 0
 3806 0020 00BF     	 nop
 3807 0022 0C37     	 adds r7,r7,#12
 3808              	.LCFI296:
 3809              	 .cfi_def_cfa_offset 4
 3810 0024 BD46     	 mov sp,r7
 3811              	.LCFI297:
 3812              	 .cfi_def_cfa_register 13
 3813              	 
 3814 0026 80BC     	 pop {r7}
 3815              	.LCFI298:
 3816              	 .cfi_restore 7
 3817              	 .cfi_def_cfa_offset 0
 3818 0028 7047     	 bx lr
 3819              	.L274:
 3820 002a 00BF     	 .align 2
 3821              	.L273:
 3822 002c 00040E40 	 .word 1074660352
 3823 0030 01434D50 	 .word 1347240705
 3824 0034 00434D50 	 .word 1347240704
 3825              	 .cfi_endproc
 3826              	.LFE124:
 3828              	 .section .text.pmc_get_writeprotect_status,"ax",%progbits
 3829              	 .align 1
 3830              	 .global pmc_get_writeprotect_status
 3831              	 .syntax unified
 3832              	 .thumb
 3833              	 .thumb_func
 3834              	 .fpu softvfp
 3836              	pmc_get_writeprotect_status:
 3837              	.LFB125:
1428:.././hal/sam3u1c/pmc.c **** 
1429:.././hal/sam3u1c/pmc.c **** /**
1430:.././hal/sam3u1c/pmc.c ****  * \brief Return write protect status.
1431:.././hal/sam3u1c/pmc.c ****  *
1432:.././hal/sam3u1c/pmc.c ****  * \retval 0 Protection disabled.
1433:.././hal/sam3u1c/pmc.c ****  * \retval 1 Protection enabled.
1434:.././hal/sam3u1c/pmc.c ****  */
1435:.././hal/sam3u1c/pmc.c **** uint32_t pmc_get_writeprotect_status(void)
1436:.././hal/sam3u1c/pmc.c **** {
 3838              	 .loc 1 1436 0
 3839              	 .cfi_startproc
 3840              	 
 3841              	 
 3842              	 
 3843 0000 80B4     	 push {r7}
 3844              	.LCFI299:
 3845              	 .cfi_def_cfa_offset 4
 3846              	 .cfi_offset 7,-4
 3847 0002 00AF     	 add r7,sp,#0
 3848              	.LCFI300:
 3849              	 .cfi_def_cfa_register 7
1437:.././hal/sam3u1c/pmc.c **** 	return PMC->PMC_WPMR & PMC_WPMR_WPEN;
 3850              	 .loc 1 1437 0
 3851 0004 044B     	 ldr r3,.L277
 3852 0006 D3F8E430 	 ldr r3,[r3,#228]
 3853 000a 03F00103 	 and r3,r3,#1
1438:.././hal/sam3u1c/pmc.c **** }
 3854              	 .loc 1 1438 0
 3855 000e 1846     	 mov r0,r3
 3856 0010 BD46     	 mov sp,r7
 3857              	.LCFI301:
 3858              	 .cfi_def_cfa_register 13
 3859              	 
 3860 0012 80BC     	 pop {r7}
 3861              	.LCFI302:
 3862              	 .cfi_restore 7
 3863              	 .cfi_def_cfa_offset 0
 3864 0014 7047     	 bx lr
 3865              	.L278:
 3866 0016 00BF     	 .align 2
 3867              	.L277:
 3868 0018 00040E40 	 .word 1074660352
 3869              	 .cfi_endproc
 3870              	.LFE125:
 3872              	 .text
 3873              	.Letext0:
 3874              	 .file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 3875              	 .file 4 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 3876              	 .file 5 ".././hal/sam3u1c/inc/sam3u1c.h"
 3877              	 .file 6 ".././hal/sam3u1c/inc/core_cm3.h"
 3878              	 .file 7 ".././hal/sam3u1c/inc/system_sam3u.h"
 3879              	 .file 8 ".././hal/sam3u1c/inc/component/component_pmc.h"
 3880              	 .file 9 ".././hal/sam3u1c/inc/component/component_supc.h"
 3881              	 .file 10 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\sys\\lock.h"
 3882              	 .file 11 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\sys\\_types.h"
 3883              	 .file 12 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\lib\\gcc\\arm-none-eabi\\7.3.1\\include\\stddef.h"
 3884              	 .file 13 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\sys\\reent.h"
 3885              	 .file 14 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\stdlib.h"
 3886              	 .file 15 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pmc.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:27     .text.pmc_mck_set_prescaler:00000000 $t
    {standard input}:34     .text.pmc_mck_set_prescaler:00000000 pmc_mck_set_prescaler
    {standard input}:90     .text.pmc_mck_set_prescaler:00000030 $d
    {standard input}:95     .text.pmc_mck_set_source:00000000 $t
    {standard input}:102    .text.pmc_mck_set_source:00000000 pmc_mck_set_source
    {standard input}:157    .text.pmc_mck_set_source:00000030 $d
    {standard input}:162    .text.pmc_switch_mck_to_sclk:00000000 $t
    {standard input}:169    .text.pmc_switch_mck_to_sclk:00000000 pmc_switch_mck_to_sclk
    {standard input}:269    .text.pmc_switch_mck_to_sclk:00000078 $d
    {standard input}:274    .text.pmc_switch_mck_to_mainck:00000000 $t
    {standard input}:281    .text.pmc_switch_mck_to_mainck:00000000 pmc_switch_mck_to_mainck
    {standard input}:382    .text.pmc_switch_mck_to_mainck:0000007c $d
    {standard input}:387    .text.pmc_switch_mck_to_pllack:00000000 $t
    {standard input}:394    .text.pmc_switch_mck_to_pllack:00000000 pmc_switch_mck_to_pllack
    {standard input}:495    .text.pmc_switch_mck_to_pllack:0000007c $d
    {standard input}:500    .text.pmc_switch_mck_to_upllck:00000000 $t
    {standard input}:507    .text.pmc_switch_mck_to_upllck:00000000 pmc_switch_mck_to_upllck
    {standard input}:607    .text.pmc_switch_mck_to_upllck:00000078 $d
    {standard input}:612    .text.pmc_switch_sclk_to_32kxtal:00000000 $t
    {standard input}:619    .text.pmc_switch_sclk_to_32kxtal:00000000 pmc_switch_sclk_to_32kxtal
    {standard input}:670    .text.pmc_switch_sclk_to_32kxtal:00000030 $d
    {standard input}:676    .text.pmc_osc_is_ready_32kxtal:00000000 $t
    {standard input}:683    .text.pmc_osc_is_ready_32kxtal:00000000 pmc_osc_is_ready_32kxtal
    {standard input}:731    .text.pmc_osc_is_ready_32kxtal:0000002c $d
    {standard input}:737    .text.pmc_switch_mainck_to_fastrc:00000000 $t
    {standard input}:744    .text.pmc_switch_mainck_to_fastrc:00000000 pmc_switch_mainck_to_fastrc
    {standard input}:826    .text.pmc_switch_mainck_to_fastrc:0000006c $d
    {standard input}:831    .text.pmc_osc_enable_fastrc:00000000 $t
    {standard input}:838    .text.pmc_osc_enable_fastrc:00000000 pmc_osc_enable_fastrc
    {standard input}:912    .text.pmc_osc_enable_fastrc:00000058 $d
    {standard input}:917    .text.pmc_osc_disable_fastrc:00000000 $t
    {standard input}:924    .text.pmc_osc_disable_fastrc:00000000 pmc_osc_disable_fastrc
    {standard input}:964    .text.pmc_osc_disable_fastrc:00000020 $d
    {standard input}:969    .text.pmc_osc_is_ready_fastrc:00000000 $t
    {standard input}:976    .text.pmc_osc_is_ready_fastrc:00000000 pmc_osc_is_ready_fastrc
    {standard input}:1008   .text.pmc_osc_is_ready_fastrc:00000014 $d
    {standard input}:1013   .text.pmc_osc_enable_main_xtal:00000000 $t
    {standard input}:1020   .text.pmc_osc_enable_main_xtal:00000000 pmc_osc_enable_main_xtal
    {standard input}:1086   .text.pmc_osc_enable_main_xtal:00000048 $d
    {standard input}:1091   .text.pmc_osc_bypass_main_xtal:00000000 $t
    {standard input}:1098   .text.pmc_osc_bypass_main_xtal:00000000 pmc_osc_bypass_main_xtal
    {standard input}:1149   .text.pmc_osc_bypass_main_xtal:00000030 $d
    {standard input}:1154   .text.pmc_osc_disable_main_xtal:00000000 $t
    {standard input}:1161   .text.pmc_osc_disable_main_xtal:00000000 pmc_osc_disable_main_xtal
    {standard input}:1208   .text.pmc_osc_disable_main_xtal:00000028 $d
    {standard input}:1213   .text.pmc_osc_is_bypassed_main_xtal:00000000 $t
    {standard input}:1220   .text.pmc_osc_is_bypassed_main_xtal:00000000 pmc_osc_is_bypassed_main_xtal
    {standard input}:1252   .text.pmc_osc_is_bypassed_main_xtal:00000014 $d
    {standard input}:1257   .text.pmc_osc_is_ready_main_xtal:00000000 $t
    {standard input}:1264   .text.pmc_osc_is_ready_main_xtal:00000000 pmc_osc_is_ready_main_xtal
    {standard input}:1296   .text.pmc_osc_is_ready_main_xtal:00000014 $d
    {standard input}:1301   .text.pmc_switch_mainck_to_xtal:00000000 $t
    {standard input}:1308   .text.pmc_switch_mainck_to_xtal:00000000 pmc_switch_mainck_to_xtal
    {standard input}:1400   .text.pmc_switch_mainck_to_xtal:0000006c $d
    {standard input}:1407   .text.pmc_osc_disable_xtal:00000000 $t
    {standard input}:1414   .text.pmc_osc_disable_xtal:00000000 pmc_osc_disable_xtal
    {standard input}:1473   .text.pmc_osc_disable_xtal:00000044 $d
    {standard input}:1478   .text.pmc_osc_is_ready_mainck:00000000 $t
    {standard input}:1485   .text.pmc_osc_is_ready_mainck:00000000 pmc_osc_is_ready_mainck
    {standard input}:1517   .text.pmc_osc_is_ready_mainck:00000014 $d
    {standard input}:1522   .text.pmc_mainck_osc_select:00000000 $t
    {standard input}:1529   .text.pmc_mainck_osc_select:00000000 pmc_mainck_osc_select
    {standard input}:1588   .text.pmc_mainck_osc_select:0000003c $d
    {standard input}:1593   .text.pmc_enable_pllack:00000000 $t
    {standard input}:1600   .text.pmc_enable_pllack:00000000 pmc_enable_pllack
    {standard input}:1667   .text.pmc_enable_pllack:00000048 $d
    {standard input}:1681   .text.pmc_disable_pllack:00000000 pmc_disable_pllack
    {standard input}:1674   .text.pmc_disable_pllack:00000000 $t
    {standard input}:1713   .text.pmc_disable_pllack:00000014 $d
    {standard input}:1718   .text.pmc_is_locked_pllack:00000000 $t
    {standard input}:1725   .text.pmc_is_locked_pllack:00000000 pmc_is_locked_pllack
    {standard input}:1757   .text.pmc_is_locked_pllack:00000014 $d
    {standard input}:1762   .text.pmc_enable_upll_clock:00000000 $t
    {standard input}:1769   .text.pmc_enable_upll_clock:00000000 pmc_enable_upll_clock
    {standard input}:1810   .text.pmc_enable_upll_clock:00000024 $d
    {standard input}:1815   .text.pmc_disable_upll_clock:00000000 $t
    {standard input}:1822   .text.pmc_disable_upll_clock:00000000 pmc_disable_upll_clock
    {standard input}:1856   .text.pmc_disable_upll_clock:00000018 $d
    {standard input}:1861   .text.pmc_is_locked_upll:00000000 $t
    {standard input}:1868   .text.pmc_is_locked_upll:00000000 pmc_is_locked_upll
    {standard input}:1900   .text.pmc_is_locked_upll:00000014 $d
    {standard input}:1905   .text.pmc_enable_periph_clk:00000000 $t
    {standard input}:1912   .text.pmc_enable_periph_clk:00000000 pmc_enable_periph_clk
    {standard input}:1981   .text.pmc_enable_periph_clk:00000048 $d
    {standard input}:1986   .text.pmc_disable_periph_clk:00000000 $t
    {standard input}:1993   .text.pmc_disable_periph_clk:00000000 pmc_disable_periph_clk
    {standard input}:2062   .text.pmc_disable_periph_clk:00000048 $d
    {standard input}:2067   .text.pmc_enable_all_periph_clk:00000000 $t
    {standard input}:2074   .text.pmc_enable_all_periph_clk:00000000 pmc_enable_all_periph_clk
    {standard input}:2115   .text.pmc_enable_all_periph_clk:00000024 $d
    {standard input}:2120   .text.pmc_disable_all_periph_clk:00000000 $t
    {standard input}:2127   .text.pmc_disable_all_periph_clk:00000000 pmc_disable_all_periph_clk
    {standard input}:2168   .text.pmc_disable_all_periph_clk:00000024 $d
    {standard input}:2173   .text.pmc_is_periph_clk_enabled:00000000 $t
    {standard input}:2180   .text.pmc_is_periph_clk_enabled:00000000 pmc_is_periph_clk_enabled
    {standard input}:2239   .text.pmc_is_periph_clk_enabled:00000034 $d
    {standard input}:2244   .text.pmc_pck_set_prescaler:00000000 $t
    {standard input}:2251   .text.pmc_pck_set_prescaler:00000000 pmc_pck_set_prescaler
    {standard input}:2323   .text.pmc_pck_set_prescaler:0000005c $d
    {standard input}:2328   .text.pmc_pck_set_source:00000000 $t
    {standard input}:2335   .text.pmc_pck_set_source:00000000 pmc_pck_set_source
    {standard input}:2407   .text.pmc_pck_set_source:0000005c $d
    {standard input}:2412   .text.pmc_switch_pck_to_sclk:00000000 $t
    {standard input}:2419   .text.pmc_switch_pck_to_sclk:00000000 pmc_switch_pck_to_sclk
    {standard input}:2491   .text.pmc_switch_pck_to_sclk:00000050 $d
    {standard input}:2496   .text.pmc_switch_pck_to_mainck:00000000 $t
    {standard input}:2503   .text.pmc_switch_pck_to_mainck:00000000 pmc_switch_pck_to_mainck
    {standard input}:2576   .text.pmc_switch_pck_to_mainck:00000054 $d
    {standard input}:2581   .text.pmc_switch_pck_to_pllack:00000000 $t
    {standard input}:2588   .text.pmc_switch_pck_to_pllack:00000000 pmc_switch_pck_to_pllack
    {standard input}:2661   .text.pmc_switch_pck_to_pllack:00000054 $d
    {standard input}:2666   .text.pmc_switch_pck_to_upllck:00000000 $t
    {standard input}:2673   .text.pmc_switch_pck_to_upllck:00000000 pmc_switch_pck_to_upllck
    {standard input}:2747   .text.pmc_switch_pck_to_upllck:00000054 $d
    {standard input}:2752   .text.pmc_switch_pck_to_mck:00000000 $t
    {standard input}:2759   .text.pmc_switch_pck_to_mck:00000000 pmc_switch_pck_to_mck
    {standard input}:2832   .text.pmc_switch_pck_to_mck:00000054 $d
    {standard input}:2837   .text.pmc_enable_pck:00000000 $t
    {standard input}:2844   .text.pmc_enable_pck:00000000 pmc_enable_pck
    {standard input}:2885   .text.pmc_enable_pck:00000020 $d
    {standard input}:2890   .text.pmc_disable_pck:00000000 $t
    {standard input}:2897   .text.pmc_disable_pck:00000000 pmc_disable_pck
    {standard input}:2938   .text.pmc_disable_pck:00000020 $d
    {standard input}:2943   .text.pmc_enable_all_pck:00000000 $t
    {standard input}:2950   .text.pmc_enable_all_pck:00000000 pmc_enable_all_pck
    {standard input}:2982   .text.pmc_enable_all_pck:00000014 $d
    {standard input}:2987   .text.pmc_disable_all_pck:00000000 $t
    {standard input}:2994   .text.pmc_disable_all_pck:00000000 pmc_disable_all_pck
    {standard input}:3026   .text.pmc_disable_all_pck:00000014 $d
    {standard input}:3031   .text.pmc_is_pck_enabled:00000000 $t
    {standard input}:3038   .text.pmc_is_pck_enabled:00000000 pmc_is_pck_enabled
    {standard input}:3089   .text.pmc_is_pck_enabled:0000002c $d
    {standard input}:3094   .text.pmc_enable_interrupt:00000000 $t
    {standard input}:3101   .text.pmc_enable_interrupt:00000000 pmc_enable_interrupt
    {standard input}:3140   .text.pmc_enable_interrupt:00000018 $d
    {standard input}:3145   .text.pmc_disable_interrupt:00000000 $t
    {standard input}:3152   .text.pmc_disable_interrupt:00000000 pmc_disable_interrupt
    {standard input}:3191   .text.pmc_disable_interrupt:00000018 $d
    {standard input}:3196   .text.pmc_get_interrupt_mask:00000000 $t
    {standard input}:3203   .text.pmc_get_interrupt_mask:00000000 pmc_get_interrupt_mask
    {standard input}:3234   .text.pmc_get_interrupt_mask:00000010 $d
    {standard input}:3239   .text.pmc_get_status:00000000 $t
    {standard input}:3246   .text.pmc_get_status:00000000 pmc_get_status
    {standard input}:3277   .text.pmc_get_status:00000010 $d
    {standard input}:3282   .text.pmc_set_fast_startup_input:00000000 $t
    {standard input}:3289   .text.pmc_set_fast_startup_input:00000000 pmc_set_fast_startup_input
    {standard input}:3335   .text.pmc_set_fast_startup_input:00000028 $d
    {standard input}:3340   .text.pmc_clr_fast_startup_input:00000000 $t
    {standard input}:3347   .text.pmc_clr_fast_startup_input:00000000 pmc_clr_fast_startup_input
    {standard input}:3394   .text.pmc_clr_fast_startup_input:00000028 $d
    {standard input}:3399   .text.pmc_enable_sleepmode:00000000 $t
    {standard input}:3406   .text.pmc_enable_sleepmode:00000000 pmc_enable_sleepmode
    {standard input}:3485   .text.pmc_enable_sleepmode:00000038 $d
    {standard input}:3491   .text.pmc_enable_waitmode:00000000 $t
    {standard input}:3498   .text.pmc_enable_waitmode:00000000 pmc_enable_waitmode
    {standard input}:3589   .text.pmc_enable_waitmode:00000050 $d
    {standard input}:3595   .text.pmc_enable_backupmode:00000000 $t
    {standard input}:3602   .text.pmc_enable_backupmode:00000000 pmc_enable_backupmode
    {standard input}:3647   .text.pmc_enable_backupmode:0000001c $d
    {standard input}:3652   .text.pmc_enable_clock_failure_detector:00000000 $t
    {standard input}:3659   .text.pmc_enable_clock_failure_detector:00000000 pmc_enable_clock_failure_detector
    {standard input}:3703   .text.pmc_enable_clock_failure_detector:00000024 $d
    {standard input}:3708   .text.pmc_disable_clock_failure_detector:00000000 $t
    {standard input}:3715   .text.pmc_disable_clock_failure_detector:00000000 pmc_disable_clock_failure_detector
    {standard input}:3759   .text.pmc_disable_clock_failure_detector:00000024 $d
    {standard input}:3764   .text.pmc_set_writeprotect:00000000 $t
    {standard input}:3771   .text.pmc_set_writeprotect:00000000 pmc_set_writeprotect
    {standard input}:3822   .text.pmc_set_writeprotect:0000002c $d
    {standard input}:3829   .text.pmc_get_writeprotect_status:00000000 $t
    {standard input}:3836   .text.pmc_get_writeprotect_status:00000000 pmc_get_writeprotect_status
    {standard input}:3868   .text.pmc_get_writeprotect_status:00000018 $d
                           .group:00000000 wm4.0.7d8dd4860124405c65f5049e8a79afcb
                           .group:00000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.newlib.h.8.f6e543eac3f2f65163ba2ffe3b04987b
                           .group:00000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:00000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.cdefs.h.47.14fad0b327eb9dcf106599b738d85132
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:00000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:00000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.pmc.h.58.e82ab76d364abd9761d4d0905e15fc60

NO UNDEFINED SYMBOLS
