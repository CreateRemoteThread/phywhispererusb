   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "pmc.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .section .text.pmc_mck_set_prescaler,"ax",%progbits
  27              	 .align 1
  28              	 .global pmc_mck_set_prescaler
  29              	 .arch armv7-m
  30              	 .syntax unified
  31              	 .thumb
  32              	 .thumb_func
  33              	 .fpu softvfp
  35              	pmc_mck_set_prescaler:
  36              	.LFB69:
  37              	 .file 1 ".././hal/sam3u1c/pmc.c"
   1:.././hal/sam3u1c/pmc.c **** /**
   2:.././hal/sam3u1c/pmc.c ****  * \file
   3:.././hal/sam3u1c/pmc.c ****  *
   4:.././hal/sam3u1c/pmc.c ****  * \brief Power Management Controller (PMC) driver for SAM.
   5:.././hal/sam3u1c/pmc.c ****  *
   6:.././hal/sam3u1c/pmc.c ****  * Copyright (c) 2011 - 2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/pmc.c ****  *
   8:.././hal/sam3u1c/pmc.c ****  * \asf_license_start
   9:.././hal/sam3u1c/pmc.c ****  *
  10:.././hal/sam3u1c/pmc.c ****  * \page License
  11:.././hal/sam3u1c/pmc.c ****  *
  12:.././hal/sam3u1c/pmc.c ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/pmc.c ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/pmc.c ****  *
  15:.././hal/sam3u1c/pmc.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/pmc.c ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/pmc.c ****  *
  18:.././hal/sam3u1c/pmc.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/pmc.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/pmc.c ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/pmc.c ****  *
  22:.././hal/sam3u1c/pmc.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/pmc.c ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/pmc.c ****  *
  25:.././hal/sam3u1c/pmc.c ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/pmc.c ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/pmc.c ****  *
  28:.././hal/sam3u1c/pmc.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/pmc.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/pmc.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/pmc.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/pmc.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/pmc.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/pmc.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/pmc.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/pmc.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/pmc.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/pmc.c ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/pmc.c ****  *
  40:.././hal/sam3u1c/pmc.c ****  * \asf_license_stop
  41:.././hal/sam3u1c/pmc.c ****  *
  42:.././hal/sam3u1c/pmc.c ****  */
  43:.././hal/sam3u1c/pmc.c **** 
  44:.././hal/sam3u1c/pmc.c **** #include "pmc.h"
  45:.././hal/sam3u1c/pmc.c **** 
  46:.././hal/sam3u1c/pmc.c **** #if (SAM3N)
  47:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    31
  48:.././hal/sam3u1c/pmc.c **** #elif (SAM3XA)
  49:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    44
  50:.././hal/sam3u1c/pmc.c **** #elif (SAM3U)
  51:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    29
  52:.././hal/sam3u1c/pmc.c **** #elif (SAM3S || SAM4S)
  53:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    34
  54:.././hal/sam3u1c/pmc.c **** #elif (SAM4E)
  55:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    47
  56:.././hal/sam3u1c/pmc.c **** #elif (SAM4N)
  57:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    31
  58:.././hal/sam3u1c/pmc.c **** #elif (SAM4C || SAM4CM || SAM4CP)
  59:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    43
  60:.././hal/sam3u1c/pmc.c **** #elif (SAMG51)
  61:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    47
  62:.././hal/sam3u1c/pmc.c **** #elif (SAMG53)
  63:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    47
  64:.././hal/sam3u1c/pmc.c **** #elif (SAMG54)
  65:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    47
  66:.././hal/sam3u1c/pmc.c **** #elif (SAMG55)
  67:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    50
  68:.././hal/sam3u1c/pmc.c **** #endif
  69:.././hal/sam3u1c/pmc.c **** 
  70:.././hal/sam3u1c/pmc.c **** /// @cond 0
  71:.././hal/sam3u1c/pmc.c **** /**INDENT-OFF**/
  72:.././hal/sam3u1c/pmc.c **** #ifdef __cplusplus
  73:.././hal/sam3u1c/pmc.c **** extern "C" {
  74:.././hal/sam3u1c/pmc.c **** #endif
  75:.././hal/sam3u1c/pmc.c **** /**INDENT-ON**/
  76:.././hal/sam3u1c/pmc.c **** /// @endcond
  77:.././hal/sam3u1c/pmc.c **** 
  78:.././hal/sam3u1c/pmc.c **** /**
  79:.././hal/sam3u1c/pmc.c ****  * \defgroup sam_drivers_pmc_group Power Management Controller (PMC)
  80:.././hal/sam3u1c/pmc.c ****  *
  81:.././hal/sam3u1c/pmc.c ****  * \par Purpose
  82:.././hal/sam3u1c/pmc.c ****  *
  83:.././hal/sam3u1c/pmc.c ****  * The Power Management Controller (PMC) optimizes power consumption by
  84:.././hal/sam3u1c/pmc.c ****  * controlling all system and user peripheral clocks. The PMC enables/disables
  85:.././hal/sam3u1c/pmc.c ****  * the clock inputs to many of the peripherals and the Cortex-M Processor.
  86:.././hal/sam3u1c/pmc.c ****  *
  87:.././hal/sam3u1c/pmc.c ****  * @{
  88:.././hal/sam3u1c/pmc.c ****  */
  89:.././hal/sam3u1c/pmc.c **** 
  90:.././hal/sam3u1c/pmc.c **** /**
  91:.././hal/sam3u1c/pmc.c ****  * \brief Set the prescaler of the MCK.
  92:.././hal/sam3u1c/pmc.c ****  *
  93:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Prescaler value.
  94:.././hal/sam3u1c/pmc.c ****  */
  95:.././hal/sam3u1c/pmc.c **** void pmc_mck_set_prescaler(uint32_t ul_pres)
  96:.././hal/sam3u1c/pmc.c **** {
  38              	 .loc 1 96 1
  39              	 .cfi_startproc
  40              	 
  41              	 
  42              	 
  43 0000 80B4     	 push {r7}
  44              	.LCFI0:
  45              	 .cfi_def_cfa_offset 4
  46              	 .cfi_offset 7,-4
  47 0002 83B0     	 sub sp,sp,#12
  48              	.LCFI1:
  49              	 .cfi_def_cfa_offset 16
  50 0004 00AF     	 add r7,sp,#0
  51              	.LCFI2:
  52              	 .cfi_def_cfa_register 7
  53 0006 7860     	 str r0,[r7,#4]
  97:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
  98:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  54              	 .loc 1 98 8
  55 0008 094B     	 ldr r3,.L3
  56 000a 1B6B     	 ldr r3,[r3,#48]
  57              	 .loc 1 98 19
  58 000c 23F07002 	 bic r2,r3,#112
  97:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
  59              	 .loc 1 97 5
  60 0010 0749     	 ldr r1,.L3
  61              	 .loc 1 98 43
  62 0012 7B68     	 ldr r3,[r7,#4]
  63 0014 1343     	 orrs r3,r3,r2
  97:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
  64              	 .loc 1 97 16
  65 0016 0B63     	 str r3,[r1,#48]
  99:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  66              	 .loc 1 99 8
  67 0018 00BF     	 nop
  68              	.L2:
  69              	 .loc 1 99 14 discriminator 1
  70 001a 054B     	 ldr r3,.L3
  71 001c 9B6E     	 ldr r3,[r3,#104]
  72              	 .loc 1 99 23 discriminator 1
  73 001e 03F00803 	 and r3,r3,#8
  74              	 .loc 1 99 8 discriminator 1
  75 0022 002B     	 cmp r3,#0
  76 0024 F9D0     	 beq .L2
 100:.././hal/sam3u1c/pmc.c **** }
  77              	 .loc 1 100 1
  78 0026 00BF     	 nop
  79 0028 0C37     	 adds r7,r7,#12
  80              	.LCFI3:
  81              	 .cfi_def_cfa_offset 4
  82 002a BD46     	 mov sp,r7
  83              	.LCFI4:
  84              	 .cfi_def_cfa_register 13
  85              	 
  86 002c 80BC     	 pop {r7}
  87              	.LCFI5:
  88              	 .cfi_restore 7
  89              	 .cfi_def_cfa_offset 0
  90 002e 7047     	 bx lr
  91              	.L4:
  92              	 .align 2
  93              	.L3:
  94 0030 00040E40 	 .word 1074660352
  95              	 .cfi_endproc
  96              	.LFE69:
  98              	 .section .text.pmc_mck_set_source,"ax",%progbits
  99              	 .align 1
 100              	 .global pmc_mck_set_source
 101              	 .syntax unified
 102              	 .thumb
 103              	 .thumb_func
 104              	 .fpu softvfp
 106              	pmc_mck_set_source:
 107              	.LFB70:
 101:.././hal/sam3u1c/pmc.c **** 
 102:.././hal/sam3u1c/pmc.c **** /**
 103:.././hal/sam3u1c/pmc.c ****  * \brief Set the source of the MCK.
 104:.././hal/sam3u1c/pmc.c ****  *
 105:.././hal/sam3u1c/pmc.c ****  * \param ul_source Source selection value.
 106:.././hal/sam3u1c/pmc.c ****  */
 107:.././hal/sam3u1c/pmc.c **** void pmc_mck_set_source(uint32_t ul_source)
 108:.././hal/sam3u1c/pmc.c **** {
 108              	 .loc 1 108 1
 109              	 .cfi_startproc
 110              	 
 111              	 
 112              	 
 113 0000 80B4     	 push {r7}
 114              	.LCFI6:
 115              	 .cfi_def_cfa_offset 4
 116              	 .cfi_offset 7,-4
 117 0002 83B0     	 sub sp,sp,#12
 118              	.LCFI7:
 119              	 .cfi_def_cfa_offset 16
 120 0004 00AF     	 add r7,sp,#0
 121              	.LCFI8:
 122              	 .cfi_def_cfa_register 7
 123 0006 7860     	 str r0,[r7,#4]
 109:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
 110:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) | ul_source;
 124              	 .loc 1 110 8
 125 0008 094B     	 ldr r3,.L7
 126 000a 1B6B     	 ldr r3,[r3,#48]
 127              	 .loc 1 110 19
 128 000c 23F00302 	 bic r2,r3,#3
 109:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
 129              	 .loc 1 109 5
 130 0010 0749     	 ldr r1,.L7
 131              	 .loc 1 110 42
 132 0012 7B68     	 ldr r3,[r7,#4]
 133 0014 1343     	 orrs r3,r3,r2
 109:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
 134              	 .loc 1 109 16
 135 0016 0B63     	 str r3,[r1,#48]
 111:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
 136              	 .loc 1 111 8
 137 0018 00BF     	 nop
 138              	.L6:
 139              	 .loc 1 111 14 discriminator 1
 140 001a 054B     	 ldr r3,.L7
 141 001c 9B6E     	 ldr r3,[r3,#104]
 142              	 .loc 1 111 23 discriminator 1
 143 001e 03F00803 	 and r3,r3,#8
 144              	 .loc 1 111 8 discriminator 1
 145 0022 002B     	 cmp r3,#0
 146 0024 F9D0     	 beq .L6
 112:.././hal/sam3u1c/pmc.c **** }
 147              	 .loc 1 112 1
 148 0026 00BF     	 nop
 149 0028 0C37     	 adds r7,r7,#12
 150              	.LCFI9:
 151              	 .cfi_def_cfa_offset 4
 152 002a BD46     	 mov sp,r7
 153              	.LCFI10:
 154              	 .cfi_def_cfa_register 13
 155              	 
 156 002c 80BC     	 pop {r7}
 157              	.LCFI11:
 158              	 .cfi_restore 7
 159              	 .cfi_def_cfa_offset 0
 160 002e 7047     	 bx lr
 161              	.L8:
 162              	 .align 2
 163              	.L7:
 164 0030 00040E40 	 .word 1074660352
 165              	 .cfi_endproc
 166              	.LFE70:
 168              	 .section .text.pmc_switch_mck_to_sclk,"ax",%progbits
 169              	 .align 1
 170              	 .global pmc_switch_mck_to_sclk
 171              	 .syntax unified
 172              	 .thumb
 173              	 .thumb_func
 174              	 .fpu softvfp
 176              	pmc_switch_mck_to_sclk:
 177              	.LFB71:
 113:.././hal/sam3u1c/pmc.c **** 
 114:.././hal/sam3u1c/pmc.c **** /**
 115:.././hal/sam3u1c/pmc.c ****  * \brief Switch master clock source selection to slow clock.
 116:.././hal/sam3u1c/pmc.c ****  *
 117:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Processor clock prescaler.
 118:.././hal/sam3u1c/pmc.c ****  *
 119:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 120:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 121:.././hal/sam3u1c/pmc.c ****  */
 122:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_mck_to_sclk(uint32_t ul_pres)
 123:.././hal/sam3u1c/pmc.c **** {
 178              	 .loc 1 123 1
 179              	 .cfi_startproc
 180              	 
 181              	 
 182              	 
 183 0000 80B4     	 push {r7}
 184              	.LCFI12:
 185              	 .cfi_def_cfa_offset 4
 186              	 .cfi_offset 7,-4
 187 0002 85B0     	 sub sp,sp,#20
 188              	.LCFI13:
 189              	 .cfi_def_cfa_offset 24
 190 0004 00AF     	 add r7,sp,#0
 191              	.LCFI14:
 192              	 .cfi_def_cfa_register 7
 193 0006 7860     	 str r0,[r7,#4]
 124:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 125:.././hal/sam3u1c/pmc.c **** 
 126:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 194              	 .loc 1 126 22
 195 0008 1B4B     	 ldr r3,.L17
 196 000a 1B6B     	 ldr r3,[r3,#48]
 197              	 .loc 1 126 5
 198 000c 1A4A     	 ldr r2,.L17
 199              	 .loc 1 126 56
 200 000e 23F00303 	 bic r3,r3,#3
 201              	 .loc 1 126 16
 202 0012 1363     	 str r3,[r2,#48]
 127:.././hal/sam3u1c/pmc.c **** 			PMC_MCKR_CSS_SLOW_CLK;
 128:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 203              	 .loc 1 128 18
 204 0014 4FF40063 	 mov r3,#2048
 205 0018 FB60     	 str r3,[r7,#12]
 206              	 .loc 1 128 2
 207 001a 07E0     	 b .L10
 208              	.L13:
 129:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 130:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 209              	 .loc 1 130 6
 210 001c FB68     	 ldr r3,[r7,#12]
 211 001e 002B     	 cmp r3,#0
 212 0020 01D1     	 bne .L11
 131:.././hal/sam3u1c/pmc.c **** 			return 1;
 213              	 .loc 1 131 11
 214 0022 0123     	 movs r3,#1
 215 0024 23E0     	 b .L12
 216              	.L11:
 129:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 217              	 .loc 1 129 4
 218 0026 FB68     	 ldr r3,[r7,#12]
 219 0028 013B     	 subs r3,r3,#1
 220 002a FB60     	 str r3,[r7,#12]
 221              	.L10:
 128:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 222              	 .loc 1 128 38 discriminator 1
 223 002c 124B     	 ldr r3,.L17
 224 002e 9B6E     	 ldr r3,[r3,#104]
 128:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 225              	 .loc 1 128 47 discriminator 1
 226 0030 03F00803 	 and r3,r3,#8
 128:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 227              	 .loc 1 128 2 discriminator 1
 228 0034 002B     	 cmp r3,#0
 229 0036 F1D0     	 beq .L13
 132:.././hal/sam3u1c/pmc.c **** 		}
 133:.././hal/sam3u1c/pmc.c **** 	}
 134:.././hal/sam3u1c/pmc.c **** 
 135:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 230              	 .loc 1 135 22
 231 0038 0F4B     	 ldr r3,.L17
 232 003a 1B6B     	 ldr r3,[r3,#48]
 233              	 .loc 1 135 33
 234 003c 23F07002 	 bic r2,r3,#112
 235              	 .loc 1 135 5
 236 0040 0D49     	 ldr r1,.L17
 237              	 .loc 1 135 57
 238 0042 7B68     	 ldr r3,[r7,#4]
 239 0044 1343     	 orrs r3,r3,r2
 240              	 .loc 1 135 16
 241 0046 0B63     	 str r3,[r1,#48]
 136:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 242              	 .loc 1 136 18
 243 0048 4FF40063 	 mov r3,#2048
 244 004c FB60     	 str r3,[r7,#12]
 245              	 .loc 1 136 2
 246 004e 07E0     	 b .L14
 247              	.L16:
 137:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 138:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 248              	 .loc 1 138 6
 249 0050 FB68     	 ldr r3,[r7,#12]
 250 0052 002B     	 cmp r3,#0
 251 0054 01D1     	 bne .L15
 139:.././hal/sam3u1c/pmc.c **** 			return 1;
 252              	 .loc 1 139 11
 253 0056 0123     	 movs r3,#1
 254 0058 09E0     	 b .L12
 255              	.L15:
 137:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 256              	 .loc 1 137 4
 257 005a FB68     	 ldr r3,[r7,#12]
 258 005c 013B     	 subs r3,r3,#1
 259 005e FB60     	 str r3,[r7,#12]
 260              	.L14:
 136:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 261              	 .loc 1 136 38 discriminator 1
 262 0060 054B     	 ldr r3,.L17
 263 0062 9B6E     	 ldr r3,[r3,#104]
 136:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 264              	 .loc 1 136 47 discriminator 1
 265 0064 03F00803 	 and r3,r3,#8
 136:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 266              	 .loc 1 136 2 discriminator 1
 267 0068 002B     	 cmp r3,#0
 268 006a F1D0     	 beq .L16
 140:.././hal/sam3u1c/pmc.c **** 		}
 141:.././hal/sam3u1c/pmc.c **** 	}
 142:.././hal/sam3u1c/pmc.c **** 
 143:.././hal/sam3u1c/pmc.c **** 	return 0;
 269              	 .loc 1 143 9
 270 006c 0023     	 movs r3,#0
 271              	.L12:
 144:.././hal/sam3u1c/pmc.c **** }
 272              	 .loc 1 144 1
 273 006e 1846     	 mov r0,r3
 274 0070 1437     	 adds r7,r7,#20
 275              	.LCFI15:
 276              	 .cfi_def_cfa_offset 4
 277 0072 BD46     	 mov sp,r7
 278              	.LCFI16:
 279              	 .cfi_def_cfa_register 13
 280              	 
 281 0074 80BC     	 pop {r7}
 282              	.LCFI17:
 283              	 .cfi_restore 7
 284              	 .cfi_def_cfa_offset 0
 285 0076 7047     	 bx lr
 286              	.L18:
 287              	 .align 2
 288              	.L17:
 289 0078 00040E40 	 .word 1074660352
 290              	 .cfi_endproc
 291              	.LFE71:
 293              	 .section .text.pmc_switch_mck_to_mainck,"ax",%progbits
 294              	 .align 1
 295              	 .global pmc_switch_mck_to_mainck
 296              	 .syntax unified
 297              	 .thumb
 298              	 .thumb_func
 299              	 .fpu softvfp
 301              	pmc_switch_mck_to_mainck:
 302              	.LFB72:
 145:.././hal/sam3u1c/pmc.c **** 
 146:.././hal/sam3u1c/pmc.c **** /**
 147:.././hal/sam3u1c/pmc.c ****  * \brief Switch master clock source selection to main clock.
 148:.././hal/sam3u1c/pmc.c ****  *
 149:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Processor clock prescaler.
 150:.././hal/sam3u1c/pmc.c ****  *
 151:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 152:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 153:.././hal/sam3u1c/pmc.c ****  */
 154:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
 155:.././hal/sam3u1c/pmc.c **** {
 303              	 .loc 1 155 1
 304              	 .cfi_startproc
 305              	 
 306              	 
 307              	 
 308 0000 80B4     	 push {r7}
 309              	.LCFI18:
 310              	 .cfi_def_cfa_offset 4
 311              	 .cfi_offset 7,-4
 312 0002 85B0     	 sub sp,sp,#20
 313              	.LCFI19:
 314              	 .cfi_def_cfa_offset 24
 315 0004 00AF     	 add r7,sp,#0
 316              	.LCFI20:
 317              	 .cfi_def_cfa_register 7
 318 0006 7860     	 str r0,[r7,#4]
 156:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 157:.././hal/sam3u1c/pmc.c **** 
 158:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 319              	 .loc 1 158 22
 320 0008 1C4B     	 ldr r3,.L27
 321 000a 1B6B     	 ldr r3,[r3,#48]
 322              	 .loc 1 158 33
 323 000c 23F00303 	 bic r3,r3,#3
 324              	 .loc 1 158 5
 325 0010 1A4A     	 ldr r2,.L27
 326              	 .loc 1 158 56
 327 0012 43F00103 	 orr r3,r3,#1
 328              	 .loc 1 158 16
 329 0016 1363     	 str r3,[r2,#48]
 159:.././hal/sam3u1c/pmc.c **** 			PMC_MCKR_CSS_MAIN_CLK;
 160:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 330              	 .loc 1 160 18
 331 0018 4FF40063 	 mov r3,#2048
 332 001c FB60     	 str r3,[r7,#12]
 333              	 .loc 1 160 2
 334 001e 07E0     	 b .L20
 335              	.L23:
 161:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 162:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 336              	 .loc 1 162 6
 337 0020 FB68     	 ldr r3,[r7,#12]
 338 0022 002B     	 cmp r3,#0
 339 0024 01D1     	 bne .L21
 163:.././hal/sam3u1c/pmc.c **** 			return 1;
 340              	 .loc 1 163 11
 341 0026 0123     	 movs r3,#1
 342 0028 23E0     	 b .L22
 343              	.L21:
 161:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 344              	 .loc 1 161 4
 345 002a FB68     	 ldr r3,[r7,#12]
 346 002c 013B     	 subs r3,r3,#1
 347 002e FB60     	 str r3,[r7,#12]
 348              	.L20:
 160:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 349              	 .loc 1 160 38 discriminator 1
 350 0030 124B     	 ldr r3,.L27
 351 0032 9B6E     	 ldr r3,[r3,#104]
 160:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 352              	 .loc 1 160 47 discriminator 1
 353 0034 03F00803 	 and r3,r3,#8
 160:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 354              	 .loc 1 160 2 discriminator 1
 355 0038 002B     	 cmp r3,#0
 356 003a F1D0     	 beq .L23
 164:.././hal/sam3u1c/pmc.c **** 		}
 165:.././hal/sam3u1c/pmc.c **** 	}
 166:.././hal/sam3u1c/pmc.c **** 
 167:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 357              	 .loc 1 167 22
 358 003c 0F4B     	 ldr r3,.L27
 359 003e 1B6B     	 ldr r3,[r3,#48]
 360              	 .loc 1 167 33
 361 0040 23F07002 	 bic r2,r3,#112
 362              	 .loc 1 167 5
 363 0044 0D49     	 ldr r1,.L27
 364              	 .loc 1 167 57
 365 0046 7B68     	 ldr r3,[r7,#4]
 366 0048 1343     	 orrs r3,r3,r2
 367              	 .loc 1 167 16
 368 004a 0B63     	 str r3,[r1,#48]
 168:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 369              	 .loc 1 168 18
 370 004c 4FF40063 	 mov r3,#2048
 371 0050 FB60     	 str r3,[r7,#12]
 372              	 .loc 1 168 2
 373 0052 07E0     	 b .L24
 374              	.L26:
 169:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 170:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 375              	 .loc 1 170 6
 376 0054 FB68     	 ldr r3,[r7,#12]
 377 0056 002B     	 cmp r3,#0
 378 0058 01D1     	 bne .L25
 171:.././hal/sam3u1c/pmc.c **** 			return 1;
 379              	 .loc 1 171 11
 380 005a 0123     	 movs r3,#1
 381 005c 09E0     	 b .L22
 382              	.L25:
 169:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 383              	 .loc 1 169 4
 384 005e FB68     	 ldr r3,[r7,#12]
 385 0060 013B     	 subs r3,r3,#1
 386 0062 FB60     	 str r3,[r7,#12]
 387              	.L24:
 168:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 388              	 .loc 1 168 38 discriminator 1
 389 0064 054B     	 ldr r3,.L27
 390 0066 9B6E     	 ldr r3,[r3,#104]
 168:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 391              	 .loc 1 168 47 discriminator 1
 392 0068 03F00803 	 and r3,r3,#8
 168:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 393              	 .loc 1 168 2 discriminator 1
 394 006c 002B     	 cmp r3,#0
 395 006e F1D0     	 beq .L26
 172:.././hal/sam3u1c/pmc.c **** 		}
 173:.././hal/sam3u1c/pmc.c **** 	}
 174:.././hal/sam3u1c/pmc.c **** 
 175:.././hal/sam3u1c/pmc.c **** 	return 0;
 396              	 .loc 1 175 9
 397 0070 0023     	 movs r3,#0
 398              	.L22:
 176:.././hal/sam3u1c/pmc.c **** }
 399              	 .loc 1 176 1
 400 0072 1846     	 mov r0,r3
 401 0074 1437     	 adds r7,r7,#20
 402              	.LCFI21:
 403              	 .cfi_def_cfa_offset 4
 404 0076 BD46     	 mov sp,r7
 405              	.LCFI22:
 406              	 .cfi_def_cfa_register 13
 407              	 
 408 0078 80BC     	 pop {r7}
 409              	.LCFI23:
 410              	 .cfi_restore 7
 411              	 .cfi_def_cfa_offset 0
 412 007a 7047     	 bx lr
 413              	.L28:
 414              	 .align 2
 415              	.L27:
 416 007c 00040E40 	 .word 1074660352
 417              	 .cfi_endproc
 418              	.LFE72:
 420              	 .section .text.pmc_switch_mck_to_pllack,"ax",%progbits
 421              	 .align 1
 422              	 .global pmc_switch_mck_to_pllack
 423              	 .syntax unified
 424              	 .thumb
 425              	 .thumb_func
 426              	 .fpu softvfp
 428              	pmc_switch_mck_to_pllack:
 429              	.LFB73:
 177:.././hal/sam3u1c/pmc.c **** 
 178:.././hal/sam3u1c/pmc.c **** /**
 179:.././hal/sam3u1c/pmc.c ****  * \brief Switch master clock source selection to PLLA clock.
 180:.././hal/sam3u1c/pmc.c ****  *
 181:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Processor clock prescaler.
 182:.././hal/sam3u1c/pmc.c ****  *
 183:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 184:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 185:.././hal/sam3u1c/pmc.c ****  */
 186:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
 187:.././hal/sam3u1c/pmc.c **** {
 430              	 .loc 1 187 1
 431              	 .cfi_startproc
 432              	 
 433              	 
 434              	 
 435 0000 80B4     	 push {r7}
 436              	.LCFI24:
 437              	 .cfi_def_cfa_offset 4
 438              	 .cfi_offset 7,-4
 439 0002 85B0     	 sub sp,sp,#20
 440              	.LCFI25:
 441              	 .cfi_def_cfa_offset 24
 442 0004 00AF     	 add r7,sp,#0
 443              	.LCFI26:
 444              	 .cfi_def_cfa_register 7
 445 0006 7860     	 str r0,[r7,#4]
 188:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 189:.././hal/sam3u1c/pmc.c **** 
 190:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 446              	 .loc 1 190 22
 447 0008 1C4B     	 ldr r3,.L37
 448 000a 1B6B     	 ldr r3,[r3,#48]
 449              	 .loc 1 190 33
 450 000c 23F07002 	 bic r2,r3,#112
 451              	 .loc 1 190 5
 452 0010 1A49     	 ldr r1,.L37
 453              	 .loc 1 190 57
 454 0012 7B68     	 ldr r3,[r7,#4]
 455 0014 1343     	 orrs r3,r3,r2
 456              	 .loc 1 190 16
 457 0016 0B63     	 str r3,[r1,#48]
 191:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 458              	 .loc 1 191 18
 459 0018 4FF40063 	 mov r3,#2048
 460 001c FB60     	 str r3,[r7,#12]
 461              	 .loc 1 191 2
 462 001e 07E0     	 b .L30
 463              	.L33:
 192:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 193:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 464              	 .loc 1 193 6
 465 0020 FB68     	 ldr r3,[r7,#12]
 466 0022 002B     	 cmp r3,#0
 467 0024 01D1     	 bne .L31
 194:.././hal/sam3u1c/pmc.c **** 			return 1;
 468              	 .loc 1 194 11
 469 0026 0123     	 movs r3,#1
 470 0028 23E0     	 b .L32
 471              	.L31:
 192:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 472              	 .loc 1 192 4
 473 002a FB68     	 ldr r3,[r7,#12]
 474 002c 013B     	 subs r3,r3,#1
 475 002e FB60     	 str r3,[r7,#12]
 476              	.L30:
 191:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 477              	 .loc 1 191 38 discriminator 1
 478 0030 124B     	 ldr r3,.L37
 479 0032 9B6E     	 ldr r3,[r3,#104]
 191:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 480              	 .loc 1 191 47 discriminator 1
 481 0034 03F00803 	 and r3,r3,#8
 191:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 482              	 .loc 1 191 2 discriminator 1
 483 0038 002B     	 cmp r3,#0
 484 003a F1D0     	 beq .L33
 195:.././hal/sam3u1c/pmc.c **** 		}
 196:.././hal/sam3u1c/pmc.c **** 	}
 197:.././hal/sam3u1c/pmc.c **** 
 198:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 485              	 .loc 1 198 22
 486 003c 0F4B     	 ldr r3,.L37
 487 003e 1B6B     	 ldr r3,[r3,#48]
 488              	 .loc 1 198 33
 489 0040 23F00303 	 bic r3,r3,#3
 490              	 .loc 1 198 5
 491 0044 0D4A     	 ldr r2,.L37
 492              	 .loc 1 198 56
 493 0046 43F00203 	 orr r3,r3,#2
 494              	 .loc 1 198 16
 495 004a 1363     	 str r3,[r2,#48]
 199:.././hal/sam3u1c/pmc.c **** 			PMC_MCKR_CSS_PLLA_CLK;
 200:.././hal/sam3u1c/pmc.c **** 
 201:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 496              	 .loc 1 201 18
 497 004c 4FF40063 	 mov r3,#2048
 498 0050 FB60     	 str r3,[r7,#12]
 499              	 .loc 1 201 2
 500 0052 07E0     	 b .L34
 501              	.L36:
 202:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 203:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 502              	 .loc 1 203 6
 503 0054 FB68     	 ldr r3,[r7,#12]
 504 0056 002B     	 cmp r3,#0
 505 0058 01D1     	 bne .L35
 204:.././hal/sam3u1c/pmc.c **** 			return 1;
 506              	 .loc 1 204 11
 507 005a 0123     	 movs r3,#1
 508 005c 09E0     	 b .L32
 509              	.L35:
 202:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 510              	 .loc 1 202 4
 511 005e FB68     	 ldr r3,[r7,#12]
 512 0060 013B     	 subs r3,r3,#1
 513 0062 FB60     	 str r3,[r7,#12]
 514              	.L34:
 201:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 515              	 .loc 1 201 38 discriminator 1
 516 0064 054B     	 ldr r3,.L37
 517 0066 9B6E     	 ldr r3,[r3,#104]
 201:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 518              	 .loc 1 201 47 discriminator 1
 519 0068 03F00803 	 and r3,r3,#8
 201:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 520              	 .loc 1 201 2 discriminator 1
 521 006c 002B     	 cmp r3,#0
 522 006e F1D0     	 beq .L36
 205:.././hal/sam3u1c/pmc.c **** 		}
 206:.././hal/sam3u1c/pmc.c **** 	}
 207:.././hal/sam3u1c/pmc.c **** 
 208:.././hal/sam3u1c/pmc.c **** 	return 0;
 523              	 .loc 1 208 9
 524 0070 0023     	 movs r3,#0
 525              	.L32:
 209:.././hal/sam3u1c/pmc.c **** }
 526              	 .loc 1 209 1
 527 0072 1846     	 mov r0,r3
 528 0074 1437     	 adds r7,r7,#20
 529              	.LCFI27:
 530              	 .cfi_def_cfa_offset 4
 531 0076 BD46     	 mov sp,r7
 532              	.LCFI28:
 533              	 .cfi_def_cfa_register 13
 534              	 
 535 0078 80BC     	 pop {r7}
 536              	.LCFI29:
 537              	 .cfi_restore 7
 538              	 .cfi_def_cfa_offset 0
 539 007a 7047     	 bx lr
 540              	.L38:
 541              	 .align 2
 542              	.L37:
 543 007c 00040E40 	 .word 1074660352
 544              	 .cfi_endproc
 545              	.LFE73:
 547              	 .section .text.pmc_switch_mck_to_upllck,"ax",%progbits
 548              	 .align 1
 549              	 .global pmc_switch_mck_to_upllck
 550              	 .syntax unified
 551              	 .thumb
 552              	 .thumb_func
 553              	 .fpu softvfp
 555              	pmc_switch_mck_to_upllck:
 556              	.LFB74:
 210:.././hal/sam3u1c/pmc.c **** 
 211:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP || SAMG55)
 212:.././hal/sam3u1c/pmc.c **** /**
 213:.././hal/sam3u1c/pmc.c ****  * \brief Switch master clock source selection to PLLB clock.
 214:.././hal/sam3u1c/pmc.c ****  *
 215:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Processor clock prescaler.
 216:.././hal/sam3u1c/pmc.c ****  *
 217:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 218:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 219:.././hal/sam3u1c/pmc.c ****  */
 220:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
 221:.././hal/sam3u1c/pmc.c **** {
 222:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 223:.././hal/sam3u1c/pmc.c **** 
 224:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 225:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 226:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 227:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 228:.././hal/sam3u1c/pmc.c **** 			return 1;
 229:.././hal/sam3u1c/pmc.c **** 		}
 230:.././hal/sam3u1c/pmc.c **** 	}
 231:.././hal/sam3u1c/pmc.c **** 
 232:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 233:.././hal/sam3u1c/pmc.c **** 			PMC_MCKR_CSS_PLLB_CLK;
 234:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 235:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 236:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 237:.././hal/sam3u1c/pmc.c **** 			return 1;
 238:.././hal/sam3u1c/pmc.c **** 		}
 239:.././hal/sam3u1c/pmc.c **** 	}
 240:.././hal/sam3u1c/pmc.c **** 
 241:.././hal/sam3u1c/pmc.c **** 	return 0;
 242:.././hal/sam3u1c/pmc.c **** }
 243:.././hal/sam3u1c/pmc.c **** #endif
 244:.././hal/sam3u1c/pmc.c **** 
 245:.././hal/sam3u1c/pmc.c **** #if (SAM3XA || SAM3U)
 246:.././hal/sam3u1c/pmc.c **** /**
 247:.././hal/sam3u1c/pmc.c ****  * \brief Switch master clock source selection to UPLL clock.
 248:.././hal/sam3u1c/pmc.c ****  *
 249:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Processor clock prescaler.
 250:.././hal/sam3u1c/pmc.c ****  *
 251:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 252:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 253:.././hal/sam3u1c/pmc.c ****  */
 254:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_mck_to_upllck(uint32_t ul_pres)
 255:.././hal/sam3u1c/pmc.c **** {
 557              	 .loc 1 255 1
 558              	 .cfi_startproc
 559              	 
 560              	 
 561              	 
 562 0000 80B4     	 push {r7}
 563              	.LCFI30:
 564              	 .cfi_def_cfa_offset 4
 565              	 .cfi_offset 7,-4
 566 0002 85B0     	 sub sp,sp,#20
 567              	.LCFI31:
 568              	 .cfi_def_cfa_offset 24
 569 0004 00AF     	 add r7,sp,#0
 570              	.LCFI32:
 571              	 .cfi_def_cfa_register 7
 572 0006 7860     	 str r0,[r7,#4]
 256:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 257:.././hal/sam3u1c/pmc.c **** 
 258:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 573              	 .loc 1 258 22
 574 0008 1B4B     	 ldr r3,.L47
 575 000a 1B6B     	 ldr r3,[r3,#48]
 576              	 .loc 1 258 33
 577 000c 23F07002 	 bic r2,r3,#112
 578              	 .loc 1 258 5
 579 0010 1949     	 ldr r1,.L47
 580              	 .loc 1 258 57
 581 0012 7B68     	 ldr r3,[r7,#4]
 582 0014 1343     	 orrs r3,r3,r2
 583              	 .loc 1 258 16
 584 0016 0B63     	 str r3,[r1,#48]
 259:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 585              	 .loc 1 259 18
 586 0018 4FF40063 	 mov r3,#2048
 587 001c FB60     	 str r3,[r7,#12]
 588              	 .loc 1 259 2
 589 001e 07E0     	 b .L40
 590              	.L43:
 260:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 261:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 591              	 .loc 1 261 6
 592 0020 FB68     	 ldr r3,[r7,#12]
 593 0022 002B     	 cmp r3,#0
 594 0024 01D1     	 bne .L41
 262:.././hal/sam3u1c/pmc.c **** 			return 1;
 595              	 .loc 1 262 11
 596 0026 0123     	 movs r3,#1
 597 0028 21E0     	 b .L42
 598              	.L41:
 260:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 599              	 .loc 1 260 4
 600 002a FB68     	 ldr r3,[r7,#12]
 601 002c 013B     	 subs r3,r3,#1
 602 002e FB60     	 str r3,[r7,#12]
 603              	.L40:
 259:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 604              	 .loc 1 259 38 discriminator 1
 605 0030 114B     	 ldr r3,.L47
 606 0032 9B6E     	 ldr r3,[r3,#104]
 259:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 607              	 .loc 1 259 47 discriminator 1
 608 0034 03F00803 	 and r3,r3,#8
 259:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 609              	 .loc 1 259 2 discriminator 1
 610 0038 002B     	 cmp r3,#0
 611 003a F1D0     	 beq .L43
 263:.././hal/sam3u1c/pmc.c **** 		}
 264:.././hal/sam3u1c/pmc.c **** 	}
 265:.././hal/sam3u1c/pmc.c **** 
 266:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 612              	 .loc 1 266 22
 613 003c 0E4B     	 ldr r3,.L47
 614 003e 1B6B     	 ldr r3,[r3,#48]
 615              	 .loc 1 266 5
 616 0040 0D4A     	 ldr r2,.L47
 617              	 .loc 1 266 56
 618 0042 43F00303 	 orr r3,r3,#3
 619              	 .loc 1 266 16
 620 0046 1363     	 str r3,[r2,#48]
 267:.././hal/sam3u1c/pmc.c **** 			PMC_MCKR_CSS_UPLL_CLK;
 268:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 621              	 .loc 1 268 18
 622 0048 4FF40063 	 mov r3,#2048
 623 004c FB60     	 str r3,[r7,#12]
 624              	 .loc 1 268 2
 625 004e 07E0     	 b .L44
 626              	.L46:
 269:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 270:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 627              	 .loc 1 270 6
 628 0050 FB68     	 ldr r3,[r7,#12]
 629 0052 002B     	 cmp r3,#0
 630 0054 01D1     	 bne .L45
 271:.././hal/sam3u1c/pmc.c **** 			return 1;
 631              	 .loc 1 271 11
 632 0056 0123     	 movs r3,#1
 633 0058 09E0     	 b .L42
 634              	.L45:
 269:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 635              	 .loc 1 269 4
 636 005a FB68     	 ldr r3,[r7,#12]
 637 005c 013B     	 subs r3,r3,#1
 638 005e FB60     	 str r3,[r7,#12]
 639              	.L44:
 268:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 640              	 .loc 1 268 38 discriminator 1
 641 0060 054B     	 ldr r3,.L47
 642 0062 9B6E     	 ldr r3,[r3,#104]
 268:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 643              	 .loc 1 268 47 discriminator 1
 644 0064 03F00803 	 and r3,r3,#8
 268:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 645              	 .loc 1 268 2 discriminator 1
 646 0068 002B     	 cmp r3,#0
 647 006a F1D0     	 beq .L46
 272:.././hal/sam3u1c/pmc.c **** 		}
 273:.././hal/sam3u1c/pmc.c **** 	}
 274:.././hal/sam3u1c/pmc.c **** 
 275:.././hal/sam3u1c/pmc.c **** 	return 0;
 648              	 .loc 1 275 9
 649 006c 0023     	 movs r3,#0
 650              	.L42:
 276:.././hal/sam3u1c/pmc.c **** }
 651              	 .loc 1 276 1
 652 006e 1846     	 mov r0,r3
 653 0070 1437     	 adds r7,r7,#20
 654              	.LCFI33:
 655              	 .cfi_def_cfa_offset 4
 656 0072 BD46     	 mov sp,r7
 657              	.LCFI34:
 658              	 .cfi_def_cfa_register 13
 659              	 
 660 0074 80BC     	 pop {r7}
 661              	.LCFI35:
 662              	 .cfi_restore 7
 663              	 .cfi_def_cfa_offset 0
 664 0076 7047     	 bx lr
 665              	.L48:
 666              	 .align 2
 667              	.L47:
 668 0078 00040E40 	 .word 1074660352
 669              	 .cfi_endproc
 670              	.LFE74:
 672              	 .section .text.pmc_switch_sclk_to_32kxtal,"ax",%progbits
 673              	 .align 1
 674              	 .global pmc_switch_sclk_to_32kxtal
 675              	 .syntax unified
 676              	 .thumb
 677              	 .thumb_func
 678              	 .fpu softvfp
 680              	pmc_switch_sclk_to_32kxtal:
 681              	.LFB75:
 277:.././hal/sam3u1c/pmc.c **** #endif
 278:.././hal/sam3u1c/pmc.c **** 
 279:.././hal/sam3u1c/pmc.c **** /**
 280:.././hal/sam3u1c/pmc.c ****  * \brief Switch slow clock source selection to external 32k (Xtal or Bypass).
 281:.././hal/sam3u1c/pmc.c ****  *
 282:.././hal/sam3u1c/pmc.c ****  * \note This function disables the PLLs.
 283:.././hal/sam3u1c/pmc.c ****  *
 284:.././hal/sam3u1c/pmc.c ****  * \note Switching SCLK back to 32krc is only possible by shutting down the
 285:.././hal/sam3u1c/pmc.c ****  *       VDDIO power supply.
 286:.././hal/sam3u1c/pmc.c ****  *
 287:.././hal/sam3u1c/pmc.c ****  * \param ul_bypass 0 for Xtal, 1 for bypass.
 288:.././hal/sam3u1c/pmc.c ****  */
 289:.././hal/sam3u1c/pmc.c **** void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
 290:.././hal/sam3u1c/pmc.c **** {
 682              	 .loc 1 290 1
 683              	 .cfi_startproc
 684              	 
 685              	 
 686              	 
 687 0000 80B4     	 push {r7}
 688              	.LCFI36:
 689              	 .cfi_def_cfa_offset 4
 690              	 .cfi_offset 7,-4
 691 0002 83B0     	 sub sp,sp,#12
 692              	.LCFI37:
 693              	 .cfi_def_cfa_offset 16
 694 0004 00AF     	 add r7,sp,#0
 695              	.LCFI38:
 696              	 .cfi_def_cfa_register 7
 697 0006 7860     	 str r0,[r7,#4]
 291:.././hal/sam3u1c/pmc.c **** 	/* Set Bypass mode if required */
 292:.././hal/sam3u1c/pmc.c **** 	if (ul_bypass == 1) {
 698              	 .loc 1 292 5
 699 0008 7B68     	 ldr r3,[r7,#4]
 700 000a 012B     	 cmp r3,#1
 701 000c 07D1     	 bne .L50
 293:.././hal/sam3u1c/pmc.c **** 		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
 702              	 .loc 1 293 17
 703 000e 084B     	 ldr r3,.L51
 704 0010 9B68     	 ldr r3,[r3,#8]
 705 0012 074A     	 ldr r2,.L51
 706 0014 43F02543 	 orr r3,r3,#-1526726656
 707 0018 43F48013 	 orr r3,r3,#1048576
 708 001c 9360     	 str r3,[r2,#8]
 709              	.L50:
 294:.././hal/sam3u1c/pmc.c **** 			SUPC_MR_OSCBYPASS;
 295:.././hal/sam3u1c/pmc.c **** 	}
 296:.././hal/sam3u1c/pmc.c **** 
 297:.././hal/sam3u1c/pmc.c **** 	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
 710              	 .loc 1 297 6
 711 001e 044B     	 ldr r3,.L51
 712              	 .loc 1 297 16
 713 0020 044A     	 ldr r2,.L51+4
 714 0022 1A60     	 str r2,[r3]
 298:.././hal/sam3u1c/pmc.c **** }
 715              	 .loc 1 298 1
 716 0024 00BF     	 nop
 717 0026 0C37     	 adds r7,r7,#12
 718              	.LCFI39:
 719              	 .cfi_def_cfa_offset 4
 720 0028 BD46     	 mov sp,r7
 721              	.LCFI40:
 722              	 .cfi_def_cfa_register 13
 723              	 
 724 002a 80BC     	 pop {r7}
 725              	.LCFI41:
 726              	 .cfi_restore 7
 727              	 .cfi_def_cfa_offset 0
 728 002c 7047     	 bx lr
 729              	.L52:
 730 002e 00BF     	 .align 2
 731              	.L51:
 732 0030 10120E40 	 .word 1074663952
 733 0034 080000A5 	 .word -1526726648
 734              	 .cfi_endproc
 735              	.LFE75:
 737              	 .section .text.pmc_osc_is_ready_32kxtal,"ax",%progbits
 738              	 .align 1
 739              	 .global pmc_osc_is_ready_32kxtal
 740              	 .syntax unified
 741              	 .thumb
 742              	 .thumb_func
 743              	 .fpu softvfp
 745              	pmc_osc_is_ready_32kxtal:
 746              	.LFB76:
 299:.././hal/sam3u1c/pmc.c **** 
 300:.././hal/sam3u1c/pmc.c **** /**
 301:.././hal/sam3u1c/pmc.c ****  * \brief Check if the external 32k Xtal is ready.
 302:.././hal/sam3u1c/pmc.c ****  *
 303:.././hal/sam3u1c/pmc.c ****  * \retval 1 External 32k Xtal is ready.
 304:.././hal/sam3u1c/pmc.c ****  * \retval 0 External 32k Xtal is not ready.
 305:.././hal/sam3u1c/pmc.c ****  */
 306:.././hal/sam3u1c/pmc.c **** uint32_t pmc_osc_is_ready_32kxtal(void)
 307:.././hal/sam3u1c/pmc.c **** {
 747              	 .loc 1 307 1
 748              	 .cfi_startproc
 749              	 
 750              	 
 751              	 
 752 0000 80B4     	 push {r7}
 753              	.LCFI42:
 754              	 .cfi_def_cfa_offset 4
 755              	 .cfi_offset 7,-4
 756 0002 00AF     	 add r7,sp,#0
 757              	.LCFI43:
 758              	 .cfi_def_cfa_register 7
 308:.././hal/sam3u1c/pmc.c **** 	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
 759              	 .loc 1 308 15
 760 0004 094B     	 ldr r3,.L57
 761 0006 5B69     	 ldr r3,[r3,#20]
 762              	 .loc 1 308 25
 763 0008 03F08003 	 and r3,r3,#128
 309:.././hal/sam3u1c/pmc.c **** 			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
 764              	 .loc 1 309 4
 765 000c 002B     	 cmp r3,#0
 766 000e 07D0     	 beq .L54
 767              	 .loc 1 309 11 discriminator 1
 768 0010 074B     	 ldr r3,.L57+4
 769 0012 9B6E     	 ldr r3,[r3,#104]
 770              	 .loc 1 309 20 discriminator 1
 771 0014 03F08003 	 and r3,r3,#128
 772              	 .loc 1 309 4 discriminator 1
 773 0018 002B     	 cmp r3,#0
 774 001a 01D0     	 beq .L54
 775              	 .loc 1 309 4 is_stmt 0 discriminator 3
 776 001c 0123     	 movs r3,#1
 777 001e 00E0     	 b .L55
 778              	.L54:
 779              	 .loc 1 309 4 discriminator 4
 780 0020 0023     	 movs r3,#0
 781              	.L55:
 310:.././hal/sam3u1c/pmc.c **** }
 782              	 .loc 1 310 1 is_stmt 1 discriminator 6
 783 0022 1846     	 mov r0,r3
 784 0024 BD46     	 mov sp,r7
 785              	.LCFI44:
 786              	 .cfi_def_cfa_register 13
 787              	 
 788 0026 80BC     	 pop {r7}
 789              	.LCFI45:
 790              	 .cfi_restore 7
 791              	 .cfi_def_cfa_offset 0
 792 0028 7047     	 bx lr
 793              	.L58:
 794 002a 00BF     	 .align 2
 795              	.L57:
 796 002c 10120E40 	 .word 1074663952
 797 0030 00040E40 	 .word 1074660352
 798              	 .cfi_endproc
 799              	.LFE76:
 801              	 .section .text.pmc_switch_mainck_to_fastrc,"ax",%progbits
 802              	 .align 1
 803              	 .global pmc_switch_mainck_to_fastrc
 804              	 .syntax unified
 805              	 .thumb
 806              	 .thumb_func
 807              	 .fpu softvfp
 809              	pmc_switch_mainck_to_fastrc:
 810              	.LFB77:
 311:.././hal/sam3u1c/pmc.c **** 
 312:.././hal/sam3u1c/pmc.c **** /**
 313:.././hal/sam3u1c/pmc.c ****  * \brief Switch main clock source selection to internal fast RC.
 314:.././hal/sam3u1c/pmc.c ****  *
 315:.././hal/sam3u1c/pmc.c ****  * \param ul_moscrcf Fast RC oscillator(4/8/12Mhz).
 316:.././hal/sam3u1c/pmc.c ****  *
 317:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 318:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 319:.././hal/sam3u1c/pmc.c ****  * \retval 2 Invalid frequency.
 320:.././hal/sam3u1c/pmc.c ****  */
 321:.././hal/sam3u1c/pmc.c **** void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
 322:.././hal/sam3u1c/pmc.c **** {
 811              	 .loc 1 322 1
 812              	 .cfi_startproc
 813              	 
 814              	 
 815              	 
 816 0000 80B4     	 push {r7}
 817              	.LCFI46:
 818              	 .cfi_def_cfa_offset 4
 819              	 .cfi_offset 7,-4
 820 0002 83B0     	 sub sp,sp,#12
 821              	.LCFI47:
 822              	 .cfi_def_cfa_offset 16
 823 0004 00AF     	 add r7,sp,#0
 824              	.LCFI48:
 825              	 .cfi_def_cfa_register 7
 826 0006 7860     	 str r0,[r7,#4]
 323:.././hal/sam3u1c/pmc.c **** 	/* Enable Fast RC oscillator but DO NOT switch to RC now */
 324:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
 827              	 .loc 1 324 16
 828 0008 184B     	 ldr r3,.L62
 829 000a 1B6A     	 ldr r3,[r3,#32]
 830 000c 174A     	 ldr r2,.L62
 831 000e 43F45C13 	 orr r3,r3,#3604480
 832 0012 43F00803 	 orr r3,r3,#8
 833 0016 1362     	 str r3,[r2,#32]
 325:.././hal/sam3u1c/pmc.c **** 
 326:.././hal/sam3u1c/pmc.c **** 	/* Wait the Fast RC to stabilize */
 327:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 834              	 .loc 1 327 8
 835 0018 00BF     	 nop
 836              	.L60:
 837              	 .loc 1 327 14 discriminator 1
 838 001a 144B     	 ldr r3,.L62
 839 001c 9B6E     	 ldr r3,[r3,#104]
 840              	 .loc 1 327 23 discriminator 1
 841 001e 03F40033 	 and r3,r3,#131072
 842              	 .loc 1 327 8 discriminator 1
 843 0022 002B     	 cmp r3,#0
 844 0024 F9D0     	 beq .L60
 328:.././hal/sam3u1c/pmc.c **** 
 329:.././hal/sam3u1c/pmc.c **** 	/* Change Fast RC oscillator frequency */
 330:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
 845              	 .loc 1 330 22
 846 0026 114B     	 ldr r3,.L62
 847 0028 1B6A     	 ldr r3,[r3,#32]
 848              	 .loc 1 330 58
 849 002a 23F45C13 	 bic r3,r3,#3604480
 850 002e 23F07003 	 bic r3,r3,#112
 331:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
 851              	 .loc 1 331 24
 852 0032 7A68     	 ldr r2,[r7,#4]
 853 0034 1343     	 orrs r3,r3,r2
 330:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
 854              	 .loc 1 330 5
 855 0036 0D4A     	 ldr r2,.L62
 856              	 .loc 1 331 24
 857 0038 43F45C13 	 orr r3,r3,#3604480
 330:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
 858              	 .loc 1 330 16
 859 003c 1362     	 str r3,[r2,#32]
 332:.././hal/sam3u1c/pmc.c **** 
 333:.././hal/sam3u1c/pmc.c **** 	/* Wait the Fast RC to stabilize */
 334:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 860              	 .loc 1 334 8
 861 003e 00BF     	 nop
 862              	.L61:
 863              	 .loc 1 334 14 discriminator 1
 864 0040 0A4B     	 ldr r3,.L62
 865 0042 9B6E     	 ldr r3,[r3,#104]
 866              	 .loc 1 334 23 discriminator 1
 867 0044 03F40033 	 and r3,r3,#131072
 868              	 .loc 1 334 8 discriminator 1
 869 0048 002B     	 cmp r3,#0
 870 004a F9D0     	 beq .L61
 335:.././hal/sam3u1c/pmc.c **** 
 336:.././hal/sam3u1c/pmc.c **** 	/* Switch to Fast RC */
 337:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
 871              	 .loc 1 337 22
 872 004c 074B     	 ldr r3,.L62
 873 004e 1B6A     	 ldr r3,[r3,#32]
 874              	 .loc 1 337 54
 875 0050 23F09B73 	 bic r3,r3,#20316160
 876 0054 23F48033 	 bic r3,r3,#65536
 877              	 .loc 1 337 5
 878 0058 044A     	 ldr r2,.L62
 879              	 .loc 1 337 54
 880 005a 43F45C13 	 orr r3,r3,#3604480
 881              	 .loc 1 337 16
 882 005e 1362     	 str r3,[r2,#32]
 338:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD;
 339:.././hal/sam3u1c/pmc.c **** }
 883              	 .loc 1 339 1
 884 0060 00BF     	 nop
 885 0062 0C37     	 adds r7,r7,#12
 886              	.LCFI49:
 887              	 .cfi_def_cfa_offset 4
 888 0064 BD46     	 mov sp,r7
 889              	.LCFI50:
 890              	 .cfi_def_cfa_register 13
 891              	 
 892 0066 80BC     	 pop {r7}
 893              	.LCFI51:
 894              	 .cfi_restore 7
 895              	 .cfi_def_cfa_offset 0
 896 0068 7047     	 bx lr
 897              	.L63:
 898 006a 00BF     	 .align 2
 899              	.L62:
 900 006c 00040E40 	 .word 1074660352
 901              	 .cfi_endproc
 902              	.LFE77:
 904              	 .section .text.pmc_osc_enable_fastrc,"ax",%progbits
 905              	 .align 1
 906              	 .global pmc_osc_enable_fastrc
 907              	 .syntax unified
 908              	 .thumb
 909              	 .thumb_func
 910              	 .fpu softvfp
 912              	pmc_osc_enable_fastrc:
 913              	.LFB78:
 340:.././hal/sam3u1c/pmc.c **** 
 341:.././hal/sam3u1c/pmc.c **** /**
 342:.././hal/sam3u1c/pmc.c ****  * \brief Enable fast RC oscillator.
 343:.././hal/sam3u1c/pmc.c ****  *
 344:.././hal/sam3u1c/pmc.c ****  * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 345:.././hal/sam3u1c/pmc.c ****  */
 346:.././hal/sam3u1c/pmc.c **** void pmc_osc_enable_fastrc(uint32_t ul_rc)
 347:.././hal/sam3u1c/pmc.c **** {
 914              	 .loc 1 347 1
 915              	 .cfi_startproc
 916              	 
 917              	 
 918              	 
 919 0000 80B4     	 push {r7}
 920              	.LCFI52:
 921              	 .cfi_def_cfa_offset 4
 922              	 .cfi_offset 7,-4
 923 0002 83B0     	 sub sp,sp,#12
 924              	.LCFI53:
 925              	 .cfi_def_cfa_offset 16
 926 0004 00AF     	 add r7,sp,#0
 927              	.LCFI54:
 928              	 .cfi_def_cfa_register 7
 929 0006 7860     	 str r0,[r7,#4]
 348:.././hal/sam3u1c/pmc.c **** 	/* Enable Fast RC oscillator but DO NOT switch to RC */
 349:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
 930              	 .loc 1 349 16
 931 0008 134B     	 ldr r3,.L67
 932 000a 1B6A     	 ldr r3,[r3,#32]
 933 000c 124A     	 ldr r2,.L67
 934 000e 43F45C13 	 orr r3,r3,#3604480
 935 0012 43F00803 	 orr r3,r3,#8
 936 0016 1362     	 str r3,[r2,#32]
 350:.././hal/sam3u1c/pmc.c **** 	/* Wait the Fast RC to stabilize */
 351:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 937              	 .loc 1 351 8
 938 0018 00BF     	 nop
 939              	.L65:
 940              	 .loc 1 351 14 discriminator 1
 941 001a 0F4B     	 ldr r3,.L67
 942 001c 9B6E     	 ldr r3,[r3,#104]
 943              	 .loc 1 351 23 discriminator 1
 944 001e 03F40033 	 and r3,r3,#131072
 945              	 .loc 1 351 8 discriminator 1
 946 0022 002B     	 cmp r3,#0
 947 0024 F9D0     	 beq .L65
 352:.././hal/sam3u1c/pmc.c **** 
 353:.././hal/sam3u1c/pmc.c **** 	/* Change Fast RC oscillator frequency */
 354:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
 948              	 .loc 1 354 22
 949 0026 0C4B     	 ldr r3,.L67
 950 0028 1B6A     	 ldr r3,[r3,#32]
 951              	 .loc 1 354 58
 952 002a 23F45C13 	 bic r3,r3,#3604480
 953 002e 23F07003 	 bic r3,r3,#112
 355:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_rc;
 954              	 .loc 1 355 24
 955 0032 7A68     	 ldr r2,[r7,#4]
 956 0034 1343     	 orrs r3,r3,r2
 354:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_rc;
 957              	 .loc 1 354 5
 958 0036 084A     	 ldr r2,.L67
 959              	 .loc 1 355 24
 960 0038 43F45C13 	 orr r3,r3,#3604480
 354:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_rc;
 961              	 .loc 1 354 16
 962 003c 1362     	 str r3,[r2,#32]
 356:.././hal/sam3u1c/pmc.c **** 	/* Wait the Fast RC to stabilize */
 357:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 963              	 .loc 1 357 8
 964 003e 00BF     	 nop
 965              	.L66:
 966              	 .loc 1 357 14 discriminator 1
 967 0040 054B     	 ldr r3,.L67
 968 0042 9B6E     	 ldr r3,[r3,#104]
 969              	 .loc 1 357 23 discriminator 1
 970 0044 03F40033 	 and r3,r3,#131072
 971              	 .loc 1 357 8 discriminator 1
 972 0048 002B     	 cmp r3,#0
 973 004a F9D0     	 beq .L66
 358:.././hal/sam3u1c/pmc.c **** }
 974              	 .loc 1 358 1
 975 004c 00BF     	 nop
 976 004e 0C37     	 adds r7,r7,#12
 977              	.LCFI55:
 978              	 .cfi_def_cfa_offset 4
 979 0050 BD46     	 mov sp,r7
 980              	.LCFI56:
 981              	 .cfi_def_cfa_register 13
 982              	 
 983 0052 80BC     	 pop {r7}
 984              	.LCFI57:
 985              	 .cfi_restore 7
 986              	 .cfi_def_cfa_offset 0
 987 0054 7047     	 bx lr
 988              	.L68:
 989 0056 00BF     	 .align 2
 990              	.L67:
 991 0058 00040E40 	 .word 1074660352
 992              	 .cfi_endproc
 993              	.LFE78:
 995              	 .section .text.pmc_osc_disable_fastrc,"ax",%progbits
 996              	 .align 1
 997              	 .global pmc_osc_disable_fastrc
 998              	 .syntax unified
 999              	 .thumb
 1000              	 .thumb_func
 1001              	 .fpu softvfp
 1003              	pmc_osc_disable_fastrc:
 1004              	.LFB79:
 359:.././hal/sam3u1c/pmc.c **** 
 360:.././hal/sam3u1c/pmc.c **** /**
 361:.././hal/sam3u1c/pmc.c ****  * \brief Disable the internal fast RC.
 362:.././hal/sam3u1c/pmc.c ****  */
 363:.././hal/sam3u1c/pmc.c **** void pmc_osc_disable_fastrc(void)
 364:.././hal/sam3u1c/pmc.c **** {
 1005              	 .loc 1 364 1
 1006              	 .cfi_startproc
 1007              	 
 1008              	 
 1009              	 
 1010 0000 80B4     	 push {r7}
 1011              	.LCFI58:
 1012              	 .cfi_def_cfa_offset 4
 1013              	 .cfi_offset 7,-4
 1014 0002 00AF     	 add r7,sp,#0
 1015              	.LCFI59:
 1016              	 .cfi_def_cfa_register 7
 365:.././hal/sam3u1c/pmc.c **** 	/* Disable Fast RC oscillator */
 366:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
 1017              	 .loc 1 366 22
 1018 0004 064B     	 ldr r3,.L70
 1019 0006 1B6A     	 ldr r3,[r3,#32]
 367:.././hal/sam3u1c/pmc.c **** 					~CKGR_MOR_MOSCRCF_Msk)
 368:.././hal/sam3u1c/pmc.c **** 				| CKGR_MOR_KEY_PASSWD;
 1020              	 .loc 1 368 5
 1021 0008 23F45C13 	 bic r3,r3,#3604480
 1022 000c 23F07803 	 bic r3,r3,#120
 366:.././hal/sam3u1c/pmc.c **** 					~CKGR_MOR_MOSCRCF_Msk)
 1023              	 .loc 1 366 5
 1024 0010 034A     	 ldr r2,.L70
 1025              	 .loc 1 368 5
 1026 0012 43F45C13 	 orr r3,r3,#3604480
 366:.././hal/sam3u1c/pmc.c **** 					~CKGR_MOR_MOSCRCF_Msk)
 1027              	 .loc 1 366 16
 1028 0016 1362     	 str r3,[r2,#32]
 369:.././hal/sam3u1c/pmc.c **** }
 1029              	 .loc 1 369 1
 1030 0018 00BF     	 nop
 1031 001a BD46     	 mov sp,r7
 1032              	.LCFI60:
 1033              	 .cfi_def_cfa_register 13
 1034              	 
 1035 001c 80BC     	 pop {r7}
 1036              	.LCFI61:
 1037              	 .cfi_restore 7
 1038              	 .cfi_def_cfa_offset 0
 1039 001e 7047     	 bx lr
 1040              	.L71:
 1041              	 .align 2
 1042              	.L70:
 1043 0020 00040E40 	 .word 1074660352
 1044              	 .cfi_endproc
 1045              	.LFE79:
 1047              	 .section .text.pmc_osc_is_ready_fastrc,"ax",%progbits
 1048              	 .align 1
 1049              	 .global pmc_osc_is_ready_fastrc
 1050              	 .syntax unified
 1051              	 .thumb
 1052              	 .thumb_func
 1053              	 .fpu softvfp
 1055              	pmc_osc_is_ready_fastrc:
 1056              	.LFB80:
 370:.././hal/sam3u1c/pmc.c **** 
 371:.././hal/sam3u1c/pmc.c **** /**
 372:.././hal/sam3u1c/pmc.c ****  * \brief Check if the main fastrc is ready.
 373:.././hal/sam3u1c/pmc.c ****  *
 374:.././hal/sam3u1c/pmc.c ****  * \retval 0 Xtal is not ready, otherwise ready.
 375:.././hal/sam3u1c/pmc.c ****  */
 376:.././hal/sam3u1c/pmc.c **** uint32_t pmc_osc_is_ready_fastrc(void)
 377:.././hal/sam3u1c/pmc.c **** {
 1057              	 .loc 1 377 1
 1058              	 .cfi_startproc
 1059              	 
 1060              	 
 1061              	 
 1062 0000 80B4     	 push {r7}
 1063              	.LCFI62:
 1064              	 .cfi_def_cfa_offset 4
 1065              	 .cfi_offset 7,-4
 1066 0002 00AF     	 add r7,sp,#0
 1067              	.LCFI63:
 1068              	 .cfi_def_cfa_register 7
 378:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
 1069              	 .loc 1 378 13
 1070 0004 034B     	 ldr r3,.L74
 1071 0006 9B6E     	 ldr r3,[r3,#104]
 1072              	 .loc 1 378 22
 1073 0008 03F40033 	 and r3,r3,#131072
 379:.././hal/sam3u1c/pmc.c **** }
 1074              	 .loc 1 379 1
 1075 000c 1846     	 mov r0,r3
 1076 000e BD46     	 mov sp,r7
 1077              	.LCFI64:
 1078              	 .cfi_def_cfa_register 13
 1079              	 
 1080 0010 80BC     	 pop {r7}
 1081              	.LCFI65:
 1082              	 .cfi_restore 7
 1083              	 .cfi_def_cfa_offset 0
 1084 0012 7047     	 bx lr
 1085              	.L75:
 1086              	 .align 2
 1087              	.L74:
 1088 0014 00040E40 	 .word 1074660352
 1089              	 .cfi_endproc
 1090              	.LFE80:
 1092              	 .section .text.pmc_osc_enable_main_xtal,"ax",%progbits
 1093              	 .align 1
 1094              	 .global pmc_osc_enable_main_xtal
 1095              	 .syntax unified
 1096              	 .thumb
 1097              	 .thumb_func
 1098              	 .fpu softvfp
 1100              	pmc_osc_enable_main_xtal:
 1101              	.LFB81:
 380:.././hal/sam3u1c/pmc.c **** 
 381:.././hal/sam3u1c/pmc.c **** /**
 382:.././hal/sam3u1c/pmc.c ****  * \brief Enable main XTAL oscillator.
 383:.././hal/sam3u1c/pmc.c ****  *
 384:.././hal/sam3u1c/pmc.c ****  * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 385:.././hal/sam3u1c/pmc.c ****  */
 386:.././hal/sam3u1c/pmc.c **** void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
 387:.././hal/sam3u1c/pmc.c **** {
 1102              	 .loc 1 387 1
 1103              	 .cfi_startproc
 1104              	 
 1105              	 
 1106              	 
 1107 0000 80B4     	 push {r7}
 1108              	.LCFI66:
 1109              	 .cfi_def_cfa_offset 4
 1110              	 .cfi_offset 7,-4
 1111 0002 85B0     	 sub sp,sp,#20
 1112              	.LCFI67:
 1113              	 .cfi_def_cfa_offset 24
 1114 0004 00AF     	 add r7,sp,#0
 1115              	.LCFI68:
 1116              	 .cfi_def_cfa_register 7
 1117 0006 7860     	 str r0,[r7,#4]
 388:.././hal/sam3u1c/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 1118              	 .loc 1 388 20
 1119 0008 0F4B     	 ldr r3,.L78
 1120              	 .loc 1 388 11
 1121 000a 1B6A     	 ldr r3,[r3,#32]
 1122 000c FB60     	 str r3,[r7,#12]
 389:.././hal/sam3u1c/pmc.c **** 	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
 1123              	 .loc 1 389 6
 1124 000e FB68     	 ldr r3,[r7,#12]
 1125 0010 23F00303 	 bic r3,r3,#3
 1126 0014 FB60     	 str r3,[r7,#12]
 390:.././hal/sam3u1c/pmc.c **** 	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 391:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 1127              	 .loc 1 391 4
 1128 0016 7B68     	 ldr r3,[r7,#4]
 1129 0018 1B02     	 lsls r3,r3,#8
 1130 001a 9AB2     	 uxth r2,r3
 390:.././hal/sam3u1c/pmc.c **** 	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 1131              	 .loc 1 390 6
 1132 001c FB68     	 ldr r3,[r7,#12]
 1133 001e 1343     	 orrs r3,r3,r2
 1134 0020 43F45C13 	 orr r3,r3,#3604480
 1135 0024 43F00103 	 orr r3,r3,#1
 1136 0028 FB60     	 str r3,[r7,#12]
 392:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = mor;
 1137              	 .loc 1 392 5
 1138 002a 074A     	 ldr r2,.L78
 1139              	 .loc 1 392 16
 1140 002c FB68     	 ldr r3,[r7,#12]
 1141 002e 1362     	 str r3,[r2,#32]
 393:.././hal/sam3u1c/pmc.c **** 	/* Wait the main Xtal to stabilize */
 394:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
 1142              	 .loc 1 394 8
 1143 0030 00BF     	 nop
 1144              	.L77:
 1145              	 .loc 1 394 14 discriminator 1
 1146 0032 054B     	 ldr r3,.L78
 1147 0034 9B6E     	 ldr r3,[r3,#104]
 1148              	 .loc 1 394 23 discriminator 1
 1149 0036 03F00103 	 and r3,r3,#1
 1150              	 .loc 1 394 8 discriminator 1
 1151 003a 002B     	 cmp r3,#0
 1152 003c F9D0     	 beq .L77
 395:.././hal/sam3u1c/pmc.c **** }
 1153              	 .loc 1 395 1
 1154 003e 00BF     	 nop
 1155 0040 1437     	 adds r7,r7,#20
 1156              	.LCFI69:
 1157              	 .cfi_def_cfa_offset 4
 1158 0042 BD46     	 mov sp,r7
 1159              	.LCFI70:
 1160              	 .cfi_def_cfa_register 13
 1161              	 
 1162 0044 80BC     	 pop {r7}
 1163              	.LCFI71:
 1164              	 .cfi_restore 7
 1165              	 .cfi_def_cfa_offset 0
 1166 0046 7047     	 bx lr
 1167              	.L79:
 1168              	 .align 2
 1169              	.L78:
 1170 0048 00040E40 	 .word 1074660352
 1171              	 .cfi_endproc
 1172              	.LFE81:
 1174              	 .section .text.pmc_osc_bypass_main_xtal,"ax",%progbits
 1175              	 .align 1
 1176              	 .global pmc_osc_bypass_main_xtal
 1177              	 .syntax unified
 1178              	 .thumb
 1179              	 .thumb_func
 1180              	 .fpu softvfp
 1182              	pmc_osc_bypass_main_xtal:
 1183              	.LFB82:
 396:.././hal/sam3u1c/pmc.c **** 
 397:.././hal/sam3u1c/pmc.c **** /**
 398:.././hal/sam3u1c/pmc.c ****  * \brief Bypass main XTAL.
 399:.././hal/sam3u1c/pmc.c ****  */
 400:.././hal/sam3u1c/pmc.c **** void pmc_osc_bypass_main_xtal(void)
 401:.././hal/sam3u1c/pmc.c **** {
 1184              	 .loc 1 401 1
 1185              	 .cfi_startproc
 1186              	 
 1187              	 
 1188              	 
 1189 0000 80B4     	 push {r7}
 1190              	.LCFI72:
 1191              	 .cfi_def_cfa_offset 4
 1192              	 .cfi_offset 7,-4
 1193 0002 83B0     	 sub sp,sp,#12
 1194              	.LCFI73:
 1195              	 .cfi_def_cfa_offset 16
 1196 0004 00AF     	 add r7,sp,#0
 1197              	.LCFI74:
 1198              	 .cfi_def_cfa_register 7
 402:.././hal/sam3u1c/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 1199              	 .loc 1 402 20
 1200 0006 0A4B     	 ldr r3,.L81
 1201              	 .loc 1 402 11
 1202 0008 1B6A     	 ldr r3,[r3,#32]
 1203 000a 7B60     	 str r3,[r7,#4]
 403:.././hal/sam3u1c/pmc.c **** 	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
 1204              	 .loc 1 403 6
 1205 000c 7B68     	 ldr r3,[r7,#4]
 1206 000e 23F00303 	 bic r3,r3,#3
 1207 0012 7B60     	 str r3,[r7,#4]
 404:.././hal/sam3u1c/pmc.c **** 	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
 1208              	 .loc 1 404 6
 1209 0014 7B68     	 ldr r3,[r7,#4]
 1210 0016 43F45C13 	 orr r3,r3,#3604480
 1211 001a 43F00203 	 orr r3,r3,#2
 1212 001e 7B60     	 str r3,[r7,#4]
 405:.././hal/sam3u1c/pmc.c **** 	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
 406:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = mor;
 1213              	 .loc 1 406 5
 1214 0020 034A     	 ldr r2,.L81
 1215              	 .loc 1 406 16
 1216 0022 7B68     	 ldr r3,[r7,#4]
 1217 0024 1362     	 str r3,[r2,#32]
 407:.././hal/sam3u1c/pmc.c **** 	/* The MOSCXTS in PMC_SR is automatically set */
 408:.././hal/sam3u1c/pmc.c **** }
 1218              	 .loc 1 408 1
 1219 0026 00BF     	 nop
 1220 0028 0C37     	 adds r7,r7,#12
 1221              	.LCFI75:
 1222              	 .cfi_def_cfa_offset 4
 1223 002a BD46     	 mov sp,r7
 1224              	.LCFI76:
 1225              	 .cfi_def_cfa_register 13
 1226              	 
 1227 002c 80BC     	 pop {r7}
 1228              	.LCFI77:
 1229              	 .cfi_restore 7
 1230              	 .cfi_def_cfa_offset 0
 1231 002e 7047     	 bx lr
 1232              	.L82:
 1233              	 .align 2
 1234              	.L81:
 1235 0030 00040E40 	 .word 1074660352
 1236              	 .cfi_endproc
 1237              	.LFE82:
 1239              	 .section .text.pmc_osc_disable_main_xtal,"ax",%progbits
 1240              	 .align 1
 1241              	 .global pmc_osc_disable_main_xtal
 1242              	 .syntax unified
 1243              	 .thumb
 1244              	 .thumb_func
 1245              	 .fpu softvfp
 1247              	pmc_osc_disable_main_xtal:
 1248              	.LFB83:
 409:.././hal/sam3u1c/pmc.c **** 
 410:.././hal/sam3u1c/pmc.c **** /**
 411:.././hal/sam3u1c/pmc.c ****  * \brief Disable the main Xtal.
 412:.././hal/sam3u1c/pmc.c ****  */
 413:.././hal/sam3u1c/pmc.c **** void pmc_osc_disable_main_xtal(void)
 414:.././hal/sam3u1c/pmc.c **** {
 1249              	 .loc 1 414 1
 1250              	 .cfi_startproc
 1251              	 
 1252              	 
 1253              	 
 1254 0000 80B4     	 push {r7}
 1255              	.LCFI78:
 1256              	 .cfi_def_cfa_offset 4
 1257              	 .cfi_offset 7,-4
 1258 0002 83B0     	 sub sp,sp,#12
 1259              	.LCFI79:
 1260              	 .cfi_def_cfa_offset 16
 1261 0004 00AF     	 add r7,sp,#0
 1262              	.LCFI80:
 1263              	 .cfi_def_cfa_register 7
 415:.././hal/sam3u1c/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 1264              	 .loc 1 415 20
 1265 0006 084B     	 ldr r3,.L84
 1266              	 .loc 1 415 11
 1267 0008 1B6A     	 ldr r3,[r3,#32]
 1268 000a 7B60     	 str r3,[r7,#4]
 416:.././hal/sam3u1c/pmc.c **** 	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
 1269              	 .loc 1 416 6
 1270 000c 7B68     	 ldr r3,[r7,#4]
 1271 000e 23F00303 	 bic r3,r3,#3
 1272 0012 7B60     	 str r3,[r7,#4]
 417:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
 1273              	 .loc 1 417 5
 1274 0014 044A     	 ldr r2,.L84
 1275              	 .loc 1 417 38
 1276 0016 7B68     	 ldr r3,[r7,#4]
 1277 0018 43F45C13 	 orr r3,r3,#3604480
 1278              	 .loc 1 417 16
 1279 001c 1362     	 str r3,[r2,#32]
 418:.././hal/sam3u1c/pmc.c **** }
 1280              	 .loc 1 418 1
 1281 001e 00BF     	 nop
 1282 0020 0C37     	 adds r7,r7,#12
 1283              	.LCFI81:
 1284              	 .cfi_def_cfa_offset 4
 1285 0022 BD46     	 mov sp,r7
 1286              	.LCFI82:
 1287              	 .cfi_def_cfa_register 13
 1288              	 
 1289 0024 80BC     	 pop {r7}
 1290              	.LCFI83:
 1291              	 .cfi_restore 7
 1292              	 .cfi_def_cfa_offset 0
 1293 0026 7047     	 bx lr
 1294              	.L85:
 1295              	 .align 2
 1296              	.L84:
 1297 0028 00040E40 	 .word 1074660352
 1298              	 .cfi_endproc
 1299              	.LFE83:
 1301              	 .section .text.pmc_osc_is_bypassed_main_xtal,"ax",%progbits
 1302              	 .align 1
 1303              	 .global pmc_osc_is_bypassed_main_xtal
 1304              	 .syntax unified
 1305              	 .thumb
 1306              	 .thumb_func
 1307              	 .fpu softvfp
 1309              	pmc_osc_is_bypassed_main_xtal:
 1310              	.LFB84:
 419:.././hal/sam3u1c/pmc.c **** 
 420:.././hal/sam3u1c/pmc.c **** /**
 421:.././hal/sam3u1c/pmc.c ****  * \brief Check if the main crystal is bypassed.
 422:.././hal/sam3u1c/pmc.c ****  *
 423:.././hal/sam3u1c/pmc.c ****  * \retval 0 Xtal is bypassed, otherwise not.
 424:.././hal/sam3u1c/pmc.c ****  */
 425:.././hal/sam3u1c/pmc.c **** uint32_t pmc_osc_is_bypassed_main_xtal(void)
 426:.././hal/sam3u1c/pmc.c **** {
 1311              	 .loc 1 426 1
 1312              	 .cfi_startproc
 1313              	 
 1314              	 
 1315              	 
 1316 0000 80B4     	 push {r7}
 1317              	.LCFI84:
 1318              	 .cfi_def_cfa_offset 4
 1319              	 .cfi_offset 7,-4
 1320 0002 00AF     	 add r7,sp,#0
 1321              	.LCFI85:
 1322              	 .cfi_def_cfa_register 7
 427:.././hal/sam3u1c/pmc.c **** 	return (PMC->CKGR_MOR & CKGR_MOR_MOSCXTBY);
 1323              	 .loc 1 427 13
 1324 0004 034B     	 ldr r3,.L88
 1325 0006 1B6A     	 ldr r3,[r3,#32]
 1326              	 .loc 1 427 24
 1327 0008 03F00203 	 and r3,r3,#2
 428:.././hal/sam3u1c/pmc.c **** }
 1328              	 .loc 1 428 1
 1329 000c 1846     	 mov r0,r3
 1330 000e BD46     	 mov sp,r7
 1331              	.LCFI86:
 1332              	 .cfi_def_cfa_register 13
 1333              	 
 1334 0010 80BC     	 pop {r7}
 1335              	.LCFI87:
 1336              	 .cfi_restore 7
 1337              	 .cfi_def_cfa_offset 0
 1338 0012 7047     	 bx lr
 1339              	.L89:
 1340              	 .align 2
 1341              	.L88:
 1342 0014 00040E40 	 .word 1074660352
 1343              	 .cfi_endproc
 1344              	.LFE84:
 1346              	 .section .text.pmc_osc_is_ready_main_xtal,"ax",%progbits
 1347              	 .align 1
 1348              	 .global pmc_osc_is_ready_main_xtal
 1349              	 .syntax unified
 1350              	 .thumb
 1351              	 .thumb_func
 1352              	 .fpu softvfp
 1354              	pmc_osc_is_ready_main_xtal:
 1355              	.LFB85:
 429:.././hal/sam3u1c/pmc.c **** 
 430:.././hal/sam3u1c/pmc.c **** /**
 431:.././hal/sam3u1c/pmc.c ****  * \brief Check if the main crystal is ready.
 432:.././hal/sam3u1c/pmc.c ****  *
 433:.././hal/sam3u1c/pmc.c ****  * \note If main crystal is bypassed, it's always ready.
 434:.././hal/sam3u1c/pmc.c ****  *
 435:.././hal/sam3u1c/pmc.c ****  * \retval 0 main crystal is not ready, otherwise ready.
 436:.././hal/sam3u1c/pmc.c ****  */
 437:.././hal/sam3u1c/pmc.c **** uint32_t pmc_osc_is_ready_main_xtal(void)
 438:.././hal/sam3u1c/pmc.c **** {
 1356              	 .loc 1 438 1
 1357              	 .cfi_startproc
 1358              	 
 1359              	 
 1360              	 
 1361 0000 80B4     	 push {r7}
 1362              	.LCFI88:
 1363              	 .cfi_def_cfa_offset 4
 1364              	 .cfi_offset 7,-4
 1365 0002 00AF     	 add r7,sp,#0
 1366              	.LCFI89:
 1367              	 .cfi_def_cfa_register 7
 439:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
 1368              	 .loc 1 439 13
 1369 0004 034B     	 ldr r3,.L92
 1370 0006 9B6E     	 ldr r3,[r3,#104]
 1371              	 .loc 1 439 22
 1372 0008 03F00103 	 and r3,r3,#1
 440:.././hal/sam3u1c/pmc.c **** }
 1373              	 .loc 1 440 1
 1374 000c 1846     	 mov r0,r3
 1375 000e BD46     	 mov sp,r7
 1376              	.LCFI90:
 1377              	 .cfi_def_cfa_register 13
 1378              	 
 1379 0010 80BC     	 pop {r7}
 1380              	.LCFI91:
 1381              	 .cfi_restore 7
 1382              	 .cfi_def_cfa_offset 0
 1383 0012 7047     	 bx lr
 1384              	.L93:
 1385              	 .align 2
 1386              	.L92:
 1387 0014 00040E40 	 .word 1074660352
 1388              	 .cfi_endproc
 1389              	.LFE85:
 1391              	 .section .text.pmc_switch_mainck_to_xtal,"ax",%progbits
 1392              	 .align 1
 1393              	 .global pmc_switch_mainck_to_xtal
 1394              	 .syntax unified
 1395              	 .thumb
 1396              	 .thumb_func
 1397              	 .fpu softvfp
 1399              	pmc_switch_mainck_to_xtal:
 1400              	.LFB86:
 441:.././hal/sam3u1c/pmc.c **** 
 442:.././hal/sam3u1c/pmc.c **** /**
 443:.././hal/sam3u1c/pmc.c ****  * \brief Switch main clock source selection to external Xtal/Bypass.
 444:.././hal/sam3u1c/pmc.c ****  *
 445:.././hal/sam3u1c/pmc.c ****  * \note The function may switch MCK to SCLK if MCK source is MAINCK to avoid
 446:.././hal/sam3u1c/pmc.c ****  *       any system crash.
 447:.././hal/sam3u1c/pmc.c ****  *
 448:.././hal/sam3u1c/pmc.c ****  * \note If used in Xtal mode, the Xtal is automatically enabled.
 449:.././hal/sam3u1c/pmc.c ****  *
 450:.././hal/sam3u1c/pmc.c ****  * \param ul_bypass 0 for Xtal, 1 for bypass.
 451:.././hal/sam3u1c/pmc.c ****  *
 452:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 453:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 454:.././hal/sam3u1c/pmc.c ****  */
 455:.././hal/sam3u1c/pmc.c **** void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
 456:.././hal/sam3u1c/pmc.c **** 		uint32_t ul_xtal_startup_time)
 457:.././hal/sam3u1c/pmc.c **** {
 1401              	 .loc 1 457 1
 1402              	 .cfi_startproc
 1403              	 
 1404              	 
 1405              	 
 1406 0000 80B4     	 push {r7}
 1407              	.LCFI92:
 1408              	 .cfi_def_cfa_offset 4
 1409              	 .cfi_offset 7,-4
 1410 0002 83B0     	 sub sp,sp,#12
 1411              	.LCFI93:
 1412              	 .cfi_def_cfa_offset 16
 1413 0004 00AF     	 add r7,sp,#0
 1414              	.LCFI94:
 1415              	 .cfi_def_cfa_register 7
 1416 0006 7860     	 str r0,[r7,#4]
 1417 0008 3960     	 str r1,[r7]
 458:.././hal/sam3u1c/pmc.c **** 	/* Enable Main Xtal oscillator */
 459:.././hal/sam3u1c/pmc.c **** 	if (ul_bypass) {
 1418              	 .loc 1 459 5
 1419 000a 7B68     	 ldr r3,[r7,#4]
 1420 000c 002B     	 cmp r3,#0
 1421 000e 08D0     	 beq .L95
 460:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 1422              	 .loc 1 460 23
 1423 0010 164B     	 ldr r3,.L99
 1424 0012 1B6A     	 ldr r3,[r3,#32]
 461:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
 1425              	 .loc 1 461 45
 1426 0014 164A     	 ldr r2,.L99+4
 1427 0016 1A40     	 ands r2,r2,r3
 460:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 1428              	 .loc 1 460 6
 1429 0018 1449     	 ldr r1,.L99
 1430              	 .loc 1 461 45
 1431 001a 164B     	 ldr r3,.L99+8
 1432 001c 1343     	 orrs r3,r3,r2
 460:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 1433              	 .loc 1 460 17
 1434 001e 0B62     	 str r3,[r1,#32]
 462:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_MOSCSEL;
 463:.././hal/sam3u1c/pmc.c **** 	} else {
 464:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
 465:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 466:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 467:.././hal/sam3u1c/pmc.c **** 		/* Wait the Xtal to stabilize */
 468:.././hal/sam3u1c/pmc.c **** 		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
 469:.././hal/sam3u1c/pmc.c **** 
 470:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
 471:.././hal/sam3u1c/pmc.c **** 	}
 472:.././hal/sam3u1c/pmc.c **** }
 1435              	 .loc 1 472 1
 1436 0020 1EE0     	 b .L98
 1437              	.L95:
 464:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 1438              	 .loc 1 464 23
 1439 0022 124B     	 ldr r3,.L99
 1440 0024 1B6A     	 ldr r3,[r3,#32]
 465:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 1441              	 .loc 1 465 25
 1442 0026 23F45C13 	 bic r3,r3,#3604480
 1443 002a 23F00303 	 bic r3,r3,#3
 466:.././hal/sam3u1c/pmc.c **** 		/* Wait the Xtal to stabilize */
 1444              	 .loc 1 466 5
 1445 002e 3A68     	 ldr r2,[r7]
 1446 0030 1202     	 lsls r2,r2,#8
 1447 0032 92B2     	 uxth r2,r2
 465:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 1448              	 .loc 1 465 45
 1449 0034 1343     	 orrs r3,r3,r2
 464:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 1450              	 .loc 1 464 6
 1451 0036 0D4A     	 ldr r2,.L99
 465:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 1452              	 .loc 1 465 45
 1453 0038 43F45C13 	 orr r3,r3,#3604480
 1454 003c 43F00103 	 orr r3,r3,#1
 464:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 1455              	 .loc 1 464 17
 1456 0040 1362     	 str r3,[r2,#32]
 468:.././hal/sam3u1c/pmc.c **** 
 1457              	 .loc 1 468 9
 1458 0042 00BF     	 nop
 1459              	.L97:
 468:.././hal/sam3u1c/pmc.c **** 
 1460              	 .loc 1 468 15 discriminator 1
 1461 0044 094B     	 ldr r3,.L99
 1462 0046 9B6E     	 ldr r3,[r3,#104]
 468:.././hal/sam3u1c/pmc.c **** 
 1463              	 .loc 1 468 24 discriminator 1
 1464 0048 03F00103 	 and r3,r3,#1
 468:.././hal/sam3u1c/pmc.c **** 
 1465              	 .loc 1 468 9 discriminator 1
 1466 004c 002B     	 cmp r3,#0
 1467 004e F9D0     	 beq .L97
 470:.././hal/sam3u1c/pmc.c **** 	}
 1468              	 .loc 1 470 17
 1469 0050 064B     	 ldr r3,.L99
 1470 0052 1B6A     	 ldr r3,[r3,#32]
 1471 0054 054A     	 ldr r2,.L99
 1472 0056 43F09B73 	 orr r3,r3,#20316160
 1473 005a 43F48033 	 orr r3,r3,#65536
 1474 005e 1362     	 str r3,[r2,#32]
 1475              	.L98:
 1476              	 .loc 1 472 1
 1477 0060 00BF     	 nop
 1478 0062 0C37     	 adds r7,r7,#12
 1479              	.LCFI95:
 1480              	 .cfi_def_cfa_offset 4
 1481 0064 BD46     	 mov sp,r7
 1482              	.LCFI96:
 1483              	 .cfi_def_cfa_register 13
 1484              	 
 1485 0066 80BC     	 pop {r7}
 1486              	.LCFI97:
 1487              	 .cfi_restore 7
 1488              	 .cfi_def_cfa_offset 0
 1489 0068 7047     	 bx lr
 1490              	.L100:
 1491 006a 00BF     	 .align 2
 1492              	.L99:
 1493 006c 00040E40 	 .word 1074660352
 1494 0070 FCFFC8FE 	 .word -20381700
 1495 0074 02003701 	 .word 20381698
 1496              	 .cfi_endproc
 1497              	.LFE86:
 1499              	 .section .text.pmc_osc_disable_xtal,"ax",%progbits
 1500              	 .align 1
 1501              	 .global pmc_osc_disable_xtal
 1502              	 .syntax unified
 1503              	 .thumb
 1504              	 .thumb_func
 1505              	 .fpu softvfp
 1507              	pmc_osc_disable_xtal:
 1508              	.LFB87:
 473:.././hal/sam3u1c/pmc.c **** 
 474:.././hal/sam3u1c/pmc.c **** /**
 475:.././hal/sam3u1c/pmc.c ****  * \brief Disable the external Xtal.
 476:.././hal/sam3u1c/pmc.c ****  *
 477:.././hal/sam3u1c/pmc.c ****  * \param ul_bypass 0 for Xtal, 1 for bypass.
 478:.././hal/sam3u1c/pmc.c ****  */
 479:.././hal/sam3u1c/pmc.c **** void pmc_osc_disable_xtal(uint32_t ul_bypass)
 480:.././hal/sam3u1c/pmc.c **** {
 1509              	 .loc 1 480 1
 1510              	 .cfi_startproc
 1511              	 
 1512              	 
 1513              	 
 1514 0000 80B4     	 push {r7}
 1515              	.LCFI98:
 1516              	 .cfi_def_cfa_offset 4
 1517              	 .cfi_offset 7,-4
 1518 0002 83B0     	 sub sp,sp,#12
 1519              	.LCFI99:
 1520              	 .cfi_def_cfa_offset 16
 1521 0004 00AF     	 add r7,sp,#0
 1522              	.LCFI100:
 1523              	 .cfi_def_cfa_register 7
 1524 0006 7860     	 str r0,[r7,#4]
 481:.././hal/sam3u1c/pmc.c **** 	/* Disable xtal oscillator */
 482:.././hal/sam3u1c/pmc.c **** 	if (ul_bypass) {
 1525              	 .loc 1 482 5
 1526 0008 7B68     	 ldr r3,[r7,#4]
 1527 000a 002B     	 cmp r3,#0
 1528 000c 0AD0     	 beq .L102
 483:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
 1529              	 .loc 1 483 23
 1530 000e 0D4B     	 ldr r3,.L105
 1531 0010 1B6A     	 ldr r3,[r3,#32]
 1532              	 .loc 1 483 56
 1533 0012 23F45C13 	 bic r3,r3,#3604480
 1534 0016 23F00203 	 bic r3,r3,#2
 1535              	 .loc 1 483 6
 1536 001a 0A4A     	 ldr r2,.L105
 1537              	 .loc 1 483 56
 1538 001c 43F45C13 	 orr r3,r3,#3604480
 1539              	 .loc 1 483 17
 1540 0020 1362     	 str r3,[r2,#32]
 484:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 485:.././hal/sam3u1c/pmc.c **** 	} else {
 486:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 487:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 488:.././hal/sam3u1c/pmc.c **** 	}
 489:.././hal/sam3u1c/pmc.c **** }
 1541              	 .loc 1 489 1
 1542 0022 09E0     	 b .L104
 1543              	.L102:
 486:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 1544              	 .loc 1 486 23
 1545 0024 074B     	 ldr r3,.L105
 1546 0026 1B6A     	 ldr r3,[r3,#32]
 486:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 1547              	 .loc 1 486 56
 1548 0028 23F45C13 	 bic r3,r3,#3604480
 1549 002c 23F00103 	 bic r3,r3,#1
 486:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 1550              	 .loc 1 486 6
 1551 0030 044A     	 ldr r2,.L105
 486:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 1552              	 .loc 1 486 56
 1553 0032 43F45C13 	 orr r3,r3,#3604480
 486:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 1554              	 .loc 1 486 17
 1555 0036 1362     	 str r3,[r2,#32]
 1556              	.L104:
 1557              	 .loc 1 489 1
 1558 0038 00BF     	 nop
 1559 003a 0C37     	 adds r7,r7,#12
 1560              	.LCFI101:
 1561              	 .cfi_def_cfa_offset 4
 1562 003c BD46     	 mov sp,r7
 1563              	.LCFI102:
 1564              	 .cfi_def_cfa_register 13
 1565              	 
 1566 003e 80BC     	 pop {r7}
 1567              	.LCFI103:
 1568              	 .cfi_restore 7
 1569              	 .cfi_def_cfa_offset 0
 1570 0040 7047     	 bx lr
 1571              	.L106:
 1572 0042 00BF     	 .align 2
 1573              	.L105:
 1574 0044 00040E40 	 .word 1074660352
 1575              	 .cfi_endproc
 1576              	.LFE87:
 1578              	 .section .text.pmc_osc_is_ready_mainck,"ax",%progbits
 1579              	 .align 1
 1580              	 .global pmc_osc_is_ready_mainck
 1581              	 .syntax unified
 1582              	 .thumb
 1583              	 .thumb_func
 1584              	 .fpu softvfp
 1586              	pmc_osc_is_ready_mainck:
 1587              	.LFB88:
 490:.././hal/sam3u1c/pmc.c **** 
 491:.././hal/sam3u1c/pmc.c **** /**
 492:.././hal/sam3u1c/pmc.c ****  * \brief Check if the MAINCK is ready. Depending on MOSCEL, MAINCK can be one
 493:.././hal/sam3u1c/pmc.c ****  * of Xtal, bypass or internal RC.
 494:.././hal/sam3u1c/pmc.c ****  *
 495:.././hal/sam3u1c/pmc.c ****  * \retval 1 Xtal is ready.
 496:.././hal/sam3u1c/pmc.c ****  * \retval 0 Xtal is not ready.
 497:.././hal/sam3u1c/pmc.c ****  */
 498:.././hal/sam3u1c/pmc.c **** uint32_t pmc_osc_is_ready_mainck(void)
 499:.././hal/sam3u1c/pmc.c **** {
 1588              	 .loc 1 499 1
 1589              	 .cfi_startproc
 1590              	 
 1591              	 
 1592              	 
 1593 0000 80B4     	 push {r7}
 1594              	.LCFI104:
 1595              	 .cfi_def_cfa_offset 4
 1596              	 .cfi_offset 7,-4
 1597 0002 00AF     	 add r7,sp,#0
 1598              	.LCFI105:
 1599              	 .cfi_def_cfa_register 7
 500:.././hal/sam3u1c/pmc.c **** 	return PMC->PMC_SR & PMC_SR_MOSCSELS;
 1600              	 .loc 1 500 12
 1601 0004 034B     	 ldr r3,.L109
 1602 0006 9B6E     	 ldr r3,[r3,#104]
 1603              	 .loc 1 500 21
 1604 0008 03F48033 	 and r3,r3,#65536
 501:.././hal/sam3u1c/pmc.c **** }
 1605              	 .loc 1 501 1
 1606 000c 1846     	 mov r0,r3
 1607 000e BD46     	 mov sp,r7
 1608              	.LCFI106:
 1609              	 .cfi_def_cfa_register 13
 1610              	 
 1611 0010 80BC     	 pop {r7}
 1612              	.LCFI107:
 1613              	 .cfi_restore 7
 1614              	 .cfi_def_cfa_offset 0
 1615 0012 7047     	 bx lr
 1616              	.L110:
 1617              	 .align 2
 1618              	.L109:
 1619 0014 00040E40 	 .word 1074660352
 1620              	 .cfi_endproc
 1621              	.LFE88:
 1623              	 .section .text.pmc_mainck_osc_select,"ax",%progbits
 1624              	 .align 1
 1625              	 .global pmc_mainck_osc_select
 1626              	 .syntax unified
 1627              	 .thumb
 1628              	 .thumb_func
 1629              	 .fpu softvfp
 1631              	pmc_mainck_osc_select:
 1632              	.LFB89:
 502:.././hal/sam3u1c/pmc.c **** 
 503:.././hal/sam3u1c/pmc.c **** /**
 504:.././hal/sam3u1c/pmc.c ****  * \brief Select Main Crystal or internal RC as main clock source.
 505:.././hal/sam3u1c/pmc.c ****  *
 506:.././hal/sam3u1c/pmc.c ****  * \note This function will not enable/disable RC or Main Crystal.
 507:.././hal/sam3u1c/pmc.c ****  *
 508:.././hal/sam3u1c/pmc.c ****  * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 509:.././hal/sam3u1c/pmc.c ****  */
 510:.././hal/sam3u1c/pmc.c **** void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
 511:.././hal/sam3u1c/pmc.c **** {
 1633              	 .loc 1 511 1
 1634              	 .cfi_startproc
 1635              	 
 1636              	 
 1637              	 
 1638 0000 80B4     	 push {r7}
 1639              	.LCFI108:
 1640              	 .cfi_def_cfa_offset 4
 1641              	 .cfi_offset 7,-4
 1642 0002 85B0     	 sub sp,sp,#20
 1643              	.LCFI109:
 1644              	 .cfi_def_cfa_offset 24
 1645 0004 00AF     	 add r7,sp,#0
 1646              	.LCFI110:
 1647              	 .cfi_def_cfa_register 7
 1648 0006 7860     	 str r0,[r7,#4]
 512:.././hal/sam3u1c/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 1649              	 .loc 1 512 20
 1650 0008 0C4B     	 ldr r3,.L114
 1651              	 .loc 1 512 11
 1652 000a 1B6A     	 ldr r3,[r3,#32]
 1653 000c FB60     	 str r3,[r7,#12]
 513:.././hal/sam3u1c/pmc.c **** 	if (ul_xtal_rc) {
 1654              	 .loc 1 513 5
 1655 000e 7B68     	 ldr r3,[r7,#4]
 1656 0010 002B     	 cmp r3,#0
 1657 0012 04D0     	 beq .L112
 514:.././hal/sam3u1c/pmc.c **** 		mor |=  CKGR_MOR_MOSCSEL;
 1658              	 .loc 1 514 7
 1659 0014 FB68     	 ldr r3,[r7,#12]
 1660 0016 43F08073 	 orr r3,r3,#16777216
 1661 001a FB60     	 str r3,[r7,#12]
 1662 001c 03E0     	 b .L113
 1663              	.L112:
 515:.././hal/sam3u1c/pmc.c **** 	} else {
 516:.././hal/sam3u1c/pmc.c **** 		mor &= ~CKGR_MOR_MOSCSEL;
 1664              	 .loc 1 516 7
 1665 001e FB68     	 ldr r3,[r7,#12]
 1666 0020 23F08073 	 bic r3,r3,#16777216
 1667 0024 FB60     	 str r3,[r7,#12]
 1668              	.L113:
 517:.././hal/sam3u1c/pmc.c **** 	}
 518:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
 1669              	 .loc 1 518 5
 1670 0026 054A     	 ldr r2,.L114
 1671              	 .loc 1 518 38
 1672 0028 FB68     	 ldr r3,[r7,#12]
 1673 002a 43F45C13 	 orr r3,r3,#3604480
 1674              	 .loc 1 518 16
 1675 002e 1362     	 str r3,[r2,#32]
 519:.././hal/sam3u1c/pmc.c **** }
 1676              	 .loc 1 519 1
 1677 0030 00BF     	 nop
 1678 0032 1437     	 adds r7,r7,#20
 1679              	.LCFI111:
 1680              	 .cfi_def_cfa_offset 4
 1681 0034 BD46     	 mov sp,r7
 1682              	.LCFI112:
 1683              	 .cfi_def_cfa_register 13
 1684              	 
 1685 0036 80BC     	 pop {r7}
 1686              	.LCFI113:
 1687              	 .cfi_restore 7
 1688              	 .cfi_def_cfa_offset 0
 1689 0038 7047     	 bx lr
 1690              	.L115:
 1691 003a 00BF     	 .align 2
 1692              	.L114:
 1693 003c 00040E40 	 .word 1074660352
 1694              	 .cfi_endproc
 1695              	.LFE89:
 1697              	 .section .text.pmc_enable_pllack,"ax",%progbits
 1698              	 .align 1
 1699              	 .global pmc_enable_pllack
 1700              	 .syntax unified
 1701              	 .thumb
 1702              	 .thumb_func
 1703              	 .fpu softvfp
 1705              	pmc_enable_pllack:
 1706              	.LFB90:
 520:.././hal/sam3u1c/pmc.c **** 
 521:.././hal/sam3u1c/pmc.c **** /**
 522:.././hal/sam3u1c/pmc.c ****  * \brief Enable PLLA clock.
 523:.././hal/sam3u1c/pmc.c ****  *
 524:.././hal/sam3u1c/pmc.c ****  * \param mula PLLA multiplier.
 525:.././hal/sam3u1c/pmc.c ****  * \param pllacount PLLA counter.
 526:.././hal/sam3u1c/pmc.c ****  * \param diva Divider.
 527:.././hal/sam3u1c/pmc.c ****  */
 528:.././hal/sam3u1c/pmc.c **** void pmc_enable_pllack(uint32_t mula, uint32_t pllacount, uint32_t diva)
 529:.././hal/sam3u1c/pmc.c **** {
 1707              	 .loc 1 529 1
 1708              	 .cfi_startproc
 1709              	 
 1710              	 
 1711 0000 80B5     	 push {r7,lr}
 1712              	.LCFI114:
 1713              	 .cfi_def_cfa_offset 8
 1714              	 .cfi_offset 7,-8
 1715              	 .cfi_offset 14,-4
 1716 0002 84B0     	 sub sp,sp,#16
 1717              	.LCFI115:
 1718              	 .cfi_def_cfa_offset 24
 1719 0004 00AF     	 add r7,sp,#0
 1720              	.LCFI116:
 1721              	 .cfi_def_cfa_register 7
 1722 0006 F860     	 str r0,[r7,#12]
 1723 0008 B960     	 str r1,[r7,#8]
 1724 000a 7A60     	 str r2,[r7,#4]
 530:.././hal/sam3u1c/pmc.c **** 	/* first disable the PLL to unlock the lock */
 531:.././hal/sam3u1c/pmc.c **** 	pmc_disable_pllack();
 1725              	 .loc 1 531 2
 1726 000c 0E4B     	 ldr r3,.L118
 1727 000e 9847     	 blx r3
 1728              	.LVL0:
 532:.././hal/sam3u1c/pmc.c **** 
 533:.././hal/sam3u1c/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP || SAMG)
 534:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
 535:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 536:.././hal/sam3u1c/pmc.c **** #else
 537:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
 1729              	 .loc 1 537 37
 1730 0010 7B68     	 ldr r3,[r7,#4]
 1731 0012 DAB2     	 uxtb r2,r3
 538:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 1732              	 .loc 1 538 4
 1733 0014 BB68     	 ldr r3,[r7,#8]
 1734 0016 1B02     	 lsls r3,r3,#8
 1735 0018 03F47C53 	 and r3,r3,#16128
 537:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 1736              	 .loc 1 537 59
 1737 001c 1A43     	 orrs r2,r2,r3
 1738              	 .loc 1 538 38
 1739 001e FB68     	 ldr r3,[r7,#12]
 1740 0020 1904     	 lsls r1,r3,#16
 1741 0022 0A4B     	 ldr r3,.L118+4
 1742 0024 0B40     	 ands r3,r3,r1
 1743              	 .loc 1 538 36
 1744 0026 1343     	 orrs r3,r3,r2
 537:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 1745              	 .loc 1 537 5
 1746 0028 094A     	 ldr r2,.L118+8
 1747              	 .loc 1 538 36
 1748 002a 43F00053 	 orr r3,r3,#536870912
 537:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 1749              	 .loc 1 537 18
 1750 002e 9362     	 str r3,[r2,#40]
 539:.././hal/sam3u1c/pmc.c **** #endif
 540:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_SR & PMC_SR_LOCKA) == 0);
 1751              	 .loc 1 540 8
 1752 0030 00BF     	 nop
 1753              	.L117:
 1754              	 .loc 1 540 13 discriminator 1
 1755 0032 074B     	 ldr r3,.L118+8
 1756 0034 9B6E     	 ldr r3,[r3,#104]
 1757              	 .loc 1 540 22 discriminator 1
 1758 0036 03F00203 	 and r3,r3,#2
 1759              	 .loc 1 540 8 discriminator 1
 1760 003a 002B     	 cmp r3,#0
 1761 003c F9D0     	 beq .L117
 541:.././hal/sam3u1c/pmc.c **** }
 1762              	 .loc 1 541 1
 1763 003e 00BF     	 nop
 1764 0040 1037     	 adds r7,r7,#16
 1765              	.LCFI117:
 1766              	 .cfi_def_cfa_offset 8
 1767 0042 BD46     	 mov sp,r7
 1768              	.LCFI118:
 1769              	 .cfi_def_cfa_register 13
 1770              	 
 1771 0044 80BD     	 pop {r7,pc}
 1772              	.L119:
 1773 0046 00BF     	 .align 2
 1774              	.L118:
 1775 0048 00000000 	 .word pmc_disable_pllack
 1776 004c 0000FF07 	 .word 134152192
 1777 0050 00040E40 	 .word 1074660352
 1778              	 .cfi_endproc
 1779              	.LFE90:
 1781              	 .section .text.pmc_disable_pllack,"ax",%progbits
 1782              	 .align 1
 1783              	 .global pmc_disable_pllack
 1784              	 .syntax unified
 1785              	 .thumb
 1786              	 .thumb_func
 1787              	 .fpu softvfp
 1789              	pmc_disable_pllack:
 1790              	.LFB91:
 542:.././hal/sam3u1c/pmc.c **** 
 543:.././hal/sam3u1c/pmc.c **** /**
 544:.././hal/sam3u1c/pmc.c ****  * \brief Disable PLLA clock.
 545:.././hal/sam3u1c/pmc.c ****  */
 546:.././hal/sam3u1c/pmc.c **** void pmc_disable_pllack(void)
 547:.././hal/sam3u1c/pmc.c **** {
 1791              	 .loc 1 547 1
 1792              	 .cfi_startproc
 1793              	 
 1794              	 
 1795              	 
 1796 0000 80B4     	 push {r7}
 1797              	.LCFI119:
 1798              	 .cfi_def_cfa_offset 4
 1799              	 .cfi_offset 7,-4
 1800 0002 00AF     	 add r7,sp,#0
 1801              	.LCFI120:
 1802              	 .cfi_def_cfa_register 7
 548:.././hal/sam3u1c/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP || SAMG)
 549:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
 550:.././hal/sam3u1c/pmc.c **** #else
 551:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
 1803              	 .loc 1 551 5
 1804 0004 034B     	 ldr r3,.L121
 1805              	 .loc 1 551 18
 1806 0006 4FF00052 	 mov r2,#536870912
 1807 000a 9A62     	 str r2,[r3,#40]
 552:.././hal/sam3u1c/pmc.c **** #endif
 553:.././hal/sam3u1c/pmc.c **** }
 1808              	 .loc 1 553 1
 1809 000c 00BF     	 nop
 1810 000e BD46     	 mov sp,r7
 1811              	.LCFI121:
 1812              	 .cfi_def_cfa_register 13
 1813              	 
 1814 0010 80BC     	 pop {r7}
 1815              	.LCFI122:
 1816              	 .cfi_restore 7
 1817              	 .cfi_def_cfa_offset 0
 1818 0012 7047     	 bx lr
 1819              	.L122:
 1820              	 .align 2
 1821              	.L121:
 1822 0014 00040E40 	 .word 1074660352
 1823              	 .cfi_endproc
 1824              	.LFE91:
 1826              	 .section .text.pmc_is_locked_pllack,"ax",%progbits
 1827              	 .align 1
 1828              	 .global pmc_is_locked_pllack
 1829              	 .syntax unified
 1830              	 .thumb
 1831              	 .thumb_func
 1832              	 .fpu softvfp
 1834              	pmc_is_locked_pllack:
 1835              	.LFB92:
 554:.././hal/sam3u1c/pmc.c **** 
 555:.././hal/sam3u1c/pmc.c **** /**
 556:.././hal/sam3u1c/pmc.c ****  * \brief Is PLLA locked?
 557:.././hal/sam3u1c/pmc.c ****  *
 558:.././hal/sam3u1c/pmc.c ****  * \retval 0 Not locked.
 559:.././hal/sam3u1c/pmc.c ****  * \retval 1 Locked.
 560:.././hal/sam3u1c/pmc.c ****  */
 561:.././hal/sam3u1c/pmc.c **** uint32_t pmc_is_locked_pllack(void)
 562:.././hal/sam3u1c/pmc.c **** {
 1836              	 .loc 1 562 1
 1837              	 .cfi_startproc
 1838              	 
 1839              	 
 1840              	 
 1841 0000 80B4     	 push {r7}
 1842              	.LCFI123:
 1843              	 .cfi_def_cfa_offset 4
 1844              	 .cfi_offset 7,-4
 1845 0002 00AF     	 add r7,sp,#0
 1846              	.LCFI124:
 1847              	 .cfi_def_cfa_register 7
 563:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_LOCKA);
 1848              	 .loc 1 563 13
 1849 0004 034B     	 ldr r3,.L125
 1850 0006 9B6E     	 ldr r3,[r3,#104]
 1851              	 .loc 1 563 22
 1852 0008 03F00203 	 and r3,r3,#2
 564:.././hal/sam3u1c/pmc.c **** }
 1853              	 .loc 1 564 1
 1854 000c 1846     	 mov r0,r3
 1855 000e BD46     	 mov sp,r7
 1856              	.LCFI125:
 1857              	 .cfi_def_cfa_register 13
 1858              	 
 1859 0010 80BC     	 pop {r7}
 1860              	.LCFI126:
 1861              	 .cfi_restore 7
 1862              	 .cfi_def_cfa_offset 0
 1863 0012 7047     	 bx lr
 1864              	.L126:
 1865              	 .align 2
 1866              	.L125:
 1867 0014 00040E40 	 .word 1074660352
 1868              	 .cfi_endproc
 1869              	.LFE92:
 1871              	 .section .text.pmc_enable_upll_clock,"ax",%progbits
 1872              	 .align 1
 1873              	 .global pmc_enable_upll_clock
 1874              	 .syntax unified
 1875              	 .thumb
 1876              	 .thumb_func
 1877              	 .fpu softvfp
 1879              	pmc_enable_upll_clock:
 1880              	.LFB93:
 565:.././hal/sam3u1c/pmc.c **** 
 566:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP || SAMG55)
 567:.././hal/sam3u1c/pmc.c **** /**
 568:.././hal/sam3u1c/pmc.c ****  * \brief Enable PLLB clock.
 569:.././hal/sam3u1c/pmc.c ****  *
 570:.././hal/sam3u1c/pmc.c ****  * \param mulb PLLB multiplier.
 571:.././hal/sam3u1c/pmc.c ****  * \param pllbcount PLLB counter.
 572:.././hal/sam3u1c/pmc.c ****  * \param divb Divider.
 573:.././hal/sam3u1c/pmc.c ****  */
 574:.././hal/sam3u1c/pmc.c **** void pmc_enable_pllbck(uint32_t mulb, uint32_t pllbcount, uint32_t divb)
 575:.././hal/sam3u1c/pmc.c **** {
 576:.././hal/sam3u1c/pmc.c **** 	/* first disable the PLL to unlock the lock */
 577:.././hal/sam3u1c/pmc.c **** 	pmc_disable_pllbck();
 578:.././hal/sam3u1c/pmc.c **** 
 579:.././hal/sam3u1c/pmc.c **** #if SAMG55
 580:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(divb) |
 581:.././hal/sam3u1c/pmc.c **** 		CKGR_PLLAR_PLLACOUNT(pllbcount) | CKGR_PLLAR_MULA(mulb);
 582:.././hal/sam3u1c/pmc.c **** #else
 583:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLBR =
 584:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLBR_DIVB(divb) | CKGR_PLLBR_PLLBCOUNT(pllbcount)
 585:.././hal/sam3u1c/pmc.c **** 			| CKGR_PLLBR_MULB(mulb);
 586:.././hal/sam3u1c/pmc.c **** #endif
 587:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_SR & PMC_SR_LOCKB) == 0);
 588:.././hal/sam3u1c/pmc.c **** }
 589:.././hal/sam3u1c/pmc.c **** 
 590:.././hal/sam3u1c/pmc.c **** /**
 591:.././hal/sam3u1c/pmc.c ****  * \brief Disable PLLB clock.
 592:.././hal/sam3u1c/pmc.c ****  */
 593:.././hal/sam3u1c/pmc.c **** void pmc_disable_pllbck(void)
 594:.././hal/sam3u1c/pmc.c **** {
 595:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
 596:.././hal/sam3u1c/pmc.c **** }
 597:.././hal/sam3u1c/pmc.c **** 
 598:.././hal/sam3u1c/pmc.c **** /**
 599:.././hal/sam3u1c/pmc.c ****  * \brief Is PLLB locked?
 600:.././hal/sam3u1c/pmc.c ****  *
 601:.././hal/sam3u1c/pmc.c ****  * \retval 0 Not locked.
 602:.././hal/sam3u1c/pmc.c ****  * \retval 1 Locked.
 603:.././hal/sam3u1c/pmc.c ****  */
 604:.././hal/sam3u1c/pmc.c **** uint32_t pmc_is_locked_pllbck(void)
 605:.././hal/sam3u1c/pmc.c **** {
 606:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_LOCKB);
 607:.././hal/sam3u1c/pmc.c **** }
 608:.././hal/sam3u1c/pmc.c **** #endif
 609:.././hal/sam3u1c/pmc.c **** 
 610:.././hal/sam3u1c/pmc.c **** #if (SAM3XA || SAM3U)
 611:.././hal/sam3u1c/pmc.c **** /**
 612:.././hal/sam3u1c/pmc.c ****  * \brief Enable UPLL clock.
 613:.././hal/sam3u1c/pmc.c ****  */
 614:.././hal/sam3u1c/pmc.c **** void pmc_enable_upll_clock(void)
 615:.././hal/sam3u1c/pmc.c **** {
 1881              	 .loc 1 615 1
 1882              	 .cfi_startproc
 1883              	 
 1884              	 
 1885              	 
 1886 0000 80B4     	 push {r7}
 1887              	.LCFI127:
 1888              	 .cfi_def_cfa_offset 4
 1889              	 .cfi_offset 7,-4
 1890 0002 00AF     	 add r7,sp,#0
 1891              	.LCFI128:
 1892              	 .cfi_def_cfa_register 7
 616:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
 1893              	 .loc 1 616 5
 1894 0004 074B     	 ldr r3,.L129
 1895              	 .loc 1 616 17
 1896 0006 4FF44412 	 mov r2,#3211264
 1897 000a DA61     	 str r2,[r3,#28]
 617:.././hal/sam3u1c/pmc.c **** 
 618:.././hal/sam3u1c/pmc.c **** 	/* Wait UTMI PLL Lock Status */
 619:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
 1898              	 .loc 1 619 8
 1899 000c 00BF     	 nop
 1900              	.L128:
 1901              	 .loc 1 619 14 discriminator 1
 1902 000e 054B     	 ldr r3,.L129
 1903 0010 9B6E     	 ldr r3,[r3,#104]
 1904              	 .loc 1 619 23 discriminator 1
 1905 0012 03F04003 	 and r3,r3,#64
 1906              	 .loc 1 619 8 discriminator 1
 1907 0016 002B     	 cmp r3,#0
 1908 0018 F9D0     	 beq .L128
 620:.././hal/sam3u1c/pmc.c **** }
 1909              	 .loc 1 620 1
 1910 001a 00BF     	 nop
 1911 001c BD46     	 mov sp,r7
 1912              	.LCFI129:
 1913              	 .cfi_def_cfa_register 13
 1914              	 
 1915 001e 80BC     	 pop {r7}
 1916              	.LCFI130:
 1917              	 .cfi_restore 7
 1918              	 .cfi_def_cfa_offset 0
 1919 0020 7047     	 bx lr
 1920              	.L130:
 1921 0022 00BF     	 .align 2
 1922              	.L129:
 1923 0024 00040E40 	 .word 1074660352
 1924              	 .cfi_endproc
 1925              	.LFE93:
 1927              	 .section .text.pmc_disable_upll_clock,"ax",%progbits
 1928              	 .align 1
 1929              	 .global pmc_disable_upll_clock
 1930              	 .syntax unified
 1931              	 .thumb
 1932              	 .thumb_func
 1933              	 .fpu softvfp
 1935              	pmc_disable_upll_clock:
 1936              	.LFB94:
 621:.././hal/sam3u1c/pmc.c **** 
 622:.././hal/sam3u1c/pmc.c **** /**
 623:.././hal/sam3u1c/pmc.c ****  * \brief Disable UPLL clock.
 624:.././hal/sam3u1c/pmc.c ****  */
 625:.././hal/sam3u1c/pmc.c **** void pmc_disable_upll_clock(void)
 626:.././hal/sam3u1c/pmc.c **** {
 1937              	 .loc 1 626 1
 1938              	 .cfi_startproc
 1939              	 
 1940              	 
 1941              	 
 1942 0000 80B4     	 push {r7}
 1943              	.LCFI131:
 1944              	 .cfi_def_cfa_offset 4
 1945              	 .cfi_offset 7,-4
 1946 0002 00AF     	 add r7,sp,#0
 1947              	.LCFI132:
 1948              	 .cfi_def_cfa_register 7
 627:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
 1949              	 .loc 1 627 17
 1950 0004 044B     	 ldr r3,.L132
 1951 0006 DB69     	 ldr r3,[r3,#28]
 1952 0008 034A     	 ldr r2,.L132
 1953 000a 23F48033 	 bic r3,r3,#65536
 1954 000e D361     	 str r3,[r2,#28]
 628:.././hal/sam3u1c/pmc.c **** }
 1955              	 .loc 1 628 1
 1956 0010 00BF     	 nop
 1957 0012 BD46     	 mov sp,r7
 1958              	.LCFI133:
 1959              	 .cfi_def_cfa_register 13
 1960              	 
 1961 0014 80BC     	 pop {r7}
 1962              	.LCFI134:
 1963              	 .cfi_restore 7
 1964              	 .cfi_def_cfa_offset 0
 1965 0016 7047     	 bx lr
 1966              	.L133:
 1967              	 .align 2
 1968              	.L132:
 1969 0018 00040E40 	 .word 1074660352
 1970              	 .cfi_endproc
 1971              	.LFE94:
 1973              	 .section .text.pmc_is_locked_upll,"ax",%progbits
 1974              	 .align 1
 1975              	 .global pmc_is_locked_upll
 1976              	 .syntax unified
 1977              	 .thumb
 1978              	 .thumb_func
 1979              	 .fpu softvfp
 1981              	pmc_is_locked_upll:
 1982              	.LFB95:
 629:.././hal/sam3u1c/pmc.c **** 
 630:.././hal/sam3u1c/pmc.c **** /**
 631:.././hal/sam3u1c/pmc.c ****  * \brief Is UPLL locked?
 632:.././hal/sam3u1c/pmc.c ****  *
 633:.././hal/sam3u1c/pmc.c ****  * \retval 0 Not locked.
 634:.././hal/sam3u1c/pmc.c ****  * \retval 1 Locked.
 635:.././hal/sam3u1c/pmc.c ****  */
 636:.././hal/sam3u1c/pmc.c **** uint32_t pmc_is_locked_upll(void)
 637:.././hal/sam3u1c/pmc.c **** {
 1983              	 .loc 1 637 1
 1984              	 .cfi_startproc
 1985              	 
 1986              	 
 1987              	 
 1988 0000 80B4     	 push {r7}
 1989              	.LCFI135:
 1990              	 .cfi_def_cfa_offset 4
 1991              	 .cfi_offset 7,-4
 1992 0002 00AF     	 add r7,sp,#0
 1993              	.LCFI136:
 1994              	 .cfi_def_cfa_register 7
 638:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_LOCKU);
 1995              	 .loc 1 638 13
 1996 0004 034B     	 ldr r3,.L136
 1997 0006 9B6E     	 ldr r3,[r3,#104]
 1998              	 .loc 1 638 22
 1999 0008 03F04003 	 and r3,r3,#64
 639:.././hal/sam3u1c/pmc.c **** }
 2000              	 .loc 1 639 1
 2001 000c 1846     	 mov r0,r3
 2002 000e BD46     	 mov sp,r7
 2003              	.LCFI137:
 2004              	 .cfi_def_cfa_register 13
 2005              	 
 2006 0010 80BC     	 pop {r7}
 2007              	.LCFI138:
 2008              	 .cfi_restore 7
 2009              	 .cfi_def_cfa_offset 0
 2010 0012 7047     	 bx lr
 2011              	.L137:
 2012              	 .align 2
 2013              	.L136:
 2014 0014 00040E40 	 .word 1074660352
 2015              	 .cfi_endproc
 2016              	.LFE95:
 2018              	 .section .text.pmc_enable_periph_clk,"ax",%progbits
 2019              	 .align 1
 2020              	 .global pmc_enable_periph_clk
 2021              	 .syntax unified
 2022              	 .thumb
 2023              	 .thumb_func
 2024              	 .fpu softvfp
 2026              	pmc_enable_periph_clk:
 2027              	.LFB96:
 640:.././hal/sam3u1c/pmc.c **** #endif
 641:.././hal/sam3u1c/pmc.c **** 
 642:.././hal/sam3u1c/pmc.c **** /**
 643:.././hal/sam3u1c/pmc.c ****  * \brief Enable the specified peripheral clock.
 644:.././hal/sam3u1c/pmc.c ****  *
 645:.././hal/sam3u1c/pmc.c ****  * \note The ID must NOT be shifted (i.e., 1 << ID_xxx).
 646:.././hal/sam3u1c/pmc.c ****  *
 647:.././hal/sam3u1c/pmc.c ****  * \param ul_id Peripheral ID (ID_xxx).
 648:.././hal/sam3u1c/pmc.c ****  *
 649:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 650:.././hal/sam3u1c/pmc.c ****  * \retval 1 Invalid parameter.
 651:.././hal/sam3u1c/pmc.c ****  */
 652:.././hal/sam3u1c/pmc.c **** uint32_t pmc_enable_periph_clk(uint32_t ul_id)
 653:.././hal/sam3u1c/pmc.c **** {
 2028              	 .loc 1 653 1
 2029              	 .cfi_startproc
 2030              	 
 2031              	 
 2032              	 
 2033 0000 80B4     	 push {r7}
 2034              	.LCFI139:
 2035              	 .cfi_def_cfa_offset 4
 2036              	 .cfi_offset 7,-4
 2037 0002 83B0     	 sub sp,sp,#12
 2038              	.LCFI140:
 2039              	 .cfi_def_cfa_offset 16
 2040 0004 00AF     	 add r7,sp,#0
 2041              	.LCFI141:
 2042              	 .cfi_def_cfa_register 7
 2043 0006 7860     	 str r0,[r7,#4]
 654:.././hal/sam3u1c/pmc.c **** 	if (ul_id > MAX_PERIPH_ID) {
 2044              	 .loc 1 654 5
 2045 0008 7B68     	 ldr r3,[r7,#4]
 2046 000a 1D2B     	 cmp r3,#29
 2047 000c 01D9     	 bls .L139
 655:.././hal/sam3u1c/pmc.c **** 		return 1;
 2048              	 .loc 1 655 10
 2049 000e 0123     	 movs r3,#1
 2050 0010 15E0     	 b .L140
 2051              	.L139:
 656:.././hal/sam3u1c/pmc.c **** 	}
 657:.././hal/sam3u1c/pmc.c **** 
 658:.././hal/sam3u1c/pmc.c **** 	if (ul_id < 32) {
 2052              	 .loc 1 658 5
 2053 0012 7B68     	 ldr r3,[r7,#4]
 2054 0014 1F2B     	 cmp r3,#31
 2055 0016 11D8     	 bhi .L141
 659:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
 2056              	 .loc 1 659 11
 2057 0018 0B4B     	 ldr r3,.L142
 2058 001a 9A69     	 ldr r2,[r3,#24]
 2059              	 .loc 1 659 29
 2060 001c 0121     	 movs r1,#1
 2061 001e 7B68     	 ldr r3,[r7,#4]
 2062 0020 01FA03F3 	 lsl r3,r1,r3
 2063              	 .loc 1 659 23
 2064 0024 1A40     	 ands r2,r2,r3
 2065              	 .loc 1 659 47
 2066 0026 0121     	 movs r1,#1
 2067 0028 7B68     	 ldr r3,[r7,#4]
 2068 002a 01FA03F3 	 lsl r3,r1,r3
 2069              	 .loc 1 659 6
 2070 002e 9A42     	 cmp r2,r3
 2071 0030 04D0     	 beq .L141
 660:.././hal/sam3u1c/pmc.c **** 			PMC->PMC_PCER0 = 1 << ul_id;
 2072              	 .loc 1 660 23
 2073 0032 0122     	 movs r2,#1
 2074 0034 7B68     	 ldr r3,[r7,#4]
 2075 0036 9A40     	 lsls r2,r2,r3
 2076              	 .loc 1 660 7
 2077 0038 034B     	 ldr r3,.L142
 2078              	 .loc 1 660 19
 2079 003a 1A61     	 str r2,[r3,#16]
 2080              	.L141:
 661:.././hal/sam3u1c/pmc.c **** 		}
 662:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
 663:.././hal/sam3u1c/pmc.c **** 	} else {
 664:.././hal/sam3u1c/pmc.c **** 		ul_id -= 32;
 665:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
 666:.././hal/sam3u1c/pmc.c **** 			PMC->PMC_PCER1 = 1 << ul_id;
 667:.././hal/sam3u1c/pmc.c **** 		}
 668:.././hal/sam3u1c/pmc.c **** #endif
 669:.././hal/sam3u1c/pmc.c **** 	}
 670:.././hal/sam3u1c/pmc.c **** 
 671:.././hal/sam3u1c/pmc.c **** 	return 0;
 2081              	 .loc 1 671 9
 2082 003c 0023     	 movs r3,#0
 2083              	.L140:
 672:.././hal/sam3u1c/pmc.c **** }
 2084              	 .loc 1 672 1
 2085 003e 1846     	 mov r0,r3
 2086 0040 0C37     	 adds r7,r7,#12
 2087              	.LCFI142:
 2088              	 .cfi_def_cfa_offset 4
 2089 0042 BD46     	 mov sp,r7
 2090              	.LCFI143:
 2091              	 .cfi_def_cfa_register 13
 2092              	 
 2093 0044 80BC     	 pop {r7}
 2094              	.LCFI144:
 2095              	 .cfi_restore 7
 2096              	 .cfi_def_cfa_offset 0
 2097 0046 7047     	 bx lr
 2098              	.L143:
 2099              	 .align 2
 2100              	.L142:
 2101 0048 00040E40 	 .word 1074660352
 2102              	 .cfi_endproc
 2103              	.LFE96:
 2105              	 .section .text.pmc_disable_periph_clk,"ax",%progbits
 2106              	 .align 1
 2107              	 .global pmc_disable_periph_clk
 2108              	 .syntax unified
 2109              	 .thumb
 2110              	 .thumb_func
 2111              	 .fpu softvfp
 2113              	pmc_disable_periph_clk:
 2114              	.LFB97:
 673:.././hal/sam3u1c/pmc.c **** 
 674:.././hal/sam3u1c/pmc.c **** /**
 675:.././hal/sam3u1c/pmc.c ****  * \brief Disable the specified peripheral clock.
 676:.././hal/sam3u1c/pmc.c ****  *
 677:.././hal/sam3u1c/pmc.c ****  * \note The ID must NOT be shifted (i.e., 1 << ID_xxx).
 678:.././hal/sam3u1c/pmc.c ****  *
 679:.././hal/sam3u1c/pmc.c ****  * \param ul_id Peripheral ID (ID_xxx).
 680:.././hal/sam3u1c/pmc.c ****  *
 681:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 682:.././hal/sam3u1c/pmc.c ****  * \retval 1 Invalid parameter.
 683:.././hal/sam3u1c/pmc.c ****  */
 684:.././hal/sam3u1c/pmc.c **** uint32_t pmc_disable_periph_clk(uint32_t ul_id)
 685:.././hal/sam3u1c/pmc.c **** {
 2115              	 .loc 1 685 1
 2116              	 .cfi_startproc
 2117              	 
 2118              	 
 2119              	 
 2120 0000 80B4     	 push {r7}
 2121              	.LCFI145:
 2122              	 .cfi_def_cfa_offset 4
 2123              	 .cfi_offset 7,-4
 2124 0002 83B0     	 sub sp,sp,#12
 2125              	.LCFI146:
 2126              	 .cfi_def_cfa_offset 16
 2127 0004 00AF     	 add r7,sp,#0
 2128              	.LCFI147:
 2129              	 .cfi_def_cfa_register 7
 2130 0006 7860     	 str r0,[r7,#4]
 686:.././hal/sam3u1c/pmc.c **** 	if (ul_id > MAX_PERIPH_ID) {
 2131              	 .loc 1 686 5
 2132 0008 7B68     	 ldr r3,[r7,#4]
 2133 000a 1D2B     	 cmp r3,#29
 2134 000c 01D9     	 bls .L145
 687:.././hal/sam3u1c/pmc.c **** 		return 1;
 2135              	 .loc 1 687 10
 2136 000e 0123     	 movs r3,#1
 2137 0010 15E0     	 b .L146
 2138              	.L145:
 688:.././hal/sam3u1c/pmc.c **** 	}
 689:.././hal/sam3u1c/pmc.c **** 
 690:.././hal/sam3u1c/pmc.c **** 	if (ul_id < 32) {
 2139              	 .loc 1 690 5
 2140 0012 7B68     	 ldr r3,[r7,#4]
 2141 0014 1F2B     	 cmp r3,#31
 2142 0016 11D8     	 bhi .L147
 691:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
 2143              	 .loc 1 691 11
 2144 0018 0B4B     	 ldr r3,.L148
 2145 001a 9A69     	 ldr r2,[r3,#24]
 2146              	 .loc 1 691 29
 2147 001c 0121     	 movs r1,#1
 2148 001e 7B68     	 ldr r3,[r7,#4]
 2149 0020 01FA03F3 	 lsl r3,r1,r3
 2150              	 .loc 1 691 23
 2151 0024 1A40     	 ands r2,r2,r3
 2152              	 .loc 1 691 47
 2153 0026 0121     	 movs r1,#1
 2154 0028 7B68     	 ldr r3,[r7,#4]
 2155 002a 01FA03F3 	 lsl r3,r1,r3
 2156              	 .loc 1 691 6
 2157 002e 9A42     	 cmp r2,r3
 2158 0030 04D1     	 bne .L147
 692:.././hal/sam3u1c/pmc.c **** 			PMC->PMC_PCDR0 = 1 << ul_id;
 2159              	 .loc 1 692 23
 2160 0032 0122     	 movs r2,#1
 2161 0034 7B68     	 ldr r3,[r7,#4]
 2162 0036 9A40     	 lsls r2,r2,r3
 2163              	 .loc 1 692 7
 2164 0038 034B     	 ldr r3,.L148
 2165              	 .loc 1 692 19
 2166 003a 5A61     	 str r2,[r3,#20]
 2167              	.L147:
 693:.././hal/sam3u1c/pmc.c **** 		}
 694:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
 695:.././hal/sam3u1c/pmc.c **** 	} else {
 696:.././hal/sam3u1c/pmc.c **** 		ul_id -= 32;
 697:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
 698:.././hal/sam3u1c/pmc.c **** 			PMC->PMC_PCDR1 = 1 << ul_id;
 699:.././hal/sam3u1c/pmc.c **** 		}
 700:.././hal/sam3u1c/pmc.c **** #endif
 701:.././hal/sam3u1c/pmc.c **** 	}
 702:.././hal/sam3u1c/pmc.c **** 	return 0;
 2168              	 .loc 1 702 9
 2169 003c 0023     	 movs r3,#0
 2170              	.L146:
 703:.././hal/sam3u1c/pmc.c **** }
 2171              	 .loc 1 703 1
 2172 003e 1846     	 mov r0,r3
 2173 0040 0C37     	 adds r7,r7,#12
 2174              	.LCFI148:
 2175              	 .cfi_def_cfa_offset 4
 2176 0042 BD46     	 mov sp,r7
 2177              	.LCFI149:
 2178              	 .cfi_def_cfa_register 13
 2179              	 
 2180 0044 80BC     	 pop {r7}
 2181              	.LCFI150:
 2182              	 .cfi_restore 7
 2183              	 .cfi_def_cfa_offset 0
 2184 0046 7047     	 bx lr
 2185              	.L149:
 2186              	 .align 2
 2187              	.L148:
 2188 0048 00040E40 	 .word 1074660352
 2189              	 .cfi_endproc
 2190              	.LFE97:
 2192              	 .section .text.pmc_enable_all_periph_clk,"ax",%progbits
 2193              	 .align 1
 2194              	 .global pmc_enable_all_periph_clk
 2195              	 .syntax unified
 2196              	 .thumb
 2197              	 .thumb_func
 2198              	 .fpu softvfp
 2200              	pmc_enable_all_periph_clk:
 2201              	.LFB98:
 704:.././hal/sam3u1c/pmc.c **** 
 705:.././hal/sam3u1c/pmc.c **** /**
 706:.././hal/sam3u1c/pmc.c ****  * \brief Enable all peripheral clocks.
 707:.././hal/sam3u1c/pmc.c ****  */
 708:.././hal/sam3u1c/pmc.c **** void pmc_enable_all_periph_clk(void)
 709:.././hal/sam3u1c/pmc.c **** {
 2202              	 .loc 1 709 1
 2203              	 .cfi_startproc
 2204              	 
 2205              	 
 2206              	 
 2207 0000 80B4     	 push {r7}
 2208              	.LCFI151:
 2209              	 .cfi_def_cfa_offset 4
 2210              	 .cfi_offset 7,-4
 2211 0002 00AF     	 add r7,sp,#0
 2212              	.LCFI152:
 2213              	 .cfi_def_cfa_register 7
 710:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCER0 = PMC_MASK_STATUS0;
 2214              	 .loc 1 710 5
 2215 0004 074B     	 ldr r3,.L152
 2216              	 .loc 1 710 17
 2217 0006 6FF00302 	 mvn r2,#3
 2218 000a 1A61     	 str r2,[r3,#16]
 711:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_PCSR0 & PMC_MASK_STATUS0) != PMC_MASK_STATUS0);
 2219              	 .loc 1 711 8
 2220 000c 00BF     	 nop
 2221              	.L151:
 2222              	 .loc 1 711 13 discriminator 1
 2223 000e 054B     	 ldr r3,.L152
 2224 0010 9B69     	 ldr r3,[r3,#24]
 2225              	 .loc 1 711 25 discriminator 1
 2226 0012 23F00303 	 bic r3,r3,#3
 2227              	 .loc 1 711 8 discriminator 1
 2228 0016 13F1040F 	 cmn r3,#4
 2229 001a F8D1     	 bne .L151
 712:.././hal/sam3u1c/pmc.c **** 
 713:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
 714:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCER1 = PMC_MASK_STATUS1;
 715:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_PCSR1 & PMC_MASK_STATUS1) != PMC_MASK_STATUS1);
 716:.././hal/sam3u1c/pmc.c **** #endif
 717:.././hal/sam3u1c/pmc.c **** }
 2230              	 .loc 1 717 1
 2231 001c 00BF     	 nop
 2232 001e BD46     	 mov sp,r7
 2233              	.LCFI153:
 2234              	 .cfi_def_cfa_register 13
 2235              	 
 2236 0020 80BC     	 pop {r7}
 2237              	.LCFI154:
 2238              	 .cfi_restore 7
 2239              	 .cfi_def_cfa_offset 0
 2240 0022 7047     	 bx lr
 2241              	.L153:
 2242              	 .align 2
 2243              	.L152:
 2244 0024 00040E40 	 .word 1074660352
 2245              	 .cfi_endproc
 2246              	.LFE98:
 2248              	 .section .text.pmc_disable_all_periph_clk,"ax",%progbits
 2249              	 .align 1
 2250              	 .global pmc_disable_all_periph_clk
 2251              	 .syntax unified
 2252              	 .thumb
 2253              	 .thumb_func
 2254              	 .fpu softvfp
 2256              	pmc_disable_all_periph_clk:
 2257              	.LFB99:
 718:.././hal/sam3u1c/pmc.c **** 
 719:.././hal/sam3u1c/pmc.c **** /**
 720:.././hal/sam3u1c/pmc.c ****  * \brief Disable all peripheral clocks.
 721:.././hal/sam3u1c/pmc.c ****  */
 722:.././hal/sam3u1c/pmc.c **** void pmc_disable_all_periph_clk(void)
 723:.././hal/sam3u1c/pmc.c **** {
 2258              	 .loc 1 723 1
 2259              	 .cfi_startproc
 2260              	 
 2261              	 
 2262              	 
 2263 0000 80B4     	 push {r7}
 2264              	.LCFI155:
 2265              	 .cfi_def_cfa_offset 4
 2266              	 .cfi_offset 7,-4
 2267 0002 00AF     	 add r7,sp,#0
 2268              	.LCFI156:
 2269              	 .cfi_def_cfa_register 7
 724:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCDR0 = PMC_MASK_STATUS0;
 2270              	 .loc 1 724 5
 2271 0004 074B     	 ldr r3,.L156
 2272              	 .loc 1 724 17
 2273 0006 6FF00302 	 mvn r2,#3
 2274 000a 5A61     	 str r2,[r3,#20]
 725:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_PCSR0 & PMC_MASK_STATUS0) != 0);
 2275              	 .loc 1 725 8
 2276 000c 00BF     	 nop
 2277              	.L155:
 2278              	 .loc 1 725 13 discriminator 1
 2279 000e 054B     	 ldr r3,.L156
 2280 0010 9B69     	 ldr r3,[r3,#24]
 2281              	 .loc 1 725 25 discriminator 1
 2282 0012 23F00303 	 bic r3,r3,#3
 2283              	 .loc 1 725 8 discriminator 1
 2284 0016 002B     	 cmp r3,#0
 2285 0018 F9D1     	 bne .L155
 726:.././hal/sam3u1c/pmc.c **** 
 727:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
 728:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCDR1 = PMC_MASK_STATUS1;
 729:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_PCSR1 & PMC_MASK_STATUS1) != 0);
 730:.././hal/sam3u1c/pmc.c **** #endif
 731:.././hal/sam3u1c/pmc.c **** }
 2286              	 .loc 1 731 1
 2287 001a 00BF     	 nop
 2288 001c BD46     	 mov sp,r7
 2289              	.LCFI157:
 2290              	 .cfi_def_cfa_register 13
 2291              	 
 2292 001e 80BC     	 pop {r7}
 2293              	.LCFI158:
 2294              	 .cfi_restore 7
 2295              	 .cfi_def_cfa_offset 0
 2296 0020 7047     	 bx lr
 2297              	.L157:
 2298 0022 00BF     	 .align 2
 2299              	.L156:
 2300 0024 00040E40 	 .word 1074660352
 2301              	 .cfi_endproc
 2302              	.LFE99:
 2304              	 .section .text.pmc_is_periph_clk_enabled,"ax",%progbits
 2305              	 .align 1
 2306              	 .global pmc_is_periph_clk_enabled
 2307              	 .syntax unified
 2308              	 .thumb
 2309              	 .thumb_func
 2310              	 .fpu softvfp
 2312              	pmc_is_periph_clk_enabled:
 2313              	.LFB100:
 732:.././hal/sam3u1c/pmc.c **** 
 733:.././hal/sam3u1c/pmc.c **** /**
 734:.././hal/sam3u1c/pmc.c ****  * \brief Check if the specified peripheral clock is enabled.
 735:.././hal/sam3u1c/pmc.c ****  *
 736:.././hal/sam3u1c/pmc.c ****  * \note The ID must NOT be shifted (i.e., 1 << ID_xxx).
 737:.././hal/sam3u1c/pmc.c ****  *
 738:.././hal/sam3u1c/pmc.c ****  * \param ul_id Peripheral ID (ID_xxx).
 739:.././hal/sam3u1c/pmc.c ****  *
 740:.././hal/sam3u1c/pmc.c ****  * \retval 0 Peripheral clock is disabled or unknown.
 741:.././hal/sam3u1c/pmc.c ****  * \retval 1 Peripheral clock is enabled.
 742:.././hal/sam3u1c/pmc.c ****  */
 743:.././hal/sam3u1c/pmc.c **** uint32_t pmc_is_periph_clk_enabled(uint32_t ul_id)
 744:.././hal/sam3u1c/pmc.c **** {
 2314              	 .loc 1 744 1
 2315              	 .cfi_startproc
 2316              	 
 2317              	 
 2318              	 
 2319 0000 80B4     	 push {r7}
 2320              	.LCFI159:
 2321              	 .cfi_def_cfa_offset 4
 2322              	 .cfi_offset 7,-4
 2323 0002 83B0     	 sub sp,sp,#12
 2324              	.LCFI160:
 2325              	 .cfi_def_cfa_offset 16
 2326 0004 00AF     	 add r7,sp,#0
 2327              	.LCFI161:
 2328              	 .cfi_def_cfa_register 7
 2329 0006 7860     	 str r0,[r7,#4]
 745:.././hal/sam3u1c/pmc.c **** 	if (ul_id > MAX_PERIPH_ID) {
 2330              	 .loc 1 745 5
 2331 0008 7B68     	 ldr r3,[r7,#4]
 2332 000a 1D2B     	 cmp r3,#29
 2333 000c 01D9     	 bls .L159
 746:.././hal/sam3u1c/pmc.c **** 		return 0;
 2334              	 .loc 1 746 10
 2335 000e 0023     	 movs r3,#0
 2336 0010 0BE0     	 b .L160
 2337              	.L159:
 747:.././hal/sam3u1c/pmc.c **** 	}
 748:.././hal/sam3u1c/pmc.c **** 
 749:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
 750:.././hal/sam3u1c/pmc.c **** 	if (ul_id < 32) {
 751:.././hal/sam3u1c/pmc.c **** #endif
 752:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR0 & (1u << ul_id))) {
 2338              	 .loc 1 752 11
 2339 0012 084B     	 ldr r3,.L162
 2340 0014 9A69     	 ldr r2,[r3,#24]
 2341              	 .loc 1 752 29
 2342 0016 0121     	 movs r1,#1
 2343 0018 7B68     	 ldr r3,[r7,#4]
 2344 001a 01FA03F3 	 lsl r3,r1,r3
 2345              	 .loc 1 752 23
 2346 001e 1340     	 ands r3,r3,r2
 2347              	 .loc 1 752 6
 2348 0020 002B     	 cmp r3,#0
 2349 0022 01D0     	 beq .L161
 753:.././hal/sam3u1c/pmc.c **** 			return 1;
 2350              	 .loc 1 753 11
 2351 0024 0123     	 movs r3,#1
 2352 0026 00E0     	 b .L160
 2353              	.L161:
 754:.././hal/sam3u1c/pmc.c **** 		} else {
 755:.././hal/sam3u1c/pmc.c **** 			return 0;
 2354              	 .loc 1 755 11
 2355 0028 0023     	 movs r3,#0
 2356              	.L160:
 756:.././hal/sam3u1c/pmc.c **** 		}
 757:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
 758:.././hal/sam3u1c/pmc.c **** 	} else {
 759:.././hal/sam3u1c/pmc.c **** 		ul_id -= 32;
 760:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id))) {
 761:.././hal/sam3u1c/pmc.c **** 			return 1;
 762:.././hal/sam3u1c/pmc.c **** 		} else {
 763:.././hal/sam3u1c/pmc.c **** 			return 0;
 764:.././hal/sam3u1c/pmc.c **** 		}
 765:.././hal/sam3u1c/pmc.c **** 	}
 766:.././hal/sam3u1c/pmc.c **** #endif
 767:.././hal/sam3u1c/pmc.c **** }
 2357              	 .loc 1 767 1
 2358 002a 1846     	 mov r0,r3
 2359 002c 0C37     	 adds r7,r7,#12
 2360              	.LCFI162:
 2361              	 .cfi_def_cfa_offset 4
 2362 002e BD46     	 mov sp,r7
 2363              	.LCFI163:
 2364              	 .cfi_def_cfa_register 13
 2365              	 
 2366 0030 80BC     	 pop {r7}
 2367              	.LCFI164:
 2368              	 .cfi_restore 7
 2369              	 .cfi_def_cfa_offset 0
 2370 0032 7047     	 bx lr
 2371              	.L163:
 2372              	 .align 2
 2373              	.L162:
 2374 0034 00040E40 	 .word 1074660352
 2375              	 .cfi_endproc
 2376              	.LFE100:
 2378              	 .section .text.pmc_pck_set_prescaler,"ax",%progbits
 2379              	 .align 1
 2380              	 .global pmc_pck_set_prescaler
 2381              	 .syntax unified
 2382              	 .thumb
 2383              	 .thumb_func
 2384              	 .fpu softvfp
 2386              	pmc_pck_set_prescaler:
 2387              	.LFB101:
 768:.././hal/sam3u1c/pmc.c **** 
 769:.././hal/sam3u1c/pmc.c **** /**
 770:.././hal/sam3u1c/pmc.c ****  * \brief Set the prescaler for the specified programmable clock.
 771:.././hal/sam3u1c/pmc.c ****  *
 772:.././hal/sam3u1c/pmc.c ****  * \param ul_id Peripheral ID.
 773:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Prescaler value.
 774:.././hal/sam3u1c/pmc.c ****  */
 775:.././hal/sam3u1c/pmc.c **** void pmc_pck_set_prescaler(uint32_t ul_id, uint32_t ul_pres)
 776:.././hal/sam3u1c/pmc.c **** {
 2388              	 .loc 1 776 1
 2389              	 .cfi_startproc
 2390              	 
 2391              	 
 2392              	 
 2393 0000 80B4     	 push {r7}
 2394              	.LCFI165:
 2395              	 .cfi_def_cfa_offset 4
 2396              	 .cfi_offset 7,-4
 2397 0002 83B0     	 sub sp,sp,#12
 2398              	.LCFI166:
 2399              	 .cfi_def_cfa_offset 16
 2400 0004 00AF     	 add r7,sp,#0
 2401              	.LCFI167:
 2402              	 .cfi_def_cfa_register 7
 2403 0006 7860     	 str r0,[r7,#4]
 2404 0008 3960     	 str r1,[r7]
 777:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 778:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_PRES_Msk) | ul_pres;
 2405              	 .loc 1 778 8
 2406 000a 144A     	 ldr r2,.L168
 2407              	 .loc 1 778 17
 2408 000c 7B68     	 ldr r3,[r7,#4]
 2409 000e 1033     	 adds r3,r3,#16
 2410 0010 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2411              	 .loc 1 778 25
 2412 0014 23F07002 	 bic r2,r3,#112
 777:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 2413              	 .loc 1 777 5
 2414 0018 1049     	 ldr r1,.L168
 2415              	 .loc 1 778 46
 2416 001a 3B68     	 ldr r3,[r7]
 2417 001c 1A43     	 orrs r2,r2,r3
 777:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 2418              	 .loc 1 777 22
 2419 001e 7B68     	 ldr r3,[r7,#4]
 2420 0020 1033     	 adds r3,r3,#16
 2421 0022 41F82320 	 str r2,[r1,r3,lsl#2]
 779:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
 2422              	 .loc 1 779 8
 2423 0026 00BF     	 nop
 2424              	.L166:
 2425              	 .loc 1 779 13
 2426 0028 0C4B     	 ldr r3,.L168
 2427 002a 1A68     	 ldr r2,[r3]
 2428              	 .loc 1 779 41
 2429 002c 4FF48071 	 mov r1,#256
 2430 0030 7B68     	 ldr r3,[r7,#4]
 2431 0032 01FA03F3 	 lsl r3,r1,r3
 2432              	 .loc 1 779 24
 2433 0036 1340     	 ands r3,r3,r2
 2434              	 .loc 1 779 8
 2435 0038 002B     	 cmp r3,#0
 2436 003a 09D0     	 beq .L167
 780:.././hal/sam3u1c/pmc.c **** 			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
 2437              	 .loc 1 780 12
 2438 003c 074B     	 ldr r3,.L168
 2439 003e 9A6E     	 ldr r2,[r3,#104]
 2440              	 .loc 1 780 39
 2441 0040 4FF48071 	 mov r1,#256
 2442 0044 7B68     	 ldr r3,[r7,#4]
 2443 0046 01FA03F3 	 lsl r3,r1,r3
 2444              	 .loc 1 780 21
 2445 004a 1340     	 ands r3,r3,r2
 2446              	 .loc 1 780 4
 2447 004c 002B     	 cmp r3,#0
 2448 004e EBD0     	 beq .L166
 2449              	.L167:
 781:.././hal/sam3u1c/pmc.c **** }
 2450              	 .loc 1 781 1
 2451 0050 00BF     	 nop
 2452 0052 0C37     	 adds r7,r7,#12
 2453              	.LCFI168:
 2454              	 .cfi_def_cfa_offset 4
 2455 0054 BD46     	 mov sp,r7
 2456              	.LCFI169:
 2457              	 .cfi_def_cfa_register 13
 2458              	 
 2459 0056 80BC     	 pop {r7}
 2460              	.LCFI170:
 2461              	 .cfi_restore 7
 2462              	 .cfi_def_cfa_offset 0
 2463 0058 7047     	 bx lr
 2464              	.L169:
 2465 005a 00BF     	 .align 2
 2466              	.L168:
 2467 005c 00040E40 	 .word 1074660352
 2468              	 .cfi_endproc
 2469              	.LFE101:
 2471              	 .section .text.pmc_pck_set_source,"ax",%progbits
 2472              	 .align 1
 2473              	 .global pmc_pck_set_source
 2474              	 .syntax unified
 2475              	 .thumb
 2476              	 .thumb_func
 2477              	 .fpu softvfp
 2479              	pmc_pck_set_source:
 2480              	.LFB102:
 782:.././hal/sam3u1c/pmc.c **** 
 783:.././hal/sam3u1c/pmc.c **** /**
 784:.././hal/sam3u1c/pmc.c ****  * \brief Set the source oscillator for the specified programmable clock.
 785:.././hal/sam3u1c/pmc.c ****  *
 786:.././hal/sam3u1c/pmc.c ****  * \param ul_id Peripheral ID.
 787:.././hal/sam3u1c/pmc.c ****  * \param ul_source Source selection value.
 788:.././hal/sam3u1c/pmc.c ****  */
 789:.././hal/sam3u1c/pmc.c **** void pmc_pck_set_source(uint32_t ul_id, uint32_t ul_source)
 790:.././hal/sam3u1c/pmc.c **** {
 2481              	 .loc 1 790 1
 2482              	 .cfi_startproc
 2483              	 
 2484              	 
 2485              	 
 2486 0000 80B4     	 push {r7}
 2487              	.LCFI171:
 2488              	 .cfi_def_cfa_offset 4
 2489              	 .cfi_offset 7,-4
 2490 0002 83B0     	 sub sp,sp,#12
 2491              	.LCFI172:
 2492              	 .cfi_def_cfa_offset 16
 2493 0004 00AF     	 add r7,sp,#0
 2494              	.LCFI173:
 2495              	 .cfi_def_cfa_register 7
 2496 0006 7860     	 str r0,[r7,#4]
 2497 0008 3960     	 str r1,[r7]
 791:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 792:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_CSS_Msk) | ul_source;
 2498              	 .loc 1 792 8
 2499 000a 144A     	 ldr r2,.L174
 2500              	 .loc 1 792 17
 2501 000c 7B68     	 ldr r3,[r7,#4]
 2502 000e 1033     	 adds r3,r3,#16
 2503 0010 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2504              	 .loc 1 792 25
 2505 0014 23F00702 	 bic r2,r3,#7
 791:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 2506              	 .loc 1 791 5
 2507 0018 1049     	 ldr r1,.L174
 2508              	 .loc 1 792 45
 2509 001a 3B68     	 ldr r3,[r7]
 2510 001c 1A43     	 orrs r2,r2,r3
 791:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 2511              	 .loc 1 791 22
 2512 001e 7B68     	 ldr r3,[r7,#4]
 2513 0020 1033     	 adds r3,r3,#16
 2514 0022 41F82320 	 str r2,[r1,r3,lsl#2]
 793:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
 2515              	 .loc 1 793 8
 2516 0026 00BF     	 nop
 2517              	.L172:
 2518              	 .loc 1 793 13
 2519 0028 0C4B     	 ldr r3,.L174
 2520 002a 1A68     	 ldr r2,[r3]
 2521              	 .loc 1 793 41
 2522 002c 4FF48071 	 mov r1,#256
 2523 0030 7B68     	 ldr r3,[r7,#4]
 2524 0032 01FA03F3 	 lsl r3,r1,r3
 2525              	 .loc 1 793 24
 2526 0036 1340     	 ands r3,r3,r2
 2527              	 .loc 1 793 8
 2528 0038 002B     	 cmp r3,#0
 2529 003a 09D0     	 beq .L173
 794:.././hal/sam3u1c/pmc.c **** 			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
 2530              	 .loc 1 794 12
 2531 003c 074B     	 ldr r3,.L174
 2532 003e 9A6E     	 ldr r2,[r3,#104]
 2533              	 .loc 1 794 39
 2534 0040 4FF48071 	 mov r1,#256
 2535 0044 7B68     	 ldr r3,[r7,#4]
 2536 0046 01FA03F3 	 lsl r3,r1,r3
 2537              	 .loc 1 794 21
 2538 004a 1340     	 ands r3,r3,r2
 2539              	 .loc 1 794 4
 2540 004c 002B     	 cmp r3,#0
 2541 004e EBD0     	 beq .L172
 2542              	.L173:
 795:.././hal/sam3u1c/pmc.c **** }
 2543              	 .loc 1 795 1
 2544 0050 00BF     	 nop
 2545 0052 0C37     	 adds r7,r7,#12
 2546              	.LCFI174:
 2547              	 .cfi_def_cfa_offset 4
 2548 0054 BD46     	 mov sp,r7
 2549              	.LCFI175:
 2550              	 .cfi_def_cfa_register 13
 2551              	 
 2552 0056 80BC     	 pop {r7}
 2553              	.LCFI176:
 2554              	 .cfi_restore 7
 2555              	 .cfi_def_cfa_offset 0
 2556 0058 7047     	 bx lr
 2557              	.L175:
 2558 005a 00BF     	 .align 2
 2559              	.L174:
 2560 005c 00040E40 	 .word 1074660352
 2561              	 .cfi_endproc
 2562              	.LFE102:
 2564              	 .section .text.pmc_switch_pck_to_sclk,"ax",%progbits
 2565              	 .align 1
 2566              	 .global pmc_switch_pck_to_sclk
 2567              	 .syntax unified
 2568              	 .thumb
 2569              	 .thumb_func
 2570              	 .fpu softvfp
 2572              	pmc_switch_pck_to_sclk:
 2573              	.LFB103:
 796:.././hal/sam3u1c/pmc.c **** 
 797:.././hal/sam3u1c/pmc.c **** /**
 798:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to slow clock.
 799:.././hal/sam3u1c/pmc.c ****  *
 800:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 801:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 802:.././hal/sam3u1c/pmc.c ****  *
 803:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 804:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 805:.././hal/sam3u1c/pmc.c ****  */
 806:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_sclk(uint32_t ul_id, uint32_t ul_pres)
 807:.././hal/sam3u1c/pmc.c **** {
 2574              	 .loc 1 807 1
 2575              	 .cfi_startproc
 2576              	 
 2577              	 
 2578              	 
 2579 0000 80B4     	 push {r7}
 2580              	.LCFI177:
 2581              	 .cfi_def_cfa_offset 4
 2582              	 .cfi_offset 7,-4
 2583 0002 85B0     	 sub sp,sp,#20
 2584              	.LCFI178:
 2585              	 .cfi_def_cfa_offset 24
 2586 0004 00AF     	 add r7,sp,#0
 2587              	.LCFI179:
 2588              	 .cfi_def_cfa_register 7
 2589 0006 7860     	 str r0,[r7,#4]
 2590 0008 3960     	 str r1,[r7]
 808:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 809:.././hal/sam3u1c/pmc.c **** 
 810:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_SLOW_CLK | ul_pres;
 2591              	 .loc 1 810 5
 2592 000a 1149     	 ldr r1,.L181
 2593              	 .loc 1 810 22
 2594 000c 7B68     	 ldr r3,[r7,#4]
 2595 000e 1033     	 adds r3,r3,#16
 2596 0010 3A68     	 ldr r2,[r7]
 2597 0012 41F82320 	 str r2,[r1,r3,lsl#2]
 811:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2598              	 .loc 1 811 18
 2599 0016 4FF40063 	 mov r3,#2048
 2600 001a FB60     	 str r3,[r7,#12]
 2601              	 .loc 1 811 2
 2602 001c 07E0     	 b .L177
 2603              	.L180:
 812:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 813:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2604              	 .loc 1 813 6
 2605 001e FB68     	 ldr r3,[r7,#12]
 2606 0020 002B     	 cmp r3,#0
 2607 0022 01D1     	 bne .L178
 814:.././hal/sam3u1c/pmc.c **** 			return 1;
 2608              	 .loc 1 814 11
 2609 0024 0123     	 movs r3,#1
 2610 0026 0DE0     	 b .L179
 2611              	.L178:
 812:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2612              	 .loc 1 812 46 discriminator 1
 2613 0028 FB68     	 ldr r3,[r7,#12]
 2614 002a 013B     	 subs r3,r3,#1
 2615 002c FB60     	 str r3,[r7,#12]
 2616              	.L177:
 812:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2617              	 .loc 1 812 7 discriminator 1
 2618 002e 084B     	 ldr r3,.L181
 2619 0030 9A6E     	 ldr r2,[r3,#104]
 812:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2620              	 .loc 1 812 34 discriminator 1
 2621 0032 4FF48071 	 mov r1,#256
 2622 0036 7B68     	 ldr r3,[r7,#4]
 2623 0038 01FA03F3 	 lsl r3,r1,r3
 812:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2624              	 .loc 1 812 16 discriminator 1
 2625 003c 1340     	 ands r3,r3,r2
 811:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2626              	 .loc 1 811 2 discriminator 1
 2627 003e 002B     	 cmp r3,#0
 2628 0040 EDD0     	 beq .L180
 815:.././hal/sam3u1c/pmc.c **** 		}
 816:.././hal/sam3u1c/pmc.c **** 	}
 817:.././hal/sam3u1c/pmc.c **** 
 818:.././hal/sam3u1c/pmc.c **** 	return 0;
 2629              	 .loc 1 818 9
 2630 0042 0023     	 movs r3,#0
 2631              	.L179:
 819:.././hal/sam3u1c/pmc.c **** }
 2632              	 .loc 1 819 1
 2633 0044 1846     	 mov r0,r3
 2634 0046 1437     	 adds r7,r7,#20
 2635              	.LCFI180:
 2636              	 .cfi_def_cfa_offset 4
 2637 0048 BD46     	 mov sp,r7
 2638              	.LCFI181:
 2639              	 .cfi_def_cfa_register 13
 2640              	 
 2641 004a 80BC     	 pop {r7}
 2642              	.LCFI182:
 2643              	 .cfi_restore 7
 2644              	 .cfi_def_cfa_offset 0
 2645 004c 7047     	 bx lr
 2646              	.L182:
 2647 004e 00BF     	 .align 2
 2648              	.L181:
 2649 0050 00040E40 	 .word 1074660352
 2650              	 .cfi_endproc
 2651              	.LFE103:
 2653              	 .section .text.pmc_switch_pck_to_mainck,"ax",%progbits
 2654              	 .align 1
 2655              	 .global pmc_switch_pck_to_mainck
 2656              	 .syntax unified
 2657              	 .thumb
 2658              	 .thumb_func
 2659              	 .fpu softvfp
 2661              	pmc_switch_pck_to_mainck:
 2662              	.LFB104:
 820:.././hal/sam3u1c/pmc.c **** 
 821:.././hal/sam3u1c/pmc.c **** /**
 822:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to main clock.
 823:.././hal/sam3u1c/pmc.c ****  *
 824:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 825:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 826:.././hal/sam3u1c/pmc.c ****  *
 827:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 828:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 829:.././hal/sam3u1c/pmc.c ****  */
 830:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_mainck(uint32_t ul_id, uint32_t ul_pres)
 831:.././hal/sam3u1c/pmc.c **** {
 2663              	 .loc 1 831 1
 2664              	 .cfi_startproc
 2665              	 
 2666              	 
 2667              	 
 2668 0000 80B4     	 push {r7}
 2669              	.LCFI183:
 2670              	 .cfi_def_cfa_offset 4
 2671              	 .cfi_offset 7,-4
 2672 0002 85B0     	 sub sp,sp,#20
 2673              	.LCFI184:
 2674              	 .cfi_def_cfa_offset 24
 2675 0004 00AF     	 add r7,sp,#0
 2676              	.LCFI185:
 2677              	 .cfi_def_cfa_register 7
 2678 0006 7860     	 str r0,[r7,#4]
 2679 0008 3960     	 str r1,[r7]
 832:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 833:.././hal/sam3u1c/pmc.c **** 
 834:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MAIN_CLK | ul_pres;
 2680              	 .loc 1 834 5
 2681 000a 1249     	 ldr r1,.L188
 2682              	 .loc 1 834 45
 2683 000c 3B68     	 ldr r3,[r7]
 2684 000e 43F00102 	 orr r2,r3,#1
 2685              	 .loc 1 834 22
 2686 0012 7B68     	 ldr r3,[r7,#4]
 2687 0014 1033     	 adds r3,r3,#16
 2688 0016 41F82320 	 str r2,[r1,r3,lsl#2]
 835:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2689              	 .loc 1 835 18
 2690 001a 4FF40063 	 mov r3,#2048
 2691 001e FB60     	 str r3,[r7,#12]
 2692              	 .loc 1 835 2
 2693 0020 07E0     	 b .L184
 2694              	.L187:
 836:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 837:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2695              	 .loc 1 837 6
 2696 0022 FB68     	 ldr r3,[r7,#12]
 2697 0024 002B     	 cmp r3,#0
 2698 0026 01D1     	 bne .L185
 838:.././hal/sam3u1c/pmc.c **** 			return 1;
 2699              	 .loc 1 838 11
 2700 0028 0123     	 movs r3,#1
 2701 002a 0DE0     	 b .L186
 2702              	.L185:
 836:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2703              	 .loc 1 836 46 discriminator 1
 2704 002c FB68     	 ldr r3,[r7,#12]
 2705 002e 013B     	 subs r3,r3,#1
 2706 0030 FB60     	 str r3,[r7,#12]
 2707              	.L184:
 836:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2708              	 .loc 1 836 7 discriminator 1
 2709 0032 084B     	 ldr r3,.L188
 2710 0034 9A6E     	 ldr r2,[r3,#104]
 836:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2711              	 .loc 1 836 34 discriminator 1
 2712 0036 4FF48071 	 mov r1,#256
 2713 003a 7B68     	 ldr r3,[r7,#4]
 2714 003c 01FA03F3 	 lsl r3,r1,r3
 836:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2715              	 .loc 1 836 16 discriminator 1
 2716 0040 1340     	 ands r3,r3,r2
 835:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2717              	 .loc 1 835 2 discriminator 1
 2718 0042 002B     	 cmp r3,#0
 2719 0044 EDD0     	 beq .L187
 839:.././hal/sam3u1c/pmc.c **** 		}
 840:.././hal/sam3u1c/pmc.c **** 	}
 841:.././hal/sam3u1c/pmc.c **** 
 842:.././hal/sam3u1c/pmc.c **** 	return 0;
 2720              	 .loc 1 842 9
 2721 0046 0023     	 movs r3,#0
 2722              	.L186:
 843:.././hal/sam3u1c/pmc.c **** }
 2723              	 .loc 1 843 1
 2724 0048 1846     	 mov r0,r3
 2725 004a 1437     	 adds r7,r7,#20
 2726              	.LCFI186:
 2727              	 .cfi_def_cfa_offset 4
 2728 004c BD46     	 mov sp,r7
 2729              	.LCFI187:
 2730              	 .cfi_def_cfa_register 13
 2731              	 
 2732 004e 80BC     	 pop {r7}
 2733              	.LCFI188:
 2734              	 .cfi_restore 7
 2735              	 .cfi_def_cfa_offset 0
 2736 0050 7047     	 bx lr
 2737              	.L189:
 2738 0052 00BF     	 .align 2
 2739              	.L188:
 2740 0054 00040E40 	 .word 1074660352
 2741              	 .cfi_endproc
 2742              	.LFE104:
 2744              	 .section .text.pmc_switch_pck_to_pllack,"ax",%progbits
 2745              	 .align 1
 2746              	 .global pmc_switch_pck_to_pllack
 2747              	 .syntax unified
 2748              	 .thumb
 2749              	 .thumb_func
 2750              	 .fpu softvfp
 2752              	pmc_switch_pck_to_pllack:
 2753              	.LFB105:
 844:.././hal/sam3u1c/pmc.c **** 
 845:.././hal/sam3u1c/pmc.c **** /**
 846:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to PLLA clock.
 847:.././hal/sam3u1c/pmc.c ****  *
 848:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 849:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 850:.././hal/sam3u1c/pmc.c ****  *
 851:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 852:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 853:.././hal/sam3u1c/pmc.c ****  */
 854:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_pllack(uint32_t ul_id, uint32_t ul_pres)
 855:.././hal/sam3u1c/pmc.c **** {
 2754              	 .loc 1 855 1
 2755              	 .cfi_startproc
 2756              	 
 2757              	 
 2758              	 
 2759 0000 80B4     	 push {r7}
 2760              	.LCFI189:
 2761              	 .cfi_def_cfa_offset 4
 2762              	 .cfi_offset 7,-4
 2763 0002 85B0     	 sub sp,sp,#20
 2764              	.LCFI190:
 2765              	 .cfi_def_cfa_offset 24
 2766 0004 00AF     	 add r7,sp,#0
 2767              	.LCFI191:
 2768              	 .cfi_def_cfa_register 7
 2769 0006 7860     	 str r0,[r7,#4]
 2770 0008 3960     	 str r1,[r7]
 856:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 857:.././hal/sam3u1c/pmc.c **** 
 858:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLA_CLK | ul_pres;
 2771              	 .loc 1 858 5
 2772 000a 1249     	 ldr r1,.L195
 2773              	 .loc 1 858 45
 2774 000c 3B68     	 ldr r3,[r7]
 2775 000e 43F00202 	 orr r2,r3,#2
 2776              	 .loc 1 858 22
 2777 0012 7B68     	 ldr r3,[r7,#4]
 2778 0014 1033     	 adds r3,r3,#16
 2779 0016 41F82320 	 str r2,[r1,r3,lsl#2]
 859:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2780              	 .loc 1 859 18
 2781 001a 4FF40063 	 mov r3,#2048
 2782 001e FB60     	 str r3,[r7,#12]
 2783              	 .loc 1 859 2
 2784 0020 07E0     	 b .L191
 2785              	.L194:
 860:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 861:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2786              	 .loc 1 861 6
 2787 0022 FB68     	 ldr r3,[r7,#12]
 2788 0024 002B     	 cmp r3,#0
 2789 0026 01D1     	 bne .L192
 862:.././hal/sam3u1c/pmc.c **** 			return 1;
 2790              	 .loc 1 862 11
 2791 0028 0123     	 movs r3,#1
 2792 002a 0DE0     	 b .L193
 2793              	.L192:
 860:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2794              	 .loc 1 860 46 discriminator 1
 2795 002c FB68     	 ldr r3,[r7,#12]
 2796 002e 013B     	 subs r3,r3,#1
 2797 0030 FB60     	 str r3,[r7,#12]
 2798              	.L191:
 860:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2799              	 .loc 1 860 7 discriminator 1
 2800 0032 084B     	 ldr r3,.L195
 2801 0034 9A6E     	 ldr r2,[r3,#104]
 860:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2802              	 .loc 1 860 34 discriminator 1
 2803 0036 4FF48071 	 mov r1,#256
 2804 003a 7B68     	 ldr r3,[r7,#4]
 2805 003c 01FA03F3 	 lsl r3,r1,r3
 860:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2806              	 .loc 1 860 16 discriminator 1
 2807 0040 1340     	 ands r3,r3,r2
 859:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2808              	 .loc 1 859 2 discriminator 1
 2809 0042 002B     	 cmp r3,#0
 2810 0044 EDD0     	 beq .L194
 863:.././hal/sam3u1c/pmc.c **** 		}
 864:.././hal/sam3u1c/pmc.c **** 	}
 865:.././hal/sam3u1c/pmc.c **** 
 866:.././hal/sam3u1c/pmc.c **** 	return 0;
 2811              	 .loc 1 866 9
 2812 0046 0023     	 movs r3,#0
 2813              	.L193:
 867:.././hal/sam3u1c/pmc.c **** }
 2814              	 .loc 1 867 1
 2815 0048 1846     	 mov r0,r3
 2816 004a 1437     	 adds r7,r7,#20
 2817              	.LCFI192:
 2818              	 .cfi_def_cfa_offset 4
 2819 004c BD46     	 mov sp,r7
 2820              	.LCFI193:
 2821              	 .cfi_def_cfa_register 13
 2822              	 
 2823 004e 80BC     	 pop {r7}
 2824              	.LCFI194:
 2825              	 .cfi_restore 7
 2826              	 .cfi_def_cfa_offset 0
 2827 0050 7047     	 bx lr
 2828              	.L196:
 2829 0052 00BF     	 .align 2
 2830              	.L195:
 2831 0054 00040E40 	 .word 1074660352
 2832              	 .cfi_endproc
 2833              	.LFE105:
 2835              	 .section .text.pmc_switch_pck_to_upllck,"ax",%progbits
 2836              	 .align 1
 2837              	 .global pmc_switch_pck_to_upllck
 2838              	 .syntax unified
 2839              	 .thumb
 2840              	 .thumb_func
 2841              	 .fpu softvfp
 2843              	pmc_switch_pck_to_upllck:
 2844              	.LFB106:
 868:.././hal/sam3u1c/pmc.c **** 
 869:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP || SAMG55)
 870:.././hal/sam3u1c/pmc.c **** /**
 871:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to PLLB clock.
 872:.././hal/sam3u1c/pmc.c ****  *
 873:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 874:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 875:.././hal/sam3u1c/pmc.c ****  *
 876:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 877:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 878:.././hal/sam3u1c/pmc.c ****  */
 879:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_pllbck(uint32_t ul_id, uint32_t ul_pres)
 880:.././hal/sam3u1c/pmc.c **** {
 881:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 882:.././hal/sam3u1c/pmc.c **** 
 883:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLB_CLK | ul_pres;
 884:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 885:.././hal/sam3u1c/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 886:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 887:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 888:.././hal/sam3u1c/pmc.c **** 			return 1;
 889:.././hal/sam3u1c/pmc.c **** 		}
 890:.././hal/sam3u1c/pmc.c **** 	}
 891:.././hal/sam3u1c/pmc.c **** 
 892:.././hal/sam3u1c/pmc.c **** 	return 0;
 893:.././hal/sam3u1c/pmc.c **** }
 894:.././hal/sam3u1c/pmc.c **** #endif
 895:.././hal/sam3u1c/pmc.c **** 
 896:.././hal/sam3u1c/pmc.c **** #if (SAM3XA || SAM3U)
 897:.././hal/sam3u1c/pmc.c **** /**
 898:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to UPLL clock.
 899:.././hal/sam3u1c/pmc.c ****  *
 900:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 901:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 902:.././hal/sam3u1c/pmc.c ****  *
 903:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 904:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 905:.././hal/sam3u1c/pmc.c ****  */
 906:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_upllck(uint32_t ul_id, uint32_t ul_pres)
 907:.././hal/sam3u1c/pmc.c **** {
 2845              	 .loc 1 907 1
 2846              	 .cfi_startproc
 2847              	 
 2848              	 
 2849              	 
 2850 0000 80B4     	 push {r7}
 2851              	.LCFI195:
 2852              	 .cfi_def_cfa_offset 4
 2853              	 .cfi_offset 7,-4
 2854 0002 85B0     	 sub sp,sp,#20
 2855              	.LCFI196:
 2856              	 .cfi_def_cfa_offset 24
 2857 0004 00AF     	 add r7,sp,#0
 2858              	.LCFI197:
 2859              	 .cfi_def_cfa_register 7
 2860 0006 7860     	 str r0,[r7,#4]
 2861 0008 3960     	 str r1,[r7]
 908:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 909:.././hal/sam3u1c/pmc.c **** 
 910:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_UPLL_CLK | ul_pres;
 2862              	 .loc 1 910 5
 2863 000a 1249     	 ldr r1,.L202
 2864              	 .loc 1 910 45
 2865 000c 3B68     	 ldr r3,[r7]
 2866 000e 43F00302 	 orr r2,r3,#3
 2867              	 .loc 1 910 22
 2868 0012 7B68     	 ldr r3,[r7,#4]
 2869 0014 1033     	 adds r3,r3,#16
 2870 0016 41F82320 	 str r2,[r1,r3,lsl#2]
 911:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2871              	 .loc 1 911 18
 2872 001a 4FF40063 	 mov r3,#2048
 2873 001e FB60     	 str r3,[r7,#12]
 2874              	 .loc 1 911 2
 2875 0020 07E0     	 b .L198
 2876              	.L201:
 912:.././hal/sam3u1c/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 913:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 914:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2877              	 .loc 1 914 6
 2878 0022 FB68     	 ldr r3,[r7,#12]
 2879 0024 002B     	 cmp r3,#0
 2880 0026 01D1     	 bne .L199
 915:.././hal/sam3u1c/pmc.c **** 			return 1;
 2881              	 .loc 1 915 11
 2882 0028 0123     	 movs r3,#1
 2883 002a 0DE0     	 b .L200
 2884              	.L199:
 913:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2885              	 .loc 1 913 4
 2886 002c FB68     	 ldr r3,[r7,#12]
 2887 002e 013B     	 subs r3,r3,#1
 2888 0030 FB60     	 str r3,[r7,#12]
 2889              	.L198:
 912:.././hal/sam3u1c/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 2890              	 .loc 1 912 9 discriminator 1
 2891 0032 084B     	 ldr r3,.L202
 2892 0034 9A6E     	 ldr r2,[r3,#104]
 912:.././hal/sam3u1c/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 2893              	 .loc 1 912 36 discriminator 1
 2894 0036 4FF48071 	 mov r1,#256
 2895 003a 7B68     	 ldr r3,[r7,#4]
 2896 003c 01FA03F3 	 lsl r3,r1,r3
 912:.././hal/sam3u1c/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 2897              	 .loc 1 912 18 discriminator 1
 2898 0040 1340     	 ands r3,r3,r2
 911:.././hal/sam3u1c/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 2899              	 .loc 1 911 2 discriminator 1
 2900 0042 002B     	 cmp r3,#0
 2901 0044 EDD0     	 beq .L201
 916:.././hal/sam3u1c/pmc.c **** 		}
 917:.././hal/sam3u1c/pmc.c **** 	}
 918:.././hal/sam3u1c/pmc.c **** 
 919:.././hal/sam3u1c/pmc.c **** 	return 0;
 2902              	 .loc 1 919 9
 2903 0046 0023     	 movs r3,#0
 2904              	.L200:
 920:.././hal/sam3u1c/pmc.c **** }
 2905              	 .loc 1 920 1
 2906 0048 1846     	 mov r0,r3
 2907 004a 1437     	 adds r7,r7,#20
 2908              	.LCFI198:
 2909              	 .cfi_def_cfa_offset 4
 2910 004c BD46     	 mov sp,r7
 2911              	.LCFI199:
 2912              	 .cfi_def_cfa_register 13
 2913              	 
 2914 004e 80BC     	 pop {r7}
 2915              	.LCFI200:
 2916              	 .cfi_restore 7
 2917              	 .cfi_def_cfa_offset 0
 2918 0050 7047     	 bx lr
 2919              	.L203:
 2920 0052 00BF     	 .align 2
 2921              	.L202:
 2922 0054 00040E40 	 .word 1074660352
 2923              	 .cfi_endproc
 2924              	.LFE106:
 2926              	 .section .text.pmc_switch_pck_to_mck,"ax",%progbits
 2927              	 .align 1
 2928              	 .global pmc_switch_pck_to_mck
 2929              	 .syntax unified
 2930              	 .thumb
 2931              	 .thumb_func
 2932              	 .fpu softvfp
 2934              	pmc_switch_pck_to_mck:
 2935              	.LFB107:
 921:.././hal/sam3u1c/pmc.c **** #endif
 922:.././hal/sam3u1c/pmc.c **** 
 923:.././hal/sam3u1c/pmc.c **** /**
 924:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to mck.
 925:.././hal/sam3u1c/pmc.c ****  *
 926:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 927:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 928:.././hal/sam3u1c/pmc.c ****  *
 929:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 930:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 931:.././hal/sam3u1c/pmc.c ****  */
 932:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
 933:.././hal/sam3u1c/pmc.c **** {
 2936              	 .loc 1 933 1
 2937              	 .cfi_startproc
 2938              	 
 2939              	 
 2940              	 
 2941 0000 80B4     	 push {r7}
 2942              	.LCFI201:
 2943              	 .cfi_def_cfa_offset 4
 2944              	 .cfi_offset 7,-4
 2945 0002 85B0     	 sub sp,sp,#20
 2946              	.LCFI202:
 2947              	 .cfi_def_cfa_offset 24
 2948 0004 00AF     	 add r7,sp,#0
 2949              	.LCFI203:
 2950              	 .cfi_def_cfa_register 7
 2951 0006 7860     	 str r0,[r7,#4]
 2952 0008 3960     	 str r1,[r7]
 934:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 935:.././hal/sam3u1c/pmc.c **** 
 936:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
 2953              	 .loc 1 936 5
 2954 000a 1249     	 ldr r1,.L209
 2955              	 .loc 1 936 40
 2956 000c 3B68     	 ldr r3,[r7]
 2957 000e 43F00402 	 orr r2,r3,#4
 2958              	 .loc 1 936 22
 2959 0012 7B68     	 ldr r3,[r7,#4]
 2960 0014 1033     	 adds r3,r3,#16
 2961 0016 41F82320 	 str r2,[r1,r3,lsl#2]
 937:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2962              	 .loc 1 937 18
 2963 001a 4FF40063 	 mov r3,#2048
 2964 001e FB60     	 str r3,[r7,#12]
 2965              	 .loc 1 937 2
 2966 0020 07E0     	 b .L205
 2967              	.L208:
 938:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 939:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2968              	 .loc 1 939 6
 2969 0022 FB68     	 ldr r3,[r7,#12]
 2970 0024 002B     	 cmp r3,#0
 2971 0026 01D1     	 bne .L206
 940:.././hal/sam3u1c/pmc.c **** 			return 1;
 2972              	 .loc 1 940 11
 2973 0028 0123     	 movs r3,#1
 2974 002a 0DE0     	 b .L207
 2975              	.L206:
 938:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2976              	 .loc 1 938 46 discriminator 1
 2977 002c FB68     	 ldr r3,[r7,#12]
 2978 002e 013B     	 subs r3,r3,#1
 2979 0030 FB60     	 str r3,[r7,#12]
 2980              	.L205:
 938:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2981              	 .loc 1 938 7 discriminator 1
 2982 0032 084B     	 ldr r3,.L209
 2983 0034 9A6E     	 ldr r2,[r3,#104]
 938:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2984              	 .loc 1 938 34 discriminator 1
 2985 0036 4FF48071 	 mov r1,#256
 2986 003a 7B68     	 ldr r3,[r7,#4]
 2987 003c 01FA03F3 	 lsl r3,r1,r3
 938:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2988              	 .loc 1 938 16 discriminator 1
 2989 0040 1340     	 ands r3,r3,r2
 937:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2990              	 .loc 1 937 2 discriminator 1
 2991 0042 002B     	 cmp r3,#0
 2992 0044 EDD0     	 beq .L208
 941:.././hal/sam3u1c/pmc.c **** 		}
 942:.././hal/sam3u1c/pmc.c **** 	}
 943:.././hal/sam3u1c/pmc.c **** 
 944:.././hal/sam3u1c/pmc.c **** 	return 0;
 2993              	 .loc 1 944 9
 2994 0046 0023     	 movs r3,#0
 2995              	.L207:
 945:.././hal/sam3u1c/pmc.c **** }
 2996              	 .loc 1 945 1
 2997 0048 1846     	 mov r0,r3
 2998 004a 1437     	 adds r7,r7,#20
 2999              	.LCFI204:
 3000              	 .cfi_def_cfa_offset 4
 3001 004c BD46     	 mov sp,r7
 3002              	.LCFI205:
 3003              	 .cfi_def_cfa_register 13
 3004              	 
 3005 004e 80BC     	 pop {r7}
 3006              	.LCFI206:
 3007              	 .cfi_restore 7
 3008              	 .cfi_def_cfa_offset 0
 3009 0050 7047     	 bx lr
 3010              	.L210:
 3011 0052 00BF     	 .align 2
 3012              	.L209:
 3013 0054 00040E40 	 .word 1074660352
 3014              	 .cfi_endproc
 3015              	.LFE107:
 3017              	 .section .text.pmc_enable_pck,"ax",%progbits
 3018              	 .align 1
 3019              	 .global pmc_enable_pck
 3020              	 .syntax unified
 3021              	 .thumb
 3022              	 .thumb_func
 3023              	 .fpu softvfp
 3025              	pmc_enable_pck:
 3026              	.LFB108:
 946:.././hal/sam3u1c/pmc.c **** 
 947:.././hal/sam3u1c/pmc.c **** /**
 948:.././hal/sam3u1c/pmc.c ****  * \brief Enable the specified programmable clock.
 949:.././hal/sam3u1c/pmc.c ****  *
 950:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 951:.././hal/sam3u1c/pmc.c ****  */
 952:.././hal/sam3u1c/pmc.c **** void pmc_enable_pck(uint32_t ul_id)
 953:.././hal/sam3u1c/pmc.c **** {
 3027              	 .loc 1 953 1
 3028              	 .cfi_startproc
 3029              	 
 3030              	 
 3031              	 
 3032 0000 80B4     	 push {r7}
 3033              	.LCFI207:
 3034              	 .cfi_def_cfa_offset 4
 3035              	 .cfi_offset 7,-4
 3036 0002 83B0     	 sub sp,sp,#12
 3037              	.LCFI208:
 3038              	 .cfi_def_cfa_offset 16
 3039 0004 00AF     	 add r7,sp,#0
 3040              	.LCFI209:
 3041              	 .cfi_def_cfa_register 7
 3042 0006 7860     	 str r0,[r7,#4]
 954:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
 3043              	 .loc 1 954 5
 3044 0008 054A     	 ldr r2,.L212
 3045              	 .loc 1 954 32
 3046 000a 4FF48071 	 mov r1,#256
 3047 000e 7B68     	 ldr r3,[r7,#4]
 3048 0010 01FA03F3 	 lsl r3,r1,r3
 3049              	 .loc 1 954 16
 3050 0014 1360     	 str r3,[r2]
 955:.././hal/sam3u1c/pmc.c **** }
 3051              	 .loc 1 955 1
 3052 0016 00BF     	 nop
 3053 0018 0C37     	 adds r7,r7,#12
 3054              	.LCFI210:
 3055              	 .cfi_def_cfa_offset 4
 3056 001a BD46     	 mov sp,r7
 3057              	.LCFI211:
 3058              	 .cfi_def_cfa_register 13
 3059              	 
 3060 001c 80BC     	 pop {r7}
 3061              	.LCFI212:
 3062              	 .cfi_restore 7
 3063              	 .cfi_def_cfa_offset 0
 3064 001e 7047     	 bx lr
 3065              	.L213:
 3066              	 .align 2
 3067              	.L212:
 3068 0020 00040E40 	 .word 1074660352
 3069              	 .cfi_endproc
 3070              	.LFE108:
 3072              	 .section .text.pmc_disable_pck,"ax",%progbits
 3073              	 .align 1
 3074              	 .global pmc_disable_pck
 3075              	 .syntax unified
 3076              	 .thumb
 3077              	 .thumb_func
 3078              	 .fpu softvfp
 3080              	pmc_disable_pck:
 3081              	.LFB109:
 956:.././hal/sam3u1c/pmc.c **** 
 957:.././hal/sam3u1c/pmc.c **** /**
 958:.././hal/sam3u1c/pmc.c ****  * \brief Disable the specified programmable clock.
 959:.././hal/sam3u1c/pmc.c ****  *
 960:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 961:.././hal/sam3u1c/pmc.c ****  */
 962:.././hal/sam3u1c/pmc.c **** void pmc_disable_pck(uint32_t ul_id)
 963:.././hal/sam3u1c/pmc.c **** {
 3082              	 .loc 1 963 1
 3083              	 .cfi_startproc
 3084              	 
 3085              	 
 3086              	 
 3087 0000 80B4     	 push {r7}
 3088              	.LCFI213:
 3089              	 .cfi_def_cfa_offset 4
 3090              	 .cfi_offset 7,-4
 3091 0002 83B0     	 sub sp,sp,#12
 3092              	.LCFI214:
 3093              	 .cfi_def_cfa_offset 16
 3094 0004 00AF     	 add r7,sp,#0
 3095              	.LCFI215:
 3096              	 .cfi_def_cfa_register 7
 3097 0006 7860     	 str r0,[r7,#4]
 964:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
 3098              	 .loc 1 964 5
 3099 0008 054A     	 ldr r2,.L215
 3100              	 .loc 1 964 32
 3101 000a 4FF48071 	 mov r1,#256
 3102 000e 7B68     	 ldr r3,[r7,#4]
 3103 0010 01FA03F3 	 lsl r3,r1,r3
 3104              	 .loc 1 964 16
 3105 0014 5360     	 str r3,[r2,#4]
 965:.././hal/sam3u1c/pmc.c **** }
 3106              	 .loc 1 965 1
 3107 0016 00BF     	 nop
 3108 0018 0C37     	 adds r7,r7,#12
 3109              	.LCFI216:
 3110              	 .cfi_def_cfa_offset 4
 3111 001a BD46     	 mov sp,r7
 3112              	.LCFI217:
 3113              	 .cfi_def_cfa_register 13
 3114              	 
 3115 001c 80BC     	 pop {r7}
 3116              	.LCFI218:
 3117              	 .cfi_restore 7
 3118              	 .cfi_def_cfa_offset 0
 3119 001e 7047     	 bx lr
 3120              	.L216:
 3121              	 .align 2
 3122              	.L215:
 3123 0020 00040E40 	 .word 1074660352
 3124              	 .cfi_endproc
 3125              	.LFE109:
 3127              	 .section .text.pmc_enable_all_pck,"ax",%progbits
 3128              	 .align 1
 3129              	 .global pmc_enable_all_pck
 3130              	 .syntax unified
 3131              	 .thumb
 3132              	 .thumb_func
 3133              	 .fpu softvfp
 3135              	pmc_enable_all_pck:
 3136              	.LFB110:
 966:.././hal/sam3u1c/pmc.c **** 
 967:.././hal/sam3u1c/pmc.c **** /**
 968:.././hal/sam3u1c/pmc.c ****  * \brief Enable all programmable clocks.
 969:.././hal/sam3u1c/pmc.c ****  */
 970:.././hal/sam3u1c/pmc.c **** void pmc_enable_all_pck(void)
 971:.././hal/sam3u1c/pmc.c **** {
 3137              	 .loc 1 971 1
 3138              	 .cfi_startproc
 3139              	 
 3140              	 
 3141              	 
 3142 0000 80B4     	 push {r7}
 3143              	.LCFI219:
 3144              	 .cfi_def_cfa_offset 4
 3145              	 .cfi_offset 7,-4
 3146 0002 00AF     	 add r7,sp,#0
 3147              	.LCFI220:
 3148              	 .cfi_def_cfa_register 7
 972:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_PCK0 | PMC_SCER_PCK1 | PMC_SCER_PCK2;
 3149              	 .loc 1 972 5
 3150 0004 034B     	 ldr r3,.L218
 3151              	 .loc 1 972 16
 3152 0006 4FF4E062 	 mov r2,#1792
 3153 000a 1A60     	 str r2,[r3]
 973:.././hal/sam3u1c/pmc.c **** }
 3154              	 .loc 1 973 1
 3155 000c 00BF     	 nop
 3156 000e BD46     	 mov sp,r7
 3157              	.LCFI221:
 3158              	 .cfi_def_cfa_register 13
 3159              	 
 3160 0010 80BC     	 pop {r7}
 3161              	.LCFI222:
 3162              	 .cfi_restore 7
 3163              	 .cfi_def_cfa_offset 0
 3164 0012 7047     	 bx lr
 3165              	.L219:
 3166              	 .align 2
 3167              	.L218:
 3168 0014 00040E40 	 .word 1074660352
 3169              	 .cfi_endproc
 3170              	.LFE110:
 3172              	 .section .text.pmc_disable_all_pck,"ax",%progbits
 3173              	 .align 1
 3174              	 .global pmc_disable_all_pck
 3175              	 .syntax unified
 3176              	 .thumb
 3177              	 .thumb_func
 3178              	 .fpu softvfp
 3180              	pmc_disable_all_pck:
 3181              	.LFB111:
 974:.././hal/sam3u1c/pmc.c **** 
 975:.././hal/sam3u1c/pmc.c **** /**
 976:.././hal/sam3u1c/pmc.c ****  * \brief Disable all programmable clocks.
 977:.././hal/sam3u1c/pmc.c ****  */
 978:.././hal/sam3u1c/pmc.c **** void pmc_disable_all_pck(void)
 979:.././hal/sam3u1c/pmc.c **** {
 3182              	 .loc 1 979 1
 3183              	 .cfi_startproc
 3184              	 
 3185              	 
 3186              	 
 3187 0000 80B4     	 push {r7}
 3188              	.LCFI223:
 3189              	 .cfi_def_cfa_offset 4
 3190              	 .cfi_offset 7,-4
 3191 0002 00AF     	 add r7,sp,#0
 3192              	.LCFI224:
 3193              	 .cfi_def_cfa_register 7
 980:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_PCK0 | PMC_SCDR_PCK1 | PMC_SCDR_PCK2;
 3194              	 .loc 1 980 5
 3195 0004 034B     	 ldr r3,.L221
 3196              	 .loc 1 980 16
 3197 0006 4FF4E062 	 mov r2,#1792
 3198 000a 5A60     	 str r2,[r3,#4]
 981:.././hal/sam3u1c/pmc.c **** }
 3199              	 .loc 1 981 1
 3200 000c 00BF     	 nop
 3201 000e BD46     	 mov sp,r7
 3202              	.LCFI225:
 3203              	 .cfi_def_cfa_register 13
 3204              	 
 3205 0010 80BC     	 pop {r7}
 3206              	.LCFI226:
 3207              	 .cfi_restore 7
 3208              	 .cfi_def_cfa_offset 0
 3209 0012 7047     	 bx lr
 3210              	.L222:
 3211              	 .align 2
 3212              	.L221:
 3213 0014 00040E40 	 .word 1074660352
 3214              	 .cfi_endproc
 3215              	.LFE111:
 3217              	 .section .text.pmc_is_pck_enabled,"ax",%progbits
 3218              	 .align 1
 3219              	 .global pmc_is_pck_enabled
 3220              	 .syntax unified
 3221              	 .thumb
 3222              	 .thumb_func
 3223              	 .fpu softvfp
 3225              	pmc_is_pck_enabled:
 3226              	.LFB112:
 982:.././hal/sam3u1c/pmc.c **** 
 983:.././hal/sam3u1c/pmc.c **** /**
 984:.././hal/sam3u1c/pmc.c ****  * \brief Check if the specified programmable clock is enabled.
 985:.././hal/sam3u1c/pmc.c ****  *
 986:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 987:.././hal/sam3u1c/pmc.c ****  *
 988:.././hal/sam3u1c/pmc.c ****  * \retval 0 Programmable clock is disabled or unknown.
 989:.././hal/sam3u1c/pmc.c ****  * \retval 1 Programmable clock is enabled.
 990:.././hal/sam3u1c/pmc.c ****  */
 991:.././hal/sam3u1c/pmc.c **** uint32_t pmc_is_pck_enabled(uint32_t ul_id)
 992:.././hal/sam3u1c/pmc.c **** {
 3227              	 .loc 1 992 1
 3228              	 .cfi_startproc
 3229              	 
 3230              	 
 3231              	 
 3232 0000 80B4     	 push {r7}
 3233              	.LCFI227:
 3234              	 .cfi_def_cfa_offset 4
 3235              	 .cfi_offset 7,-4
 3236 0002 83B0     	 sub sp,sp,#12
 3237              	.LCFI228:
 3238              	 .cfi_def_cfa_offset 16
 3239 0004 00AF     	 add r7,sp,#0
 3240              	.LCFI229:
 3241              	 .cfi_def_cfa_register 7
 3242 0006 7860     	 str r0,[r7,#4]
 993:.././hal/sam3u1c/pmc.c **** 	if (ul_id > 2) {
 3243              	 .loc 1 993 5
 3244 0008 7B68     	 ldr r3,[r7,#4]
 3245 000a 022B     	 cmp r3,#2
 3246 000c 01D9     	 bls .L224
 994:.././hal/sam3u1c/pmc.c **** 		return 0;
 3247              	 .loc 1 994 10
 3248 000e 0023     	 movs r3,#0
 3249 0010 07E0     	 b .L225
 3250              	.L224:
 995:.././hal/sam3u1c/pmc.c **** 	}
 996:.././hal/sam3u1c/pmc.c **** 
 997:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SCSR & (PMC_SCSR_PCK0 << ul_id));
 3251              	 .loc 1 997 13
 3252 0012 064B     	 ldr r3,.L226
 3253 0014 9A68     	 ldr r2,[r3,#8]
 3254              	 .loc 1 997 41
 3255 0016 4FF48071 	 mov r1,#256
 3256 001a 7B68     	 ldr r3,[r7,#4]
 3257 001c 01FA03F3 	 lsl r3,r1,r3
 3258              	 .loc 1 997 24
 3259 0020 1340     	 ands r3,r3,r2
 3260              	.L225:
 998:.././hal/sam3u1c/pmc.c **** }
 3261              	 .loc 1 998 1
 3262 0022 1846     	 mov r0,r3
 3263 0024 0C37     	 adds r7,r7,#12
 3264              	.LCFI230:
 3265              	 .cfi_def_cfa_offset 4
 3266 0026 BD46     	 mov sp,r7
 3267              	.LCFI231:
 3268              	 .cfi_def_cfa_register 13
 3269              	 
 3270 0028 80BC     	 pop {r7}
 3271              	.LCFI232:
 3272              	 .cfi_restore 7
 3273              	 .cfi_def_cfa_offset 0
 3274 002a 7047     	 bx lr
 3275              	.L227:
 3276              	 .align 2
 3277              	.L226:
 3278 002c 00040E40 	 .word 1074660352
 3279              	 .cfi_endproc
 3280              	.LFE112:
 3282              	 .section .text.pmc_enable_interrupt,"ax",%progbits
 3283              	 .align 1
 3284              	 .global pmc_enable_interrupt
 3285              	 .syntax unified
 3286              	 .thumb
 3287              	 .thumb_func
 3288              	 .fpu softvfp
 3290              	pmc_enable_interrupt:
 3291              	.LFB113:
 999:.././hal/sam3u1c/pmc.c **** 
1000:.././hal/sam3u1c/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP)
1001:.././hal/sam3u1c/pmc.c **** /**
1002:.././hal/sam3u1c/pmc.c ****  * \brief Enable Coprocessor Clocks.
1003:.././hal/sam3u1c/pmc.c ****  */
1004:.././hal/sam3u1c/pmc.c **** void pmc_enable_cpck(void)
1005:.././hal/sam3u1c/pmc.c **** {
1006:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_CPCK | PMC_SCER_CPKEY_PASSWD;
1007:.././hal/sam3u1c/pmc.c **** }
1008:.././hal/sam3u1c/pmc.c **** 
1009:.././hal/sam3u1c/pmc.c **** /**
1010:.././hal/sam3u1c/pmc.c ****  * \brief Disable Coprocessor Clocks.
1011:.././hal/sam3u1c/pmc.c ****  */
1012:.././hal/sam3u1c/pmc.c **** void pmc_disable_cpck(void)
1013:.././hal/sam3u1c/pmc.c **** {
1014:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_CPCK | PMC_SCDR_CPKEY_PASSWD;
1015:.././hal/sam3u1c/pmc.c **** }
1016:.././hal/sam3u1c/pmc.c **** 
1017:.././hal/sam3u1c/pmc.c **** /**
1018:.././hal/sam3u1c/pmc.c ****  * \brief Check if the Coprocessor Clocks is enabled.
1019:.././hal/sam3u1c/pmc.c ****  *
1020:.././hal/sam3u1c/pmc.c ****  * \retval 0 Coprocessor Clocks is disabled.
1021:.././hal/sam3u1c/pmc.c ****  * \retval 1 Coprocessor Clocks is enabled.
1022:.././hal/sam3u1c/pmc.c ****  */
1023:.././hal/sam3u1c/pmc.c **** bool pmc_is_cpck_enabled(void)
1024:.././hal/sam3u1c/pmc.c **** {
1025:.././hal/sam3u1c/pmc.c **** 	if(PMC->PMC_SCSR & PMC_SCSR_CPCK) {
1026:.././hal/sam3u1c/pmc.c **** 		return 1;
1027:.././hal/sam3u1c/pmc.c **** 	} else {
1028:.././hal/sam3u1c/pmc.c **** 		return 0;
1029:.././hal/sam3u1c/pmc.c **** 	}
1030:.././hal/sam3u1c/pmc.c **** }
1031:.././hal/sam3u1c/pmc.c **** 
1032:.././hal/sam3u1c/pmc.c **** /**
1033:.././hal/sam3u1c/pmc.c ****  * \brief Enable Coprocessor Bus Master Clocks.
1034:.././hal/sam3u1c/pmc.c ****  */
1035:.././hal/sam3u1c/pmc.c **** void pmc_enable_cpbmck(void)
1036:.././hal/sam3u1c/pmc.c **** {
1037:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_CPCK | PMC_SCER_CPKEY_PASSWD;
1038:.././hal/sam3u1c/pmc.c **** }
1039:.././hal/sam3u1c/pmc.c **** 
1040:.././hal/sam3u1c/pmc.c **** /**
1041:.././hal/sam3u1c/pmc.c ****  * \brief Disable Coprocessor Bus Master Clocks.
1042:.././hal/sam3u1c/pmc.c ****  */
1043:.././hal/sam3u1c/pmc.c **** void pmc_disable_cpbmck(void)
1044:.././hal/sam3u1c/pmc.c **** {
1045:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_CPCK | PMC_SCDR_CPKEY_PASSWD;
1046:.././hal/sam3u1c/pmc.c **** }
1047:.././hal/sam3u1c/pmc.c **** 
1048:.././hal/sam3u1c/pmc.c **** /**
1049:.././hal/sam3u1c/pmc.c ****  * \brief Check if the Coprocessor Bus Master Clocks is enabled.
1050:.././hal/sam3u1c/pmc.c ****  *
1051:.././hal/sam3u1c/pmc.c ****  * \retval 0 Coprocessor Bus Master Clocks is disabled.
1052:.././hal/sam3u1c/pmc.c ****  * \retval 1 Coprocessor Bus Master Clocks is enabled.
1053:.././hal/sam3u1c/pmc.c ****  */
1054:.././hal/sam3u1c/pmc.c **** bool pmc_is_cpbmck_enabled(void)
1055:.././hal/sam3u1c/pmc.c **** {
1056:.././hal/sam3u1c/pmc.c **** 	if(PMC->PMC_SCSR & PMC_SCSR_CPBMCK) {
1057:.././hal/sam3u1c/pmc.c **** 		return 1;
1058:.././hal/sam3u1c/pmc.c **** 	} else {
1059:.././hal/sam3u1c/pmc.c **** 		return 0;
1060:.././hal/sam3u1c/pmc.c **** 	}
1061:.././hal/sam3u1c/pmc.c **** }
1062:.././hal/sam3u1c/pmc.c **** 
1063:.././hal/sam3u1c/pmc.c **** /**
1064:.././hal/sam3u1c/pmc.c ****  * \brief Set the prescaler for the Coprocessor Master Clock.
1065:.././hal/sam3u1c/pmc.c ****  *
1066:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Prescaler value.
1067:.././hal/sam3u1c/pmc.c ****  */
1068:.././hal/sam3u1c/pmc.c **** void pmc_cpck_set_prescaler(uint32_t ul_pres)
1069:.././hal/sam3u1c/pmc.c **** {
1070:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
1071:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_CPPRES_Msk)) | PMC_MCKR_CPPRES(ul_pres);
1072:.././hal/sam3u1c/pmc.c **** }
1073:.././hal/sam3u1c/pmc.c **** 
1074:.././hal/sam3u1c/pmc.c **** /**
1075:.././hal/sam3u1c/pmc.c ****  * \brief Set the source for the Coprocessor Master Clock.
1076:.././hal/sam3u1c/pmc.c ****  *
1077:.././hal/sam3u1c/pmc.c ****  * \param ul_source Source selection value.
1078:.././hal/sam3u1c/pmc.c ****  */
1079:.././hal/sam3u1c/pmc.c **** void pmc_cpck_set_source(uint32_t ul_source)
1080:.././hal/sam3u1c/pmc.c **** {
1081:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
1082:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_CPCSS_Msk)) | ul_source;
1083:.././hal/sam3u1c/pmc.c **** }
1084:.././hal/sam3u1c/pmc.c **** #endif
1085:.././hal/sam3u1c/pmc.c **** 
1086:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAMG55)
1087:.././hal/sam3u1c/pmc.c **** /**
1088:.././hal/sam3u1c/pmc.c ****  * \brief Switch UDP (USB) clock source selection to PLLA clock.
1089:.././hal/sam3u1c/pmc.c ****  *
1090:.././hal/sam3u1c/pmc.c ****  * \param ul_usbdiv Clock divisor.
1091:.././hal/sam3u1c/pmc.c ****  */
1092:.././hal/sam3u1c/pmc.c **** void pmc_switch_udpck_to_pllack(uint32_t ul_usbdiv)
1093:.././hal/sam3u1c/pmc.c **** {
1094:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv);
1095:.././hal/sam3u1c/pmc.c **** }
1096:.././hal/sam3u1c/pmc.c **** #endif
1097:.././hal/sam3u1c/pmc.c **** 
1098:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM4S || SAMG55)
1099:.././hal/sam3u1c/pmc.c **** /**
1100:.././hal/sam3u1c/pmc.c ****  * \brief Switch UDP (USB) clock source selection to PLLB clock.
1101:.././hal/sam3u1c/pmc.c ****  *
1102:.././hal/sam3u1c/pmc.c ****  * \param ul_usbdiv Clock divisor.
1103:.././hal/sam3u1c/pmc.c ****  */
1104:.././hal/sam3u1c/pmc.c **** void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
1105:.././hal/sam3u1c/pmc.c **** {
1106:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
1107:.././hal/sam3u1c/pmc.c **** }
1108:.././hal/sam3u1c/pmc.c **** #endif
1109:.././hal/sam3u1c/pmc.c **** 
1110:.././hal/sam3u1c/pmc.c **** #if (SAM3XA)
1111:.././hal/sam3u1c/pmc.c **** /**
1112:.././hal/sam3u1c/pmc.c ****  * \brief Switch UDP (USB) clock source selection to UPLL clock.
1113:.././hal/sam3u1c/pmc.c ****  *
1114:.././hal/sam3u1c/pmc.c ****  * \param ul_usbdiv Clock divisor.
1115:.././hal/sam3u1c/pmc.c ****  */
1116:.././hal/sam3u1c/pmc.c **** void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
1117:.././hal/sam3u1c/pmc.c **** {
1118:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
1119:.././hal/sam3u1c/pmc.c **** }
1120:.././hal/sam3u1c/pmc.c **** #endif
1121:.././hal/sam3u1c/pmc.c **** 
1122:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAMG55)
1123:.././hal/sam3u1c/pmc.c **** /**
1124:.././hal/sam3u1c/pmc.c ****  * \brief Enable UDP (USB) clock.
1125:.././hal/sam3u1c/pmc.c ****  */
1126:.././hal/sam3u1c/pmc.c **** void pmc_enable_udpck(void)
1127:.././hal/sam3u1c/pmc.c **** {
1128:.././hal/sam3u1c/pmc.c **** # if (SAM3S || SAM4S || SAM4E || SAMG55)
1129:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_UDP;
1130:.././hal/sam3u1c/pmc.c **** # else
1131:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
1132:.././hal/sam3u1c/pmc.c **** # endif
1133:.././hal/sam3u1c/pmc.c **** }
1134:.././hal/sam3u1c/pmc.c **** 
1135:.././hal/sam3u1c/pmc.c **** /**
1136:.././hal/sam3u1c/pmc.c ****  * \brief Disable UDP (USB) clock.
1137:.././hal/sam3u1c/pmc.c ****  */
1138:.././hal/sam3u1c/pmc.c **** void pmc_disable_udpck(void)
1139:.././hal/sam3u1c/pmc.c **** {
1140:.././hal/sam3u1c/pmc.c **** # if (SAM3S || SAM4S || SAM4E || SAMG55)
1141:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_UDP;
1142:.././hal/sam3u1c/pmc.c **** # else
1143:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_UOTGCLK;
1144:.././hal/sam3u1c/pmc.c **** # endif
1145:.././hal/sam3u1c/pmc.c **** }
1146:.././hal/sam3u1c/pmc.c **** #endif
1147:.././hal/sam3u1c/pmc.c **** 
1148:.././hal/sam3u1c/pmc.c **** /**
1149:.././hal/sam3u1c/pmc.c ****  * \brief Enable PMC interrupts.
1150:.././hal/sam3u1c/pmc.c ****  *
1151:.././hal/sam3u1c/pmc.c ****  * \param ul_sources Interrupt sources bit map.
1152:.././hal/sam3u1c/pmc.c ****  */
1153:.././hal/sam3u1c/pmc.c **** void pmc_enable_interrupt(uint32_t ul_sources)
1154:.././hal/sam3u1c/pmc.c **** {
 3292              	 .loc 1 1154 1
 3293              	 .cfi_startproc
 3294              	 
 3295              	 
 3296              	 
 3297 0000 80B4     	 push {r7}
 3298              	.LCFI233:
 3299              	 .cfi_def_cfa_offset 4
 3300              	 .cfi_offset 7,-4
 3301 0002 83B0     	 sub sp,sp,#12
 3302              	.LCFI234:
 3303              	 .cfi_def_cfa_offset 16
 3304 0004 00AF     	 add r7,sp,#0
 3305              	.LCFI235:
 3306              	 .cfi_def_cfa_register 7
 3307 0006 7860     	 str r0,[r7,#4]
1155:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_IER = ul_sources;
 3308              	 .loc 1 1155 5
 3309 0008 034A     	 ldr r2,.L229
 3310              	 .loc 1 1155 15
 3311 000a 7B68     	 ldr r3,[r7,#4]
 3312 000c 1366     	 str r3,[r2,#96]
1156:.././hal/sam3u1c/pmc.c **** }
 3313              	 .loc 1 1156 1
 3314 000e 00BF     	 nop
 3315 0010 0C37     	 adds r7,r7,#12
 3316              	.LCFI236:
 3317              	 .cfi_def_cfa_offset 4
 3318 0012 BD46     	 mov sp,r7
 3319              	.LCFI237:
 3320              	 .cfi_def_cfa_register 13
 3321              	 
 3322 0014 80BC     	 pop {r7}
 3323              	.LCFI238:
 3324              	 .cfi_restore 7
 3325              	 .cfi_def_cfa_offset 0
 3326 0016 7047     	 bx lr
 3327              	.L230:
 3328              	 .align 2
 3329              	.L229:
 3330 0018 00040E40 	 .word 1074660352
 3331              	 .cfi_endproc
 3332              	.LFE113:
 3334              	 .section .text.pmc_disable_interrupt,"ax",%progbits
 3335              	 .align 1
 3336              	 .global pmc_disable_interrupt
 3337              	 .syntax unified
 3338              	 .thumb
 3339              	 .thumb_func
 3340              	 .fpu softvfp
 3342              	pmc_disable_interrupt:
 3343              	.LFB114:
1157:.././hal/sam3u1c/pmc.c **** 
1158:.././hal/sam3u1c/pmc.c **** /**
1159:.././hal/sam3u1c/pmc.c ****  * \brief Disable PMC interrupts.
1160:.././hal/sam3u1c/pmc.c ****  *
1161:.././hal/sam3u1c/pmc.c ****  * \param ul_sources Interrupt sources bit map.
1162:.././hal/sam3u1c/pmc.c ****  */
1163:.././hal/sam3u1c/pmc.c **** void pmc_disable_interrupt(uint32_t ul_sources)
1164:.././hal/sam3u1c/pmc.c **** {
 3344              	 .loc 1 1164 1
 3345              	 .cfi_startproc
 3346              	 
 3347              	 
 3348              	 
 3349 0000 80B4     	 push {r7}
 3350              	.LCFI239:
 3351              	 .cfi_def_cfa_offset 4
 3352              	 .cfi_offset 7,-4
 3353 0002 83B0     	 sub sp,sp,#12
 3354              	.LCFI240:
 3355              	 .cfi_def_cfa_offset 16
 3356 0004 00AF     	 add r7,sp,#0
 3357              	.LCFI241:
 3358              	 .cfi_def_cfa_register 7
 3359 0006 7860     	 str r0,[r7,#4]
1165:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_IDR = ul_sources;
 3360              	 .loc 1 1165 5
 3361 0008 034A     	 ldr r2,.L232
 3362              	 .loc 1 1165 15
 3363 000a 7B68     	 ldr r3,[r7,#4]
 3364 000c 5366     	 str r3,[r2,#100]
1166:.././hal/sam3u1c/pmc.c **** }
 3365              	 .loc 1 1166 1
 3366 000e 00BF     	 nop
 3367 0010 0C37     	 adds r7,r7,#12
 3368              	.LCFI242:
 3369              	 .cfi_def_cfa_offset 4
 3370 0012 BD46     	 mov sp,r7
 3371              	.LCFI243:
 3372              	 .cfi_def_cfa_register 13
 3373              	 
 3374 0014 80BC     	 pop {r7}
 3375              	.LCFI244:
 3376              	 .cfi_restore 7
 3377              	 .cfi_def_cfa_offset 0
 3378 0016 7047     	 bx lr
 3379              	.L233:
 3380              	 .align 2
 3381              	.L232:
 3382 0018 00040E40 	 .word 1074660352
 3383              	 .cfi_endproc
 3384              	.LFE114:
 3386              	 .section .text.pmc_get_interrupt_mask,"ax",%progbits
 3387              	 .align 1
 3388              	 .global pmc_get_interrupt_mask
 3389              	 .syntax unified
 3390              	 .thumb
 3391              	 .thumb_func
 3392              	 .fpu softvfp
 3394              	pmc_get_interrupt_mask:
 3395              	.LFB115:
1167:.././hal/sam3u1c/pmc.c **** 
1168:.././hal/sam3u1c/pmc.c **** /**
1169:.././hal/sam3u1c/pmc.c ****  * \brief Get PMC interrupt mask.
1170:.././hal/sam3u1c/pmc.c ****  *
1171:.././hal/sam3u1c/pmc.c ****  * \return The interrupt mask value.
1172:.././hal/sam3u1c/pmc.c ****  */
1173:.././hal/sam3u1c/pmc.c **** uint32_t pmc_get_interrupt_mask(void)
1174:.././hal/sam3u1c/pmc.c **** {
 3396              	 .loc 1 1174 1
 3397              	 .cfi_startproc
 3398              	 
 3399              	 
 3400              	 
 3401 0000 80B4     	 push {r7}
 3402              	.LCFI245:
 3403              	 .cfi_def_cfa_offset 4
 3404              	 .cfi_offset 7,-4
 3405 0002 00AF     	 add r7,sp,#0
 3406              	.LCFI246:
 3407              	 .cfi_def_cfa_register 7
1175:.././hal/sam3u1c/pmc.c **** 	return PMC->PMC_IMR;
 3408              	 .loc 1 1175 12
 3409 0004 024B     	 ldr r3,.L236
 3410 0006 DB6E     	 ldr r3,[r3,#108]
1176:.././hal/sam3u1c/pmc.c **** }
 3411              	 .loc 1 1176 1
 3412 0008 1846     	 mov r0,r3
 3413 000a BD46     	 mov sp,r7
 3414              	.LCFI247:
 3415              	 .cfi_def_cfa_register 13
 3416              	 
 3417 000c 80BC     	 pop {r7}
 3418              	.LCFI248:
 3419              	 .cfi_restore 7
 3420              	 .cfi_def_cfa_offset 0
 3421 000e 7047     	 bx lr
 3422              	.L237:
 3423              	 .align 2
 3424              	.L236:
 3425 0010 00040E40 	 .word 1074660352
 3426              	 .cfi_endproc
 3427              	.LFE115:
 3429              	 .section .text.pmc_get_status,"ax",%progbits
 3430              	 .align 1
 3431              	 .global pmc_get_status
 3432              	 .syntax unified
 3433              	 .thumb
 3434              	 .thumb_func
 3435              	 .fpu softvfp
 3437              	pmc_get_status:
 3438              	.LFB116:
1177:.././hal/sam3u1c/pmc.c **** 
1178:.././hal/sam3u1c/pmc.c **** /**
1179:.././hal/sam3u1c/pmc.c ****  * \brief Get current status.
1180:.././hal/sam3u1c/pmc.c ****  *
1181:.././hal/sam3u1c/pmc.c ****  * \return The current PMC status.
1182:.././hal/sam3u1c/pmc.c ****  */
1183:.././hal/sam3u1c/pmc.c **** uint32_t pmc_get_status(void)
1184:.././hal/sam3u1c/pmc.c **** {
 3439              	 .loc 1 1184 1
 3440              	 .cfi_startproc
 3441              	 
 3442              	 
 3443              	 
 3444 0000 80B4     	 push {r7}
 3445              	.LCFI249:
 3446              	 .cfi_def_cfa_offset 4
 3447              	 .cfi_offset 7,-4
 3448 0002 00AF     	 add r7,sp,#0
 3449              	.LCFI250:
 3450              	 .cfi_def_cfa_register 7
1185:.././hal/sam3u1c/pmc.c **** 	return PMC->PMC_SR;
 3451              	 .loc 1 1185 12
 3452 0004 024B     	 ldr r3,.L240
 3453 0006 9B6E     	 ldr r3,[r3,#104]
1186:.././hal/sam3u1c/pmc.c **** }
 3454              	 .loc 1 1186 1
 3455 0008 1846     	 mov r0,r3
 3456 000a BD46     	 mov sp,r7
 3457              	.LCFI251:
 3458              	 .cfi_def_cfa_register 13
 3459              	 
 3460 000c 80BC     	 pop {r7}
 3461              	.LCFI252:
 3462              	 .cfi_restore 7
 3463              	 .cfi_def_cfa_offset 0
 3464 000e 7047     	 bx lr
 3465              	.L241:
 3466              	 .align 2
 3467              	.L240:
 3468 0010 00040E40 	 .word 1074660352
 3469              	 .cfi_endproc
 3470              	.LFE116:
 3472              	 .section .text.pmc_set_fast_startup_input,"ax",%progbits
 3473              	 .align 1
 3474              	 .global pmc_set_fast_startup_input
 3475              	 .syntax unified
 3476              	 .thumb
 3477              	 .thumb_func
 3478              	 .fpu softvfp
 3480              	pmc_set_fast_startup_input:
 3481              	.LFB117:
1187:.././hal/sam3u1c/pmc.c **** 
1188:.././hal/sam3u1c/pmc.c **** /**
1189:.././hal/sam3u1c/pmc.c ****  * \brief Set the wake-up inputs for fast startup mode registers
1190:.././hal/sam3u1c/pmc.c ****  *        (event generation).
1191:.././hal/sam3u1c/pmc.c ****  *
1192:.././hal/sam3u1c/pmc.c ****  * \param ul_inputs Wake up inputs to enable.
1193:.././hal/sam3u1c/pmc.c ****  */
1194:.././hal/sam3u1c/pmc.c **** void pmc_set_fast_startup_input(uint32_t ul_inputs)
1195:.././hal/sam3u1c/pmc.c **** {
 3482              	 .loc 1 1195 1
 3483              	 .cfi_startproc
 3484              	 
 3485              	 
 3486              	 
 3487 0000 80B4     	 push {r7}
 3488              	.LCFI253:
 3489              	 .cfi_def_cfa_offset 4
 3490              	 .cfi_offset 7,-4
 3491 0002 83B0     	 sub sp,sp,#12
 3492              	.LCFI254:
 3493              	 .cfi_def_cfa_offset 16
 3494 0004 00AF     	 add r7,sp,#0
 3495              	.LCFI255:
 3496              	 .cfi_def_cfa_register 7
 3497 0006 7860     	 str r0,[r7,#4]
1196:.././hal/sam3u1c/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
 3498              	 .loc 1 1196 12
 3499 0008 7B68     	 ldr r3,[r7,#4]
 3500 000a C3F31203 	 ubfx r3,r3,#0,#19
 3501 000e 7B60     	 str r3,[r7,#4]
1197:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR |= ul_inputs;
 3502              	 .loc 1 1197 16
 3503 0010 054B     	 ldr r3,.L243
 3504 0012 1A6F     	 ldr r2,[r3,#112]
 3505 0014 0449     	 ldr r1,.L243
 3506 0016 7B68     	 ldr r3,[r7,#4]
 3507 0018 1343     	 orrs r3,r3,r2
 3508 001a 0B67     	 str r3,[r1,#112]
1198:.././hal/sam3u1c/pmc.c **** }
 3509              	 .loc 1 1198 1
 3510 001c 00BF     	 nop
 3511 001e 0C37     	 adds r7,r7,#12
 3512              	.LCFI256:
 3513              	 .cfi_def_cfa_offset 4
 3514 0020 BD46     	 mov sp,r7
 3515              	.LCFI257:
 3516              	 .cfi_def_cfa_register 13
 3517              	 
 3518 0022 80BC     	 pop {r7}
 3519              	.LCFI258:
 3520              	 .cfi_restore 7
 3521              	 .cfi_def_cfa_offset 0
 3522 0024 7047     	 bx lr
 3523              	.L244:
 3524 0026 00BF     	 .align 2
 3525              	.L243:
 3526 0028 00040E40 	 .word 1074660352
 3527              	 .cfi_endproc
 3528              	.LFE117:
 3530              	 .section .text.pmc_clr_fast_startup_input,"ax",%progbits
 3531              	 .align 1
 3532              	 .global pmc_clr_fast_startup_input
 3533              	 .syntax unified
 3534              	 .thumb
 3535              	 .thumb_func
 3536              	 .fpu softvfp
 3538              	pmc_clr_fast_startup_input:
 3539              	.LFB118:
1199:.././hal/sam3u1c/pmc.c **** 
1200:.././hal/sam3u1c/pmc.c **** /**
1201:.././hal/sam3u1c/pmc.c ****  * \brief Clear the wake-up inputs for fast startup mode registers
1202:.././hal/sam3u1c/pmc.c ****  *        (remove event generation).
1203:.././hal/sam3u1c/pmc.c ****  *
1204:.././hal/sam3u1c/pmc.c ****  * \param ul_inputs Wake up inputs to disable.
1205:.././hal/sam3u1c/pmc.c ****  */
1206:.././hal/sam3u1c/pmc.c **** void pmc_clr_fast_startup_input(uint32_t ul_inputs)
1207:.././hal/sam3u1c/pmc.c **** {
 3540              	 .loc 1 1207 1
 3541              	 .cfi_startproc
 3542              	 
 3543              	 
 3544              	 
 3545 0000 80B4     	 push {r7}
 3546              	.LCFI259:
 3547              	 .cfi_def_cfa_offset 4
 3548              	 .cfi_offset 7,-4
 3549 0002 83B0     	 sub sp,sp,#12
 3550              	.LCFI260:
 3551              	 .cfi_def_cfa_offset 16
 3552 0004 00AF     	 add r7,sp,#0
 3553              	.LCFI261:
 3554              	 .cfi_def_cfa_register 7
 3555 0006 7860     	 str r0,[r7,#4]
1208:.././hal/sam3u1c/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
 3556              	 .loc 1 1208 12
 3557 0008 7B68     	 ldr r3,[r7,#4]
 3558 000a C3F31203 	 ubfx r3,r3,#0,#19
 3559 000e 7B60     	 str r3,[r7,#4]
1209:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR &= ~ul_inputs;
 3560              	 .loc 1 1209 16
 3561 0010 054B     	 ldr r3,.L246
 3562 0012 1A6F     	 ldr r2,[r3,#112]
 3563              	 .loc 1 1209 19
 3564 0014 7B68     	 ldr r3,[r7,#4]
 3565 0016 DB43     	 mvns r3,r3
 3566              	 .loc 1 1209 16
 3567 0018 0349     	 ldr r1,.L246
 3568 001a 1340     	 ands r3,r3,r2
 3569 001c 0B67     	 str r3,[r1,#112]
1210:.././hal/sam3u1c/pmc.c **** }
 3570              	 .loc 1 1210 1
 3571 001e 00BF     	 nop
 3572 0020 0C37     	 adds r7,r7,#12
 3573              	.LCFI262:
 3574              	 .cfi_def_cfa_offset 4
 3575 0022 BD46     	 mov sp,r7
 3576              	.LCFI263:
 3577              	 .cfi_def_cfa_register 13
 3578              	 
 3579 0024 80BC     	 pop {r7}
 3580              	.LCFI264:
 3581              	 .cfi_restore 7
 3582              	 .cfi_def_cfa_offset 0
 3583 0026 7047     	 bx lr
 3584              	.L247:
 3585              	 .align 2
 3586              	.L246:
 3587 0028 00040E40 	 .word 1074660352
 3588              	 .cfi_endproc
 3589              	.LFE118:
 3591              	 .section .text.pmc_enable_sleepmode,"ax",%progbits
 3592              	 .align 1
 3593              	 .global pmc_enable_sleepmode
 3594              	 .syntax unified
 3595              	 .thumb
 3596              	 .thumb_func
 3597              	 .fpu softvfp
 3599              	pmc_enable_sleepmode:
 3600              	.LFB119:
1211:.././hal/sam3u1c/pmc.c **** 
1212:.././hal/sam3u1c/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP)
1213:.././hal/sam3u1c/pmc.c **** /**
1214:.././hal/sam3u1c/pmc.c ****  * \brief Set the wake-up inputs of coprocessor for fast startup mode registers
1215:.././hal/sam3u1c/pmc.c ****  *        (event generation).
1216:.././hal/sam3u1c/pmc.c ****  *
1217:.././hal/sam3u1c/pmc.c ****  * \param ul_inputs Wake up inputs to enable.
1218:.././hal/sam3u1c/pmc.c ****  */
1219:.././hal/sam3u1c/pmc.c **** void pmc_cp_set_fast_startup_input(uint32_t ul_inputs)
1220:.././hal/sam3u1c/pmc.c **** {
1221:.././hal/sam3u1c/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
1222:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_CPFSMR |= ul_inputs;
1223:.././hal/sam3u1c/pmc.c **** }
1224:.././hal/sam3u1c/pmc.c **** 
1225:.././hal/sam3u1c/pmc.c **** /**
1226:.././hal/sam3u1c/pmc.c ****  * \brief Clear the wake-up inputs of coprocessor for fast startup mode registers
1227:.././hal/sam3u1c/pmc.c ****  *        (remove event generation).
1228:.././hal/sam3u1c/pmc.c ****  *
1229:.././hal/sam3u1c/pmc.c ****  * \param ul_inputs Wake up inputs to disable.
1230:.././hal/sam3u1c/pmc.c ****  */
1231:.././hal/sam3u1c/pmc.c **** void pmc_cp_clr_fast_startup_input(uint32_t ul_inputs)
1232:.././hal/sam3u1c/pmc.c **** {
1233:.././hal/sam3u1c/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
1234:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_CPFSMR &= ~ul_inputs;
1235:.././hal/sam3u1c/pmc.c **** }
1236:.././hal/sam3u1c/pmc.c **** #endif
1237:.././hal/sam3u1c/pmc.c **** 
1238:.././hal/sam3u1c/pmc.c **** #if (!(SAMG51 || SAMG53 || SAMG54))
1239:.././hal/sam3u1c/pmc.c **** /**
1240:.././hal/sam3u1c/pmc.c ****  * \brief Enable Sleep Mode.
1241:.././hal/sam3u1c/pmc.c ****  * Enter condition: (WFE or WFI) + (SLEEPDEEP bit = 0) + (LPM bit = 0)
1242:.././hal/sam3u1c/pmc.c ****  *
1243:.././hal/sam3u1c/pmc.c ****  * \param uc_type 0 for wait for interrupt, 1 for wait for event.
1244:.././hal/sam3u1c/pmc.c ****  * \note For SAM4S, SAM4C, SAM4CM, SAM4CP and SAM4E series,
1245:.././hal/sam3u1c/pmc.c ****  * since only WFI is effective, uc_type = 1 will be treated as uc_type = 0.
1246:.././hal/sam3u1c/pmc.c ****  */
1247:.././hal/sam3u1c/pmc.c **** void pmc_enable_sleepmode(uint8_t uc_type)
1248:.././hal/sam3u1c/pmc.c **** {
 3601              	 .loc 1 1248 1
 3602              	 .cfi_startproc
 3603              	 
 3604              	 
 3605              	 
 3606 0000 80B4     	 push {r7}
 3607              	.LCFI265:
 3608              	 .cfi_def_cfa_offset 4
 3609              	 .cfi_offset 7,-4
 3610 0002 83B0     	 sub sp,sp,#12
 3611              	.LCFI266:
 3612              	 .cfi_def_cfa_offset 16
 3613 0004 00AF     	 add r7,sp,#0
 3614              	.LCFI267:
 3615              	 .cfi_def_cfa_register 7
 3616 0006 0346     	 mov r3,r0
 3617 0008 FB71     	 strb r3,[r7,#7]
1249:.././hal/sam3u1c/pmc.c **** #if !(SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP)
1250:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR &= (uint32_t) ~ PMC_FSMR_LPM; // Enter Sleep mode
 3618              	 .loc 1 1250 16
 3619 000a 0B4B     	 ldr r3,.L252
 3620 000c 1B6F     	 ldr r3,[r3,#112]
 3621 000e 0A4A     	 ldr r2,.L252
 3622 0010 23F48013 	 bic r3,r3,#1048576
 3623 0014 1367     	 str r3,[r2,#112]
1251:.././hal/sam3u1c/pmc.c **** #endif
1252:.././hal/sam3u1c/pmc.c **** 	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; // Deep sleep
 3624              	 .loc 1 1252 11
 3625 0016 094B     	 ldr r3,.L252+4
 3626 0018 1B69     	 ldr r3,[r3,#16]
 3627 001a 084A     	 ldr r2,.L252+4
 3628 001c 23F00403 	 bic r3,r3,#4
 3629 0020 1361     	 str r3,[r2,#16]
1253:.././hal/sam3u1c/pmc.c **** 
1254:.././hal/sam3u1c/pmc.c **** #if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP)
1255:.././hal/sam3u1c/pmc.c **** 	UNUSED(uc_type);
1256:.././hal/sam3u1c/pmc.c **** 	__WFI();
1257:.././hal/sam3u1c/pmc.c **** #else
1258:.././hal/sam3u1c/pmc.c **** 	if (uc_type == 0) {
 3630              	 .loc 1 1258 5
 3631 0022 FB79     	 ldrb r3,[r7,#7]
 3632 0024 002B     	 cmp r3,#0
 3633 0026 01D1     	 bne .L249
 3634              	.LBB12:
 3635              	.LBB13:
 3636              	 .file 2 ".././hal/sam3u1c/inc/core_cmInstr.h"
   1:.././hal/sam3u1c/inc/core_cmInstr.h **** /**************************************************************************//**
   2:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @version  V3.00
   5:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @date     07. February 2012
   6:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
   7:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @note
   8:.././hal/sam3u1c/inc/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  10:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @par
  11:.././hal/sam3u1c/inc/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:.././hal/sam3u1c/inc/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:.././hal/sam3u1c/inc/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  15:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @par
  16:.././hal/sam3u1c/inc/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:.././hal/sam3u1c/inc/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:.././hal/sam3u1c/inc/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:.././hal/sam3u1c/inc/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:.././hal/sam3u1c/inc/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  22:.././hal/sam3u1c/inc/core_cmInstr.h ****  ******************************************************************************/
  23:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  24:.././hal/sam3u1c/inc/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  27:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  28:.././hal/sam3u1c/inc/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:.././hal/sam3u1c/inc/core_cmInstr.h ****   Access to dedicated instructions
  31:.././hal/sam3u1c/inc/core_cmInstr.h ****   @{
  32:.././hal/sam3u1c/inc/core_cmInstr.h **** */
  33:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  34:.././hal/sam3u1c/inc/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:.././hal/sam3u1c/inc/core_cmInstr.h **** /* ARM armcc specific functions */
  36:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  37:.././hal/sam3u1c/inc/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:.././hal/sam3u1c/inc/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:.././hal/sam3u1c/inc/core_cmInstr.h **** #endif
  40:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  41:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  42:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  No Operation
  43:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  44:.././hal/sam3u1c/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  46:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __NOP                             __nop
  47:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  48:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  49:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  51:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:.././hal/sam3u1c/inc/core_cmInstr.h ****     until one of a number of events occurs.
  53:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  54:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __WFI                             __wfi
  55:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  56:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  57:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Event
  58:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  59:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:.././hal/sam3u1c/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  62:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __WFE                             __wfe
  63:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  64:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  65:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Send Event
  66:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  67:.././hal/sam3u1c/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  69:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __SEV                             __sev
  70:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  71:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  72:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  74:.././hal/sam3u1c/inc/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:.././hal/sam3u1c/inc/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:.././hal/sam3u1c/inc/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  78:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  80:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  81:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  83:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:.././hal/sam3u1c/inc/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  86:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  88:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  89:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  91:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:.././hal/sam3u1c/inc/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  94:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  96:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  97:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  99:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 101:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 103:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 104:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __REV                             __rev
 105:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 106:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 107:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 109:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 111:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 113:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 114:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 116:.././hal/sam3u1c/inc/core_cmInstr.h ****   rev16 r0, r0
 117:.././hal/sam3u1c/inc/core_cmInstr.h ****   bx lr
 118:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 119:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 120:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 121:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 123:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 125:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 127:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 128:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 130:.././hal/sam3u1c/inc/core_cmInstr.h ****   revsh r0, r0
 131:.././hal/sam3u1c/inc/core_cmInstr.h ****   bx lr
 132:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 133:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 134:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 135:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 137:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 139:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Rotated value
 142:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 143:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __ROR                             __ror
 144:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 145:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 146:.././hal/sam3u1c/inc/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 148:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 150:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 152:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 154:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 155:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __RBIT                            __rbit
 156:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 157:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 158:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 160:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 162:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 165:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 167:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 168:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 170:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 172:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 175:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 177:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 178:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 180:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 182:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 185:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 187:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 188:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 190:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 192:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 193:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 195:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 196:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 197:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 199:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 200:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 202:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 204:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 205:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 207:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 208:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 209:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 211:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 212:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 214:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 216:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 217:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 219:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 220:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 221:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 223:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 224:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 226:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 228:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 229:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CLREX                           __clrex
 230:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 231:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 232:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Signed Saturate
 233:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 234:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function saturates a signed value.
 235:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 236:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             Saturated value
 239:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 240:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __SSAT                            __ssat
 241:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 242:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 243:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 245:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function saturates an unsigned value.
 246:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 247:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             Saturated value
 250:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 251:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __USAT                            __usat
 252:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 253:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 254:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Count leading zeros
 255:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 256:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 258:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             number of leading zeros in value
 260:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 261:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CLZ                             __clz
 262:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 263:.././hal/sam3u1c/inc/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 265:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 266:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 267:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:.././hal/sam3u1c/inc/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 270:.././hal/sam3u1c/inc/core_cmInstr.h **** #include <cmsis_iar.h>
 271:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 272:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 273:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:.././hal/sam3u1c/inc/core_cmInstr.h **** /* TI CCS specific functions */
 275:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 276:.././hal/sam3u1c/inc/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 278:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 279:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:.././hal/sam3u1c/inc/core_cmInstr.h **** /* GNU gcc specific functions */
 281:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 282:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  No Operation
 283:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 284:.././hal/sam3u1c/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 286:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 287:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 288:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("nop");
 289:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 290:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 291:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 292:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
 293:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 294:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 295:.././hal/sam3u1c/inc/core_cmInstr.h ****     until one of a number of events occurs.
 296:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 297:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 298:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 299:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("wfi");
 3637              	 .loc 2 299 3
 3638              	 .syntax unified
 3639              	
 3640 0028 30BF     	 wfi
 3641              	
 3642              	 .thumb
 3643              	 .syntax unified
 3644              	.LBE13:
 3645              	.LBE12:
1259:.././hal/sam3u1c/pmc.c **** 		__WFI();
1260:.././hal/sam3u1c/pmc.c **** 	} else {
1261:.././hal/sam3u1c/pmc.c **** 		__WFE();
1262:.././hal/sam3u1c/pmc.c **** 	}
1263:.././hal/sam3u1c/pmc.c **** #endif
1264:.././hal/sam3u1c/pmc.c **** }
 3646              	 .loc 1 1264 1
 3647 002a 00E0     	 b .L251
 3648              	.L249:
 3649              	.LBB14:
 3650              	.LBB15:
 300:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 301:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 302:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 303:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Event
 304:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 305:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 306:.././hal/sam3u1c/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 307:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 308:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 309:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 310:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("wfe");
 3651              	 .loc 2 310 3
 3652              	 .syntax unified
 3653              	
 3654 002c 20BF     	 wfe
 3655              	
 3656              	 .thumb
 3657              	 .syntax unified
 3658              	.L251:
 3659              	.LBE15:
 3660              	.LBE14:
 3661              	 .loc 1 1264 1
 3662 002e 00BF     	 nop
 3663 0030 0C37     	 adds r7,r7,#12
 3664              	.LCFI268:
 3665              	 .cfi_def_cfa_offset 4
 3666 0032 BD46     	 mov sp,r7
 3667              	.LCFI269:
 3668              	 .cfi_def_cfa_register 13
 3669              	 
 3670 0034 80BC     	 pop {r7}
 3671              	.LCFI270:
 3672              	 .cfi_restore 7
 3673              	 .cfi_def_cfa_offset 0
 3674 0036 7047     	 bx lr
 3675              	.L253:
 3676              	 .align 2
 3677              	.L252:
 3678 0038 00040E40 	 .word 1074660352
 3679 003c 00ED00E0 	 .word -536810240
 3680              	 .cfi_endproc
 3681              	.LFE119:
 3683              	 .section .text.pmc_enable_waitmode,"ax",%progbits
 3684              	 .align 1
 3685              	 .global pmc_enable_waitmode
 3686              	 .syntax unified
 3687              	 .thumb
 3688              	 .thumb_func
 3689              	 .fpu softvfp
 3691              	pmc_enable_waitmode:
 3692              	.LFB120:
1265:.././hal/sam3u1c/pmc.c **** #endif
1266:.././hal/sam3u1c/pmc.c **** 
1267:.././hal/sam3u1c/pmc.c **** #if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAMG || SAM4CP)
1268:.././hal/sam3u1c/pmc.c **** static uint32_t ul_flash_in_wait_mode = PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN;
1269:.././hal/sam3u1c/pmc.c **** /**
1270:.././hal/sam3u1c/pmc.c ****  * \brief Set the embedded flash state in wait mode
1271:.././hal/sam3u1c/pmc.c ****  *
1272:.././hal/sam3u1c/pmc.c ****  * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
1273:.././hal/sam3u1c/pmc.c ****  * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
1274:.././hal/sam3u1c/pmc.c ****  */
1275:.././hal/sam3u1c/pmc.c **** void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
1276:.././hal/sam3u1c/pmc.c **** {
1277:.././hal/sam3u1c/pmc.c **** 	ul_flash_in_wait_mode = ul_flash_state;
1278:.././hal/sam3u1c/pmc.c **** }
1279:.././hal/sam3u1c/pmc.c **** 
1280:.././hal/sam3u1c/pmc.c **** /**
1281:.././hal/sam3u1c/pmc.c ****  * \brief Enable Wait Mode. Enter condition: (WAITMODE bit = 1) +
1282:.././hal/sam3u1c/pmc.c ****  * (SLEEPDEEP bit = 0) + FLPM
1283:.././hal/sam3u1c/pmc.c ****  *
1284:.././hal/sam3u1c/pmc.c ****  * \note In this function the FWS is reset to 0 to get best flash access
1285:.././hal/sam3u1c/pmc.c ****  * performance while running on fast wake up RC clock. Make sure the
1286:.././hal/sam3u1c/pmc.c ****  * non-zero FWS value is saved before invoking this function, and restored
1287:.././hal/sam3u1c/pmc.c ****  * after system woken up, to avoid flash access error.
1288:.././hal/sam3u1c/pmc.c ****  * See \ref pmc_sleep() for entering different sleep modes.
1289:.././hal/sam3u1c/pmc.c ****  */
1290:.././hal/sam3u1c/pmc.c **** void pmc_enable_waitmode(void)
1291:.././hal/sam3u1c/pmc.c **** {
1292:.././hal/sam3u1c/pmc.c **** 	uint32_t i;
1293:.././hal/sam3u1c/pmc.c **** 
1294:.././hal/sam3u1c/pmc.c **** 	/* Flash in wait mode */
1295:.././hal/sam3u1c/pmc.c **** 	i = PMC->PMC_FSMR;
1296:.././hal/sam3u1c/pmc.c **** 	i &= ~PMC_FSMR_FLPM_Msk;
1297:.././hal/sam3u1c/pmc.c **** 	i |= ul_flash_in_wait_mode;
1298:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR = i;
1299:.././hal/sam3u1c/pmc.c **** 
1300:.././hal/sam3u1c/pmc.c **** 	/* Clear SLEEPDEEP bit */
1301:.././hal/sam3u1c/pmc.c **** 	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk;
1302:.././hal/sam3u1c/pmc.c **** 
1303:.././hal/sam3u1c/pmc.c **** 	/* Set the WAITMODE bit = 1 */
1304:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
1305:.././hal/sam3u1c/pmc.c **** 
1306:.././hal/sam3u1c/pmc.c **** 	/* Waiting for Master Clock Ready MCKRDY = 1 */
1307:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
1308:.././hal/sam3u1c/pmc.c **** 
1309:.././hal/sam3u1c/pmc.c **** 	/* Waiting for MOSCRCEN bit cleared is strongly recommended
1310:.././hal/sam3u1c/pmc.c **** 	 * to ensure that the core will not execute undesired instructions
1311:.././hal/sam3u1c/pmc.c **** 	 */
1312:.././hal/sam3u1c/pmc.c **** 	for (i = 0; i < 500; i++) {
1313:.././hal/sam3u1c/pmc.c **** 		__NOP();
1314:.././hal/sam3u1c/pmc.c **** 	}
1315:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
1316:.././hal/sam3u1c/pmc.c **** 
1317:.././hal/sam3u1c/pmc.c **** #if (!SAMG)
1318:.././hal/sam3u1c/pmc.c **** 	/* Restore Flash in idle mode */
1319:.././hal/sam3u1c/pmc.c **** 	i = PMC->PMC_FSMR;
1320:.././hal/sam3u1c/pmc.c **** 	i &= ~PMC_FSMR_FLPM_Msk;
1321:.././hal/sam3u1c/pmc.c **** 	i |= PMC_WAIT_MODE_FLASH_IDLE;
1322:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR = i;
1323:.././hal/sam3u1c/pmc.c **** #endif
1324:.././hal/sam3u1c/pmc.c **** }
1325:.././hal/sam3u1c/pmc.c **** #else
1326:.././hal/sam3u1c/pmc.c **** /**
1327:.././hal/sam3u1c/pmc.c ****  * \brief Enable Wait Mode. Enter condition: WFE + (SLEEPDEEP bit = 0) +
1328:.././hal/sam3u1c/pmc.c ****  * (LPM bit = 1)
1329:.././hal/sam3u1c/pmc.c ****  */
1330:.././hal/sam3u1c/pmc.c **** void pmc_enable_waitmode(void)
1331:.././hal/sam3u1c/pmc.c **** {
 3693              	 .loc 1 1331 1
 3694              	 .cfi_startproc
 3695              	 
 3696              	 
 3697              	 
 3698 0000 80B4     	 push {r7}
 3699              	.LCFI271:
 3700              	 .cfi_def_cfa_offset 4
 3701              	 .cfi_offset 7,-4
 3702 0002 83B0     	 sub sp,sp,#12
 3703              	.LCFI272:
 3704              	 .cfi_def_cfa_offset 16
 3705 0004 00AF     	 add r7,sp,#0
 3706              	.LCFI273:
 3707              	 .cfi_def_cfa_register 7
1332:.././hal/sam3u1c/pmc.c **** 	uint32_t i;
1333:.././hal/sam3u1c/pmc.c **** 
1334:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
 3708              	 .loc 1 1334 16
 3709 0006 124B     	 ldr r3,.L258
 3710 0008 1B6F     	 ldr r3,[r3,#112]
 3711 000a 114A     	 ldr r2,.L258
 3712 000c 43F48013 	 orr r3,r3,#1048576
 3713 0010 1367     	 str r3,[r2,#112]
1335:.././hal/sam3u1c/pmc.c **** 	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
 3714              	 .loc 1 1335 11
 3715 0012 104B     	 ldr r3,.L258+4
 3716 0014 1B69     	 ldr r3,[r3,#16]
 3717 0016 0F4A     	 ldr r2,.L258+4
 3718 0018 23F00403 	 bic r3,r3,#4
 3719 001c 1361     	 str r3,[r2,#16]
 3720              	.LBB16:
 3721              	.LBB17:
 3722              	 .loc 2 310 3
 3723              	 .syntax unified
 3724              	
 3725 001e 20BF     	 wfe
 3726              	
 3727              	 .thumb
 3728              	 .syntax unified
 3729              	.LBE17:
 3730              	.LBE16:
1336:.././hal/sam3u1c/pmc.c **** 
1337:.././hal/sam3u1c/pmc.c **** 	__WFE();
1338:.././hal/sam3u1c/pmc.c **** 
1339:.././hal/sam3u1c/pmc.c **** 	/* Waiting for MOSCRCEN bit cleared is strongly recommended
1340:.././hal/sam3u1c/pmc.c **** 	 * to ensure that the core will not execute undesired instructions
1341:.././hal/sam3u1c/pmc.c **** 	 */
1342:.././hal/sam3u1c/pmc.c **** 	for (i = 0; i < 500; i++) {
 3731              	 .loc 1 1342 9
 3732 0020 0023     	 movs r3,#0
 3733 0022 7B60     	 str r3,[r7,#4]
 3734              	 .loc 1 1342 2
 3735 0024 03E0     	 b .L255
 3736              	.L256:
 3737              	.LBB18:
 3738              	.LBB19:
 288:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 3739              	 .loc 2 288 3 discriminator 3
 3740              	 .syntax unified
 3741              	
 3742 0026 00BF     	 nop
 3743              	
 3744              	 .thumb
 3745              	 .syntax unified
 3746              	.LBE19:
 3747              	.LBE18:
 3748              	 .loc 1 1342 24 discriminator 3
 3749 0028 7B68     	 ldr r3,[r7,#4]
 3750 002a 0133     	 adds r3,r3,#1
 3751 002c 7B60     	 str r3,[r7,#4]
 3752              	.L255:
 3753              	 .loc 1 1342 2 discriminator 1
 3754 002e 7B68     	 ldr r3,[r7,#4]
 3755 0030 B3F5FA7F 	 cmp r3,#500
 3756 0034 F7D3     	 bcc .L256
1343:.././hal/sam3u1c/pmc.c **** 		__NOP();
1344:.././hal/sam3u1c/pmc.c **** 	}
1345:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
 3757              	 .loc 1 1345 8
 3758 0036 00BF     	 nop
 3759              	.L257:
 3760              	 .loc 1 1345 14 discriminator 1
 3761 0038 054B     	 ldr r3,.L258
 3762 003a 1B6A     	 ldr r3,[r3,#32]
 3763              	 .loc 1 1345 25 discriminator 1
 3764 003c 03F00803 	 and r3,r3,#8
 3765              	 .loc 1 1345 8 discriminator 1
 3766 0040 002B     	 cmp r3,#0
 3767 0042 F9D0     	 beq .L257
1346:.././hal/sam3u1c/pmc.c **** 
1347:.././hal/sam3u1c/pmc.c **** }
 3768              	 .loc 1 1347 1
 3769 0044 00BF     	 nop
 3770 0046 0C37     	 adds r7,r7,#12
 3771              	.LCFI274:
 3772              	 .cfi_def_cfa_offset 4
 3773 0048 BD46     	 mov sp,r7
 3774              	.LCFI275:
 3775              	 .cfi_def_cfa_register 13
 3776              	 
 3777 004a 80BC     	 pop {r7}
 3778              	.LCFI276:
 3779              	 .cfi_restore 7
 3780              	 .cfi_def_cfa_offset 0
 3781 004c 7047     	 bx lr
 3782              	.L259:
 3783 004e 00BF     	 .align 2
 3784              	.L258:
 3785 0050 00040E40 	 .word 1074660352
 3786 0054 00ED00E0 	 .word -536810240
 3787              	 .cfi_endproc
 3788              	.LFE120:
 3790              	 .section .text.pmc_enable_backupmode,"ax",%progbits
 3791              	 .align 1
 3792              	 .global pmc_enable_backupmode
 3793              	 .syntax unified
 3794              	 .thumb
 3795              	 .thumb_func
 3796              	 .fpu softvfp
 3798              	pmc_enable_backupmode:
 3799              	.LFB121:
1348:.././hal/sam3u1c/pmc.c **** #endif
1349:.././hal/sam3u1c/pmc.c **** 
1350:.././hal/sam3u1c/pmc.c **** #if (!(SAMG51 || SAMG53 || SAMG54))
1351:.././hal/sam3u1c/pmc.c **** /**
1352:.././hal/sam3u1c/pmc.c ****  * \brief Enable Backup Mode. Enter condition: WFE/(VROFF bit = 1) +
1353:.././hal/sam3u1c/pmc.c ****  * (SLEEPDEEP bit = 1)
1354:.././hal/sam3u1c/pmc.c ****  */
1355:.././hal/sam3u1c/pmc.c **** void pmc_enable_backupmode(void)
1356:.././hal/sam3u1c/pmc.c **** {
 3800              	 .loc 1 1356 1
 3801              	 .cfi_startproc
 3802              	 
 3803              	 
 3804              	 
 3805 0000 80B4     	 push {r7}
 3806              	.LCFI277:
 3807              	 .cfi_def_cfa_offset 4
 3808              	 .cfi_offset 7,-4
 3809 0002 00AF     	 add r7,sp,#0
 3810              	.LCFI278:
 3811              	 .cfi_def_cfa_register 7
1357:.././hal/sam3u1c/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP)
1358:.././hal/sam3u1c/pmc.c **** 	uint32_t tmp = SUPC->SUPC_MR & ~(SUPC_MR_BUPPOREN | SUPC_MR_KEY_Msk);
1359:.././hal/sam3u1c/pmc.c **** 	SUPC->SUPC_MR = tmp | SUPC_MR_KEY_PASSWD;
1360:.././hal/sam3u1c/pmc.c **** 	while (SUPC->SUPC_SR & SUPC_SR_BUPPORS);
1361:.././hal/sam3u1c/pmc.c **** #endif
1362:.././hal/sam3u1c/pmc.c **** 	SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 3812              	 .loc 1 1362 11
 3813 0004 054B     	 ldr r3,.L261
 3814 0006 1B69     	 ldr r3,[r3,#16]
 3815 0008 044A     	 ldr r2,.L261
 3816 000a 43F00403 	 orr r3,r3,#4
 3817 000e 1361     	 str r3,[r2,#16]
 3818              	.LBB20:
 3819              	.LBB21:
 3820              	 .loc 2 310 3
 3821              	 .syntax unified
 3822              	
 3823 0010 20BF     	 wfe
 3824              	
 3825              	 .thumb
 3826              	 .syntax unified
 3827              	.LBE21:
 3828              	.LBE20:
1363:.././hal/sam3u1c/pmc.c **** #if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
1364:.././hal/sam3u1c/pmc.c **** 	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
1365:.././hal/sam3u1c/pmc.c **** 	__WFE();
1366:.././hal/sam3u1c/pmc.c **** 	__WFI();
1367:.././hal/sam3u1c/pmc.c **** #else
1368:.././hal/sam3u1c/pmc.c **** 	__WFE();
1369:.././hal/sam3u1c/pmc.c **** #endif
1370:.././hal/sam3u1c/pmc.c **** }
 3829              	 .loc 1 1370 1
 3830 0012 00BF     	 nop
 3831 0014 BD46     	 mov sp,r7
 3832              	.LCFI279:
 3833              	 .cfi_def_cfa_register 13
 3834              	 
 3835 0016 80BC     	 pop {r7}
 3836              	.LCFI280:
 3837              	 .cfi_restore 7
 3838              	 .cfi_def_cfa_offset 0
 3839 0018 7047     	 bx lr
 3840              	.L262:
 3841 001a 00BF     	 .align 2
 3842              	.L261:
 3843 001c 00ED00E0 	 .word -536810240
 3844              	 .cfi_endproc
 3845              	.LFE121:
 3847              	 .section .text.pmc_enable_clock_failure_detector,"ax",%progbits
 3848              	 .align 1
 3849              	 .global pmc_enable_clock_failure_detector
 3850              	 .syntax unified
 3851              	 .thumb
 3852              	 .thumb_func
 3853              	 .fpu softvfp
 3855              	pmc_enable_clock_failure_detector:
 3856              	.LFB122:
1371:.././hal/sam3u1c/pmc.c **** #endif
1372:.././hal/sam3u1c/pmc.c **** 
1373:.././hal/sam3u1c/pmc.c **** /**
1374:.././hal/sam3u1c/pmc.c ****  * \brief Enable Clock Failure Detector.
1375:.././hal/sam3u1c/pmc.c ****  */
1376:.././hal/sam3u1c/pmc.c **** void pmc_enable_clock_failure_detector(void)
1377:.././hal/sam3u1c/pmc.c **** {
 3857              	 .loc 1 1377 1
 3858              	 .cfi_startproc
 3859              	 
 3860              	 
 3861              	 
 3862 0000 80B4     	 push {r7}
 3863              	.LCFI281:
 3864              	 .cfi_def_cfa_offset 4
 3865              	 .cfi_offset 7,-4
 3866 0002 83B0     	 sub sp,sp,#12
 3867              	.LCFI282:
 3868              	 .cfi_def_cfa_offset 16
 3869 0004 00AF     	 add r7,sp,#0
 3870              	.LCFI283:
 3871              	 .cfi_def_cfa_register 7
1378:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR;
 3872              	 .loc 1 1378 23
 3873 0006 074B     	 ldr r3,.L264
 3874              	 .loc 1 1378 11
 3875 0008 1B6A     	 ldr r3,[r3,#32]
 3876 000a 7B60     	 str r3,[r7,#4]
1379:.././hal/sam3u1c/pmc.c **** 
1380:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | CKGR_MOR_CFDEN | ul_reg;
 3877              	 .loc 1 1380 5
 3878 000c 054A     	 ldr r2,.L264
 3879              	 .loc 1 1380 55
 3880 000e 7B68     	 ldr r3,[r7,#4]
 3881 0010 43F00D73 	 orr r3,r3,#36962304
 3882 0014 43F44033 	 orr r3,r3,#196608
 3883              	 .loc 1 1380 16
 3884 0018 1362     	 str r3,[r2,#32]
1381:.././hal/sam3u1c/pmc.c **** }
 3885              	 .loc 1 1381 1
 3886 001a 00BF     	 nop
 3887 001c 0C37     	 adds r7,r7,#12
 3888              	.LCFI284:
 3889              	 .cfi_def_cfa_offset 4
 3890 001e BD46     	 mov sp,r7
 3891              	.LCFI285:
 3892              	 .cfi_def_cfa_register 13
 3893              	 
 3894 0020 80BC     	 pop {r7}
 3895              	.LCFI286:
 3896              	 .cfi_restore 7
 3897              	 .cfi_def_cfa_offset 0
 3898 0022 7047     	 bx lr
 3899              	.L265:
 3900              	 .align 2
 3901              	.L264:
 3902 0024 00040E40 	 .word 1074660352
 3903              	 .cfi_endproc
 3904              	.LFE122:
 3906              	 .section .text.pmc_disable_clock_failure_detector,"ax",%progbits
 3907              	 .align 1
 3908              	 .global pmc_disable_clock_failure_detector
 3909              	 .syntax unified
 3910              	 .thumb
 3911              	 .thumb_func
 3912              	 .fpu softvfp
 3914              	pmc_disable_clock_failure_detector:
 3915              	.LFB123:
1382:.././hal/sam3u1c/pmc.c **** 
1383:.././hal/sam3u1c/pmc.c **** /**
1384:.././hal/sam3u1c/pmc.c ****  * \brief Disable Clock Failure Detector.
1385:.././hal/sam3u1c/pmc.c ****  */
1386:.././hal/sam3u1c/pmc.c **** void pmc_disable_clock_failure_detector(void)
1387:.././hal/sam3u1c/pmc.c **** {
 3916              	 .loc 1 1387 1
 3917              	 .cfi_startproc
 3918              	 
 3919              	 
 3920              	 
 3921 0000 80B4     	 push {r7}
 3922              	.LCFI287:
 3923              	 .cfi_def_cfa_offset 4
 3924              	 .cfi_offset 7,-4
 3925 0002 83B0     	 sub sp,sp,#12
 3926              	.LCFI288:
 3927              	 .cfi_def_cfa_offset 16
 3928 0004 00AF     	 add r7,sp,#0
 3929              	.LCFI289:
 3930              	 .cfi_def_cfa_register 7
1388:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR & (~CKGR_MOR_CFDEN);
 3931              	 .loc 1 1388 23
 3932 0006 074B     	 ldr r3,.L267
 3933 0008 1B6A     	 ldr r3,[r3,#32]
 3934              	 .loc 1 1388 11
 3935 000a 23F00073 	 bic r3,r3,#33554432
 3936 000e 7B60     	 str r3,[r7,#4]
1389:.././hal/sam3u1c/pmc.c **** 
1390:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | ul_reg;
 3937              	 .loc 1 1390 5
 3938 0010 044A     	 ldr r2,.L267
 3939              	 .loc 1 1390 38
 3940 0012 7B68     	 ldr r3,[r7,#4]
 3941 0014 43F45C13 	 orr r3,r3,#3604480
 3942              	 .loc 1 1390 16
 3943 0018 1362     	 str r3,[r2,#32]
1391:.././hal/sam3u1c/pmc.c **** }
 3944              	 .loc 1 1391 1
 3945 001a 00BF     	 nop
 3946 001c 0C37     	 adds r7,r7,#12
 3947              	.LCFI290:
 3948              	 .cfi_def_cfa_offset 4
 3949 001e BD46     	 mov sp,r7
 3950              	.LCFI291:
 3951              	 .cfi_def_cfa_register 13
 3952              	 
 3953 0020 80BC     	 pop {r7}
 3954              	.LCFI292:
 3955              	 .cfi_restore 7
 3956              	 .cfi_def_cfa_offset 0
 3957 0022 7047     	 bx lr
 3958              	.L268:
 3959              	 .align 2
 3960              	.L267:
 3961 0024 00040E40 	 .word 1074660352
 3962              	 .cfi_endproc
 3963              	.LFE123:
 3965              	 .section .text.pmc_set_writeprotect,"ax",%progbits
 3966              	 .align 1
 3967              	 .global pmc_set_writeprotect
 3968              	 .syntax unified
 3969              	 .thumb
 3970              	 .thumb_func
 3971              	 .fpu softvfp
 3973              	pmc_set_writeprotect:
 3974              	.LFB124:
1392:.././hal/sam3u1c/pmc.c **** 
1393:.././hal/sam3u1c/pmc.c **** #if (SAM4N || SAM4C || SAM4CM || SAM4CP)
1394:.././hal/sam3u1c/pmc.c **** /**
1395:.././hal/sam3u1c/pmc.c ****  * \brief Enable Slow Crystal Oscillator Frequency Monitoring.
1396:.././hal/sam3u1c/pmc.c ****  */
1397:.././hal/sam3u1c/pmc.c **** void pmc_enable_sclk_osc_freq_monitor(void)
1398:.././hal/sam3u1c/pmc.c **** {
1399:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR;
1400:.././hal/sam3u1c/pmc.c **** 
1401:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | CKGR_MOR_XT32KFME | ul_reg;
1402:.././hal/sam3u1c/pmc.c **** }
1403:.././hal/sam3u1c/pmc.c **** 
1404:.././hal/sam3u1c/pmc.c **** /**
1405:.././hal/sam3u1c/pmc.c ****  * \brief Disable Slow Crystal Oscillator Frequency Monitoring.
1406:.././hal/sam3u1c/pmc.c ****  */
1407:.././hal/sam3u1c/pmc.c **** void pmc_disable_sclk_osc_freq_monitor(void)
1408:.././hal/sam3u1c/pmc.c **** {
1409:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR & (~CKGR_MOR_XT32KFME);
1410:.././hal/sam3u1c/pmc.c **** 
1411:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | ul_reg;
1412:.././hal/sam3u1c/pmc.c **** }
1413:.././hal/sam3u1c/pmc.c **** #endif
1414:.././hal/sam3u1c/pmc.c **** 
1415:.././hal/sam3u1c/pmc.c **** /**
1416:.././hal/sam3u1c/pmc.c ****  * \brief Enable or disable write protect of PMC registers.
1417:.././hal/sam3u1c/pmc.c ****  *
1418:.././hal/sam3u1c/pmc.c ****  * \param ul_enable 1 to enable, 0 to disable.
1419:.././hal/sam3u1c/pmc.c ****  */
1420:.././hal/sam3u1c/pmc.c **** void pmc_set_writeprotect(uint32_t ul_enable)
1421:.././hal/sam3u1c/pmc.c **** {
 3975              	 .loc 1 1421 1
 3976              	 .cfi_startproc
 3977              	 
 3978              	 
 3979              	 
 3980 0000 80B4     	 push {r7}
 3981              	.LCFI293:
 3982              	 .cfi_def_cfa_offset 4
 3983              	 .cfi_offset 7,-4
 3984 0002 83B0     	 sub sp,sp,#12
 3985              	.LCFI294:
 3986              	 .cfi_def_cfa_offset 16
 3987 0004 00AF     	 add r7,sp,#0
 3988              	.LCFI295:
 3989              	 .cfi_def_cfa_register 7
 3990 0006 7860     	 str r0,[r7,#4]
1422:.././hal/sam3u1c/pmc.c **** 	if (ul_enable) {
 3991              	 .loc 1 1422 5
 3992 0008 7B68     	 ldr r3,[r7,#4]
 3993 000a 002B     	 cmp r3,#0
 3994 000c 04D0     	 beq .L270
1423:.././hal/sam3u1c/pmc.c **** 		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD | PMC_WPMR_WPEN;
 3995              	 .loc 1 1423 6
 3996 000e 074B     	 ldr r3,.L273
 3997              	 .loc 1 1423 17
 3998 0010 074A     	 ldr r2,.L273+4
 3999 0012 C3F8E420 	 str r2,[r3,#228]
1424:.././hal/sam3u1c/pmc.c **** 	} else {
1425:.././hal/sam3u1c/pmc.c **** 		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD;
1426:.././hal/sam3u1c/pmc.c **** 	}
1427:.././hal/sam3u1c/pmc.c **** }
 4000              	 .loc 1 1427 1
 4001 0016 03E0     	 b .L272
 4002              	.L270:
1425:.././hal/sam3u1c/pmc.c **** 	}
 4003              	 .loc 1 1425 6
 4004 0018 044B     	 ldr r3,.L273
1425:.././hal/sam3u1c/pmc.c **** 	}
 4005              	 .loc 1 1425 17
 4006 001a 064A     	 ldr r2,.L273+8
 4007 001c C3F8E420 	 str r2,[r3,#228]
 4008              	.L272:
 4009              	 .loc 1 1427 1
 4010 0020 00BF     	 nop
 4011 0022 0C37     	 adds r7,r7,#12
 4012              	.LCFI296:
 4013              	 .cfi_def_cfa_offset 4
 4014 0024 BD46     	 mov sp,r7
 4015              	.LCFI297:
 4016              	 .cfi_def_cfa_register 13
 4017              	 
 4018 0026 80BC     	 pop {r7}
 4019              	.LCFI298:
 4020              	 .cfi_restore 7
 4021              	 .cfi_def_cfa_offset 0
 4022 0028 7047     	 bx lr
 4023              	.L274:
 4024 002a 00BF     	 .align 2
 4025              	.L273:
 4026 002c 00040E40 	 .word 1074660352
 4027 0030 01434D50 	 .word 1347240705
 4028 0034 00434D50 	 .word 1347240704
 4029              	 .cfi_endproc
 4030              	.LFE124:
 4032              	 .section .text.pmc_get_writeprotect_status,"ax",%progbits
 4033              	 .align 1
 4034              	 .global pmc_get_writeprotect_status
 4035              	 .syntax unified
 4036              	 .thumb
 4037              	 .thumb_func
 4038              	 .fpu softvfp
 4040              	pmc_get_writeprotect_status:
 4041              	.LFB125:
1428:.././hal/sam3u1c/pmc.c **** 
1429:.././hal/sam3u1c/pmc.c **** /**
1430:.././hal/sam3u1c/pmc.c ****  * \brief Return write protect status.
1431:.././hal/sam3u1c/pmc.c ****  *
1432:.././hal/sam3u1c/pmc.c ****  * \retval 0 Protection disabled.
1433:.././hal/sam3u1c/pmc.c ****  * \retval 1 Protection enabled.
1434:.././hal/sam3u1c/pmc.c ****  */
1435:.././hal/sam3u1c/pmc.c **** uint32_t pmc_get_writeprotect_status(void)
1436:.././hal/sam3u1c/pmc.c **** {
 4042              	 .loc 1 1436 1
 4043              	 .cfi_startproc
 4044              	 
 4045              	 
 4046              	 
 4047 0000 80B4     	 push {r7}
 4048              	.LCFI299:
 4049              	 .cfi_def_cfa_offset 4
 4050              	 .cfi_offset 7,-4
 4051 0002 00AF     	 add r7,sp,#0
 4052              	.LCFI300:
 4053              	 .cfi_def_cfa_register 7
1437:.././hal/sam3u1c/pmc.c **** 	return PMC->PMC_WPMR & PMC_WPMR_WPEN;
 4054              	 .loc 1 1437 12
 4055 0004 044B     	 ldr r3,.L277
 4056 0006 D3F8E430 	 ldr r3,[r3,#228]
 4057              	 .loc 1 1437 23
 4058 000a 03F00103 	 and r3,r3,#1
1438:.././hal/sam3u1c/pmc.c **** }
 4059              	 .loc 1 1438 1
 4060 000e 1846     	 mov r0,r3
 4061 0010 BD46     	 mov sp,r7
 4062              	.LCFI301:
 4063              	 .cfi_def_cfa_register 13
 4064              	 
 4065 0012 80BC     	 pop {r7}
 4066              	.LCFI302:
 4067              	 .cfi_restore 7
 4068              	 .cfi_def_cfa_offset 0
 4069 0014 7047     	 bx lr
 4070              	.L278:
 4071 0016 00BF     	 .align 2
 4072              	.L277:
 4073 0018 00040E40 	 .word 1074660352
 4074              	 .cfi_endproc
 4075              	.LFE125:
 4077              	 .text
 4078              	.Letext0:
 4079              	 .file 3 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\machine\\_default_types.h"
 4080              	 .file 4 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\sys\\_stdint.h"
 4081              	 .file 5 ".././hal/sam3u1c/inc/sam3u1c.h"
 4082              	 .file 6 ".././hal/sam3u1c/inc/core_cm3.h"
 4083              	 .file 7 ".././hal/sam3u1c/inc/system_sam3u.h"
 4084              	 .file 8 ".././hal/sam3u1c/inc/component/component_pmc.h"
 4085              	 .file 9 ".././hal/sam3u1c/inc/component/component_supc.h"
 4086              	 .file 10 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\sys\\lock.h"
 4087              	 .file 11 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\sys\\_types.h"
 4088              	 .file 12 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\lib\\gcc\\arm-none-eabi\\8.2.1\\include\\stddef.h"
 4089              	 .file 13 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\sys\\reent.h"
 4090              	 .file 14 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\stdlib.h"
 4091              	 .file 15 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pmc.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:27     .text.pmc_mck_set_prescaler:00000000 $t
    {standard input}:35     .text.pmc_mck_set_prescaler:00000000 pmc_mck_set_prescaler
    {standard input}:94     .text.pmc_mck_set_prescaler:00000030 $d
    {standard input}:99     .text.pmc_mck_set_source:00000000 $t
    {standard input}:106    .text.pmc_mck_set_source:00000000 pmc_mck_set_source
    {standard input}:164    .text.pmc_mck_set_source:00000030 $d
    {standard input}:169    .text.pmc_switch_mck_to_sclk:00000000 $t
    {standard input}:176    .text.pmc_switch_mck_to_sclk:00000000 pmc_switch_mck_to_sclk
    {standard input}:289    .text.pmc_switch_mck_to_sclk:00000078 $d
    {standard input}:294    .text.pmc_switch_mck_to_mainck:00000000 $t
    {standard input}:301    .text.pmc_switch_mck_to_mainck:00000000 pmc_switch_mck_to_mainck
    {standard input}:416    .text.pmc_switch_mck_to_mainck:0000007c $d
    {standard input}:421    .text.pmc_switch_mck_to_pllack:00000000 $t
    {standard input}:428    .text.pmc_switch_mck_to_pllack:00000000 pmc_switch_mck_to_pllack
    {standard input}:543    .text.pmc_switch_mck_to_pllack:0000007c $d
    {standard input}:548    .text.pmc_switch_mck_to_upllck:00000000 $t
    {standard input}:555    .text.pmc_switch_mck_to_upllck:00000000 pmc_switch_mck_to_upllck
    {standard input}:668    .text.pmc_switch_mck_to_upllck:00000078 $d
    {standard input}:673    .text.pmc_switch_sclk_to_32kxtal:00000000 $t
    {standard input}:680    .text.pmc_switch_sclk_to_32kxtal:00000000 pmc_switch_sclk_to_32kxtal
    {standard input}:732    .text.pmc_switch_sclk_to_32kxtal:00000030 $d
    {standard input}:738    .text.pmc_osc_is_ready_32kxtal:00000000 $t
    {standard input}:745    .text.pmc_osc_is_ready_32kxtal:00000000 pmc_osc_is_ready_32kxtal
    {standard input}:796    .text.pmc_osc_is_ready_32kxtal:0000002c $d
    {standard input}:802    .text.pmc_switch_mainck_to_fastrc:00000000 $t
    {standard input}:809    .text.pmc_switch_mainck_to_fastrc:00000000 pmc_switch_mainck_to_fastrc
    {standard input}:900    .text.pmc_switch_mainck_to_fastrc:0000006c $d
    {standard input}:905    .text.pmc_osc_enable_fastrc:00000000 $t
    {standard input}:912    .text.pmc_osc_enable_fastrc:00000000 pmc_osc_enable_fastrc
    {standard input}:991    .text.pmc_osc_enable_fastrc:00000058 $d
    {standard input}:996    .text.pmc_osc_disable_fastrc:00000000 $t
    {standard input}:1003   .text.pmc_osc_disable_fastrc:00000000 pmc_osc_disable_fastrc
    {standard input}:1043   .text.pmc_osc_disable_fastrc:00000020 $d
    {standard input}:1048   .text.pmc_osc_is_ready_fastrc:00000000 $t
    {standard input}:1055   .text.pmc_osc_is_ready_fastrc:00000000 pmc_osc_is_ready_fastrc
    {standard input}:1088   .text.pmc_osc_is_ready_fastrc:00000014 $d
    {standard input}:1093   .text.pmc_osc_enable_main_xtal:00000000 $t
    {standard input}:1100   .text.pmc_osc_enable_main_xtal:00000000 pmc_osc_enable_main_xtal
    {standard input}:1170   .text.pmc_osc_enable_main_xtal:00000048 $d
    {standard input}:1175   .text.pmc_osc_bypass_main_xtal:00000000 $t
    {standard input}:1182   .text.pmc_osc_bypass_main_xtal:00000000 pmc_osc_bypass_main_xtal
    {standard input}:1235   .text.pmc_osc_bypass_main_xtal:00000030 $d
    {standard input}:1240   .text.pmc_osc_disable_main_xtal:00000000 $t
    {standard input}:1247   .text.pmc_osc_disable_main_xtal:00000000 pmc_osc_disable_main_xtal
    {standard input}:1297   .text.pmc_osc_disable_main_xtal:00000028 $d
    {standard input}:1302   .text.pmc_osc_is_bypassed_main_xtal:00000000 $t
    {standard input}:1309   .text.pmc_osc_is_bypassed_main_xtal:00000000 pmc_osc_is_bypassed_main_xtal
    {standard input}:1342   .text.pmc_osc_is_bypassed_main_xtal:00000014 $d
    {standard input}:1347   .text.pmc_osc_is_ready_main_xtal:00000000 $t
    {standard input}:1354   .text.pmc_osc_is_ready_main_xtal:00000000 pmc_osc_is_ready_main_xtal
    {standard input}:1387   .text.pmc_osc_is_ready_main_xtal:00000014 $d
    {standard input}:1392   .text.pmc_switch_mainck_to_xtal:00000000 $t
    {standard input}:1399   .text.pmc_switch_mainck_to_xtal:00000000 pmc_switch_mainck_to_xtal
    {standard input}:1493   .text.pmc_switch_mainck_to_xtal:0000006c $d
    {standard input}:1500   .text.pmc_osc_disable_xtal:00000000 $t
    {standard input}:1507   .text.pmc_osc_disable_xtal:00000000 pmc_osc_disable_xtal
    {standard input}:1574   .text.pmc_osc_disable_xtal:00000044 $d
    {standard input}:1579   .text.pmc_osc_is_ready_mainck:00000000 $t
    {standard input}:1586   .text.pmc_osc_is_ready_mainck:00000000 pmc_osc_is_ready_mainck
    {standard input}:1619   .text.pmc_osc_is_ready_mainck:00000014 $d
    {standard input}:1624   .text.pmc_mainck_osc_select:00000000 $t
    {standard input}:1631   .text.pmc_mainck_osc_select:00000000 pmc_mainck_osc_select
    {standard input}:1693   .text.pmc_mainck_osc_select:0000003c $d
    {standard input}:1698   .text.pmc_enable_pllack:00000000 $t
    {standard input}:1705   .text.pmc_enable_pllack:00000000 pmc_enable_pllack
    {standard input}:1775   .text.pmc_enable_pllack:00000048 $d
    {standard input}:1789   .text.pmc_disable_pllack:00000000 pmc_disable_pllack
    {standard input}:1782   .text.pmc_disable_pllack:00000000 $t
    {standard input}:1822   .text.pmc_disable_pllack:00000014 $d
    {standard input}:1827   .text.pmc_is_locked_pllack:00000000 $t
    {standard input}:1834   .text.pmc_is_locked_pllack:00000000 pmc_is_locked_pllack
    {standard input}:1867   .text.pmc_is_locked_pllack:00000014 $d
    {standard input}:1872   .text.pmc_enable_upll_clock:00000000 $t
    {standard input}:1879   .text.pmc_enable_upll_clock:00000000 pmc_enable_upll_clock
    {standard input}:1923   .text.pmc_enable_upll_clock:00000024 $d
    {standard input}:1928   .text.pmc_disable_upll_clock:00000000 $t
    {standard input}:1935   .text.pmc_disable_upll_clock:00000000 pmc_disable_upll_clock
    {standard input}:1969   .text.pmc_disable_upll_clock:00000018 $d
    {standard input}:1974   .text.pmc_is_locked_upll:00000000 $t
    {standard input}:1981   .text.pmc_is_locked_upll:00000000 pmc_is_locked_upll
    {standard input}:2014   .text.pmc_is_locked_upll:00000014 $d
    {standard input}:2019   .text.pmc_enable_periph_clk:00000000 $t
    {standard input}:2026   .text.pmc_enable_periph_clk:00000000 pmc_enable_periph_clk
    {standard input}:2101   .text.pmc_enable_periph_clk:00000048 $d
    {standard input}:2106   .text.pmc_disable_periph_clk:00000000 $t
    {standard input}:2113   .text.pmc_disable_periph_clk:00000000 pmc_disable_periph_clk
    {standard input}:2188   .text.pmc_disable_periph_clk:00000048 $d
    {standard input}:2193   .text.pmc_enable_all_periph_clk:00000000 $t
    {standard input}:2200   .text.pmc_enable_all_periph_clk:00000000 pmc_enable_all_periph_clk
    {standard input}:2244   .text.pmc_enable_all_periph_clk:00000024 $d
    {standard input}:2249   .text.pmc_disable_all_periph_clk:00000000 $t
    {standard input}:2256   .text.pmc_disable_all_periph_clk:00000000 pmc_disable_all_periph_clk
    {standard input}:2300   .text.pmc_disable_all_periph_clk:00000024 $d
    {standard input}:2305   .text.pmc_is_periph_clk_enabled:00000000 $t
    {standard input}:2312   .text.pmc_is_periph_clk_enabled:00000000 pmc_is_periph_clk_enabled
    {standard input}:2374   .text.pmc_is_periph_clk_enabled:00000034 $d
    {standard input}:2379   .text.pmc_pck_set_prescaler:00000000 $t
    {standard input}:2386   .text.pmc_pck_set_prescaler:00000000 pmc_pck_set_prescaler
    {standard input}:2467   .text.pmc_pck_set_prescaler:0000005c $d
    {standard input}:2472   .text.pmc_pck_set_source:00000000 $t
    {standard input}:2479   .text.pmc_pck_set_source:00000000 pmc_pck_set_source
    {standard input}:2560   .text.pmc_pck_set_source:0000005c $d
    {standard input}:2565   .text.pmc_switch_pck_to_sclk:00000000 $t
    {standard input}:2572   .text.pmc_switch_pck_to_sclk:00000000 pmc_switch_pck_to_sclk
    {standard input}:2649   .text.pmc_switch_pck_to_sclk:00000050 $d
    {standard input}:2654   .text.pmc_switch_pck_to_mainck:00000000 $t
    {standard input}:2661   .text.pmc_switch_pck_to_mainck:00000000 pmc_switch_pck_to_mainck
    {standard input}:2740   .text.pmc_switch_pck_to_mainck:00000054 $d
    {standard input}:2745   .text.pmc_switch_pck_to_pllack:00000000 $t
    {standard input}:2752   .text.pmc_switch_pck_to_pllack:00000000 pmc_switch_pck_to_pllack
    {standard input}:2831   .text.pmc_switch_pck_to_pllack:00000054 $d
    {standard input}:2836   .text.pmc_switch_pck_to_upllck:00000000 $t
    {standard input}:2843   .text.pmc_switch_pck_to_upllck:00000000 pmc_switch_pck_to_upllck
    {standard input}:2922   .text.pmc_switch_pck_to_upllck:00000054 $d
    {standard input}:2927   .text.pmc_switch_pck_to_mck:00000000 $t
    {standard input}:2934   .text.pmc_switch_pck_to_mck:00000000 pmc_switch_pck_to_mck
    {standard input}:3013   .text.pmc_switch_pck_to_mck:00000054 $d
    {standard input}:3018   .text.pmc_enable_pck:00000000 $t
    {standard input}:3025   .text.pmc_enable_pck:00000000 pmc_enable_pck
    {standard input}:3068   .text.pmc_enable_pck:00000020 $d
    {standard input}:3073   .text.pmc_disable_pck:00000000 $t
    {standard input}:3080   .text.pmc_disable_pck:00000000 pmc_disable_pck
    {standard input}:3123   .text.pmc_disable_pck:00000020 $d
    {standard input}:3128   .text.pmc_enable_all_pck:00000000 $t
    {standard input}:3135   .text.pmc_enable_all_pck:00000000 pmc_enable_all_pck
    {standard input}:3168   .text.pmc_enable_all_pck:00000014 $d
    {standard input}:3173   .text.pmc_disable_all_pck:00000000 $t
    {standard input}:3180   .text.pmc_disable_all_pck:00000000 pmc_disable_all_pck
    {standard input}:3213   .text.pmc_disable_all_pck:00000014 $d
    {standard input}:3218   .text.pmc_is_pck_enabled:00000000 $t
    {standard input}:3225   .text.pmc_is_pck_enabled:00000000 pmc_is_pck_enabled
    {standard input}:3278   .text.pmc_is_pck_enabled:0000002c $d
    {standard input}:3283   .text.pmc_enable_interrupt:00000000 $t
    {standard input}:3290   .text.pmc_enable_interrupt:00000000 pmc_enable_interrupt
    {standard input}:3330   .text.pmc_enable_interrupt:00000018 $d
    {standard input}:3335   .text.pmc_disable_interrupt:00000000 $t
    {standard input}:3342   .text.pmc_disable_interrupt:00000000 pmc_disable_interrupt
    {standard input}:3382   .text.pmc_disable_interrupt:00000018 $d
    {standard input}:3387   .text.pmc_get_interrupt_mask:00000000 $t
    {standard input}:3394   .text.pmc_get_interrupt_mask:00000000 pmc_get_interrupt_mask
    {standard input}:3425   .text.pmc_get_interrupt_mask:00000010 $d
    {standard input}:3430   .text.pmc_get_status:00000000 $t
    {standard input}:3437   .text.pmc_get_status:00000000 pmc_get_status
    {standard input}:3468   .text.pmc_get_status:00000010 $d
    {standard input}:3473   .text.pmc_set_fast_startup_input:00000000 $t
    {standard input}:3480   .text.pmc_set_fast_startup_input:00000000 pmc_set_fast_startup_input
    {standard input}:3526   .text.pmc_set_fast_startup_input:00000028 $d
    {standard input}:3531   .text.pmc_clr_fast_startup_input:00000000 $t
    {standard input}:3538   .text.pmc_clr_fast_startup_input:00000000 pmc_clr_fast_startup_input
    {standard input}:3587   .text.pmc_clr_fast_startup_input:00000028 $d
    {standard input}:3592   .text.pmc_enable_sleepmode:00000000 $t
    {standard input}:3599   .text.pmc_enable_sleepmode:00000000 pmc_enable_sleepmode
    {standard input}:3678   .text.pmc_enable_sleepmode:00000038 $d
    {standard input}:3684   .text.pmc_enable_waitmode:00000000 $t
    {standard input}:3691   .text.pmc_enable_waitmode:00000000 pmc_enable_waitmode
    {standard input}:3785   .text.pmc_enable_waitmode:00000050 $d
    {standard input}:3791   .text.pmc_enable_backupmode:00000000 $t
    {standard input}:3798   .text.pmc_enable_backupmode:00000000 pmc_enable_backupmode
    {standard input}:3843   .text.pmc_enable_backupmode:0000001c $d
    {standard input}:3848   .text.pmc_enable_clock_failure_detector:00000000 $t
    {standard input}:3855   .text.pmc_enable_clock_failure_detector:00000000 pmc_enable_clock_failure_detector
    {standard input}:3902   .text.pmc_enable_clock_failure_detector:00000024 $d
    {standard input}:3907   .text.pmc_disable_clock_failure_detector:00000000 $t
    {standard input}:3914   .text.pmc_disable_clock_failure_detector:00000000 pmc_disable_clock_failure_detector
    {standard input}:3961   .text.pmc_disable_clock_failure_detector:00000024 $d
    {standard input}:3966   .text.pmc_set_writeprotect:00000000 $t
    {standard input}:3973   .text.pmc_set_writeprotect:00000000 pmc_set_writeprotect
    {standard input}:4026   .text.pmc_set_writeprotect:0000002c $d
    {standard input}:4033   .text.pmc_get_writeprotect_status:00000000 $t
    {standard input}:4040   .text.pmc_get_writeprotect_status:00000000 pmc_get_writeprotect_status
    {standard input}:4073   .text.pmc_get_writeprotect_status:00000018 $d
                           .group:00000000 wm4.0.bacf6c85951b42af729d707f36a7fff6
                           .group:00000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.newlib.h.8.f6e543eac3f2f65163ba2ffe3b04987b
                           .group:00000000 wm4.ieeefp.h.77.d5685ba212d3ed6e914898d045f873e3
                           .group:00000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.cdefs.h.49.2bf373aedffd8b393ccd11dc057e8547
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:00000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:00000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.pmc.h.58.e82ab76d364abd9761d4d0905e15fc60

NO UNDEFINED SYMBOLS
