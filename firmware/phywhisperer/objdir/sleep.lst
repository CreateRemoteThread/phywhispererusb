   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "sleep.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .section .bss.b_is_sleep_clock_used,"aw",%nobits
  29              	b_is_sleep_clock_used:
  30 0000 00       	 .space 1
  31              	 .section .bss.callback_clocks_restored,"aw",%nobits
  32              	 .align 2
  35              	callback_clocks_restored:
  36 0000 00000000 	 .space 4
  37              	 .section .text.pmc_sleep,"ax",%progbits
  38              	 .align 1
  39              	 .global pmc_sleep
  40              	 .arch armv7-m
  41              	 .syntax unified
  42              	 .thumb
  43              	 .thumb_func
  44              	 .fpu softvfp
  46              	pmc_sleep:
  47              	.LFB71:
  48              	 .file 1 ".././hal/sam3u1c/sleep.c"
   1:.././hal/sam3u1c/sleep.c **** /**
   2:.././hal/sam3u1c/sleep.c ****  * \file
   3:.././hal/sam3u1c/sleep.c ****  *
   4:.././hal/sam3u1c/sleep.c ****  * \brief Sleep mode access
   5:.././hal/sam3u1c/sleep.c ****  *
   6:.././hal/sam3u1c/sleep.c ****  * Copyright (c) 2012 - 2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/sleep.c ****  *
   8:.././hal/sam3u1c/sleep.c ****  * \asf_license_start
   9:.././hal/sam3u1c/sleep.c ****  *
  10:.././hal/sam3u1c/sleep.c ****  * \page License
  11:.././hal/sam3u1c/sleep.c ****  *
  12:.././hal/sam3u1c/sleep.c ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/sleep.c ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/sleep.c ****  *
  15:.././hal/sam3u1c/sleep.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/sleep.c ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/sleep.c ****  *
  18:.././hal/sam3u1c/sleep.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/sleep.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/sleep.c ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/sleep.c ****  *
  22:.././hal/sam3u1c/sleep.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/sleep.c ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/sleep.c ****  *
  25:.././hal/sam3u1c/sleep.c ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/sleep.c ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/sleep.c ****  *
  28:.././hal/sam3u1c/sleep.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/sleep.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/sleep.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/sleep.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/sleep.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/sleep.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/sleep.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/sleep.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/sleep.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/sleep.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/sleep.c ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/sleep.c ****  *
  40:.././hal/sam3u1c/sleep.c ****  * \asf_license_stop
  41:.././hal/sam3u1c/sleep.c ****  *
  42:.././hal/sam3u1c/sleep.c ****  */
  43:.././hal/sam3u1c/sleep.c **** 
  44:.././hal/sam3u1c/sleep.c **** #include <compiler.h>
  45:.././hal/sam3u1c/sleep.c **** #include "sleep.h"
  46:.././hal/sam3u1c/sleep.c **** 
  47:.././hal/sam3u1c/sleep.c **** /* SAM3 and SAM4 series */
  48:.././hal/sam3u1c/sleep.c **** #if (SAM3S || SAM3N || SAM3XA || SAM3U || SAM4S || SAM4E || SAM4N || SAM4C || \
  49:.././hal/sam3u1c/sleep.c **** 		SAM4CM || SAMG || SAM4CP)
  50:.././hal/sam3u1c/sleep.c **** # include "pmc.h"
  51:.././hal/sam3u1c/sleep.c **** # include "board.h"
  52:.././hal/sam3u1c/sleep.c **** 
  53:.././hal/sam3u1c/sleep.c **** /* Checking board configuration of main clock xtal statup time */
  54:.././hal/sam3u1c/sleep.c **** #if !defined(BOARD_OSC_STARTUP_US)
  55:.././hal/sam3u1c/sleep.c **** # warning The board main clock xtal statup time has not been defined. Using default settings.
  56:.././hal/sam3u1c/sleep.c **** # define BOARD_OSC_STARTUP_US    (15625UL)
  57:.././hal/sam3u1c/sleep.c **** #endif
  58:.././hal/sam3u1c/sleep.c **** 
  59:.././hal/sam3u1c/sleep.c **** #if !defined(EFC0)
  60:.././hal/sam3u1c/sleep.c **** # define EFC0 EFC
  61:.././hal/sam3u1c/sleep.c **** #endif
  62:.././hal/sam3u1c/sleep.c **** 
  63:.././hal/sam3u1c/sleep.c **** /**
  64:.././hal/sam3u1c/sleep.c ****  * Save clock settings and shutdown PLLs
  65:.././hal/sam3u1c/sleep.c ****  */
  66:.././hal/sam3u1c/sleep.c **** __always_inline static void pmc_save_clock_settings(
  67:.././hal/sam3u1c/sleep.c **** 		uint32_t *p_osc_setting,
  68:.././hal/sam3u1c/sleep.c **** 		uint32_t *p_pll0_setting,
  69:.././hal/sam3u1c/sleep.c **** 		uint32_t *p_pll1_setting,
  70:.././hal/sam3u1c/sleep.c **** 		uint32_t *p_mck_setting,
  71:.././hal/sam3u1c/sleep.c **** 		uint32_t *p_fmr_setting,
  72:.././hal/sam3u1c/sleep.c **** #if defined(EFC1)
  73:.././hal/sam3u1c/sleep.c **** 		uint32_t *p_fmr_setting1,
  74:.././hal/sam3u1c/sleep.c **** #endif
  75:.././hal/sam3u1c/sleep.c **** 		const bool disable_xtal)
  76:.././hal/sam3u1c/sleep.c **** {
  77:.././hal/sam3u1c/sleep.c **** 	uint32_t mor  = PMC->CKGR_MOR;
  78:.././hal/sam3u1c/sleep.c **** 	uint32_t mckr = PMC->PMC_MCKR;
  79:.././hal/sam3u1c/sleep.c **** 	uint32_t fmr  = EFC0->EEFC_FMR;
  80:.././hal/sam3u1c/sleep.c **** # if defined(EFC1)
  81:.././hal/sam3u1c/sleep.c **** 	uint32_t fmr1 = EFC1->EEFC_FMR;
  82:.././hal/sam3u1c/sleep.c **** # endif
  83:.././hal/sam3u1c/sleep.c **** 
  84:.././hal/sam3u1c/sleep.c **** 	if (p_osc_setting) {
  85:.././hal/sam3u1c/sleep.c **** 		*p_osc_setting = mor;
  86:.././hal/sam3u1c/sleep.c **** 	}
  87:.././hal/sam3u1c/sleep.c **** 	if (p_pll0_setting) {
  88:.././hal/sam3u1c/sleep.c **** 		*p_pll0_setting = PMC->CKGR_PLLAR;
  89:.././hal/sam3u1c/sleep.c **** 	}
  90:.././hal/sam3u1c/sleep.c **** 	if (p_pll1_setting) {
  91:.././hal/sam3u1c/sleep.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
  92:.././hal/sam3u1c/sleep.c **** 		*p_pll1_setting = PMC->CKGR_PLLBR;
  93:.././hal/sam3u1c/sleep.c **** #elif (SAM3U || SAM3XA)
  94:.././hal/sam3u1c/sleep.c **** 		*p_pll1_setting = PMC->CKGR_UCKR;
  95:.././hal/sam3u1c/sleep.c **** #else
  96:.././hal/sam3u1c/sleep.c **** 		*p_pll1_setting = 0;
  97:.././hal/sam3u1c/sleep.c **** #endif
  98:.././hal/sam3u1c/sleep.c **** 	}
  99:.././hal/sam3u1c/sleep.c **** 	if (p_mck_setting) {
 100:.././hal/sam3u1c/sleep.c **** 		*p_mck_setting  = mckr;
 101:.././hal/sam3u1c/sleep.c **** 	}
 102:.././hal/sam3u1c/sleep.c **** 	if (p_fmr_setting) {
 103:.././hal/sam3u1c/sleep.c **** 		*p_fmr_setting  = fmr;
 104:.././hal/sam3u1c/sleep.c **** 	}
 105:.././hal/sam3u1c/sleep.c **** #if defined(EFC1)
 106:.././hal/sam3u1c/sleep.c **** 	if (p_fmr_setting1) {
 107:.././hal/sam3u1c/sleep.c **** 		*p_fmr_setting1 = fmr1;
 108:.././hal/sam3u1c/sleep.c **** 	}
 109:.././hal/sam3u1c/sleep.c **** #endif
 110:.././hal/sam3u1c/sleep.c **** 
 111:.././hal/sam3u1c/sleep.c **** 	/* Enable FAST RC */
 112:.././hal/sam3u1c/sleep.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
 113:.././hal/sam3u1c/sleep.c **** 	/* if MCK source is PLL, switch to mainck */
 114:.././hal/sam3u1c/sleep.c **** 	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
 115:.././hal/sam3u1c/sleep.c **** 		/* MCK -> MAINCK */
 116:.././hal/sam3u1c/sleep.c **** 		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
 117:.././hal/sam3u1c/sleep.c **** 		PMC->PMC_MCKR = mckr;
 118:.././hal/sam3u1c/sleep.c **** 		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
 119:.././hal/sam3u1c/sleep.c **** 	}
 120:.././hal/sam3u1c/sleep.c **** 	/* MCK prescale -> 1 */
 121:.././hal/sam3u1c/sleep.c **** 	if (mckr & PMC_MCKR_PRES_Msk) {
 122:.././hal/sam3u1c/sleep.c **** 		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
 123:.././hal/sam3u1c/sleep.c **** 		PMC->PMC_MCKR = mckr;
 124:.././hal/sam3u1c/sleep.c **** 		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
 125:.././hal/sam3u1c/sleep.c **** 	}
 126:.././hal/sam3u1c/sleep.c **** 	/* Disable PLLs */
 127:.././hal/sam3u1c/sleep.c **** 	pmc_disable_pllack();
 128:.././hal/sam3u1c/sleep.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
 129:.././hal/sam3u1c/sleep.c **** 	pmc_disable_pllbck();
 130:.././hal/sam3u1c/sleep.c **** #elif (SAM3U || SAM3XA)
 131:.././hal/sam3u1c/sleep.c **** 	pmc_disable_upll_clock();
 132:.././hal/sam3u1c/sleep.c **** #endif
 133:.././hal/sam3u1c/sleep.c **** 
 134:.././hal/sam3u1c/sleep.c **** 	/* Prepare for entering WAIT mode */
 135:.././hal/sam3u1c/sleep.c **** 	/* Wait fast RC ready */
 136:.././hal/sam3u1c/sleep.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 137:.././hal/sam3u1c/sleep.c **** 
 138:.././hal/sam3u1c/sleep.c **** 	/* Switch mainck to FAST RC */
 139:.././hal/sam3u1c/sleep.c **** #if SAMG
 140:.././hal/sam3u1c/sleep.c **** 	/**
 141:.././hal/sam3u1c/sleep.c **** 	 * For the sleepwalking feature, we need an accurate RC clock. Only 24M and
 142:.././hal/sam3u1c/sleep.c **** 	 * 16M are trimmed in production. Here we select the 24M.
 143:.././hal/sam3u1c/sleep.c **** 	 * And so wait state need to be 1.
 144:.././hal/sam3u1c/sleep.c **** 	 */
 145:.././hal/sam3u1c/sleep.c **** 	EFC0->EEFC_FMR = (fmr & (~EEFC_FMR_FWS_Msk)) | EEFC_FMR_FWS(1);
 146:.././hal/sam3u1c/sleep.c **** 
 147:.././hal/sam3u1c/sleep.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | CKGR_MOR_MOSCRCF_24_MHz |
 148:.././hal/sam3u1c/sleep.c **** 			CKGR_MOR_KEY_PASSWD;
 149:.././hal/sam3u1c/sleep.c **** #else
 150:.././hal/sam3u1c/sleep.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
 151:.././hal/sam3u1c/sleep.c **** 			CKGR_MOR_KEY_PASSWD;
 152:.././hal/sam3u1c/sleep.c **** #endif
 153:.././hal/sam3u1c/sleep.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
 154:.././hal/sam3u1c/sleep.c **** 
 155:.././hal/sam3u1c/sleep.c **** #if (!SAMG)
 156:.././hal/sam3u1c/sleep.c **** 	/* FWS update */
 157:.././hal/sam3u1c/sleep.c **** 	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
 158:.././hal/sam3u1c/sleep.c **** #if defined(EFC1)
 159:.././hal/sam3u1c/sleep.c **** 	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
 160:.././hal/sam3u1c/sleep.c **** #endif
 161:.././hal/sam3u1c/sleep.c **** #endif
 162:.././hal/sam3u1c/sleep.c **** 
 163:.././hal/sam3u1c/sleep.c **** 	/* Disable XTALs */
 164:.././hal/sam3u1c/sleep.c **** 	if (disable_xtal) {
 165:.././hal/sam3u1c/sleep.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 166:.././hal/sam3u1c/sleep.c **** 				CKGR_MOR_KEY_PASSWD;
 167:.././hal/sam3u1c/sleep.c **** 	}
 168:.././hal/sam3u1c/sleep.c **** }
 169:.././hal/sam3u1c/sleep.c **** 
 170:.././hal/sam3u1c/sleep.c **** /**
 171:.././hal/sam3u1c/sleep.c ****  * Restore clock settings
 172:.././hal/sam3u1c/sleep.c ****  */
 173:.././hal/sam3u1c/sleep.c **** __always_inline static void pmc_restore_clock_setting(
 174:.././hal/sam3u1c/sleep.c **** 		const uint32_t osc_setting,
 175:.././hal/sam3u1c/sleep.c **** 		const uint32_t pll0_setting,
 176:.././hal/sam3u1c/sleep.c **** 		const uint32_t pll1_setting,
 177:.././hal/sam3u1c/sleep.c **** 		const uint32_t mck_setting,
 178:.././hal/sam3u1c/sleep.c **** 		const uint32_t fmr_setting
 179:.././hal/sam3u1c/sleep.c **** #if defined(EFC1)
 180:.././hal/sam3u1c/sleep.c **** 		, const uint32_t fmr_setting1
 181:.././hal/sam3u1c/sleep.c **** #endif
 182:.././hal/sam3u1c/sleep.c **** 		)
 183:.././hal/sam3u1c/sleep.c **** {
 184:.././hal/sam3u1c/sleep.c **** 	uint32_t mckr;
 185:.././hal/sam3u1c/sleep.c **** 	uint32_t pll_sr = 0;
 186:.././hal/sam3u1c/sleep.c **** 
 187:.././hal/sam3u1c/sleep.c **** 	/* Switch mainck to external xtal */
 188:.././hal/sam3u1c/sleep.c **** 	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
 189:.././hal/sam3u1c/sleep.c **** 		/* Bypass mode */
 190:.././hal/sam3u1c/sleep.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 191:.././hal/sam3u1c/sleep.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
 192:.././hal/sam3u1c/sleep.c **** 				CKGR_MOR_MOSCSEL;
 193:.././hal/sam3u1c/sleep.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
 194:.././hal/sam3u1c/sleep.c **** 					~CKGR_MOR_MOSCRCF_Msk)
 195:.././hal/sam3u1c/sleep.c **** 				| CKGR_MOR_KEY_PASSWD;
 196:.././hal/sam3u1c/sleep.c **** 	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
 197:.././hal/sam3u1c/sleep.c **** 		/* Enable External XTAL */
 198:.././hal/sam3u1c/sleep.c **** 		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
 199:.././hal/sam3u1c/sleep.c **** 			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
 200:.././hal/sam3u1c/sleep.c **** 					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
 201:.././hal/sam3u1c/sleep.c **** 			/* Wait the Xtal to stabilize */
 202:.././hal/sam3u1c/sleep.c **** 			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
 203:.././hal/sam3u1c/sleep.c **** 		}
 204:.././hal/sam3u1c/sleep.c **** 		/* Select External XTAL */
 205:.././hal/sam3u1c/sleep.c **** 		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
 206:.././hal/sam3u1c/sleep.c **** 			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
 207:.././hal/sam3u1c/sleep.c **** 			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
 208:.././hal/sam3u1c/sleep.c **** 		}
 209:.././hal/sam3u1c/sleep.c **** 		/* Disable Fast RC */
 210:.././hal/sam3u1c/sleep.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
 211:.././hal/sam3u1c/sleep.c **** 						~CKGR_MOR_MOSCRCF_Msk)
 212:.././hal/sam3u1c/sleep.c **** 					| CKGR_MOR_KEY_PASSWD;
 213:.././hal/sam3u1c/sleep.c **** 	}
 214:.././hal/sam3u1c/sleep.c **** 
 215:.././hal/sam3u1c/sleep.c **** 	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
 216:.././hal/sam3u1c/sleep.c **** #if (SAM4C || SAM4CM || SAMG || SAM4CP)
 217:.././hal/sam3u1c/sleep.c **** 		PMC->CKGR_PLLAR = pll0_setting;
 218:.././hal/sam3u1c/sleep.c **** #else
 219:.././hal/sam3u1c/sleep.c **** 		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
 220:.././hal/sam3u1c/sleep.c **** #endif
 221:.././hal/sam3u1c/sleep.c **** 		pll_sr |= PMC_SR_LOCKA;
 222:.././hal/sam3u1c/sleep.c **** 	}
 223:.././hal/sam3u1c/sleep.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
 224:.././hal/sam3u1c/sleep.c **** 	if (pll1_setting & CKGR_PLLBR_MULB_Msk) {
 225:.././hal/sam3u1c/sleep.c **** 		PMC->CKGR_PLLBR = pll1_setting;
 226:.././hal/sam3u1c/sleep.c **** 		pll_sr |= PMC_SR_LOCKB;
 227:.././hal/sam3u1c/sleep.c **** 	}
 228:.././hal/sam3u1c/sleep.c **** #elif (SAM3U || SAM3XA)
 229:.././hal/sam3u1c/sleep.c **** 	if (pll1_setting & CKGR_UCKR_UPLLEN) {
 230:.././hal/sam3u1c/sleep.c **** 		PMC->CKGR_UCKR = pll1_setting;
 231:.././hal/sam3u1c/sleep.c **** 		pll_sr |= PMC_SR_LOCKU;
 232:.././hal/sam3u1c/sleep.c **** 	}
 233:.././hal/sam3u1c/sleep.c **** #else
 234:.././hal/sam3u1c/sleep.c **** 	UNUSED(pll1_setting);
 235:.././hal/sam3u1c/sleep.c **** #endif
 236:.././hal/sam3u1c/sleep.c **** 	/* Wait MCK source ready */
 237:.././hal/sam3u1c/sleep.c **** 	switch(mck_setting & PMC_MCKR_CSS_Msk) {
 238:.././hal/sam3u1c/sleep.c **** 	case PMC_MCKR_CSS_PLLA_CLK:
 239:.././hal/sam3u1c/sleep.c **** 		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
 240:.././hal/sam3u1c/sleep.c **** 		break;
 241:.././hal/sam3u1c/sleep.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
 242:.././hal/sam3u1c/sleep.c **** 	case PMC_MCKR_CSS_PLLB_CLK:
 243:.././hal/sam3u1c/sleep.c **** 		while (!(PMC->PMC_SR & PMC_SR_LOCKB));
 244:.././hal/sam3u1c/sleep.c **** 		break;
 245:.././hal/sam3u1c/sleep.c **** #elif (SAM3U || SAM3XA)
 246:.././hal/sam3u1c/sleep.c **** 	case PMC_MCKR_CSS_UPLL_CLK:
 247:.././hal/sam3u1c/sleep.c **** 		while (!(PMC->PMC_SR & PMC_SR_LOCKU));
 248:.././hal/sam3u1c/sleep.c **** 		break;
 249:.././hal/sam3u1c/sleep.c **** #endif
 250:.././hal/sam3u1c/sleep.c **** 	}
 251:.././hal/sam3u1c/sleep.c **** 
 252:.././hal/sam3u1c/sleep.c **** 	/* Switch to faster clock */
 253:.././hal/sam3u1c/sleep.c **** 	mckr = PMC->PMC_MCKR;
 254:.././hal/sam3u1c/sleep.c **** 
 255:.././hal/sam3u1c/sleep.c **** 	/* Set PRES */
 256:.././hal/sam3u1c/sleep.c **** 	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
 257:.././hal/sam3u1c/sleep.c **** 		| (mck_setting & PMC_MCKR_PRES_Msk);
 258:.././hal/sam3u1c/sleep.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
 259:.././hal/sam3u1c/sleep.c **** 
 260:.././hal/sam3u1c/sleep.c **** 	/* Restore flash wait states */
 261:.././hal/sam3u1c/sleep.c **** 	EFC0->EEFC_FMR = fmr_setting;
 262:.././hal/sam3u1c/sleep.c **** #if defined(EFC1)
 263:.././hal/sam3u1c/sleep.c **** 	EFC1->EEFC_FMR = fmr_setting1;
 264:.././hal/sam3u1c/sleep.c **** #endif
 265:.././hal/sam3u1c/sleep.c **** 
 266:.././hal/sam3u1c/sleep.c **** 	/* Set CSS and others */
 267:.././hal/sam3u1c/sleep.c **** 	PMC->PMC_MCKR = mck_setting;
 268:.././hal/sam3u1c/sleep.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
 269:.././hal/sam3u1c/sleep.c **** 
 270:.././hal/sam3u1c/sleep.c **** 	/* Waiting all restored PLLs ready */
 271:.././hal/sam3u1c/sleep.c **** 	while (!(PMC->PMC_SR & pll_sr));
 272:.././hal/sam3u1c/sleep.c **** }
 273:.././hal/sam3u1c/sleep.c **** 
 274:.././hal/sam3u1c/sleep.c **** /** If clocks are switched for some sleep mode */
 275:.././hal/sam3u1c/sleep.c **** static volatile bool b_is_sleep_clock_used = false;
 276:.././hal/sam3u1c/sleep.c **** /** Callback invoked once when clocks are restored */
 277:.././hal/sam3u1c/sleep.c **** static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;
 278:.././hal/sam3u1c/sleep.c **** 
 279:.././hal/sam3u1c/sleep.c **** void pmc_sleep(int sleep_mode)
 280:.././hal/sam3u1c/sleep.c **** {
  49              	 .loc 1 280 1
  50              	 .cfi_startproc
  51              	 
  52              	 
  53 0000 B0B5     	 push {r4,r5,r7,lr}
  54              	.LCFI0:
  55              	 .cfi_def_cfa_offset 16
  56              	 .cfi_offset 4,-16
  57              	 .cfi_offset 5,-12
  58              	 .cfi_offset 7,-8
  59              	 .cfi_offset 14,-4
  60 0002 9CB0     	 sub sp,sp,#112
  61              	.LCFI1:
  62              	 .cfi_def_cfa_offset 128
  63 0004 00AF     	 add r7,sp,#0
  64              	.LCFI2:
  65              	 .cfi_def_cfa_register 7
  66 0006 7860     	 str r0,[r7,#4]
 281:.././hal/sam3u1c/sleep.c **** 	switch (sleep_mode) {
  67              	 .loc 1 281 2
  68 0008 7B68     	 ldr r3,[r7,#4]
  69 000a 013B     	 subs r3,r3,#1
  70 000c 042B     	 cmp r3,#4
  71 000e 00F2D981 	 bhi .L39
  72 0012 01A2     	 adr r2,.L4
  73 0014 52F823F0 	 ldr pc,[r2,r3,lsl#2]
  74              	 .p2align 2
  75              	.L4:
  76 0018 2D000000 	 .word .L6+1
  77 001c 2D000000 	 .word .L6+1
  78 0020 5F000000 	 .word .L5+1
  79 0024 5F000000 	 .word .L5+1
  80 0028 A9030000 	 .word .L3+1
  81              	 .p2align 1
  82              	.L6:
 282:.././hal/sam3u1c/sleep.c **** #if (!(SAMG51 || SAMG53 || SAMG54))
 283:.././hal/sam3u1c/sleep.c **** 	case SAM_PM_SMODE_SLEEP_WFI:
 284:.././hal/sam3u1c/sleep.c **** 	case SAM_PM_SMODE_SLEEP_WFE:
 285:.././hal/sam3u1c/sleep.c **** #if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
 286:.././hal/sam3u1c/sleep.c **** 		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
 287:.././hal/sam3u1c/sleep.c **** 		cpu_irq_enable();
 288:.././hal/sam3u1c/sleep.c **** 		__WFI();
 289:.././hal/sam3u1c/sleep.c **** 		break;
 290:.././hal/sam3u1c/sleep.c **** #else
 291:.././hal/sam3u1c/sleep.c **** 		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
  83              	 .loc 1 291 17
  84 002c 804B     	 ldr r3,.L40
  85 002e 1B6F     	 ldr r3,[r3,#112]
  86 0030 7F4A     	 ldr r2,.L40
  87 0032 23F48013 	 bic r3,r3,#1048576
  88 0036 1367     	 str r3,[r2,#112]
 292:.././hal/sam3u1c/sleep.c **** 		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  89              	 .loc 1 292 12
  90 0038 7E4B     	 ldr r3,.L40+4
  91 003a 1B69     	 ldr r3,[r3,#16]
  92 003c 7D4A     	 ldr r2,.L40+4
  93 003e 23F00403 	 bic r3,r3,#4
  94 0042 1361     	 str r3,[r2,#16]
 293:.././hal/sam3u1c/sleep.c **** 		cpu_irq_enable();
  95              	 .loc 1 293 3
  96 0044 7C4B     	 ldr r3,.L40+8
  97 0046 0122     	 movs r2,#1
  98 0048 1A70     	 strb r2,[r3]
  99              	.LBB41:
 100              	.LBB42:
 101              	 .file 2 ".././hal/sam3u1c/inc/core_cmInstr.h"
   1:.././hal/sam3u1c/inc/core_cmInstr.h **** /**************************************************************************//**
   2:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @version  V3.00
   5:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @date     07. February 2012
   6:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
   7:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @note
   8:.././hal/sam3u1c/inc/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  10:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @par
  11:.././hal/sam3u1c/inc/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:.././hal/sam3u1c/inc/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:.././hal/sam3u1c/inc/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  15:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @par
  16:.././hal/sam3u1c/inc/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:.././hal/sam3u1c/inc/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:.././hal/sam3u1c/inc/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:.././hal/sam3u1c/inc/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:.././hal/sam3u1c/inc/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  22:.././hal/sam3u1c/inc/core_cmInstr.h ****  ******************************************************************************/
  23:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  24:.././hal/sam3u1c/inc/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  27:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  28:.././hal/sam3u1c/inc/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:.././hal/sam3u1c/inc/core_cmInstr.h ****   Access to dedicated instructions
  31:.././hal/sam3u1c/inc/core_cmInstr.h ****   @{
  32:.././hal/sam3u1c/inc/core_cmInstr.h **** */
  33:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  34:.././hal/sam3u1c/inc/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:.././hal/sam3u1c/inc/core_cmInstr.h **** /* ARM armcc specific functions */
  36:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  37:.././hal/sam3u1c/inc/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:.././hal/sam3u1c/inc/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:.././hal/sam3u1c/inc/core_cmInstr.h **** #endif
  40:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  41:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  42:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  No Operation
  43:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  44:.././hal/sam3u1c/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  46:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __NOP                             __nop
  47:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  48:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  49:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  51:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:.././hal/sam3u1c/inc/core_cmInstr.h ****     until one of a number of events occurs.
  53:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  54:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __WFI                             __wfi
  55:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  56:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  57:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Event
  58:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  59:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:.././hal/sam3u1c/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  62:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __WFE                             __wfe
  63:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  64:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  65:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Send Event
  66:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  67:.././hal/sam3u1c/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  69:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __SEV                             __sev
  70:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  71:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  72:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  74:.././hal/sam3u1c/inc/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:.././hal/sam3u1c/inc/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:.././hal/sam3u1c/inc/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  78:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  80:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  81:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  83:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:.././hal/sam3u1c/inc/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  86:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  88:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  89:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  91:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:.././hal/sam3u1c/inc/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  94:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  96:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  97:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  99:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 101:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 103:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 104:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __REV                             __rev
 105:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 106:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 107:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 109:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 111:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 113:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 114:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 116:.././hal/sam3u1c/inc/core_cmInstr.h ****   rev16 r0, r0
 117:.././hal/sam3u1c/inc/core_cmInstr.h ****   bx lr
 118:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 119:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 120:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 121:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 123:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 125:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 127:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 128:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 130:.././hal/sam3u1c/inc/core_cmInstr.h ****   revsh r0, r0
 131:.././hal/sam3u1c/inc/core_cmInstr.h ****   bx lr
 132:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 133:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 134:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 135:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 137:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 139:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Rotated value
 142:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 143:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __ROR                             __ror
 144:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 145:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 146:.././hal/sam3u1c/inc/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 148:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 150:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 152:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 154:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 155:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __RBIT                            __rbit
 156:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 157:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 158:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 160:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 162:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 165:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 167:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 168:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 170:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 172:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 175:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 177:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 178:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 180:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 182:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 185:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 187:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 188:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 190:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 192:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 193:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 195:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 196:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 197:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 199:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 200:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 202:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 204:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 205:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 207:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 208:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 209:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 211:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 212:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 214:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 216:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 217:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 219:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 220:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 221:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 223:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 224:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 226:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 228:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 229:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CLREX                           __clrex
 230:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 231:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 232:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Signed Saturate
 233:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 234:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function saturates a signed value.
 235:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 236:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             Saturated value
 239:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 240:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __SSAT                            __ssat
 241:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 242:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 243:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 245:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function saturates an unsigned value.
 246:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 247:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             Saturated value
 250:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 251:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __USAT                            __usat
 252:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 253:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 254:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Count leading zeros
 255:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 256:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 258:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             number of leading zeros in value
 260:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 261:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CLZ                             __clz
 262:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 263:.././hal/sam3u1c/inc/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 265:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 266:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 267:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:.././hal/sam3u1c/inc/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 270:.././hal/sam3u1c/inc/core_cmInstr.h **** #include <cmsis_iar.h>
 271:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 272:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 273:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:.././hal/sam3u1c/inc/core_cmInstr.h **** /* TI CCS specific functions */
 275:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 276:.././hal/sam3u1c/inc/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 278:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 279:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:.././hal/sam3u1c/inc/core_cmInstr.h **** /* GNU gcc specific functions */
 281:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 282:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  No Operation
 283:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 284:.././hal/sam3u1c/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 286:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 287:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 288:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("nop");
 289:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 290:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 291:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 292:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
 293:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 294:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 295:.././hal/sam3u1c/inc/core_cmInstr.h ****     until one of a number of events occurs.
 296:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 297:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 298:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 299:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("wfi");
 300:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 301:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 302:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 303:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Event
 304:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 305:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 306:.././hal/sam3u1c/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 307:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 308:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 309:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 310:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("wfe");
 311:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 312:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 313:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 314:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Send Event
 315:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 316:.././hal/sam3u1c/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 317:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 318:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 319:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 320:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("sev");
 321:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 322:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 323:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 324:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 325:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 326:.././hal/sam3u1c/inc/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 327:.././hal/sam3u1c/inc/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 328:.././hal/sam3u1c/inc/core_cmInstr.h ****     memory, after the instruction has been completed.
 329:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 330:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 331:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 332:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("isb");
 333:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 334:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 335:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 336:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 337:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 338:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 339:.././hal/sam3u1c/inc/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 340:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 341:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 342:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 343:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("dsb");
 344:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 345:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 346:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 347:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Memory Barrier
 348:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 349:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 350:.././hal/sam3u1c/inc/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 351:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 352:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
 353:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 354:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("dmb");
 102              	 .loc 2 354 3
 103              	 .syntax unified
 104              	
 105 004a BFF35F8F 	 dmb
 106              	
 107              	 .thumb
 108              	 .syntax unified
 109              	.LBE42:
 110              	.LBE41:
 111              	.LBB43:
 112              	.LBB44:
 113              	 .file 3 ".././hal/sam3u1c/inc/core_cmFunc.h"
   1:.././hal/sam3u1c/inc/core_cmFunc.h **** /**************************************************************************//**
   2:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @version  V3.00
   5:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @date     19. January 2012
   6:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
   7:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @note
   8:.././hal/sam3u1c/inc/core_cmFunc.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
  10:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @par
  11:.././hal/sam3u1c/inc/core_cmFunc.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:.././hal/sam3u1c/inc/core_cmFunc.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:.././hal/sam3u1c/inc/core_cmFunc.h ****  * within development tools that are supporting such ARM based processors. 
  14:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
  15:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @par
  16:.././hal/sam3u1c/inc/core_cmFunc.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:.././hal/sam3u1c/inc/core_cmFunc.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:.././hal/sam3u1c/inc/core_cmFunc.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:.././hal/sam3u1c/inc/core_cmFunc.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:.././hal/sam3u1c/inc/core_cmFunc.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
  22:.././hal/sam3u1c/inc/core_cmFunc.h ****  ******************************************************************************/
  23:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  24:.././hal/sam3u1c/inc/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  25:.././hal/sam3u1c/inc/core_cmFunc.h **** #define __CORE_CMFUNC_H
  26:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  27:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  28:.././hal/sam3u1c/inc/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  29:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface   
  30:.././hal/sam3u1c/inc/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  31:.././hal/sam3u1c/inc/core_cmFunc.h ****   @{
  32:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  33:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  34:.././hal/sam3u1c/inc/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:.././hal/sam3u1c/inc/core_cmFunc.h **** /* ARM armcc specific functions */
  36:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  37:.././hal/sam3u1c/inc/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  38:.././hal/sam3u1c/inc/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif
  40:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  41:.././hal/sam3u1c/inc/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  42:.././hal/sam3u1c/inc/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  43:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  44:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Control Register
  45:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  46:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the Control Register.
  47:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  48:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Control Register value
  49:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  50:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  51:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  52:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  53:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regControl);
  54:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  55:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  56:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  57:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Control Register
  58:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  59:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function writes the given value to the Control Register.
  60:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  61:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  62:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  63:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  64:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  65:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  66:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regControl = control;
  67:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  68:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  69:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  70:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get IPSR Register
  71:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  72:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the IPSR Register.
  73:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  74:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               IPSR Register value
  75:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  76:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  77:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  78:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  79:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regIPSR);
  80:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  81:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  82:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  83:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get APSR Register
  84:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  85:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the APSR Register.
  86:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  87:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               APSR Register value
  88:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  89:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
  90:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  91:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
  92:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regAPSR);
  93:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  94:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  95:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  96:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get xPSR Register
  97:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  98:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the xPSR Register.
  99:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 100:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               xPSR Register value
 101:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 102:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 103:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 104:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 105:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regXPSR);
 106:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 107:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 108:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 109:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 110:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 111:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 112:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 113:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               PSP Register value
 114:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 115:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 116:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 117:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 118:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regProcessStackPointer);
 119:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 120:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 121:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 122:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 123:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 124:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 125:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 126:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 127:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 128:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 129:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 130:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 131:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 132:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 133:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 134:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 135:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 136:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 137:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 138:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 139:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               MSP Register value
 140:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 141:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 142:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 143:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 144:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regMainStackPointer);
 145:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 146:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 147:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 148:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 149:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 150:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 151:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 152:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 153:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 154:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 155:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 156:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 157:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 158:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 159:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 160:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 161:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Priority Mask
 162:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 163:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 164:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 165:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Priority Mask value
 166:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 167:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 168:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 169:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 170:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regPriMask);
 171:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 172:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 173:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 174:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Priority Mask
 175:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 176:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 177:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 178:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 179:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 180:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 181:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 182:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 183:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regPriMask = (priMask);
 184:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 185:.././hal/sam3u1c/inc/core_cmFunc.h ****  
 186:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 187:.././hal/sam3u1c/inc/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 188:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 189:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Enable FIQ
 190:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 191:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 192:.././hal/sam3u1c/inc/core_cmFunc.h ****     Can only be executed in Privileged modes.
 193:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 194:.././hal/sam3u1c/inc/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 195:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 196:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 197:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Disable FIQ
 198:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 199:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 200:.././hal/sam3u1c/inc/core_cmFunc.h ****     Can only be executed in Privileged modes.
 201:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 202:.././hal/sam3u1c/inc/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 203:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 204:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 205:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Base Priority
 206:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 207:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 208:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 209:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Base Priority register value
 210:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 211:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 212:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 213:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 214:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regBasePri);
 215:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 216:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 217:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 218:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Base Priority
 219:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 220:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 221:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 222:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 223:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 224:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 225:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 226:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 227:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 228:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 229:.././hal/sam3u1c/inc/core_cmFunc.h ****  
 230:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 231:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Fault Mask
 232:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 233:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 234:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 235:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Fault Mask register value
 236:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 237:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 238:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 239:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 240:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regFaultMask);
 241:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 242:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 243:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 244:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Fault Mask
 245:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 246:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 247:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 248:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 249:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 250:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 251:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 252:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 253:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 254:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 255:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 256:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 257:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 258:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 259:.././hal/sam3u1c/inc/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 260:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 261:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get FPSCR
 262:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 263:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 264:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 265:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 266:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 267:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 268:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 269:.././hal/sam3u1c/inc/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 270:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 271:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regfpscr);
 272:.././hal/sam3u1c/inc/core_cmFunc.h **** #else
 273:.././hal/sam3u1c/inc/core_cmFunc.h ****    return(0);
 274:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif
 275:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 276:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 277:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 278:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set FPSCR
 279:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 280:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 281:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 282:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 283:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 284:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 285:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 286:.././hal/sam3u1c/inc/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 287:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 288:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regfpscr = (fpscr);
 289:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif
 290:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 291:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 292:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 293:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 294:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 295:.././hal/sam3u1c/inc/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:.././hal/sam3u1c/inc/core_cmFunc.h **** /* IAR iccarm specific functions */
 297:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 298:.././hal/sam3u1c/inc/core_cmFunc.h **** #include <cmsis_iar.h>
 299:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 300:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 301:.././hal/sam3u1c/inc/core_cmFunc.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:.././hal/sam3u1c/inc/core_cmFunc.h **** /* TI CCS specific functions */
 303:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 304:.././hal/sam3u1c/inc/core_cmFunc.h **** #include <cmsis_ccs.h>
 305:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 306:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 307:.././hal/sam3u1c/inc/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:.././hal/sam3u1c/inc/core_cmFunc.h **** /* GNU gcc specific functions */
 309:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 310:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 311:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 312:.././hal/sam3u1c/inc/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 313:.././hal/sam3u1c/inc/core_cmFunc.h ****   Can only be executed in Privileged modes.
 314:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 315:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 316:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 317:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("cpsie i");
 114              	 .loc 3 317 3
 115              	 .syntax unified
 116              	
 117 004e 62B6     	 cpsie i
 118              	
 119              	 .thumb
 120              	 .syntax unified
 121              	.LBE44:
 122              	.LBE43:
 294:.././hal/sam3u1c/sleep.c **** 		if (sleep_mode == SAM_PM_SMODE_SLEEP_WFI)
 123              	 .loc 1 294 6
 124 0050 7B68     	 ldr r3,[r7,#4]
 125 0052 022B     	 cmp r3,#2
 126 0054 01D1     	 bne .L7
 127              	.LBB45:
 128              	.LBB46:
 299:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 129              	 .loc 2 299 3
 130              	 .syntax unified
 131              	
 132 0056 30BF     	 wfi
 133              	
 134              	 .thumb
 135              	 .syntax unified
 136              	.LBE46:
 137              	.LBE45:
 295:.././hal/sam3u1c/sleep.c **** 			__WFI();
 296:.././hal/sam3u1c/sleep.c **** 		else
 297:.././hal/sam3u1c/sleep.c **** 			__WFE();
 298:.././hal/sam3u1c/sleep.c **** 		break;
 138              	 .loc 1 298 3
 139 0058 B4E1     	 b .L2
 140              	.L7:
 141              	.LBB47:
 142              	.LBB48:
 310:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 143              	 .loc 2 310 3
 144              	 .syntax unified
 145              	
 146 005a 20BF     	 wfe
 147              	
 148              	 .thumb
 149              	 .syntax unified
 150              	.LBE48:
 151              	.LBE47:
 152              	 .loc 1 298 3
 153 005c B2E1     	 b .L2
 154              	.L5:
 155              	.LBB49:
 156              	.LBB50:
 157              	.LBB51:
 318:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 319:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 320:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 321:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 322:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 323:.././hal/sam3u1c/inc/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 324:.././hal/sam3u1c/inc/core_cmFunc.h ****   Can only be executed in Privileged modes.
 325:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 326:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 327:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 328:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("cpsid i");
 158              	 .loc 3 328 3
 159              	 .syntax unified
 160              	
 161 005e 72B6     	 cpsid i
 162              	
 163              	 .thumb
 164              	 .syntax unified
 165              	.LBE51:
 166              	.LBE50:
 167              	.LBB52:
 168              	.LBB53:
 169              	 .loc 2 354 3
 170              	 .syntax unified
 171              	
 172 0060 BFF35F8F 	 dmb
 173              	
 174              	 .thumb
 175              	 .syntax unified
 176              	.LBE53:
 177              	.LBE52:
 299:.././hal/sam3u1c/sleep.c **** #endif
 300:.././hal/sam3u1c/sleep.c **** #endif
 301:.././hal/sam3u1c/sleep.c **** 
 302:.././hal/sam3u1c/sleep.c **** 	case SAM_PM_SMODE_WAIT_FAST:
 303:.././hal/sam3u1c/sleep.c **** 	case SAM_PM_SMODE_WAIT: {
 304:.././hal/sam3u1c/sleep.c **** 		uint32_t mor, pllr0, pllr1, mckr;
 305:.././hal/sam3u1c/sleep.c **** 		uint32_t fmr;
 306:.././hal/sam3u1c/sleep.c **** #if defined(EFC1)
 307:.././hal/sam3u1c/sleep.c **** 		uint32_t fmr1;
 308:.././hal/sam3u1c/sleep.c **** #endif
 309:.././hal/sam3u1c/sleep.c **** #if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
 310:.././hal/sam3u1c/sleep.c **** 		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
 311:.././hal/sam3u1c/sleep.c **** 				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
 312:.././hal/sam3u1c/sleep.c **** 				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
 313:.././hal/sam3u1c/sleep.c **** #endif
 314:.././hal/sam3u1c/sleep.c **** 		cpu_irq_disable();
 178              	 .loc 1 314 3
 179 0064 744B     	 ldr r3,.L40+8
 180 0066 0022     	 movs r2,#0
 181 0068 1A70     	 strb r2,[r3]
 315:.././hal/sam3u1c/sleep.c **** 		b_is_sleep_clock_used = true;
 182              	 .loc 1 315 25
 183 006a 744B     	 ldr r3,.L40+12
 184 006c 0122     	 movs r2,#1
 185 006e 1A70     	 strb r2,[r3]
 316:.././hal/sam3u1c/sleep.c **** 
 317:.././hal/sam3u1c/sleep.c **** #if (SAM4C || SAM4CM || SAM4CP)
 318:.././hal/sam3u1c/sleep.c **** 		/* Backup the sub-system 1 status and stop sub-system 1 */
 319:.././hal/sam3u1c/sleep.c **** 		uint32_t cpclk_backup = PMC->PMC_SCSR &
 320:.././hal/sam3u1c/sleep.c **** 				(PMC_SCSR_CPCK | PMC_SCSR_CPBMCK);
 321:.././hal/sam3u1c/sleep.c **** 		PMC->PMC_SCDR = cpclk_backup | PMC_SCDR_CPKEY_PASSWD;
 322:.././hal/sam3u1c/sleep.c **** #endif
 323:.././hal/sam3u1c/sleep.c **** 		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
 186              	 .loc 1 323 3
 187 0070 7B68     	 ldr r3,[r7,#4]
 188 0072 042B     	 cmp r3,#4
 189 0074 0CBF     	 ite eq
 190 0076 0123     	 moveq r3,#1
 191 0078 0023     	 movne r3,#0
 192 007a DAB2     	 uxtb r2,r3
 193 007c 07F12003 	 add r3,r7,#32
 194 0080 FB64     	 str r3,[r7,#76]
 195 0082 07F11C03 	 add r3,r7,#28
 196 0086 BB64     	 str r3,[r7,#72]
 197 0088 07F11803 	 add r3,r7,#24
 198 008c 7B64     	 str r3,[r7,#68]
 199 008e 07F11403 	 add r3,r7,#20
 200 0092 3B64     	 str r3,[r7,#64]
 201 0094 07F11003 	 add r3,r7,#16
 202 0098 FB63     	 str r3,[r7,#60]
 203 009a 07F10C03 	 add r3,r7,#12
 204 009e BB63     	 str r3,[r7,#56]
 205 00a0 1346     	 mov r3,r2
 206 00a2 87F83730 	 strb r3,[r7,#55]
 207              	.LBB54:
 208              	.LBB55:
  77:.././hal/sam3u1c/sleep.c **** 	uint32_t mckr = PMC->PMC_MCKR;
 209              	 .loc 1 77 21
 210 00a6 624B     	 ldr r3,.L40
  77:.././hal/sam3u1c/sleep.c **** 	uint32_t mckr = PMC->PMC_MCKR;
 211              	 .loc 1 77 11
 212 00a8 1B6A     	 ldr r3,[r3,#32]
 213 00aa 3B63     	 str r3,[r7,#48]
  78:.././hal/sam3u1c/sleep.c **** 	uint32_t fmr  = EFC0->EEFC_FMR;
 214              	 .loc 1 78 21
 215 00ac 604B     	 ldr r3,.L40
  78:.././hal/sam3u1c/sleep.c **** 	uint32_t fmr  = EFC0->EEFC_FMR;
 216              	 .loc 1 78 11
 217 00ae 1B6B     	 ldr r3,[r3,#48]
 218 00b0 FB62     	 str r3,[r7,#44]
  79:.././hal/sam3u1c/sleep.c **** # if defined(EFC1)
 219              	 .loc 1 79 22
 220 00b2 634B     	 ldr r3,.L40+16
  79:.././hal/sam3u1c/sleep.c **** # if defined(EFC1)
 221              	 .loc 1 79 11
 222 00b4 1B68     	 ldr r3,[r3]
 223 00b6 BB62     	 str r3,[r7,#40]
  81:.././hal/sam3u1c/sleep.c **** # endif
 224              	 .loc 1 81 22
 225 00b8 624B     	 ldr r3,.L40+20
  81:.././hal/sam3u1c/sleep.c **** # endif
 226              	 .loc 1 81 11
 227 00ba 1B68     	 ldr r3,[r3]
 228 00bc 7B62     	 str r3,[r7,#36]
  84:.././hal/sam3u1c/sleep.c **** 		*p_osc_setting = mor;
 229              	 .loc 1 84 5
 230 00be FB6C     	 ldr r3,[r7,#76]
 231 00c0 002B     	 cmp r3,#0
 232 00c2 02D0     	 beq .L9
  85:.././hal/sam3u1c/sleep.c **** 	}
 233              	 .loc 1 85 18
 234 00c4 FB6C     	 ldr r3,[r7,#76]
 235 00c6 3A6B     	 ldr r2,[r7,#48]
 236 00c8 1A60     	 str r2,[r3]
 237              	.L9:
  87:.././hal/sam3u1c/sleep.c **** 		*p_pll0_setting = PMC->CKGR_PLLAR;
 238              	 .loc 1 87 5
 239 00ca BB6C     	 ldr r3,[r7,#72]
 240 00cc 002B     	 cmp r3,#0
 241 00ce 03D0     	 beq .L10
  88:.././hal/sam3u1c/sleep.c **** 	}
 242              	 .loc 1 88 24
 243 00d0 574B     	 ldr r3,.L40
 244 00d2 9A6A     	 ldr r2,[r3,#40]
  88:.././hal/sam3u1c/sleep.c **** 	}
 245              	 .loc 1 88 19
 246 00d4 BB6C     	 ldr r3,[r7,#72]
 247 00d6 1A60     	 str r2,[r3]
 248              	.L10:
  90:.././hal/sam3u1c/sleep.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
 249              	 .loc 1 90 5
 250 00d8 7B6C     	 ldr r3,[r7,#68]
 251 00da 002B     	 cmp r3,#0
 252 00dc 03D0     	 beq .L11
  94:.././hal/sam3u1c/sleep.c **** #else
 253              	 .loc 1 94 24
 254 00de 544B     	 ldr r3,.L40
 255 00e0 DA69     	 ldr r2,[r3,#28]
  94:.././hal/sam3u1c/sleep.c **** #else
 256              	 .loc 1 94 19
 257 00e2 7B6C     	 ldr r3,[r7,#68]
 258 00e4 1A60     	 str r2,[r3]
 259              	.L11:
  99:.././hal/sam3u1c/sleep.c **** 		*p_mck_setting  = mckr;
 260              	 .loc 1 99 5
 261 00e6 3B6C     	 ldr r3,[r7,#64]
 262 00e8 002B     	 cmp r3,#0
 263 00ea 02D0     	 beq .L12
 100:.././hal/sam3u1c/sleep.c **** 	}
 264              	 .loc 1 100 19
 265 00ec 3B6C     	 ldr r3,[r7,#64]
 266 00ee FA6A     	 ldr r2,[r7,#44]
 267 00f0 1A60     	 str r2,[r3]
 268              	.L12:
 102:.././hal/sam3u1c/sleep.c **** 		*p_fmr_setting  = fmr;
 269              	 .loc 1 102 5
 270 00f2 FB6B     	 ldr r3,[r7,#60]
 271 00f4 002B     	 cmp r3,#0
 272 00f6 02D0     	 beq .L13
 103:.././hal/sam3u1c/sleep.c **** 	}
 273              	 .loc 1 103 19
 274 00f8 FB6B     	 ldr r3,[r7,#60]
 275 00fa BA6A     	 ldr r2,[r7,#40]
 276 00fc 1A60     	 str r2,[r3]
 277              	.L13:
 106:.././hal/sam3u1c/sleep.c **** 		*p_fmr_setting1 = fmr1;
 278              	 .loc 1 106 5
 279 00fe BB6B     	 ldr r3,[r7,#56]
 280 0100 002B     	 cmp r3,#0
 281 0102 02D0     	 beq .L14
 107:.././hal/sam3u1c/sleep.c **** 	}
 282              	 .loc 1 107 19
 283 0104 BB6B     	 ldr r3,[r7,#56]
 284 0106 7A6A     	 ldr r2,[r7,#36]
 285 0108 1A60     	 str r2,[r3]
 286              	.L14:
 112:.././hal/sam3u1c/sleep.c **** 	/* if MCK source is PLL, switch to mainck */
 287              	 .loc 1 112 5
 288 010a 494A     	 ldr r2,.L40
 112:.././hal/sam3u1c/sleep.c **** 	/* if MCK source is PLL, switch to mainck */
 289              	 .loc 1 112 44
 290 010c 3B6B     	 ldr r3,[r7,#48]
 291 010e 43F45C13 	 orr r3,r3,#3604480
 292 0112 43F00803 	 orr r3,r3,#8
 112:.././hal/sam3u1c/sleep.c **** 	/* if MCK source is PLL, switch to mainck */
 293              	 .loc 1 112 16
 294 0116 1362     	 str r3,[r2,#32]
 114:.././hal/sam3u1c/sleep.c **** 		/* MCK -> MAINCK */
 295              	 .loc 1 114 32
 296 0118 FB6A     	 ldr r3,[r7,#44]
 297 011a 03F00203 	 and r3,r3,#2
 114:.././hal/sam3u1c/sleep.c **** 		/* MCK -> MAINCK */
 298              	 .loc 1 114 5
 299 011e 002B     	 cmp r3,#0
 300 0120 0ED0     	 beq .L15
 116:.././hal/sam3u1c/sleep.c **** 		PMC->PMC_MCKR = mckr;
 301              	 .loc 1 116 16
 302 0122 FB6A     	 ldr r3,[r7,#44]
 303 0124 23F00303 	 bic r3,r3,#3
 116:.././hal/sam3u1c/sleep.c **** 		PMC->PMC_MCKR = mckr;
 304              	 .loc 1 116 8
 305 0128 43F00103 	 orr r3,r3,#1
 306 012c FB62     	 str r3,[r7,#44]
 117:.././hal/sam3u1c/sleep.c **** 		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
 307              	 .loc 1 117 6
 308 012e 404A     	 ldr r2,.L40
 117:.././hal/sam3u1c/sleep.c **** 		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
 309              	 .loc 1 117 17
 310 0130 FB6A     	 ldr r3,[r7,#44]
 311 0132 1363     	 str r3,[r2,#48]
 312              	.L16:
 118:.././hal/sam3u1c/sleep.c **** 	}
 313              	 .loc 1 118 14
 314 0134 3E4B     	 ldr r3,.L40
 315 0136 9B6E     	 ldr r3,[r3,#104]
 118:.././hal/sam3u1c/sleep.c **** 	}
 316              	 .loc 1 118 23
 317 0138 03F00803 	 and r3,r3,#8
 118:.././hal/sam3u1c/sleep.c **** 	}
 318              	 .loc 1 118 8
 319 013c 002B     	 cmp r3,#0
 320 013e F9D0     	 beq .L16
 321              	.L15:
 121:.././hal/sam3u1c/sleep.c **** 		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
 322              	 .loc 1 121 11
 323 0140 FB6A     	 ldr r3,[r7,#44]
 324 0142 03F07003 	 and r3,r3,#112
 121:.././hal/sam3u1c/sleep.c **** 		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
 325              	 .loc 1 121 5
 326 0146 002B     	 cmp r3,#0
 327 0148 0CD0     	 beq .L17
 122:.././hal/sam3u1c/sleep.c **** 		PMC->PMC_MCKR = mckr;
 328              	 .loc 1 122 8
 329 014a FB6A     	 ldr r3,[r7,#44]
 330 014c 23F07003 	 bic r3,r3,#112
 331 0150 FB62     	 str r3,[r7,#44]
 123:.././hal/sam3u1c/sleep.c **** 		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
 332              	 .loc 1 123 6
 333 0152 374A     	 ldr r2,.L40
 123:.././hal/sam3u1c/sleep.c **** 		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
 334              	 .loc 1 123 17
 335 0154 FB6A     	 ldr r3,[r7,#44]
 336 0156 1363     	 str r3,[r2,#48]
 337              	.L18:
 124:.././hal/sam3u1c/sleep.c **** 	}
 338              	 .loc 1 124 14
 339 0158 354B     	 ldr r3,.L40
 340 015a 9B6E     	 ldr r3,[r3,#104]
 124:.././hal/sam3u1c/sleep.c **** 	}
 341              	 .loc 1 124 23
 342 015c 03F00803 	 and r3,r3,#8
 124:.././hal/sam3u1c/sleep.c **** 	}
 343              	 .loc 1 124 8
 344 0160 002B     	 cmp r3,#0
 345 0162 F9D0     	 beq .L18
 346              	.L17:
 127:.././hal/sam3u1c/sleep.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
 347              	 .loc 1 127 2
 348 0164 384B     	 ldr r3,.L40+24
 349 0166 9847     	 blx r3
 350              	.LVL0:
 131:.././hal/sam3u1c/sleep.c **** #endif
 351              	 .loc 1 131 2
 352 0168 384B     	 ldr r3,.L40+28
 353 016a 9847     	 blx r3
 354              	.LVL1:
 355              	.L19:
 136:.././hal/sam3u1c/sleep.c **** 
 356              	 .loc 1 136 14
 357 016c 304B     	 ldr r3,.L40
 358 016e 9B6E     	 ldr r3,[r3,#104]
 136:.././hal/sam3u1c/sleep.c **** 
 359              	 .loc 1 136 23
 360 0170 03F40033 	 and r3,r3,#131072
 136:.././hal/sam3u1c/sleep.c **** 
 361              	 .loc 1 136 8
 362 0174 002B     	 cmp r3,#0
 363 0176 F9D0     	 beq .L19
 150:.././hal/sam3u1c/sleep.c **** 			CKGR_MOR_KEY_PASSWD;
 364              	 .loc 1 150 22
 365 0178 2D4B     	 ldr r3,.L40
 366 017a 1B6A     	 ldr r3,[r3,#32]
 150:.././hal/sam3u1c/sleep.c **** 			CKGR_MOR_KEY_PASSWD;
 367              	 .loc 1 150 54
 368 017c 23F09B73 	 bic r3,r3,#20316160
 369 0180 23F48033 	 bic r3,r3,#65536
 150:.././hal/sam3u1c/sleep.c **** 			CKGR_MOR_KEY_PASSWD;
 370              	 .loc 1 150 5
 371 0184 2A4A     	 ldr r2,.L40
 150:.././hal/sam3u1c/sleep.c **** 			CKGR_MOR_KEY_PASSWD;
 372              	 .loc 1 150 54
 373 0186 43F45C13 	 orr r3,r3,#3604480
 150:.././hal/sam3u1c/sleep.c **** 			CKGR_MOR_KEY_PASSWD;
 374              	 .loc 1 150 16
 375 018a 1362     	 str r3,[r2,#32]
 376              	.L20:
 153:.././hal/sam3u1c/sleep.c **** 
 377              	 .loc 1 153 14
 378 018c 284B     	 ldr r3,.L40
 379 018e 9B6E     	 ldr r3,[r3,#104]
 153:.././hal/sam3u1c/sleep.c **** 
 380              	 .loc 1 153 23
 381 0190 03F48033 	 and r3,r3,#65536
 153:.././hal/sam3u1c/sleep.c **** 
 382              	 .loc 1 153 8
 383 0194 002B     	 cmp r3,#0
 384 0196 F9D0     	 beq .L20
 157:.././hal/sam3u1c/sleep.c **** #if defined(EFC1)
 385              	 .loc 1 157 6
 386 0198 294A     	 ldr r2,.L40+16
 157:.././hal/sam3u1c/sleep.c **** #if defined(EFC1)
 387              	 .loc 1 157 23
 388 019a BB6A     	 ldr r3,[r7,#40]
 389 019c 23F47063 	 bic r3,r3,#3840
 157:.././hal/sam3u1c/sleep.c **** #if defined(EFC1)
 390              	 .loc 1 157 17
 391 01a0 1360     	 str r3,[r2]
 159:.././hal/sam3u1c/sleep.c **** #endif
 392              	 .loc 1 159 6
 393 01a2 284A     	 ldr r2,.L40+20
 159:.././hal/sam3u1c/sleep.c **** #endif
 394              	 .loc 1 159 24
 395 01a4 7B6A     	 ldr r3,[r7,#36]
 396 01a6 23F47063 	 bic r3,r3,#3840
 159:.././hal/sam3u1c/sleep.c **** #endif
 397              	 .loc 1 159 17
 398 01aa 1360     	 str r3,[r2]
 164:.././hal/sam3u1c/sleep.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 399              	 .loc 1 164 5
 400 01ac 97F83730 	 ldrb r3,[r7,#55]
 401 01b0 002B     	 cmp r3,#0
 402 01b2 09D0     	 beq .L21
 165:.././hal/sam3u1c/sleep.c **** 				CKGR_MOR_KEY_PASSWD;
 403              	 .loc 1 165 23
 404 01b4 1E4B     	 ldr r3,.L40
 405 01b6 1B6A     	 ldr r3,[r3,#32]
 165:.././hal/sam3u1c/sleep.c **** 				CKGR_MOR_KEY_PASSWD;
 406              	 .loc 1 165 56
 407 01b8 23F45C13 	 bic r3,r3,#3604480
 408 01bc 23F00103 	 bic r3,r3,#1
 165:.././hal/sam3u1c/sleep.c **** 				CKGR_MOR_KEY_PASSWD;
 409              	 .loc 1 165 6
 410 01c0 1B4A     	 ldr r2,.L40
 165:.././hal/sam3u1c/sleep.c **** 				CKGR_MOR_KEY_PASSWD;
 411              	 .loc 1 165 56
 412 01c2 43F45C13 	 orr r3,r3,#3604480
 165:.././hal/sam3u1c/sleep.c **** 				CKGR_MOR_KEY_PASSWD;
 413              	 .loc 1 165 17
 414 01c6 1362     	 str r3,[r2,#32]
 415              	.L21:
 416              	.LBE55:
 417              	.LBE54:
 324:.././hal/sam3u1c/sleep.c **** #if defined(EFC1)
 325:.././hal/sam3u1c/sleep.c **** 				&fmr1,
 326:.././hal/sam3u1c/sleep.c **** #endif
 327:.././hal/sam3u1c/sleep.c **** 				(sleep_mode == SAM_PM_SMODE_WAIT));
 328:.././hal/sam3u1c/sleep.c **** 
 329:.././hal/sam3u1c/sleep.c **** 		/* Enter wait mode */
 330:.././hal/sam3u1c/sleep.c **** 		cpu_irq_enable();
 418              	 .loc 1 330 3
 419 01c8 1B4B     	 ldr r3,.L40+8
 420 01ca 0122     	 movs r2,#1
 421 01cc 1A70     	 strb r2,[r3]
 422              	.LBB56:
 423              	.LBB57:
 424              	 .loc 2 354 3
 425              	 .syntax unified
 426              	
 427 01ce BFF35F8F 	 dmb
 428              	
 429              	 .thumb
 430              	 .syntax unified
 431              	.LBE57:
 432              	.LBE56:
 433              	.LBB58:
 434              	.LBB59:
 317:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 435              	 .loc 3 317 3
 436              	 .syntax unified
 437              	
 438 01d2 62B6     	 cpsie i
 439              	
 440              	 .thumb
 441              	 .syntax unified
 442              	.LBE59:
 443              	.LBE58:
 331:.././hal/sam3u1c/sleep.c **** 
 332:.././hal/sam3u1c/sleep.c **** 		pmc_enable_waitmode();
 444              	 .loc 1 332 3
 445 01d4 1E4B     	 ldr r3,.L40+32
 446 01d6 9847     	 blx r3
 447              	.LVL2:
 448              	.LBB60:
 449              	.LBB61:
 450              	 .loc 3 328 3
 451              	 .syntax unified
 452              	
 453 01d8 72B6     	 cpsid i
 454              	
 455              	 .thumb
 456              	 .syntax unified
 457              	.LBE61:
 458              	.LBE60:
 459              	.LBB62:
 460              	.LBB63:
 461              	 .loc 2 354 3
 462              	 .syntax unified
 463              	
 464 01da BFF35F8F 	 dmb
 465              	
 466              	 .thumb
 467              	 .syntax unified
 468              	.LBE63:
 469              	.LBE62:
 333:.././hal/sam3u1c/sleep.c **** 
 334:.././hal/sam3u1c/sleep.c **** 		cpu_irq_disable();
 470              	 .loc 1 334 3
 471 01de 164B     	 ldr r3,.L40+8
 472 01e0 0022     	 movs r2,#0
 473 01e2 1A70     	 strb r2,[r3]
 335:.././hal/sam3u1c/sleep.c **** 		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
 474              	 .loc 1 335 3
 475 01e4 3D6A     	 ldr r5,[r7,#32]
 476 01e6 FC69     	 ldr r4,[r7,#28]
 477 01e8 B869     	 ldr r0,[r7,#24]
 478 01ea 7969     	 ldr r1,[r7,#20]
 479 01ec 3A69     	 ldr r2,[r7,#16]
 480 01ee FB68     	 ldr r3,[r7,#12]
 481 01f0 FD66     	 str r5,[r7,#108]
 482 01f2 BC66     	 str r4,[r7,#104]
 483 01f4 7866     	 str r0,[r7,#100]
 484 01f6 3966     	 str r1,[r7,#96]
 485 01f8 FA65     	 str r2,[r7,#92]
 486 01fa BB65     	 str r3,[r7,#88]
 487              	.LBB64:
 488              	.LBB65:
 185:.././hal/sam3u1c/sleep.c **** 
 489              	 .loc 1 185 11
 490 01fc 0023     	 movs r3,#0
 491 01fe 7B65     	 str r3,[r7,#84]
 188:.././hal/sam3u1c/sleep.c **** 		/* Bypass mode */
 492              	 .loc 1 188 40
 493 0200 FB6E     	 ldr r3,[r7,#108]
 494 0202 03F00203 	 and r3,r3,#2
 188:.././hal/sam3u1c/sleep.c **** 		/* Bypass mode */
 495              	 .loc 1 188 5
 496 0206 002B     	 cmp r3,#0
 497 0208 28D0     	 beq .L22
 190:.././hal/sam3u1c/sleep.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
 498              	 .loc 1 190 23
 499 020a 094B     	 ldr r3,.L40
 500 020c 1B6A     	 ldr r3,[r3,#32]
 191:.././hal/sam3u1c/sleep.c **** 				CKGR_MOR_MOSCSEL;
 501              	 .loc 1 191 45
 502 020e 114A     	 ldr r2,.L40+36
 503 0210 1A40     	 ands r2,r2,r3
 190:.././hal/sam3u1c/sleep.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
 504              	 .loc 1 190 6
 505 0212 0749     	 ldr r1,.L40
 191:.././hal/sam3u1c/sleep.c **** 				CKGR_MOR_MOSCSEL;
 506              	 .loc 1 191 45
 507 0214 104B     	 ldr r3,.L40+40
 508 0216 1343     	 orrs r3,r3,r2
 190:.././hal/sam3u1c/sleep.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
 509              	 .loc 1 190 17
 510 0218 0B62     	 str r3,[r1,#32]
 193:.././hal/sam3u1c/sleep.c **** 					~CKGR_MOR_MOSCRCF_Msk)
 511              	 .loc 1 193 23
 512 021a 054B     	 ldr r3,.L40
 513 021c 1B6A     	 ldr r3,[r3,#32]
 195:.././hal/sam3u1c/sleep.c **** 	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
 514              	 .loc 1 195 5
 515 021e 23F45C13 	 bic r3,r3,#3604480
 516 0222 23F07803 	 bic r3,r3,#120
 193:.././hal/sam3u1c/sleep.c **** 					~CKGR_MOR_MOSCRCF_Msk)
 517              	 .loc 1 193 6
 518 0226 024A     	 ldr r2,.L40
 195:.././hal/sam3u1c/sleep.c **** 	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
 519              	 .loc 1 195 5
 520 0228 43F45C13 	 orr r3,r3,#3604480
 193:.././hal/sam3u1c/sleep.c **** 					~CKGR_MOR_MOSCRCF_Msk)
 521              	 .loc 1 193 17
 522 022c 1362     	 str r3,[r2,#32]
 523 022e 50E0     	 b .L23
 524              	.L41:
 525              	 .align 2
 526              	.L40:
 527 0230 00040E40 	 .word 1074660352
 528 0234 00ED00E0 	 .word -536810240
 529 0238 00000000 	 .word g_interrupt_enabled
 530 023c 00000000 	 .word b_is_sleep_clock_used
 531 0240 00080E40 	 .word 1074661376
 532 0244 000A0E40 	 .word 1074661888
 533 0248 00000000 	 .word pmc_disable_pllack
 534 024c 00000000 	 .word pmc_disable_upll_clock
 535 0250 00000000 	 .word pmc_enable_waitmode
 536 0254 FCFFC8FE 	 .word -20381700
 537 0258 02003701 	 .word 20381698
 538              	.L22:
 196:.././hal/sam3u1c/sleep.c **** 		/* Enable External XTAL */
 539              	 .loc 1 196 47
 540 025c FB6E     	 ldr r3,[r7,#108]
 541 025e 03F00103 	 and r3,r3,#1
 196:.././hal/sam3u1c/sleep.c **** 		/* Enable External XTAL */
 542              	 .loc 1 196 12
 543 0262 002B     	 cmp r3,#0
 544 0264 35D0     	 beq .L23
 198:.././hal/sam3u1c/sleep.c **** 			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
 545              	 .loc 1 198 12
 546 0266 594B     	 ldr r3,.L42
 547 0268 1B6A     	 ldr r3,[r3,#32]
 198:.././hal/sam3u1c/sleep.c **** 			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
 548              	 .loc 1 198 23
 549 026a 03F00103 	 and r3,r3,#1
 198:.././hal/sam3u1c/sleep.c **** 			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
 550              	 .loc 1 198 6
 551 026e 002B     	 cmp r3,#0
 552 0270 11D1     	 bne .L24
 199:.././hal/sam3u1c/sleep.c **** 					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
 553              	 .loc 1 199 24
 554 0272 564B     	 ldr r3,.L42
 555 0274 1B6A     	 ldr r3,[r3,#32]
 200:.././hal/sam3u1c/sleep.c **** 			/* Wait the Xtal to stabilize */
 556              	 .loc 1 200 26
 557 0276 23F45C13 	 bic r3,r3,#3604480
 558 027a 23F00303 	 bic r3,r3,#3
 199:.././hal/sam3u1c/sleep.c **** 					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
 559              	 .loc 1 199 7
 560 027e 534A     	 ldr r2,.L42
 200:.././hal/sam3u1c/sleep.c **** 			/* Wait the Xtal to stabilize */
 561              	 .loc 1 200 26
 562 0280 43F45C13 	 orr r3,r3,#3604480
 563 0284 43F00103 	 orr r3,r3,#1
 199:.././hal/sam3u1c/sleep.c **** 					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
 564              	 .loc 1 199 18
 565 0288 1362     	 str r3,[r2,#32]
 566              	.L25:
 202:.././hal/sam3u1c/sleep.c **** 		}
 567              	 .loc 1 202 16
 568 028a 504B     	 ldr r3,.L42
 569 028c 9B6E     	 ldr r3,[r3,#104]
 202:.././hal/sam3u1c/sleep.c **** 		}
 570              	 .loc 1 202 25
 571 028e 03F00103 	 and r3,r3,#1
 202:.././hal/sam3u1c/sleep.c **** 		}
 572              	 .loc 1 202 10
 573 0292 002B     	 cmp r3,#0
 574 0294 F9D0     	 beq .L25
 575              	.L24:
 205:.././hal/sam3u1c/sleep.c **** 			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
 576              	 .loc 1 205 12
 577 0296 4D4B     	 ldr r3,.L42
 578 0298 1B6A     	 ldr r3,[r3,#32]
 205:.././hal/sam3u1c/sleep.c **** 			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
 579              	 .loc 1 205 23
 580 029a 03F08073 	 and r3,r3,#16777216
 205:.././hal/sam3u1c/sleep.c **** 			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
 581              	 .loc 1 205 6
 582 029e 002B     	 cmp r3,#0
 583 02a0 0DD1     	 bne .L26
 206:.././hal/sam3u1c/sleep.c **** 			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
 584              	 .loc 1 206 18
 585 02a2 4A4B     	 ldr r3,.L42
 586 02a4 1B6A     	 ldr r3,[r3,#32]
 587 02a6 494A     	 ldr r2,.L42
 588 02a8 43F09B73 	 orr r3,r3,#20316160
 589 02ac 43F48033 	 orr r3,r3,#65536
 590 02b0 1362     	 str r3,[r2,#32]
 591              	.L27:
 207:.././hal/sam3u1c/sleep.c **** 		}
 592              	 .loc 1 207 16
 593 02b2 464B     	 ldr r3,.L42
 594 02b4 9B6E     	 ldr r3,[r3,#104]
 207:.././hal/sam3u1c/sleep.c **** 		}
 595              	 .loc 1 207 25
 596 02b6 03F48033 	 and r3,r3,#65536
 207:.././hal/sam3u1c/sleep.c **** 		}
 597              	 .loc 1 207 10
 598 02ba 002B     	 cmp r3,#0
 599 02bc F9D0     	 beq .L27
 600              	.L26:
 210:.././hal/sam3u1c/sleep.c **** 						~CKGR_MOR_MOSCRCF_Msk)
 601              	 .loc 1 210 23
 602 02be 434B     	 ldr r3,.L42
 603 02c0 1B6A     	 ldr r3,[r3,#32]
 212:.././hal/sam3u1c/sleep.c **** 	}
 604              	 .loc 1 212 6
 605 02c2 23F45C13 	 bic r3,r3,#3604480
 606 02c6 23F07803 	 bic r3,r3,#120
 210:.././hal/sam3u1c/sleep.c **** 						~CKGR_MOR_MOSCRCF_Msk)
 607              	 .loc 1 210 6
 608 02ca 404A     	 ldr r2,.L42
 212:.././hal/sam3u1c/sleep.c **** 	}
 609              	 .loc 1 212 6
 610 02cc 43F45C13 	 orr r3,r3,#3604480
 210:.././hal/sam3u1c/sleep.c **** 						~CKGR_MOR_MOSCRCF_Msk)
 611              	 .loc 1 210 17
 612 02d0 1362     	 str r3,[r2,#32]
 613              	.L23:
 215:.././hal/sam3u1c/sleep.c **** #if (SAM4C || SAM4CM || SAMG || SAM4CP)
 614              	 .loc 1 215 19
 615 02d2 BA6E     	 ldr r2,[r7,#104]
 616 02d4 3E4B     	 ldr r3,.L42+4
 617 02d6 1340     	 ands r3,r3,r2
 215:.././hal/sam3u1c/sleep.c **** #if (SAM4C || SAM4CM || SAMG || SAM4CP)
 618              	 .loc 1 215 5
 619 02d8 002B     	 cmp r3,#0
 620 02da 08D0     	 beq .L28
 219:.././hal/sam3u1c/sleep.c **** #endif
 621              	 .loc 1 219 6
 622 02dc 3B4A     	 ldr r2,.L42
 219:.././hal/sam3u1c/sleep.c **** #endif
 623              	 .loc 1 219 36
 624 02de BB6E     	 ldr r3,[r7,#104]
 625 02e0 43F00053 	 orr r3,r3,#536870912
 219:.././hal/sam3u1c/sleep.c **** #endif
 626              	 .loc 1 219 19
 627 02e4 9362     	 str r3,[r2,#40]
 221:.././hal/sam3u1c/sleep.c **** 	}
 628              	 .loc 1 221 10
 629 02e6 7B6D     	 ldr r3,[r7,#84]
 630 02e8 43F00203 	 orr r3,r3,#2
 631 02ec 7B65     	 str r3,[r7,#84]
 632              	.L28:
 229:.././hal/sam3u1c/sleep.c **** 		PMC->CKGR_UCKR = pll1_setting;
 633              	 .loc 1 229 19
 634 02ee 7B6E     	 ldr r3,[r7,#100]
 635 02f0 03F48033 	 and r3,r3,#65536
 229:.././hal/sam3u1c/sleep.c **** 		PMC->CKGR_UCKR = pll1_setting;
 636              	 .loc 1 229 5
 637 02f4 002B     	 cmp r3,#0
 638 02f6 06D0     	 beq .L29
 230:.././hal/sam3u1c/sleep.c **** 		pll_sr |= PMC_SR_LOCKU;
 639              	 .loc 1 230 6
 640 02f8 344A     	 ldr r2,.L42
 230:.././hal/sam3u1c/sleep.c **** 		pll_sr |= PMC_SR_LOCKU;
 641              	 .loc 1 230 18
 642 02fa 7B6E     	 ldr r3,[r7,#100]
 643 02fc D361     	 str r3,[r2,#28]
 231:.././hal/sam3u1c/sleep.c **** 	}
 644              	 .loc 1 231 10
 645 02fe 7B6D     	 ldr r3,[r7,#84]
 646 0300 43F04003 	 orr r3,r3,#64
 647 0304 7B65     	 str r3,[r7,#84]
 648              	.L29:
 237:.././hal/sam3u1c/sleep.c **** 	case PMC_MCKR_CSS_PLLA_CLK:
 649              	 .loc 1 237 21
 650 0306 3B6E     	 ldr r3,[r7,#96]
 651 0308 03F00303 	 and r3,r3,#3
 237:.././hal/sam3u1c/sleep.c **** 	case PMC_MCKR_CSS_PLLA_CLK:
 652              	 .loc 1 237 2
 653 030c 022B     	 cmp r3,#2
 654 030e 02D0     	 beq .L33
 655 0310 032B     	 cmp r3,#3
 656 0312 07D0     	 beq .L34
 657 0314 0CE0     	 b .L32
 658              	.L33:
 239:.././hal/sam3u1c/sleep.c **** 		break;
 659              	 .loc 1 239 15
 660 0316 2D4B     	 ldr r3,.L42
 661 0318 9B6E     	 ldr r3,[r3,#104]
 239:.././hal/sam3u1c/sleep.c **** 		break;
 662              	 .loc 1 239 24
 663 031a 03F00203 	 and r3,r3,#2
 239:.././hal/sam3u1c/sleep.c **** 		break;
 664              	 .loc 1 239 9
 665 031e 002B     	 cmp r3,#0
 666 0320 F9D0     	 beq .L33
 667 0322 05E0     	 b .L32
 668              	.L34:
 247:.././hal/sam3u1c/sleep.c **** 		break;
 669              	 .loc 1 247 15
 670 0324 294B     	 ldr r3,.L42
 671 0326 9B6E     	 ldr r3,[r3,#104]
 247:.././hal/sam3u1c/sleep.c **** 		break;
 672              	 .loc 1 247 24
 673 0328 03F04003 	 and r3,r3,#64
 247:.././hal/sam3u1c/sleep.c **** 		break;
 674              	 .loc 1 247 9
 675 032c 002B     	 cmp r3,#0
 676 032e F9D0     	 beq .L34
 677              	.L32:
 253:.././hal/sam3u1c/sleep.c **** 
 678              	 .loc 1 253 12
 679 0330 264B     	 ldr r3,.L42
 253:.././hal/sam3u1c/sleep.c **** 
 680              	 .loc 1 253 7
 681 0332 1B6B     	 ldr r3,[r3,#48]
 682 0334 3B65     	 str r3,[r7,#80]
 256:.././hal/sam3u1c/sleep.c **** 		| (mck_setting & PMC_MCKR_PRES_Msk);
 683              	 .loc 1 256 24
 684 0336 3B6D     	 ldr r3,[r7,#80]
 685 0338 23F07002 	 bic r2,r3,#112
 257:.././hal/sam3u1c/sleep.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
 686              	 .loc 1 257 18
 687 033c 3B6E     	 ldr r3,[r7,#96]
 688 033e 03F07003 	 and r3,r3,#112
 256:.././hal/sam3u1c/sleep.c **** 		| (mck_setting & PMC_MCKR_PRES_Msk);
 689              	 .loc 1 256 5
 690 0342 2249     	 ldr r1,.L42
 257:.././hal/sam3u1c/sleep.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
 691              	 .loc 1 257 3
 692 0344 1343     	 orrs r3,r3,r2
 256:.././hal/sam3u1c/sleep.c **** 		| (mck_setting & PMC_MCKR_PRES_Msk);
 693              	 .loc 1 256 16
 694 0346 0B63     	 str r3,[r1,#48]
 695              	.L35:
 258:.././hal/sam3u1c/sleep.c **** 
 696              	 .loc 1 258 14
 697 0348 204B     	 ldr r3,.L42
 698 034a 9B6E     	 ldr r3,[r3,#104]
 258:.././hal/sam3u1c/sleep.c **** 
 699              	 .loc 1 258 23
 700 034c 03F00803 	 and r3,r3,#8
 258:.././hal/sam3u1c/sleep.c **** 
 701              	 .loc 1 258 8
 702 0350 002B     	 cmp r3,#0
 703 0352 F9D0     	 beq .L35
 261:.././hal/sam3u1c/sleep.c **** #if defined(EFC1)
 704              	 .loc 1 261 6
 705 0354 1F4A     	 ldr r2,.L42+8
 261:.././hal/sam3u1c/sleep.c **** #if defined(EFC1)
 706              	 .loc 1 261 17
 707 0356 FB6D     	 ldr r3,[r7,#92]
 708 0358 1360     	 str r3,[r2]
 263:.././hal/sam3u1c/sleep.c **** #endif
 709              	 .loc 1 263 6
 710 035a 1F4A     	 ldr r2,.L42+12
 263:.././hal/sam3u1c/sleep.c **** #endif
 711              	 .loc 1 263 17
 712 035c BB6D     	 ldr r3,[r7,#88]
 713 035e 1360     	 str r3,[r2]
 267:.././hal/sam3u1c/sleep.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
 714              	 .loc 1 267 5
 715 0360 1A4A     	 ldr r2,.L42
 267:.././hal/sam3u1c/sleep.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
 716              	 .loc 1 267 16
 717 0362 3B6E     	 ldr r3,[r7,#96]
 718 0364 1363     	 str r3,[r2,#48]
 719              	.L36:
 268:.././hal/sam3u1c/sleep.c **** 
 720              	 .loc 1 268 14
 721 0366 194B     	 ldr r3,.L42
 722 0368 9B6E     	 ldr r3,[r3,#104]
 268:.././hal/sam3u1c/sleep.c **** 
 723              	 .loc 1 268 23
 724 036a 03F00803 	 and r3,r3,#8
 268:.././hal/sam3u1c/sleep.c **** 
 725              	 .loc 1 268 8
 726 036e 002B     	 cmp r3,#0
 727 0370 F9D0     	 beq .L36
 728              	.L37:
 271:.././hal/sam3u1c/sleep.c **** }
 729              	 .loc 1 271 14
 730 0372 164B     	 ldr r3,.L42
 731 0374 9A6E     	 ldr r2,[r3,#104]
 271:.././hal/sam3u1c/sleep.c **** }
 732              	 .loc 1 271 23
 733 0376 7B6D     	 ldr r3,[r7,#84]
 734 0378 1340     	 ands r3,r3,r2
 271:.././hal/sam3u1c/sleep.c **** }
 735              	 .loc 1 271 8
 736 037a 002B     	 cmp r3,#0
 737 037c F9D0     	 beq .L37
 738              	.LBE65:
 739              	.LBE64:
 336:.././hal/sam3u1c/sleep.c **** #if defined(EFC1)
 337:.././hal/sam3u1c/sleep.c **** 				, fmr1
 338:.././hal/sam3u1c/sleep.c **** #endif
 339:.././hal/sam3u1c/sleep.c **** 				);
 340:.././hal/sam3u1c/sleep.c **** 
 341:.././hal/sam3u1c/sleep.c **** #if (SAM4C || SAM4CM || SAM4CP)
 342:.././hal/sam3u1c/sleep.c **** 		/* Restore the sub-system 1 */
 343:.././hal/sam3u1c/sleep.c **** 		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
 344:.././hal/sam3u1c/sleep.c **** #endif
 345:.././hal/sam3u1c/sleep.c **** 		b_is_sleep_clock_used = false;
 740              	 .loc 1 345 25
 741 037e 174B     	 ldr r3,.L42+16
 742 0380 0022     	 movs r2,#0
 743 0382 1A70     	 strb r2,[r3]
 346:.././hal/sam3u1c/sleep.c **** 		if (callback_clocks_restored) {
 744              	 .loc 1 346 7
 745 0384 164B     	 ldr r3,.L42+20
 746 0386 1B68     	 ldr r3,[r3]
 747              	 .loc 1 346 6
 748 0388 002B     	 cmp r3,#0
 749 038a 05D0     	 beq .L38
 347:.././hal/sam3u1c/sleep.c **** 			callback_clocks_restored();
 750              	 .loc 1 347 4
 751 038c 144B     	 ldr r3,.L42+20
 752 038e 1B68     	 ldr r3,[r3]
 753 0390 9847     	 blx r3
 754              	.LVL3:
 348:.././hal/sam3u1c/sleep.c **** 			callback_clocks_restored = NULL;
 755              	 .loc 1 348 29
 756 0392 134B     	 ldr r3,.L42+20
 757 0394 0022     	 movs r2,#0
 758 0396 1A60     	 str r2,[r3]
 759              	.L38:
 349:.././hal/sam3u1c/sleep.c **** 		}
 350:.././hal/sam3u1c/sleep.c **** 		cpu_irq_enable();
 760              	 .loc 1 350 3
 761 0398 124B     	 ldr r3,.L42+24
 762 039a 0122     	 movs r2,#1
 763 039c 1A70     	 strb r2,[r3]
 764              	.LBB66:
 765              	.LBB67:
 766              	 .loc 2 354 3
 767              	 .syntax unified
 768              	
 769 039e BFF35F8F 	 dmb
 770              	
 771              	 .thumb
 772              	 .syntax unified
 773              	.LBE67:
 774              	.LBE66:
 775              	.LBB68:
 776              	.LBB69:
 317:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 777              	 .loc 3 317 3
 778              	 .syntax unified
 779              	
 780 03a2 62B6     	 cpsie i
 781              	
 782              	 .thumb
 783              	 .syntax unified
 784              	.LBE69:
 785              	.LBE68:
 351:.././hal/sam3u1c/sleep.c **** 
 352:.././hal/sam3u1c/sleep.c **** 		break;
 786              	 .loc 1 352 3
 787 03a4 00BF     	 nop
 788 03a6 0DE0     	 b .L2
 789              	.L3:
 790              	.LBE49:
 353:.././hal/sam3u1c/sleep.c **** 	}
 354:.././hal/sam3u1c/sleep.c **** #if (!(SAMG51 || SAMG53 || SAMG54))
 355:.././hal/sam3u1c/sleep.c **** 	case SAM_PM_SMODE_BACKUP:
 356:.././hal/sam3u1c/sleep.c **** 		SCB->SCR |= SCR_SLEEPDEEP;
 791              	 .loc 1 356 12
 792 03a8 0F4B     	 ldr r3,.L42+28
 793 03aa 1B69     	 ldr r3,[r3,#16]
 794 03ac 0E4A     	 ldr r2,.L42+28
 795 03ae 43F00403 	 orr r3,r3,#4
 796 03b2 1361     	 str r3,[r2,#16]
 357:.././hal/sam3u1c/sleep.c **** #if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
 358:.././hal/sam3u1c/sleep.c **** 		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
 359:.././hal/sam3u1c/sleep.c **** 		cpu_irq_enable();
 360:.././hal/sam3u1c/sleep.c **** 		__WFI() ;
 361:.././hal/sam3u1c/sleep.c **** #else
 362:.././hal/sam3u1c/sleep.c **** 		cpu_irq_enable();
 797              	 .loc 1 362 3
 798 03b4 0B4B     	 ldr r3,.L42+24
 799 03b6 0122     	 movs r2,#1
 800 03b8 1A70     	 strb r2,[r3]
 801              	.LBB70:
 802              	.LBB71:
 803              	 .loc 2 354 3
 804              	 .syntax unified
 805              	
 806 03ba BFF35F8F 	 dmb
 807              	
 808              	 .thumb
 809              	 .syntax unified
 810              	.LBE71:
 811              	.LBE70:
 812              	.LBB72:
 813              	.LBB73:
 317:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 814              	 .loc 3 317 3
 815              	 .syntax unified
 816              	
 817 03be 62B6     	 cpsie i
 818              	
 819              	 .thumb
 820              	 .syntax unified
 821              	.LBE73:
 822              	.LBE72:
 823              	.LBB74:
 824              	.LBB75:
 310:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 825              	 .loc 2 310 3
 826              	 .syntax unified
 827              	
 828 03c0 20BF     	 wfe
 829              	
 830              	 .thumb
 831              	 .syntax unified
 832              	.LBE75:
 833              	.LBE74:
 363:.././hal/sam3u1c/sleep.c **** 		__WFE() ;
 364:.././hal/sam3u1c/sleep.c **** #endif
 365:.././hal/sam3u1c/sleep.c **** 		break;
 834              	 .loc 1 365 3
 835 03c2 00BF     	 nop
 836              	.L2:
 837              	.L39:
 366:.././hal/sam3u1c/sleep.c **** #endif
 367:.././hal/sam3u1c/sleep.c **** 	}
 368:.././hal/sam3u1c/sleep.c **** }
 838              	 .loc 1 368 1
 839 03c4 00BF     	 nop
 840 03c6 7037     	 adds r7,r7,#112
 841              	.LCFI3:
 842              	 .cfi_def_cfa_offset 16
 843 03c8 BD46     	 mov sp,r7
 844              	.LCFI4:
 845              	 .cfi_def_cfa_register 13
 846              	 
 847 03ca B0BD     	 pop {r4,r5,r7,pc}
 848              	.L43:
 849              	 .align 2
 850              	.L42:
 851 03cc 00040E40 	 .word 1074660352
 852 03d0 0000FF07 	 .word 134152192
 853 03d4 00080E40 	 .word 1074661376
 854 03d8 000A0E40 	 .word 1074661888
 855 03dc 00000000 	 .word b_is_sleep_clock_used
 856 03e0 00000000 	 .word callback_clocks_restored
 857 03e4 00000000 	 .word g_interrupt_enabled
 858 03e8 00ED00E0 	 .word -536810240
 859              	 .cfi_endproc
 860              	.LFE71:
 862              	 .section .text.pmc_is_wakeup_clocks_restored,"ax",%progbits
 863              	 .align 1
 864              	 .global pmc_is_wakeup_clocks_restored
 865              	 .syntax unified
 866              	 .thumb
 867              	 .thumb_func
 868              	 .fpu softvfp
 870              	pmc_is_wakeup_clocks_restored:
 871              	.LFB72:
 369:.././hal/sam3u1c/sleep.c **** 
 370:.././hal/sam3u1c/sleep.c **** bool pmc_is_wakeup_clocks_restored(void)
 371:.././hal/sam3u1c/sleep.c **** {
 872              	 .loc 1 371 1
 873              	 .cfi_startproc
 874              	 
 875              	 
 876              	 
 877 0000 80B4     	 push {r7}
 878              	.LCFI5:
 879              	 .cfi_def_cfa_offset 4
 880              	 .cfi_offset 7,-4
 881 0002 00AF     	 add r7,sp,#0
 882              	.LCFI6:
 883              	 .cfi_def_cfa_register 7
 372:.././hal/sam3u1c/sleep.c **** 	return !b_is_sleep_clock_used;
 884              	 .loc 1 372 2
 885 0004 084B     	 ldr r3,.L46
 886 0006 1B78     	 ldrb r3,[r3]
 887 0008 DBB2     	 uxtb r3,r3
 888 000a 002B     	 cmp r3,#0
 889 000c 14BF     	 ite ne
 890 000e 0123     	 movne r3,#1
 891 0010 0023     	 moveq r3,#0
 892 0012 DBB2     	 uxtb r3,r3
 893 0014 83F00103 	 eor r3,r3,#1
 894 0018 DBB2     	 uxtb r3,r3
 895              	 .loc 1 372 9
 896 001a 03F00103 	 and r3,r3,#1
 897 001e DBB2     	 uxtb r3,r3
 373:.././hal/sam3u1c/sleep.c **** }
 898              	 .loc 1 373 1
 899 0020 1846     	 mov r0,r3
 900 0022 BD46     	 mov sp,r7
 901              	.LCFI7:
 902              	 .cfi_def_cfa_register 13
 903              	 
 904 0024 80BC     	 pop {r7}
 905              	.LCFI8:
 906              	 .cfi_restore 7
 907              	 .cfi_def_cfa_offset 0
 908 0026 7047     	 bx lr
 909              	.L47:
 910              	 .align 2
 911              	.L46:
 912 0028 00000000 	 .word b_is_sleep_clock_used
 913              	 .cfi_endproc
 914              	.LFE72:
 916              	 .section .text.pmc_wait_wakeup_clocks_restore,"ax",%progbits
 917              	 .align 1
 918              	 .global pmc_wait_wakeup_clocks_restore
 919              	 .syntax unified
 920              	 .thumb
 921              	 .thumb_func
 922              	 .fpu softvfp
 924              	pmc_wait_wakeup_clocks_restore:
 925              	.LFB73:
 374:.././hal/sam3u1c/sleep.c **** 
 375:.././hal/sam3u1c/sleep.c **** void pmc_wait_wakeup_clocks_restore(
 376:.././hal/sam3u1c/sleep.c **** 		pmc_callback_wakeup_clocks_restored_t callback)
 377:.././hal/sam3u1c/sleep.c **** {
 926              	 .loc 1 377 1
 927              	 .cfi_startproc
 928              	 
 929              	 
 930 0000 80B5     	 push {r7,lr}
 931              	.LCFI9:
 932              	 .cfi_def_cfa_offset 8
 933              	 .cfi_offset 7,-8
 934              	 .cfi_offset 14,-4
 935 0002 82B0     	 sub sp,sp,#8
 936              	.LCFI10:
 937              	 .cfi_def_cfa_offset 16
 938 0004 00AF     	 add r7,sp,#0
 939              	.LCFI11:
 940              	 .cfi_def_cfa_register 7
 941 0006 7860     	 str r0,[r7,#4]
 378:.././hal/sam3u1c/sleep.c **** 	if (b_is_sleep_clock_used) {
 942              	 .loc 1 378 6
 943 0008 0B4B     	 ldr r3,.L52
 944 000a 1B78     	 ldrb r3,[r3]
 945 000c DBB2     	 uxtb r3,r3
 946              	 .loc 1 378 5
 947 000e 002B     	 cmp r3,#0
 948 0010 09D0     	 beq .L49
 949              	.LBB76:
 950              	.LBB77:
 951              	 .loc 3 328 3
 952              	 .syntax unified
 953              	
 954 0012 72B6     	 cpsid i
 955              	
 956              	 .thumb
 957              	 .syntax unified
 958              	.LBE77:
 959              	.LBE76:
 960              	.LBB78:
 961              	.LBB79:
 962              	 .loc 2 354 3
 963              	 .syntax unified
 964              	
 965 0014 BFF35F8F 	 dmb
 966              	
 967              	 .thumb
 968              	 .syntax unified
 969              	.LBE79:
 970              	.LBE78:
 379:.././hal/sam3u1c/sleep.c **** 		cpu_irq_disable();
 971              	 .loc 1 379 3
 972 0018 084B     	 ldr r3,.L52+4
 973 001a 0022     	 movs r2,#0
 974 001c 1A70     	 strb r2,[r3]
 380:.././hal/sam3u1c/sleep.c **** 		callback_clocks_restored = callback;
 975              	 .loc 1 380 28
 976 001e 084A     	 ldr r2,.L52+8
 977 0020 7B68     	 ldr r3,[r7,#4]
 978 0022 1360     	 str r3,[r2]
 381:.././hal/sam3u1c/sleep.c **** 	} else if (callback) {
 382:.././hal/sam3u1c/sleep.c **** 		callback();
 383:.././hal/sam3u1c/sleep.c **** 	}
 384:.././hal/sam3u1c/sleep.c **** }
 979              	 .loc 1 384 1
 980 0024 04E0     	 b .L51
 981              	.L49:
 381:.././hal/sam3u1c/sleep.c **** 	} else if (callback) {
 982              	 .loc 1 381 12
 983 0026 7B68     	 ldr r3,[r7,#4]
 984 0028 002B     	 cmp r3,#0
 985 002a 01D0     	 beq .L51
 382:.././hal/sam3u1c/sleep.c **** 	}
 986              	 .loc 1 382 3
 987 002c 7B68     	 ldr r3,[r7,#4]
 988 002e 9847     	 blx r3
 989              	.LVL4:
 990              	.L51:
 991              	 .loc 1 384 1
 992 0030 00BF     	 nop
 993 0032 0837     	 adds r7,r7,#8
 994              	.LCFI12:
 995              	 .cfi_def_cfa_offset 8
 996 0034 BD46     	 mov sp,r7
 997              	.LCFI13:
 998              	 .cfi_def_cfa_register 13
 999              	 
 1000 0036 80BD     	 pop {r7,pc}
 1001              	.L53:
 1002              	 .align 2
 1003              	.L52:
 1004 0038 00000000 	 .word b_is_sleep_clock_used
 1005 003c 00000000 	 .word g_interrupt_enabled
 1006 0040 00000000 	 .word callback_clocks_restored
 1007              	 .cfi_endproc
 1008              	.LFE73:
 1010              	 .text
 1011              	.Letext0:
 1012              	 .file 4 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\machine\\_default_types.h"
 1013              	 .file 5 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\sys\\_stdint.h"
 1014              	 .file 6 ".././hal/sam3u1c/inc/sam3u1c.h"
 1015              	 .file 7 ".././hal/sam3u1c/inc/core_cm3.h"
 1016              	 .file 8 ".././hal/sam3u1c/inc/system_sam3u.h"
 1017              	 .file 9 ".././hal/sam3u1c/inc/component/component_efc.h"
 1018              	 .file 10 ".././hal/sam3u1c/inc/component/component_pmc.h"
 1019              	 .file 11 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\sys\\lock.h"
 1020              	 .file 12 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\sys\\_types.h"
 1021              	 .file 13 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\lib\\gcc\\arm-none-eabi\\8.2.1\\include\\stddef.h"
 1022              	 .file 14 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\sys\\reent.h"
 1023              	 .file 15 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\stdlib.h"
 1024              	 .file 16 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
 1025              	 .file 17 ".././hal/sam3u1c/inc/sleep.h"
 1026              	 .file 18 ".././hal/sam3u1c/inc/pmc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 sleep.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:29     .bss.b_is_sleep_clock_used:00000000 b_is_sleep_clock_used
    {standard input}:30     .bss.b_is_sleep_clock_used:00000000 $d
    {standard input}:32     .bss.callback_clocks_restored:00000000 $d
    {standard input}:35     .bss.callback_clocks_restored:00000000 callback_clocks_restored
    {standard input}:38     .text.pmc_sleep:00000000 $t
    {standard input}:46     .text.pmc_sleep:00000000 pmc_sleep
    {standard input}:76     .text.pmc_sleep:00000018 $d
    {standard input}:81     .text.pmc_sleep:0000002c $t
    {standard input}:527    .text.pmc_sleep:00000230 $d
    {standard input}:540    .text.pmc_sleep:0000025c $t
    {standard input}:851    .text.pmc_sleep:000003cc $d
    {standard input}:863    .text.pmc_is_wakeup_clocks_restored:00000000 $t
    {standard input}:870    .text.pmc_is_wakeup_clocks_restored:00000000 pmc_is_wakeup_clocks_restored
    {standard input}:912    .text.pmc_is_wakeup_clocks_restored:00000028 $d
    {standard input}:917    .text.pmc_wait_wakeup_clocks_restore:00000000 $t
    {standard input}:924    .text.pmc_wait_wakeup_clocks_restore:00000000 pmc_wait_wakeup_clocks_restore
    {standard input}:1004   .text.pmc_wait_wakeup_clocks_restore:00000038 $d
                           .group:00000000 wm4.0.bacf6c85951b42af729d707f36a7fff6
                           .group:00000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.newlib.h.8.f6e543eac3f2f65163ba2ffe3b04987b
                           .group:00000000 wm4.ieeefp.h.77.d5685ba212d3ed6e914898d045f873e3
                           .group:00000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.cdefs.h.49.2bf373aedffd8b393ccd11dc057e8547
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:00000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:00000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.sleep.h.45.ef10e1aee6f903405be19980a8333b7f
                           .group:00000000 wm4.pmc.h.58.e82ab76d364abd9761d4d0905e15fc60
                           .group:00000000 wm4.board.h.48.ce8d06c36cc583d9bf62738411f62e4d
                           .group:00000000 wm4.cw521.h.62.d34c289ace4a92d90be8fb389db40479

UNDEFINED SYMBOLS
g_interrupt_enabled
pmc_disable_pllack
pmc_disable_upll_clock
pmc_enable_waitmode
