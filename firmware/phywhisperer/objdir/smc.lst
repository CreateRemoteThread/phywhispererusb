   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "smc.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .section .text.smc_set_setup_timing,"ax",%progbits
  27              	 .align 1
  28              	 .global smc_set_setup_timing
  29              	 .syntax unified
  30              	 .thumb
  31              	 .thumb_func
  32              	 .fpu softvfp
  34              	smc_set_setup_timing:
  35              	.LFB69:
  36              	 .file 1 ".././hal/sam3u1c/smc.c"
   1:.././hal/sam3u1c/smc.c **** /**
   2:.././hal/sam3u1c/smc.c ****  * \file
   3:.././hal/sam3u1c/smc.c ****  *
   4:.././hal/sam3u1c/smc.c ****  * \brief Static Memory Controller (SMC) driver for SAM.
   5:.././hal/sam3u1c/smc.c ****  *
   6:.././hal/sam3u1c/smc.c ****  * Copyright (c) 2011-2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/smc.c ****  *
   8:.././hal/sam3u1c/smc.c ****  * \asf_license_start
   9:.././hal/sam3u1c/smc.c ****  *
  10:.././hal/sam3u1c/smc.c ****  * \page License
  11:.././hal/sam3u1c/smc.c ****  *
  12:.././hal/sam3u1c/smc.c ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/smc.c ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/smc.c ****  *
  15:.././hal/sam3u1c/smc.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/smc.c ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/smc.c ****  *
  18:.././hal/sam3u1c/smc.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/smc.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/smc.c ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/smc.c ****  *
  22:.././hal/sam3u1c/smc.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/smc.c ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/smc.c ****  *
  25:.././hal/sam3u1c/smc.c ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/smc.c ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/smc.c ****  *
  28:.././hal/sam3u1c/smc.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/smc.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/smc.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/smc.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/smc.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/smc.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/smc.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/smc.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/smc.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/smc.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/smc.c ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/smc.c ****  *
  40:.././hal/sam3u1c/smc.c ****  * \asf_license_stop
  41:.././hal/sam3u1c/smc.c ****  *
  42:.././hal/sam3u1c/smc.c ****  */
  43:.././hal/sam3u1c/smc.c **** 
  44:.././hal/sam3u1c/smc.c **** #include "smc.h"
  45:.././hal/sam3u1c/smc.c **** #include "board.h"
  46:.././hal/sam3u1c/smc.c **** 
  47:.././hal/sam3u1c/smc.c **** /// @cond 0
  48:.././hal/sam3u1c/smc.c **** /**INDENT-OFF**/
  49:.././hal/sam3u1c/smc.c **** #ifdef __cplusplus
  50:.././hal/sam3u1c/smc.c **** extern "C" {
  51:.././hal/sam3u1c/smc.c **** #endif
  52:.././hal/sam3u1c/smc.c **** /**INDENT-ON**/
  53:.././hal/sam3u1c/smc.c **** /// @endcond
  54:.././hal/sam3u1c/smc.c **** 
  55:.././hal/sam3u1c/smc.c **** /**
  56:.././hal/sam3u1c/smc.c ****  * \defgroup sam_drivers_smc_group Static Memory Controller (SMC)
  57:.././hal/sam3u1c/smc.c ****  *
  58:.././hal/sam3u1c/smc.c ****  * Driver for the Static Memory Controller. It provides functions for configuring
  59:.././hal/sam3u1c/smc.c ****  * and using the on-chip SMC.
  60:.././hal/sam3u1c/smc.c ****  *
  61:.././hal/sam3u1c/smc.c ****  * @{
  62:.././hal/sam3u1c/smc.c ****  */
  63:.././hal/sam3u1c/smc.c **** 
  64:.././hal/sam3u1c/smc.c **** #if ((SAM3S) || (SAM3U) || (SAM3XA) || (SAM4S) || (SAM4E) || (SAM4C) || (SAM4CM))
  65:.././hal/sam3u1c/smc.c **** #define SMC_WPKEY_VALUE (0x534D43)
  66:.././hal/sam3u1c/smc.c **** /**
  67:.././hal/sam3u1c/smc.c ****  * \brief Configure the SMC Setup timing for the specified Chip Select.
  68:.././hal/sam3u1c/smc.c ****  *
  69:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
  70:.././hal/sam3u1c/smc.c ****  * \param ul_cs Chip Select number to be set.
  71:.././hal/sam3u1c/smc.c ****  * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
  72:.././hal/sam3u1c/smc.c ****  */
  73:.././hal/sam3u1c/smc.c **** void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
  74:.././hal/sam3u1c/smc.c **** 		uint32_t ul_setup_timing)
  75:.././hal/sam3u1c/smc.c **** {
  37              	 .loc 1 75 0
  38              	 .cfi_startproc
  39              	 
  40              	 
  41              	 
  42 0000 80B4     	 push {r7}
  43              	.LCFI0:
  44              	 .cfi_def_cfa_offset 4
  45              	 .cfi_offset 7,-4
  46 0002 85B0     	 sub sp,sp,#20
  47              	.LCFI1:
  48              	 .cfi_def_cfa_offset 24
  49 0004 00AF     	 add r7,sp,#0
  50              	.LCFI2:
  51              	 .cfi_def_cfa_register 7
  52 0006 F860     	 str r0,[r7,#12]
  53 0008 B960     	 str r1,[r7,#8]
  54 000a 7A60     	 str r2,[r7,#4]
  76:.././hal/sam3u1c/smc.c **** 	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  55              	 .loc 1 76 0
  56 000c F968     	 ldr r1,[r7,#12]
  57 000e BA68     	 ldr r2,[r7,#8]
  58 0010 1346     	 mov r3,r2
  59 0012 9B00     	 lsls r3,r3,#2
  60 0014 1344     	 add r3,r3,r2
  61 0016 9B00     	 lsls r3,r3,#2
  62 0018 0B44     	 add r3,r3,r1
  63 001a 7033     	 adds r3,r3,#112
  64 001c 7A68     	 ldr r2,[r7,#4]
  65 001e 1A60     	 str r2,[r3]
  77:.././hal/sam3u1c/smc.c **** }
  66              	 .loc 1 77 0
  67 0020 00BF     	 nop
  68 0022 1437     	 adds r7,r7,#20
  69              	.LCFI3:
  70              	 .cfi_def_cfa_offset 4
  71 0024 BD46     	 mov sp,r7
  72              	.LCFI4:
  73              	 .cfi_def_cfa_register 13
  74              	 
  75 0026 80BC     	 pop {r7}
  76              	.LCFI5:
  77              	 .cfi_restore 7
  78              	 .cfi_def_cfa_offset 0
  79 0028 7047     	 bx lr
  80              	 .cfi_endproc
  81              	.LFE69:
  83              	 .section .text.smc_set_pulse_timing,"ax",%progbits
  84              	 .align 1
  85              	 .global smc_set_pulse_timing
  86              	 .syntax unified
  87              	 .thumb
  88              	 .thumb_func
  89              	 .fpu softvfp
  91              	smc_set_pulse_timing:
  92              	.LFB70:
  78:.././hal/sam3u1c/smc.c **** 
  79:.././hal/sam3u1c/smc.c **** /**
  80:.././hal/sam3u1c/smc.c ****  * \brief Configure the SMC pulse timing for the specified Chip Select.
  81:.././hal/sam3u1c/smc.c ****  *
  82:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
  83:.././hal/sam3u1c/smc.c ****  * \param ul_cs Chip Select number to be set.
  84:.././hal/sam3u1c/smc.c ****  * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
  85:.././hal/sam3u1c/smc.c ****  */
  86:.././hal/sam3u1c/smc.c **** void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
  87:.././hal/sam3u1c/smc.c **** 		uint32_t ul_pulse_timing)
  88:.././hal/sam3u1c/smc.c **** {
  93              	 .loc 1 88 0
  94              	 .cfi_startproc
  95              	 
  96              	 
  97              	 
  98 0000 80B4     	 push {r7}
  99              	.LCFI6:
 100              	 .cfi_def_cfa_offset 4
 101              	 .cfi_offset 7,-4
 102 0002 85B0     	 sub sp,sp,#20
 103              	.LCFI7:
 104              	 .cfi_def_cfa_offset 24
 105 0004 00AF     	 add r7,sp,#0
 106              	.LCFI8:
 107              	 .cfi_def_cfa_register 7
 108 0006 F860     	 str r0,[r7,#12]
 109 0008 B960     	 str r1,[r7,#8]
 110 000a 7A60     	 str r2,[r7,#4]
  89:.././hal/sam3u1c/smc.c **** 	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
 111              	 .loc 1 89 0
 112 000c F968     	 ldr r1,[r7,#12]
 113 000e BA68     	 ldr r2,[r7,#8]
 114 0010 1346     	 mov r3,r2
 115 0012 9B00     	 lsls r3,r3,#2
 116 0014 1344     	 add r3,r3,r2
 117 0016 9B00     	 lsls r3,r3,#2
 118 0018 0B44     	 add r3,r3,r1
 119 001a 7433     	 adds r3,r3,#116
 120 001c 7A68     	 ldr r2,[r7,#4]
 121 001e 1A60     	 str r2,[r3]
  90:.././hal/sam3u1c/smc.c **** }
 122              	 .loc 1 90 0
 123 0020 00BF     	 nop
 124 0022 1437     	 adds r7,r7,#20
 125              	.LCFI9:
 126              	 .cfi_def_cfa_offset 4
 127 0024 BD46     	 mov sp,r7
 128              	.LCFI10:
 129              	 .cfi_def_cfa_register 13
 130              	 
 131 0026 80BC     	 pop {r7}
 132              	.LCFI11:
 133              	 .cfi_restore 7
 134              	 .cfi_def_cfa_offset 0
 135 0028 7047     	 bx lr
 136              	 .cfi_endproc
 137              	.LFE70:
 139              	 .section .text.smc_set_cycle_timing,"ax",%progbits
 140              	 .align 1
 141              	 .global smc_set_cycle_timing
 142              	 .syntax unified
 143              	 .thumb
 144              	 .thumb_func
 145              	 .fpu softvfp
 147              	smc_set_cycle_timing:
 148              	.LFB71:
  91:.././hal/sam3u1c/smc.c **** 
  92:.././hal/sam3u1c/smc.c **** /**
  93:.././hal/sam3u1c/smc.c ****  * \brief Configure the SMC cycle timing for the specified Chip Select.
  94:.././hal/sam3u1c/smc.c ****  *
  95:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
  96:.././hal/sam3u1c/smc.c ****  * \param ul_cs Chip Select number to be set.
  97:.././hal/sam3u1c/smc.c ****  * \param ul_cycle_timing Cycle timing for NWE and NRD.
  98:.././hal/sam3u1c/smc.c ****  */
  99:.././hal/sam3u1c/smc.c **** void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
 100:.././hal/sam3u1c/smc.c **** 		uint32_t ul_cycle_timing)
 101:.././hal/sam3u1c/smc.c **** {
 149              	 .loc 1 101 0
 150              	 .cfi_startproc
 151              	 
 152              	 
 153              	 
 154 0000 80B4     	 push {r7}
 155              	.LCFI12:
 156              	 .cfi_def_cfa_offset 4
 157              	 .cfi_offset 7,-4
 158 0002 85B0     	 sub sp,sp,#20
 159              	.LCFI13:
 160              	 .cfi_def_cfa_offset 24
 161 0004 00AF     	 add r7,sp,#0
 162              	.LCFI14:
 163              	 .cfi_def_cfa_register 7
 164 0006 F860     	 str r0,[r7,#12]
 165 0008 B960     	 str r1,[r7,#8]
 166 000a 7A60     	 str r2,[r7,#4]
 102:.././hal/sam3u1c/smc.c **** 	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
 167              	 .loc 1 102 0
 168 000c F968     	 ldr r1,[r7,#12]
 169 000e BA68     	 ldr r2,[r7,#8]
 170 0010 1346     	 mov r3,r2
 171 0012 9B00     	 lsls r3,r3,#2
 172 0014 1344     	 add r3,r3,r2
 173 0016 9B00     	 lsls r3,r3,#2
 174 0018 0B44     	 add r3,r3,r1
 175 001a 7833     	 adds r3,r3,#120
 176 001c 7A68     	 ldr r2,[r7,#4]
 177 001e 1A60     	 str r2,[r3]
 103:.././hal/sam3u1c/smc.c **** }
 178              	 .loc 1 103 0
 179 0020 00BF     	 nop
 180 0022 1437     	 adds r7,r7,#20
 181              	.LCFI15:
 182              	 .cfi_def_cfa_offset 4
 183 0024 BD46     	 mov sp,r7
 184              	.LCFI16:
 185              	 .cfi_def_cfa_register 13
 186              	 
 187 0026 80BC     	 pop {r7}
 188              	.LCFI17:
 189              	 .cfi_restore 7
 190              	 .cfi_def_cfa_offset 0
 191 0028 7047     	 bx lr
 192              	 .cfi_endproc
 193              	.LFE71:
 195              	 .section .text.smc_set_mode,"ax",%progbits
 196              	 .align 1
 197              	 .global smc_set_mode
 198              	 .syntax unified
 199              	 .thumb
 200              	 .thumb_func
 201              	 .fpu softvfp
 203              	smc_set_mode:
 204              	.LFB72:
 104:.././hal/sam3u1c/smc.c **** 
 105:.././hal/sam3u1c/smc.c **** /**
 106:.././hal/sam3u1c/smc.c ****  * \brief Configure the SMC mode for the specified Chip Select.
 107:.././hal/sam3u1c/smc.c ****  *
 108:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 109:.././hal/sam3u1c/smc.c ****  * \param ul_cs Chip select number to be set.
 110:.././hal/sam3u1c/smc.c ****  * \param ul_mode SMC mode.
 111:.././hal/sam3u1c/smc.c ****  */
 112:.././hal/sam3u1c/smc.c **** void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
 113:.././hal/sam3u1c/smc.c **** {
 205              	 .loc 1 113 0
 206              	 .cfi_startproc
 207              	 
 208              	 
 209              	 
 210 0000 80B4     	 push {r7}
 211              	.LCFI18:
 212              	 .cfi_def_cfa_offset 4
 213              	 .cfi_offset 7,-4
 214 0002 85B0     	 sub sp,sp,#20
 215              	.LCFI19:
 216              	 .cfi_def_cfa_offset 24
 217 0004 00AF     	 add r7,sp,#0
 218              	.LCFI20:
 219              	 .cfi_def_cfa_register 7
 220 0006 F860     	 str r0,[r7,#12]
 221 0008 B960     	 str r1,[r7,#8]
 222 000a 7A60     	 str r2,[r7,#4]
 114:.././hal/sam3u1c/smc.c **** 	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
 223              	 .loc 1 114 0
 224 000c F968     	 ldr r1,[r7,#12]
 225 000e BA68     	 ldr r2,[r7,#8]
 226 0010 1346     	 mov r3,r2
 227 0012 9B00     	 lsls r3,r3,#2
 228 0014 1344     	 add r3,r3,r2
 229 0016 9B00     	 lsls r3,r3,#2
 230 0018 0B44     	 add r3,r3,r1
 231 001a 8033     	 adds r3,r3,#128
 232 001c 7A68     	 ldr r2,[r7,#4]
 233 001e 1A60     	 str r2,[r3]
 115:.././hal/sam3u1c/smc.c **** }
 234              	 .loc 1 115 0
 235 0020 00BF     	 nop
 236 0022 1437     	 adds r7,r7,#20
 237              	.LCFI21:
 238              	 .cfi_def_cfa_offset 4
 239 0024 BD46     	 mov sp,r7
 240              	.LCFI22:
 241              	 .cfi_def_cfa_register 13
 242              	 
 243 0026 80BC     	 pop {r7}
 244              	.LCFI23:
 245              	 .cfi_restore 7
 246              	 .cfi_def_cfa_offset 0
 247 0028 7047     	 bx lr
 248              	 .cfi_endproc
 249              	.LFE72:
 251              	 .section .text.smc_get_mode,"ax",%progbits
 252              	 .align 1
 253              	 .global smc_get_mode
 254              	 .syntax unified
 255              	 .thumb
 256              	 .thumb_func
 257              	 .fpu softvfp
 259              	smc_get_mode:
 260              	.LFB73:
 116:.././hal/sam3u1c/smc.c **** 
 117:.././hal/sam3u1c/smc.c **** /**
 118:.././hal/sam3u1c/smc.c ****  * \brief Get the SMC mode of the specified Chip Select.
 119:.././hal/sam3u1c/smc.c ****  *
 120:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 121:.././hal/sam3u1c/smc.c ****  * \param ul_cs Chip select number to be set.
 122:.././hal/sam3u1c/smc.c ****  *
 123:.././hal/sam3u1c/smc.c ****  * \return SMC mode.
 124:.././hal/sam3u1c/smc.c ****  */
 125:.././hal/sam3u1c/smc.c **** uint32_t smc_get_mode(Smc *p_smc, uint32_t ul_cs)
 126:.././hal/sam3u1c/smc.c **** {
 261              	 .loc 1 126 0
 262              	 .cfi_startproc
 263              	 
 264              	 
 265              	 
 266 0000 80B4     	 push {r7}
 267              	.LCFI24:
 268              	 .cfi_def_cfa_offset 4
 269              	 .cfi_offset 7,-4
 270 0002 83B0     	 sub sp,sp,#12
 271              	.LCFI25:
 272              	 .cfi_def_cfa_offset 16
 273 0004 00AF     	 add r7,sp,#0
 274              	.LCFI26:
 275              	 .cfi_def_cfa_register 7
 276 0006 7860     	 str r0,[r7,#4]
 277 0008 3960     	 str r1,[r7]
 127:.././hal/sam3u1c/smc.c **** 	return p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE;
 278              	 .loc 1 127 0
 279 000a 7968     	 ldr r1,[r7,#4]
 280 000c 3A68     	 ldr r2,[r7]
 281 000e 1346     	 mov r3,r2
 282 0010 9B00     	 lsls r3,r3,#2
 283 0012 1344     	 add r3,r3,r2
 284 0014 9B00     	 lsls r3,r3,#2
 285 0016 0B44     	 add r3,r3,r1
 286 0018 8033     	 adds r3,r3,#128
 287 001a 1B68     	 ldr r3,[r3]
 128:.././hal/sam3u1c/smc.c **** }
 288              	 .loc 1 128 0
 289 001c 1846     	 mov r0,r3
 290 001e 0C37     	 adds r7,r7,#12
 291              	.LCFI27:
 292              	 .cfi_def_cfa_offset 4
 293 0020 BD46     	 mov sp,r7
 294              	.LCFI28:
 295              	 .cfi_def_cfa_register 13
 296              	 
 297 0022 80BC     	 pop {r7}
 298              	.LCFI29:
 299              	 .cfi_restore 7
 300              	 .cfi_def_cfa_offset 0
 301 0024 7047     	 bx lr
 302              	 .cfi_endproc
 303              	.LFE73:
 305              	 .section .text.smc_enable_writeprotect,"ax",%progbits
 306              	 .align 1
 307              	 .global smc_enable_writeprotect
 308              	 .syntax unified
 309              	 .thumb
 310              	 .thumb_func
 311              	 .fpu softvfp
 313              	smc_enable_writeprotect:
 314              	.LFB74:
 129:.././hal/sam3u1c/smc.c **** 
 130:.././hal/sam3u1c/smc.c **** /**
 131:.././hal/sam3u1c/smc.c ****  * \brief Set write protection of SMC registers.
 132:.././hal/sam3u1c/smc.c ****  *
 133:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 134:.././hal/sam3u1c/smc.c ****  * \param ul_enable 1 to enable, 0 to disable.
 135:.././hal/sam3u1c/smc.c ****  */
 136:.././hal/sam3u1c/smc.c **** void smc_enable_writeprotect(Smc *p_smc, uint32_t ul_enable)
 137:.././hal/sam3u1c/smc.c **** {
 315              	 .loc 1 137 0
 316              	 .cfi_startproc
 317              	 
 318              	 
 319              	 
 320 0000 80B4     	 push {r7}
 321              	.LCFI30:
 322              	 .cfi_def_cfa_offset 4
 323              	 .cfi_offset 7,-4
 324 0002 83B0     	 sub sp,sp,#12
 325              	.LCFI31:
 326              	 .cfi_def_cfa_offset 16
 327 0004 00AF     	 add r7,sp,#0
 328              	.LCFI32:
 329              	 .cfi_def_cfa_register 7
 330 0006 7860     	 str r0,[r7,#4]
 331 0008 3960     	 str r1,[r7]
 138:.././hal/sam3u1c/smc.c **** #if (SAM3S || SAM4S || SAM4E || SAM4C || SAM4CM)
 139:.././hal/sam3u1c/smc.c **** 	if (ul_enable) {
 140:.././hal/sam3u1c/smc.c **** 		p_smc->SMC_WPMR =
 141:.././hal/sam3u1c/smc.c **** 				SMC_WPMR_WPKEY(SMC_WPKEY_VALUE) | SMC_WPMR_WPEN;
 142:.././hal/sam3u1c/smc.c **** 	} else {
 143:.././hal/sam3u1c/smc.c ****  		p_smc->SMC_WPMR = SMC_WPMR_WPKEY(SMC_WPKEY_VALUE);
 144:.././hal/sam3u1c/smc.c **** 	}
 145:.././hal/sam3u1c/smc.c **** #else
 146:.././hal/sam3u1c/smc.c **** 	if (ul_enable) {
 332              	 .loc 1 146 0
 333 000a 3B68     	 ldr r3,[r7]
 334 000c 002B     	 cmp r3,#0
 335 000e 04D0     	 beq .L8
 147:.././hal/sam3u1c/smc.c **** 		p_smc->SMC_WPCR =
 336              	 .loc 1 147 0
 337 0010 7B68     	 ldr r3,[r7,#4]
 338 0012 064A     	 ldr r2,.L11
 339 0014 C3F8E421 	 str r2,[r3,#484]
 148:.././hal/sam3u1c/smc.c **** 				SMC_WPCR_WP_KEY(SMC_WPKEY_VALUE) |
 149:.././hal/sam3u1c/smc.c **** 				SMC_WPCR_WP_EN;
 150:.././hal/sam3u1c/smc.c **** 	} else {
 151:.././hal/sam3u1c/smc.c **** 		p_smc->SMC_WPCR = SMC_WPCR_WP_KEY(SMC_WPKEY_VALUE);
 152:.././hal/sam3u1c/smc.c **** 	}
 153:.././hal/sam3u1c/smc.c **** #endif
 154:.././hal/sam3u1c/smc.c **** }
 340              	 .loc 1 154 0
 341 0018 03E0     	 b .L10
 342              	.L8:
 151:.././hal/sam3u1c/smc.c **** 	}
 343              	 .loc 1 151 0
 344 001a 7B68     	 ldr r3,[r7,#4]
 345 001c 044A     	 ldr r2,.L11+4
 346 001e C3F8E421 	 str r2,[r3,#484]
 347              	.L10:
 348              	 .loc 1 154 0
 349 0022 00BF     	 nop
 350 0024 0C37     	 adds r7,r7,#12
 351              	.LCFI33:
 352              	 .cfi_def_cfa_offset 4
 353 0026 BD46     	 mov sp,r7
 354              	.LCFI34:
 355              	 .cfi_def_cfa_register 13
 356              	 
 357 0028 80BC     	 pop {r7}
 358              	.LCFI35:
 359              	 .cfi_restore 7
 360              	 .cfi_def_cfa_offset 0
 361 002a 7047     	 bx lr
 362              	.L12:
 363              	 .align 2
 364              	.L11:
 365 002c 01434D53 	 .word 1397572353
 366 0030 00434D53 	 .word 1397572352
 367              	 .cfi_endproc
 368              	.LFE74:
 370              	 .section .text.smc_get_writeprotect_status,"ax",%progbits
 371              	 .align 1
 372              	 .global smc_get_writeprotect_status
 373              	 .syntax unified
 374              	 .thumb
 375              	 .thumb_func
 376              	 .fpu softvfp
 378              	smc_get_writeprotect_status:
 379              	.LFB75:
 155:.././hal/sam3u1c/smc.c **** 
 156:.././hal/sam3u1c/smc.c **** /**
 157:.././hal/sam3u1c/smc.c ****  * \brief Get the status of SMC write protection register.
 158:.././hal/sam3u1c/smc.c ****  *
 159:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 160:.././hal/sam3u1c/smc.c ****  *
 161:.././hal/sam3u1c/smc.c ****  * \return Write protect status.
 162:.././hal/sam3u1c/smc.c ****  */
 163:.././hal/sam3u1c/smc.c **** uint32_t smc_get_writeprotect_status(Smc *p_smc)
 164:.././hal/sam3u1c/smc.c **** {
 380              	 .loc 1 164 0
 381              	 .cfi_startproc
 382              	 
 383              	 
 384              	 
 385 0000 80B4     	 push {r7}
 386              	.LCFI36:
 387              	 .cfi_def_cfa_offset 4
 388              	 .cfi_offset 7,-4
 389 0002 83B0     	 sub sp,sp,#12
 390              	.LCFI37:
 391              	 .cfi_def_cfa_offset 16
 392 0004 00AF     	 add r7,sp,#0
 393              	.LCFI38:
 394              	 .cfi_def_cfa_register 7
 395 0006 7860     	 str r0,[r7,#4]
 165:.././hal/sam3u1c/smc.c **** 	return p_smc->SMC_WPSR;
 396              	 .loc 1 165 0
 397 0008 7B68     	 ldr r3,[r7,#4]
 398 000a D3F8E831 	 ldr r3,[r3,#488]
 166:.././hal/sam3u1c/smc.c **** }
 399              	 .loc 1 166 0
 400 000e 1846     	 mov r0,r3
 401 0010 0C37     	 adds r7,r7,#12
 402              	.LCFI39:
 403              	 .cfi_def_cfa_offset 4
 404 0012 BD46     	 mov sp,r7
 405              	.LCFI40:
 406              	 .cfi_def_cfa_register 13
 407              	 
 408 0014 80BC     	 pop {r7}
 409              	.LCFI41:
 410              	 .cfi_restore 7
 411              	 .cfi_def_cfa_offset 0
 412 0016 7047     	 bx lr
 413              	 .cfi_endproc
 414              	.LFE75:
 416              	 .section .text.smc_set_nand_timing,"ax",%progbits
 417              	 .align 1
 418              	 .global smc_set_nand_timing
 419              	 .syntax unified
 420              	 .thumb
 421              	 .thumb_func
 422              	 .fpu softvfp
 424              	smc_set_nand_timing:
 425              	.LFB76:
 167:.././hal/sam3u1c/smc.c **** #endif
 168:.././hal/sam3u1c/smc.c **** 
 169:.././hal/sam3u1c/smc.c **** #if ((SAM3U) || (SAM3XA))
 170:.././hal/sam3u1c/smc.c **** /**
 171:.././hal/sam3u1c/smc.c ****  * \brief Configure the SMC nand timing for the specified Chip Select.
 172:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 173:.././hal/sam3u1c/smc.c ****  * \param ul_cs Chip Select number to be set.
 174:.././hal/sam3u1c/smc.c ****  * \param ul_nand_timing nand timing for related signal.
 175:.././hal/sam3u1c/smc.c ****  */
 176:.././hal/sam3u1c/smc.c **** void smc_set_nand_timing(Smc *p_smc, uint32_t ul_cs,
 177:.././hal/sam3u1c/smc.c **** 		uint32_t ul_nand_timing)
 178:.././hal/sam3u1c/smc.c **** {
 426              	 .loc 1 178 0
 427              	 .cfi_startproc
 428              	 
 429              	 
 430              	 
 431 0000 80B4     	 push {r7}
 432              	.LCFI42:
 433              	 .cfi_def_cfa_offset 4
 434              	 .cfi_offset 7,-4
 435 0002 85B0     	 sub sp,sp,#20
 436              	.LCFI43:
 437              	 .cfi_def_cfa_offset 24
 438 0004 00AF     	 add r7,sp,#0
 439              	.LCFI44:
 440              	 .cfi_def_cfa_register 7
 441 0006 F860     	 str r0,[r7,#12]
 442 0008 B960     	 str r1,[r7,#8]
 443 000a 7A60     	 str r2,[r7,#4]
 179:.././hal/sam3u1c/smc.c **** 	p_smc->SMC_CS_NUMBER[ul_cs].SMC_TIMINGS= ul_nand_timing;
 444              	 .loc 1 179 0
 445 000c F968     	 ldr r1,[r7,#12]
 446 000e BA68     	 ldr r2,[r7,#8]
 447 0010 1346     	 mov r3,r2
 448 0012 9B00     	 lsls r3,r3,#2
 449 0014 1344     	 add r3,r3,r2
 450 0016 9B00     	 lsls r3,r3,#2
 451 0018 0B44     	 add r3,r3,r1
 452 001a 7C33     	 adds r3,r3,#124
 453 001c 7A68     	 ldr r2,[r7,#4]
 454 001e 1A60     	 str r2,[r3]
 180:.././hal/sam3u1c/smc.c **** }
 455              	 .loc 1 180 0
 456 0020 00BF     	 nop
 457 0022 1437     	 adds r7,r7,#20
 458              	.LCFI45:
 459              	 .cfi_def_cfa_offset 4
 460 0024 BD46     	 mov sp,r7
 461              	.LCFI46:
 462              	 .cfi_def_cfa_register 13
 463              	 
 464 0026 80BC     	 pop {r7}
 465              	.LCFI47:
 466              	 .cfi_restore 7
 467              	 .cfi_def_cfa_offset 0
 468 0028 7047     	 bx lr
 469              	 .cfi_endproc
 470              	.LFE76:
 472              	 .section .text.smc_nfc_init,"ax",%progbits
 473              	 .align 1
 474              	 .global smc_nfc_init
 475              	 .syntax unified
 476              	 .thumb
 477              	 .thumb_func
 478              	 .fpu softvfp
 480              	smc_nfc_init:
 481              	.LFB77:
 181:.././hal/sam3u1c/smc.c **** 
 182:.././hal/sam3u1c/smc.c **** /**
 183:.././hal/sam3u1c/smc.c ****  * \brief Initialize NFC configuration.
 184:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 185:.././hal/sam3u1c/smc.c ****  * \param ul_config SMC NFC Configuration.
 186:.././hal/sam3u1c/smc.c ****  */
 187:.././hal/sam3u1c/smc.c **** void smc_nfc_init(Smc *p_smc, uint32_t ul_config)
 188:.././hal/sam3u1c/smc.c **** {
 482              	 .loc 1 188 0
 483              	 .cfi_startproc
 484              	 
 485              	 
 486              	 
 487 0000 80B4     	 push {r7}
 488              	.LCFI48:
 489              	 .cfi_def_cfa_offset 4
 490              	 .cfi_offset 7,-4
 491 0002 83B0     	 sub sp,sp,#12
 492              	.LCFI49:
 493              	 .cfi_def_cfa_offset 16
 494 0004 00AF     	 add r7,sp,#0
 495              	.LCFI50:
 496              	 .cfi_def_cfa_register 7
 497 0006 7860     	 str r0,[r7,#4]
 498 0008 3960     	 str r1,[r7]
 189:.././hal/sam3u1c/smc.c **** 	p_smc->SMC_CFG = ul_config;
 499              	 .loc 1 189 0
 500 000a 7B68     	 ldr r3,[r7,#4]
 501 000c 3A68     	 ldr r2,[r7]
 502 000e 1A60     	 str r2,[r3]
 190:.././hal/sam3u1c/smc.c **** }
 503              	 .loc 1 190 0
 504 0010 00BF     	 nop
 505 0012 0C37     	 adds r7,r7,#12
 506              	.LCFI51:
 507              	 .cfi_def_cfa_offset 4
 508 0014 BD46     	 mov sp,r7
 509              	.LCFI52:
 510              	 .cfi_def_cfa_register 13
 511              	 
 512 0016 80BC     	 pop {r7}
 513              	.LCFI53:
 514              	 .cfi_restore 7
 515              	 .cfi_def_cfa_offset 0
 516 0018 7047     	 bx lr
 517              	 .cfi_endproc
 518              	.LFE77:
 520              	 .section .text.smc_nfc_set_page_size,"ax",%progbits
 521              	 .align 1
 522              	 .global smc_nfc_set_page_size
 523              	 .syntax unified
 524              	 .thumb
 525              	 .thumb_func
 526              	 .fpu softvfp
 528              	smc_nfc_set_page_size:
 529              	.LFB78:
 191:.././hal/sam3u1c/smc.c **** 
 192:.././hal/sam3u1c/smc.c **** /**
 193:.././hal/sam3u1c/smc.c ****  * \brief Set NFC page size.
 194:.././hal/sam3u1c/smc.c ****  *
 195:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 196:.././hal/sam3u1c/smc.c ****  * \param ul_page_size Use pattern defined in the device header file.
 197:.././hal/sam3u1c/smc.c ****  */
 198:.././hal/sam3u1c/smc.c **** void smc_nfc_set_page_size(Smc *p_smc, uint32_t ul_page_size)
 199:.././hal/sam3u1c/smc.c **** {
 530              	 .loc 1 199 0
 531              	 .cfi_startproc
 532              	 
 533              	 
 534              	 
 535 0000 80B4     	 push {r7}
 536              	.LCFI54:
 537              	 .cfi_def_cfa_offset 4
 538              	 .cfi_offset 7,-4
 539 0002 83B0     	 sub sp,sp,#12
 540              	.LCFI55:
 541              	 .cfi_def_cfa_offset 16
 542 0004 00AF     	 add r7,sp,#0
 543              	.LCFI56:
 544              	 .cfi_def_cfa_register 7
 545 0006 7860     	 str r0,[r7,#4]
 546 0008 3960     	 str r1,[r7]
 200:.././hal/sam3u1c/smc.c **** 	p_smc->SMC_CFG &= (~SMC_CFG_PAGESIZE_Msk);
 547              	 .loc 1 200 0
 548 000a 7B68     	 ldr r3,[r7,#4]
 549 000c 1B68     	 ldr r3,[r3]
 550 000e 23F00302 	 bic r2,r3,#3
 551 0012 7B68     	 ldr r3,[r7,#4]
 552 0014 1A60     	 str r2,[r3]
 201:.././hal/sam3u1c/smc.c **** 	p_smc->SMC_CFG |= ul_page_size;
 553              	 .loc 1 201 0
 554 0016 7B68     	 ldr r3,[r7,#4]
 555 0018 1A68     	 ldr r2,[r3]
 556 001a 3B68     	 ldr r3,[r7]
 557 001c 1A43     	 orrs r2,r2,r3
 558 001e 7B68     	 ldr r3,[r7,#4]
 559 0020 1A60     	 str r2,[r3]
 202:.././hal/sam3u1c/smc.c **** }
 560              	 .loc 1 202 0
 561 0022 00BF     	 nop
 562 0024 0C37     	 adds r7,r7,#12
 563              	.LCFI57:
 564              	 .cfi_def_cfa_offset 4
 565 0026 BD46     	 mov sp,r7
 566              	.LCFI58:
 567              	 .cfi_def_cfa_register 13
 568              	 
 569 0028 80BC     	 pop {r7}
 570              	.LCFI59:
 571              	 .cfi_restore 7
 572              	 .cfi_def_cfa_offset 0
 573 002a 7047     	 bx lr
 574              	 .cfi_endproc
 575              	.LFE78:
 577              	 .section .text.smc_nfc_enable_spare_read,"ax",%progbits
 578              	 .align 1
 579              	 .global smc_nfc_enable_spare_read
 580              	 .syntax unified
 581              	 .thumb
 582              	 .thumb_func
 583              	 .fpu softvfp
 585              	smc_nfc_enable_spare_read:
 586              	.LFB79:
 203:.././hal/sam3u1c/smc.c **** 
 204:.././hal/sam3u1c/smc.c **** /**
 205:.././hal/sam3u1c/smc.c ****  * \brief Enable NFC controller to read both main and spare area in read mode.
 206:.././hal/sam3u1c/smc.c ****  *
 207:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 208:.././hal/sam3u1c/smc.c ****  */
 209:.././hal/sam3u1c/smc.c **** void smc_nfc_enable_spare_read(Smc *p_smc)
 210:.././hal/sam3u1c/smc.c **** {
 587              	 .loc 1 210 0
 588              	 .cfi_startproc
 589              	 
 590              	 
 591              	 
 592 0000 80B4     	 push {r7}
 593              	.LCFI60:
 594              	 .cfi_def_cfa_offset 4
 595              	 .cfi_offset 7,-4
 596 0002 83B0     	 sub sp,sp,#12
 597              	.LCFI61:
 598              	 .cfi_def_cfa_offset 16
 599 0004 00AF     	 add r7,sp,#0
 600              	.LCFI62:
 601              	 .cfi_def_cfa_register 7
 602 0006 7860     	 str r0,[r7,#4]
 211:.././hal/sam3u1c/smc.c **** 	p_smc->SMC_CFG |= SMC_CFG_RSPARE;
 603              	 .loc 1 211 0
 604 0008 7B68     	 ldr r3,[r7,#4]
 605 000a 1B68     	 ldr r3,[r3]
 606 000c 43F40072 	 orr r2,r3,#512
 607 0010 7B68     	 ldr r3,[r7,#4]
 608 0012 1A60     	 str r2,[r3]
 212:.././hal/sam3u1c/smc.c **** }
 609              	 .loc 1 212 0
 610 0014 00BF     	 nop
 611 0016 0C37     	 adds r7,r7,#12
 612              	.LCFI63:
 613              	 .cfi_def_cfa_offset 4
 614 0018 BD46     	 mov sp,r7
 615              	.LCFI64:
 616              	 .cfi_def_cfa_register 13
 617              	 
 618 001a 80BC     	 pop {r7}
 619              	.LCFI65:
 620              	 .cfi_restore 7
 621              	 .cfi_def_cfa_offset 0
 622 001c 7047     	 bx lr
 623              	 .cfi_endproc
 624              	.LFE79:
 626              	 .section .text.smc_nfc_disable_spare_read,"ax",%progbits
 627              	 .align 1
 628              	 .global smc_nfc_disable_spare_read
 629              	 .syntax unified
 630              	 .thumb
 631              	 .thumb_func
 632              	 .fpu softvfp
 634              	smc_nfc_disable_spare_read:
 635              	.LFB80:
 213:.././hal/sam3u1c/smc.c **** 
 214:.././hal/sam3u1c/smc.c **** /**
 215:.././hal/sam3u1c/smc.c ****  * \brief Prevent NFC controller from reading the spare area in read mode.
 216:.././hal/sam3u1c/smc.c ****  *
 217:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 218:.././hal/sam3u1c/smc.c ****  */
 219:.././hal/sam3u1c/smc.c **** void smc_nfc_disable_spare_read(Smc *p_smc)
 220:.././hal/sam3u1c/smc.c **** {
 636              	 .loc 1 220 0
 637              	 .cfi_startproc
 638              	 
 639              	 
 640              	 
 641 0000 80B4     	 push {r7}
 642              	.LCFI66:
 643              	 .cfi_def_cfa_offset 4
 644              	 .cfi_offset 7,-4
 645 0002 83B0     	 sub sp,sp,#12
 646              	.LCFI67:
 647              	 .cfi_def_cfa_offset 16
 648 0004 00AF     	 add r7,sp,#0
 649              	.LCFI68:
 650              	 .cfi_def_cfa_register 7
 651 0006 7860     	 str r0,[r7,#4]
 221:.././hal/sam3u1c/smc.c **** 	p_smc->SMC_CFG &= (~SMC_CFG_RSPARE);
 652              	 .loc 1 221 0
 653 0008 7B68     	 ldr r3,[r7,#4]
 654 000a 1B68     	 ldr r3,[r3]
 655 000c 23F40072 	 bic r2,r3,#512
 656 0010 7B68     	 ldr r3,[r7,#4]
 657 0012 1A60     	 str r2,[r3]
 222:.././hal/sam3u1c/smc.c **** }
 658              	 .loc 1 222 0
 659 0014 00BF     	 nop
 660 0016 0C37     	 adds r7,r7,#12
 661              	.LCFI69:
 662              	 .cfi_def_cfa_offset 4
 663 0018 BD46     	 mov sp,r7
 664              	.LCFI70:
 665              	 .cfi_def_cfa_register 13
 666              	 
 667 001a 80BC     	 pop {r7}
 668              	.LCFI71:
 669              	 .cfi_restore 7
 670              	 .cfi_def_cfa_offset 0
 671 001c 7047     	 bx lr
 672              	 .cfi_endproc
 673              	.LFE80:
 675              	 .section .text.smc_nfc_enable_spare_write,"ax",%progbits
 676              	 .align 1
 677              	 .global smc_nfc_enable_spare_write
 678              	 .syntax unified
 679              	 .thumb
 680              	 .thumb_func
 681              	 .fpu softvfp
 683              	smc_nfc_enable_spare_write:
 684              	.LFB81:
 223:.././hal/sam3u1c/smc.c **** 
 224:.././hal/sam3u1c/smc.c **** /**
 225:.././hal/sam3u1c/smc.c ****  * \brief Enable NFC controller to write both main and spare area in write mode.
 226:.././hal/sam3u1c/smc.c ****  *
 227:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 228:.././hal/sam3u1c/smc.c ****  */
 229:.././hal/sam3u1c/smc.c **** void smc_nfc_enable_spare_write(Smc *p_smc)
 230:.././hal/sam3u1c/smc.c **** {
 685              	 .loc 1 230 0
 686              	 .cfi_startproc
 687              	 
 688              	 
 689              	 
 690 0000 80B4     	 push {r7}
 691              	.LCFI72:
 692              	 .cfi_def_cfa_offset 4
 693              	 .cfi_offset 7,-4
 694 0002 83B0     	 sub sp,sp,#12
 695              	.LCFI73:
 696              	 .cfi_def_cfa_offset 16
 697 0004 00AF     	 add r7,sp,#0
 698              	.LCFI74:
 699              	 .cfi_def_cfa_register 7
 700 0006 7860     	 str r0,[r7,#4]
 231:.././hal/sam3u1c/smc.c **** 	p_smc->SMC_CFG |= SMC_CFG_WSPARE;
 701              	 .loc 1 231 0
 702 0008 7B68     	 ldr r3,[r7,#4]
 703 000a 1B68     	 ldr r3,[r3]
 704 000c 43F48072 	 orr r2,r3,#256
 705 0010 7B68     	 ldr r3,[r7,#4]
 706 0012 1A60     	 str r2,[r3]
 232:.././hal/sam3u1c/smc.c **** }
 707              	 .loc 1 232 0
 708 0014 00BF     	 nop
 709 0016 0C37     	 adds r7,r7,#12
 710              	.LCFI75:
 711              	 .cfi_def_cfa_offset 4
 712 0018 BD46     	 mov sp,r7
 713              	.LCFI76:
 714              	 .cfi_def_cfa_register 13
 715              	 
 716 001a 80BC     	 pop {r7}
 717              	.LCFI77:
 718              	 .cfi_restore 7
 719              	 .cfi_def_cfa_offset 0
 720 001c 7047     	 bx lr
 721              	 .cfi_endproc
 722              	.LFE81:
 724              	 .section .text.smc_nfc_disable_spare_write,"ax",%progbits
 725              	 .align 1
 726              	 .global smc_nfc_disable_spare_write
 727              	 .syntax unified
 728              	 .thumb
 729              	 .thumb_func
 730              	 .fpu softvfp
 732              	smc_nfc_disable_spare_write:
 733              	.LFB82:
 233:.././hal/sam3u1c/smc.c **** 
 234:.././hal/sam3u1c/smc.c **** /**
 235:.././hal/sam3u1c/smc.c ****  * \brief Prevent NFC controller from writing the spare area in read mode.
 236:.././hal/sam3u1c/smc.c ****  *
 237:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 238:.././hal/sam3u1c/smc.c ****  */
 239:.././hal/sam3u1c/smc.c **** void smc_nfc_disable_spare_write(Smc *p_smc)
 240:.././hal/sam3u1c/smc.c **** {
 734              	 .loc 1 240 0
 735              	 .cfi_startproc
 736              	 
 737              	 
 738              	 
 739 0000 80B4     	 push {r7}
 740              	.LCFI78:
 741              	 .cfi_def_cfa_offset 4
 742              	 .cfi_offset 7,-4
 743 0002 83B0     	 sub sp,sp,#12
 744              	.LCFI79:
 745              	 .cfi_def_cfa_offset 16
 746 0004 00AF     	 add r7,sp,#0
 747              	.LCFI80:
 748              	 .cfi_def_cfa_register 7
 749 0006 7860     	 str r0,[r7,#4]
 241:.././hal/sam3u1c/smc.c **** 	p_smc->SMC_CFG &= (~SMC_CFG_WSPARE);
 750              	 .loc 1 241 0
 751 0008 7B68     	 ldr r3,[r7,#4]
 752 000a 1B68     	 ldr r3,[r3]
 753 000c 23F48072 	 bic r2,r3,#256
 754 0010 7B68     	 ldr r3,[r7,#4]
 755 0012 1A60     	 str r2,[r3]
 242:.././hal/sam3u1c/smc.c **** }
 756              	 .loc 1 242 0
 757 0014 00BF     	 nop
 758 0016 0C37     	 adds r7,r7,#12
 759              	.LCFI81:
 760              	 .cfi_def_cfa_offset 4
 761 0018 BD46     	 mov sp,r7
 762              	.LCFI82:
 763              	 .cfi_def_cfa_register 13
 764              	 
 765 001a 80BC     	 pop {r7}
 766              	.LCFI83:
 767              	 .cfi_restore 7
 768              	 .cfi_def_cfa_offset 0
 769 001c 7047     	 bx lr
 770              	 .cfi_endproc
 771              	.LFE82:
 773              	 .section .text.smc_nfc_enable,"ax",%progbits
 774              	 .align 1
 775              	 .global smc_nfc_enable
 776              	 .syntax unified
 777              	 .thumb
 778              	 .thumb_func
 779              	 .fpu softvfp
 781              	smc_nfc_enable:
 782              	.LFB83:
 243:.././hal/sam3u1c/smc.c **** 
 244:.././hal/sam3u1c/smc.c **** /**
 245:.././hal/sam3u1c/smc.c ****  * \brief Enable NFC controller.
 246:.././hal/sam3u1c/smc.c ****  *
 247:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 248:.././hal/sam3u1c/smc.c ****  */
 249:.././hal/sam3u1c/smc.c **** void smc_nfc_enable(Smc *p_smc)
 250:.././hal/sam3u1c/smc.c **** {
 783              	 .loc 1 250 0
 784              	 .cfi_startproc
 785              	 
 786              	 
 787              	 
 788 0000 80B4     	 push {r7}
 789              	.LCFI84:
 790              	 .cfi_def_cfa_offset 4
 791              	 .cfi_offset 7,-4
 792 0002 83B0     	 sub sp,sp,#12
 793              	.LCFI85:
 794              	 .cfi_def_cfa_offset 16
 795 0004 00AF     	 add r7,sp,#0
 796              	.LCFI86:
 797              	 .cfi_def_cfa_register 7
 798 0006 7860     	 str r0,[r7,#4]
 251:.././hal/sam3u1c/smc.c **** 	p_smc->SMC_CTRL = SMC_CTRL_NFCEN;
 799              	 .loc 1 251 0
 800 0008 7B68     	 ldr r3,[r7,#4]
 801 000a 0122     	 movs r2,#1
 802 000c 5A60     	 str r2,[r3,#4]
 252:.././hal/sam3u1c/smc.c **** }
 803              	 .loc 1 252 0
 804 000e 00BF     	 nop
 805 0010 0C37     	 adds r7,r7,#12
 806              	.LCFI87:
 807              	 .cfi_def_cfa_offset 4
 808 0012 BD46     	 mov sp,r7
 809              	.LCFI88:
 810              	 .cfi_def_cfa_register 13
 811              	 
 812 0014 80BC     	 pop {r7}
 813              	.LCFI89:
 814              	 .cfi_restore 7
 815              	 .cfi_def_cfa_offset 0
 816 0016 7047     	 bx lr
 817              	 .cfi_endproc
 818              	.LFE83:
 820              	 .section .text.smc_nfc_disable,"ax",%progbits
 821              	 .align 1
 822              	 .global smc_nfc_disable
 823              	 .syntax unified
 824              	 .thumb
 825              	 .thumb_func
 826              	 .fpu softvfp
 828              	smc_nfc_disable:
 829              	.LFB84:
 253:.././hal/sam3u1c/smc.c **** 
 254:.././hal/sam3u1c/smc.c **** /**
 255:.././hal/sam3u1c/smc.c ****  * \brief Disable NFC controller.
 256:.././hal/sam3u1c/smc.c ****  *
 257:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 258:.././hal/sam3u1c/smc.c ****  */
 259:.././hal/sam3u1c/smc.c **** void smc_nfc_disable(Smc *p_smc)
 260:.././hal/sam3u1c/smc.c **** {
 830              	 .loc 1 260 0
 831              	 .cfi_startproc
 832              	 
 833              	 
 834              	 
 835 0000 80B4     	 push {r7}
 836              	.LCFI90:
 837              	 .cfi_def_cfa_offset 4
 838              	 .cfi_offset 7,-4
 839 0002 83B0     	 sub sp,sp,#12
 840              	.LCFI91:
 841              	 .cfi_def_cfa_offset 16
 842 0004 00AF     	 add r7,sp,#0
 843              	.LCFI92:
 844              	 .cfi_def_cfa_register 7
 845 0006 7860     	 str r0,[r7,#4]
 261:.././hal/sam3u1c/smc.c **** 	p_smc->SMC_CTRL = SMC_CTRL_NFCDIS;
 846              	 .loc 1 261 0
 847 0008 7B68     	 ldr r3,[r7,#4]
 848 000a 0222     	 movs r2,#2
 849 000c 5A60     	 str r2,[r3,#4]
 262:.././hal/sam3u1c/smc.c **** }
 850              	 .loc 1 262 0
 851 000e 00BF     	 nop
 852 0010 0C37     	 adds r7,r7,#12
 853              	.LCFI93:
 854              	 .cfi_def_cfa_offset 4
 855 0012 BD46     	 mov sp,r7
 856              	.LCFI94:
 857              	 .cfi_def_cfa_register 13
 858              	 
 859 0014 80BC     	 pop {r7}
 860              	.LCFI95:
 861              	 .cfi_restore 7
 862              	 .cfi_def_cfa_offset 0
 863 0016 7047     	 bx lr
 864              	 .cfi_endproc
 865              	.LFE84:
 867              	 .section .text.smc_nfc_get_status,"ax",%progbits
 868              	 .align 1
 869              	 .global smc_nfc_get_status
 870              	 .syntax unified
 871              	 .thumb
 872              	 .thumb_func
 873              	 .fpu softvfp
 875              	smc_nfc_get_status:
 876              	.LFB85:
 263:.././hal/sam3u1c/smc.c **** 
 264:.././hal/sam3u1c/smc.c **** /**
 265:.././hal/sam3u1c/smc.c ****  * \brief Get the NFC Status.
 266:.././hal/sam3u1c/smc.c ****  *
 267:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 268:.././hal/sam3u1c/smc.c ****  *
 269:.././hal/sam3u1c/smc.c ****  * \return Returns the current status register of SMC NFC Status Register.
 270:.././hal/sam3u1c/smc.c ****  * This resets the internal value of the status register, so further
 271:.././hal/sam3u1c/smc.c ****  * read may yield different values.
 272:.././hal/sam3u1c/smc.c ****  */
 273:.././hal/sam3u1c/smc.c **** uint32_t smc_nfc_get_status(Smc *p_smc)
 274:.././hal/sam3u1c/smc.c **** {
 877              	 .loc 1 274 0
 878              	 .cfi_startproc
 879              	 
 880              	 
 881              	 
 882 0000 80B4     	 push {r7}
 883              	.LCFI96:
 884              	 .cfi_def_cfa_offset 4
 885              	 .cfi_offset 7,-4
 886 0002 83B0     	 sub sp,sp,#12
 887              	.LCFI97:
 888              	 .cfi_def_cfa_offset 16
 889 0004 00AF     	 add r7,sp,#0
 890              	.LCFI98:
 891              	 .cfi_def_cfa_register 7
 892 0006 7860     	 str r0,[r7,#4]
 275:.././hal/sam3u1c/smc.c **** 	return p_smc->SMC_SR;
 893              	 .loc 1 275 0
 894 0008 7B68     	 ldr r3,[r7,#4]
 895 000a 9B68     	 ldr r3,[r3,#8]
 276:.././hal/sam3u1c/smc.c **** }
 896              	 .loc 1 276 0
 897 000c 1846     	 mov r0,r3
 898 000e 0C37     	 adds r7,r7,#12
 899              	.LCFI99:
 900              	 .cfi_def_cfa_offset 4
 901 0010 BD46     	 mov sp,r7
 902              	.LCFI100:
 903              	 .cfi_def_cfa_register 13
 904              	 
 905 0012 80BC     	 pop {r7}
 906              	.LCFI101:
 907              	 .cfi_restore 7
 908              	 .cfi_def_cfa_offset 0
 909 0014 7047     	 bx lr
 910              	 .cfi_endproc
 911              	.LFE85:
 913              	 .section .text.smc_nfc_enable_interrupt,"ax",%progbits
 914              	 .align 1
 915              	 .global smc_nfc_enable_interrupt
 916              	 .syntax unified
 917              	 .thumb
 918              	 .thumb_func
 919              	 .fpu softvfp
 921              	smc_nfc_enable_interrupt:
 922              	.LFB86:
 277:.././hal/sam3u1c/smc.c **** 
 278:.././hal/sam3u1c/smc.c **** /**
 279:.././hal/sam3u1c/smc.c ****  * \brief Enable SMC interrupts.
 280:.././hal/sam3u1c/smc.c ****  *
 281:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 282:.././hal/sam3u1c/smc.c ****  * \param ul_sources Interrupt source bitmap.
 283:.././hal/sam3u1c/smc.c ****  */
 284:.././hal/sam3u1c/smc.c **** void smc_nfc_enable_interrupt(Smc *p_smc, uint32_t ul_sources)
 285:.././hal/sam3u1c/smc.c **** {
 923              	 .loc 1 285 0
 924              	 .cfi_startproc
 925              	 
 926              	 
 927              	 
 928 0000 80B4     	 push {r7}
 929              	.LCFI102:
 930              	 .cfi_def_cfa_offset 4
 931              	 .cfi_offset 7,-4
 932 0002 83B0     	 sub sp,sp,#12
 933              	.LCFI103:
 934              	 .cfi_def_cfa_offset 16
 935 0004 00AF     	 add r7,sp,#0
 936              	.LCFI104:
 937              	 .cfi_def_cfa_register 7
 938 0006 7860     	 str r0,[r7,#4]
 939 0008 3960     	 str r1,[r7]
 286:.././hal/sam3u1c/smc.c **** 	p_smc->SMC_IER = ul_sources;
 940              	 .loc 1 286 0
 941 000a 7B68     	 ldr r3,[r7,#4]
 942 000c 3A68     	 ldr r2,[r7]
 943 000e DA60     	 str r2,[r3,#12]
 287:.././hal/sam3u1c/smc.c **** }
 944              	 .loc 1 287 0
 945 0010 00BF     	 nop
 946 0012 0C37     	 adds r7,r7,#12
 947              	.LCFI105:
 948              	 .cfi_def_cfa_offset 4
 949 0014 BD46     	 mov sp,r7
 950              	.LCFI106:
 951              	 .cfi_def_cfa_register 13
 952              	 
 953 0016 80BC     	 pop {r7}
 954              	.LCFI107:
 955              	 .cfi_restore 7
 956              	 .cfi_def_cfa_offset 0
 957 0018 7047     	 bx lr
 958              	 .cfi_endproc
 959              	.LFE86:
 961              	 .section .text.smc_nfc_disable_interrupt,"ax",%progbits
 962              	 .align 1
 963              	 .global smc_nfc_disable_interrupt
 964              	 .syntax unified
 965              	 .thumb
 966              	 .thumb_func
 967              	 .fpu softvfp
 969              	smc_nfc_disable_interrupt:
 970              	.LFB87:
 288:.././hal/sam3u1c/smc.c **** 
 289:.././hal/sam3u1c/smc.c **** /**
 290:.././hal/sam3u1c/smc.c ****  * \brief Disable SMC interrupts.
 291:.././hal/sam3u1c/smc.c ****  *
 292:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 293:.././hal/sam3u1c/smc.c ****  * \param ul_sources Interrupt source bitmap.
 294:.././hal/sam3u1c/smc.c ****  */
 295:.././hal/sam3u1c/smc.c **** void smc_nfc_disable_interrupt(Smc *p_smc, uint32_t ul_sources)
 296:.././hal/sam3u1c/smc.c **** {
 971              	 .loc 1 296 0
 972              	 .cfi_startproc
 973              	 
 974              	 
 975              	 
 976 0000 80B4     	 push {r7}
 977              	.LCFI108:
 978              	 .cfi_def_cfa_offset 4
 979              	 .cfi_offset 7,-4
 980 0002 83B0     	 sub sp,sp,#12
 981              	.LCFI109:
 982              	 .cfi_def_cfa_offset 16
 983 0004 00AF     	 add r7,sp,#0
 984              	.LCFI110:
 985              	 .cfi_def_cfa_register 7
 986 0006 7860     	 str r0,[r7,#4]
 987 0008 3960     	 str r1,[r7]
 297:.././hal/sam3u1c/smc.c **** 	p_smc->SMC_IDR = ul_sources;
 988              	 .loc 1 297 0
 989 000a 7B68     	 ldr r3,[r7,#4]
 990 000c 3A68     	 ldr r2,[r7]
 991 000e 1A61     	 str r2,[r3,#16]
 298:.././hal/sam3u1c/smc.c **** }
 992              	 .loc 1 298 0
 993 0010 00BF     	 nop
 994 0012 0C37     	 adds r7,r7,#12
 995              	.LCFI111:
 996              	 .cfi_def_cfa_offset 4
 997 0014 BD46     	 mov sp,r7
 998              	.LCFI112:
 999              	 .cfi_def_cfa_register 13
 1000              	 
 1001 0016 80BC     	 pop {r7}
 1002              	.LCFI113:
 1003              	 .cfi_restore 7
 1004              	 .cfi_def_cfa_offset 0
 1005 0018 7047     	 bx lr
 1006              	 .cfi_endproc
 1007              	.LFE87:
 1009              	 .section .text.smc_nfc_get_interrupt_mask,"ax",%progbits
 1010              	 .align 1
 1011              	 .global smc_nfc_get_interrupt_mask
 1012              	 .syntax unified
 1013              	 .thumb
 1014              	 .thumb_func
 1015              	 .fpu softvfp
 1017              	smc_nfc_get_interrupt_mask:
 1018              	.LFB88:
 299:.././hal/sam3u1c/smc.c **** 
 300:.././hal/sam3u1c/smc.c **** /**
 301:.././hal/sam3u1c/smc.c ****  * \brief Get the interrupt mask.
 302:.././hal/sam3u1c/smc.c ****  *
 303:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 304:.././hal/sam3u1c/smc.c ****  *
 305:.././hal/sam3u1c/smc.c ****  * \return Interrupt mask bitmap.
 306:.././hal/sam3u1c/smc.c ****  */
 307:.././hal/sam3u1c/smc.c **** uint32_t smc_nfc_get_interrupt_mask(Smc *p_smc)
 308:.././hal/sam3u1c/smc.c **** {
 1019              	 .loc 1 308 0
 1020              	 .cfi_startproc
 1021              	 
 1022              	 
 1023              	 
 1024 0000 80B4     	 push {r7}
 1025              	.LCFI114:
 1026              	 .cfi_def_cfa_offset 4
 1027              	 .cfi_offset 7,-4
 1028 0002 83B0     	 sub sp,sp,#12
 1029              	.LCFI115:
 1030              	 .cfi_def_cfa_offset 16
 1031 0004 00AF     	 add r7,sp,#0
 1032              	.LCFI116:
 1033              	 .cfi_def_cfa_register 7
 1034 0006 7860     	 str r0,[r7,#4]
 309:.././hal/sam3u1c/smc.c **** 	return p_smc->SMC_IMR;
 1035              	 .loc 1 309 0
 1036 0008 7B68     	 ldr r3,[r7,#4]
 1037 000a 5B69     	 ldr r3,[r3,#20]
 310:.././hal/sam3u1c/smc.c **** }
 1038              	 .loc 1 310 0
 1039 000c 1846     	 mov r0,r3
 1040 000e 0C37     	 adds r7,r7,#12
 1041              	.LCFI117:
 1042              	 .cfi_def_cfa_offset 4
 1043 0010 BD46     	 mov sp,r7
 1044              	.LCFI118:
 1045              	 .cfi_def_cfa_register 13
 1046              	 
 1047 0012 80BC     	 pop {r7}
 1048              	.LCFI119:
 1049              	 .cfi_restore 7
 1050              	 .cfi_def_cfa_offset 0
 1051 0014 7047     	 bx lr
 1052              	 .cfi_endproc
 1053              	.LFE88:
 1055              	 .section .text.smc_nfc_set_address0,"ax",%progbits
 1056              	 .align 1
 1057              	 .global smc_nfc_set_address0
 1058              	 .syntax unified
 1059              	 .thumb
 1060              	 .thumb_func
 1061              	 .fpu softvfp
 1063              	smc_nfc_set_address0:
 1064              	.LFB89:
 311:.././hal/sam3u1c/smc.c **** 
 312:.././hal/sam3u1c/smc.c **** /**
 313:.././hal/sam3u1c/smc.c ****  * \brief Set flash cycle 0 address.
 314:.././hal/sam3u1c/smc.c ****  *
 315:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 316:.././hal/sam3u1c/smc.c ****  * \param uc_address0 Address cycle 0 in 5 address cycles.
 317:.././hal/sam3u1c/smc.c ****  */
 318:.././hal/sam3u1c/smc.c **** void smc_nfc_set_address0(Smc *p_smc, uint8_t uc_address0)
 319:.././hal/sam3u1c/smc.c **** {
 1065              	 .loc 1 319 0
 1066              	 .cfi_startproc
 1067              	 
 1068              	 
 1069              	 
 1070 0000 80B4     	 push {r7}
 1071              	.LCFI120:
 1072              	 .cfi_def_cfa_offset 4
 1073              	 .cfi_offset 7,-4
 1074 0002 83B0     	 sub sp,sp,#12
 1075              	.LCFI121:
 1076              	 .cfi_def_cfa_offset 16
 1077 0004 00AF     	 add r7,sp,#0
 1078              	.LCFI122:
 1079              	 .cfi_def_cfa_register 7
 1080 0006 7860     	 str r0,[r7,#4]
 1081 0008 0B46     	 mov r3,r1
 1082 000a FB70     	 strb r3,[r7,#3]
 320:.././hal/sam3u1c/smc.c **** 	p_smc->SMC_ADDR = uc_address0;
 1083              	 .loc 1 320 0
 1084 000c FA78     	 ldrb r2,[r7,#3]
 1085 000e 7B68     	 ldr r3,[r7,#4]
 1086 0010 9A61     	 str r2,[r3,#24]
 321:.././hal/sam3u1c/smc.c **** }
 1087              	 .loc 1 321 0
 1088 0012 00BF     	 nop
 1089 0014 0C37     	 adds r7,r7,#12
 1090              	.LCFI123:
 1091              	 .cfi_def_cfa_offset 4
 1092 0016 BD46     	 mov sp,r7
 1093              	.LCFI124:
 1094              	 .cfi_def_cfa_register 13
 1095              	 
 1096 0018 80BC     	 pop {r7}
 1097              	.LCFI125:
 1098              	 .cfi_restore 7
 1099              	 .cfi_def_cfa_offset 0
 1100 001a 7047     	 bx lr
 1101              	 .cfi_endproc
 1102              	.LFE89:
 1104              	 .section .text.smc_nfc_set_bank,"ax",%progbits
 1105              	 .align 1
 1106              	 .global smc_nfc_set_bank
 1107              	 .syntax unified
 1108              	 .thumb
 1109              	 .thumb_func
 1110              	 .fpu softvfp
 1112              	smc_nfc_set_bank:
 1113              	.LFB90:
 322:.././hal/sam3u1c/smc.c **** 
 323:.././hal/sam3u1c/smc.c **** /**
 324:.././hal/sam3u1c/smc.c ****  * \brief Set NFC sram bank.
 325:.././hal/sam3u1c/smc.c ****  *
 326:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 327:.././hal/sam3u1c/smc.c ****  * \param ul_bank NFC sram bank.
 328:.././hal/sam3u1c/smc.c ****  */
 329:.././hal/sam3u1c/smc.c **** void smc_nfc_set_bank(Smc *p_smc, uint32_t ul_bank)
 330:.././hal/sam3u1c/smc.c **** {
 1114              	 .loc 1 330 0
 1115              	 .cfi_startproc
 1116              	 
 1117              	 
 1118              	 
 1119 0000 80B4     	 push {r7}
 1120              	.LCFI126:
 1121              	 .cfi_def_cfa_offset 4
 1122              	 .cfi_offset 7,-4
 1123 0002 83B0     	 sub sp,sp,#12
 1124              	.LCFI127:
 1125              	 .cfi_def_cfa_offset 16
 1126 0004 00AF     	 add r7,sp,#0
 1127              	.LCFI128:
 1128              	 .cfi_def_cfa_register 7
 1129 0006 7860     	 str r0,[r7,#4]
 1130 0008 3960     	 str r1,[r7]
 331:.././hal/sam3u1c/smc.c **** 	p_smc->SMC_BANK = SMC_BANK_BANK(ul_bank);
 1131              	 .loc 1 331 0
 1132 000a 3B68     	 ldr r3,[r7]
 1133 000c 03F00702 	 and r2,r3,#7
 1134 0010 7B68     	 ldr r3,[r7,#4]
 1135 0012 DA61     	 str r2,[r3,#28]
 332:.././hal/sam3u1c/smc.c **** }
 1136              	 .loc 1 332 0
 1137 0014 00BF     	 nop
 1138 0016 0C37     	 adds r7,r7,#12
 1139              	.LCFI129:
 1140              	 .cfi_def_cfa_offset 4
 1141 0018 BD46     	 mov sp,r7
 1142              	.LCFI130:
 1143              	 .cfi_def_cfa_register 13
 1144              	 
 1145 001a 80BC     	 pop {r7}
 1146              	.LCFI131:
 1147              	 .cfi_restore 7
 1148              	 .cfi_def_cfa_offset 0
 1149 001c 7047     	 bx lr
 1150              	 .cfi_endproc
 1151              	.LFE90:
 1153              	 .section .text.smc_nfc_send_command,"ax",%progbits
 1154              	 .align 1
 1155              	 .global smc_nfc_send_command
 1156              	 .syntax unified
 1157              	 .thumb
 1158              	 .thumb_func
 1159              	 .fpu softvfp
 1161              	smc_nfc_send_command:
 1162              	.LFB91:
 333:.././hal/sam3u1c/smc.c **** 
 334:.././hal/sam3u1c/smc.c **** /**
 335:.././hal/sam3u1c/smc.c ****  * \brief Use the HOST nandflash controller to send a command.
 336:.././hal/sam3u1c/smc.c ****  *
 337:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 338:.././hal/sam3u1c/smc.c ****  * \param ul_cmd Command to send.
 339:.././hal/sam3u1c/smc.c ****  * \param ul_address_cycle Address cycle when command access is decoded.
 340:.././hal/sam3u1c/smc.c ****  * \param ul_cycle0 Address at first cycle.
 341:.././hal/sam3u1c/smc.c ****  */
 342:.././hal/sam3u1c/smc.c **** void smc_nfc_send_command(Smc *p_smc, uint32_t ul_cmd,
 343:.././hal/sam3u1c/smc.c **** 		uint32_t ul_address_cycle, uint32_t ul_cycle0)
 344:.././hal/sam3u1c/smc.c **** {
 1163              	 .loc 1 344 0
 1164              	 .cfi_startproc
 1165              	 
 1166              	 
 1167              	 
 1168 0000 80B4     	 push {r7}
 1169              	.LCFI132:
 1170              	 .cfi_def_cfa_offset 4
 1171              	 .cfi_offset 7,-4
 1172 0002 87B0     	 sub sp,sp,#28
 1173              	.LCFI133:
 1174              	 .cfi_def_cfa_offset 32
 1175 0004 00AF     	 add r7,sp,#0
 1176              	.LCFI134:
 1177              	 .cfi_def_cfa_register 7
 1178 0006 F860     	 str r0,[r7,#12]
 1179 0008 B960     	 str r1,[r7,#8]
 1180 000a 7A60     	 str r2,[r7,#4]
 1181 000c 3B60     	 str r3,[r7]
 345:.././hal/sam3u1c/smc.c **** 	volatile uint32_t *p_command_address;
 346:.././hal/sam3u1c/smc.c **** 
 347:.././hal/sam3u1c/smc.c **** 	/* Wait until host controller is not busy. */
 348:.././hal/sam3u1c/smc.c **** 	while (((*((volatile uint32_t *)(BOARD_NF_DATA_ADDR + NFCADDR_CMD_NFCCMD)))
 1182              	 .loc 1 348 0
 1183 000e 00BF     	 nop
 1184              	.L33:
 1185              	 .loc 1 348 0 is_stmt 0 discriminator 1
 1186 0010 4FF0D243 	 mov r3,#1761607680
 1187 0014 1B68     	 ldr r3,[r3]
 349:.././hal/sam3u1c/smc.c **** 			& NFC_BUSY_FLAG) == NFC_BUSY_FLAG) {
 1188              	 .loc 1 349 0 is_stmt 1 discriminator 1
 1189 0016 03F00063 	 and r3,r3,#134217728
 348:.././hal/sam3u1c/smc.c **** 			& NFC_BUSY_FLAG) == NFC_BUSY_FLAG) {
 1190              	 .loc 1 348 0 discriminator 1
 1191 001a B3F1006F 	 cmp r3,#134217728
 1192 001e F7D0     	 beq .L33
 350:.././hal/sam3u1c/smc.c **** 	}
 351:.././hal/sam3u1c/smc.c **** 	/* Send the command plus the ADDR_CYCLE. */
 352:.././hal/sam3u1c/smc.c **** 	p_command_address = (volatile uint32_t *)(ul_cmd + BOARD_NF_DATA_ADDR);
 1193              	 .loc 1 352 0
 1194 0020 BB68     	 ldr r3,[r7,#8]
 1195 0022 03F1C243 	 add r3,r3,#1627389952
 1196 0026 7B61     	 str r3,[r7,#20]
 353:.././hal/sam3u1c/smc.c **** 	p_smc->SMC_ADDR = ul_cycle0;
 1197              	 .loc 1 353 0
 1198 0028 FB68     	 ldr r3,[r7,#12]
 1199 002a 3A68     	 ldr r2,[r7]
 1200 002c 9A61     	 str r2,[r3,#24]
 354:.././hal/sam3u1c/smc.c **** 	*p_command_address = ul_address_cycle;
 1201              	 .loc 1 354 0
 1202 002e 7B69     	 ldr r3,[r7,#20]
 1203 0030 7A68     	 ldr r2,[r7,#4]
 1204 0032 1A60     	 str r2,[r3]
 355:.././hal/sam3u1c/smc.c **** 	while (!((p_smc->SMC_SR & SMC_SR_CMDDONE) == SMC_SR_CMDDONE)) {
 1205              	 .loc 1 355 0
 1206 0034 00BF     	 nop
 1207              	.L34:
 1208              	 .loc 1 355 0 is_stmt 0 discriminator 1
 1209 0036 FB68     	 ldr r3,[r7,#12]
 1210 0038 9B68     	 ldr r3,[r3,#8]
 1211 003a 03F40033 	 and r3,r3,#131072
 1212 003e B3F5003F 	 cmp r3,#131072
 1213 0042 F8D1     	 bne .L34
 356:.././hal/sam3u1c/smc.c **** 	}
 357:.././hal/sam3u1c/smc.c **** }
 1214              	 .loc 1 357 0 is_stmt 1
 1215 0044 00BF     	 nop
 1216 0046 1C37     	 adds r7,r7,#28
 1217              	.LCFI135:
 1218              	 .cfi_def_cfa_offset 4
 1219 0048 BD46     	 mov sp,r7
 1220              	.LCFI136:
 1221              	 .cfi_def_cfa_register 13
 1222              	 
 1223 004a 80BC     	 pop {r7}
 1224              	.LCFI137:
 1225              	 .cfi_restore 7
 1226              	 .cfi_def_cfa_offset 0
 1227 004c 7047     	 bx lr
 1228              	 .cfi_endproc
 1229              	.LFE91:
 1231              	 .section .text.smc_ecc_init,"ax",%progbits
 1232              	 .align 1
 1233              	 .global smc_ecc_init
 1234              	 .syntax unified
 1235              	 .thumb
 1236              	 .thumb_func
 1237              	 .fpu softvfp
 1239              	smc_ecc_init:
 1240              	.LFB92:
 358:.././hal/sam3u1c/smc.c **** 
 359:.././hal/sam3u1c/smc.c **** /**
 360:.././hal/sam3u1c/smc.c ****  * \brief Initialize ECC mode.
 361:.././hal/sam3u1c/smc.c ****  *
 362:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 363:.././hal/sam3u1c/smc.c ****  * \param ul_type Type of correction, use pattern defined in the device header file.
 364:.././hal/sam3u1c/smc.c ****  * \param ul_pagesize Page size of NAND Flash device, use pattern defined in
 365:.././hal/sam3u1c/smc.c ****  * the device header file.
 366:.././hal/sam3u1c/smc.c ****  */
 367:.././hal/sam3u1c/smc.c **** void smc_ecc_init(Smc *p_smc, uint32_t ul_type, uint32_t ul_pagesize)
 368:.././hal/sam3u1c/smc.c **** {
 1241              	 .loc 1 368 0
 1242              	 .cfi_startproc
 1243              	 
 1244              	 
 1245              	 
 1246 0000 80B4     	 push {r7}
 1247              	.LCFI138:
 1248              	 .cfi_def_cfa_offset 4
 1249              	 .cfi_offset 7,-4
 1250 0002 85B0     	 sub sp,sp,#20
 1251              	.LCFI139:
 1252              	 .cfi_def_cfa_offset 24
 1253 0004 00AF     	 add r7,sp,#0
 1254              	.LCFI140:
 1255              	 .cfi_def_cfa_register 7
 1256 0006 F860     	 str r0,[r7,#12]
 1257 0008 B960     	 str r1,[r7,#8]
 1258 000a 7A60     	 str r2,[r7,#4]
 369:.././hal/sam3u1c/smc.c **** 	/* Software Reset ECC. */
 370:.././hal/sam3u1c/smc.c **** 	p_smc->SMC_ECC_CTRL = SMC_ECC_CTRL_SWRST;
 1259              	 .loc 1 370 0
 1260 000c FB68     	 ldr r3,[r7,#12]
 1261 000e 0222     	 movs r2,#2
 1262 0010 1A62     	 str r2,[r3,#32]
 371:.././hal/sam3u1c/smc.c **** 	p_smc->SMC_ECC_MD = ul_type | ul_pagesize;
 1263              	 .loc 1 371 0
 1264 0012 BA68     	 ldr r2,[r7,#8]
 1265 0014 7B68     	 ldr r3,[r7,#4]
 1266 0016 1A43     	 orrs r2,r2,r3
 1267 0018 FB68     	 ldr r3,[r7,#12]
 1268 001a 5A62     	 str r2,[r3,#36]
 372:.././hal/sam3u1c/smc.c **** }
 1269              	 .loc 1 372 0
 1270 001c 00BF     	 nop
 1271 001e 1437     	 adds r7,r7,#20
 1272              	.LCFI141:
 1273              	 .cfi_def_cfa_offset 4
 1274 0020 BD46     	 mov sp,r7
 1275              	.LCFI142:
 1276              	 .cfi_def_cfa_register 13
 1277              	 
 1278 0022 80BC     	 pop {r7}
 1279              	.LCFI143:
 1280              	 .cfi_restore 7
 1281              	 .cfi_def_cfa_offset 0
 1282 0024 7047     	 bx lr
 1283              	 .cfi_endproc
 1284              	.LFE92:
 1286              	 .section .text.smc_ecc_get_status,"ax",%progbits
 1287              	 .align 1
 1288              	 .global smc_ecc_get_status
 1289              	 .syntax unified
 1290              	 .thumb
 1291              	 .thumb_func
 1292              	 .fpu softvfp
 1294              	smc_ecc_get_status:
 1295              	.LFB93:
 373:.././hal/sam3u1c/smc.c **** 
 374:.././hal/sam3u1c/smc.c **** /**
 375:.././hal/sam3u1c/smc.c ****  * \brief Get ECC status by giving ecc number.
 376:.././hal/sam3u1c/smc.c ****  *
 377:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 378:.././hal/sam3u1c/smc.c ****  * \param ul_parity_number ECC parity number from 0 to 15.
 379:.././hal/sam3u1c/smc.c ****  *
 380:.././hal/sam3u1c/smc.c ****  * \return ECC status by giving ECC number.
 381:.././hal/sam3u1c/smc.c ****  */
 382:.././hal/sam3u1c/smc.c **** uint32_t smc_ecc_get_status(Smc *p_smc, uint32_t ul_parity_number)
 383:.././hal/sam3u1c/smc.c **** {
 1296              	 .loc 1 383 0
 1297              	 .cfi_startproc
 1298              	 
 1299              	 
 1300              	 
 1301 0000 80B4     	 push {r7}
 1302              	.LCFI144:
 1303              	 .cfi_def_cfa_offset 4
 1304              	 .cfi_offset 7,-4
 1305 0002 85B0     	 sub sp,sp,#20
 1306              	.LCFI145:
 1307              	 .cfi_def_cfa_offset 24
 1308 0004 00AF     	 add r7,sp,#0
 1309              	.LCFI146:
 1310              	 .cfi_def_cfa_register 7
 1311 0006 7860     	 str r0,[r7,#4]
 1312 0008 3960     	 str r1,[r7]
 384:.././hal/sam3u1c/smc.c **** 	uint32_t status;
 385:.././hal/sam3u1c/smc.c **** 
 386:.././hal/sam3u1c/smc.c **** 	if (ul_parity_number < 8) {
 1313              	 .loc 1 386 0
 1314 000a 3B68     	 ldr r3,[r7]
 1315 000c 072B     	 cmp r3,#7
 1316 000e 03D8     	 bhi .L37
 387:.././hal/sam3u1c/smc.c **** 		status = p_smc->SMC_ECC_SR1;
 1317              	 .loc 1 387 0
 1318 0010 7B68     	 ldr r3,[r7,#4]
 1319 0012 9B6A     	 ldr r3,[r3,#40]
 1320 0014 FB60     	 str r3,[r7,#12]
 1321 0016 05E0     	 b .L38
 1322              	.L37:
 388:.././hal/sam3u1c/smc.c **** 	} else {
 389:.././hal/sam3u1c/smc.c **** 		status = p_smc->SMC_ECC_SR2;
 1323              	 .loc 1 389 0
 1324 0018 7B68     	 ldr r3,[r7,#4]
 1325 001a 5B6B     	 ldr r3,[r3,#52]
 1326 001c FB60     	 str r3,[r7,#12]
 390:.././hal/sam3u1c/smc.c **** 		ul_parity_number -= 8;
 1327              	 .loc 1 390 0
 1328 001e 3B68     	 ldr r3,[r7]
 1329 0020 083B     	 subs r3,r3,#8
 1330 0022 3B60     	 str r3,[r7]
 1331              	.L38:
 391:.././hal/sam3u1c/smc.c **** 	}
 392:.././hal/sam3u1c/smc.c **** 
 393:.././hal/sam3u1c/smc.c **** 	return ((status >> (ul_parity_number * 4)) & ECC_STATUS_MASK);
 1332              	 .loc 1 393 0
 1333 0024 3B68     	 ldr r3,[r7]
 1334 0026 9B00     	 lsls r3,r3,#2
 1335 0028 FA68     	 ldr r2,[r7,#12]
 1336 002a 22FA03F3 	 lsr r3,r2,r3
 1337 002e 03F00703 	 and r3,r3,#7
 394:.././hal/sam3u1c/smc.c **** }
 1338              	 .loc 1 394 0
 1339 0032 1846     	 mov r0,r3
 1340 0034 1437     	 adds r7,r7,#20
 1341              	.LCFI147:
 1342              	 .cfi_def_cfa_offset 4
 1343 0036 BD46     	 mov sp,r7
 1344              	.LCFI148:
 1345              	 .cfi_def_cfa_register 13
 1346              	 
 1347 0038 80BC     	 pop {r7}
 1348              	.LCFI149:
 1349              	 .cfi_restore 7
 1350              	 .cfi_def_cfa_offset 0
 1351 003a 7047     	 bx lr
 1352              	 .cfi_endproc
 1353              	.LFE93:
 1355              	 .section .text.smc_ecc_get_value,"ax",%progbits
 1356              	 .align 1
 1357              	 .global smc_ecc_get_value
 1358              	 .syntax unified
 1359              	 .thumb
 1360              	 .thumb_func
 1361              	 .fpu softvfp
 1363              	smc_ecc_get_value:
 1364              	.LFB94:
 395:.././hal/sam3u1c/smc.c **** 
 396:.././hal/sam3u1c/smc.c **** /**
 397:.././hal/sam3u1c/smc.c ****  * \brief Get all ECC parity registers value.
 398:.././hal/sam3u1c/smc.c ****  *
 399:.././hal/sam3u1c/smc.c ****  * \param p_smc Pointer to an SMC instance.
 400:.././hal/sam3u1c/smc.c ****  * \param p_ecc Pointer to a parity buffer.
 401:.././hal/sam3u1c/smc.c ****  */
 402:.././hal/sam3u1c/smc.c **** void smc_ecc_get_value(Smc *p_smc, uint32_t *p_ecc)
 403:.././hal/sam3u1c/smc.c **** {
 1365              	 .loc 1 403 0
 1366              	 .cfi_startproc
 1367              	 
 1368              	 
 1369              	 
 1370 0000 80B4     	 push {r7}
 1371              	.LCFI150:
 1372              	 .cfi_def_cfa_offset 4
 1373              	 .cfi_offset 7,-4
 1374 0002 83B0     	 sub sp,sp,#12
 1375              	.LCFI151:
 1376              	 .cfi_def_cfa_offset 16
 1377 0004 00AF     	 add r7,sp,#0
 1378              	.LCFI152:
 1379              	 .cfi_def_cfa_register 7
 1380 0006 7860     	 str r0,[r7,#4]
 1381 0008 3960     	 str r1,[r7]
 404:.././hal/sam3u1c/smc.c **** 	p_ecc[0] = p_smc->SMC_ECC_PR0;
 1382              	 .loc 1 404 0
 1383 000a 7B68     	 ldr r3,[r7,#4]
 1384 000c DA6A     	 ldr r2,[r3,#44]
 1385 000e 3B68     	 ldr r3,[r7]
 1386 0010 1A60     	 str r2,[r3]
 405:.././hal/sam3u1c/smc.c **** 	p_ecc[1] = p_smc->SMC_ECC_PR1;
 1387              	 .loc 1 405 0
 1388 0012 3B68     	 ldr r3,[r7]
 1389 0014 0433     	 adds r3,r3,#4
 1390 0016 7A68     	 ldr r2,[r7,#4]
 1391 0018 126B     	 ldr r2,[r2,#48]
 1392 001a 1A60     	 str r2,[r3]
 406:.././hal/sam3u1c/smc.c **** 	p_ecc[2] = p_smc->SMC_ECC_PR2;
 1393              	 .loc 1 406 0
 1394 001c 3B68     	 ldr r3,[r7]
 1395 001e 0833     	 adds r3,r3,#8
 1396 0020 7A68     	 ldr r2,[r7,#4]
 1397 0022 926B     	 ldr r2,[r2,#56]
 1398 0024 1A60     	 str r2,[r3]
 407:.././hal/sam3u1c/smc.c **** 	p_ecc[3] = p_smc->SMC_ECC_PR3;
 1399              	 .loc 1 407 0
 1400 0026 3B68     	 ldr r3,[r7]
 1401 0028 0C33     	 adds r3,r3,#12
 1402 002a 7A68     	 ldr r2,[r7,#4]
 1403 002c D26B     	 ldr r2,[r2,#60]
 1404 002e 1A60     	 str r2,[r3]
 408:.././hal/sam3u1c/smc.c **** 	p_ecc[4] = p_smc->SMC_ECC_PR4;
 1405              	 .loc 1 408 0
 1406 0030 3B68     	 ldr r3,[r7]
 1407 0032 1033     	 adds r3,r3,#16
 1408 0034 7A68     	 ldr r2,[r7,#4]
 1409 0036 126C     	 ldr r2,[r2,#64]
 1410 0038 1A60     	 str r2,[r3]
 409:.././hal/sam3u1c/smc.c **** 	p_ecc[5] = p_smc->SMC_ECC_PR5;
 1411              	 .loc 1 409 0
 1412 003a 3B68     	 ldr r3,[r7]
 1413 003c 1433     	 adds r3,r3,#20
 1414 003e 7A68     	 ldr r2,[r7,#4]
 1415 0040 526C     	 ldr r2,[r2,#68]
 1416 0042 1A60     	 str r2,[r3]
 410:.././hal/sam3u1c/smc.c **** 	p_ecc[6] = p_smc->SMC_ECC_PR6;
 1417              	 .loc 1 410 0
 1418 0044 3B68     	 ldr r3,[r7]
 1419 0046 1833     	 adds r3,r3,#24
 1420 0048 7A68     	 ldr r2,[r7,#4]
 1421 004a 926C     	 ldr r2,[r2,#72]
 1422 004c 1A60     	 str r2,[r3]
 411:.././hal/sam3u1c/smc.c **** 	p_ecc[7] = p_smc->SMC_ECC_PR7;
 1423              	 .loc 1 411 0
 1424 004e 3B68     	 ldr r3,[r7]
 1425 0050 1C33     	 adds r3,r3,#28
 1426 0052 7A68     	 ldr r2,[r7,#4]
 1427 0054 D26C     	 ldr r2,[r2,#76]
 1428 0056 1A60     	 str r2,[r3]
 412:.././hal/sam3u1c/smc.c **** 	p_ecc[8] = p_smc->SMC_ECC_PR8;
 1429              	 .loc 1 412 0
 1430 0058 3B68     	 ldr r3,[r7]
 1431 005a 2033     	 adds r3,r3,#32
 1432 005c 7A68     	 ldr r2,[r7,#4]
 1433 005e 126D     	 ldr r2,[r2,#80]
 1434 0060 1A60     	 str r2,[r3]
 413:.././hal/sam3u1c/smc.c **** 	p_ecc[9] = p_smc->SMC_ECC_PR9;
 1435              	 .loc 1 413 0
 1436 0062 3B68     	 ldr r3,[r7]
 1437 0064 2433     	 adds r3,r3,#36
 1438 0066 7A68     	 ldr r2,[r7,#4]
 1439 0068 526D     	 ldr r2,[r2,#84]
 1440 006a 1A60     	 str r2,[r3]
 414:.././hal/sam3u1c/smc.c **** 	p_ecc[10] = p_smc->SMC_ECC_PR10;
 1441              	 .loc 1 414 0
 1442 006c 3B68     	 ldr r3,[r7]
 1443 006e 2833     	 adds r3,r3,#40
 1444 0070 7A68     	 ldr r2,[r7,#4]
 1445 0072 926D     	 ldr r2,[r2,#88]
 1446 0074 1A60     	 str r2,[r3]
 415:.././hal/sam3u1c/smc.c **** 	p_ecc[11] = p_smc->SMC_ECC_PR11;
 1447              	 .loc 1 415 0
 1448 0076 3B68     	 ldr r3,[r7]
 1449 0078 2C33     	 adds r3,r3,#44
 1450 007a 7A68     	 ldr r2,[r7,#4]
 1451 007c D26D     	 ldr r2,[r2,#92]
 1452 007e 1A60     	 str r2,[r3]
 416:.././hal/sam3u1c/smc.c **** 	p_ecc[12] = p_smc->SMC_ECC_PR12;
 1453              	 .loc 1 416 0
 1454 0080 3B68     	 ldr r3,[r7]
 1455 0082 3033     	 adds r3,r3,#48
 1456 0084 7A68     	 ldr r2,[r7,#4]
 1457 0086 126E     	 ldr r2,[r2,#96]
 1458 0088 1A60     	 str r2,[r3]
 417:.././hal/sam3u1c/smc.c **** 	p_ecc[13] = p_smc->SMC_ECC_PR13;
 1459              	 .loc 1 417 0
 1460 008a 3B68     	 ldr r3,[r7]
 1461 008c 3433     	 adds r3,r3,#52
 1462 008e 7A68     	 ldr r2,[r7,#4]
 1463 0090 526E     	 ldr r2,[r2,#100]
 1464 0092 1A60     	 str r2,[r3]
 418:.././hal/sam3u1c/smc.c **** 	p_ecc[14] = p_smc->SMC_ECC_PR14;
 1465              	 .loc 1 418 0
 1466 0094 3B68     	 ldr r3,[r7]
 1467 0096 3833     	 adds r3,r3,#56
 1468 0098 7A68     	 ldr r2,[r7,#4]
 1469 009a 926E     	 ldr r2,[r2,#104]
 1470 009c 1A60     	 str r2,[r3]
 419:.././hal/sam3u1c/smc.c **** 	p_ecc[15] = p_smc->SMC_ECC_PR15;
 1471              	 .loc 1 419 0
 1472 009e 3B68     	 ldr r3,[r7]
 1473 00a0 3C33     	 adds r3,r3,#60
 1474 00a2 7A68     	 ldr r2,[r7,#4]
 1475 00a4 D26E     	 ldr r2,[r2,#108]
 1476 00a6 1A60     	 str r2,[r3]
 420:.././hal/sam3u1c/smc.c **** }
 1477              	 .loc 1 420 0
 1478 00a8 00BF     	 nop
 1479 00aa 0C37     	 adds r7,r7,#12
 1480              	.LCFI153:
 1481              	 .cfi_def_cfa_offset 4
 1482 00ac BD46     	 mov sp,r7
 1483              	.LCFI154:
 1484              	 .cfi_def_cfa_register 13
 1485              	 
 1486 00ae 80BC     	 pop {r7}
 1487              	.LCFI155:
 1488              	 .cfi_restore 7
 1489              	 .cfi_def_cfa_offset 0
 1490 00b0 7047     	 bx lr
 1491              	 .cfi_endproc
 1492              	.LFE94:
 1494              	 .text
 1495              	.Letext0:
 1496              	 .file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 1497              	 .file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 1498              	 .file 4 ".././hal/sam3u1c/inc/sam3u1c.h"
 1499              	 .file 5 ".././hal/sam3u1c/inc/core_cm3.h"
 1500              	 .file 6 ".././hal/sam3u1c/inc/system_sam3u.h"
 1501              	 .file 7 ".././hal/sam3u1c/inc/component/component_smc.h"
 1502              	 .file 8 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\sys\\lock.h"
 1503              	 .file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\sys\\_types.h"
 1504              	 .file 10 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\lib\\gcc\\arm-none-eabi\\7.3.1\\include\\stddef.h"
 1505              	 .file 11 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\sys\\reent.h"
 1506              	 .file 12 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\stdlib.h"
 1507              	 .file 13 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
DEFINED SYMBOLS
                            *ABS*:00000000 smc.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:27     .text.smc_set_setup_timing:00000000 $t
    {standard input}:34     .text.smc_set_setup_timing:00000000 smc_set_setup_timing
    {standard input}:84     .text.smc_set_pulse_timing:00000000 $t
    {standard input}:91     .text.smc_set_pulse_timing:00000000 smc_set_pulse_timing
    {standard input}:140    .text.smc_set_cycle_timing:00000000 $t
    {standard input}:147    .text.smc_set_cycle_timing:00000000 smc_set_cycle_timing
    {standard input}:196    .text.smc_set_mode:00000000 $t
    {standard input}:203    .text.smc_set_mode:00000000 smc_set_mode
    {standard input}:252    .text.smc_get_mode:00000000 $t
    {standard input}:259    .text.smc_get_mode:00000000 smc_get_mode
    {standard input}:306    .text.smc_enable_writeprotect:00000000 $t
    {standard input}:313    .text.smc_enable_writeprotect:00000000 smc_enable_writeprotect
    {standard input}:365    .text.smc_enable_writeprotect:0000002c $d
    {standard input}:371    .text.smc_get_writeprotect_status:00000000 $t
    {standard input}:378    .text.smc_get_writeprotect_status:00000000 smc_get_writeprotect_status
    {standard input}:417    .text.smc_set_nand_timing:00000000 $t
    {standard input}:424    .text.smc_set_nand_timing:00000000 smc_set_nand_timing
    {standard input}:473    .text.smc_nfc_init:00000000 $t
    {standard input}:480    .text.smc_nfc_init:00000000 smc_nfc_init
    {standard input}:521    .text.smc_nfc_set_page_size:00000000 $t
    {standard input}:528    .text.smc_nfc_set_page_size:00000000 smc_nfc_set_page_size
    {standard input}:578    .text.smc_nfc_enable_spare_read:00000000 $t
    {standard input}:585    .text.smc_nfc_enable_spare_read:00000000 smc_nfc_enable_spare_read
    {standard input}:627    .text.smc_nfc_disable_spare_read:00000000 $t
    {standard input}:634    .text.smc_nfc_disable_spare_read:00000000 smc_nfc_disable_spare_read
    {standard input}:676    .text.smc_nfc_enable_spare_write:00000000 $t
    {standard input}:683    .text.smc_nfc_enable_spare_write:00000000 smc_nfc_enable_spare_write
    {standard input}:725    .text.smc_nfc_disable_spare_write:00000000 $t
    {standard input}:732    .text.smc_nfc_disable_spare_write:00000000 smc_nfc_disable_spare_write
    {standard input}:774    .text.smc_nfc_enable:00000000 $t
    {standard input}:781    .text.smc_nfc_enable:00000000 smc_nfc_enable
    {standard input}:821    .text.smc_nfc_disable:00000000 $t
    {standard input}:828    .text.smc_nfc_disable:00000000 smc_nfc_disable
    {standard input}:868    .text.smc_nfc_get_status:00000000 $t
    {standard input}:875    .text.smc_nfc_get_status:00000000 smc_nfc_get_status
    {standard input}:914    .text.smc_nfc_enable_interrupt:00000000 $t
    {standard input}:921    .text.smc_nfc_enable_interrupt:00000000 smc_nfc_enable_interrupt
    {standard input}:962    .text.smc_nfc_disable_interrupt:00000000 $t
    {standard input}:969    .text.smc_nfc_disable_interrupt:00000000 smc_nfc_disable_interrupt
    {standard input}:1010   .text.smc_nfc_get_interrupt_mask:00000000 $t
    {standard input}:1017   .text.smc_nfc_get_interrupt_mask:00000000 smc_nfc_get_interrupt_mask
    {standard input}:1056   .text.smc_nfc_set_address0:00000000 $t
    {standard input}:1063   .text.smc_nfc_set_address0:00000000 smc_nfc_set_address0
    {standard input}:1105   .text.smc_nfc_set_bank:00000000 $t
    {standard input}:1112   .text.smc_nfc_set_bank:00000000 smc_nfc_set_bank
    {standard input}:1154   .text.smc_nfc_send_command:00000000 $t
    {standard input}:1161   .text.smc_nfc_send_command:00000000 smc_nfc_send_command
    {standard input}:1232   .text.smc_ecc_init:00000000 $t
    {standard input}:1239   .text.smc_ecc_init:00000000 smc_ecc_init
    {standard input}:1287   .text.smc_ecc_get_status:00000000 $t
    {standard input}:1294   .text.smc_ecc_get_status:00000000 smc_ecc_get_status
    {standard input}:1356   .text.smc_ecc_get_value:00000000 $t
    {standard input}:1363   .text.smc_ecc_get_value:00000000 smc_ecc_get_value
                           .group:00000000 wm4.0.7d8dd4860124405c65f5049e8a79afcb
                           .group:00000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.newlib.h.8.f6e543eac3f2f65163ba2ffe3b04987b
                           .group:00000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:00000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.cdefs.h.47.14fad0b327eb9dcf106599b738d85132
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:00000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:00000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.smc.h.69.e1f0bfb500bbfef3eedd248d3983d0ee
                           .group:00000000 wm4.board.h.48.ce8d06c36cc583d9bf62738411f62e4d
                           .group:00000000 wm4.cw521.h.62.49e8a34af6a9b815e03b7858792ba391

NO UNDEFINED SYMBOLS
