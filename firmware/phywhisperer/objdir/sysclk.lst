   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "sysclk.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .section .text.osc_enable,"ax",%progbits
  27              	 .align 1
  28              	 .arch armv7-m
  29              	 .syntax unified
  30              	 .thumb
  31              	 .thumb_func
  32              	 .fpu softvfp
  34              	osc_enable:
  35              	.LFB69:
  36              	 .file 1 ".././hal/sam3u1c/inc/sam3u/osc.h"
   1:.././hal/sam3u1c/inc/sam3u/osc.h **** /**
   2:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \file
   3:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   4:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \brief Chip-specific oscillator management functions.
   5:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   6:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Copyright (c) 2011 - 2013 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   8:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  10:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \page License
  11:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  12:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sam3u/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  15:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  18:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  22:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  25:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  28:.././hal/sam3u1c/inc/sam3u/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sam3u/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sam3u/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sam3u/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sam3u/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sam3u/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sam3u/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sam3u/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sam3u/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sam3u/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sam3u/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  40:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  42:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  43:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  44:.././hal/sam3u1c/inc/sam3u/osc.h **** #ifndef CHIP_OSC_H_INCLUDED
  45:.././hal/sam3u1c/inc/sam3u/osc.h **** #define CHIP_OSC_H_INCLUDED
  46:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  47:.././hal/sam3u1c/inc/sam3u/osc.h **** #include "board.h"
  48:.././hal/sam3u1c/inc/sam3u/osc.h **** #include "pmc.h"
  49:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  50:.././hal/sam3u1c/inc/sam3u/osc.h **** /// @cond 0
  51:.././hal/sam3u1c/inc/sam3u/osc.h **** /**INDENT-OFF**/
  52:.././hal/sam3u1c/inc/sam3u/osc.h **** #ifdef __cplusplus
  53:.././hal/sam3u1c/inc/sam3u/osc.h **** extern "C" {
  54:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  55:.././hal/sam3u1c/inc/sam3u/osc.h **** /**INDENT-ON**/
  56:.././hal/sam3u1c/inc/sam3u/osc.h **** /// @endcond
  57:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  58:.././hal/sam3u1c/inc/sam3u/osc.h **** /*
  59:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Below BOARD_XXX macros are related to the specific board, and
  60:.././hal/sam3u1c/inc/sam3u/osc.h ****  * should be defined by the board code, otherwise default value are used.
  61:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  62:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_SLCK_XTAL)
  63:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board slow clock xtal frequency has not been defined.
  64:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_SLCK_XTAL      (32768UL)
  65:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  66:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  67:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_SLCK_BYPASS)
  68:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board slow clock bypass frequency has not been defined.
  69:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_SLCK_BYPASS    (32768UL)
  70:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  71:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  72:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_MAINCK_XTAL)
  73:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock xtal frequency has not been defined.
  74:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_MAINCK_XTAL    (12000000UL)
  75:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  76:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  77:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_MAINCK_BYPASS)
  78:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock bypass frequency has not been defined.
  79:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_MAINCK_BYPASS  (12000000UL)
  80:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  81:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  82:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_OSC_STARTUP_US)
  83:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock xtal startup time has not been defined.
  84:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_OSC_STARTUP_US      (15625UL)
  85:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  86:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  87:.././hal/sam3u1c/inc/sam3u/osc.h **** /**
  88:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \weakgroup osc_group
  89:.././hal/sam3u1c/inc/sam3u/osc.h ****  * @{
  90:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  91:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  92:.././hal/sam3u1c/inc/sam3u/osc.h **** //! \name Oscillator identifiers
  93:.././hal/sam3u1c/inc/sam3u/osc.h **** //@{
  94:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_RC             0    //!< Internal 32kHz RC oscillator.
  95:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_XTAL           1    //!< External 32kHz crystal oscillator.
  96:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_BYPASS         2    //!< External 32kHz bypass oscillator.
  97:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_4M_RC            3    //!< Internal 4MHz RC oscillator.
  98:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_8M_RC            4    //!< Internal 8MHz RC oscillator.
  99:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_12M_RC           5    //!< Internal 12MHz RC oscillator.
 100:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_XTAL             6    //!< External crystal oscillator.
 101:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_BYPASS           7    //!< External bypass oscillator.
 102:.././hal/sam3u1c/inc/sam3u/osc.h **** //@}
 103:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 104:.././hal/sam3u1c/inc/sam3u/osc.h **** //! \name Oscillator clock speed in hertz
 105:.././hal/sam3u1c/inc/sam3u/osc.h **** //@{
 106:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_RC_HZ          CHIP_FREQ_SLCK_RC               //!< Internal 32kHz RC oscillat
 107:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_XTAL_HZ        BOARD_FREQ_SLCK_XTAL            //!< External 32kHz crystal osc
 108:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_BYPASS_HZ      BOARD_FREQ_SLCK_BYPASS          //!< External 32kHz bypass osci
 109:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_4M_RC_HZ         CHIP_FREQ_MAINCK_RC_4MHZ        //!< Internal 4MHz RC oscillato
 110:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_8M_RC_HZ         CHIP_FREQ_MAINCK_RC_8MHZ        //!< Internal 8MHz RC oscillato
 111:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_12M_RC_HZ        CHIP_FREQ_MAINCK_RC_12MHZ       //!< Internal 12MHz RC oscillat
 112:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillato
 113:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator
 114:.././hal/sam3u1c/inc/sam3u/osc.h **** //@}
 115:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 116:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline void osc_enable(uint32_t ul_id)
 117:.././hal/sam3u1c/inc/sam3u/osc.h **** {
  37              	 .loc 1 117 1
  38              	 .cfi_startproc
  39              	 
  40              	 
  41 0000 80B5     	 push {r7,lr}
  42              	.LCFI0:
  43              	 .cfi_def_cfa_offset 8
  44              	 .cfi_offset 7,-8
  45              	 .cfi_offset 14,-4
  46 0002 82B0     	 sub sp,sp,#8
  47              	.LCFI1:
  48              	 .cfi_def_cfa_offset 16
  49 0004 00AF     	 add r7,sp,#0
  50              	.LCFI2:
  51              	 .cfi_def_cfa_register 7
  52 0006 7860     	 str r0,[r7,#4]
 118:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
  53              	 .loc 1 118 2
  54 0008 7B68     	 ldr r3,[r7,#4]
  55 000a 072B     	 cmp r3,#7
  56 000c 2ED8     	 bhi .L12
  57 000e 01A2     	 adr r2,.L4
  58 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
  59              	 .p2align 2
  60              	.L4:
  61 0014 6B000000 	 .word .L13+1
  62 0018 35000000 	 .word .L10+1
  63 001c 3D000000 	 .word .L9+1
  64 0020 45000000 	 .word .L8+1
  65 0024 4D000000 	 .word .L7+1
  66 0028 55000000 	 .word .L6+1
  67 002c 5D000000 	 .word .L5+1
  68 0030 65000000 	 .word .L3+1
  69              	 .p2align 1
  70              	.L10:
 119:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 120:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 121:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 122:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 123:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  71              	 .loc 1 123 3
  72 0034 0020     	 movs r0,#0
  73 0036 0F4B     	 ldr r3,.L14
  74 0038 9847     	 blx r3
  75              	.LVL0:
 124:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  76              	 .loc 1 124 3
  77 003a 17E0     	 b .L2
  78              	.L9:
 125:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 126:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 127:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  79              	 .loc 1 127 3
  80 003c 0120     	 movs r0,#1
  81 003e 0D4B     	 ldr r3,.L14
  82 0040 9847     	 blx r3
  83              	.LVL1:
 128:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  84              	 .loc 1 128 3
  85 0042 13E0     	 b .L2
  86              	.L8:
 129:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 130:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 131:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 132:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  87              	 .loc 1 132 3
  88 0044 0020     	 movs r0,#0
  89 0046 0C4B     	 ldr r3,.L14+4
  90 0048 9847     	 blx r3
  91              	.LVL2:
 133:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  92              	 .loc 1 133 3
  93 004a 0FE0     	 b .L2
  94              	.L7:
 134:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 135:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 136:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  95              	 .loc 1 136 3
  96 004c 1020     	 movs r0,#16
  97 004e 0A4B     	 ldr r3,.L14+4
  98 0050 9847     	 blx r3
  99              	.LVL3:
 137:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 100              	 .loc 1 137 3
 101 0052 0BE0     	 b .L2
 102              	.L6:
 138:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 139:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 140:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
 103              	 .loc 1 140 3
 104 0054 2020     	 movs r0,#32
 105 0056 084B     	 ldr r3,.L14+4
 106 0058 9847     	 blx r3
 107              	.LVL4:
 141:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 108              	 .loc 1 141 3
 109 005a 07E0     	 b .L2
 110              	.L5:
 142:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 143:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 144:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 145:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
 111              	 .loc 1 145 3
 112 005c 3E20     	 movs r0,#62
 113 005e 074B     	 ldr r3,.L14+8
 114 0060 9847     	 blx r3
 115              	.LVL5:
 146:.././hal/sam3u1c/inc/sam3u/osc.h **** 				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
 147:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 116              	 .loc 1 147 3
 117 0062 03E0     	 b .L2
 118              	.L3:
 148:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 149:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 150:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_bypass_main_xtal();
 119              	 .loc 1 150 3
 120 0064 064B     	 ldr r3,.L14+12
 121 0066 9847     	 blx r3
 122              	.LVL6:
 151:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 123              	 .loc 1 151 3
 124 0068 00E0     	 b .L2
 125              	.L13:
 120:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 126              	 .loc 1 120 3
 127 006a 00BF     	 nop
 128              	.L2:
 129              	.L12:
 152:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 153:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 130              	 .loc 1 153 1
 131 006c 00BF     	 nop
 132 006e 0837     	 adds r7,r7,#8
 133              	.LCFI3:
 134              	 .cfi_def_cfa_offset 8
 135 0070 BD46     	 mov sp,r7
 136              	.LCFI4:
 137              	 .cfi_def_cfa_register 13
 138              	 
 139 0072 80BD     	 pop {r7,pc}
 140              	.L15:
 141              	 .align 2
 142              	.L14:
 143 0074 00000000 	 .word pmc_switch_sclk_to_32kxtal
 144 0078 00000000 	 .word pmc_osc_enable_fastrc
 145 007c 00000000 	 .word pmc_osc_enable_main_xtal
 146 0080 00000000 	 .word pmc_osc_bypass_main_xtal
 147              	 .cfi_endproc
 148              	.LFE69:
 150              	 .section .text.osc_is_ready,"ax",%progbits
 151              	 .align 1
 152              	 .syntax unified
 153              	 .thumb
 154              	 .thumb_func
 155              	 .fpu softvfp
 157              	osc_is_ready:
 158              	.LFB71:
 154:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 155:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline void osc_disable(uint32_t ul_id)
 156:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 157:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 158:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 159:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 160:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 161:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 162:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 163:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 164:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 165:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 166:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_fastrc();
 167:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 168:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 169:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 170:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_xtal(PMC_OSC_XTAL);
 171:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 172:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 173:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 174:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_xtal(PMC_OSC_BYPASS);
 175:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 176:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 177:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 178:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 179:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline bool osc_is_ready(uint32_t ul_id)
 180:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 159              	 .loc 1 180 1
 160              	 .cfi_startproc
 161              	 
 162              	 
 163 0000 80B5     	 push {r7,lr}
 164              	.LCFI5:
 165              	 .cfi_def_cfa_offset 8
 166              	 .cfi_offset 7,-8
 167              	 .cfi_offset 14,-4
 168 0002 82B0     	 sub sp,sp,#8
 169              	.LCFI6:
 170              	 .cfi_def_cfa_offset 16
 171 0004 00AF     	 add r7,sp,#0
 172              	.LCFI7:
 173              	 .cfi_def_cfa_register 7
 174 0006 7860     	 str r0,[r7,#4]
 181:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 175              	 .loc 1 181 2
 176 0008 7B68     	 ldr r3,[r7,#4]
 177 000a 072B     	 cmp r3,#7
 178 000c 2FD8     	 bhi .L17
 179 000e 01A2     	 adr r2,.L19
 180 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 181              	 .p2align 2
 182              	.L19:
 183 0014 35000000 	 .word .L22+1
 184 0018 39000000 	 .word .L21+1
 185 001c 39000000 	 .word .L21+1
 186 0020 4B000000 	 .word .L20+1
 187 0024 4B000000 	 .word .L20+1
 188 0028 4B000000 	 .word .L20+1
 189 002c 5D000000 	 .word .L18+1
 190 0030 5D000000 	 .word .L18+1
 191              	 .p2align 1
 192              	.L22:
 182:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 183:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return 1;
 193              	 .loc 1 183 10
 194 0034 0123     	 movs r3,#1
 195 0036 1BE0     	 b .L23
 196              	.L21:
 184:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 185:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 186:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 187:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_32kxtal();
 197              	 .loc 1 187 10
 198 0038 0F4B     	 ldr r3,.L24
 199 003a 9847     	 blx r3
 200              	.LVL7:
 201 003c 0346     	 mov r3,r0
 202 003e 002B     	 cmp r3,#0
 203 0040 14BF     	 ite ne
 204 0042 0123     	 movne r3,#1
 205 0044 0023     	 moveq r3,#0
 206 0046 DBB2     	 uxtb r3,r3
 207 0048 12E0     	 b .L23
 208              	.L20:
 188:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 189:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 190:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 191:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 192:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_fastrc();
 209              	 .loc 1 192 10
 210 004a 0C4B     	 ldr r3,.L24+4
 211 004c 9847     	 blx r3
 212              	.LVL8:
 213 004e 0346     	 mov r3,r0
 214 0050 002B     	 cmp r3,#0
 215 0052 14BF     	 ite ne
 216 0054 0123     	 movne r3,#1
 217 0056 0023     	 moveq r3,#0
 218 0058 DBB2     	 uxtb r3,r3
 219 005a 09E0     	 b .L23
 220              	.L18:
 193:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 194:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 195:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 196:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_main_xtal();
 221              	 .loc 1 196 10
 222 005c 084B     	 ldr r3,.L24+8
 223 005e 9847     	 blx r3
 224              	.LVL9:
 225 0060 0346     	 mov r3,r0
 226 0062 002B     	 cmp r3,#0
 227 0064 14BF     	 ite ne
 228 0066 0123     	 movne r3,#1
 229 0068 0023     	 moveq r3,#0
 230 006a DBB2     	 uxtb r3,r3
 231 006c 00E0     	 b .L23
 232              	.L17:
 197:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 198:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 199:.././hal/sam3u1c/inc/sam3u/osc.h **** 	return 0;
 233              	 .loc 1 199 9
 234 006e 0023     	 movs r3,#0
 235              	.L23:
 200:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 236              	 .loc 1 200 1
 237 0070 1846     	 mov r0,r3
 238 0072 0837     	 adds r7,r7,#8
 239              	.LCFI8:
 240              	 .cfi_def_cfa_offset 8
 241 0074 BD46     	 mov sp,r7
 242              	.LCFI9:
 243              	 .cfi_def_cfa_register 13
 244              	 
 245 0076 80BD     	 pop {r7,pc}
 246              	.L25:
 247              	 .align 2
 248              	.L24:
 249 0078 00000000 	 .word pmc_osc_is_ready_32kxtal
 250 007c 00000000 	 .word pmc_osc_is_ready_fastrc
 251 0080 00000000 	 .word pmc_osc_is_ready_main_xtal
 252              	 .cfi_endproc
 253              	.LFE71:
 255              	 .section .text.osc_get_rate,"ax",%progbits
 256              	 .align 1
 257              	 .syntax unified
 258              	 .thumb
 259              	 .thumb_func
 260              	 .fpu softvfp
 262              	osc_get_rate:
 263              	.LFB72:
 201:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 202:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline uint32_t osc_get_rate(uint32_t ul_id)
 203:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 264              	 .loc 1 203 1
 265              	 .cfi_startproc
 266              	 
 267              	 
 268              	 
 269 0000 80B4     	 push {r7}
 270              	.LCFI10:
 271              	 .cfi_def_cfa_offset 4
 272              	 .cfi_offset 7,-4
 273 0002 83B0     	 sub sp,sp,#12
 274              	.LCFI11:
 275              	 .cfi_def_cfa_offset 16
 276 0004 00AF     	 add r7,sp,#0
 277              	.LCFI12:
 278              	 .cfi_def_cfa_register 7
 279 0006 7860     	 str r0,[r7,#4]
 204:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 280              	 .loc 1 204 2
 281 0008 7B68     	 ldr r3,[r7,#4]
 282 000a 072B     	 cmp r3,#7
 283 000c 23D8     	 bhi .L27
 284 000e 01A2     	 adr r2,.L29
 285 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 286              	 .p2align 2
 287              	.L29:
 288 0014 35000000 	 .word .L36+1
 289 0018 3B000000 	 .word .L35+1
 290 001c 3F000000 	 .word .L34+1
 291 0020 43000000 	 .word .L33+1
 292 0024 47000000 	 .word .L32+1
 293 0028 4B000000 	 .word .L31+1
 294 002c 4F000000 	 .word .L30+1
 295 0030 53000000 	 .word .L28+1
 296              	 .p2align 1
 297              	.L36:
 205:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 206:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_SLCK_32K_RC_HZ;
 298              	 .loc 1 206 10
 299 0034 4FF4FA43 	 mov r3,#32000
 300 0038 0EE0     	 b .L37
 301              	.L35:
 207:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 208:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 209:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_SLCK_XTAL;
 302              	 .loc 1 209 10
 303 003a 0023     	 movs r3,#0
 304 003c 0CE0     	 b .L37
 305              	.L34:
 210:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 211:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 212:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_SLCK_BYPASS;
 306              	 .loc 1 212 10
 307 003e 0023     	 movs r3,#0
 308 0040 0AE0     	 b .L37
 309              	.L33:
 213:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 214:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 215:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_MAINCK_4M_RC_HZ;
 310              	 .loc 1 215 10
 311 0042 084B     	 ldr r3,.L38
 312 0044 08E0     	 b .L37
 313              	.L32:
 216:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 217:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 218:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_MAINCK_8M_RC_HZ;
 314              	 .loc 1 218 10
 315 0046 084B     	 ldr r3,.L38+4
 316 0048 06E0     	 b .L37
 317              	.L31:
 219:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 220:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 221:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_MAINCK_12M_RC_HZ;
 318              	 .loc 1 221 10
 319 004a 084B     	 ldr r3,.L38+8
 320 004c 04E0     	 b .L37
 321              	.L30:
 222:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 223:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 224:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_MAINCK_XTAL;
 322              	 .loc 1 224 10
 323 004e 074B     	 ldr r3,.L38+8
 324 0050 02E0     	 b .L37
 325              	.L28:
 225:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 226:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 227:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_MAINCK_BYPASS;
 326              	 .loc 1 227 10
 327 0052 064B     	 ldr r3,.L38+8
 328 0054 00E0     	 b .L37
 329              	.L27:
 228:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 229:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 230:.././hal/sam3u1c/inc/sam3u/osc.h **** 	return 0;
 330              	 .loc 1 230 9
 331 0056 0023     	 movs r3,#0
 332              	.L37:
 231:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 333              	 .loc 1 231 1
 334 0058 1846     	 mov r0,r3
 335 005a 0C37     	 adds r7,r7,#12
 336              	.LCFI13:
 337              	 .cfi_def_cfa_offset 4
 338 005c BD46     	 mov sp,r7
 339              	.LCFI14:
 340              	 .cfi_def_cfa_register 13
 341              	 
 342 005e 80BC     	 pop {r7}
 343              	.LCFI15:
 344              	 .cfi_restore 7
 345              	 .cfi_def_cfa_offset 0
 346 0060 7047     	 bx lr
 347              	.L39:
 348 0062 00BF     	 .align 2
 349              	.L38:
 350 0064 00093D00 	 .word 4000000
 351 0068 00127A00 	 .word 8000000
 352 006c 001BB700 	 .word 12000000
 353              	 .cfi_endproc
 354              	.LFE72:
 356              	 .section .text.osc_wait_ready,"ax",%progbits
 357              	 .align 1
 358              	 .syntax unified
 359              	 .thumb
 360              	 .thumb_func
 361              	 .fpu softvfp
 363              	osc_wait_ready:
 364              	.LFB73:
 365              	 .file 2 ".././hal/sam3u1c/inc/osc.h"
   1:.././hal/sam3u1c/inc/osc.h **** /**
   2:.././hal/sam3u1c/inc/osc.h ****  * \file
   3:.././hal/sam3u1c/inc/osc.h ****  *
   4:.././hal/sam3u1c/inc/osc.h ****  * \brief Oscillator management
   5:.././hal/sam3u1c/inc/osc.h ****  *
   6:.././hal/sam3u1c/inc/osc.h ****  * Copyright (c) 2010-2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/osc.h ****  *
   8:.././hal/sam3u1c/inc/osc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/osc.h ****  *
  10:.././hal/sam3u1c/inc/osc.h ****  * \page License
  11:.././hal/sam3u1c/inc/osc.h ****  *
  12:.././hal/sam3u1c/inc/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/osc.h ****  *
  15:.././hal/sam3u1c/inc/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/osc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/osc.h ****  *
  18:.././hal/sam3u1c/inc/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/osc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/osc.h ****  *
  22:.././hal/sam3u1c/inc/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/osc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/osc.h ****  *
  25:.././hal/sam3u1c/inc/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/osc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/osc.h ****  *
  28:.././hal/sam3u1c/inc/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/osc.h ****  *
  40:.././hal/sam3u1c/inc/osc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/osc.h ****  *
  42:.././hal/sam3u1c/inc/osc.h ****  */
  43:.././hal/sam3u1c/inc/osc.h **** #ifndef OSC_H_INCLUDED
  44:.././hal/sam3u1c/inc/osc.h **** #define OSC_H_INCLUDED
  45:.././hal/sam3u1c/inc/osc.h **** 
  46:.././hal/sam3u1c/inc/osc.h **** #include "parts.h"
  47:.././hal/sam3u1c/inc/osc.h **** #include "conf_clock.h"
  48:.././hal/sam3u1c/inc/osc.h **** 
  49:.././hal/sam3u1c/inc/osc.h **** #if SAM3S
  50:.././hal/sam3u1c/inc/osc.h **** # include "sam3s/osc.h"
  51:.././hal/sam3u1c/inc/osc.h **** #elif SAM3XA
  52:.././hal/sam3u1c/inc/osc.h **** # include "sam3x/osc.h"
  53:.././hal/sam3u1c/inc/osc.h **** #elif SAM3U
  54:.././hal/sam3u1c/inc/osc.h **** # include "sam3u/osc.h"
  55:.././hal/sam3u1c/inc/osc.h **** #elif SAM3N
  56:.././hal/sam3u1c/inc/osc.h **** # include "sam3n/osc.h"
  57:.././hal/sam3u1c/inc/osc.h **** #elif SAM4S
  58:.././hal/sam3u1c/inc/osc.h **** # include "sam4s/osc.h"
  59:.././hal/sam3u1c/inc/osc.h **** #elif SAM4E
  60:.././hal/sam3u1c/inc/osc.h **** # include "sam4e/osc.h"
  61:.././hal/sam3u1c/inc/osc.h **** #elif SAM4C
  62:.././hal/sam3u1c/inc/osc.h **** # include "sam4c/osc.h"
  63:.././hal/sam3u1c/inc/osc.h **** #elif SAM4CM
  64:.././hal/sam3u1c/inc/osc.h **** # include "sam4cm/osc.h"
  65:.././hal/sam3u1c/inc/osc.h **** #elif SAM4CP
  66:.././hal/sam3u1c/inc/osc.h **** # include "sam4cp/osc.h"
  67:.././hal/sam3u1c/inc/osc.h **** #elif SAM4L
  68:.././hal/sam3u1c/inc/osc.h **** # include "sam4l/osc.h"
  69:.././hal/sam3u1c/inc/osc.h **** #elif SAM4N
  70:.././hal/sam3u1c/inc/osc.h **** # include "sam4n/osc.h"
  71:.././hal/sam3u1c/inc/osc.h **** #elif SAMG
  72:.././hal/sam3u1c/inc/osc.h **** # include "samg/osc.h"
  73:.././hal/sam3u1c/inc/osc.h **** #elif (UC3A0 || UC3A1)
  74:.././hal/sam3u1c/inc/osc.h **** # include "uc3a0_a1/osc.h"
  75:.././hal/sam3u1c/inc/osc.h **** #elif UC3A3
  76:.././hal/sam3u1c/inc/osc.h **** # include "uc3a3_a4/osc.h"
  77:.././hal/sam3u1c/inc/osc.h **** #elif UC3B
  78:.././hal/sam3u1c/inc/osc.h **** # include "uc3b0_b1/osc.h"
  79:.././hal/sam3u1c/inc/osc.h **** #elif UC3C
  80:.././hal/sam3u1c/inc/osc.h **** # include "uc3c/osc.h"
  81:.././hal/sam3u1c/inc/osc.h **** #elif UC3D
  82:.././hal/sam3u1c/inc/osc.h **** # include "uc3d/osc.h"
  83:.././hal/sam3u1c/inc/osc.h **** #elif UC3L
  84:.././hal/sam3u1c/inc/osc.h **** # include "uc3l/osc.h"
  85:.././hal/sam3u1c/inc/osc.h **** #elif XMEGA
  86:.././hal/sam3u1c/inc/osc.h **** # include "xmega/osc.h"
  87:.././hal/sam3u1c/inc/osc.h **** #else
  88:.././hal/sam3u1c/inc/osc.h **** # error Unsupported chip type
  89:.././hal/sam3u1c/inc/osc.h **** #endif
  90:.././hal/sam3u1c/inc/osc.h **** 
  91:.././hal/sam3u1c/inc/osc.h **** /**
  92:.././hal/sam3u1c/inc/osc.h ****  * \ingroup clk_group
  93:.././hal/sam3u1c/inc/osc.h ****  * \defgroup osc_group Oscillator Management
  94:.././hal/sam3u1c/inc/osc.h ****  *
  95:.././hal/sam3u1c/inc/osc.h ****  * This group contains functions and definitions related to configuring
  96:.././hal/sam3u1c/inc/osc.h ****  * and enabling/disabling on-chip oscillators. Internal RC-oscillators,
  97:.././hal/sam3u1c/inc/osc.h ****  * external crystal oscillators and external clock generators are
  98:.././hal/sam3u1c/inc/osc.h ****  * supported by this module. What all of these have in common is that
  99:.././hal/sam3u1c/inc/osc.h ****  * they swing at a fixed, nominal frequency which is normally not
 100:.././hal/sam3u1c/inc/osc.h ****  * adjustable.
 101:.././hal/sam3u1c/inc/osc.h ****  *
 102:.././hal/sam3u1c/inc/osc.h ****  * \par Example: Enabling an oscillator
 103:.././hal/sam3u1c/inc/osc.h ****  *
 104:.././hal/sam3u1c/inc/osc.h ****  * The following example demonstrates how to enable the external
 105:.././hal/sam3u1c/inc/osc.h ****  * oscillator on XMEGA A and wait for it to be ready to use. The
 106:.././hal/sam3u1c/inc/osc.h ****  * oscillator identifiers are platform-specific, so while the same
 107:.././hal/sam3u1c/inc/osc.h ****  * procedure is used on all platforms, the parameter to osc_enable()
 108:.././hal/sam3u1c/inc/osc.h ****  * will be different from device to device.
 109:.././hal/sam3u1c/inc/osc.h ****  * \code
 110:.././hal/sam3u1c/inc/osc.h **** 	osc_enable(OSC_ID_XOSC);
 111:.././hal/sam3u1c/inc/osc.h **** 	osc_wait_ready(OSC_ID_XOSC); \endcode
 112:.././hal/sam3u1c/inc/osc.h ****  *
 113:.././hal/sam3u1c/inc/osc.h ****  * \section osc_group_board Board-specific Definitions
 114:.././hal/sam3u1c/inc/osc.h ****  * If external oscillators are used, the board code must provide the
 115:.././hal/sam3u1c/inc/osc.h ****  * following definitions for each of those:
 116:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_HZ: The nominal frequency of the oscillator.
 117:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_STARTUP_US: The startup time of the
 118:.././hal/sam3u1c/inc/osc.h ****  *     oscillator in microseconds.
 119:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_TYPE: The type of oscillator connected, i.e.
 120:.././hal/sam3u1c/inc/osc.h ****  *     whether it's a crystal or external clock, and sometimes what kind
 121:.././hal/sam3u1c/inc/osc.h ****  *     of crystal it is. The meaning of this value is platform-specific.
 122:.././hal/sam3u1c/inc/osc.h ****  *
 123:.././hal/sam3u1c/inc/osc.h ****  * @{
 124:.././hal/sam3u1c/inc/osc.h ****  */
 125:.././hal/sam3u1c/inc/osc.h **** 
 126:.././hal/sam3u1c/inc/osc.h **** //! \name Oscillator Management
 127:.././hal/sam3u1c/inc/osc.h **** //@{
 128:.././hal/sam3u1c/inc/osc.h **** /**
 129:.././hal/sam3u1c/inc/osc.h ****  * \fn void osc_enable(uint8_t id)
 130:.././hal/sam3u1c/inc/osc.h ****  * \brief Enable oscillator \a id
 131:.././hal/sam3u1c/inc/osc.h ****  *
 132:.././hal/sam3u1c/inc/osc.h ****  * The startup time and mode value is automatically determined based on
 133:.././hal/sam3u1c/inc/osc.h ****  * definitions in the board code.
 134:.././hal/sam3u1c/inc/osc.h ****  */
 135:.././hal/sam3u1c/inc/osc.h **** /**
 136:.././hal/sam3u1c/inc/osc.h ****  * \fn void osc_disable(uint8_t id)
 137:.././hal/sam3u1c/inc/osc.h ****  * \brief Disable oscillator \a id
 138:.././hal/sam3u1c/inc/osc.h ****  */
 139:.././hal/sam3u1c/inc/osc.h **** /**
 140:.././hal/sam3u1c/inc/osc.h ****  * \fn osc_is_ready(uint8_t id)
 141:.././hal/sam3u1c/inc/osc.h ****  * \brief Determine whether oscillator \a id is ready.
 142:.././hal/sam3u1c/inc/osc.h ****  * \retval true Oscillator \a id is running and ready to use as a clock
 143:.././hal/sam3u1c/inc/osc.h ****  * source.
 144:.././hal/sam3u1c/inc/osc.h ****  * \retval false Oscillator \a id is not running.
 145:.././hal/sam3u1c/inc/osc.h ****  */
 146:.././hal/sam3u1c/inc/osc.h **** /**
 147:.././hal/sam3u1c/inc/osc.h ****  * \fn uint32_t osc_get_rate(uint8_t id)
 148:.././hal/sam3u1c/inc/osc.h ****  * \brief Return the frequency of oscillator \a id in Hz
 149:.././hal/sam3u1c/inc/osc.h ****  */
 150:.././hal/sam3u1c/inc/osc.h **** 
 151:.././hal/sam3u1c/inc/osc.h **** #ifndef __ASSEMBLY__
 152:.././hal/sam3u1c/inc/osc.h **** 
 153:.././hal/sam3u1c/inc/osc.h **** /**
 154:.././hal/sam3u1c/inc/osc.h ****  * \brief Wait until the oscillator identified by \a id is ready
 155:.././hal/sam3u1c/inc/osc.h ****  *
 156:.././hal/sam3u1c/inc/osc.h ****  * This function will busy-wait for the oscillator identified by \a id
 157:.././hal/sam3u1c/inc/osc.h ****  * to become stable and ready to use as a clock source.
 158:.././hal/sam3u1c/inc/osc.h ****  *
 159:.././hal/sam3u1c/inc/osc.h ****  * \param id A number identifying the oscillator to wait for.
 160:.././hal/sam3u1c/inc/osc.h ****  */
 161:.././hal/sam3u1c/inc/osc.h **** static inline void osc_wait_ready(uint8_t id)
 162:.././hal/sam3u1c/inc/osc.h **** {
 366              	 .loc 2 162 1
 367              	 .cfi_startproc
 368              	 
 369              	 
 370 0000 80B5     	 push {r7,lr}
 371              	.LCFI16:
 372              	 .cfi_def_cfa_offset 8
 373              	 .cfi_offset 7,-8
 374              	 .cfi_offset 14,-4
 375 0002 82B0     	 sub sp,sp,#8
 376              	.LCFI17:
 377              	 .cfi_def_cfa_offset 16
 378 0004 00AF     	 add r7,sp,#0
 379              	.LCFI18:
 380              	 .cfi_def_cfa_register 7
 381 0006 0346     	 mov r3,r0
 382 0008 FB71     	 strb r3,[r7,#7]
 163:.././hal/sam3u1c/inc/osc.h **** 	while (!osc_is_ready(id)) {
 383              	 .loc 2 163 8
 384 000a 00BF     	 nop
 385              	.L41:
 386              	 .loc 2 163 10 discriminator 1
 387 000c FB79     	 ldrb r3,[r7,#7]
 388 000e 1846     	 mov r0,r3
 389 0010 054B     	 ldr r3,.L42
 390 0012 9847     	 blx r3
 391              	.LVL10:
 392 0014 0346     	 mov r3,r0
 393              	 .loc 2 163 9 discriminator 1
 394 0016 83F00103 	 eor r3,r3,#1
 395 001a DBB2     	 uxtb r3,r3
 396              	 .loc 2 163 8 discriminator 1
 397 001c 002B     	 cmp r3,#0
 398 001e F5D1     	 bne .L41
 164:.././hal/sam3u1c/inc/osc.h **** 		/* Do nothing */
 165:.././hal/sam3u1c/inc/osc.h **** 	}
 166:.././hal/sam3u1c/inc/osc.h **** }
 399              	 .loc 2 166 1
 400 0020 00BF     	 nop
 401 0022 0837     	 adds r7,r7,#8
 402              	.LCFI19:
 403              	 .cfi_def_cfa_offset 8
 404 0024 BD46     	 mov sp,r7
 405              	.LCFI20:
 406              	 .cfi_def_cfa_register 13
 407              	 
 408 0026 80BD     	 pop {r7,pc}
 409              	.L43:
 410              	 .align 2
 411              	.L42:
 412 0028 00000000 	 .word osc_is_ready
 413              	 .cfi_endproc
 414              	.LFE73:
 416              	 .section .text.pll_config_init,"ax",%progbits
 417              	 .align 1
 418              	 .syntax unified
 419              	 .thumb
 420              	 .thumb_func
 421              	 .fpu softvfp
 423              	pll_config_init:
 424              	.LFB74:
 425              	 .file 3 ".././hal/sam3u1c/inc/sam3u/pll.h"
   1:.././hal/sam3u1c/inc/sam3u/pll.h **** /**
   2:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \file
   3:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
   4:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \brief Chip-specific PLL definitions.
   5:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
   6:.././hal/sam3u1c/inc/sam3u/pll.h ****  * Copyright (c) 2011 - 2013 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
   8:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  10:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \page License
  11:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  12:.././hal/sam3u1c/inc/sam3u/pll.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sam3u/pll.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  15:.././hal/sam3u1c/inc/sam3u/pll.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sam3u/pll.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  18:.././hal/sam3u1c/inc/sam3u/pll.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sam3u/pll.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sam3u/pll.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  22:.././hal/sam3u1c/inc/sam3u/pll.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sam3u/pll.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  25:.././hal/sam3u1c/inc/sam3u/pll.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sam3u/pll.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  28:.././hal/sam3u1c/inc/sam3u/pll.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sam3u/pll.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sam3u/pll.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sam3u/pll.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sam3u/pll.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sam3u/pll.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sam3u/pll.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sam3u/pll.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sam3u/pll.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sam3u/pll.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sam3u/pll.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  40:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  42:.././hal/sam3u1c/inc/sam3u/pll.h ****  */
  43:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  44:.././hal/sam3u1c/inc/sam3u/pll.h **** #ifndef CHIP_PLL_H_INCLUDED
  45:.././hal/sam3u1c/inc/sam3u/pll.h **** #define CHIP_PLL_H_INCLUDED
  46:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  47:.././hal/sam3u1c/inc/sam3u/pll.h **** #include <osc.h>
  48:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  49:.././hal/sam3u1c/inc/sam3u/pll.h **** /// @cond 0
  50:.././hal/sam3u1c/inc/sam3u/pll.h **** /**INDENT-OFF**/
  51:.././hal/sam3u1c/inc/sam3u/pll.h **** #ifdef __cplusplus
  52:.././hal/sam3u1c/inc/sam3u/pll.h **** extern "C" {
  53:.././hal/sam3u1c/inc/sam3u/pll.h **** #endif
  54:.././hal/sam3u1c/inc/sam3u/pll.h **** /**INDENT-ON**/
  55:.././hal/sam3u1c/inc/sam3u/pll.h **** /// @endcond
  56:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  57:.././hal/sam3u1c/inc/sam3u/pll.h **** /**
  58:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \weakgroup pll_group
  59:.././hal/sam3u1c/inc/sam3u/pll.h ****  * @{
  60:.././hal/sam3u1c/inc/sam3u/pll.h ****  */
  61:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  62:.././hal/sam3u1c/inc/sam3u/pll.h **** #define PLL_OUTPUT_MIN_HZ   96000000
  63:.././hal/sam3u1c/inc/sam3u/pll.h **** #define PLL_OUTPUT_MAX_HZ   192000000
  64:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  65:.././hal/sam3u1c/inc/sam3u/pll.h **** #define PLL_INPUT_MIN_HZ    8000000
  66:.././hal/sam3u1c/inc/sam3u/pll.h **** #define PLL_INPUT_MAX_HZ    16000000
  67:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  68:.././hal/sam3u1c/inc/sam3u/pll.h **** #define NR_PLLS             2
  69:.././hal/sam3u1c/inc/sam3u/pll.h **** #define PLLA_ID             0
  70:.././hal/sam3u1c/inc/sam3u/pll.h **** #define UPLL_ID             1   //!< USB UTMI PLL.
  71:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  72:.././hal/sam3u1c/inc/sam3u/pll.h **** #define PLL_UPLL_HZ         480000000
  73:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  74:.././hal/sam3u1c/inc/sam3u/pll.h **** #define PLL_COUNT           0x3fU
  75:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  76:.././hal/sam3u1c/inc/sam3u/pll.h **** enum pll_source {
  77:.././hal/sam3u1c/inc/sam3u/pll.h **** 	PLL_SRC_MAINCK_4M_RC  = OSC_MAINCK_4M_RC,     //!< Internal 4MHz RC oscillator.
  78:.././hal/sam3u1c/inc/sam3u/pll.h **** 	PLL_SRC_MAINCK_8M_RC  = OSC_MAINCK_8M_RC,     //!< Internal 8MHz RC oscillator.
  79:.././hal/sam3u1c/inc/sam3u/pll.h **** 	PLL_SRC_MAINCK_12M_RC = OSC_MAINCK_12M_RC,    //!< Internal 12MHz RC oscillator.
  80:.././hal/sam3u1c/inc/sam3u/pll.h **** 	PLL_SRC_MAINCK_XTAL   = OSC_MAINCK_XTAL,      //!< External crystal oscillator.
  81:.././hal/sam3u1c/inc/sam3u/pll.h **** 	PLL_SRC_MAINCK_BYPASS = OSC_MAINCK_BYPASS,    //!< External bypass oscillator.
  82:.././hal/sam3u1c/inc/sam3u/pll.h **** 	PLL_NR_SOURCES,                               //!< Number of PLL sources.
  83:.././hal/sam3u1c/inc/sam3u/pll.h **** };
  84:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  85:.././hal/sam3u1c/inc/sam3u/pll.h **** struct pll_config {
  86:.././hal/sam3u1c/inc/sam3u/pll.h **** 	uint32_t ctrl;
  87:.././hal/sam3u1c/inc/sam3u/pll.h **** };
  88:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  89:.././hal/sam3u1c/inc/sam3u/pll.h **** #define pll_get_default_rate(pll_id)                                       \
  90:.././hal/sam3u1c/inc/sam3u/pll.h **** 	((osc_get_rate(CONFIG_PLL##pll_id##_SOURCE)                        \
  91:.././hal/sam3u1c/inc/sam3u/pll.h **** 			* CONFIG_PLL##pll_id##_MUL)                        \
  92:.././hal/sam3u1c/inc/sam3u/pll.h **** 			/ CONFIG_PLL##pll_id##_DIV)
  93:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  94:.././hal/sam3u1c/inc/sam3u/pll.h **** /* Force UTMI PLL parameters (Hardware defined) */
  95:.././hal/sam3u1c/inc/sam3u/pll.h **** #ifdef CONFIG_PLL1_SOURCE
  96:.././hal/sam3u1c/inc/sam3u/pll.h **** # undef CONFIG_PLL1_SOURCE
  97:.././hal/sam3u1c/inc/sam3u/pll.h **** #endif
  98:.././hal/sam3u1c/inc/sam3u/pll.h **** #ifdef CONFIG_PLL1_MUL
  99:.././hal/sam3u1c/inc/sam3u/pll.h **** # undef CONFIG_PLL1_MUL
 100:.././hal/sam3u1c/inc/sam3u/pll.h **** #endif
 101:.././hal/sam3u1c/inc/sam3u/pll.h **** #ifdef CONFIG_PLL1_DIV
 102:.././hal/sam3u1c/inc/sam3u/pll.h **** # undef CONFIG_PLL1_DIV
 103:.././hal/sam3u1c/inc/sam3u/pll.h **** #endif
 104:.././hal/sam3u1c/inc/sam3u/pll.h **** #define CONFIG_PLL1_SOURCE  PLL_SRC_MAINCK_XTAL
 105:.././hal/sam3u1c/inc/sam3u/pll.h **** #define CONFIG_PLL1_MUL     0
 106:.././hal/sam3u1c/inc/sam3u/pll.h **** #define CONFIG_PLL1_DIV     0
 107:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 108:.././hal/sam3u1c/inc/sam3u/pll.h **** /**
 109:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \note The SAM3U PLL hardware interprets mul as mul+1. For readability the
 110:.././hal/sam3u1c/inc/sam3u/pll.h ****  *       hardware mul+1 is hidden in this implementation. Use mul as mul
 111:.././hal/sam3u1c/inc/sam3u/pll.h ****  *       effective value.
 112:.././hal/sam3u1c/inc/sam3u/pll.h ****  */
 113:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline void pll_config_init(struct pll_config *p_cfg,
 114:.././hal/sam3u1c/inc/sam3u/pll.h **** 		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
 115:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 426              	 .loc 3 115 1
 427              	 .cfi_startproc
 428              	 
 429              	 
 430 0000 80B5     	 push {r7,lr}
 431              	.LCFI21:
 432              	 .cfi_def_cfa_offset 8
 433              	 .cfi_offset 7,-8
 434              	 .cfi_offset 14,-4
 435 0002 86B0     	 sub sp,sp,#24
 436              	.LCFI22:
 437              	 .cfi_def_cfa_offset 32
 438 0004 00AF     	 add r7,sp,#0
 439              	.LCFI23:
 440              	 .cfi_def_cfa_register 7
 441 0006 F860     	 str r0,[r7,#12]
 442 0008 7A60     	 str r2,[r7,#4]
 443 000a 3B60     	 str r3,[r7]
 444 000c 0B46     	 mov r3,r1
 445 000e FB72     	 strb r3,[r7,#11]
 116:.././hal/sam3u1c/inc/sam3u/pll.h **** 	uint32_t vco_hz;
 117:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 118:.././hal/sam3u1c/inc/sam3u/pll.h **** 	Assert(e_src < PLL_NR_SOURCES);
 119:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 120:.././hal/sam3u1c/inc/sam3u/pll.h **** 	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
 446              	 .loc 3 120 5
 447 0010 7B68     	 ldr r3,[r7,#4]
 448 0012 002B     	 cmp r3,#0
 449 0014 07D1     	 bne .L45
 450              	 .loc 3 120 18 discriminator 1
 451 0016 3B68     	 ldr r3,[r7]
 452 0018 002B     	 cmp r3,#0
 453 001a 04D1     	 bne .L45
 121:.././hal/sam3u1c/inc/sam3u/pll.h **** 		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
 454              	 .loc 3 121 15
 455 001c FB68     	 ldr r3,[r7,#12]
 456 001e 4FF47002 	 mov r2,#15728640
 457 0022 1A60     	 str r2,[r3]
 458 0024 19E0     	 b .L46
 459              	.L45:
 122:.././hal/sam3u1c/inc/sam3u/pll.h **** 	} else { /* PLLA */
 123:.././hal/sam3u1c/inc/sam3u/pll.h **** 		/* Calculate internal VCO frequency */
 124:.././hal/sam3u1c/inc/sam3u/pll.h **** 		vco_hz = osc_get_rate(e_src) / ul_div;
 460              	 .loc 3 124 12
 461 0026 FB7A     	 ldrb r3,[r7,#11]
 462 0028 1846     	 mov r0,r3
 463 002a 0E4B     	 ldr r3,.L47
 464 002c 9847     	 blx r3
 465              	.LVL11:
 466 002e 0246     	 mov r2,r0
 467              	 .loc 3 124 10
 468 0030 7B68     	 ldr r3,[r7,#4]
 469 0032 B2FBF3F3 	 udiv r3,r2,r3
 470 0036 7B61     	 str r3,[r7,#20]
 125:.././hal/sam3u1c/inc/sam3u/pll.h **** 		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
 126:.././hal/sam3u1c/inc/sam3u/pll.h **** 		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
 127:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 128:.././hal/sam3u1c/inc/sam3u/pll.h **** 		vco_hz *= ul_mul;
 471              	 .loc 3 128 10
 472 0038 7B69     	 ldr r3,[r7,#20]
 473 003a 3A68     	 ldr r2,[r7]
 474 003c 02FB03F3 	 mul r3,r2,r3
 475 0040 7B61     	 str r3,[r7,#20]
 129:.././hal/sam3u1c/inc/sam3u/pll.h **** 		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
 130:.././hal/sam3u1c/inc/sam3u/pll.h **** 		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
 131:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 132:.././hal/sam3u1c/inc/sam3u/pll.h **** 		/* PMC hardware will automatically make it mul+1 */
 133:.././hal/sam3u1c/inc/sam3u/pll.h **** 		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
 476              	 .loc 3 133 17
 477 0042 3B68     	 ldr r3,[r7]
 478 0044 013B     	 subs r3,r3,#1
 479 0046 1A04     	 lsls r2,r3,#16
 480 0048 074B     	 ldr r3,.L47+4
 481 004a 1340     	 ands r3,r3,r2
 134:.././hal/sam3u1c/inc/sam3u/pll.h **** 			CKGR_PLLAR_DIVA(ul_div) |
 482              	 .loc 3 134 4
 483 004c 7A68     	 ldr r2,[r7,#4]
 484 004e D2B2     	 uxtb r2,r2
 133:.././hal/sam3u1c/inc/sam3u/pll.h **** 			CKGR_PLLAR_DIVA(ul_div) |
 485              	 .loc 3 133 45
 486 0050 1343     	 orrs r3,r3,r2
 487              	 .loc 3 134 28
 488 0052 43F47C52 	 orr r2,r3,#16128
 133:.././hal/sam3u1c/inc/sam3u/pll.h **** 			CKGR_PLLAR_DIVA(ul_div) |
 489              	 .loc 3 133 15
 490 0056 FB68     	 ldr r3,[r7,#12]
 491 0058 1A60     	 str r2,[r3]
 492              	.L46:
 135:.././hal/sam3u1c/inc/sam3u/pll.h **** 			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
 136:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 137:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 493              	 .loc 3 137 1
 494 005a 00BF     	 nop
 495 005c 1837     	 adds r7,r7,#24
 496              	.LCFI24:
 497              	 .cfi_def_cfa_offset 8
 498 005e BD46     	 mov sp,r7
 499              	.LCFI25:
 500              	 .cfi_def_cfa_register 13
 501              	 
 502 0060 80BD     	 pop {r7,pc}
 503              	.L48:
 504 0062 00BF     	 .align 2
 505              	.L47:
 506 0064 00000000 	 .word osc_get_rate
 507 0068 0000FF07 	 .word 134152192
 508              	 .cfi_endproc
 509              	.LFE74:
 511              	 .section .text.pll_enable,"ax",%progbits
 512              	 .align 1
 513              	 .syntax unified
 514              	 .thumb
 515              	 .thumb_func
 516              	 .fpu softvfp
 518              	pll_enable:
 519              	.LFB77:
 138:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 139:.././hal/sam3u1c/inc/sam3u/pll.h **** #define pll_config_defaults(cfg, pll_id)                                   \
 140:.././hal/sam3u1c/inc/sam3u/pll.h **** 	pll_config_init(cfg,                                               \
 141:.././hal/sam3u1c/inc/sam3u/pll.h **** 			CONFIG_PLL##pll_id##_SOURCE,                       \
 142:.././hal/sam3u1c/inc/sam3u/pll.h **** 			CONFIG_PLL##pll_id##_DIV,                          \
 143:.././hal/sam3u1c/inc/sam3u/pll.h **** 			CONFIG_PLL##pll_id##_MUL)
 144:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 145:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline void pll_config_read(struct pll_config *p_cfg, uint32_t ul_pll_id)
 146:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 147:.././hal/sam3u1c/inc/sam3u/pll.h **** 	Assert(ul_pll_id < NR_PLLS);
 148:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 149:.././hal/sam3u1c/inc/sam3u/pll.h **** 	if (ul_pll_id == PLLA_ID) {
 150:.././hal/sam3u1c/inc/sam3u/pll.h **** 		p_cfg->ctrl = PMC->CKGR_PLLAR;
 151:.././hal/sam3u1c/inc/sam3u/pll.h **** 	} else {
 152:.././hal/sam3u1c/inc/sam3u/pll.h **** 		p_cfg->ctrl = PMC->CKGR_UCKR;
 153:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 154:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 155:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 156:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline void pll_config_write(const struct pll_config *p_cfg,
 157:.././hal/sam3u1c/inc/sam3u/pll.h **** 		uint32_t ul_pll_id)
 158:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 159:.././hal/sam3u1c/inc/sam3u/pll.h **** 	Assert(ul_pll_id < NR_PLLS);
 160:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 161:.././hal/sam3u1c/inc/sam3u/pll.h **** 	if (ul_pll_id == PLLA_ID) {
 162:.././hal/sam3u1c/inc/sam3u/pll.h **** 		pmc_disable_pllack(); // Always stop PLL first!
 163:.././hal/sam3u1c/inc/sam3u/pll.h **** 		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
 164:.././hal/sam3u1c/inc/sam3u/pll.h **** 	} else {
 165:.././hal/sam3u1c/inc/sam3u/pll.h **** 		PMC->CKGR_UCKR = p_cfg->ctrl;
 166:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 167:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 168:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 169:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline void pll_enable(const struct pll_config *p_cfg,
 170:.././hal/sam3u1c/inc/sam3u/pll.h **** 		uint32_t ul_pll_id)
 171:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 520              	 .loc 3 171 1
 521              	 .cfi_startproc
 522              	 
 523              	 
 524 0000 80B5     	 push {r7,lr}
 525              	.LCFI26:
 526              	 .cfi_def_cfa_offset 8
 527              	 .cfi_offset 7,-8
 528              	 .cfi_offset 14,-4
 529 0002 82B0     	 sub sp,sp,#8
 530              	.LCFI27:
 531              	 .cfi_def_cfa_offset 16
 532 0004 00AF     	 add r7,sp,#0
 533              	.LCFI28:
 534              	 .cfi_def_cfa_register 7
 535 0006 7860     	 str r0,[r7,#4]
 536 0008 3960     	 str r1,[r7]
 172:.././hal/sam3u1c/inc/sam3u/pll.h **** 	Assert(ul_pll_id < NR_PLLS);
 173:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 174:.././hal/sam3u1c/inc/sam3u/pll.h **** 	if (ul_pll_id == PLLA_ID) {
 537              	 .loc 3 174 5
 538 000a 3B68     	 ldr r3,[r7]
 539 000c 002B     	 cmp r3,#0
 540 000e 08D1     	 bne .L50
 175:.././hal/sam3u1c/inc/sam3u/pll.h **** 		pmc_disable_pllack(); // Always stop PLL first!
 541              	 .loc 3 175 3
 542 0010 094B     	 ldr r3,.L53
 543 0012 9847     	 blx r3
 544              	.LVL12:
 176:.././hal/sam3u1c/inc/sam3u/pll.h **** 		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
 545              	 .loc 3 176 43
 546 0014 7B68     	 ldr r3,[r7,#4]
 547 0016 1B68     	 ldr r3,[r3]
 548              	 .loc 3 176 6
 549 0018 084A     	 ldr r2,.L53+4
 550              	 .loc 3 176 36
 551 001a 43F00053 	 orr r3,r3,#536870912
 552              	 .loc 3 176 19
 553 001e 9362     	 str r3,[r2,#40]
 177:.././hal/sam3u1c/inc/sam3u/pll.h **** 	} else {
 178:.././hal/sam3u1c/inc/sam3u/pll.h **** 		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
 179:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 180:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 554              	 .loc 3 180 1
 555 0020 05E0     	 b .L52
 556              	.L50:
 178:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 557              	 .loc 3 178 25
 558 0022 7B68     	 ldr r3,[r7,#4]
 559 0024 1B68     	 ldr r3,[r3]
 178:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 560              	 .loc 3 178 6
 561 0026 054A     	 ldr r2,.L53+4
 178:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 562              	 .loc 3 178 32
 563 0028 43F48033 	 orr r3,r3,#65536
 178:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 564              	 .loc 3 178 18
 565 002c D361     	 str r3,[r2,#28]
 566              	.L52:
 567              	 .loc 3 180 1
 568 002e 00BF     	 nop
 569 0030 0837     	 adds r7,r7,#8
 570              	.LCFI29:
 571              	 .cfi_def_cfa_offset 8
 572 0032 BD46     	 mov sp,r7
 573              	.LCFI30:
 574              	 .cfi_def_cfa_register 13
 575              	 
 576 0034 80BD     	 pop {r7,pc}
 577              	.L54:
 578 0036 00BF     	 .align 2
 579              	.L53:
 580 0038 00000000 	 .word pmc_disable_pllack
 581 003c 00040E40 	 .word 1074660352
 582              	 .cfi_endproc
 583              	.LFE77:
 585              	 .section .text.pll_disable,"ax",%progbits
 586              	 .align 1
 587              	 .syntax unified
 588              	 .thumb
 589              	 .thumb_func
 590              	 .fpu softvfp
 592              	pll_disable:
 593              	.LFB78:
 181:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 182:.././hal/sam3u1c/inc/sam3u/pll.h **** /**
 183:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \note This will only disable the selected PLL, not the underlying oscillator
 184:.././hal/sam3u1c/inc/sam3u/pll.h ****  *       (mainck).
 185:.././hal/sam3u1c/inc/sam3u/pll.h ****  */
 186:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline void pll_disable(uint32_t ul_pll_id)
 187:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 594              	 .loc 3 187 1
 595              	 .cfi_startproc
 596              	 
 597              	 
 598 0000 80B5     	 push {r7,lr}
 599              	.LCFI31:
 600              	 .cfi_def_cfa_offset 8
 601              	 .cfi_offset 7,-8
 602              	 .cfi_offset 14,-4
 603 0002 82B0     	 sub sp,sp,#8
 604              	.LCFI32:
 605              	 .cfi_def_cfa_offset 16
 606 0004 00AF     	 add r7,sp,#0
 607              	.LCFI33:
 608              	 .cfi_def_cfa_register 7
 609 0006 7860     	 str r0,[r7,#4]
 188:.././hal/sam3u1c/inc/sam3u/pll.h **** 	Assert(ul_pll_id < NR_PLLS);
 189:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 190:.././hal/sam3u1c/inc/sam3u/pll.h **** 	if (ul_pll_id == PLLA_ID) {
 610              	 .loc 3 190 5
 611 0008 7B68     	 ldr r3,[r7,#4]
 612 000a 002B     	 cmp r3,#0
 613 000c 02D1     	 bne .L56
 191:.././hal/sam3u1c/inc/sam3u/pll.h **** 		pmc_disable_pllack();
 614              	 .loc 3 191 3
 615 000e 064B     	 ldr r3,.L59
 616 0010 9847     	 blx r3
 617              	.LVL13:
 192:.././hal/sam3u1c/inc/sam3u/pll.h **** 	} else {
 193:.././hal/sam3u1c/inc/sam3u/pll.h **** 		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
 194:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 195:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 618              	 .loc 3 195 1
 619 0012 05E0     	 b .L58
 620              	.L56:
 193:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 621              	 .loc 3 193 18
 622 0014 054B     	 ldr r3,.L59+4
 623 0016 DB69     	 ldr r3,[r3,#28]
 624 0018 044A     	 ldr r2,.L59+4
 625 001a 23F48033 	 bic r3,r3,#65536
 626 001e D361     	 str r3,[r2,#28]
 627              	.L58:
 628              	 .loc 3 195 1
 629 0020 00BF     	 nop
 630 0022 0837     	 adds r7,r7,#8
 631              	.LCFI34:
 632              	 .cfi_def_cfa_offset 8
 633 0024 BD46     	 mov sp,r7
 634              	.LCFI35:
 635              	 .cfi_def_cfa_register 13
 636              	 
 637 0026 80BD     	 pop {r7,pc}
 638              	.L60:
 639              	 .align 2
 640              	.L59:
 641 0028 00000000 	 .word pmc_disable_pllack
 642 002c 00040E40 	 .word 1074660352
 643              	 .cfi_endproc
 644              	.LFE78:
 646              	 .section .text.pll_is_locked,"ax",%progbits
 647              	 .align 1
 648              	 .syntax unified
 649              	 .thumb
 650              	 .thumb_func
 651              	 .fpu softvfp
 653              	pll_is_locked:
 654              	.LFB79:
 196:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 197:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
 198:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 655              	 .loc 3 198 1
 656              	 .cfi_startproc
 657              	 
 658              	 
 659 0000 80B5     	 push {r7,lr}
 660              	.LCFI36:
 661              	 .cfi_def_cfa_offset 8
 662              	 .cfi_offset 7,-8
 663              	 .cfi_offset 14,-4
 664 0002 82B0     	 sub sp,sp,#8
 665              	.LCFI37:
 666              	 .cfi_def_cfa_offset 16
 667 0004 00AF     	 add r7,sp,#0
 668              	.LCFI38:
 669              	 .cfi_def_cfa_register 7
 670 0006 7860     	 str r0,[r7,#4]
 199:.././hal/sam3u1c/inc/sam3u/pll.h **** 	Assert(ul_pll_id < NR_PLLS);
 200:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 201:.././hal/sam3u1c/inc/sam3u/pll.h **** 	if (ul_pll_id == PLLA_ID) {
 671              	 .loc 3 201 5
 672 0008 7B68     	 ldr r3,[r7,#4]
 673 000a 002B     	 cmp r3,#0
 674 000c 03D1     	 bne .L62
 202:.././hal/sam3u1c/inc/sam3u/pll.h **** 		return pmc_is_locked_pllack();
 675              	 .loc 3 202 10
 676 000e 054B     	 ldr r3,.L64
 677 0010 9847     	 blx r3
 678              	.LVL14:
 679 0012 0346     	 mov r3,r0
 680 0014 02E0     	 b .L63
 681              	.L62:
 203:.././hal/sam3u1c/inc/sam3u/pll.h **** 	} else {
 204:.././hal/sam3u1c/inc/sam3u/pll.h **** 		return pmc_is_locked_upll();
 682              	 .loc 3 204 10
 683 0016 044B     	 ldr r3,.L64+4
 684 0018 9847     	 blx r3
 685              	.LVL15:
 686 001a 0346     	 mov r3,r0
 687              	.L63:
 205:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 206:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 688              	 .loc 3 206 1
 689 001c 1846     	 mov r0,r3
 690 001e 0837     	 adds r7,r7,#8
 691              	.LCFI39:
 692              	 .cfi_def_cfa_offset 8
 693 0020 BD46     	 mov sp,r7
 694              	.LCFI40:
 695              	 .cfi_def_cfa_register 13
 696              	 
 697 0022 80BD     	 pop {r7,pc}
 698              	.L65:
 699              	 .align 2
 700              	.L64:
 701 0024 00000000 	 .word pmc_is_locked_pllack
 702 0028 00000000 	 .word pmc_is_locked_upll
 703              	 .cfi_endproc
 704              	.LFE79:
 706              	 .section .text.pll_enable_source,"ax",%progbits
 707              	 .align 1
 708              	 .syntax unified
 709              	 .thumb
 710              	 .thumb_func
 711              	 .fpu softvfp
 713              	pll_enable_source:
 714              	.LFB80:
 207:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 208:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline void pll_enable_source(enum pll_source e_src)
 209:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 715              	 .loc 3 209 1
 716              	 .cfi_startproc
 717              	 
 718              	 
 719 0000 80B5     	 push {r7,lr}
 720              	.LCFI41:
 721              	 .cfi_def_cfa_offset 8
 722              	 .cfi_offset 7,-8
 723              	 .cfi_offset 14,-4
 724 0002 82B0     	 sub sp,sp,#8
 725              	.LCFI42:
 726              	 .cfi_def_cfa_offset 16
 727 0004 00AF     	 add r7,sp,#0
 728              	.LCFI43:
 729              	 .cfi_def_cfa_register 7
 730 0006 0346     	 mov r3,r0
 731 0008 FB71     	 strb r3,[r7,#7]
 210:.././hal/sam3u1c/inc/sam3u/pll.h **** 	switch (e_src) {
 732              	 .loc 3 210 2
 733 000a FB79     	 ldrb r3,[r7,#7]
 734 000c 033B     	 subs r3,r3,#3
 735 000e 042B     	 cmp r3,#4
 736 0010 08D8     	 bhi .L69
 211:.././hal/sam3u1c/inc/sam3u/pll.h **** 	case PLL_SRC_MAINCK_4M_RC:
 212:.././hal/sam3u1c/inc/sam3u/pll.h **** 	case PLL_SRC_MAINCK_8M_RC:
 213:.././hal/sam3u1c/inc/sam3u/pll.h **** 	case PLL_SRC_MAINCK_12M_RC:
 214:.././hal/sam3u1c/inc/sam3u/pll.h **** 	case PLL_SRC_MAINCK_XTAL:
 215:.././hal/sam3u1c/inc/sam3u/pll.h **** 	case PLL_SRC_MAINCK_BYPASS:
 216:.././hal/sam3u1c/inc/sam3u/pll.h **** 		osc_enable(e_src);
 737              	 .loc 3 216 3
 738 0012 FB79     	 ldrb r3,[r7,#7]
 739 0014 1846     	 mov r0,r3
 740 0016 064B     	 ldr r3,.L70
 741 0018 9847     	 blx r3
 742              	.LVL16:
 217:.././hal/sam3u1c/inc/sam3u/pll.h **** 		osc_wait_ready(e_src);
 743              	 .loc 3 217 3
 744 001a FB79     	 ldrb r3,[r7,#7]
 745 001c 1846     	 mov r0,r3
 746 001e 054B     	 ldr r3,.L70+4
 747 0020 9847     	 blx r3
 748              	.LVL17:
 218:.././hal/sam3u1c/inc/sam3u/pll.h **** 		break;
 749              	 .loc 3 218 3
 750 0022 00E0     	 b .L68
 751              	.L69:
 219:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 220:.././hal/sam3u1c/inc/sam3u/pll.h **** 	default:
 221:.././hal/sam3u1c/inc/sam3u/pll.h **** 		Assert(false);
 222:.././hal/sam3u1c/inc/sam3u/pll.h **** 		break;
 752              	 .loc 3 222 3
 753 0024 00BF     	 nop
 754              	.L68:
 223:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 224:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 755              	 .loc 3 224 1
 756 0026 00BF     	 nop
 757 0028 0837     	 adds r7,r7,#8
 758              	.LCFI44:
 759              	 .cfi_def_cfa_offset 8
 760 002a BD46     	 mov sp,r7
 761              	.LCFI45:
 762              	 .cfi_def_cfa_register 13
 763              	 
 764 002c 80BD     	 pop {r7,pc}
 765              	.L71:
 766 002e 00BF     	 .align 2
 767              	.L70:
 768 0030 00000000 	 .word osc_enable
 769 0034 00000000 	 .word osc_wait_ready
 770              	 .cfi_endproc
 771              	.LFE80:
 773              	 .section .text.pll_wait_for_lock,"ax",%progbits
 774              	 .align 1
 775              	 .syntax unified
 776              	 .thumb
 777              	 .thumb_func
 778              	 .fpu softvfp
 780              	pll_wait_for_lock:
 781              	.LFB82:
 782              	 .file 4 ".././hal/sam3u1c/inc/pll.h"
   1:.././hal/sam3u1c/inc/pll.h **** /**
   2:.././hal/sam3u1c/inc/pll.h ****  * \file
   3:.././hal/sam3u1c/inc/pll.h ****  *
   4:.././hal/sam3u1c/inc/pll.h ****  * \brief PLL management
   5:.././hal/sam3u1c/inc/pll.h ****  *
   6:.././hal/sam3u1c/inc/pll.h ****  * Copyright (c) 2010-2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/pll.h ****  *
   8:.././hal/sam3u1c/inc/pll.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/pll.h ****  *
  10:.././hal/sam3u1c/inc/pll.h ****  * \page License
  11:.././hal/sam3u1c/inc/pll.h ****  *
  12:.././hal/sam3u1c/inc/pll.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/pll.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/pll.h ****  *
  15:.././hal/sam3u1c/inc/pll.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/pll.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/pll.h ****  *
  18:.././hal/sam3u1c/inc/pll.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/pll.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/pll.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/pll.h ****  *
  22:.././hal/sam3u1c/inc/pll.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/pll.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/pll.h ****  *
  25:.././hal/sam3u1c/inc/pll.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/pll.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/pll.h ****  *
  28:.././hal/sam3u1c/inc/pll.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/pll.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/pll.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/pll.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/pll.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/pll.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/pll.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/pll.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/pll.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/pll.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/pll.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/pll.h ****  *
  40:.././hal/sam3u1c/inc/pll.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/pll.h ****  *
  42:.././hal/sam3u1c/inc/pll.h ****  */
  43:.././hal/sam3u1c/inc/pll.h **** #ifndef CLK_PLL_H_INCLUDED
  44:.././hal/sam3u1c/inc/pll.h **** #define CLK_PLL_H_INCLUDED
  45:.././hal/sam3u1c/inc/pll.h **** 
  46:.././hal/sam3u1c/inc/pll.h **** #include "parts.h"
  47:.././hal/sam3u1c/inc/pll.h **** #include "conf_clock.h"
  48:.././hal/sam3u1c/inc/pll.h **** 
  49:.././hal/sam3u1c/inc/pll.h **** #if SAM3S
  50:.././hal/sam3u1c/inc/pll.h **** # include "sam3s/pll.h"
  51:.././hal/sam3u1c/inc/pll.h **** #elif SAM3XA
  52:.././hal/sam3u1c/inc/pll.h **** # include "sam3x/pll.h"
  53:.././hal/sam3u1c/inc/pll.h **** #elif SAM3U
  54:.././hal/sam3u1c/inc/pll.h **** # include "sam3u/pll.h"
  55:.././hal/sam3u1c/inc/pll.h **** #elif SAM3N
  56:.././hal/sam3u1c/inc/pll.h **** # include "sam3n/pll.h"
  57:.././hal/sam3u1c/inc/pll.h **** #elif SAM4S
  58:.././hal/sam3u1c/inc/pll.h **** # include "sam4s/pll.h"
  59:.././hal/sam3u1c/inc/pll.h **** #elif SAM4E
  60:.././hal/sam3u1c/inc/pll.h **** # include "sam4e/pll.h"
  61:.././hal/sam3u1c/inc/pll.h **** #elif SAM4C
  62:.././hal/sam3u1c/inc/pll.h **** # include "sam4c/pll.h"
  63:.././hal/sam3u1c/inc/pll.h **** #elif SAM4CM
  64:.././hal/sam3u1c/inc/pll.h **** # include "sam4cm/pll.h"
  65:.././hal/sam3u1c/inc/pll.h **** #elif SAM4CP
  66:.././hal/sam3u1c/inc/pll.h **** # include "sam4cp/pll.h"
  67:.././hal/sam3u1c/inc/pll.h **** #elif SAM4L
  68:.././hal/sam3u1c/inc/pll.h **** # include "sam4l/pll.h"
  69:.././hal/sam3u1c/inc/pll.h **** #elif SAM4N
  70:.././hal/sam3u1c/inc/pll.h **** # include "sam4n/pll.h"
  71:.././hal/sam3u1c/inc/pll.h **** #elif SAMG
  72:.././hal/sam3u1c/inc/pll.h **** # include "samg/pll.h"
  73:.././hal/sam3u1c/inc/pll.h **** #elif (UC3A0 || UC3A1)
  74:.././hal/sam3u1c/inc/pll.h **** # include "uc3a0_a1/pll.h"
  75:.././hal/sam3u1c/inc/pll.h **** #elif UC3A3
  76:.././hal/sam3u1c/inc/pll.h **** # include "uc3a3_a4/pll.h"
  77:.././hal/sam3u1c/inc/pll.h **** #elif UC3B
  78:.././hal/sam3u1c/inc/pll.h **** # include "uc3b0_b1/pll.h"
  79:.././hal/sam3u1c/inc/pll.h **** #elif UC3C
  80:.././hal/sam3u1c/inc/pll.h **** # include "uc3c/pll.h"
  81:.././hal/sam3u1c/inc/pll.h **** #elif UC3D
  82:.././hal/sam3u1c/inc/pll.h **** # include "uc3d/pll.h"
  83:.././hal/sam3u1c/inc/pll.h **** #elif (UC3L0128 || UC3L0256 || UC3L3_L4)
  84:.././hal/sam3u1c/inc/pll.h **** # include "uc3l/pll.h"
  85:.././hal/sam3u1c/inc/pll.h **** #elif XMEGA
  86:.././hal/sam3u1c/inc/pll.h **** # include "xmega/pll.h"
  87:.././hal/sam3u1c/inc/pll.h **** #else
  88:.././hal/sam3u1c/inc/pll.h **** # error Unsupported chip type
  89:.././hal/sam3u1c/inc/pll.h **** #endif
  90:.././hal/sam3u1c/inc/pll.h **** 
  91:.././hal/sam3u1c/inc/pll.h **** /**
  92:.././hal/sam3u1c/inc/pll.h ****  * \ingroup clk_group
  93:.././hal/sam3u1c/inc/pll.h ****  * \defgroup pll_group PLL Management
  94:.././hal/sam3u1c/inc/pll.h ****  *
  95:.././hal/sam3u1c/inc/pll.h ****  * This group contains functions and definitions related to configuring
  96:.././hal/sam3u1c/inc/pll.h ****  * and enabling/disabling on-chip PLLs. A PLL will take an input signal
  97:.././hal/sam3u1c/inc/pll.h ****  * (the \em source), optionally divide the frequency by a configurable
  98:.././hal/sam3u1c/inc/pll.h ****  * \em divider, and then multiply the frequency by a configurable \em
  99:.././hal/sam3u1c/inc/pll.h ****  * multiplier.
 100:.././hal/sam3u1c/inc/pll.h ****  *
 101:.././hal/sam3u1c/inc/pll.h ****  * Some devices don't support input dividers; specifying any other
 102:.././hal/sam3u1c/inc/pll.h ****  * divisor than 1 on these devices will result in an assertion failure.
 103:.././hal/sam3u1c/inc/pll.h ****  * Other devices may have various restrictions to the frequency range of
 104:.././hal/sam3u1c/inc/pll.h ****  * the input and output signals.
 105:.././hal/sam3u1c/inc/pll.h ****  *
 106:.././hal/sam3u1c/inc/pll.h ****  * \par Example: Setting up PLL0 with default parameters
 107:.././hal/sam3u1c/inc/pll.h ****  *
 108:.././hal/sam3u1c/inc/pll.h ****  * The following example shows how to configure and enable PLL0 using
 109:.././hal/sam3u1c/inc/pll.h ****  * the default parameters specified using the configuration symbols
 110:.././hal/sam3u1c/inc/pll.h ****  * listed above.
 111:.././hal/sam3u1c/inc/pll.h ****  * \code
 112:.././hal/sam3u1c/inc/pll.h **** 	pll_enable_config_defaults(0); \endcode
 113:.././hal/sam3u1c/inc/pll.h ****  *
 114:.././hal/sam3u1c/inc/pll.h ****  * To configure, enable PLL0 using the default parameters and to disable
 115:.././hal/sam3u1c/inc/pll.h ****  * a specific feature like Wide Bandwidth Mode (a UC3A3-specific
 116:.././hal/sam3u1c/inc/pll.h ****  * PLL option.), you can use this initialization process.
 117:.././hal/sam3u1c/inc/pll.h ****  * \code
 118:.././hal/sam3u1c/inc/pll.h **** 	struct pll_config pllcfg;
 119:.././hal/sam3u1c/inc/pll.h **** 	if (pll_is_locked(pll_id)) {
 120:.././hal/sam3u1c/inc/pll.h **** 		return; // Pll already running
 121:.././hal/sam3u1c/inc/pll.h **** 	}
 122:.././hal/sam3u1c/inc/pll.h **** 	pll_enable_source(CONFIG_PLL0_SOURCE);
 123:.././hal/sam3u1c/inc/pll.h **** 	pll_config_defaults(&pllcfg, 0);
 124:.././hal/sam3u1c/inc/pll.h **** 	pll_config_set_option(&pllcfg, PLL_OPT_WBM_DISABLE);
 125:.././hal/sam3u1c/inc/pll.h **** 	pll_enable(&pllcfg, 0);
 126:.././hal/sam3u1c/inc/pll.h **** 	pll_wait_for_lock(0); \endcode
 127:.././hal/sam3u1c/inc/pll.h ****  *
 128:.././hal/sam3u1c/inc/pll.h ****  * When the last function call returns, PLL0 is ready to be used as the
 129:.././hal/sam3u1c/inc/pll.h ****  * main system clock source.
 130:.././hal/sam3u1c/inc/pll.h ****  *
 131:.././hal/sam3u1c/inc/pll.h ****  * \section pll_group_config Configuration Symbols
 132:.././hal/sam3u1c/inc/pll.h ****  *
 133:.././hal/sam3u1c/inc/pll.h ****  * Each PLL has a set of default parameters determined by the following
 134:.././hal/sam3u1c/inc/pll.h ****  * configuration symbols in the application's configuration file:
 135:.././hal/sam3u1c/inc/pll.h ****  *   - \b CONFIG_PLLn_SOURCE: The default clock source connected to the
 136:.././hal/sam3u1c/inc/pll.h ****  *     input of PLL \a n. Must be one of the values defined by the
 137:.././hal/sam3u1c/inc/pll.h ****  *     #pll_source enum.
 138:.././hal/sam3u1c/inc/pll.h ****  *   - \b CONFIG_PLLn_MUL: The default multiplier (loop divider) of PLL
 139:.././hal/sam3u1c/inc/pll.h ****  *     \a n.
 140:.././hal/sam3u1c/inc/pll.h ****  *   - \b CONFIG_PLLn_DIV: The default input divider of PLL \a n.
 141:.././hal/sam3u1c/inc/pll.h ****  *
 142:.././hal/sam3u1c/inc/pll.h ****  * These configuration symbols determine the result of calling
 143:.././hal/sam3u1c/inc/pll.h ****  * pll_config_defaults() and pll_get_default_rate().
 144:.././hal/sam3u1c/inc/pll.h ****  *
 145:.././hal/sam3u1c/inc/pll.h ****  * @{
 146:.././hal/sam3u1c/inc/pll.h ****  */
 147:.././hal/sam3u1c/inc/pll.h **** 
 148:.././hal/sam3u1c/inc/pll.h **** //! \name Chip-specific PLL characteristics
 149:.././hal/sam3u1c/inc/pll.h **** //@{
 150:.././hal/sam3u1c/inc/pll.h **** /**
 151:.././hal/sam3u1c/inc/pll.h ****  * \def PLL_MAX_STARTUP_CYCLES
 152:.././hal/sam3u1c/inc/pll.h ****  * \brief Maximum PLL startup time in number of slow clock cycles
 153:.././hal/sam3u1c/inc/pll.h ****  */
 154:.././hal/sam3u1c/inc/pll.h **** /**
 155:.././hal/sam3u1c/inc/pll.h ****  * \def NR_PLLS
 156:.././hal/sam3u1c/inc/pll.h ****  * \brief Number of on-chip PLLs
 157:.././hal/sam3u1c/inc/pll.h ****  */
 158:.././hal/sam3u1c/inc/pll.h **** 
 159:.././hal/sam3u1c/inc/pll.h **** /**
 160:.././hal/sam3u1c/inc/pll.h ****  * \def PLL_MIN_HZ
 161:.././hal/sam3u1c/inc/pll.h ****  * \brief Minimum frequency that the PLL can generate
 162:.././hal/sam3u1c/inc/pll.h ****  */
 163:.././hal/sam3u1c/inc/pll.h **** /**
 164:.././hal/sam3u1c/inc/pll.h ****  * \def PLL_MAX_HZ
 165:.././hal/sam3u1c/inc/pll.h ****  * \brief Maximum frequency that the PLL can generate
 166:.././hal/sam3u1c/inc/pll.h ****  */
 167:.././hal/sam3u1c/inc/pll.h **** /**
 168:.././hal/sam3u1c/inc/pll.h ****  * \def PLL_NR_OPTIONS
 169:.././hal/sam3u1c/inc/pll.h ****  * \brief Number of PLL option bits
 170:.././hal/sam3u1c/inc/pll.h ****  */
 171:.././hal/sam3u1c/inc/pll.h **** //@}
 172:.././hal/sam3u1c/inc/pll.h **** 
 173:.././hal/sam3u1c/inc/pll.h **** /**
 174:.././hal/sam3u1c/inc/pll.h ****  * \enum pll_source
 175:.././hal/sam3u1c/inc/pll.h ****  * \brief PLL clock source
 176:.././hal/sam3u1c/inc/pll.h ****  */
 177:.././hal/sam3u1c/inc/pll.h **** 
 178:.././hal/sam3u1c/inc/pll.h **** //! \name PLL configuration
 179:.././hal/sam3u1c/inc/pll.h **** //@{
 180:.././hal/sam3u1c/inc/pll.h **** 
 181:.././hal/sam3u1c/inc/pll.h **** /**
 182:.././hal/sam3u1c/inc/pll.h ****  * \struct pll_config
 183:.././hal/sam3u1c/inc/pll.h ****  * \brief Hardware-specific representation of PLL configuration.
 184:.././hal/sam3u1c/inc/pll.h ****  *
 185:.././hal/sam3u1c/inc/pll.h ****  * This structure contains one or more device-specific values
 186:.././hal/sam3u1c/inc/pll.h ****  * representing the current PLL configuration. The contents of this
 187:.././hal/sam3u1c/inc/pll.h ****  * structure is typically different from platform to platform, and the
 188:.././hal/sam3u1c/inc/pll.h ****  * user should not access any fields except through the PLL
 189:.././hal/sam3u1c/inc/pll.h ****  * configuration API.
 190:.././hal/sam3u1c/inc/pll.h ****  */
 191:.././hal/sam3u1c/inc/pll.h **** 
 192:.././hal/sam3u1c/inc/pll.h **** /**
 193:.././hal/sam3u1c/inc/pll.h ****  * \fn void pll_config_init(struct pll_config *cfg,
 194:.././hal/sam3u1c/inc/pll.h ****  *              enum pll_source src, unsigned int div, unsigned int mul)
 195:.././hal/sam3u1c/inc/pll.h ****  * \brief Initialize PLL configuration from standard parameters.
 196:.././hal/sam3u1c/inc/pll.h ****  *
 197:.././hal/sam3u1c/inc/pll.h ****  * \note This function may be defined inline because it is assumed to be
 198:.././hal/sam3u1c/inc/pll.h ****  * called very few times, and usually with constant parameters. Inlining
 199:.././hal/sam3u1c/inc/pll.h ****  * it will in such cases reduce the code size significantly.
 200:.././hal/sam3u1c/inc/pll.h ****  *
 201:.././hal/sam3u1c/inc/pll.h ****  * \param cfg The PLL configuration to be initialized.
 202:.././hal/sam3u1c/inc/pll.h ****  * \param src The oscillator to be used as input to the PLL.
 203:.././hal/sam3u1c/inc/pll.h ****  * \param div PLL input divider.
 204:.././hal/sam3u1c/inc/pll.h ****  * \param mul PLL loop divider (i.e. multiplier).
 205:.././hal/sam3u1c/inc/pll.h ****  *
 206:.././hal/sam3u1c/inc/pll.h ****  * \return A configuration which will make the PLL run at
 207:.././hal/sam3u1c/inc/pll.h ****  * (\a mul / \a div) times the frequency of \a src
 208:.././hal/sam3u1c/inc/pll.h ****  */
 209:.././hal/sam3u1c/inc/pll.h **** /**
 210:.././hal/sam3u1c/inc/pll.h ****  * \def pll_config_defaults(cfg, pll_id)
 211:.././hal/sam3u1c/inc/pll.h ****  * \brief Initialize PLL configuration using default parameters.
 212:.././hal/sam3u1c/inc/pll.h ****  *
 213:.././hal/sam3u1c/inc/pll.h ****  * After this function returns, \a cfg will contain a configuration
 214:.././hal/sam3u1c/inc/pll.h ****  * which will make the PLL run at (CONFIG_PLLx_MUL / CONFIG_PLLx_DIV)
 215:.././hal/sam3u1c/inc/pll.h ****  * times the frequency of CONFIG_PLLx_SOURCE.
 216:.././hal/sam3u1c/inc/pll.h ****  *
 217:.././hal/sam3u1c/inc/pll.h ****  * \param cfg The PLL configuration to be initialized.
 218:.././hal/sam3u1c/inc/pll.h ****  * \param pll_id Use defaults for this PLL.
 219:.././hal/sam3u1c/inc/pll.h ****  */
 220:.././hal/sam3u1c/inc/pll.h **** /**
 221:.././hal/sam3u1c/inc/pll.h ****  * \def pll_get_default_rate(pll_id)
 222:.././hal/sam3u1c/inc/pll.h ****  * \brief Get the default rate in Hz of \a pll_id
 223:.././hal/sam3u1c/inc/pll.h ****  */
 224:.././hal/sam3u1c/inc/pll.h **** /**
 225:.././hal/sam3u1c/inc/pll.h ****  * \fn void pll_config_set_option(struct pll_config *cfg,
 226:.././hal/sam3u1c/inc/pll.h ****  *              unsigned int option)
 227:.././hal/sam3u1c/inc/pll.h ****  * \brief Set the PLL option bit \a option in the configuration \a cfg.
 228:.././hal/sam3u1c/inc/pll.h ****  *
 229:.././hal/sam3u1c/inc/pll.h ****  * \param cfg The PLL configuration to be changed.
 230:.././hal/sam3u1c/inc/pll.h ****  * \param option The PLL option bit to be set.
 231:.././hal/sam3u1c/inc/pll.h ****  */
 232:.././hal/sam3u1c/inc/pll.h **** /**
 233:.././hal/sam3u1c/inc/pll.h ****  * \fn void pll_config_clear_option(struct pll_config *cfg,
 234:.././hal/sam3u1c/inc/pll.h ****  *              unsigned int option)
 235:.././hal/sam3u1c/inc/pll.h ****  * \brief Clear the PLL option bit \a option in the configuration \a cfg.
 236:.././hal/sam3u1c/inc/pll.h ****  *
 237:.././hal/sam3u1c/inc/pll.h ****  * \param cfg The PLL configuration to be changed.
 238:.././hal/sam3u1c/inc/pll.h ****  * \param option The PLL option bit to be cleared.
 239:.././hal/sam3u1c/inc/pll.h ****  */
 240:.././hal/sam3u1c/inc/pll.h **** /**
 241:.././hal/sam3u1c/inc/pll.h ****  * \fn void pll_config_read(struct pll_config *cfg, unsigned int pll_id)
 242:.././hal/sam3u1c/inc/pll.h ****  * \brief Read the currently active configuration of \a pll_id.
 243:.././hal/sam3u1c/inc/pll.h ****  *
 244:.././hal/sam3u1c/inc/pll.h ****  * \param cfg The configuration object into which to store the currently
 245:.././hal/sam3u1c/inc/pll.h ****  * active configuration.
 246:.././hal/sam3u1c/inc/pll.h ****  * \param pll_id The ID of the PLL to be accessed.
 247:.././hal/sam3u1c/inc/pll.h ****  */
 248:.././hal/sam3u1c/inc/pll.h **** /**
 249:.././hal/sam3u1c/inc/pll.h ****  * \fn void pll_config_write(const struct pll_config *cfg,
 250:.././hal/sam3u1c/inc/pll.h ****  *              unsigned int pll_id)
 251:.././hal/sam3u1c/inc/pll.h ****  * \brief Activate the configuration \a cfg on \a pll_id
 252:.././hal/sam3u1c/inc/pll.h ****  *
 253:.././hal/sam3u1c/inc/pll.h ****  * \param cfg The configuration object representing the PLL
 254:.././hal/sam3u1c/inc/pll.h ****  * configuration to be activated.
 255:.././hal/sam3u1c/inc/pll.h ****  * \param pll_id The ID of the PLL to be updated.
 256:.././hal/sam3u1c/inc/pll.h ****  */
 257:.././hal/sam3u1c/inc/pll.h **** 
 258:.././hal/sam3u1c/inc/pll.h **** //@}
 259:.././hal/sam3u1c/inc/pll.h **** 
 260:.././hal/sam3u1c/inc/pll.h **** //! \name Interaction with the PLL hardware
 261:.././hal/sam3u1c/inc/pll.h **** //@{
 262:.././hal/sam3u1c/inc/pll.h **** /**
 263:.././hal/sam3u1c/inc/pll.h ****  * \fn void pll_enable(const struct pll_config *cfg,
 264:.././hal/sam3u1c/inc/pll.h ****  *              unsigned int pll_id)
 265:.././hal/sam3u1c/inc/pll.h ****  * \brief Activate the configuration \a cfg and enable PLL \a pll_id.
 266:.././hal/sam3u1c/inc/pll.h ****  *
 267:.././hal/sam3u1c/inc/pll.h ****  * \param cfg The PLL configuration to be activated.
 268:.././hal/sam3u1c/inc/pll.h ****  * \param pll_id The ID of the PLL to be enabled.
 269:.././hal/sam3u1c/inc/pll.h ****  */
 270:.././hal/sam3u1c/inc/pll.h **** /**
 271:.././hal/sam3u1c/inc/pll.h ****  * \fn void pll_disable(unsigned int pll_id)
 272:.././hal/sam3u1c/inc/pll.h ****  * \brief Disable the PLL identified by \a pll_id.
 273:.././hal/sam3u1c/inc/pll.h ****  *
 274:.././hal/sam3u1c/inc/pll.h ****  * After this function is called, the PLL identified by \a pll_id will
 275:.././hal/sam3u1c/inc/pll.h ****  * be disabled. The PLL configuration stored in hardware may be affected
 276:.././hal/sam3u1c/inc/pll.h ****  * by this, so if the caller needs to restore the same configuration
 277:.././hal/sam3u1c/inc/pll.h ****  * later, it should either do a pll_config_read() before disabling the
 278:.././hal/sam3u1c/inc/pll.h ****  * PLL, or remember the last configuration written to the PLL.
 279:.././hal/sam3u1c/inc/pll.h ****  *
 280:.././hal/sam3u1c/inc/pll.h ****  * \param pll_id The ID of the PLL to be disabled.
 281:.././hal/sam3u1c/inc/pll.h ****  */
 282:.././hal/sam3u1c/inc/pll.h **** /**
 283:.././hal/sam3u1c/inc/pll.h ****  * \fn bool pll_is_locked(unsigned int pll_id)
 284:.././hal/sam3u1c/inc/pll.h ****  * \brief Determine whether the PLL is locked or not.
 285:.././hal/sam3u1c/inc/pll.h ****  *
 286:.././hal/sam3u1c/inc/pll.h ****  * \param pll_id The ID of the PLL to check.
 287:.././hal/sam3u1c/inc/pll.h ****  *
 288:.././hal/sam3u1c/inc/pll.h ****  * \retval true The PLL is locked and ready to use as a clock source
 289:.././hal/sam3u1c/inc/pll.h ****  * \retval false The PLL is not yet locked, or has not been enabled.
 290:.././hal/sam3u1c/inc/pll.h ****  */
 291:.././hal/sam3u1c/inc/pll.h **** /**
 292:.././hal/sam3u1c/inc/pll.h ****  * \fn void pll_enable_source(enum pll_source src)
 293:.././hal/sam3u1c/inc/pll.h ****  * \brief Enable the source of the pll.
 294:.././hal/sam3u1c/inc/pll.h ****  * The source is enabled, if the source is not already running.
 295:.././hal/sam3u1c/inc/pll.h ****  *
 296:.././hal/sam3u1c/inc/pll.h ****  * \param src The ID of the PLL source to enable.
 297:.././hal/sam3u1c/inc/pll.h ****  */
 298:.././hal/sam3u1c/inc/pll.h **** /**
 299:.././hal/sam3u1c/inc/pll.h ****  * \fn void pll_enable_config_defaults(unsigned int pll_id)
 300:.././hal/sam3u1c/inc/pll.h ****  * \brief Enable the pll with the default configuration.
 301:.././hal/sam3u1c/inc/pll.h ****  * PLL is enabled, if the PLL is not already locked.
 302:.././hal/sam3u1c/inc/pll.h ****  *
 303:.././hal/sam3u1c/inc/pll.h ****  * \param pll_id The ID of the PLL to enable.
 304:.././hal/sam3u1c/inc/pll.h ****  */
 305:.././hal/sam3u1c/inc/pll.h **** 
 306:.././hal/sam3u1c/inc/pll.h **** /**
 307:.././hal/sam3u1c/inc/pll.h ****  * \brief Wait for PLL \a pll_id to become locked
 308:.././hal/sam3u1c/inc/pll.h ****  *
 309:.././hal/sam3u1c/inc/pll.h ****  * \todo Use a timeout to avoid waiting forever and hanging the system
 310:.././hal/sam3u1c/inc/pll.h ****  *
 311:.././hal/sam3u1c/inc/pll.h ****  * \param pll_id The ID of the PLL to wait for.
 312:.././hal/sam3u1c/inc/pll.h ****  *
 313:.././hal/sam3u1c/inc/pll.h ****  * \retval STATUS_OK The PLL is now locked.
 314:.././hal/sam3u1c/inc/pll.h ****  * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 315:.././hal/sam3u1c/inc/pll.h ****  */
 316:.././hal/sam3u1c/inc/pll.h **** static inline int pll_wait_for_lock(unsigned int pll_id)
 317:.././hal/sam3u1c/inc/pll.h **** {
 783              	 .loc 4 317 1
 784              	 .cfi_startproc
 785              	 
 786              	 
 787 0000 80B5     	 push {r7,lr}
 788              	.LCFI46:
 789              	 .cfi_def_cfa_offset 8
 790              	 .cfi_offset 7,-8
 791              	 .cfi_offset 14,-4
 792 0002 82B0     	 sub sp,sp,#8
 793              	.LCFI47:
 794              	 .cfi_def_cfa_offset 16
 795 0004 00AF     	 add r7,sp,#0
 796              	.LCFI48:
 797              	 .cfi_def_cfa_register 7
 798 0006 7860     	 str r0,[r7,#4]
 318:.././hal/sam3u1c/inc/pll.h **** 	Assert(pll_id < NR_PLLS);
 319:.././hal/sam3u1c/inc/pll.h **** 
 320:.././hal/sam3u1c/inc/pll.h **** 	while (!pll_is_locked(pll_id)) {
 799              	 .loc 4 320 8
 800 0008 00BF     	 nop
 801              	.L73:
 802              	 .loc 4 320 10 discriminator 1
 803 000a 7868     	 ldr r0,[r7,#4]
 804 000c 044B     	 ldr r3,.L75
 805 000e 9847     	 blx r3
 806              	.LVL18:
 807 0010 0346     	 mov r3,r0
 808              	 .loc 4 320 8 discriminator 1
 809 0012 002B     	 cmp r3,#0
 810 0014 F9D0     	 beq .L73
 321:.././hal/sam3u1c/inc/pll.h **** 		/* Do nothing */
 322:.././hal/sam3u1c/inc/pll.h **** 	}
 323:.././hal/sam3u1c/inc/pll.h **** 
 324:.././hal/sam3u1c/inc/pll.h **** 	return 0;
 811              	 .loc 4 324 9
 812 0016 0023     	 movs r3,#0
 325:.././hal/sam3u1c/inc/pll.h **** }
 813              	 .loc 4 325 1
 814 0018 1846     	 mov r0,r3
 815 001a 0837     	 adds r7,r7,#8
 816              	.LCFI49:
 817              	 .cfi_def_cfa_offset 8
 818 001c BD46     	 mov sp,r7
 819              	.LCFI50:
 820              	 .cfi_def_cfa_register 13
 821              	 
 822 001e 80BD     	 pop {r7,pc}
 823              	.L76:
 824              	 .align 2
 825              	.L75:
 826 0020 00000000 	 .word pll_is_locked
 827              	 .cfi_endproc
 828              	.LFE82:
 830              	 .section .text.sysclk_get_main_hz,"ax",%progbits
 831              	 .align 1
 832              	 .syntax unified
 833              	 .thumb
 834              	 .thumb_func
 835              	 .fpu softvfp
 837              	sysclk_get_main_hz:
 838              	.LFB83:
 839              	 .file 5 ".././hal/sam3u1c/inc/sam3u/sysclk.h"
   1:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
   2:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \file
   3:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
   4:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Chip-specific system clock management functions.
   5:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
   6:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Copyright (c) 2011 - 2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
   8:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  10:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \page License
  11:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  12:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  15:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  18:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  22:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  25:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  28:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  40:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  42:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
  43:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  44:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifndef CHIP_SYSCLK_H_INCLUDED
  45:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define CHIP_SYSCLK_H_INCLUDED
  46:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  47:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #include <osc.h>
  48:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #include <pll.h>
  49:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  50:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
  51:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \page sysclk_quickstart Quick Start Guide for the System Clock Management service (SAM3U)
  52:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  53:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * This is the quick start guide for the \ref sysclk_group "System Clock Management"
  54:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * service, with step-by-step instructions on how to configure and use the service for
  55:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * specific use cases.
  56:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  57:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \section sysclk_quickstart_usecases System Clock Management use cases
  58:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * - \ref sysclk_quickstart_basic
  59:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  60:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \section sysclk_quickstart_basic Basic usage of the System Clock Management service
  61:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * This section will present a basic use case for the System Clock Management service.
  62:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * This use case will configure the main system clock to 96MHz, using an internal PLL
  63:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * module to multiply the frequency of a crystal attached to the microcontroller.
  64:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  65:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_prereq Prerequisites
  66:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  - None
  67:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  68:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_setup_steps Initialization code
  69:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Add to the application initialization code:
  70:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \code
  71:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	sysclk_init();
  72:.././hal/sam3u1c/inc/sam3u/sysclk.h **** \endcode
  73:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  74:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_setup_steps_workflow Workflow
  75:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * -# Configure the system clocks according to the settings in conf_clock.h:
  76:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    \code sysclk_init(); \endcode
  77:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  78:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_example_code Example code
  79:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   Add or uncomment the following in your conf_clock.h header file, commenting out all other
  80:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   definitions of the same symbol(s):
  81:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \code
  82:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_SYSCLK_SOURCE        SYSCLK_SRC_PLLACK
  83:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  84:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   // Fpll0 = (Fclk * PLL_mul) / PLL_div
  85:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_PLL0_SOURCE          PLL_SRC_MAINCK_XTAL
  86:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_PLL0_MUL             (96000000UL / BOARD_FREQ_MAINCK_XTAL)
  87:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_PLL0_DIV             1
  88:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  89:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   // Fbus = Fsys / BUS_div
  90:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_SYSCLK_PRES          SYSCLK_PRES_1
  91:.././hal/sam3u1c/inc/sam3u/sysclk.h **** \endcode
  92:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  93:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_example_workflow Workflow
  94:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  -# Configure the main system clock to use the output of the PLL module as its source:
  95:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \code #define CONFIG_SYSCLK_SOURCE          SYSCLK_SRC_PLLACK \endcode
  96:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  -# Configure the PLL module to use the fast external fast crystal oscillator as its source:
  97:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \code #define CONFIG_PLL0_SOURCE            PLL_SRC_MAINCK_XTAL \endcode
  98:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  -# Configure the PLL module to multiply the external fast crystal oscillator frequency up to 96
  99:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \code
 100:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	#define CONFIG_PLL0_MUL             (96000000UL / BOARD_FREQ_MAINCK_XTAL)
 101:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	#define CONFIG_PLL0_DIV             1
 102:.././hal/sam3u1c/inc/sam3u/sysclk.h **** \endcode
 103:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \note For user boards, \c BOARD_FREQ_MAINCK_XTAL should be defined in the board \c conf_board.
 104:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *         file as the frequency of the fast crystal attached to the microcontroller.
 105:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  -# Configure the main clock to run at the full 96MHz, disable scaling of the main system clock 
 106:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    \code
 107:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	#define CONFIG_SYSCLK_PRES         SYSCLK_PRES_1
 108:.././hal/sam3u1c/inc/sam3u/sysclk.h **** \endcode
 109:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    \note Some dividers are powers of two, while others are integer division factors. Refer to th
 110:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *          formulas in the conf_clock.h template commented above each division define.
 111:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 112:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 113:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /// @cond 0
 114:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**INDENT-OFF**/
 115:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef __cplusplus
 116:.././hal/sam3u1c/inc/sam3u/sysclk.h **** extern "C" {
 117:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 118:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**INDENT-ON**/
 119:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /// @endcond
 120:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 121:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 122:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \weakgroup sysclk_group
 123:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * @{
 124:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 125:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 126:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //! \name Configuration Symbols
 127:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@{
 128:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 129:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \def CONFIG_SYSCLK_SOURCE
 130:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Initial/static main system clock source
 131:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 132:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * The main system clock will be configured to use this clock during
 133:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * initialization.
 134:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 135:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifndef CONFIG_SYSCLK_SOURCE
 136:.././hal/sam3u1c/inc/sam3u/sysclk.h **** # define CONFIG_SYSCLK_SOURCE   SYSCLK_SRC_MAINCK_4M_RC
 137:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 138:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 139:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \def CONFIG_SYSCLK_PRES
 140:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Initial CPU clock divider (mck)
 141:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 142:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * The MCK will run at
 143:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \f[
 144:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   f_{MCK} = \frac{f_{sys}}{\mathrm{CONFIG\_SYSCLK\_PRES}}\,\mbox{Hz}
 145:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \f]
 146:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * after initialization.
 147:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 148:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifndef CONFIG_SYSCLK_PRES
 149:.././hal/sam3u1c/inc/sam3u/sysclk.h **** # define CONFIG_SYSCLK_PRES  0
 150:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 151:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 152:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@}
 153:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 154:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //! \name Master Clock Sources (MCK)
 155:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@{
 156:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_SLCK_RC              0       //!< Internal 32kHz RC oscillator as master source 
 157:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_SLCK_XTAL            1       //!< External 32kHz crystal oscillator as master so
 158:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_SLCK_BYPASS          2       //!< External 32kHz bypass oscillator as master sou
 159:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_4M_RC         3       //!< Internal 4MHz RC oscillator as master source c
 160:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_8M_RC         4       //!< Internal 8MHz RC oscillator as master source c
 161:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_12M_RC        5       //!< Internal 12MHz RC oscillator as master source 
 162:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_XTAL          6       //!< External crystal oscillator as master source c
 163:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_BYPASS        7       //!< External bypass oscillator as master source cl
 164:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_PLLACK               8       //!< Use PLLACK as master source clock
 165:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_UPLLCK               9       //!< Use UPLLCK as master source clock
 166:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@}
 167:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 168:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //! \name Master Clock Prescalers (MCK)
 169:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@{
 170:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_1           PMC_MCKR_PRES_CLK_1     //!< Set master clock prescaler to 1
 171:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_2           PMC_MCKR_PRES_CLK_2     //!< Set master clock prescaler to 2
 172:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_4           PMC_MCKR_PRES_CLK_4     //!< Set master clock prescaler to 4
 173:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_8           PMC_MCKR_PRES_CLK_8     //!< Set master clock prescaler to 8
 174:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_16          PMC_MCKR_PRES_CLK_16    //!< Set master clock prescaler to 16
 175:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_32          PMC_MCKR_PRES_CLK_32    //!< Set master clock prescaler to 32
 176:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_64          PMC_MCKR_PRES_CLK_64    //!< Set master clock prescaler to 64
 177:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_3           PMC_MCKR_PRES_CLK_3     //!< Set master clock prescaler to 3
 178:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@}
 179:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 180:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 181:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \def CONFIG_USBCLK_SOURCE
 182:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Configuration symbol for the USB generic clock source
 183:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 184:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Sets the clock source to use for the USB. The source must also be properly
 185:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * configured.
 186:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 187:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Define this to one of the \c USBCLK_SRC_xxx settings. Leave it undefined if
 188:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * USB is not required.
 189:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 190:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef __DOXYGEN__
 191:.././hal/sam3u1c/inc/sam3u/sysclk.h **** # define CONFIG_USBCLK_SOURCE
 192:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 193:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 194:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 195:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \def CONFIG_USBCLK_DIV
 196:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Configuration symbol for the USB generic clock divider setting
 197:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 198:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Sets the clock division for the USB generic clock. If a USB clock source is
 199:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * selected with CONFIG_USBCLK_SOURCE, this configuration symbol must also be
 200:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * defined.
 201:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 202:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef __DOXYGEN__
 203:.././hal/sam3u1c/inc/sam3u/sysclk.h **** # define CONFIG_USBCLK_DIV
 204:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 205:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 206:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 207:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \name Querying the system clock
 208:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 209:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * The following functions may be used to query the current frequency of
 210:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * the system clock and the CPU and bus clocks derived from it.
 211:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * sysclk_get_main_hz() and sysclk_get_cpu_hz() can be assumed to be
 212:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * available on all platforms, although some platforms may define
 213:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * additional accessors for various chip-internal bus clocks. These are
 214:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * usually not intended to be queried directly by generic code.
 215:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 216:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@{
 217:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 218:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 219:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Return the current rate in Hz of the main system clock
 220:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 221:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \todo This function assumes that the main clock source never changes
 222:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * once it's been set up, and that PLL0 always runs at the compile-time
 223:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * configured default rate. While this is probably the most common
 224:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * configuration, which we want to support as a special case for
 225:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * performance reasons, we will at some point need to support more
 226:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * dynamic setups as well.
 227:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 228:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
 229:.././hal/sam3u1c/inc/sam3u/sysclk.h **** extern uint32_t sysclk_initialized;
 230:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 231:.././hal/sam3u1c/inc/sam3u/sysclk.h **** static inline uint32_t sysclk_get_main_hz(void)
 232:.././hal/sam3u1c/inc/sam3u/sysclk.h **** {
 840              	 .loc 5 232 1
 841              	 .cfi_startproc
 842              	 
 843              	 
 844 0000 80B5     	 push {r7,lr}
 845              	.LCFI51:
 846              	 .cfi_def_cfa_offset 8
 847              	 .cfi_offset 7,-8
 848              	 .cfi_offset 14,-4
 849 0002 00AF     	 add r7,sp,#0
 850              	.LCFI52:
 851              	 .cfi_def_cfa_register 7
 233:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
 234:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	if (!sysclk_initialized ) {
 235:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_4M_RC_HZ;
 236:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 237:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 238:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 239:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	/* Config system clock setting */
 240:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_RC) {
 241:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_SLCK_32K_RC_HZ;
 242:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_XTAL) {
 243:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_SLCK_32K_XTAL_HZ;
 244:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_BYPASS) {
 245:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_SLCK_32K_BYPASS_HZ;
 246:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_4M_RC) {
 247:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_4M_RC_HZ;
 248:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_8M_RC) {
 249:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_8M_RC_HZ;
 250:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_12M_RC) {
 251:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_12M_RC_HZ;
 252:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_XTAL) {
 253:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_XTAL_HZ;
 254:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
 255:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_BYPASS_HZ;
 256:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 257:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef CONFIG_PLL0_SOURCE
 258:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
 259:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return pll_get_default_rate(0);
 852              	 .loc 5 259 10
 853 0004 0620     	 movs r0,#6
 854 0006 034B     	 ldr r3,.L79
 855 0008 9847     	 blx r3
 856              	.LVL19:
 857 000a 0346     	 mov r3,r0
 858 000c 1B01     	 lsls r3,r3,#4
 260:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 261:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 262:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 263:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef CONFIG_PLL1_SOURCE
 264:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_UPLLCK) {
 265:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return PLL_UPLL_HZ;
 266:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 267:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 268:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	else {
 269:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
 270:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return 0;
 271:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 272:.././hal/sam3u1c/inc/sam3u/sysclk.h **** }
 859              	 .loc 5 272 1
 860 000e 1846     	 mov r0,r3
 861 0010 80BD     	 pop {r7,pc}
 862              	.L80:
 863 0012 00BF     	 .align 2
 864              	.L79:
 865 0014 00000000 	 .word osc_get_rate
 866              	 .cfi_endproc
 867              	.LFE83:
 869              	 .section .text.sysclk_get_cpu_hz,"ax",%progbits
 870              	 .align 1
 871              	 .syntax unified
 872              	 .thumb
 873              	 .thumb_func
 874              	 .fpu softvfp
 876              	sysclk_get_cpu_hz:
 877              	.LFB84:
 273:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 274:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 275:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Return the current rate in Hz of the CPU clock
 276:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 277:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \todo This function assumes that the CPU always runs at the system
 278:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * clock frequency. We want to support at least two more scenarios:
 279:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Fixed CPU/bus clock dividers (config symbols) and dynamic CPU/bus
 280:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * clock dividers (which may change at run time). Ditto for all the bus
 281:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * clocks.
 282:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 283:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \return Frequency of the CPU clock, in Hz.
 284:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 285:.././hal/sam3u1c/inc/sam3u/sysclk.h **** static inline uint32_t sysclk_get_cpu_hz(void)
 286:.././hal/sam3u1c/inc/sam3u/sysclk.h **** {
 878              	 .loc 5 286 1
 879              	 .cfi_startproc
 880              	 
 881              	 
 882 0000 80B5     	 push {r7,lr}
 883              	.LCFI53:
 884              	 .cfi_def_cfa_offset 8
 885              	 .cfi_offset 7,-8
 886              	 .cfi_offset 14,-4
 887 0002 00AF     	 add r7,sp,#0
 888              	.LCFI54:
 889              	 .cfi_def_cfa_register 7
 287:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
 288:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	/* prescaler, not an immediate value. */
 289:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	return sysclk_get_main_hz() /
 890              	 .loc 5 289 9
 891 0004 024B     	 ldr r3,.L83
 892 0006 9847     	 blx r3
 893              	.LVL20:
 894 0008 0346     	 mov r3,r0
 895              	 .loc 5 289 30
 896 000a 5B08     	 lsrs r3,r3,#1
 290:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
 291:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
 292:.././hal/sam3u1c/inc/sam3u/sysclk.h **** }
 897              	 .loc 5 292 1
 898 000c 1846     	 mov r0,r3
 899 000e 80BD     	 pop {r7,pc}
 900              	.L84:
 901              	 .align 2
 902              	.L83:
 903 0010 00000000 	 .word sysclk_get_main_hz
 904              	 .cfi_endproc
 905              	.LFE84:
 907              	 .section .text.sysclk_set_prescalers,"ax",%progbits
 908              	 .align 1
 909              	 .global sysclk_set_prescalers
 910              	 .syntax unified
 911              	 .thumb
 912              	 .thumb_func
 913              	 .fpu softvfp
 915              	sysclk_set_prescalers:
 916              	.LFB89:
 917              	 .file 6 ".././hal/sam3u1c/sysclk.c"
   1:.././hal/sam3u1c/sysclk.c **** /**
   2:.././hal/sam3u1c/sysclk.c ****  * \file
   3:.././hal/sam3u1c/sysclk.c ****  *
   4:.././hal/sam3u1c/sysclk.c ****  * \brief Chip-specific system clock management functions.
   5:.././hal/sam3u1c/sysclk.c ****  *
   6:.././hal/sam3u1c/sysclk.c ****  * Copyright (c) 2011 - 2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/sysclk.c ****  *
   8:.././hal/sam3u1c/sysclk.c ****  * \asf_license_start
   9:.././hal/sam3u1c/sysclk.c ****  *
  10:.././hal/sam3u1c/sysclk.c ****  * \page License
  11:.././hal/sam3u1c/sysclk.c ****  *
  12:.././hal/sam3u1c/sysclk.c ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/sysclk.c ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/sysclk.c ****  *
  15:.././hal/sam3u1c/sysclk.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/sysclk.c ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/sysclk.c ****  *
  18:.././hal/sam3u1c/sysclk.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/sysclk.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/sysclk.c ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/sysclk.c ****  *
  22:.././hal/sam3u1c/sysclk.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/sysclk.c ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/sysclk.c ****  *
  25:.././hal/sam3u1c/sysclk.c ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/sysclk.c ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/sysclk.c ****  *
  28:.././hal/sam3u1c/sysclk.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/sysclk.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/sysclk.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/sysclk.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/sysclk.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/sysclk.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/sysclk.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/sysclk.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/sysclk.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/sysclk.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/sysclk.c ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/sysclk.c ****  *
  40:.././hal/sam3u1c/sysclk.c ****  * \asf_license_stop
  41:.././hal/sam3u1c/sysclk.c ****  *
  42:.././hal/sam3u1c/sysclk.c ****  */
  43:.././hal/sam3u1c/sysclk.c **** 
  44:.././hal/sam3u1c/sysclk.c **** #include <sysclk.h>
  45:.././hal/sam3u1c/sysclk.c **** 
  46:.././hal/sam3u1c/sysclk.c **** /// @cond 0
  47:.././hal/sam3u1c/sysclk.c **** /**INDENT-OFF**/
  48:.././hal/sam3u1c/sysclk.c **** #ifdef __cplusplus
  49:.././hal/sam3u1c/sysclk.c **** extern "C" {
  50:.././hal/sam3u1c/sysclk.c **** #endif
  51:.././hal/sam3u1c/sysclk.c **** /**INDENT-ON**/
  52:.././hal/sam3u1c/sysclk.c **** /// @endcond
  53:.././hal/sam3u1c/sysclk.c **** 
  54:.././hal/sam3u1c/sysclk.c **** /**
  55:.././hal/sam3u1c/sysclk.c ****  * \weakgroup sysclk_group
  56:.././hal/sam3u1c/sysclk.c ****  * @{
  57:.././hal/sam3u1c/sysclk.c ****  */
  58:.././hal/sam3u1c/sysclk.c **** 
  59:.././hal/sam3u1c/sysclk.c **** #if defined(CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
  60:.././hal/sam3u1c/sysclk.c **** /**
  61:.././hal/sam3u1c/sysclk.c ****  * \brief boolean signalling that the sysclk_init is done.
  62:.././hal/sam3u1c/sysclk.c ****  */
  63:.././hal/sam3u1c/sysclk.c **** uint32_t sysclk_initialized = 0;
  64:.././hal/sam3u1c/sysclk.c **** #endif
  65:.././hal/sam3u1c/sysclk.c **** 
  66:.././hal/sam3u1c/sysclk.c **** /**
  67:.././hal/sam3u1c/sysclk.c ****  * \brief Set system clock prescaler configuration
  68:.././hal/sam3u1c/sysclk.c ****  *
  69:.././hal/sam3u1c/sysclk.c ****  * This function will change the system clock prescaler configuration to
  70:.././hal/sam3u1c/sysclk.c ****  * match the parameters.
  71:.././hal/sam3u1c/sysclk.c ****  *
  72:.././hal/sam3u1c/sysclk.c ****  * \note The parameters to this function are device-specific.
  73:.././hal/sam3u1c/sysclk.c ****  *
  74:.././hal/sam3u1c/sysclk.c ****  * \param cpu_shift The CPU clock will be divided by \f$2^{mck\_pres}\f$
  75:.././hal/sam3u1c/sysclk.c ****  */
  76:.././hal/sam3u1c/sysclk.c **** void sysclk_set_prescalers(uint32_t ul_pres)
  77:.././hal/sam3u1c/sysclk.c **** {
 918              	 .loc 6 77 1
 919              	 .cfi_startproc
 920              	 
 921              	 
 922 0000 80B5     	 push {r7,lr}
 923              	.LCFI55:
 924              	 .cfi_def_cfa_offset 8
 925              	 .cfi_offset 7,-8
 926              	 .cfi_offset 14,-4
 927 0002 82B0     	 sub sp,sp,#8
 928              	.LCFI56:
 929              	 .cfi_def_cfa_offset 16
 930 0004 00AF     	 add r7,sp,#0
 931              	.LCFI57:
 932              	 .cfi_def_cfa_register 7
 933 0006 7860     	 str r0,[r7,#4]
  78:.././hal/sam3u1c/sysclk.c **** 	pmc_mck_set_prescaler(ul_pres);
 934              	 .loc 6 78 2
 935 0008 7868     	 ldr r0,[r7,#4]
 936 000a 044B     	 ldr r3,.L86
 937 000c 9847     	 blx r3
 938              	.LVL21:
  79:.././hal/sam3u1c/sysclk.c **** 	SystemCoreClockUpdate();
 939              	 .loc 6 79 2
 940 000e 044B     	 ldr r3,.L86+4
 941 0010 9847     	 blx r3
 942              	.LVL22:
  80:.././hal/sam3u1c/sysclk.c **** }
 943              	 .loc 6 80 1
 944 0012 00BF     	 nop
 945 0014 0837     	 adds r7,r7,#8
 946              	.LCFI58:
 947              	 .cfi_def_cfa_offset 8
 948 0016 BD46     	 mov sp,r7
 949              	.LCFI59:
 950              	 .cfi_def_cfa_register 13
 951              	 
 952 0018 80BD     	 pop {r7,pc}
 953              	.L87:
 954 001a 00BF     	 .align 2
 955              	.L86:
 956 001c 00000000 	 .word pmc_mck_set_prescaler
 957 0020 00000000 	 .word SystemCoreClockUpdate
 958              	 .cfi_endproc
 959              	.LFE89:
 961              	 .section .text.sysclk_set_source,"ax",%progbits
 962              	 .align 1
 963              	 .global sysclk_set_source
 964              	 .syntax unified
 965              	 .thumb
 966              	 .thumb_func
 967              	 .fpu softvfp
 969              	sysclk_set_source:
 970              	.LFB90:
  81:.././hal/sam3u1c/sysclk.c **** 
  82:.././hal/sam3u1c/sysclk.c **** /**
  83:.././hal/sam3u1c/sysclk.c ****  * \brief Change the source of the main system clock.
  84:.././hal/sam3u1c/sysclk.c ****  *
  85:.././hal/sam3u1c/sysclk.c ****  * \param src The new system clock source. Must be one of the constants
  86:.././hal/sam3u1c/sysclk.c ****  * from the <em>System Clock Sources</em> section.
  87:.././hal/sam3u1c/sysclk.c ****  */
  88:.././hal/sam3u1c/sysclk.c **** void sysclk_set_source(uint32_t ul_src)
  89:.././hal/sam3u1c/sysclk.c **** {
 971              	 .loc 6 89 1
 972              	 .cfi_startproc
 973              	 
 974              	 
 975 0000 80B5     	 push {r7,lr}
 976              	.LCFI60:
 977              	 .cfi_def_cfa_offset 8
 978              	 .cfi_offset 7,-8
 979              	 .cfi_offset 14,-4
 980 0002 82B0     	 sub sp,sp,#8
 981              	.LCFI61:
 982              	 .cfi_def_cfa_offset 16
 983 0004 00AF     	 add r7,sp,#0
 984              	.LCFI62:
 985              	 .cfi_def_cfa_register 7
 986 0006 7860     	 str r0,[r7,#4]
  90:.././hal/sam3u1c/sysclk.c **** 	switch (ul_src) {
 987              	 .loc 6 90 2
 988 0008 7B68     	 ldr r3,[r7,#4]
 989 000a 092B     	 cmp r3,#9
 990 000c 26D8     	 bhi .L89
 991 000e 01A2     	 adr r2,.L91
 992 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 993              	 .p2align 2
 994              	.L91:
 995 0014 3D000000 	 .word .L94+1
 996 0018 3D000000 	 .word .L94+1
 997 001c 3D000000 	 .word .L94+1
 998 0020 45000000 	 .word .L93+1
 999 0024 45000000 	 .word .L93+1
 1000 0028 45000000 	 .word .L93+1
 1001 002c 45000000 	 .word .L93+1
 1002 0030 45000000 	 .word .L93+1
 1003 0034 4D000000 	 .word .L92+1
 1004 0038 55000000 	 .word .L90+1
 1005              	 .p2align 1
 1006              	.L94:
  91:.././hal/sam3u1c/sysclk.c **** 	case SYSCLK_SRC_SLCK_RC:
  92:.././hal/sam3u1c/sysclk.c **** 	case SYSCLK_SRC_SLCK_XTAL:
  93:.././hal/sam3u1c/sysclk.c **** 	case SYSCLK_SRC_SLCK_BYPASS:
  94:.././hal/sam3u1c/sysclk.c **** 		pmc_mck_set_source(PMC_MCKR_CSS_SLOW_CLK);
 1007              	 .loc 6 94 3
 1008 003c 0020     	 movs r0,#0
 1009 003e 0A4B     	 ldr r3,.L95
 1010 0040 9847     	 blx r3
 1011              	.LVL23:
  95:.././hal/sam3u1c/sysclk.c **** 		break;
 1012              	 .loc 6 95 3
 1013 0042 0BE0     	 b .L89
 1014              	.L93:
  96:.././hal/sam3u1c/sysclk.c **** 
  97:.././hal/sam3u1c/sysclk.c **** 	case SYSCLK_SRC_MAINCK_4M_RC:
  98:.././hal/sam3u1c/sysclk.c **** 	case SYSCLK_SRC_MAINCK_8M_RC:
  99:.././hal/sam3u1c/sysclk.c **** 	case SYSCLK_SRC_MAINCK_12M_RC:
 100:.././hal/sam3u1c/sysclk.c **** 	case SYSCLK_SRC_MAINCK_XTAL:
 101:.././hal/sam3u1c/sysclk.c **** 	case SYSCLK_SRC_MAINCK_BYPASS:
 102:.././hal/sam3u1c/sysclk.c **** 		pmc_mck_set_source(PMC_MCKR_CSS_MAIN_CLK);
 1015              	 .loc 6 102 3
 1016 0044 0120     	 movs r0,#1
 1017 0046 084B     	 ldr r3,.L95
 1018 0048 9847     	 blx r3
 1019              	.LVL24:
 103:.././hal/sam3u1c/sysclk.c **** 		break;
 1020              	 .loc 6 103 3
 1021 004a 07E0     	 b .L89
 1022              	.L92:
 104:.././hal/sam3u1c/sysclk.c **** 
 105:.././hal/sam3u1c/sysclk.c **** 	case SYSCLK_SRC_PLLACK:
 106:.././hal/sam3u1c/sysclk.c **** 		pmc_mck_set_source(PMC_MCKR_CSS_PLLA_CLK);
 1023              	 .loc 6 106 3
 1024 004c 0220     	 movs r0,#2
 1025 004e 064B     	 ldr r3,.L95
 1026 0050 9847     	 blx r3
 1027              	.LVL25:
 107:.././hal/sam3u1c/sysclk.c **** 		break;
 1028              	 .loc 6 107 3
 1029 0052 03E0     	 b .L89
 1030              	.L90:
 108:.././hal/sam3u1c/sysclk.c **** 
 109:.././hal/sam3u1c/sysclk.c **** 	case SYSCLK_SRC_UPLLCK:
 110:.././hal/sam3u1c/sysclk.c **** 		pmc_mck_set_source(PMC_MCKR_CSS_UPLL_CLK);
 1031              	 .loc 6 110 3
 1032 0054 0320     	 movs r0,#3
 1033 0056 044B     	 ldr r3,.L95
 1034 0058 9847     	 blx r3
 1035              	.LVL26:
 111:.././hal/sam3u1c/sysclk.c **** 		break;
 1036              	 .loc 6 111 3
 1037 005a 00BF     	 nop
 1038              	.L89:
 112:.././hal/sam3u1c/sysclk.c **** 	}
 113:.././hal/sam3u1c/sysclk.c **** 
 114:.././hal/sam3u1c/sysclk.c **** 	SystemCoreClockUpdate();
 1039              	 .loc 6 114 2
 1040 005c 034B     	 ldr r3,.L95+4
 1041 005e 9847     	 blx r3
 1042              	.LVL27:
 115:.././hal/sam3u1c/sysclk.c **** }
 1043              	 .loc 6 115 1
 1044 0060 00BF     	 nop
 1045 0062 0837     	 adds r7,r7,#8
 1046              	.LCFI63:
 1047              	 .cfi_def_cfa_offset 8
 1048 0064 BD46     	 mov sp,r7
 1049              	.LCFI64:
 1050              	 .cfi_def_cfa_register 13
 1051              	 
 1052 0066 80BD     	 pop {r7,pc}
 1053              	.L96:
 1054              	 .align 2
 1055              	.L95:
 1056 0068 00000000 	 .word pmc_mck_set_source
 1057 006c 00000000 	 .word SystemCoreClockUpdate
 1058              	 .cfi_endproc
 1059              	.LFE90:
 1061              	 .section .text.sysclk_enable_usb,"ax",%progbits
 1062              	 .align 1
 1063              	 .global sysclk_enable_usb
 1064              	 .syntax unified
 1065              	 .thumb
 1066              	 .thumb_func
 1067              	 .fpu softvfp
 1069              	sysclk_enable_usb:
 1070              	.LFB91:
 116:.././hal/sam3u1c/sysclk.c **** 
 117:.././hal/sam3u1c/sysclk.c **** /**
 118:.././hal/sam3u1c/sysclk.c ****  * \brief Enable USB clock.
 119:.././hal/sam3u1c/sysclk.c ****  *
 120:.././hal/sam3u1c/sysclk.c ****  * \note The SAM3U UDP hardware interprets div as div+1. For readability the
 121:.././hal/sam3u1c/sysclk.c ****  *       hardware div+1 is hidden in this implementation. Use div as div
 122:.././hal/sam3u1c/sysclk.c ****  *       effective value.
 123:.././hal/sam3u1c/sysclk.c ****  *
 124:.././hal/sam3u1c/sysclk.c ****  * \param pll_id Source of the USB clock.
 125:.././hal/sam3u1c/sysclk.c ****  * \param div Actual clock divisor. Must be superior to 0.
 126:.././hal/sam3u1c/sysclk.c ****  */
 127:.././hal/sam3u1c/sysclk.c **** void sysclk_enable_usb(void)
 128:.././hal/sam3u1c/sysclk.c **** {
 1071              	 .loc 6 128 1
 1072              	 .cfi_startproc
 1073              	 
 1074              	 
 1075 0000 90B5     	 push {r4,r7,lr}
 1076              	.LCFI65:
 1077              	 .cfi_def_cfa_offset 12
 1078              	 .cfi_offset 4,-12
 1079              	 .cfi_offset 7,-8
 1080              	 .cfi_offset 14,-4
 1081 0002 83B0     	 sub sp,sp,#12
 1082              	.LCFI66:
 1083              	 .cfi_def_cfa_offset 24
 1084 0004 00AF     	 add r7,sp,#0
 1085              	.LCFI67:
 1086              	 .cfi_def_cfa_register 7
 129:.././hal/sam3u1c/sysclk.c **** 	struct pll_config pllcfg;
 130:.././hal/sam3u1c/sysclk.c **** 
 131:.././hal/sam3u1c/sysclk.c **** 	pll_enable_source(CONFIG_PLL1_SOURCE);
 1087              	 .loc 6 131 2
 1088 0006 0620     	 movs r0,#6
 1089 0008 094B     	 ldr r3,.L98
 1090 000a 9847     	 blx r3
 1091              	.LVL28:
 132:.././hal/sam3u1c/sysclk.c **** 	pll_config_defaults(&pllcfg, 1);
 1092              	 .loc 6 132 2
 1093 000c 381D     	 adds r0,r7,#4
 1094 000e 0023     	 movs r3,#0
 1095 0010 0022     	 movs r2,#0
 1096 0012 0621     	 movs r1,#6
 1097 0014 074C     	 ldr r4,.L98+4
 1098 0016 A047     	 blx r4
 1099              	.LVL29:
 133:.././hal/sam3u1c/sysclk.c **** 	pll_enable(&pllcfg, 1);
 1100              	 .loc 6 133 2
 1101 0018 3B1D     	 adds r3,r7,#4
 1102 001a 0121     	 movs r1,#1
 1103 001c 1846     	 mov r0,r3
 1104 001e 064B     	 ldr r3,.L98+8
 1105 0020 9847     	 blx r3
 1106              	.LVL30:
 134:.././hal/sam3u1c/sysclk.c **** 	pll_wait_for_lock(1);
 1107              	 .loc 6 134 2
 1108 0022 0120     	 movs r0,#1
 1109 0024 054B     	 ldr r3,.L98+12
 1110 0026 9847     	 blx r3
 1111              	.LVL31:
 135:.././hal/sam3u1c/sysclk.c **** }
 1112              	 .loc 6 135 1
 1113 0028 00BF     	 nop
 1114 002a 0C37     	 adds r7,r7,#12
 1115              	.LCFI68:
 1116              	 .cfi_def_cfa_offset 12
 1117 002c BD46     	 mov sp,r7
 1118              	.LCFI69:
 1119              	 .cfi_def_cfa_register 13
 1120              	 
 1121 002e 90BD     	 pop {r4,r7,pc}
 1122              	.L99:
 1123              	 .align 2
 1124              	.L98:
 1125 0030 00000000 	 .word pll_enable_source
 1126 0034 00000000 	 .word pll_config_init
 1127 0038 00000000 	 .word pll_enable
 1128 003c 00000000 	 .word pll_wait_for_lock
 1129              	 .cfi_endproc
 1130              	.LFE91:
 1132              	 .section .text.sysclk_disable_usb,"ax",%progbits
 1133              	 .align 1
 1134              	 .global sysclk_disable_usb
 1135              	 .syntax unified
 1136              	 .thumb
 1137              	 .thumb_func
 1138              	 .fpu softvfp
 1140              	sysclk_disable_usb:
 1141              	.LFB92:
 136:.././hal/sam3u1c/sysclk.c **** 
 137:.././hal/sam3u1c/sysclk.c **** /**
 138:.././hal/sam3u1c/sysclk.c ****  * \brief Disable the USB clock.
 139:.././hal/sam3u1c/sysclk.c ****  *
 140:.././hal/sam3u1c/sysclk.c ****  * \note This implementation does not switch off the PLL, it just turns off the
 141:.././hal/sam3u1c/sysclk.c ****  *       USB clock.
 142:.././hal/sam3u1c/sysclk.c ****  */
 143:.././hal/sam3u1c/sysclk.c **** void sysclk_disable_usb(void)
 144:.././hal/sam3u1c/sysclk.c **** {
 1142              	 .loc 6 144 1
 1143              	 .cfi_startproc
 1144              	 
 1145              	 
 1146 0000 80B5     	 push {r7,lr}
 1147              	.LCFI70:
 1148              	 .cfi_def_cfa_offset 8
 1149              	 .cfi_offset 7,-8
 1150              	 .cfi_offset 14,-4
 1151 0002 00AF     	 add r7,sp,#0
 1152              	.LCFI71:
 1153              	 .cfi_def_cfa_register 7
 145:.././hal/sam3u1c/sysclk.c **** 	if (CONFIG_SYSCLK_SOURCE != SYSCLK_SRC_UPLLCK) {
 146:.././hal/sam3u1c/sysclk.c **** 		pll_disable(1);
 1154              	 .loc 6 146 3
 1155 0004 0120     	 movs r0,#1
 1156 0006 024B     	 ldr r3,.L101
 1157 0008 9847     	 blx r3
 1158              	.LVL32:
 147:.././hal/sam3u1c/sysclk.c **** 	}
 148:.././hal/sam3u1c/sysclk.c **** }
 1159              	 .loc 6 148 1
 1160 000a 00BF     	 nop
 1161 000c 80BD     	 pop {r7,pc}
 1162              	.L102:
 1163 000e 00BF     	 .align 2
 1164              	.L101:
 1165 0010 00000000 	 .word pll_disable
 1166              	 .cfi_endproc
 1167              	.LFE92:
 1169              	 .section .text.sysclk_init,"ax",%progbits
 1170              	 .align 1
 1171              	 .global sysclk_init
 1172              	 .syntax unified
 1173              	 .thumb
 1174              	 .thumb_func
 1175              	 .fpu softvfp
 1177              	sysclk_init:
 1178              	.LFB93:
 149:.././hal/sam3u1c/sysclk.c **** 
 150:.././hal/sam3u1c/sysclk.c **** void sysclk_init(void)
 151:.././hal/sam3u1c/sysclk.c **** {
 1179              	 .loc 6 151 1
 1180              	 .cfi_startproc
 1181              	 
 1182              	 
 1183 0000 90B5     	 push {r4,r7,lr}
 1184              	.LCFI72:
 1185              	 .cfi_def_cfa_offset 12
 1186              	 .cfi_offset 4,-12
 1187              	 .cfi_offset 7,-8
 1188              	 .cfi_offset 14,-4
 1189 0002 83B0     	 sub sp,sp,#12
 1190              	.LCFI73:
 1191              	 .cfi_def_cfa_offset 24
 1192 0004 00AF     	 add r7,sp,#0
 1193              	.LCFI74:
 1194              	 .cfi_def_cfa_register 7
 152:.././hal/sam3u1c/sysclk.c **** 	struct pll_config pllcfg;
 153:.././hal/sam3u1c/sysclk.c **** 
 154:.././hal/sam3u1c/sysclk.c **** 	/* Set flash wait state to max in case the below clock switching. */
 155:.././hal/sam3u1c/sysclk.c **** 	system_init_flash(CHIP_FREQ_CPU_MAX);
 1195              	 .loc 6 155 2
 1196 0006 1648     	 ldr r0,.L105
 1197 0008 164B     	 ldr r3,.L105+4
 1198 000a 9847     	 blx r3
 1199              	.LVL33:
 156:.././hal/sam3u1c/sysclk.c **** 
 157:.././hal/sam3u1c/sysclk.c **** 	/* Config system clock setting */
 158:.././hal/sam3u1c/sysclk.c **** 	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_RC) {
 159:.././hal/sam3u1c/sysclk.c **** 		osc_enable(OSC_SLCK_32K_RC);
 160:.././hal/sam3u1c/sysclk.c **** 		osc_wait_ready(OSC_SLCK_32K_RC);
 161:.././hal/sam3u1c/sysclk.c **** 		pmc_switch_mck_to_sclk(CONFIG_SYSCLK_PRES);
 162:.././hal/sam3u1c/sysclk.c **** 	}
 163:.././hal/sam3u1c/sysclk.c **** 
 164:.././hal/sam3u1c/sysclk.c **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_XTAL) {
 165:.././hal/sam3u1c/sysclk.c **** 		osc_enable(OSC_SLCK_32K_XTAL);
 166:.././hal/sam3u1c/sysclk.c **** 		osc_wait_ready(OSC_SLCK_32K_XTAL);
 167:.././hal/sam3u1c/sysclk.c **** 		pmc_switch_mck_to_sclk(CONFIG_SYSCLK_PRES);
 168:.././hal/sam3u1c/sysclk.c **** 	}
 169:.././hal/sam3u1c/sysclk.c **** 
 170:.././hal/sam3u1c/sysclk.c **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_BYPASS) {
 171:.././hal/sam3u1c/sysclk.c **** 		osc_enable(OSC_SLCK_32K_BYPASS);
 172:.././hal/sam3u1c/sysclk.c **** 		osc_wait_ready(OSC_SLCK_32K_BYPASS);
 173:.././hal/sam3u1c/sysclk.c **** 		pmc_switch_mck_to_sclk(CONFIG_SYSCLK_PRES);
 174:.././hal/sam3u1c/sysclk.c **** 	}
 175:.././hal/sam3u1c/sysclk.c **** 
 176:.././hal/sam3u1c/sysclk.c **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_4M_RC) {
 177:.././hal/sam3u1c/sysclk.c **** 		/* Already running from SYSCLK_SRC_MAINCK_4M_RC */
 178:.././hal/sam3u1c/sysclk.c **** 	}
 179:.././hal/sam3u1c/sysclk.c **** 
 180:.././hal/sam3u1c/sysclk.c **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_8M_RC) {
 181:.././hal/sam3u1c/sysclk.c **** 		osc_enable(OSC_MAINCK_8M_RC);
 182:.././hal/sam3u1c/sysclk.c **** 		osc_wait_ready(OSC_MAINCK_8M_RC);
 183:.././hal/sam3u1c/sysclk.c **** 		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
 184:.././hal/sam3u1c/sysclk.c **** 	}
 185:.././hal/sam3u1c/sysclk.c **** 
 186:.././hal/sam3u1c/sysclk.c **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_12M_RC) {
 187:.././hal/sam3u1c/sysclk.c **** 		osc_enable(OSC_MAINCK_12M_RC);
 188:.././hal/sam3u1c/sysclk.c **** 		osc_wait_ready(OSC_MAINCK_12M_RC);
 189:.././hal/sam3u1c/sysclk.c **** 		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
 190:.././hal/sam3u1c/sysclk.c **** 	}
 191:.././hal/sam3u1c/sysclk.c **** 
 192:.././hal/sam3u1c/sysclk.c **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_XTAL) {
 193:.././hal/sam3u1c/sysclk.c **** 		osc_enable(OSC_MAINCK_XTAL);
 194:.././hal/sam3u1c/sysclk.c **** 		osc_wait_ready(OSC_MAINCK_XTAL);
 195:.././hal/sam3u1c/sysclk.c **** 		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
 196:.././hal/sam3u1c/sysclk.c **** 	}
 197:.././hal/sam3u1c/sysclk.c **** 
 198:.././hal/sam3u1c/sysclk.c **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
 199:.././hal/sam3u1c/sysclk.c **** 		osc_enable(OSC_MAINCK_BYPASS);
 200:.././hal/sam3u1c/sysclk.c **** 		osc_wait_ready(OSC_MAINCK_BYPASS);
 201:.././hal/sam3u1c/sysclk.c **** 		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
 202:.././hal/sam3u1c/sysclk.c **** 	}
 203:.././hal/sam3u1c/sysclk.c **** 
 204:.././hal/sam3u1c/sysclk.c **** #ifdef CONFIG_PLL0_SOURCE
 205:.././hal/sam3u1c/sysclk.c **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
 206:.././hal/sam3u1c/sysclk.c **** 		pll_enable_source(CONFIG_PLL0_SOURCE);
 1200              	 .loc 6 206 3
 1201 000c 0620     	 movs r0,#6
 1202 000e 164B     	 ldr r3,.L105+8
 1203 0010 9847     	 blx r3
 1204              	.LVL34:
 207:.././hal/sam3u1c/sysclk.c **** 		// Source is mainck, select source for mainck
 208:.././hal/sam3u1c/sysclk.c **** 		if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_4M_RC ||
 209:.././hal/sam3u1c/sysclk.c **** 				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_8M_RC ||
 210:.././hal/sam3u1c/sysclk.c **** 				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_12M_RC) {
 211:.././hal/sam3u1c/sysclk.c **** 			pmc_mainck_osc_select(0);
 212:.././hal/sam3u1c/sysclk.c **** 			while(!pmc_osc_is_ready_mainck());
 213:.././hal/sam3u1c/sysclk.c **** #  ifndef CONFIG_PLL1_SOURCE
 214:.././hal/sam3u1c/sysclk.c **** 			pmc_osc_disable_main_xtal();
 215:.././hal/sam3u1c/sysclk.c **** #  endif
 216:.././hal/sam3u1c/sysclk.c **** 		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
 217:.././hal/sam3u1c/sysclk.c **** 				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
 218:.././hal/sam3u1c/sysclk.c **** 			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
 1205              	 .loc 6 218 4
 1206 0012 4FF08070 	 mov r0,#16777216
 1207 0016 154B     	 ldr r3,.L105+12
 1208 0018 9847     	 blx r3
 1209              	.LVL35:
 219:.././hal/sam3u1c/sysclk.c **** 			while(!pmc_osc_is_ready_mainck());
 1210              	 .loc 6 219 9
 1211 001a 00BF     	 nop
 1212              	.L104:
 1213              	 .loc 6 219 11 discriminator 1
 1214 001c 144B     	 ldr r3,.L105+16
 1215 001e 9847     	 blx r3
 1216              	.LVL36:
 1217 0020 0346     	 mov r3,r0
 1218              	 .loc 6 219 9 discriminator 1
 1219 0022 002B     	 cmp r3,#0
 1220 0024 FAD0     	 beq .L104
 220:.././hal/sam3u1c/sysclk.c **** 		}
 221:.././hal/sam3u1c/sysclk.c **** 		pll_config_defaults(&pllcfg, 0);
 1221              	 .loc 6 221 3
 1222 0026 381D     	 adds r0,r7,#4
 1223 0028 1023     	 movs r3,#16
 1224 002a 0122     	 movs r2,#1
 1225 002c 0621     	 movs r1,#6
 1226 002e 114C     	 ldr r4,.L105+20
 1227 0030 A047     	 blx r4
 1228              	.LVL37:
 222:.././hal/sam3u1c/sysclk.c **** 		pll_enable(&pllcfg, 0);
 1229              	 .loc 6 222 3
 1230 0032 3B1D     	 adds r3,r7,#4
 1231 0034 0021     	 movs r1,#0
 1232 0036 1846     	 mov r0,r3
 1233 0038 0F4B     	 ldr r3,.L105+24
 1234 003a 9847     	 blx r3
 1235              	.LVL38:
 223:.././hal/sam3u1c/sysclk.c **** 		pll_wait_for_lock(0);
 1236              	 .loc 6 223 3
 1237 003c 0020     	 movs r0,#0
 1238 003e 0F4B     	 ldr r3,.L105+28
 1239 0040 9847     	 blx r3
 1240              	.LVL39:
 224:.././hal/sam3u1c/sysclk.c **** 		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
 1241              	 .loc 6 224 3
 1242 0042 1020     	 movs r0,#16
 1243 0044 0E4B     	 ldr r3,.L105+32
 1244 0046 9847     	 blx r3
 1245              	.LVL40:
 225:.././hal/sam3u1c/sysclk.c **** 	}
 226:.././hal/sam3u1c/sysclk.c **** #endif
 227:.././hal/sam3u1c/sysclk.c **** 
 228:.././hal/sam3u1c/sysclk.c **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_UPLLCK) {
 229:.././hal/sam3u1c/sysclk.c **** 		pll_enable_source(CONFIG_PLL1_SOURCE);
 230:.././hal/sam3u1c/sysclk.c **** 		pll_config_defaults(&pllcfg, 1);
 231:.././hal/sam3u1c/sysclk.c **** 		pll_enable(&pllcfg, 1);
 232:.././hal/sam3u1c/sysclk.c **** 		pll_wait_for_lock(1);
 233:.././hal/sam3u1c/sysclk.c **** 		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
 234:.././hal/sam3u1c/sysclk.c **** 	}
 235:.././hal/sam3u1c/sysclk.c **** 
 236:.././hal/sam3u1c/sysclk.c **** 	/* Update the SystemFrequency variable */
 237:.././hal/sam3u1c/sysclk.c **** 	SystemCoreClockUpdate();
 1246              	 .loc 6 237 2
 1247 0048 0E4B     	 ldr r3,.L105+36
 1248 004a 9847     	 blx r3
 1249              	.LVL41:
 238:.././hal/sam3u1c/sysclk.c **** 
 239:.././hal/sam3u1c/sysclk.c **** 	/* Set a flash wait state depending on the new cpu frequency */
 240:.././hal/sam3u1c/sysclk.c **** 	system_init_flash(sysclk_get_cpu_hz());
 1250              	 .loc 6 240 2
 1251 004c 0E4B     	 ldr r3,.L105+40
 1252 004e 9847     	 blx r3
 1253              	.LVL42:
 1254 0050 0346     	 mov r3,r0
 1255 0052 1846     	 mov r0,r3
 1256 0054 034B     	 ldr r3,.L105+4
 1257 0056 9847     	 blx r3
 1258              	.LVL43:
 241:.././hal/sam3u1c/sysclk.c **** 
 242:.././hal/sam3u1c/sysclk.c **** #if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
 243:.././hal/sam3u1c/sysclk.c **** 	/* Signal that the internal frequencies are setup */
 244:.././hal/sam3u1c/sysclk.c **** 	sysclk_initialized = 1;
 245:.././hal/sam3u1c/sysclk.c **** #endif
 246:.././hal/sam3u1c/sysclk.c **** }
 1259              	 .loc 6 246 1
 1260 0058 00BF     	 nop
 1261 005a 0C37     	 adds r7,r7,#12
 1262              	.LCFI75:
 1263              	 .cfi_def_cfa_offset 12
 1264 005c BD46     	 mov sp,r7
 1265              	.LCFI76:
 1266              	 .cfi_def_cfa_register 13
 1267              	 
 1268 005e 90BD     	 pop {r4,r7,pc}
 1269              	.L106:
 1270              	 .align 2
 1271              	.L105:
 1272 0060 00D8B805 	 .word 96000000
 1273 0064 00000000 	 .word system_init_flash
 1274 0068 00000000 	 .word pll_enable_source
 1275 006c 00000000 	 .word pmc_mainck_osc_select
 1276 0070 00000000 	 .word pmc_osc_is_ready_mainck
 1277 0074 00000000 	 .word pll_config_init
 1278 0078 00000000 	 .word pll_enable
 1279 007c 00000000 	 .word pll_wait_for_lock
 1280 0080 00000000 	 .word pmc_switch_mck_to_pllack
 1281 0084 00000000 	 .word SystemCoreClockUpdate
 1282 0088 00000000 	 .word sysclk_get_cpu_hz
 1283              	 .cfi_endproc
 1284              	.LFE93:
 1286              	 .text
 1287              	.Letext0:
 1288              	 .file 7 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\machine\\_default_types.h"
 1289              	 .file 8 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\sys\\_stdint.h"
 1290              	 .file 9 ".././hal/sam3u1c/inc/sam3u1c.h"
 1291              	 .file 10 ".././hal/sam3u1c/inc/core_cm3.h"
 1292              	 .file 11 ".././hal/sam3u1c/inc/system_sam3u.h"
 1293              	 .file 12 ".././hal/sam3u1c/inc/component/component_pmc.h"
 1294              	 .file 13 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\sys\\lock.h"
 1295              	 .file 14 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\sys\\_types.h"
 1296              	 .file 15 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\lib\\gcc\\arm-none-eabi\\8.2.1\\include\\stddef.h"
 1297              	 .file 16 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\sys\\reent.h"
 1298              	 .file 17 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\stdlib.h"
 1299              	 .file 18 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
 1300              	 .file 19 ".././hal/sam3u1c/inc/pmc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 sysclk.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:27     .text.osc_enable:00000000 $t
    {standard input}:34     .text.osc_enable:00000000 osc_enable
    {standard input}:61     .text.osc_enable:00000014 $d
    {standard input}:69     .text.osc_enable:00000034 $t
    {standard input}:143    .text.osc_enable:00000074 $d
    {standard input}:151    .text.osc_is_ready:00000000 $t
    {standard input}:157    .text.osc_is_ready:00000000 osc_is_ready
    {standard input}:183    .text.osc_is_ready:00000014 $d
    {standard input}:191    .text.osc_is_ready:00000034 $t
    {standard input}:249    .text.osc_is_ready:00000078 $d
    {standard input}:256    .text.osc_get_rate:00000000 $t
    {standard input}:262    .text.osc_get_rate:00000000 osc_get_rate
    {standard input}:288    .text.osc_get_rate:00000014 $d
    {standard input}:296    .text.osc_get_rate:00000034 $t
    {standard input}:350    .text.osc_get_rate:00000064 $d
    {standard input}:357    .text.osc_wait_ready:00000000 $t
    {standard input}:363    .text.osc_wait_ready:00000000 osc_wait_ready
    {standard input}:412    .text.osc_wait_ready:00000028 $d
    {standard input}:417    .text.pll_config_init:00000000 $t
    {standard input}:423    .text.pll_config_init:00000000 pll_config_init
    {standard input}:506    .text.pll_config_init:00000064 $d
    {standard input}:512    .text.pll_enable:00000000 $t
    {standard input}:518    .text.pll_enable:00000000 pll_enable
    {standard input}:580    .text.pll_enable:00000038 $d
    {standard input}:586    .text.pll_disable:00000000 $t
    {standard input}:592    .text.pll_disable:00000000 pll_disable
    {standard input}:641    .text.pll_disable:00000028 $d
    {standard input}:647    .text.pll_is_locked:00000000 $t
    {standard input}:653    .text.pll_is_locked:00000000 pll_is_locked
    {standard input}:701    .text.pll_is_locked:00000024 $d
    {standard input}:707    .text.pll_enable_source:00000000 $t
    {standard input}:713    .text.pll_enable_source:00000000 pll_enable_source
    {standard input}:768    .text.pll_enable_source:00000030 $d
    {standard input}:774    .text.pll_wait_for_lock:00000000 $t
    {standard input}:780    .text.pll_wait_for_lock:00000000 pll_wait_for_lock
    {standard input}:826    .text.pll_wait_for_lock:00000020 $d
    {standard input}:831    .text.sysclk_get_main_hz:00000000 $t
    {standard input}:837    .text.sysclk_get_main_hz:00000000 sysclk_get_main_hz
    {standard input}:865    .text.sysclk_get_main_hz:00000014 $d
    {standard input}:870    .text.sysclk_get_cpu_hz:00000000 $t
    {standard input}:876    .text.sysclk_get_cpu_hz:00000000 sysclk_get_cpu_hz
    {standard input}:903    .text.sysclk_get_cpu_hz:00000010 $d
    {standard input}:908    .text.sysclk_set_prescalers:00000000 $t
    {standard input}:915    .text.sysclk_set_prescalers:00000000 sysclk_set_prescalers
    {standard input}:956    .text.sysclk_set_prescalers:0000001c $d
    {standard input}:962    .text.sysclk_set_source:00000000 $t
    {standard input}:969    .text.sysclk_set_source:00000000 sysclk_set_source
    {standard input}:995    .text.sysclk_set_source:00000014 $d
    {standard input}:1005   .text.sysclk_set_source:0000003c $t
    {standard input}:1056   .text.sysclk_set_source:00000068 $d
    {standard input}:1062   .text.sysclk_enable_usb:00000000 $t
    {standard input}:1069   .text.sysclk_enable_usb:00000000 sysclk_enable_usb
    {standard input}:1125   .text.sysclk_enable_usb:00000030 $d
    {standard input}:1133   .text.sysclk_disable_usb:00000000 $t
    {standard input}:1140   .text.sysclk_disable_usb:00000000 sysclk_disable_usb
    {standard input}:1165   .text.sysclk_disable_usb:00000010 $d
    {standard input}:1170   .text.sysclk_init:00000000 $t
    {standard input}:1177   .text.sysclk_init:00000000 sysclk_init
    {standard input}:1272   .text.sysclk_init:00000060 $d
                           .group:00000000 wm4.0.bacf6c85951b42af729d707f36a7fff6
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.conf_clock.h.45.5dc276d21b4d793a62f1a9757cc18d5c
                           .group:00000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.newlib.h.8.f6e543eac3f2f65163ba2ffe3b04987b
                           .group:00000000 wm4.ieeefp.h.77.d5685ba212d3ed6e914898d045f873e3
                           .group:00000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.cdefs.h.49.2bf373aedffd8b393ccd11dc057e8547
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:00000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:00000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.board.h.69.3670053ec9e880dbc2016be2b8dca792
                           .group:00000000 wm4.cw521.h.62.d34c289ace4a92d90be8fb389db40479
                           .group:00000000 wm4.pmc.h.45.bbe1bf97a811e3b283420b2eeadf0b35
                           .group:00000000 wm4.osc.h.94.b766cddafe899eca01d775f7b2906680
                           .group:00000000 wm4.pll.h.45.a605c31ca466ae25752a678e8572be48
                           .group:00000000 wm4.sysclk.h.156.541a142b0016a365728ea1f7c0e3db84

UNDEFINED SYMBOLS
pmc_switch_sclk_to_32kxtal
pmc_osc_enable_fastrc
pmc_osc_enable_main_xtal
pmc_osc_bypass_main_xtal
pmc_osc_is_ready_32kxtal
pmc_osc_is_ready_fastrc
pmc_osc_is_ready_main_xtal
pmc_disable_pllack
pmc_is_locked_pllack
pmc_is_locked_upll
pmc_mck_set_prescaler
SystemCoreClockUpdate
pmc_mck_set_source
system_init_flash
pmc_mainck_osc_select
pmc_osc_is_ready_mainck
pmc_switch_mck_to_pllack
