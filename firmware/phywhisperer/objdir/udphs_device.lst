   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "udphs_device.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.NVIC_EnableIRQ,"ax",%progbits
  16              	 .align 1
  17              	 .syntax unified
  18              	 .thumb
  19              	 .thumb_func
  20              	 .fpu softvfp
  22              	NVIC_EnableIRQ:
  23              	.LFB41:
  24              	 .file 1 ".././hal/sam3u1c/inc/core_cm3.h"
   1:.././hal/sam3u1c/inc/core_cm3.h **** /**************************************************************************//**
   2:.././hal/sam3u1c/inc/core_cm3.h ****  * @file     core_cm3.h
   3:.././hal/sam3u1c/inc/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:.././hal/sam3u1c/inc/core_cm3.h ****  * @version  V3.00
   5:.././hal/sam3u1c/inc/core_cm3.h ****  * @date     03. February 2012
   6:.././hal/sam3u1c/inc/core_cm3.h ****  *
   7:.././hal/sam3u1c/inc/core_cm3.h ****  * @note
   8:.././hal/sam3u1c/inc/core_cm3.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:.././hal/sam3u1c/inc/core_cm3.h ****  *
  10:.././hal/sam3u1c/inc/core_cm3.h ****  * @par
  11:.././hal/sam3u1c/inc/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:.././hal/sam3u1c/inc/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:.././hal/sam3u1c/inc/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:.././hal/sam3u1c/inc/core_cm3.h ****  *
  15:.././hal/sam3u1c/inc/core_cm3.h ****  * @par
  16:.././hal/sam3u1c/inc/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:.././hal/sam3u1c/inc/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:.././hal/sam3u1c/inc/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:.././hal/sam3u1c/inc/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:.././hal/sam3u1c/inc/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:.././hal/sam3u1c/inc/core_cm3.h ****  *
  22:.././hal/sam3u1c/inc/core_cm3.h ****  ******************************************************************************/
  23:.././hal/sam3u1c/inc/core_cm3.h **** #if defined ( __ICCARM__ )
  24:.././hal/sam3u1c/inc/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:.././hal/sam3u1c/inc/core_cm3.h **** #endif
  26:.././hal/sam3u1c/inc/core_cm3.h **** 
  27:.././hal/sam3u1c/inc/core_cm3.h **** #ifdef __cplusplus
  28:.././hal/sam3u1c/inc/core_cm3.h ****  extern "C" {
  29:.././hal/sam3u1c/inc/core_cm3.h **** #endif
  30:.././hal/sam3u1c/inc/core_cm3.h **** 
  31:.././hal/sam3u1c/inc/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:.././hal/sam3u1c/inc/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:.././hal/sam3u1c/inc/core_cm3.h **** 
  34:.././hal/sam3u1c/inc/core_cm3.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  35:.././hal/sam3u1c/inc/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  36:.././hal/sam3u1c/inc/core_cm3.h ****   
  37:.././hal/sam3u1c/inc/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  38:.././hal/sam3u1c/inc/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'. 
  39:.././hal/sam3u1c/inc/core_cm3.h **** 
  40:.././hal/sam3u1c/inc/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  41:.././hal/sam3u1c/inc/core_cm3.h ****      Unions are used for effective representation of core registers.
  42:.././hal/sam3u1c/inc/core_cm3.h ****    
  43:.././hal/sam3u1c/inc/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  44:.././hal/sam3u1c/inc/core_cm3.h ****      Function-like macros are used to allow more efficient code. 
  45:.././hal/sam3u1c/inc/core_cm3.h ****  */
  46:.././hal/sam3u1c/inc/core_cm3.h **** 
  47:.././hal/sam3u1c/inc/core_cm3.h **** 
  48:.././hal/sam3u1c/inc/core_cm3.h **** /*******************************************************************************
  49:.././hal/sam3u1c/inc/core_cm3.h ****  *                 CMSIS definitions
  50:.././hal/sam3u1c/inc/core_cm3.h ****  ******************************************************************************/
  51:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup Cortex_M3
  52:.././hal/sam3u1c/inc/core_cm3.h ****   @{
  53:.././hal/sam3u1c/inc/core_cm3.h ****  */
  54:.././hal/sam3u1c/inc/core_cm3.h **** 
  55:.././hal/sam3u1c/inc/core_cm3.h **** /*  CMSIS CM3 definitions */
  56:.././hal/sam3u1c/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x03)                                   /*!< [31:16] CMSIS HAL m
  57:.././hal/sam3u1c/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x00)                                   /*!< [15:0]  CMSIS HAL s
  58:.././hal/sam3u1c/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | \
  59:.././hal/sam3u1c/inc/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  60:.././hal/sam3u1c/inc/core_cm3.h **** 
  61:.././hal/sam3u1c/inc/core_cm3.h **** #define __CORTEX_M                (0x03)                                   /*!< Cortex-M Core      
  62:.././hal/sam3u1c/inc/core_cm3.h **** 
  63:.././hal/sam3u1c/inc/core_cm3.h **** 
  64:.././hal/sam3u1c/inc/core_cm3.h **** #if   defined ( __CC_ARM )
  65:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  66:.././hal/sam3u1c/inc/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  67:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  68:.././hal/sam3u1c/inc/core_cm3.h **** 
  69:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __ICCARM__ )
  70:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  71:.././hal/sam3u1c/inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  72:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  73:.././hal/sam3u1c/inc/core_cm3.h **** 
  74:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __TMS470__ )
  75:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
  76:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  77:.././hal/sam3u1c/inc/core_cm3.h **** 
  78:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __GNUC__ )
  79:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  80:.././hal/sam3u1c/inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  81:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  82:.././hal/sam3u1c/inc/core_cm3.h **** 
  83:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __TASKING__ )
  84:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  85:.././hal/sam3u1c/inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  86:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  87:.././hal/sam3u1c/inc/core_cm3.h **** 
  88:.././hal/sam3u1c/inc/core_cm3.h **** #endif
  89:.././hal/sam3u1c/inc/core_cm3.h **** 
  90:.././hal/sam3u1c/inc/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not. This core does not support an FPU at all
  91:.././hal/sam3u1c/inc/core_cm3.h **** */
  92:.././hal/sam3u1c/inc/core_cm3.h **** #define __FPU_USED       0
  93:.././hal/sam3u1c/inc/core_cm3.h **** 
  94:.././hal/sam3u1c/inc/core_cm3.h **** #if defined ( __CC_ARM )
  95:.././hal/sam3u1c/inc/core_cm3.h ****   #if defined __TARGET_FPU_VFP
  96:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  97:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
  98:.././hal/sam3u1c/inc/core_cm3.h **** 
  99:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __ICCARM__ )
 100:.././hal/sam3u1c/inc/core_cm3.h ****   #if defined __ARMVFP__
 101:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 102:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 103:.././hal/sam3u1c/inc/core_cm3.h **** 
 104:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __TMS470__ )
 105:.././hal/sam3u1c/inc/core_cm3.h ****   #if defined __TI__VFP_SUPPORT____
 106:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 107:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 108:.././hal/sam3u1c/inc/core_cm3.h **** 
 109:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __GNUC__ )
 110:.././hal/sam3u1c/inc/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 111:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 112:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 113:.././hal/sam3u1c/inc/core_cm3.h **** 
 114:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __TASKING__ )
 115:.././hal/sam3u1c/inc/core_cm3.h ****     /* add preprocessor checks */
 116:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 117:.././hal/sam3u1c/inc/core_cm3.h **** 
 118:.././hal/sam3u1c/inc/core_cm3.h **** #include <stdint.h>                      /* standard types definitions                      */
 119:.././hal/sam3u1c/inc/core_cm3.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 120:.././hal/sam3u1c/inc/core_cm3.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 121:.././hal/sam3u1c/inc/core_cm3.h **** 
 122:.././hal/sam3u1c/inc/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 123:.././hal/sam3u1c/inc/core_cm3.h **** 
 124:.././hal/sam3u1c/inc/core_cm3.h **** #ifndef __CMSIS_GENERIC
 125:.././hal/sam3u1c/inc/core_cm3.h **** 
 126:.././hal/sam3u1c/inc/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 127:.././hal/sam3u1c/inc/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 128:.././hal/sam3u1c/inc/core_cm3.h **** 
 129:.././hal/sam3u1c/inc/core_cm3.h **** /* check device defines and use defaults */
 130:.././hal/sam3u1c/inc/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 131:.././hal/sam3u1c/inc/core_cm3.h ****   #ifndef __CM3_REV
 132:.././hal/sam3u1c/inc/core_cm3.h ****     #define __CM3_REV               0x0200
 133:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 134:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 135:.././hal/sam3u1c/inc/core_cm3.h **** 
 136:.././hal/sam3u1c/inc/core_cm3.h ****   #ifndef __MPU_PRESENT
 137:.././hal/sam3u1c/inc/core_cm3.h ****     #define __MPU_PRESENT             0
 138:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 139:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 140:.././hal/sam3u1c/inc/core_cm3.h **** 
 141:.././hal/sam3u1c/inc/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 142:.././hal/sam3u1c/inc/core_cm3.h ****     #define __NVIC_PRIO_BITS          4
 143:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 144:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 145:.././hal/sam3u1c/inc/core_cm3.h **** 
 146:.././hal/sam3u1c/inc/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 147:.././hal/sam3u1c/inc/core_cm3.h ****     #define __Vendor_SysTickConfig    0
 148:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 149:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 150:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 151:.././hal/sam3u1c/inc/core_cm3.h **** 
 152:.././hal/sam3u1c/inc/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 153:.././hal/sam3u1c/inc/core_cm3.h **** /**
 154:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 155:.././hal/sam3u1c/inc/core_cm3.h ****  
 156:.././hal/sam3u1c/inc/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 157:.././hal/sam3u1c/inc/core_cm3.h ****     \li to specify the access to peripheral variables.
 158:.././hal/sam3u1c/inc/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 159:.././hal/sam3u1c/inc/core_cm3.h **** */
 160:.././hal/sam3u1c/inc/core_cm3.h **** #ifdef __cplusplus
 161:.././hal/sam3u1c/inc/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 162:.././hal/sam3u1c/inc/core_cm3.h **** #else
 163:.././hal/sam3u1c/inc/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 164:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 165:.././hal/sam3u1c/inc/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 166:.././hal/sam3u1c/inc/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 167:.././hal/sam3u1c/inc/core_cm3.h **** 
 168:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group Cortex_M3 */
 169:.././hal/sam3u1c/inc/core_cm3.h **** 
 170:.././hal/sam3u1c/inc/core_cm3.h **** 
 171:.././hal/sam3u1c/inc/core_cm3.h **** 
 172:.././hal/sam3u1c/inc/core_cm3.h **** /*******************************************************************************
 173:.././hal/sam3u1c/inc/core_cm3.h ****  *                 Register Abstraction
 174:.././hal/sam3u1c/inc/core_cm3.h ****   Core Register contain:
 175:.././hal/sam3u1c/inc/core_cm3.h ****   - Core Register
 176:.././hal/sam3u1c/inc/core_cm3.h ****   - Core NVIC Register
 177:.././hal/sam3u1c/inc/core_cm3.h ****   - Core SCB Register
 178:.././hal/sam3u1c/inc/core_cm3.h ****   - Core SysTick Register
 179:.././hal/sam3u1c/inc/core_cm3.h ****   - Core Debug Register
 180:.././hal/sam3u1c/inc/core_cm3.h ****   - Core MPU Register
 181:.././hal/sam3u1c/inc/core_cm3.h ****  ******************************************************************************/
 182:.././hal/sam3u1c/inc/core_cm3.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 183:.././hal/sam3u1c/inc/core_cm3.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 184:.././hal/sam3u1c/inc/core_cm3.h **** */
 185:.././hal/sam3u1c/inc/core_cm3.h **** 
 186:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup    CMSIS_core_register
 187:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
 188:.././hal/sam3u1c/inc/core_cm3.h ****     \brief  Core Register type definitions.
 189:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 190:.././hal/sam3u1c/inc/core_cm3.h ****  */
 191:.././hal/sam3u1c/inc/core_cm3.h **** 
 192:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 193:.././hal/sam3u1c/inc/core_cm3.h ****  */
 194:.././hal/sam3u1c/inc/core_cm3.h **** typedef union
 195:.././hal/sam3u1c/inc/core_cm3.h **** {
 196:.././hal/sam3u1c/inc/core_cm3.h ****   struct
 197:.././hal/sam3u1c/inc/core_cm3.h ****   {
 198:.././hal/sam3u1c/inc/core_cm3.h **** #if (__CORTEX_M != 0x04)
 199:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 200:.././hal/sam3u1c/inc/core_cm3.h **** #else
 201:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 202:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 203:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 204:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 205:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 206:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 207:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 208:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 209:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 210:.././hal/sam3u1c/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 211:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 212:.././hal/sam3u1c/inc/core_cm3.h **** } APSR_Type;
 213:.././hal/sam3u1c/inc/core_cm3.h **** 
 214:.././hal/sam3u1c/inc/core_cm3.h **** 
 215:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 216:.././hal/sam3u1c/inc/core_cm3.h ****  */
 217:.././hal/sam3u1c/inc/core_cm3.h **** typedef union
 218:.././hal/sam3u1c/inc/core_cm3.h **** {
 219:.././hal/sam3u1c/inc/core_cm3.h ****   struct
 220:.././hal/sam3u1c/inc/core_cm3.h ****   {
 221:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 222:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 223:.././hal/sam3u1c/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 224:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 225:.././hal/sam3u1c/inc/core_cm3.h **** } IPSR_Type;
 226:.././hal/sam3u1c/inc/core_cm3.h **** 
 227:.././hal/sam3u1c/inc/core_cm3.h **** 
 228:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 229:.././hal/sam3u1c/inc/core_cm3.h ****  */
 230:.././hal/sam3u1c/inc/core_cm3.h **** typedef union
 231:.././hal/sam3u1c/inc/core_cm3.h **** {
 232:.././hal/sam3u1c/inc/core_cm3.h ****   struct
 233:.././hal/sam3u1c/inc/core_cm3.h ****   {
 234:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 235:.././hal/sam3u1c/inc/core_cm3.h **** #if (__CORTEX_M != 0x04)
 236:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 237:.././hal/sam3u1c/inc/core_cm3.h **** #else
 238:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 239:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 240:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 241:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 242:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 243:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 244:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 245:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 246:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 247:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 248:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 249:.././hal/sam3u1c/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 250:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 251:.././hal/sam3u1c/inc/core_cm3.h **** } xPSR_Type;
 252:.././hal/sam3u1c/inc/core_cm3.h **** 
 253:.././hal/sam3u1c/inc/core_cm3.h **** 
 254:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 255:.././hal/sam3u1c/inc/core_cm3.h ****  */
 256:.././hal/sam3u1c/inc/core_cm3.h **** typedef union
 257:.././hal/sam3u1c/inc/core_cm3.h **** {
 258:.././hal/sam3u1c/inc/core_cm3.h ****   struct
 259:.././hal/sam3u1c/inc/core_cm3.h ****   {
 260:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 261:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 262:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 263:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 264:.././hal/sam3u1c/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 265:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 266:.././hal/sam3u1c/inc/core_cm3.h **** } CONTROL_Type;
 267:.././hal/sam3u1c/inc/core_cm3.h **** 
 268:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_CORE */
 269:.././hal/sam3u1c/inc/core_cm3.h **** 
 270:.././hal/sam3u1c/inc/core_cm3.h **** 
 271:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup    CMSIS_core_register
 272:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 273:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the NVIC Registers
 274:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 275:.././hal/sam3u1c/inc/core_cm3.h ****  */
 276:.././hal/sam3u1c/inc/core_cm3.h **** 
 277:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 278:.././hal/sam3u1c/inc/core_cm3.h ****  */
 279:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 280:.././hal/sam3u1c/inc/core_cm3.h **** {
 281:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 282:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[24];
 283:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 284:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RSERVED1[24];
 285:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 286:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED2[24];
 287:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 288:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED3[24];
 289:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 290:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED4[56];
 291:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 292:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED5[644];
 293:.././hal/sam3u1c/inc/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 294:.././hal/sam3u1c/inc/core_cm3.h **** }  NVIC_Type;
 295:.././hal/sam3u1c/inc/core_cm3.h **** 
 296:.././hal/sam3u1c/inc/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 297:.././hal/sam3u1c/inc/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 298:.././hal/sam3u1c/inc/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 299:.././hal/sam3u1c/inc/core_cm3.h **** 
 300:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 301:.././hal/sam3u1c/inc/core_cm3.h **** 
 302:.././hal/sam3u1c/inc/core_cm3.h **** 
 303:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 304:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 305:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the System Control Block Registers
 306:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 307:.././hal/sam3u1c/inc/core_cm3.h ****  */
 308:.././hal/sam3u1c/inc/core_cm3.h **** 
 309:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 310:.././hal/sam3u1c/inc/core_cm3.h ****  */
 311:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 312:.././hal/sam3u1c/inc/core_cm3.h **** {
 313:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 314:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 315:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 316:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 317:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 318:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 319:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 320:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 321:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 322:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 323:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 324:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 325:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 326:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 327:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 328:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 329:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 330:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 331:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 332:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[5];
 333:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 334:.././hal/sam3u1c/inc/core_cm3.h **** } SCB_Type;
 335:.././hal/sam3u1c/inc/core_cm3.h **** 
 336:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB CPUID Register Definitions */
 337:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 338:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 339:.././hal/sam3u1c/inc/core_cm3.h **** 
 340:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 341:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 342:.././hal/sam3u1c/inc/core_cm3.h **** 
 343:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 344:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 345:.././hal/sam3u1c/inc/core_cm3.h **** 
 346:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 347:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 348:.././hal/sam3u1c/inc/core_cm3.h **** 
 349:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 350:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 351:.././hal/sam3u1c/inc/core_cm3.h **** 
 352:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 353:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 354:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 355:.././hal/sam3u1c/inc/core_cm3.h **** 
 356:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 357:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 358:.././hal/sam3u1c/inc/core_cm3.h **** 
 359:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 360:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 361:.././hal/sam3u1c/inc/core_cm3.h **** 
 362:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 363:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 364:.././hal/sam3u1c/inc/core_cm3.h **** 
 365:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 366:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 367:.././hal/sam3u1c/inc/core_cm3.h **** 
 368:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 369:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 370:.././hal/sam3u1c/inc/core_cm3.h **** 
 371:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 372:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 373:.././hal/sam3u1c/inc/core_cm3.h **** 
 374:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 375:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 376:.././hal/sam3u1c/inc/core_cm3.h **** 
 377:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 378:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 379:.././hal/sam3u1c/inc/core_cm3.h **** 
 380:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 381:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 382:.././hal/sam3u1c/inc/core_cm3.h **** 
 383:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 384:.././hal/sam3u1c/inc/core_cm3.h **** #if (__CM3_REV < 0x0201)                   /* core r2p1 */
 385:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 386:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 387:.././hal/sam3u1c/inc/core_cm3.h **** 
 388:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 389:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 390:.././hal/sam3u1c/inc/core_cm3.h **** #else
 391:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 392:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 393:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 394:.././hal/sam3u1c/inc/core_cm3.h **** 
 395:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 396:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 397:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 398:.././hal/sam3u1c/inc/core_cm3.h **** 
 399:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 400:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 401:.././hal/sam3u1c/inc/core_cm3.h **** 
 402:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 403:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 404:.././hal/sam3u1c/inc/core_cm3.h **** 
 405:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 406:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 407:.././hal/sam3u1c/inc/core_cm3.h **** 
 408:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 409:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:.././hal/sam3u1c/inc/core_cm3.h **** 
 411:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 412:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:.././hal/sam3u1c/inc/core_cm3.h **** 
 414:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 415:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 416:.././hal/sam3u1c/inc/core_cm3.h **** 
 417:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB System Control Register Definitions */
 418:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 419:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 420:.././hal/sam3u1c/inc/core_cm3.h **** 
 421:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 422:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 423:.././hal/sam3u1c/inc/core_cm3.h **** 
 424:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 425:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 426:.././hal/sam3u1c/inc/core_cm3.h **** 
 427:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 428:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 429:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 430:.././hal/sam3u1c/inc/core_cm3.h **** 
 431:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 432:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 433:.././hal/sam3u1c/inc/core_cm3.h **** 
 434:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 435:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 436:.././hal/sam3u1c/inc/core_cm3.h **** 
 437:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 438:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 439:.././hal/sam3u1c/inc/core_cm3.h **** 
 440:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 441:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 442:.././hal/sam3u1c/inc/core_cm3.h **** 
 443:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 444:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 445:.././hal/sam3u1c/inc/core_cm3.h **** 
 446:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 447:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 448:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 449:.././hal/sam3u1c/inc/core_cm3.h **** 
 450:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 451:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 452:.././hal/sam3u1c/inc/core_cm3.h **** 
 453:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 454:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 455:.././hal/sam3u1c/inc/core_cm3.h **** 
 456:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 457:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 458:.././hal/sam3u1c/inc/core_cm3.h **** 
 459:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 460:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 461:.././hal/sam3u1c/inc/core_cm3.h **** 
 462:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 463:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 464:.././hal/sam3u1c/inc/core_cm3.h **** 
 465:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 466:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 467:.././hal/sam3u1c/inc/core_cm3.h **** 
 468:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 469:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 470:.././hal/sam3u1c/inc/core_cm3.h **** 
 471:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 472:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 473:.././hal/sam3u1c/inc/core_cm3.h **** 
 474:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 475:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 476:.././hal/sam3u1c/inc/core_cm3.h **** 
 477:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 478:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 479:.././hal/sam3u1c/inc/core_cm3.h **** 
 480:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 481:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 482:.././hal/sam3u1c/inc/core_cm3.h **** 
 483:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 484:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 485:.././hal/sam3u1c/inc/core_cm3.h **** 
 486:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 487:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 488:.././hal/sam3u1c/inc/core_cm3.h **** 
 489:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 490:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 491:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 492:.././hal/sam3u1c/inc/core_cm3.h **** 
 493:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 494:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 495:.././hal/sam3u1c/inc/core_cm3.h **** 
 496:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 497:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 498:.././hal/sam3u1c/inc/core_cm3.h **** 
 499:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 500:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 501:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 502:.././hal/sam3u1c/inc/core_cm3.h **** 
 503:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 504:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 505:.././hal/sam3u1c/inc/core_cm3.h **** 
 506:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 507:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 508:.././hal/sam3u1c/inc/core_cm3.h **** 
 509:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 510:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 511:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 512:.././hal/sam3u1c/inc/core_cm3.h **** 
 513:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 514:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 515:.././hal/sam3u1c/inc/core_cm3.h **** 
 516:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 517:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 518:.././hal/sam3u1c/inc/core_cm3.h **** 
 519:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 520:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 521:.././hal/sam3u1c/inc/core_cm3.h **** 
 522:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 523:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 524:.././hal/sam3u1c/inc/core_cm3.h **** 
 525:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_SCB */
 526:.././hal/sam3u1c/inc/core_cm3.h **** 
 527:.././hal/sam3u1c/inc/core_cm3.h **** 
 528:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 529:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 530:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the System Control and ID Register not in the SCB
 531:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 532:.././hal/sam3u1c/inc/core_cm3.h ****  */
 533:.././hal/sam3u1c/inc/core_cm3.h **** 
 534:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 535:.././hal/sam3u1c/inc/core_cm3.h ****  */
 536:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 537:.././hal/sam3u1c/inc/core_cm3.h **** {
 538:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[1];
 539:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 540:.././hal/sam3u1c/inc/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 541:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 542:.././hal/sam3u1c/inc/core_cm3.h **** #else
 543:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED1[1];
 544:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 545:.././hal/sam3u1c/inc/core_cm3.h **** } SCnSCB_Type;
 546:.././hal/sam3u1c/inc/core_cm3.h **** 
 547:.././hal/sam3u1c/inc/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 548:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 549:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 550:.././hal/sam3u1c/inc/core_cm3.h **** 
 551:.././hal/sam3u1c/inc/core_cm3.h **** /* Auxiliary Control Register Definitions */
 552:.././hal/sam3u1c/inc/core_cm3.h **** 
 553:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 554:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 555:.././hal/sam3u1c/inc/core_cm3.h **** 
 556:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 557:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 558:.././hal/sam3u1c/inc/core_cm3.h **** 
 559:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 560:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 561:.././hal/sam3u1c/inc/core_cm3.h **** 
 562:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 563:.././hal/sam3u1c/inc/core_cm3.h **** 
 564:.././hal/sam3u1c/inc/core_cm3.h **** 
 565:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 566:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 567:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the System Timer Registers.
 568:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 569:.././hal/sam3u1c/inc/core_cm3.h ****  */
 570:.././hal/sam3u1c/inc/core_cm3.h **** 
 571:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 572:.././hal/sam3u1c/inc/core_cm3.h ****  */
 573:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 574:.././hal/sam3u1c/inc/core_cm3.h **** {
 575:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 576:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 577:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 578:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 579:.././hal/sam3u1c/inc/core_cm3.h **** } SysTick_Type;
 580:.././hal/sam3u1c/inc/core_cm3.h **** 
 581:.././hal/sam3u1c/inc/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 582:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 583:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 584:.././hal/sam3u1c/inc/core_cm3.h **** 
 585:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 586:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 587:.././hal/sam3u1c/inc/core_cm3.h **** 
 588:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 589:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 590:.././hal/sam3u1c/inc/core_cm3.h **** 
 591:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 592:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 593:.././hal/sam3u1c/inc/core_cm3.h **** 
 594:.././hal/sam3u1c/inc/core_cm3.h **** /* SysTick Reload Register Definitions */
 595:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 596:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 597:.././hal/sam3u1c/inc/core_cm3.h **** 
 598:.././hal/sam3u1c/inc/core_cm3.h **** /* SysTick Current Register Definitions */
 599:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 600:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 601:.././hal/sam3u1c/inc/core_cm3.h **** 
 602:.././hal/sam3u1c/inc/core_cm3.h **** /* SysTick Calibration Register Definitions */
 603:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 604:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 605:.././hal/sam3u1c/inc/core_cm3.h **** 
 606:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 607:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 608:.././hal/sam3u1c/inc/core_cm3.h **** 
 609:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 610:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 611:.././hal/sam3u1c/inc/core_cm3.h **** 
 612:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 613:.././hal/sam3u1c/inc/core_cm3.h **** 
 614:.././hal/sam3u1c/inc/core_cm3.h **** 
 615:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 616:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 617:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
 618:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 619:.././hal/sam3u1c/inc/core_cm3.h ****  */
 620:.././hal/sam3u1c/inc/core_cm3.h **** 
 621:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 622:.././hal/sam3u1c/inc/core_cm3.h ****  */
 623:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 624:.././hal/sam3u1c/inc/core_cm3.h **** {
 625:.././hal/sam3u1c/inc/core_cm3.h ****   __O  union
 626:.././hal/sam3u1c/inc/core_cm3.h ****   {
 627:.././hal/sam3u1c/inc/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 628:.././hal/sam3u1c/inc/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 629:.././hal/sam3u1c/inc/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 630:.././hal/sam3u1c/inc/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 631:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[864];
 632:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 633:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED1[15];
 634:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 635:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED2[15];
 636:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 637:.././hal/sam3u1c/inc/core_cm3.h **** } ITM_Type;
 638:.././hal/sam3u1c/inc/core_cm3.h **** 
 639:.././hal/sam3u1c/inc/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 640:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                          /*!< ITM TPR
 641:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)             /*!< ITM TPR
 642:.././hal/sam3u1c/inc/core_cm3.h **** 
 643:.././hal/sam3u1c/inc/core_cm3.h **** /* ITM Trace Control Register Definitions */
 644:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                          /*!< ITM TCR
 645:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                   /*!< ITM TCR
 646:.././hal/sam3u1c/inc/core_cm3.h **** 
 647:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16                                          /*!< ITM TCR
 648:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)          /*!< ITM TCR
 649:.././hal/sam3u1c/inc/core_cm3.h **** 
 650:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10                                          /*!< ITM TCR
 651:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                /*!< ITM TCR
 652:.././hal/sam3u1c/inc/core_cm3.h **** 
 653:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                          /*!< ITM TCR
 654:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)             /*!< ITM TCR
 655:.././hal/sam3u1c/inc/core_cm3.h **** 
 656:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                          /*!< ITM TCR
 657:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                 /*!< ITM TCR
 658:.././hal/sam3u1c/inc/core_cm3.h **** 
 659:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TXENA_Pos                   3                                          /*!< ITM TCR
 660:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TXENA_Msk                  (1UL << ITM_TCR_TXENA_Pos)                  /*!< ITM TCR
 661:.././hal/sam3u1c/inc/core_cm3.h **** 
 662:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                          /*!< ITM TCR
 663:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                /*!< ITM TCR
 664:.././hal/sam3u1c/inc/core_cm3.h **** 
 665:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                          /*!< ITM TCR
 666:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                  /*!< ITM TCR
 667:.././hal/sam3u1c/inc/core_cm3.h **** 
 668:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                          /*!< ITM TCR
 669:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                 /*!< ITM TCR
 670:.././hal/sam3u1c/inc/core_cm3.h **** 
 671:.././hal/sam3u1c/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 672:.././hal/sam3u1c/inc/core_cm3.h **** 
 673:.././hal/sam3u1c/inc/core_cm3.h **** 
 674:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 675:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 676:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Data Watchpoint and Trace (DWT)
 677:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 678:.././hal/sam3u1c/inc/core_cm3.h ****  */
 679:.././hal/sam3u1c/inc/core_cm3.h **** 
 680:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 681:.././hal/sam3u1c/inc/core_cm3.h ****  */
 682:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 683:.././hal/sam3u1c/inc/core_cm3.h **** {
 684:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                
 685:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register            
 686:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register              
 687:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 688:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register            
 689:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register              
 690:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 691:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 692:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0           
 693:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                 
 694:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0             
 695:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[1];
 696:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1           
 697:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                 
 698:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1             
 699:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED1[1];
 700:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2           
 701:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                 
 702:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2             
 703:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED2[1];
 704:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3           
 705:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                 
 706:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3             
 707:.././hal/sam3u1c/inc/core_cm3.h **** } DWT_Type;
 708:.././hal/sam3u1c/inc/core_cm3.h **** 
 709:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Control Register Definitions */
 710:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTR
 711:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 712:.././hal/sam3u1c/inc/core_cm3.h **** 
 713:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTR
 714:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 715:.././hal/sam3u1c/inc/core_cm3.h **** 
 716:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTR
 717:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 718:.././hal/sam3u1c/inc/core_cm3.h **** 
 719:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTR
 720:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 721:.././hal/sam3u1c/inc/core_cm3.h **** 
 722:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTR
 723:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 724:.././hal/sam3u1c/inc/core_cm3.h **** 
 725:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTR
 726:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 727:.././hal/sam3u1c/inc/core_cm3.h **** 
 728:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTR
 729:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 730:.././hal/sam3u1c/inc/core_cm3.h **** 
 731:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTR
 732:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 733:.././hal/sam3u1c/inc/core_cm3.h **** 
 734:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTR
 735:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 736:.././hal/sam3u1c/inc/core_cm3.h **** 
 737:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTR
 738:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 739:.././hal/sam3u1c/inc/core_cm3.h **** 
 740:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTR
 741:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 742:.././hal/sam3u1c/inc/core_cm3.h **** 
 743:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTR
 744:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 745:.././hal/sam3u1c/inc/core_cm3.h **** 
 746:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTR
 747:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 748:.././hal/sam3u1c/inc/core_cm3.h **** 
 749:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTR
 750:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 751:.././hal/sam3u1c/inc/core_cm3.h **** 
 752:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTR
 753:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 754:.././hal/sam3u1c/inc/core_cm3.h **** 
 755:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTR
 756:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 757:.././hal/sam3u1c/inc/core_cm3.h **** 
 758:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTR
 759:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 760:.././hal/sam3u1c/inc/core_cm3.h **** 
 761:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTR
 762:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL << DWT_CTRL_CYCCNTENA_Pos)           /*!< DWT CTR
 763:.././hal/sam3u1c/inc/core_cm3.h **** 
 764:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT CPI Count Register Definitions */
 765:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPI
 766:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL << DWT_CPICNT_CPICNT_Pos)           /*!< DWT CPI
 767:.././hal/sam3u1c/inc/core_cm3.h **** 
 768:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 769:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXC
 770:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL << DWT_EXCCNT_EXCCNT_Pos)           /*!< DWT EXC
 771:.././hal/sam3u1c/inc/core_cm3.h **** 
 772:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Sleep Count Register Definitions */
 773:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLE
 774:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL << DWT_SLEEPCNT_SLEEPCNT_Pos)       /*!< DWT SLE
 775:.././hal/sam3u1c/inc/core_cm3.h **** 
 776:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT LSU Count Register Definitions */
 777:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSU
 778:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL << DWT_LSUCNT_LSUCNT_Pos)           /*!< DWT LSU
 779:.././hal/sam3u1c/inc/core_cm3.h **** 
 780:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 781:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOL
 782:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL << DWT_FOLDCNT_FOLDCNT_Pos)         /*!< DWT FOL
 783:.././hal/sam3u1c/inc/core_cm3.h **** 
 784:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 785:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MAS
 786:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL << DWT_MASK_MASK_Pos)               /*!< DWT MAS
 787:.././hal/sam3u1c/inc/core_cm3.h **** 
 788:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 789:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUN
 790:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 791:.././hal/sam3u1c/inc/core_cm3.h **** 
 792:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUN
 793:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 794:.././hal/sam3u1c/inc/core_cm3.h **** 
 795:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUN
 796:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 797:.././hal/sam3u1c/inc/core_cm3.h **** 
 798:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUN
 799:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 800:.././hal/sam3u1c/inc/core_cm3.h **** 
 801:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUN
 802:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 803:.././hal/sam3u1c/inc/core_cm3.h **** 
 804:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUN
 805:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 806:.././hal/sam3u1c/inc/core_cm3.h **** 
 807:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUN
 808:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 809:.././hal/sam3u1c/inc/core_cm3.h **** 
 810:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUN
 811:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 812:.././hal/sam3u1c/inc/core_cm3.h **** 
 813:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUN
 814:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL << DWT_FUNCTION_FUNCTION_Pos)        /*!< DWT FUN
 815:.././hal/sam3u1c/inc/core_cm3.h **** 
 816:.././hal/sam3u1c/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 817:.././hal/sam3u1c/inc/core_cm3.h **** 
 818:.././hal/sam3u1c/inc/core_cm3.h **** 
 819:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 820:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 821:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Trace Port Interface (TPI)
 822:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 823:.././hal/sam3u1c/inc/core_cm3.h ****  */
 824:.././hal/sam3u1c/inc/core_cm3.h **** 
 825:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Trace Port Interface Register (TPI).
 826:.././hal/sam3u1c/inc/core_cm3.h ****  */
 827:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 828:.././hal/sam3u1c/inc/core_cm3.h **** {
 829:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 830:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 831:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[2];
 832:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 833:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED1[55];
 834:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
 835:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED2[131];
 836:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
 837:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
 838:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
 839:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED3[759];
 840:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
 841:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
 842:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
 843:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED4[1];
 844:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
 845:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
 846:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
 847:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED5[39];
 848:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
 849:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
 850:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED7[8];
 851:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
 852:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
 853:.././hal/sam3u1c/inc/core_cm3.h **** } TPI_Type;
 854:.././hal/sam3u1c/inc/core_cm3.h **** 
 855:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
 856:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACP
 857:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL << TPI_ACPR_PRESCALER_Pos)        /*!< TPI ACP
 858:.././hal/sam3u1c/inc/core_cm3.h **** 
 859:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
 860:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPP
 861:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL << TPI_SPPR_TXMODE_Pos)              /*!< TPI SPP
 862:.././hal/sam3u1c/inc/core_cm3.h **** 
 863:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
 864:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFS
 865:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
 866:.././hal/sam3u1c/inc/core_cm3.h **** 
 867:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFS
 868:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
 869:.././hal/sam3u1c/inc/core_cm3.h **** 
 870:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFS
 871:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
 872:.././hal/sam3u1c/inc/core_cm3.h **** 
 873:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFS
 874:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL << TPI_FFSR_FlInProg_Pos)            /*!< TPI FFS
 875:.././hal/sam3u1c/inc/core_cm3.h **** 
 876:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
 877:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFC
 878:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
 879:.././hal/sam3u1c/inc/core_cm3.h **** 
 880:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFC
 881:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
 882:.././hal/sam3u1c/inc/core_cm3.h **** 
 883:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI TRIGGER Register Definitions */
 884:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRI
 885:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL << TPI_TRIGGER_TRIGGER_Pos)          /*!< TPI TRI
 886:.././hal/sam3u1c/inc/core_cm3.h **** 
 887:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
 888:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 889:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
 890:.././hal/sam3u1c/inc/core_cm3.h **** 
 891:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 892:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
 893:.././hal/sam3u1c/inc/core_cm3.h **** 
 894:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 895:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
 896:.././hal/sam3u1c/inc/core_cm3.h **** 
 897:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 898:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
 899:.././hal/sam3u1c/inc/core_cm3.h **** 
 900:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIF
 901:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
 902:.././hal/sam3u1c/inc/core_cm3.h **** 
 903:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIF
 904:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
 905:.././hal/sam3u1c/inc/core_cm3.h **** 
 906:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIF
 907:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL << TPI_FIFO0_ETM0_Pos)              /*!< TPI FIF
 908:.././hal/sam3u1c/inc/core_cm3.h **** 
 909:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
 910:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITA
 911:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL << TPI_ITATBCTR2_ATREADY_Pos)        /*!< TPI ITA
 912:.././hal/sam3u1c/inc/core_cm3.h **** 
 913:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
 914:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 915:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
 916:.././hal/sam3u1c/inc/core_cm3.h **** 
 917:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 918:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
 919:.././hal/sam3u1c/inc/core_cm3.h **** 
 920:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 921:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
 922:.././hal/sam3u1c/inc/core_cm3.h **** 
 923:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 924:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
 925:.././hal/sam3u1c/inc/core_cm3.h **** 
 926:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIF
 927:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
 928:.././hal/sam3u1c/inc/core_cm3.h **** 
 929:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIF
 930:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
 931:.././hal/sam3u1c/inc/core_cm3.h **** 
 932:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIF
 933:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL << TPI_FIFO1_ITM0_Pos)              /*!< TPI FIF
 934:.././hal/sam3u1c/inc/core_cm3.h **** 
 935:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
 936:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITA
 937:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL << TPI_ITATBCTR0_ATREADY_Pos)        /*!< TPI ITA
 938:.././hal/sam3u1c/inc/core_cm3.h **** 
 939:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
 940:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITC
 941:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL << TPI_ITCTRL_Mode_Pos)              /*!< TPI ITC
 942:.././hal/sam3u1c/inc/core_cm3.h **** 
 943:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI DEVID Register Definitions */
 944:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEV
 945:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
 946:.././hal/sam3u1c/inc/core_cm3.h **** 
 947:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEV
 948:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
 949:.././hal/sam3u1c/inc/core_cm3.h **** 
 950:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEV
 951:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
 952:.././hal/sam3u1c/inc/core_cm3.h **** 
 953:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEV
 954:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
 955:.././hal/sam3u1c/inc/core_cm3.h **** 
 956:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEV
 957:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
 958:.././hal/sam3u1c/inc/core_cm3.h **** 
 959:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEV
 960:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL << TPI_DEVID_NrTraceInput_Pos)      /*!< TPI DEV
 961:.././hal/sam3u1c/inc/core_cm3.h **** 
 962:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
 963:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEV
 964:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL << TPI_DEVTYPE_SubType_Pos)          /*!< TPI DEV
 965:.././hal/sam3u1c/inc/core_cm3.h **** 
 966:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEV
 967:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
 968:.././hal/sam3u1c/inc/core_cm3.h **** 
 969:.././hal/sam3u1c/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
 970:.././hal/sam3u1c/inc/core_cm3.h **** 
 971:.././hal/sam3u1c/inc/core_cm3.h **** 
 972:.././hal/sam3u1c/inc/core_cm3.h **** #if (__MPU_PRESENT == 1)
 973:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 974:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
 975:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
 976:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 977:.././hal/sam3u1c/inc/core_cm3.h ****  */
 978:.././hal/sam3u1c/inc/core_cm3.h **** 
 979:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 980:.././hal/sam3u1c/inc/core_cm3.h ****  */
 981:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 982:.././hal/sam3u1c/inc/core_cm3.h **** {
 983:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 984:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 985:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 986:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 987:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 988:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 989:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 990:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 991:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 992:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 993:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 994:.././hal/sam3u1c/inc/core_cm3.h **** } MPU_Type;
 995:.././hal/sam3u1c/inc/core_cm3.h **** 
 996:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Type Register */
 997:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 998:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 999:.././hal/sam3u1c/inc/core_cm3.h **** 
1000:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
1001:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1002:.././hal/sam3u1c/inc/core_cm3.h **** 
1003:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
1004:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
1005:.././hal/sam3u1c/inc/core_cm3.h **** 
1006:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Control Register */
1007:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
1008:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1009:.././hal/sam3u1c/inc/core_cm3.h **** 
1010:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
1011:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1012:.././hal/sam3u1c/inc/core_cm3.h **** 
1013:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
1014:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
1015:.././hal/sam3u1c/inc/core_cm3.h **** 
1016:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Region Number Register */
1017:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
1018:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
1019:.././hal/sam3u1c/inc/core_cm3.h **** 
1020:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Region Base Address Register */
1021:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
1022:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1023:.././hal/sam3u1c/inc/core_cm3.h **** 
1024:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
1025:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1026:.././hal/sam3u1c/inc/core_cm3.h **** 
1027:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
1028:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
1029:.././hal/sam3u1c/inc/core_cm3.h **** 
1030:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Region Attribute and Size Register */
1031:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
1032:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1033:.././hal/sam3u1c/inc/core_cm3.h **** 
1034:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
1035:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1036:.././hal/sam3u1c/inc/core_cm3.h **** 
1037:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
1038:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1039:.././hal/sam3u1c/inc/core_cm3.h **** 
1040:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
1041:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
1042:.././hal/sam3u1c/inc/core_cm3.h **** 
1043:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_MPU */
1044:.././hal/sam3u1c/inc/core_cm3.h **** #endif
1045:.././hal/sam3u1c/inc/core_cm3.h **** 
1046:.././hal/sam3u1c/inc/core_cm3.h **** 
1047:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
1048:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1049:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Core Debug Registers
1050:.././hal/sam3u1c/inc/core_cm3.h ****   @{
1051:.././hal/sam3u1c/inc/core_cm3.h ****  */
1052:.././hal/sam3u1c/inc/core_cm3.h **** 
1053:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
1054:.././hal/sam3u1c/inc/core_cm3.h ****  */
1055:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
1056:.././hal/sam3u1c/inc/core_cm3.h **** {
1057:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1058:.././hal/sam3u1c/inc/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1059:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1060:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1061:.././hal/sam3u1c/inc/core_cm3.h **** } CoreDebug_Type;
1062:.././hal/sam3u1c/inc/core_cm3.h **** 
1063:.././hal/sam3u1c/inc/core_cm3.h **** /* Debug Halting Control and Status Register */
1064:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
1065:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1066:.././hal/sam3u1c/inc/core_cm3.h **** 
1067:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
1068:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1069:.././hal/sam3u1c/inc/core_cm3.h **** 
1070:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
1071:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1072:.././hal/sam3u1c/inc/core_cm3.h **** 
1073:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
1074:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1075:.././hal/sam3u1c/inc/core_cm3.h **** 
1076:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
1077:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1078:.././hal/sam3u1c/inc/core_cm3.h **** 
1079:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
1080:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1081:.././hal/sam3u1c/inc/core_cm3.h **** 
1082:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
1083:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1084:.././hal/sam3u1c/inc/core_cm3.h **** 
1085:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
1086:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1087:.././hal/sam3u1c/inc/core_cm3.h **** 
1088:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
1089:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1090:.././hal/sam3u1c/inc/core_cm3.h **** 
1091:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
1092:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1093:.././hal/sam3u1c/inc/core_cm3.h **** 
1094:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
1095:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1096:.././hal/sam3u1c/inc/core_cm3.h **** 
1097:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
1098:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
1099:.././hal/sam3u1c/inc/core_cm3.h **** 
1100:.././hal/sam3u1c/inc/core_cm3.h **** /* Debug Core Register Selector Register */
1101:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
1102:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1103:.././hal/sam3u1c/inc/core_cm3.h **** 
1104:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
1105:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
1106:.././hal/sam3u1c/inc/core_cm3.h **** 
1107:.././hal/sam3u1c/inc/core_cm3.h **** /* Debug Exception and Monitor Control Register */
1108:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
1109:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1110:.././hal/sam3u1c/inc/core_cm3.h **** 
1111:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
1112:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1113:.././hal/sam3u1c/inc/core_cm3.h **** 
1114:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
1115:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1116:.././hal/sam3u1c/inc/core_cm3.h **** 
1117:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
1118:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1119:.././hal/sam3u1c/inc/core_cm3.h **** 
1120:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
1121:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1122:.././hal/sam3u1c/inc/core_cm3.h **** 
1123:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
1124:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1125:.././hal/sam3u1c/inc/core_cm3.h **** 
1126:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
1127:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1128:.././hal/sam3u1c/inc/core_cm3.h **** 
1129:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
1130:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1131:.././hal/sam3u1c/inc/core_cm3.h **** 
1132:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
1133:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1134:.././hal/sam3u1c/inc/core_cm3.h **** 
1135:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
1136:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1137:.././hal/sam3u1c/inc/core_cm3.h **** 
1138:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
1139:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1140:.././hal/sam3u1c/inc/core_cm3.h **** 
1141:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
1142:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1143:.././hal/sam3u1c/inc/core_cm3.h **** 
1144:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
1145:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
1146:.././hal/sam3u1c/inc/core_cm3.h **** 
1147:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1148:.././hal/sam3u1c/inc/core_cm3.h **** 
1149:.././hal/sam3u1c/inc/core_cm3.h **** 
1150:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup    CMSIS_core_register
1151:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup   CMSIS_core_base     Core Definitions
1152:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Definitions for base addresses, unions, and structures.
1153:.././hal/sam3u1c/inc/core_cm3.h ****   @{
1154:.././hal/sam3u1c/inc/core_cm3.h ****  */
1155:.././hal/sam3u1c/inc/core_cm3.h **** 
1156:.././hal/sam3u1c/inc/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
1157:.././hal/sam3u1c/inc/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1158:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
1159:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address        
1160:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address        
1161:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1162:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
1163:.././hal/sam3u1c/inc/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
1164:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1165:.././hal/sam3u1c/inc/core_cm3.h **** 
1166:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1167:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1168:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1169:.././hal/sam3u1c/inc/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1170:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1171:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1172:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1173:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1174:.././hal/sam3u1c/inc/core_cm3.h **** 
1175:.././hal/sam3u1c/inc/core_cm3.h **** #if (__MPU_PRESENT == 1)
1176:.././hal/sam3u1c/inc/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
1177:.././hal/sam3u1c/inc/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
1178:.././hal/sam3u1c/inc/core_cm3.h **** #endif
1179:.././hal/sam3u1c/inc/core_cm3.h **** 
1180:.././hal/sam3u1c/inc/core_cm3.h **** /*@} */
1181:.././hal/sam3u1c/inc/core_cm3.h **** 
1182:.././hal/sam3u1c/inc/core_cm3.h **** 
1183:.././hal/sam3u1c/inc/core_cm3.h **** 
1184:.././hal/sam3u1c/inc/core_cm3.h **** /*******************************************************************************
1185:.././hal/sam3u1c/inc/core_cm3.h ****  *                Hardware Abstraction Layer
1186:.././hal/sam3u1c/inc/core_cm3.h ****   Core Function Interface contains:
1187:.././hal/sam3u1c/inc/core_cm3.h ****   - Core NVIC Functions
1188:.././hal/sam3u1c/inc/core_cm3.h ****   - Core SysTick Functions
1189:.././hal/sam3u1c/inc/core_cm3.h ****   - Core Debug Functions
1190:.././hal/sam3u1c/inc/core_cm3.h ****   - Core Register Access Functions
1191:.././hal/sam3u1c/inc/core_cm3.h ****  ******************************************************************************/
1192:.././hal/sam3u1c/inc/core_cm3.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1193:.././hal/sam3u1c/inc/core_cm3.h **** */
1194:.././hal/sam3u1c/inc/core_cm3.h **** 
1195:.././hal/sam3u1c/inc/core_cm3.h **** 
1196:.././hal/sam3u1c/inc/core_cm3.h **** 
1197:.././hal/sam3u1c/inc/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1198:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1199:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1200:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
1201:.././hal/sam3u1c/inc/core_cm3.h ****     @{
1202:.././hal/sam3u1c/inc/core_cm3.h ****  */
1203:.././hal/sam3u1c/inc/core_cm3.h **** 
1204:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Set Priority Grouping
1205:.././hal/sam3u1c/inc/core_cm3.h **** 
1206:.././hal/sam3u1c/inc/core_cm3.h ****   The function sets the priority grouping field using the required unlock sequence.
1207:.././hal/sam3u1c/inc/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1208:.././hal/sam3u1c/inc/core_cm3.h ****   Only values from 0..7 are used.
1209:.././hal/sam3u1c/inc/core_cm3.h ****   In case of a conflict between priority grouping and available
1210:.././hal/sam3u1c/inc/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1211:.././hal/sam3u1c/inc/core_cm3.h **** 
1212:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field.
1213:.././hal/sam3u1c/inc/core_cm3.h ****  */
1214:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1215:.././hal/sam3u1c/inc/core_cm3.h **** {
1216:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t reg_value;
1217:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1218:.././hal/sam3u1c/inc/core_cm3.h **** 
1219:.././hal/sam3u1c/inc/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1220:.././hal/sam3u1c/inc/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1221:.././hal/sam3u1c/inc/core_cm3.h ****   reg_value  =  (reg_value                                 |
1222:.././hal/sam3u1c/inc/core_cm3.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1223:.././hal/sam3u1c/inc/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1224:.././hal/sam3u1c/inc/core_cm3.h ****   SCB->AIRCR =  reg_value;
1225:.././hal/sam3u1c/inc/core_cm3.h **** }
1226:.././hal/sam3u1c/inc/core_cm3.h **** 
1227:.././hal/sam3u1c/inc/core_cm3.h **** 
1228:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Get Priority Grouping
1229:.././hal/sam3u1c/inc/core_cm3.h **** 
1230:.././hal/sam3u1c/inc/core_cm3.h ****   The function reads the priority grouping field from the NVIC Interrupt Controller.
1231:.././hal/sam3u1c/inc/core_cm3.h **** 
1232:.././hal/sam3u1c/inc/core_cm3.h ****     \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1233:.././hal/sam3u1c/inc/core_cm3.h ****  */
1234:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1235:.././hal/sam3u1c/inc/core_cm3.h **** {
1236:.././hal/sam3u1c/inc/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1237:.././hal/sam3u1c/inc/core_cm3.h **** }
1238:.././hal/sam3u1c/inc/core_cm3.h **** 
1239:.././hal/sam3u1c/inc/core_cm3.h **** 
1240:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Enable External Interrupt
1241:.././hal/sam3u1c/inc/core_cm3.h **** 
1242:.././hal/sam3u1c/inc/core_cm3.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
1243:.././hal/sam3u1c/inc/core_cm3.h **** 
1244:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1245:.././hal/sam3u1c/inc/core_cm3.h ****  */
1246:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1247:.././hal/sam3u1c/inc/core_cm3.h **** {
  25              	 .loc 1 1247 0
  26              	 .cfi_startproc
  27              	 
  28              	 
  29              	 
  30 0000 80B4     	 push {r7}
  31              	.LCFI0:
  32              	 .cfi_def_cfa_offset 4
  33              	 .cfi_offset 7,-4
  34 0002 83B0     	 sub sp,sp,#12
  35              	.LCFI1:
  36              	 .cfi_def_cfa_offset 16
  37 0004 00AF     	 add r7,sp,#0
  38              	.LCFI2:
  39              	 .cfi_def_cfa_register 7
  40 0006 0346     	 mov r3,r0
  41 0008 FB71     	 strb r3,[r7,#7]
1248:.././hal/sam3u1c/inc/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  42              	 .loc 1 1248 0
  43 000a FB79     	 ldrb r3,[r7,#7]
  44 000c 03F01F03 	 and r3,r3,#31
  45 0010 0122     	 movs r2,#1
  46 0012 02FA03F1 	 lsl r1,r2,r3
  47 0016 054A     	 ldr r2,.L2
  48 0018 97F90730 	 ldrsb r3,[r7,#7]
  49 001c 5B09     	 lsrs r3,r3,#5
  50 001e 42F82310 	 str r1,[r2,r3,lsl#2]
1249:.././hal/sam3u1c/inc/core_cm3.h **** }
  51              	 .loc 1 1249 0
  52 0022 00BF     	 nop
  53 0024 0C37     	 adds r7,r7,#12
  54              	.LCFI3:
  55              	 .cfi_def_cfa_offset 4
  56 0026 BD46     	 mov sp,r7
  57              	.LCFI4:
  58              	 .cfi_def_cfa_register 13
  59              	 
  60 0028 80BC     	 pop {r7}
  61              	.LCFI5:
  62              	 .cfi_restore 7
  63              	 .cfi_def_cfa_offset 0
  64 002a 7047     	 bx lr
  65              	.L3:
  66              	 .align 2
  67              	.L2:
  68 002c 00E100E0 	 .word -536813312
  69              	 .cfi_endproc
  70              	.LFE41:
  72              	 .section .text.NVIC_SetPriority,"ax",%progbits
  73              	 .align 1
  74              	 .syntax unified
  75              	 .thumb
  76              	 .thumb_func
  77              	 .fpu softvfp
  79              	NVIC_SetPriority:
  80              	.LFB47:
1250:.././hal/sam3u1c/inc/core_cm3.h **** 
1251:.././hal/sam3u1c/inc/core_cm3.h **** 
1252:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Disable External Interrupt
1253:.././hal/sam3u1c/inc/core_cm3.h **** 
1254:.././hal/sam3u1c/inc/core_cm3.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
1255:.././hal/sam3u1c/inc/core_cm3.h **** 
1256:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1257:.././hal/sam3u1c/inc/core_cm3.h ****  */
1258:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1259:.././hal/sam3u1c/inc/core_cm3.h **** {
1260:.././hal/sam3u1c/inc/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1261:.././hal/sam3u1c/inc/core_cm3.h **** }
1262:.././hal/sam3u1c/inc/core_cm3.h **** 
1263:.././hal/sam3u1c/inc/core_cm3.h **** 
1264:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Get Pending Interrupt
1265:.././hal/sam3u1c/inc/core_cm3.h **** 
1266:.././hal/sam3u1c/inc/core_cm3.h ****     The function reads the pending register in the NVIC and returns the pending bit
1267:.././hal/sam3u1c/inc/core_cm3.h ****     for the specified interrupt.
1268:.././hal/sam3u1c/inc/core_cm3.h **** 
1269:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1270:.././hal/sam3u1c/inc/core_cm3.h ****     
1271:.././hal/sam3u1c/inc/core_cm3.h ****     \return             0  Interrupt status is not pending.
1272:.././hal/sam3u1c/inc/core_cm3.h ****     \return             1  Interrupt status is pending.
1273:.././hal/sam3u1c/inc/core_cm3.h ****  */
1274:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1275:.././hal/sam3u1c/inc/core_cm3.h **** {
1276:.././hal/sam3u1c/inc/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1277:.././hal/sam3u1c/inc/core_cm3.h **** }
1278:.././hal/sam3u1c/inc/core_cm3.h **** 
1279:.././hal/sam3u1c/inc/core_cm3.h **** 
1280:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Set Pending Interrupt
1281:.././hal/sam3u1c/inc/core_cm3.h **** 
1282:.././hal/sam3u1c/inc/core_cm3.h ****     The function sets the pending bit of an external interrupt.
1283:.././hal/sam3u1c/inc/core_cm3.h **** 
1284:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number. Value cannot be negative.
1285:.././hal/sam3u1c/inc/core_cm3.h ****  */
1286:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1287:.././hal/sam3u1c/inc/core_cm3.h **** {
1288:.././hal/sam3u1c/inc/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1289:.././hal/sam3u1c/inc/core_cm3.h **** }
1290:.././hal/sam3u1c/inc/core_cm3.h **** 
1291:.././hal/sam3u1c/inc/core_cm3.h **** 
1292:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Clear Pending Interrupt
1293:.././hal/sam3u1c/inc/core_cm3.h **** 
1294:.././hal/sam3u1c/inc/core_cm3.h ****     The function clears the pending bit of an external interrupt.
1295:.././hal/sam3u1c/inc/core_cm3.h **** 
1296:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1297:.././hal/sam3u1c/inc/core_cm3.h ****  */
1298:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1299:.././hal/sam3u1c/inc/core_cm3.h **** {
1300:.././hal/sam3u1c/inc/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1301:.././hal/sam3u1c/inc/core_cm3.h **** }
1302:.././hal/sam3u1c/inc/core_cm3.h **** 
1303:.././hal/sam3u1c/inc/core_cm3.h **** 
1304:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Get Active Interrupt
1305:.././hal/sam3u1c/inc/core_cm3.h **** 
1306:.././hal/sam3u1c/inc/core_cm3.h ****     The function reads the active register in NVIC and returns the active bit.
1307:.././hal/sam3u1c/inc/core_cm3.h ****     
1308:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1309:.././hal/sam3u1c/inc/core_cm3.h ****     
1310:.././hal/sam3u1c/inc/core_cm3.h ****     \return             0  Interrupt status is not active.
1311:.././hal/sam3u1c/inc/core_cm3.h ****     \return             1  Interrupt status is active.
1312:.././hal/sam3u1c/inc/core_cm3.h ****  */
1313:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1314:.././hal/sam3u1c/inc/core_cm3.h **** {
1315:.././hal/sam3u1c/inc/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1316:.././hal/sam3u1c/inc/core_cm3.h **** }
1317:.././hal/sam3u1c/inc/core_cm3.h **** 
1318:.././hal/sam3u1c/inc/core_cm3.h **** 
1319:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Set Interrupt Priority
1320:.././hal/sam3u1c/inc/core_cm3.h **** 
1321:.././hal/sam3u1c/inc/core_cm3.h ****     The function sets the priority of an interrupt. 
1322:.././hal/sam3u1c/inc/core_cm3.h **** 
1323:.././hal/sam3u1c/inc/core_cm3.h ****     \note The priority cannot be set for every core interrupt.
1324:.././hal/sam3u1c/inc/core_cm3.h **** 
1325:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number. 
1326:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]  priority  Priority to set.
1327:.././hal/sam3u1c/inc/core_cm3.h ****  */
1328:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1329:.././hal/sam3u1c/inc/core_cm3.h **** {
  81              	 .loc 1 1329 0
  82              	 .cfi_startproc
  83              	 
  84              	 
  85              	 
  86 0000 80B4     	 push {r7}
  87              	.LCFI6:
  88              	 .cfi_def_cfa_offset 4
  89              	 .cfi_offset 7,-4
  90 0002 83B0     	 sub sp,sp,#12
  91              	.LCFI7:
  92              	 .cfi_def_cfa_offset 16
  93 0004 00AF     	 add r7,sp,#0
  94              	.LCFI8:
  95              	 .cfi_def_cfa_register 7
  96 0006 0346     	 mov r3,r0
  97 0008 3960     	 str r1,[r7]
  98 000a FB71     	 strb r3,[r7,#7]
1330:.././hal/sam3u1c/inc/core_cm3.h ****   if(IRQn < 0) {
  99              	 .loc 1 1330 0
 100 000c 97F90730 	 ldrsb r3,[r7,#7]
 101 0010 002B     	 cmp r3,#0
 102 0012 0BDA     	 bge .L5
1331:.././hal/sam3u1c/inc/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
 103              	 .loc 1 1331 0
 104 0014 3B68     	 ldr r3,[r7]
 105 0016 DAB2     	 uxtb r2,r3
 106 0018 0C49     	 ldr r1,.L8
 107 001a FB79     	 ldrb r3,[r7,#7]
 108 001c 03F00F03 	 and r3,r3,#15
 109 0020 043B     	 subs r3,r3,#4
 110 0022 1201     	 lsls r2,r2,#4
 111 0024 D2B2     	 uxtb r2,r2
 112 0026 0B44     	 add r3,r3,r1
 113 0028 1A76     	 strb r2,[r3,#24]
1332:.././hal/sam3u1c/inc/core_cm3.h ****   else {
1333:.././hal/sam3u1c/inc/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
1334:.././hal/sam3u1c/inc/core_cm3.h **** }
 114              	 .loc 1 1334 0
 115 002a 09E0     	 b .L7
 116              	.L5:
1333:.././hal/sam3u1c/inc/core_cm3.h **** }
 117              	 .loc 1 1333 0
 118 002c 3B68     	 ldr r3,[r7]
 119 002e DAB2     	 uxtb r2,r3
 120 0030 0749     	 ldr r1,.L8+4
 121 0032 97F90730 	 ldrsb r3,[r7,#7]
 122 0036 1201     	 lsls r2,r2,#4
 123 0038 D2B2     	 uxtb r2,r2
 124 003a 0B44     	 add r3,r3,r1
 125 003c 83F80023 	 strb r2,[r3,#768]
 126              	.L7:
 127              	 .loc 1 1334 0
 128 0040 00BF     	 nop
 129 0042 0C37     	 adds r7,r7,#12
 130              	.LCFI9:
 131              	 .cfi_def_cfa_offset 4
 132 0044 BD46     	 mov sp,r7
 133              	.LCFI10:
 134              	 .cfi_def_cfa_register 13
 135              	 
 136 0046 80BC     	 pop {r7}
 137              	.LCFI11:
 138              	 .cfi_restore 7
 139              	 .cfi_def_cfa_offset 0
 140 0048 7047     	 bx lr
 141              	.L9:
 142 004a 00BF     	 .align 2
 143              	.L8:
 144 004c 00ED00E0 	 .word -536810240
 145 0050 00E100E0 	 .word -536813312
 146              	 .cfi_endproc
 147              	.LFE47:
 149              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
 150              	 .align 2
 153              	cpu_irq_critical_section_counter:
 154 0000 00000000 	 .space 4
 155              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
 158              	cpu_irq_prev_interrupt_state:
 159 0000 00       	 .space 1
 160              	 .section .text.cpu_irq_save,"ax",%progbits
 161              	 .align 1
 162              	 .syntax unified
 163              	 .thumb
 164              	 .thumb_func
 165              	 .fpu softvfp
 167              	cpu_irq_save:
 168              	.LFB59:
 169              	 .file 2 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
   1:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** /**
   2:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \file
   3:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
   4:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \brief Global interrupt management for SAM D20, SAM3 and SAM4 (NVIC based)
   5:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
   6:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * Copyright (c) 2012-2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
   8:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  10:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \page License
  11:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  12:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  15:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  18:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  22:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  25:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  28:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  40:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  42:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  */
  43:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
  44:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #ifndef UTILS_INTERRUPT_INTERRUPT_H
  45:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #define UTILS_INTERRUPT_INTERRUPT_H
  46:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
  47:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #include <compiler.h>
  48:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #include <parts.h>
  49:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
  50:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #ifdef __cplusplus
  51:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** extern "C" {
  52:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #endif
  53:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
  54:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** /**
  55:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \weakgroup interrupt_group
  56:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  57:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * @{
  58:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  */
  59:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
  60:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** /**
  61:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \name Interrupt Service Routine definition
  62:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  63:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * @{
  64:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  */
  65:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
  66:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** /**
  67:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \brief Define service routine
  68:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  69:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \note For NVIC devices the interrupt service routines are predefined to
  70:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *       add to vector table in binary generation, so there is no service
  71:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *       register at run time. The routine collections are in exceptions.h.
  72:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  73:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * Usage:
  74:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \code
  75:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	ISR(foo_irq_handler)
  76:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	{
  77:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	     // Function definition
  78:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	     ...
  79:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	}
  80:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** \endcode
  81:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  82:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \param func Name for the function.
  83:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  */
  84:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #  define ISR(func)   \
  85:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	void func (void)
  86:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
  87:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** /**
  88:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \brief Initialize interrupt vectors
  89:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  90:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * For NVIC the interrupt vectors are put in vector table. So nothing
  91:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * to do to initialize them, except defined the vector function with
  92:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * right name.
  93:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  94:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * This must be called prior to \ref irq_register_handler.
  95:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  */
  96:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #  define irq_initialize_vectors()   \
  97:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	do {                             \
  98:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	} while(0)
  99:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 100:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** /**
 101:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \brief Register handler for interrupt
 102:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
 103:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * For NVIC the interrupt vectors are put in vector table. So nothing
 104:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * to do to register them, except defined the vector function with
 105:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * right name.
 106:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
 107:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * Usage:
 108:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \code
 109:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	irq_initialize_vectors();
 110:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	irq_register_handler(foo_irq_handler);
 111:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** \endcode
 112:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
 113:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \note The function \a func must be defined with the \ref ISR macro.
 114:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \note The functions prototypes can be found in the device exception header
 115:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *       files (exceptions.h).
 116:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  */
 117:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #  define irq_register_handler(int_num, int_prio)                      \
 118:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	NVIC_ClearPendingIRQ(    (IRQn_Type)int_num);                      \
 119:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	NVIC_SetPriority(    (IRQn_Type)int_num, int_prio);                \
 120:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	NVIC_EnableIRQ(      (IRQn_Type)int_num);                          \
 121:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 122:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** //@}
 123:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 124:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #  define cpu_irq_enable()                     \
 125:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	do {                                       \
 126:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 		g_interrupt_enabled = true;            \
 127:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 		__DMB();                               \
 128:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 		__enable_irq();                        \
 129:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	} while (0)
 130:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #  define cpu_irq_disable()                    \
 131:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	do {                                       \
 132:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 		__disable_irq();                       \
 133:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 		__DMB();                               \
 134:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 		g_interrupt_enabled = false;           \
 135:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	} while (0)
 136:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 137:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** typedef uint32_t irqflags_t;
 138:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 139:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #if !defined(__DOXYGEN__)
 140:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** extern volatile bool g_interrupt_enabled;
 141:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #endif
 142:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 143:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #define cpu_irq_is_enabled()    (__get_PRIMASK() == 0)
 144:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 145:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** static volatile uint32_t cpu_irq_critical_section_counter;
 146:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** static volatile bool     cpu_irq_prev_interrupt_state;
 147:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 148:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** static inline irqflags_t cpu_irq_save(void)
 149:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** {
 170              	 .loc 2 149 0
 171              	 .cfi_startproc
 172              	 
 173              	 
 174              	 
 175 0000 80B4     	 push {r7}
 176              	.LCFI12:
 177              	 .cfi_def_cfa_offset 4
 178              	 .cfi_offset 7,-4
 179 0002 83B0     	 sub sp,sp,#12
 180              	.LCFI13:
 181              	 .cfi_def_cfa_offset 16
 182 0004 00AF     	 add r7,sp,#0
 183              	.LCFI14:
 184              	 .cfi_def_cfa_register 7
 185              	.LBB16:
 186              	.LBB17:
 187              	 .file 3 ".././hal/sam3u1c/inc/core_cmFunc.h"
   1:.././hal/sam3u1c/inc/core_cmFunc.h **** /**************************************************************************//**
   2:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @version  V3.00
   5:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @date     19. January 2012
   6:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
   7:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @note
   8:.././hal/sam3u1c/inc/core_cmFunc.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
  10:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @par
  11:.././hal/sam3u1c/inc/core_cmFunc.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:.././hal/sam3u1c/inc/core_cmFunc.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:.././hal/sam3u1c/inc/core_cmFunc.h ****  * within development tools that are supporting such ARM based processors. 
  14:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
  15:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @par
  16:.././hal/sam3u1c/inc/core_cmFunc.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:.././hal/sam3u1c/inc/core_cmFunc.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:.././hal/sam3u1c/inc/core_cmFunc.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:.././hal/sam3u1c/inc/core_cmFunc.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:.././hal/sam3u1c/inc/core_cmFunc.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
  22:.././hal/sam3u1c/inc/core_cmFunc.h ****  ******************************************************************************/
  23:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  24:.././hal/sam3u1c/inc/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  25:.././hal/sam3u1c/inc/core_cmFunc.h **** #define __CORE_CMFUNC_H
  26:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  27:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  28:.././hal/sam3u1c/inc/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  29:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface   
  30:.././hal/sam3u1c/inc/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  31:.././hal/sam3u1c/inc/core_cmFunc.h ****   @{
  32:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  33:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  34:.././hal/sam3u1c/inc/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:.././hal/sam3u1c/inc/core_cmFunc.h **** /* ARM armcc specific functions */
  36:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  37:.././hal/sam3u1c/inc/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  38:.././hal/sam3u1c/inc/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif
  40:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  41:.././hal/sam3u1c/inc/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  42:.././hal/sam3u1c/inc/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  43:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  44:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Control Register
  45:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  46:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the Control Register.
  47:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  48:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Control Register value
  49:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  50:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  51:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  52:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  53:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regControl);
  54:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  55:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  56:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  57:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Control Register
  58:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  59:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function writes the given value to the Control Register.
  60:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  61:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  62:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  63:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  64:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  65:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  66:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regControl = control;
  67:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  68:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  69:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  70:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get IPSR Register
  71:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  72:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the IPSR Register.
  73:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  74:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               IPSR Register value
  75:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  76:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  77:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  78:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  79:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regIPSR);
  80:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  81:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  82:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  83:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get APSR Register
  84:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  85:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the APSR Register.
  86:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  87:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               APSR Register value
  88:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  89:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
  90:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  91:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
  92:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regAPSR);
  93:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  94:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  95:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  96:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get xPSR Register
  97:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  98:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the xPSR Register.
  99:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 100:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               xPSR Register value
 101:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 102:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 103:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 104:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 105:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regXPSR);
 106:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 107:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 108:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 109:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 110:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 111:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 112:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 113:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               PSP Register value
 114:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 115:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 116:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 117:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 118:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regProcessStackPointer);
 119:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 120:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 121:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 122:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 123:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 124:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 125:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 126:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 127:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 128:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 129:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 130:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 131:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 132:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 133:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 134:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 135:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 136:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 137:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 138:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 139:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               MSP Register value
 140:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 141:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 142:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 143:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 144:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regMainStackPointer);
 145:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 146:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 147:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 148:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 149:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 150:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 151:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 152:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 153:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 154:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 155:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 156:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 157:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 158:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 159:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 160:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 161:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Priority Mask
 162:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 163:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 164:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 165:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Priority Mask value
 166:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 167:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 168:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 169:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 170:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regPriMask);
 171:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 172:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 173:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 174:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Priority Mask
 175:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 176:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 177:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 178:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 179:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 180:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 181:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 182:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 183:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regPriMask = (priMask);
 184:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 185:.././hal/sam3u1c/inc/core_cmFunc.h ****  
 186:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 187:.././hal/sam3u1c/inc/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 188:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 189:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Enable FIQ
 190:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 191:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 192:.././hal/sam3u1c/inc/core_cmFunc.h ****     Can only be executed in Privileged modes.
 193:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 194:.././hal/sam3u1c/inc/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 195:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 196:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 197:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Disable FIQ
 198:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 199:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 200:.././hal/sam3u1c/inc/core_cmFunc.h ****     Can only be executed in Privileged modes.
 201:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 202:.././hal/sam3u1c/inc/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 203:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 204:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 205:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Base Priority
 206:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 207:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 208:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 209:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Base Priority register value
 210:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 211:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 212:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 213:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 214:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regBasePri);
 215:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 216:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 217:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 218:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Base Priority
 219:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 220:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 221:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 222:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 223:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 224:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 225:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 226:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 227:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 228:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 229:.././hal/sam3u1c/inc/core_cmFunc.h ****  
 230:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 231:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Fault Mask
 232:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 233:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 234:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 235:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Fault Mask register value
 236:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 237:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 238:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 239:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 240:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regFaultMask);
 241:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 242:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 243:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 244:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Fault Mask
 245:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 246:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 247:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 248:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 249:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 250:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 251:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 252:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 253:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 254:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 255:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 256:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 257:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 258:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 259:.././hal/sam3u1c/inc/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 260:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 261:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get FPSCR
 262:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 263:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 264:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 265:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 266:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 267:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 268:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 269:.././hal/sam3u1c/inc/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 270:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 271:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regfpscr);
 272:.././hal/sam3u1c/inc/core_cmFunc.h **** #else
 273:.././hal/sam3u1c/inc/core_cmFunc.h ****    return(0);
 274:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif
 275:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 276:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 277:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 278:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set FPSCR
 279:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 280:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 281:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 282:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 283:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 284:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 285:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 286:.././hal/sam3u1c/inc/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 287:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 288:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regfpscr = (fpscr);
 289:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif
 290:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 291:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 292:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 293:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 294:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 295:.././hal/sam3u1c/inc/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:.././hal/sam3u1c/inc/core_cmFunc.h **** /* IAR iccarm specific functions */
 297:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 298:.././hal/sam3u1c/inc/core_cmFunc.h **** #include <cmsis_iar.h>
 299:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 300:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 301:.././hal/sam3u1c/inc/core_cmFunc.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:.././hal/sam3u1c/inc/core_cmFunc.h **** /* TI CCS specific functions */
 303:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 304:.././hal/sam3u1c/inc/core_cmFunc.h **** #include <cmsis_ccs.h>
 305:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 306:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 307:.././hal/sam3u1c/inc/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:.././hal/sam3u1c/inc/core_cmFunc.h **** /* GNU gcc specific functions */
 309:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 310:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 311:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 312:.././hal/sam3u1c/inc/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 313:.././hal/sam3u1c/inc/core_cmFunc.h ****   Can only be executed in Privileged modes.
 314:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 315:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 316:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 317:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("cpsie i");
 318:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 319:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 320:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 321:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 322:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 323:.././hal/sam3u1c/inc/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 324:.././hal/sam3u1c/inc/core_cmFunc.h ****   Can only be executed in Privileged modes.
 325:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 326:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 327:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 328:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("cpsid i");
 329:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 330:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 331:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 332:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Control Register
 333:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 334:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the Control Register.
 335:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 336:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Control Register value
 337:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 338:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
 339:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 340:.././hal/sam3u1c/inc/core_cmFunc.h ****   uint32_t result;
 341:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 342:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 343:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(result);
 344:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 345:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 346:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 347:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Control Register
 348:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 349:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function writes the given value to the Control Register.
 350:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 351:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    control  Control Register value to set
 352:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 353:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 354:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 355:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 356:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 357:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 358:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 359:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get IPSR Register
 360:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 361:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the IPSR Register.
 362:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 363:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               IPSR Register value
 364:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 365:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 366:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 367:.././hal/sam3u1c/inc/core_cmFunc.h ****   uint32_t result;
 368:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 369:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 370:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(result);
 371:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 372:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 373:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 374:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get APSR Register
 375:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 376:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the APSR Register.
 377:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 378:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               APSR Register value
 379:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 380:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 381:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 382:.././hal/sam3u1c/inc/core_cmFunc.h ****   uint32_t result;
 383:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 384:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 385:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(result);
 386:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 387:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 388:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 389:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get xPSR Register
 390:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 391:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 392:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 393:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               xPSR Register value
 394:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 395:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 396:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 397:.././hal/sam3u1c/inc/core_cmFunc.h ****   uint32_t result;
 398:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 399:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 400:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(result);
 401:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 402:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 403:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 404:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 405:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 406:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 407:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 408:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               PSP Register value
 409:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 410:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 411:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 412:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t result;
 413:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 414:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 415:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(result);
 416:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 417:.././hal/sam3u1c/inc/core_cmFunc.h ****  
 418:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 419:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 420:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 421:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 422:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 423:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 424:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 425:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 426:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 427:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) );
 428:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 429:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 430:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 431:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 432:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 433:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 434:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 435:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               MSP Register value
 436:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 437:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 438:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 439:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t result;
 440:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 441:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 442:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(result);
 443:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 444:.././hal/sam3u1c/inc/core_cmFunc.h ****  
 445:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 446:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 447:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 448:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 449:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 450:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 451:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 452:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 453:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 454:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) );
 455:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 456:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 457:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 458:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Priority Mask
 459:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 460:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 461:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 462:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Priority Mask value
 463:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 464:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 465:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 466:.././hal/sam3u1c/inc/core_cmFunc.h ****   uint32_t result;
 467:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 468:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 188              	 .loc 3 468 0
 189              	 .syntax unified
 190              	
 191 0006 EFF31083 	 MRS r3,primask
 192              	
 193              	 .thumb
 194              	 .syntax unified
 195 000a 3B60     	 str r3,[r7]
 469:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(result);
 196              	 .loc 3 469 0
 197 000c 3B68     	 ldr r3,[r7]
 198              	.LBE17:
 199              	.LBE16:
 150:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	irqflags_t flags = cpu_irq_is_enabled();
 200              	 .loc 2 150 0
 201 000e 002B     	 cmp r3,#0
 202 0010 0CBF     	 ite eq
 203 0012 0123     	 moveq r3,#1
 204 0014 0023     	 movne r3,#0
 205 0016 DBB2     	 uxtb r3,r3
 206 0018 7B60     	 str r3,[r7,#4]
 207              	.LBB18:
 208              	.LBB19:
 328:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 209              	 .loc 3 328 0
 210              	 .syntax unified
 211              	
 212 001a 72B6     	 cpsid i
 213              	
 214              	 .thumb
 215              	 .syntax unified
 216              	.LBE19:
 217              	.LBE18:
 218              	.LBB20:
 219              	.LBB21:
 220              	 .file 4 ".././hal/sam3u1c/inc/core_cmInstr.h"
   1:.././hal/sam3u1c/inc/core_cmInstr.h **** /**************************************************************************//**
   2:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @version  V3.00
   5:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @date     07. February 2012
   6:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
   7:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @note
   8:.././hal/sam3u1c/inc/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  10:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @par
  11:.././hal/sam3u1c/inc/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:.././hal/sam3u1c/inc/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:.././hal/sam3u1c/inc/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  15:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @par
  16:.././hal/sam3u1c/inc/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:.././hal/sam3u1c/inc/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:.././hal/sam3u1c/inc/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:.././hal/sam3u1c/inc/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:.././hal/sam3u1c/inc/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  22:.././hal/sam3u1c/inc/core_cmInstr.h ****  ******************************************************************************/
  23:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  24:.././hal/sam3u1c/inc/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  27:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  28:.././hal/sam3u1c/inc/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:.././hal/sam3u1c/inc/core_cmInstr.h ****   Access to dedicated instructions
  31:.././hal/sam3u1c/inc/core_cmInstr.h ****   @{
  32:.././hal/sam3u1c/inc/core_cmInstr.h **** */
  33:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  34:.././hal/sam3u1c/inc/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:.././hal/sam3u1c/inc/core_cmInstr.h **** /* ARM armcc specific functions */
  36:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  37:.././hal/sam3u1c/inc/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:.././hal/sam3u1c/inc/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:.././hal/sam3u1c/inc/core_cmInstr.h **** #endif
  40:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  41:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  42:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  No Operation
  43:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  44:.././hal/sam3u1c/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  46:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __NOP                             __nop
  47:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  48:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  49:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  51:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:.././hal/sam3u1c/inc/core_cmInstr.h ****     until one of a number of events occurs.
  53:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  54:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __WFI                             __wfi
  55:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  56:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  57:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Event
  58:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  59:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:.././hal/sam3u1c/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  62:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __WFE                             __wfe
  63:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  64:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  65:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Send Event
  66:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  67:.././hal/sam3u1c/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  69:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __SEV                             __sev
  70:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  71:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  72:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  74:.././hal/sam3u1c/inc/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:.././hal/sam3u1c/inc/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:.././hal/sam3u1c/inc/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  78:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  80:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  81:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  83:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:.././hal/sam3u1c/inc/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  86:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  88:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  89:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  91:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:.././hal/sam3u1c/inc/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  94:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  96:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  97:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  99:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 101:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 103:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 104:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __REV                             __rev
 105:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 106:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 107:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 109:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 111:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 113:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 114:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 116:.././hal/sam3u1c/inc/core_cmInstr.h ****   rev16 r0, r0
 117:.././hal/sam3u1c/inc/core_cmInstr.h ****   bx lr
 118:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 119:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 120:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 121:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 123:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 125:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 127:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 128:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 130:.././hal/sam3u1c/inc/core_cmInstr.h ****   revsh r0, r0
 131:.././hal/sam3u1c/inc/core_cmInstr.h ****   bx lr
 132:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 133:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 134:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 135:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 137:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 139:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Rotated value
 142:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 143:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __ROR                             __ror
 144:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 145:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 146:.././hal/sam3u1c/inc/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 148:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 150:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 152:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 154:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 155:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __RBIT                            __rbit
 156:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 157:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 158:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 160:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 162:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 165:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 167:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 168:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 170:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 172:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 175:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 177:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 178:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 180:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 182:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 185:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 187:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 188:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 190:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 192:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 193:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 195:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 196:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 197:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 199:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 200:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 202:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 204:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 205:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 207:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 208:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 209:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 211:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 212:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 214:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 216:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 217:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 219:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 220:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 221:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 223:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 224:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 226:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 228:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 229:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CLREX                           __clrex
 230:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 231:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 232:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Signed Saturate
 233:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 234:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function saturates a signed value.
 235:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 236:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             Saturated value
 239:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 240:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __SSAT                            __ssat
 241:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 242:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 243:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 245:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function saturates an unsigned value.
 246:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 247:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             Saturated value
 250:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 251:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __USAT                            __usat
 252:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 253:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 254:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Count leading zeros
 255:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 256:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 258:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             number of leading zeros in value
 260:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 261:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CLZ                             __clz
 262:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 263:.././hal/sam3u1c/inc/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 265:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 266:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 267:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:.././hal/sam3u1c/inc/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 270:.././hal/sam3u1c/inc/core_cmInstr.h **** #include <cmsis_iar.h>
 271:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 272:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 273:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:.././hal/sam3u1c/inc/core_cmInstr.h **** /* TI CCS specific functions */
 275:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 276:.././hal/sam3u1c/inc/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 278:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 279:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:.././hal/sam3u1c/inc/core_cmInstr.h **** /* GNU gcc specific functions */
 281:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 282:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  No Operation
 283:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 284:.././hal/sam3u1c/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 286:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 287:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 288:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("nop");
 289:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 290:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 291:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 292:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
 293:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 294:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 295:.././hal/sam3u1c/inc/core_cmInstr.h ****     until one of a number of events occurs.
 296:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 297:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 298:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 299:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("wfi");
 300:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 301:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 302:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 303:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Event
 304:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 305:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 306:.././hal/sam3u1c/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 307:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 308:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 309:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 310:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("wfe");
 311:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 312:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 313:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 314:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Send Event
 315:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 316:.././hal/sam3u1c/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 317:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 318:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 319:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 320:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("sev");
 321:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 322:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 323:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 324:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 325:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 326:.././hal/sam3u1c/inc/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 327:.././hal/sam3u1c/inc/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 328:.././hal/sam3u1c/inc/core_cmInstr.h ****     memory, after the instruction has been completed.
 329:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 330:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 331:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 332:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("isb");
 333:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 334:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 335:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 336:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 337:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 338:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 339:.././hal/sam3u1c/inc/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 340:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 341:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 342:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 343:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("dsb");
 344:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 345:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 346:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 347:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Memory Barrier
 348:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 349:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 350:.././hal/sam3u1c/inc/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 351:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 352:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
 353:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 354:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("dmb");
 221              	 .loc 4 354 0
 222              	 .syntax unified
 223              	
 224 001c BFF35F8F 	 dmb
 225              	
 226              	 .thumb
 227              	 .syntax unified
 228              	.LBE21:
 229              	.LBE20:
 151:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	cpu_irq_disable();
 230              	 .loc 2 151 0
 231 0020 044B     	 ldr r3,.L13
 232 0022 0022     	 movs r2,#0
 233 0024 1A70     	 strb r2,[r3]
 152:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	return flags;
 234              	 .loc 2 152 0
 235 0026 7B68     	 ldr r3,[r7,#4]
 153:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** }
 236              	 .loc 2 153 0
 237 0028 1846     	 mov r0,r3
 238 002a 0C37     	 adds r7,r7,#12
 239              	.LCFI15:
 240              	 .cfi_def_cfa_offset 4
 241 002c BD46     	 mov sp,r7
 242              	.LCFI16:
 243              	 .cfi_def_cfa_register 13
 244              	 
 245 002e 80BC     	 pop {r7}
 246              	.LCFI17:
 247              	 .cfi_restore 7
 248              	 .cfi_def_cfa_offset 0
 249 0030 7047     	 bx lr
 250              	.L14:
 251 0032 00BF     	 .align 2
 252              	.L13:
 253 0034 00000000 	 .word g_interrupt_enabled
 254              	 .cfi_endproc
 255              	.LFE59:
 257              	 .section .text.cpu_irq_is_enabled_flags,"ax",%progbits
 258              	 .align 1
 259              	 .syntax unified
 260              	 .thumb
 261              	 .thumb_func
 262              	 .fpu softvfp
 264              	cpu_irq_is_enabled_flags:
 265              	.LFB60:
 154:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 155:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
 156:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** {
 266              	 .loc 2 156 0
 267              	 .cfi_startproc
 268              	 
 269              	 
 270              	 
 271 0000 80B4     	 push {r7}
 272              	.LCFI18:
 273              	 .cfi_def_cfa_offset 4
 274              	 .cfi_offset 7,-4
 275 0002 83B0     	 sub sp,sp,#12
 276              	.LCFI19:
 277              	 .cfi_def_cfa_offset 16
 278 0004 00AF     	 add r7,sp,#0
 279              	.LCFI20:
 280              	 .cfi_def_cfa_register 7
 281 0006 7860     	 str r0,[r7,#4]
 157:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	return (flags);
 282              	 .loc 2 157 0
 283 0008 7B68     	 ldr r3,[r7,#4]
 284 000a 002B     	 cmp r3,#0
 285 000c 14BF     	 ite ne
 286 000e 0123     	 movne r3,#1
 287 0010 0023     	 moveq r3,#0
 288 0012 DBB2     	 uxtb r3,r3
 158:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** }
 289              	 .loc 2 158 0
 290 0014 1846     	 mov r0,r3
 291 0016 0C37     	 adds r7,r7,#12
 292              	.LCFI21:
 293              	 .cfi_def_cfa_offset 4
 294 0018 BD46     	 mov sp,r7
 295              	.LCFI22:
 296              	 .cfi_def_cfa_register 13
 297              	 
 298 001a 80BC     	 pop {r7}
 299              	.LCFI23:
 300              	 .cfi_restore 7
 301              	 .cfi_def_cfa_offset 0
 302 001c 7047     	 bx lr
 303              	 .cfi_endproc
 304              	.LFE60:
 306              	 .section .text.cpu_irq_restore,"ax",%progbits
 307              	 .align 1
 308              	 .syntax unified
 309              	 .thumb
 310              	 .thumb_func
 311              	 .fpu softvfp
 313              	cpu_irq_restore:
 314              	.LFB61:
 159:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 160:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** static inline void cpu_irq_restore(irqflags_t flags)
 161:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** {
 315              	 .loc 2 161 0
 316              	 .cfi_startproc
 317              	 
 318              	 
 319 0000 80B5     	 push {r7,lr}
 320              	.LCFI24:
 321              	 .cfi_def_cfa_offset 8
 322              	 .cfi_offset 7,-8
 323              	 .cfi_offset 14,-4
 324 0002 82B0     	 sub sp,sp,#8
 325              	.LCFI25:
 326              	 .cfi_def_cfa_offset 16
 327 0004 00AF     	 add r7,sp,#0
 328              	.LCFI26:
 329              	 .cfi_def_cfa_register 7
 330 0006 7860     	 str r0,[r7,#4]
 162:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	if (cpu_irq_is_enabled_flags(flags))
 331              	 .loc 2 162 0
 332 0008 7868     	 ldr r0,[r7,#4]
 333 000a 074B     	 ldr r3,.L20
 334 000c 9847     	 blx r3
 335              	.LVL0:
 336 000e 0346     	 mov r3,r0
 337 0010 002B     	 cmp r3,#0
 338 0012 05D0     	 beq .L19
 163:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 		cpu_irq_enable();
 339              	 .loc 2 163 0
 340 0014 054B     	 ldr r3,.L20+4
 341 0016 0122     	 movs r2,#1
 342 0018 1A70     	 strb r2,[r3]
 343              	.LBB22:
 344              	.LBB23:
 345              	 .loc 4 354 0
 346              	 .syntax unified
 347              	
 348 001a BFF35F8F 	 dmb
 349              	
 350              	 .thumb
 351              	 .syntax unified
 352              	.LBE23:
 353              	.LBE22:
 354              	.LBB24:
 355              	.LBB25:
 317:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 356              	 .loc 3 317 0
 357              	 .syntax unified
 358              	
 359 001e 62B6     	 cpsie i
 360              	
 361              	 .thumb
 362              	 .syntax unified
 363              	.L19:
 364              	.LBE25:
 365              	.LBE24:
 164:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** }
 366              	 .loc 2 164 0
 367 0020 00BF     	 nop
 368 0022 0837     	 adds r7,r7,#8
 369              	.LCFI27:
 370              	 .cfi_def_cfa_offset 8
 371 0024 BD46     	 mov sp,r7
 372              	.LCFI28:
 373              	 .cfi_def_cfa_register 13
 374              	 
 375 0026 80BD     	 pop {r7,pc}
 376              	.L21:
 377              	 .align 2
 378              	.L20:
 379 0028 00000000 	 .word cpu_irq_is_enabled_flags
 380 002c 00000000 	 .word g_interrupt_enabled
 381              	 .cfi_endproc
 382              	.LFE61:
 384              	 .section .text.sleepmgr_lock_mode,"ax",%progbits
 385              	 .align 1
 386              	 .syntax unified
 387              	 .thumb
 388              	 .thumb_func
 389              	 .fpu softvfp
 391              	sleepmgr_lock_mode:
 392              	.LFB134:
 393              	 .file 5 ".././hal/sam3u1c/inc/sleepmgr.h"
   1:.././hal/sam3u1c/inc/sleepmgr.h **** /**
   2:.././hal/sam3u1c/inc/sleepmgr.h ****  * \file
   3:.././hal/sam3u1c/inc/sleepmgr.h ****  *
   4:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Sleep manager
   5:.././hal/sam3u1c/inc/sleepmgr.h ****  *
   6:.././hal/sam3u1c/inc/sleepmgr.h ****  * Copyright (c) 2010 - 2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sleepmgr.h ****  *
   8:.././hal/sam3u1c/inc/sleepmgr.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  10:.././hal/sam3u1c/inc/sleepmgr.h ****  * \page License
  11:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  12:.././hal/sam3u1c/inc/sleepmgr.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sleepmgr.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  15:.././hal/sam3u1c/inc/sleepmgr.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sleepmgr.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  18:.././hal/sam3u1c/inc/sleepmgr.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sleepmgr.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sleepmgr.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  22:.././hal/sam3u1c/inc/sleepmgr.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sleepmgr.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  25:.././hal/sam3u1c/inc/sleepmgr.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sleepmgr.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  28:.././hal/sam3u1c/inc/sleepmgr.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sleepmgr.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sleepmgr.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sleepmgr.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sleepmgr.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sleepmgr.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sleepmgr.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sleepmgr.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sleepmgr.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sleepmgr.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sleepmgr.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  40:.././hal/sam3u1c/inc/sleepmgr.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  42:.././hal/sam3u1c/inc/sleepmgr.h ****  */
  43:.././hal/sam3u1c/inc/sleepmgr.h **** #ifndef SLEEPMGR_H
  44:.././hal/sam3u1c/inc/sleepmgr.h **** #define SLEEPMGR_H
  45:.././hal/sam3u1c/inc/sleepmgr.h **** 
  46:.././hal/sam3u1c/inc/sleepmgr.h **** #include <compiler.h>
  47:.././hal/sam3u1c/inc/sleepmgr.h **** #include <parts.h>
  48:.././hal/sam3u1c/inc/sleepmgr.h **** 
  49:.././hal/sam3u1c/inc/sleepmgr.h **** #if (SAM3S || SAM3U || SAM3N || SAM3XA || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM
  50:.././hal/sam3u1c/inc/sleepmgr.h **** # include "sam/sleepmgr.h"
  51:.././hal/sam3u1c/inc/sleepmgr.h **** #elif XMEGA
  52:.././hal/sam3u1c/inc/sleepmgr.h **** # include "xmega/sleepmgr.h"
  53:.././hal/sam3u1c/inc/sleepmgr.h **** #elif UC3
  54:.././hal/sam3u1c/inc/sleepmgr.h **** # include "uc3/sleepmgr.h"
  55:.././hal/sam3u1c/inc/sleepmgr.h **** #elif SAM4L
  56:.././hal/sam3u1c/inc/sleepmgr.h **** # include "sam4l/sleepmgr.h"
  57:.././hal/sam3u1c/inc/sleepmgr.h **** #elif MEGA
  58:.././hal/sam3u1c/inc/sleepmgr.h **** # include "mega/sleepmgr.h"
  59:.././hal/sam3u1c/inc/sleepmgr.h **** #elif (SAMD20 || SAMD21 || SAMR21 || SAMD11)
  60:.././hal/sam3u1c/inc/sleepmgr.h **** # include "samd/sleepmgr.h"
  61:.././hal/sam3u1c/inc/sleepmgr.h **** #else
  62:.././hal/sam3u1c/inc/sleepmgr.h **** # error Unsupported device.
  63:.././hal/sam3u1c/inc/sleepmgr.h **** #endif
  64:.././hal/sam3u1c/inc/sleepmgr.h **** 
  65:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef __cplusplus
  66:.././hal/sam3u1c/inc/sleepmgr.h **** extern "C" {
  67:.././hal/sam3u1c/inc/sleepmgr.h **** #endif
  68:.././hal/sam3u1c/inc/sleepmgr.h **** 
  69:.././hal/sam3u1c/inc/sleepmgr.h **** /**
  70:.././hal/sam3u1c/inc/sleepmgr.h ****  * \defgroup sleepmgr_group Sleep manager
  71:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  72:.././hal/sam3u1c/inc/sleepmgr.h ****  * The sleep manager is a service for ensuring that the device is not put to
  73:.././hal/sam3u1c/inc/sleepmgr.h ****  * sleep in deeper sleep modes than the system (e.g., peripheral drivers,
  74:.././hal/sam3u1c/inc/sleepmgr.h ****  * services or the application) allows at any given time.
  75:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  76:.././hal/sam3u1c/inc/sleepmgr.h ****  * It is based on the use of lock counting for the individual sleep modes, and
  77:.././hal/sam3u1c/inc/sleepmgr.h ****  * will put the device to sleep in the shallowest sleep mode that has a non-zero
  78:.././hal/sam3u1c/inc/sleepmgr.h ****  * lock count. The drivers/services/application can change these counts by use
  79:.././hal/sam3u1c/inc/sleepmgr.h ****  * of \ref sleepmgr_lock_mode and \ref sleepmgr_unlock_mode.
  80:.././hal/sam3u1c/inc/sleepmgr.h ****  * Refer to \ref sleepmgr_mode for a list of the sleep modes available for
  81:.././hal/sam3u1c/inc/sleepmgr.h ****  * locking, and the device datasheet for information on their effect.
  82:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  83:.././hal/sam3u1c/inc/sleepmgr.h ****  * The application must supply the file \ref conf_sleepmgr.h.
  84:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  85:.././hal/sam3u1c/inc/sleepmgr.h ****  * For the sleep manager to be enabled, the symbol \ref CONFIG_SLEEPMGR_ENABLE
  86:.././hal/sam3u1c/inc/sleepmgr.h ****  * must be defined, e.g., in \ref conf_sleepmgr.h. If this symbol is not
  87:.././hal/sam3u1c/inc/sleepmgr.h ****  * defined, the functions are replaced with dummy functions and no RAM is used.
  88:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  89:.././hal/sam3u1c/inc/sleepmgr.h ****  * @{
  90:.././hal/sam3u1c/inc/sleepmgr.h ****  */
  91:.././hal/sam3u1c/inc/sleepmgr.h **** 
  92:.././hal/sam3u1c/inc/sleepmgr.h **** /**
  93:.././hal/sam3u1c/inc/sleepmgr.h ****  * \def CONFIG_SLEEPMGR_ENABLE
  94:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Configuration symbol for enabling the sleep manager
  95:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  96:.././hal/sam3u1c/inc/sleepmgr.h ****  * If this symbol is not defined, the functions of this service are replaced
  97:.././hal/sam3u1c/inc/sleepmgr.h ****  * with dummy functions. This is useful for reducing code size and execution
  98:.././hal/sam3u1c/inc/sleepmgr.h ****  * time if the sleep manager is not needed in the application.
  99:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 100:.././hal/sam3u1c/inc/sleepmgr.h ****  * This symbol may be defined in \ref conf_sleepmgr.h.
 101:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 102:.././hal/sam3u1c/inc/sleepmgr.h **** #if defined(__DOXYGEN__) && !defined(CONFIG_SLEEPMGR_ENABLE)
 103:.././hal/sam3u1c/inc/sleepmgr.h **** #  define CONFIG_SLEEPMGR_ENABLE
 104:.././hal/sam3u1c/inc/sleepmgr.h **** #endif
 105:.././hal/sam3u1c/inc/sleepmgr.h **** 
 106:.././hal/sam3u1c/inc/sleepmgr.h **** /**
 107:.././hal/sam3u1c/inc/sleepmgr.h ****  * \enum sleepmgr_mode
 108:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Sleep mode locks
 109:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 110:.././hal/sam3u1c/inc/sleepmgr.h ****  * Identifiers for the different sleep mode locks.
 111:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 112:.././hal/sam3u1c/inc/sleepmgr.h **** 
 113:.././hal/sam3u1c/inc/sleepmgr.h **** /**
 114:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Initialize the lock counts
 115:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 116:.././hal/sam3u1c/inc/sleepmgr.h ****  * Sets all lock counts to 0, except the very last one, which is set to 1. This
 117:.././hal/sam3u1c/inc/sleepmgr.h ****  * is done to simplify the algorithm for finding the deepest allowable sleep
 118:.././hal/sam3u1c/inc/sleepmgr.h ****  * mode in \ref sleepmgr_enter_sleep.
 119:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 120:.././hal/sam3u1c/inc/sleepmgr.h **** static inline void sleepmgr_init(void)
 121:.././hal/sam3u1c/inc/sleepmgr.h **** {
 122:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 123:.././hal/sam3u1c/inc/sleepmgr.h **** 	uint8_t i;
 124:.././hal/sam3u1c/inc/sleepmgr.h **** 
 125:.././hal/sam3u1c/inc/sleepmgr.h **** 	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
 126:.././hal/sam3u1c/inc/sleepmgr.h **** 		sleepmgr_locks[i] = 0;
 127:.././hal/sam3u1c/inc/sleepmgr.h **** 	}
 128:.././hal/sam3u1c/inc/sleepmgr.h **** 	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
 129:.././hal/sam3u1c/inc/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 130:.././hal/sam3u1c/inc/sleepmgr.h **** }
 131:.././hal/sam3u1c/inc/sleepmgr.h **** 
 132:.././hal/sam3u1c/inc/sleepmgr.h **** /**
 133:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Increase lock count for a sleep mode
 134:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 135:.././hal/sam3u1c/inc/sleepmgr.h ****  * Increases the lock count for \a mode to ensure that the sleep manager does
 136:.././hal/sam3u1c/inc/sleepmgr.h ****  * not put the device to sleep in the deeper sleep modes.
 137:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 138:.././hal/sam3u1c/inc/sleepmgr.h ****  * \param mode Sleep mode to lock.
 139:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 140:.././hal/sam3u1c/inc/sleepmgr.h **** static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
 141:.././hal/sam3u1c/inc/sleepmgr.h **** {
 394              	 .loc 5 141 0
 395              	 .cfi_startproc
 396              	 
 397              	 
 398 0000 80B5     	 push {r7,lr}
 399              	.LCFI29:
 400              	 .cfi_def_cfa_offset 8
 401              	 .cfi_offset 7,-8
 402              	 .cfi_offset 14,-4
 403 0002 84B0     	 sub sp,sp,#16
 404              	.LCFI30:
 405              	 .cfi_def_cfa_offset 24
 406 0004 00AF     	 add r7,sp,#0
 407              	.LCFI31:
 408              	 .cfi_def_cfa_register 7
 409 0006 0346     	 mov r3,r0
 410 0008 FB71     	 strb r3,[r7,#7]
 142:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 143:.././hal/sam3u1c/inc/sleepmgr.h **** 	irqflags_t flags;
 144:.././hal/sam3u1c/inc/sleepmgr.h **** 
 145:.././hal/sam3u1c/inc/sleepmgr.h **** 	Assert(sleepmgr_locks[mode] < 0xff);
 146:.././hal/sam3u1c/inc/sleepmgr.h **** 
 147:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Enter a critical section
 148:.././hal/sam3u1c/inc/sleepmgr.h **** 	flags = cpu_irq_save();
 411              	 .loc 5 148 0
 412 000a 084B     	 ldr r3,.L23
 413 000c 9847     	 blx r3
 414              	.LVL1:
 415 000e F860     	 str r0,[r7,#12]
 149:.././hal/sam3u1c/inc/sleepmgr.h **** 
 150:.././hal/sam3u1c/inc/sleepmgr.h **** 	++sleepmgr_locks[mode];
 416              	 .loc 5 150 0
 417 0010 FB79     	 ldrb r3,[r7,#7]
 418 0012 074A     	 ldr r2,.L23+4
 419 0014 D25C     	 ldrb r2,[r2,r3]
 420 0016 0132     	 adds r2,r2,#1
 421 0018 D1B2     	 uxtb r1,r2
 422 001a 054A     	 ldr r2,.L23+4
 423 001c D154     	 strb r1,[r2,r3]
 151:.././hal/sam3u1c/inc/sleepmgr.h **** 
 152:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Leave the critical section
 153:.././hal/sam3u1c/inc/sleepmgr.h **** 	cpu_irq_restore(flags);
 424              	 .loc 5 153 0
 425 001e F868     	 ldr r0,[r7,#12]
 426 0020 044B     	 ldr r3,.L23+8
 427 0022 9847     	 blx r3
 428              	.LVL2:
 154:.././hal/sam3u1c/inc/sleepmgr.h **** #else
 155:.././hal/sam3u1c/inc/sleepmgr.h **** 	UNUSED(mode);
 156:.././hal/sam3u1c/inc/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 157:.././hal/sam3u1c/inc/sleepmgr.h **** }
 429              	 .loc 5 157 0
 430 0024 00BF     	 nop
 431 0026 1037     	 adds r7,r7,#16
 432              	.LCFI32:
 433              	 .cfi_def_cfa_offset 8
 434 0028 BD46     	 mov sp,r7
 435              	.LCFI33:
 436              	 .cfi_def_cfa_register 13
 437              	 
 438 002a 80BD     	 pop {r7,pc}
 439              	.L24:
 440              	 .align 2
 441              	.L23:
 442 002c 00000000 	 .word cpu_irq_save
 443 0030 00000000 	 .word sleepmgr_locks
 444 0034 00000000 	 .word cpu_irq_restore
 445              	 .cfi_endproc
 446              	.LFE134:
 448              	 .section .text.sleepmgr_unlock_mode,"ax",%progbits
 449              	 .align 1
 450              	 .syntax unified
 451              	 .thumb
 452              	 .thumb_func
 453              	 .fpu softvfp
 455              	sleepmgr_unlock_mode:
 456              	.LFB135:
 158:.././hal/sam3u1c/inc/sleepmgr.h **** 
 159:.././hal/sam3u1c/inc/sleepmgr.h **** /**
 160:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Decrease lock count for a sleep mode
 161:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 162:.././hal/sam3u1c/inc/sleepmgr.h ****  * Decreases the lock count for \a mode. If the lock count reaches 0, the sleep
 163:.././hal/sam3u1c/inc/sleepmgr.h ****  * manager can put the device to sleep in the deeper sleep modes.
 164:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 165:.././hal/sam3u1c/inc/sleepmgr.h ****  * \param mode Sleep mode to unlock.
 166:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 167:.././hal/sam3u1c/inc/sleepmgr.h **** static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
 168:.././hal/sam3u1c/inc/sleepmgr.h **** {
 457              	 .loc 5 168 0
 458              	 .cfi_startproc
 459              	 
 460              	 
 461 0000 80B5     	 push {r7,lr}
 462              	.LCFI34:
 463              	 .cfi_def_cfa_offset 8
 464              	 .cfi_offset 7,-8
 465              	 .cfi_offset 14,-4
 466 0002 84B0     	 sub sp,sp,#16
 467              	.LCFI35:
 468              	 .cfi_def_cfa_offset 24
 469 0004 00AF     	 add r7,sp,#0
 470              	.LCFI36:
 471              	 .cfi_def_cfa_register 7
 472 0006 0346     	 mov r3,r0
 473 0008 FB71     	 strb r3,[r7,#7]
 169:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 170:.././hal/sam3u1c/inc/sleepmgr.h **** 	irqflags_t flags;
 171:.././hal/sam3u1c/inc/sleepmgr.h **** 
 172:.././hal/sam3u1c/inc/sleepmgr.h **** 	Assert(sleepmgr_locks[mode]);
 173:.././hal/sam3u1c/inc/sleepmgr.h **** 
 174:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Enter a critical section
 175:.././hal/sam3u1c/inc/sleepmgr.h **** 	flags = cpu_irq_save();
 474              	 .loc 5 175 0
 475 000a 084B     	 ldr r3,.L26
 476 000c 9847     	 blx r3
 477              	.LVL3:
 478 000e F860     	 str r0,[r7,#12]
 176:.././hal/sam3u1c/inc/sleepmgr.h **** 
 177:.././hal/sam3u1c/inc/sleepmgr.h **** 	--sleepmgr_locks[mode];
 479              	 .loc 5 177 0
 480 0010 FB79     	 ldrb r3,[r7,#7]
 481 0012 074A     	 ldr r2,.L26+4
 482 0014 D25C     	 ldrb r2,[r2,r3]
 483 0016 013A     	 subs r2,r2,#1
 484 0018 D1B2     	 uxtb r1,r2
 485 001a 054A     	 ldr r2,.L26+4
 486 001c D154     	 strb r1,[r2,r3]
 178:.././hal/sam3u1c/inc/sleepmgr.h **** 
 179:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Leave the critical section
 180:.././hal/sam3u1c/inc/sleepmgr.h **** 	cpu_irq_restore(flags);
 487              	 .loc 5 180 0
 488 001e F868     	 ldr r0,[r7,#12]
 489 0020 044B     	 ldr r3,.L26+8
 490 0022 9847     	 blx r3
 491              	.LVL4:
 181:.././hal/sam3u1c/inc/sleepmgr.h **** #else
 182:.././hal/sam3u1c/inc/sleepmgr.h **** 	UNUSED(mode);
 183:.././hal/sam3u1c/inc/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 184:.././hal/sam3u1c/inc/sleepmgr.h **** }
 492              	 .loc 5 184 0
 493 0024 00BF     	 nop
 494 0026 1037     	 adds r7,r7,#16
 495              	.LCFI37:
 496              	 .cfi_def_cfa_offset 8
 497 0028 BD46     	 mov sp,r7
 498              	.LCFI38:
 499              	 .cfi_def_cfa_register 13
 500              	 
 501 002a 80BD     	 pop {r7,pc}
 502              	.L27:
 503              	 .align 2
 504              	.L26:
 505 002c 00000000 	 .word cpu_irq_save
 506 0030 00000000 	 .word sleepmgr_locks
 507 0034 00000000 	 .word cpu_irq_restore
 508              	 .cfi_endproc
 509              	.LFE135:
 511              	 .section .bss.udd_b_idle,"aw",%nobits
 514              	udd_b_idle:
 515 0000 00       	 .space 1
 516              	 .section .text.udd_sleep_mode,"ax",%progbits
 517              	 .align 1
 518              	 .syntax unified
 519              	 .thumb
 520              	 .thumb_func
 521              	 .fpu softvfp
 523              	udd_sleep_mode:
 524              	.LFB138:
 525              	 .file 6 ".././hal/sam3u1c/udphs_device.c"
   1:.././hal/sam3u1c/udphs_device.c **** /**
   2:.././hal/sam3u1c/udphs_device.c ****  * \file
   3:.././hal/sam3u1c/udphs_device.c ****  *
   4:.././hal/sam3u1c/udphs_device.c ****  * \brief USB Device Driver for UDPHS. Compliant with common UDD driver.
   5:.././hal/sam3u1c/udphs_device.c ****  *
   6:.././hal/sam3u1c/udphs_device.c ****  * Copyright (c) 2012 - 2013 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/udphs_device.c ****  *
   8:.././hal/sam3u1c/udphs_device.c ****  * \asf_license_start
   9:.././hal/sam3u1c/udphs_device.c ****  *
  10:.././hal/sam3u1c/udphs_device.c ****  * \page License
  11:.././hal/sam3u1c/udphs_device.c ****  *
  12:.././hal/sam3u1c/udphs_device.c ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/udphs_device.c ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/udphs_device.c ****  *
  15:.././hal/sam3u1c/udphs_device.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/udphs_device.c ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/udphs_device.c ****  *
  18:.././hal/sam3u1c/udphs_device.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/udphs_device.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/udphs_device.c ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/udphs_device.c ****  *
  22:.././hal/sam3u1c/udphs_device.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/udphs_device.c ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/udphs_device.c ****  *
  25:.././hal/sam3u1c/udphs_device.c ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/udphs_device.c ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/udphs_device.c ****  *
  28:.././hal/sam3u1c/udphs_device.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/udphs_device.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/udphs_device.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/udphs_device.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/udphs_device.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/udphs_device.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/udphs_device.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/udphs_device.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/udphs_device.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/udphs_device.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/udphs_device.c ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/udphs_device.c ****  *
  40:.././hal/sam3u1c/udphs_device.c ****  * \asf_license_stop
  41:.././hal/sam3u1c/udphs_device.c ****  *
  42:.././hal/sam3u1c/udphs_device.c ****  */
  43:.././hal/sam3u1c/udphs_device.c **** 
  44:.././hal/sam3u1c/udphs_device.c **** #include "conf_usb.h"
  45:.././hal/sam3u1c/udphs_device.c **** #include "sysclk.h"
  46:.././hal/sam3u1c/udphs_device.c **** #include "udd.h"
  47:.././hal/sam3u1c/udphs_device.c **** #include "udphs_device.h"
  48:.././hal/sam3u1c/udphs_device.c **** #include <string.h>
  49:.././hal/sam3u1c/udphs_device.c **** 
  50:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_NO_SLEEP_MGR
  51:.././hal/sam3u1c/udphs_device.c **** #  include "sleep.h"
  52:.././hal/sam3u1c/udphs_device.c **** #  include "sleepmgr.h"
  53:.././hal/sam3u1c/udphs_device.c **** #endif
  54:.././hal/sam3u1c/udphs_device.c **** 
  55:.././hal/sam3u1c/udphs_device.c **** #if !(SAM3U)
  56:.././hal/sam3u1c/udphs_device.c **** #  error The current UDPHS Device Driver supports only SAM3U.
  57:.././hal/sam3u1c/udphs_device.c **** #endif
  58:.././hal/sam3u1c/udphs_device.c **** 
  59:.././hal/sam3u1c/udphs_device.c **** #ifdef USB_DEVICE_LOW_SPEED
  60:.././hal/sam3u1c/udphs_device.c **** #  error The Low speed mode is not supported on this part, please remove USB_DEVICE_LOW_SPEED in co
  61:.././hal/sam3u1c/udphs_device.c **** #endif
  62:.././hal/sam3u1c/udphs_device.c **** 
  63:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_USB_INT_FUN
  64:.././hal/sam3u1c/udphs_device.c **** #  define UDD_USB_INT_FUN UDPHS_Handler
  65:.././hal/sam3u1c/udphs_device.c **** #endif
  66:.././hal/sam3u1c/udphs_device.c **** 
  67:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_USB_INT_LEVEL
  68:.././hal/sam3u1c/udphs_device.c **** #  define UDD_USB_INT_LEVEL 5 // By default USB interrupt have low priority
  69:.././hal/sam3u1c/udphs_device.c **** #endif
  70:.././hal/sam3u1c/udphs_device.c **** 
  71:.././hal/sam3u1c/udphs_device.c **** #ifndef UDC_VBUS_EVENT
  72:.././hal/sam3u1c/udphs_device.c **** #  define UDC_VBUS_EVENT(present)
  73:.././hal/sam3u1c/udphs_device.c **** #endif
  74:.././hal/sam3u1c/udphs_device.c **** 
  75:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_USED(ep)      (USB_DEVICE_MAX_EP >= ep)
  76:.././hal/sam3u1c/udphs_device.c **** 
  77:.././hal/sam3u1c/udphs_device.c **** // for debug text
  78:.././hal/sam3u1c/udphs_device.c **** //#define dbg_print printf
  79:.././hal/sam3u1c/udphs_device.c **** #define dbg_print(...)
  80:.././hal/sam3u1c/udphs_device.c **** 
  81:.././hal/sam3u1c/udphs_device.c **** /**
  82:.././hal/sam3u1c/udphs_device.c ****  * \ingroup udd_group
  83:.././hal/sam3u1c/udphs_device.c ****  * \defgroup udd_udphs_group USB Device High-Speed Port (UDPHS)
  84:.././hal/sam3u1c/udphs_device.c ****  *
  85:.././hal/sam3u1c/udphs_device.c ****  * \section UDPHS_CONF UDPHS Custom configuration
  86:.././hal/sam3u1c/udphs_device.c ****  * The following UDPHS driver configuration must be included in the conf_usb.h
  87:.././hal/sam3u1c/udphs_device.c ****  * file of the application.
  88:.././hal/sam3u1c/udphs_device.c ****  *
  89:.././hal/sam3u1c/udphs_device.c ****  * UDD_USB_INT_LEVEL<br>
  90:.././hal/sam3u1c/udphs_device.c ****  * Option to change the interrupt priority (0 to 15) by default 5 (recommended).
  91:.././hal/sam3u1c/udphs_device.c ****  *
  92:.././hal/sam3u1c/udphs_device.c ****  * UDD_USB_INT_FUN<br>
  93:.././hal/sam3u1c/udphs_device.c ****  * Option to fit interrupt function to what defined in exception table.
  94:.././hal/sam3u1c/udphs_device.c ****  *
  95:.././hal/sam3u1c/udphs_device.c ****  * UDD_ISOCHRONOUS_NB_BANK(ep)<br>
  96:.././hal/sam3u1c/udphs_device.c ****  * Feature to reduce or increase isochronous endpoints buffering (1 to 3).
  97:.././hal/sam3u1c/udphs_device.c ****  * Default value 2.
  98:.././hal/sam3u1c/udphs_device.c ****  *
  99:.././hal/sam3u1c/udphs_device.c ****  * UDD_BULK_NB_BANK(ep)<br>
 100:.././hal/sam3u1c/udphs_device.c ****  * Feature to reduce or increase bulk endpoints buffering (1 to 2).
 101:.././hal/sam3u1c/udphs_device.c ****  * Default value 2.
 102:.././hal/sam3u1c/udphs_device.c ****  *
 103:.././hal/sam3u1c/udphs_device.c ****  * UDD_INTERRUPT_NB_BANK(ep)<br>
 104:.././hal/sam3u1c/udphs_device.c ****  * Feature to reduce or increase interrupt endpoints buffering (1 to 2).
 105:.././hal/sam3u1c/udphs_device.c ****  * Default value 1.
 106:.././hal/sam3u1c/udphs_device.c ****  *
 107:.././hal/sam3u1c/udphs_device.c ****  * \section Callbacks management
 108:.././hal/sam3u1c/udphs_device.c ****  * The USB driver is fully managed by interrupt and does not request periodic
 109:.././hal/sam3u1c/udphs_device.c ****  * task. Thereby, the USB events use callbacks to transfer the information.
 110:.././hal/sam3u1c/udphs_device.c ****  * The callbacks are declared in static during compilation or in variable during
 111:.././hal/sam3u1c/udphs_device.c ****  * code execution.
 112:.././hal/sam3u1c/udphs_device.c ****  *
 113:.././hal/sam3u1c/udphs_device.c ****  * Static declarations defined in conf_usb.h:
 114:.././hal/sam3u1c/udphs_device.c ****  * - UDC_VBUS_EVENT(bool b_present)<br>
 115:.././hal/sam3u1c/udphs_device.c ****  *   To signal Vbus level change
 116:.././hal/sam3u1c/udphs_device.c ****  * - UDC_SUSPEND_EVENT()<br>
 117:.././hal/sam3u1c/udphs_device.c ****  *   Called when USB bus enter in suspend mode
 118:.././hal/sam3u1c/udphs_device.c ****  * - UDC_RESUME_EVENT()<br>
 119:.././hal/sam3u1c/udphs_device.c ****  *   Called when USB bus is wakeup
 120:.././hal/sam3u1c/udphs_device.c ****  * - UDC_SOF_EVENT()<br>
 121:.././hal/sam3u1c/udphs_device.c ****  *   Called for each received SOF, Note: Each 1ms in HS/FS mode only.
 122:.././hal/sam3u1c/udphs_device.c ****  *
 123:.././hal/sam3u1c/udphs_device.c ****  * Dynamic callbacks, called "endpoint job" , are registered
 124:.././hal/sam3u1c/udphs_device.c ****  * in udd_ep_job_t structure via the following functions:
 125:.././hal/sam3u1c/udphs_device.c ****  * - udd_ep_run()<br>
 126:.././hal/sam3u1c/udphs_device.c ****  *   To call it when a transfer is finish
 127:.././hal/sam3u1c/udphs_device.c ****  * - udd_ep_wait_stall_clear()<br>
 128:.././hal/sam3u1c/udphs_device.c ****  *   To call it when a endpoint halt is disabled
 129:.././hal/sam3u1c/udphs_device.c ****  *
 130:.././hal/sam3u1c/udphs_device.c ****  * \section Power mode management
 131:.././hal/sam3u1c/udphs_device.c ****  * The Sleep modes authorized :
 132:.././hal/sam3u1c/udphs_device.c ****  * - in USB IDLE state, the UDPHS needs of USB clock and authorizes up to sleep mode WFI.
 133:.././hal/sam3u1c/udphs_device.c ****  * - in USB SUSPEND state, the UDPHS no needs USB clock and authorizes up to sleep mode WAIT.
 134:.././hal/sam3u1c/udphs_device.c ****  * @{
 135:.././hal/sam3u1c/udphs_device.c ****  */
 136:.././hal/sam3u1c/udphs_device.c **** 
 137:.././hal/sam3u1c/udphs_device.c **** // Check USB Device configuration
 138:.././hal/sam3u1c/udphs_device.c **** #ifndef USB_DEVICE_EP_CTRL_SIZE
 139:.././hal/sam3u1c/udphs_device.c **** #  error USB_DEVICE_EP_CTRL_SIZE not defined
 140:.././hal/sam3u1c/udphs_device.c **** #endif
 141:.././hal/sam3u1c/udphs_device.c **** #ifndef USB_DEVICE_MAX_EP
 142:.././hal/sam3u1c/udphs_device.c **** #  error USB_DEVICE_MAX_EP not defined
 143:.././hal/sam3u1c/udphs_device.c **** #endif
 144:.././hal/sam3u1c/udphs_device.c **** #if USB_DEVICE_MAX_EP > (UDD_MAX_PEP_NB-1) // USB_DEVICE_MAX_EP does not include control endpoint
 145:.././hal/sam3u1c/udphs_device.c **** #  error USB_DEVICE_MAX_EP is too high and not supported by this part
 146:.././hal/sam3u1c/udphs_device.c **** #endif
 147:.././hal/sam3u1c/udphs_device.c **** 
 148:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_ISO_NBANK_ERROR(ep)            \
 149:.././hal/sam3u1c/udphs_device.c **** 	( (UDD_ISOCHRONOUS_NB_BANK(ep) < 1)   \
 150:.././hal/sam3u1c/udphs_device.c **** 		|| (UDD_ISOCHRONOUS_NB_BANK(ep) > 3) )
 151:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_BULK_NBANK_ERROR(ep)           \
 152:.././hal/sam3u1c/udphs_device.c **** 	( (UDD_BULK_NB_BANK(ep) < 1) || (UDD_BULK_NB_BANK(ep) > 2) )
 153:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_INT_NBANK_ERROR(ep)            \
 154:.././hal/sam3u1c/udphs_device.c **** 	( (UDD_INTERRUPT_NB_BANK(ep) < 1) || (UDD_INTERRUPT_NB_BANK(ep) > 2) )
 155:.././hal/sam3u1c/udphs_device.c **** 
 156:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_ISO_NB_BANK_ERROR(ep)          \
 157:.././hal/sam3u1c/udphs_device.c **** 	(UDD_EP_USED(ep) && UDD_EP_ISO_NBANK_ERROR(ep))
 158:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_BULK_NB_BANK_ERROR(ep)         \
 159:.././hal/sam3u1c/udphs_device.c **** 	(UDD_EP_USED(ep) && UDD_EP_ISO_NBANK_ERROR(ep))
 160:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_INT_NB_BANK_ERROR(ep)          \
 161:.././hal/sam3u1c/udphs_device.c **** 	(UDD_EP_USED(ep) && UDD_EP_ISO_NBANK_ERROR(ep))
 162:.././hal/sam3u1c/udphs_device.c **** 
 163:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_NB_BANK_ERROR(ep, type)        \
 164:.././hal/sam3u1c/udphs_device.c **** 	(ATPASTE3(UDD_EP_, type, _NB_BANK_ERROR(ep)))
 165:.././hal/sam3u1c/udphs_device.c **** 
 166:.././hal/sam3u1c/udphs_device.c **** #define UDD_ISO_NB_BANK_ERROR \
 167:.././hal/sam3u1c/udphs_device.c **** 	(          UDD_EP_NB_BANK_ERROR( 1, ISO) \
 168:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 2, ISO) \
 169:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 3, ISO) \
 170:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 4, ISO) \
 171:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 5, ISO) \
 172:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 6, ISO) \
 173:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 7, ISO) \
 174:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 8, ISO) \
 175:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 9, ISO) \
 176:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(10, ISO) \
 177:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(11, ISO) \
 178:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(12, ISO) \
 179:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(13, ISO) \
 180:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(14, ISO) \
 181:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(15, ISO) )
 182:.././hal/sam3u1c/udphs_device.c **** #define UDD_BULK_NB_BANK_ERROR \
 183:.././hal/sam3u1c/udphs_device.c **** 	(          UDD_EP_NB_BANK_ERROR( 1, BULK) \
 184:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 2, BULK) \
 185:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 3, BULK) \
 186:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 4, BULK) \
 187:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 5, BULK) \
 188:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 6, BULK) \
 189:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 7, BULK) \
 190:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 8, BULK) \
 191:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 9, BULK) \
 192:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(10, BULK) \
 193:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(11, BULK) \
 194:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(12, BULK) \
 195:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(13, BULK) \
 196:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(14, BULK) \
 197:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(15, BULK) )
 198:.././hal/sam3u1c/udphs_device.c **** #define UDD_INTERRUPT_NB_BANK_ERROR \
 199:.././hal/sam3u1c/udphs_device.c **** 	(          UDD_EP_NB_BANK_ERROR( 1, INT) \
 200:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 2, INT) \
 201:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 3, INT) \
 202:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 4, INT) \
 203:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 5, INT) \
 204:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 6, INT) \
 205:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 7, INT) \
 206:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 8, INT) \
 207:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 9, INT) \
 208:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(10, INT) \
 209:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(11, INT) \
 210:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(12, INT) \
 211:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(13, INT) \
 212:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(14, INT) \
 213:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(15, INT) )
 214:.././hal/sam3u1c/udphs_device.c **** 
 215:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_ISOCHRONOUS_NB_BANK
 216:.././hal/sam3u1c/udphs_device.c **** # define UDD_ISOCHRONOUS_NB_BANK(ep) 2
 217:.././hal/sam3u1c/udphs_device.c **** #else
 218:.././hal/sam3u1c/udphs_device.c **** # if UDD_ISO_NB_BANK_ERROR
 219:.././hal/sam3u1c/udphs_device.c **** #  error UDD_ISOCHRONOUS_NB_BANK(ep) must be define within 1 to 3.
 220:.././hal/sam3u1c/udphs_device.c **** # endif
 221:.././hal/sam3u1c/udphs_device.c **** #endif
 222:.././hal/sam3u1c/udphs_device.c **** 
 223:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_BULK_NB_BANK
 224:.././hal/sam3u1c/udphs_device.c **** # define UDD_BULK_NB_BANK(ep) 2
 225:.././hal/sam3u1c/udphs_device.c **** #else
 226:.././hal/sam3u1c/udphs_device.c **** # if UDD_BULK_NB_BANK_ERROR
 227:.././hal/sam3u1c/udphs_device.c **** #  error UDD_BULK_NB_BANK must be define with 1 or 2.
 228:.././hal/sam3u1c/udphs_device.c **** # endif
 229:.././hal/sam3u1c/udphs_device.c **** #endif
 230:.././hal/sam3u1c/udphs_device.c **** 
 231:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_INTERRUPT_NB_BANK
 232:.././hal/sam3u1c/udphs_device.c **** # define UDD_INTERRUPT_NB_BANK(ep) 1
 233:.././hal/sam3u1c/udphs_device.c **** #else
 234:.././hal/sam3u1c/udphs_device.c **** # if UDD_INTERRUPT_NB_BANK_ERROR
 235:.././hal/sam3u1c/udphs_device.c **** #  error UDD_INTERRUPT_NB_BANK must be define with 1 or 2.
 236:.././hal/sam3u1c/udphs_device.c **** # endif
 237:.././hal/sam3u1c/udphs_device.c **** #endif
 238:.././hal/sam3u1c/udphs_device.c **** 
 239:.././hal/sam3u1c/udphs_device.c **** 
 240:.././hal/sam3u1c/udphs_device.c **** /**
 241:.././hal/sam3u1c/udphs_device.c ****  * \name Power management routine.
 242:.././hal/sam3u1c/udphs_device.c ****  */
 243:.././hal/sam3u1c/udphs_device.c **** //@{
 244:.././hal/sam3u1c/udphs_device.c **** 
 245:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_NO_SLEEP_MGR
 246:.././hal/sam3u1c/udphs_device.c **** 
 247:.././hal/sam3u1c/udphs_device.c **** //! Definition of sleep levels
 248:.././hal/sam3u1c/udphs_device.c **** #define UDPHS_SLEEP_MODE_USB_SUSPEND  SLEEPMGR_WAIT_FAST
 249:.././hal/sam3u1c/udphs_device.c **** #define UDPHS_SLEEP_MODE_USB_IDLE     SLEEPMGR_SLEEP_WFI
 250:.././hal/sam3u1c/udphs_device.c **** 
 251:.././hal/sam3u1c/udphs_device.c **** //! State of USB line
 252:.././hal/sam3u1c/udphs_device.c **** static bool udd_b_idle;
 253:.././hal/sam3u1c/udphs_device.c **** 
 254:.././hal/sam3u1c/udphs_device.c **** 
 255:.././hal/sam3u1c/udphs_device.c **** /*! \brief Authorize or not the CPU powerdown mode
 256:.././hal/sam3u1c/udphs_device.c ****  *
 257:.././hal/sam3u1c/udphs_device.c ****  * \param b_enable   true to authorize idle mode
 258:.././hal/sam3u1c/udphs_device.c ****  */
 259:.././hal/sam3u1c/udphs_device.c **** static void udd_sleep_mode(bool b_idle)
 260:.././hal/sam3u1c/udphs_device.c **** {
 526              	 .loc 6 260 0
 527              	 .cfi_startproc
 528              	 
 529              	 
 530 0000 80B5     	 push {r7,lr}
 531              	.LCFI39:
 532              	 .cfi_def_cfa_offset 8
 533              	 .cfi_offset 7,-8
 534              	 .cfi_offset 14,-4
 535 0002 82B0     	 sub sp,sp,#8
 536              	.LCFI40:
 537              	 .cfi_def_cfa_offset 16
 538 0004 00AF     	 add r7,sp,#0
 539              	.LCFI41:
 540              	 .cfi_def_cfa_register 7
 541 0006 0346     	 mov r3,r0
 542 0008 FB71     	 strb r3,[r7,#7]
 261:.././hal/sam3u1c/udphs_device.c **** 	if (!b_idle && udd_b_idle) {
 543              	 .loc 6 261 0
 544 000a FB79     	 ldrb r3,[r7,#7]
 545 000c 83F00103 	 eor r3,r3,#1
 546 0010 DBB2     	 uxtb r3,r3
 547 0012 002B     	 cmp r3,#0
 548 0014 06D0     	 beq .L29
 549              	 .loc 6 261 0 is_stmt 0 discriminator 1
 550 0016 0D4B     	 ldr r3,.L31
 551 0018 1B78     	 ldrb r3,[r3]
 552 001a 002B     	 cmp r3,#0
 553 001c 02D0     	 beq .L29
 262:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("_S ");
 263:.././hal/sam3u1c/udphs_device.c **** 		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
 554              	 .loc 6 263 0 is_stmt 1
 555 001e 0220     	 movs r0,#2
 556 0020 0B4B     	 ldr r3,.L31+4
 557 0022 9847     	 blx r3
 558              	.LVL5:
 559              	.L29:
 264:.././hal/sam3u1c/udphs_device.c **** 	}
 265:.././hal/sam3u1c/udphs_device.c **** 	if (b_idle && !udd_b_idle) {
 560              	 .loc 6 265 0
 561 0024 FB79     	 ldrb r3,[r7,#7]
 562 0026 002B     	 cmp r3,#0
 563 0028 09D0     	 beq .L30
 564              	 .loc 6 265 0 is_stmt 0 discriminator 1
 565 002a 084B     	 ldr r3,.L31
 566 002c 1B78     	 ldrb r3,[r3]
 567 002e 83F00103 	 eor r3,r3,#1
 568 0032 DBB2     	 uxtb r3,r3
 569 0034 002B     	 cmp r3,#0
 570 0036 02D0     	 beq .L30
 266:.././hal/sam3u1c/udphs_device.c **** 		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
 571              	 .loc 6 266 0 is_stmt 1
 572 0038 0220     	 movs r0,#2
 573 003a 064B     	 ldr r3,.L31+8
 574 003c 9847     	 blx r3
 575              	.LVL6:
 576              	.L30:
 267:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("_W ");
 268:.././hal/sam3u1c/udphs_device.c **** 	}
 269:.././hal/sam3u1c/udphs_device.c **** 	udd_b_idle = b_idle;
 577              	 .loc 6 269 0
 578 003e 034A     	 ldr r2,.L31
 579 0040 FB79     	 ldrb r3,[r7,#7]
 580 0042 1370     	 strb r3,[r2]
 270:.././hal/sam3u1c/udphs_device.c **** }
 581              	 .loc 6 270 0
 582 0044 00BF     	 nop
 583 0046 0837     	 adds r7,r7,#8
 584              	.LCFI42:
 585              	 .cfi_def_cfa_offset 8
 586 0048 BD46     	 mov sp,r7
 587              	.LCFI43:
 588              	 .cfi_def_cfa_register 13
 589              	 
 590 004a 80BD     	 pop {r7,pc}
 591              	.L32:
 592              	 .align 2
 593              	.L31:
 594 004c 00000000 	 .word udd_b_idle
 595 0050 00000000 	 .word sleepmgr_unlock_mode
 596 0054 00000000 	 .word sleepmgr_lock_mode
 597              	 .cfi_endproc
 598              	.LFE138:
 600              	 .comm udd_g_ctrlreq,24,4
 601              	 .section .bss.udd_ep_control_state,"aw",%nobits
 604              	udd_ep_control_state:
 605 0000 00       	 .space 1
 606              	 .section .bss.udd_ctrl_prev_payload_buf_cnt,"aw",%nobits
 607              	 .align 1
 610              	udd_ctrl_prev_payload_buf_cnt:
 611 0000 0000     	 .space 2
 612              	 .section .bss.udd_ctrl_payload_buf_cnt,"aw",%nobits
 613              	 .align 1
 616              	udd_ctrl_payload_buf_cnt:
 617 0000 0000     	 .space 2
 618              	 .section .bss.udd_ep_job,"aw",%nobits
 619              	 .align 2
 622              	udd_ep_job:
 623 0000 00000000 	 .space 48
 623      00000000 
 623      00000000 
 623      00000000 
 623      00000000 
 624              	 .section .text.UDPHS_Handler,"ax",%progbits
 625              	 .align 1
 626              	 .global UDPHS_Handler
 627              	 .syntax unified
 628              	 .thumb
 629              	 .thumb_func
 630              	 .fpu softvfp
 632              	UDPHS_Handler:
 633              	.LFB139:
 271:.././hal/sam3u1c/udphs_device.c **** #else
 272:.././hal/sam3u1c/udphs_device.c **** 
 273:.././hal/sam3u1c/udphs_device.c **** static void udd_sleep_mode(bool b_idle)
 274:.././hal/sam3u1c/udphs_device.c **** {
 275:.././hal/sam3u1c/udphs_device.c **** 	UNUSED(b_idle);
 276:.././hal/sam3u1c/udphs_device.c **** }
 277:.././hal/sam3u1c/udphs_device.c **** 
 278:.././hal/sam3u1c/udphs_device.c **** #endif // UDD_NO_SLEEP_MGR
 279:.././hal/sam3u1c/udphs_device.c **** 
 280:.././hal/sam3u1c/udphs_device.c **** //@}
 281:.././hal/sam3u1c/udphs_device.c **** 
 282:.././hal/sam3u1c/udphs_device.c **** /**
 283:.././hal/sam3u1c/udphs_device.c ****  * \name VBus monitor routine
 284:.././hal/sam3u1c/udphs_device.c ****  */
 285:.././hal/sam3u1c/udphs_device.c **** //@{
 286:.././hal/sam3u1c/udphs_device.c **** 
 287:.././hal/sam3u1c/udphs_device.c **** #if UDD_VBUS_IO
 288:.././hal/sam3u1c/udphs_device.c **** 
 289:.././hal/sam3u1c/udphs_device.c **** # if !defined(UDD_NO_SLEEP_MGR) && !defined(USB_VBUS_WKUP)
 290:.././hal/sam3u1c/udphs_device.c **** /* Lock to SLEEPMGR_SLEEP_WFI if VBus not connected */
 291:.././hal/sam3u1c/udphs_device.c **** static bool b_vbus_sleep_lock = false;
 292:.././hal/sam3u1c/udphs_device.c **** /**
 293:.././hal/sam3u1c/udphs_device.c ****  * Lock sleep mode for VBus PIO pin change detection
 294:.././hal/sam3u1c/udphs_device.c ****  */
 295:.././hal/sam3u1c/udphs_device.c **** static void udd_vbus_monitor_sleep_mode(bool b_lock)
 296:.././hal/sam3u1c/udphs_device.c **** {
 297:.././hal/sam3u1c/udphs_device.c **** 	if (b_lock && !b_vbus_sleep_lock) {
 298:.././hal/sam3u1c/udphs_device.c **** 		b_vbus_sleep_lock = true;
 299:.././hal/sam3u1c/udphs_device.c **** 		sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
 300:.././hal/sam3u1c/udphs_device.c **** 	}
 301:.././hal/sam3u1c/udphs_device.c **** 	if (!b_lock && b_vbus_sleep_lock) {
 302:.././hal/sam3u1c/udphs_device.c **** 		b_vbus_sleep_lock = false;
 303:.././hal/sam3u1c/udphs_device.c **** 		sleepmgr_unlock_mode(SLEEPMGR_SLEEP_WFI);
 304:.././hal/sam3u1c/udphs_device.c **** 	}
 305:.././hal/sam3u1c/udphs_device.c **** }
 306:.././hal/sam3u1c/udphs_device.c **** # else
 307:.././hal/sam3u1c/udphs_device.c **** #  define udd_vbus_monitor_sleep_mode(lock)
 308:.././hal/sam3u1c/udphs_device.c **** # endif
 309:.././hal/sam3u1c/udphs_device.c **** 
 310:.././hal/sam3u1c/udphs_device.c **** /**
 311:.././hal/sam3u1c/udphs_device.c ****  * USB VBus pin change handler
 312:.././hal/sam3u1c/udphs_device.c ****  */
 313:.././hal/sam3u1c/udphs_device.c **** static void udd_vbus_handler(uint32_t id, uint32_t mask)
 314:.././hal/sam3u1c/udphs_device.c **** {
 315:.././hal/sam3u1c/udphs_device.c **** 	if (USB_VBUS_PIO_ID != id || USB_VBUS_PIO_MASK != mask) {
 316:.././hal/sam3u1c/udphs_device.c **** 		return;
 317:.././hal/sam3u1c/udphs_device.c **** 	}
 318:.././hal/sam3u1c/udphs_device.c **** 	/* PIO interrupt status has been cleared, just detect level */
 319:.././hal/sam3u1c/udphs_device.c **** 	bool b_vbus_high = Is_udd_vbus_high();
 320:.././hal/sam3u1c/udphs_device.c **** 	if (b_vbus_high) {
 321:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_vbus_interrupt(true);
 322:.././hal/sam3u1c/udphs_device.c **** 		udd_vbus_monitor_sleep_mode(false);
 323:.././hal/sam3u1c/udphs_device.c **** 		udd_attach();
 324:.././hal/sam3u1c/udphs_device.c **** 	} else {
 325:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_vbus_interrupt(false);
 326:.././hal/sam3u1c/udphs_device.c **** 		udd_vbus_monitor_sleep_mode(true);
 327:.././hal/sam3u1c/udphs_device.c **** 		udd_detach();
 328:.././hal/sam3u1c/udphs_device.c **** 	}
 329:.././hal/sam3u1c/udphs_device.c **** 	UDC_VBUS_EVENT(b_vbus_high);
 330:.././hal/sam3u1c/udphs_device.c **** }
 331:.././hal/sam3u1c/udphs_device.c **** 
 332:.././hal/sam3u1c/udphs_device.c **** #endif
 333:.././hal/sam3u1c/udphs_device.c **** 
 334:.././hal/sam3u1c/udphs_device.c **** //@}
 335:.././hal/sam3u1c/udphs_device.c **** 
 336:.././hal/sam3u1c/udphs_device.c **** /**
 337:.././hal/sam3u1c/udphs_device.c ****  * \name Control endpoint low level management routine.
 338:.././hal/sam3u1c/udphs_device.c ****  *
 339:.././hal/sam3u1c/udphs_device.c ****  * This function performs control endpoint management.
 340:.././hal/sam3u1c/udphs_device.c ****  * It handle the SETUP/DATA/HANDSHAKE phases of a control transaction.
 341:.././hal/sam3u1c/udphs_device.c ****  */
 342:.././hal/sam3u1c/udphs_device.c **** //@{
 343:.././hal/sam3u1c/udphs_device.c **** 
 344:.././hal/sam3u1c/udphs_device.c **** //! Global variable to give and record information about setup request management
 345:.././hal/sam3u1c/udphs_device.c **** COMPILER_WORD_ALIGNED udd_ctrl_request_t udd_g_ctrlreq;
 346:.././hal/sam3u1c/udphs_device.c **** 
 347:.././hal/sam3u1c/udphs_device.c **** //! Bit definitions about endpoint control state machine for udd_ep_control_state
 348:.././hal/sam3u1c/udphs_device.c **** typedef enum {
 349:.././hal/sam3u1c/udphs_device.c **** 	UDD_EPCTRL_SETUP                  = 0, //!< Wait a SETUP packet
 350:.././hal/sam3u1c/udphs_device.c **** 	UDD_EPCTRL_DATA_OUT               = 1, //!< Wait a OUT data packet
 351:.././hal/sam3u1c/udphs_device.c **** 	UDD_EPCTRL_DATA_IN                = 2, //!< Wait a IN data packet
 352:.././hal/sam3u1c/udphs_device.c **** 	UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP  = 3, //!< Wait a IN ZLP packet
 353:.././hal/sam3u1c/udphs_device.c **** 	UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP = 4, //!< Wait a OUT ZLP packet
 354:.././hal/sam3u1c/udphs_device.c **** 	UDD_EPCTRL_STALL_REQ              = 5, //!< STALL enabled on IN & OUT packet
 355:.././hal/sam3u1c/udphs_device.c **** } udd_ctrl_ep_state_t;
 356:.././hal/sam3u1c/udphs_device.c **** 
 357:.././hal/sam3u1c/udphs_device.c **** //! State of the endpoint control management
 358:.././hal/sam3u1c/udphs_device.c **** static udd_ctrl_ep_state_t udd_ep_control_state;
 359:.././hal/sam3u1c/udphs_device.c **** 
 360:.././hal/sam3u1c/udphs_device.c **** //! Total number of data received/sent during data packet phase with previous payload buffers
 361:.././hal/sam3u1c/udphs_device.c **** static uint16_t udd_ctrl_prev_payload_buf_cnt;
 362:.././hal/sam3u1c/udphs_device.c **** 
 363:.././hal/sam3u1c/udphs_device.c **** //! Number of data received/sent to/from udd_g_ctrlreq.payload buffer
 364:.././hal/sam3u1c/udphs_device.c **** static uint16_t udd_ctrl_payload_buf_cnt;
 365:.././hal/sam3u1c/udphs_device.c **** 
 366:.././hal/sam3u1c/udphs_device.c **** /**
 367:.././hal/sam3u1c/udphs_device.c ****  * \brief Reset control endpoint
 368:.././hal/sam3u1c/udphs_device.c ****  *
 369:.././hal/sam3u1c/udphs_device.c ****  * Called after a USB line reset or when UDD is enabled
 370:.././hal/sam3u1c/udphs_device.c ****  */
 371:.././hal/sam3u1c/udphs_device.c **** static void udd_reset_ep_ctrl(void);
 372:.././hal/sam3u1c/udphs_device.c **** 
 373:.././hal/sam3u1c/udphs_device.c **** /**
 374:.././hal/sam3u1c/udphs_device.c ****  * \brief Reset control endpoint management
 375:.././hal/sam3u1c/udphs_device.c ****  *
 376:.././hal/sam3u1c/udphs_device.c ****  * Called after a USB line reset or at the end of SETUP request (after ZLP)
 377:.././hal/sam3u1c/udphs_device.c ****  */
 378:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_init(void);
 379:.././hal/sam3u1c/udphs_device.c **** 
 380:.././hal/sam3u1c/udphs_device.c **** //! \brief Managed reception of SETUP packet on control endpoint
 381:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_setup_received(void);
 382:.././hal/sam3u1c/udphs_device.c **** 
 383:.././hal/sam3u1c/udphs_device.c **** //! \brief Managed reception of IN packet on control endpoint
 384:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_in_sent(void);
 385:.././hal/sam3u1c/udphs_device.c **** 
 386:.././hal/sam3u1c/udphs_device.c **** //! \brief Managed reception of OUT packet on control endpoint
 387:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_out_received(void);
 388:.././hal/sam3u1c/udphs_device.c **** 
 389:.././hal/sam3u1c/udphs_device.c **** //! \brief Managed underflow event of IN packet on control endpoint
 390:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_underflow(void);
 391:.././hal/sam3u1c/udphs_device.c **** 
 392:.././hal/sam3u1c/udphs_device.c **** //! \brief Managed overflow event of OUT packet on control endpoint
 393:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_overflow(void);
 394:.././hal/sam3u1c/udphs_device.c **** 
 395:.././hal/sam3u1c/udphs_device.c **** //! \brief Managed stall event of IN/OUT packet on control endpoint
 396:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_stall_data(void);
 397:.././hal/sam3u1c/udphs_device.c **** 
 398:.././hal/sam3u1c/udphs_device.c **** //! \brief Send a ZLP IN on control endpoint
 399:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_send_zlp_in(void);
 400:.././hal/sam3u1c/udphs_device.c **** 
 401:.././hal/sam3u1c/udphs_device.c **** //! \brief Send a ZLP OUT on control endpoint
 402:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_send_zlp_out(void);
 403:.././hal/sam3u1c/udphs_device.c **** 
 404:.././hal/sam3u1c/udphs_device.c **** //! \brief Call callback associated to setup request
 405:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_endofrequest(void);
 406:.././hal/sam3u1c/udphs_device.c **** 
 407:.././hal/sam3u1c/udphs_device.c **** 
 408:.././hal/sam3u1c/udphs_device.c **** /**
 409:.././hal/sam3u1c/udphs_device.c ****  * \brief Main interrupt routine for control endpoint
 410:.././hal/sam3u1c/udphs_device.c ****  *
 411:.././hal/sam3u1c/udphs_device.c ****  * This switches control endpoint events to correct sub function.
 412:.././hal/sam3u1c/udphs_device.c ****  *
 413:.././hal/sam3u1c/udphs_device.c ****  * \return \c 1 if an event about control endpoint is occurred, otherwise \c 0.
 414:.././hal/sam3u1c/udphs_device.c ****  */
 415:.././hal/sam3u1c/udphs_device.c **** static bool udd_ctrl_interrupt(void);
 416:.././hal/sam3u1c/udphs_device.c **** 
 417:.././hal/sam3u1c/udphs_device.c **** //@}
 418:.././hal/sam3u1c/udphs_device.c **** 
 419:.././hal/sam3u1c/udphs_device.c **** 
 420:.././hal/sam3u1c/udphs_device.c **** /**
 421:.././hal/sam3u1c/udphs_device.c ****  * \name Management of bulk/interrupt/isochronous endpoints
 422:.././hal/sam3u1c/udphs_device.c ****  *
 423:.././hal/sam3u1c/udphs_device.c ****  * The UDD manages the data transfer on endpoints:
 424:.././hal/sam3u1c/udphs_device.c ****  * - Start data transfer on endpoint with USB Device DMA
 425:.././hal/sam3u1c/udphs_device.c ****  * - Send a ZLP packet if requested
 426:.././hal/sam3u1c/udphs_device.c ****  * - Call callback registered to signal end of transfer
 427:.././hal/sam3u1c/udphs_device.c ****  * The transfer abort and stall feature are supported.
 428:.././hal/sam3u1c/udphs_device.c ****  */
 429:.././hal/sam3u1c/udphs_device.c **** //@{
 430:.././hal/sam3u1c/udphs_device.c **** #if (0!=USB_DEVICE_MAX_EP)
 431:.././hal/sam3u1c/udphs_device.c **** 
 432:.././hal/sam3u1c/udphs_device.c **** //! Structure definition about job registered on an endpoint
 433:.././hal/sam3u1c/udphs_device.c **** typedef struct {
 434:.././hal/sam3u1c/udphs_device.c **** 	union {
 435:.././hal/sam3u1c/udphs_device.c **** 		//! Callback to call at the end of transfer
 436:.././hal/sam3u1c/udphs_device.c **** 		udd_callback_trans_t call_trans;
 437:.././hal/sam3u1c/udphs_device.c **** 
 438:.././hal/sam3u1c/udphs_device.c **** 		//! Callback to call when the endpoint halt is cleared
 439:.././hal/sam3u1c/udphs_device.c **** 		udd_callback_halt_cleared_t call_nohalt;
 440:.././hal/sam3u1c/udphs_device.c **** 	};
 441:.././hal/sam3u1c/udphs_device.c **** 	//! Buffer located in internal RAM to send or fill during job
 442:.././hal/sam3u1c/udphs_device.c **** 	uint8_t *buf;
 443:.././hal/sam3u1c/udphs_device.c **** 	//! Size of buffer to send or fill
 444:.././hal/sam3u1c/udphs_device.c **** 	iram_size_t buf_size;
 445:.././hal/sam3u1c/udphs_device.c **** 	//!< Size of data transfered
 446:.././hal/sam3u1c/udphs_device.c **** 	iram_size_t buf_cnt;
 447:.././hal/sam3u1c/udphs_device.c **** 	//!< Size of data prepared for DMA last time
 448:.././hal/sam3u1c/udphs_device.c **** 	iram_size_t buf_load;
 449:.././hal/sam3u1c/udphs_device.c **** 	//! A job is registered on this endpoint
 450:.././hal/sam3u1c/udphs_device.c **** 	uint8_t busy:1;
 451:.././hal/sam3u1c/udphs_device.c **** 	//! A short packet is requested for this job on endpoint IN
 452:.././hal/sam3u1c/udphs_device.c **** 	uint8_t b_shortpacket:1;
 453:.././hal/sam3u1c/udphs_device.c **** 	//! A stall has been requested but not executed
 454:.././hal/sam3u1c/udphs_device.c **** 	uint8_t stall_requested:1;
 455:.././hal/sam3u1c/udphs_device.c **** } udd_ep_job_t;
 456:.././hal/sam3u1c/udphs_device.c **** 
 457:.././hal/sam3u1c/udphs_device.c **** 
 458:.././hal/sam3u1c/udphs_device.c **** //! Array to register a job on bulk/interrupt/isochronous endpoint
 459:.././hal/sam3u1c/udphs_device.c **** static udd_ep_job_t udd_ep_job[USB_DEVICE_MAX_EP];
 460:.././hal/sam3u1c/udphs_device.c **** 
 461:.././hal/sam3u1c/udphs_device.c **** //! \brief Reset all job table
 462:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_job_table_reset(void);
 463:.././hal/sam3u1c/udphs_device.c **** 
 464:.././hal/sam3u1c/udphs_device.c **** //! \brief Abort all endpoint jobs on going
 465:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_job_table_kill(void);
 466:.././hal/sam3u1c/udphs_device.c **** 
 467:.././hal/sam3u1c/udphs_device.c **** /**
 468:.././hal/sam3u1c/udphs_device.c ****  * \brief Abort endpoint job on going
 469:.././hal/sam3u1c/udphs_device.c ****  *
 470:.././hal/sam3u1c/udphs_device.c ****  * \param ep         endpoint number of job to abort
 471:.././hal/sam3u1c/udphs_device.c ****  */
 472:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_abort_job(udd_ep_id_t ep);
 473:.././hal/sam3u1c/udphs_device.c **** 
 474:.././hal/sam3u1c/udphs_device.c **** /**
 475:.././hal/sam3u1c/udphs_device.c ****  * \brief Call the callback associated to the job which is finished
 476:.././hal/sam3u1c/udphs_device.c ****  *
 477:.././hal/sam3u1c/udphs_device.c ****  * \param ptr_job  job to complete
 478:.././hal/sam3u1c/udphs_device.c ****  * \param b_abort  if true then the job has been aborted
 479:.././hal/sam3u1c/udphs_device.c ****  */
 480:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num);
 481:.././hal/sam3u1c/udphs_device.c **** 
 482:.././hal/sam3u1c/udphs_device.c **** /**
 483:.././hal/sam3u1c/udphs_device.c ****  * \brief Start the next transfer if necessary or complete the job associated.
 484:.././hal/sam3u1c/udphs_device.c ****  *
 485:.././hal/sam3u1c/udphs_device.c ****  * \param ep         endpoint number without direction flag
 486:.././hal/sam3u1c/udphs_device.c ****  */
 487:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_trans_done(udd_ep_id_t ep);
 488:.././hal/sam3u1c/udphs_device.c **** 
 489:.././hal/sam3u1c/udphs_device.c **** /**
 490:.././hal/sam3u1c/udphs_device.c ****  * \brief Main interrupt routine for bulk/interrupt/isochronous endpoints
 491:.././hal/sam3u1c/udphs_device.c ****  *
 492:.././hal/sam3u1c/udphs_device.c ****  * This switches endpoint events to correct sub function.
 493:.././hal/sam3u1c/udphs_device.c ****  *
 494:.././hal/sam3u1c/udphs_device.c ****  * \return \c 1 if an event about bulk/interrupt/isochronous endpoints has occurred, otherwise \c 0
 495:.././hal/sam3u1c/udphs_device.c ****  */
 496:.././hal/sam3u1c/udphs_device.c **** static bool udd_ep_interrupt(void);
 497:.././hal/sam3u1c/udphs_device.c **** 
 498:.././hal/sam3u1c/udphs_device.c **** #endif // (0!=USB_DEVICE_MAX_EP)
 499:.././hal/sam3u1c/udphs_device.c **** //@}
 500:.././hal/sam3u1c/udphs_device.c **** 
 501:.././hal/sam3u1c/udphs_device.c **** 
 502:.././hal/sam3u1c/udphs_device.c **** //--------------------------------------------------------
 503:.././hal/sam3u1c/udphs_device.c **** //--- INTERNAL ROUTINES TO MANAGED GLOBAL EVENTS
 504:.././hal/sam3u1c/udphs_device.c **** /**
 505:.././hal/sam3u1c/udphs_device.c ****  * \internal
 506:.././hal/sam3u1c/udphs_device.c ****  * \brief Function called by UDPHS interrupt to manage USB Device interrupts
 507:.././hal/sam3u1c/udphs_device.c ****  *
 508:.././hal/sam3u1c/udphs_device.c ****  * USB Device interrupt events are split in three parts:
 509:.././hal/sam3u1c/udphs_device.c ****  * - USB line events (SOF, reset, suspend, resume, wakeup)
 510:.././hal/sam3u1c/udphs_device.c ****  * - control endpoint events (setup reception, end of data transfer, underflow, overflow, stall)
 511:.././hal/sam3u1c/udphs_device.c ****  * - bulk/interrupt/isochronous endpoints events (end of data transfer)
 512:.././hal/sam3u1c/udphs_device.c ****  *
 513:.././hal/sam3u1c/udphs_device.c ****  * Note:
 514:.././hal/sam3u1c/udphs_device.c ****  * Here, the global interrupt mask is not clear when an USB interrupt is enabled
 515:.././hal/sam3u1c/udphs_device.c ****  * because this one can not be occurred during the USB ISR (=during INTX is masked).
 516:.././hal/sam3u1c/udphs_device.c ****  * See Technical reference $3.8.3 Masking interrupt requests in peripheral modules.
 517:.././hal/sam3u1c/udphs_device.c ****  */
 518:.././hal/sam3u1c/udphs_device.c **** ISR(UDD_USB_INT_FUN)
 519:.././hal/sam3u1c/udphs_device.c **** {
 634              	 .loc 6 519 0
 635              	 .cfi_startproc
 636              	 
 637              	 
 638 0000 80B5     	 push {r7,lr}
 639              	.LCFI44:
 640              	 .cfi_def_cfa_offset 8
 641              	 .cfi_offset 7,-8
 642              	 .cfi_offset 14,-4
 643 0002 00AF     	 add r7,sp,#0
 644              	.LCFI45:
 645              	 .cfi_def_cfa_register 7
 520:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_periph_ck();
 646              	 .loc 6 520 0
 647 0004 1D20     	 movs r0,#29
 648 0006 5F4B     	 ldr r3,.L48
 649 0008 9847     	 blx r3
 650              	.LVL7:
 521:.././hal/sam3u1c/udphs_device.c **** 
 522:.././hal/sam3u1c/udphs_device.c **** 	/* For fast wakeup clocks restore
 523:.././hal/sam3u1c/udphs_device.c **** 	 * In WAIT mode, clocks are switched to FASTRC.
 524:.././hal/sam3u1c/udphs_device.c **** 	 * After wakeup clocks should be restored, before that ISR should not
 525:.././hal/sam3u1c/udphs_device.c **** 	 * be served.
 526:.././hal/sam3u1c/udphs_device.c **** 	 */
 527:.././hal/sam3u1c/udphs_device.c **** 	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
 651              	 .loc 6 527 0
 652 000a 5F4B     	 ldr r3,.L48+4
 653 000c 9847     	 blx r3
 654              	.LVL8:
 655 000e 0346     	 mov r3,r0
 656 0010 83F00103 	 eor r3,r3,#1
 657 0014 DBB2     	 uxtb r3,r3
 658 0016 002B     	 cmp r3,#0
 659 0018 0CD0     	 beq .L34
 660              	 .loc 6 527 0 is_stmt 0 discriminator 1
 661 001a 5C4B     	 ldr r3,.L48+8
 662 001c 5B69     	 ldr r3,[r3,#20]
 663 001e 03F00203 	 and r3,r3,#2
 664 0022 002B     	 cmp r3,#0
 665 0024 06D1     	 bne .L34
 666              	.LBB26:
 667              	.LBB27:
 328:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 668              	 .loc 3 328 0 is_stmt 1
 669              	 .syntax unified
 670              	
 671 0026 72B6     	 cpsid i
 672              	
 673              	 .thumb
 674              	 .syntax unified
 675              	.LBE27:
 676              	.LBE26:
 677              	.LBB28:
 678              	.LBB29:
 679              	 .loc 4 354 0
 680              	 .syntax unified
 681              	
 682 0028 BFF35F8F 	 dmb
 683              	
 684              	 .thumb
 685              	 .syntax unified
 686              	.LBE29:
 687              	.LBE28:
 528:.././hal/sam3u1c/udphs_device.c **** 		cpu_irq_disable();
 688              	 .loc 6 528 0
 689 002c 584B     	 ldr r3,.L48+12
 690 002e 0022     	 movs r2,#0
 691 0030 1A70     	 strb r2,[r3]
 529:.././hal/sam3u1c/udphs_device.c **** 		return;
 692              	 .loc 6 529 0
 693 0032 A5E0     	 b .L33
 694              	.L34:
 530:.././hal/sam3u1c/udphs_device.c **** 	}
 531:.././hal/sam3u1c/udphs_device.c **** 
 532:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_sof()) {
 695              	 .loc 6 532 0
 696 0034 554B     	 ldr r3,.L48+8
 697 0036 5B69     	 ldr r3,[r3,#20]
 698 0038 03F00803 	 and r3,r3,#8
 699 003c 002B     	 cmp r3,#0
 700 003e 0DD0     	 beq .L36
 533:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_sof();
 701              	 .loc 6 533 0
 702 0040 524B     	 ldr r3,.L48+8
 703 0042 0822     	 movs r2,#8
 704 0044 9A61     	 str r2,[r3,#24]
 534:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_full_speed_mode()) {
 705              	 .loc 6 534 0
 706 0046 514B     	 ldr r3,.L48+8
 707 0048 5B69     	 ldr r3,[r3,#20]
 708 004a 03F00103 	 and r3,r3,#1
 709 004e 002B     	 cmp r3,#0
 710 0050 01D1     	 bne .L37
 535:.././hal/sam3u1c/udphs_device.c **** 			udc_sof_notify();
 711              	 .loc 6 535 0
 712 0052 504B     	 ldr r3,.L48+16
 713 0054 9847     	 blx r3
 714              	.LVL9:
 715              	.L37:
 536:.././hal/sam3u1c/udphs_device.c **** 		}
 537:.././hal/sam3u1c/udphs_device.c **** #ifdef UDC_SOF_EVENT
 538:.././hal/sam3u1c/udphs_device.c **** 		UDC_SOF_EVENT();
 716              	 .loc 6 538 0
 717 0056 504B     	 ldr r3,.L48+20
 718 0058 9847     	 blx r3
 719              	.LVL10:
 539:.././hal/sam3u1c/udphs_device.c **** #endif
 540:.././hal/sam3u1c/udphs_device.c **** 		goto udd_interrupt_sof_end;
 720              	 .loc 6 540 0
 721 005a 90E0     	 b .L44
 722              	.L36:
 541:.././hal/sam3u1c/udphs_device.c **** 	}
 542:.././hal/sam3u1c/udphs_device.c **** 
 543:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_msof()) {
 723              	 .loc 6 543 0
 724 005c 4B4B     	 ldr r3,.L48+8
 725 005e 5B69     	 ldr r3,[r3,#20]
 726 0060 03F00403 	 and r3,r3,#4
 727 0064 002B     	 cmp r3,#0
 728 0066 05D0     	 beq .L39
 544:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_msof();
 729              	 .loc 6 544 0
 730 0068 484B     	 ldr r3,.L48+8
 731 006a 0422     	 movs r2,#4
 732 006c 9A61     	 str r2,[r3,#24]
 545:.././hal/sam3u1c/udphs_device.c **** 		udc_sof_notify();
 733              	 .loc 6 545 0
 734 006e 494B     	 ldr r3,.L48+16
 735 0070 9847     	 blx r3
 736              	.LVL11:
 546:.././hal/sam3u1c/udphs_device.c **** 		goto udd_interrupt_sof_end;
 737              	 .loc 6 546 0
 738 0072 84E0     	 b .L44
 739              	.L39:
 547:.././hal/sam3u1c/udphs_device.c **** 	}
 548:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');
 549:.././hal/sam3u1c/udphs_device.c **** 
 550:.././hal/sam3u1c/udphs_device.c **** 	if (udd_ctrl_interrupt()) {
 740              	 .loc 6 550 0
 741 0074 494B     	 ldr r3,.L48+24
 742 0076 9847     	 blx r3
 743              	.LVL12:
 744 0078 0346     	 mov r3,r0
 745 007a 002B     	 cmp r3,#0
 746 007c 7AD1     	 bne .L45
 551:.././hal/sam3u1c/udphs_device.c **** 		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
 552:.././hal/sam3u1c/udphs_device.c **** 	}
 553:.././hal/sam3u1c/udphs_device.c **** 
 554:.././hal/sam3u1c/udphs_device.c **** #if (0 != USB_DEVICE_MAX_EP)
 555:.././hal/sam3u1c/udphs_device.c **** 	if (udd_ep_interrupt()) {
 747              	 .loc 6 555 0
 748 007e 484B     	 ldr r3,.L48+28
 749 0080 9847     	 blx r3
 750              	.LVL13:
 751 0082 0346     	 mov r3,r0
 752 0084 002B     	 cmp r3,#0
 753 0086 77D1     	 bne .L46
 556:.././hal/sam3u1c/udphs_device.c **** 		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
 557:.././hal/sam3u1c/udphs_device.c **** 	}
 558:.././hal/sam3u1c/udphs_device.c **** #endif
 559:.././hal/sam3u1c/udphs_device.c **** 
 560:.././hal/sam3u1c/udphs_device.c **** 	// USB bus reset detection
 561:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_reset()) {
 754              	 .loc 6 561 0
 755 0088 404B     	 ldr r3,.L48+8
 756 008a 5B69     	 ldr r3,[r3,#20]
 757 008c 03F01003 	 and r3,r3,#16
 758 0090 002B     	 cmp r3,#0
 759 0092 1DD0     	 beq .L42
 562:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("EoR ");
 563:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_reset();
 760              	 .loc 6 563 0
 761 0094 3D4B     	 ldr r3,.L48+8
 762 0096 1022     	 movs r2,#16
 763 0098 9A61     	 str r2,[r3,#24]
 564:.././hal/sam3u1c/udphs_device.c **** 		// Abort all jobs on-going
 565:.././hal/sam3u1c/udphs_device.c **** #if (USB_DEVICE_MAX_EP != 0)
 566:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job_table_kill();
 764              	 .loc 6 566 0
 765 009a 424B     	 ldr r3,.L48+32
 766 009c 9847     	 blx r3
 767              	.LVL14:
 567:.././hal/sam3u1c/udphs_device.c **** #endif
 568:.././hal/sam3u1c/udphs_device.c **** 		// Reset USB Device Stack Core
 569:.././hal/sam3u1c/udphs_device.c **** 		udc_reset();
 768              	 .loc 6 569 0
 769 009e 424B     	 ldr r3,.L48+36
 770 00a0 9847     	 blx r3
 771              	.LVL15:
 570:.././hal/sam3u1c/udphs_device.c **** 		// Reset endpoint control
 571:.././hal/sam3u1c/udphs_device.c **** 		udd_reset_ep_ctrl();
 772              	 .loc 6 571 0
 773 00a2 424B     	 ldr r3,.L48+40
 774 00a4 9847     	 blx r3
 775              	.LVL16:
 572:.././hal/sam3u1c/udphs_device.c **** 		// Reset endpoint control management
 573:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_init();
 776              	 .loc 6 573 0
 777 00a6 424B     	 ldr r3,.L48+44
 778 00a8 9847     	 blx r3
 779              	.LVL17:
 574:.././hal/sam3u1c/udphs_device.c **** 		// Enable SOF interrupts cleared by USB reset event
 575:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_sof_interrupt();
 780              	 .loc 6 575 0
 781 00aa 384B     	 ldr r3,.L48+8
 782 00ac 1B69     	 ldr r3,[r3,#16]
 783 00ae 374A     	 ldr r2,.L48+8
 784 00b0 43F00803 	 orr r3,r3,#8
 785 00b4 1361     	 str r3,[r2,#16]
 576:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_msof_interrupt();
 786              	 .loc 6 576 0
 787 00b6 354B     	 ldr r3,.L48+8
 788 00b8 1B69     	 ldr r3,[r3,#16]
 789 00ba 344A     	 ldr r2,.L48+8
 790 00bc 43F00403 	 orr r3,r3,#4
 791 00c0 1361     	 str r3,[r2,#16]
 577:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_suspend_interrupt();
 792              	 .loc 6 577 0
 793 00c2 324B     	 ldr r3,.L48+8
 794 00c4 1B69     	 ldr r3,[r3,#16]
 795 00c6 314A     	 ldr r2,.L48+8
 796 00c8 43F00203 	 orr r3,r3,#2
 797 00cc 1361     	 str r3,[r2,#16]
 578:.././hal/sam3u1c/udphs_device.c **** 		goto udd_interrupt_end;
 798              	 .loc 6 578 0
 799 00ce 56E0     	 b .L44
 800              	.L42:
 579:.././hal/sam3u1c/udphs_device.c **** 	}
 580:.././hal/sam3u1c/udphs_device.c **** 
 581:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
 801              	 .loc 6 581 0
 802 00d0 2E4B     	 ldr r3,.L48+8
 803 00d2 1B69     	 ldr r3,[r3,#16]
 804 00d4 03F00203 	 and r3,r3,#2
 805 00d8 002B     	 cmp r3,#0
 806 00da 20D0     	 beq .L43
 807              	 .loc 6 581 0 is_stmt 0 discriminator 1
 808 00dc 2B4B     	 ldr r3,.L48+8
 809 00de 5B69     	 ldr r3,[r3,#20]
 810 00e0 03F00203 	 and r3,r3,#2
 811 00e4 002B     	 cmp r3,#0
 812 00e6 1AD0     	 beq .L43
 582:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("Susp ");
 583:.././hal/sam3u1c/udphs_device.c **** 		// Remove old wakeup status
 584:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_wake_up();
 813              	 .loc 6 584 0 is_stmt 1
 814 00e8 284B     	 ldr r3,.L48+8
 815 00ea 2022     	 movs r2,#32
 816 00ec 9A61     	 str r2,[r3,#24]
 585:.././hal/sam3u1c/udphs_device.c **** 		// The suspend interrupt is automatic acked when a wakeup occur
 586:.././hal/sam3u1c/udphs_device.c **** 		udd_disable_suspend_interrupt();
 817              	 .loc 6 586 0
 818 00ee 274B     	 ldr r3,.L48+8
 819 00f0 1B69     	 ldr r3,[r3,#16]
 820 00f2 264A     	 ldr r2,.L48+8
 821 00f4 23F00203 	 bic r3,r3,#2
 822 00f8 1361     	 str r3,[r2,#16]
 587:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_wake_up_interrupt();
 823              	 .loc 6 587 0
 824 00fa 244B     	 ldr r3,.L48+8
 825 00fc 1B69     	 ldr r3,[r3,#16]
 826 00fe 234A     	 ldr r2,.L48+8
 827 0100 43F02003 	 orr r3,r3,#32
 828 0104 1361     	 str r3,[r2,#16]
 588:.././hal/sam3u1c/udphs_device.c **** 
 589:.././hal/sam3u1c/udphs_device.c **** 		// The wakeup interrupt is generated even if the device controller clock is disabled.
 590:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_suspend();
 829              	 .loc 6 590 0
 830 0106 214B     	 ldr r3,.L48+8
 831 0108 0222     	 movs r2,#2
 832 010a 9A61     	 str r2,[r3,#24]
 591:.././hal/sam3u1c/udphs_device.c **** 
 592:.././hal/sam3u1c/udphs_device.c **** 		udd_disable_periph_ck();
 833              	 .loc 6 592 0
 834 010c 1D20     	 movs r0,#29
 835 010e 294B     	 ldr r3,.L48+48
 836 0110 9847     	 blx r3
 837              	.LVL18:
 593:.././hal/sam3u1c/udphs_device.c **** 
 594:.././hal/sam3u1c/udphs_device.c **** #ifdef UDC_SUSPEND_EVENT
 595:.././hal/sam3u1c/udphs_device.c **** 		UDC_SUSPEND_EVENT();
 838              	 .loc 6 595 0
 839 0112 294B     	 ldr r3,.L48+52
 840 0114 9847     	 blx r3
 841              	.LVL19:
 596:.././hal/sam3u1c/udphs_device.c **** #endif
 597:.././hal/sam3u1c/udphs_device.c **** 		udd_sleep_mode(false); // Enter in SUSPEND mode
 842              	 .loc 6 597 0
 843 0116 0020     	 movs r0,#0
 844 0118 284B     	 ldr r3,.L48+56
 845 011a 9847     	 blx r3
 846              	.LVL20:
 598:.././hal/sam3u1c/udphs_device.c **** 		goto udd_interrupt_end;
 847              	 .loc 6 598 0
 848 011c 2FE0     	 b .L44
 849              	.L43:
 599:.././hal/sam3u1c/udphs_device.c **** 	}
 600:.././hal/sam3u1c/udphs_device.c **** 
 601:.././hal/sam3u1c/udphs_device.c **** 	// On wakeup, _IEN is reseted only with EoR enabled
 602:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_wake_up()) {
 850              	 .loc 6 602 0
 851 011e 1B4B     	 ldr r3,.L48+8
 852 0120 5B69     	 ldr r3,[r3,#20]
 853 0122 03F02003 	 and r3,r3,#32
 854 0126 002B     	 cmp r3,#0
 855 0128 28D0     	 beq .L47
 603:.././hal/sam3u1c/udphs_device.c **** 		udd_sleep_mode(true); // Enter in IDLE mode
 856              	 .loc 6 603 0
 857 012a 0120     	 movs r0,#1
 858 012c 234B     	 ldr r3,.L48+56
 859 012e 9847     	 blx r3
 860              	.LVL21:
 604:.././hal/sam3u1c/udphs_device.c **** 		// Remove old suspend status
 605:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_suspend();
 861              	 .loc 6 605 0
 862 0130 164B     	 ldr r3,.L48+8
 863 0132 0222     	 movs r2,#2
 864 0134 9A61     	 str r2,[r3,#24]
 606:.././hal/sam3u1c/udphs_device.c **** 		// Ack wakeup interrupt and enable suspend interrupt
 607:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_wake_up();
 865              	 .loc 6 607 0
 866 0136 154B     	 ldr r3,.L48+8
 867 0138 2022     	 movs r2,#32
 868 013a 9A61     	 str r2,[r3,#24]
 608:.././hal/sam3u1c/udphs_device.c **** 		// Ack wakeup interrupt and enable suspend interrupt
 609:.././hal/sam3u1c/udphs_device.c **** 		udd_disable_wake_up_interrupt();
 869              	 .loc 6 609 0
 870 013c 134B     	 ldr r3,.L48+8
 871 013e 1B69     	 ldr r3,[r3,#16]
 872 0140 124A     	 ldr r2,.L48+8
 873 0142 23F02003 	 bic r3,r3,#32
 874 0146 1361     	 str r3,[r2,#16]
 610:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_suspend_interrupt();
 875              	 .loc 6 610 0
 876 0148 104B     	 ldr r3,.L48+8
 877 014a 1B69     	 ldr r3,[r3,#16]
 878 014c 0F4A     	 ldr r2,.L48+8
 879 014e 43F00203 	 orr r3,r3,#2
 880 0152 1361     	 str r3,[r2,#16]
 611:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_sof_interrupt();
 881              	 .loc 6 611 0
 882 0154 0D4B     	 ldr r3,.L48+8
 883 0156 1B69     	 ldr r3,[r3,#16]
 884 0158 0C4A     	 ldr r2,.L48+8
 885 015a 43F00803 	 orr r3,r3,#8
 886 015e 1361     	 str r3,[r2,#16]
 612:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_msof_interrupt();
 887              	 .loc 6 612 0
 888 0160 0A4B     	 ldr r3,.L48+8
 889 0162 1B69     	 ldr r3,[r3,#16]
 890 0164 094A     	 ldr r2,.L48+8
 891 0166 43F00403 	 orr r3,r3,#4
 892 016a 1361     	 str r3,[r2,#16]
 613:.././hal/sam3u1c/udphs_device.c **** 
 614:.././hal/sam3u1c/udphs_device.c **** #ifdef UDC_RESUME_EVENT
 615:.././hal/sam3u1c/udphs_device.c **** 		UDC_RESUME_EVENT();
 893              	 .loc 6 615 0
 894 016c 144B     	 ldr r3,.L48+60
 895 016e 9847     	 blx r3
 896              	.LVL22:
 616:.././hal/sam3u1c/udphs_device.c **** #endif
 617:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("Wkup ");
 618:.././hal/sam3u1c/udphs_device.c **** 		goto udd_interrupt_end;
 897              	 .loc 6 618 0
 898 0170 00BF     	 nop
 899 0172 04E0     	 b .L44
 900              	.L38:
 901              	.L45:
 551:.././hal/sam3u1c/udphs_device.c **** 	}
 902              	 .loc 6 551 0
 903 0174 00BF     	 nop
 904 0176 02E0     	 b .L44
 905              	.L46:
 556:.././hal/sam3u1c/udphs_device.c **** 	}
 906              	 .loc 6 556 0
 907 0178 00BF     	 nop
 908 017a 00E0     	 b .L44
 909              	.L47:
 619:.././hal/sam3u1c/udphs_device.c **** 	}
 620:.././hal/sam3u1c/udphs_device.c **** 	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
 621:.././hal/sam3u1c/udphs_device.c **** 
 622:.././hal/sam3u1c/udphs_device.c **** udd_interrupt_end:
 910              	 .loc 6 622 0
 911 017c 00BF     	 nop
 912              	.L44:
 623:.././hal/sam3u1c/udphs_device.c **** 	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
 624:.././hal/sam3u1c/udphs_device.c **** 	//dbg_print("m%08x", UDPHS->UDPHS_IEN);
 625:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("\n\r");
 626:.././hal/sam3u1c/udphs_device.c **** udd_interrupt_sof_end:
 627:.././hal/sam3u1c/udphs_device.c **** 	return;
 913              	 .loc 6 627 0
 914 017e 00BF     	 nop
 915              	.L33:
 628:.././hal/sam3u1c/udphs_device.c **** }
 916              	 .loc 6 628 0
 917 0180 80BD     	 pop {r7,pc}
 918              	.L49:
 919 0182 00BF     	 .align 2
 920              	.L48:
 921 0184 00000000 	 .word pmc_enable_periph_clk
 922 0188 00000000 	 .word pmc_is_wakeup_clocks_restored
 923 018c 00400A40 	 .word 1074413568
 924 0190 00000000 	 .word g_interrupt_enabled
 925 0194 00000000 	 .word udc_sof_notify
 926 0198 00000000 	 .word main_sof_action
 927 019c 00000000 	 .word udd_ctrl_interrupt
 928 01a0 00000000 	 .word udd_ep_interrupt
 929 01a4 00000000 	 .word udd_ep_job_table_kill
 930 01a8 00000000 	 .word udc_reset
 931 01ac 00000000 	 .word udd_reset_ep_ctrl
 932 01b0 00000000 	 .word udd_ctrl_init
 933 01b4 00000000 	 .word pmc_disable_periph_clk
 934 01b8 00000000 	 .word main_suspend_action
 935 01bc 00000000 	 .word udd_sleep_mode
 936 01c0 00000000 	 .word main_resume_action
 937              	 .cfi_endproc
 938              	.LFE139:
 940              	 .section .text.udd_include_vbus_monitoring,"ax",%progbits
 941              	 .align 1
 942              	 .global udd_include_vbus_monitoring
 943              	 .syntax unified
 944              	 .thumb
 945              	 .thumb_func
 946              	 .fpu softvfp
 948              	udd_include_vbus_monitoring:
 949              	.LFB140:
 629:.././hal/sam3u1c/udphs_device.c **** 
 630:.././hal/sam3u1c/udphs_device.c **** 
 631:.././hal/sam3u1c/udphs_device.c **** bool udd_include_vbus_monitoring(void)
 632:.././hal/sam3u1c/udphs_device.c **** {
 950              	 .loc 6 632 0
 951              	 .cfi_startproc
 952              	 
 953              	 
 954              	 
 955 0000 80B4     	 push {r7}
 956              	.LCFI46:
 957              	 .cfi_def_cfa_offset 4
 958              	 .cfi_offset 7,-4
 959 0002 00AF     	 add r7,sp,#0
 960              	.LCFI47:
 961              	 .cfi_def_cfa_register 7
 633:.././hal/sam3u1c/udphs_device.c **** #if UDD_VBUS_IO
 634:.././hal/sam3u1c/udphs_device.c **** 	return true;
 635:.././hal/sam3u1c/udphs_device.c **** #else
 636:.././hal/sam3u1c/udphs_device.c **** 	return false;
 962              	 .loc 6 636 0
 963 0004 0023     	 movs r3,#0
 637:.././hal/sam3u1c/udphs_device.c **** #endif
 638:.././hal/sam3u1c/udphs_device.c **** }
 964              	 .loc 6 638 0
 965 0006 1846     	 mov r0,r3
 966 0008 BD46     	 mov sp,r7
 967              	.LCFI48:
 968              	 .cfi_def_cfa_register 13
 969              	 
 970 000a 80BC     	 pop {r7}
 971              	.LCFI49:
 972              	 .cfi_restore 7
 973              	 .cfi_def_cfa_offset 0
 974 000c 7047     	 bx lr
 975              	 .cfi_endproc
 976              	.LFE140:
 978              	 .section .text.udd_enable,"ax",%progbits
 979              	 .align 1
 980              	 .global udd_enable
 981              	 .syntax unified
 982              	 .thumb
 983              	 .thumb_func
 984              	 .fpu softvfp
 986              	udd_enable:
 987              	.LFB141:
 639:.././hal/sam3u1c/udphs_device.c **** 
 640:.././hal/sam3u1c/udphs_device.c **** 
 641:.././hal/sam3u1c/udphs_device.c **** void udd_enable(void)
 642:.././hal/sam3u1c/udphs_device.c **** {
 988              	 .loc 6 642 0
 989              	 .cfi_startproc
 990              	 
 991              	 
 992 0000 80B5     	 push {r7,lr}
 993              	.LCFI50:
 994              	 .cfi_def_cfa_offset 8
 995              	 .cfi_offset 7,-8
 996              	 .cfi_offset 14,-4
 997 0002 82B0     	 sub sp,sp,#8
 998              	.LCFI51:
 999              	 .cfi_def_cfa_offset 16
 1000 0004 00AF     	 add r7,sp,#0
 1001              	.LCFI52:
 1002              	 .cfi_def_cfa_register 7
 643:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
 644:.././hal/sam3u1c/udphs_device.c **** 	sysclk_enable_usb();
 1003              	 .loc 6 644 0
 1004 0006 194B     	 ldr r3,.L53
 1005 0008 9847     	 blx r3
 1006              	.LVL23:
 645:.././hal/sam3u1c/udphs_device.c **** 
 646:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_periph_ck();
 1007              	 .loc 6 646 0
 1008 000a 1D20     	 movs r0,#29
 1009 000c 184B     	 ldr r3,.L53+4
 1010 000e 9847     	 blx r3
 1011              	.LVL24:
 647:.././hal/sam3u1c/udphs_device.c **** 
 648:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 1012              	 .loc 6 648 0
 1013 0010 184B     	 ldr r3,.L53+8
 1014 0012 9847     	 blx r3
 1015              	.LVL25:
 1016 0014 7860     	 str r0,[r7,#4]
 649:.././hal/sam3u1c/udphs_device.c **** 
 650:.././hal/sam3u1c/udphs_device.c **** 	//** Enable USB hardware
 651:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_periph();
 1017              	 .loc 6 651 0
 1018 0016 184B     	 ldr r3,.L53+12
 1019 0018 1B68     	 ldr r3,[r3]
 1020 001a 174A     	 ldr r2,.L53+12
 1021 001c 43F48073 	 orr r3,r3,#256
 1022 0020 1360     	 str r3,[r2]
 652:.././hal/sam3u1c/udphs_device.c **** 
 653:.././hal/sam3u1c/udphs_device.c **** 	// Cortex-M3, uses NVIC, no need to register IRQ handler
 654:.././hal/sam3u1c/udphs_device.c **** 	// Here, only the Device mode is possible,
 655:.././hal/sam3u1c/udphs_device.c **** 	// UDPHS interrupt is UDD interrupt
 656:.././hal/sam3u1c/udphs_device.c **** 	NVIC_SetPriority((IRQn_Type) ID_UDPHS, UDD_USB_INT_LEVEL);
 1023              	 .loc 6 656 0
 1024 0022 0521     	 movs r1,#5
 1025 0024 1D20     	 movs r0,#29
 1026 0026 154B     	 ldr r3,.L53+16
 1027 0028 9847     	 blx r3
 1028              	.LVL26:
 657:.././hal/sam3u1c/udphs_device.c **** 	NVIC_EnableIRQ((IRQn_Type) ID_UDPHS);
 1029              	 .loc 6 657 0
 1030 002a 1D20     	 movs r0,#29
 1031 002c 144B     	 ldr r3,.L53+20
 1032 002e 9847     	 blx r3
 1033              	.LVL27:
 658:.././hal/sam3u1c/udphs_device.c **** 
 659:.././hal/sam3u1c/udphs_device.c **** 	// Reset internal variables
 660:.././hal/sam3u1c/udphs_device.c **** #if (0!=USB_DEVICE_MAX_EP)
 661:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_table_reset();
 1034              	 .loc 6 661 0
 1035 0030 144B     	 ldr r3,.L53+24
 1036 0032 9847     	 blx r3
 1037              	.LVL28:
 662:.././hal/sam3u1c/udphs_device.c **** #endif
 663:.././hal/sam3u1c/udphs_device.c **** 
 664:.././hal/sam3u1c/udphs_device.c **** 	// Set the USB speed requested by configuration file
 665:.././hal/sam3u1c/udphs_device.c **** #ifdef USB_DEVICE_HS_SUPPORT
 666:.././hal/sam3u1c/udphs_device.c **** 	udd_high_speed_enable();
 1038              	 .loc 6 666 0
 1039 0034 104B     	 ldr r3,.L53+12
 1040 0036 D3F8E030 	 ldr r3,[r3,#224]
 1041 003a 0F4A     	 ldr r2,.L53+12
 1042 003c 23F00303 	 bic r3,r3,#3
 1043 0040 C2F8E030 	 str r3,[r2,#224]
 667:.././hal/sam3u1c/udphs_device.c **** #else
 668:.././hal/sam3u1c/udphs_device.c **** 	udd_high_speed_disable();
 669:.././hal/sam3u1c/udphs_device.c **** #endif
 670:.././hal/sam3u1c/udphs_device.c **** 
 671:.././hal/sam3u1c/udphs_device.c **** 	// Always authorize asynchronous USB interrupts to exit of sleep mode
 672:.././hal/sam3u1c/udphs_device.c **** 	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
 1044              	 .loc 6 672 0
 1045 0044 4FF48020 	 mov r0,#262144
 1046 0048 0F4B     	 ldr r3,.L53+28
 1047 004a 9847     	 blx r3
 1048              	.LVL29:
 673:.././hal/sam3u1c/udphs_device.c **** 
 674:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_NO_SLEEP_MGR
 675:.././hal/sam3u1c/udphs_device.c **** 	// Initialize the sleep mode authorized for the USB suspend mode
 676:.././hal/sam3u1c/udphs_device.c **** 	udd_b_idle = false;
 1049              	 .loc 6 676 0
 1050 004c 0F4B     	 ldr r3,.L53+32
 1051 004e 0022     	 movs r2,#0
 1052 0050 1A70     	 strb r2,[r3]
 677:.././hal/sam3u1c/udphs_device.c **** 	sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
 1053              	 .loc 6 677 0
 1054 0052 0320     	 movs r0,#3
 1055 0054 0E4B     	 ldr r3,.L53+36
 1056 0056 9847     	 blx r3
 1057              	.LVL30:
 678:.././hal/sam3u1c/udphs_device.c **** #endif
 679:.././hal/sam3u1c/udphs_device.c **** 
 680:.././hal/sam3u1c/udphs_device.c **** #if UDD_VBUS_IO
 681:.././hal/sam3u1c/udphs_device.c **** 	/* Initialize VBus monitor */
 682:.././hal/sam3u1c/udphs_device.c **** 	udd_vbus_init(udd_vbus_handler);
 683:.././hal/sam3u1c/udphs_device.c **** 	udd_vbus_monitor_sleep_mode(true);
 684:.././hal/sam3u1c/udphs_device.c **** 	/* Force Vbus interrupt when Vbus is always high
 685:.././hal/sam3u1c/udphs_device.c **** 	 * This is possible due to a short timing between a Host mode stop/start.
 686:.././hal/sam3u1c/udphs_device.c **** 	 */
 687:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_vbus_high()) {
 688:.././hal/sam3u1c/udphs_device.c **** 		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
 689:.././hal/sam3u1c/udphs_device.c **** 	}
 690:.././hal/sam3u1c/udphs_device.c **** #else
 691:.././hal/sam3u1c/udphs_device.c **** #  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
 692:.././hal/sam3u1c/udphs_device.c **** 	udd_attach();
 1058              	 .loc 6 692 0
 1059 0058 0E4B     	 ldr r3,.L53+40
 1060 005a 9847     	 blx r3
 1061              	.LVL31:
 693:.././hal/sam3u1c/udphs_device.c **** #  endif
 694:.././hal/sam3u1c/udphs_device.c **** #endif
 695:.././hal/sam3u1c/udphs_device.c **** 
 696:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 1062              	 .loc 6 696 0
 1063 005c 7868     	 ldr r0,[r7,#4]
 1064 005e 0E4B     	 ldr r3,.L53+44
 1065 0060 9847     	 blx r3
 1066              	.LVL32:
 697:.././hal/sam3u1c/udphs_device.c **** }
 1067              	 .loc 6 697 0
 1068 0062 00BF     	 nop
 1069 0064 0837     	 adds r7,r7,#8
 1070              	.LCFI53:
 1071              	 .cfi_def_cfa_offset 8
 1072 0066 BD46     	 mov sp,r7
 1073              	.LCFI54:
 1074              	 .cfi_def_cfa_register 13
 1075              	 
 1076 0068 80BD     	 pop {r7,pc}
 1077              	.L54:
 1078 006a 00BF     	 .align 2
 1079              	.L53:
 1080 006c 00000000 	 .word sysclk_enable_usb
 1081 0070 00000000 	 .word pmc_enable_periph_clk
 1082 0074 00000000 	 .word cpu_irq_save
 1083 0078 00400A40 	 .word 1074413568
 1084 007c 00000000 	 .word NVIC_SetPriority
 1085 0080 00000000 	 .word NVIC_EnableIRQ
 1086 0084 00000000 	 .word udd_ep_job_table_reset
 1087 0088 00000000 	 .word pmc_set_fast_startup_input
 1088 008c 00000000 	 .word udd_b_idle
 1089 0090 00000000 	 .word sleepmgr_lock_mode
 1090 0094 00000000 	 .word udd_attach
 1091 0098 00000000 	 .word cpu_irq_restore
 1092              	 .cfi_endproc
 1093              	.LFE141:
 1095              	 .section .text.udd_disable,"ax",%progbits
 1096              	 .align 1
 1097              	 .global udd_disable
 1098              	 .syntax unified
 1099              	 .thumb
 1100              	 .thumb_func
 1101              	 .fpu softvfp
 1103              	udd_disable:
 1104              	.LFB142:
 698:.././hal/sam3u1c/udphs_device.c **** 
 699:.././hal/sam3u1c/udphs_device.c **** 
 700:.././hal/sam3u1c/udphs_device.c **** void udd_disable(void)
 701:.././hal/sam3u1c/udphs_device.c **** {
 1105              	 .loc 6 701 0
 1106              	 .cfi_startproc
 1107              	 
 1108              	 
 1109 0000 80B5     	 push {r7,lr}
 1110              	.LCFI55:
 1111              	 .cfi_def_cfa_offset 8
 1112              	 .cfi_offset 7,-8
 1113              	 .cfi_offset 14,-4
 1114 0002 82B0     	 sub sp,sp,#8
 1115              	.LCFI56:
 1116              	 .cfi_def_cfa_offset 16
 1117 0004 00AF     	 add r7,sp,#0
 1118              	.LCFI57:
 1119              	 .cfi_def_cfa_register 7
 702:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
 703:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 1120              	 .loc 6 703 0
 1121 0006 0D4B     	 ldr r3,.L56
 1122 0008 9847     	 blx r3
 1123              	.LVL33:
 1124 000a 7860     	 str r0,[r7,#4]
 704:.././hal/sam3u1c/udphs_device.c **** 	// Disable USB
 705:.././hal/sam3u1c/udphs_device.c **** 	udd_reset_periph();
 1125              	 .loc 6 705 0
 1126 000c 0C4B     	 ldr r3,.L56+4
 1127 000e 1B68     	 ldr r3,[r3]
 1128 0010 0B4A     	 ldr r2,.L56+4
 1129 0012 23F48073 	 bic r3,r3,#256
 1130 0016 1360     	 str r3,[r2]
 706:.././hal/sam3u1c/udphs_device.c **** 	sysclk_disable_usb();
 1131              	 .loc 6 706 0
 1132 0018 0A4B     	 ldr r3,.L56+8
 1133 001a 9847     	 blx r3
 1134              	.LVL34:
 707:.././hal/sam3u1c/udphs_device.c **** 	pmc_disable_periph_clk(ID_UDPHS);
 1135              	 .loc 6 707 0
 1136 001c 1D20     	 movs r0,#29
 1137 001e 0A4B     	 ldr r3,.L56+12
 1138 0020 9847     	 blx r3
 1139              	.LVL35:
 708:.././hal/sam3u1c/udphs_device.c **** 	udd_sleep_mode(false);
 1140              	 .loc 6 708 0
 1141 0022 0020     	 movs r0,#0
 1142 0024 094B     	 ldr r3,.L56+16
 1143 0026 9847     	 blx r3
 1144              	.LVL36:
 709:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_NO_SLEEP_MGR
 710:.././hal/sam3u1c/udphs_device.c **** 	sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
 1145              	 .loc 6 710 0
 1146 0028 0320     	 movs r0,#3
 1147 002a 094B     	 ldr r3,.L56+20
 1148 002c 9847     	 blx r3
 1149              	.LVL37:
 711:.././hal/sam3u1c/udphs_device.c **** #endif
 712:.././hal/sam3u1c/udphs_device.c **** 
 713:.././hal/sam3u1c/udphs_device.c **** # if UDD_VBUS_IO
 714:.././hal/sam3u1c/udphs_device.c **** 	udd_vbus_monitor_sleep_mode(false);
 715:.././hal/sam3u1c/udphs_device.c **** # endif
 716:.././hal/sam3u1c/udphs_device.c **** 
 717:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 1150              	 .loc 6 717 0
 1151 002e 7868     	 ldr r0,[r7,#4]
 1152 0030 084B     	 ldr r3,.L56+24
 1153 0032 9847     	 blx r3
 1154              	.LVL38:
 718:.././hal/sam3u1c/udphs_device.c **** }
 1155              	 .loc 6 718 0
 1156 0034 00BF     	 nop
 1157 0036 0837     	 adds r7,r7,#8
 1158              	.LCFI58:
 1159              	 .cfi_def_cfa_offset 8
 1160 0038 BD46     	 mov sp,r7
 1161              	.LCFI59:
 1162              	 .cfi_def_cfa_register 13
 1163              	 
 1164 003a 80BD     	 pop {r7,pc}
 1165              	.L57:
 1166              	 .align 2
 1167              	.L56:
 1168 003c 00000000 	 .word cpu_irq_save
 1169 0040 00400A40 	 .word 1074413568
 1170 0044 00000000 	 .word sysclk_disable_usb
 1171 0048 00000000 	 .word pmc_disable_periph_clk
 1172 004c 00000000 	 .word udd_sleep_mode
 1173 0050 00000000 	 .word sleepmgr_unlock_mode
 1174 0054 00000000 	 .word cpu_irq_restore
 1175              	 .cfi_endproc
 1176              	.LFE142:
 1178              	 .section .text.udd_attach,"ax",%progbits
 1179              	 .align 1
 1180              	 .global udd_attach
 1181              	 .syntax unified
 1182              	 .thumb
 1183              	 .thumb_func
 1184              	 .fpu softvfp
 1186              	udd_attach:
 1187              	.LFB143:
 719:.././hal/sam3u1c/udphs_device.c **** 
 720:.././hal/sam3u1c/udphs_device.c **** 
 721:.././hal/sam3u1c/udphs_device.c **** void udd_attach(void)
 722:.././hal/sam3u1c/udphs_device.c **** {
 1188              	 .loc 6 722 0
 1189              	 .cfi_startproc
 1190              	 
 1191              	 
 1192 0000 80B5     	 push {r7,lr}
 1193              	.LCFI60:
 1194              	 .cfi_def_cfa_offset 8
 1195              	 .cfi_offset 7,-8
 1196              	 .cfi_offset 14,-4
 1197 0002 82B0     	 sub sp,sp,#8
 1198              	.LCFI61:
 1199              	 .cfi_def_cfa_offset 16
 1200 0004 00AF     	 add r7,sp,#0
 1201              	.LCFI62:
 1202              	 .cfi_def_cfa_register 7
 723:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
 724:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 1203              	 .loc 6 724 0
 1204 0006 264B     	 ldr r3,.L59
 1205 0008 9847     	 blx r3
 1206              	.LVL39:
 1207 000a 7860     	 str r0,[r7,#4]
 725:.././hal/sam3u1c/udphs_device.c **** 
 726:.././hal/sam3u1c/udphs_device.c **** 	// At startup the USB bus state is unknown,
 727:.././hal/sam3u1c/udphs_device.c **** 	// therefore the state is considered IDLE to not miss any USB event
 728:.././hal/sam3u1c/udphs_device.c **** 	udd_sleep_mode(true);
 1208              	 .loc 6 728 0
 1209 000c 0120     	 movs r0,#1
 1210 000e 254B     	 ldr r3,.L59+4
 1211 0010 9847     	 blx r3
 1212              	.LVL40:
 729:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_periph_ck();
 1213              	 .loc 6 729 0
 1214 0012 1D20     	 movs r0,#29
 1215 0014 244B     	 ldr r3,.L59+8
 1216 0016 9847     	 blx r3
 1217              	.LVL41:
 730:.././hal/sam3u1c/udphs_device.c **** 
 731:.././hal/sam3u1c/udphs_device.c **** 	// Authorize attach if Vbus is present
 732:.././hal/sam3u1c/udphs_device.c **** 	udd_attach_device();
 1218              	 .loc 6 732 0
 1219 0018 244B     	 ldr r3,.L59+12
 1220 001a 1B68     	 ldr r3,[r3]
 1221 001c 234A     	 ldr r2,.L59+12
 1222 001e 43F40063 	 orr r3,r3,#2048
 1223 0022 1360     	 str r3,[r2]
 1224 0024 214B     	 ldr r3,.L59+12
 1225 0026 1B68     	 ldr r3,[r3]
 1226 0028 204A     	 ldr r2,.L59+12
 1227 002a 23F40073 	 bic r3,r3,#512
 1228 002e 1360     	 str r3,[r2]
 733:.././hal/sam3u1c/udphs_device.c **** 
 734:.././hal/sam3u1c/udphs_device.c **** 	// Enable USB line events
 735:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_reset_interrupt();
 1229              	 .loc 6 735 0
 1230 0030 1E4B     	 ldr r3,.L59+12
 1231 0032 1B69     	 ldr r3,[r3,#16]
 1232 0034 1D4A     	 ldr r2,.L59+12
 1233 0036 43F01003 	 orr r3,r3,#16
 1234 003a 1361     	 str r3,[r2,#16]
 736:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_suspend_interrupt();
 1235              	 .loc 6 736 0
 1236 003c 1B4B     	 ldr r3,.L59+12
 1237 003e 1B69     	 ldr r3,[r3,#16]
 1238 0040 1A4A     	 ldr r2,.L59+12
 1239 0042 43F00203 	 orr r3,r3,#2
 1240 0046 1361     	 str r3,[r2,#16]
 737:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_wake_up_interrupt();
 1241              	 .loc 6 737 0
 1242 0048 184B     	 ldr r3,.L59+12
 1243 004a 1B69     	 ldr r3,[r3,#16]
 1244 004c 174A     	 ldr r2,.L59+12
 1245 004e 43F02003 	 orr r3,r3,#32
 1246 0052 1361     	 str r3,[r2,#16]
 738:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_sof_interrupt();
 1247              	 .loc 6 738 0
 1248 0054 154B     	 ldr r3,.L59+12
 1249 0056 1B69     	 ldr r3,[r3,#16]
 1250 0058 144A     	 ldr r2,.L59+12
 1251 005a 43F00803 	 orr r3,r3,#8
 1252 005e 1361     	 str r3,[r2,#16]
 739:.././hal/sam3u1c/udphs_device.c **** #ifdef USB_DEVICE_HS_SUPPORT
 740:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_msof_interrupt();
 1253              	 .loc 6 740 0
 1254 0060 124B     	 ldr r3,.L59+12
 1255 0062 1B69     	 ldr r3,[r3,#16]
 1256 0064 114A     	 ldr r2,.L59+12
 1257 0066 43F00403 	 orr r3,r3,#4
 1258 006a 1361     	 str r3,[r2,#16]
 741:.././hal/sam3u1c/udphs_device.c **** #endif
 742:.././hal/sam3u1c/udphs_device.c **** 	// Reset following interrupts flag
 743:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_sof();
 1259              	 .loc 6 743 0
 1260 006c 0F4B     	 ldr r3,.L59+12
 1261 006e 0822     	 movs r2,#8
 1262 0070 9A61     	 str r2,[r3,#24]
 744:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_msof();
 1263              	 .loc 6 744 0
 1264 0072 0E4B     	 ldr r3,.L59+12
 1265 0074 0422     	 movs r2,#4
 1266 0076 9A61     	 str r2,[r3,#24]
 745:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_reset();
 1267              	 .loc 6 745 0
 1268 0078 0C4B     	 ldr r3,.L59+12
 1269 007a 1022     	 movs r2,#16
 1270 007c 9A61     	 str r2,[r3,#24]
 746:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_suspend();
 1271              	 .loc 6 746 0
 1272 007e 0B4B     	 ldr r3,.L59+12
 1273 0080 0222     	 movs r2,#2
 1274 0082 9A61     	 str r2,[r3,#24]
 747:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_wake_up();
 1275              	 .loc 6 747 0
 1276 0084 094B     	 ldr r3,.L59+12
 1277 0086 2022     	 movs r2,#32
 1278 0088 9A61     	 str r2,[r3,#24]
 748:.././hal/sam3u1c/udphs_device.c **** 
 749:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_periph_ck();
 1279              	 .loc 6 749 0
 1280 008a 1D20     	 movs r0,#29
 1281 008c 084B     	 ldr r3,.L59+16
 1282 008e 9847     	 blx r3
 1283              	.LVL42:
 750:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 1284              	 .loc 6 750 0
 1285 0090 7868     	 ldr r0,[r7,#4]
 1286 0092 084B     	 ldr r3,.L59+20
 1287 0094 9847     	 blx r3
 1288              	.LVL43:
 751:.././hal/sam3u1c/udphs_device.c **** }
 1289              	 .loc 6 751 0
 1290 0096 00BF     	 nop
 1291 0098 0837     	 adds r7,r7,#8
 1292              	.LCFI63:
 1293              	 .cfi_def_cfa_offset 8
 1294 009a BD46     	 mov sp,r7
 1295              	.LCFI64:
 1296              	 .cfi_def_cfa_register 13
 1297              	 
 1298 009c 80BD     	 pop {r7,pc}
 1299              	.L60:
 1300 009e 00BF     	 .align 2
 1301              	.L59:
 1302 00a0 00000000 	 .word cpu_irq_save
 1303 00a4 00000000 	 .word udd_sleep_mode
 1304 00a8 00000000 	 .word pmc_enable_periph_clk
 1305 00ac 00400A40 	 .word 1074413568
 1306 00b0 00000000 	 .word pmc_disable_periph_clk
 1307 00b4 00000000 	 .word cpu_irq_restore
 1308              	 .cfi_endproc
 1309              	.LFE143:
 1311              	 .section .text.udd_detach,"ax",%progbits
 1312              	 .align 1
 1313              	 .global udd_detach
 1314              	 .syntax unified
 1315              	 .thumb
 1316              	 .thumb_func
 1317              	 .fpu softvfp
 1319              	udd_detach:
 1320              	.LFB144:
 752:.././hal/sam3u1c/udphs_device.c **** 
 753:.././hal/sam3u1c/udphs_device.c **** 
 754:.././hal/sam3u1c/udphs_device.c **** void udd_detach(void)
 755:.././hal/sam3u1c/udphs_device.c **** {
 1321              	 .loc 6 755 0
 1322              	 .cfi_startproc
 1323              	 
 1324              	 
 1325 0000 80B5     	 push {r7,lr}
 1326              	.LCFI65:
 1327              	 .cfi_def_cfa_offset 8
 1328              	 .cfi_offset 7,-8
 1329              	 .cfi_offset 14,-4
 1330 0002 00AF     	 add r7,sp,#0
 1331              	.LCFI66:
 1332              	 .cfi_def_cfa_register 7
 756:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_periph_ck();
 1333              	 .loc 6 756 0
 1334 0004 1D20     	 movs r0,#29
 1335 0006 0B4B     	 ldr r3,.L62
 1336 0008 9847     	 blx r3
 1337              	.LVL44:
 757:.././hal/sam3u1c/udphs_device.c **** 	// Detach device from the bus
 758:.././hal/sam3u1c/udphs_device.c **** 	udd_detach_device();
 1338              	 .loc 6 758 0
 1339 000a 0B4B     	 ldr r3,.L62+4
 1340 000c 1B68     	 ldr r3,[r3]
 1341 000e 0A4A     	 ldr r2,.L62+4
 1342 0010 43F40073 	 orr r3,r3,#512
 1343 0014 1360     	 str r3,[r2]
 1344 0016 084B     	 ldr r3,.L62+4
 1345 0018 1B68     	 ldr r3,[r3]
 1346 001a 074A     	 ldr r2,.L62+4
 1347 001c 23F40063 	 bic r3,r3,#2048
 1348 0020 1360     	 str r3,[r2]
 759:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_periph_ck();
 1349              	 .loc 6 759 0
 1350 0022 1D20     	 movs r0,#29
 1351 0024 054B     	 ldr r3,.L62+8
 1352 0026 9847     	 blx r3
 1353              	.LVL45:
 760:.././hal/sam3u1c/udphs_device.c **** 	udd_sleep_mode(false);
 1354              	 .loc 6 760 0
 1355 0028 0020     	 movs r0,#0
 1356 002a 054B     	 ldr r3,.L62+12
 1357 002c 9847     	 blx r3
 1358              	.LVL46:
 761:.././hal/sam3u1c/udphs_device.c **** }
 1359              	 .loc 6 761 0
 1360 002e 00BF     	 nop
 1361 0030 80BD     	 pop {r7,pc}
 1362              	.L63:
 1363 0032 00BF     	 .align 2
 1364              	.L62:
 1365 0034 00000000 	 .word pmc_enable_periph_clk
 1366 0038 00400A40 	 .word 1074413568
 1367 003c 00000000 	 .word pmc_disable_periph_clk
 1368 0040 00000000 	 .word udd_sleep_mode
 1369              	 .cfi_endproc
 1370              	.LFE144:
 1372              	 .section .text.udd_is_high_speed,"ax",%progbits
 1373              	 .align 1
 1374              	 .global udd_is_high_speed
 1375              	 .syntax unified
 1376              	 .thumb
 1377              	 .thumb_func
 1378              	 .fpu softvfp
 1380              	udd_is_high_speed:
 1381              	.LFB145:
 762:.././hal/sam3u1c/udphs_device.c **** 
 763:.././hal/sam3u1c/udphs_device.c **** 
 764:.././hal/sam3u1c/udphs_device.c **** bool udd_is_high_speed(void)
 765:.././hal/sam3u1c/udphs_device.c **** {
 1382              	 .loc 6 765 0
 1383              	 .cfi_startproc
 1384              	 
 1385              	 
 1386              	 
 1387 0000 80B4     	 push {r7}
 1388              	.LCFI67:
 1389              	 .cfi_def_cfa_offset 4
 1390              	 .cfi_offset 7,-4
 1391 0002 00AF     	 add r7,sp,#0
 1392              	.LCFI68:
 1393              	 .cfi_def_cfa_register 7
 766:.././hal/sam3u1c/udphs_device.c **** #ifdef USB_DEVICE_HS_SUPPORT
 767:.././hal/sam3u1c/udphs_device.c **** 	return !Is_udd_full_speed_mode();
 1394              	 .loc 6 767 0
 1395 0004 064B     	 ldr r3,.L66
 1396 0006 5B69     	 ldr r3,[r3,#20]
 1397 0008 03F00103 	 and r3,r3,#1
 1398 000c 002B     	 cmp r3,#0
 1399 000e 14BF     	 ite ne
 1400 0010 0123     	 movne r3,#1
 1401 0012 0023     	 moveq r3,#0
 1402 0014 DBB2     	 uxtb r3,r3
 768:.././hal/sam3u1c/udphs_device.c **** #else
 769:.././hal/sam3u1c/udphs_device.c **** 	return false;
 770:.././hal/sam3u1c/udphs_device.c **** #endif
 771:.././hal/sam3u1c/udphs_device.c **** }
 1403              	 .loc 6 771 0
 1404 0016 1846     	 mov r0,r3
 1405 0018 BD46     	 mov sp,r7
 1406              	.LCFI69:
 1407              	 .cfi_def_cfa_register 13
 1408              	 
 1409 001a 80BC     	 pop {r7}
 1410              	.LCFI70:
 1411              	 .cfi_restore 7
 1412              	 .cfi_def_cfa_offset 0
 1413 001c 7047     	 bx lr
 1414              	.L67:
 1415 001e 00BF     	 .align 2
 1416              	.L66:
 1417 0020 00400A40 	 .word 1074413568
 1418              	 .cfi_endproc
 1419              	.LFE145:
 1421              	 .section .text.udd_set_address,"ax",%progbits
 1422              	 .align 1
 1423              	 .global udd_set_address
 1424              	 .syntax unified
 1425              	 .thumb
 1426              	 .thumb_func
 1427              	 .fpu softvfp
 1429              	udd_set_address:
 1430              	.LFB146:
 772:.././hal/sam3u1c/udphs_device.c **** 
 773:.././hal/sam3u1c/udphs_device.c **** 
 774:.././hal/sam3u1c/udphs_device.c **** void udd_set_address(uint8_t address)
 775:.././hal/sam3u1c/udphs_device.c **** {
 1431              	 .loc 6 775 0
 1432              	 .cfi_startproc
 1433              	 
 1434              	 
 1435              	 
 1436 0000 80B4     	 push {r7}
 1437              	.LCFI71:
 1438              	 .cfi_def_cfa_offset 4
 1439              	 .cfi_offset 7,-4
 1440 0002 83B0     	 sub sp,sp,#12
 1441              	.LCFI72:
 1442              	 .cfi_def_cfa_offset 16
 1443 0004 00AF     	 add r7,sp,#0
 1444              	.LCFI73:
 1445              	 .cfi_def_cfa_register 7
 1446 0006 0346     	 mov r3,r0
 1447 0008 FB71     	 strb r3,[r7,#7]
 776:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("Addr%d ", address);
 777:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_address();
 1448              	 .loc 6 777 0
 1449 000a 0D4B     	 ldr r3,.L69
 1450 000c 1B68     	 ldr r3,[r3]
 1451 000e 0C4A     	 ldr r2,.L69
 1452 0010 23F08003 	 bic r3,r3,#128
 1453 0014 1360     	 str r3,[r2]
 778:.././hal/sam3u1c/udphs_device.c **** 	udd_configure_address(address);
 1454              	 .loc 6 778 0
 1455 0016 0A4B     	 ldr r3,.L69
 1456 0018 1B68     	 ldr r3,[r3]
 1457 001a 23F07F02 	 bic r2,r3,#127
 1458 001e FB79     	 ldrb r3,[r7,#7]
 1459 0020 03F07F03 	 and r3,r3,#127
 1460 0024 0649     	 ldr r1,.L69
 1461 0026 1343     	 orrs r3,r3,r2
 1462 0028 0B60     	 str r3,[r1]
 779:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_address();
 1463              	 .loc 6 779 0
 1464 002a 054B     	 ldr r3,.L69
 1465 002c 1B68     	 ldr r3,[r3]
 1466 002e 044A     	 ldr r2,.L69
 1467 0030 43F08003 	 orr r3,r3,#128
 1468 0034 1360     	 str r3,[r2]
 780:.././hal/sam3u1c/udphs_device.c **** }
 1469              	 .loc 6 780 0
 1470 0036 00BF     	 nop
 1471 0038 0C37     	 adds r7,r7,#12
 1472              	.LCFI74:
 1473              	 .cfi_def_cfa_offset 4
 1474 003a BD46     	 mov sp,r7
 1475              	.LCFI75:
 1476              	 .cfi_def_cfa_register 13
 1477              	 
 1478 003c 80BC     	 pop {r7}
 1479              	.LCFI76:
 1480              	 .cfi_restore 7
 1481              	 .cfi_def_cfa_offset 0
 1482 003e 7047     	 bx lr
 1483              	.L70:
 1484              	 .align 2
 1485              	.L69:
 1486 0040 00400A40 	 .word 1074413568
 1487              	 .cfi_endproc
 1488              	.LFE146:
 1490              	 .section .text.udd_getaddress,"ax",%progbits
 1491              	 .align 1
 1492              	 .global udd_getaddress
 1493              	 .syntax unified
 1494              	 .thumb
 1495              	 .thumb_func
 1496              	 .fpu softvfp
 1498              	udd_getaddress:
 1499              	.LFB147:
 781:.././hal/sam3u1c/udphs_device.c **** 
 782:.././hal/sam3u1c/udphs_device.c **** 
 783:.././hal/sam3u1c/udphs_device.c **** uint8_t udd_getaddress(void)
 784:.././hal/sam3u1c/udphs_device.c **** {
 1500              	 .loc 6 784 0
 1501              	 .cfi_startproc
 1502              	 
 1503              	 
 1504              	 
 1505 0000 80B4     	 push {r7}
 1506              	.LCFI77:
 1507              	 .cfi_def_cfa_offset 4
 1508              	 .cfi_offset 7,-4
 1509 0002 00AF     	 add r7,sp,#0
 1510              	.LCFI78:
 1511              	 .cfi_def_cfa_register 7
 785:.././hal/sam3u1c/udphs_device.c **** 	return udd_get_configured_address();
 1512              	 .loc 6 785 0
 1513 0004 044B     	 ldr r3,.L73
 1514 0006 1B68     	 ldr r3,[r3]
 1515 0008 DBB2     	 uxtb r3,r3
 1516 000a 03F07F03 	 and r3,r3,#127
 1517 000e DBB2     	 uxtb r3,r3
 786:.././hal/sam3u1c/udphs_device.c **** }
 1518              	 .loc 6 786 0
 1519 0010 1846     	 mov r0,r3
 1520 0012 BD46     	 mov sp,r7
 1521              	.LCFI79:
 1522              	 .cfi_def_cfa_register 13
 1523              	 
 1524 0014 80BC     	 pop {r7}
 1525              	.LCFI80:
 1526              	 .cfi_restore 7
 1527              	 .cfi_def_cfa_offset 0
 1528 0016 7047     	 bx lr
 1529              	.L74:
 1530              	 .align 2
 1531              	.L73:
 1532 0018 00400A40 	 .word 1074413568
 1533              	 .cfi_endproc
 1534              	.LFE147:
 1536              	 .section .text.udd_get_frame_number,"ax",%progbits
 1537              	 .align 1
 1538              	 .global udd_get_frame_number
 1539              	 .syntax unified
 1540              	 .thumb
 1541              	 .thumb_func
 1542              	 .fpu softvfp
 1544              	udd_get_frame_number:
 1545              	.LFB148:
 787:.././hal/sam3u1c/udphs_device.c **** 
 788:.././hal/sam3u1c/udphs_device.c **** 
 789:.././hal/sam3u1c/udphs_device.c **** uint16_t udd_get_frame_number(void)
 790:.././hal/sam3u1c/udphs_device.c **** {
 1546              	 .loc 6 790 0
 1547              	 .cfi_startproc
 1548              	 
 1549              	 
 1550              	 
 1551 0000 80B4     	 push {r7}
 1552              	.LCFI81:
 1553              	 .cfi_def_cfa_offset 4
 1554              	 .cfi_offset 7,-4
 1555 0002 00AF     	 add r7,sp,#0
 1556              	.LCFI82:
 1557              	 .cfi_def_cfa_register 7
 791:.././hal/sam3u1c/udphs_device.c **** 	return udd_frame_number();
 1558              	 .loc 6 791 0
 1559 0004 054B     	 ldr r3,.L77
 1560 0006 5B68     	 ldr r3,[r3,#4]
 1561 0008 DB08     	 lsrs r3,r3,#3
 1562 000a 9BB2     	 uxth r3,r3
 1563 000c C3F30A03 	 ubfx r3,r3,#0,#11
 1564 0010 9BB2     	 uxth r3,r3
 792:.././hal/sam3u1c/udphs_device.c **** }
 1565              	 .loc 6 792 0
 1566 0012 1846     	 mov r0,r3
 1567 0014 BD46     	 mov sp,r7
 1568              	.LCFI83:
 1569              	 .cfi_def_cfa_register 13
 1570              	 
 1571 0016 80BC     	 pop {r7}
 1572              	.LCFI84:
 1573              	 .cfi_restore 7
 1574              	 .cfi_def_cfa_offset 0
 1575 0018 7047     	 bx lr
 1576              	.L78:
 1577 001a 00BF     	 .align 2
 1578              	.L77:
 1579 001c 00400A40 	 .word 1074413568
 1580              	 .cfi_endproc
 1581              	.LFE148:
 1583              	 .section .text.udd_get_micro_frame_number,"ax",%progbits
 1584              	 .align 1
 1585              	 .global udd_get_micro_frame_number
 1586              	 .syntax unified
 1587              	 .thumb
 1588              	 .thumb_func
 1589              	 .fpu softvfp
 1591              	udd_get_micro_frame_number:
 1592              	.LFB149:
 793:.././hal/sam3u1c/udphs_device.c **** 
 794:.././hal/sam3u1c/udphs_device.c **** uint16_t udd_get_micro_frame_number(void)
 795:.././hal/sam3u1c/udphs_device.c **** {
 1593              	 .loc 6 795 0
 1594              	 .cfi_startproc
 1595              	 
 1596              	 
 1597              	 
 1598 0000 80B4     	 push {r7}
 1599              	.LCFI85:
 1600              	 .cfi_def_cfa_offset 4
 1601              	 .cfi_offset 7,-4
 1602 0002 00AF     	 add r7,sp,#0
 1603              	.LCFI86:
 1604              	 .cfi_def_cfa_register 7
 796:.././hal/sam3u1c/udphs_device.c **** 	return udd_micro_frame_number();
 1605              	 .loc 6 796 0
 1606 0004 044B     	 ldr r3,.L81
 1607 0006 5B68     	 ldr r3,[r3,#4]
 1608 0008 9BB2     	 uxth r3,r3
 1609 000a 03F00703 	 and r3,r3,#7
 1610 000e 9BB2     	 uxth r3,r3
 797:.././hal/sam3u1c/udphs_device.c **** }
 1611              	 .loc 6 797 0
 1612 0010 1846     	 mov r0,r3
 1613 0012 BD46     	 mov sp,r7
 1614              	.LCFI87:
 1615              	 .cfi_def_cfa_register 13
 1616              	 
 1617 0014 80BC     	 pop {r7}
 1618              	.LCFI88:
 1619              	 .cfi_restore 7
 1620              	 .cfi_def_cfa_offset 0
 1621 0016 7047     	 bx lr
 1622              	.L82:
 1623              	 .align 2
 1624              	.L81:
 1625 0018 00400A40 	 .word 1074413568
 1626              	 .cfi_endproc
 1627              	.LFE149:
 1629              	 .section .text.udd_send_remotewakeup,"ax",%progbits
 1630              	 .align 1
 1631              	 .global udd_send_remotewakeup
 1632              	 .syntax unified
 1633              	 .thumb
 1634              	 .thumb_func
 1635              	 .fpu softvfp
 1637              	udd_send_remotewakeup:
 1638              	.LFB150:
 798:.././hal/sam3u1c/udphs_device.c **** 
 799:.././hal/sam3u1c/udphs_device.c **** void udd_send_remotewakeup(void)
 800:.././hal/sam3u1c/udphs_device.c **** {
 1639              	 .loc 6 800 0
 1640              	 .cfi_startproc
 1641              	 
 1642              	 
 1643 0000 80B5     	 push {r7,lr}
 1644              	.LCFI89:
 1645              	 .cfi_def_cfa_offset 8
 1646              	 .cfi_offset 7,-8
 1647              	 .cfi_offset 14,-4
 1648 0002 00AF     	 add r7,sp,#0
 1649              	.LCFI90:
 1650              	 .cfi_def_cfa_register 7
 801:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_NO_SLEEP_MGR
 802:.././hal/sam3u1c/udphs_device.c **** 	if (!udd_b_idle)
 1651              	 .loc 6 802 0
 1652 0004 0A4B     	 ldr r3,.L86
 1653 0006 1B78     	 ldrb r3,[r3]
 1654 0008 83F00103 	 eor r3,r3,#1
 1655 000c DBB2     	 uxtb r3,r3
 1656 000e 002B     	 cmp r3,#0
 1657 0010 0BD0     	 beq .L85
 803:.././hal/sam3u1c/udphs_device.c **** #endif
 804:.././hal/sam3u1c/udphs_device.c **** 	{
 805:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("SendWkup\n\r");
 806:.././hal/sam3u1c/udphs_device.c **** 		udd_sleep_mode(true); // Enter in IDLE mode
 1658              	 .loc 6 806 0
 1659 0012 0120     	 movs r0,#1
 1660 0014 074B     	 ldr r3,.L86+4
 1661 0016 9847     	 blx r3
 1662              	.LVL47:
 807:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_periph_ck();
 1663              	 .loc 6 807 0
 1664 0018 1D20     	 movs r0,#29
 1665 001a 074B     	 ldr r3,.L86+8
 1666 001c 9847     	 blx r3
 1667              	.LVL48:
 808:.././hal/sam3u1c/udphs_device.c **** 		udd_initiate_remote_wake_up();
 1668              	 .loc 6 808 0
 1669 001e 074B     	 ldr r3,.L86+12
 1670 0020 1B68     	 ldr r3,[r3]
 1671 0022 064A     	 ldr r2,.L86+12
 1672 0024 43F48063 	 orr r3,r3,#1024
 1673 0028 1360     	 str r3,[r2]
 1674              	.L85:
 809:.././hal/sam3u1c/udphs_device.c **** 	}
 810:.././hal/sam3u1c/udphs_device.c **** }
 1675              	 .loc 6 810 0
 1676 002a 00BF     	 nop
 1677 002c 80BD     	 pop {r7,pc}
 1678              	.L87:
 1679 002e 00BF     	 .align 2
 1680              	.L86:
 1681 0030 00000000 	 .word udd_b_idle
 1682 0034 00000000 	 .word udd_sleep_mode
 1683 0038 00000000 	 .word pmc_enable_periph_clk
 1684 003c 00400A40 	 .word 1074413568
 1685              	 .cfi_endproc
 1686              	.LFE150:
 1688              	 .section .text.udd_set_setup_payload,"ax",%progbits
 1689              	 .align 1
 1690              	 .global udd_set_setup_payload
 1691              	 .syntax unified
 1692              	 .thumb
 1693              	 .thumb_func
 1694              	 .fpu softvfp
 1696              	udd_set_setup_payload:
 1697              	.LFB151:
 811:.././hal/sam3u1c/udphs_device.c **** 
 812:.././hal/sam3u1c/udphs_device.c **** 
 813:.././hal/sam3u1c/udphs_device.c **** void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
 814:.././hal/sam3u1c/udphs_device.c **** {
 1698              	 .loc 6 814 0
 1699              	 .cfi_startproc
 1700              	 
 1701              	 
 1702              	 
 1703 0000 80B4     	 push {r7}
 1704              	.LCFI91:
 1705              	 .cfi_def_cfa_offset 4
 1706              	 .cfi_offset 7,-4
 1707 0002 83B0     	 sub sp,sp,#12
 1708              	.LCFI92:
 1709              	 .cfi_def_cfa_offset 16
 1710 0004 00AF     	 add r7,sp,#0
 1711              	.LCFI93:
 1712              	 .cfi_def_cfa_register 7
 1713 0006 7860     	 str r0,[r7,#4]
 1714 0008 0B46     	 mov r3,r1
 1715 000a 7B80     	 strh r3,[r7,#2]
 815:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.payload = payload;
 1716              	 .loc 6 815 0
 1717 000c 054A     	 ldr r2,.L89
 1718 000e 7B68     	 ldr r3,[r7,#4]
 1719 0010 9360     	 str r3,[r2,#8]
 816:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.payload_size = payload_size;
 1720              	 .loc 6 816 0
 1721 0012 044A     	 ldr r2,.L89
 1722 0014 7B88     	 ldrh r3,[r7,#2]
 1723 0016 9381     	 strh r3,[r2,#12]
 817:.././hal/sam3u1c/udphs_device.c **** }
 1724              	 .loc 6 817 0
 1725 0018 00BF     	 nop
 1726 001a 0C37     	 adds r7,r7,#12
 1727              	.LCFI94:
 1728              	 .cfi_def_cfa_offset 4
 1729 001c BD46     	 mov sp,r7
 1730              	.LCFI95:
 1731              	 .cfi_def_cfa_register 13
 1732              	 
 1733 001e 80BC     	 pop {r7}
 1734              	.LCFI96:
 1735              	 .cfi_restore 7
 1736              	 .cfi_def_cfa_offset 0
 1737 0020 7047     	 bx lr
 1738              	.L90:
 1739 0022 00BF     	 .align 2
 1740              	.L89:
 1741 0024 00000000 	 .word udd_g_ctrlreq
 1742              	 .cfi_endproc
 1743              	.LFE151:
 1745              	 .section .text.udd_ep_alloc,"ax",%progbits
 1746              	 .align 1
 1747              	 .global udd_ep_alloc
 1748              	 .syntax unified
 1749              	 .thumb
 1750              	 .thumb_func
 1751              	 .fpu softvfp
 1753              	udd_ep_alloc:
 1754              	.LFB152:
 818:.././hal/sam3u1c/udphs_device.c **** 
 819:.././hal/sam3u1c/udphs_device.c **** 
 820:.././hal/sam3u1c/udphs_device.c **** #if (0!=USB_DEVICE_MAX_EP)
 821:.././hal/sam3u1c/udphs_device.c **** bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
 822:.././hal/sam3u1c/udphs_device.c **** 		uint16_t MaxEndpointSize)
 823:.././hal/sam3u1c/udphs_device.c **** {
 1755              	 .loc 6 823 0
 1756              	 .cfi_startproc
 1757              	 
 1758              	 
 1759 0000 90B5     	 push {r4,r7,lr}
 1760              	.LCFI97:
 1761              	 .cfi_def_cfa_offset 12
 1762              	 .cfi_offset 4,-12
 1763              	 .cfi_offset 7,-8
 1764              	 .cfi_offset 14,-4
 1765 0002 89B0     	 sub sp,sp,#36
 1766              	.LCFI98:
 1767              	 .cfi_def_cfa_offset 48
 1768 0004 02AF     	 add r7,sp,#8
 1769              	.LCFI99:
 1770              	 .cfi_def_cfa 7,40
 1771 0006 0346     	 mov r3,r0
 1772 0008 FB71     	 strb r3,[r7,#7]
 1773 000a 0B46     	 mov r3,r1
 1774 000c BB71     	 strb r3,[r7,#6]
 1775 000e 1346     	 mov r3,r2
 1776 0010 BB80     	 strh r3,[r7,#4]
 824:.././hal/sam3u1c/udphs_device.c **** 	bool b_dir_in;
 825:.././hal/sam3u1c/udphs_device.c **** 	uint16_t ep_allocated;
 826:.././hal/sam3u1c/udphs_device.c **** 	uint8_t nb_bank, bank, nb_tran = 0, i;
 1777              	 .loc 6 826 0
 1778 0012 0023     	 movs r3,#0
 1779 0014 FB74     	 strb r3,[r7,#19]
 827:.././hal/sam3u1c/udphs_device.c **** 	bool b_iso_hbw = false;
 1780              	 .loc 6 827 0
 1781 0016 0023     	 movs r3,#0
 1782 0018 7B74     	 strb r3,[r7,#17]
 828:.././hal/sam3u1c/udphs_device.c **** 
 829:.././hal/sam3u1c/udphs_device.c **** 	b_dir_in = ep & USB_EP_DIR_IN;
 1783              	 .loc 6 829 0
 1784 001a FB79     	 ldrb r3,[r7,#7]
 1785 001c 03F08003 	 and r3,r3,#128
 1786 0020 002B     	 cmp r3,#0
 1787 0022 14BF     	 ite ne
 1788 0024 0123     	 movne r3,#1
 1789 0026 0023     	 moveq r3,#0
 1790 0028 3B74     	 strb r3,[r7,#16]
 830:.././hal/sam3u1c/udphs_device.c **** 	ep = ep & USB_EP_ADDR_MASK;
 1791              	 .loc 6 830 0
 1792 002a FB79     	 ldrb r3,[r7,#7]
 1793 002c 03F00F03 	 and r3,r3,#15
 1794 0030 FB71     	 strb r3,[r7,#7]
 831:.././hal/sam3u1c/udphs_device.c **** 
 832:.././hal/sam3u1c/udphs_device.c **** 	if (ep > USB_DEVICE_MAX_EP) {
 1795              	 .loc 6 832 0
 1796 0032 FB79     	 ldrb r3,[r7,#7]
 1797 0034 022B     	 cmp r3,#2
 1798 0036 01D9     	 bls .L92
 833:.././hal/sam3u1c/udphs_device.c **** 		return false;
 1799              	 .loc 6 833 0
 1800 0038 0023     	 movs r3,#0
 1801 003a AEE1     	 b .L93
 1802              	.L92:
 834:.././hal/sam3u1c/udphs_device.c **** 	}
 835:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_enabled(ep)) {
 1803              	 .loc 6 835 0
 1804 003c B04A     	 ldr r2,.L134
 1805 003e FB79     	 ldrb r3,[r7,#7]
 1806 0040 5B01     	 lsls r3,r3,#5
 1807 0042 1344     	 add r3,r3,r2
 1808 0044 03F58673 	 add r3,r3,#268
 1809 0048 1B68     	 ldr r3,[r3]
 1810 004a 03F00103 	 and r3,r3,#1
 1811 004e 002B     	 cmp r3,#0
 1812 0050 01D0     	 beq .L94
 836:.././hal/sam3u1c/udphs_device.c **** 		return false;
 1813              	 .loc 6 836 0
 1814 0052 0023     	 movs r3,#0
 1815 0054 A1E1     	 b .L93
 1816              	.L94:
 837:.././hal/sam3u1c/udphs_device.c **** 	}
 838:.././hal/sam3u1c/udphs_device.c **** 
 839:.././hal/sam3u1c/udphs_device.c **** 	// Bank choice
 840:.././hal/sam3u1c/udphs_device.c **** 	switch (bmAttributes & USB_EP_TYPE_MASK) {
 1817              	 .loc 6 840 0
 1818 0056 BB79     	 ldrb r3,[r7,#6]
 1819 0058 03F00303 	 and r3,r3,#3
 1820 005c 022B     	 cmp r3,#2
 1821 005e 1AD0     	 beq .L96
 1822 0060 032B     	 cmp r3,#3
 1823 0062 15D0     	 beq .L97
 1824 0064 012B     	 cmp r3,#1
 1825 0066 19D1     	 bne .L130
 841:.././hal/sam3u1c/udphs_device.c **** 	case USB_EP_TYPE_ISOCHRONOUS:
 842:.././hal/sam3u1c/udphs_device.c **** 		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
 1826              	 .loc 6 842 0
 1827 0068 FB79     	 ldrb r3,[r7,#7]
 1828 006a 002B     	 cmp r3,#0
 1829 006c 07D0     	 beq .L99
 1830              	 .loc 6 842 0 is_stmt 0 discriminator 1
 1831 006e FB79     	 ldrb r3,[r7,#7]
 1832 0070 032B     	 cmp r3,#3
 1833 0072 04D0     	 beq .L99
 1834              	 .loc 6 842 0 discriminator 3
 1835 0074 FB79     	 ldrb r3,[r7,#7]
 1836 0076 042B     	 cmp r3,#4
 1837 0078 01D0     	 beq .L99
 1838              	 .loc 6 842 0 discriminator 5
 1839 007a 0123     	 movs r3,#1
 1840 007c 00E0     	 b .L100
 1841              	.L99:
 1842              	 .loc 6 842 0 discriminator 6
 1843 007e 0023     	 movs r3,#0
 1844              	.L100:
 1845              	 .loc 6 842 0 discriminator 8
 1846 0080 7B74     	 strb r3,[r7,#17]
 1847 0082 7B7C     	 ldrb r3,[r7,#17]
 1848 0084 03F00103 	 and r3,r3,#1
 1849 0088 7B74     	 strb r3,[r7,#17]
 843:.././hal/sam3u1c/udphs_device.c **** 		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
 1850              	 .loc 6 843 0 is_stmt 1 discriminator 8
 1851 008a 0123     	 movs r3,#1
 1852 008c 7B75     	 strb r3,[r7,#21]
 844:.././hal/sam3u1c/udphs_device.c **** 		break;
 1853              	 .loc 6 844 0 discriminator 8
 1854 008e 07E0     	 b .L101
 1855              	.L97:
 845:.././hal/sam3u1c/udphs_device.c **** 	case USB_EP_TYPE_INTERRUPT:
 846:.././hal/sam3u1c/udphs_device.c **** 		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
 1856              	 .loc 6 846 0
 1857 0090 0123     	 movs r3,#1
 1858 0092 7B75     	 strb r3,[r7,#21]
 847:.././hal/sam3u1c/udphs_device.c **** 		break;
 1859              	 .loc 6 847 0
 1860 0094 04E0     	 b .L101
 1861              	.L96:
 848:.././hal/sam3u1c/udphs_device.c **** 	case USB_EP_TYPE_BULK:
 849:.././hal/sam3u1c/udphs_device.c **** 		nb_bank = UDD_BULK_NB_BANK(ep);
 1862              	 .loc 6 849 0
 1863 0096 0223     	 movs r3,#2
 1864 0098 7B75     	 strb r3,[r7,#21]
 850:.././hal/sam3u1c/udphs_device.c **** 		break;
 1865              	 .loc 6 850 0
 1866 009a 01E0     	 b .L101
 1867              	.L130:
 851:.././hal/sam3u1c/udphs_device.c **** 	default:
 852:.././hal/sam3u1c/udphs_device.c **** 		Assert(false);
 853:.././hal/sam3u1c/udphs_device.c **** 		return false;
 1868              	 .loc 6 853 0
 1869 009c 0023     	 movs r3,#0
 1870 009e 7CE1     	 b .L93
 1871              	.L101:
 854:.././hal/sam3u1c/udphs_device.c **** 	}
 855:.././hal/sam3u1c/udphs_device.c **** 	switch (nb_bank) {
 1872              	 .loc 6 855 0
 1873 00a0 7B7D     	 ldrb r3,[r7,#21]
 1874 00a2 022B     	 cmp r3,#2
 1875 00a4 06D0     	 beq .L103
 1876 00a6 032B     	 cmp r3,#3
 1877 00a8 07D0     	 beq .L104
 1878 00aa 012B     	 cmp r3,#1
 1879 00ac 08D1     	 bne .L131
 856:.././hal/sam3u1c/udphs_device.c **** 	case 1:
 857:.././hal/sam3u1c/udphs_device.c **** 		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
 1880              	 .loc 6 857 0
 1881 00ae 0123     	 movs r3,#1
 1882 00b0 3B75     	 strb r3,[r7,#20]
 858:.././hal/sam3u1c/udphs_device.c **** 		break;
 1883              	 .loc 6 858 0
 1884 00b2 07E0     	 b .L106
 1885              	.L103:
 859:.././hal/sam3u1c/udphs_device.c **** 	case 2:
 860:.././hal/sam3u1c/udphs_device.c **** 		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
 1886              	 .loc 6 860 0
 1887 00b4 0223     	 movs r3,#2
 1888 00b6 3B75     	 strb r3,[r7,#20]
 861:.././hal/sam3u1c/udphs_device.c **** 		break;
 1889              	 .loc 6 861 0
 1890 00b8 04E0     	 b .L106
 1891              	.L104:
 862:.././hal/sam3u1c/udphs_device.c **** 	case 3:
 863:.././hal/sam3u1c/udphs_device.c **** 		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
 1892              	 .loc 6 863 0
 1893 00ba 0323     	 movs r3,#3
 1894 00bc 3B75     	 strb r3,[r7,#20]
 864:.././hal/sam3u1c/udphs_device.c **** 		break;
 1895              	 .loc 6 864 0
 1896 00be 01E0     	 b .L106
 1897              	.L131:
 865:.././hal/sam3u1c/udphs_device.c **** 	default:
 866:.././hal/sam3u1c/udphs_device.c **** 		Assert(false);
 867:.././hal/sam3u1c/udphs_device.c **** 		return false;
 1898              	 .loc 6 867 0
 1899 00c0 0023     	 movs r3,#0
 1900 00c2 6AE1     	 b .L93
 1901              	.L106:
 868:.././hal/sam3u1c/udphs_device.c **** 	}
 869:.././hal/sam3u1c/udphs_device.c **** 	if (b_iso_hbw) {
 1902              	 .loc 6 869 0
 1903 00c4 7B7C     	 ldrb r3,[r7,#17]
 1904 00c6 002B     	 cmp r3,#0
 1905 00c8 17D0     	 beq .L107
 870:.././hal/sam3u1c/udphs_device.c **** 		switch(MaxEndpointSize & (0x3u << 11)) {
 1906              	 .loc 6 870 0
 1907 00ca BB88     	 ldrh r3,[r7,#4]
 1908 00cc 03F4C053 	 and r3,r3,#6144
 1909 00d0 B3F5006F 	 cmp r3,#2048
 1910 00d4 03D0     	 beq .L109
 1911 00d6 B3F5805F 	 cmp r3,#4096
 1912 00da 03D0     	 beq .L110
 1913 00dc 05E0     	 b .L132
 1914              	.L109:
 871:.././hal/sam3u1c/udphs_device.c **** 		case (0x1u << 11):
 872:.././hal/sam3u1c/udphs_device.c **** 			nb_tran = 2;
 1915              	 .loc 6 872 0
 1916 00de 0223     	 movs r3,#2
 1917 00e0 FB74     	 strb r3,[r7,#19]
 873:.././hal/sam3u1c/udphs_device.c **** 			break;
 1918              	 .loc 6 873 0
 1919 00e2 05E0     	 b .L111
 1920              	.L110:
 874:.././hal/sam3u1c/udphs_device.c **** 		case (0x2u << 11):
 875:.././hal/sam3u1c/udphs_device.c **** 			nb_tran = 3;
 1921              	 .loc 6 875 0
 1922 00e4 0323     	 movs r3,#3
 1923 00e6 FB74     	 strb r3,[r7,#19]
 876:.././hal/sam3u1c/udphs_device.c **** 			break;
 1924              	 .loc 6 876 0
 1925 00e8 02E0     	 b .L111
 1926              	.L132:
 877:.././hal/sam3u1c/udphs_device.c **** 		default:
 878:.././hal/sam3u1c/udphs_device.c **** 			nb_tran = 1;
 1927              	 .loc 6 878 0
 1928 00ea 0123     	 movs r3,#1
 1929 00ec FB74     	 strb r3,[r7,#19]
 879:.././hal/sam3u1c/udphs_device.c **** 			break;
 1930              	 .loc 6 879 0
 1931 00ee 00BF     	 nop
 1932              	.L111:
 880:.././hal/sam3u1c/udphs_device.c **** 		}
 881:.././hal/sam3u1c/udphs_device.c **** 		MaxEndpointSize &= ~(0x3u << 11);
 1933              	 .loc 6 881 0
 1934 00f0 BB88     	 ldrh r3,[r7,#4]
 1935 00f2 23F4C053 	 bic r3,r3,#6144
 1936 00f6 BB80     	 strh r3,[r7,#4]
 1937 00f8 06E0     	 b .L112
 1938              	.L107:
 882:.././hal/sam3u1c/udphs_device.c **** 	} else if (MaxEndpointSize & (0x3u << 11)) {
 1939              	 .loc 6 882 0
 1940 00fa BB88     	 ldrh r3,[r7,#4]
 1941 00fc 03F4C053 	 and r3,r3,#6144
 1942 0100 002B     	 cmp r3,#0
 1943 0102 01D0     	 beq .L112
 883:.././hal/sam3u1c/udphs_device.c **** 		// High BW not supported
 884:.././hal/sam3u1c/udphs_device.c **** 		return false;
 1944              	 .loc 6 884 0
 1945 0104 0023     	 movs r3,#0
 1946 0106 48E1     	 b .L93
 1947              	.L112:
 885:.././hal/sam3u1c/udphs_device.c **** 	}
 886:.././hal/sam3u1c/udphs_device.c **** 
 887:.././hal/sam3u1c/udphs_device.c **** 	Assert(MaxEndpointSize <= udd_get_endpoint_size_max(ep));
 888:.././hal/sam3u1c/udphs_device.c **** 	Assert(nb_bank <= udd_get_endpoint_bank_max_nbr(ep));
 889:.././hal/sam3u1c/udphs_device.c **** 
 890:.././hal/sam3u1c/udphs_device.c **** 	// Set configuration of new endpoint
 891:.././hal/sam3u1c/udphs_device.c **** 	// Note: NB_TRANS is at maximum for isochronous endpoint, else 0 (ignored).
 892:.././hal/sam3u1c/udphs_device.c **** 	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
 1948              	 .loc 6 892 0
 1949 0108 7D4A     	 ldr r2,.L134
 1950 010a FB79     	 ldrb r3,[r7,#7]
 1951 010c 0833     	 adds r3,r3,#8
 1952 010e 5B01     	 lsls r3,r3,#5
 1953 0110 1344     	 add r3,r3,r2
 1954 0112 1B68     	 ldr r3,[r3]
 1955 0114 23F47F73 	 bic r3,r3,#1020
 1956 0118 23F00303 	 bic r3,r3,#3
 1957 011c BA79     	 ldrb r2,[r7,#6]
 1958 011e 1201     	 lsls r2,r2,#4
 1959 0120 02F03002 	 and r2,r2,#48
 1960 0124 397C     	 ldrb r1,[r7,#16]
 1961 0126 0029     	 cmp r1,#0
 1962 0128 01D0     	 beq .L113
 1963              	 .loc 6 892 0 is_stmt 0 discriminator 1
 1964 012a 0821     	 movs r1,#8
 1965 012c 00E0     	 b .L114
 1966              	.L113:
 1967              	 .loc 6 892 0 discriminator 2
 1968 012e 0021     	 movs r1,#0
 1969              	.L114:
 1970              	 .loc 6 892 0 discriminator 4
 1971 0130 1143     	 orrs r1,r1,r2
 1972 0132 BA88     	 ldrh r2,[r7,#4]
 1973 0134 B2F5806F 	 cmp r2,#1024
 1974 0138 07D2     	 bcs .L115
 1975              	 .loc 6 892 0 discriminator 5
 1976 013a BA88     	 ldrh r2,[r7,#4]
 1977 013c 082A     	 cmp r2,#8
 1978 013e 38BF     	 it cc
 1979 0140 0822     	 movcc r2,#8
 1980 0142 92B2     	 uxth r2,r2
 1981 0144 5200     	 lsls r2,r2,#1
 1982 0146 013A     	 subs r2,r2,#1
 1983 0148 01E0     	 b .L116
 1984              	.L115:
 1985              	 .loc 6 892 0 discriminator 6
 1986 014a 40F2FF72 	 movw r2,#2047
 1987              	.L116:
 1988              	 .loc 6 892 0 discriminator 8
 1989 014e B2FA82F2 	 clz r2,r2
 1990 0152 C2F11C02 	 rsb r2,r2,#28
 1991 0156 1143     	 orrs r1,r1,r2
 1992 0158 3A7D     	 ldrb r2,[r7,#20]
 1993 015a 9201     	 lsls r2,r2,#6
 1994 015c D2B2     	 uxtb r2,r2
 1995 015e 1143     	 orrs r1,r1,r2
 1996 0160 7A7C     	 ldrb r2,[r7,#17]
 1997 0162 002A     	 cmp r2,#0
 1998 0164 04D0     	 beq .L117
 1999              	 .loc 6 892 0 discriminator 9
 2000 0166 FA7C     	 ldrb r2,[r7,#19]
 2001 0168 1202     	 lsls r2,r2,#8
 2002 016a 02F44072 	 and r2,r2,#768
 2003 016e 00E0     	 b .L118
 2004              	.L117:
 2005              	 .loc 6 892 0 discriminator 10
 2006 0170 0022     	 movs r2,#0
 2007              	.L118:
 2008              	 .loc 6 892 0 discriminator 12
 2009 0172 0A43     	 orrs r2,r2,r1
 2010 0174 C2F30902 	 ubfx r2,r2,#0,#10
 2011 0178 6148     	 ldr r0,.L134
 2012 017a F979     	 ldrb r1,[r7,#7]
 2013 017c 1A43     	 orrs r2,r2,r3
 2014 017e 01F10803 	 add r3,r1,#8
 2015 0182 5B01     	 lsls r3,r3,#5
 2016 0184 0344     	 add r3,r3,r0
 2017 0186 1A60     	 str r2,[r3]
 893:.././hal/sam3u1c/udphs_device.c **** 			MaxEndpointSize, bank, (b_iso_hbw)?nb_tran:0);
 894:.././hal/sam3u1c/udphs_device.c **** 	if (!Is_udd_endpoint_mapped(ep)) {
 2018              	 .loc 6 894 0 is_stmt 1 discriminator 12
 2019 0188 5D4A     	 ldr r2,.L134
 2020 018a FB79     	 ldrb r3,[r7,#7]
 2021 018c 0833     	 adds r3,r3,#8
 2022 018e 5B01     	 lsls r3,r3,#5
 2023 0190 1344     	 add r3,r3,r2
 2024 0192 1B68     	 ldr r3,[r3]
 2025 0194 002B     	 cmp r3,#0
 2026 0196 01DB     	 blt .L119
 895:.././hal/sam3u1c/udphs_device.c **** 		return false;
 2027              	 .loc 6 895 0
 2028 0198 0023     	 movs r3,#0
 2029 019a FEE0     	 b .L93
 2030              	.L119:
 896:.././hal/sam3u1c/udphs_device.c **** 	}
 897:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_endpoint(ep);
 2031              	 .loc 6 897 0
 2032 019c 584A     	 ldr r2,.L134
 2033 019e FB79     	 ldrb r3,[r7,#7]
 2034 01a0 0833     	 adds r3,r3,#8
 2035 01a2 5B01     	 lsls r3,r3,#5
 2036 01a4 1344     	 add r3,r3,r2
 2037 01a6 0433     	 adds r3,r3,#4
 2038 01a8 0122     	 movs r2,#1
 2039 01aa 1A60     	 str r2,[r3]
 898:.././hal/sam3u1c/udphs_device.c **** 
 899:.././hal/sam3u1c/udphs_device.c **** 	// To avoid conflict during reorganization of the DPRAM
 900:.././hal/sam3u1c/udphs_device.c **** 	// the superior endpoint must be unallocated and reallocated
 901:.././hal/sam3u1c/udphs_device.c **** 	ep_allocated = 0;
 2040              	 .loc 6 901 0
 2041 01ac 0023     	 movs r3,#0
 2042 01ae FB82     	 strh r3,[r7,#22]
 902:.././hal/sam3u1c/udphs_device.c **** 
 903:.././hal/sam3u1c/udphs_device.c **** 	// Unalloc endpoints superior
 904:.././hal/sam3u1c/udphs_device.c **** 	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
 2043              	 .loc 6 904 0
 2044 01b0 0223     	 movs r3,#2
 2045 01b2 BB74     	 strb r3,[r7,#18]
 2046 01b4 39E0     	 b .L120
 2047              	.L122:
 905:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_endpoint_enabled(i)) {
 2048              	 .loc 6 905 0
 2049 01b6 524A     	 ldr r2,.L134
 2050 01b8 BB7C     	 ldrb r3,[r7,#18]
 2051 01ba 5B01     	 lsls r3,r3,#5
 2052 01bc 1344     	 add r3,r3,r2
 2053 01be 03F58673 	 add r3,r3,#268
 2054 01c2 1B68     	 ldr r3,[r3]
 2055 01c4 03F00103 	 and r3,r3,#1
 2056 01c8 002B     	 cmp r3,#0
 2057 01ca 2BD0     	 beq .L121
 906:.././hal/sam3u1c/udphs_device.c **** 			// Save number of bank value
 907:.././hal/sam3u1c/udphs_device.c **** 			bank = udd_get_endpoint_bank(i);
 2058              	 .loc 6 907 0
 2059 01cc 4C4A     	 ldr r2,.L134
 2060 01ce BB7C     	 ldrb r3,[r7,#18]
 2061 01d0 0833     	 adds r3,r3,#8
 2062 01d2 5B01     	 lsls r3,r3,#5
 2063 01d4 1344     	 add r3,r3,r2
 2064 01d6 1B68     	 ldr r3,[r3]
 2065 01d8 9B09     	 lsrs r3,r3,#6
 2066 01da DBB2     	 uxtb r3,r3
 2067 01dc 03F00303 	 and r3,r3,#3
 2068 01e0 3B75     	 strb r3,[r7,#20]
 908:.././hal/sam3u1c/udphs_device.c **** 			ep_allocated |=  bank << (i * 2);
 2069              	 .loc 6 908 0
 2070 01e2 3A7D     	 ldrb r2,[r7,#20]
 2071 01e4 BB7C     	 ldrb r3,[r7,#18]
 2072 01e6 5B00     	 lsls r3,r3,#1
 2073 01e8 02FA03F3 	 lsl r3,r2,r3
 2074 01ec 1AB2     	 sxth r2,r3
 2075 01ee B7F91630 	 ldrsh r3,[r7,#22]
 2076 01f2 1343     	 orrs r3,r3,r2
 2077 01f4 1BB2     	 sxth r3,r3
 2078 01f6 FB82     	 strh r3,[r7,#22]
 909:.././hal/sam3u1c/udphs_device.c **** 			// Disable and unallocate endpoint
 910:.././hal/sam3u1c/udphs_device.c **** 			udd_disable_endpoint(i);
 2079              	 .loc 6 910 0
 2080 01f8 414A     	 ldr r2,.L134
 2081 01fa BB7C     	 ldrb r3,[r7,#18]
 2082 01fc 5B01     	 lsls r3,r3,#5
 2083 01fe 1344     	 add r3,r3,r2
 2084 0200 03F58473 	 add r3,r3,#264
 2085 0204 0122     	 movs r2,#1
 2086 0206 1A60     	 str r2,[r3]
 911:.././hal/sam3u1c/udphs_device.c **** 			udd_configure_endpoint_bank(i, 0);
 2087              	 .loc 6 911 0
 2088 0208 3D4A     	 ldr r2,.L134
 2089 020a BB7C     	 ldrb r3,[r7,#18]
 2090 020c 0833     	 adds r3,r3,#8
 2091 020e 5B01     	 lsls r3,r3,#5
 2092 0210 1344     	 add r3,r3,r2
 2093 0212 1A68     	 ldr r2,[r3]
 2094 0214 3A49     	 ldr r1,.L134
 2095 0216 BB7C     	 ldrb r3,[r7,#18]
 2096 0218 22F0C002 	 bic r2,r2,#192
 2097 021c 0833     	 adds r3,r3,#8
 2098 021e 5B01     	 lsls r3,r3,#5
 2099 0220 0B44     	 add r3,r3,r1
 2100 0222 1A60     	 str r2,[r3]
 2101              	.L121:
 904:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_endpoint_enabled(i)) {
 2102              	 .loc 6 904 0 discriminator 2
 2103 0224 BB7C     	 ldrb r3,[r7,#18]
 2104 0226 013B     	 subs r3,r3,#1
 2105 0228 BB74     	 strb r3,[r7,#18]
 2106              	.L120:
 904:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_endpoint_enabled(i)) {
 2107              	 .loc 6 904 0 is_stmt 0 discriminator 1
 2108 022a BA7C     	 ldrb r2,[r7,#18]
 2109 022c FB79     	 ldrb r3,[r7,#7]
 2110 022e 9A42     	 cmp r2,r3
 2111 0230 C1D2     	 bcs .L122
 912:.././hal/sam3u1c/udphs_device.c **** 
 913:.././hal/sam3u1c/udphs_device.c **** 		}
 914:.././hal/sam3u1c/udphs_device.c **** 	}
 915:.././hal/sam3u1c/udphs_device.c **** 
 916:.././hal/sam3u1c/udphs_device.c **** 	// Realloc/Enable endpoints
 917:.././hal/sam3u1c/udphs_device.c **** 	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
 2112              	 .loc 6 917 0 is_stmt 1
 2113 0232 FB79     	 ldrb r3,[r7,#7]
 2114 0234 BB74     	 strb r3,[r7,#18]
 2115 0236 ABE0     	 b .L123
 2116              	.L129:
 2117              	.LBB30:
 918:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
 2118              	 .loc 6 918 0
 2119 0238 BB7C     	 ldrb r3,[r7,#18]
 2120 023a 5A1E     	 subs r2,r3,#1
 2121 023c 1346     	 mov r3,r2
 2122 023e 5B00     	 lsls r3,r3,#1
 2123 0240 1344     	 add r3,r3,r2
 2124 0242 DB00     	 lsls r3,r3,#3
 2125 0244 2F4A     	 ldr r2,.L134+4
 2126 0246 1344     	 add r3,r3,r2
 2127 0248 FB60     	 str r3,[r7,#12]
 919:.././hal/sam3u1c/udphs_device.c **** 		bool b_restart = ptr_job->busy;
 2128              	 .loc 6 919 0
 2129 024a FB68     	 ldr r3,[r7,#12]
 2130 024c 1B7D     	 ldrb r3,[r3,#20]
 2131 024e C3F30003 	 ubfx r3,r3,#0,#1
 2132 0252 DBB2     	 uxtb r3,r3
 2133 0254 002B     	 cmp r3,#0
 2134 0256 14BF     	 ite ne
 2135 0258 0123     	 movne r3,#1
 2136 025a 0023     	 moveq r3,#0
 2137 025c FB72     	 strb r3,[r7,#11]
 920:.././hal/sam3u1c/udphs_device.c **** 		// Unallocated banks?
 921:.././hal/sam3u1c/udphs_device.c **** 		bank = (ep_allocated >> (i * 2)) & 0x03;
 2138              	 .loc 6 921 0
 2139 025e FA8A     	 ldrh r2,[r7,#22]
 2140 0260 BB7C     	 ldrb r3,[r7,#18]
 2141 0262 5B00     	 lsls r3,r3,#1
 2142 0264 42FA03F3 	 asr r3,r2,r3
 2143 0268 DBB2     	 uxtb r3,r3
 2144 026a 03F00303 	 and r3,r3,#3
 2145 026e 3B75     	 strb r3,[r7,#20]
 922:.././hal/sam3u1c/udphs_device.c **** 		if (bank == 0) {
 2146              	 .loc 6 922 0
 2147 0270 3B7D     	 ldrb r3,[r7,#20]
 2148 0272 002B     	 cmp r3,#0
 2149 0274 00F08880 	 beq .L133
 923:.././hal/sam3u1c/udphs_device.c **** 			continue;
 924:.././hal/sam3u1c/udphs_device.c **** 		}
 925:.././hal/sam3u1c/udphs_device.c **** 		// Restart running job because
 926:.././hal/sam3u1c/udphs_device.c **** 		// memory window slides up and its data is lost
 927:.././hal/sam3u1c/udphs_device.c **** 		ptr_job->busy = false;
 2150              	 .loc 6 927 0
 2151 0278 FA68     	 ldr r2,[r7,#12]
 2152 027a 137D     	 ldrb r3,[r2,#20]
 2153 027c 6FF30003 	 bfc r3,#0,#1
 2154 0280 1375     	 strb r3,[r2,#20]
 928:.././hal/sam3u1c/udphs_device.c **** 		// Re-allocate memory
 929:.././hal/sam3u1c/udphs_device.c **** 		udd_configure_endpoint_bank(i, bank);
 2155              	 .loc 6 929 0
 2156 0282 1F4A     	 ldr r2,.L134
 2157 0284 BB7C     	 ldrb r3,[r7,#18]
 2158 0286 0833     	 adds r3,r3,#8
 2159 0288 5B01     	 lsls r3,r3,#5
 2160 028a 1344     	 add r3,r3,r2
 2161 028c 1B68     	 ldr r3,[r3]
 2162 028e 23F0C001 	 bic r1,r3,#192
 2163 0292 3B7D     	 ldrb r3,[r7,#20]
 2164 0294 9B01     	 lsls r3,r3,#6
 2165 0296 DAB2     	 uxtb r2,r3
 2166 0298 1948     	 ldr r0,.L134
 2167 029a BB7C     	 ldrb r3,[r7,#18]
 2168 029c 0A43     	 orrs r2,r2,r1
 2169 029e 0833     	 adds r3,r3,#8
 2170 02a0 5B01     	 lsls r3,r3,#5
 2171 02a2 0344     	 add r3,r3,r0
 2172 02a4 1A60     	 str r2,[r3]
 930:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_endpoint(i);
 2173              	 .loc 6 930 0
 2174 02a6 164A     	 ldr r2,.L134
 2175 02a8 BB7C     	 ldrb r3,[r7,#18]
 2176 02aa 0833     	 adds r3,r3,#8
 2177 02ac 5B01     	 lsls r3,r3,#5
 2178 02ae 1344     	 add r3,r3,r2
 2179 02b0 0433     	 adds r3,r3,#4
 2180 02b2 0122     	 movs r2,#1
 2181 02b4 1A60     	 str r2,[r3]
 931:.././hal/sam3u1c/udphs_device.c **** 		if (!Is_udd_endpoint_mapped(i)) {
 2182              	 .loc 6 931 0
 2183 02b6 124A     	 ldr r2,.L134
 2184 02b8 BB7C     	 ldrb r3,[r7,#18]
 2185 02ba 0833     	 adds r3,r3,#8
 2186 02bc 5B01     	 lsls r3,r3,#5
 2187 02be 1344     	 add r3,r3,r2
 2188 02c0 1B68     	 ldr r3,[r3]
 2189 02c2 002B     	 cmp r3,#0
 2190 02c4 20DB     	 blt .L126
 932:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("ErrRealloc%d-JobE ", i);
 933:.././hal/sam3u1c/udphs_device.c **** 			if (NULL == ptr_job->call_trans) {
 2191              	 .loc 6 933 0
 2192 02c6 FB68     	 ldr r3,[r7,#12]
 2193 02c8 1B68     	 ldr r3,[r3]
 2194 02ca 002B     	 cmp r3,#0
 2195 02cc 01D1     	 bne .L127
 934:.././hal/sam3u1c/udphs_device.c **** 				return false;
 2196              	 .loc 6 934 0
 2197 02ce 0023     	 movs r3,#0
 2198 02d0 63E0     	 b .L93
 2199              	.L127:
 935:.././hal/sam3u1c/udphs_device.c **** 			}
 936:.././hal/sam3u1c/udphs_device.c **** 			if (Is_udd_endpoint_in(i)) {
 2200              	 .loc 6 936 0
 2201 02d2 0B4A     	 ldr r2,.L134
 2202 02d4 BB7C     	 ldrb r3,[r7,#18]
 2203 02d6 0833     	 adds r3,r3,#8
 2204 02d8 5B01     	 lsls r3,r3,#5
 2205 02da 1344     	 add r3,r3,r2
 2206 02dc 1B68     	 ldr r3,[r3]
 2207 02de 03F00803 	 and r3,r3,#8
 2208 02e2 002B     	 cmp r3,#0
 2209 02e4 03D0     	 beq .L128
 937:.././hal/sam3u1c/udphs_device.c **** 				i |= USB_EP_DIR_IN;
 2210              	 .loc 6 937 0
 2211 02e6 BB7C     	 ldrb r3,[r7,#18]
 2212 02e8 63F07F03 	 orn r3,r3,#127
 2213 02ec BB74     	 strb r3,[r7,#18]
 2214              	.L128:
 938:.././hal/sam3u1c/udphs_device.c **** 			}
 939:.././hal/sam3u1c/udphs_device.c **** 			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
 2215              	 .loc 6 939 0
 2216 02ee FB68     	 ldr r3,[r7,#12]
 2217 02f0 1B68     	 ldr r3,[r3]
 2218 02f2 FA68     	 ldr r2,[r7,#12]
 2219 02f4 D168     	 ldr r1,[r2,#12]
 2220 02f6 BA7C     	 ldrb r2,[r7,#18]
 2221 02f8 0120     	 movs r0,#1
 2222 02fa 9847     	 blx r3
 2223              	.LVL49:
 940:.././hal/sam3u1c/udphs_device.c **** 					ptr_job->buf_cnt, i);
 941:.././hal/sam3u1c/udphs_device.c **** 			return false;
 2224              	 .loc 6 941 0
 2225 02fc 0023     	 movs r3,#0
 2226 02fe 4CE0     	 b .L93
 2227              	.L135:
 2228              	 .align 2
 2229              	.L134:
 2230 0300 00400A40 	 .word 1074413568
 2231 0304 00000000 	 .word udd_ep_job
 2232              	.L126:
 942:.././hal/sam3u1c/udphs_device.c **** 		}
 943:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_endpoint_bank_autoswitch(i);
 2233              	 .loc 6 943 0
 2234 0308 264A     	 ldr r2,.L136
 2235 030a BB7C     	 ldrb r3,[r7,#18]
 2236 030c 0833     	 adds r3,r3,#8
 2237 030e 5B01     	 lsls r3,r3,#5
 2238 0310 1344     	 add r3,r3,r2
 2239 0312 0433     	 adds r3,r3,#4
 2240 0314 1A68     	 ldr r2,[r3]
 2241 0316 2349     	 ldr r1,.L136
 2242 0318 BB7C     	 ldrb r3,[r7,#18]
 2243 031a 42F00202 	 orr r2,r2,#2
 2244 031e 0833     	 adds r3,r3,#8
 2245 0320 5B01     	 lsls r3,r3,#5
 2246 0322 0B44     	 add r3,r3,r1
 2247 0324 0433     	 adds r3,r3,#4
 2248 0326 1A60     	 str r2,[r3]
 944:.././hal/sam3u1c/udphs_device.c **** 		if (b_restart) {
 2249              	 .loc 6 944 0
 2250 0328 FB7A     	 ldrb r3,[r7,#11]
 2251 032a 002B     	 cmp r3,#0
 2252 032c 2DD0     	 beq .L125
 945:.././hal/sam3u1c/udphs_device.c **** 			// Re-run the job remaining part
 946:.././hal/sam3u1c/udphs_device.c **** 			ptr_job->buf_cnt -= ptr_job->buf_load;
 2253              	 .loc 6 946 0
 2254 032e FB68     	 ldr r3,[r7,#12]
 2255 0330 DA68     	 ldr r2,[r3,#12]
 2256 0332 FB68     	 ldr r3,[r7,#12]
 2257 0334 1B69     	 ldr r3,[r3,#16]
 2258 0336 D21A     	 subs r2,r2,r3
 2259 0338 FB68     	 ldr r3,[r7,#12]
 2260 033a DA60     	 str r2,[r3,#12]
 947:.././hal/sam3u1c/udphs_device.c **** 			b_restart = udd_ep_run(i,
 948:.././hal/sam3u1c/udphs_device.c **** 					ptr_job->b_shortpacket,
 2261              	 .loc 6 948 0
 2262 033c FB68     	 ldr r3,[r7,#12]
 2263 033e 1B7D     	 ldrb r3,[r3,#20]
 2264 0340 C3F34003 	 ubfx r3,r3,#1,#1
 2265 0344 DBB2     	 uxtb r3,r3
 947:.././hal/sam3u1c/udphs_device.c **** 			b_restart = udd_ep_run(i,
 2266              	 .loc 6 947 0
 2267 0346 002B     	 cmp r3,#0
 2268 0348 14BF     	 ite ne
 2269 034a 0123     	 movne r3,#1
 2270 034c 0023     	 moveq r3,#0
 2271 034e D9B2     	 uxtb r1,r3
 949:.././hal/sam3u1c/udphs_device.c **** 					&ptr_job->buf[ptr_job->buf_cnt],
 2272              	 .loc 6 949 0
 2273 0350 FB68     	 ldr r3,[r7,#12]
 2274 0352 5A68     	 ldr r2,[r3,#4]
 2275 0354 FB68     	 ldr r3,[r7,#12]
 2276 0356 DB68     	 ldr r3,[r3,#12]
 947:.././hal/sam3u1c/udphs_device.c **** 			b_restart = udd_ep_run(i,
 2277              	 .loc 6 947 0
 2278 0358 D418     	 adds r4,r2,r3
 950:.././hal/sam3u1c/udphs_device.c **** 					ptr_job->buf_size
 2279              	 .loc 6 950 0
 2280 035a FB68     	 ldr r3,[r7,#12]
 2281 035c 9A68     	 ldr r2,[r3,#8]
 951:.././hal/sam3u1c/udphs_device.c **** 						- ptr_job->buf_cnt,
 2282              	 .loc 6 951 0
 2283 035e FB68     	 ldr r3,[r7,#12]
 2284 0360 DB68     	 ldr r3,[r3,#12]
 947:.././hal/sam3u1c/udphs_device.c **** 					ptr_job->b_shortpacket,
 2285              	 .loc 6 947 0
 2286 0362 D21A     	 subs r2,r2,r3
 2287 0364 FB68     	 ldr r3,[r7,#12]
 2288 0366 1B68     	 ldr r3,[r3]
 2289 0368 B87C     	 ldrb r0,[r7,#18]
 2290 036a 0093     	 str r3,[sp]
 2291 036c 1346     	 mov r3,r2
 2292 036e 2246     	 mov r2,r4
 2293 0370 0D4C     	 ldr r4,.L136+4
 2294 0372 A047     	 blx r4
 2295              	.LVL50:
 2296 0374 0346     	 mov r3,r0
 2297 0376 FB72     	 strb r3,[r7,#11]
 952:.././hal/sam3u1c/udphs_device.c **** 					ptr_job->call_trans);
 953:.././hal/sam3u1c/udphs_device.c **** 			if (!b_restart) {
 2298              	 .loc 6 953 0
 2299 0378 FB7A     	 ldrb r3,[r7,#11]
 2300 037a 83F00103 	 eor r3,r3,#1
 2301 037e DBB2     	 uxtb r3,r3
 2302 0380 002B     	 cmp r3,#0
 2303 0382 02D0     	 beq .L125
 954:.././hal/sam3u1c/udphs_device.c **** 				dbg_print("ErrReRun%d ", i);
 955:.././hal/sam3u1c/udphs_device.c **** 				return false;
 2304              	 .loc 6 955 0
 2305 0384 0023     	 movs r3,#0
 2306 0386 08E0     	 b .L93
 2307              	.L133:
 923:.././hal/sam3u1c/udphs_device.c **** 		}
 2308              	 .loc 6 923 0
 2309 0388 00BF     	 nop
 2310              	.L125:
 2311              	.LBE30:
 917:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
 2312              	 .loc 6 917 0 discriminator 2
 2313 038a BB7C     	 ldrb r3,[r7,#18]
 2314 038c 0133     	 adds r3,r3,#1
 2315 038e BB74     	 strb r3,[r7,#18]
 2316              	.L123:
 917:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
 2317              	 .loc 6 917 0 is_stmt 0 discriminator 1
 2318 0390 BB7C     	 ldrb r3,[r7,#18]
 2319 0392 022B     	 cmp r3,#2
 2320 0394 7FF650AF 	 bls .L129
 956:.././hal/sam3u1c/udphs_device.c **** 			}
 957:.././hal/sam3u1c/udphs_device.c **** 		}
 958:.././hal/sam3u1c/udphs_device.c **** 	}
 959:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("ep_alloc(%d:%08x) ", ep, UDPHS->UDPHS_EPT[ep].UDPHS_EPTCFG);
 960:.././hal/sam3u1c/udphs_device.c **** 	return true;
 2321              	 .loc 6 960 0 is_stmt 1
 2322 0398 0123     	 movs r3,#1
 2323              	.L93:
 961:.././hal/sam3u1c/udphs_device.c **** }
 2324              	 .loc 6 961 0
 2325 039a 1846     	 mov r0,r3
 2326 039c 1C37     	 adds r7,r7,#28
 2327              	.LCFI100:
 2328              	 .cfi_def_cfa_offset 12
 2329 039e BD46     	 mov sp,r7
 2330              	.LCFI101:
 2331              	 .cfi_def_cfa_register 13
 2332              	 
 2333 03a0 90BD     	 pop {r4,r7,pc}
 2334              	.L137:
 2335 03a2 00BF     	 .align 2
 2336              	.L136:
 2337 03a4 00400A40 	 .word 1074413568
 2338 03a8 00000000 	 .word udd_ep_run
 2339              	 .cfi_endproc
 2340              	.LFE152:
 2342              	 .section .text.udd_ep_free,"ax",%progbits
 2343              	 .align 1
 2344              	 .global udd_ep_free
 2345              	 .syntax unified
 2346              	 .thumb
 2347              	 .thumb_func
 2348              	 .fpu softvfp
 2350              	udd_ep_free:
 2351              	.LFB153:
 962:.././hal/sam3u1c/udphs_device.c **** 
 963:.././hal/sam3u1c/udphs_device.c **** 
 964:.././hal/sam3u1c/udphs_device.c **** void udd_ep_free(udd_ep_id_t ep)
 965:.././hal/sam3u1c/udphs_device.c **** {
 2352              	 .loc 6 965 0
 2353              	 .cfi_startproc
 2354              	 
 2355              	 
 2356 0000 80B5     	 push {r7,lr}
 2357              	.LCFI102:
 2358              	 .cfi_def_cfa_offset 8
 2359              	 .cfi_offset 7,-8
 2360              	 .cfi_offset 14,-4
 2361 0002 84B0     	 sub sp,sp,#16
 2362              	.LCFI103:
 2363              	 .cfi_def_cfa_offset 24
 2364 0004 00AF     	 add r7,sp,#0
 2365              	.LCFI104:
 2366              	 .cfi_def_cfa_register 7
 2367 0006 0346     	 mov r3,r0
 2368 0008 FB71     	 strb r3,[r7,#7]
 966:.././hal/sam3u1c/udphs_device.c **** 	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
 2369              	 .loc 6 966 0
 2370 000a FB79     	 ldrb r3,[r7,#7]
 2371 000c 03F00F03 	 and r3,r3,#15
 2372 0010 FB73     	 strb r3,[r7,#15]
 967:.././hal/sam3u1c/udphs_device.c **** 
 968:.././hal/sam3u1c/udphs_device.c **** 	if (USB_DEVICE_MAX_EP < ep_index) {
 2373              	 .loc 6 968 0
 2374 0012 FB7B     	 ldrb r3,[r7,#15]
 2375 0014 022B     	 cmp r3,#2
 2376 0016 28D8     	 bhi .L141
 969:.././hal/sam3u1c/udphs_device.c **** 		return;
 970:.././hal/sam3u1c/udphs_device.c **** 	}
 971:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_endpoint(ep_index);
 2377              	 .loc 6 971 0
 2378 0018 164A     	 ldr r2,.L142
 2379 001a FB7B     	 ldrb r3,[r7,#15]
 2380 001c 5B01     	 lsls r3,r3,#5
 2381 001e 1344     	 add r3,r3,r2
 2382 0020 03F58473 	 add r3,r3,#264
 2383 0024 0122     	 movs r2,#1
 2384 0026 1A60     	 str r2,[r3]
 972:.././hal/sam3u1c/udphs_device.c **** 	udd_configure_endpoint_bank(ep_index, 0);
 2385              	 .loc 6 972 0
 2386 0028 124A     	 ldr r2,.L142
 2387 002a FB7B     	 ldrb r3,[r7,#15]
 2388 002c 0833     	 adds r3,r3,#8
 2389 002e 5B01     	 lsls r3,r3,#5
 2390 0030 1344     	 add r3,r3,r2
 2391 0032 1A68     	 ldr r2,[r3]
 2392 0034 0F49     	 ldr r1,.L142
 2393 0036 FB7B     	 ldrb r3,[r7,#15]
 2394 0038 22F0C002 	 bic r2,r2,#192
 2395 003c 0833     	 adds r3,r3,#8
 2396 003e 5B01     	 lsls r3,r3,#5
 2397 0040 0B44     	 add r3,r3,r1
 2398 0042 1A60     	 str r2,[r3]
 973:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_abort_job(ep);
 2399              	 .loc 6 973 0
 2400 0044 FB79     	 ldrb r3,[r7,#7]
 2401 0046 1846     	 mov r0,r3
 2402 0048 0B4B     	 ldr r3,.L142+4
 2403 004a 9847     	 blx r3
 2404              	.LVL51:
 974:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job[ep_index - 1].stall_requested = false;
 2405              	 .loc 6 974 0
 2406 004c FB7B     	 ldrb r3,[r7,#15]
 2407 004e 5A1E     	 subs r2,r3,#1
 2408 0050 0A49     	 ldr r1,.L142+8
 2409 0052 1346     	 mov r3,r2
 2410 0054 5B00     	 lsls r3,r3,#1
 2411 0056 1344     	 add r3,r3,r2
 2412 0058 DB00     	 lsls r3,r3,#3
 2413 005a 0B44     	 add r3,r3,r1
 2414 005c 03F11002 	 add r2,r3,#16
 2415 0060 1379     	 ldrb r3,[r2,#4]
 2416 0062 6FF38203 	 bfc r3,#2,#1
 2417 0066 1371     	 strb r3,[r2,#4]
 2418 0068 00E0     	 b .L138
 2419              	.L141:
 969:.././hal/sam3u1c/udphs_device.c **** 	}
 2420              	 .loc 6 969 0
 2421 006a 00BF     	 nop
 2422              	.L138:
 975:.././hal/sam3u1c/udphs_device.c **** }
 2423              	 .loc 6 975 0
 2424 006c 1037     	 adds r7,r7,#16
 2425              	.LCFI105:
 2426              	 .cfi_def_cfa_offset 8
 2427 006e BD46     	 mov sp,r7
 2428              	.LCFI106:
 2429              	 .cfi_def_cfa_register 13
 2430              	 
 2431 0070 80BD     	 pop {r7,pc}
 2432              	.L143:
 2433 0072 00BF     	 .align 2
 2434              	.L142:
 2435 0074 00400A40 	 .word 1074413568
 2436 0078 00000000 	 .word udd_ep_abort_job
 2437 007c 00000000 	 .word udd_ep_job
 2438              	 .cfi_endproc
 2439              	.LFE153:
 2441              	 .section .text.udd_ep_is_halted,"ax",%progbits
 2442              	 .align 1
 2443              	 .global udd_ep_is_halted
 2444              	 .syntax unified
 2445              	 .thumb
 2446              	 .thumb_func
 2447              	 .fpu softvfp
 2449              	udd_ep_is_halted:
 2450              	.LFB154:
 976:.././hal/sam3u1c/udphs_device.c **** 
 977:.././hal/sam3u1c/udphs_device.c **** 
 978:.././hal/sam3u1c/udphs_device.c **** bool udd_ep_is_halted(udd_ep_id_t ep)
 979:.././hal/sam3u1c/udphs_device.c **** {
 2451              	 .loc 6 979 0
 2452              	 .cfi_startproc
 2453              	 
 2454              	 
 2455              	 
 2456 0000 80B4     	 push {r7}
 2457              	.LCFI107:
 2458              	 .cfi_def_cfa_offset 4
 2459              	 .cfi_offset 7,-4
 2460 0002 85B0     	 sub sp,sp,#20
 2461              	.LCFI108:
 2462              	 .cfi_def_cfa_offset 24
 2463 0004 00AF     	 add r7,sp,#0
 2464              	.LCFI109:
 2465              	 .cfi_def_cfa_register 7
 2466 0006 0346     	 mov r3,r0
 2467 0008 FB71     	 strb r3,[r7,#7]
 980:.././hal/sam3u1c/udphs_device.c **** 	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
 2468              	 .loc 6 980 0
 2469 000a FB79     	 ldrb r3,[r7,#7]
 2470 000c 03F00F03 	 and r3,r3,#15
 2471 0010 FB73     	 strb r3,[r7,#15]
 981:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
 2472              	 .loc 6 981 0
 2473 0012 FB7B     	 ldrb r3,[r7,#15]
 2474 0014 5A1E     	 subs r2,r3,#1
 2475 0016 1346     	 mov r3,r2
 2476 0018 5B00     	 lsls r3,r3,#1
 2477 001a 1344     	 add r3,r3,r2
 2478 001c DB00     	 lsls r3,r3,#3
 2479 001e 104A     	 ldr r2,.L149
 2480 0020 1344     	 add r3,r3,r2
 2481 0022 BB60     	 str r3,[r7,#8]
 982:.././hal/sam3u1c/udphs_device.c **** 	return (Is_udd_endpoint_stall_requested(ep_index)
 2482              	 .loc 6 982 0
 2483 0024 0F4A     	 ldr r2,.L149+4
 2484 0026 FB7B     	 ldrb r3,[r7,#15]
 2485 0028 5B01     	 lsls r3,r3,#5
 2486 002a 1344     	 add r3,r3,r2
 2487 002c 03F58E73 	 add r3,r3,#284
 2488 0030 1B68     	 ldr r3,[r3]
 2489 0032 03F02003 	 and r3,r3,#32
 983:.././hal/sam3u1c/udphs_device.c **** 			|| ptr_job->stall_requested);
 2490              	 .loc 6 983 0
 2491 0036 002B     	 cmp r3,#0
 2492 0038 06D1     	 bne .L145
 2493              	 .loc 6 983 0 is_stmt 0 discriminator 2
 2494 003a BB68     	 ldr r3,[r7,#8]
 2495 003c 1B7D     	 ldrb r3,[r3,#20]
 2496 003e 03F00403 	 and r3,r3,#4
 2497 0042 DBB2     	 uxtb r3,r3
 2498 0044 002B     	 cmp r3,#0
 2499 0046 01D0     	 beq .L146
 2500              	.L145:
 2501              	 .loc 6 983 0 discriminator 3
 2502 0048 0123     	 movs r3,#1
 2503 004a 00E0     	 b .L147
 2504              	.L146:
 2505              	 .loc 6 983 0 discriminator 4
 2506 004c 0023     	 movs r3,#0
 2507              	.L147:
 2508              	 .loc 6 983 0 discriminator 6
 2509 004e 03F00103 	 and r3,r3,#1
 2510 0052 DBB2     	 uxtb r3,r3
 984:.././hal/sam3u1c/udphs_device.c **** }
 2511              	 .loc 6 984 0 is_stmt 1 discriminator 6
 2512 0054 1846     	 mov r0,r3
 2513 0056 1437     	 adds r7,r7,#20
 2514              	.LCFI110:
 2515              	 .cfi_def_cfa_offset 4
 2516 0058 BD46     	 mov sp,r7
 2517              	.LCFI111:
 2518              	 .cfi_def_cfa_register 13
 2519              	 
 2520 005a 80BC     	 pop {r7}
 2521              	.LCFI112:
 2522              	 .cfi_restore 7
 2523              	 .cfi_def_cfa_offset 0
 2524 005c 7047     	 bx lr
 2525              	.L150:
 2526 005e 00BF     	 .align 2
 2527              	.L149:
 2528 0060 00000000 	 .word udd_ep_job
 2529 0064 00400A40 	 .word 1074413568
 2530              	 .cfi_endproc
 2531              	.LFE154:
 2533              	 .section .text.udd_ep_set_halt,"ax",%progbits
 2534              	 .align 1
 2535              	 .global udd_ep_set_halt
 2536              	 .syntax unified
 2537              	 .thumb
 2538              	 .thumb_func
 2539              	 .fpu softvfp
 2541              	udd_ep_set_halt:
 2542              	.LFB155:
 985:.././hal/sam3u1c/udphs_device.c **** 
 986:.././hal/sam3u1c/udphs_device.c **** 
 987:.././hal/sam3u1c/udphs_device.c **** bool udd_ep_set_halt(udd_ep_id_t ep)
 988:.././hal/sam3u1c/udphs_device.c **** {
 2543              	 .loc 6 988 0
 2544              	 .cfi_startproc
 2545              	 
 2546              	 
 2547              	 
 2548 0000 80B4     	 push {r7}
 2549              	.LCFI113:
 2550              	 .cfi_def_cfa_offset 4
 2551              	 .cfi_offset 7,-4
 2552 0002 85B0     	 sub sp,sp,#20
 2553              	.LCFI114:
 2554              	 .cfi_def_cfa_offset 24
 2555 0004 00AF     	 add r7,sp,#0
 2556              	.LCFI115:
 2557              	 .cfi_def_cfa_register 7
 2558 0006 0346     	 mov r3,r0
 2559 0008 FB71     	 strb r3,[r7,#7]
 989:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_t *ptr_job;
 990:.././hal/sam3u1c/udphs_device.c **** 	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
 2560              	 .loc 6 990 0
 2561 000a FB79     	 ldrb r3,[r7,#7]
 2562 000c 03F00F03 	 and r3,r3,#15
 2563 0010 FB73     	 strb r3,[r7,#15]
 991:.././hal/sam3u1c/udphs_device.c **** 
 992:.././hal/sam3u1c/udphs_device.c **** 	if (USB_DEVICE_MAX_EP < ep_index) {
 2564              	 .loc 6 992 0
 2565 0012 FB7B     	 ldrb r3,[r7,#15]
 2566 0014 022B     	 cmp r3,#2
 2567 0016 01D9     	 bls .L152
 993:.././hal/sam3u1c/udphs_device.c **** 		return false;
 2568              	 .loc 6 993 0
 2569 0018 0023     	 movs r3,#0
 2570 001a 71E0     	 b .L153
 2571              	.L152:
 994:.././hal/sam3u1c/udphs_device.c **** 	}
 995:.././hal/sam3u1c/udphs_device.c **** 
 996:.././hal/sam3u1c/udphs_device.c **** 	ptr_job = &udd_ep_job[ep_index - 1];
 2572              	 .loc 6 996 0
 2573 001c FB7B     	 ldrb r3,[r7,#15]
 2574 001e 5A1E     	 subs r2,r3,#1
 2575 0020 1346     	 mov r3,r2
 2576 0022 5B00     	 lsls r3,r3,#1
 2577 0024 1344     	 add r3,r3,r2
 2578 0026 DB00     	 lsls r3,r3,#3
 2579 0028 384A     	 ldr r2,.L158
 2580 002a 1344     	 add r3,r3,r2
 2581 002c BB60     	 str r3,[r7,#8]
 997:.././hal/sam3u1c/udphs_device.c **** 
 998:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
 2582              	 .loc 6 998 0
 2583 002e 384A     	 ldr r2,.L158+4
 2584 0030 FB7B     	 ldrb r3,[r7,#15]
 2585 0032 5B01     	 lsls r3,r3,#5
 2586 0034 1344     	 add r3,r3,r2
 2587 0036 03F58E73 	 add r3,r3,#284
 2588 003a 1B68     	 ldr r3,[r3]
 2589 003c 03F02003 	 and r3,r3,#32
 2590 0040 002B     	 cmp r3,#0
 2591 0042 06D1     	 bne .L154
 999:.././hal/sam3u1c/udphs_device.c **** 			|| ptr_job->stall_requested) { // Endpoint stall is requested
 2592              	 .loc 6 999 0
 2593 0044 BB68     	 ldr r3,[r7,#8]
 2594 0046 1B7D     	 ldrb r3,[r3,#20]
 2595 0048 03F00403 	 and r3,r3,#4
 2596 004c DBB2     	 uxtb r3,r3
 2597 004e 002B     	 cmp r3,#0
 2598 0050 01D0     	 beq .L155
 2599              	.L154:
1000:.././hal/sam3u1c/udphs_device.c **** 		return true; // Already STALL
 2600              	 .loc 6 1000 0
 2601 0052 0123     	 movs r3,#1
 2602 0054 54E0     	 b .L153
 2603              	.L155:
1001:.././hal/sam3u1c/udphs_device.c **** 	}
1002:.././hal/sam3u1c/udphs_device.c **** 
1003:.././hal/sam3u1c/udphs_device.c **** 	if (ptr_job->busy == true) {
 2604              	 .loc 6 1003 0
 2605 0056 BB68     	 ldr r3,[r7,#8]
 2606 0058 1B7D     	 ldrb r3,[r3,#20]
 2607 005a 03F00103 	 and r3,r3,#1
 2608 005e DBB2     	 uxtb r3,r3
 2609 0060 002B     	 cmp r3,#0
 2610 0062 01D0     	 beq .L156
1004:.././hal/sam3u1c/udphs_device.c **** 		return false; // Job on going, stall impossible
 2611              	 .loc 6 1004 0
 2612 0064 0023     	 movs r3,#0
 2613 0066 4BE0     	 b .L153
 2614              	.L156:
1005:.././hal/sam3u1c/udphs_device.c **** 	}
1006:.././hal/sam3u1c/udphs_device.c **** 
1007:.././hal/sam3u1c/udphs_device.c **** 	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
 2615              	 .loc 6 1007 0
 2616 0068 97F90730 	 ldrsb r3,[r7,#7]
 2617 006c 002B     	 cmp r3,#0
 2618 006e 25DA     	 bge .L157
 2619              	 .loc 6 1007 0 is_stmt 0 discriminator 1
 2620 0070 274A     	 ldr r2,.L158+4
 2621 0072 FB7B     	 ldrb r3,[r7,#15]
 2622 0074 5B01     	 lsls r3,r3,#5
 2623 0076 1344     	 add r3,r3,r2
 2624 0078 03F58E73 	 add r3,r3,#284
 2625 007c 1B68     	 ldr r3,[r3]
 2626 007e 9B0C     	 lsrs r3,r3,#18
 2627 0080 03F00303 	 and r3,r3,#3
 2628 0084 002B     	 cmp r3,#0
 2629 0086 19D0     	 beq .L157
1008:.././hal/sam3u1c/udphs_device.c **** 			// Delay the stall after the end of IN transfer on USB line
1009:.././hal/sam3u1c/udphs_device.c **** 			ptr_job->stall_requested = true;
 2630              	 .loc 6 1009 0 is_stmt 1
 2631 0088 BA68     	 ldr r2,[r7,#8]
 2632 008a 137D     	 ldrb r3,[r2,#20]
 2633 008c 43F00403 	 orr r3,r3,#4
 2634 0090 1375     	 strb r3,[r2,#20]
1010:.././hal/sam3u1c/udphs_device.c **** 			udd_enable_bank_interrupt(ep_index);
 2635              	 .loc 6 1010 0
 2636 0092 1F4A     	 ldr r2,.L158+4
 2637 0094 FB7B     	 ldrb r3,[r7,#15]
 2638 0096 0833     	 adds r3,r3,#8
 2639 0098 5B01     	 lsls r3,r3,#5
 2640 009a 1344     	 add r3,r3,r2
 2641 009c 0433     	 adds r3,r3,#4
 2642 009e 4FF48022 	 mov r2,#262144
 2643 00a2 1A60     	 str r2,[r3]
1011:.././hal/sam3u1c/udphs_device.c **** 			udd_enable_endpoint_interrupt(ep_index);
 2644              	 .loc 6 1011 0
 2645 00a4 1A4B     	 ldr r3,.L158+4
 2646 00a6 1A69     	 ldr r2,[r3,#16]
 2647 00a8 FB7B     	 ldrb r3,[r7,#15]
 2648 00aa 4FF48071 	 mov r1,#256
 2649 00ae 01FA03F3 	 lsl r3,r1,r3
 2650 00b2 1749     	 ldr r1,.L158+4
 2651 00b4 1343     	 orrs r3,r3,r2
 2652 00b6 0B61     	 str r3,[r1,#16]
1012:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("<reqHalt%x> ", ep);
1013:.././hal/sam3u1c/udphs_device.c **** 			return true;
 2653              	 .loc 6 1013 0
 2654 00b8 0123     	 movs r3,#1
 2655 00ba 21E0     	 b .L153
 2656              	.L157:
1014:.././hal/sam3u1c/udphs_device.c **** 	}
1015:.././hal/sam3u1c/udphs_device.c **** 
1016:.././hal/sam3u1c/udphs_device.c **** 	// Stall endpoint immediately
1017:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_endpoint_bank_autoswitch(ep_index);
 2657              	 .loc 6 1017 0
 2658 00bc 144A     	 ldr r2,.L158+4
 2659 00be FB7B     	 ldrb r3,[r7,#15]
 2660 00c0 5B01     	 lsls r3,r3,#5
 2661 00c2 1344     	 add r3,r3,r2
 2662 00c4 03F58473 	 add r3,r3,#264
 2663 00c8 1A68     	 ldr r2,[r3]
 2664 00ca 1149     	 ldr r1,.L158+4
 2665 00cc FB7B     	 ldrb r3,[r7,#15]
 2666 00ce 22F00202 	 bic r2,r2,#2
 2667 00d2 5B01     	 lsls r3,r3,#5
 2668 00d4 0B44     	 add r3,r3,r1
 2669 00d6 03F58473 	 add r3,r3,#264
 2670 00da 1A60     	 str r2,[r3]
1018:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_stall(ep_index);
 2671              	 .loc 6 1018 0
 2672 00dc 0C4A     	 ldr r2,.L158+4
 2673 00de FB7B     	 ldrb r3,[r7,#15]
 2674 00e0 5B01     	 lsls r3,r3,#5
 2675 00e2 1344     	 add r3,r3,r2
 2676 00e4 03F58C73 	 add r3,r3,#280
 2677 00e8 4FF40052 	 mov r2,#8192
 2678 00ec 1A60     	 str r2,[r3]
1019:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_stall_handshake(ep_index);
 2679              	 .loc 6 1019 0
 2680 00ee 084A     	 ldr r2,.L158+4
 2681 00f0 FB7B     	 ldrb r3,[r7,#15]
 2682 00f2 5B01     	 lsls r3,r3,#5
 2683 00f4 1344     	 add r3,r3,r2
 2684 00f6 03F58A73 	 add r3,r3,#276
 2685 00fa 2022     	 movs r2,#32
 2686 00fc 1A60     	 str r2,[r3]
1020:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("<Halt%x> ", ep);
1021:.././hal/sam3u1c/udphs_device.c **** 	return true;
 2687              	 .loc 6 1021 0
 2688 00fe 0123     	 movs r3,#1
 2689              	.L153:
1022:.././hal/sam3u1c/udphs_device.c **** }
 2690              	 .loc 6 1022 0
 2691 0100 1846     	 mov r0,r3
 2692 0102 1437     	 adds r7,r7,#20
 2693              	.LCFI116:
 2694              	 .cfi_def_cfa_offset 4
 2695 0104 BD46     	 mov sp,r7
 2696              	.LCFI117:
 2697              	 .cfi_def_cfa_register 13
 2698              	 
 2699 0106 80BC     	 pop {r7}
 2700              	.LCFI118:
 2701              	 .cfi_restore 7
 2702              	 .cfi_def_cfa_offset 0
 2703 0108 7047     	 bx lr
 2704              	.L159:
 2705 010a 00BF     	 .align 2
 2706              	.L158:
 2707 010c 00000000 	 .word udd_ep_job
 2708 0110 00400A40 	 .word 1074413568
 2709              	 .cfi_endproc
 2710              	.LFE155:
 2712              	 .section .text.udd_ep_clear_halt,"ax",%progbits
 2713              	 .align 1
 2714              	 .global udd_ep_clear_halt
 2715              	 .syntax unified
 2716              	 .thumb
 2717              	 .thumb_func
 2718              	 .fpu softvfp
 2720              	udd_ep_clear_halt:
 2721              	.LFB156:
1023:.././hal/sam3u1c/udphs_device.c **** 
1024:.././hal/sam3u1c/udphs_device.c **** 
1025:.././hal/sam3u1c/udphs_device.c **** bool udd_ep_clear_halt(udd_ep_id_t ep)
1026:.././hal/sam3u1c/udphs_device.c **** {
 2722              	 .loc 6 1026 0
 2723              	 .cfi_startproc
 2724              	 
 2725              	 
 2726 0000 80B5     	 push {r7,lr}
 2727              	.LCFI119:
 2728              	 .cfi_def_cfa_offset 8
 2729              	 .cfi_offset 7,-8
 2730              	 .cfi_offset 14,-4
 2731 0002 84B0     	 sub sp,sp,#16
 2732              	.LCFI120:
 2733              	 .cfi_def_cfa_offset 24
 2734 0004 00AF     	 add r7,sp,#0
 2735              	.LCFI121:
 2736              	 .cfi_def_cfa_register 7
 2737 0006 0346     	 mov r3,r0
 2738 0008 FB71     	 strb r3,[r7,#7]
1027:.././hal/sam3u1c/udphs_device.c **** 	bool b_stall_cleared = false;
 2739              	 .loc 6 1027 0
 2740 000a 0023     	 movs r3,#0
 2741 000c FB73     	 strb r3,[r7,#15]
1028:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_t *ptr_job;
1029:.././hal/sam3u1c/udphs_device.c **** 
1030:.././hal/sam3u1c/udphs_device.c **** 	ep &= USB_EP_ADDR_MASK;
 2742              	 .loc 6 1030 0
 2743 000e FB79     	 ldrb r3,[r7,#7]
 2744 0010 03F00F03 	 and r3,r3,#15
 2745 0014 FB71     	 strb r3,[r7,#7]
1031:.././hal/sam3u1c/udphs_device.c **** 	if (USB_DEVICE_MAX_EP < ep)
 2746              	 .loc 6 1031 0
 2747 0016 FB79     	 ldrb r3,[r7,#7]
 2748 0018 022B     	 cmp r3,#2
 2749 001a 01D9     	 bls .L161
1032:.././hal/sam3u1c/udphs_device.c **** 		return false;
 2750              	 .loc 6 1032 0
 2751 001c 0023     	 movs r3,#0
 2752 001e 7EE0     	 b .L162
 2753              	.L161:
1033:.././hal/sam3u1c/udphs_device.c **** 	ptr_job = &udd_ep_job[ep - 1];
 2754              	 .loc 6 1033 0
 2755 0020 FB79     	 ldrb r3,[r7,#7]
 2756 0022 5A1E     	 subs r2,r3,#1
 2757 0024 1346     	 mov r3,r2
 2758 0026 5B00     	 lsls r3,r3,#1
 2759 0028 1344     	 add r3,r3,r2
 2760 002a DB00     	 lsls r3,r3,#3
 2761 002c 3E4A     	 ldr r2,.L167
 2762 002e 1344     	 add r3,r3,r2
 2763 0030 BB60     	 str r3,[r7,#8]
1034:.././hal/sam3u1c/udphs_device.c **** 
1035:.././hal/sam3u1c/udphs_device.c **** 	if (ptr_job->stall_requested) {
 2764              	 .loc 6 1035 0
 2765 0032 BB68     	 ldr r3,[r7,#8]
 2766 0034 1B7D     	 ldrb r3,[r3,#20]
 2767 0036 03F00403 	 and r3,r3,#4
 2768 003a DBB2     	 uxtb r3,r3
 2769 003c 002B     	 cmp r3,#0
 2770 003e 1AD0     	 beq .L163
1036:.././hal/sam3u1c/udphs_device.c **** 		// Endpoint stall has been requested but not done
1037:.././hal/sam3u1c/udphs_device.c **** 		// Remove stall request
1038:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("<unWHalt%x> ", ep);
1039:.././hal/sam3u1c/udphs_device.c **** 		ptr_job->stall_requested = false;
 2771              	 .loc 6 1039 0
 2772 0040 BA68     	 ldr r2,[r7,#8]
 2773 0042 137D     	 ldrb r3,[r2,#20]
 2774 0044 6FF38203 	 bfc r3,#2,#1
 2775 0048 1375     	 strb r3,[r2,#20]
1040:.././hal/sam3u1c/udphs_device.c **** 		udd_disable_bank_interrupt(ep);
 2776              	 .loc 6 1040 0
 2777 004a 384A     	 ldr r2,.L167+4
 2778 004c FB79     	 ldrb r3,[r7,#7]
 2779 004e 5B01     	 lsls r3,r3,#5
 2780 0050 1344     	 add r3,r3,r2
 2781 0052 03F58473 	 add r3,r3,#264
 2782 0056 4FF48022 	 mov r2,#262144
 2783 005a 1A60     	 str r2,[r3]
1041:.././hal/sam3u1c/udphs_device.c **** 		udd_disable_endpoint_interrupt(ep);
 2784              	 .loc 6 1041 0
 2785 005c 334B     	 ldr r3,.L167+4
 2786 005e 1A69     	 ldr r2,[r3,#16]
 2787 0060 FB79     	 ldrb r3,[r7,#7]
 2788 0062 4FF48071 	 mov r1,#256
 2789 0066 01FA03F3 	 lsl r3,r1,r3
 2790 006a DB43     	 mvns r3,r3
 2791 006c 2F49     	 ldr r1,.L167+4
 2792 006e 1340     	 ands r3,r3,r2
 2793 0070 0B61     	 str r3,[r1,#16]
1042:.././hal/sam3u1c/udphs_device.c **** 		b_stall_cleared = true;
 2794              	 .loc 6 1042 0
 2795 0072 0123     	 movs r3,#1
 2796 0074 FB73     	 strb r3,[r7,#15]
 2797              	.L163:
1043:.././hal/sam3u1c/udphs_device.c **** 	}
1044:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_stall_requested(ep)) {
 2798              	 .loc 6 1044 0
 2799 0076 2D4A     	 ldr r2,.L167+4
 2800 0078 FB79     	 ldrb r3,[r7,#7]
 2801 007a 5B01     	 lsls r3,r3,#5
 2802 007c 1344     	 add r3,r3,r2
 2803 007e 03F58E73 	 add r3,r3,#284
 2804 0082 1B68     	 ldr r3,[r3]
 2805 0084 03F02003 	 and r3,r3,#32
 2806 0088 002B     	 cmp r3,#0
 2807 008a 35D0     	 beq .L164
1045:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("<unHalt%x> ", ep);
1046:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_stall(ep)) {
 2808              	 .loc 6 1046 0
 2809 008c 274A     	 ldr r2,.L167+4
 2810 008e FB79     	 ldrb r3,[r7,#7]
 2811 0090 5B01     	 lsls r3,r3,#5
 2812 0092 1344     	 add r3,r3,r2
 2813 0094 03F58E73 	 add r3,r3,#284
 2814 0098 1B68     	 ldr r3,[r3]
 2815 009a 03F40053 	 and r3,r3,#8192
 2816 009e 002B     	 cmp r3,#0
 2817 00a0 10D0     	 beq .L165
1047:.././hal/sam3u1c/udphs_device.c **** 			udd_ack_stall(ep);
 2818              	 .loc 6 1047 0
 2819 00a2 224A     	 ldr r2,.L167+4
 2820 00a4 FB79     	 ldrb r3,[r7,#7]
 2821 00a6 5B01     	 lsls r3,r3,#5
 2822 00a8 1344     	 add r3,r3,r2
 2823 00aa 03F58C73 	 add r3,r3,#280
 2824 00ae 4FF40052 	 mov r2,#8192
 2825 00b2 1A60     	 str r2,[r3]
1048:.././hal/sam3u1c/udphs_device.c **** 			// A packet has been stalled
1049:.././hal/sam3u1c/udphs_device.c **** 			// then reset datatoggle
1050:.././hal/sam3u1c/udphs_device.c **** 			udd_reset_data_toggle(ep);
 2826              	 .loc 6 1050 0
 2827 00b4 1D4A     	 ldr r2,.L167+4
 2828 00b6 FB79     	 ldrb r3,[r7,#7]
 2829 00b8 5B01     	 lsls r3,r3,#5
 2830 00ba 1344     	 add r3,r3,r2
 2831 00bc 03F58C73 	 add r3,r3,#280
 2832 00c0 4022     	 movs r2,#64
 2833 00c2 1A60     	 str r2,[r3]
 2834              	.L165:
1051:.././hal/sam3u1c/udphs_device.c **** 		}
1052:.././hal/sam3u1c/udphs_device.c **** 		// Disable stall
1053:.././hal/sam3u1c/udphs_device.c **** 		udd_disable_stall_handshake(ep);
 2835              	 .loc 6 1053 0
 2836 00c4 194A     	 ldr r2,.L167+4
 2837 00c6 FB79     	 ldrb r3,[r7,#7]
 2838 00c8 5B01     	 lsls r3,r3,#5
 2839 00ca 1344     	 add r3,r3,r2
 2840 00cc 03F58C73 	 add r3,r3,#280
 2841 00d0 2022     	 movs r2,#32
 2842 00d2 1A60     	 str r2,[r3]
1054:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_endpoint_bank_autoswitch(ep);
 2843              	 .loc 6 1054 0
 2844 00d4 154A     	 ldr r2,.L167+4
 2845 00d6 FB79     	 ldrb r3,[r7,#7]
 2846 00d8 0833     	 adds r3,r3,#8
 2847 00da 5B01     	 lsls r3,r3,#5
 2848 00dc 1344     	 add r3,r3,r2
 2849 00de 0433     	 adds r3,r3,#4
 2850 00e0 1A68     	 ldr r2,[r3]
 2851 00e2 1249     	 ldr r1,.L167+4
 2852 00e4 FB79     	 ldrb r3,[r7,#7]
 2853 00e6 42F00202 	 orr r2,r2,#2
 2854 00ea 0833     	 adds r3,r3,#8
 2855 00ec 5B01     	 lsls r3,r3,#5
 2856 00ee 0B44     	 add r3,r3,r1
 2857 00f0 0433     	 adds r3,r3,#4
 2858 00f2 1A60     	 str r2,[r3]
1055:.././hal/sam3u1c/udphs_device.c **** 		b_stall_cleared = true;
 2859              	 .loc 6 1055 0
 2860 00f4 0123     	 movs r3,#1
 2861 00f6 FB73     	 strb r3,[r7,#15]
 2862              	.L164:
1056:.././hal/sam3u1c/udphs_device.c **** 	}
1057:.././hal/sam3u1c/udphs_device.c **** 	if (b_stall_cleared) {
 2863              	 .loc 6 1057 0
 2864 00f8 FB7B     	 ldrb r3,[r7,#15]
 2865 00fa 002B     	 cmp r3,#0
 2866 00fc 0ED0     	 beq .L166
1058:.././hal/sam3u1c/udphs_device.c **** 		// If a job is register on clear halt action
1059:.././hal/sam3u1c/udphs_device.c **** 		// then execute callback
1060:.././hal/sam3u1c/udphs_device.c **** 		if (ptr_job->busy == true) {
 2867              	 .loc 6 1060 0
 2868 00fe BB68     	 ldr r3,[r7,#8]
 2869 0100 1B7D     	 ldrb r3,[r3,#20]
 2870 0102 03F00103 	 and r3,r3,#1
 2871 0106 DBB2     	 uxtb r3,r3
 2872 0108 002B     	 cmp r3,#0
 2873 010a 07D0     	 beq .L166
1061:.././hal/sam3u1c/udphs_device.c **** 			ptr_job->busy = false;
 2874              	 .loc 6 1061 0
 2875 010c BA68     	 ldr r2,[r7,#8]
 2876 010e 137D     	 ldrb r3,[r2,#20]
 2877 0110 6FF30003 	 bfc r3,#0,#1
 2878 0114 1375     	 strb r3,[r2,#20]
1062:.././hal/sam3u1c/udphs_device.c **** 			ptr_job->call_nohalt();
 2879              	 .loc 6 1062 0
 2880 0116 BB68     	 ldr r3,[r7,#8]
 2881 0118 1B68     	 ldr r3,[r3]
 2882 011a 9847     	 blx r3
 2883              	.LVL52:
 2884              	.L166:
1063:.././hal/sam3u1c/udphs_device.c **** 		}
1064:.././hal/sam3u1c/udphs_device.c **** 	}
1065:.././hal/sam3u1c/udphs_device.c **** 	return true;
 2885              	 .loc 6 1065 0
 2886 011c 0123     	 movs r3,#1
 2887              	.L162:
1066:.././hal/sam3u1c/udphs_device.c **** }
 2888              	 .loc 6 1066 0
 2889 011e 1846     	 mov r0,r3
 2890 0120 1037     	 adds r7,r7,#16
 2891              	.LCFI122:
 2892              	 .cfi_def_cfa_offset 8
 2893 0122 BD46     	 mov sp,r7
 2894              	.LCFI123:
 2895              	 .cfi_def_cfa_register 13
 2896              	 
 2897 0124 80BD     	 pop {r7,pc}
 2898              	.L168:
 2899 0126 00BF     	 .align 2
 2900              	.L167:
 2901 0128 00000000 	 .word udd_ep_job
 2902 012c 00400A40 	 .word 1074413568
 2903              	 .cfi_endproc
 2904              	.LFE156:
 2906              	 .section .text.udd_ep_run,"ax",%progbits
 2907              	 .align 1
 2908              	 .global udd_ep_run
 2909              	 .syntax unified
 2910              	 .thumb
 2911              	 .thumb_func
 2912              	 .fpu softvfp
 2914              	udd_ep_run:
 2915              	.LFB157:
1067:.././hal/sam3u1c/udphs_device.c **** 
1068:.././hal/sam3u1c/udphs_device.c **** 
1069:.././hal/sam3u1c/udphs_device.c **** bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
1070:.././hal/sam3u1c/udphs_device.c **** 		uint8_t * buf, iram_size_t buf_size,
1071:.././hal/sam3u1c/udphs_device.c **** 		udd_callback_trans_t callback)
1072:.././hal/sam3u1c/udphs_device.c **** {
 2916              	 .loc 6 1072 0
 2917              	 .cfi_startproc
 2918              	 
 2919              	 
 2920 0000 80B5     	 push {r7,lr}
 2921              	.LCFI124:
 2922              	 .cfi_def_cfa_offset 8
 2923              	 .cfi_offset 7,-8
 2924              	 .cfi_offset 14,-4
 2925 0002 86B0     	 sub sp,sp,#24
 2926              	.LCFI125:
 2927              	 .cfi_def_cfa_offset 32
 2928 0004 00AF     	 add r7,sp,#0
 2929              	.LCFI126:
 2930              	 .cfi_def_cfa_register 7
 2931 0006 BA60     	 str r2,[r7,#8]
 2932 0008 7B60     	 str r3,[r7,#4]
 2933 000a 0346     	 mov r3,r0
 2934 000c FB73     	 strb r3,[r7,#15]
 2935 000e 0B46     	 mov r3,r1
 2936 0010 BB73     	 strb r3,[r7,#14]
1073:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_t *ptr_job;
1074:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1075:.././hal/sam3u1c/udphs_device.c **** 
1076:.././hal/sam3u1c/udphs_device.c **** 	ep &= USB_EP_ADDR_MASK;
 2937              	 .loc 6 1076 0
 2938 0012 FB7B     	 ldrb r3,[r7,#15]
 2939 0014 03F00F03 	 and r3,r3,#15
 2940 0018 FB73     	 strb r3,[r7,#15]
1077:.././hal/sam3u1c/udphs_device.c **** 	if (USB_DEVICE_MAX_EP < ep) {
 2941              	 .loc 6 1077 0
 2942 001a FB7B     	 ldrb r3,[r7,#15]
 2943 001c 022B     	 cmp r3,#2
 2944 001e 01D9     	 bls .L170
1078:.././hal/sam3u1c/udphs_device.c **** 		return false;
 2945              	 .loc 6 1078 0
 2946 0020 0023     	 movs r3,#0
 2947 0022 63E0     	 b .L171
 2948              	.L170:
1079:.././hal/sam3u1c/udphs_device.c **** 	}
1080:.././hal/sam3u1c/udphs_device.c **** 
1081:.././hal/sam3u1c/udphs_device.c **** 	// Get job about endpoint
1082:.././hal/sam3u1c/udphs_device.c **** 	ptr_job = &udd_ep_job[ep - 1];
 2949              	 .loc 6 1082 0
 2950 0024 FB7B     	 ldrb r3,[r7,#15]
 2951 0026 5A1E     	 subs r2,r3,#1
 2952 0028 1346     	 mov r3,r2
 2953 002a 5B00     	 lsls r3,r3,#1
 2954 002c 1344     	 add r3,r3,r2
 2955 002e DB00     	 lsls r3,r3,#3
 2956 0030 304A     	 ldr r2,.L178
 2957 0032 1344     	 add r3,r3,r2
 2958 0034 7B61     	 str r3,[r7,#20]
1083:.././hal/sam3u1c/udphs_device.c **** 
1084:.././hal/sam3u1c/udphs_device.c **** 	if ((!Is_udd_endpoint_enabled(ep))
 2959              	 .loc 6 1084 0
 2960 0036 304A     	 ldr r2,.L178+4
 2961 0038 FB7B     	 ldrb r3,[r7,#15]
 2962 003a 5B01     	 lsls r3,r3,#5
 2963 003c 1344     	 add r3,r3,r2
 2964 003e 03F58673 	 add r3,r3,#268
 2965 0042 1B68     	 ldr r3,[r3]
 2966 0044 03F00103 	 and r3,r3,#1
 2967 0048 002B     	 cmp r3,#0
 2968 004a 11D0     	 beq .L172
1085:.././hal/sam3u1c/udphs_device.c **** 			|| Is_udd_endpoint_stall_requested(ep)
 2969              	 .loc 6 1085 0
 2970 004c 2A4A     	 ldr r2,.L178+4
 2971 004e FB7B     	 ldrb r3,[r7,#15]
 2972 0050 5B01     	 lsls r3,r3,#5
 2973 0052 1344     	 add r3,r3,r2
 2974 0054 03F58E73 	 add r3,r3,#284
 2975 0058 1B68     	 ldr r3,[r3]
 2976 005a 03F02003 	 and r3,r3,#32
 2977 005e 002B     	 cmp r3,#0
 2978 0060 06D1     	 bne .L172
1086:.././hal/sam3u1c/udphs_device.c **** 			|| ptr_job->stall_requested) {
 2979              	 .loc 6 1086 0
 2980 0062 7B69     	 ldr r3,[r7,#20]
 2981 0064 1B7D     	 ldrb r3,[r3,#20]
 2982 0066 03F00403 	 and r3,r3,#4
 2983 006a DBB2     	 uxtb r3,r3
 2984 006c 002B     	 cmp r3,#0
 2985 006e 01D0     	 beq .L173
 2986              	.L172:
1087:.././hal/sam3u1c/udphs_device.c **** 		return false; // Endpoint is halted
 2987              	 .loc 6 1087 0
 2988 0070 0023     	 movs r3,#0
 2989 0072 3BE0     	 b .L171
 2990              	.L173:
1088:.././hal/sam3u1c/udphs_device.c **** 	}
1089:.././hal/sam3u1c/udphs_device.c **** 
1090:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 2991              	 .loc 6 1090 0
 2992 0074 214B     	 ldr r3,.L178+8
 2993 0076 9847     	 blx r3
 2994              	.LVL53:
 2995 0078 3861     	 str r0,[r7,#16]
1091:.././hal/sam3u1c/udphs_device.c **** 	if (ptr_job->busy == true) {
 2996              	 .loc 6 1091 0
 2997 007a 7B69     	 ldr r3,[r7,#20]
 2998 007c 1B7D     	 ldrb r3,[r3,#20]
 2999 007e 03F00103 	 and r3,r3,#1
 3000 0082 DBB2     	 uxtb r3,r3
 3001 0084 002B     	 cmp r3,#0
 3002 0086 04D0     	 beq .L174
1092:.././hal/sam3u1c/udphs_device.c **** 		cpu_irq_restore(flags);
 3003              	 .loc 6 1092 0
 3004 0088 3869     	 ldr r0,[r7,#16]
 3005 008a 1D4B     	 ldr r3,.L178+12
 3006 008c 9847     	 blx r3
 3007              	.LVL54:
1093:.././hal/sam3u1c/udphs_device.c **** 		return false; // Job already on going
 3008              	 .loc 6 1093 0
 3009 008e 0023     	 movs r3,#0
 3010 0090 2CE0     	 b .L171
 3011              	.L174:
1094:.././hal/sam3u1c/udphs_device.c **** 	}
1095:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->busy = true;
 3012              	 .loc 6 1095 0
 3013 0092 7A69     	 ldr r2,[r7,#20]
 3014 0094 137D     	 ldrb r3,[r2,#20]
 3015 0096 43F00103 	 orr r3,r3,#1
 3016 009a 1375     	 strb r3,[r2,#20]
1096:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 3017              	 .loc 6 1096 0
 3018 009c 3869     	 ldr r0,[r7,#16]
 3019 009e 184B     	 ldr r3,.L178+12
 3020 00a0 9847     	 blx r3
 3021              	.LVL55:
1097:.././hal/sam3u1c/udphs_device.c **** 
1098:.././hal/sam3u1c/udphs_device.c **** 	// No job running. Let's setup a new one.
1099:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->buf = buf;
 3022              	 .loc 6 1099 0
 3023 00a2 7B69     	 ldr r3,[r7,#20]
 3024 00a4 BA68     	 ldr r2,[r7,#8]
 3025 00a6 5A60     	 str r2,[r3,#4]
1100:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->buf_size = buf_size;
 3026              	 .loc 6 1100 0
 3027 00a8 7B69     	 ldr r3,[r7,#20]
 3028 00aa 7A68     	 ldr r2,[r7,#4]
 3029 00ac 9A60     	 str r2,[r3,#8]
1101:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->buf_cnt = 0;
 3030              	 .loc 6 1101 0
 3031 00ae 7B69     	 ldr r3,[r7,#20]
 3032 00b0 0022     	 movs r2,#0
 3033 00b2 DA60     	 str r2,[r3,#12]
1102:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->buf_load = 0;
 3034              	 .loc 6 1102 0
 3035 00b4 7B69     	 ldr r3,[r7,#20]
 3036 00b6 0022     	 movs r2,#0
 3037 00b8 1A61     	 str r2,[r3,#16]
1103:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->call_trans = callback;
 3038              	 .loc 6 1103 0
 3039 00ba 7B69     	 ldr r3,[r7,#20]
 3040 00bc 3A6A     	 ldr r2,[r7,#32]
 3041 00be 1A60     	 str r2,[r3]
1104:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
 3042              	 .loc 6 1104 0
 3043 00c0 BB7B     	 ldrb r3,[r7,#14]
 3044 00c2 002B     	 cmp r3,#0
 3045 00c4 02D1     	 bne .L175
 3046              	 .loc 6 1104 0 is_stmt 0 discriminator 2
 3047 00c6 7B68     	 ldr r3,[r7,#4]
 3048 00c8 002B     	 cmp r3,#0
 3049 00ca 01D1     	 bne .L176
 3050              	.L175:
 3051              	 .loc 6 1104 0 discriminator 3
 3052 00cc 0123     	 movs r3,#1
 3053 00ce 00E0     	 b .L177
 3054              	.L176:
 3055              	 .loc 6 1104 0 discriminator 4
 3056 00d0 0023     	 movs r3,#0
 3057              	.L177:
 3058              	 .loc 6 1104 0 discriminator 6
 3059 00d2 03F00103 	 and r3,r3,#1
 3060 00d6 D9B2     	 uxtb r1,r3
 3061 00d8 7A69     	 ldr r2,[r7,#20]
 3062 00da 137D     	 ldrb r3,[r2,#20]
 3063 00dc 61F34103 	 bfi r3,r1,#1,#1
 3064 00e0 1375     	 strb r3,[r2,#20]
1105:.././hal/sam3u1c/udphs_device.c **** 
1106:.././hal/sam3u1c/udphs_device.c **** 	// Request first DMA transfer
1107:.././hal/sam3u1c/udphs_device.c **** 	//dbg_print("runDMA%d\n\r", ep);
1108:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_trans_done(ep);
 3065              	 .loc 6 1108 0 is_stmt 1 discriminator 6
 3066 00e2 FB7B     	 ldrb r3,[r7,#15]
 3067 00e4 1846     	 mov r0,r3
 3068 00e6 074B     	 ldr r3,.L178+16
 3069 00e8 9847     	 blx r3
 3070              	.LVL56:
1109:.././hal/sam3u1c/udphs_device.c **** 	return true;
 3071              	 .loc 6 1109 0 discriminator 6
 3072 00ea 0123     	 movs r3,#1
 3073              	.L171:
1110:.././hal/sam3u1c/udphs_device.c **** }
 3074              	 .loc 6 1110 0
 3075 00ec 1846     	 mov r0,r3
 3076 00ee 1837     	 adds r7,r7,#24
 3077              	.LCFI127:
 3078              	 .cfi_def_cfa_offset 8
 3079 00f0 BD46     	 mov sp,r7
 3080              	.LCFI128:
 3081              	 .cfi_def_cfa_register 13
 3082              	 
 3083 00f2 80BD     	 pop {r7,pc}
 3084              	.L179:
 3085              	 .align 2
 3086              	.L178:
 3087 00f4 00000000 	 .word udd_ep_job
 3088 00f8 00400A40 	 .word 1074413568
 3089 00fc 00000000 	 .word cpu_irq_save
 3090 0100 00000000 	 .word cpu_irq_restore
 3091 0104 00000000 	 .word udd_ep_trans_done
 3092              	 .cfi_endproc
 3093              	.LFE157:
 3095              	 .section .text.udd_ep_abort,"ax",%progbits
 3096              	 .align 1
 3097              	 .global udd_ep_abort
 3098              	 .syntax unified
 3099              	 .thumb
 3100              	 .thumb_func
 3101              	 .fpu softvfp
 3103              	udd_ep_abort:
 3104              	.LFB158:
1111:.././hal/sam3u1c/udphs_device.c **** 
1112:.././hal/sam3u1c/udphs_device.c **** 
1113:.././hal/sam3u1c/udphs_device.c **** void udd_ep_abort(udd_ep_id_t ep)
1114:.././hal/sam3u1c/udphs_device.c **** {
 3105              	 .loc 6 1114 0
 3106              	 .cfi_startproc
 3107              	 
 3108              	 
 3109 0000 80B5     	 push {r7,lr}
 3110              	.LCFI129:
 3111              	 .cfi_def_cfa_offset 8
 3112              	 .cfi_offset 7,-8
 3113              	 .cfi_offset 14,-4
 3114 0002 84B0     	 sub sp,sp,#16
 3115              	.LCFI130:
 3116              	 .cfi_def_cfa_offset 24
 3117 0004 00AF     	 add r7,sp,#0
 3118              	.LCFI131:
 3119              	 .cfi_def_cfa_register 7
 3120 0006 0346     	 mov r3,r0
 3121 0008 FB71     	 strb r3,[r7,#7]
1115:.././hal/sam3u1c/udphs_device.c **** 	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
 3122              	 .loc 6 1115 0
 3123 000a FB79     	 ldrb r3,[r7,#7]
 3124 000c 03F00F03 	 and r3,r3,#15
 3125 0010 FB73     	 strb r3,[r7,#15]
1116:.././hal/sam3u1c/udphs_device.c **** 	// Stop DMA transfer
1117:.././hal/sam3u1c/udphs_device.c **** 	udd_endpoint_dma_set_control(ep_index, 0);
 3126              	 .loc 6 1117 0
 3127 0012 FB7B     	 ldrb r3,[r7,#15]
 3128 0014 1A01     	 lsls r2,r3,#4
 3129 0016 194B     	 ldr r3,.L185
 3130 0018 1344     	 add r3,r3,r2
 3131 001a 0022     	 movs r2,#0
 3132 001c 9A60     	 str r2,[r3,#8]
1118:.././hal/sam3u1c/udphs_device.c **** 	// Kill banks for IN
1119:.././hal/sam3u1c/udphs_device.c **** 	if (ep & USB_EP_DIR_IN) {
 3133              	 .loc 6 1119 0
 3134 001e 97F90730 	 ldrsb r3,[r7,#7]
 3135 0022 002B     	 cmp r3,#0
 3136 0024 21DA     	 bge .L181
1120:.././hal/sam3u1c/udphs_device.c **** 		for(;udd_nb_busy_bank(ep_index);) {
 3137              	 .loc 6 1120 0
 3138 0026 14E0     	 b .L182
 3139              	.L184:
1121:.././hal/sam3u1c/udphs_device.c **** 			udd_kill_last_in_bank(ep_index);
 3140              	 .loc 6 1121 0
 3141 0028 154A     	 ldr r2,.L185+4
 3142 002a FB7B     	 ldrb r3,[r7,#15]
 3143 002c 5B01     	 lsls r3,r3,#5
 3144 002e 1344     	 add r3,r3,r2
 3145 0030 03F58A73 	 add r3,r3,#276
 3146 0034 4FF40072 	 mov r2,#512
 3147 0038 1A60     	 str r2,[r3]
1122:.././hal/sam3u1c/udphs_device.c **** 			while(Is_udd_kill_last(ep_index));
 3148              	 .loc 6 1122 0
 3149 003a 00BF     	 nop
 3150              	.L183:
 3151              	 .loc 6 1122 0 is_stmt 0 discriminator 1
 3152 003c 104A     	 ldr r2,.L185+4
 3153 003e FB7B     	 ldrb r3,[r7,#15]
 3154 0040 5B01     	 lsls r3,r3,#5
 3155 0042 1344     	 add r3,r3,r2
 3156 0044 03F58E73 	 add r3,r3,#284
 3157 0048 1B68     	 ldr r3,[r3]
 3158 004a 03F40073 	 and r3,r3,#512
 3159 004e 002B     	 cmp r3,#0
 3160 0050 F4D1     	 bne .L183
 3161              	.L182:
1120:.././hal/sam3u1c/udphs_device.c **** 		for(;udd_nb_busy_bank(ep_index);) {
 3162              	 .loc 6 1120 0 is_stmt 1
 3163 0052 0B4A     	 ldr r2,.L185+4
 3164 0054 FB7B     	 ldrb r3,[r7,#15]
 3165 0056 5B01     	 lsls r3,r3,#5
 3166 0058 1344     	 add r3,r3,r2
 3167 005a 03F58E73 	 add r3,r3,#284
 3168 005e 1B68     	 ldr r3,[r3]
 3169 0060 9B0C     	 lsrs r3,r3,#18
 3170 0062 03F00303 	 and r3,r3,#3
 3171 0066 002B     	 cmp r3,#0
 3172 0068 DED1     	 bne .L184
 3173              	.L181:
1123:.././hal/sam3u1c/udphs_device.c **** 		}
1124:.././hal/sam3u1c/udphs_device.c **** 	}
1125:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_abort_job(ep);
 3174              	 .loc 6 1125 0
 3175 006a FB79     	 ldrb r3,[r7,#7]
 3176 006c 1846     	 mov r0,r3
 3177 006e 054B     	 ldr r3,.L185+8
 3178 0070 9847     	 blx r3
 3179              	.LVL57:
1126:.././hal/sam3u1c/udphs_device.c **** }
 3180              	 .loc 6 1126 0
 3181 0072 00BF     	 nop
 3182 0074 1037     	 adds r7,r7,#16
 3183              	.LCFI132:
 3184              	 .cfi_def_cfa_offset 8
 3185 0076 BD46     	 mov sp,r7
 3186              	.LCFI133:
 3187              	 .cfi_def_cfa_register 13
 3188              	 
 3189 0078 80BD     	 pop {r7,pc}
 3190              	.L186:
 3191 007a 00BF     	 .align 2
 3192              	.L185:
 3193 007c 00430A40 	 .word 1074414336
 3194 0080 00400A40 	 .word 1074413568
 3195 0084 00000000 	 .word udd_ep_abort_job
 3196              	 .cfi_endproc
 3197              	.LFE158:
 3199              	 .section .text.udd_ep_wait_stall_clear,"ax",%progbits
 3200              	 .align 1
 3201              	 .global udd_ep_wait_stall_clear
 3202              	 .syntax unified
 3203              	 .thumb
 3204              	 .thumb_func
 3205              	 .fpu softvfp
 3207              	udd_ep_wait_stall_clear:
 3208              	.LFB159:
1127:.././hal/sam3u1c/udphs_device.c **** 
1128:.././hal/sam3u1c/udphs_device.c **** 
1129:.././hal/sam3u1c/udphs_device.c **** bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
1130:.././hal/sam3u1c/udphs_device.c **** 		udd_callback_halt_cleared_t callback)
1131:.././hal/sam3u1c/udphs_device.c **** {
 3209              	 .loc 6 1131 0
 3210              	 .cfi_startproc
 3211              	 
 3212              	 
 3213 0000 80B5     	 push {r7,lr}
 3214              	.LCFI134:
 3215              	 .cfi_def_cfa_offset 8
 3216              	 .cfi_offset 7,-8
 3217              	 .cfi_offset 14,-4
 3218 0002 84B0     	 sub sp,sp,#16
 3219              	.LCFI135:
 3220              	 .cfi_def_cfa_offset 24
 3221 0004 00AF     	 add r7,sp,#0
 3222              	.LCFI136:
 3223              	 .cfi_def_cfa_register 7
 3224 0006 0346     	 mov r3,r0
 3225 0008 3960     	 str r1,[r7]
 3226 000a FB71     	 strb r3,[r7,#7]
1132:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_t *ptr_job;
1133:.././hal/sam3u1c/udphs_device.c **** 
1134:.././hal/sam3u1c/udphs_device.c **** 	ep &= USB_EP_ADDR_MASK;
 3227              	 .loc 6 1134 0
 3228 000c FB79     	 ldrb r3,[r7,#7]
 3229 000e 03F00F03 	 and r3,r3,#15
 3230 0012 FB71     	 strb r3,[r7,#7]
1135:.././hal/sam3u1c/udphs_device.c **** 	if (USB_DEVICE_MAX_EP < ep) {
 3231              	 .loc 6 1135 0
 3232 0014 FB79     	 ldrb r3,[r7,#7]
 3233 0016 022B     	 cmp r3,#2
 3234 0018 01D9     	 bls .L188
1136:.././hal/sam3u1c/udphs_device.c **** 		return false;
 3235              	 .loc 6 1136 0
 3236 001a 0023     	 movs r3,#0
 3237 001c 3CE0     	 b .L189
 3238              	.L188:
1137:.././hal/sam3u1c/udphs_device.c **** 	}
1138:.././hal/sam3u1c/udphs_device.c **** 
1139:.././hal/sam3u1c/udphs_device.c **** 	ptr_job = &udd_ep_job[ep - 1];
 3239              	 .loc 6 1139 0
 3240 001e FB79     	 ldrb r3,[r7,#7]
 3241 0020 5A1E     	 subs r2,r3,#1
 3242 0022 1346     	 mov r3,r2
 3243 0024 5B00     	 lsls r3,r3,#1
 3244 0026 1344     	 add r3,r3,r2
 3245 0028 DB00     	 lsls r3,r3,#3
 3246 002a 1D4A     	 ldr r2,.L195
 3247 002c 1344     	 add r3,r3,r2
 3248 002e FB60     	 str r3,[r7,#12]
1140:.././hal/sam3u1c/udphs_device.c **** 
1141:.././hal/sam3u1c/udphs_device.c **** 	if (!Is_udd_endpoint_enabled(ep)) {
 3249              	 .loc 6 1141 0
 3250 0030 1C4A     	 ldr r2,.L195+4
 3251 0032 FB79     	 ldrb r3,[r7,#7]
 3252 0034 5B01     	 lsls r3,r3,#5
 3253 0036 1344     	 add r3,r3,r2
 3254 0038 03F58673 	 add r3,r3,#268
 3255 003c 1B68     	 ldr r3,[r3]
 3256 003e 03F00103 	 and r3,r3,#1
 3257 0042 002B     	 cmp r3,#0
 3258 0044 01D1     	 bne .L190
1142:.././hal/sam3u1c/udphs_device.c **** 		return false; // Endpoint not enabled
 3259              	 .loc 6 1142 0
 3260 0046 0023     	 movs r3,#0
 3261 0048 26E0     	 b .L189
 3262              	.L190:
1143:.././hal/sam3u1c/udphs_device.c **** 	}
1144:.././hal/sam3u1c/udphs_device.c **** 
1145:.././hal/sam3u1c/udphs_device.c **** 	// Wait clear halt endpoint
1146:.././hal/sam3u1c/udphs_device.c **** 	if (ptr_job->busy == true) {
 3263              	 .loc 6 1146 0
 3264 004a FB68     	 ldr r3,[r7,#12]
 3265 004c 1B7D     	 ldrb r3,[r3,#20]
 3266 004e 03F00103 	 and r3,r3,#1
 3267 0052 DBB2     	 uxtb r3,r3
 3268 0054 002B     	 cmp r3,#0
 3269 0056 01D0     	 beq .L191
1147:.././hal/sam3u1c/udphs_device.c **** 		return false; // Job already on going
 3270              	 .loc 6 1147 0
 3271 0058 0023     	 movs r3,#0
 3272 005a 1DE0     	 b .L189
 3273              	.L191:
1148:.././hal/sam3u1c/udphs_device.c **** 	}
1149:.././hal/sam3u1c/udphs_device.c **** 
1150:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_stall_requested(ep)
 3274              	 .loc 6 1150 0
 3275 005c 114A     	 ldr r2,.L195+4
 3276 005e FB79     	 ldrb r3,[r7,#7]
 3277 0060 5B01     	 lsls r3,r3,#5
 3278 0062 1344     	 add r3,r3,r2
 3279 0064 03F58E73 	 add r3,r3,#284
 3280 0068 1B68     	 ldr r3,[r3]
 3281 006a 03F02003 	 and r3,r3,#32
 3282 006e 002B     	 cmp r3,#0
 3283 0070 06D1     	 bne .L192
1151:.././hal/sam3u1c/udphs_device.c **** 			|| ptr_job->stall_requested) {
 3284              	 .loc 6 1151 0
 3285 0072 FB68     	 ldr r3,[r7,#12]
 3286 0074 1B7D     	 ldrb r3,[r3,#20]
 3287 0076 03F00403 	 and r3,r3,#4
 3288 007a DBB2     	 uxtb r3,r3
 3289 007c 002B     	 cmp r3,#0
 3290 007e 08D0     	 beq .L193
 3291              	.L192:
1152:.././hal/sam3u1c/udphs_device.c **** 		// Endpoint halted then registers the callback
1153:.././hal/sam3u1c/udphs_device.c **** 		ptr_job->busy = true;
 3292              	 .loc 6 1153 0
 3293 0080 FA68     	 ldr r2,[r7,#12]
 3294 0082 137D     	 ldrb r3,[r2,#20]
 3295 0084 43F00103 	 orr r3,r3,#1
 3296 0088 1375     	 strb r3,[r2,#20]
1154:.././hal/sam3u1c/udphs_device.c **** 		ptr_job->call_nohalt = callback;
 3297              	 .loc 6 1154 0
 3298 008a FB68     	 ldr r3,[r7,#12]
 3299 008c 3A68     	 ldr r2,[r7]
 3300 008e 1A60     	 str r2,[r3]
 3301 0090 01E0     	 b .L194
 3302              	.L193:
1155:.././hal/sam3u1c/udphs_device.c **** 	} else {
1156:.././hal/sam3u1c/udphs_device.c **** 		// endpoint not halted then call directly callback
1157:.././hal/sam3u1c/udphs_device.c **** 		callback();
 3303              	 .loc 6 1157 0
 3304 0092 3B68     	 ldr r3,[r7]
 3305 0094 9847     	 blx r3
 3306              	.LVL58:
 3307              	.L194:
1158:.././hal/sam3u1c/udphs_device.c **** 	}
1159:.././hal/sam3u1c/udphs_device.c **** 	return true;
 3308              	 .loc 6 1159 0
 3309 0096 0123     	 movs r3,#1
 3310              	.L189:
1160:.././hal/sam3u1c/udphs_device.c **** }
 3311              	 .loc 6 1160 0
 3312 0098 1846     	 mov r0,r3
 3313 009a 1037     	 adds r7,r7,#16
 3314              	.LCFI137:
 3315              	 .cfi_def_cfa_offset 8
 3316 009c BD46     	 mov sp,r7
 3317              	.LCFI138:
 3318              	 .cfi_def_cfa_register 13
 3319              	 
 3320 009e 80BD     	 pop {r7,pc}
 3321              	.L196:
 3322              	 .align 2
 3323              	.L195:
 3324 00a0 00000000 	 .word udd_ep_job
 3325 00a4 00400A40 	 .word 1074413568
 3326              	 .cfi_endproc
 3327              	.LFE159:
 3329              	 .section .text.udd_test_mode_j,"ax",%progbits
 3330              	 .align 1
 3331              	 .global udd_test_mode_j
 3332              	 .syntax unified
 3333              	 .thumb
 3334              	 .thumb_func
 3335              	 .fpu softvfp
 3337              	udd_test_mode_j:
 3338              	.LFB160:
1161:.././hal/sam3u1c/udphs_device.c **** #endif // (0!=USB_DEVICE_MAX_EP)
1162:.././hal/sam3u1c/udphs_device.c **** 
1163:.././hal/sam3u1c/udphs_device.c **** 
1164:.././hal/sam3u1c/udphs_device.c **** #ifdef USB_DEVICE_HS_SUPPORT
1165:.././hal/sam3u1c/udphs_device.c **** 
1166:.././hal/sam3u1c/udphs_device.c **** void udd_test_mode_j(void)
1167:.././hal/sam3u1c/udphs_device.c **** {
 3339              	 .loc 6 1167 0
 3340              	 .cfi_startproc
 3341              	 
 3342              	 
 3343              	 
 3344 0000 80B4     	 push {r7}
 3345              	.LCFI139:
 3346              	 .cfi_def_cfa_offset 4
 3347              	 .cfi_offset 7,-4
 3348 0002 00AF     	 add r7,sp,#0
 3349              	.LCFI140:
 3350              	 .cfi_def_cfa_register 7
1168:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_hs_test_mode();
 3351              	 .loc 6 1168 0
 3352 0004 0A4B     	 ldr r3,.L198
 3353 0006 D3F8E030 	 ldr r3,[r3,#224]
 3354 000a 23F00303 	 bic r3,r3,#3
 3355 000e 084A     	 ldr r2,.L198
 3356 0010 43F00203 	 orr r3,r3,#2
 3357 0014 C2F8E030 	 str r3,[r2,#224]
1169:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_hs_test_mode_j();
 3358              	 .loc 6 1169 0
 3359 0018 054B     	 ldr r3,.L198
 3360 001a D3F8E030 	 ldr r3,[r3,#224]
 3361 001e 044A     	 ldr r2,.L198
 3362 0020 43F00403 	 orr r3,r3,#4
 3363 0024 C2F8E030 	 str r3,[r2,#224]
1170:.././hal/sam3u1c/udphs_device.c **** }
 3364              	 .loc 6 1170 0
 3365 0028 00BF     	 nop
 3366 002a BD46     	 mov sp,r7
 3367              	.LCFI141:
 3368              	 .cfi_def_cfa_register 13
 3369              	 
 3370 002c 80BC     	 pop {r7}
 3371              	.LCFI142:
 3372              	 .cfi_restore 7
 3373              	 .cfi_def_cfa_offset 0
 3374 002e 7047     	 bx lr
 3375              	.L199:
 3376              	 .align 2
 3377              	.L198:
 3378 0030 00400A40 	 .word 1074413568
 3379              	 .cfi_endproc
 3380              	.LFE160:
 3382              	 .section .text.udd_test_mode_k,"ax",%progbits
 3383              	 .align 1
 3384              	 .global udd_test_mode_k
 3385              	 .syntax unified
 3386              	 .thumb
 3387              	 .thumb_func
 3388              	 .fpu softvfp
 3390              	udd_test_mode_k:
 3391              	.LFB161:
1171:.././hal/sam3u1c/udphs_device.c **** 
1172:.././hal/sam3u1c/udphs_device.c **** 
1173:.././hal/sam3u1c/udphs_device.c **** void udd_test_mode_k(void)
1174:.././hal/sam3u1c/udphs_device.c **** {
 3392              	 .loc 6 1174 0
 3393              	 .cfi_startproc
 3394              	 
 3395              	 
 3396              	 
 3397 0000 80B4     	 push {r7}
 3398              	.LCFI143:
 3399              	 .cfi_def_cfa_offset 4
 3400              	 .cfi_offset 7,-4
 3401 0002 00AF     	 add r7,sp,#0
 3402              	.LCFI144:
 3403              	 .cfi_def_cfa_register 7
1175:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_hs_test_mode();
 3404              	 .loc 6 1175 0
 3405 0004 0A4B     	 ldr r3,.L201
 3406 0006 D3F8E030 	 ldr r3,[r3,#224]
 3407 000a 23F00303 	 bic r3,r3,#3
 3408 000e 084A     	 ldr r2,.L201
 3409 0010 43F00203 	 orr r3,r3,#2
 3410 0014 C2F8E030 	 str r3,[r2,#224]
1176:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_hs_test_mode_k();
 3411              	 .loc 6 1176 0
 3412 0018 054B     	 ldr r3,.L201
 3413 001a D3F8E030 	 ldr r3,[r3,#224]
 3414 001e 044A     	 ldr r2,.L201
 3415 0020 43F00803 	 orr r3,r3,#8
 3416 0024 C2F8E030 	 str r3,[r2,#224]
1177:.././hal/sam3u1c/udphs_device.c **** }
 3417              	 .loc 6 1177 0
 3418 0028 00BF     	 nop
 3419 002a BD46     	 mov sp,r7
 3420              	.LCFI145:
 3421              	 .cfi_def_cfa_register 13
 3422              	 
 3423 002c 80BC     	 pop {r7}
 3424              	.LCFI146:
 3425              	 .cfi_restore 7
 3426              	 .cfi_def_cfa_offset 0
 3427 002e 7047     	 bx lr
 3428              	.L202:
 3429              	 .align 2
 3430              	.L201:
 3431 0030 00400A40 	 .word 1074413568
 3432              	 .cfi_endproc
 3433              	.LFE161:
 3435              	 .section .text.udd_test_mode_se0_nak,"ax",%progbits
 3436              	 .align 1
 3437              	 .global udd_test_mode_se0_nak
 3438              	 .syntax unified
 3439              	 .thumb
 3440              	 .thumb_func
 3441              	 .fpu softvfp
 3443              	udd_test_mode_se0_nak:
 3444              	.LFB162:
1178:.././hal/sam3u1c/udphs_device.c **** 
1179:.././hal/sam3u1c/udphs_device.c **** 
1180:.././hal/sam3u1c/udphs_device.c **** void udd_test_mode_se0_nak(void)
1181:.././hal/sam3u1c/udphs_device.c **** {
 3445              	 .loc 6 1181 0
 3446              	 .cfi_startproc
 3447              	 
 3448              	 
 3449              	 
 3450 0000 80B4     	 push {r7}
 3451              	.LCFI147:
 3452              	 .cfi_def_cfa_offset 4
 3453              	 .cfi_offset 7,-4
 3454 0002 00AF     	 add r7,sp,#0
 3455              	.LCFI148:
 3456              	 .cfi_def_cfa_register 7
1182:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_hs_test_mode();
 3457              	 .loc 6 1182 0
 3458 0004 064B     	 ldr r3,.L204
 3459 0006 D3F8E030 	 ldr r3,[r3,#224]
 3460 000a 23F00303 	 bic r3,r3,#3
 3461 000e 044A     	 ldr r2,.L204
 3462 0010 43F00203 	 orr r3,r3,#2
 3463 0014 C2F8E030 	 str r3,[r2,#224]
1183:.././hal/sam3u1c/udphs_device.c **** }
 3464              	 .loc 6 1183 0
 3465 0018 00BF     	 nop
 3466 001a BD46     	 mov sp,r7
 3467              	.LCFI149:
 3468              	 .cfi_def_cfa_register 13
 3469              	 
 3470 001c 80BC     	 pop {r7}
 3471              	.LCFI150:
 3472              	 .cfi_restore 7
 3473              	 .cfi_def_cfa_offset 0
 3474 001e 7047     	 bx lr
 3475              	.L205:
 3476              	 .align 2
 3477              	.L204:
 3478 0020 00400A40 	 .word 1074413568
 3479              	 .cfi_endproc
 3480              	.LFE162:
 3482              	 .section .rodata
 3483              	 .align 2
 3484              	.LC0:
 3485 0000 00       	 .byte 0
 3486 0001 00       	 .byte 0
 3487 0002 00       	 .byte 0
 3488 0003 00       	 .byte 0
 3489 0004 00       	 .byte 0
 3490 0005 00       	 .byte 0
 3491 0006 00       	 .byte 0
 3492 0007 00       	 .byte 0
 3493 0008 00       	 .byte 0
 3494 0009 AA       	 .byte -86
 3495 000a AA       	 .byte -86
 3496 000b AA       	 .byte -86
 3497 000c AA       	 .byte -86
 3498 000d AA       	 .byte -86
 3499 000e AA       	 .byte -86
 3500 000f AA       	 .byte -86
 3501 0010 AA       	 .byte -86
 3502 0011 EE       	 .byte -18
 3503 0012 EE       	 .byte -18
 3504 0013 EE       	 .byte -18
 3505 0014 EE       	 .byte -18
 3506 0015 EE       	 .byte -18
 3507 0016 EE       	 .byte -18
 3508 0017 EE       	 .byte -18
 3509 0018 EE       	 .byte -18
 3510 0019 FE       	 .byte -2
 3511 001a FF       	 .byte -1
 3512 001b FF       	 .byte -1
 3513 001c FF       	 .byte -1
 3514 001d FF       	 .byte -1
 3515 001e FF       	 .byte -1
 3516 001f FF       	 .byte -1
 3517 0020 FF       	 .byte -1
 3518 0021 FF       	 .byte -1
 3519 0022 FF       	 .byte -1
 3520 0023 FF       	 .byte -1
 3521 0024 FF       	 .byte -1
 3522 0025 7F       	 .byte 127
 3523 0026 BF       	 .byte -65
 3524 0027 DF       	 .byte -33
 3525 0028 EF       	 .byte -17
 3526 0029 F7       	 .byte -9
 3527 002a FB       	 .byte -5
 3528 002b FD       	 .byte -3
 3529 002c FC       	 .byte -4
 3530 002d 7E       	 .byte 126
 3531 002e BF       	 .byte -65
 3532 002f DF       	 .byte -33
 3533 0030 EF       	 .byte -17
 3534 0031 F7       	 .byte -9
 3535 0032 FB       	 .byte -5
 3536 0033 FD       	 .byte -3
 3537 0034 7E       	 .byte 126
 3538              	 .section .text.udd_test_mode_packet,"ax",%progbits
 3539              	 .align 1
 3540              	 .global udd_test_mode_packet
 3541              	 .syntax unified
 3542              	 .thumb
 3543              	 .thumb_func
 3544              	 .fpu softvfp
 3546              	udd_test_mode_packet:
 3547              	.LFB163:
1184:.././hal/sam3u1c/udphs_device.c **** 
1185:.././hal/sam3u1c/udphs_device.c **** 
1186:.././hal/sam3u1c/udphs_device.c **** void udd_test_mode_packet(void)
1187:.././hal/sam3u1c/udphs_device.c **** {
 3548              	 .loc 6 1187 0
 3549              	 .cfi_startproc
 3550              	 
 3551              	 
 3552              	 
 3553 0000 B0B4     	 push {r4,r5,r7}
 3554              	.LCFI151:
 3555              	 .cfi_def_cfa_offset 12
 3556              	 .cfi_offset 4,-12
 3557              	 .cfi_offset 5,-8
 3558              	 .cfi_offset 7,-4
 3559 0002 93B0     	 sub sp,sp,#76
 3560              	.LCFI152:
 3561              	 .cfi_def_cfa_offset 88
 3562 0004 00AF     	 add r7,sp,#0
 3563              	.LCFI153:
 3564              	 .cfi_def_cfa_register 7
1188:.././hal/sam3u1c/udphs_device.c **** 	uint8_t i;
1189:.././hal/sam3u1c/udphs_device.c **** 	uint8_t *ptr_dest;
1190:.././hal/sam3u1c/udphs_device.c **** 	const uint8_t *ptr_src;
1191:.././hal/sam3u1c/udphs_device.c **** 
1192:.././hal/sam3u1c/udphs_device.c **** 	const uint8_t test_packet[] = {
 3565              	 .loc 6 1192 0
 3566 0006 2E4B     	 ldr r3,.L209
 3567 0008 3C1D     	 adds r4,r7,#4
 3568 000a 1D46     	 mov r5,r3
 3569 000c 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 3570 000e 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 3571 0010 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 3572 0012 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 3573 0014 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 3574 0016 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 3575 0018 95E80300 	 ldm r5,{r0,r1}
 3576 001c 2060     	 str r0,[r4]
 3577 001e 0434     	 adds r4,r4,#4
 3578 0020 2170     	 strb r1,[r4]
1193:.././hal/sam3u1c/udphs_device.c **** 		// 00000000 * 9
1194:.././hal/sam3u1c/udphs_device.c **** 		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
1195:.././hal/sam3u1c/udphs_device.c **** 		// 01010101 * 8
1196:.././hal/sam3u1c/udphs_device.c **** 		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
1197:.././hal/sam3u1c/udphs_device.c **** 		// 01110111 * 8
1198:.././hal/sam3u1c/udphs_device.c **** 		0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,
1199:.././hal/sam3u1c/udphs_device.c **** 		// 0, {111111S * 15}, 111111
1200:.././hal/sam3u1c/udphs_device.c **** 		0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
1201:.././hal/sam3u1c/udphs_device.c **** 				0xFF, 0xFF,
1202:.././hal/sam3u1c/udphs_device.c **** 		// S, 111111S, {0111111S * 7}
1203:.././hal/sam3u1c/udphs_device.c **** 		0x7F, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD,
1204:.././hal/sam3u1c/udphs_device.c **** 		// 00111111, {S0111111 * 9}, S0
1205:.././hal/sam3u1c/udphs_device.c **** 		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
1206:.././hal/sam3u1c/udphs_device.c **** 	};
1207:.././hal/sam3u1c/udphs_device.c **** 
1208:.././hal/sam3u1c/udphs_device.c **** 	// Reconfigure control endpoint to bulk IN endpoint
1209:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_endpoint(0);
 3579              	 .loc 6 1209 0
 3580 0022 284B     	 ldr r3,.L209+4
 3581 0024 0122     	 movs r2,#1
 3582 0026 C3F80821 	 str r2,[r3,#264]
1210:.././hal/sam3u1c/udphs_device.c **** 	udd_configure_endpoint(0, // endpoint number: 0
 3583              	 .loc 6 1210 0
 3584 002a 264B     	 ldr r3,.L209+4
 3585 002c D3F80031 	 ldr r3,[r3,#256]
 3586 0030 23F47F73 	 bic r3,r3,#1020
 3587 0034 23F00303 	 bic r3,r3,#3
 3588 0038 224A     	 ldr r2,.L209+4
 3589 003a 43F06B03 	 orr r3,r3,#107
 3590 003e C2F80031 	 str r3,[r2,#256]
1211:.././hal/sam3u1c/udphs_device.c **** 			USB_EP_TYPE_BULK, // Type: bulk
1212:.././hal/sam3u1c/udphs_device.c **** 			1, // dir: IN
1213:.././hal/sam3u1c/udphs_device.c **** 			64, //Size
1214:.././hal/sam3u1c/udphs_device.c **** 			1, // Bank Number
1215:.././hal/sam3u1c/udphs_device.c **** 			0); // NB Trans (not used for bulk ept)
1216:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_endpoint(0);
 3591              	 .loc 6 1216 0
 3592 0042 204B     	 ldr r3,.L209+4
 3593 0044 0122     	 movs r2,#1
 3594 0046 C3F80421 	 str r2,[r3,#260]
1217:.././hal/sam3u1c/udphs_device.c **** 
1218:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_hs_test_mode();
 3595              	 .loc 6 1218 0
 3596 004a 1E4B     	 ldr r3,.L209+4
 3597 004c D3F8E030 	 ldr r3,[r3,#224]
 3598 0050 23F00303 	 bic r3,r3,#3
 3599 0054 1B4A     	 ldr r2,.L209+4
 3600 0056 43F00203 	 orr r3,r3,#2
 3601 005a C2F8E030 	 str r3,[r2,#224]
1219:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_hs_test_mode_packet();
 3602              	 .loc 6 1219 0
 3603 005e 194B     	 ldr r3,.L209+4
 3604 0060 D3F8E030 	 ldr r3,[r3,#224]
 3605 0064 174A     	 ldr r2,.L209+4
 3606 0066 43F01003 	 orr r3,r3,#16
 3607 006a C2F8E030 	 str r3,[r2,#224]
1220:.././hal/sam3u1c/udphs_device.c **** 
1221:.././hal/sam3u1c/udphs_device.c **** 	// Send packet on endpoint 0
1222:.././hal/sam3u1c/udphs_device.c **** 	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
 3608              	 .loc 6 1222 0
 3609 006e 164B     	 ldr r3,.L209+8
 3610 0070 3B64     	 str r3,[r7,#64]
1223:.././hal/sam3u1c/udphs_device.c **** 	ptr_src = test_packet;
 3611              	 .loc 6 1223 0
 3612 0072 3B1D     	 adds r3,r7,#4
 3613 0074 FB63     	 str r3,[r7,#60]
1224:.././hal/sam3u1c/udphs_device.c **** 
1225:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < sizeof(test_packet); i++) {
 3614              	 .loc 6 1225 0
 3615 0076 0023     	 movs r3,#0
 3616 0078 87F84730 	 strb r3,[r7,#71]
 3617 007c 0CE0     	 b .L207
 3618              	.L208:
1226:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 3619              	 .loc 6 1226 0 discriminator 3
 3620 007e FA6B     	 ldr r2,[r7,#60]
 3621 0080 531C     	 adds r3,r2,#1
 3622 0082 FB63     	 str r3,[r7,#60]
 3623 0084 3B6C     	 ldr r3,[r7,#64]
 3624 0086 591C     	 adds r1,r3,#1
 3625 0088 3964     	 str r1,[r7,#64]
 3626 008a 1278     	 ldrb r2,[r2]
 3627 008c 1A70     	 strb r2,[r3]
1225:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 3628              	 .loc 6 1225 0 discriminator 3
 3629 008e 97F84730 	 ldrb r3,[r7,#71]
 3630 0092 0133     	 adds r3,r3,#1
 3631 0094 87F84730 	 strb r3,[r7,#71]
 3632              	.L207:
1225:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 3633              	 .loc 6 1225 0 is_stmt 0 discriminator 1
 3634 0098 97F84730 	 ldrb r3,[r7,#71]
 3635 009c 342B     	 cmp r3,#52
 3636 009e EED9     	 bls .L208
1227:.././hal/sam3u1c/udphs_device.c **** 	}
1228:.././hal/sam3u1c/udphs_device.c **** 	// Validate and send the data available in the control endpoint buffer
1229:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_in_send(0);
 3637              	 .loc 6 1229 0 is_stmt 1
 3638 00a0 084B     	 ldr r3,.L209+4
 3639 00a2 4FF48062 	 mov r2,#1024
 3640 00a6 C3F81821 	 str r2,[r3,#280]
1230:.././hal/sam3u1c/udphs_device.c **** 	udd_raise_tx_pkt_ready(0);
 3641              	 .loc 6 1230 0
 3642 00aa 064B     	 ldr r3,.L209+4
 3643 00ac 4FF40062 	 mov r2,#2048
 3644 00b0 C3F81421 	 str r2,[r3,#276]
1231:.././hal/sam3u1c/udphs_device.c **** }
 3645              	 .loc 6 1231 0
 3646 00b4 00BF     	 nop
 3647 00b6 4C37     	 adds r7,r7,#76
 3648              	.LCFI154:
 3649              	 .cfi_def_cfa_offset 12
 3650 00b8 BD46     	 mov sp,r7
 3651              	.LCFI155:
 3652              	 .cfi_def_cfa_register 13
 3653              	 
 3654 00ba B0BC     	 pop {r4,r5,r7}
 3655              	.LCFI156:
 3656              	 .cfi_restore 7
 3657              	 .cfi_restore 5
 3658              	 .cfi_restore 4
 3659              	 .cfi_def_cfa_offset 0
 3660 00bc 7047     	 bx lr
 3661              	.L210:
 3662 00be 00BF     	 .align 2
 3663              	.L209:
 3664 00c0 00000000 	 .word .LC0
 3665 00c4 00400A40 	 .word 1074413568
 3666 00c8 00001820 	 .word 538443776
 3667              	 .cfi_endproc
 3668              	.LFE163:
 3670              	 .section .text.udd_reset_ep_ctrl,"ax",%progbits
 3671              	 .align 1
 3672              	 .syntax unified
 3673              	 .thumb
 3674              	 .thumb_func
 3675              	 .fpu softvfp
 3677              	udd_reset_ep_ctrl:
 3678              	.LFB164:
1232:.././hal/sam3u1c/udphs_device.c **** #endif // USB_DEVICE_HS_SUPPORT
1233:.././hal/sam3u1c/udphs_device.c **** 
1234:.././hal/sam3u1c/udphs_device.c **** 
1235:.././hal/sam3u1c/udphs_device.c **** 
1236:.././hal/sam3u1c/udphs_device.c **** //--------------------------------------------------------
1237:.././hal/sam3u1c/udphs_device.c **** //--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT
1238:.././hal/sam3u1c/udphs_device.c **** 
1239:.././hal/sam3u1c/udphs_device.c **** static void udd_reset_ep_ctrl(void)
1240:.././hal/sam3u1c/udphs_device.c **** {
 3679              	 .loc 6 1240 0
 3680              	 .cfi_startproc
 3681              	 
 3682              	 
 3683 0000 80B5     	 push {r7,lr}
 3684              	.LCFI157:
 3685              	 .cfi_def_cfa_offset 8
 3686              	 .cfi_offset 7,-8
 3687              	 .cfi_offset 14,-4
 3688 0002 82B0     	 sub sp,sp,#8
 3689              	.LCFI158:
 3690              	 .cfi_def_cfa_offset 16
 3691 0004 00AF     	 add r7,sp,#0
 3692              	.LCFI159:
 3693              	 .cfi_def_cfa_register 7
1241:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1242:.././hal/sam3u1c/udphs_device.c **** 
1243:.././hal/sam3u1c/udphs_device.c **** 	// Reset USB address to 0
1244:.././hal/sam3u1c/udphs_device.c **** 	udd_configure_address(0);
 3694              	 .loc 6 1244 0
 3695 0006 1B4B     	 ldr r3,.L212
 3696 0008 1B68     	 ldr r3,[r3]
 3697 000a 1A4A     	 ldr r2,.L212
 3698 000c 23F07F03 	 bic r3,r3,#127
 3699 0010 1360     	 str r3,[r2]
1245:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_address();
 3700              	 .loc 6 1245 0
 3701 0012 184B     	 ldr r3,.L212
 3702 0014 1B68     	 ldr r3,[r3]
 3703 0016 174A     	 ldr r2,.L212
 3704 0018 43F08003 	 orr r3,r3,#128
 3705 001c 1360     	 str r3,[r2]
1246:.././hal/sam3u1c/udphs_device.c **** 
1247:.././hal/sam3u1c/udphs_device.c **** 	// Alloc and configure control endpoint
1248:.././hal/sam3u1c/udphs_device.c **** 	udd_configure_endpoint(0,
 3706              	 .loc 6 1248 0
 3707 001e 154B     	 ldr r3,.L212
 3708 0020 D3F80031 	 ldr r3,[r3,#256]
 3709 0024 23F47F73 	 bic r3,r3,#1020
 3710 0028 23F00303 	 bic r3,r3,#3
 3711 002c 114A     	 ldr r2,.L212
 3712 002e 43F04303 	 orr r3,r3,#67
 3713 0032 C2F80031 	 str r3,[r2,#256]
1249:.././hal/sam3u1c/udphs_device.c **** 			USB_EP_TYPE_CONTROL,
1250:.././hal/sam3u1c/udphs_device.c **** 			0,
1251:.././hal/sam3u1c/udphs_device.c **** 			USB_DEVICE_EP_CTRL_SIZE,
1252:.././hal/sam3u1c/udphs_device.c **** 			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
1253:.././hal/sam3u1c/udphs_device.c **** 			0);
1254:.././hal/sam3u1c/udphs_device.c **** 
1255:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
1256:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_endpoint(0);
 3714              	 .loc 6 1256 0
 3715 0036 0F4B     	 ldr r3,.L212
 3716 0038 0122     	 movs r2,#1
 3717 003a C3F80421 	 str r2,[r3,#260]
1257:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 3718              	 .loc 6 1257 0
 3719 003e 0E4B     	 ldr r3,.L212+4
 3720 0040 9847     	 blx r3
 3721              	.LVL59:
 3722 0042 7860     	 str r0,[r7,#4]
1258:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_setup_received_interrupt(0);
 3723              	 .loc 6 1258 0
 3724 0044 0B4B     	 ldr r3,.L212
 3725 0046 4FF48052 	 mov r2,#4096
 3726 004a C3F80421 	 str r2,[r3,#260]
1259:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_out_received_interrupt(0);
 3727              	 .loc 6 1259 0
 3728 004e 094B     	 ldr r3,.L212
 3729 0050 4FF40072 	 mov r2,#512
 3730 0054 C3F80421 	 str r2,[r3,#260]
1260:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_endpoint_interrupt(0);
 3731              	 .loc 6 1260 0
 3732 0058 064B     	 ldr r3,.L212
 3733 005a 1B69     	 ldr r3,[r3,#16]
 3734 005c 054A     	 ldr r2,.L212
 3735 005e 43F48073 	 orr r3,r3,#256
 3736 0062 1361     	 str r3,[r2,#16]
1261:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 3737              	 .loc 6 1261 0
 3738 0064 7868     	 ldr r0,[r7,#4]
 3739 0066 054B     	 ldr r3,.L212+8
 3740 0068 9847     	 blx r3
 3741              	.LVL60:
1262:.././hal/sam3u1c/udphs_device.c **** }
 3742              	 .loc 6 1262 0
 3743 006a 00BF     	 nop
 3744 006c 0837     	 adds r7,r7,#8
 3745              	.LCFI160:
 3746              	 .cfi_def_cfa_offset 8
 3747 006e BD46     	 mov sp,r7
 3748              	.LCFI161:
 3749              	 .cfi_def_cfa_register 13
 3750              	 
 3751 0070 80BD     	 pop {r7,pc}
 3752              	.L213:
 3753 0072 00BF     	 .align 2
 3754              	.L212:
 3755 0074 00400A40 	 .word 1074413568
 3756 0078 00000000 	 .word cpu_irq_save
 3757 007c 00000000 	 .word cpu_irq_restore
 3758              	 .cfi_endproc
 3759              	.LFE164:
 3761              	 .section .text.udd_ctrl_init,"ax",%progbits
 3762              	 .align 1
 3763              	 .syntax unified
 3764              	 .thumb
 3765              	 .thumb_func
 3766              	 .fpu softvfp
 3768              	udd_ctrl_init:
 3769              	.LFB165:
1263:.././hal/sam3u1c/udphs_device.c **** 
1264:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_init(void)
1265:.././hal/sam3u1c/udphs_device.c **** {
 3770              	 .loc 6 1265 0
 3771              	 .cfi_startproc
 3772              	 
 3773              	 
 3774 0000 80B5     	 push {r7,lr}
 3775              	.LCFI162:
 3776              	 .cfi_def_cfa_offset 8
 3777              	 .cfi_offset 7,-8
 3778              	 .cfi_offset 14,-4
 3779 0002 82B0     	 sub sp,sp,#8
 3780              	.LCFI163:
 3781              	 .cfi_def_cfa_offset 16
 3782 0004 00AF     	 add r7,sp,#0
 3783              	.LCFI164:
 3784              	 .cfi_def_cfa_register 7
1266:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1267:.././hal/sam3u1c/udphs_device.c **** 
1268:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("ctlInit ");
1269:.././hal/sam3u1c/udphs_device.c **** 
1270:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 3785              	 .loc 6 1270 0
 3786 0006 104B     	 ldr r3,.L215
 3787 0008 9847     	 blx r3
 3788              	.LVL61:
 3789 000a 7860     	 str r0,[r7,#4]
1271:.././hal/sam3u1c/udphs_device.c **** 	// In case of abort of IN Data Phase:
1272:.././hal/sam3u1c/udphs_device.c **** 	// No need to abort IN transfer (rise TXINI),
1273:.././hal/sam3u1c/udphs_device.c **** 	// because it is automatically done by hardware when a Setup packet is received.
1274:.././hal/sam3u1c/udphs_device.c **** 	// But the interrupt must be disabled to don't generate interrupt TXINI
1275:.././hal/sam3u1c/udphs_device.c **** 	// after SETUP reception.
1276:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_in_send_interrupt(0);
 3790              	 .loc 6 1276 0
 3791 000c 0F4B     	 ldr r3,.L215+4
 3792 000e 4FF48062 	 mov r2,#1024
 3793 0012 C3F80821 	 str r2,[r3,#264]
1277:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 3794              	 .loc 6 1277 0
 3795 0016 7868     	 ldr r0,[r7,#4]
 3796 0018 0D4B     	 ldr r3,.L215+8
 3797 001a 9847     	 blx r3
 3798              	.LVL62:
1278:.././hal/sam3u1c/udphs_device.c **** 
1279:.././hal/sam3u1c/udphs_device.c **** 	// In case of OUT ZLP event is no processed before Setup event occurs
1280:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_out_received(0);
 3799              	 .loc 6 1280 0
 3800 001c 0B4B     	 ldr r3,.L215+4
 3801 001e 4FF40072 	 mov r2,#512
 3802 0022 C3F81821 	 str r2,[r3,#280]
1281:.././hal/sam3u1c/udphs_device.c **** 
1282:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.callback = NULL;
 3803              	 .loc 6 1282 0
 3804 0026 0B4B     	 ldr r3,.L215+12
 3805 0028 0022     	 movs r2,#0
 3806 002a 1A61     	 str r2,[r3,#16]
1283:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.over_under_run = NULL;
 3807              	 .loc 6 1283 0
 3808 002c 094B     	 ldr r3,.L215+12
 3809 002e 0022     	 movs r2,#0
 3810 0030 5A61     	 str r2,[r3,#20]
1284:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.payload_size = 0;
 3811              	 .loc 6 1284 0
 3812 0032 084B     	 ldr r3,.L215+12
 3813 0034 0022     	 movs r2,#0
 3814 0036 9A81     	 strh r2,[r3,#12]
1285:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_control_state = UDD_EPCTRL_SETUP;
 3815              	 .loc 6 1285 0
 3816 0038 074B     	 ldr r3,.L215+16
 3817 003a 0022     	 movs r2,#0
 3818 003c 1A70     	 strb r2,[r3]
1286:.././hal/sam3u1c/udphs_device.c **** }
 3819              	 .loc 6 1286 0
 3820 003e 00BF     	 nop
 3821 0040 0837     	 adds r7,r7,#8
 3822              	.LCFI165:
 3823              	 .cfi_def_cfa_offset 8
 3824 0042 BD46     	 mov sp,r7
 3825              	.LCFI166:
 3826              	 .cfi_def_cfa_register 13
 3827              	 
 3828 0044 80BD     	 pop {r7,pc}
 3829              	.L216:
 3830 0046 00BF     	 .align 2
 3831              	.L215:
 3832 0048 00000000 	 .word cpu_irq_save
 3833 004c 00400A40 	 .word 1074413568
 3834 0050 00000000 	 .word cpu_irq_restore
 3835 0054 00000000 	 .word udd_g_ctrlreq
 3836 0058 00000000 	 .word udd_ep_control_state
 3837              	 .cfi_endproc
 3838              	.LFE165:
 3840              	 .section .text.udd_ctrl_setup_received,"ax",%progbits
 3841              	 .align 1
 3842              	 .syntax unified
 3843              	 .thumb
 3844              	 .thumb_func
 3845              	 .fpu softvfp
 3847              	udd_ctrl_setup_received:
 3848              	.LFB166:
1287:.././hal/sam3u1c/udphs_device.c **** 
1288:.././hal/sam3u1c/udphs_device.c **** 
1289:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_setup_received(void)
1290:.././hal/sam3u1c/udphs_device.c **** {
 3849              	 .loc 6 1290 0
 3850              	 .cfi_startproc
 3851              	 
 3852              	 
 3853 0000 80B5     	 push {r7,lr}
 3854              	.LCFI167:
 3855              	 .cfi_def_cfa_offset 8
 3856              	 .cfi_offset 7,-8
 3857              	 .cfi_offset 14,-4
 3858 0002 84B0     	 sub sp,sp,#16
 3859              	.LCFI168:
 3860              	 .cfi_def_cfa_offset 24
 3861 0004 00AF     	 add r7,sp,#0
 3862              	.LCFI169:
 3863              	 .cfi_def_cfa_register 7
1291:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1292:.././hal/sam3u1c/udphs_device.c **** 	uint8_t i;
1293:.././hal/sam3u1c/udphs_device.c **** 
1294:.././hal/sam3u1c/udphs_device.c **** 	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
 3864              	 .loc 6 1294 0
 3865 0006 404B     	 ldr r3,.L226
 3866 0008 1B78     	 ldrb r3,[r3]
 3867 000a 002B     	 cmp r3,#0
 3868 000c 03D0     	 beq .L218
1295:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("sErr ");
1296:.././hal/sam3u1c/udphs_device.c **** 		// May be a hidden DATA or ZLP phase
1297:.././hal/sam3u1c/udphs_device.c **** 		// or protocol abort
1298:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_endofrequest();
 3869              	 .loc 6 1298 0
 3870 000e 3F4B     	 ldr r3,.L226+4
 3871 0010 9847     	 blx r3
 3872              	.LVL63:
1299:.././hal/sam3u1c/udphs_device.c **** 
1300:.././hal/sam3u1c/udphs_device.c **** 		// Reinitializes control endpoint management
1301:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_init();
 3873              	 .loc 6 1301 0
 3874 0012 3F4B     	 ldr r3,.L226+8
 3875 0014 9847     	 blx r3
 3876              	.LVL64:
 3877              	.L218:
1302:.././hal/sam3u1c/udphs_device.c **** 	}
1303:.././hal/sam3u1c/udphs_device.c **** 	// Fill setup request structure
1304:.././hal/sam3u1c/udphs_device.c **** 	if (8 != udd_byte_count(0)) {
 3878              	 .loc 6 1304 0
 3879 0016 3F4B     	 ldr r3,.L226+12
 3880 0018 D3F81C31 	 ldr r3,[r3,#284]
 3881 001c 1B0D     	 lsrs r3,r3,#20
 3882 001e C3F30A03 	 ubfx r3,r3,#0,#11
 3883 0022 082B     	 cmp r3,#8
 3884 0024 07D0     	 beq .L219
1305:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("cntErr ");
1306:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_stall_data();
 3885              	 .loc 6 1306 0
 3886 0026 3C4B     	 ldr r3,.L226+16
 3887 0028 9847     	 blx r3
 3888              	.LVL65:
1307:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_setup_received(0);
 3889              	 .loc 6 1307 0
 3890 002a 3A4B     	 ldr r3,.L226+12
 3891 002c 4FF48052 	 mov r2,#4096
 3892 0030 C3F81821 	 str r2,[r3,#280]
1308:.././hal/sam3u1c/udphs_device.c **** 		return; // Error data number doesn't correspond to SETUP packet
 3893              	 .loc 6 1308 0
 3894 0034 64E0     	 b .L217
 3895              	.L219:
1309:.././hal/sam3u1c/udphs_device.c **** 	}
1310:.././hal/sam3u1c/udphs_device.c **** 
1311:.././hal/sam3u1c/udphs_device.c **** 	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
 3896              	 .loc 6 1311 0
 3897 0036 394B     	 ldr r3,.L226+20
 3898 0038 BB60     	 str r3,[r7,#8]
1312:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < 8; i++) {
 3899              	 .loc 6 1312 0
 3900 003a 0023     	 movs r3,#0
 3901 003c FB73     	 strb r3,[r7,#15]
 3902 003e 0AE0     	 b .L221
 3903              	.L222:
1313:.././hal/sam3u1c/udphs_device.c **** 		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
 3904              	 .loc 6 1313 0 discriminator 3
 3905 0040 BB68     	 ldr r3,[r7,#8]
 3906 0042 5A1C     	 adds r2,r3,#1
 3907 0044 BA60     	 str r2,[r7,#8]
 3908 0046 FA7B     	 ldrb r2,[r7,#15]
 3909 0048 3549     	 ldr r1,.L226+24
 3910 004a 0A44     	 add r2,r2,r1
 3911 004c 1B78     	 ldrb r3,[r3]
 3912 004e 1370     	 strb r3,[r2]
1312:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < 8; i++) {
 3913              	 .loc 6 1312 0 discriminator 3
 3914 0050 FB7B     	 ldrb r3,[r7,#15]
 3915 0052 0133     	 adds r3,r3,#1
 3916 0054 FB73     	 strb r3,[r7,#15]
 3917              	.L221:
1312:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < 8; i++) {
 3918              	 .loc 6 1312 0 is_stmt 0 discriminator 1
 3919 0056 FB7B     	 ldrb r3,[r7,#15]
 3920 0058 072B     	 cmp r3,#7
 3921 005a F1D9     	 bls .L222
1314:.././hal/sam3u1c/udphs_device.c **** 	}
1315:.././hal/sam3u1c/udphs_device.c **** 	// Manage LSB/MSB to fit with CPU usage
1316:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
 3922              	 .loc 6 1316 0 is_stmt 1
 3923 005c 304B     	 ldr r3,.L226+24
 3924 005e 5A88     	 ldrh r2,[r3,#2]
 3925 0060 2F4B     	 ldr r3,.L226+24
 3926 0062 5A80     	 strh r2,[r3,#2]
1317:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
 3927              	 .loc 6 1317 0
 3928 0064 2E4B     	 ldr r3,.L226+24
 3929 0066 9A88     	 ldrh r2,[r3,#4]
 3930 0068 2D4B     	 ldr r3,.L226+24
 3931 006a 9A80     	 strh r2,[r3,#4]
1318:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
 3932              	 .loc 6 1318 0
 3933 006c 2C4B     	 ldr r3,.L226+24
 3934 006e DA88     	 ldrh r2,[r3,#6]
 3935 0070 2B4B     	 ldr r3,.L226+24
 3936 0072 DA80     	 strh r2,[r3,#6]
1319:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("(%x %x %x %x %x) ",
1320:.././hal/sam3u1c/udphs_device.c **** 			udd_g_ctrlreq.req.bRequest, udd_g_ctrlreq.req.bmRequestType,
1321:.././hal/sam3u1c/udphs_device.c **** 			udd_g_ctrlreq.req.wValue, udd_g_ctrlreq.req.wIndex,
1322:.././hal/sam3u1c/udphs_device.c **** 			udd_g_ctrlreq.req.wLength);
1323:.././hal/sam3u1c/udphs_device.c **** 
1324:.././hal/sam3u1c/udphs_device.c **** 	// Decode setup request
1325:.././hal/sam3u1c/udphs_device.c **** 	if (udc_process_setup() == false) {
 3937              	 .loc 6 1325 0
 3938 0074 2B4B     	 ldr r3,.L226+28
 3939 0076 9847     	 blx r3
 3940              	.LVL66:
 3941 0078 0346     	 mov r3,r0
 3942 007a 83F00103 	 eor r3,r3,#1
 3943 007e DBB2     	 uxtb r3,r3
 3944 0080 002B     	 cmp r3,#0
 3945 0082 07D0     	 beq .L223
1326:.././hal/sam3u1c/udphs_device.c **** 		// Setup request unknown then stall it
1327:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("ProcErr ");
1328:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_stall_data();
 3946              	 .loc 6 1328 0
 3947 0084 244B     	 ldr r3,.L226+16
 3948 0086 9847     	 blx r3
 3949              	.LVL67:
1329:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_setup_received(0);
 3950              	 .loc 6 1329 0
 3951 0088 224B     	 ldr r3,.L226+12
 3952 008a 4FF48052 	 mov r2,#4096
 3953 008e C3F81821 	 str r2,[r3,#280]
1330:.././hal/sam3u1c/udphs_device.c **** 		return;
 3954              	 .loc 6 1330 0
 3955 0092 35E0     	 b .L217
 3956              	.L223:
1331:.././hal/sam3u1c/udphs_device.c **** 	}
1332:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_setup_received(0);
 3957              	 .loc 6 1332 0
 3958 0094 1F4B     	 ldr r3,.L226+12
 3959 0096 4FF48052 	 mov r2,#4096
 3960 009a C3F81821 	 str r2,[r3,#280]
1333:.././hal/sam3u1c/udphs_device.c **** 
1334:.././hal/sam3u1c/udphs_device.c **** 	if (Udd_setup_is_in()) {
 3961              	 .loc 6 1334 0
 3962 009e 204B     	 ldr r3,.L226+24
 3963 00a0 1B78     	 ldrb r3,[r3]
 3964 00a2 5BB2     	 sxtb r3,r3
 3965 00a4 002B     	 cmp r3,#0
 3966 00a6 0BDA     	 bge .L224
1335:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("_I ");
1336:.././hal/sam3u1c/udphs_device.c **** 		// IN data phase requested
1337:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_prev_payload_buf_cnt = 0;
 3967              	 .loc 6 1337 0
 3968 00a8 1F4B     	 ldr r3,.L226+32
 3969 00aa 0022     	 movs r2,#0
 3970 00ac 1A80     	 strh r2,[r3]
1338:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_payload_buf_cnt = 0;
 3971              	 .loc 6 1338 0
 3972 00ae 1F4B     	 ldr r3,.L226+36
 3973 00b0 0022     	 movs r2,#0
 3974 00b2 1A80     	 strh r2,[r3]
1339:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
 3975              	 .loc 6 1339 0
 3976 00b4 144B     	 ldr r3,.L226
 3977 00b6 0222     	 movs r2,#2
 3978 00b8 1A70     	 strb r2,[r3]
1340:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_in_sent(); // Send first data transfer
 3979              	 .loc 6 1340 0
 3980 00ba 1D4B     	 ldr r3,.L226+40
 3981 00bc 9847     	 blx r3
 3982              	.LVL68:
 3983 00be 1FE0     	 b .L217
 3984              	.L224:
1341:.././hal/sam3u1c/udphs_device.c **** 	} else {
1342:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("_O ");
1343:.././hal/sam3u1c/udphs_device.c **** 		if (0 == udd_g_ctrlreq.req.wLength) {
 3985              	 .loc 6 1343 0
 3986 00c0 174B     	 ldr r3,.L226+24
 3987 00c2 DB88     	 ldrh r3,[r3,#6]
 3988 00c4 002B     	 cmp r3,#0
 3989 00c6 02D1     	 bne .L225
1344:.././hal/sam3u1c/udphs_device.c **** 			// No data phase requested
1345:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("Zl ");
1346:.././hal/sam3u1c/udphs_device.c **** 			// Send IN ZLP to ACK setup request
1347:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_send_zlp_in();
 3990              	 .loc 6 1347 0
 3991 00c8 1A4B     	 ldr r3,.L226+44
 3992 00ca 9847     	 blx r3
 3993              	.LVL69:
1348:.././hal/sam3u1c/udphs_device.c **** 			return;
 3994              	 .loc 6 1348 0
 3995 00cc 18E0     	 b .L217
 3996              	.L225:
1349:.././hal/sam3u1c/udphs_device.c **** 		}
1350:.././hal/sam3u1c/udphs_device.c **** 		// OUT data phase requested
1351:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_prev_payload_buf_cnt = 0;
 3997              	 .loc 6 1351 0
 3998 00ce 164B     	 ldr r3,.L226+32
 3999 00d0 0022     	 movs r2,#0
 4000 00d2 1A80     	 strh r2,[r3]
1352:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_payload_buf_cnt = 0;
 4001              	 .loc 6 1352 0
 4002 00d4 154B     	 ldr r3,.L226+36
 4003 00d6 0022     	 movs r2,#0
 4004 00d8 1A80     	 strh r2,[r3]
1353:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
 4005              	 .loc 6 1353 0
 4006 00da 0B4B     	 ldr r3,.L226
 4007 00dc 0122     	 movs r2,#1
 4008 00de 1A70     	 strb r2,[r3]
1354:.././hal/sam3u1c/udphs_device.c **** 		// To detect a protocol error, enable nak interrupt on data IN phase
1355:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_nak_in(0);
 4009              	 .loc 6 1355 0
 4010 00e0 0C4B     	 ldr r3,.L226+12
 4011 00e2 4FF48042 	 mov r2,#16384
 4012 00e6 C3F81821 	 str r2,[r3,#280]
1356:.././hal/sam3u1c/udphs_device.c **** 		flags = cpu_irq_save();
 4013              	 .loc 6 1356 0
 4014 00ea 134B     	 ldr r3,.L226+48
 4015 00ec 9847     	 blx r3
 4016              	.LVL70:
 4017 00ee 7860     	 str r0,[r7,#4]
1357:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_nak_in_interrupt(0);
 4018              	 .loc 6 1357 0
 4019 00f0 084B     	 ldr r3,.L226+12
 4020 00f2 4FF48042 	 mov r2,#16384
 4021 00f6 C3F80421 	 str r2,[r3,#260]
1358:.././hal/sam3u1c/udphs_device.c **** 		cpu_irq_restore(flags);
 4022              	 .loc 6 1358 0
 4023 00fa 7868     	 ldr r0,[r7,#4]
 4024 00fc 0F4B     	 ldr r3,.L226+52
 4025 00fe 9847     	 blx r3
 4026              	.LVL71:
 4027              	.L217:
1359:.././hal/sam3u1c/udphs_device.c **** 	}
1360:.././hal/sam3u1c/udphs_device.c **** }
 4028              	 .loc 6 1360 0
 4029 0100 1037     	 adds r7,r7,#16
 4030              	.LCFI170:
 4031              	 .cfi_def_cfa_offset 8
 4032 0102 BD46     	 mov sp,r7
 4033              	.LCFI171:
 4034              	 .cfi_def_cfa_register 13
 4035              	 
 4036 0104 80BD     	 pop {r7,pc}
 4037              	.L227:
 4038 0106 00BF     	 .align 2
 4039              	.L226:
 4040 0108 00000000 	 .word udd_ep_control_state
 4041 010c 00000000 	 .word udd_ctrl_endofrequest
 4042 0110 00000000 	 .word udd_ctrl_init
 4043 0114 00400A40 	 .word 1074413568
 4044 0118 00000000 	 .word udd_ctrl_stall_data
 4045 011c 00001820 	 .word 538443776
 4046 0120 00000000 	 .word udd_g_ctrlreq
 4047 0124 00000000 	 .word udc_process_setup
 4048 0128 00000000 	 .word udd_ctrl_prev_payload_buf_cnt
 4049 012c 00000000 	 .word udd_ctrl_payload_buf_cnt
 4050 0130 00000000 	 .word udd_ctrl_in_sent
 4051 0134 00000000 	 .word udd_ctrl_send_zlp_in
 4052 0138 00000000 	 .word cpu_irq_save
 4053 013c 00000000 	 .word cpu_irq_restore
 4054              	 .cfi_endproc
 4055              	.LFE166:
 4057              	 .section .text.udd_ctrl_in_sent,"ax",%progbits
 4058              	 .align 1
 4059              	 .syntax unified
 4060              	 .thumb
 4061              	 .thumb_func
 4062              	 .fpu softvfp
 4064              	udd_ctrl_in_sent:
 4065              	.LFB167:
1361:.././hal/sam3u1c/udphs_device.c **** 
1362:.././hal/sam3u1c/udphs_device.c **** 
1363:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_in_sent(void)
1364:.././hal/sam3u1c/udphs_device.c **** {
 4066              	 .loc 6 1364 0
 4067              	 .cfi_startproc
 4068              	 
 4069              	 
 4070 0000 80B5     	 push {r7,lr}
 4071              	.LCFI172:
 4072              	 .cfi_def_cfa_offset 8
 4073              	 .cfi_offset 7,-8
 4074              	 .cfi_offset 14,-4
 4075 0002 84B0     	 sub sp,sp,#16
 4076              	.LCFI173:
 4077              	 .cfi_def_cfa_offset 24
 4078 0004 00AF     	 add r7,sp,#0
 4079              	.LCFI174:
 4080              	 .cfi_def_cfa_register 7
1365:.././hal/sam3u1c/udphs_device.c **** 	static bool b_shortpacket = false;
1366:.././hal/sam3u1c/udphs_device.c **** 	uint16_t nb_remain;
1367:.././hal/sam3u1c/udphs_device.c **** 	uint8_t i;
1368:.././hal/sam3u1c/udphs_device.c **** 	uint8_t *ptr_dest, *ptr_src;
1369:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1370:.././hal/sam3u1c/udphs_device.c **** 
1371:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 4081              	 .loc 6 1371 0
 4082 0006 4C4B     	 ldr r3,.L239
 4083 0008 9847     	 blx r3
 4084              	.LVL72:
 4085 000a 3860     	 str r0,[r7]
1372:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_in_send_interrupt(0);
 4086              	 .loc 6 1372 0
 4087 000c 4B4B     	 ldr r3,.L239+4
 4088 000e 4FF48062 	 mov r2,#1024
 4089 0012 C3F80821 	 str r2,[r3,#264]
1373:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 4090              	 .loc 6 1373 0
 4091 0016 3868     	 ldr r0,[r7]
 4092 0018 494B     	 ldr r3,.L239+8
 4093 001a 9847     	 blx r3
 4094              	.LVL73:
1374:.././hal/sam3u1c/udphs_device.c **** 
1375:.././hal/sam3u1c/udphs_device.c **** 	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
 4095              	 .loc 6 1375 0
 4096 001c 494B     	 ldr r3,.L239+12
 4097 001e 1B78     	 ldrb r3,[r3]
 4098 0020 032B     	 cmp r3,#3
 4099 0022 04D1     	 bne .L229
1376:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("ZlpE\n\r");
1377:.././hal/sam3u1c/udphs_device.c **** 		// ZLP on IN is sent, then valid end of setup request
1378:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_endofrequest();
 4100              	 .loc 6 1378 0
 4101 0024 484B     	 ldr r3,.L239+16
 4102 0026 9847     	 blx r3
 4103              	.LVL74:
1379:.././hal/sam3u1c/udphs_device.c **** 		// Reinitializes control endpoint management
1380:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_init();
 4104              	 .loc 6 1380 0
 4105 0028 484B     	 ldr r3,.L239+20
 4106 002a 9847     	 blx r3
 4107              	.LVL75:
1381:.././hal/sam3u1c/udphs_device.c **** 		return;
 4108              	 .loc 6 1381 0
 4109 002c 81E0     	 b .L228
 4110              	.L229:
1382:.././hal/sam3u1c/udphs_device.c **** 	}
1383:.././hal/sam3u1c/udphs_device.c **** 	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);
1384:.././hal/sam3u1c/udphs_device.c **** 
1385:.././hal/sam3u1c/udphs_device.c **** 	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
 4111              	 .loc 6 1385 0
 4112 002e 484B     	 ldr r3,.L239+24
 4113 0030 9A89     	 ldrh r2,[r3,#12]
 4114 0032 484B     	 ldr r3,.L239+28
 4115 0034 1B88     	 ldrh r3,[r3]
 4116 0036 D31A     	 subs r3,r2,r3
 4117 0038 FB81     	 strh r3,[r7,#14]
1386:.././hal/sam3u1c/udphs_device.c **** 	if (0 == nb_remain) {
 4118              	 .loc 6 1386 0
 4119 003a FB89     	 ldrh r3,[r7,#14]
 4120 003c 002B     	 cmp r3,#0
 4121 003e 27D1     	 bne .L231
1387:.././hal/sam3u1c/udphs_device.c **** 		// All content of current buffer payload are sent
1388:.././hal/sam3u1c/udphs_device.c **** 		// Update number of total data sending by previous payload buffer
1389:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
 4122              	 .loc 6 1389 0
 4123 0040 454B     	 ldr r3,.L239+32
 4124 0042 1A88     	 ldrh r2,[r3]
 4125 0044 434B     	 ldr r3,.L239+28
 4126 0046 1B88     	 ldrh r3,[r3]
 4127 0048 1344     	 add r3,r3,r2
 4128 004a 9AB2     	 uxth r2,r3
 4129 004c 424B     	 ldr r3,.L239+32
 4130 004e 1A80     	 strh r2,[r3]
1390:.././hal/sam3u1c/udphs_device.c **** 		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
 4131              	 .loc 6 1390 0
 4132 0050 3F4B     	 ldr r3,.L239+24
 4133 0052 DA88     	 ldrh r2,[r3,#6]
 4134 0054 404B     	 ldr r3,.L239+32
 4135 0056 1B88     	 ldrh r3,[r3]
 4136 0058 9A42     	 cmp r2,r3
 4137 005a 03D0     	 beq .L232
1391:.././hal/sam3u1c/udphs_device.c **** 				|| b_shortpacket) {
 4138              	 .loc 6 1391 0
 4139 005c 3F4B     	 ldr r3,.L239+36
 4140 005e 1B78     	 ldrb r3,[r3]
 4141 0060 002B     	 cmp r3,#0
 4142 0062 02D0     	 beq .L233
 4143              	.L232:
1392:.././hal/sam3u1c/udphs_device.c **** 			// All data requested are transfered or a short packet has been sent
1393:.././hal/sam3u1c/udphs_device.c **** 			// then it is the end of data phase.
1394:.././hal/sam3u1c/udphs_device.c **** 			// Generate an OUT ZLP for handshake phase.
1395:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("_zO ");
1396:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_send_zlp_out();
 4144              	 .loc 6 1396 0
 4145 0064 3E4B     	 ldr r3,.L239+40
 4146 0066 9847     	 blx r3
 4147              	.LVL76:
1397:.././hal/sam3u1c/udphs_device.c **** 			return;
 4148              	 .loc 6 1397 0
 4149 0068 63E0     	 b .L228
 4150              	.L233:
1398:.././hal/sam3u1c/udphs_device.c **** 		}
1399:.././hal/sam3u1c/udphs_device.c **** 		// Need of new buffer because the data phase is not complete
1400:.././hal/sam3u1c/udphs_device.c **** 		if ((!udd_g_ctrlreq.over_under_run)
 4151              	 .loc 6 1400 0
 4152 006a 394B     	 ldr r3,.L239+24
 4153 006c 5B69     	 ldr r3,[r3,#20]
 4154 006e 002B     	 cmp r3,#0
 4155 0070 0ED0     	 beq .L231
1401:.././hal/sam3u1c/udphs_device.c **** 				|| (!udd_g_ctrlreq.over_under_run())) {
 4156              	 .loc 6 1401 0
 4157 0072 374B     	 ldr r3,.L239+24
 4158 0074 5B69     	 ldr r3,[r3,#20]
 4159 0076 9847     	 blx r3
 4160              	.LVL77:
 4161 0078 0346     	 mov r3,r0
 4162 007a 83F00103 	 eor r3,r3,#1
 4163 007e DBB2     	 uxtb r3,r3
 4164 0080 002B     	 cmp r3,#0
 4165 0082 05D1     	 bne .L231
1402:.././hal/sam3u1c/udphs_device.c **** 			// Underrun then send zlp on IN
1403:.././hal/sam3u1c/udphs_device.c **** 			// Here nb_remain=0 and allows to send a IN ZLP
1404:.././hal/sam3u1c/udphs_device.c **** 		} else {
1405:.././hal/sam3u1c/udphs_device.c **** 			// A new payload buffer is given
1406:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_payload_buf_cnt = 0;
 4166              	 .loc 6 1406 0
 4167 0084 334B     	 ldr r3,.L239+28
 4168 0086 0022     	 movs r2,#0
 4169 0088 1A80     	 strh r2,[r3]
1407:.././hal/sam3u1c/udphs_device.c **** 			nb_remain = udd_g_ctrlreq.payload_size;
 4170              	 .loc 6 1407 0
 4171 008a 314B     	 ldr r3,.L239+24
 4172 008c 9B89     	 ldrh r3,[r3,#12]
 4173 008e FB81     	 strh r3,[r7,#14]
 4174              	.L231:
1408:.././hal/sam3u1c/udphs_device.c **** 		}
1409:.././hal/sam3u1c/udphs_device.c **** 	}
1410:.././hal/sam3u1c/udphs_device.c **** 	// Continue transfer and send next data
1411:.././hal/sam3u1c/udphs_device.c **** 	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
 4175              	 .loc 6 1411 0
 4176 0090 FB89     	 ldrh r3,[r7,#14]
 4177 0092 3F2B     	 cmp r3,#63
 4178 0094 05D9     	 bls .L234
1412:.././hal/sam3u1c/udphs_device.c **** 		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
 4179              	 .loc 6 1412 0
 4180 0096 4023     	 movs r3,#64
 4181 0098 FB81     	 strh r3,[r7,#14]
1413:.././hal/sam3u1c/udphs_device.c **** 		b_shortpacket = false;
 4182              	 .loc 6 1413 0
 4183 009a 304B     	 ldr r3,.L239+36
 4184 009c 0022     	 movs r2,#0
 4185 009e 1A70     	 strb r2,[r3]
 4186 00a0 02E0     	 b .L235
 4187              	.L234:
1414:.././hal/sam3u1c/udphs_device.c **** 	} else {
1415:.././hal/sam3u1c/udphs_device.c **** 		b_shortpacket = true;
 4188              	 .loc 6 1415 0
 4189 00a2 2E4B     	 ldr r3,.L239+36
 4190 00a4 0122     	 movs r2,#1
 4191 00a6 1A70     	 strb r2,[r3]
 4192              	.L235:
1416:.././hal/sam3u1c/udphs_device.c **** 	}
1417:.././hal/sam3u1c/udphs_device.c **** 	// Fill buffer of endpoint control
1418:.././hal/sam3u1c/udphs_device.c **** 	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
 4193              	 .loc 6 1418 0
 4194 00a8 2E4B     	 ldr r3,.L239+44
 4195 00aa BB60     	 str r3,[r7,#8]
1419:.././hal/sam3u1c/udphs_device.c **** 	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
 4196              	 .loc 6 1419 0
 4197 00ac 284B     	 ldr r3,.L239+24
 4198 00ae 9B68     	 ldr r3,[r3,#8]
 4199 00b0 284A     	 ldr r2,.L239+28
 4200 00b2 1288     	 ldrh r2,[r2]
 4201 00b4 1344     	 add r3,r3,r2
 4202 00b6 7B60     	 str r3,[r7,#4]
1420:.././hal/sam3u1c/udphs_device.c **** 	//** Critical section
1421:.././hal/sam3u1c/udphs_device.c **** 	// Only in case of DATA IN phase abort without USB Reset signal after.
1422:.././hal/sam3u1c/udphs_device.c **** 	// The IN data don't must be written in endpoint 0 DPRAM during
1423:.././hal/sam3u1c/udphs_device.c **** 	// a next setup reception in same endpoint 0 DPRAM.
1424:.././hal/sam3u1c/udphs_device.c **** 	// Thereby, an OUT ZLP reception must check before IN data write
1425:.././hal/sam3u1c/udphs_device.c **** 	// and if no OUT ZLP is received the data must be written quickly (800us)
1426:.././hal/sam3u1c/udphs_device.c **** 	// before an eventually ZLP OUT and SETUP reception
1427:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 4203              	 .loc 6 1427 0
 4204 00b8 1F4B     	 ldr r3,.L239
 4205 00ba 9847     	 blx r3
 4206              	.LVL78:
 4207 00bc 3860     	 str r0,[r7]
1428:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_out_received(0)) {
 4208              	 .loc 6 1428 0
 4209 00be 1F4B     	 ldr r3,.L239+4
 4210 00c0 D3F81C31 	 ldr r3,[r3,#284]
 4211 00c4 03F40073 	 and r3,r3,#512
 4212 00c8 002B     	 cmp r3,#0
 4213 00ca 06D0     	 beq .L236
1429:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("Abort ");
1430:.././hal/sam3u1c/udphs_device.c **** 		// IN DATA phase aborted by OUT ZLP
1431:.././hal/sam3u1c/udphs_device.c **** 		cpu_irq_restore(flags);
 4214              	 .loc 6 1431 0
 4215 00cc 3868     	 ldr r0,[r7]
 4216 00ce 1C4B     	 ldr r3,.L239+8
 4217 00d0 9847     	 blx r3
 4218              	.LVL79:
1432:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
 4219              	 .loc 6 1432 0
 4220 00d2 1C4B     	 ldr r3,.L239+12
 4221 00d4 0422     	 movs r2,#4
 4222 00d6 1A70     	 strb r2,[r3]
1433:.././hal/sam3u1c/udphs_device.c **** 		return; // Exit of IN DATA phase
 4223              	 .loc 6 1433 0
 4224 00d8 2BE0     	 b .L228
 4225              	.L236:
1434:.././hal/sam3u1c/udphs_device.c **** 	}
1435:.././hal/sam3u1c/udphs_device.c **** 	// dbg_print("t%d ", nb_remain);
1436:.././hal/sam3u1c/udphs_device.c **** 	// Write quickly the IN data
1437:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < nb_remain; i++) {
 4226              	 .loc 6 1437 0
 4227 00da 0023     	 movs r3,#0
 4228 00dc 7B73     	 strb r3,[r7,#13]
 4229 00de 0AE0     	 b .L237
 4230              	.L238:
1438:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 4231              	 .loc 6 1438 0 discriminator 3
 4232 00e0 7A68     	 ldr r2,[r7,#4]
 4233 00e2 531C     	 adds r3,r2,#1
 4234 00e4 7B60     	 str r3,[r7,#4]
 4235 00e6 BB68     	 ldr r3,[r7,#8]
 4236 00e8 591C     	 adds r1,r3,#1
 4237 00ea B960     	 str r1,[r7,#8]
 4238 00ec 1278     	 ldrb r2,[r2]
 4239 00ee 1A70     	 strb r2,[r3]
1437:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 4240              	 .loc 6 1437 0 discriminator 3
 4241 00f0 7B7B     	 ldrb r3,[r7,#13]
 4242 00f2 0133     	 adds r3,r3,#1
 4243 00f4 7B73     	 strb r3,[r7,#13]
 4244              	.L237:
1437:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 4245              	 .loc 6 1437 0 is_stmt 0 discriminator 1
 4246 00f6 7B7B     	 ldrb r3,[r7,#13]
 4247 00f8 9BB2     	 uxth r3,r3
 4248 00fa FA89     	 ldrh r2,[r7,#14]
 4249 00fc 9A42     	 cmp r2,r3
 4250 00fe EFD8     	 bhi .L238
1439:.././hal/sam3u1c/udphs_device.c **** 	}
1440:.././hal/sam3u1c/udphs_device.c **** 	udd_ctrl_payload_buf_cnt += nb_remain;
 4251              	 .loc 6 1440 0 is_stmt 1
 4252 0100 144B     	 ldr r3,.L239+28
 4253 0102 1A88     	 ldrh r2,[r3]
 4254 0104 FB89     	 ldrh r3,[r7,#14]
 4255 0106 1344     	 add r3,r3,r2
 4256 0108 9AB2     	 uxth r2,r3
 4257 010a 124B     	 ldr r3,.L239+28
 4258 010c 1A80     	 strh r2,[r3]
1441:.././hal/sam3u1c/udphs_device.c **** 
1442:.././hal/sam3u1c/udphs_device.c **** 	// Validate and send the data available in the control endpoint buffer
1443:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_in_send(0);
 4259              	 .loc 6 1443 0
 4260 010e 0B4B     	 ldr r3,.L239+4
 4261 0110 4FF48062 	 mov r2,#1024
 4262 0114 C3F81821 	 str r2,[r3,#280]
1444:.././hal/sam3u1c/udphs_device.c **** 	udd_raise_tx_pkt_ready(0);
 4263              	 .loc 6 1444 0
 4264 0118 084B     	 ldr r3,.L239+4
 4265 011a 4FF40062 	 mov r2,#2048
 4266 011e C3F81421 	 str r2,[r3,#276]
1445:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_in_send_interrupt(0);
 4267              	 .loc 6 1445 0
 4268 0122 064B     	 ldr r3,.L239+4
 4269 0124 4FF48062 	 mov r2,#1024
 4270 0128 C3F80421 	 str r2,[r3,#260]
1446:.././hal/sam3u1c/udphs_device.c **** 	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
1447:.././hal/sam3u1c/udphs_device.c **** 	// because OUT endpoint is already free and ZLP OUT accepted.
1448:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 4271              	 .loc 6 1448 0
 4272 012c 3868     	 ldr r0,[r7]
 4273 012e 044B     	 ldr r3,.L239+8
 4274 0130 9847     	 blx r3
 4275              	.LVL80:
 4276              	.L228:
1449:.././hal/sam3u1c/udphs_device.c **** }
 4277              	 .loc 6 1449 0
 4278 0132 1037     	 adds r7,r7,#16
 4279              	.LCFI175:
 4280              	 .cfi_def_cfa_offset 8
 4281 0134 BD46     	 mov sp,r7
 4282              	.LCFI176:
 4283              	 .cfi_def_cfa_register 13
 4284              	 
 4285 0136 80BD     	 pop {r7,pc}
 4286              	.L240:
 4287              	 .align 2
 4288              	.L239:
 4289 0138 00000000 	 .word cpu_irq_save
 4290 013c 00400A40 	 .word 1074413568
 4291 0140 00000000 	 .word cpu_irq_restore
 4292 0144 00000000 	 .word udd_ep_control_state
 4293 0148 00000000 	 .word udd_ctrl_endofrequest
 4294 014c 00000000 	 .word udd_ctrl_init
 4295 0150 00000000 	 .word udd_g_ctrlreq
 4296 0154 00000000 	 .word udd_ctrl_payload_buf_cnt
 4297 0158 00000000 	 .word udd_ctrl_prev_payload_buf_cnt
 4298 015c 00000000 	 .word b_shortpacket.8402
 4299 0160 00000000 	 .word udd_ctrl_send_zlp_out
 4300 0164 00001820 	 .word 538443776
 4301              	 .cfi_endproc
 4302              	.LFE167:
 4304              	 .section .text.udd_ctrl_out_received,"ax",%progbits
 4305              	 .align 1
 4306              	 .syntax unified
 4307              	 .thumb
 4308              	 .thumb_func
 4309              	 .fpu softvfp
 4311              	udd_ctrl_out_received:
 4312              	.LFB168:
1450:.././hal/sam3u1c/udphs_device.c **** 
1451:.././hal/sam3u1c/udphs_device.c **** 
1452:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_out_received(void)
1453:.././hal/sam3u1c/udphs_device.c **** {
 4313              	 .loc 6 1453 0
 4314              	 .cfi_startproc
 4315              	 
 4316              	 
 4317 0000 80B5     	 push {r7,lr}
 4318              	.LCFI177:
 4319              	 .cfi_def_cfa_offset 8
 4320              	 .cfi_offset 7,-8
 4321              	 .cfi_offset 14,-4
 4322 0002 84B0     	 sub sp,sp,#16
 4323              	.LCFI178:
 4324              	 .cfi_def_cfa_offset 24
 4325 0004 00AF     	 add r7,sp,#0
 4326              	.LCFI179:
 4327              	 .cfi_def_cfa_register 7
1454:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1455:.././hal/sam3u1c/udphs_device.c **** 	uint8_t i;
1456:.././hal/sam3u1c/udphs_device.c **** 	uint16_t nb_data;
1457:.././hal/sam3u1c/udphs_device.c **** 
1458:.././hal/sam3u1c/udphs_device.c **** 	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
 4328              	 .loc 6 1458 0
 4329 0006 614B     	 ldr r3,.L256
 4330 0008 1B78     	 ldrb r3,[r3]
 4331 000a 012B     	 cmp r3,#1
 4332 000c 0FD0     	 beq .L242
1459:.././hal/sam3u1c/udphs_device.c **** 		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
 4333              	 .loc 6 1459 0
 4334 000e 5F4B     	 ldr r3,.L256
 4335 0010 1B78     	 ldrb r3,[r3]
 4336 0012 022B     	 cmp r3,#2
 4337 0014 03D0     	 beq .L243
1460:.././hal/sam3u1c/udphs_device.c **** 				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
 4338              	 .loc 6 1460 0
 4339 0016 5D4B     	 ldr r3,.L256
 4340 0018 1B78     	 ldrb r3,[r3]
 4341 001a 042B     	 cmp r3,#4
 4342 001c 02D1     	 bne .L244
 4343              	.L243:
1461:.././hal/sam3u1c/udphs_device.c **** 				udd_ep_control_state)) {
1462:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("EoStp\n\r");
1463:.././hal/sam3u1c/udphs_device.c **** 			// End of SETUP request:
1464:.././hal/sam3u1c/udphs_device.c **** 			// - Data IN Phase aborted,
1465:.././hal/sam3u1c/udphs_device.c **** 			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
1466:.././hal/sam3u1c/udphs_device.c **** 			// - or ZLP OUT received normally.
1467:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_endofrequest();
 4344              	 .loc 6 1467 0
 4345 001e 5C4B     	 ldr r3,.L256+4
 4346 0020 9847     	 blx r3
 4347              	.LVL81:
 4348 0022 01E0     	 b .L245
 4349              	.L244:
1468:.././hal/sam3u1c/udphs_device.c **** 		} else {
1469:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("ErrStp\n\r");
1470:.././hal/sam3u1c/udphs_device.c **** 			// Protocol error during SETUP request
1471:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_stall_data();
 4350              	 .loc 6 1471 0
 4351 0024 5B4B     	 ldr r3,.L256+8
 4352 0026 9847     	 blx r3
 4353              	.LVL82:
 4354              	.L245:
1472:.././hal/sam3u1c/udphs_device.c **** 		}
1473:.././hal/sam3u1c/udphs_device.c **** 		// Reinitializes control endpoint management
1474:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_init();
 4355              	 .loc 6 1474 0
 4356 0028 5B4B     	 ldr r3,.L256+12
 4357 002a 9847     	 blx r3
 4358              	.LVL83:
1475:.././hal/sam3u1c/udphs_device.c **** 		return;
 4359              	 .loc 6 1475 0
 4360 002c ABE0     	 b .L241
 4361              	.L242:
1476:.././hal/sam3u1c/udphs_device.c **** 	}
1477:.././hal/sam3u1c/udphs_device.c **** 	// Read data received during OUT phase
1478:.././hal/sam3u1c/udphs_device.c **** 	nb_data = udd_byte_count(0);
 4362              	 .loc 6 1478 0
 4363 002e 5B4B     	 ldr r3,.L256+16
 4364 0030 D3F81C31 	 ldr r3,[r3,#284]
 4365 0034 1B0D     	 lsrs r3,r3,#20
 4366 0036 9BB2     	 uxth r3,r3
 4367 0038 C3F30A03 	 ubfx r3,r3,#0,#11
 4368 003c BB81     	 strh r3,[r7,#12]
1479:.././hal/sam3u1c/udphs_device.c **** 	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
 4369              	 .loc 6 1479 0
 4370 003e 584B     	 ldr r3,.L256+20
 4371 0040 9B89     	 ldrh r3,[r3,#12]
 4372 0042 1A46     	 mov r2,r3
 4373 0044 574B     	 ldr r3,.L256+24
 4374 0046 1B88     	 ldrh r3,[r3]
 4375 0048 1946     	 mov r1,r3
 4376 004a BB89     	 ldrh r3,[r7,#12]
 4377 004c 0B44     	 add r3,r3,r1
 4378 004e 9A42     	 cmp r2,r3
 4379 0050 05DA     	 bge .L247
1480:.././hal/sam3u1c/udphs_device.c **** 		// Payload buffer too small
1481:.././hal/sam3u1c/udphs_device.c **** 		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
 4380              	 .loc 6 1481 0
 4381 0052 534B     	 ldr r3,.L256+20
 4382 0054 9A89     	 ldrh r2,[r3,#12]
 4383 0056 534B     	 ldr r3,.L256+24
 4384 0058 1B88     	 ldrh r3,[r3]
 4385 005a D31A     	 subs r3,r2,r3
 4386 005c BB81     	 strh r3,[r7,#12]
 4387              	.L247:
1482:.././hal/sam3u1c/udphs_device.c **** 	}
1483:.././hal/sam3u1c/udphs_device.c **** 	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
 4388              	 .loc 6 1483 0
 4389 005e 524B     	 ldr r3,.L256+28
 4390 0060 BB60     	 str r3,[r7,#8]
1484:.././hal/sam3u1c/udphs_device.c **** 	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
 4391              	 .loc 6 1484 0
 4392 0062 4F4B     	 ldr r3,.L256+20
 4393 0064 9B68     	 ldr r3,[r3,#8]
 4394 0066 4F4A     	 ldr r2,.L256+24
 4395 0068 1288     	 ldrh r2,[r2]
 4396 006a 1344     	 add r3,r3,r2
 4397 006c 7B60     	 str r3,[r7,#4]
1485:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < nb_data; i++) {
 4398              	 .loc 6 1485 0
 4399 006e 0023     	 movs r3,#0
 4400 0070 FB73     	 strb r3,[r7,#15]
 4401 0072 0AE0     	 b .L248
 4402              	.L249:
1486:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 4403              	 .loc 6 1486 0 discriminator 3
 4404 0074 BA68     	 ldr r2,[r7,#8]
 4405 0076 531C     	 adds r3,r2,#1
 4406 0078 BB60     	 str r3,[r7,#8]
 4407 007a 7B68     	 ldr r3,[r7,#4]
 4408 007c 591C     	 adds r1,r3,#1
 4409 007e 7960     	 str r1,[r7,#4]
 4410 0080 1278     	 ldrb r2,[r2]
 4411 0082 1A70     	 strb r2,[r3]
1485:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < nb_data; i++) {
 4412              	 .loc 6 1485 0 discriminator 3
 4413 0084 FB7B     	 ldrb r3,[r7,#15]
 4414 0086 0133     	 adds r3,r3,#1
 4415 0088 FB73     	 strb r3,[r7,#15]
 4416              	.L248:
1485:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < nb_data; i++) {
 4417              	 .loc 6 1485 0 is_stmt 0 discriminator 1
 4418 008a FB7B     	 ldrb r3,[r7,#15]
 4419 008c 9BB2     	 uxth r3,r3
 4420 008e BA89     	 ldrh r2,[r7,#12]
 4421 0090 9A42     	 cmp r2,r3
 4422 0092 EFD8     	 bhi .L249
1487:.././hal/sam3u1c/udphs_device.c **** 	}
1488:.././hal/sam3u1c/udphs_device.c **** 	udd_ctrl_payload_buf_cnt += nb_data;
 4423              	 .loc 6 1488 0 is_stmt 1
 4424 0094 434B     	 ldr r3,.L256+24
 4425 0096 1A88     	 ldrh r2,[r3]
 4426 0098 BB89     	 ldrh r3,[r7,#12]
 4427 009a 1344     	 add r3,r3,r2
 4428 009c 9AB2     	 uxth r2,r3
 4429 009e 414B     	 ldr r3,.L256+24
 4430 00a0 1A80     	 strh r2,[r3]
1489:.././hal/sam3u1c/udphs_device.c **** 
1490:.././hal/sam3u1c/udphs_device.c **** 	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
 4431              	 .loc 6 1490 0
 4432 00a2 BB89     	 ldrh r3,[r7,#12]
 4433 00a4 402B     	 cmp r3,#64
 4434 00a6 0AD1     	 bne .L250
1491:.././hal/sam3u1c/udphs_device.c **** 			|| (udd_g_ctrlreq.req.wLength <=
 4435              	 .loc 6 1491 0
 4436 00a8 3D4B     	 ldr r3,.L256+20
 4437 00aa DB88     	 ldrh r3,[r3,#6]
 4438 00ac 1A46     	 mov r2,r3
1492:.././hal/sam3u1c/udphs_device.c **** 			(udd_ctrl_prev_payload_buf_cnt +
 4439              	 .loc 6 1492 0
 4440 00ae 3F4B     	 ldr r3,.L256+32
 4441 00b0 1B88     	 ldrh r3,[r3]
 4442 00b2 1946     	 mov r1,r3
 4443 00b4 3B4B     	 ldr r3,.L256+24
 4444 00b6 1B88     	 ldrh r3,[r3]
 4445 00b8 0B44     	 add r3,r3,r1
1491:.././hal/sam3u1c/udphs_device.c **** 			|| (udd_g_ctrlreq.req.wLength <=
 4446              	 .loc 6 1491 0
 4447 00ba 9A42     	 cmp r2,r3
 4448 00bc 20DC     	 bgt .L251
 4449              	.L250:
1493:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_payload_buf_cnt))) {
1494:.././hal/sam3u1c/udphs_device.c **** 		// End of reception because it is a short packet
1495:.././hal/sam3u1c/udphs_device.c **** 		// Before send ZLP, call intermediate callback
1496:.././hal/sam3u1c/udphs_device.c **** 		// in case of data receive generate a stall
1497:.././hal/sam3u1c/udphs_device.c **** 		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
 4450              	 .loc 6 1497 0
 4451 00be 394B     	 ldr r3,.L256+24
 4452 00c0 1A88     	 ldrh r2,[r3]
 4453 00c2 374B     	 ldr r3,.L256+20
 4454 00c4 9A81     	 strh r2,[r3,#12]
1498:.././hal/sam3u1c/udphs_device.c **** 		if (NULL != udd_g_ctrlreq.over_under_run) {
 4455              	 .loc 6 1498 0
 4456 00c6 364B     	 ldr r3,.L256+20
 4457 00c8 5B69     	 ldr r3,[r3,#20]
 4458 00ca 002B     	 cmp r3,#0
 4459 00cc 10D0     	 beq .L252
1499:.././hal/sam3u1c/udphs_device.c **** 			if (!udd_g_ctrlreq.over_under_run()) {
 4460              	 .loc 6 1499 0
 4461 00ce 344B     	 ldr r3,.L256+20
 4462 00d0 5B69     	 ldr r3,[r3,#20]
 4463 00d2 9847     	 blx r3
 4464              	.LVL84:
 4465 00d4 0346     	 mov r3,r0
 4466 00d6 83F00103 	 eor r3,r3,#1
 4467 00da DBB2     	 uxtb r3,r3
 4468 00dc 002B     	 cmp r3,#0
 4469 00de 07D0     	 beq .L252
1500:.././hal/sam3u1c/udphs_device.c **** 				// Stall ZLP
1501:.././hal/sam3u1c/udphs_device.c **** 				udd_ctrl_stall_data();
 4470              	 .loc 6 1501 0
 4471 00e0 2C4B     	 ldr r3,.L256+8
 4472 00e2 9847     	 blx r3
 4473              	.LVL85:
1502:.././hal/sam3u1c/udphs_device.c **** 				// Ack reception of OUT to replace NAK by a STALL
1503:.././hal/sam3u1c/udphs_device.c **** 				udd_ack_out_received(0);
 4474              	 .loc 6 1503 0
 4475 00e4 2D4B     	 ldr r3,.L256+16
 4476 00e6 4FF40072 	 mov r2,#512
 4477 00ea C3F81821 	 str r2,[r3,#280]
1504:.././hal/sam3u1c/udphs_device.c **** 				return;
 4478              	 .loc 6 1504 0
 4479 00ee 4AE0     	 b .L241
 4480              	.L252:
1505:.././hal/sam3u1c/udphs_device.c **** 			}
1506:.././hal/sam3u1c/udphs_device.c **** 		}
1507:.././hal/sam3u1c/udphs_device.c **** 		// Send IN ZLP to ACK setup request
1508:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_out_received(0);
 4481              	 .loc 6 1508 0
 4482 00f0 2A4B     	 ldr r3,.L256+16
 4483 00f2 4FF40072 	 mov r2,#512
 4484 00f6 C3F81821 	 str r2,[r3,#280]
1509:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_send_zlp_in();
 4485              	 .loc 6 1509 0
 4486 00fa 2D4B     	 ldr r3,.L256+36
 4487 00fc 9847     	 blx r3
 4488              	.LVL86:
1510:.././hal/sam3u1c/udphs_device.c **** 		return;
 4489              	 .loc 6 1510 0
 4490 00fe 42E0     	 b .L241
 4491              	.L251:
1511:.././hal/sam3u1c/udphs_device.c **** 	}
1512:.././hal/sam3u1c/udphs_device.c **** 
1513:.././hal/sam3u1c/udphs_device.c **** 	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
 4492              	 .loc 6 1513 0
 4493 0100 274B     	 ldr r3,.L256+20
 4494 0102 9A89     	 ldrh r2,[r3,#12]
 4495 0104 274B     	 ldr r3,.L256+24
 4496 0106 1B88     	 ldrh r3,[r3]
 4497 0108 9A42     	 cmp r2,r3
 4498 010a 27D1     	 bne .L253
1514:.././hal/sam3u1c/udphs_device.c **** 		// Overrun then request a new payload buffer
1515:.././hal/sam3u1c/udphs_device.c **** 		if (!udd_g_ctrlreq.over_under_run) {
 4499              	 .loc 6 1515 0
 4500 010c 244B     	 ldr r3,.L256+20
 4501 010e 5B69     	 ldr r3,[r3,#20]
 4502 0110 002B     	 cmp r3,#0
 4503 0112 07D1     	 bne .L254
1516:.././hal/sam3u1c/udphs_device.c **** 			// No callback available to request a new payload buffer
1517:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_stall_data();
 4504              	 .loc 6 1517 0
 4505 0114 1F4B     	 ldr r3,.L256+8
 4506 0116 9847     	 blx r3
 4507              	.LVL87:
1518:.././hal/sam3u1c/udphs_device.c **** 			// Ack reception of OUT to replace NAK by a STALL
1519:.././hal/sam3u1c/udphs_device.c **** 			udd_ack_out_received(0);
 4508              	 .loc 6 1519 0
 4509 0118 204B     	 ldr r3,.L256+16
 4510 011a 4FF40072 	 mov r2,#512
 4511 011e C3F81821 	 str r2,[r3,#280]
1520:.././hal/sam3u1c/udphs_device.c **** 			return;
 4512              	 .loc 6 1520 0
 4513 0122 30E0     	 b .L241
 4514              	.L254:
1521:.././hal/sam3u1c/udphs_device.c **** 		}
1522:.././hal/sam3u1c/udphs_device.c **** 		if (!udd_g_ctrlreq.over_under_run()) {
 4515              	 .loc 6 1522 0
 4516 0124 1E4B     	 ldr r3,.L256+20
 4517 0126 5B69     	 ldr r3,[r3,#20]
 4518 0128 9847     	 blx r3
 4519              	.LVL88:
 4520 012a 0346     	 mov r3,r0
 4521 012c 83F00103 	 eor r3,r3,#1
 4522 0130 DBB2     	 uxtb r3,r3
 4523 0132 002B     	 cmp r3,#0
 4524 0134 07D0     	 beq .L255
1523:.././hal/sam3u1c/udphs_device.c **** 			// No new payload buffer delivered
1524:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_stall_data();
 4525              	 .loc 6 1524 0
 4526 0136 174B     	 ldr r3,.L256+8
 4527 0138 9847     	 blx r3
 4528              	.LVL89:
1525:.././hal/sam3u1c/udphs_device.c **** 			// Ack reception of OUT to replace NAK by a STALL
1526:.././hal/sam3u1c/udphs_device.c **** 			udd_ack_out_received(0);
 4529              	 .loc 6 1526 0
 4530 013a 184B     	 ldr r3,.L256+16
 4531 013c 4FF40072 	 mov r2,#512
 4532 0140 C3F81821 	 str r2,[r3,#280]
1527:.././hal/sam3u1c/udphs_device.c **** 			return;
 4533              	 .loc 6 1527 0
 4534 0144 1FE0     	 b .L241
 4535              	.L255:
1528:.././hal/sam3u1c/udphs_device.c **** 		}
1529:.././hal/sam3u1c/udphs_device.c **** 		// New payload buffer available
1530:.././hal/sam3u1c/udphs_device.c **** 		// Update number of total data received
1531:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
 4536              	 .loc 6 1531 0
 4537 0146 194B     	 ldr r3,.L256+32
 4538 0148 1A88     	 ldrh r2,[r3]
 4539 014a 164B     	 ldr r3,.L256+24
 4540 014c 1B88     	 ldrh r3,[r3]
 4541 014e 1344     	 add r3,r3,r2
 4542 0150 9AB2     	 uxth r2,r3
 4543 0152 164B     	 ldr r3,.L256+32
 4544 0154 1A80     	 strh r2,[r3]
1532:.././hal/sam3u1c/udphs_device.c **** 		// Reinit reception on payload buffer
1533:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_payload_buf_cnt = 0;
 4545              	 .loc 6 1533 0
 4546 0156 134B     	 ldr r3,.L256+24
 4547 0158 0022     	 movs r2,#0
 4548 015a 1A80     	 strh r2,[r3]
 4549              	.L253:
1534:.././hal/sam3u1c/udphs_device.c **** 	}
1535:.././hal/sam3u1c/udphs_device.c **** 	// Free buffer of control endpoint to authorize next reception
1536:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_out_received(0);
 4550              	 .loc 6 1536 0
 4551 015c 0F4B     	 ldr r3,.L256+16
 4552 015e 4FF40072 	 mov r2,#512
 4553 0162 C3F81821 	 str r2,[r3,#280]
1537:.././hal/sam3u1c/udphs_device.c **** 	// To detect a protocol error, enable nak interrupt on data IN phase
1538:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_nak_in(0);
 4554              	 .loc 6 1538 0
 4555 0166 0D4B     	 ldr r3,.L256+16
 4556 0168 4FF48042 	 mov r2,#16384
 4557 016c C3F81821 	 str r2,[r3,#280]
1539:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 4558              	 .loc 6 1539 0
 4559 0170 104B     	 ldr r3,.L256+40
 4560 0172 9847     	 blx r3
 4561              	.LVL90:
 4562 0174 3860     	 str r0,[r7]
1540:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_nak_in_interrupt(0);
 4563              	 .loc 6 1540 0
 4564 0176 094B     	 ldr r3,.L256+16
 4565 0178 4FF48042 	 mov r2,#16384
 4566 017c C3F80421 	 str r2,[r3,#260]
1541:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 4567              	 .loc 6 1541 0
 4568 0180 3868     	 ldr r0,[r7]
 4569 0182 0D4B     	 ldr r3,.L256+44
 4570 0184 9847     	 blx r3
 4571              	.LVL91:
 4572              	.L241:
1542:.././hal/sam3u1c/udphs_device.c **** }
 4573              	 .loc 6 1542 0
 4574 0186 1037     	 adds r7,r7,#16
 4575              	.LCFI180:
 4576              	 .cfi_def_cfa_offset 8
 4577 0188 BD46     	 mov sp,r7
 4578              	.LCFI181:
 4579              	 .cfi_def_cfa_register 13
 4580              	 
 4581 018a 80BD     	 pop {r7,pc}
 4582              	.L257:
 4583              	 .align 2
 4584              	.L256:
 4585 018c 00000000 	 .word udd_ep_control_state
 4586 0190 00000000 	 .word udd_ctrl_endofrequest
 4587 0194 00000000 	 .word udd_ctrl_stall_data
 4588 0198 00000000 	 .word udd_ctrl_init
 4589 019c 00400A40 	 .word 1074413568
 4590 01a0 00000000 	 .word udd_g_ctrlreq
 4591 01a4 00000000 	 .word udd_ctrl_payload_buf_cnt
 4592 01a8 00001820 	 .word 538443776
 4593 01ac 00000000 	 .word udd_ctrl_prev_payload_buf_cnt
 4594 01b0 00000000 	 .word udd_ctrl_send_zlp_in
 4595 01b4 00000000 	 .word cpu_irq_save
 4596 01b8 00000000 	 .word cpu_irq_restore
 4597              	 .cfi_endproc
 4598              	.LFE168:
 4600              	 .section .text.udd_ctrl_underflow,"ax",%progbits
 4601              	 .align 1
 4602              	 .syntax unified
 4603              	 .thumb
 4604              	 .thumb_func
 4605              	 .fpu softvfp
 4607              	udd_ctrl_underflow:
 4608              	.LFB169:
1543:.././hal/sam3u1c/udphs_device.c **** 
1544:.././hal/sam3u1c/udphs_device.c **** 
1545:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_underflow(void)
1546:.././hal/sam3u1c/udphs_device.c **** {
 4609              	 .loc 6 1546 0
 4610              	 .cfi_startproc
 4611              	 
 4612              	 
 4613 0000 80B5     	 push {r7,lr}
 4614              	.LCFI182:
 4615              	 .cfi_def_cfa_offset 8
 4616              	 .cfi_offset 7,-8
 4617              	 .cfi_offset 14,-4
 4618 0002 00AF     	 add r7,sp,#0
 4619              	.LCFI183:
 4620              	 .cfi_def_cfa_register 7
1547:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_out_received(0))
 4621              	 .loc 6 1547 0
 4622 0004 0C4B     	 ldr r3,.L263
 4623 0006 D3F81C31 	 ldr r3,[r3,#284]
 4624 000a 03F40073 	 and r3,r3,#512
 4625 000e 002B     	 cmp r3,#0
 4626 0010 0FD1     	 bne .L262
1548:.././hal/sam3u1c/udphs_device.c **** 		return; // underflow ignored if OUT data is received
1549:.././hal/sam3u1c/udphs_device.c **** 
1550:.././hal/sam3u1c/udphs_device.c **** 	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
 4627              	 .loc 6 1550 0
 4628 0012 0A4B     	 ldr r3,.L263+4
 4629 0014 1B78     	 ldrb r3,[r3]
 4630 0016 012B     	 cmp r3,#1
 4631 0018 02D1     	 bne .L261
1551:.././hal/sam3u1c/udphs_device.c **** 		// Host want to stop OUT transaction
1552:.././hal/sam3u1c/udphs_device.c **** 		// then stop to wait OUT data phase and wait IN ZLP handshake
1553:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_send_zlp_in();
 4632              	 .loc 6 1553 0
 4633 001a 094B     	 ldr r3,.L263+8
 4634 001c 9847     	 blx r3
 4635              	.LVL92:
 4636 001e 09E0     	 b .L258
 4637              	.L261:
1554:.././hal/sam3u1c/udphs_device.c **** 	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
 4638              	 .loc 6 1554 0
 4639 0020 064B     	 ldr r3,.L263+4
 4640 0022 1B78     	 ldrb r3,[r3]
 4641 0024 042B     	 cmp r3,#4
 4642 0026 05D1     	 bne .L258
1555:.././hal/sam3u1c/udphs_device.c **** 		// A OUT handshake is waiting by device,
1556:.././hal/sam3u1c/udphs_device.c **** 		// but host want extra IN data then stall extra IN data
1557:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_stall_handshake(0);
 4643              	 .loc 6 1557 0
 4644 0028 034B     	 ldr r3,.L263
 4645 002a 2022     	 movs r2,#32
 4646 002c C3F81421 	 str r2,[r3,#276]
 4647 0030 00E0     	 b .L258
 4648              	.L262:
1548:.././hal/sam3u1c/udphs_device.c **** 
 4649              	 .loc 6 1548 0
 4650 0032 00BF     	 nop
 4651              	.L258:
1558:.././hal/sam3u1c/udphs_device.c **** 	}
1559:.././hal/sam3u1c/udphs_device.c **** }
 4652              	 .loc 6 1559 0
 4653 0034 80BD     	 pop {r7,pc}
 4654              	.L264:
 4655 0036 00BF     	 .align 2
 4656              	.L263:
 4657 0038 00400A40 	 .word 1074413568
 4658 003c 00000000 	 .word udd_ep_control_state
 4659 0040 00000000 	 .word udd_ctrl_send_zlp_in
 4660              	 .cfi_endproc
 4661              	.LFE169:
 4663              	 .section .text.udd_ctrl_overflow,"ax",%progbits
 4664              	 .align 1
 4665              	 .syntax unified
 4666              	 .thumb
 4667              	 .thumb_func
 4668              	 .fpu softvfp
 4670              	udd_ctrl_overflow:
 4671              	.LFB170:
1560:.././hal/sam3u1c/udphs_device.c **** 
1561:.././hal/sam3u1c/udphs_device.c **** 
1562:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_overflow(void)
1563:.././hal/sam3u1c/udphs_device.c **** {
 4672              	 .loc 6 1563 0
 4673              	 .cfi_startproc
 4674              	 
 4675              	 
 4676              	 
 4677 0000 80B4     	 push {r7}
 4678              	.LCFI184:
 4679              	 .cfi_def_cfa_offset 4
 4680              	 .cfi_offset 7,-4
 4681 0002 00AF     	 add r7,sp,#0
 4682              	.LCFI185:
 4683              	 .cfi_def_cfa_register 7
1564:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_in_send(0))
 4684              	 .loc 6 1564 0
 4685 0004 094B     	 ldr r3,.L269
 4686 0006 D3F81C31 	 ldr r3,[r3,#284]
 4687 000a 03F48063 	 and r3,r3,#1024
 4688 000e 002B     	 cmp r3,#0
 4689 0010 08D1     	 bne .L268
1565:.././hal/sam3u1c/udphs_device.c **** 		return; // overflow ignored if IN data is received
1566:.././hal/sam3u1c/udphs_device.c **** 
1567:.././hal/sam3u1c/udphs_device.c **** 	// The case of UDD_EPCTRL_DATA_IN is not managed
1568:.././hal/sam3u1c/udphs_device.c **** 	// because the OUT endpoint is already free and OUT ZLP accepted
1569:.././hal/sam3u1c/udphs_device.c **** 
1570:.././hal/sam3u1c/udphs_device.c **** 	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
 4690              	 .loc 6 1570 0
 4691 0012 074B     	 ldr r3,.L269+4
 4692 0014 1B78     	 ldrb r3,[r3]
 4693 0016 032B     	 cmp r3,#3
 4694 0018 05D1     	 bne .L265
1571:.././hal/sam3u1c/udphs_device.c **** 		// A IN handshake is waiting by device,
1572:.././hal/sam3u1c/udphs_device.c **** 		// but host want extra OUT data then stall extra OUT data
1573:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_stall_handshake(0);
 4695              	 .loc 6 1573 0
 4696 001a 044B     	 ldr r3,.L269
 4697 001c 2022     	 movs r2,#32
 4698 001e C3F81421 	 str r2,[r3,#276]
 4699 0022 00E0     	 b .L265
 4700              	.L268:
1565:.././hal/sam3u1c/udphs_device.c **** 		return; // overflow ignored if IN data is received
 4701              	 .loc 6 1565 0
 4702 0024 00BF     	 nop
 4703              	.L265:
1574:.././hal/sam3u1c/udphs_device.c **** 	}
1575:.././hal/sam3u1c/udphs_device.c **** }
 4704              	 .loc 6 1575 0
 4705 0026 BD46     	 mov sp,r7
 4706              	.LCFI186:
 4707              	 .cfi_def_cfa_register 13
 4708              	 
 4709 0028 80BC     	 pop {r7}
 4710              	.LCFI187:
 4711              	 .cfi_restore 7
 4712              	 .cfi_def_cfa_offset 0
 4713 002a 7047     	 bx lr
 4714              	.L270:
 4715              	 .align 2
 4716              	.L269:
 4717 002c 00400A40 	 .word 1074413568
 4718 0030 00000000 	 .word udd_ep_control_state
 4719              	 .cfi_endproc
 4720              	.LFE170:
 4722              	 .section .text.udd_ctrl_stall_data,"ax",%progbits
 4723              	 .align 1
 4724              	 .syntax unified
 4725              	 .thumb
 4726              	 .thumb_func
 4727              	 .fpu softvfp
 4729              	udd_ctrl_stall_data:
 4730              	.LFB171:
1576:.././hal/sam3u1c/udphs_device.c **** 
1577:.././hal/sam3u1c/udphs_device.c **** 
1578:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_stall_data(void)
1579:.././hal/sam3u1c/udphs_device.c **** {
 4731              	 .loc 6 1579 0
 4732              	 .cfi_startproc
 4733              	 
 4734              	 
 4735              	 
 4736 0000 80B4     	 push {r7}
 4737              	.LCFI188:
 4738              	 .cfi_def_cfa_offset 4
 4739              	 .cfi_offset 7,-4
 4740 0002 00AF     	 add r7,sp,#0
 4741              	.LCFI189:
 4742              	 .cfi_def_cfa_register 7
1580:.././hal/sam3u1c/udphs_device.c **** 	// Stall all packets on IN & OUT control endpoint
1581:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
 4743              	 .loc 6 1581 0
 4744 0004 054B     	 ldr r3,.L272
 4745 0006 0522     	 movs r2,#5
 4746 0008 1A70     	 strb r2,[r3]
1582:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_stall_handshake(0);
 4747              	 .loc 6 1582 0
 4748 000a 054B     	 ldr r3,.L272+4
 4749 000c 2022     	 movs r2,#32
 4750 000e C3F81421 	 str r2,[r3,#276]
1583:.././hal/sam3u1c/udphs_device.c **** }
 4751              	 .loc 6 1583 0
 4752 0012 00BF     	 nop
 4753 0014 BD46     	 mov sp,r7
 4754              	.LCFI190:
 4755              	 .cfi_def_cfa_register 13
 4756              	 
 4757 0016 80BC     	 pop {r7}
 4758              	.LCFI191:
 4759              	 .cfi_restore 7
 4760              	 .cfi_def_cfa_offset 0
 4761 0018 7047     	 bx lr
 4762              	.L273:
 4763 001a 00BF     	 .align 2
 4764              	.L272:
 4765 001c 00000000 	 .word udd_ep_control_state
 4766 0020 00400A40 	 .word 1074413568
 4767              	 .cfi_endproc
 4768              	.LFE171:
 4770              	 .section .text.udd_ctrl_send_zlp_in,"ax",%progbits
 4771              	 .align 1
 4772              	 .syntax unified
 4773              	 .thumb
 4774              	 .thumb_func
 4775              	 .fpu softvfp
 4777              	udd_ctrl_send_zlp_in:
 4778              	.LFB172:
1584:.././hal/sam3u1c/udphs_device.c **** 
1585:.././hal/sam3u1c/udphs_device.c **** 
1586:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_send_zlp_in(void)
1587:.././hal/sam3u1c/udphs_device.c **** {
 4779              	 .loc 6 1587 0
 4780              	 .cfi_startproc
 4781              	 
 4782              	 
 4783 0000 80B5     	 push {r7,lr}
 4784              	.LCFI192:
 4785              	 .cfi_def_cfa_offset 8
 4786              	 .cfi_offset 7,-8
 4787              	 .cfi_offset 14,-4
 4788 0002 82B0     	 sub sp,sp,#8
 4789              	.LCFI193:
 4790              	 .cfi_def_cfa_offset 16
 4791 0004 00AF     	 add r7,sp,#0
 4792              	.LCFI194:
 4793              	 .cfi_def_cfa_register 7
1588:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1589:.././hal/sam3u1c/udphs_device.c **** 
1590:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
 4794              	 .loc 6 1590 0
 4795 0006 134B     	 ldr r3,.L275
 4796 0008 0322     	 movs r2,#3
 4797 000a 1A70     	 strb r2,[r3]
1591:.././hal/sam3u1c/udphs_device.c **** 
1592:.././hal/sam3u1c/udphs_device.c **** 	// Validate and send empty IN packet on control endpoint
1593:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 4798              	 .loc 6 1593 0
 4799 000c 124B     	 ldr r3,.L275+4
 4800 000e 9847     	 blx r3
 4801              	.LVL93:
 4802 0010 7860     	 str r0,[r7,#4]
1594:.././hal/sam3u1c/udphs_device.c **** 	// Send ZLP on IN endpoint
1595:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_in_send(0);
 4803              	 .loc 6 1595 0
 4804 0012 124B     	 ldr r3,.L275+8
 4805 0014 4FF48062 	 mov r2,#1024
 4806 0018 C3F81821 	 str r2,[r3,#280]
1596:.././hal/sam3u1c/udphs_device.c **** 	udd_raise_tx_pkt_ready(0);
 4807              	 .loc 6 1596 0
 4808 001c 0F4B     	 ldr r3,.L275+8
 4809 001e 4FF40062 	 mov r2,#2048
 4810 0022 C3F81421 	 str r2,[r3,#276]
1597:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_in_send_interrupt(0);
 4811              	 .loc 6 1597 0
 4812 0026 0D4B     	 ldr r3,.L275+8
 4813 0028 4FF48062 	 mov r2,#1024
 4814 002c C3F80421 	 str r2,[r3,#260]
1598:.././hal/sam3u1c/udphs_device.c **** 	// To detect a protocol error, enable nak interrupt on data OUT phase
1599:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_nak_out(0);
 4815              	 .loc 6 1599 0
 4816 0030 0A4B     	 ldr r3,.L275+8
 4817 0032 4FF40042 	 mov r2,#32768
 4818 0036 C3F81821 	 str r2,[r3,#280]
1600:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_nak_out_interrupt(0);
 4819              	 .loc 6 1600 0
 4820 003a 084B     	 ldr r3,.L275+8
 4821 003c 4FF40042 	 mov r2,#32768
 4822 0040 C3F80421 	 str r2,[r3,#260]
1601:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 4823              	 .loc 6 1601 0
 4824 0044 7868     	 ldr r0,[r7,#4]
 4825 0046 064B     	 ldr r3,.L275+12
 4826 0048 9847     	 blx r3
 4827              	.LVL94:
1602:.././hal/sam3u1c/udphs_device.c **** }
 4828              	 .loc 6 1602 0
 4829 004a 00BF     	 nop
 4830 004c 0837     	 adds r7,r7,#8
 4831              	.LCFI195:
 4832              	 .cfi_def_cfa_offset 8
 4833 004e BD46     	 mov sp,r7
 4834              	.LCFI196:
 4835              	 .cfi_def_cfa_register 13
 4836              	 
 4837 0050 80BD     	 pop {r7,pc}
 4838              	.L276:
 4839 0052 00BF     	 .align 2
 4840              	.L275:
 4841 0054 00000000 	 .word udd_ep_control_state
 4842 0058 00000000 	 .word cpu_irq_save
 4843 005c 00400A40 	 .word 1074413568
 4844 0060 00000000 	 .word cpu_irq_restore
 4845              	 .cfi_endproc
 4846              	.LFE172:
 4848              	 .section .text.udd_ctrl_send_zlp_out,"ax",%progbits
 4849              	 .align 1
 4850              	 .syntax unified
 4851              	 .thumb
 4852              	 .thumb_func
 4853              	 .fpu softvfp
 4855              	udd_ctrl_send_zlp_out:
 4856              	.LFB173:
1603:.././hal/sam3u1c/udphs_device.c **** 
1604:.././hal/sam3u1c/udphs_device.c **** 
1605:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_send_zlp_out(void)
1606:.././hal/sam3u1c/udphs_device.c **** {
 4857              	 .loc 6 1606 0
 4858              	 .cfi_startproc
 4859              	 
 4860              	 
 4861 0000 80B5     	 push {r7,lr}
 4862              	.LCFI197:
 4863              	 .cfi_def_cfa_offset 8
 4864              	 .cfi_offset 7,-8
 4865              	 .cfi_offset 14,-4
 4866 0002 82B0     	 sub sp,sp,#8
 4867              	.LCFI198:
 4868              	 .cfi_def_cfa_offset 16
 4869 0004 00AF     	 add r7,sp,#0
 4870              	.LCFI199:
 4871              	 .cfi_def_cfa_register 7
1607:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1608:.././hal/sam3u1c/udphs_device.c **** 
1609:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
 4872              	 .loc 6 1609 0
 4873 0006 0B4B     	 ldr r3,.L278
 4874 0008 0422     	 movs r2,#4
 4875 000a 1A70     	 strb r2,[r3]
1610:.././hal/sam3u1c/udphs_device.c **** 	// No action is necessary to accept OUT ZLP
1611:.././hal/sam3u1c/udphs_device.c **** 	// because the buffer of control endpoint is already free
1612:.././hal/sam3u1c/udphs_device.c **** 
1613:.././hal/sam3u1c/udphs_device.c **** 	// To detect a protocol error, enable nak interrupt on data IN phase
1614:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 4876              	 .loc 6 1614 0
 4877 000c 0A4B     	 ldr r3,.L278+4
 4878 000e 9847     	 blx r3
 4879              	.LVL95:
 4880 0010 7860     	 str r0,[r7,#4]
1615:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_nak_in(0);
 4881              	 .loc 6 1615 0
 4882 0012 0A4B     	 ldr r3,.L278+8
 4883 0014 4FF48042 	 mov r2,#16384
 4884 0018 C3F81821 	 str r2,[r3,#280]
1616:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_nak_in_interrupt(0);
 4885              	 .loc 6 1616 0
 4886 001c 074B     	 ldr r3,.L278+8
 4887 001e 4FF48042 	 mov r2,#16384
 4888 0022 C3F80421 	 str r2,[r3,#260]
1617:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 4889              	 .loc 6 1617 0
 4890 0026 7868     	 ldr r0,[r7,#4]
 4891 0028 054B     	 ldr r3,.L278+12
 4892 002a 9847     	 blx r3
 4893              	.LVL96:
1618:.././hal/sam3u1c/udphs_device.c **** }
 4894              	 .loc 6 1618 0
 4895 002c 00BF     	 nop
 4896 002e 0837     	 adds r7,r7,#8
 4897              	.LCFI200:
 4898              	 .cfi_def_cfa_offset 8
 4899 0030 BD46     	 mov sp,r7
 4900              	.LCFI201:
 4901              	 .cfi_def_cfa_register 13
 4902              	 
 4903 0032 80BD     	 pop {r7,pc}
 4904              	.L279:
 4905              	 .align 2
 4906              	.L278:
 4907 0034 00000000 	 .word udd_ep_control_state
 4908 0038 00000000 	 .word cpu_irq_save
 4909 003c 00400A40 	 .word 1074413568
 4910 0040 00000000 	 .word cpu_irq_restore
 4911              	 .cfi_endproc
 4912              	.LFE173:
 4914              	 .section .text.udd_ctrl_endofrequest,"ax",%progbits
 4915              	 .align 1
 4916              	 .syntax unified
 4917              	 .thumb
 4918              	 .thumb_func
 4919              	 .fpu softvfp
 4921              	udd_ctrl_endofrequest:
 4922              	.LFB174:
1619:.././hal/sam3u1c/udphs_device.c **** 
1620:.././hal/sam3u1c/udphs_device.c **** 
1621:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_endofrequest(void)
1622:.././hal/sam3u1c/udphs_device.c **** {
 4923              	 .loc 6 1622 0
 4924              	 .cfi_startproc
 4925              	 
 4926              	 
 4927 0000 80B5     	 push {r7,lr}
 4928              	.LCFI202:
 4929              	 .cfi_def_cfa_offset 8
 4930              	 .cfi_offset 7,-8
 4931              	 .cfi_offset 14,-4
 4932 0002 00AF     	 add r7,sp,#0
 4933              	.LCFI203:
 4934              	 .cfi_def_cfa_register 7
1623:.././hal/sam3u1c/udphs_device.c **** 	// If a callback is registered then call it
1624:.././hal/sam3u1c/udphs_device.c **** 	if (udd_g_ctrlreq.callback) {
 4935              	 .loc 6 1624 0
 4936 0004 044B     	 ldr r3,.L283
 4937 0006 1B69     	 ldr r3,[r3,#16]
 4938 0008 002B     	 cmp r3,#0
 4939 000a 02D0     	 beq .L282
1625:.././hal/sam3u1c/udphs_device.c **** 		udd_g_ctrlreq.callback();
 4940              	 .loc 6 1625 0
 4941 000c 024B     	 ldr r3,.L283
 4942 000e 1B69     	 ldr r3,[r3,#16]
 4943 0010 9847     	 blx r3
 4944              	.LVL97:
 4945              	.L282:
1626:.././hal/sam3u1c/udphs_device.c **** 	}
1627:.././hal/sam3u1c/udphs_device.c **** }
 4946              	 .loc 6 1627 0
 4947 0012 00BF     	 nop
 4948 0014 80BD     	 pop {r7,pc}
 4949              	.L284:
 4950 0016 00BF     	 .align 2
 4951              	.L283:
 4952 0018 00000000 	 .word udd_g_ctrlreq
 4953              	 .cfi_endproc
 4954              	.LFE174:
 4956              	 .section .text.udd_ctrl_interrupt,"ax",%progbits
 4957              	 .align 1
 4958              	 .syntax unified
 4959              	 .thumb
 4960              	 .thumb_func
 4961              	 .fpu softvfp
 4963              	udd_ctrl_interrupt:
 4964              	.LFB175:
1628:.././hal/sam3u1c/udphs_device.c **** 
1629:.././hal/sam3u1c/udphs_device.c **** 
1630:.././hal/sam3u1c/udphs_device.c **** static bool udd_ctrl_interrupt(void)
1631:.././hal/sam3u1c/udphs_device.c **** {
 4965              	 .loc 6 1631 0
 4966              	 .cfi_startproc
 4967              	 
 4968              	 
 4969 0000 80B5     	 push {r7,lr}
 4970              	.LCFI204:
 4971              	 .cfi_def_cfa_offset 8
 4972              	 .cfi_offset 7,-8
 4973              	 .cfi_offset 14,-4
 4974 0002 82B0     	 sub sp,sp,#8
 4975              	.LCFI205:
 4976              	 .cfi_def_cfa_offset 16
 4977 0004 00AF     	 add r7,sp,#0
 4978              	.LCFI206:
 4979              	 .cfi_def_cfa_register 7
1632:.././hal/sam3u1c/udphs_device.c **** 	uint32_t status = udd_get_endpoint_status(0);
 4980              	 .loc 6 1632 0
 4981 0006 314B     	 ldr r3,.L294
 4982 0008 D3F81C31 	 ldr r3,[r3,#284]
 4983 000c 7B60     	 str r3,[r7,#4]
1633:.././hal/sam3u1c/udphs_device.c **** 
1634:.././hal/sam3u1c/udphs_device.c **** 	if (!Is_udd_endpoint_interrupt(0)) {
 4984              	 .loc 6 1634 0
 4985 000e 2F4B     	 ldr r3,.L294
 4986 0010 5B69     	 ldr r3,[r3,#20]
 4987 0012 03F48073 	 and r3,r3,#256
 4988 0016 002B     	 cmp r3,#0
 4989 0018 01D1     	 bne .L286
1635:.././hal/sam3u1c/udphs_device.c **** 		return false; // No interrupt events on control endpoint
 4990              	 .loc 6 1635 0
 4991 001a 0023     	 movs r3,#0
 4992 001c 52E0     	 b .L287
 4993              	.L286:
1636:.././hal/sam3u1c/udphs_device.c **** 	}
1637:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("0: ");
1638:.././hal/sam3u1c/udphs_device.c **** 
1639:.././hal/sam3u1c/udphs_device.c **** 	// By default disable overflow and underflow interrupt
1640:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_nak_in_interrupt(0);
 4994              	 .loc 6 1640 0
 4995 001e 2B4B     	 ldr r3,.L294
 4996 0020 4FF48042 	 mov r2,#16384
 4997 0024 C3F80821 	 str r2,[r3,#264]
1641:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_nak_out_interrupt(0);
 4998              	 .loc 6 1641 0
 4999 0028 284B     	 ldr r3,.L294
 5000 002a 4FF40042 	 mov r2,#32768
 5001 002e C3F80821 	 str r2,[r3,#264]
1642:.././hal/sam3u1c/udphs_device.c **** 
1643:.././hal/sam3u1c/udphs_device.c **** 	// Search event on control endpoint
1644:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_status_setup_received(status)) {
 5002              	 .loc 6 1644 0
 5003 0032 7B68     	 ldr r3,[r7,#4]
 5004 0034 03F48053 	 and r3,r3,#4096
 5005 0038 002B     	 cmp r3,#0
 5006 003a 03D0     	 beq .L288
1645:.././hal/sam3u1c/udphs_device.c **** 		// SETUP packet received
1646:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("Stp ");
1647:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_setup_received();
 5007              	 .loc 6 1647 0
 5008 003c 244B     	 ldr r3,.L294+4
 5009 003e 9847     	 blx r3
 5010              	.LVL98:
1648:.././hal/sam3u1c/udphs_device.c **** 		return true;
 5011              	 .loc 6 1648 0
 5012 0040 0123     	 movs r3,#1
 5013 0042 3FE0     	 b .L287
 5014              	.L288:
1649:.././hal/sam3u1c/udphs_device.c **** 	}
1650:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_status_in_sent(status)
 5015              	 .loc 6 1650 0
 5016 0044 7B68     	 ldr r3,[r7,#4]
 5017 0046 03F48063 	 and r3,r3,#1024
 5018 004a 002B     	 cmp r3,#0
 5019 004c 0AD0     	 beq .L289
1651:.././hal/sam3u1c/udphs_device.c **** 			&& Is_udd_in_send_interrupt_enabled(0)) {
 5020              	 .loc 6 1651 0
 5021 004e 1F4B     	 ldr r3,.L294
 5022 0050 D3F80C31 	 ldr r3,[r3,#268]
 5023 0054 03F48063 	 and r3,r3,#1024
 5024 0058 002B     	 cmp r3,#0
 5025 005a 03D0     	 beq .L289
1652:.././hal/sam3u1c/udphs_device.c **** 		// IN packet sent
1653:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("In ");
1654:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_in_sent();
 5026              	 .loc 6 1654 0
 5027 005c 1D4B     	 ldr r3,.L294+8
 5028 005e 9847     	 blx r3
 5029              	.LVL99:
1655:.././hal/sam3u1c/udphs_device.c **** 		return true;
 5030              	 .loc 6 1655 0
 5031 0060 0123     	 movs r3,#1
 5032 0062 2FE0     	 b .L287
 5033              	.L289:
1656:.././hal/sam3u1c/udphs_device.c **** 	}
1657:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_status_out_received(status)) {
 5034              	 .loc 6 1657 0
 5035 0064 7B68     	 ldr r3,[r7,#4]
 5036 0066 03F40073 	 and r3,r3,#512
 5037 006a 002B     	 cmp r3,#0
 5038 006c 03D0     	 beq .L290
1658:.././hal/sam3u1c/udphs_device.c **** 		// OUT packet received
1659:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("Out ");
1660:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_out_received();
 5039              	 .loc 6 1660 0
 5040 006e 1A4B     	 ldr r3,.L294+12
 5041 0070 9847     	 blx r3
 5042              	.LVL100:
1661:.././hal/sam3u1c/udphs_device.c **** 		return true;
 5043              	 .loc 6 1661 0
 5044 0072 0123     	 movs r3,#1
 5045 0074 26E0     	 b .L287
 5046              	.L290:
1662:.././hal/sam3u1c/udphs_device.c **** 	}
1663:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_status_stall(status)) {
 5047              	 .loc 6 1663 0
 5048 0076 7B68     	 ldr r3,[r7,#4]
 5049 0078 03F40053 	 and r3,r3,#8192
 5050 007c 002B     	 cmp r3,#0
 5051 007e 04D0     	 beq .L291
1664:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("Stall\n\r");
1665:.././hal/sam3u1c/udphs_device.c **** 		// STALLed
1666:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_stall(0);
 5052              	 .loc 6 1666 0
 5053 0080 124B     	 ldr r3,.L294
 5054 0082 4FF40052 	 mov r2,#8192
 5055 0086 C3F81821 	 str r2,[r3,#280]
 5056              	.L291:
1667:.././hal/sam3u1c/udphs_device.c **** 	}
1668:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_status_nak_out(status)) {
 5057              	 .loc 6 1668 0
 5058 008a 7B68     	 ldr r3,[r7,#4]
 5059 008c 03F40043 	 and r3,r3,#32768
 5060 0090 002B     	 cmp r3,#0
 5061 0092 08D0     	 beq .L292
1669:.././hal/sam3u1c/udphs_device.c **** 		// Overflow on OUT packet
1670:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("NakO ");
1671:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_nak_out(0);
 5062              	 .loc 6 1671 0
 5063 0094 0D4B     	 ldr r3,.L294
 5064 0096 4FF40042 	 mov r2,#32768
 5065 009a C3F81821 	 str r2,[r3,#280]
1672:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_overflow();
 5066              	 .loc 6 1672 0
 5067 009e 0F4B     	 ldr r3,.L294+16
 5068 00a0 9847     	 blx r3
 5069              	.LVL101:
1673:.././hal/sam3u1c/udphs_device.c **** 		return true;
 5070              	 .loc 6 1673 0
 5071 00a2 0123     	 movs r3,#1
 5072 00a4 0EE0     	 b .L287
 5073              	.L292:
1674:.././hal/sam3u1c/udphs_device.c **** 	}
1675:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_status_nak_in(status)) {
 5074              	 .loc 6 1675 0
 5075 00a6 7B68     	 ldr r3,[r7,#4]
 5076 00a8 03F48043 	 and r3,r3,#16384
 5077 00ac 002B     	 cmp r3,#0
 5078 00ae 08D0     	 beq .L293
1676:.././hal/sam3u1c/udphs_device.c **** 		// Underflow on IN packet
1677:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("NakI ");
1678:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_nak_in(0);
 5079              	 .loc 6 1678 0
 5080 00b0 064B     	 ldr r3,.L294
 5081 00b2 4FF48042 	 mov r2,#16384
 5082 00b6 C3F81821 	 str r2,[r3,#280]
1679:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_underflow();
 5083              	 .loc 6 1679 0
 5084 00ba 094B     	 ldr r3,.L294+20
 5085 00bc 9847     	 blx r3
 5086              	.LVL102:
1680:.././hal/sam3u1c/udphs_device.c **** 		return true;
 5087              	 .loc 6 1680 0
 5088 00be 0123     	 movs r3,#1
 5089 00c0 00E0     	 b .L287
 5090              	.L293:
1681:.././hal/sam3u1c/udphs_device.c **** 	}
1682:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("UnH ");
1683:.././hal/sam3u1c/udphs_device.c **** 	return false;
 5091              	 .loc 6 1683 0
 5092 00c2 0023     	 movs r3,#0
 5093              	.L287:
1684:.././hal/sam3u1c/udphs_device.c **** }
 5094              	 .loc 6 1684 0
 5095 00c4 1846     	 mov r0,r3
 5096 00c6 0837     	 adds r7,r7,#8
 5097              	.LCFI207:
 5098              	 .cfi_def_cfa_offset 8
 5099 00c8 BD46     	 mov sp,r7
 5100              	.LCFI208:
 5101              	 .cfi_def_cfa_register 13
 5102              	 
 5103 00ca 80BD     	 pop {r7,pc}
 5104              	.L295:
 5105              	 .align 2
 5106              	.L294:
 5107 00cc 00400A40 	 .word 1074413568
 5108 00d0 00000000 	 .word udd_ctrl_setup_received
 5109 00d4 00000000 	 .word udd_ctrl_in_sent
 5110 00d8 00000000 	 .word udd_ctrl_out_received
 5111 00dc 00000000 	 .word udd_ctrl_overflow
 5112 00e0 00000000 	 .word udd_ctrl_underflow
 5113              	 .cfi_endproc
 5114              	.LFE175:
 5116              	 .section .text.udd_ep_job_table_reset,"ax",%progbits
 5117              	 .align 1
 5118              	 .syntax unified
 5119              	 .thumb
 5120              	 .thumb_func
 5121              	 .fpu softvfp
 5123              	udd_ep_job_table_reset:
 5124              	.LFB176:
1685:.././hal/sam3u1c/udphs_device.c **** 
1686:.././hal/sam3u1c/udphs_device.c **** 
1687:.././hal/sam3u1c/udphs_device.c **** //--------------------------------------------------------
1688:.././hal/sam3u1c/udphs_device.c **** //--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS
1689:.././hal/sam3u1c/udphs_device.c **** 
1690:.././hal/sam3u1c/udphs_device.c **** #if (0!=USB_DEVICE_MAX_EP)
1691:.././hal/sam3u1c/udphs_device.c **** 
1692:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_job_table_reset(void)
1693:.././hal/sam3u1c/udphs_device.c **** {
 5125              	 .loc 6 1693 0
 5126              	 .cfi_startproc
 5127              	 
 5128              	 
 5129              	 
 5130 0000 80B4     	 push {r7}
 5131              	.LCFI209:
 5132              	 .cfi_def_cfa_offset 4
 5133              	 .cfi_offset 7,-4
 5134 0002 83B0     	 sub sp,sp,#12
 5135              	.LCFI210:
 5136              	 .cfi_def_cfa_offset 16
 5137 0004 00AF     	 add r7,sp,#0
 5138              	.LCFI211:
 5139              	 .cfi_def_cfa_register 7
1694:.././hal/sam3u1c/udphs_device.c **** 	uint8_t i;
1695:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
 5140              	 .loc 6 1695 0
 5141 0006 0023     	 movs r3,#0
 5142 0008 FB71     	 strb r3,[r7,#7]
 5143 000a 1CE0     	 b .L297
 5144              	.L298:
1696:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job[i].busy = false;
 5145              	 .loc 6 1696 0 discriminator 3
 5146 000c FA79     	 ldrb r2,[r7,#7]
 5147 000e 1249     	 ldr r1,.L299
 5148 0010 1346     	 mov r3,r2
 5149 0012 5B00     	 lsls r3,r3,#1
 5150 0014 1344     	 add r3,r3,r2
 5151 0016 DB00     	 lsls r3,r3,#3
 5152 0018 0B44     	 add r3,r3,r1
 5153 001a 03F11002 	 add r2,r3,#16
 5154 001e 1379     	 ldrb r3,[r2,#4]
 5155 0020 6FF30003 	 bfc r3,#0,#1
 5156 0024 1371     	 strb r3,[r2,#4]
1697:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job[i].stall_requested = false;
 5157              	 .loc 6 1697 0 discriminator 3
 5158 0026 FA79     	 ldrb r2,[r7,#7]
 5159 0028 0B49     	 ldr r1,.L299
 5160 002a 1346     	 mov r3,r2
 5161 002c 5B00     	 lsls r3,r3,#1
 5162 002e 1344     	 add r3,r3,r2
 5163 0030 DB00     	 lsls r3,r3,#3
 5164 0032 0B44     	 add r3,r3,r1
 5165 0034 03F11002 	 add r2,r3,#16
 5166 0038 1379     	 ldrb r3,[r2,#4]
 5167 003a 6FF38203 	 bfc r3,#2,#1
 5168 003e 1371     	 strb r3,[r2,#4]
1695:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job[i].busy = false;
 5169              	 .loc 6 1695 0 discriminator 3
 5170 0040 FB79     	 ldrb r3,[r7,#7]
 5171 0042 0133     	 adds r3,r3,#1
 5172 0044 FB71     	 strb r3,[r7,#7]
 5173              	.L297:
1695:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job[i].busy = false;
 5174              	 .loc 6 1695 0 is_stmt 0 discriminator 1
 5175 0046 FB79     	 ldrb r3,[r7,#7]
 5176 0048 012B     	 cmp r3,#1
 5177 004a DFD9     	 bls .L298
1698:.././hal/sam3u1c/udphs_device.c **** 	}
1699:.././hal/sam3u1c/udphs_device.c **** }
 5178              	 .loc 6 1699 0 is_stmt 1
 5179 004c 00BF     	 nop
 5180 004e 0C37     	 adds r7,r7,#12
 5181              	.LCFI212:
 5182              	 .cfi_def_cfa_offset 4
 5183 0050 BD46     	 mov sp,r7
 5184              	.LCFI213:
 5185              	 .cfi_def_cfa_register 13
 5186              	 
 5187 0052 80BC     	 pop {r7}
 5188              	.LCFI214:
 5189              	 .cfi_restore 7
 5190              	 .cfi_def_cfa_offset 0
 5191 0054 7047     	 bx lr
 5192              	.L300:
 5193 0056 00BF     	 .align 2
 5194              	.L299:
 5195 0058 00000000 	 .word udd_ep_job
 5196              	 .cfi_endproc
 5197              	.LFE176:
 5199              	 .section .text.udd_ep_job_table_kill,"ax",%progbits
 5200              	 .align 1
 5201              	 .syntax unified
 5202              	 .thumb
 5203              	 .thumb_func
 5204              	 .fpu softvfp
 5206              	udd_ep_job_table_kill:
 5207              	.LFB177:
1700:.././hal/sam3u1c/udphs_device.c **** 
1701:.././hal/sam3u1c/udphs_device.c **** 
1702:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_job_table_kill(void)
1703:.././hal/sam3u1c/udphs_device.c **** {
 5208              	 .loc 6 1703 0
 5209              	 .cfi_startproc
 5210              	 
 5211              	 
 5212 0000 80B5     	 push {r7,lr}
 5213              	.LCFI215:
 5214              	 .cfi_def_cfa_offset 8
 5215              	 .cfi_offset 7,-8
 5216              	 .cfi_offset 14,-4
 5217 0002 82B0     	 sub sp,sp,#8
 5218              	.LCFI216:
 5219              	 .cfi_def_cfa_offset 16
 5220 0004 00AF     	 add r7,sp,#0
 5221              	.LCFI217:
 5222              	 .cfi_def_cfa_register 7
1704:.././hal/sam3u1c/udphs_device.c **** 	uint8_t i;
1705:.././hal/sam3u1c/udphs_device.c **** 
1706:.././hal/sam3u1c/udphs_device.c **** 	// For each endpoint, kill job
1707:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
 5223              	 .loc 6 1707 0
 5224 0006 0023     	 movs r3,#0
 5225 0008 FB71     	 strb r3,[r7,#7]
 5226 000a 10E0     	 b .L302
 5227              	.L303:
1708:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
 5228              	 .loc 6 1708 0 discriminator 3
 5229 000c FA79     	 ldrb r2,[r7,#7]
 5230 000e 1346     	 mov r3,r2
 5231 0010 5B00     	 lsls r3,r3,#1
 5232 0012 1344     	 add r3,r3,r2
 5233 0014 DB00     	 lsls r3,r3,#3
 5234 0016 094A     	 ldr r2,.L304
 5235 0018 9818     	 adds r0,r3,r2
 5236 001a FB79     	 ldrb r3,[r7,#7]
 5237 001c 0133     	 adds r3,r3,#1
 5238 001e DBB2     	 uxtb r3,r3
 5239 0020 1A46     	 mov r2,r3
 5240 0022 0121     	 movs r1,#1
 5241 0024 064B     	 ldr r3,.L304+4
 5242 0026 9847     	 blx r3
 5243              	.LVL103:
1707:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
 5244              	 .loc 6 1707 0 discriminator 3
 5245 0028 FB79     	 ldrb r3,[r7,#7]
 5246 002a 0133     	 adds r3,r3,#1
 5247 002c FB71     	 strb r3,[r7,#7]
 5248              	.L302:
1707:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
 5249              	 .loc 6 1707 0 is_stmt 0 discriminator 1
 5250 002e FB79     	 ldrb r3,[r7,#7]
 5251 0030 012B     	 cmp r3,#1
 5252 0032 EBD9     	 bls .L303
1709:.././hal/sam3u1c/udphs_device.c **** 	}
1710:.././hal/sam3u1c/udphs_device.c **** }
 5253              	 .loc 6 1710 0 is_stmt 1
 5254 0034 00BF     	 nop
 5255 0036 0837     	 adds r7,r7,#8
 5256              	.LCFI218:
 5257              	 .cfi_def_cfa_offset 8
 5258 0038 BD46     	 mov sp,r7
 5259              	.LCFI219:
 5260              	 .cfi_def_cfa_register 13
 5261              	 
 5262 003a 80BD     	 pop {r7,pc}
 5263              	.L305:
 5264              	 .align 2
 5265              	.L304:
 5266 003c 00000000 	 .word udd_ep_job
 5267 0040 00000000 	 .word udd_ep_finish_job
 5268              	 .cfi_endproc
 5269              	.LFE177:
 5271              	 .section .text.udd_ep_abort_job,"ax",%progbits
 5272              	 .align 1
 5273              	 .syntax unified
 5274              	 .thumb
 5275              	 .thumb_func
 5276              	 .fpu softvfp
 5278              	udd_ep_abort_job:
 5279              	.LFB178:
1711:.././hal/sam3u1c/udphs_device.c **** 
1712:.././hal/sam3u1c/udphs_device.c **** 
1713:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_abort_job(udd_ep_id_t ep)
1714:.././hal/sam3u1c/udphs_device.c **** {
 5280              	 .loc 6 1714 0
 5281              	 .cfi_startproc
 5282              	 
 5283              	 
 5284 0000 80B5     	 push {r7,lr}
 5285              	.LCFI220:
 5286              	 .cfi_def_cfa_offset 8
 5287              	 .cfi_offset 7,-8
 5288              	 .cfi_offset 14,-4
 5289 0002 82B0     	 sub sp,sp,#8
 5290              	.LCFI221:
 5291              	 .cfi_def_cfa_offset 16
 5292 0004 00AF     	 add r7,sp,#0
 5293              	.LCFI222:
 5294              	 .cfi_def_cfa_register 7
 5295 0006 0346     	 mov r3,r0
 5296 0008 FB71     	 strb r3,[r7,#7]
1715:.././hal/sam3u1c/udphs_device.c **** 	ep &= USB_EP_ADDR_MASK;
 5297              	 .loc 6 1715 0
 5298 000a FB79     	 ldrb r3,[r7,#7]
 5299 000c 03F00F03 	 and r3,r3,#15
 5300 0010 FB71     	 strb r3,[r7,#7]
1716:.././hal/sam3u1c/udphs_device.c **** 
1717:.././hal/sam3u1c/udphs_device.c **** 	// Abort job on endpoint
1718:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
 5301              	 .loc 6 1718 0
 5302 0012 FB79     	 ldrb r3,[r7,#7]
 5303 0014 5A1E     	 subs r2,r3,#1
 5304 0016 1346     	 mov r3,r2
 5305 0018 5B00     	 lsls r3,r3,#1
 5306 001a 1344     	 add r3,r3,r2
 5307 001c DB00     	 lsls r3,r3,#3
 5308 001e 054A     	 ldr r2,.L307
 5309 0020 1344     	 add r3,r3,r2
 5310 0022 FA79     	 ldrb r2,[r7,#7]
 5311 0024 0121     	 movs r1,#1
 5312 0026 1846     	 mov r0,r3
 5313 0028 034B     	 ldr r3,.L307+4
 5314 002a 9847     	 blx r3
 5315              	.LVL104:
1719:.././hal/sam3u1c/udphs_device.c **** }
 5316              	 .loc 6 1719 0
 5317 002c 00BF     	 nop
 5318 002e 0837     	 adds r7,r7,#8
 5319              	.LCFI223:
 5320              	 .cfi_def_cfa_offset 8
 5321 0030 BD46     	 mov sp,r7
 5322              	.LCFI224:
 5323              	 .cfi_def_cfa_register 13
 5324              	 
 5325 0032 80BD     	 pop {r7,pc}
 5326              	.L308:
 5327              	 .align 2
 5328              	.L307:
 5329 0034 00000000 	 .word udd_ep_job
 5330 0038 00000000 	 .word udd_ep_finish_job
 5331              	 .cfi_endproc
 5332              	.LFE178:
 5334              	 .section .text.udd_ep_finish_job,"ax",%progbits
 5335              	 .align 1
 5336              	 .syntax unified
 5337              	 .thumb
 5338              	 .thumb_func
 5339              	 .fpu softvfp
 5341              	udd_ep_finish_job:
 5342              	.LFB179:
1720:.././hal/sam3u1c/udphs_device.c **** 
1721:.././hal/sam3u1c/udphs_device.c **** 
1722:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
1723:.././hal/sam3u1c/udphs_device.c **** {
 5343              	 .loc 6 1723 0
 5344              	 .cfi_startproc
 5345              	 
 5346              	 
 5347 0000 80B5     	 push {r7,lr}
 5348              	.LCFI225:
 5349              	 .cfi_def_cfa_offset 8
 5350              	 .cfi_offset 7,-8
 5351              	 .cfi_offset 14,-4
 5352 0002 82B0     	 sub sp,sp,#8
 5353              	.LCFI226:
 5354              	 .cfi_def_cfa_offset 16
 5355 0004 00AF     	 add r7,sp,#0
 5356              	.LCFI227:
 5357              	 .cfi_def_cfa_register 7
 5358 0006 7860     	 str r0,[r7,#4]
 5359 0008 0B46     	 mov r3,r1
 5360 000a FB70     	 strb r3,[r7,#3]
 5361 000c 1346     	 mov r3,r2
 5362 000e BB70     	 strb r3,[r7,#2]
1724:.././hal/sam3u1c/udphs_device.c **** 	if (ptr_job->busy == false) {
 5363              	 .loc 6 1724 0
 5364 0010 7B68     	 ldr r3,[r7,#4]
 5365 0012 1B7D     	 ldrb r3,[r3,#20]
 5366 0014 03F00103 	 and r3,r3,#1
 5367 0018 DBB2     	 uxtb r3,r3
 5368 001a 002B     	 cmp r3,#0
 5369 001c 1FD0     	 beq .L314
1725:.././hal/sam3u1c/udphs_device.c **** 		return; // No on-going job
1726:.././hal/sam3u1c/udphs_device.c **** 	}
1727:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->busy = false;
 5370              	 .loc 6 1727 0
 5371 001e 7A68     	 ldr r2,[r7,#4]
 5372 0020 137D     	 ldrb r3,[r2,#20]
 5373 0022 6FF30003 	 bfc r3,#0,#1
 5374 0026 1375     	 strb r3,[r2,#20]
1728:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("JobE%d ", b_abort);
1729:.././hal/sam3u1c/udphs_device.c **** 	if (NULL == ptr_job->call_trans) {
 5375              	 .loc 6 1729 0
 5376 0028 7B68     	 ldr r3,[r7,#4]
 5377 002a 1B68     	 ldr r3,[r3]
 5378 002c 002B     	 cmp r3,#0
 5379 002e 18D0     	 beq .L315
1730:.././hal/sam3u1c/udphs_device.c **** 		return; // No callback linked to job
1731:.././hal/sam3u1c/udphs_device.c **** 	}
1732:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_in(ep_num)) {
 5380              	 .loc 6 1732 0
 5381 0030 0E4A     	 ldr r2,.L316
 5382 0032 BB78     	 ldrb r3,[r7,#2]
 5383 0034 0833     	 adds r3,r3,#8
 5384 0036 5B01     	 lsls r3,r3,#5
 5385 0038 1344     	 add r3,r3,r2
 5386 003a 1B68     	 ldr r3,[r3]
 5387 003c 03F00803 	 and r3,r3,#8
 5388 0040 002B     	 cmp r3,#0
 5389 0042 03D0     	 beq .L313
1733:.././hal/sam3u1c/udphs_device.c **** 		ep_num |= USB_EP_DIR_IN;
 5390              	 .loc 6 1733 0
 5391 0044 BB78     	 ldrb r3,[r7,#2]
 5392 0046 63F07F03 	 orn r3,r3,#127
 5393 004a BB70     	 strb r3,[r7,#2]
 5394              	.L313:
1734:.././hal/sam3u1c/udphs_device.c **** 	}
1735:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
 5395              	 .loc 6 1735 0
 5396 004c 7B68     	 ldr r3,[r7,#4]
 5397 004e 1B68     	 ldr r3,[r3]
 5398 0050 FA78     	 ldrb r2,[r7,#3]
 5399 0052 1046     	 mov r0,r2
 5400 0054 7A68     	 ldr r2,[r7,#4]
 5401 0056 9168     	 ldr r1,[r2,#8]
 5402 0058 BA78     	 ldrb r2,[r7,#2]
 5403 005a 9847     	 blx r3
 5404              	.LVL105:
 5405 005c 02E0     	 b .L309
 5406              	.L314:
1725:.././hal/sam3u1c/udphs_device.c **** 	}
 5407              	 .loc 6 1725 0
 5408 005e 00BF     	 nop
 5409 0060 00E0     	 b .L309
 5410              	.L315:
1730:.././hal/sam3u1c/udphs_device.c **** 	}
 5411              	 .loc 6 1730 0
 5412 0062 00BF     	 nop
 5413              	.L309:
1736:.././hal/sam3u1c/udphs_device.c **** 			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
1737:.././hal/sam3u1c/udphs_device.c **** }
 5414              	 .loc 6 1737 0
 5415 0064 0837     	 adds r7,r7,#8
 5416              	.LCFI228:
 5417              	 .cfi_def_cfa_offset 8
 5418 0066 BD46     	 mov sp,r7
 5419              	.LCFI229:
 5420              	 .cfi_def_cfa_register 13
 5421              	 
 5422 0068 80BD     	 pop {r7,pc}
 5423              	.L317:
 5424 006a 00BF     	 .align 2
 5425              	.L316:
 5426 006c 00400A40 	 .word 1074413568
 5427              	 .cfi_endproc
 5428              	.LFE179:
 5430              	 .section .text.udd_ep_trans_done,"ax",%progbits
 5431              	 .align 1
 5432              	 .syntax unified
 5433              	 .thumb
 5434              	 .thumb_func
 5435              	 .fpu softvfp
 5437              	udd_ep_trans_done:
 5438              	.LFB180:
1738:.././hal/sam3u1c/udphs_device.c **** 
1739:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_trans_done(udd_ep_id_t ep)
1740:.././hal/sam3u1c/udphs_device.c **** {
 5439              	 .loc 6 1740 0
 5440              	 .cfi_startproc
 5441              	 
 5442              	 
 5443 0000 80B5     	 push {r7,lr}
 5444              	.LCFI230:
 5445              	 .cfi_def_cfa_offset 8
 5446              	 .cfi_offset 7,-8
 5447              	 .cfi_offset 14,-4
 5448 0002 86B0     	 sub sp,sp,#24
 5449              	.LCFI231:
 5450              	 .cfi_def_cfa_offset 32
 5451 0004 00AF     	 add r7,sp,#0
 5452              	.LCFI232:
 5453              	 .cfi_def_cfa_register 7
 5454 0006 0346     	 mov r3,r0
 5455 0008 FB71     	 strb r3,[r7,#7]
1741:.././hal/sam3u1c/udphs_device.c **** 	uint32_t udd_dma_ctrl = 0;
 5456              	 .loc 6 1741 0
 5457 000a 0023     	 movs r3,#0
 5458 000c 7B61     	 str r3,[r7,#20]
1742:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_t *ptr_job;
1743:.././hal/sam3u1c/udphs_device.c **** 	iram_size_t next_trans;
1744:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1745:.././hal/sam3u1c/udphs_device.c **** 
1746:.././hal/sam3u1c/udphs_device.c **** 	// Get job corresponding at endpoint
1747:.././hal/sam3u1c/udphs_device.c **** 	ptr_job = &udd_ep_job[ep - 1];
 5459              	 .loc 6 1747 0
 5460 000e FB79     	 ldrb r3,[r7,#7]
 5461 0010 5A1E     	 subs r2,r3,#1
 5462 0012 1346     	 mov r3,r2
 5463 0014 5B00     	 lsls r3,r3,#1
 5464 0016 1344     	 add r3,r3,r2
 5465 0018 DB00     	 lsls r3,r3,#3
 5466 001a 6D4A     	 ldr r2,.L331
 5467 001c 1344     	 add r3,r3,r2
 5468 001e FB60     	 str r3,[r7,#12]
1748:.././hal/sam3u1c/udphs_device.c **** 
1749:.././hal/sam3u1c/udphs_device.c **** 	if (!ptr_job->busy) {
 5469              	 .loc 6 1749 0
 5470 0020 FB68     	 ldr r3,[r7,#12]
 5471 0022 1B7D     	 ldrb r3,[r3,#20]
 5472 0024 03F00103 	 and r3,r3,#1
 5473 0028 DBB2     	 uxtb r3,r3
 5474 002a 002B     	 cmp r3,#0
 5475 002c 00F0CC80 	 beq .L330
1750:.././hal/sam3u1c/udphs_device.c **** 		return; // No job is running, then ignore it (system error)
1751:.././hal/sam3u1c/udphs_device.c **** 	}
1752:.././hal/sam3u1c/udphs_device.c **** 
1753:.././hal/sam3u1c/udphs_device.c **** 	if (ptr_job->buf_cnt != ptr_job->buf_size) {
 5476              	 .loc 6 1753 0
 5477 0030 FB68     	 ldr r3,[r7,#12]
 5478 0032 DA68     	 ldr r2,[r3,#12]
 5479 0034 FB68     	 ldr r3,[r7,#12]
 5480 0036 9B68     	 ldr r3,[r3,#8]
 5481 0038 9A42     	 cmp r2,r3
 5482 003a 00F09980 	 beq .L321
1754:.././hal/sam3u1c/udphs_device.c **** 		// Need to send or receive other data
1755:.././hal/sam3u1c/udphs_device.c **** 		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
 5483              	 .loc 6 1755 0
 5484 003e FB68     	 ldr r3,[r7,#12]
 5485 0040 9A68     	 ldr r2,[r3,#8]
 5486 0042 FB68     	 ldr r3,[r7,#12]
 5487 0044 DB68     	 ldr r3,[r3,#12]
 5488 0046 D31A     	 subs r3,r2,r3
 5489 0048 3B61     	 str r3,[r7,#16]
1756:.././hal/sam3u1c/udphs_device.c **** 
1757:.././hal/sam3u1c/udphs_device.c **** 		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
 5490              	 .loc 6 1757 0
 5491 004a 3B69     	 ldr r3,[r7,#16]
 5492 004c B3F5803F 	 cmp r3,#65536
 5493 0050 05D9     	 bls .L322
1758:.././hal/sam3u1c/udphs_device.c **** 			// The USB hardware support a maximum
1759:.././hal/sam3u1c/udphs_device.c **** 			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
1760:.././hal/sam3u1c/udphs_device.c **** 			next_trans = UDD_ENDPOINT_MAX_TRANS;
 5494              	 .loc 6 1760 0
 5495 0052 4FF48033 	 mov r3,#65536
 5496 0056 3B61     	 str r3,[r7,#16]
1761:.././hal/sam3u1c/udphs_device.c **** 
1762:.././hal/sam3u1c/udphs_device.c **** 			// Set 0 to transfer the maximum
1763:.././hal/sam3u1c/udphs_device.c **** 			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
 5497              	 .loc 6 1763 0
 5498 0058 0023     	 movs r3,#0
 5499 005a 7B61     	 str r3,[r7,#20]
 5500 005c 02E0     	 b .L323
 5501              	.L322:
1764:.././hal/sam3u1c/udphs_device.c **** 		} else {
1765:.././hal/sam3u1c/udphs_device.c **** 			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
 5502              	 .loc 6 1765 0
 5503 005e 3B69     	 ldr r3,[r7,#16]
 5504 0060 1B04     	 lsls r3,r3,#16
 5505 0062 7B61     	 str r3,[r7,#20]
 5506              	.L323:
1766:.././hal/sam3u1c/udphs_device.c **** 		}
1767:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_endpoint_in(ep)) {
 5507              	 .loc 6 1767 0
 5508 0064 5B4A     	 ldr r2,.L331+4
 5509 0066 FB79     	 ldrb r3,[r7,#7]
 5510 0068 0833     	 adds r3,r3,#8
 5511 006a 5B01     	 lsls r3,r3,#5
 5512 006c 1344     	 add r3,r3,r2
 5513 006e 1B68     	 ldr r3,[r3]
 5514 0070 03F00803 	 and r3,r3,#8
 5515 0074 002B     	 cmp r3,#0
 5516 0076 1DD0     	 beq .L324
1768:.././hal/sam3u1c/udphs_device.c **** 			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
 5517              	 .loc 6 1768 0
 5518 0078 564A     	 ldr r2,.L331+4
 5519 007a FB79     	 ldrb r3,[r7,#7]
 5520 007c 0833     	 adds r3,r3,#8
 5521 007e 5B01     	 lsls r3,r3,#5
 5522 0080 1344     	 add r3,r3,r2
 5523 0082 1B68     	 ldr r3,[r3]
 5524 0084 03F00703 	 and r3,r3,#7
 5525 0088 0822     	 movs r2,#8
 5526 008a 02FA03F3 	 lsl r3,r2,r3
 5527 008e 1A46     	 mov r2,r3
 5528 0090 3B69     	 ldr r3,[r7,#16]
 5529 0092 B3FBF2F1 	 udiv r1,r3,r2
 5530 0096 02FB01F2 	 mul r2,r2,r1
 5531 009a 9B1A     	 subs r3,r3,r2
 5532 009c 002B     	 cmp r3,#0
 5533 009e 27D0     	 beq .L326
1769:.././hal/sam3u1c/udphs_device.c **** 				// Enable short packet option
1770:.././hal/sam3u1c/udphs_device.c **** 				// else the DMA transfer is accepted
1771:.././hal/sam3u1c/udphs_device.c **** 				// and interrupt DMA valid but nothing is sent.
1772:.././hal/sam3u1c/udphs_device.c **** 				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
 5534              	 .loc 6 1772 0
 5535 00a0 7B69     	 ldr r3,[r7,#20]
 5536 00a2 43F00803 	 orr r3,r3,#8
 5537 00a6 7B61     	 str r3,[r7,#20]
1773:.././hal/sam3u1c/udphs_device.c **** 				// No need to request another ZLP
1774:.././hal/sam3u1c/udphs_device.c **** 				ptr_job->b_shortpacket = false;
 5538              	 .loc 6 1774 0
 5539 00a8 FA68     	 ldr r2,[r7,#12]
 5540 00aa 137D     	 ldrb r3,[r2,#20]
 5541 00ac 6FF34103 	 bfc r3,#1,#1
 5542 00b0 1375     	 strb r3,[r2,#20]
 5543 00b2 1DE0     	 b .L326
 5544              	.L324:
1775:.././hal/sam3u1c/udphs_device.c **** 			}
1776:.././hal/sam3u1c/udphs_device.c **** 		} else {
1777:.././hal/sam3u1c/udphs_device.c **** 			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
 5545              	 .loc 6 1777 0
 5546 00b4 474A     	 ldr r2,.L331+4
 5547 00b6 FB79     	 ldrb r3,[r7,#7]
 5548 00b8 0833     	 adds r3,r3,#8
 5549 00ba 5B01     	 lsls r3,r3,#5
 5550 00bc 1344     	 add r3,r3,r2
 5551 00be 1B68     	 ldr r3,[r3]
 5552 00c0 1B09     	 lsrs r3,r3,#4
 5553 00c2 03F00303 	 and r3,r3,#3
 5554 00c6 012B     	 cmp r3,#1
 5555 00c8 0ED1     	 bne .L327
1778:.././hal/sam3u1c/udphs_device.c **** 					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
 5556              	 .loc 6 1778 0
 5557 00ca 424A     	 ldr r2,.L331+4
 5558 00cc FB79     	 ldrb r3,[r7,#7]
 5559 00ce 0833     	 adds r3,r3,#8
 5560 00d0 5B01     	 lsls r3,r3,#5
 5561 00d2 1344     	 add r3,r3,r2
 5562 00d4 1B68     	 ldr r3,[r3]
 5563 00d6 03F00703 	 and r3,r3,#7
 5564 00da 0822     	 movs r2,#8
 5565 00dc 02FA03F3 	 lsl r3,r2,r3
 5566 00e0 1A46     	 mov r2,r3
 5567 00e2 3B69     	 ldr r3,[r7,#16]
 5568 00e4 9342     	 cmp r3,r2
 5569 00e6 03D8     	 bhi .L326
 5570              	.L327:
1779:.././hal/sam3u1c/udphs_device.c **** 
1780:.././hal/sam3u1c/udphs_device.c **** 				// Enable short packet reception
1781:.././hal/sam3u1c/udphs_device.c **** 				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
 5571              	 .loc 6 1781 0
 5572 00e8 7B69     	 ldr r3,[r7,#20]
 5573 00ea 43F01403 	 orr r3,r3,#20
 5574 00ee 7B61     	 str r3,[r7,#20]
 5575              	.L326:
1782:.././hal/sam3u1c/udphs_device.c **** 						| UDPHS_DMACONTROL_END_TR_EN;
1783:.././hal/sam3u1c/udphs_device.c **** 			}
1784:.././hal/sam3u1c/udphs_device.c **** 		}
1785:.././hal/sam3u1c/udphs_device.c **** 
1786:.././hal/sam3u1c/udphs_device.c **** 		// Start USB DMA to fill or read fifo of the selected endpoint
1787:.././hal/sam3u1c/udphs_device.c **** 		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
 5576              	 .loc 6 1787 0
 5577 00f0 FB68     	 ldr r3,[r7,#12]
 5578 00f2 5A68     	 ldr r2,[r3,#4]
 5579 00f4 FB68     	 ldr r3,[r7,#12]
 5580 00f6 DB68     	 ldr r3,[r3,#12]
 5581 00f8 D118     	 adds r1,r2,r3
 5582 00fa FB79     	 ldrb r3,[r7,#7]
 5583 00fc 1A01     	 lsls r2,r3,#4
 5584 00fe 364B     	 ldr r3,.L331+8
 5585 0100 1344     	 add r3,r3,r2
 5586 0102 0A46     	 mov r2,r1
 5587 0104 5A60     	 str r2,[r3,#4]
1788:.././hal/sam3u1c/udphs_device.c **** 		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
 5588              	 .loc 6 1788 0
 5589 0106 7B69     	 ldr r3,[r7,#20]
 5590 0108 43F02103 	 orr r3,r3,#33
 5591 010c 7B61     	 str r3,[r7,#20]
1789:.././hal/sam3u1c/udphs_device.c **** 
1790:.././hal/sam3u1c/udphs_device.c **** 		// Disable IRQs to have a short sequence
1791:.././hal/sam3u1c/udphs_device.c **** 		// between read of EOT_STA and DMA enable
1792:.././hal/sam3u1c/udphs_device.c **** 		flags = cpu_irq_save();
 5592              	 .loc 6 1792 0
 5593 010e 334B     	 ldr r3,.L331+12
 5594 0110 9847     	 blx r3
 5595              	.LVL106:
 5596 0112 B860     	 str r0,[r7,#8]
1793:.././hal/sam3u1c/udphs_device.c **** 		if (!(udd_endpoint_dma_get_status(ep)
 5597              	 .loc 6 1793 0
 5598 0114 FB79     	 ldrb r3,[r7,#7]
 5599 0116 1A01     	 lsls r2,r3,#4
 5600 0118 2F4B     	 ldr r3,.L331+8
 5601 011a 1344     	 add r3,r3,r2
 5602 011c DB68     	 ldr r3,[r3,#12]
1794:.././hal/sam3u1c/udphs_device.c **** 				& UDPHS_DMASTATUS_END_TR_ST)) {
 5603              	 .loc 6 1794 0
 5604 011e 03F01003 	 and r3,r3,#16
1793:.././hal/sam3u1c/udphs_device.c **** 		if (!(udd_endpoint_dma_get_status(ep)
 5605              	 .loc 6 1793 0
 5606 0122 002B     	 cmp r3,#0
 5607 0124 1DD1     	 bne .L328
1795:.././hal/sam3u1c/udphs_device.c **** 			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
 5608              	 .loc 6 1795 0
 5609 0126 FB79     	 ldrb r3,[r7,#7]
 5610 0128 1A01     	 lsls r2,r3,#4
 5611 012a 2B4B     	 ldr r3,.L331+8
 5612 012c 1344     	 add r3,r3,r2
 5613 012e 7A69     	 ldr r2,[r7,#20]
 5614 0130 9A60     	 str r2,[r3,#8]
1796:.././hal/sam3u1c/udphs_device.c **** 			ptr_job->buf_cnt += next_trans;
 5615              	 .loc 6 1796 0
 5616 0132 FB68     	 ldr r3,[r7,#12]
 5617 0134 DA68     	 ldr r2,[r3,#12]
 5618 0136 3B69     	 ldr r3,[r7,#16]
 5619 0138 1A44     	 add r2,r2,r3
 5620 013a FB68     	 ldr r3,[r7,#12]
 5621 013c DA60     	 str r2,[r3,#12]
1797:.././hal/sam3u1c/udphs_device.c **** 			ptr_job->buf_load = next_trans;
 5622              	 .loc 6 1797 0
 5623 013e FB68     	 ldr r3,[r7,#12]
 5624 0140 3A69     	 ldr r2,[r7,#16]
 5625 0142 1A61     	 str r2,[r3,#16]
1798:.././hal/sam3u1c/udphs_device.c **** 			udd_enable_endpoint_dma_interrupt(ep);
 5626              	 .loc 6 1798 0
 5627 0144 234B     	 ldr r3,.L331+4
 5628 0146 1A69     	 ldr r2,[r3,#16]
 5629 0148 FB79     	 ldrb r3,[r7,#7]
 5630 014a 013B     	 subs r3,r3,#1
 5631 014c 4FF00071 	 mov r1,#33554432
 5632 0150 01FA03F3 	 lsl r3,r1,r3
 5633 0154 1F49     	 ldr r1,.L331+4
 5634 0156 1343     	 orrs r3,r3,r2
 5635 0158 0B61     	 str r3,[r1,#16]
1799:.././hal/sam3u1c/udphs_device.c **** 			cpu_irq_restore(flags);
 5636              	 .loc 6 1799 0
 5637 015a B868     	 ldr r0,[r7,#8]
 5638 015c 204B     	 ldr r3,.L331+16
 5639 015e 9847     	 blx r3
 5640              	.LVL107:
1800:.././hal/sam3u1c/udphs_device.c **** 			return;
 5641              	 .loc 6 1800 0
 5642 0160 33E0     	 b .L318
 5643              	.L328:
1801:.././hal/sam3u1c/udphs_device.c **** 		}
1802:.././hal/sam3u1c/udphs_device.c **** 		cpu_irq_restore(flags);
 5644              	 .loc 6 1802 0
 5645 0162 B868     	 ldr r0,[r7,#8]
 5646 0164 1E4B     	 ldr r3,.L331+16
 5647 0166 9847     	 blx r3
 5648              	.LVL108:
1803:.././hal/sam3u1c/udphs_device.c **** 
1804:.././hal/sam3u1c/udphs_device.c **** 		// Here a ZLP has been received
1805:.././hal/sam3u1c/udphs_device.c **** 		// and the DMA transfer must be not started.
1806:.././hal/sam3u1c/udphs_device.c **** 		// It is the end of transfer
1807:.././hal/sam3u1c/udphs_device.c **** 		ptr_job->buf_size = ptr_job->buf_cnt;
 5649              	 .loc 6 1807 0
 5650 0168 FB68     	 ldr r3,[r7,#12]
 5651 016a DA68     	 ldr r2,[r3,#12]
 5652 016c FB68     	 ldr r3,[r7,#12]
 5653 016e 9A60     	 str r2,[r3,#8]
 5654              	.L321:
1808:.././hal/sam3u1c/udphs_device.c **** 	}
1809:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_in(ep)) {
 5655              	 .loc 6 1809 0
 5656 0170 184A     	 ldr r2,.L331+4
 5657 0172 FB79     	 ldrb r3,[r7,#7]
 5658 0174 0833     	 adds r3,r3,#8
 5659 0176 5B01     	 lsls r3,r3,#5
 5660 0178 1344     	 add r3,r3,r2
 5661 017a 1B68     	 ldr r3,[r3]
 5662 017c 03F00803 	 and r3,r3,#8
 5663 0180 002B     	 cmp r3,#0
 5664 0182 1AD0     	 beq .L329
1810:.././hal/sam3u1c/udphs_device.c **** 		if (ptr_job->b_shortpacket) {
 5665              	 .loc 6 1810 0
 5666 0184 FB68     	 ldr r3,[r7,#12]
 5667 0186 1B7D     	 ldrb r3,[r3,#20]
 5668 0188 03F00203 	 and r3,r3,#2
 5669 018c DBB2     	 uxtb r3,r3
 5670 018e 002B     	 cmp r3,#0
 5671 0190 13D0     	 beq .L329
1811:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("zlp ");
1812:.././hal/sam3u1c/udphs_device.c **** 			// Need to send a ZLP (No possible with USB DMA)
1813:.././hal/sam3u1c/udphs_device.c **** 			// enable interrupt to wait a free bank to sent ZLP
1814:.././hal/sam3u1c/udphs_device.c **** 			udd_enable_tx_pkt_ready_interrupt(ep);
 5672              	 .loc 6 1814 0
 5673 0192 104A     	 ldr r2,.L331+4
 5674 0194 FB79     	 ldrb r3,[r7,#7]
 5675 0196 0833     	 adds r3,r3,#8
 5676 0198 5B01     	 lsls r3,r3,#5
 5677 019a 1344     	 add r3,r3,r2
 5678 019c 0433     	 adds r3,r3,#4
 5679 019e 4FF40062 	 mov r2,#2048
 5680 01a2 1A60     	 str r2,[r3]
1815:.././hal/sam3u1c/udphs_device.c **** 			udd_enable_endpoint_interrupt(ep);
 5681              	 .loc 6 1815 0
 5682 01a4 0B4B     	 ldr r3,.L331+4
 5683 01a6 1A69     	 ldr r2,[r3,#16]
 5684 01a8 FB79     	 ldrb r3,[r7,#7]
 5685 01aa 4FF48071 	 mov r1,#256
 5686 01ae 01FA03F3 	 lsl r3,r1,r3
 5687 01b2 0849     	 ldr r1,.L331+4
 5688 01b4 1343     	 orrs r3,r3,r2
 5689 01b6 0B61     	 str r3,[r1,#16]
1816:.././hal/sam3u1c/udphs_device.c **** 			return;
 5690              	 .loc 6 1816 0
 5691 01b8 07E0     	 b .L318
 5692              	.L329:
1817:.././hal/sam3u1c/udphs_device.c **** 		}
1818:.././hal/sam3u1c/udphs_device.c **** 	}
1819:.././hal/sam3u1c/udphs_device.c **** 	// Call callback to signal end of transfer
1820:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_finish_job(ptr_job, false, ep);
 5693              	 .loc 6 1820 0
 5694 01ba FB79     	 ldrb r3,[r7,#7]
 5695 01bc 1A46     	 mov r2,r3
 5696 01be 0021     	 movs r1,#0
 5697 01c0 F868     	 ldr r0,[r7,#12]
 5698 01c2 084B     	 ldr r3,.L331+20
 5699 01c4 9847     	 blx r3
 5700              	.LVL109:
 5701 01c6 00E0     	 b .L318
 5702              	.L330:
1750:.././hal/sam3u1c/udphs_device.c **** 	}
 5703              	 .loc 6 1750 0
 5704 01c8 00BF     	 nop
 5705              	.L318:
1821:.././hal/sam3u1c/udphs_device.c **** }
 5706              	 .loc 6 1821 0
 5707 01ca 1837     	 adds r7,r7,#24
 5708              	.LCFI233:
 5709              	 .cfi_def_cfa_offset 8
 5710 01cc BD46     	 mov sp,r7
 5711              	.LCFI234:
 5712              	 .cfi_def_cfa_register 13
 5713              	 
 5714 01ce 80BD     	 pop {r7,pc}
 5715              	.L332:
 5716              	 .align 2
 5717              	.L331:
 5718 01d0 00000000 	 .word udd_ep_job
 5719 01d4 00400A40 	 .word 1074413568
 5720 01d8 00430A40 	 .word 1074414336
 5721 01dc 00000000 	 .word cpu_irq_save
 5722 01e0 00000000 	 .word cpu_irq_restore
 5723 01e4 00000000 	 .word udd_ep_finish_job
 5724              	 .cfi_endproc
 5725              	.LFE180:
 5727              	 .section .text.udd_ep_interrupt,"ax",%progbits
 5728              	 .align 1
 5729              	 .syntax unified
 5730              	 .thumb
 5731              	 .thumb_func
 5732              	 .fpu softvfp
 5734              	udd_ep_interrupt:
 5735              	.LFB181:
1822:.././hal/sam3u1c/udphs_device.c **** 
1823:.././hal/sam3u1c/udphs_device.c **** 
1824:.././hal/sam3u1c/udphs_device.c **** static bool udd_ep_interrupt(void)
1825:.././hal/sam3u1c/udphs_device.c **** {
 5736              	 .loc 6 1825 0
 5737              	 .cfi_startproc
 5738              	 
 5739              	 
 5740 0000 80B5     	 push {r7,lr}
 5741              	.LCFI235:
 5742              	 .cfi_def_cfa_offset 8
 5743              	 .cfi_offset 7,-8
 5744              	 .cfi_offset 14,-4
 5745 0002 84B0     	 sub sp,sp,#16
 5746              	.LCFI236:
 5747              	 .cfi_def_cfa_offset 24
 5748 0004 00AF     	 add r7,sp,#0
 5749              	.LCFI237:
 5750              	 .cfi_def_cfa_register 7
1826:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_id_t ep;
1827:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_t *ptr_job;
1828:.././hal/sam3u1c/udphs_device.c **** 
1829:.././hal/sam3u1c/udphs_device.c **** 	// For each endpoint different of control endpoint (0)
1830:.././hal/sam3u1c/udphs_device.c **** 	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
 5751              	 .loc 6 1830 0
 5752 0006 0123     	 movs r3,#1
 5753 0008 FB73     	 strb r3,[r7,#15]
 5754 000a E0E0     	 b .L334
 5755              	.L341:
1831:.././hal/sam3u1c/udphs_device.c **** 		// Get job corresponding at endpoint
1832:.././hal/sam3u1c/udphs_device.c **** 		ptr_job = &udd_ep_job[ep - 1];
 5756              	 .loc 6 1832 0
 5757 000c FB7B     	 ldrb r3,[r7,#15]
 5758 000e 5A1E     	 subs r2,r3,#1
 5759 0010 1346     	 mov r3,r2
 5760 0012 5B00     	 lsls r3,r3,#1
 5761 0014 1344     	 add r3,r3,r2
 5762 0016 DB00     	 lsls r3,r3,#3
 5763 0018 714A     	 ldr r2,.L342
 5764 001a 1344     	 add r3,r3,r2
 5765 001c BB60     	 str r3,[r7,#8]
1833:.././hal/sam3u1c/udphs_device.c **** 
1834:.././hal/sam3u1c/udphs_device.c **** 		// Check DMA event
1835:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
 5766              	 .loc 6 1835 0
 5767 001e 714B     	 ldr r3,.L342+4
 5768 0020 1A69     	 ldr r2,[r3,#16]
 5769 0022 FB7B     	 ldrb r3,[r7,#15]
 5770 0024 013B     	 subs r3,r3,#1
 5771 0026 4FF00071 	 mov r1,#33554432
 5772 002a 01FA03F3 	 lsl r3,r1,r3
 5773 002e 1340     	 ands r3,r3,r2
 5774 0030 002B     	 cmp r3,#0
 5775 0032 3CD0     	 beq .L335
1836:.././hal/sam3u1c/udphs_device.c **** 				&& Is_udd_endpoint_dma_interrupt(ep)) {
 5776              	 .loc 6 1836 0
 5777 0034 6B4B     	 ldr r3,.L342+4
 5778 0036 5A69     	 ldr r2,[r3,#20]
 5779 0038 FB7B     	 ldrb r3,[r7,#15]
 5780 003a 013B     	 subs r3,r3,#1
 5781 003c 4FF00071 	 mov r1,#33554432
 5782 0040 01FA03F3 	 lsl r3,r1,r3
 5783 0044 1340     	 ands r3,r3,r2
 5784 0046 002B     	 cmp r3,#0
 5785 0048 31D0     	 beq .L335
 5786              	.LBB31:
1837:.././hal/sam3u1c/udphs_device.c **** 			uint32_t nb_remaining;
1838:.././hal/sam3u1c/udphs_device.c **** 			if (udd_endpoint_dma_get_status(ep)
 5787              	 .loc 6 1838 0
 5788 004a FB7B     	 ldrb r3,[r7,#15]
 5789 004c 1A01     	 lsls r2,r3,#4
 5790 004e 664B     	 ldr r3,.L342+8
 5791 0050 1344     	 add r3,r3,r2
 5792 0052 DB68     	 ldr r3,[r3,#12]
1839:.././hal/sam3u1c/udphs_device.c **** 					& UDPHS_DMASTATUS_CHANN_ENB) {
 5793              	 .loc 6 1839 0
 5794 0054 03F00103 	 and r3,r3,#1
1838:.././hal/sam3u1c/udphs_device.c **** 					& UDPHS_DMASTATUS_CHANN_ENB) {
 5795              	 .loc 6 1838 0
 5796 0058 002B     	 cmp r3,#0
 5797 005a 01D0     	 beq .L336
1840:.././hal/sam3u1c/udphs_device.c **** 				return true; // Ignore EOT_STA interrupt
 5798              	 .loc 6 1840 0
 5799 005c 0123     	 movs r3,#1
 5800 005e BBE0     	 b .L337
 5801              	.L336:
1841:.././hal/sam3u1c/udphs_device.c **** 			}
1842:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("dma%d: ", ep);
1843:.././hal/sam3u1c/udphs_device.c **** 			udd_disable_endpoint_dma_interrupt(ep);
 5802              	 .loc 6 1843 0
 5803 0060 604B     	 ldr r3,.L342+4
 5804 0062 1A69     	 ldr r2,[r3,#16]
 5805 0064 FB7B     	 ldrb r3,[r7,#15]
 5806 0066 013B     	 subs r3,r3,#1
 5807 0068 4FF00071 	 mov r1,#33554432
 5808 006c 01FA03F3 	 lsl r3,r1,r3
 5809 0070 DB43     	 mvns r3,r3
 5810 0072 5C49     	 ldr r1,.L342+4
 5811 0074 1340     	 ands r3,r3,r2
 5812 0076 0B61     	 str r3,[r1,#16]
1844:.././hal/sam3u1c/udphs_device.c **** 			// Save number of data no transfered
1845:.././hal/sam3u1c/udphs_device.c **** 			nb_remaining = (udd_endpoint_dma_get_status(ep) &
 5813              	 .loc 6 1845 0
 5814 0078 FB7B     	 ldrb r3,[r7,#15]
 5815 007a 1A01     	 lsls r2,r3,#4
 5816 007c 5A4B     	 ldr r3,.L342+8
 5817 007e 1344     	 add r3,r3,r2
 5818 0080 DB68     	 ldr r3,[r3,#12]
1846:.././hal/sam3u1c/udphs_device.c **** 					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
1847:.././hal/sam3u1c/udphs_device.c **** 					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
 5819              	 .loc 6 1847 0
 5820 0082 1B0C     	 lsrs r3,r3,#16
1845:.././hal/sam3u1c/udphs_device.c **** 					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
 5821              	 .loc 6 1845 0
 5822 0084 9BB2     	 uxth r3,r3
 5823 0086 7B60     	 str r3,[r7,#4]
1848:.././hal/sam3u1c/udphs_device.c **** 			if (nb_remaining) {
 5824              	 .loc 6 1848 0
 5825 0088 7B68     	 ldr r3,[r7,#4]
 5826 008a 002B     	 cmp r3,#0
 5827 008c 09D0     	 beq .L338
1849:.././hal/sam3u1c/udphs_device.c **** 				// Transfer no complete (short packet or ZLP) then:
1850:.././hal/sam3u1c/udphs_device.c **** 				// Update number of data transfered
1851:.././hal/sam3u1c/udphs_device.c **** 				ptr_job->buf_cnt -= nb_remaining;
 5828              	 .loc 6 1851 0
 5829 008e BB68     	 ldr r3,[r7,#8]
 5830 0090 DA68     	 ldr r2,[r3,#12]
 5831 0092 7B68     	 ldr r3,[r7,#4]
 5832 0094 D21A     	 subs r2,r2,r3
 5833 0096 BB68     	 ldr r3,[r7,#8]
 5834 0098 DA60     	 str r2,[r3,#12]
1852:.././hal/sam3u1c/udphs_device.c **** 				// Set transfer complete to stop the transfer
1853:.././hal/sam3u1c/udphs_device.c **** 				ptr_job->buf_size = ptr_job->buf_cnt;
 5835              	 .loc 6 1853 0
 5836 009a BB68     	 ldr r3,[r7,#8]
 5837 009c DA68     	 ldr r2,[r3,#12]
 5838 009e BB68     	 ldr r3,[r7,#8]
 5839 00a0 9A60     	 str r2,[r3,#8]
 5840              	.L338:
1854:.././hal/sam3u1c/udphs_device.c **** 			}
1855:.././hal/sam3u1c/udphs_device.c **** 			udd_ep_trans_done(ep);
 5841              	 .loc 6 1855 0
 5842 00a2 FB7B     	 ldrb r3,[r7,#15]
 5843 00a4 1846     	 mov r0,r3
 5844 00a6 514B     	 ldr r3,.L342+12
 5845 00a8 9847     	 blx r3
 5846              	.LVL110:
1856:.././hal/sam3u1c/udphs_device.c **** 			return true;
 5847              	 .loc 6 1856 0
 5848 00aa 0123     	 movs r3,#1
 5849 00ac 94E0     	 b .L337
 5850              	.L335:
 5851              	.LBE31:
1857:.././hal/sam3u1c/udphs_device.c **** 		}
1858:.././hal/sam3u1c/udphs_device.c **** 		// Check empty bank interrupt event
1859:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_endpoint_interrupt_enabled(ep)) {
 5852              	 .loc 6 1859 0
 5853 00ae 4D4B     	 ldr r3,.L342+4
 5854 00b0 1A69     	 ldr r2,[r3,#16]
 5855 00b2 FB7B     	 ldrb r3,[r7,#15]
 5856 00b4 4FF48071 	 mov r1,#256
 5857 00b8 01FA03F3 	 lsl r3,r1,r3
 5858 00bc 1340     	 ands r3,r3,r2
 5859 00be 002B     	 cmp r3,#0
 5860 00c0 00F08280 	 beq .L339
1860:.././hal/sam3u1c/udphs_device.c **** 			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
 5861              	 .loc 6 1860 0
 5862 00c4 474A     	 ldr r2,.L342+4
 5863 00c6 FB7B     	 ldrb r3,[r7,#15]
 5864 00c8 5B01     	 lsls r3,r3,#5
 5865 00ca 1344     	 add r3,r3,r2
 5866 00cc 03F58673 	 add r3,r3,#268
 5867 00d0 1B68     	 ldr r3,[r3]
 5868 00d2 03F40063 	 and r3,r3,#2048
 5869 00d6 002B     	 cmp r3,#0
 5870 00d8 24D0     	 beq .L340
1861:.././hal/sam3u1c/udphs_device.c **** 					&& !Is_udd_tx_pkt_ready(ep)) {
 5871              	 .loc 6 1861 0
 5872 00da 424A     	 ldr r2,.L342+4
 5873 00dc FB7B     	 ldrb r3,[r7,#15]
 5874 00de 5B01     	 lsls r3,r3,#5
 5875 00e0 1344     	 add r3,r3,r2
 5876 00e2 03F58E73 	 add r3,r3,#284
 5877 00e6 1B68     	 ldr r3,[r3]
 5878 00e8 03F40063 	 and r3,r3,#2048
 5879 00ec 002B     	 cmp r3,#0
 5880 00ee 19D1     	 bne .L340
1862:.././hal/sam3u1c/udphs_device.c **** 				udd_disable_tx_pkt_ready_interrupt(ep);
 5881              	 .loc 6 1862 0
 5882 00f0 3C4A     	 ldr r2,.L342+4
 5883 00f2 FB7B     	 ldrb r3,[r7,#15]
 5884 00f4 5B01     	 lsls r3,r3,#5
 5885 00f6 1344     	 add r3,r3,r2
 5886 00f8 03F58473 	 add r3,r3,#264
 5887 00fc 4FF40062 	 mov r2,#2048
 5888 0100 1A60     	 str r2,[r3]
1863:.././hal/sam3u1c/udphs_device.c **** 				// One bank is free then send a ZLP
1864:.././hal/sam3u1c/udphs_device.c **** 				udd_raise_tx_pkt_ready(ep);
 5889              	 .loc 6 1864 0
 5890 0102 384A     	 ldr r2,.L342+4
 5891 0104 FB7B     	 ldrb r3,[r7,#15]
 5892 0106 5B01     	 lsls r3,r3,#5
 5893 0108 1344     	 add r3,r3,r2
 5894 010a 03F58A73 	 add r3,r3,#276
 5895 010e 4FF40062 	 mov r2,#2048
 5896 0112 1A60     	 str r2,[r3]
1865:.././hal/sam3u1c/udphs_device.c **** 				udd_ep_finish_job(ptr_job, false, ep);
 5897              	 .loc 6 1865 0
 5898 0114 FB7B     	 ldrb r3,[r7,#15]
 5899 0116 1A46     	 mov r2,r3
 5900 0118 0021     	 movs r1,#0
 5901 011a B868     	 ldr r0,[r7,#8]
 5902 011c 344B     	 ldr r3,.L342+16
 5903 011e 9847     	 blx r3
 5904              	.LVL111:
1866:.././hal/sam3u1c/udphs_device.c **** 				return true;
 5905              	 .loc 6 1866 0
 5906 0120 0123     	 movs r3,#1
 5907 0122 59E0     	 b .L337
 5908              	.L340:
1867:.././hal/sam3u1c/udphs_device.c **** 			}
1868:.././hal/sam3u1c/udphs_device.c **** 			if (Is_udd_bank_interrupt_enabled(ep)
 5909              	 .loc 6 1868 0
 5910 0124 2F4A     	 ldr r2,.L342+4
 5911 0126 FB7B     	 ldrb r3,[r7,#15]
 5912 0128 5B01     	 lsls r3,r3,#5
 5913 012a 1344     	 add r3,r3,r2
 5914 012c 03F58673 	 add r3,r3,#268
 5915 0130 1B68     	 ldr r3,[r3]
 5916 0132 03F48023 	 and r3,r3,#262144
 5917 0136 002B     	 cmp r3,#0
 5918 0138 46D0     	 beq .L339
1869:.././hal/sam3u1c/udphs_device.c **** 					&& (0 == udd_nb_busy_bank(ep))) {
 5919              	 .loc 6 1869 0
 5920 013a 2A4A     	 ldr r2,.L342+4
 5921 013c FB7B     	 ldrb r3,[r7,#15]
 5922 013e 5B01     	 lsls r3,r3,#5
 5923 0140 1344     	 add r3,r3,r2
 5924 0142 03F58E73 	 add r3,r3,#284
 5925 0146 1B68     	 ldr r3,[r3]
 5926 0148 9B0C     	 lsrs r3,r3,#18
 5927 014a 03F00303 	 and r3,r3,#3
 5928 014e 002B     	 cmp r3,#0
 5929 0150 3AD1     	 bne .L339
1870:.././hal/sam3u1c/udphs_device.c **** 				// End of background transfer on IN endpoint
1871:.././hal/sam3u1c/udphs_device.c **** 				udd_disable_bank_interrupt(ep);
 5930              	 .loc 6 1871 0
 5931 0152 244A     	 ldr r2,.L342+4
 5932 0154 FB7B     	 ldrb r3,[r7,#15]
 5933 0156 5B01     	 lsls r3,r3,#5
 5934 0158 1344     	 add r3,r3,r2
 5935 015a 03F58473 	 add r3,r3,#264
 5936 015e 4FF48022 	 mov r2,#262144
 5937 0162 1A60     	 str r2,[r3]
1872:.././hal/sam3u1c/udphs_device.c **** 				udd_disable_endpoint_interrupt(ep);
 5938              	 .loc 6 1872 0
 5939 0164 1F4B     	 ldr r3,.L342+4
 5940 0166 1A69     	 ldr r2,[r3,#16]
 5941 0168 FB7B     	 ldrb r3,[r7,#15]
 5942 016a 4FF48071 	 mov r1,#256
 5943 016e 01FA03F3 	 lsl r3,r1,r3
 5944 0172 DB43     	 mvns r3,r3
 5945 0174 1B49     	 ldr r1,.L342+4
 5946 0176 1340     	 ands r3,r3,r2
 5947 0178 0B61     	 str r3,[r1,#16]
1873:.././hal/sam3u1c/udphs_device.c **** 
1874:.././hal/sam3u1c/udphs_device.c **** 				Assert(ptr_job->stall_requested);
1875:.././hal/sam3u1c/udphs_device.c **** 				// A stall has been requested during background transfer
1876:.././hal/sam3u1c/udphs_device.c **** 				ptr_job->stall_requested = false;
 5948              	 .loc 6 1876 0
 5949 017a BA68     	 ldr r2,[r7,#8]
 5950 017c 137D     	 ldrb r3,[r2,#20]
 5951 017e 6FF38203 	 bfc r3,#2,#1
 5952 0182 1375     	 strb r3,[r2,#20]
1877:.././hal/sam3u1c/udphs_device.c **** 				udd_disable_endpoint_bank_autoswitch(ep);
 5953              	 .loc 6 1877 0
 5954 0184 174A     	 ldr r2,.L342+4
 5955 0186 FB7B     	 ldrb r3,[r7,#15]
 5956 0188 5B01     	 lsls r3,r3,#5
 5957 018a 1344     	 add r3,r3,r2
 5958 018c 03F58473 	 add r3,r3,#264
 5959 0190 1A68     	 ldr r2,[r3]
 5960 0192 1449     	 ldr r1,.L342+4
 5961 0194 FB7B     	 ldrb r3,[r7,#15]
 5962 0196 22F00202 	 bic r2,r2,#2
 5963 019a 5B01     	 lsls r3,r3,#5
 5964 019c 0B44     	 add r3,r3,r1
 5965 019e 03F58473 	 add r3,r3,#264
 5966 01a2 1A60     	 str r2,[r3]
1878:.././hal/sam3u1c/udphs_device.c **** 				udd_enable_stall_handshake(ep);
 5967              	 .loc 6 1878 0
 5968 01a4 0F4A     	 ldr r2,.L342+4
 5969 01a6 FB7B     	 ldrb r3,[r7,#15]
 5970 01a8 5B01     	 lsls r3,r3,#5
 5971 01aa 1344     	 add r3,r3,r2
 5972 01ac 03F58A73 	 add r3,r3,#276
 5973 01b0 2022     	 movs r2,#32
 5974 01b2 1A60     	 str r2,[r3]
1879:.././hal/sam3u1c/udphs_device.c **** 				udd_reset_data_toggle(ep);
 5975              	 .loc 6 1879 0
 5976 01b4 0B4A     	 ldr r2,.L342+4
 5977 01b6 FB7B     	 ldrb r3,[r7,#15]
 5978 01b8 5B01     	 lsls r3,r3,#5
 5979 01ba 1344     	 add r3,r3,r2
 5980 01bc 03F58C73 	 add r3,r3,#280
 5981 01c0 4022     	 movs r2,#64
 5982 01c2 1A60     	 str r2,[r3]
1880:.././hal/sam3u1c/udphs_device.c **** 				//dbg_print("exHalt%x ", ep);
1881:.././hal/sam3u1c/udphs_device.c **** 				return true;
 5983              	 .loc 6 1881 0
 5984 01c4 0123     	 movs r3,#1
 5985 01c6 07E0     	 b .L337
 5986              	.L339:
1830:.././hal/sam3u1c/udphs_device.c **** 		// Get job corresponding at endpoint
 5987              	 .loc 6 1830 0 discriminator 2
 5988 01c8 FB7B     	 ldrb r3,[r7,#15]
 5989 01ca 0133     	 adds r3,r3,#1
 5990 01cc FB73     	 strb r3,[r7,#15]
 5991              	.L334:
1830:.././hal/sam3u1c/udphs_device.c **** 		// Get job corresponding at endpoint
 5992              	 .loc 6 1830 0 is_stmt 0 discriminator 1
 5993 01ce FB7B     	 ldrb r3,[r7,#15]
 5994 01d0 022B     	 cmp r3,#2
 5995 01d2 7FF61BAF 	 bls .L341
1882:.././hal/sam3u1c/udphs_device.c **** 			}
1883:.././hal/sam3u1c/udphs_device.c **** 		}
1884:.././hal/sam3u1c/udphs_device.c **** 	}
1885:.././hal/sam3u1c/udphs_device.c **** 	return false;
 5996              	 .loc 6 1885 0 is_stmt 1
 5997 01d6 0023     	 movs r3,#0
 5998              	.L337:
1886:.././hal/sam3u1c/udphs_device.c **** }
 5999              	 .loc 6 1886 0
 6000 01d8 1846     	 mov r0,r3
 6001 01da 1037     	 adds r7,r7,#16
 6002              	.LCFI238:
 6003              	 .cfi_def_cfa_offset 8
 6004 01dc BD46     	 mov sp,r7
 6005              	.LCFI239:
 6006              	 .cfi_def_cfa_register 13
 6007              	 
 6008 01de 80BD     	 pop {r7,pc}
 6009              	.L343:
 6010              	 .align 2
 6011              	.L342:
 6012 01e0 00000000 	 .word udd_ep_job
 6013 01e4 00400A40 	 .word 1074413568
 6014 01e8 00430A40 	 .word 1074414336
 6015 01ec 00000000 	 .word udd_ep_trans_done
 6016 01f0 00000000 	 .word udd_ep_finish_job
 6017              	 .cfi_endproc
 6018              	.LFE181:
 6020              	 .section .bss.b_shortpacket.8402,"aw",%nobits
 6023              	b_shortpacket.8402:
 6024 0000 00       	 .space 1
 6025              	 .text
 6026              	.Letext0:
 6027              	 .file 7 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 6028              	 .file 8 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 6029              	 .file 9 ".././hal/sam3u1c/inc/sam3u1c.h"
 6030              	 .file 10 ".././hal/sam3u1c/inc/system_sam3u.h"
 6031              	 .file 11 ".././hal/sam3u1c/inc/component/component_udphs.h"
 6032              	 .file 12 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\sys\\lock.h"
 6033              	 .file 13 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\sys\\_types.h"
 6034              	 .file 14 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\lib\\gcc\\arm-none-eabi\\7.3.1\\include\\stddef.h"
 6035              	 .file 15 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\sys\\reent.h"
 6036              	 .file 16 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\stdlib.h"
 6037              	 .file 17 ".././hal/sam3u1c/inc/compiler.h"
 6038              	 .file 18 "./conf_usb.h"
 6039              	 .file 19 ".././hal/sam3u1c/inc/usb_protocol.h"
 6040              	 .file 20 ".././hal/sam3u1c/inc/udi.h"
 6041              	 .file 21 ".././hal/sam3u1c/inc/udc_desc.h"
 6042              	 .file 22 ".././hal/sam3u1c/inc/udd.h"
 6043              	 .file 23 ".././hal/sam3u1c/inc/udi_vendor.h"
 6044              	 .file 24 ".././hal/sam3u1c/inc/udphs_device.h"
 6045              	 .file 25 ".././hal/sam3u1c/inc/sam/sleepmgr.h"
 6046              	 .file 26 ".././hal/sam3u1c/inc/pmc.h"
 6047              	 .file 27 ".././hal/sam3u1c/inc/sam3u/sysclk.h"
 6048              	 .file 28 ".././hal/sam3u1c/inc/sleep.h"
 6049              	 .file 29 ".././hal/sam3u1c/inc/main.h"
DEFINED SYMBOLS
                            *ABS*:00000000 udphs_device.c
    {standard input}:16     .text.NVIC_EnableIRQ:00000000 $t
    {standard input}:22     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
    {standard input}:68     .text.NVIC_EnableIRQ:0000002c $d
    {standard input}:73     .text.NVIC_SetPriority:00000000 $t
    {standard input}:79     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
    {standard input}:144    .text.NVIC_SetPriority:0000004c $d
    {standard input}:150    .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:153    .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:158    .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:159    .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:161    .text.cpu_irq_save:00000000 $t
    {standard input}:167    .text.cpu_irq_save:00000000 cpu_irq_save
    {standard input}:253    .text.cpu_irq_save:00000034 $d
    {standard input}:258    .text.cpu_irq_is_enabled_flags:00000000 $t
    {standard input}:264    .text.cpu_irq_is_enabled_flags:00000000 cpu_irq_is_enabled_flags
    {standard input}:307    .text.cpu_irq_restore:00000000 $t
    {standard input}:313    .text.cpu_irq_restore:00000000 cpu_irq_restore
    {standard input}:379    .text.cpu_irq_restore:00000028 $d
    {standard input}:385    .text.sleepmgr_lock_mode:00000000 $t
    {standard input}:391    .text.sleepmgr_lock_mode:00000000 sleepmgr_lock_mode
    {standard input}:442    .text.sleepmgr_lock_mode:0000002c $d
    {standard input}:449    .text.sleepmgr_unlock_mode:00000000 $t
    {standard input}:455    .text.sleepmgr_unlock_mode:00000000 sleepmgr_unlock_mode
    {standard input}:505    .text.sleepmgr_unlock_mode:0000002c $d
    {standard input}:514    .bss.udd_b_idle:00000000 udd_b_idle
    {standard input}:515    .bss.udd_b_idle:00000000 $d
    {standard input}:517    .text.udd_sleep_mode:00000000 $t
    {standard input}:523    .text.udd_sleep_mode:00000000 udd_sleep_mode
    {standard input}:594    .text.udd_sleep_mode:0000004c $d
                            *COM*:00000018 udd_g_ctrlreq
    {standard input}:604    .bss.udd_ep_control_state:00000000 udd_ep_control_state
    {standard input}:605    .bss.udd_ep_control_state:00000000 $d
    {standard input}:607    .bss.udd_ctrl_prev_payload_buf_cnt:00000000 $d
    {standard input}:610    .bss.udd_ctrl_prev_payload_buf_cnt:00000000 udd_ctrl_prev_payload_buf_cnt
    {standard input}:613    .bss.udd_ctrl_payload_buf_cnt:00000000 $d
    {standard input}:616    .bss.udd_ctrl_payload_buf_cnt:00000000 udd_ctrl_payload_buf_cnt
    {standard input}:619    .bss.udd_ep_job:00000000 $d
    {standard input}:622    .bss.udd_ep_job:00000000 udd_ep_job
    {standard input}:625    .text.UDPHS_Handler:00000000 $t
    {standard input}:632    .text.UDPHS_Handler:00000000 UDPHS_Handler
    {standard input}:921    .text.UDPHS_Handler:00000184 $d
    {standard input}:4963   .text.udd_ctrl_interrupt:00000000 udd_ctrl_interrupt
    {standard input}:5734   .text.udd_ep_interrupt:00000000 udd_ep_interrupt
    {standard input}:5206   .text.udd_ep_job_table_kill:00000000 udd_ep_job_table_kill
    {standard input}:3677   .text.udd_reset_ep_ctrl:00000000 udd_reset_ep_ctrl
    {standard input}:3768   .text.udd_ctrl_init:00000000 udd_ctrl_init
    {standard input}:941    .text.udd_include_vbus_monitoring:00000000 $t
    {standard input}:948    .text.udd_include_vbus_monitoring:00000000 udd_include_vbus_monitoring
    {standard input}:979    .text.udd_enable:00000000 $t
    {standard input}:986    .text.udd_enable:00000000 udd_enable
    {standard input}:1080   .text.udd_enable:0000006c $d
    {standard input}:5123   .text.udd_ep_job_table_reset:00000000 udd_ep_job_table_reset
    {standard input}:1186   .text.udd_attach:00000000 udd_attach
    {standard input}:1096   .text.udd_disable:00000000 $t
    {standard input}:1103   .text.udd_disable:00000000 udd_disable
    {standard input}:1168   .text.udd_disable:0000003c $d
    {standard input}:1179   .text.udd_attach:00000000 $t
    {standard input}:1302   .text.udd_attach:000000a0 $d
    {standard input}:1312   .text.udd_detach:00000000 $t
    {standard input}:1319   .text.udd_detach:00000000 udd_detach
    {standard input}:1365   .text.udd_detach:00000034 $d
    {standard input}:1373   .text.udd_is_high_speed:00000000 $t
    {standard input}:1380   .text.udd_is_high_speed:00000000 udd_is_high_speed
    {standard input}:1417   .text.udd_is_high_speed:00000020 $d
    {standard input}:1422   .text.udd_set_address:00000000 $t
    {standard input}:1429   .text.udd_set_address:00000000 udd_set_address
    {standard input}:1486   .text.udd_set_address:00000040 $d
    {standard input}:1491   .text.udd_getaddress:00000000 $t
    {standard input}:1498   .text.udd_getaddress:00000000 udd_getaddress
    {standard input}:1532   .text.udd_getaddress:00000018 $d
    {standard input}:1537   .text.udd_get_frame_number:00000000 $t
    {standard input}:1544   .text.udd_get_frame_number:00000000 udd_get_frame_number
    {standard input}:1579   .text.udd_get_frame_number:0000001c $d
    {standard input}:1584   .text.udd_get_micro_frame_number:00000000 $t
    {standard input}:1591   .text.udd_get_micro_frame_number:00000000 udd_get_micro_frame_number
    {standard input}:1625   .text.udd_get_micro_frame_number:00000018 $d
    {standard input}:1630   .text.udd_send_remotewakeup:00000000 $t
    {standard input}:1637   .text.udd_send_remotewakeup:00000000 udd_send_remotewakeup
    {standard input}:1681   .text.udd_send_remotewakeup:00000030 $d
    {standard input}:1689   .text.udd_set_setup_payload:00000000 $t
    {standard input}:1696   .text.udd_set_setup_payload:00000000 udd_set_setup_payload
    {standard input}:1741   .text.udd_set_setup_payload:00000024 $d
    {standard input}:1746   .text.udd_ep_alloc:00000000 $t
    {standard input}:1753   .text.udd_ep_alloc:00000000 udd_ep_alloc
    {standard input}:2230   .text.udd_ep_alloc:00000300 $d
    {standard input}:2234   .text.udd_ep_alloc:00000308 $t
    {standard input}:2337   .text.udd_ep_alloc:000003a4 $d
    {standard input}:2914   .text.udd_ep_run:00000000 udd_ep_run
    {standard input}:2343   .text.udd_ep_free:00000000 $t
    {standard input}:2350   .text.udd_ep_free:00000000 udd_ep_free
    {standard input}:2435   .text.udd_ep_free:00000074 $d
    {standard input}:5278   .text.udd_ep_abort_job:00000000 udd_ep_abort_job
    {standard input}:2442   .text.udd_ep_is_halted:00000000 $t
    {standard input}:2449   .text.udd_ep_is_halted:00000000 udd_ep_is_halted
    {standard input}:2528   .text.udd_ep_is_halted:00000060 $d
    {standard input}:2534   .text.udd_ep_set_halt:00000000 $t
    {standard input}:2541   .text.udd_ep_set_halt:00000000 udd_ep_set_halt
    {standard input}:2707   .text.udd_ep_set_halt:0000010c $d
    {standard input}:2713   .text.udd_ep_clear_halt:00000000 $t
    {standard input}:2720   .text.udd_ep_clear_halt:00000000 udd_ep_clear_halt
    {standard input}:2901   .text.udd_ep_clear_halt:00000128 $d
    {standard input}:2907   .text.udd_ep_run:00000000 $t
    {standard input}:3087   .text.udd_ep_run:000000f4 $d
    {standard input}:5437   .text.udd_ep_trans_done:00000000 udd_ep_trans_done
    {standard input}:3096   .text.udd_ep_abort:00000000 $t
    {standard input}:3103   .text.udd_ep_abort:00000000 udd_ep_abort
    {standard input}:3193   .text.udd_ep_abort:0000007c $d
    {standard input}:3200   .text.udd_ep_wait_stall_clear:00000000 $t
    {standard input}:3207   .text.udd_ep_wait_stall_clear:00000000 udd_ep_wait_stall_clear
    {standard input}:3324   .text.udd_ep_wait_stall_clear:000000a0 $d
    {standard input}:3330   .text.udd_test_mode_j:00000000 $t
    {standard input}:3337   .text.udd_test_mode_j:00000000 udd_test_mode_j
    {standard input}:3378   .text.udd_test_mode_j:00000030 $d
    {standard input}:3383   .text.udd_test_mode_k:00000000 $t
    {standard input}:3390   .text.udd_test_mode_k:00000000 udd_test_mode_k
    {standard input}:3431   .text.udd_test_mode_k:00000030 $d
    {standard input}:3436   .text.udd_test_mode_se0_nak:00000000 $t
    {standard input}:3443   .text.udd_test_mode_se0_nak:00000000 udd_test_mode_se0_nak
    {standard input}:3478   .text.udd_test_mode_se0_nak:00000020 $d
    {standard input}:3483   .rodata:00000000 $d
    {standard input}:3539   .text.udd_test_mode_packet:00000000 $t
    {standard input}:3546   .text.udd_test_mode_packet:00000000 udd_test_mode_packet
    {standard input}:3664   .text.udd_test_mode_packet:000000c0 $d
    {standard input}:3671   .text.udd_reset_ep_ctrl:00000000 $t
    {standard input}:3755   .text.udd_reset_ep_ctrl:00000074 $d
    {standard input}:3762   .text.udd_ctrl_init:00000000 $t
    {standard input}:3832   .text.udd_ctrl_init:00000048 $d
    {standard input}:3841   .text.udd_ctrl_setup_received:00000000 $t
    {standard input}:3847   .text.udd_ctrl_setup_received:00000000 udd_ctrl_setup_received
    {standard input}:4040   .text.udd_ctrl_setup_received:00000108 $d
    {standard input}:4921   .text.udd_ctrl_endofrequest:00000000 udd_ctrl_endofrequest
    {standard input}:4729   .text.udd_ctrl_stall_data:00000000 udd_ctrl_stall_data
    {standard input}:4064   .text.udd_ctrl_in_sent:00000000 udd_ctrl_in_sent
    {standard input}:4777   .text.udd_ctrl_send_zlp_in:00000000 udd_ctrl_send_zlp_in
    {standard input}:4058   .text.udd_ctrl_in_sent:00000000 $t
    {standard input}:4289   .text.udd_ctrl_in_sent:00000138 $d
    {standard input}:6023   .bss.b_shortpacket.8402:00000000 b_shortpacket.8402
    {standard input}:4855   .text.udd_ctrl_send_zlp_out:00000000 udd_ctrl_send_zlp_out
    {standard input}:4305   .text.udd_ctrl_out_received:00000000 $t
    {standard input}:4311   .text.udd_ctrl_out_received:00000000 udd_ctrl_out_received
    {standard input}:4585   .text.udd_ctrl_out_received:0000018c $d
    {standard input}:4601   .text.udd_ctrl_underflow:00000000 $t
    {standard input}:4607   .text.udd_ctrl_underflow:00000000 udd_ctrl_underflow
    {standard input}:4657   .text.udd_ctrl_underflow:00000038 $d
    {standard input}:4664   .text.udd_ctrl_overflow:00000000 $t
    {standard input}:4670   .text.udd_ctrl_overflow:00000000 udd_ctrl_overflow
    {standard input}:4717   .text.udd_ctrl_overflow:0000002c $d
    {standard input}:4723   .text.udd_ctrl_stall_data:00000000 $t
    {standard input}:4765   .text.udd_ctrl_stall_data:0000001c $d
    {standard input}:4771   .text.udd_ctrl_send_zlp_in:00000000 $t
    {standard input}:4841   .text.udd_ctrl_send_zlp_in:00000054 $d
    {standard input}:4849   .text.udd_ctrl_send_zlp_out:00000000 $t
    {standard input}:4907   .text.udd_ctrl_send_zlp_out:00000034 $d
    {standard input}:4915   .text.udd_ctrl_endofrequest:00000000 $t
    {standard input}:4952   .text.udd_ctrl_endofrequest:00000018 $d
    {standard input}:4957   .text.udd_ctrl_interrupt:00000000 $t
    {standard input}:5107   .text.udd_ctrl_interrupt:000000cc $d
    {standard input}:5117   .text.udd_ep_job_table_reset:00000000 $t
    {standard input}:5195   .text.udd_ep_job_table_reset:00000058 $d
    {standard input}:5200   .text.udd_ep_job_table_kill:00000000 $t
    {standard input}:5266   .text.udd_ep_job_table_kill:0000003c $d
    {standard input}:5341   .text.udd_ep_finish_job:00000000 udd_ep_finish_job
    {standard input}:5272   .text.udd_ep_abort_job:00000000 $t
    {standard input}:5329   .text.udd_ep_abort_job:00000034 $d
    {standard input}:5335   .text.udd_ep_finish_job:00000000 $t
    {standard input}:5426   .text.udd_ep_finish_job:0000006c $d
    {standard input}:5431   .text.udd_ep_trans_done:00000000 $t
    {standard input}:5718   .text.udd_ep_trans_done:000001d0 $d
    {standard input}:5728   .text.udd_ep_interrupt:00000000 $t
    {standard input}:6012   .text.udd_ep_interrupt:000001e0 $d
    {standard input}:6024   .bss.b_shortpacket.8402:00000000 $d
                           .group:00000000 wm4.0.7d8dd4860124405c65f5049e8a79afcb
                           .group:00000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.newlib.h.8.f6e543eac3f2f65163ba2ffe3b04987b
                           .group:00000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:00000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.cdefs.h.47.14fad0b327eb9dcf106599b738d85132
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:00000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:00000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.conf_usb.h.56.3123a395939a56b38cb84f3590ea54ec
                           .group:00000000 wm4.udi_vendor_conf.h.56.4348c8e521d040f44df868219dae6785
                           .group:00000000 wm4.usb_atmel.h.45.c31b525dbe01f8d9e2022a03356ec174
                           .group:00000000 wm4.usb_protocol.h.63.850c58f3469fce50a9ac9a6854f7594b
                           .group:00000000 wm4.usb_protocol_vendor.h.45.83dfe073428ff799abc3ed1c7b04c77d
                           .group:00000000 wm4.udc_desc.h.77.5fec235bd7553e7256e345e020840072
                           .group:00000000 wm4.udd.h.103.3ccc59b50c14ec70568e6136eeb22d56
                           .group:00000000 wm4.udi_vendor.h.125.7b9085237d4d4a9757f4c148fba1918d
                           .group:00000000 wm4.conf_clock.h.45.5dc276d21b4d793a62f1a9757cc18d5c
                           .group:00000000 wm4.board.h.69.3670053ec9e880dbc2016be2b8dca792
                           .group:00000000 wm4.cw521.h.62.49e8a34af6a9b815e03b7858792ba391
                           .group:00000000 wm4.pmc.h.45.bbe1bf97a811e3b283420b2eeadf0b35
                           .group:00000000 wm4.osc.h.94.b766cddafe899eca01d775f7b2906680
                           .group:00000000 wm4.pll.h.45.a605c31ca466ae25752a678e8572be48
                           .group:00000000 wm4.sysclk.h.156.541a142b0016a365728ea1f7c0e3db84
                           .group:00000000 wm4.conf_board.h.45.be8075430a99c21139d610dc1d1c7799
                           .group:00000000 wm4.ioport_pio.h.44.373b34364b4ef25fac62017cd942a761
                           .group:00000000 wm4.pio.h.45.95f22b0ea02ddc698ec54fc56bf6f38c
                           .group:00000000 wm4.udphs_device.h.91.605096afd8c16fcd75a5a1c11b74776b
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4.sleep.h.45.ef10e1aee6f903405be19980a8333b7f
                           .group:00000000 wm4.conf_sleepmgr.h.44.d825b913294720022fefe7201514fca3

UNDEFINED SYMBOLS
g_interrupt_enabled
sleepmgr_locks
pmc_enable_periph_clk
pmc_is_wakeup_clocks_restored
udc_sof_notify
main_sof_action
udc_reset
pmc_disable_periph_clk
main_suspend_action
main_resume_action
sysclk_enable_usb
pmc_set_fast_startup_input
sysclk_disable_usb
udc_process_setup
