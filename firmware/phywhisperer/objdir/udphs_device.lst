   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "udphs_device.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.NVIC_EnableIRQ,"ax",%progbits
  16              	 .align 1
  17              	 .arch armv7-m
  18              	 .syntax unified
  19              	 .thumb
  20              	 .thumb_func
  21              	 .fpu softvfp
  23              	NVIC_EnableIRQ:
  24              	.LFB41:
  25              	 .file 1 ".././hal/sam3u1c/inc/core_cm3.h"
   1:.././hal/sam3u1c/inc/core_cm3.h **** /**************************************************************************//**
   2:.././hal/sam3u1c/inc/core_cm3.h ****  * @file     core_cm3.h
   3:.././hal/sam3u1c/inc/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:.././hal/sam3u1c/inc/core_cm3.h ****  * @version  V3.00
   5:.././hal/sam3u1c/inc/core_cm3.h ****  * @date     03. February 2012
   6:.././hal/sam3u1c/inc/core_cm3.h ****  *
   7:.././hal/sam3u1c/inc/core_cm3.h ****  * @note
   8:.././hal/sam3u1c/inc/core_cm3.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:.././hal/sam3u1c/inc/core_cm3.h ****  *
  10:.././hal/sam3u1c/inc/core_cm3.h ****  * @par
  11:.././hal/sam3u1c/inc/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:.././hal/sam3u1c/inc/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:.././hal/sam3u1c/inc/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:.././hal/sam3u1c/inc/core_cm3.h ****  *
  15:.././hal/sam3u1c/inc/core_cm3.h ****  * @par
  16:.././hal/sam3u1c/inc/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:.././hal/sam3u1c/inc/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:.././hal/sam3u1c/inc/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:.././hal/sam3u1c/inc/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:.././hal/sam3u1c/inc/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:.././hal/sam3u1c/inc/core_cm3.h ****  *
  22:.././hal/sam3u1c/inc/core_cm3.h ****  ******************************************************************************/
  23:.././hal/sam3u1c/inc/core_cm3.h **** #if defined ( __ICCARM__ )
  24:.././hal/sam3u1c/inc/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:.././hal/sam3u1c/inc/core_cm3.h **** #endif
  26:.././hal/sam3u1c/inc/core_cm3.h **** 
  27:.././hal/sam3u1c/inc/core_cm3.h **** #ifdef __cplusplus
  28:.././hal/sam3u1c/inc/core_cm3.h ****  extern "C" {
  29:.././hal/sam3u1c/inc/core_cm3.h **** #endif
  30:.././hal/sam3u1c/inc/core_cm3.h **** 
  31:.././hal/sam3u1c/inc/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:.././hal/sam3u1c/inc/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:.././hal/sam3u1c/inc/core_cm3.h **** 
  34:.././hal/sam3u1c/inc/core_cm3.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  35:.././hal/sam3u1c/inc/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  36:.././hal/sam3u1c/inc/core_cm3.h ****   
  37:.././hal/sam3u1c/inc/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  38:.././hal/sam3u1c/inc/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'. 
  39:.././hal/sam3u1c/inc/core_cm3.h **** 
  40:.././hal/sam3u1c/inc/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  41:.././hal/sam3u1c/inc/core_cm3.h ****      Unions are used for effective representation of core registers.
  42:.././hal/sam3u1c/inc/core_cm3.h ****    
  43:.././hal/sam3u1c/inc/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  44:.././hal/sam3u1c/inc/core_cm3.h ****      Function-like macros are used to allow more efficient code. 
  45:.././hal/sam3u1c/inc/core_cm3.h ****  */
  46:.././hal/sam3u1c/inc/core_cm3.h **** 
  47:.././hal/sam3u1c/inc/core_cm3.h **** 
  48:.././hal/sam3u1c/inc/core_cm3.h **** /*******************************************************************************
  49:.././hal/sam3u1c/inc/core_cm3.h ****  *                 CMSIS definitions
  50:.././hal/sam3u1c/inc/core_cm3.h ****  ******************************************************************************/
  51:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup Cortex_M3
  52:.././hal/sam3u1c/inc/core_cm3.h ****   @{
  53:.././hal/sam3u1c/inc/core_cm3.h ****  */
  54:.././hal/sam3u1c/inc/core_cm3.h **** 
  55:.././hal/sam3u1c/inc/core_cm3.h **** /*  CMSIS CM3 definitions */
  56:.././hal/sam3u1c/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x03)                                   /*!< [31:16] CMSIS HAL m
  57:.././hal/sam3u1c/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x00)                                   /*!< [15:0]  CMSIS HAL s
  58:.././hal/sam3u1c/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | \
  59:.././hal/sam3u1c/inc/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  60:.././hal/sam3u1c/inc/core_cm3.h **** 
  61:.././hal/sam3u1c/inc/core_cm3.h **** #define __CORTEX_M                (0x03)                                   /*!< Cortex-M Core      
  62:.././hal/sam3u1c/inc/core_cm3.h **** 
  63:.././hal/sam3u1c/inc/core_cm3.h **** 
  64:.././hal/sam3u1c/inc/core_cm3.h **** #if   defined ( __CC_ARM )
  65:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  66:.././hal/sam3u1c/inc/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  67:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  68:.././hal/sam3u1c/inc/core_cm3.h **** 
  69:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __ICCARM__ )
  70:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  71:.././hal/sam3u1c/inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  72:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  73:.././hal/sam3u1c/inc/core_cm3.h **** 
  74:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __TMS470__ )
  75:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
  76:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  77:.././hal/sam3u1c/inc/core_cm3.h **** 
  78:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __GNUC__ )
  79:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  80:.././hal/sam3u1c/inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  81:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  82:.././hal/sam3u1c/inc/core_cm3.h **** 
  83:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __TASKING__ )
  84:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  85:.././hal/sam3u1c/inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  86:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  87:.././hal/sam3u1c/inc/core_cm3.h **** 
  88:.././hal/sam3u1c/inc/core_cm3.h **** #endif
  89:.././hal/sam3u1c/inc/core_cm3.h **** 
  90:.././hal/sam3u1c/inc/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not. This core does not support an FPU at all
  91:.././hal/sam3u1c/inc/core_cm3.h **** */
  92:.././hal/sam3u1c/inc/core_cm3.h **** #define __FPU_USED       0
  93:.././hal/sam3u1c/inc/core_cm3.h **** 
  94:.././hal/sam3u1c/inc/core_cm3.h **** #if defined ( __CC_ARM )
  95:.././hal/sam3u1c/inc/core_cm3.h ****   #if defined __TARGET_FPU_VFP
  96:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  97:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
  98:.././hal/sam3u1c/inc/core_cm3.h **** 
  99:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __ICCARM__ )
 100:.././hal/sam3u1c/inc/core_cm3.h ****   #if defined __ARMVFP__
 101:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 102:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 103:.././hal/sam3u1c/inc/core_cm3.h **** 
 104:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __TMS470__ )
 105:.././hal/sam3u1c/inc/core_cm3.h ****   #if defined __TI__VFP_SUPPORT____
 106:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 107:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 108:.././hal/sam3u1c/inc/core_cm3.h **** 
 109:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __GNUC__ )
 110:.././hal/sam3u1c/inc/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 111:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 112:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 113:.././hal/sam3u1c/inc/core_cm3.h **** 
 114:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __TASKING__ )
 115:.././hal/sam3u1c/inc/core_cm3.h ****     /* add preprocessor checks */
 116:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 117:.././hal/sam3u1c/inc/core_cm3.h **** 
 118:.././hal/sam3u1c/inc/core_cm3.h **** #include <stdint.h>                      /* standard types definitions                      */
 119:.././hal/sam3u1c/inc/core_cm3.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 120:.././hal/sam3u1c/inc/core_cm3.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 121:.././hal/sam3u1c/inc/core_cm3.h **** 
 122:.././hal/sam3u1c/inc/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 123:.././hal/sam3u1c/inc/core_cm3.h **** 
 124:.././hal/sam3u1c/inc/core_cm3.h **** #ifndef __CMSIS_GENERIC
 125:.././hal/sam3u1c/inc/core_cm3.h **** 
 126:.././hal/sam3u1c/inc/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 127:.././hal/sam3u1c/inc/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 128:.././hal/sam3u1c/inc/core_cm3.h **** 
 129:.././hal/sam3u1c/inc/core_cm3.h **** /* check device defines and use defaults */
 130:.././hal/sam3u1c/inc/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 131:.././hal/sam3u1c/inc/core_cm3.h ****   #ifndef __CM3_REV
 132:.././hal/sam3u1c/inc/core_cm3.h ****     #define __CM3_REV               0x0200
 133:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 134:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 135:.././hal/sam3u1c/inc/core_cm3.h **** 
 136:.././hal/sam3u1c/inc/core_cm3.h ****   #ifndef __MPU_PRESENT
 137:.././hal/sam3u1c/inc/core_cm3.h ****     #define __MPU_PRESENT             0
 138:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 139:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 140:.././hal/sam3u1c/inc/core_cm3.h **** 
 141:.././hal/sam3u1c/inc/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 142:.././hal/sam3u1c/inc/core_cm3.h ****     #define __NVIC_PRIO_BITS          4
 143:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 144:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 145:.././hal/sam3u1c/inc/core_cm3.h **** 
 146:.././hal/sam3u1c/inc/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 147:.././hal/sam3u1c/inc/core_cm3.h ****     #define __Vendor_SysTickConfig    0
 148:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 149:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 150:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 151:.././hal/sam3u1c/inc/core_cm3.h **** 
 152:.././hal/sam3u1c/inc/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 153:.././hal/sam3u1c/inc/core_cm3.h **** /**
 154:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 155:.././hal/sam3u1c/inc/core_cm3.h ****  
 156:.././hal/sam3u1c/inc/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 157:.././hal/sam3u1c/inc/core_cm3.h ****     \li to specify the access to peripheral variables.
 158:.././hal/sam3u1c/inc/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 159:.././hal/sam3u1c/inc/core_cm3.h **** */
 160:.././hal/sam3u1c/inc/core_cm3.h **** #ifdef __cplusplus
 161:.././hal/sam3u1c/inc/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 162:.././hal/sam3u1c/inc/core_cm3.h **** #else
 163:.././hal/sam3u1c/inc/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 164:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 165:.././hal/sam3u1c/inc/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 166:.././hal/sam3u1c/inc/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 167:.././hal/sam3u1c/inc/core_cm3.h **** 
 168:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group Cortex_M3 */
 169:.././hal/sam3u1c/inc/core_cm3.h **** 
 170:.././hal/sam3u1c/inc/core_cm3.h **** 
 171:.././hal/sam3u1c/inc/core_cm3.h **** 
 172:.././hal/sam3u1c/inc/core_cm3.h **** /*******************************************************************************
 173:.././hal/sam3u1c/inc/core_cm3.h ****  *                 Register Abstraction
 174:.././hal/sam3u1c/inc/core_cm3.h ****   Core Register contain:
 175:.././hal/sam3u1c/inc/core_cm3.h ****   - Core Register
 176:.././hal/sam3u1c/inc/core_cm3.h ****   - Core NVIC Register
 177:.././hal/sam3u1c/inc/core_cm3.h ****   - Core SCB Register
 178:.././hal/sam3u1c/inc/core_cm3.h ****   - Core SysTick Register
 179:.././hal/sam3u1c/inc/core_cm3.h ****   - Core Debug Register
 180:.././hal/sam3u1c/inc/core_cm3.h ****   - Core MPU Register
 181:.././hal/sam3u1c/inc/core_cm3.h ****  ******************************************************************************/
 182:.././hal/sam3u1c/inc/core_cm3.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 183:.././hal/sam3u1c/inc/core_cm3.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 184:.././hal/sam3u1c/inc/core_cm3.h **** */
 185:.././hal/sam3u1c/inc/core_cm3.h **** 
 186:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup    CMSIS_core_register
 187:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
 188:.././hal/sam3u1c/inc/core_cm3.h ****     \brief  Core Register type definitions.
 189:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 190:.././hal/sam3u1c/inc/core_cm3.h ****  */
 191:.././hal/sam3u1c/inc/core_cm3.h **** 
 192:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 193:.././hal/sam3u1c/inc/core_cm3.h ****  */
 194:.././hal/sam3u1c/inc/core_cm3.h **** typedef union
 195:.././hal/sam3u1c/inc/core_cm3.h **** {
 196:.././hal/sam3u1c/inc/core_cm3.h ****   struct
 197:.././hal/sam3u1c/inc/core_cm3.h ****   {
 198:.././hal/sam3u1c/inc/core_cm3.h **** #if (__CORTEX_M != 0x04)
 199:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 200:.././hal/sam3u1c/inc/core_cm3.h **** #else
 201:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 202:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 203:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 204:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 205:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 206:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 207:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 208:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 209:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 210:.././hal/sam3u1c/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 211:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 212:.././hal/sam3u1c/inc/core_cm3.h **** } APSR_Type;
 213:.././hal/sam3u1c/inc/core_cm3.h **** 
 214:.././hal/sam3u1c/inc/core_cm3.h **** 
 215:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 216:.././hal/sam3u1c/inc/core_cm3.h ****  */
 217:.././hal/sam3u1c/inc/core_cm3.h **** typedef union
 218:.././hal/sam3u1c/inc/core_cm3.h **** {
 219:.././hal/sam3u1c/inc/core_cm3.h ****   struct
 220:.././hal/sam3u1c/inc/core_cm3.h ****   {
 221:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 222:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 223:.././hal/sam3u1c/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 224:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 225:.././hal/sam3u1c/inc/core_cm3.h **** } IPSR_Type;
 226:.././hal/sam3u1c/inc/core_cm3.h **** 
 227:.././hal/sam3u1c/inc/core_cm3.h **** 
 228:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 229:.././hal/sam3u1c/inc/core_cm3.h ****  */
 230:.././hal/sam3u1c/inc/core_cm3.h **** typedef union
 231:.././hal/sam3u1c/inc/core_cm3.h **** {
 232:.././hal/sam3u1c/inc/core_cm3.h ****   struct
 233:.././hal/sam3u1c/inc/core_cm3.h ****   {
 234:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 235:.././hal/sam3u1c/inc/core_cm3.h **** #if (__CORTEX_M != 0x04)
 236:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 237:.././hal/sam3u1c/inc/core_cm3.h **** #else
 238:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 239:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 240:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 241:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 242:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 243:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 244:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 245:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 246:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 247:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 248:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 249:.././hal/sam3u1c/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 250:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 251:.././hal/sam3u1c/inc/core_cm3.h **** } xPSR_Type;
 252:.././hal/sam3u1c/inc/core_cm3.h **** 
 253:.././hal/sam3u1c/inc/core_cm3.h **** 
 254:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 255:.././hal/sam3u1c/inc/core_cm3.h ****  */
 256:.././hal/sam3u1c/inc/core_cm3.h **** typedef union
 257:.././hal/sam3u1c/inc/core_cm3.h **** {
 258:.././hal/sam3u1c/inc/core_cm3.h ****   struct
 259:.././hal/sam3u1c/inc/core_cm3.h ****   {
 260:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 261:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 262:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 263:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 264:.././hal/sam3u1c/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 265:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 266:.././hal/sam3u1c/inc/core_cm3.h **** } CONTROL_Type;
 267:.././hal/sam3u1c/inc/core_cm3.h **** 
 268:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_CORE */
 269:.././hal/sam3u1c/inc/core_cm3.h **** 
 270:.././hal/sam3u1c/inc/core_cm3.h **** 
 271:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup    CMSIS_core_register
 272:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 273:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the NVIC Registers
 274:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 275:.././hal/sam3u1c/inc/core_cm3.h ****  */
 276:.././hal/sam3u1c/inc/core_cm3.h **** 
 277:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 278:.././hal/sam3u1c/inc/core_cm3.h ****  */
 279:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 280:.././hal/sam3u1c/inc/core_cm3.h **** {
 281:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 282:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[24];
 283:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 284:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RSERVED1[24];
 285:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 286:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED2[24];
 287:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 288:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED3[24];
 289:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 290:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED4[56];
 291:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 292:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED5[644];
 293:.././hal/sam3u1c/inc/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 294:.././hal/sam3u1c/inc/core_cm3.h **** }  NVIC_Type;
 295:.././hal/sam3u1c/inc/core_cm3.h **** 
 296:.././hal/sam3u1c/inc/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 297:.././hal/sam3u1c/inc/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 298:.././hal/sam3u1c/inc/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 299:.././hal/sam3u1c/inc/core_cm3.h **** 
 300:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 301:.././hal/sam3u1c/inc/core_cm3.h **** 
 302:.././hal/sam3u1c/inc/core_cm3.h **** 
 303:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 304:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 305:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the System Control Block Registers
 306:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 307:.././hal/sam3u1c/inc/core_cm3.h ****  */
 308:.././hal/sam3u1c/inc/core_cm3.h **** 
 309:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 310:.././hal/sam3u1c/inc/core_cm3.h ****  */
 311:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 312:.././hal/sam3u1c/inc/core_cm3.h **** {
 313:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 314:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 315:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 316:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 317:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 318:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 319:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 320:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 321:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 322:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 323:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 324:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 325:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 326:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 327:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 328:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 329:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 330:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 331:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 332:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[5];
 333:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 334:.././hal/sam3u1c/inc/core_cm3.h **** } SCB_Type;
 335:.././hal/sam3u1c/inc/core_cm3.h **** 
 336:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB CPUID Register Definitions */
 337:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 338:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 339:.././hal/sam3u1c/inc/core_cm3.h **** 
 340:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 341:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 342:.././hal/sam3u1c/inc/core_cm3.h **** 
 343:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 344:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 345:.././hal/sam3u1c/inc/core_cm3.h **** 
 346:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 347:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 348:.././hal/sam3u1c/inc/core_cm3.h **** 
 349:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 350:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 351:.././hal/sam3u1c/inc/core_cm3.h **** 
 352:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 353:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 354:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 355:.././hal/sam3u1c/inc/core_cm3.h **** 
 356:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 357:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 358:.././hal/sam3u1c/inc/core_cm3.h **** 
 359:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 360:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 361:.././hal/sam3u1c/inc/core_cm3.h **** 
 362:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 363:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 364:.././hal/sam3u1c/inc/core_cm3.h **** 
 365:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 366:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 367:.././hal/sam3u1c/inc/core_cm3.h **** 
 368:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 369:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 370:.././hal/sam3u1c/inc/core_cm3.h **** 
 371:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 372:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 373:.././hal/sam3u1c/inc/core_cm3.h **** 
 374:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 375:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 376:.././hal/sam3u1c/inc/core_cm3.h **** 
 377:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 378:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 379:.././hal/sam3u1c/inc/core_cm3.h **** 
 380:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 381:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 382:.././hal/sam3u1c/inc/core_cm3.h **** 
 383:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 384:.././hal/sam3u1c/inc/core_cm3.h **** #if (__CM3_REV < 0x0201)                   /* core r2p1 */
 385:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 386:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 387:.././hal/sam3u1c/inc/core_cm3.h **** 
 388:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 389:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 390:.././hal/sam3u1c/inc/core_cm3.h **** #else
 391:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 392:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 393:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 394:.././hal/sam3u1c/inc/core_cm3.h **** 
 395:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 396:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 397:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 398:.././hal/sam3u1c/inc/core_cm3.h **** 
 399:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 400:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 401:.././hal/sam3u1c/inc/core_cm3.h **** 
 402:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 403:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 404:.././hal/sam3u1c/inc/core_cm3.h **** 
 405:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 406:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 407:.././hal/sam3u1c/inc/core_cm3.h **** 
 408:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 409:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:.././hal/sam3u1c/inc/core_cm3.h **** 
 411:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 412:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:.././hal/sam3u1c/inc/core_cm3.h **** 
 414:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 415:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 416:.././hal/sam3u1c/inc/core_cm3.h **** 
 417:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB System Control Register Definitions */
 418:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 419:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 420:.././hal/sam3u1c/inc/core_cm3.h **** 
 421:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 422:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 423:.././hal/sam3u1c/inc/core_cm3.h **** 
 424:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 425:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 426:.././hal/sam3u1c/inc/core_cm3.h **** 
 427:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 428:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 429:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 430:.././hal/sam3u1c/inc/core_cm3.h **** 
 431:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 432:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 433:.././hal/sam3u1c/inc/core_cm3.h **** 
 434:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 435:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 436:.././hal/sam3u1c/inc/core_cm3.h **** 
 437:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 438:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 439:.././hal/sam3u1c/inc/core_cm3.h **** 
 440:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 441:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 442:.././hal/sam3u1c/inc/core_cm3.h **** 
 443:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 444:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 445:.././hal/sam3u1c/inc/core_cm3.h **** 
 446:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 447:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 448:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 449:.././hal/sam3u1c/inc/core_cm3.h **** 
 450:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 451:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 452:.././hal/sam3u1c/inc/core_cm3.h **** 
 453:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 454:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 455:.././hal/sam3u1c/inc/core_cm3.h **** 
 456:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 457:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 458:.././hal/sam3u1c/inc/core_cm3.h **** 
 459:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 460:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 461:.././hal/sam3u1c/inc/core_cm3.h **** 
 462:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 463:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 464:.././hal/sam3u1c/inc/core_cm3.h **** 
 465:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 466:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 467:.././hal/sam3u1c/inc/core_cm3.h **** 
 468:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 469:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 470:.././hal/sam3u1c/inc/core_cm3.h **** 
 471:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 472:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 473:.././hal/sam3u1c/inc/core_cm3.h **** 
 474:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 475:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 476:.././hal/sam3u1c/inc/core_cm3.h **** 
 477:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 478:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 479:.././hal/sam3u1c/inc/core_cm3.h **** 
 480:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 481:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 482:.././hal/sam3u1c/inc/core_cm3.h **** 
 483:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 484:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 485:.././hal/sam3u1c/inc/core_cm3.h **** 
 486:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 487:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 488:.././hal/sam3u1c/inc/core_cm3.h **** 
 489:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 490:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 491:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 492:.././hal/sam3u1c/inc/core_cm3.h **** 
 493:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 494:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 495:.././hal/sam3u1c/inc/core_cm3.h **** 
 496:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 497:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 498:.././hal/sam3u1c/inc/core_cm3.h **** 
 499:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 500:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 501:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 502:.././hal/sam3u1c/inc/core_cm3.h **** 
 503:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 504:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 505:.././hal/sam3u1c/inc/core_cm3.h **** 
 506:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 507:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 508:.././hal/sam3u1c/inc/core_cm3.h **** 
 509:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 510:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 511:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 512:.././hal/sam3u1c/inc/core_cm3.h **** 
 513:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 514:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 515:.././hal/sam3u1c/inc/core_cm3.h **** 
 516:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 517:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 518:.././hal/sam3u1c/inc/core_cm3.h **** 
 519:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 520:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 521:.././hal/sam3u1c/inc/core_cm3.h **** 
 522:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 523:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 524:.././hal/sam3u1c/inc/core_cm3.h **** 
 525:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_SCB */
 526:.././hal/sam3u1c/inc/core_cm3.h **** 
 527:.././hal/sam3u1c/inc/core_cm3.h **** 
 528:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 529:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 530:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the System Control and ID Register not in the SCB
 531:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 532:.././hal/sam3u1c/inc/core_cm3.h ****  */
 533:.././hal/sam3u1c/inc/core_cm3.h **** 
 534:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 535:.././hal/sam3u1c/inc/core_cm3.h ****  */
 536:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 537:.././hal/sam3u1c/inc/core_cm3.h **** {
 538:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[1];
 539:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 540:.././hal/sam3u1c/inc/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 541:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 542:.././hal/sam3u1c/inc/core_cm3.h **** #else
 543:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED1[1];
 544:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 545:.././hal/sam3u1c/inc/core_cm3.h **** } SCnSCB_Type;
 546:.././hal/sam3u1c/inc/core_cm3.h **** 
 547:.././hal/sam3u1c/inc/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 548:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 549:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 550:.././hal/sam3u1c/inc/core_cm3.h **** 
 551:.././hal/sam3u1c/inc/core_cm3.h **** /* Auxiliary Control Register Definitions */
 552:.././hal/sam3u1c/inc/core_cm3.h **** 
 553:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 554:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 555:.././hal/sam3u1c/inc/core_cm3.h **** 
 556:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 557:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 558:.././hal/sam3u1c/inc/core_cm3.h **** 
 559:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 560:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 561:.././hal/sam3u1c/inc/core_cm3.h **** 
 562:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 563:.././hal/sam3u1c/inc/core_cm3.h **** 
 564:.././hal/sam3u1c/inc/core_cm3.h **** 
 565:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 566:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 567:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the System Timer Registers.
 568:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 569:.././hal/sam3u1c/inc/core_cm3.h ****  */
 570:.././hal/sam3u1c/inc/core_cm3.h **** 
 571:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 572:.././hal/sam3u1c/inc/core_cm3.h ****  */
 573:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 574:.././hal/sam3u1c/inc/core_cm3.h **** {
 575:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 576:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 577:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 578:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 579:.././hal/sam3u1c/inc/core_cm3.h **** } SysTick_Type;
 580:.././hal/sam3u1c/inc/core_cm3.h **** 
 581:.././hal/sam3u1c/inc/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 582:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 583:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 584:.././hal/sam3u1c/inc/core_cm3.h **** 
 585:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 586:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 587:.././hal/sam3u1c/inc/core_cm3.h **** 
 588:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 589:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 590:.././hal/sam3u1c/inc/core_cm3.h **** 
 591:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 592:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 593:.././hal/sam3u1c/inc/core_cm3.h **** 
 594:.././hal/sam3u1c/inc/core_cm3.h **** /* SysTick Reload Register Definitions */
 595:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 596:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 597:.././hal/sam3u1c/inc/core_cm3.h **** 
 598:.././hal/sam3u1c/inc/core_cm3.h **** /* SysTick Current Register Definitions */
 599:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 600:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 601:.././hal/sam3u1c/inc/core_cm3.h **** 
 602:.././hal/sam3u1c/inc/core_cm3.h **** /* SysTick Calibration Register Definitions */
 603:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 604:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 605:.././hal/sam3u1c/inc/core_cm3.h **** 
 606:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 607:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 608:.././hal/sam3u1c/inc/core_cm3.h **** 
 609:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 610:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 611:.././hal/sam3u1c/inc/core_cm3.h **** 
 612:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 613:.././hal/sam3u1c/inc/core_cm3.h **** 
 614:.././hal/sam3u1c/inc/core_cm3.h **** 
 615:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 616:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 617:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
 618:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 619:.././hal/sam3u1c/inc/core_cm3.h ****  */
 620:.././hal/sam3u1c/inc/core_cm3.h **** 
 621:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 622:.././hal/sam3u1c/inc/core_cm3.h ****  */
 623:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 624:.././hal/sam3u1c/inc/core_cm3.h **** {
 625:.././hal/sam3u1c/inc/core_cm3.h ****   __O  union
 626:.././hal/sam3u1c/inc/core_cm3.h ****   {
 627:.././hal/sam3u1c/inc/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 628:.././hal/sam3u1c/inc/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 629:.././hal/sam3u1c/inc/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 630:.././hal/sam3u1c/inc/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 631:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[864];
 632:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 633:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED1[15];
 634:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 635:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED2[15];
 636:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 637:.././hal/sam3u1c/inc/core_cm3.h **** } ITM_Type;
 638:.././hal/sam3u1c/inc/core_cm3.h **** 
 639:.././hal/sam3u1c/inc/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 640:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                          /*!< ITM TPR
 641:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)             /*!< ITM TPR
 642:.././hal/sam3u1c/inc/core_cm3.h **** 
 643:.././hal/sam3u1c/inc/core_cm3.h **** /* ITM Trace Control Register Definitions */
 644:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                          /*!< ITM TCR
 645:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                   /*!< ITM TCR
 646:.././hal/sam3u1c/inc/core_cm3.h **** 
 647:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16                                          /*!< ITM TCR
 648:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)          /*!< ITM TCR
 649:.././hal/sam3u1c/inc/core_cm3.h **** 
 650:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10                                          /*!< ITM TCR
 651:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                /*!< ITM TCR
 652:.././hal/sam3u1c/inc/core_cm3.h **** 
 653:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                          /*!< ITM TCR
 654:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)             /*!< ITM TCR
 655:.././hal/sam3u1c/inc/core_cm3.h **** 
 656:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                          /*!< ITM TCR
 657:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                 /*!< ITM TCR
 658:.././hal/sam3u1c/inc/core_cm3.h **** 
 659:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TXENA_Pos                   3                                          /*!< ITM TCR
 660:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TXENA_Msk                  (1UL << ITM_TCR_TXENA_Pos)                  /*!< ITM TCR
 661:.././hal/sam3u1c/inc/core_cm3.h **** 
 662:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                          /*!< ITM TCR
 663:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                /*!< ITM TCR
 664:.././hal/sam3u1c/inc/core_cm3.h **** 
 665:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                          /*!< ITM TCR
 666:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                  /*!< ITM TCR
 667:.././hal/sam3u1c/inc/core_cm3.h **** 
 668:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                          /*!< ITM TCR
 669:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                 /*!< ITM TCR
 670:.././hal/sam3u1c/inc/core_cm3.h **** 
 671:.././hal/sam3u1c/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 672:.././hal/sam3u1c/inc/core_cm3.h **** 
 673:.././hal/sam3u1c/inc/core_cm3.h **** 
 674:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 675:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 676:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Data Watchpoint and Trace (DWT)
 677:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 678:.././hal/sam3u1c/inc/core_cm3.h ****  */
 679:.././hal/sam3u1c/inc/core_cm3.h **** 
 680:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 681:.././hal/sam3u1c/inc/core_cm3.h ****  */
 682:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 683:.././hal/sam3u1c/inc/core_cm3.h **** {
 684:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                
 685:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register            
 686:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register              
 687:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 688:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register            
 689:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register              
 690:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 691:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 692:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0           
 693:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                 
 694:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0             
 695:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[1];
 696:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1           
 697:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                 
 698:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1             
 699:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED1[1];
 700:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2           
 701:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                 
 702:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2             
 703:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED2[1];
 704:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3           
 705:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                 
 706:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3             
 707:.././hal/sam3u1c/inc/core_cm3.h **** } DWT_Type;
 708:.././hal/sam3u1c/inc/core_cm3.h **** 
 709:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Control Register Definitions */
 710:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTR
 711:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 712:.././hal/sam3u1c/inc/core_cm3.h **** 
 713:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTR
 714:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 715:.././hal/sam3u1c/inc/core_cm3.h **** 
 716:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTR
 717:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 718:.././hal/sam3u1c/inc/core_cm3.h **** 
 719:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTR
 720:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 721:.././hal/sam3u1c/inc/core_cm3.h **** 
 722:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTR
 723:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 724:.././hal/sam3u1c/inc/core_cm3.h **** 
 725:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTR
 726:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 727:.././hal/sam3u1c/inc/core_cm3.h **** 
 728:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTR
 729:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 730:.././hal/sam3u1c/inc/core_cm3.h **** 
 731:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTR
 732:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 733:.././hal/sam3u1c/inc/core_cm3.h **** 
 734:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTR
 735:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 736:.././hal/sam3u1c/inc/core_cm3.h **** 
 737:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTR
 738:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 739:.././hal/sam3u1c/inc/core_cm3.h **** 
 740:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTR
 741:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 742:.././hal/sam3u1c/inc/core_cm3.h **** 
 743:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTR
 744:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 745:.././hal/sam3u1c/inc/core_cm3.h **** 
 746:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTR
 747:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 748:.././hal/sam3u1c/inc/core_cm3.h **** 
 749:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTR
 750:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 751:.././hal/sam3u1c/inc/core_cm3.h **** 
 752:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTR
 753:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 754:.././hal/sam3u1c/inc/core_cm3.h **** 
 755:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTR
 756:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 757:.././hal/sam3u1c/inc/core_cm3.h **** 
 758:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTR
 759:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 760:.././hal/sam3u1c/inc/core_cm3.h **** 
 761:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTR
 762:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL << DWT_CTRL_CYCCNTENA_Pos)           /*!< DWT CTR
 763:.././hal/sam3u1c/inc/core_cm3.h **** 
 764:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT CPI Count Register Definitions */
 765:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPI
 766:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL << DWT_CPICNT_CPICNT_Pos)           /*!< DWT CPI
 767:.././hal/sam3u1c/inc/core_cm3.h **** 
 768:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 769:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXC
 770:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL << DWT_EXCCNT_EXCCNT_Pos)           /*!< DWT EXC
 771:.././hal/sam3u1c/inc/core_cm3.h **** 
 772:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Sleep Count Register Definitions */
 773:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLE
 774:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL << DWT_SLEEPCNT_SLEEPCNT_Pos)       /*!< DWT SLE
 775:.././hal/sam3u1c/inc/core_cm3.h **** 
 776:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT LSU Count Register Definitions */
 777:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSU
 778:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL << DWT_LSUCNT_LSUCNT_Pos)           /*!< DWT LSU
 779:.././hal/sam3u1c/inc/core_cm3.h **** 
 780:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 781:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOL
 782:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL << DWT_FOLDCNT_FOLDCNT_Pos)         /*!< DWT FOL
 783:.././hal/sam3u1c/inc/core_cm3.h **** 
 784:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 785:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MAS
 786:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL << DWT_MASK_MASK_Pos)               /*!< DWT MAS
 787:.././hal/sam3u1c/inc/core_cm3.h **** 
 788:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 789:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUN
 790:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 791:.././hal/sam3u1c/inc/core_cm3.h **** 
 792:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUN
 793:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 794:.././hal/sam3u1c/inc/core_cm3.h **** 
 795:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUN
 796:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 797:.././hal/sam3u1c/inc/core_cm3.h **** 
 798:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUN
 799:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 800:.././hal/sam3u1c/inc/core_cm3.h **** 
 801:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUN
 802:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 803:.././hal/sam3u1c/inc/core_cm3.h **** 
 804:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUN
 805:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 806:.././hal/sam3u1c/inc/core_cm3.h **** 
 807:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUN
 808:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 809:.././hal/sam3u1c/inc/core_cm3.h **** 
 810:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUN
 811:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 812:.././hal/sam3u1c/inc/core_cm3.h **** 
 813:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUN
 814:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL << DWT_FUNCTION_FUNCTION_Pos)        /*!< DWT FUN
 815:.././hal/sam3u1c/inc/core_cm3.h **** 
 816:.././hal/sam3u1c/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 817:.././hal/sam3u1c/inc/core_cm3.h **** 
 818:.././hal/sam3u1c/inc/core_cm3.h **** 
 819:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 820:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 821:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Trace Port Interface (TPI)
 822:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 823:.././hal/sam3u1c/inc/core_cm3.h ****  */
 824:.././hal/sam3u1c/inc/core_cm3.h **** 
 825:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Trace Port Interface Register (TPI).
 826:.././hal/sam3u1c/inc/core_cm3.h ****  */
 827:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 828:.././hal/sam3u1c/inc/core_cm3.h **** {
 829:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 830:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 831:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[2];
 832:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 833:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED1[55];
 834:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
 835:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED2[131];
 836:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
 837:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
 838:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
 839:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED3[759];
 840:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
 841:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
 842:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
 843:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED4[1];
 844:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
 845:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
 846:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
 847:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED5[39];
 848:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
 849:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
 850:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED7[8];
 851:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
 852:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
 853:.././hal/sam3u1c/inc/core_cm3.h **** } TPI_Type;
 854:.././hal/sam3u1c/inc/core_cm3.h **** 
 855:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
 856:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACP
 857:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL << TPI_ACPR_PRESCALER_Pos)        /*!< TPI ACP
 858:.././hal/sam3u1c/inc/core_cm3.h **** 
 859:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
 860:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPP
 861:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL << TPI_SPPR_TXMODE_Pos)              /*!< TPI SPP
 862:.././hal/sam3u1c/inc/core_cm3.h **** 
 863:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
 864:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFS
 865:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
 866:.././hal/sam3u1c/inc/core_cm3.h **** 
 867:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFS
 868:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
 869:.././hal/sam3u1c/inc/core_cm3.h **** 
 870:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFS
 871:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
 872:.././hal/sam3u1c/inc/core_cm3.h **** 
 873:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFS
 874:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL << TPI_FFSR_FlInProg_Pos)            /*!< TPI FFS
 875:.././hal/sam3u1c/inc/core_cm3.h **** 
 876:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
 877:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFC
 878:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
 879:.././hal/sam3u1c/inc/core_cm3.h **** 
 880:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFC
 881:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
 882:.././hal/sam3u1c/inc/core_cm3.h **** 
 883:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI TRIGGER Register Definitions */
 884:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRI
 885:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL << TPI_TRIGGER_TRIGGER_Pos)          /*!< TPI TRI
 886:.././hal/sam3u1c/inc/core_cm3.h **** 
 887:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
 888:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 889:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
 890:.././hal/sam3u1c/inc/core_cm3.h **** 
 891:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 892:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
 893:.././hal/sam3u1c/inc/core_cm3.h **** 
 894:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 895:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
 896:.././hal/sam3u1c/inc/core_cm3.h **** 
 897:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 898:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
 899:.././hal/sam3u1c/inc/core_cm3.h **** 
 900:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIF
 901:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
 902:.././hal/sam3u1c/inc/core_cm3.h **** 
 903:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIF
 904:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
 905:.././hal/sam3u1c/inc/core_cm3.h **** 
 906:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIF
 907:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL << TPI_FIFO0_ETM0_Pos)              /*!< TPI FIF
 908:.././hal/sam3u1c/inc/core_cm3.h **** 
 909:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
 910:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITA
 911:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL << TPI_ITATBCTR2_ATREADY_Pos)        /*!< TPI ITA
 912:.././hal/sam3u1c/inc/core_cm3.h **** 
 913:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
 914:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 915:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
 916:.././hal/sam3u1c/inc/core_cm3.h **** 
 917:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 918:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
 919:.././hal/sam3u1c/inc/core_cm3.h **** 
 920:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 921:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
 922:.././hal/sam3u1c/inc/core_cm3.h **** 
 923:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 924:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
 925:.././hal/sam3u1c/inc/core_cm3.h **** 
 926:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIF
 927:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
 928:.././hal/sam3u1c/inc/core_cm3.h **** 
 929:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIF
 930:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
 931:.././hal/sam3u1c/inc/core_cm3.h **** 
 932:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIF
 933:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL << TPI_FIFO1_ITM0_Pos)              /*!< TPI FIF
 934:.././hal/sam3u1c/inc/core_cm3.h **** 
 935:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
 936:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITA
 937:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL << TPI_ITATBCTR0_ATREADY_Pos)        /*!< TPI ITA
 938:.././hal/sam3u1c/inc/core_cm3.h **** 
 939:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
 940:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITC
 941:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL << TPI_ITCTRL_Mode_Pos)              /*!< TPI ITC
 942:.././hal/sam3u1c/inc/core_cm3.h **** 
 943:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI DEVID Register Definitions */
 944:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEV
 945:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
 946:.././hal/sam3u1c/inc/core_cm3.h **** 
 947:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEV
 948:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
 949:.././hal/sam3u1c/inc/core_cm3.h **** 
 950:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEV
 951:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
 952:.././hal/sam3u1c/inc/core_cm3.h **** 
 953:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEV
 954:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
 955:.././hal/sam3u1c/inc/core_cm3.h **** 
 956:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEV
 957:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
 958:.././hal/sam3u1c/inc/core_cm3.h **** 
 959:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEV
 960:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL << TPI_DEVID_NrTraceInput_Pos)      /*!< TPI DEV
 961:.././hal/sam3u1c/inc/core_cm3.h **** 
 962:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
 963:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEV
 964:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL << TPI_DEVTYPE_SubType_Pos)          /*!< TPI DEV
 965:.././hal/sam3u1c/inc/core_cm3.h **** 
 966:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEV
 967:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
 968:.././hal/sam3u1c/inc/core_cm3.h **** 
 969:.././hal/sam3u1c/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
 970:.././hal/sam3u1c/inc/core_cm3.h **** 
 971:.././hal/sam3u1c/inc/core_cm3.h **** 
 972:.././hal/sam3u1c/inc/core_cm3.h **** #if (__MPU_PRESENT == 1)
 973:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 974:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
 975:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
 976:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 977:.././hal/sam3u1c/inc/core_cm3.h ****  */
 978:.././hal/sam3u1c/inc/core_cm3.h **** 
 979:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 980:.././hal/sam3u1c/inc/core_cm3.h ****  */
 981:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 982:.././hal/sam3u1c/inc/core_cm3.h **** {
 983:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 984:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 985:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 986:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 987:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 988:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 989:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 990:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 991:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 992:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 993:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 994:.././hal/sam3u1c/inc/core_cm3.h **** } MPU_Type;
 995:.././hal/sam3u1c/inc/core_cm3.h **** 
 996:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Type Register */
 997:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 998:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 999:.././hal/sam3u1c/inc/core_cm3.h **** 
1000:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
1001:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1002:.././hal/sam3u1c/inc/core_cm3.h **** 
1003:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
1004:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
1005:.././hal/sam3u1c/inc/core_cm3.h **** 
1006:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Control Register */
1007:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
1008:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1009:.././hal/sam3u1c/inc/core_cm3.h **** 
1010:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
1011:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1012:.././hal/sam3u1c/inc/core_cm3.h **** 
1013:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
1014:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
1015:.././hal/sam3u1c/inc/core_cm3.h **** 
1016:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Region Number Register */
1017:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
1018:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
1019:.././hal/sam3u1c/inc/core_cm3.h **** 
1020:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Region Base Address Register */
1021:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
1022:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1023:.././hal/sam3u1c/inc/core_cm3.h **** 
1024:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
1025:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1026:.././hal/sam3u1c/inc/core_cm3.h **** 
1027:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
1028:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
1029:.././hal/sam3u1c/inc/core_cm3.h **** 
1030:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Region Attribute and Size Register */
1031:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
1032:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1033:.././hal/sam3u1c/inc/core_cm3.h **** 
1034:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
1035:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1036:.././hal/sam3u1c/inc/core_cm3.h **** 
1037:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
1038:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1039:.././hal/sam3u1c/inc/core_cm3.h **** 
1040:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
1041:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
1042:.././hal/sam3u1c/inc/core_cm3.h **** 
1043:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_MPU */
1044:.././hal/sam3u1c/inc/core_cm3.h **** #endif
1045:.././hal/sam3u1c/inc/core_cm3.h **** 
1046:.././hal/sam3u1c/inc/core_cm3.h **** 
1047:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
1048:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1049:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Core Debug Registers
1050:.././hal/sam3u1c/inc/core_cm3.h ****   @{
1051:.././hal/sam3u1c/inc/core_cm3.h ****  */
1052:.././hal/sam3u1c/inc/core_cm3.h **** 
1053:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
1054:.././hal/sam3u1c/inc/core_cm3.h ****  */
1055:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
1056:.././hal/sam3u1c/inc/core_cm3.h **** {
1057:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1058:.././hal/sam3u1c/inc/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1059:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1060:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1061:.././hal/sam3u1c/inc/core_cm3.h **** } CoreDebug_Type;
1062:.././hal/sam3u1c/inc/core_cm3.h **** 
1063:.././hal/sam3u1c/inc/core_cm3.h **** /* Debug Halting Control and Status Register */
1064:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
1065:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1066:.././hal/sam3u1c/inc/core_cm3.h **** 
1067:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
1068:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1069:.././hal/sam3u1c/inc/core_cm3.h **** 
1070:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
1071:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1072:.././hal/sam3u1c/inc/core_cm3.h **** 
1073:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
1074:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1075:.././hal/sam3u1c/inc/core_cm3.h **** 
1076:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
1077:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1078:.././hal/sam3u1c/inc/core_cm3.h **** 
1079:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
1080:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1081:.././hal/sam3u1c/inc/core_cm3.h **** 
1082:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
1083:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1084:.././hal/sam3u1c/inc/core_cm3.h **** 
1085:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
1086:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1087:.././hal/sam3u1c/inc/core_cm3.h **** 
1088:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
1089:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1090:.././hal/sam3u1c/inc/core_cm3.h **** 
1091:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
1092:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1093:.././hal/sam3u1c/inc/core_cm3.h **** 
1094:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
1095:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1096:.././hal/sam3u1c/inc/core_cm3.h **** 
1097:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
1098:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
1099:.././hal/sam3u1c/inc/core_cm3.h **** 
1100:.././hal/sam3u1c/inc/core_cm3.h **** /* Debug Core Register Selector Register */
1101:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
1102:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1103:.././hal/sam3u1c/inc/core_cm3.h **** 
1104:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
1105:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
1106:.././hal/sam3u1c/inc/core_cm3.h **** 
1107:.././hal/sam3u1c/inc/core_cm3.h **** /* Debug Exception and Monitor Control Register */
1108:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
1109:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1110:.././hal/sam3u1c/inc/core_cm3.h **** 
1111:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
1112:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1113:.././hal/sam3u1c/inc/core_cm3.h **** 
1114:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
1115:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1116:.././hal/sam3u1c/inc/core_cm3.h **** 
1117:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
1118:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1119:.././hal/sam3u1c/inc/core_cm3.h **** 
1120:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
1121:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1122:.././hal/sam3u1c/inc/core_cm3.h **** 
1123:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
1124:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1125:.././hal/sam3u1c/inc/core_cm3.h **** 
1126:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
1127:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1128:.././hal/sam3u1c/inc/core_cm3.h **** 
1129:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
1130:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1131:.././hal/sam3u1c/inc/core_cm3.h **** 
1132:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
1133:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1134:.././hal/sam3u1c/inc/core_cm3.h **** 
1135:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
1136:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1137:.././hal/sam3u1c/inc/core_cm3.h **** 
1138:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
1139:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1140:.././hal/sam3u1c/inc/core_cm3.h **** 
1141:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
1142:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1143:.././hal/sam3u1c/inc/core_cm3.h **** 
1144:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
1145:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
1146:.././hal/sam3u1c/inc/core_cm3.h **** 
1147:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1148:.././hal/sam3u1c/inc/core_cm3.h **** 
1149:.././hal/sam3u1c/inc/core_cm3.h **** 
1150:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup    CMSIS_core_register
1151:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup   CMSIS_core_base     Core Definitions
1152:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Definitions for base addresses, unions, and structures.
1153:.././hal/sam3u1c/inc/core_cm3.h ****   @{
1154:.././hal/sam3u1c/inc/core_cm3.h ****  */
1155:.././hal/sam3u1c/inc/core_cm3.h **** 
1156:.././hal/sam3u1c/inc/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
1157:.././hal/sam3u1c/inc/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1158:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
1159:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address        
1160:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address        
1161:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1162:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
1163:.././hal/sam3u1c/inc/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
1164:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1165:.././hal/sam3u1c/inc/core_cm3.h **** 
1166:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1167:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1168:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1169:.././hal/sam3u1c/inc/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1170:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1171:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1172:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1173:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1174:.././hal/sam3u1c/inc/core_cm3.h **** 
1175:.././hal/sam3u1c/inc/core_cm3.h **** #if (__MPU_PRESENT == 1)
1176:.././hal/sam3u1c/inc/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
1177:.././hal/sam3u1c/inc/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
1178:.././hal/sam3u1c/inc/core_cm3.h **** #endif
1179:.././hal/sam3u1c/inc/core_cm3.h **** 
1180:.././hal/sam3u1c/inc/core_cm3.h **** /*@} */
1181:.././hal/sam3u1c/inc/core_cm3.h **** 
1182:.././hal/sam3u1c/inc/core_cm3.h **** 
1183:.././hal/sam3u1c/inc/core_cm3.h **** 
1184:.././hal/sam3u1c/inc/core_cm3.h **** /*******************************************************************************
1185:.././hal/sam3u1c/inc/core_cm3.h ****  *                Hardware Abstraction Layer
1186:.././hal/sam3u1c/inc/core_cm3.h ****   Core Function Interface contains:
1187:.././hal/sam3u1c/inc/core_cm3.h ****   - Core NVIC Functions
1188:.././hal/sam3u1c/inc/core_cm3.h ****   - Core SysTick Functions
1189:.././hal/sam3u1c/inc/core_cm3.h ****   - Core Debug Functions
1190:.././hal/sam3u1c/inc/core_cm3.h ****   - Core Register Access Functions
1191:.././hal/sam3u1c/inc/core_cm3.h ****  ******************************************************************************/
1192:.././hal/sam3u1c/inc/core_cm3.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1193:.././hal/sam3u1c/inc/core_cm3.h **** */
1194:.././hal/sam3u1c/inc/core_cm3.h **** 
1195:.././hal/sam3u1c/inc/core_cm3.h **** 
1196:.././hal/sam3u1c/inc/core_cm3.h **** 
1197:.././hal/sam3u1c/inc/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1198:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1199:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1200:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
1201:.././hal/sam3u1c/inc/core_cm3.h ****     @{
1202:.././hal/sam3u1c/inc/core_cm3.h ****  */
1203:.././hal/sam3u1c/inc/core_cm3.h **** 
1204:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Set Priority Grouping
1205:.././hal/sam3u1c/inc/core_cm3.h **** 
1206:.././hal/sam3u1c/inc/core_cm3.h ****   The function sets the priority grouping field using the required unlock sequence.
1207:.././hal/sam3u1c/inc/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1208:.././hal/sam3u1c/inc/core_cm3.h ****   Only values from 0..7 are used.
1209:.././hal/sam3u1c/inc/core_cm3.h ****   In case of a conflict between priority grouping and available
1210:.././hal/sam3u1c/inc/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1211:.././hal/sam3u1c/inc/core_cm3.h **** 
1212:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field.
1213:.././hal/sam3u1c/inc/core_cm3.h ****  */
1214:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1215:.././hal/sam3u1c/inc/core_cm3.h **** {
1216:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t reg_value;
1217:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1218:.././hal/sam3u1c/inc/core_cm3.h **** 
1219:.././hal/sam3u1c/inc/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1220:.././hal/sam3u1c/inc/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1221:.././hal/sam3u1c/inc/core_cm3.h ****   reg_value  =  (reg_value                                 |
1222:.././hal/sam3u1c/inc/core_cm3.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1223:.././hal/sam3u1c/inc/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1224:.././hal/sam3u1c/inc/core_cm3.h ****   SCB->AIRCR =  reg_value;
1225:.././hal/sam3u1c/inc/core_cm3.h **** }
1226:.././hal/sam3u1c/inc/core_cm3.h **** 
1227:.././hal/sam3u1c/inc/core_cm3.h **** 
1228:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Get Priority Grouping
1229:.././hal/sam3u1c/inc/core_cm3.h **** 
1230:.././hal/sam3u1c/inc/core_cm3.h ****   The function reads the priority grouping field from the NVIC Interrupt Controller.
1231:.././hal/sam3u1c/inc/core_cm3.h **** 
1232:.././hal/sam3u1c/inc/core_cm3.h ****     \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1233:.././hal/sam3u1c/inc/core_cm3.h ****  */
1234:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1235:.././hal/sam3u1c/inc/core_cm3.h **** {
1236:.././hal/sam3u1c/inc/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1237:.././hal/sam3u1c/inc/core_cm3.h **** }
1238:.././hal/sam3u1c/inc/core_cm3.h **** 
1239:.././hal/sam3u1c/inc/core_cm3.h **** 
1240:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Enable External Interrupt
1241:.././hal/sam3u1c/inc/core_cm3.h **** 
1242:.././hal/sam3u1c/inc/core_cm3.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
1243:.././hal/sam3u1c/inc/core_cm3.h **** 
1244:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1245:.././hal/sam3u1c/inc/core_cm3.h ****  */
1246:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1247:.././hal/sam3u1c/inc/core_cm3.h **** {
  26              	 .loc 1 1247 1
  27              	 .cfi_startproc
  28              	 
  29              	 
  30              	 
  31 0000 80B4     	 push {r7}
  32              	.LCFI0:
  33              	 .cfi_def_cfa_offset 4
  34              	 .cfi_offset 7,-4
  35 0002 83B0     	 sub sp,sp,#12
  36              	.LCFI1:
  37              	 .cfi_def_cfa_offset 16
  38 0004 00AF     	 add r7,sp,#0
  39              	.LCFI2:
  40              	 .cfi_def_cfa_register 7
  41 0006 0346     	 mov r3,r0
  42 0008 FB71     	 strb r3,[r7,#7]
1248:.././hal/sam3u1c/inc/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  43              	 .loc 1 1248 65
  44 000a FB79     	 ldrb r3,[r7,#7]
  45 000c 03F01F03 	 and r3,r3,#31
  46              	 .loc 1 1248 44
  47 0010 0122     	 movs r2,#1
  48 0012 02FA03F1 	 lsl r1,r2,r3
  49              	 .loc 1 1248 7
  50 0016 054A     	 ldr r2,.L2
  51              	 .loc 1 1248 15
  52 0018 97F90730 	 ldrsb r3,[r7,#7]
  53              	 .loc 1 1248 32
  54 001c 5B09     	 lsrs r3,r3,#5
  55              	 .loc 1 1248 39
  56 001e 42F82310 	 str r1,[r2,r3,lsl#2]
1249:.././hal/sam3u1c/inc/core_cm3.h **** }
  57              	 .loc 1 1249 1
  58 0022 00BF     	 nop
  59 0024 0C37     	 adds r7,r7,#12
  60              	.LCFI3:
  61              	 .cfi_def_cfa_offset 4
  62 0026 BD46     	 mov sp,r7
  63              	.LCFI4:
  64              	 .cfi_def_cfa_register 13
  65              	 
  66 0028 80BC     	 pop {r7}
  67              	.LCFI5:
  68              	 .cfi_restore 7
  69              	 .cfi_def_cfa_offset 0
  70 002a 7047     	 bx lr
  71              	.L3:
  72              	 .align 2
  73              	.L2:
  74 002c 00E100E0 	 .word -536813312
  75              	 .cfi_endproc
  76              	.LFE41:
  78              	 .section .text.NVIC_SetPriority,"ax",%progbits
  79              	 .align 1
  80              	 .syntax unified
  81              	 .thumb
  82              	 .thumb_func
  83              	 .fpu softvfp
  85              	NVIC_SetPriority:
  86              	.LFB47:
1250:.././hal/sam3u1c/inc/core_cm3.h **** 
1251:.././hal/sam3u1c/inc/core_cm3.h **** 
1252:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Disable External Interrupt
1253:.././hal/sam3u1c/inc/core_cm3.h **** 
1254:.././hal/sam3u1c/inc/core_cm3.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
1255:.././hal/sam3u1c/inc/core_cm3.h **** 
1256:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1257:.././hal/sam3u1c/inc/core_cm3.h ****  */
1258:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1259:.././hal/sam3u1c/inc/core_cm3.h **** {
1260:.././hal/sam3u1c/inc/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1261:.././hal/sam3u1c/inc/core_cm3.h **** }
1262:.././hal/sam3u1c/inc/core_cm3.h **** 
1263:.././hal/sam3u1c/inc/core_cm3.h **** 
1264:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Get Pending Interrupt
1265:.././hal/sam3u1c/inc/core_cm3.h **** 
1266:.././hal/sam3u1c/inc/core_cm3.h ****     The function reads the pending register in the NVIC and returns the pending bit
1267:.././hal/sam3u1c/inc/core_cm3.h ****     for the specified interrupt.
1268:.././hal/sam3u1c/inc/core_cm3.h **** 
1269:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1270:.././hal/sam3u1c/inc/core_cm3.h ****     
1271:.././hal/sam3u1c/inc/core_cm3.h ****     \return             0  Interrupt status is not pending.
1272:.././hal/sam3u1c/inc/core_cm3.h ****     \return             1  Interrupt status is pending.
1273:.././hal/sam3u1c/inc/core_cm3.h ****  */
1274:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1275:.././hal/sam3u1c/inc/core_cm3.h **** {
1276:.././hal/sam3u1c/inc/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1277:.././hal/sam3u1c/inc/core_cm3.h **** }
1278:.././hal/sam3u1c/inc/core_cm3.h **** 
1279:.././hal/sam3u1c/inc/core_cm3.h **** 
1280:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Set Pending Interrupt
1281:.././hal/sam3u1c/inc/core_cm3.h **** 
1282:.././hal/sam3u1c/inc/core_cm3.h ****     The function sets the pending bit of an external interrupt.
1283:.././hal/sam3u1c/inc/core_cm3.h **** 
1284:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number. Value cannot be negative.
1285:.././hal/sam3u1c/inc/core_cm3.h ****  */
1286:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1287:.././hal/sam3u1c/inc/core_cm3.h **** {
1288:.././hal/sam3u1c/inc/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1289:.././hal/sam3u1c/inc/core_cm3.h **** }
1290:.././hal/sam3u1c/inc/core_cm3.h **** 
1291:.././hal/sam3u1c/inc/core_cm3.h **** 
1292:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Clear Pending Interrupt
1293:.././hal/sam3u1c/inc/core_cm3.h **** 
1294:.././hal/sam3u1c/inc/core_cm3.h ****     The function clears the pending bit of an external interrupt.
1295:.././hal/sam3u1c/inc/core_cm3.h **** 
1296:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1297:.././hal/sam3u1c/inc/core_cm3.h ****  */
1298:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1299:.././hal/sam3u1c/inc/core_cm3.h **** {
1300:.././hal/sam3u1c/inc/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1301:.././hal/sam3u1c/inc/core_cm3.h **** }
1302:.././hal/sam3u1c/inc/core_cm3.h **** 
1303:.././hal/sam3u1c/inc/core_cm3.h **** 
1304:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Get Active Interrupt
1305:.././hal/sam3u1c/inc/core_cm3.h **** 
1306:.././hal/sam3u1c/inc/core_cm3.h ****     The function reads the active register in NVIC and returns the active bit.
1307:.././hal/sam3u1c/inc/core_cm3.h ****     
1308:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1309:.././hal/sam3u1c/inc/core_cm3.h ****     
1310:.././hal/sam3u1c/inc/core_cm3.h ****     \return             0  Interrupt status is not active.
1311:.././hal/sam3u1c/inc/core_cm3.h ****     \return             1  Interrupt status is active.
1312:.././hal/sam3u1c/inc/core_cm3.h ****  */
1313:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1314:.././hal/sam3u1c/inc/core_cm3.h **** {
1315:.././hal/sam3u1c/inc/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1316:.././hal/sam3u1c/inc/core_cm3.h **** }
1317:.././hal/sam3u1c/inc/core_cm3.h **** 
1318:.././hal/sam3u1c/inc/core_cm3.h **** 
1319:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Set Interrupt Priority
1320:.././hal/sam3u1c/inc/core_cm3.h **** 
1321:.././hal/sam3u1c/inc/core_cm3.h ****     The function sets the priority of an interrupt. 
1322:.././hal/sam3u1c/inc/core_cm3.h **** 
1323:.././hal/sam3u1c/inc/core_cm3.h ****     \note The priority cannot be set for every core interrupt.
1324:.././hal/sam3u1c/inc/core_cm3.h **** 
1325:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number. 
1326:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]  priority  Priority to set.
1327:.././hal/sam3u1c/inc/core_cm3.h ****  */
1328:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1329:.././hal/sam3u1c/inc/core_cm3.h **** {
  87              	 .loc 1 1329 1
  88              	 .cfi_startproc
  89              	 
  90              	 
  91              	 
  92 0000 80B4     	 push {r7}
  93              	.LCFI6:
  94              	 .cfi_def_cfa_offset 4
  95              	 .cfi_offset 7,-4
  96 0002 83B0     	 sub sp,sp,#12
  97              	.LCFI7:
  98              	 .cfi_def_cfa_offset 16
  99 0004 00AF     	 add r7,sp,#0
 100              	.LCFI8:
 101              	 .cfi_def_cfa_register 7
 102 0006 0346     	 mov r3,r0
 103 0008 3960     	 str r1,[r7]
 104 000a FB71     	 strb r3,[r7,#7]
1330:.././hal/sam3u1c/inc/core_cm3.h ****   if(IRQn < 0) {
 105              	 .loc 1 1330 5
 106 000c 97F90730 	 ldrsb r3,[r7,#7]
 107 0010 002B     	 cmp r3,#0
 108 0012 0BDA     	 bge .L5
1331:.././hal/sam3u1c/inc/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
 109              	 .loc 1 1331 55
 110 0014 3B68     	 ldr r3,[r7]
 111 0016 DAB2     	 uxtb r2,r3
 112              	 .loc 1 1331 8
 113 0018 0C49     	 ldr r1,.L8
 114              	 .loc 1 1331 32
 115 001a FB79     	 ldrb r3,[r7,#7]
 116 001c 03F00F03 	 and r3,r3,#15
 117              	 .loc 1 1331 38
 118 0020 043B     	 subs r3,r3,#4
 119              	 .loc 1 1331 55
 120 0022 1201     	 lsls r2,r2,#4
 121 0024 D2B2     	 uxtb r2,r2
 122              	 .loc 1 1331 42
 123 0026 0B44     	 add r3,r3,r1
 124 0028 1A76     	 strb r2,[r3,#24]
1332:.././hal/sam3u1c/inc/core_cm3.h ****   else {
1333:.././hal/sam3u1c/inc/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
1334:.././hal/sam3u1c/inc/core_cm3.h **** }
 125              	 .loc 1 1334 1
 126 002a 09E0     	 b .L7
 127              	.L5:
1333:.././hal/sam3u1c/inc/core_cm3.h **** }
 128              	 .loc 1 1333 45
 129 002c 3B68     	 ldr r3,[r7]
 130 002e DAB2     	 uxtb r2,r3
1333:.././hal/sam3u1c/inc/core_cm3.h **** }
 131              	 .loc 1 1333 9
 132 0030 0749     	 ldr r1,.L8+4
1333:.././hal/sam3u1c/inc/core_cm3.h **** }
 133              	 .loc 1 1333 14
 134 0032 97F90730 	 ldrsb r3,[r7,#7]
1333:.././hal/sam3u1c/inc/core_cm3.h **** }
 135              	 .loc 1 1333 45
 136 0036 1201     	 lsls r2,r2,#4
 137 0038 D2B2     	 uxtb r2,r2
1333:.././hal/sam3u1c/inc/core_cm3.h **** }
 138              	 .loc 1 1333 32
 139 003a 0B44     	 add r3,r3,r1
 140 003c 83F80023 	 strb r2,[r3,#768]
 141              	.L7:
 142              	 .loc 1 1334 1
 143 0040 00BF     	 nop
 144 0042 0C37     	 adds r7,r7,#12
 145              	.LCFI9:
 146              	 .cfi_def_cfa_offset 4
 147 0044 BD46     	 mov sp,r7
 148              	.LCFI10:
 149              	 .cfi_def_cfa_register 13
 150              	 
 151 0046 80BC     	 pop {r7}
 152              	.LCFI11:
 153              	 .cfi_restore 7
 154              	 .cfi_def_cfa_offset 0
 155 0048 7047     	 bx lr
 156              	.L9:
 157 004a 00BF     	 .align 2
 158              	.L8:
 159 004c 00ED00E0 	 .word -536810240
 160 0050 00E100E0 	 .word -536813312
 161              	 .cfi_endproc
 162              	.LFE47:
 164              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
 165              	 .align 2
 168              	cpu_irq_critical_section_counter:
 169 0000 00000000 	 .space 4
 170              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
 173              	cpu_irq_prev_interrupt_state:
 174 0000 00       	 .space 1
 175              	 .section .text.cpu_irq_save,"ax",%progbits
 176              	 .align 1
 177              	 .syntax unified
 178              	 .thumb
 179              	 .thumb_func
 180              	 .fpu softvfp
 182              	cpu_irq_save:
 183              	.LFB59:
 184              	 .file 2 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
   1:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** /**
   2:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \file
   3:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
   4:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \brief Global interrupt management for SAM D20, SAM3 and SAM4 (NVIC based)
   5:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
   6:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * Copyright (c) 2012-2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
   8:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  10:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \page License
  11:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  12:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  15:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  18:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  22:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  25:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  28:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  40:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  42:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  */
  43:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
  44:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #ifndef UTILS_INTERRUPT_INTERRUPT_H
  45:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #define UTILS_INTERRUPT_INTERRUPT_H
  46:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
  47:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #include <compiler.h>
  48:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #include <parts.h>
  49:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
  50:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #ifdef __cplusplus
  51:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** extern "C" {
  52:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #endif
  53:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
  54:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** /**
  55:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \weakgroup interrupt_group
  56:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  57:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * @{
  58:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  */
  59:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
  60:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** /**
  61:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \name Interrupt Service Routine definition
  62:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  63:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * @{
  64:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  */
  65:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
  66:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** /**
  67:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \brief Define service routine
  68:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  69:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \note For NVIC devices the interrupt service routines are predefined to
  70:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *       add to vector table in binary generation, so there is no service
  71:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *       register at run time. The routine collections are in exceptions.h.
  72:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  73:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * Usage:
  74:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \code
  75:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	ISR(foo_irq_handler)
  76:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	{
  77:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	     // Function definition
  78:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	     ...
  79:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	}
  80:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** \endcode
  81:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  82:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \param func Name for the function.
  83:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  */
  84:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #  define ISR(func)   \
  85:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	void func (void)
  86:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
  87:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** /**
  88:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \brief Initialize interrupt vectors
  89:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  90:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * For NVIC the interrupt vectors are put in vector table. So nothing
  91:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * to do to initialize them, except defined the vector function with
  92:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * right name.
  93:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  94:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * This must be called prior to \ref irq_register_handler.
  95:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  */
  96:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #  define irq_initialize_vectors()   \
  97:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	do {                             \
  98:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	} while(0)
  99:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 100:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** /**
 101:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \brief Register handler for interrupt
 102:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
 103:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * For NVIC the interrupt vectors are put in vector table. So nothing
 104:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * to do to register them, except defined the vector function with
 105:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * right name.
 106:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
 107:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * Usage:
 108:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \code
 109:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	irq_initialize_vectors();
 110:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	irq_register_handler(foo_irq_handler);
 111:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** \endcode
 112:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
 113:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \note The function \a func must be defined with the \ref ISR macro.
 114:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \note The functions prototypes can be found in the device exception header
 115:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *       files (exceptions.h).
 116:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  */
 117:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #  define irq_register_handler(int_num, int_prio)                      \
 118:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	NVIC_ClearPendingIRQ(    (IRQn_Type)int_num);                      \
 119:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	NVIC_SetPriority(    (IRQn_Type)int_num, int_prio);                \
 120:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	NVIC_EnableIRQ(      (IRQn_Type)int_num);                          \
 121:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 122:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** //@}
 123:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 124:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #  define cpu_irq_enable()                     \
 125:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	do {                                       \
 126:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 		g_interrupt_enabled = true;            \
 127:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 		__DMB();                               \
 128:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 		__enable_irq();                        \
 129:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	} while (0)
 130:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #  define cpu_irq_disable()                    \
 131:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	do {                                       \
 132:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 		__disable_irq();                       \
 133:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 		__DMB();                               \
 134:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 		g_interrupt_enabled = false;           \
 135:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	} while (0)
 136:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 137:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** typedef uint32_t irqflags_t;
 138:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 139:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #if !defined(__DOXYGEN__)
 140:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** extern volatile bool g_interrupt_enabled;
 141:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #endif
 142:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 143:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #define cpu_irq_is_enabled()    (__get_PRIMASK() == 0)
 144:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 145:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** static volatile uint32_t cpu_irq_critical_section_counter;
 146:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** static volatile bool     cpu_irq_prev_interrupt_state;
 147:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 148:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** static inline irqflags_t cpu_irq_save(void)
 149:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** {
 185              	 .loc 2 149 1
 186              	 .cfi_startproc
 187              	 
 188              	 
 189              	 
 190 0000 80B4     	 push {r7}
 191              	.LCFI12:
 192              	 .cfi_def_cfa_offset 4
 193              	 .cfi_offset 7,-4
 194 0002 83B0     	 sub sp,sp,#12
 195              	.LCFI13:
 196              	 .cfi_def_cfa_offset 16
 197 0004 00AF     	 add r7,sp,#0
 198              	.LCFI14:
 199              	 .cfi_def_cfa_register 7
 200              	.LBB16:
 201              	.LBB17:
 202              	 .file 3 ".././hal/sam3u1c/inc/core_cmFunc.h"
   1:.././hal/sam3u1c/inc/core_cmFunc.h **** /**************************************************************************//**
   2:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @version  V3.00
   5:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @date     19. January 2012
   6:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
   7:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @note
   8:.././hal/sam3u1c/inc/core_cmFunc.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
  10:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @par
  11:.././hal/sam3u1c/inc/core_cmFunc.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:.././hal/sam3u1c/inc/core_cmFunc.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:.././hal/sam3u1c/inc/core_cmFunc.h ****  * within development tools that are supporting such ARM based processors. 
  14:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
  15:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @par
  16:.././hal/sam3u1c/inc/core_cmFunc.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:.././hal/sam3u1c/inc/core_cmFunc.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:.././hal/sam3u1c/inc/core_cmFunc.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:.././hal/sam3u1c/inc/core_cmFunc.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:.././hal/sam3u1c/inc/core_cmFunc.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
  22:.././hal/sam3u1c/inc/core_cmFunc.h ****  ******************************************************************************/
  23:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  24:.././hal/sam3u1c/inc/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  25:.././hal/sam3u1c/inc/core_cmFunc.h **** #define __CORE_CMFUNC_H
  26:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  27:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  28:.././hal/sam3u1c/inc/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  29:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface   
  30:.././hal/sam3u1c/inc/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  31:.././hal/sam3u1c/inc/core_cmFunc.h ****   @{
  32:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  33:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  34:.././hal/sam3u1c/inc/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:.././hal/sam3u1c/inc/core_cmFunc.h **** /* ARM armcc specific functions */
  36:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  37:.././hal/sam3u1c/inc/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  38:.././hal/sam3u1c/inc/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif
  40:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  41:.././hal/sam3u1c/inc/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  42:.././hal/sam3u1c/inc/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  43:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  44:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Control Register
  45:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  46:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the Control Register.
  47:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  48:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Control Register value
  49:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  50:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  51:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  52:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  53:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regControl);
  54:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  55:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  56:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  57:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Control Register
  58:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  59:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function writes the given value to the Control Register.
  60:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  61:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  62:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  63:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  64:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  65:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  66:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regControl = control;
  67:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  68:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  69:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  70:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get IPSR Register
  71:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  72:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the IPSR Register.
  73:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  74:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               IPSR Register value
  75:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  76:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  77:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  78:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  79:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regIPSR);
  80:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  81:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  82:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  83:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get APSR Register
  84:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  85:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the APSR Register.
  86:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  87:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               APSR Register value
  88:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  89:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
  90:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  91:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
  92:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regAPSR);
  93:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  94:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  95:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  96:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get xPSR Register
  97:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  98:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the xPSR Register.
  99:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 100:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               xPSR Register value
 101:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 102:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 103:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 104:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 105:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regXPSR);
 106:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 107:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 108:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 109:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 110:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 111:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 112:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 113:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               PSP Register value
 114:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 115:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 116:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 117:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 118:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regProcessStackPointer);
 119:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 120:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 121:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 122:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 123:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 124:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 125:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 126:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 127:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 128:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 129:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 130:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 131:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 132:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 133:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 134:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 135:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 136:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 137:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 138:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 139:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               MSP Register value
 140:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 141:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 142:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 143:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 144:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regMainStackPointer);
 145:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 146:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 147:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 148:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 149:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 150:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 151:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 152:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 153:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 154:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 155:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 156:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 157:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 158:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 159:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 160:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 161:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Priority Mask
 162:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 163:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 164:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 165:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Priority Mask value
 166:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 167:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 168:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 169:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 170:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regPriMask);
 171:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 172:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 173:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 174:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Priority Mask
 175:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 176:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 177:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 178:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 179:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 180:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 181:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 182:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 183:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regPriMask = (priMask);
 184:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 185:.././hal/sam3u1c/inc/core_cmFunc.h ****  
 186:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 187:.././hal/sam3u1c/inc/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 188:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 189:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Enable FIQ
 190:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 191:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 192:.././hal/sam3u1c/inc/core_cmFunc.h ****     Can only be executed in Privileged modes.
 193:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 194:.././hal/sam3u1c/inc/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 195:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 196:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 197:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Disable FIQ
 198:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 199:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 200:.././hal/sam3u1c/inc/core_cmFunc.h ****     Can only be executed in Privileged modes.
 201:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 202:.././hal/sam3u1c/inc/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 203:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 204:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 205:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Base Priority
 206:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 207:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 208:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 209:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Base Priority register value
 210:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 211:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 212:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 213:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 214:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regBasePri);
 215:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 216:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 217:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 218:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Base Priority
 219:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 220:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 221:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 222:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 223:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 224:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 225:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 226:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 227:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 228:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 229:.././hal/sam3u1c/inc/core_cmFunc.h ****  
 230:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 231:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Fault Mask
 232:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 233:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 234:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 235:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Fault Mask register value
 236:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 237:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 238:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 239:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 240:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regFaultMask);
 241:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 242:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 243:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 244:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Fault Mask
 245:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 246:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 247:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 248:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 249:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 250:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 251:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 252:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 253:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 254:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 255:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 256:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 257:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 258:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 259:.././hal/sam3u1c/inc/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 260:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 261:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get FPSCR
 262:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 263:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 264:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 265:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 266:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 267:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 268:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 269:.././hal/sam3u1c/inc/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 270:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 271:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regfpscr);
 272:.././hal/sam3u1c/inc/core_cmFunc.h **** #else
 273:.././hal/sam3u1c/inc/core_cmFunc.h ****    return(0);
 274:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif
 275:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 276:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 277:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 278:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set FPSCR
 279:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 280:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 281:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 282:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 283:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 284:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 285:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 286:.././hal/sam3u1c/inc/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 287:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 288:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regfpscr = (fpscr);
 289:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif
 290:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 291:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 292:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 293:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 294:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 295:.././hal/sam3u1c/inc/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:.././hal/sam3u1c/inc/core_cmFunc.h **** /* IAR iccarm specific functions */
 297:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 298:.././hal/sam3u1c/inc/core_cmFunc.h **** #include <cmsis_iar.h>
 299:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 300:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 301:.././hal/sam3u1c/inc/core_cmFunc.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:.././hal/sam3u1c/inc/core_cmFunc.h **** /* TI CCS specific functions */
 303:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 304:.././hal/sam3u1c/inc/core_cmFunc.h **** #include <cmsis_ccs.h>
 305:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 306:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 307:.././hal/sam3u1c/inc/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:.././hal/sam3u1c/inc/core_cmFunc.h **** /* GNU gcc specific functions */
 309:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 310:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 311:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 312:.././hal/sam3u1c/inc/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 313:.././hal/sam3u1c/inc/core_cmFunc.h ****   Can only be executed in Privileged modes.
 314:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 315:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 316:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 317:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("cpsie i");
 318:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 319:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 320:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 321:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 322:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 323:.././hal/sam3u1c/inc/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 324:.././hal/sam3u1c/inc/core_cmFunc.h ****   Can only be executed in Privileged modes.
 325:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 326:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 327:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 328:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("cpsid i");
 329:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 330:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 331:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 332:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Control Register
 333:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 334:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the Control Register.
 335:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 336:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Control Register value
 337:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 338:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
 339:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 340:.././hal/sam3u1c/inc/core_cmFunc.h ****   uint32_t result;
 341:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 342:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 343:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(result);
 344:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 345:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 346:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 347:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Control Register
 348:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 349:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function writes the given value to the Control Register.
 350:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 351:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    control  Control Register value to set
 352:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 353:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 354:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 355:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 356:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 357:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 358:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 359:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get IPSR Register
 360:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 361:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the IPSR Register.
 362:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 363:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               IPSR Register value
 364:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 365:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 366:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 367:.././hal/sam3u1c/inc/core_cmFunc.h ****   uint32_t result;
 368:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 369:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 370:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(result);
 371:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 372:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 373:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 374:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get APSR Register
 375:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 376:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the APSR Register.
 377:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 378:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               APSR Register value
 379:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 380:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 381:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 382:.././hal/sam3u1c/inc/core_cmFunc.h ****   uint32_t result;
 383:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 384:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 385:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(result);
 386:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 387:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 388:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 389:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get xPSR Register
 390:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 391:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 392:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 393:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               xPSR Register value
 394:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 395:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 396:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 397:.././hal/sam3u1c/inc/core_cmFunc.h ****   uint32_t result;
 398:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 399:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 400:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(result);
 401:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 402:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 403:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 404:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 405:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 406:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 407:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 408:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               PSP Register value
 409:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 410:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 411:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 412:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t result;
 413:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 414:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 415:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(result);
 416:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 417:.././hal/sam3u1c/inc/core_cmFunc.h ****  
 418:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 419:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 420:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 421:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 422:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 423:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 424:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 425:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 426:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 427:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) );
 428:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 429:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 430:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 431:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 432:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 433:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 434:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 435:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               MSP Register value
 436:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 437:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 438:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 439:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t result;
 440:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 441:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 442:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(result);
 443:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 444:.././hal/sam3u1c/inc/core_cmFunc.h ****  
 445:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 446:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 447:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 448:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 449:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 450:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 451:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 452:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 453:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 454:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) );
 455:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 456:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 457:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 458:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Priority Mask
 459:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 460:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 461:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 462:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Priority Mask value
 463:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 464:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 465:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 466:.././hal/sam3u1c/inc/core_cmFunc.h ****   uint32_t result;
 467:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 468:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 203              	 .loc 3 468 3
 204              	 .syntax unified
 205              	
 206 0006 EFF31083 	 MRS r3,primask
 207              	
 208              	 .thumb
 209              	 .syntax unified
 210 000a 3B60     	 str r3,[r7]
 469:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(result);
 211              	 .loc 3 469 9
 212 000c 3B68     	 ldr r3,[r7]
 213              	.LBE17:
 214              	.LBE16:
 150:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	irqflags_t flags = cpu_irq_is_enabled();
 215              	 .loc 2 150 21
 216 000e 002B     	 cmp r3,#0
 217 0010 0CBF     	 ite eq
 218 0012 0123     	 moveq r3,#1
 219 0014 0023     	 movne r3,#0
 220 0016 DBB2     	 uxtb r3,r3
 221              	 .loc 2 150 13
 222 0018 7B60     	 str r3,[r7,#4]
 223              	.LBB18:
 224              	.LBB19:
 328:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 225              	 .loc 3 328 3
 226              	 .syntax unified
 227              	
 228 001a 72B6     	 cpsid i
 229              	
 230              	 .thumb
 231              	 .syntax unified
 232              	.LBE19:
 233              	.LBE18:
 234              	.LBB20:
 235              	.LBB21:
 236              	 .file 4 ".././hal/sam3u1c/inc/core_cmInstr.h"
   1:.././hal/sam3u1c/inc/core_cmInstr.h **** /**************************************************************************//**
   2:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @version  V3.00
   5:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @date     07. February 2012
   6:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
   7:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @note
   8:.././hal/sam3u1c/inc/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  10:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @par
  11:.././hal/sam3u1c/inc/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:.././hal/sam3u1c/inc/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:.././hal/sam3u1c/inc/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  15:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @par
  16:.././hal/sam3u1c/inc/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:.././hal/sam3u1c/inc/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:.././hal/sam3u1c/inc/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:.././hal/sam3u1c/inc/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:.././hal/sam3u1c/inc/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  22:.././hal/sam3u1c/inc/core_cmInstr.h ****  ******************************************************************************/
  23:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  24:.././hal/sam3u1c/inc/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  27:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  28:.././hal/sam3u1c/inc/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:.././hal/sam3u1c/inc/core_cmInstr.h ****   Access to dedicated instructions
  31:.././hal/sam3u1c/inc/core_cmInstr.h ****   @{
  32:.././hal/sam3u1c/inc/core_cmInstr.h **** */
  33:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  34:.././hal/sam3u1c/inc/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:.././hal/sam3u1c/inc/core_cmInstr.h **** /* ARM armcc specific functions */
  36:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  37:.././hal/sam3u1c/inc/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:.././hal/sam3u1c/inc/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:.././hal/sam3u1c/inc/core_cmInstr.h **** #endif
  40:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  41:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  42:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  No Operation
  43:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  44:.././hal/sam3u1c/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  46:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __NOP                             __nop
  47:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  48:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  49:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  51:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:.././hal/sam3u1c/inc/core_cmInstr.h ****     until one of a number of events occurs.
  53:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  54:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __WFI                             __wfi
  55:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  56:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  57:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Event
  58:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  59:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:.././hal/sam3u1c/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  62:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __WFE                             __wfe
  63:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  64:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  65:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Send Event
  66:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  67:.././hal/sam3u1c/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  69:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __SEV                             __sev
  70:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  71:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  72:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  74:.././hal/sam3u1c/inc/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:.././hal/sam3u1c/inc/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:.././hal/sam3u1c/inc/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  78:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  80:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  81:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  83:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:.././hal/sam3u1c/inc/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  86:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  88:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  89:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  91:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:.././hal/sam3u1c/inc/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  94:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  96:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  97:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  99:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 101:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 103:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 104:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __REV                             __rev
 105:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 106:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 107:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 109:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 111:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 113:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 114:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 116:.././hal/sam3u1c/inc/core_cmInstr.h ****   rev16 r0, r0
 117:.././hal/sam3u1c/inc/core_cmInstr.h ****   bx lr
 118:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 119:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 120:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 121:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 123:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 125:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 127:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 128:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 130:.././hal/sam3u1c/inc/core_cmInstr.h ****   revsh r0, r0
 131:.././hal/sam3u1c/inc/core_cmInstr.h ****   bx lr
 132:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 133:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 134:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 135:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 137:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 139:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Rotated value
 142:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 143:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __ROR                             __ror
 144:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 145:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 146:.././hal/sam3u1c/inc/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 148:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 150:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 152:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 154:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 155:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __RBIT                            __rbit
 156:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 157:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 158:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 160:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 162:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 165:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 167:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 168:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 170:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 172:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 175:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 177:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 178:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 180:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 182:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 185:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 187:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 188:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 190:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 192:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 193:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 195:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 196:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 197:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 199:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 200:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 202:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 204:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 205:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 207:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 208:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 209:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 211:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 212:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 214:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 216:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 217:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 219:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 220:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 221:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 223:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 224:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 226:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 228:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 229:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CLREX                           __clrex
 230:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 231:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 232:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Signed Saturate
 233:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 234:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function saturates a signed value.
 235:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 236:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             Saturated value
 239:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 240:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __SSAT                            __ssat
 241:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 242:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 243:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 245:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function saturates an unsigned value.
 246:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 247:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             Saturated value
 250:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 251:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __USAT                            __usat
 252:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 253:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 254:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Count leading zeros
 255:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 256:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 258:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             number of leading zeros in value
 260:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 261:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CLZ                             __clz
 262:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 263:.././hal/sam3u1c/inc/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 265:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 266:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 267:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:.././hal/sam3u1c/inc/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 270:.././hal/sam3u1c/inc/core_cmInstr.h **** #include <cmsis_iar.h>
 271:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 272:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 273:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:.././hal/sam3u1c/inc/core_cmInstr.h **** /* TI CCS specific functions */
 275:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 276:.././hal/sam3u1c/inc/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 278:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 279:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:.././hal/sam3u1c/inc/core_cmInstr.h **** /* GNU gcc specific functions */
 281:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 282:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  No Operation
 283:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 284:.././hal/sam3u1c/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 286:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 287:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 288:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("nop");
 289:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 290:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 291:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 292:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
 293:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 294:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 295:.././hal/sam3u1c/inc/core_cmInstr.h ****     until one of a number of events occurs.
 296:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 297:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 298:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 299:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("wfi");
 300:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 301:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 302:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 303:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Event
 304:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 305:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 306:.././hal/sam3u1c/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 307:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 308:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 309:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 310:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("wfe");
 311:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 312:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 313:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 314:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Send Event
 315:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 316:.././hal/sam3u1c/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 317:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 318:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 319:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 320:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("sev");
 321:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 322:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 323:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 324:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 325:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 326:.././hal/sam3u1c/inc/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 327:.././hal/sam3u1c/inc/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 328:.././hal/sam3u1c/inc/core_cmInstr.h ****     memory, after the instruction has been completed.
 329:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 330:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 331:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 332:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("isb");
 333:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 334:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 335:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 336:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 337:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 338:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 339:.././hal/sam3u1c/inc/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 340:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 341:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 342:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 343:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("dsb");
 344:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 345:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 346:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 347:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Memory Barrier
 348:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 349:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 350:.././hal/sam3u1c/inc/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 351:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 352:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
 353:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 354:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("dmb");
 237              	 .loc 4 354 3
 238              	 .syntax unified
 239              	
 240 001c BFF35F8F 	 dmb
 241              	
 242              	 .thumb
 243              	 .syntax unified
 244              	.LBE21:
 245              	.LBE20:
 151:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	cpu_irq_disable();
 246              	 .loc 2 151 2
 247 0020 044B     	 ldr r3,.L13
 248 0022 0022     	 movs r2,#0
 249 0024 1A70     	 strb r2,[r3]
 152:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	return flags;
 250              	 .loc 2 152 9
 251 0026 7B68     	 ldr r3,[r7,#4]
 153:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** }
 252              	 .loc 2 153 1
 253 0028 1846     	 mov r0,r3
 254 002a 0C37     	 adds r7,r7,#12
 255              	.LCFI15:
 256              	 .cfi_def_cfa_offset 4
 257 002c BD46     	 mov sp,r7
 258              	.LCFI16:
 259              	 .cfi_def_cfa_register 13
 260              	 
 261 002e 80BC     	 pop {r7}
 262              	.LCFI17:
 263              	 .cfi_restore 7
 264              	 .cfi_def_cfa_offset 0
 265 0030 7047     	 bx lr
 266              	.L14:
 267 0032 00BF     	 .align 2
 268              	.L13:
 269 0034 00000000 	 .word g_interrupt_enabled
 270              	 .cfi_endproc
 271              	.LFE59:
 273              	 .section .text.cpu_irq_is_enabled_flags,"ax",%progbits
 274              	 .align 1
 275              	 .syntax unified
 276              	 .thumb
 277              	 .thumb_func
 278              	 .fpu softvfp
 280              	cpu_irq_is_enabled_flags:
 281              	.LFB60:
 154:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 155:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
 156:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** {
 282              	 .loc 2 156 1
 283              	 .cfi_startproc
 284              	 
 285              	 
 286              	 
 287 0000 80B4     	 push {r7}
 288              	.LCFI18:
 289              	 .cfi_def_cfa_offset 4
 290              	 .cfi_offset 7,-4
 291 0002 83B0     	 sub sp,sp,#12
 292              	.LCFI19:
 293              	 .cfi_def_cfa_offset 16
 294 0004 00AF     	 add r7,sp,#0
 295              	.LCFI20:
 296              	 .cfi_def_cfa_register 7
 297 0006 7860     	 str r0,[r7,#4]
 157:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	return (flags);
 298              	 .loc 2 157 9
 299 0008 7B68     	 ldr r3,[r7,#4]
 300 000a 002B     	 cmp r3,#0
 301 000c 14BF     	 ite ne
 302 000e 0123     	 movne r3,#1
 303 0010 0023     	 moveq r3,#0
 304 0012 DBB2     	 uxtb r3,r3
 158:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** }
 305              	 .loc 2 158 1
 306 0014 1846     	 mov r0,r3
 307 0016 0C37     	 adds r7,r7,#12
 308              	.LCFI21:
 309              	 .cfi_def_cfa_offset 4
 310 0018 BD46     	 mov sp,r7
 311              	.LCFI22:
 312              	 .cfi_def_cfa_register 13
 313              	 
 314 001a 80BC     	 pop {r7}
 315              	.LCFI23:
 316              	 .cfi_restore 7
 317              	 .cfi_def_cfa_offset 0
 318 001c 7047     	 bx lr
 319              	 .cfi_endproc
 320              	.LFE60:
 322              	 .section .text.cpu_irq_restore,"ax",%progbits
 323              	 .align 1
 324              	 .syntax unified
 325              	 .thumb
 326              	 .thumb_func
 327              	 .fpu softvfp
 329              	cpu_irq_restore:
 330              	.LFB61:
 159:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 160:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** static inline void cpu_irq_restore(irqflags_t flags)
 161:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** {
 331              	 .loc 2 161 1
 332              	 .cfi_startproc
 333              	 
 334              	 
 335 0000 80B5     	 push {r7,lr}
 336              	.LCFI24:
 337              	 .cfi_def_cfa_offset 8
 338              	 .cfi_offset 7,-8
 339              	 .cfi_offset 14,-4
 340 0002 82B0     	 sub sp,sp,#8
 341              	.LCFI25:
 342              	 .cfi_def_cfa_offset 16
 343 0004 00AF     	 add r7,sp,#0
 344              	.LCFI26:
 345              	 .cfi_def_cfa_register 7
 346 0006 7860     	 str r0,[r7,#4]
 162:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	if (cpu_irq_is_enabled_flags(flags))
 347              	 .loc 2 162 6
 348 0008 7868     	 ldr r0,[r7,#4]
 349 000a 074B     	 ldr r3,.L20
 350 000c 9847     	 blx r3
 351              	.LVL0:
 352 000e 0346     	 mov r3,r0
 353              	 .loc 2 162 5
 354 0010 002B     	 cmp r3,#0
 355 0012 05D0     	 beq .L19
 163:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 		cpu_irq_enable();
 356              	 .loc 2 163 3
 357 0014 054B     	 ldr r3,.L20+4
 358 0016 0122     	 movs r2,#1
 359 0018 1A70     	 strb r2,[r3]
 360              	.LBB22:
 361              	.LBB23:
 362              	 .loc 4 354 3
 363              	 .syntax unified
 364              	
 365 001a BFF35F8F 	 dmb
 366              	
 367              	 .thumb
 368              	 .syntax unified
 369              	.LBE23:
 370              	.LBE22:
 371              	.LBB24:
 372              	.LBB25:
 317:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 373              	 .loc 3 317 3
 374              	 .syntax unified
 375              	
 376 001e 62B6     	 cpsie i
 377              	
 378              	 .thumb
 379              	 .syntax unified
 380              	.L19:
 381              	.LBE25:
 382              	.LBE24:
 164:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** }
 383              	 .loc 2 164 1
 384 0020 00BF     	 nop
 385 0022 0837     	 adds r7,r7,#8
 386              	.LCFI27:
 387              	 .cfi_def_cfa_offset 8
 388 0024 BD46     	 mov sp,r7
 389              	.LCFI28:
 390              	 .cfi_def_cfa_register 13
 391              	 
 392 0026 80BD     	 pop {r7,pc}
 393              	.L21:
 394              	 .align 2
 395              	.L20:
 396 0028 00000000 	 .word cpu_irq_is_enabled_flags
 397 002c 00000000 	 .word g_interrupt_enabled
 398              	 .cfi_endproc
 399              	.LFE61:
 401              	 .section .text.sleepmgr_lock_mode,"ax",%progbits
 402              	 .align 1
 403              	 .syntax unified
 404              	 .thumb
 405              	 .thumb_func
 406              	 .fpu softvfp
 408              	sleepmgr_lock_mode:
 409              	.LFB134:
 410              	 .file 5 ".././hal/sam3u1c/inc/sleepmgr.h"
   1:.././hal/sam3u1c/inc/sleepmgr.h **** /**
   2:.././hal/sam3u1c/inc/sleepmgr.h ****  * \file
   3:.././hal/sam3u1c/inc/sleepmgr.h ****  *
   4:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Sleep manager
   5:.././hal/sam3u1c/inc/sleepmgr.h ****  *
   6:.././hal/sam3u1c/inc/sleepmgr.h ****  * Copyright (c) 2010 - 2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sleepmgr.h ****  *
   8:.././hal/sam3u1c/inc/sleepmgr.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  10:.././hal/sam3u1c/inc/sleepmgr.h ****  * \page License
  11:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  12:.././hal/sam3u1c/inc/sleepmgr.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sleepmgr.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  15:.././hal/sam3u1c/inc/sleepmgr.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sleepmgr.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  18:.././hal/sam3u1c/inc/sleepmgr.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sleepmgr.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sleepmgr.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  22:.././hal/sam3u1c/inc/sleepmgr.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sleepmgr.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  25:.././hal/sam3u1c/inc/sleepmgr.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sleepmgr.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  28:.././hal/sam3u1c/inc/sleepmgr.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sleepmgr.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sleepmgr.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sleepmgr.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sleepmgr.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sleepmgr.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sleepmgr.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sleepmgr.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sleepmgr.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sleepmgr.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sleepmgr.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  40:.././hal/sam3u1c/inc/sleepmgr.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  42:.././hal/sam3u1c/inc/sleepmgr.h ****  */
  43:.././hal/sam3u1c/inc/sleepmgr.h **** #ifndef SLEEPMGR_H
  44:.././hal/sam3u1c/inc/sleepmgr.h **** #define SLEEPMGR_H
  45:.././hal/sam3u1c/inc/sleepmgr.h **** 
  46:.././hal/sam3u1c/inc/sleepmgr.h **** #include <compiler.h>
  47:.././hal/sam3u1c/inc/sleepmgr.h **** #include <parts.h>
  48:.././hal/sam3u1c/inc/sleepmgr.h **** 
  49:.././hal/sam3u1c/inc/sleepmgr.h **** #if (SAM3S || SAM3U || SAM3N || SAM3XA || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM
  50:.././hal/sam3u1c/inc/sleepmgr.h **** # include "sam/sleepmgr.h"
  51:.././hal/sam3u1c/inc/sleepmgr.h **** #elif XMEGA
  52:.././hal/sam3u1c/inc/sleepmgr.h **** # include "xmega/sleepmgr.h"
  53:.././hal/sam3u1c/inc/sleepmgr.h **** #elif UC3
  54:.././hal/sam3u1c/inc/sleepmgr.h **** # include "uc3/sleepmgr.h"
  55:.././hal/sam3u1c/inc/sleepmgr.h **** #elif SAM4L
  56:.././hal/sam3u1c/inc/sleepmgr.h **** # include "sam4l/sleepmgr.h"
  57:.././hal/sam3u1c/inc/sleepmgr.h **** #elif MEGA
  58:.././hal/sam3u1c/inc/sleepmgr.h **** # include "mega/sleepmgr.h"
  59:.././hal/sam3u1c/inc/sleepmgr.h **** #elif (SAMD20 || SAMD21 || SAMR21 || SAMD11)
  60:.././hal/sam3u1c/inc/sleepmgr.h **** # include "samd/sleepmgr.h"
  61:.././hal/sam3u1c/inc/sleepmgr.h **** #else
  62:.././hal/sam3u1c/inc/sleepmgr.h **** # error Unsupported device.
  63:.././hal/sam3u1c/inc/sleepmgr.h **** #endif
  64:.././hal/sam3u1c/inc/sleepmgr.h **** 
  65:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef __cplusplus
  66:.././hal/sam3u1c/inc/sleepmgr.h **** extern "C" {
  67:.././hal/sam3u1c/inc/sleepmgr.h **** #endif
  68:.././hal/sam3u1c/inc/sleepmgr.h **** 
  69:.././hal/sam3u1c/inc/sleepmgr.h **** /**
  70:.././hal/sam3u1c/inc/sleepmgr.h ****  * \defgroup sleepmgr_group Sleep manager
  71:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  72:.././hal/sam3u1c/inc/sleepmgr.h ****  * The sleep manager is a service for ensuring that the device is not put to
  73:.././hal/sam3u1c/inc/sleepmgr.h ****  * sleep in deeper sleep modes than the system (e.g., peripheral drivers,
  74:.././hal/sam3u1c/inc/sleepmgr.h ****  * services or the application) allows at any given time.
  75:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  76:.././hal/sam3u1c/inc/sleepmgr.h ****  * It is based on the use of lock counting for the individual sleep modes, and
  77:.././hal/sam3u1c/inc/sleepmgr.h ****  * will put the device to sleep in the shallowest sleep mode that has a non-zero
  78:.././hal/sam3u1c/inc/sleepmgr.h ****  * lock count. The drivers/services/application can change these counts by use
  79:.././hal/sam3u1c/inc/sleepmgr.h ****  * of \ref sleepmgr_lock_mode and \ref sleepmgr_unlock_mode.
  80:.././hal/sam3u1c/inc/sleepmgr.h ****  * Refer to \ref sleepmgr_mode for a list of the sleep modes available for
  81:.././hal/sam3u1c/inc/sleepmgr.h ****  * locking, and the device datasheet for information on their effect.
  82:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  83:.././hal/sam3u1c/inc/sleepmgr.h ****  * The application must supply the file \ref conf_sleepmgr.h.
  84:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  85:.././hal/sam3u1c/inc/sleepmgr.h ****  * For the sleep manager to be enabled, the symbol \ref CONFIG_SLEEPMGR_ENABLE
  86:.././hal/sam3u1c/inc/sleepmgr.h ****  * must be defined, e.g., in \ref conf_sleepmgr.h. If this symbol is not
  87:.././hal/sam3u1c/inc/sleepmgr.h ****  * defined, the functions are replaced with dummy functions and no RAM is used.
  88:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  89:.././hal/sam3u1c/inc/sleepmgr.h ****  * @{
  90:.././hal/sam3u1c/inc/sleepmgr.h ****  */
  91:.././hal/sam3u1c/inc/sleepmgr.h **** 
  92:.././hal/sam3u1c/inc/sleepmgr.h **** /**
  93:.././hal/sam3u1c/inc/sleepmgr.h ****  * \def CONFIG_SLEEPMGR_ENABLE
  94:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Configuration symbol for enabling the sleep manager
  95:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  96:.././hal/sam3u1c/inc/sleepmgr.h ****  * If this symbol is not defined, the functions of this service are replaced
  97:.././hal/sam3u1c/inc/sleepmgr.h ****  * with dummy functions. This is useful for reducing code size and execution
  98:.././hal/sam3u1c/inc/sleepmgr.h ****  * time if the sleep manager is not needed in the application.
  99:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 100:.././hal/sam3u1c/inc/sleepmgr.h ****  * This symbol may be defined in \ref conf_sleepmgr.h.
 101:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 102:.././hal/sam3u1c/inc/sleepmgr.h **** #if defined(__DOXYGEN__) && !defined(CONFIG_SLEEPMGR_ENABLE)
 103:.././hal/sam3u1c/inc/sleepmgr.h **** #  define CONFIG_SLEEPMGR_ENABLE
 104:.././hal/sam3u1c/inc/sleepmgr.h **** #endif
 105:.././hal/sam3u1c/inc/sleepmgr.h **** 
 106:.././hal/sam3u1c/inc/sleepmgr.h **** /**
 107:.././hal/sam3u1c/inc/sleepmgr.h ****  * \enum sleepmgr_mode
 108:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Sleep mode locks
 109:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 110:.././hal/sam3u1c/inc/sleepmgr.h ****  * Identifiers for the different sleep mode locks.
 111:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 112:.././hal/sam3u1c/inc/sleepmgr.h **** 
 113:.././hal/sam3u1c/inc/sleepmgr.h **** /**
 114:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Initialize the lock counts
 115:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 116:.././hal/sam3u1c/inc/sleepmgr.h ****  * Sets all lock counts to 0, except the very last one, which is set to 1. This
 117:.././hal/sam3u1c/inc/sleepmgr.h ****  * is done to simplify the algorithm for finding the deepest allowable sleep
 118:.././hal/sam3u1c/inc/sleepmgr.h ****  * mode in \ref sleepmgr_enter_sleep.
 119:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 120:.././hal/sam3u1c/inc/sleepmgr.h **** static inline void sleepmgr_init(void)
 121:.././hal/sam3u1c/inc/sleepmgr.h **** {
 122:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 123:.././hal/sam3u1c/inc/sleepmgr.h **** 	uint8_t i;
 124:.././hal/sam3u1c/inc/sleepmgr.h **** 
 125:.././hal/sam3u1c/inc/sleepmgr.h **** 	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
 126:.././hal/sam3u1c/inc/sleepmgr.h **** 		sleepmgr_locks[i] = 0;
 127:.././hal/sam3u1c/inc/sleepmgr.h **** 	}
 128:.././hal/sam3u1c/inc/sleepmgr.h **** 	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
 129:.././hal/sam3u1c/inc/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 130:.././hal/sam3u1c/inc/sleepmgr.h **** }
 131:.././hal/sam3u1c/inc/sleepmgr.h **** 
 132:.././hal/sam3u1c/inc/sleepmgr.h **** /**
 133:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Increase lock count for a sleep mode
 134:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 135:.././hal/sam3u1c/inc/sleepmgr.h ****  * Increases the lock count for \a mode to ensure that the sleep manager does
 136:.././hal/sam3u1c/inc/sleepmgr.h ****  * not put the device to sleep in the deeper sleep modes.
 137:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 138:.././hal/sam3u1c/inc/sleepmgr.h ****  * \param mode Sleep mode to lock.
 139:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 140:.././hal/sam3u1c/inc/sleepmgr.h **** static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
 141:.././hal/sam3u1c/inc/sleepmgr.h **** {
 411              	 .loc 5 141 1
 412              	 .cfi_startproc
 413              	 
 414              	 
 415 0000 80B5     	 push {r7,lr}
 416              	.LCFI29:
 417              	 .cfi_def_cfa_offset 8
 418              	 .cfi_offset 7,-8
 419              	 .cfi_offset 14,-4
 420 0002 84B0     	 sub sp,sp,#16
 421              	.LCFI30:
 422              	 .cfi_def_cfa_offset 24
 423 0004 00AF     	 add r7,sp,#0
 424              	.LCFI31:
 425              	 .cfi_def_cfa_register 7
 426 0006 0346     	 mov r3,r0
 427 0008 FB71     	 strb r3,[r7,#7]
 142:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 143:.././hal/sam3u1c/inc/sleepmgr.h **** 	irqflags_t flags;
 144:.././hal/sam3u1c/inc/sleepmgr.h **** 
 145:.././hal/sam3u1c/inc/sleepmgr.h **** 	Assert(sleepmgr_locks[mode] < 0xff);
 146:.././hal/sam3u1c/inc/sleepmgr.h **** 
 147:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Enter a critical section
 148:.././hal/sam3u1c/inc/sleepmgr.h **** 	flags = cpu_irq_save();
 428              	 .loc 5 148 10
 429 000a 084B     	 ldr r3,.L23
 430 000c 9847     	 blx r3
 431              	.LVL1:
 432 000e F860     	 str r0,[r7,#12]
 149:.././hal/sam3u1c/inc/sleepmgr.h **** 
 150:.././hal/sam3u1c/inc/sleepmgr.h **** 	++sleepmgr_locks[mode];
 433              	 .loc 5 150 18
 434 0010 FB79     	 ldrb r3,[r7,#7]
 435 0012 074A     	 ldr r2,.L23+4
 436 0014 D25C     	 ldrb r2,[r2,r3]
 437              	 .loc 5 150 2
 438 0016 0132     	 adds r2,r2,#1
 439 0018 D1B2     	 uxtb r1,r2
 440 001a 054A     	 ldr r2,.L23+4
 441 001c D154     	 strb r1,[r2,r3]
 151:.././hal/sam3u1c/inc/sleepmgr.h **** 
 152:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Leave the critical section
 153:.././hal/sam3u1c/inc/sleepmgr.h **** 	cpu_irq_restore(flags);
 442              	 .loc 5 153 2
 443 001e F868     	 ldr r0,[r7,#12]
 444 0020 044B     	 ldr r3,.L23+8
 445 0022 9847     	 blx r3
 446              	.LVL2:
 154:.././hal/sam3u1c/inc/sleepmgr.h **** #else
 155:.././hal/sam3u1c/inc/sleepmgr.h **** 	UNUSED(mode);
 156:.././hal/sam3u1c/inc/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 157:.././hal/sam3u1c/inc/sleepmgr.h **** }
 447              	 .loc 5 157 1
 448 0024 00BF     	 nop
 449 0026 1037     	 adds r7,r7,#16
 450              	.LCFI32:
 451              	 .cfi_def_cfa_offset 8
 452 0028 BD46     	 mov sp,r7
 453              	.LCFI33:
 454              	 .cfi_def_cfa_register 13
 455              	 
 456 002a 80BD     	 pop {r7,pc}
 457              	.L24:
 458              	 .align 2
 459              	.L23:
 460 002c 00000000 	 .word cpu_irq_save
 461 0030 00000000 	 .word sleepmgr_locks
 462 0034 00000000 	 .word cpu_irq_restore
 463              	 .cfi_endproc
 464              	.LFE134:
 466              	 .section .text.sleepmgr_unlock_mode,"ax",%progbits
 467              	 .align 1
 468              	 .syntax unified
 469              	 .thumb
 470              	 .thumb_func
 471              	 .fpu softvfp
 473              	sleepmgr_unlock_mode:
 474              	.LFB135:
 158:.././hal/sam3u1c/inc/sleepmgr.h **** 
 159:.././hal/sam3u1c/inc/sleepmgr.h **** /**
 160:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Decrease lock count for a sleep mode
 161:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 162:.././hal/sam3u1c/inc/sleepmgr.h ****  * Decreases the lock count for \a mode. If the lock count reaches 0, the sleep
 163:.././hal/sam3u1c/inc/sleepmgr.h ****  * manager can put the device to sleep in the deeper sleep modes.
 164:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 165:.././hal/sam3u1c/inc/sleepmgr.h ****  * \param mode Sleep mode to unlock.
 166:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 167:.././hal/sam3u1c/inc/sleepmgr.h **** static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
 168:.././hal/sam3u1c/inc/sleepmgr.h **** {
 475              	 .loc 5 168 1
 476              	 .cfi_startproc
 477              	 
 478              	 
 479 0000 80B5     	 push {r7,lr}
 480              	.LCFI34:
 481              	 .cfi_def_cfa_offset 8
 482              	 .cfi_offset 7,-8
 483              	 .cfi_offset 14,-4
 484 0002 84B0     	 sub sp,sp,#16
 485              	.LCFI35:
 486              	 .cfi_def_cfa_offset 24
 487 0004 00AF     	 add r7,sp,#0
 488              	.LCFI36:
 489              	 .cfi_def_cfa_register 7
 490 0006 0346     	 mov r3,r0
 491 0008 FB71     	 strb r3,[r7,#7]
 169:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 170:.././hal/sam3u1c/inc/sleepmgr.h **** 	irqflags_t flags;
 171:.././hal/sam3u1c/inc/sleepmgr.h **** 
 172:.././hal/sam3u1c/inc/sleepmgr.h **** 	Assert(sleepmgr_locks[mode]);
 173:.././hal/sam3u1c/inc/sleepmgr.h **** 
 174:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Enter a critical section
 175:.././hal/sam3u1c/inc/sleepmgr.h **** 	flags = cpu_irq_save();
 492              	 .loc 5 175 10
 493 000a 084B     	 ldr r3,.L26
 494 000c 9847     	 blx r3
 495              	.LVL3:
 496 000e F860     	 str r0,[r7,#12]
 176:.././hal/sam3u1c/inc/sleepmgr.h **** 
 177:.././hal/sam3u1c/inc/sleepmgr.h **** 	--sleepmgr_locks[mode];
 497              	 .loc 5 177 18
 498 0010 FB79     	 ldrb r3,[r7,#7]
 499 0012 074A     	 ldr r2,.L26+4
 500 0014 D25C     	 ldrb r2,[r2,r3]
 501              	 .loc 5 177 2
 502 0016 013A     	 subs r2,r2,#1
 503 0018 D1B2     	 uxtb r1,r2
 504 001a 054A     	 ldr r2,.L26+4
 505 001c D154     	 strb r1,[r2,r3]
 178:.././hal/sam3u1c/inc/sleepmgr.h **** 
 179:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Leave the critical section
 180:.././hal/sam3u1c/inc/sleepmgr.h **** 	cpu_irq_restore(flags);
 506              	 .loc 5 180 2
 507 001e F868     	 ldr r0,[r7,#12]
 508 0020 044B     	 ldr r3,.L26+8
 509 0022 9847     	 blx r3
 510              	.LVL4:
 181:.././hal/sam3u1c/inc/sleepmgr.h **** #else
 182:.././hal/sam3u1c/inc/sleepmgr.h **** 	UNUSED(mode);
 183:.././hal/sam3u1c/inc/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 184:.././hal/sam3u1c/inc/sleepmgr.h **** }
 511              	 .loc 5 184 1
 512 0024 00BF     	 nop
 513 0026 1037     	 adds r7,r7,#16
 514              	.LCFI37:
 515              	 .cfi_def_cfa_offset 8
 516 0028 BD46     	 mov sp,r7
 517              	.LCFI38:
 518              	 .cfi_def_cfa_register 13
 519              	 
 520 002a 80BD     	 pop {r7,pc}
 521              	.L27:
 522              	 .align 2
 523              	.L26:
 524 002c 00000000 	 .word cpu_irq_save
 525 0030 00000000 	 .word sleepmgr_locks
 526 0034 00000000 	 .word cpu_irq_restore
 527              	 .cfi_endproc
 528              	.LFE135:
 530              	 .section .bss.udd_b_idle,"aw",%nobits
 533              	udd_b_idle:
 534 0000 00       	 .space 1
 535              	 .section .text.udd_sleep_mode,"ax",%progbits
 536              	 .align 1
 537              	 .syntax unified
 538              	 .thumb
 539              	 .thumb_func
 540              	 .fpu softvfp
 542              	udd_sleep_mode:
 543              	.LFB138:
 544              	 .file 6 ".././hal/sam3u1c/udphs_device.c"
   1:.././hal/sam3u1c/udphs_device.c **** /**
   2:.././hal/sam3u1c/udphs_device.c ****  * \file
   3:.././hal/sam3u1c/udphs_device.c ****  *
   4:.././hal/sam3u1c/udphs_device.c ****  * \brief USB Device Driver for UDPHS. Compliant with common UDD driver.
   5:.././hal/sam3u1c/udphs_device.c ****  *
   6:.././hal/sam3u1c/udphs_device.c ****  * Copyright (c) 2012 - 2013 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/udphs_device.c ****  *
   8:.././hal/sam3u1c/udphs_device.c ****  * \asf_license_start
   9:.././hal/sam3u1c/udphs_device.c ****  *
  10:.././hal/sam3u1c/udphs_device.c ****  * \page License
  11:.././hal/sam3u1c/udphs_device.c ****  *
  12:.././hal/sam3u1c/udphs_device.c ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/udphs_device.c ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/udphs_device.c ****  *
  15:.././hal/sam3u1c/udphs_device.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/udphs_device.c ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/udphs_device.c ****  *
  18:.././hal/sam3u1c/udphs_device.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/udphs_device.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/udphs_device.c ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/udphs_device.c ****  *
  22:.././hal/sam3u1c/udphs_device.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/udphs_device.c ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/udphs_device.c ****  *
  25:.././hal/sam3u1c/udphs_device.c ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/udphs_device.c ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/udphs_device.c ****  *
  28:.././hal/sam3u1c/udphs_device.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/udphs_device.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/udphs_device.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/udphs_device.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/udphs_device.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/udphs_device.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/udphs_device.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/udphs_device.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/udphs_device.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/udphs_device.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/udphs_device.c ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/udphs_device.c ****  *
  40:.././hal/sam3u1c/udphs_device.c ****  * \asf_license_stop
  41:.././hal/sam3u1c/udphs_device.c ****  *
  42:.././hal/sam3u1c/udphs_device.c ****  */
  43:.././hal/sam3u1c/udphs_device.c **** 
  44:.././hal/sam3u1c/udphs_device.c **** #include "conf_usb.h"
  45:.././hal/sam3u1c/udphs_device.c **** #include "sysclk.h"
  46:.././hal/sam3u1c/udphs_device.c **** #include "udd.h"
  47:.././hal/sam3u1c/udphs_device.c **** #include "udphs_device.h"
  48:.././hal/sam3u1c/udphs_device.c **** #include <string.h>
  49:.././hal/sam3u1c/udphs_device.c **** 
  50:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_NO_SLEEP_MGR
  51:.././hal/sam3u1c/udphs_device.c **** #  include "sleep.h"
  52:.././hal/sam3u1c/udphs_device.c **** #  include "sleepmgr.h"
  53:.././hal/sam3u1c/udphs_device.c **** #endif
  54:.././hal/sam3u1c/udphs_device.c **** 
  55:.././hal/sam3u1c/udphs_device.c **** #if !(SAM3U)
  56:.././hal/sam3u1c/udphs_device.c **** #  error The current UDPHS Device Driver supports only SAM3U.
  57:.././hal/sam3u1c/udphs_device.c **** #endif
  58:.././hal/sam3u1c/udphs_device.c **** 
  59:.././hal/sam3u1c/udphs_device.c **** #ifdef USB_DEVICE_LOW_SPEED
  60:.././hal/sam3u1c/udphs_device.c **** #  error The Low speed mode is not supported on this part, please remove USB_DEVICE_LOW_SPEED in co
  61:.././hal/sam3u1c/udphs_device.c **** #endif
  62:.././hal/sam3u1c/udphs_device.c **** 
  63:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_USB_INT_FUN
  64:.././hal/sam3u1c/udphs_device.c **** #  define UDD_USB_INT_FUN UDPHS_Handler
  65:.././hal/sam3u1c/udphs_device.c **** #endif
  66:.././hal/sam3u1c/udphs_device.c **** 
  67:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_USB_INT_LEVEL
  68:.././hal/sam3u1c/udphs_device.c **** #  define UDD_USB_INT_LEVEL 5 // By default USB interrupt have low priority
  69:.././hal/sam3u1c/udphs_device.c **** #endif
  70:.././hal/sam3u1c/udphs_device.c **** 
  71:.././hal/sam3u1c/udphs_device.c **** #ifndef UDC_VBUS_EVENT
  72:.././hal/sam3u1c/udphs_device.c **** #  define UDC_VBUS_EVENT(present)
  73:.././hal/sam3u1c/udphs_device.c **** #endif
  74:.././hal/sam3u1c/udphs_device.c **** 
  75:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_USED(ep)      (USB_DEVICE_MAX_EP >= ep)
  76:.././hal/sam3u1c/udphs_device.c **** 
  77:.././hal/sam3u1c/udphs_device.c **** // for debug text
  78:.././hal/sam3u1c/udphs_device.c **** //#define dbg_print printf
  79:.././hal/sam3u1c/udphs_device.c **** #define dbg_print(...)
  80:.././hal/sam3u1c/udphs_device.c **** 
  81:.././hal/sam3u1c/udphs_device.c **** /**
  82:.././hal/sam3u1c/udphs_device.c ****  * \ingroup udd_group
  83:.././hal/sam3u1c/udphs_device.c ****  * \defgroup udd_udphs_group USB Device High-Speed Port (UDPHS)
  84:.././hal/sam3u1c/udphs_device.c ****  *
  85:.././hal/sam3u1c/udphs_device.c ****  * \section UDPHS_CONF UDPHS Custom configuration
  86:.././hal/sam3u1c/udphs_device.c ****  * The following UDPHS driver configuration must be included in the conf_usb.h
  87:.././hal/sam3u1c/udphs_device.c ****  * file of the application.
  88:.././hal/sam3u1c/udphs_device.c ****  *
  89:.././hal/sam3u1c/udphs_device.c ****  * UDD_USB_INT_LEVEL<br>
  90:.././hal/sam3u1c/udphs_device.c ****  * Option to change the interrupt priority (0 to 15) by default 5 (recommended).
  91:.././hal/sam3u1c/udphs_device.c ****  *
  92:.././hal/sam3u1c/udphs_device.c ****  * UDD_USB_INT_FUN<br>
  93:.././hal/sam3u1c/udphs_device.c ****  * Option to fit interrupt function to what defined in exception table.
  94:.././hal/sam3u1c/udphs_device.c ****  *
  95:.././hal/sam3u1c/udphs_device.c ****  * UDD_ISOCHRONOUS_NB_BANK(ep)<br>
  96:.././hal/sam3u1c/udphs_device.c ****  * Feature to reduce or increase isochronous endpoints buffering (1 to 3).
  97:.././hal/sam3u1c/udphs_device.c ****  * Default value 2.
  98:.././hal/sam3u1c/udphs_device.c ****  *
  99:.././hal/sam3u1c/udphs_device.c ****  * UDD_BULK_NB_BANK(ep)<br>
 100:.././hal/sam3u1c/udphs_device.c ****  * Feature to reduce or increase bulk endpoints buffering (1 to 2).
 101:.././hal/sam3u1c/udphs_device.c ****  * Default value 2.
 102:.././hal/sam3u1c/udphs_device.c ****  *
 103:.././hal/sam3u1c/udphs_device.c ****  * UDD_INTERRUPT_NB_BANK(ep)<br>
 104:.././hal/sam3u1c/udphs_device.c ****  * Feature to reduce or increase interrupt endpoints buffering (1 to 2).
 105:.././hal/sam3u1c/udphs_device.c ****  * Default value 1.
 106:.././hal/sam3u1c/udphs_device.c ****  *
 107:.././hal/sam3u1c/udphs_device.c ****  * \section Callbacks management
 108:.././hal/sam3u1c/udphs_device.c ****  * The USB driver is fully managed by interrupt and does not request periodic
 109:.././hal/sam3u1c/udphs_device.c ****  * task. Thereby, the USB events use callbacks to transfer the information.
 110:.././hal/sam3u1c/udphs_device.c ****  * The callbacks are declared in static during compilation or in variable during
 111:.././hal/sam3u1c/udphs_device.c ****  * code execution.
 112:.././hal/sam3u1c/udphs_device.c ****  *
 113:.././hal/sam3u1c/udphs_device.c ****  * Static declarations defined in conf_usb.h:
 114:.././hal/sam3u1c/udphs_device.c ****  * - UDC_VBUS_EVENT(bool b_present)<br>
 115:.././hal/sam3u1c/udphs_device.c ****  *   To signal Vbus level change
 116:.././hal/sam3u1c/udphs_device.c ****  * - UDC_SUSPEND_EVENT()<br>
 117:.././hal/sam3u1c/udphs_device.c ****  *   Called when USB bus enter in suspend mode
 118:.././hal/sam3u1c/udphs_device.c ****  * - UDC_RESUME_EVENT()<br>
 119:.././hal/sam3u1c/udphs_device.c ****  *   Called when USB bus is wakeup
 120:.././hal/sam3u1c/udphs_device.c ****  * - UDC_SOF_EVENT()<br>
 121:.././hal/sam3u1c/udphs_device.c ****  *   Called for each received SOF, Note: Each 1ms in HS/FS mode only.
 122:.././hal/sam3u1c/udphs_device.c ****  *
 123:.././hal/sam3u1c/udphs_device.c ****  * Dynamic callbacks, called "endpoint job" , are registered
 124:.././hal/sam3u1c/udphs_device.c ****  * in udd_ep_job_t structure via the following functions:
 125:.././hal/sam3u1c/udphs_device.c ****  * - udd_ep_run()<br>
 126:.././hal/sam3u1c/udphs_device.c ****  *   To call it when a transfer is finish
 127:.././hal/sam3u1c/udphs_device.c ****  * - udd_ep_wait_stall_clear()<br>
 128:.././hal/sam3u1c/udphs_device.c ****  *   To call it when a endpoint halt is disabled
 129:.././hal/sam3u1c/udphs_device.c ****  *
 130:.././hal/sam3u1c/udphs_device.c ****  * \section Power mode management
 131:.././hal/sam3u1c/udphs_device.c ****  * The Sleep modes authorized :
 132:.././hal/sam3u1c/udphs_device.c ****  * - in USB IDLE state, the UDPHS needs of USB clock and authorizes up to sleep mode WFI.
 133:.././hal/sam3u1c/udphs_device.c ****  * - in USB SUSPEND state, the UDPHS no needs USB clock and authorizes up to sleep mode WAIT.
 134:.././hal/sam3u1c/udphs_device.c ****  * @{
 135:.././hal/sam3u1c/udphs_device.c ****  */
 136:.././hal/sam3u1c/udphs_device.c **** 
 137:.././hal/sam3u1c/udphs_device.c **** // Check USB Device configuration
 138:.././hal/sam3u1c/udphs_device.c **** #ifndef USB_DEVICE_EP_CTRL_SIZE
 139:.././hal/sam3u1c/udphs_device.c **** #  error USB_DEVICE_EP_CTRL_SIZE not defined
 140:.././hal/sam3u1c/udphs_device.c **** #endif
 141:.././hal/sam3u1c/udphs_device.c **** #ifndef USB_DEVICE_MAX_EP
 142:.././hal/sam3u1c/udphs_device.c **** #  error USB_DEVICE_MAX_EP not defined
 143:.././hal/sam3u1c/udphs_device.c **** #endif
 144:.././hal/sam3u1c/udphs_device.c **** #if USB_DEVICE_MAX_EP > (UDD_MAX_PEP_NB-1) // USB_DEVICE_MAX_EP does not include control endpoint
 145:.././hal/sam3u1c/udphs_device.c **** #  error USB_DEVICE_MAX_EP is too high and not supported by this part
 146:.././hal/sam3u1c/udphs_device.c **** #endif
 147:.././hal/sam3u1c/udphs_device.c **** 
 148:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_ISO_NBANK_ERROR(ep)            \
 149:.././hal/sam3u1c/udphs_device.c **** 	( (UDD_ISOCHRONOUS_NB_BANK(ep) < 1)   \
 150:.././hal/sam3u1c/udphs_device.c **** 		|| (UDD_ISOCHRONOUS_NB_BANK(ep) > 3) )
 151:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_BULK_NBANK_ERROR(ep)           \
 152:.././hal/sam3u1c/udphs_device.c **** 	( (UDD_BULK_NB_BANK(ep) < 1) || (UDD_BULK_NB_BANK(ep) > 2) )
 153:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_INT_NBANK_ERROR(ep)            \
 154:.././hal/sam3u1c/udphs_device.c **** 	( (UDD_INTERRUPT_NB_BANK(ep) < 1) || (UDD_INTERRUPT_NB_BANK(ep) > 2) )
 155:.././hal/sam3u1c/udphs_device.c **** 
 156:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_ISO_NB_BANK_ERROR(ep)          \
 157:.././hal/sam3u1c/udphs_device.c **** 	(UDD_EP_USED(ep) && UDD_EP_ISO_NBANK_ERROR(ep))
 158:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_BULK_NB_BANK_ERROR(ep)         \
 159:.././hal/sam3u1c/udphs_device.c **** 	(UDD_EP_USED(ep) && UDD_EP_ISO_NBANK_ERROR(ep))
 160:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_INT_NB_BANK_ERROR(ep)          \
 161:.././hal/sam3u1c/udphs_device.c **** 	(UDD_EP_USED(ep) && UDD_EP_ISO_NBANK_ERROR(ep))
 162:.././hal/sam3u1c/udphs_device.c **** 
 163:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_NB_BANK_ERROR(ep, type)        \
 164:.././hal/sam3u1c/udphs_device.c **** 	(ATPASTE3(UDD_EP_, type, _NB_BANK_ERROR(ep)))
 165:.././hal/sam3u1c/udphs_device.c **** 
 166:.././hal/sam3u1c/udphs_device.c **** #define UDD_ISO_NB_BANK_ERROR \
 167:.././hal/sam3u1c/udphs_device.c **** 	(          UDD_EP_NB_BANK_ERROR( 1, ISO) \
 168:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 2, ISO) \
 169:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 3, ISO) \
 170:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 4, ISO) \
 171:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 5, ISO) \
 172:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 6, ISO) \
 173:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 7, ISO) \
 174:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 8, ISO) \
 175:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 9, ISO) \
 176:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(10, ISO) \
 177:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(11, ISO) \
 178:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(12, ISO) \
 179:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(13, ISO) \
 180:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(14, ISO) \
 181:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(15, ISO) )
 182:.././hal/sam3u1c/udphs_device.c **** #define UDD_BULK_NB_BANK_ERROR \
 183:.././hal/sam3u1c/udphs_device.c **** 	(          UDD_EP_NB_BANK_ERROR( 1, BULK) \
 184:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 2, BULK) \
 185:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 3, BULK) \
 186:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 4, BULK) \
 187:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 5, BULK) \
 188:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 6, BULK) \
 189:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 7, BULK) \
 190:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 8, BULK) \
 191:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 9, BULK) \
 192:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(10, BULK) \
 193:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(11, BULK) \
 194:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(12, BULK) \
 195:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(13, BULK) \
 196:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(14, BULK) \
 197:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(15, BULK) )
 198:.././hal/sam3u1c/udphs_device.c **** #define UDD_INTERRUPT_NB_BANK_ERROR \
 199:.././hal/sam3u1c/udphs_device.c **** 	(          UDD_EP_NB_BANK_ERROR( 1, INT) \
 200:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 2, INT) \
 201:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 3, INT) \
 202:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 4, INT) \
 203:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 5, INT) \
 204:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 6, INT) \
 205:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 7, INT) \
 206:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 8, INT) \
 207:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 9, INT) \
 208:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(10, INT) \
 209:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(11, INT) \
 210:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(12, INT) \
 211:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(13, INT) \
 212:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(14, INT) \
 213:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(15, INT) )
 214:.././hal/sam3u1c/udphs_device.c **** 
 215:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_ISOCHRONOUS_NB_BANK
 216:.././hal/sam3u1c/udphs_device.c **** # define UDD_ISOCHRONOUS_NB_BANK(ep) 2
 217:.././hal/sam3u1c/udphs_device.c **** #else
 218:.././hal/sam3u1c/udphs_device.c **** # if UDD_ISO_NB_BANK_ERROR
 219:.././hal/sam3u1c/udphs_device.c **** #  error UDD_ISOCHRONOUS_NB_BANK(ep) must be define within 1 to 3.
 220:.././hal/sam3u1c/udphs_device.c **** # endif
 221:.././hal/sam3u1c/udphs_device.c **** #endif
 222:.././hal/sam3u1c/udphs_device.c **** 
 223:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_BULK_NB_BANK
 224:.././hal/sam3u1c/udphs_device.c **** # define UDD_BULK_NB_BANK(ep) 2
 225:.././hal/sam3u1c/udphs_device.c **** #else
 226:.././hal/sam3u1c/udphs_device.c **** # if UDD_BULK_NB_BANK_ERROR
 227:.././hal/sam3u1c/udphs_device.c **** #  error UDD_BULK_NB_BANK must be define with 1 or 2.
 228:.././hal/sam3u1c/udphs_device.c **** # endif
 229:.././hal/sam3u1c/udphs_device.c **** #endif
 230:.././hal/sam3u1c/udphs_device.c **** 
 231:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_INTERRUPT_NB_BANK
 232:.././hal/sam3u1c/udphs_device.c **** # define UDD_INTERRUPT_NB_BANK(ep) 1
 233:.././hal/sam3u1c/udphs_device.c **** #else
 234:.././hal/sam3u1c/udphs_device.c **** # if UDD_INTERRUPT_NB_BANK_ERROR
 235:.././hal/sam3u1c/udphs_device.c **** #  error UDD_INTERRUPT_NB_BANK must be define with 1 or 2.
 236:.././hal/sam3u1c/udphs_device.c **** # endif
 237:.././hal/sam3u1c/udphs_device.c **** #endif
 238:.././hal/sam3u1c/udphs_device.c **** 
 239:.././hal/sam3u1c/udphs_device.c **** 
 240:.././hal/sam3u1c/udphs_device.c **** /**
 241:.././hal/sam3u1c/udphs_device.c ****  * \name Power management routine.
 242:.././hal/sam3u1c/udphs_device.c ****  */
 243:.././hal/sam3u1c/udphs_device.c **** //@{
 244:.././hal/sam3u1c/udphs_device.c **** 
 245:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_NO_SLEEP_MGR
 246:.././hal/sam3u1c/udphs_device.c **** 
 247:.././hal/sam3u1c/udphs_device.c **** //! Definition of sleep levels
 248:.././hal/sam3u1c/udphs_device.c **** #define UDPHS_SLEEP_MODE_USB_SUSPEND  SLEEPMGR_WAIT_FAST
 249:.././hal/sam3u1c/udphs_device.c **** #define UDPHS_SLEEP_MODE_USB_IDLE     SLEEPMGR_SLEEP_WFI
 250:.././hal/sam3u1c/udphs_device.c **** 
 251:.././hal/sam3u1c/udphs_device.c **** //! State of USB line
 252:.././hal/sam3u1c/udphs_device.c **** static bool udd_b_idle;
 253:.././hal/sam3u1c/udphs_device.c **** 
 254:.././hal/sam3u1c/udphs_device.c **** 
 255:.././hal/sam3u1c/udphs_device.c **** /*! \brief Authorize or not the CPU powerdown mode
 256:.././hal/sam3u1c/udphs_device.c ****  *
 257:.././hal/sam3u1c/udphs_device.c ****  * \param b_enable   true to authorize idle mode
 258:.././hal/sam3u1c/udphs_device.c ****  */
 259:.././hal/sam3u1c/udphs_device.c **** static void udd_sleep_mode(bool b_idle)
 260:.././hal/sam3u1c/udphs_device.c **** {
 545              	 .loc 6 260 1
 546              	 .cfi_startproc
 547              	 
 548              	 
 549 0000 80B5     	 push {r7,lr}
 550              	.LCFI39:
 551              	 .cfi_def_cfa_offset 8
 552              	 .cfi_offset 7,-8
 553              	 .cfi_offset 14,-4
 554 0002 82B0     	 sub sp,sp,#8
 555              	.LCFI40:
 556              	 .cfi_def_cfa_offset 16
 557 0004 00AF     	 add r7,sp,#0
 558              	.LCFI41:
 559              	 .cfi_def_cfa_register 7
 560 0006 0346     	 mov r3,r0
 561 0008 FB71     	 strb r3,[r7,#7]
 261:.././hal/sam3u1c/udphs_device.c **** 	if (!b_idle && udd_b_idle) {
 562              	 .loc 6 261 6
 563 000a FB79     	 ldrb r3,[r7,#7]
 564 000c 83F00103 	 eor r3,r3,#1
 565 0010 DBB2     	 uxtb r3,r3
 566              	 .loc 6 261 5
 567 0012 002B     	 cmp r3,#0
 568 0014 06D0     	 beq .L29
 569              	 .loc 6 261 14 discriminator 1
 570 0016 0D4B     	 ldr r3,.L31
 571 0018 1B78     	 ldrb r3,[r3]
 572 001a 002B     	 cmp r3,#0
 573 001c 02D0     	 beq .L29
 262:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("_S ");
 263:.././hal/sam3u1c/udphs_device.c **** 		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
 574              	 .loc 6 263 3
 575 001e 0220     	 movs r0,#2
 576 0020 0B4B     	 ldr r3,.L31+4
 577 0022 9847     	 blx r3
 578              	.LVL5:
 579              	.L29:
 264:.././hal/sam3u1c/udphs_device.c **** 	}
 265:.././hal/sam3u1c/udphs_device.c **** 	if (b_idle && !udd_b_idle) {
 580              	 .loc 6 265 5
 581 0024 FB79     	 ldrb r3,[r7,#7]
 582 0026 002B     	 cmp r3,#0
 583 0028 09D0     	 beq .L30
 584              	 .loc 6 265 16 discriminator 1
 585 002a 084B     	 ldr r3,.L31
 586 002c 1B78     	 ldrb r3,[r3]
 587 002e 83F00103 	 eor r3,r3,#1
 588 0032 DBB2     	 uxtb r3,r3
 589              	 .loc 6 265 13 discriminator 1
 590 0034 002B     	 cmp r3,#0
 591 0036 02D0     	 beq .L30
 266:.././hal/sam3u1c/udphs_device.c **** 		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
 592              	 .loc 6 266 3
 593 0038 0220     	 movs r0,#2
 594 003a 064B     	 ldr r3,.L31+8
 595 003c 9847     	 blx r3
 596              	.LVL6:
 597              	.L30:
 267:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("_W ");
 268:.././hal/sam3u1c/udphs_device.c **** 	}
 269:.././hal/sam3u1c/udphs_device.c **** 	udd_b_idle = b_idle;
 598              	 .loc 6 269 13
 599 003e 034A     	 ldr r2,.L31
 600 0040 FB79     	 ldrb r3,[r7,#7]
 601 0042 1370     	 strb r3,[r2]
 270:.././hal/sam3u1c/udphs_device.c **** }
 602              	 .loc 6 270 1
 603 0044 00BF     	 nop
 604 0046 0837     	 adds r7,r7,#8
 605              	.LCFI42:
 606              	 .cfi_def_cfa_offset 8
 607 0048 BD46     	 mov sp,r7
 608              	.LCFI43:
 609              	 .cfi_def_cfa_register 13
 610              	 
 611 004a 80BD     	 pop {r7,pc}
 612              	.L32:
 613              	 .align 2
 614              	.L31:
 615 004c 00000000 	 .word udd_b_idle
 616 0050 00000000 	 .word sleepmgr_unlock_mode
 617 0054 00000000 	 .word sleepmgr_lock_mode
 618              	 .cfi_endproc
 619              	.LFE138:
 621              	 .comm udd_g_ctrlreq,24,4
 622              	 .section .bss.udd_ep_control_state,"aw",%nobits
 625              	udd_ep_control_state:
 626 0000 00       	 .space 1
 627              	 .section .bss.udd_ctrl_prev_payload_buf_cnt,"aw",%nobits
 628              	 .align 1
 631              	udd_ctrl_prev_payload_buf_cnt:
 632 0000 0000     	 .space 2
 633              	 .section .bss.udd_ctrl_payload_buf_cnt,"aw",%nobits
 634              	 .align 1
 637              	udd_ctrl_payload_buf_cnt:
 638 0000 0000     	 .space 2
 639              	 .section .bss.udd_ep_job,"aw",%nobits
 640              	 .align 2
 643              	udd_ep_job:
 644 0000 00000000 	 .space 48
 644      00000000 
 644      00000000 
 644      00000000 
 644      00000000 
 645              	 .section .text.UDPHS_Handler,"ax",%progbits
 646              	 .align 1
 647              	 .global UDPHS_Handler
 648              	 .syntax unified
 649              	 .thumb
 650              	 .thumb_func
 651              	 .fpu softvfp
 653              	UDPHS_Handler:
 654              	.LFB139:
 271:.././hal/sam3u1c/udphs_device.c **** #else
 272:.././hal/sam3u1c/udphs_device.c **** 
 273:.././hal/sam3u1c/udphs_device.c **** static void udd_sleep_mode(bool b_idle)
 274:.././hal/sam3u1c/udphs_device.c **** {
 275:.././hal/sam3u1c/udphs_device.c **** 	UNUSED(b_idle);
 276:.././hal/sam3u1c/udphs_device.c **** }
 277:.././hal/sam3u1c/udphs_device.c **** 
 278:.././hal/sam3u1c/udphs_device.c **** #endif // UDD_NO_SLEEP_MGR
 279:.././hal/sam3u1c/udphs_device.c **** 
 280:.././hal/sam3u1c/udphs_device.c **** //@}
 281:.././hal/sam3u1c/udphs_device.c **** 
 282:.././hal/sam3u1c/udphs_device.c **** /**
 283:.././hal/sam3u1c/udphs_device.c ****  * \name VBus monitor routine
 284:.././hal/sam3u1c/udphs_device.c ****  */
 285:.././hal/sam3u1c/udphs_device.c **** //@{
 286:.././hal/sam3u1c/udphs_device.c **** 
 287:.././hal/sam3u1c/udphs_device.c **** #if UDD_VBUS_IO
 288:.././hal/sam3u1c/udphs_device.c **** 
 289:.././hal/sam3u1c/udphs_device.c **** # if !defined(UDD_NO_SLEEP_MGR) && !defined(USB_VBUS_WKUP)
 290:.././hal/sam3u1c/udphs_device.c **** /* Lock to SLEEPMGR_SLEEP_WFI if VBus not connected */
 291:.././hal/sam3u1c/udphs_device.c **** static bool b_vbus_sleep_lock = false;
 292:.././hal/sam3u1c/udphs_device.c **** /**
 293:.././hal/sam3u1c/udphs_device.c ****  * Lock sleep mode for VBus PIO pin change detection
 294:.././hal/sam3u1c/udphs_device.c ****  */
 295:.././hal/sam3u1c/udphs_device.c **** static void udd_vbus_monitor_sleep_mode(bool b_lock)
 296:.././hal/sam3u1c/udphs_device.c **** {
 297:.././hal/sam3u1c/udphs_device.c **** 	if (b_lock && !b_vbus_sleep_lock) {
 298:.././hal/sam3u1c/udphs_device.c **** 		b_vbus_sleep_lock = true;
 299:.././hal/sam3u1c/udphs_device.c **** 		sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
 300:.././hal/sam3u1c/udphs_device.c **** 	}
 301:.././hal/sam3u1c/udphs_device.c **** 	if (!b_lock && b_vbus_sleep_lock) {
 302:.././hal/sam3u1c/udphs_device.c **** 		b_vbus_sleep_lock = false;
 303:.././hal/sam3u1c/udphs_device.c **** 		sleepmgr_unlock_mode(SLEEPMGR_SLEEP_WFI);
 304:.././hal/sam3u1c/udphs_device.c **** 	}
 305:.././hal/sam3u1c/udphs_device.c **** }
 306:.././hal/sam3u1c/udphs_device.c **** # else
 307:.././hal/sam3u1c/udphs_device.c **** #  define udd_vbus_monitor_sleep_mode(lock)
 308:.././hal/sam3u1c/udphs_device.c **** # endif
 309:.././hal/sam3u1c/udphs_device.c **** 
 310:.././hal/sam3u1c/udphs_device.c **** /**
 311:.././hal/sam3u1c/udphs_device.c ****  * USB VBus pin change handler
 312:.././hal/sam3u1c/udphs_device.c ****  */
 313:.././hal/sam3u1c/udphs_device.c **** static void udd_vbus_handler(uint32_t id, uint32_t mask)
 314:.././hal/sam3u1c/udphs_device.c **** {
 315:.././hal/sam3u1c/udphs_device.c **** 	if (USB_VBUS_PIO_ID != id || USB_VBUS_PIO_MASK != mask) {
 316:.././hal/sam3u1c/udphs_device.c **** 		return;
 317:.././hal/sam3u1c/udphs_device.c **** 	}
 318:.././hal/sam3u1c/udphs_device.c **** 	/* PIO interrupt status has been cleared, just detect level */
 319:.././hal/sam3u1c/udphs_device.c **** 	bool b_vbus_high = Is_udd_vbus_high();
 320:.././hal/sam3u1c/udphs_device.c **** 	if (b_vbus_high) {
 321:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_vbus_interrupt(true);
 322:.././hal/sam3u1c/udphs_device.c **** 		udd_vbus_monitor_sleep_mode(false);
 323:.././hal/sam3u1c/udphs_device.c **** 		udd_attach();
 324:.././hal/sam3u1c/udphs_device.c **** 	} else {
 325:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_vbus_interrupt(false);
 326:.././hal/sam3u1c/udphs_device.c **** 		udd_vbus_monitor_sleep_mode(true);
 327:.././hal/sam3u1c/udphs_device.c **** 		udd_detach();
 328:.././hal/sam3u1c/udphs_device.c **** 	}
 329:.././hal/sam3u1c/udphs_device.c **** 	UDC_VBUS_EVENT(b_vbus_high);
 330:.././hal/sam3u1c/udphs_device.c **** }
 331:.././hal/sam3u1c/udphs_device.c **** 
 332:.././hal/sam3u1c/udphs_device.c **** #endif
 333:.././hal/sam3u1c/udphs_device.c **** 
 334:.././hal/sam3u1c/udphs_device.c **** //@}
 335:.././hal/sam3u1c/udphs_device.c **** 
 336:.././hal/sam3u1c/udphs_device.c **** /**
 337:.././hal/sam3u1c/udphs_device.c ****  * \name Control endpoint low level management routine.
 338:.././hal/sam3u1c/udphs_device.c ****  *
 339:.././hal/sam3u1c/udphs_device.c ****  * This function performs control endpoint management.
 340:.././hal/sam3u1c/udphs_device.c ****  * It handle the SETUP/DATA/HANDSHAKE phases of a control transaction.
 341:.././hal/sam3u1c/udphs_device.c ****  */
 342:.././hal/sam3u1c/udphs_device.c **** //@{
 343:.././hal/sam3u1c/udphs_device.c **** 
 344:.././hal/sam3u1c/udphs_device.c **** //! Global variable to give and record information about setup request management
 345:.././hal/sam3u1c/udphs_device.c **** COMPILER_WORD_ALIGNED udd_ctrl_request_t udd_g_ctrlreq;
 346:.././hal/sam3u1c/udphs_device.c **** 
 347:.././hal/sam3u1c/udphs_device.c **** //! Bit definitions about endpoint control state machine for udd_ep_control_state
 348:.././hal/sam3u1c/udphs_device.c **** typedef enum {
 349:.././hal/sam3u1c/udphs_device.c **** 	UDD_EPCTRL_SETUP                  = 0, //!< Wait a SETUP packet
 350:.././hal/sam3u1c/udphs_device.c **** 	UDD_EPCTRL_DATA_OUT               = 1, //!< Wait a OUT data packet
 351:.././hal/sam3u1c/udphs_device.c **** 	UDD_EPCTRL_DATA_IN                = 2, //!< Wait a IN data packet
 352:.././hal/sam3u1c/udphs_device.c **** 	UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP  = 3, //!< Wait a IN ZLP packet
 353:.././hal/sam3u1c/udphs_device.c **** 	UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP = 4, //!< Wait a OUT ZLP packet
 354:.././hal/sam3u1c/udphs_device.c **** 	UDD_EPCTRL_STALL_REQ              = 5, //!< STALL enabled on IN & OUT packet
 355:.././hal/sam3u1c/udphs_device.c **** } udd_ctrl_ep_state_t;
 356:.././hal/sam3u1c/udphs_device.c **** 
 357:.././hal/sam3u1c/udphs_device.c **** //! State of the endpoint control management
 358:.././hal/sam3u1c/udphs_device.c **** static udd_ctrl_ep_state_t udd_ep_control_state;
 359:.././hal/sam3u1c/udphs_device.c **** 
 360:.././hal/sam3u1c/udphs_device.c **** //! Total number of data received/sent during data packet phase with previous payload buffers
 361:.././hal/sam3u1c/udphs_device.c **** static uint16_t udd_ctrl_prev_payload_buf_cnt;
 362:.././hal/sam3u1c/udphs_device.c **** 
 363:.././hal/sam3u1c/udphs_device.c **** //! Number of data received/sent to/from udd_g_ctrlreq.payload buffer
 364:.././hal/sam3u1c/udphs_device.c **** static uint16_t udd_ctrl_payload_buf_cnt;
 365:.././hal/sam3u1c/udphs_device.c **** 
 366:.././hal/sam3u1c/udphs_device.c **** /**
 367:.././hal/sam3u1c/udphs_device.c ****  * \brief Reset control endpoint
 368:.././hal/sam3u1c/udphs_device.c ****  *
 369:.././hal/sam3u1c/udphs_device.c ****  * Called after a USB line reset or when UDD is enabled
 370:.././hal/sam3u1c/udphs_device.c ****  */
 371:.././hal/sam3u1c/udphs_device.c **** static void udd_reset_ep_ctrl(void);
 372:.././hal/sam3u1c/udphs_device.c **** 
 373:.././hal/sam3u1c/udphs_device.c **** /**
 374:.././hal/sam3u1c/udphs_device.c ****  * \brief Reset control endpoint management
 375:.././hal/sam3u1c/udphs_device.c ****  *
 376:.././hal/sam3u1c/udphs_device.c ****  * Called after a USB line reset or at the end of SETUP request (after ZLP)
 377:.././hal/sam3u1c/udphs_device.c ****  */
 378:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_init(void);
 379:.././hal/sam3u1c/udphs_device.c **** 
 380:.././hal/sam3u1c/udphs_device.c **** //! \brief Managed reception of SETUP packet on control endpoint
 381:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_setup_received(void);
 382:.././hal/sam3u1c/udphs_device.c **** 
 383:.././hal/sam3u1c/udphs_device.c **** //! \brief Managed reception of IN packet on control endpoint
 384:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_in_sent(void);
 385:.././hal/sam3u1c/udphs_device.c **** 
 386:.././hal/sam3u1c/udphs_device.c **** //! \brief Managed reception of OUT packet on control endpoint
 387:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_out_received(void);
 388:.././hal/sam3u1c/udphs_device.c **** 
 389:.././hal/sam3u1c/udphs_device.c **** //! \brief Managed underflow event of IN packet on control endpoint
 390:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_underflow(void);
 391:.././hal/sam3u1c/udphs_device.c **** 
 392:.././hal/sam3u1c/udphs_device.c **** //! \brief Managed overflow event of OUT packet on control endpoint
 393:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_overflow(void);
 394:.././hal/sam3u1c/udphs_device.c **** 
 395:.././hal/sam3u1c/udphs_device.c **** //! \brief Managed stall event of IN/OUT packet on control endpoint
 396:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_stall_data(void);
 397:.././hal/sam3u1c/udphs_device.c **** 
 398:.././hal/sam3u1c/udphs_device.c **** //! \brief Send a ZLP IN on control endpoint
 399:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_send_zlp_in(void);
 400:.././hal/sam3u1c/udphs_device.c **** 
 401:.././hal/sam3u1c/udphs_device.c **** //! \brief Send a ZLP OUT on control endpoint
 402:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_send_zlp_out(void);
 403:.././hal/sam3u1c/udphs_device.c **** 
 404:.././hal/sam3u1c/udphs_device.c **** //! \brief Call callback associated to setup request
 405:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_endofrequest(void);
 406:.././hal/sam3u1c/udphs_device.c **** 
 407:.././hal/sam3u1c/udphs_device.c **** 
 408:.././hal/sam3u1c/udphs_device.c **** /**
 409:.././hal/sam3u1c/udphs_device.c ****  * \brief Main interrupt routine for control endpoint
 410:.././hal/sam3u1c/udphs_device.c ****  *
 411:.././hal/sam3u1c/udphs_device.c ****  * This switches control endpoint events to correct sub function.
 412:.././hal/sam3u1c/udphs_device.c ****  *
 413:.././hal/sam3u1c/udphs_device.c ****  * \return \c 1 if an event about control endpoint is occurred, otherwise \c 0.
 414:.././hal/sam3u1c/udphs_device.c ****  */
 415:.././hal/sam3u1c/udphs_device.c **** static bool udd_ctrl_interrupt(void);
 416:.././hal/sam3u1c/udphs_device.c **** 
 417:.././hal/sam3u1c/udphs_device.c **** //@}
 418:.././hal/sam3u1c/udphs_device.c **** 
 419:.././hal/sam3u1c/udphs_device.c **** 
 420:.././hal/sam3u1c/udphs_device.c **** /**
 421:.././hal/sam3u1c/udphs_device.c ****  * \name Management of bulk/interrupt/isochronous endpoints
 422:.././hal/sam3u1c/udphs_device.c ****  *
 423:.././hal/sam3u1c/udphs_device.c ****  * The UDD manages the data transfer on endpoints:
 424:.././hal/sam3u1c/udphs_device.c ****  * - Start data transfer on endpoint with USB Device DMA
 425:.././hal/sam3u1c/udphs_device.c ****  * - Send a ZLP packet if requested
 426:.././hal/sam3u1c/udphs_device.c ****  * - Call callback registered to signal end of transfer
 427:.././hal/sam3u1c/udphs_device.c ****  * The transfer abort and stall feature are supported.
 428:.././hal/sam3u1c/udphs_device.c ****  */
 429:.././hal/sam3u1c/udphs_device.c **** //@{
 430:.././hal/sam3u1c/udphs_device.c **** #if (0!=USB_DEVICE_MAX_EP)
 431:.././hal/sam3u1c/udphs_device.c **** 
 432:.././hal/sam3u1c/udphs_device.c **** //! Structure definition about job registered on an endpoint
 433:.././hal/sam3u1c/udphs_device.c **** typedef struct {
 434:.././hal/sam3u1c/udphs_device.c **** 	union {
 435:.././hal/sam3u1c/udphs_device.c **** 		//! Callback to call at the end of transfer
 436:.././hal/sam3u1c/udphs_device.c **** 		udd_callback_trans_t call_trans;
 437:.././hal/sam3u1c/udphs_device.c **** 
 438:.././hal/sam3u1c/udphs_device.c **** 		//! Callback to call when the endpoint halt is cleared
 439:.././hal/sam3u1c/udphs_device.c **** 		udd_callback_halt_cleared_t call_nohalt;
 440:.././hal/sam3u1c/udphs_device.c **** 	};
 441:.././hal/sam3u1c/udphs_device.c **** 	//! Buffer located in internal RAM to send or fill during job
 442:.././hal/sam3u1c/udphs_device.c **** 	uint8_t *buf;
 443:.././hal/sam3u1c/udphs_device.c **** 	//! Size of buffer to send or fill
 444:.././hal/sam3u1c/udphs_device.c **** 	iram_size_t buf_size;
 445:.././hal/sam3u1c/udphs_device.c **** 	//!< Size of data transfered
 446:.././hal/sam3u1c/udphs_device.c **** 	iram_size_t buf_cnt;
 447:.././hal/sam3u1c/udphs_device.c **** 	//!< Size of data prepared for DMA last time
 448:.././hal/sam3u1c/udphs_device.c **** 	iram_size_t buf_load;
 449:.././hal/sam3u1c/udphs_device.c **** 	//! A job is registered on this endpoint
 450:.././hal/sam3u1c/udphs_device.c **** 	uint8_t busy:1;
 451:.././hal/sam3u1c/udphs_device.c **** 	//! A short packet is requested for this job on endpoint IN
 452:.././hal/sam3u1c/udphs_device.c **** 	uint8_t b_shortpacket:1;
 453:.././hal/sam3u1c/udphs_device.c **** 	//! A stall has been requested but not executed
 454:.././hal/sam3u1c/udphs_device.c **** 	uint8_t stall_requested:1;
 455:.././hal/sam3u1c/udphs_device.c **** } udd_ep_job_t;
 456:.././hal/sam3u1c/udphs_device.c **** 
 457:.././hal/sam3u1c/udphs_device.c **** 
 458:.././hal/sam3u1c/udphs_device.c **** //! Array to register a job on bulk/interrupt/isochronous endpoint
 459:.././hal/sam3u1c/udphs_device.c **** static udd_ep_job_t udd_ep_job[USB_DEVICE_MAX_EP];
 460:.././hal/sam3u1c/udphs_device.c **** 
 461:.././hal/sam3u1c/udphs_device.c **** //! \brief Reset all job table
 462:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_job_table_reset(void);
 463:.././hal/sam3u1c/udphs_device.c **** 
 464:.././hal/sam3u1c/udphs_device.c **** //! \brief Abort all endpoint jobs on going
 465:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_job_table_kill(void);
 466:.././hal/sam3u1c/udphs_device.c **** 
 467:.././hal/sam3u1c/udphs_device.c **** /**
 468:.././hal/sam3u1c/udphs_device.c ****  * \brief Abort endpoint job on going
 469:.././hal/sam3u1c/udphs_device.c ****  *
 470:.././hal/sam3u1c/udphs_device.c ****  * \param ep         endpoint number of job to abort
 471:.././hal/sam3u1c/udphs_device.c ****  */
 472:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_abort_job(udd_ep_id_t ep);
 473:.././hal/sam3u1c/udphs_device.c **** 
 474:.././hal/sam3u1c/udphs_device.c **** /**
 475:.././hal/sam3u1c/udphs_device.c ****  * \brief Call the callback associated to the job which is finished
 476:.././hal/sam3u1c/udphs_device.c ****  *
 477:.././hal/sam3u1c/udphs_device.c ****  * \param ptr_job  job to complete
 478:.././hal/sam3u1c/udphs_device.c ****  * \param b_abort  if true then the job has been aborted
 479:.././hal/sam3u1c/udphs_device.c ****  */
 480:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num);
 481:.././hal/sam3u1c/udphs_device.c **** 
 482:.././hal/sam3u1c/udphs_device.c **** /**
 483:.././hal/sam3u1c/udphs_device.c ****  * \brief Start the next transfer if necessary or complete the job associated.
 484:.././hal/sam3u1c/udphs_device.c ****  *
 485:.././hal/sam3u1c/udphs_device.c ****  * \param ep         endpoint number without direction flag
 486:.././hal/sam3u1c/udphs_device.c ****  */
 487:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_trans_done(udd_ep_id_t ep);
 488:.././hal/sam3u1c/udphs_device.c **** 
 489:.././hal/sam3u1c/udphs_device.c **** /**
 490:.././hal/sam3u1c/udphs_device.c ****  * \brief Main interrupt routine for bulk/interrupt/isochronous endpoints
 491:.././hal/sam3u1c/udphs_device.c ****  *
 492:.././hal/sam3u1c/udphs_device.c ****  * This switches endpoint events to correct sub function.
 493:.././hal/sam3u1c/udphs_device.c ****  *
 494:.././hal/sam3u1c/udphs_device.c ****  * \return \c 1 if an event about bulk/interrupt/isochronous endpoints has occurred, otherwise \c 0
 495:.././hal/sam3u1c/udphs_device.c ****  */
 496:.././hal/sam3u1c/udphs_device.c **** static bool udd_ep_interrupt(void);
 497:.././hal/sam3u1c/udphs_device.c **** 
 498:.././hal/sam3u1c/udphs_device.c **** #endif // (0!=USB_DEVICE_MAX_EP)
 499:.././hal/sam3u1c/udphs_device.c **** //@}
 500:.././hal/sam3u1c/udphs_device.c **** 
 501:.././hal/sam3u1c/udphs_device.c **** 
 502:.././hal/sam3u1c/udphs_device.c **** //--------------------------------------------------------
 503:.././hal/sam3u1c/udphs_device.c **** //--- INTERNAL ROUTINES TO MANAGED GLOBAL EVENTS
 504:.././hal/sam3u1c/udphs_device.c **** /**
 505:.././hal/sam3u1c/udphs_device.c ****  * \internal
 506:.././hal/sam3u1c/udphs_device.c ****  * \brief Function called by UDPHS interrupt to manage USB Device interrupts
 507:.././hal/sam3u1c/udphs_device.c ****  *
 508:.././hal/sam3u1c/udphs_device.c ****  * USB Device interrupt events are split in three parts:
 509:.././hal/sam3u1c/udphs_device.c ****  * - USB line events (SOF, reset, suspend, resume, wakeup)
 510:.././hal/sam3u1c/udphs_device.c ****  * - control endpoint events (setup reception, end of data transfer, underflow, overflow, stall)
 511:.././hal/sam3u1c/udphs_device.c ****  * - bulk/interrupt/isochronous endpoints events (end of data transfer)
 512:.././hal/sam3u1c/udphs_device.c ****  *
 513:.././hal/sam3u1c/udphs_device.c ****  * Note:
 514:.././hal/sam3u1c/udphs_device.c ****  * Here, the global interrupt mask is not clear when an USB interrupt is enabled
 515:.././hal/sam3u1c/udphs_device.c ****  * because this one can not be occurred during the USB ISR (=during INTX is masked).
 516:.././hal/sam3u1c/udphs_device.c ****  * See Technical reference $3.8.3 Masking interrupt requests in peripheral modules.
 517:.././hal/sam3u1c/udphs_device.c ****  */
 518:.././hal/sam3u1c/udphs_device.c **** ISR(UDD_USB_INT_FUN)
 519:.././hal/sam3u1c/udphs_device.c **** {
 655              	 .loc 6 519 1
 656              	 .cfi_startproc
 657              	 
 658              	 
 659 0000 80B5     	 push {r7,lr}
 660              	.LCFI44:
 661              	 .cfi_def_cfa_offset 8
 662              	 .cfi_offset 7,-8
 663              	 .cfi_offset 14,-4
 664 0002 00AF     	 add r7,sp,#0
 665              	.LCFI45:
 666              	 .cfi_def_cfa_register 7
 520:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_periph_ck();
 667              	 .loc 6 520 2
 668 0004 1D20     	 movs r0,#29
 669 0006 5F4B     	 ldr r3,.L48
 670 0008 9847     	 blx r3
 671              	.LVL7:
 521:.././hal/sam3u1c/udphs_device.c **** 
 522:.././hal/sam3u1c/udphs_device.c **** 	/* For fast wakeup clocks restore
 523:.././hal/sam3u1c/udphs_device.c **** 	 * In WAIT mode, clocks are switched to FASTRC.
 524:.././hal/sam3u1c/udphs_device.c **** 	 * After wakeup clocks should be restored, before that ISR should not
 525:.././hal/sam3u1c/udphs_device.c **** 	 * be served.
 526:.././hal/sam3u1c/udphs_device.c **** 	 */
 527:.././hal/sam3u1c/udphs_device.c **** 	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
 672              	 .loc 6 527 7
 673 000a 5F4B     	 ldr r3,.L48+4
 674 000c 9847     	 blx r3
 675              	.LVL8:
 676 000e 0346     	 mov r3,r0
 677              	 .loc 6 527 6
 678 0010 83F00103 	 eor r3,r3,#1
 679 0014 DBB2     	 uxtb r3,r3
 680              	 .loc 6 527 5
 681 0016 002B     	 cmp r3,#0
 682 0018 0CD0     	 beq .L34
 683              	 .loc 6 527 43 discriminator 1
 684 001a 5C4B     	 ldr r3,.L48+8
 685 001c 5B69     	 ldr r3,[r3,#20]
 686 001e 03F00203 	 and r3,r3,#2
 687              	 .loc 6 527 39 discriminator 1
 688 0022 002B     	 cmp r3,#0
 689 0024 06D1     	 bne .L34
 690              	.LBB26:
 691              	.LBB27:
 328:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 692              	 .loc 3 328 3
 693              	 .syntax unified
 694              	
 695 0026 72B6     	 cpsid i
 696              	
 697              	 .thumb
 698              	 .syntax unified
 699              	.LBE27:
 700              	.LBE26:
 701              	.LBB28:
 702              	.LBB29:
 703              	 .loc 4 354 3
 704              	 .syntax unified
 705              	
 706 0028 BFF35F8F 	 dmb
 707              	
 708              	 .thumb
 709              	 .syntax unified
 710              	.LBE29:
 711              	.LBE28:
 528:.././hal/sam3u1c/udphs_device.c **** 		cpu_irq_disable();
 712              	 .loc 6 528 3
 713 002c 584B     	 ldr r3,.L48+12
 714 002e 0022     	 movs r2,#0
 715 0030 1A70     	 strb r2,[r3]
 529:.././hal/sam3u1c/udphs_device.c **** 		return;
 716              	 .loc 6 529 3
 717 0032 A5E0     	 b .L33
 718              	.L34:
 530:.././hal/sam3u1c/udphs_device.c **** 	}
 531:.././hal/sam3u1c/udphs_device.c **** 
 532:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_sof()) {
 719              	 .loc 6 532 6
 720 0034 554B     	 ldr r3,.L48+8
 721 0036 5B69     	 ldr r3,[r3,#20]
 722 0038 03F00803 	 and r3,r3,#8
 723              	 .loc 6 532 5
 724 003c 002B     	 cmp r3,#0
 725 003e 0DD0     	 beq .L36
 533:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_sof();
 726              	 .loc 6 533 3
 727 0040 524B     	 ldr r3,.L48+8
 728 0042 0822     	 movs r2,#8
 729 0044 9A61     	 str r2,[r3,#24]
 534:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_full_speed_mode()) {
 730              	 .loc 6 534 7
 731 0046 514B     	 ldr r3,.L48+8
 732 0048 5B69     	 ldr r3,[r3,#20]
 733 004a 03F00103 	 and r3,r3,#1
 734              	 .loc 6 534 6
 735 004e 002B     	 cmp r3,#0
 736 0050 01D1     	 bne .L37
 535:.././hal/sam3u1c/udphs_device.c **** 			udc_sof_notify();
 737              	 .loc 6 535 4
 738 0052 504B     	 ldr r3,.L48+16
 739 0054 9847     	 blx r3
 740              	.LVL9:
 741              	.L37:
 536:.././hal/sam3u1c/udphs_device.c **** 		}
 537:.././hal/sam3u1c/udphs_device.c **** #ifdef UDC_SOF_EVENT
 538:.././hal/sam3u1c/udphs_device.c **** 		UDC_SOF_EVENT();
 742              	 .loc 6 538 3
 743 0056 504B     	 ldr r3,.L48+20
 744 0058 9847     	 blx r3
 745              	.LVL10:
 539:.././hal/sam3u1c/udphs_device.c **** #endif
 540:.././hal/sam3u1c/udphs_device.c **** 		goto udd_interrupt_sof_end;
 746              	 .loc 6 540 3
 747 005a 90E0     	 b .L44
 748              	.L36:
 541:.././hal/sam3u1c/udphs_device.c **** 	}
 542:.././hal/sam3u1c/udphs_device.c **** 
 543:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_msof()) {
 749              	 .loc 6 543 6
 750 005c 4B4B     	 ldr r3,.L48+8
 751 005e 5B69     	 ldr r3,[r3,#20]
 752 0060 03F00403 	 and r3,r3,#4
 753              	 .loc 6 543 5
 754 0064 002B     	 cmp r3,#0
 755 0066 05D0     	 beq .L39
 544:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_msof();
 756              	 .loc 6 544 3
 757 0068 484B     	 ldr r3,.L48+8
 758 006a 0422     	 movs r2,#4
 759 006c 9A61     	 str r2,[r3,#24]
 545:.././hal/sam3u1c/udphs_device.c **** 		udc_sof_notify();
 760              	 .loc 6 545 3
 761 006e 494B     	 ldr r3,.L48+16
 762 0070 9847     	 blx r3
 763              	.LVL11:
 546:.././hal/sam3u1c/udphs_device.c **** 		goto udd_interrupt_sof_end;
 764              	 .loc 6 546 3
 765 0072 84E0     	 b .L44
 766              	.L39:
 547:.././hal/sam3u1c/udphs_device.c **** 	}
 548:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');
 549:.././hal/sam3u1c/udphs_device.c **** 
 550:.././hal/sam3u1c/udphs_device.c **** 	if (udd_ctrl_interrupt()) {
 767              	 .loc 6 550 6
 768 0074 494B     	 ldr r3,.L48+24
 769 0076 9847     	 blx r3
 770              	.LVL12:
 771 0078 0346     	 mov r3,r0
 772              	 .loc 6 550 5
 773 007a 002B     	 cmp r3,#0
 774 007c 7AD1     	 bne .L45
 551:.././hal/sam3u1c/udphs_device.c **** 		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
 552:.././hal/sam3u1c/udphs_device.c **** 	}
 553:.././hal/sam3u1c/udphs_device.c **** 
 554:.././hal/sam3u1c/udphs_device.c **** #if (0 != USB_DEVICE_MAX_EP)
 555:.././hal/sam3u1c/udphs_device.c **** 	if (udd_ep_interrupt()) {
 775              	 .loc 6 555 6
 776 007e 484B     	 ldr r3,.L48+28
 777 0080 9847     	 blx r3
 778              	.LVL13:
 779 0082 0346     	 mov r3,r0
 780              	 .loc 6 555 5
 781 0084 002B     	 cmp r3,#0
 782 0086 77D1     	 bne .L46
 556:.././hal/sam3u1c/udphs_device.c **** 		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
 557:.././hal/sam3u1c/udphs_device.c **** 	}
 558:.././hal/sam3u1c/udphs_device.c **** #endif
 559:.././hal/sam3u1c/udphs_device.c **** 
 560:.././hal/sam3u1c/udphs_device.c **** 	// USB bus reset detection
 561:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_reset()) {
 783              	 .loc 6 561 6
 784 0088 404B     	 ldr r3,.L48+8
 785 008a 5B69     	 ldr r3,[r3,#20]
 786 008c 03F01003 	 and r3,r3,#16
 787              	 .loc 6 561 5
 788 0090 002B     	 cmp r3,#0
 789 0092 1DD0     	 beq .L42
 562:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("EoR ");
 563:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_reset();
 790              	 .loc 6 563 3
 791 0094 3D4B     	 ldr r3,.L48+8
 792 0096 1022     	 movs r2,#16
 793 0098 9A61     	 str r2,[r3,#24]
 564:.././hal/sam3u1c/udphs_device.c **** 		// Abort all jobs on-going
 565:.././hal/sam3u1c/udphs_device.c **** #if (USB_DEVICE_MAX_EP != 0)
 566:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job_table_kill();
 794              	 .loc 6 566 3
 795 009a 424B     	 ldr r3,.L48+32
 796 009c 9847     	 blx r3
 797              	.LVL14:
 567:.././hal/sam3u1c/udphs_device.c **** #endif
 568:.././hal/sam3u1c/udphs_device.c **** 		// Reset USB Device Stack Core
 569:.././hal/sam3u1c/udphs_device.c **** 		udc_reset();
 798              	 .loc 6 569 3
 799 009e 424B     	 ldr r3,.L48+36
 800 00a0 9847     	 blx r3
 801              	.LVL15:
 570:.././hal/sam3u1c/udphs_device.c **** 		// Reset endpoint control
 571:.././hal/sam3u1c/udphs_device.c **** 		udd_reset_ep_ctrl();
 802              	 .loc 6 571 3
 803 00a2 424B     	 ldr r3,.L48+40
 804 00a4 9847     	 blx r3
 805              	.LVL16:
 572:.././hal/sam3u1c/udphs_device.c **** 		// Reset endpoint control management
 573:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_init();
 806              	 .loc 6 573 3
 807 00a6 424B     	 ldr r3,.L48+44
 808 00a8 9847     	 blx r3
 809              	.LVL17:
 574:.././hal/sam3u1c/udphs_device.c **** 		// Enable SOF interrupts cleared by USB reset event
 575:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_sof_interrupt();
 810              	 .loc 6 575 3
 811 00aa 384B     	 ldr r3,.L48+8
 812 00ac 1B69     	 ldr r3,[r3,#16]
 813 00ae 374A     	 ldr r2,.L48+8
 814 00b0 43F00803 	 orr r3,r3,#8
 815 00b4 1361     	 str r3,[r2,#16]
 576:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_msof_interrupt();
 816              	 .loc 6 576 3
 817 00b6 354B     	 ldr r3,.L48+8
 818 00b8 1B69     	 ldr r3,[r3,#16]
 819 00ba 344A     	 ldr r2,.L48+8
 820 00bc 43F00403 	 orr r3,r3,#4
 821 00c0 1361     	 str r3,[r2,#16]
 577:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_suspend_interrupt();
 822              	 .loc 6 577 3
 823 00c2 324B     	 ldr r3,.L48+8
 824 00c4 1B69     	 ldr r3,[r3,#16]
 825 00c6 314A     	 ldr r2,.L48+8
 826 00c8 43F00203 	 orr r3,r3,#2
 827 00cc 1361     	 str r3,[r2,#16]
 578:.././hal/sam3u1c/udphs_device.c **** 		goto udd_interrupt_end;
 828              	 .loc 6 578 3
 829 00ce 56E0     	 b .L44
 830              	.L42:
 579:.././hal/sam3u1c/udphs_device.c **** 	}
 580:.././hal/sam3u1c/udphs_device.c **** 
 581:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
 831              	 .loc 6 581 6
 832 00d0 2E4B     	 ldr r3,.L48+8
 833 00d2 1B69     	 ldr r3,[r3,#16]
 834 00d4 03F00203 	 and r3,r3,#2
 835              	 .loc 6 581 5
 836 00d8 002B     	 cmp r3,#0
 837 00da 20D0     	 beq .L43
 838              	 .loc 6 581 44 discriminator 1
 839 00dc 2B4B     	 ldr r3,.L48+8
 840 00de 5B69     	 ldr r3,[r3,#20]
 841 00e0 03F00203 	 and r3,r3,#2
 842              	 .loc 6 581 41 discriminator 1
 843 00e4 002B     	 cmp r3,#0
 844 00e6 1AD0     	 beq .L43
 582:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("Susp ");
 583:.././hal/sam3u1c/udphs_device.c **** 		// Remove old wakeup status
 584:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_wake_up();
 845              	 .loc 6 584 3
 846 00e8 284B     	 ldr r3,.L48+8
 847 00ea 2022     	 movs r2,#32
 848 00ec 9A61     	 str r2,[r3,#24]
 585:.././hal/sam3u1c/udphs_device.c **** 		// The suspend interrupt is automatic acked when a wakeup occur
 586:.././hal/sam3u1c/udphs_device.c **** 		udd_disable_suspend_interrupt();
 849              	 .loc 6 586 3
 850 00ee 274B     	 ldr r3,.L48+8
 851 00f0 1B69     	 ldr r3,[r3,#16]
 852 00f2 264A     	 ldr r2,.L48+8
 853 00f4 23F00203 	 bic r3,r3,#2
 854 00f8 1361     	 str r3,[r2,#16]
 587:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_wake_up_interrupt();
 855              	 .loc 6 587 3
 856 00fa 244B     	 ldr r3,.L48+8
 857 00fc 1B69     	 ldr r3,[r3,#16]
 858 00fe 234A     	 ldr r2,.L48+8
 859 0100 43F02003 	 orr r3,r3,#32
 860 0104 1361     	 str r3,[r2,#16]
 588:.././hal/sam3u1c/udphs_device.c **** 
 589:.././hal/sam3u1c/udphs_device.c **** 		// The wakeup interrupt is generated even if the device controller clock is disabled.
 590:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_suspend();
 861              	 .loc 6 590 3
 862 0106 214B     	 ldr r3,.L48+8
 863 0108 0222     	 movs r2,#2
 864 010a 9A61     	 str r2,[r3,#24]
 591:.././hal/sam3u1c/udphs_device.c **** 
 592:.././hal/sam3u1c/udphs_device.c **** 		udd_disable_periph_ck();
 865              	 .loc 6 592 3
 866 010c 1D20     	 movs r0,#29
 867 010e 294B     	 ldr r3,.L48+48
 868 0110 9847     	 blx r3
 869              	.LVL18:
 593:.././hal/sam3u1c/udphs_device.c **** 
 594:.././hal/sam3u1c/udphs_device.c **** #ifdef UDC_SUSPEND_EVENT
 595:.././hal/sam3u1c/udphs_device.c **** 		UDC_SUSPEND_EVENT();
 870              	 .loc 6 595 3
 871 0112 294B     	 ldr r3,.L48+52
 872 0114 9847     	 blx r3
 873              	.LVL19:
 596:.././hal/sam3u1c/udphs_device.c **** #endif
 597:.././hal/sam3u1c/udphs_device.c **** 		udd_sleep_mode(false); // Enter in SUSPEND mode
 874              	 .loc 6 597 3
 875 0116 0020     	 movs r0,#0
 876 0118 284B     	 ldr r3,.L48+56
 877 011a 9847     	 blx r3
 878              	.LVL20:
 598:.././hal/sam3u1c/udphs_device.c **** 		goto udd_interrupt_end;
 879              	 .loc 6 598 3
 880 011c 2FE0     	 b .L44
 881              	.L43:
 599:.././hal/sam3u1c/udphs_device.c **** 	}
 600:.././hal/sam3u1c/udphs_device.c **** 
 601:.././hal/sam3u1c/udphs_device.c **** 	// On wakeup, _IEN is reseted only with EoR enabled
 602:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_wake_up()) {
 882              	 .loc 6 602 6
 883 011e 1B4B     	 ldr r3,.L48+8
 884 0120 5B69     	 ldr r3,[r3,#20]
 885 0122 03F02003 	 and r3,r3,#32
 886              	 .loc 6 602 5
 887 0126 002B     	 cmp r3,#0
 888 0128 28D0     	 beq .L47
 603:.././hal/sam3u1c/udphs_device.c **** 		udd_sleep_mode(true); // Enter in IDLE mode
 889              	 .loc 6 603 3
 890 012a 0120     	 movs r0,#1
 891 012c 234B     	 ldr r3,.L48+56
 892 012e 9847     	 blx r3
 893              	.LVL21:
 604:.././hal/sam3u1c/udphs_device.c **** 		// Remove old suspend status
 605:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_suspend();
 894              	 .loc 6 605 3
 895 0130 164B     	 ldr r3,.L48+8
 896 0132 0222     	 movs r2,#2
 897 0134 9A61     	 str r2,[r3,#24]
 606:.././hal/sam3u1c/udphs_device.c **** 		// Ack wakeup interrupt and enable suspend interrupt
 607:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_wake_up();
 898              	 .loc 6 607 3
 899 0136 154B     	 ldr r3,.L48+8
 900 0138 2022     	 movs r2,#32
 901 013a 9A61     	 str r2,[r3,#24]
 608:.././hal/sam3u1c/udphs_device.c **** 		// Ack wakeup interrupt and enable suspend interrupt
 609:.././hal/sam3u1c/udphs_device.c **** 		udd_disable_wake_up_interrupt();
 902              	 .loc 6 609 3
 903 013c 134B     	 ldr r3,.L48+8
 904 013e 1B69     	 ldr r3,[r3,#16]
 905 0140 124A     	 ldr r2,.L48+8
 906 0142 23F02003 	 bic r3,r3,#32
 907 0146 1361     	 str r3,[r2,#16]
 610:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_suspend_interrupt();
 908              	 .loc 6 610 3
 909 0148 104B     	 ldr r3,.L48+8
 910 014a 1B69     	 ldr r3,[r3,#16]
 911 014c 0F4A     	 ldr r2,.L48+8
 912 014e 43F00203 	 orr r3,r3,#2
 913 0152 1361     	 str r3,[r2,#16]
 611:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_sof_interrupt();
 914              	 .loc 6 611 3
 915 0154 0D4B     	 ldr r3,.L48+8
 916 0156 1B69     	 ldr r3,[r3,#16]
 917 0158 0C4A     	 ldr r2,.L48+8
 918 015a 43F00803 	 orr r3,r3,#8
 919 015e 1361     	 str r3,[r2,#16]
 612:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_msof_interrupt();
 920              	 .loc 6 612 3
 921 0160 0A4B     	 ldr r3,.L48+8
 922 0162 1B69     	 ldr r3,[r3,#16]
 923 0164 094A     	 ldr r2,.L48+8
 924 0166 43F00403 	 orr r3,r3,#4
 925 016a 1361     	 str r3,[r2,#16]
 613:.././hal/sam3u1c/udphs_device.c **** 
 614:.././hal/sam3u1c/udphs_device.c **** #ifdef UDC_RESUME_EVENT
 615:.././hal/sam3u1c/udphs_device.c **** 		UDC_RESUME_EVENT();
 926              	 .loc 6 615 3
 927 016c 144B     	 ldr r3,.L48+60
 928 016e 9847     	 blx r3
 929              	.LVL22:
 616:.././hal/sam3u1c/udphs_device.c **** #endif
 617:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("Wkup ");
 618:.././hal/sam3u1c/udphs_device.c **** 		goto udd_interrupt_end;
 930              	 .loc 6 618 3
 931 0170 00BF     	 nop
 932 0172 04E0     	 b .L44
 933              	.L38:
 934              	.L45:
 551:.././hal/sam3u1c/udphs_device.c **** 	}
 935              	 .loc 6 551 3
 936 0174 00BF     	 nop
 937 0176 02E0     	 b .L44
 938              	.L46:
 556:.././hal/sam3u1c/udphs_device.c **** 	}
 939              	 .loc 6 556 3
 940 0178 00BF     	 nop
 941 017a 00E0     	 b .L44
 942              	.L47:
 619:.././hal/sam3u1c/udphs_device.c **** 	}
 620:.././hal/sam3u1c/udphs_device.c **** 	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
 621:.././hal/sam3u1c/udphs_device.c **** 
 622:.././hal/sam3u1c/udphs_device.c **** udd_interrupt_end:
 943              	 .loc 6 622 1
 944 017c 00BF     	 nop
 945              	.L44:
 623:.././hal/sam3u1c/udphs_device.c **** 	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
 624:.././hal/sam3u1c/udphs_device.c **** 	//dbg_print("m%08x", UDPHS->UDPHS_IEN);
 625:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("\n\r");
 626:.././hal/sam3u1c/udphs_device.c **** udd_interrupt_sof_end:
 627:.././hal/sam3u1c/udphs_device.c **** 	return;
 946              	 .loc 6 627 2
 947 017e 00BF     	 nop
 948              	.L33:
 628:.././hal/sam3u1c/udphs_device.c **** }
 949              	 .loc 6 628 1
 950 0180 80BD     	 pop {r7,pc}
 951              	.L49:
 952 0182 00BF     	 .align 2
 953              	.L48:
 954 0184 00000000 	 .word pmc_enable_periph_clk
 955 0188 00000000 	 .word pmc_is_wakeup_clocks_restored
 956 018c 00400A40 	 .word 1074413568
 957 0190 00000000 	 .word g_interrupt_enabled
 958 0194 00000000 	 .word udc_sof_notify
 959 0198 00000000 	 .word main_sof_action
 960 019c 00000000 	 .word udd_ctrl_interrupt
 961 01a0 00000000 	 .word udd_ep_interrupt
 962 01a4 00000000 	 .word udd_ep_job_table_kill
 963 01a8 00000000 	 .word udc_reset
 964 01ac 00000000 	 .word udd_reset_ep_ctrl
 965 01b0 00000000 	 .word udd_ctrl_init
 966 01b4 00000000 	 .word pmc_disable_periph_clk
 967 01b8 00000000 	 .word main_suspend_action
 968 01bc 00000000 	 .word udd_sleep_mode
 969 01c0 00000000 	 .word main_resume_action
 970              	 .cfi_endproc
 971              	.LFE139:
 973              	 .section .text.udd_include_vbus_monitoring,"ax",%progbits
 974              	 .align 1
 975              	 .global udd_include_vbus_monitoring
 976              	 .syntax unified
 977              	 .thumb
 978              	 .thumb_func
 979              	 .fpu softvfp
 981              	udd_include_vbus_monitoring:
 982              	.LFB140:
 629:.././hal/sam3u1c/udphs_device.c **** 
 630:.././hal/sam3u1c/udphs_device.c **** 
 631:.././hal/sam3u1c/udphs_device.c **** bool udd_include_vbus_monitoring(void)
 632:.././hal/sam3u1c/udphs_device.c **** {
 983              	 .loc 6 632 1
 984              	 .cfi_startproc
 985              	 
 986              	 
 987              	 
 988 0000 80B4     	 push {r7}
 989              	.LCFI46:
 990              	 .cfi_def_cfa_offset 4
 991              	 .cfi_offset 7,-4
 992 0002 00AF     	 add r7,sp,#0
 993              	.LCFI47:
 994              	 .cfi_def_cfa_register 7
 633:.././hal/sam3u1c/udphs_device.c **** #if UDD_VBUS_IO
 634:.././hal/sam3u1c/udphs_device.c **** 	return true;
 635:.././hal/sam3u1c/udphs_device.c **** #else
 636:.././hal/sam3u1c/udphs_device.c **** 	return false;
 995              	 .loc 6 636 9
 996 0004 0023     	 movs r3,#0
 637:.././hal/sam3u1c/udphs_device.c **** #endif
 638:.././hal/sam3u1c/udphs_device.c **** }
 997              	 .loc 6 638 1
 998 0006 1846     	 mov r0,r3
 999 0008 BD46     	 mov sp,r7
 1000              	.LCFI48:
 1001              	 .cfi_def_cfa_register 13
 1002              	 
 1003 000a 80BC     	 pop {r7}
 1004              	.LCFI49:
 1005              	 .cfi_restore 7
 1006              	 .cfi_def_cfa_offset 0
 1007 000c 7047     	 bx lr
 1008              	 .cfi_endproc
 1009              	.LFE140:
 1011              	 .section .text.udd_enable,"ax",%progbits
 1012              	 .align 1
 1013              	 .global udd_enable
 1014              	 .syntax unified
 1015              	 .thumb
 1016              	 .thumb_func
 1017              	 .fpu softvfp
 1019              	udd_enable:
 1020              	.LFB141:
 639:.././hal/sam3u1c/udphs_device.c **** 
 640:.././hal/sam3u1c/udphs_device.c **** 
 641:.././hal/sam3u1c/udphs_device.c **** void udd_enable(void)
 642:.././hal/sam3u1c/udphs_device.c **** {
 1021              	 .loc 6 642 1
 1022              	 .cfi_startproc
 1023              	 
 1024              	 
 1025 0000 80B5     	 push {r7,lr}
 1026              	.LCFI50:
 1027              	 .cfi_def_cfa_offset 8
 1028              	 .cfi_offset 7,-8
 1029              	 .cfi_offset 14,-4
 1030 0002 82B0     	 sub sp,sp,#8
 1031              	.LCFI51:
 1032              	 .cfi_def_cfa_offset 16
 1033 0004 00AF     	 add r7,sp,#0
 1034              	.LCFI52:
 1035              	 .cfi_def_cfa_register 7
 643:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
 644:.././hal/sam3u1c/udphs_device.c **** 	sysclk_enable_usb();
 1036              	 .loc 6 644 2
 1037 0006 194B     	 ldr r3,.L53
 1038 0008 9847     	 blx r3
 1039              	.LVL23:
 645:.././hal/sam3u1c/udphs_device.c **** 
 646:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_periph_ck();
 1040              	 .loc 6 646 2
 1041 000a 1D20     	 movs r0,#29
 1042 000c 184B     	 ldr r3,.L53+4
 1043 000e 9847     	 blx r3
 1044              	.LVL24:
 647:.././hal/sam3u1c/udphs_device.c **** 
 648:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 1045              	 .loc 6 648 10
 1046 0010 184B     	 ldr r3,.L53+8
 1047 0012 9847     	 blx r3
 1048              	.LVL25:
 1049 0014 7860     	 str r0,[r7,#4]
 649:.././hal/sam3u1c/udphs_device.c **** 
 650:.././hal/sam3u1c/udphs_device.c **** 	//** Enable USB hardware
 651:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_periph();
 1050              	 .loc 6 651 2
 1051 0016 184B     	 ldr r3,.L53+12
 1052 0018 1B68     	 ldr r3,[r3]
 1053 001a 174A     	 ldr r2,.L53+12
 1054 001c 43F48073 	 orr r3,r3,#256
 1055 0020 1360     	 str r3,[r2]
 652:.././hal/sam3u1c/udphs_device.c **** 
 653:.././hal/sam3u1c/udphs_device.c **** 	// Cortex-M3, uses NVIC, no need to register IRQ handler
 654:.././hal/sam3u1c/udphs_device.c **** 	// Here, only the Device mode is possible,
 655:.././hal/sam3u1c/udphs_device.c **** 	// UDPHS interrupt is UDD interrupt
 656:.././hal/sam3u1c/udphs_device.c **** 	NVIC_SetPriority((IRQn_Type) ID_UDPHS, UDD_USB_INT_LEVEL);
 1056              	 .loc 6 656 2
 1057 0022 0521     	 movs r1,#5
 1058 0024 1D20     	 movs r0,#29
 1059 0026 154B     	 ldr r3,.L53+16
 1060 0028 9847     	 blx r3
 1061              	.LVL26:
 657:.././hal/sam3u1c/udphs_device.c **** 	NVIC_EnableIRQ((IRQn_Type) ID_UDPHS);
 1062              	 .loc 6 657 2
 1063 002a 1D20     	 movs r0,#29
 1064 002c 144B     	 ldr r3,.L53+20
 1065 002e 9847     	 blx r3
 1066              	.LVL27:
 658:.././hal/sam3u1c/udphs_device.c **** 
 659:.././hal/sam3u1c/udphs_device.c **** 	// Reset internal variables
 660:.././hal/sam3u1c/udphs_device.c **** #if (0!=USB_DEVICE_MAX_EP)
 661:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_table_reset();
 1067              	 .loc 6 661 2
 1068 0030 144B     	 ldr r3,.L53+24
 1069 0032 9847     	 blx r3
 1070              	.LVL28:
 662:.././hal/sam3u1c/udphs_device.c **** #endif
 663:.././hal/sam3u1c/udphs_device.c **** 
 664:.././hal/sam3u1c/udphs_device.c **** 	// Set the USB speed requested by configuration file
 665:.././hal/sam3u1c/udphs_device.c **** #ifdef USB_DEVICE_HS_SUPPORT
 666:.././hal/sam3u1c/udphs_device.c **** 	udd_high_speed_enable();
 1071              	 .loc 6 666 2
 1072 0034 104B     	 ldr r3,.L53+12
 1073 0036 D3F8E030 	 ldr r3,[r3,#224]
 1074 003a 0F4A     	 ldr r2,.L53+12
 1075 003c 23F00303 	 bic r3,r3,#3
 1076 0040 C2F8E030 	 str r3,[r2,#224]
 667:.././hal/sam3u1c/udphs_device.c **** #else
 668:.././hal/sam3u1c/udphs_device.c **** 	udd_high_speed_disable();
 669:.././hal/sam3u1c/udphs_device.c **** #endif
 670:.././hal/sam3u1c/udphs_device.c **** 
 671:.././hal/sam3u1c/udphs_device.c **** 	// Always authorize asynchronous USB interrupts to exit of sleep mode
 672:.././hal/sam3u1c/udphs_device.c **** 	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
 1077              	 .loc 6 672 2
 1078 0044 4FF48020 	 mov r0,#262144
 1079 0048 0F4B     	 ldr r3,.L53+28
 1080 004a 9847     	 blx r3
 1081              	.LVL29:
 673:.././hal/sam3u1c/udphs_device.c **** 
 674:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_NO_SLEEP_MGR
 675:.././hal/sam3u1c/udphs_device.c **** 	// Initialize the sleep mode authorized for the USB suspend mode
 676:.././hal/sam3u1c/udphs_device.c **** 	udd_b_idle = false;
 1082              	 .loc 6 676 13
 1083 004c 0F4B     	 ldr r3,.L53+32
 1084 004e 0022     	 movs r2,#0
 1085 0050 1A70     	 strb r2,[r3]
 677:.././hal/sam3u1c/udphs_device.c **** 	sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
 1086              	 .loc 6 677 2
 1087 0052 0320     	 movs r0,#3
 1088 0054 0E4B     	 ldr r3,.L53+36
 1089 0056 9847     	 blx r3
 1090              	.LVL30:
 678:.././hal/sam3u1c/udphs_device.c **** #endif
 679:.././hal/sam3u1c/udphs_device.c **** 
 680:.././hal/sam3u1c/udphs_device.c **** #if UDD_VBUS_IO
 681:.././hal/sam3u1c/udphs_device.c **** 	/* Initialize VBus monitor */
 682:.././hal/sam3u1c/udphs_device.c **** 	udd_vbus_init(udd_vbus_handler);
 683:.././hal/sam3u1c/udphs_device.c **** 	udd_vbus_monitor_sleep_mode(true);
 684:.././hal/sam3u1c/udphs_device.c **** 	/* Force Vbus interrupt when Vbus is always high
 685:.././hal/sam3u1c/udphs_device.c **** 	 * This is possible due to a short timing between a Host mode stop/start.
 686:.././hal/sam3u1c/udphs_device.c **** 	 */
 687:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_vbus_high()) {
 688:.././hal/sam3u1c/udphs_device.c **** 		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
 689:.././hal/sam3u1c/udphs_device.c **** 	}
 690:.././hal/sam3u1c/udphs_device.c **** #else
 691:.././hal/sam3u1c/udphs_device.c **** #  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
 692:.././hal/sam3u1c/udphs_device.c **** 	udd_attach();
 1091              	 .loc 6 692 2
 1092 0058 0E4B     	 ldr r3,.L53+40
 1093 005a 9847     	 blx r3
 1094              	.LVL31:
 693:.././hal/sam3u1c/udphs_device.c **** #  endif
 694:.././hal/sam3u1c/udphs_device.c **** #endif
 695:.././hal/sam3u1c/udphs_device.c **** 
 696:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 1095              	 .loc 6 696 2
 1096 005c 7868     	 ldr r0,[r7,#4]
 1097 005e 0E4B     	 ldr r3,.L53+44
 1098 0060 9847     	 blx r3
 1099              	.LVL32:
 697:.././hal/sam3u1c/udphs_device.c **** }
 1100              	 .loc 6 697 1
 1101 0062 00BF     	 nop
 1102 0064 0837     	 adds r7,r7,#8
 1103              	.LCFI53:
 1104              	 .cfi_def_cfa_offset 8
 1105 0066 BD46     	 mov sp,r7
 1106              	.LCFI54:
 1107              	 .cfi_def_cfa_register 13
 1108              	 
 1109 0068 80BD     	 pop {r7,pc}
 1110              	.L54:
 1111 006a 00BF     	 .align 2
 1112              	.L53:
 1113 006c 00000000 	 .word sysclk_enable_usb
 1114 0070 00000000 	 .word pmc_enable_periph_clk
 1115 0074 00000000 	 .word cpu_irq_save
 1116 0078 00400A40 	 .word 1074413568
 1117 007c 00000000 	 .word NVIC_SetPriority
 1118 0080 00000000 	 .word NVIC_EnableIRQ
 1119 0084 00000000 	 .word udd_ep_job_table_reset
 1120 0088 00000000 	 .word pmc_set_fast_startup_input
 1121 008c 00000000 	 .word udd_b_idle
 1122 0090 00000000 	 .word sleepmgr_lock_mode
 1123 0094 00000000 	 .word udd_attach
 1124 0098 00000000 	 .word cpu_irq_restore
 1125              	 .cfi_endproc
 1126              	.LFE141:
 1128              	 .section .text.udd_disable,"ax",%progbits
 1129              	 .align 1
 1130              	 .global udd_disable
 1131              	 .syntax unified
 1132              	 .thumb
 1133              	 .thumb_func
 1134              	 .fpu softvfp
 1136              	udd_disable:
 1137              	.LFB142:
 698:.././hal/sam3u1c/udphs_device.c **** 
 699:.././hal/sam3u1c/udphs_device.c **** 
 700:.././hal/sam3u1c/udphs_device.c **** void udd_disable(void)
 701:.././hal/sam3u1c/udphs_device.c **** {
 1138              	 .loc 6 701 1
 1139              	 .cfi_startproc
 1140              	 
 1141              	 
 1142 0000 80B5     	 push {r7,lr}
 1143              	.LCFI55:
 1144              	 .cfi_def_cfa_offset 8
 1145              	 .cfi_offset 7,-8
 1146              	 .cfi_offset 14,-4
 1147 0002 82B0     	 sub sp,sp,#8
 1148              	.LCFI56:
 1149              	 .cfi_def_cfa_offset 16
 1150 0004 00AF     	 add r7,sp,#0
 1151              	.LCFI57:
 1152              	 .cfi_def_cfa_register 7
 702:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
 703:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 1153              	 .loc 6 703 10
 1154 0006 0D4B     	 ldr r3,.L56
 1155 0008 9847     	 blx r3
 1156              	.LVL33:
 1157 000a 7860     	 str r0,[r7,#4]
 704:.././hal/sam3u1c/udphs_device.c **** 	// Disable USB
 705:.././hal/sam3u1c/udphs_device.c **** 	udd_reset_periph();
 1158              	 .loc 6 705 2
 1159 000c 0C4B     	 ldr r3,.L56+4
 1160 000e 1B68     	 ldr r3,[r3]
 1161 0010 0B4A     	 ldr r2,.L56+4
 1162 0012 23F48073 	 bic r3,r3,#256
 1163 0016 1360     	 str r3,[r2]
 706:.././hal/sam3u1c/udphs_device.c **** 	sysclk_disable_usb();
 1164              	 .loc 6 706 2
 1165 0018 0A4B     	 ldr r3,.L56+8
 1166 001a 9847     	 blx r3
 1167              	.LVL34:
 707:.././hal/sam3u1c/udphs_device.c **** 	pmc_disable_periph_clk(ID_UDPHS);
 1168              	 .loc 6 707 2
 1169 001c 1D20     	 movs r0,#29
 1170 001e 0A4B     	 ldr r3,.L56+12
 1171 0020 9847     	 blx r3
 1172              	.LVL35:
 708:.././hal/sam3u1c/udphs_device.c **** 	udd_sleep_mode(false);
 1173              	 .loc 6 708 2
 1174 0022 0020     	 movs r0,#0
 1175 0024 094B     	 ldr r3,.L56+16
 1176 0026 9847     	 blx r3
 1177              	.LVL36:
 709:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_NO_SLEEP_MGR
 710:.././hal/sam3u1c/udphs_device.c **** 	sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
 1178              	 .loc 6 710 2
 1179 0028 0320     	 movs r0,#3
 1180 002a 094B     	 ldr r3,.L56+20
 1181 002c 9847     	 blx r3
 1182              	.LVL37:
 711:.././hal/sam3u1c/udphs_device.c **** #endif
 712:.././hal/sam3u1c/udphs_device.c **** 
 713:.././hal/sam3u1c/udphs_device.c **** # if UDD_VBUS_IO
 714:.././hal/sam3u1c/udphs_device.c **** 	udd_vbus_monitor_sleep_mode(false);
 715:.././hal/sam3u1c/udphs_device.c **** # endif
 716:.././hal/sam3u1c/udphs_device.c **** 
 717:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 1183              	 .loc 6 717 2
 1184 002e 7868     	 ldr r0,[r7,#4]
 1185 0030 084B     	 ldr r3,.L56+24
 1186 0032 9847     	 blx r3
 1187              	.LVL38:
 718:.././hal/sam3u1c/udphs_device.c **** }
 1188              	 .loc 6 718 1
 1189 0034 00BF     	 nop
 1190 0036 0837     	 adds r7,r7,#8
 1191              	.LCFI58:
 1192              	 .cfi_def_cfa_offset 8
 1193 0038 BD46     	 mov sp,r7
 1194              	.LCFI59:
 1195              	 .cfi_def_cfa_register 13
 1196              	 
 1197 003a 80BD     	 pop {r7,pc}
 1198              	.L57:
 1199              	 .align 2
 1200              	.L56:
 1201 003c 00000000 	 .word cpu_irq_save
 1202 0040 00400A40 	 .word 1074413568
 1203 0044 00000000 	 .word sysclk_disable_usb
 1204 0048 00000000 	 .word pmc_disable_periph_clk
 1205 004c 00000000 	 .word udd_sleep_mode
 1206 0050 00000000 	 .word sleepmgr_unlock_mode
 1207 0054 00000000 	 .word cpu_irq_restore
 1208              	 .cfi_endproc
 1209              	.LFE142:
 1211              	 .section .text.udd_attach,"ax",%progbits
 1212              	 .align 1
 1213              	 .global udd_attach
 1214              	 .syntax unified
 1215              	 .thumb
 1216              	 .thumb_func
 1217              	 .fpu softvfp
 1219              	udd_attach:
 1220              	.LFB143:
 719:.././hal/sam3u1c/udphs_device.c **** 
 720:.././hal/sam3u1c/udphs_device.c **** 
 721:.././hal/sam3u1c/udphs_device.c **** void udd_attach(void)
 722:.././hal/sam3u1c/udphs_device.c **** {
 1221              	 .loc 6 722 1
 1222              	 .cfi_startproc
 1223              	 
 1224              	 
 1225 0000 80B5     	 push {r7,lr}
 1226              	.LCFI60:
 1227              	 .cfi_def_cfa_offset 8
 1228              	 .cfi_offset 7,-8
 1229              	 .cfi_offset 14,-4
 1230 0002 82B0     	 sub sp,sp,#8
 1231              	.LCFI61:
 1232              	 .cfi_def_cfa_offset 16
 1233 0004 00AF     	 add r7,sp,#0
 1234              	.LCFI62:
 1235              	 .cfi_def_cfa_register 7
 723:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
 724:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 1236              	 .loc 6 724 10
 1237 0006 264B     	 ldr r3,.L59
 1238 0008 9847     	 blx r3
 1239              	.LVL39:
 1240 000a 7860     	 str r0,[r7,#4]
 725:.././hal/sam3u1c/udphs_device.c **** 
 726:.././hal/sam3u1c/udphs_device.c **** 	// At startup the USB bus state is unknown,
 727:.././hal/sam3u1c/udphs_device.c **** 	// therefore the state is considered IDLE to not miss any USB event
 728:.././hal/sam3u1c/udphs_device.c **** 	udd_sleep_mode(true);
 1241              	 .loc 6 728 2
 1242 000c 0120     	 movs r0,#1
 1243 000e 254B     	 ldr r3,.L59+4
 1244 0010 9847     	 blx r3
 1245              	.LVL40:
 729:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_periph_ck();
 1246              	 .loc 6 729 2
 1247 0012 1D20     	 movs r0,#29
 1248 0014 244B     	 ldr r3,.L59+8
 1249 0016 9847     	 blx r3
 1250              	.LVL41:
 730:.././hal/sam3u1c/udphs_device.c **** 
 731:.././hal/sam3u1c/udphs_device.c **** 	// Authorize attach if Vbus is present
 732:.././hal/sam3u1c/udphs_device.c **** 	udd_attach_device();
 1251              	 .loc 6 732 2
 1252 0018 244B     	 ldr r3,.L59+12
 1253 001a 1B68     	 ldr r3,[r3]
 1254 001c 234A     	 ldr r2,.L59+12
 1255 001e 43F40063 	 orr r3,r3,#2048
 1256 0022 1360     	 str r3,[r2]
 1257 0024 214B     	 ldr r3,.L59+12
 1258 0026 1B68     	 ldr r3,[r3]
 1259 0028 204A     	 ldr r2,.L59+12
 1260 002a 23F40073 	 bic r3,r3,#512
 1261 002e 1360     	 str r3,[r2]
 733:.././hal/sam3u1c/udphs_device.c **** 
 734:.././hal/sam3u1c/udphs_device.c **** 	// Enable USB line events
 735:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_reset_interrupt();
 1262              	 .loc 6 735 2
 1263 0030 1E4B     	 ldr r3,.L59+12
 1264 0032 1B69     	 ldr r3,[r3,#16]
 1265 0034 1D4A     	 ldr r2,.L59+12
 1266 0036 43F01003 	 orr r3,r3,#16
 1267 003a 1361     	 str r3,[r2,#16]
 736:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_suspend_interrupt();
 1268              	 .loc 6 736 2
 1269 003c 1B4B     	 ldr r3,.L59+12
 1270 003e 1B69     	 ldr r3,[r3,#16]
 1271 0040 1A4A     	 ldr r2,.L59+12
 1272 0042 43F00203 	 orr r3,r3,#2
 1273 0046 1361     	 str r3,[r2,#16]
 737:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_wake_up_interrupt();
 1274              	 .loc 6 737 2
 1275 0048 184B     	 ldr r3,.L59+12
 1276 004a 1B69     	 ldr r3,[r3,#16]
 1277 004c 174A     	 ldr r2,.L59+12
 1278 004e 43F02003 	 orr r3,r3,#32
 1279 0052 1361     	 str r3,[r2,#16]
 738:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_sof_interrupt();
 1280              	 .loc 6 738 2
 1281 0054 154B     	 ldr r3,.L59+12
 1282 0056 1B69     	 ldr r3,[r3,#16]
 1283 0058 144A     	 ldr r2,.L59+12
 1284 005a 43F00803 	 orr r3,r3,#8
 1285 005e 1361     	 str r3,[r2,#16]
 739:.././hal/sam3u1c/udphs_device.c **** #ifdef USB_DEVICE_HS_SUPPORT
 740:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_msof_interrupt();
 1286              	 .loc 6 740 2
 1287 0060 124B     	 ldr r3,.L59+12
 1288 0062 1B69     	 ldr r3,[r3,#16]
 1289 0064 114A     	 ldr r2,.L59+12
 1290 0066 43F00403 	 orr r3,r3,#4
 1291 006a 1361     	 str r3,[r2,#16]
 741:.././hal/sam3u1c/udphs_device.c **** #endif
 742:.././hal/sam3u1c/udphs_device.c **** 	// Reset following interrupts flag
 743:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_sof();
 1292              	 .loc 6 743 2
 1293 006c 0F4B     	 ldr r3,.L59+12
 1294 006e 0822     	 movs r2,#8
 1295 0070 9A61     	 str r2,[r3,#24]
 744:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_msof();
 1296              	 .loc 6 744 2
 1297 0072 0E4B     	 ldr r3,.L59+12
 1298 0074 0422     	 movs r2,#4
 1299 0076 9A61     	 str r2,[r3,#24]
 745:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_reset();
 1300              	 .loc 6 745 2
 1301 0078 0C4B     	 ldr r3,.L59+12
 1302 007a 1022     	 movs r2,#16
 1303 007c 9A61     	 str r2,[r3,#24]
 746:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_suspend();
 1304              	 .loc 6 746 2
 1305 007e 0B4B     	 ldr r3,.L59+12
 1306 0080 0222     	 movs r2,#2
 1307 0082 9A61     	 str r2,[r3,#24]
 747:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_wake_up();
 1308              	 .loc 6 747 2
 1309 0084 094B     	 ldr r3,.L59+12
 1310 0086 2022     	 movs r2,#32
 1311 0088 9A61     	 str r2,[r3,#24]
 748:.././hal/sam3u1c/udphs_device.c **** 
 749:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_periph_ck();
 1312              	 .loc 6 749 2
 1313 008a 1D20     	 movs r0,#29
 1314 008c 084B     	 ldr r3,.L59+16
 1315 008e 9847     	 blx r3
 1316              	.LVL42:
 750:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 1317              	 .loc 6 750 2
 1318 0090 7868     	 ldr r0,[r7,#4]
 1319 0092 084B     	 ldr r3,.L59+20
 1320 0094 9847     	 blx r3
 1321              	.LVL43:
 751:.././hal/sam3u1c/udphs_device.c **** }
 1322              	 .loc 6 751 1
 1323 0096 00BF     	 nop
 1324 0098 0837     	 adds r7,r7,#8
 1325              	.LCFI63:
 1326              	 .cfi_def_cfa_offset 8
 1327 009a BD46     	 mov sp,r7
 1328              	.LCFI64:
 1329              	 .cfi_def_cfa_register 13
 1330              	 
 1331 009c 80BD     	 pop {r7,pc}
 1332              	.L60:
 1333 009e 00BF     	 .align 2
 1334              	.L59:
 1335 00a0 00000000 	 .word cpu_irq_save
 1336 00a4 00000000 	 .word udd_sleep_mode
 1337 00a8 00000000 	 .word pmc_enable_periph_clk
 1338 00ac 00400A40 	 .word 1074413568
 1339 00b0 00000000 	 .word pmc_disable_periph_clk
 1340 00b4 00000000 	 .word cpu_irq_restore
 1341              	 .cfi_endproc
 1342              	.LFE143:
 1344              	 .section .text.udd_detach,"ax",%progbits
 1345              	 .align 1
 1346              	 .global udd_detach
 1347              	 .syntax unified
 1348              	 .thumb
 1349              	 .thumb_func
 1350              	 .fpu softvfp
 1352              	udd_detach:
 1353              	.LFB144:
 752:.././hal/sam3u1c/udphs_device.c **** 
 753:.././hal/sam3u1c/udphs_device.c **** 
 754:.././hal/sam3u1c/udphs_device.c **** void udd_detach(void)
 755:.././hal/sam3u1c/udphs_device.c **** {
 1354              	 .loc 6 755 1
 1355              	 .cfi_startproc
 1356              	 
 1357              	 
 1358 0000 80B5     	 push {r7,lr}
 1359              	.LCFI65:
 1360              	 .cfi_def_cfa_offset 8
 1361              	 .cfi_offset 7,-8
 1362              	 .cfi_offset 14,-4
 1363 0002 00AF     	 add r7,sp,#0
 1364              	.LCFI66:
 1365              	 .cfi_def_cfa_register 7
 756:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_periph_ck();
 1366              	 .loc 6 756 2
 1367 0004 1D20     	 movs r0,#29
 1368 0006 0B4B     	 ldr r3,.L62
 1369 0008 9847     	 blx r3
 1370              	.LVL44:
 757:.././hal/sam3u1c/udphs_device.c **** 	// Detach device from the bus
 758:.././hal/sam3u1c/udphs_device.c **** 	udd_detach_device();
 1371              	 .loc 6 758 2
 1372 000a 0B4B     	 ldr r3,.L62+4
 1373 000c 1B68     	 ldr r3,[r3]
 1374 000e 0A4A     	 ldr r2,.L62+4
 1375 0010 43F40073 	 orr r3,r3,#512
 1376 0014 1360     	 str r3,[r2]
 1377 0016 084B     	 ldr r3,.L62+4
 1378 0018 1B68     	 ldr r3,[r3]
 1379 001a 074A     	 ldr r2,.L62+4
 1380 001c 23F40063 	 bic r3,r3,#2048
 1381 0020 1360     	 str r3,[r2]
 759:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_periph_ck();
 1382              	 .loc 6 759 2
 1383 0022 1D20     	 movs r0,#29
 1384 0024 054B     	 ldr r3,.L62+8
 1385 0026 9847     	 blx r3
 1386              	.LVL45:
 760:.././hal/sam3u1c/udphs_device.c **** 	udd_sleep_mode(false);
 1387              	 .loc 6 760 2
 1388 0028 0020     	 movs r0,#0
 1389 002a 054B     	 ldr r3,.L62+12
 1390 002c 9847     	 blx r3
 1391              	.LVL46:
 761:.././hal/sam3u1c/udphs_device.c **** }
 1392              	 .loc 6 761 1
 1393 002e 00BF     	 nop
 1394 0030 80BD     	 pop {r7,pc}
 1395              	.L63:
 1396 0032 00BF     	 .align 2
 1397              	.L62:
 1398 0034 00000000 	 .word pmc_enable_periph_clk
 1399 0038 00400A40 	 .word 1074413568
 1400 003c 00000000 	 .word pmc_disable_periph_clk
 1401 0040 00000000 	 .word udd_sleep_mode
 1402              	 .cfi_endproc
 1403              	.LFE144:
 1405              	 .section .text.udd_is_high_speed,"ax",%progbits
 1406              	 .align 1
 1407              	 .global udd_is_high_speed
 1408              	 .syntax unified
 1409              	 .thumb
 1410              	 .thumb_func
 1411              	 .fpu softvfp
 1413              	udd_is_high_speed:
 1414              	.LFB145:
 762:.././hal/sam3u1c/udphs_device.c **** 
 763:.././hal/sam3u1c/udphs_device.c **** 
 764:.././hal/sam3u1c/udphs_device.c **** bool udd_is_high_speed(void)
 765:.././hal/sam3u1c/udphs_device.c **** {
 1415              	 .loc 6 765 1
 1416              	 .cfi_startproc
 1417              	 
 1418              	 
 1419              	 
 1420 0000 80B4     	 push {r7}
 1421              	.LCFI67:
 1422              	 .cfi_def_cfa_offset 4
 1423              	 .cfi_offset 7,-4
 1424 0002 00AF     	 add r7,sp,#0
 1425              	.LCFI68:
 1426              	 .cfi_def_cfa_register 7
 766:.././hal/sam3u1c/udphs_device.c **** #ifdef USB_DEVICE_HS_SUPPORT
 767:.././hal/sam3u1c/udphs_device.c **** 	return !Is_udd_full_speed_mode();
 1427              	 .loc 6 767 10
 1428 0004 064B     	 ldr r3,.L66
 1429 0006 5B69     	 ldr r3,[r3,#20]
 1430 0008 03F00103 	 and r3,r3,#1
 1431              	 .loc 6 767 9
 1432 000c 002B     	 cmp r3,#0
 1433 000e 14BF     	 ite ne
 1434 0010 0123     	 movne r3,#1
 1435 0012 0023     	 moveq r3,#0
 1436 0014 DBB2     	 uxtb r3,r3
 768:.././hal/sam3u1c/udphs_device.c **** #else
 769:.././hal/sam3u1c/udphs_device.c **** 	return false;
 770:.././hal/sam3u1c/udphs_device.c **** #endif
 771:.././hal/sam3u1c/udphs_device.c **** }
 1437              	 .loc 6 771 1
 1438 0016 1846     	 mov r0,r3
 1439 0018 BD46     	 mov sp,r7
 1440              	.LCFI69:
 1441              	 .cfi_def_cfa_register 13
 1442              	 
 1443 001a 80BC     	 pop {r7}
 1444              	.LCFI70:
 1445              	 .cfi_restore 7
 1446              	 .cfi_def_cfa_offset 0
 1447 001c 7047     	 bx lr
 1448              	.L67:
 1449 001e 00BF     	 .align 2
 1450              	.L66:
 1451 0020 00400A40 	 .word 1074413568
 1452              	 .cfi_endproc
 1453              	.LFE145:
 1455              	 .section .text.udd_set_address,"ax",%progbits
 1456              	 .align 1
 1457              	 .global udd_set_address
 1458              	 .syntax unified
 1459              	 .thumb
 1460              	 .thumb_func
 1461              	 .fpu softvfp
 1463              	udd_set_address:
 1464              	.LFB146:
 772:.././hal/sam3u1c/udphs_device.c **** 
 773:.././hal/sam3u1c/udphs_device.c **** 
 774:.././hal/sam3u1c/udphs_device.c **** void udd_set_address(uint8_t address)
 775:.././hal/sam3u1c/udphs_device.c **** {
 1465              	 .loc 6 775 1
 1466              	 .cfi_startproc
 1467              	 
 1468              	 
 1469              	 
 1470 0000 80B4     	 push {r7}
 1471              	.LCFI71:
 1472              	 .cfi_def_cfa_offset 4
 1473              	 .cfi_offset 7,-4
 1474 0002 83B0     	 sub sp,sp,#12
 1475              	.LCFI72:
 1476              	 .cfi_def_cfa_offset 16
 1477 0004 00AF     	 add r7,sp,#0
 1478              	.LCFI73:
 1479              	 .cfi_def_cfa_register 7
 1480 0006 0346     	 mov r3,r0
 1481 0008 FB71     	 strb r3,[r7,#7]
 776:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("Addr%d ", address);
 777:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_address();
 1482              	 .loc 6 777 2
 1483 000a 0D4B     	 ldr r3,.L69
 1484 000c 1B68     	 ldr r3,[r3]
 1485 000e 0C4A     	 ldr r2,.L69
 1486 0010 23F08003 	 bic r3,r3,#128
 1487 0014 1360     	 str r3,[r2]
 778:.././hal/sam3u1c/udphs_device.c **** 	udd_configure_address(address);
 1488              	 .loc 6 778 2
 1489 0016 0A4B     	 ldr r3,.L69
 1490 0018 1B68     	 ldr r3,[r3]
 1491 001a 23F07F02 	 bic r2,r3,#127
 1492 001e FB79     	 ldrb r3,[r7,#7]
 1493 0020 03F07F03 	 and r3,r3,#127
 1494 0024 0649     	 ldr r1,.L69
 1495 0026 1343     	 orrs r3,r3,r2
 1496 0028 0B60     	 str r3,[r1]
 779:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_address();
 1497              	 .loc 6 779 2
 1498 002a 054B     	 ldr r3,.L69
 1499 002c 1B68     	 ldr r3,[r3]
 1500 002e 044A     	 ldr r2,.L69
 1501 0030 43F08003 	 orr r3,r3,#128
 1502 0034 1360     	 str r3,[r2]
 780:.././hal/sam3u1c/udphs_device.c **** }
 1503              	 .loc 6 780 1
 1504 0036 00BF     	 nop
 1505 0038 0C37     	 adds r7,r7,#12
 1506              	.LCFI74:
 1507              	 .cfi_def_cfa_offset 4
 1508 003a BD46     	 mov sp,r7
 1509              	.LCFI75:
 1510              	 .cfi_def_cfa_register 13
 1511              	 
 1512 003c 80BC     	 pop {r7}
 1513              	.LCFI76:
 1514              	 .cfi_restore 7
 1515              	 .cfi_def_cfa_offset 0
 1516 003e 7047     	 bx lr
 1517              	.L70:
 1518              	 .align 2
 1519              	.L69:
 1520 0040 00400A40 	 .word 1074413568
 1521              	 .cfi_endproc
 1522              	.LFE146:
 1524              	 .section .text.udd_getaddress,"ax",%progbits
 1525              	 .align 1
 1526              	 .global udd_getaddress
 1527              	 .syntax unified
 1528              	 .thumb
 1529              	 .thumb_func
 1530              	 .fpu softvfp
 1532              	udd_getaddress:
 1533              	.LFB147:
 781:.././hal/sam3u1c/udphs_device.c **** 
 782:.././hal/sam3u1c/udphs_device.c **** 
 783:.././hal/sam3u1c/udphs_device.c **** uint8_t udd_getaddress(void)
 784:.././hal/sam3u1c/udphs_device.c **** {
 1534              	 .loc 6 784 1
 1535              	 .cfi_startproc
 1536              	 
 1537              	 
 1538              	 
 1539 0000 80B4     	 push {r7}
 1540              	.LCFI77:
 1541              	 .cfi_def_cfa_offset 4
 1542              	 .cfi_offset 7,-4
 1543 0002 00AF     	 add r7,sp,#0
 1544              	.LCFI78:
 1545              	 .cfi_def_cfa_register 7
 785:.././hal/sam3u1c/udphs_device.c **** 	return udd_get_configured_address();
 1546              	 .loc 6 785 9
 1547 0004 044B     	 ldr r3,.L73
 1548 0006 1B68     	 ldr r3,[r3]
 1549 0008 DBB2     	 uxtb r3,r3
 1550 000a 03F07F03 	 and r3,r3,#127
 1551 000e DBB2     	 uxtb r3,r3
 786:.././hal/sam3u1c/udphs_device.c **** }
 1552              	 .loc 6 786 1
 1553 0010 1846     	 mov r0,r3
 1554 0012 BD46     	 mov sp,r7
 1555              	.LCFI79:
 1556              	 .cfi_def_cfa_register 13
 1557              	 
 1558 0014 80BC     	 pop {r7}
 1559              	.LCFI80:
 1560              	 .cfi_restore 7
 1561              	 .cfi_def_cfa_offset 0
 1562 0016 7047     	 bx lr
 1563              	.L74:
 1564              	 .align 2
 1565              	.L73:
 1566 0018 00400A40 	 .word 1074413568
 1567              	 .cfi_endproc
 1568              	.LFE147:
 1570              	 .section .text.udd_get_frame_number,"ax",%progbits
 1571              	 .align 1
 1572              	 .global udd_get_frame_number
 1573              	 .syntax unified
 1574              	 .thumb
 1575              	 .thumb_func
 1576              	 .fpu softvfp
 1578              	udd_get_frame_number:
 1579              	.LFB148:
 787:.././hal/sam3u1c/udphs_device.c **** 
 788:.././hal/sam3u1c/udphs_device.c **** 
 789:.././hal/sam3u1c/udphs_device.c **** uint16_t udd_get_frame_number(void)
 790:.././hal/sam3u1c/udphs_device.c **** {
 1580              	 .loc 6 790 1
 1581              	 .cfi_startproc
 1582              	 
 1583              	 
 1584              	 
 1585 0000 80B4     	 push {r7}
 1586              	.LCFI81:
 1587              	 .cfi_def_cfa_offset 4
 1588              	 .cfi_offset 7,-4
 1589 0002 00AF     	 add r7,sp,#0
 1590              	.LCFI82:
 1591              	 .cfi_def_cfa_register 7
 791:.././hal/sam3u1c/udphs_device.c **** 	return udd_frame_number();
 1592              	 .loc 6 791 9
 1593 0004 054B     	 ldr r3,.L77
 1594 0006 5B68     	 ldr r3,[r3,#4]
 1595 0008 DB08     	 lsrs r3,r3,#3
 1596 000a 9BB2     	 uxth r3,r3
 1597 000c C3F30A03 	 ubfx r3,r3,#0,#11
 1598 0010 9BB2     	 uxth r3,r3
 792:.././hal/sam3u1c/udphs_device.c **** }
 1599              	 .loc 6 792 1
 1600 0012 1846     	 mov r0,r3
 1601 0014 BD46     	 mov sp,r7
 1602              	.LCFI83:
 1603              	 .cfi_def_cfa_register 13
 1604              	 
 1605 0016 80BC     	 pop {r7}
 1606              	.LCFI84:
 1607              	 .cfi_restore 7
 1608              	 .cfi_def_cfa_offset 0
 1609 0018 7047     	 bx lr
 1610              	.L78:
 1611 001a 00BF     	 .align 2
 1612              	.L77:
 1613 001c 00400A40 	 .word 1074413568
 1614              	 .cfi_endproc
 1615              	.LFE148:
 1617              	 .section .text.udd_get_micro_frame_number,"ax",%progbits
 1618              	 .align 1
 1619              	 .global udd_get_micro_frame_number
 1620              	 .syntax unified
 1621              	 .thumb
 1622              	 .thumb_func
 1623              	 .fpu softvfp
 1625              	udd_get_micro_frame_number:
 1626              	.LFB149:
 793:.././hal/sam3u1c/udphs_device.c **** 
 794:.././hal/sam3u1c/udphs_device.c **** uint16_t udd_get_micro_frame_number(void)
 795:.././hal/sam3u1c/udphs_device.c **** {
 1627              	 .loc 6 795 1
 1628              	 .cfi_startproc
 1629              	 
 1630              	 
 1631              	 
 1632 0000 80B4     	 push {r7}
 1633              	.LCFI85:
 1634              	 .cfi_def_cfa_offset 4
 1635              	 .cfi_offset 7,-4
 1636 0002 00AF     	 add r7,sp,#0
 1637              	.LCFI86:
 1638              	 .cfi_def_cfa_register 7
 796:.././hal/sam3u1c/udphs_device.c **** 	return udd_micro_frame_number();
 1639              	 .loc 6 796 9
 1640 0004 044B     	 ldr r3,.L81
 1641 0006 5B68     	 ldr r3,[r3,#4]
 1642 0008 9BB2     	 uxth r3,r3
 1643 000a 03F00703 	 and r3,r3,#7
 1644 000e 9BB2     	 uxth r3,r3
 797:.././hal/sam3u1c/udphs_device.c **** }
 1645              	 .loc 6 797 1
 1646 0010 1846     	 mov r0,r3
 1647 0012 BD46     	 mov sp,r7
 1648              	.LCFI87:
 1649              	 .cfi_def_cfa_register 13
 1650              	 
 1651 0014 80BC     	 pop {r7}
 1652              	.LCFI88:
 1653              	 .cfi_restore 7
 1654              	 .cfi_def_cfa_offset 0
 1655 0016 7047     	 bx lr
 1656              	.L82:
 1657              	 .align 2
 1658              	.L81:
 1659 0018 00400A40 	 .word 1074413568
 1660              	 .cfi_endproc
 1661              	.LFE149:
 1663              	 .section .text.udd_send_remotewakeup,"ax",%progbits
 1664              	 .align 1
 1665              	 .global udd_send_remotewakeup
 1666              	 .syntax unified
 1667              	 .thumb
 1668              	 .thumb_func
 1669              	 .fpu softvfp
 1671              	udd_send_remotewakeup:
 1672              	.LFB150:
 798:.././hal/sam3u1c/udphs_device.c **** 
 799:.././hal/sam3u1c/udphs_device.c **** void udd_send_remotewakeup(void)
 800:.././hal/sam3u1c/udphs_device.c **** {
 1673              	 .loc 6 800 1
 1674              	 .cfi_startproc
 1675              	 
 1676              	 
 1677 0000 80B5     	 push {r7,lr}
 1678              	.LCFI89:
 1679              	 .cfi_def_cfa_offset 8
 1680              	 .cfi_offset 7,-8
 1681              	 .cfi_offset 14,-4
 1682 0002 00AF     	 add r7,sp,#0
 1683              	.LCFI90:
 1684              	 .cfi_def_cfa_register 7
 801:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_NO_SLEEP_MGR
 802:.././hal/sam3u1c/udphs_device.c **** 	if (!udd_b_idle)
 1685              	 .loc 6 802 6
 1686 0004 0A4B     	 ldr r3,.L86
 1687 0006 1B78     	 ldrb r3,[r3]
 1688 0008 83F00103 	 eor r3,r3,#1
 1689 000c DBB2     	 uxtb r3,r3
 1690              	 .loc 6 802 5
 1691 000e 002B     	 cmp r3,#0
 1692 0010 0BD0     	 beq .L85
 803:.././hal/sam3u1c/udphs_device.c **** #endif
 804:.././hal/sam3u1c/udphs_device.c **** 	{
 805:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("SendWkup\n\r");
 806:.././hal/sam3u1c/udphs_device.c **** 		udd_sleep_mode(true); // Enter in IDLE mode
 1693              	 .loc 6 806 3
 1694 0012 0120     	 movs r0,#1
 1695 0014 074B     	 ldr r3,.L86+4
 1696 0016 9847     	 blx r3
 1697              	.LVL47:
 807:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_periph_ck();
 1698              	 .loc 6 807 3
 1699 0018 1D20     	 movs r0,#29
 1700 001a 074B     	 ldr r3,.L86+8
 1701 001c 9847     	 blx r3
 1702              	.LVL48:
 808:.././hal/sam3u1c/udphs_device.c **** 		udd_initiate_remote_wake_up();
 1703              	 .loc 6 808 3
 1704 001e 074B     	 ldr r3,.L86+12
 1705 0020 1B68     	 ldr r3,[r3]
 1706 0022 064A     	 ldr r2,.L86+12
 1707 0024 43F48063 	 orr r3,r3,#1024
 1708 0028 1360     	 str r3,[r2]
 1709              	.L85:
 809:.././hal/sam3u1c/udphs_device.c **** 	}
 810:.././hal/sam3u1c/udphs_device.c **** }
 1710              	 .loc 6 810 1
 1711 002a 00BF     	 nop
 1712 002c 80BD     	 pop {r7,pc}
 1713              	.L87:
 1714 002e 00BF     	 .align 2
 1715              	.L86:
 1716 0030 00000000 	 .word udd_b_idle
 1717 0034 00000000 	 .word udd_sleep_mode
 1718 0038 00000000 	 .word pmc_enable_periph_clk
 1719 003c 00400A40 	 .word 1074413568
 1720              	 .cfi_endproc
 1721              	.LFE150:
 1723              	 .section .text.udd_set_setup_payload,"ax",%progbits
 1724              	 .align 1
 1725              	 .global udd_set_setup_payload
 1726              	 .syntax unified
 1727              	 .thumb
 1728              	 .thumb_func
 1729              	 .fpu softvfp
 1731              	udd_set_setup_payload:
 1732              	.LFB151:
 811:.././hal/sam3u1c/udphs_device.c **** 
 812:.././hal/sam3u1c/udphs_device.c **** 
 813:.././hal/sam3u1c/udphs_device.c **** void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
 814:.././hal/sam3u1c/udphs_device.c **** {
 1733              	 .loc 6 814 1
 1734              	 .cfi_startproc
 1735              	 
 1736              	 
 1737              	 
 1738 0000 80B4     	 push {r7}
 1739              	.LCFI91:
 1740              	 .cfi_def_cfa_offset 4
 1741              	 .cfi_offset 7,-4
 1742 0002 83B0     	 sub sp,sp,#12
 1743              	.LCFI92:
 1744              	 .cfi_def_cfa_offset 16
 1745 0004 00AF     	 add r7,sp,#0
 1746              	.LCFI93:
 1747              	 .cfi_def_cfa_register 7
 1748 0006 7860     	 str r0,[r7,#4]
 1749 0008 0B46     	 mov r3,r1
 1750 000a 7B80     	 strh r3,[r7,#2]
 815:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.payload = payload;
 1751              	 .loc 6 815 24
 1752 000c 054A     	 ldr r2,.L89
 1753 000e 7B68     	 ldr r3,[r7,#4]
 1754 0010 9360     	 str r3,[r2,#8]
 816:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.payload_size = payload_size;
 1755              	 .loc 6 816 29
 1756 0012 044A     	 ldr r2,.L89
 1757 0014 7B88     	 ldrh r3,[r7,#2]
 1758 0016 9381     	 strh r3,[r2,#12]
 817:.././hal/sam3u1c/udphs_device.c **** }
 1759              	 .loc 6 817 1
 1760 0018 00BF     	 nop
 1761 001a 0C37     	 adds r7,r7,#12
 1762              	.LCFI94:
 1763              	 .cfi_def_cfa_offset 4
 1764 001c BD46     	 mov sp,r7
 1765              	.LCFI95:
 1766              	 .cfi_def_cfa_register 13
 1767              	 
 1768 001e 80BC     	 pop {r7}
 1769              	.LCFI96:
 1770              	 .cfi_restore 7
 1771              	 .cfi_def_cfa_offset 0
 1772 0020 7047     	 bx lr
 1773              	.L90:
 1774 0022 00BF     	 .align 2
 1775              	.L89:
 1776 0024 00000000 	 .word udd_g_ctrlreq
 1777              	 .cfi_endproc
 1778              	.LFE151:
 1780              	 .section .text.udd_ep_alloc,"ax",%progbits
 1781              	 .align 1
 1782              	 .global udd_ep_alloc
 1783              	 .syntax unified
 1784              	 .thumb
 1785              	 .thumb_func
 1786              	 .fpu softvfp
 1788              	udd_ep_alloc:
 1789              	.LFB152:
 818:.././hal/sam3u1c/udphs_device.c **** 
 819:.././hal/sam3u1c/udphs_device.c **** 
 820:.././hal/sam3u1c/udphs_device.c **** #if (0!=USB_DEVICE_MAX_EP)
 821:.././hal/sam3u1c/udphs_device.c **** bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
 822:.././hal/sam3u1c/udphs_device.c **** 		uint16_t MaxEndpointSize)
 823:.././hal/sam3u1c/udphs_device.c **** {
 1790              	 .loc 6 823 1
 1791              	 .cfi_startproc
 1792              	 
 1793              	 
 1794 0000 90B5     	 push {r4,r7,lr}
 1795              	.LCFI97:
 1796              	 .cfi_def_cfa_offset 12
 1797              	 .cfi_offset 4,-12
 1798              	 .cfi_offset 7,-8
 1799              	 .cfi_offset 14,-4
 1800 0002 89B0     	 sub sp,sp,#36
 1801              	.LCFI98:
 1802              	 .cfi_def_cfa_offset 48
 1803 0004 02AF     	 add r7,sp,#8
 1804              	.LCFI99:
 1805              	 .cfi_def_cfa 7,40
 1806 0006 0346     	 mov r3,r0
 1807 0008 FB71     	 strb r3,[r7,#7]
 1808 000a 0B46     	 mov r3,r1
 1809 000c BB71     	 strb r3,[r7,#6]
 1810 000e 1346     	 mov r3,r2
 1811 0010 BB80     	 strh r3,[r7,#4]
 824:.././hal/sam3u1c/udphs_device.c **** 	bool b_dir_in;
 825:.././hal/sam3u1c/udphs_device.c **** 	uint16_t ep_allocated;
 826:.././hal/sam3u1c/udphs_device.c **** 	uint8_t nb_bank, bank, nb_tran = 0, i;
 1812              	 .loc 6 826 25
 1813 0012 0023     	 movs r3,#0
 1814 0014 FB74     	 strb r3,[r7,#19]
 827:.././hal/sam3u1c/udphs_device.c **** 	bool b_iso_hbw = false;
 1815              	 .loc 6 827 7
 1816 0016 0023     	 movs r3,#0
 1817 0018 7B74     	 strb r3,[r7,#17]
 828:.././hal/sam3u1c/udphs_device.c **** 
 829:.././hal/sam3u1c/udphs_device.c **** 	b_dir_in = ep & USB_EP_DIR_IN;
 1818              	 .loc 6 829 16
 1819 001a FB79     	 ldrb r3,[r7,#7]
 1820 001c 03F08003 	 and r3,r3,#128
 1821              	 .loc 6 829 11
 1822 0020 002B     	 cmp r3,#0
 1823 0022 14BF     	 ite ne
 1824 0024 0123     	 movne r3,#1
 1825 0026 0023     	 moveq r3,#0
 1826 0028 3B74     	 strb r3,[r7,#16]
 830:.././hal/sam3u1c/udphs_device.c **** 	ep = ep & USB_EP_ADDR_MASK;
 1827              	 .loc 6 830 5
 1828 002a FB79     	 ldrb r3,[r7,#7]
 1829 002c 03F00F03 	 and r3,r3,#15
 1830 0030 FB71     	 strb r3,[r7,#7]
 831:.././hal/sam3u1c/udphs_device.c **** 
 832:.././hal/sam3u1c/udphs_device.c **** 	if (ep > USB_DEVICE_MAX_EP) {
 1831              	 .loc 6 832 5
 1832 0032 FB79     	 ldrb r3,[r7,#7]
 1833 0034 022B     	 cmp r3,#2
 1834 0036 01D9     	 bls .L92
 833:.././hal/sam3u1c/udphs_device.c **** 		return false;
 1835              	 .loc 6 833 10
 1836 0038 0023     	 movs r3,#0
 1837 003a AEE1     	 b .L93
 1838              	.L92:
 834:.././hal/sam3u1c/udphs_device.c **** 	}
 835:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_enabled(ep)) {
 1839              	 .loc 6 835 6
 1840 003c B04A     	 ldr r2,.L130
 1841 003e FB79     	 ldrb r3,[r7,#7]
 1842 0040 5B01     	 lsls r3,r3,#5
 1843 0042 1344     	 add r3,r3,r2
 1844 0044 03F58673 	 add r3,r3,#268
 1845 0048 1B68     	 ldr r3,[r3]
 1846 004a 03F00103 	 and r3,r3,#1
 1847              	 .loc 6 835 5
 1848 004e 002B     	 cmp r3,#0
 1849 0050 01D0     	 beq .L94
 836:.././hal/sam3u1c/udphs_device.c **** 		return false;
 1850              	 .loc 6 836 10
 1851 0052 0023     	 movs r3,#0
 1852 0054 A1E1     	 b .L93
 1853              	.L94:
 837:.././hal/sam3u1c/udphs_device.c **** 	}
 838:.././hal/sam3u1c/udphs_device.c **** 
 839:.././hal/sam3u1c/udphs_device.c **** 	// Bank choice
 840:.././hal/sam3u1c/udphs_device.c **** 	switch (bmAttributes & USB_EP_TYPE_MASK) {
 1854              	 .loc 6 840 23
 1855 0056 BB79     	 ldrb r3,[r7,#6]
 1856 0058 03F00303 	 and r3,r3,#3
 1857              	 .loc 6 840 2
 1858 005c 022B     	 cmp r3,#2
 1859 005e 1AD0     	 beq .L95
 1860 0060 032B     	 cmp r3,#3
 1861 0062 15D0     	 beq .L96
 1862 0064 012B     	 cmp r3,#1
 1863 0066 19D1     	 bne .L97
 841:.././hal/sam3u1c/udphs_device.c **** 	case USB_EP_TYPE_ISOCHRONOUS:
 842:.././hal/sam3u1c/udphs_device.c **** 		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
 1864              	 .loc 6 842 15
 1865 0068 FB79     	 ldrb r3,[r7,#7]
 1866 006a 002B     	 cmp r3,#0
 1867 006c 07D0     	 beq .L98
 1868              	 .loc 6 842 15 is_stmt 0 discriminator 1
 1869 006e FB79     	 ldrb r3,[r7,#7]
 1870 0070 032B     	 cmp r3,#3
 1871 0072 04D0     	 beq .L98
 1872              	 .loc 6 842 15 discriminator 3
 1873 0074 FB79     	 ldrb r3,[r7,#7]
 1874 0076 042B     	 cmp r3,#4
 1875 0078 01D0     	 beq .L98
 1876              	 .loc 6 842 15 discriminator 5
 1877 007a 0123     	 movs r3,#1
 1878 007c 00E0     	 b .L99
 1879              	.L98:
 1880              	 .loc 6 842 15 discriminator 6
 1881 007e 0023     	 movs r3,#0
 1882              	.L99:
 1883              	 .loc 6 842 13 is_stmt 1 discriminator 8
 1884 0080 7B74     	 strb r3,[r7,#17]
 1885 0082 7B7C     	 ldrb r3,[r7,#17]
 1886 0084 03F00103 	 and r3,r3,#1
 1887 0088 7B74     	 strb r3,[r7,#17]
 843:.././hal/sam3u1c/udphs_device.c **** 		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
 1888              	 .loc 6 843 11 discriminator 8
 1889 008a 0123     	 movs r3,#1
 1890 008c 7B75     	 strb r3,[r7,#21]
 844:.././hal/sam3u1c/udphs_device.c **** 		break;
 1891              	 .loc 6 844 3 discriminator 8
 1892 008e 07E0     	 b .L100
 1893              	.L96:
 845:.././hal/sam3u1c/udphs_device.c **** 	case USB_EP_TYPE_INTERRUPT:
 846:.././hal/sam3u1c/udphs_device.c **** 		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
 1894              	 .loc 6 846 11
 1895 0090 0123     	 movs r3,#1
 1896 0092 7B75     	 strb r3,[r7,#21]
 847:.././hal/sam3u1c/udphs_device.c **** 		break;
 1897              	 .loc 6 847 3
 1898 0094 04E0     	 b .L100
 1899              	.L95:
 848:.././hal/sam3u1c/udphs_device.c **** 	case USB_EP_TYPE_BULK:
 849:.././hal/sam3u1c/udphs_device.c **** 		nb_bank = UDD_BULK_NB_BANK(ep);
 1900              	 .loc 6 849 11
 1901 0096 0223     	 movs r3,#2
 1902 0098 7B75     	 strb r3,[r7,#21]
 850:.././hal/sam3u1c/udphs_device.c **** 		break;
 1903              	 .loc 6 850 3
 1904 009a 01E0     	 b .L100
 1905              	.L97:
 851:.././hal/sam3u1c/udphs_device.c **** 	default:
 852:.././hal/sam3u1c/udphs_device.c **** 		Assert(false);
 853:.././hal/sam3u1c/udphs_device.c **** 		return false;
 1906              	 .loc 6 853 10
 1907 009c 0023     	 movs r3,#0
 1908 009e 7CE1     	 b .L93
 1909              	.L100:
 854:.././hal/sam3u1c/udphs_device.c **** 	}
 855:.././hal/sam3u1c/udphs_device.c **** 	switch (nb_bank) {
 1910              	 .loc 6 855 2
 1911 00a0 7B7D     	 ldrb r3,[r7,#21]
 1912 00a2 022B     	 cmp r3,#2
 1913 00a4 06D0     	 beq .L101
 1914 00a6 032B     	 cmp r3,#3
 1915 00a8 07D0     	 beq .L102
 1916 00aa 012B     	 cmp r3,#1
 1917 00ac 08D1     	 bne .L103
 856:.././hal/sam3u1c/udphs_device.c **** 	case 1:
 857:.././hal/sam3u1c/udphs_device.c **** 		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
 1918              	 .loc 6 857 8
 1919 00ae 0123     	 movs r3,#1
 1920 00b0 3B75     	 strb r3,[r7,#20]
 858:.././hal/sam3u1c/udphs_device.c **** 		break;
 1921              	 .loc 6 858 3
 1922 00b2 07E0     	 b .L104
 1923              	.L101:
 859:.././hal/sam3u1c/udphs_device.c **** 	case 2:
 860:.././hal/sam3u1c/udphs_device.c **** 		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
 1924              	 .loc 6 860 8
 1925 00b4 0223     	 movs r3,#2
 1926 00b6 3B75     	 strb r3,[r7,#20]
 861:.././hal/sam3u1c/udphs_device.c **** 		break;
 1927              	 .loc 6 861 3
 1928 00b8 04E0     	 b .L104
 1929              	.L102:
 862:.././hal/sam3u1c/udphs_device.c **** 	case 3:
 863:.././hal/sam3u1c/udphs_device.c **** 		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
 1930              	 .loc 6 863 8
 1931 00ba 0323     	 movs r3,#3
 1932 00bc 3B75     	 strb r3,[r7,#20]
 864:.././hal/sam3u1c/udphs_device.c **** 		break;
 1933              	 .loc 6 864 3
 1934 00be 01E0     	 b .L104
 1935              	.L103:
 865:.././hal/sam3u1c/udphs_device.c **** 	default:
 866:.././hal/sam3u1c/udphs_device.c **** 		Assert(false);
 867:.././hal/sam3u1c/udphs_device.c **** 		return false;
 1936              	 .loc 6 867 10
 1937 00c0 0023     	 movs r3,#0
 1938 00c2 6AE1     	 b .L93
 1939              	.L104:
 868:.././hal/sam3u1c/udphs_device.c **** 	}
 869:.././hal/sam3u1c/udphs_device.c **** 	if (b_iso_hbw) {
 1940              	 .loc 6 869 5
 1941 00c4 7B7C     	 ldrb r3,[r7,#17]
 1942 00c6 002B     	 cmp r3,#0
 1943 00c8 17D0     	 beq .L105
 870:.././hal/sam3u1c/udphs_device.c **** 		switch(MaxEndpointSize & (0x3u << 11)) {
 1944              	 .loc 6 870 26
 1945 00ca BB88     	 ldrh r3,[r7,#4]
 1946 00cc 03F4C053 	 and r3,r3,#6144
 1947              	 .loc 6 870 3
 1948 00d0 B3F5006F 	 cmp r3,#2048
 1949 00d4 03D0     	 beq .L106
 1950 00d6 B3F5805F 	 cmp r3,#4096
 1951 00da 03D0     	 beq .L107
 1952 00dc 05E0     	 b .L128
 1953              	.L106:
 871:.././hal/sam3u1c/udphs_device.c **** 		case (0x1u << 11):
 872:.././hal/sam3u1c/udphs_device.c **** 			nb_tran = 2;
 1954              	 .loc 6 872 12
 1955 00de 0223     	 movs r3,#2
 1956 00e0 FB74     	 strb r3,[r7,#19]
 873:.././hal/sam3u1c/udphs_device.c **** 			break;
 1957              	 .loc 6 873 4
 1958 00e2 05E0     	 b .L109
 1959              	.L107:
 874:.././hal/sam3u1c/udphs_device.c **** 		case (0x2u << 11):
 875:.././hal/sam3u1c/udphs_device.c **** 			nb_tran = 3;
 1960              	 .loc 6 875 12
 1961 00e4 0323     	 movs r3,#3
 1962 00e6 FB74     	 strb r3,[r7,#19]
 876:.././hal/sam3u1c/udphs_device.c **** 			break;
 1963              	 .loc 6 876 4
 1964 00e8 02E0     	 b .L109
 1965              	.L128:
 877:.././hal/sam3u1c/udphs_device.c **** 		default:
 878:.././hal/sam3u1c/udphs_device.c **** 			nb_tran = 1;
 1966              	 .loc 6 878 12
 1967 00ea 0123     	 movs r3,#1
 1968 00ec FB74     	 strb r3,[r7,#19]
 879:.././hal/sam3u1c/udphs_device.c **** 			break;
 1969              	 .loc 6 879 4
 1970 00ee 00BF     	 nop
 1971              	.L109:
 880:.././hal/sam3u1c/udphs_device.c **** 		}
 881:.././hal/sam3u1c/udphs_device.c **** 		MaxEndpointSize &= ~(0x3u << 11);
 1972              	 .loc 6 881 19
 1973 00f0 BB88     	 ldrh r3,[r7,#4]
 1974 00f2 23F4C053 	 bic r3,r3,#6144
 1975 00f6 BB80     	 strh r3,[r7,#4]
 1976 00f8 06E0     	 b .L110
 1977              	.L105:
 882:.././hal/sam3u1c/udphs_device.c **** 	} else if (MaxEndpointSize & (0x3u << 11)) {
 1978              	 .loc 6 882 29
 1979 00fa BB88     	 ldrh r3,[r7,#4]
 1980 00fc 03F4C053 	 and r3,r3,#6144
 1981              	 .loc 6 882 12
 1982 0100 002B     	 cmp r3,#0
 1983 0102 01D0     	 beq .L110
 883:.././hal/sam3u1c/udphs_device.c **** 		// High BW not supported
 884:.././hal/sam3u1c/udphs_device.c **** 		return false;
 1984              	 .loc 6 884 10
 1985 0104 0023     	 movs r3,#0
 1986 0106 48E1     	 b .L93
 1987              	.L110:
 885:.././hal/sam3u1c/udphs_device.c **** 	}
 886:.././hal/sam3u1c/udphs_device.c **** 
 887:.././hal/sam3u1c/udphs_device.c **** 	Assert(MaxEndpointSize <= udd_get_endpoint_size_max(ep));
 888:.././hal/sam3u1c/udphs_device.c **** 	Assert(nb_bank <= udd_get_endpoint_bank_max_nbr(ep));
 889:.././hal/sam3u1c/udphs_device.c **** 
 890:.././hal/sam3u1c/udphs_device.c **** 	// Set configuration of new endpoint
 891:.././hal/sam3u1c/udphs_device.c **** 	// Note: NB_TRANS is at maximum for isochronous endpoint, else 0 (ignored).
 892:.././hal/sam3u1c/udphs_device.c **** 	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
 1988              	 .loc 6 892 2
 1989 0108 7D4A     	 ldr r2,.L130
 1990 010a FB79     	 ldrb r3,[r7,#7]
 1991 010c 0833     	 adds r3,r3,#8
 1992 010e 5B01     	 lsls r3,r3,#5
 1993 0110 1344     	 add r3,r3,r2
 1994 0112 1B68     	 ldr r3,[r3]
 1995 0114 23F47F73 	 bic r3,r3,#1020
 1996 0118 23F00303 	 bic r3,r3,#3
 1997 011c BA79     	 ldrb r2,[r7,#6]
 1998 011e 1201     	 lsls r2,r2,#4
 1999 0120 02F03002 	 and r2,r2,#48
 2000 0124 397C     	 ldrb r1,[r7,#16]
 2001 0126 0029     	 cmp r1,#0
 2002 0128 01D0     	 beq .L111
 2003              	 .loc 6 892 2 is_stmt 0 discriminator 1
 2004 012a 0821     	 movs r1,#8
 2005 012c 00E0     	 b .L112
 2006              	.L111:
 2007              	 .loc 6 892 2 discriminator 2
 2008 012e 0021     	 movs r1,#0
 2009              	.L112:
 2010              	 .loc 6 892 2 discriminator 4
 2011 0130 1143     	 orrs r1,r1,r2
 2012 0132 BA88     	 ldrh r2,[r7,#4]
 2013 0134 B2F5806F 	 cmp r2,#1024
 2014 0138 07D2     	 bcs .L113
 2015              	 .loc 6 892 2 discriminator 5
 2016 013a BA88     	 ldrh r2,[r7,#4]
 2017 013c 082A     	 cmp r2,#8
 2018 013e 38BF     	 it cc
 2019 0140 0822     	 movcc r2,#8
 2020 0142 92B2     	 uxth r2,r2
 2021 0144 5200     	 lsls r2,r2,#1
 2022 0146 013A     	 subs r2,r2,#1
 2023 0148 01E0     	 b .L114
 2024              	.L113:
 2025              	 .loc 6 892 2 discriminator 6
 2026 014a 40F2FF72 	 movw r2,#2047
 2027              	.L114:
 2028              	 .loc 6 892 2 discriminator 8
 2029 014e B2FA82F2 	 clz r2,r2
 2030 0152 C2F11C02 	 rsb r2,r2,#28
 2031 0156 1143     	 orrs r1,r1,r2
 2032 0158 3A7D     	 ldrb r2,[r7,#20]
 2033 015a 9201     	 lsls r2,r2,#6
 2034 015c D2B2     	 uxtb r2,r2
 2035 015e 1143     	 orrs r1,r1,r2
 2036 0160 7A7C     	 ldrb r2,[r7,#17]
 2037 0162 002A     	 cmp r2,#0
 2038 0164 04D0     	 beq .L115
 2039              	 .loc 6 892 2 discriminator 9
 2040 0166 FA7C     	 ldrb r2,[r7,#19]
 2041 0168 1202     	 lsls r2,r2,#8
 2042 016a 02F44072 	 and r2,r2,#768
 2043 016e 00E0     	 b .L116
 2044              	.L115:
 2045              	 .loc 6 892 2 discriminator 10
 2046 0170 0022     	 movs r2,#0
 2047              	.L116:
 2048              	 .loc 6 892 2 discriminator 12
 2049 0172 0A43     	 orrs r2,r2,r1
 2050 0174 C2F30902 	 ubfx r2,r2,#0,#10
 2051 0178 6148     	 ldr r0,.L130
 2052 017a F979     	 ldrb r1,[r7,#7]
 2053 017c 1A43     	 orrs r2,r2,r3
 2054 017e 01F10803 	 add r3,r1,#8
 2055 0182 5B01     	 lsls r3,r3,#5
 2056 0184 0344     	 add r3,r3,r0
 2057 0186 1A60     	 str r2,[r3]
 893:.././hal/sam3u1c/udphs_device.c **** 			MaxEndpointSize, bank, (b_iso_hbw)?nb_tran:0);
 894:.././hal/sam3u1c/udphs_device.c **** 	if (!Is_udd_endpoint_mapped(ep)) {
 2058              	 .loc 6 894 7 is_stmt 1 discriminator 12
 2059 0188 5D4A     	 ldr r2,.L130
 2060 018a FB79     	 ldrb r3,[r7,#7]
 2061 018c 0833     	 adds r3,r3,#8
 2062 018e 5B01     	 lsls r3,r3,#5
 2063 0190 1344     	 add r3,r3,r2
 2064 0192 1B68     	 ldr r3,[r3]
 2065              	 .loc 6 894 5 discriminator 12
 2066 0194 002B     	 cmp r3,#0
 2067 0196 01DB     	 blt .L117
 895:.././hal/sam3u1c/udphs_device.c **** 		return false;
 2068              	 .loc 6 895 10
 2069 0198 0023     	 movs r3,#0
 2070 019a FEE0     	 b .L93
 2071              	.L117:
 896:.././hal/sam3u1c/udphs_device.c **** 	}
 897:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_endpoint(ep);
 2072              	 .loc 6 897 2
 2073 019c 584A     	 ldr r2,.L130
 2074 019e FB79     	 ldrb r3,[r7,#7]
 2075 01a0 0833     	 adds r3,r3,#8
 2076 01a2 5B01     	 lsls r3,r3,#5
 2077 01a4 1344     	 add r3,r3,r2
 2078 01a6 0433     	 adds r3,r3,#4
 2079 01a8 0122     	 movs r2,#1
 2080 01aa 1A60     	 str r2,[r3]
 898:.././hal/sam3u1c/udphs_device.c **** 
 899:.././hal/sam3u1c/udphs_device.c **** 	// To avoid conflict during reorganization of the DPRAM
 900:.././hal/sam3u1c/udphs_device.c **** 	// the superior endpoint must be unallocated and reallocated
 901:.././hal/sam3u1c/udphs_device.c **** 	ep_allocated = 0;
 2081              	 .loc 6 901 15
 2082 01ac 0023     	 movs r3,#0
 2083 01ae FB82     	 strh r3,[r7,#22]
 902:.././hal/sam3u1c/udphs_device.c **** 
 903:.././hal/sam3u1c/udphs_device.c **** 	// Unalloc endpoints superior
 904:.././hal/sam3u1c/udphs_device.c **** 	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
 2084              	 .loc 6 904 9
 2085 01b0 0223     	 movs r3,#2
 2086 01b2 BB74     	 strb r3,[r7,#18]
 2087              	 .loc 6 904 2
 2088 01b4 39E0     	 b .L118
 2089              	.L120:
 905:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_endpoint_enabled(i)) {
 2090              	 .loc 6 905 7
 2091 01b6 524A     	 ldr r2,.L130
 2092 01b8 BB7C     	 ldrb r3,[r7,#18]
 2093 01ba 5B01     	 lsls r3,r3,#5
 2094 01bc 1344     	 add r3,r3,r2
 2095 01be 03F58673 	 add r3,r3,#268
 2096 01c2 1B68     	 ldr r3,[r3]
 2097 01c4 03F00103 	 and r3,r3,#1
 2098              	 .loc 6 905 6
 2099 01c8 002B     	 cmp r3,#0
 2100 01ca 2BD0     	 beq .L119
 906:.././hal/sam3u1c/udphs_device.c **** 			// Save number of bank value
 907:.././hal/sam3u1c/udphs_device.c **** 			bank = udd_get_endpoint_bank(i);
 2101              	 .loc 6 907 11
 2102 01cc 4C4A     	 ldr r2,.L130
 2103 01ce BB7C     	 ldrb r3,[r7,#18]
 2104 01d0 0833     	 adds r3,r3,#8
 2105 01d2 5B01     	 lsls r3,r3,#5
 2106 01d4 1344     	 add r3,r3,r2
 2107 01d6 1B68     	 ldr r3,[r3]
 2108 01d8 9B09     	 lsrs r3,r3,#6
 2109 01da DBB2     	 uxtb r3,r3
 2110              	 .loc 6 907 9
 2111 01dc 03F00303 	 and r3,r3,#3
 2112 01e0 3B75     	 strb r3,[r7,#20]
 908:.././hal/sam3u1c/udphs_device.c **** 			ep_allocated |=  bank << (i * 2);
 2113              	 .loc 6 908 26
 2114 01e2 3A7D     	 ldrb r2,[r7,#20]
 2115              	 .loc 6 908 32
 2116 01e4 BB7C     	 ldrb r3,[r7,#18]
 2117 01e6 5B00     	 lsls r3,r3,#1
 2118              	 .loc 6 908 26
 2119 01e8 02FA03F3 	 lsl r3,r2,r3
 2120              	 .loc 6 908 17
 2121 01ec 1AB2     	 sxth r2,r3
 2122 01ee B7F91630 	 ldrsh r3,[r7,#22]
 2123 01f2 1343     	 orrs r3,r3,r2
 2124 01f4 1BB2     	 sxth r3,r3
 2125 01f6 FB82     	 strh r3,[r7,#22]
 909:.././hal/sam3u1c/udphs_device.c **** 			// Disable and unallocate endpoint
 910:.././hal/sam3u1c/udphs_device.c **** 			udd_disable_endpoint(i);
 2126              	 .loc 6 910 4
 2127 01f8 414A     	 ldr r2,.L130
 2128 01fa BB7C     	 ldrb r3,[r7,#18]
 2129 01fc 5B01     	 lsls r3,r3,#5
 2130 01fe 1344     	 add r3,r3,r2
 2131 0200 03F58473 	 add r3,r3,#264
 2132 0204 0122     	 movs r2,#1
 2133 0206 1A60     	 str r2,[r3]
 911:.././hal/sam3u1c/udphs_device.c **** 			udd_configure_endpoint_bank(i, 0);
 2134              	 .loc 6 911 4
 2135 0208 3D4A     	 ldr r2,.L130
 2136 020a BB7C     	 ldrb r3,[r7,#18]
 2137 020c 0833     	 adds r3,r3,#8
 2138 020e 5B01     	 lsls r3,r3,#5
 2139 0210 1344     	 add r3,r3,r2
 2140 0212 1A68     	 ldr r2,[r3]
 2141 0214 3A49     	 ldr r1,.L130
 2142 0216 BB7C     	 ldrb r3,[r7,#18]
 2143 0218 22F0C002 	 bic r2,r2,#192
 2144 021c 0833     	 adds r3,r3,#8
 2145 021e 5B01     	 lsls r3,r3,#5
 2146 0220 0B44     	 add r3,r3,r1
 2147 0222 1A60     	 str r2,[r3]
 2148              	.L119:
 904:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_endpoint_enabled(i)) {
 2149              	 .loc 6 904 40 discriminator 2
 2150 0224 BB7C     	 ldrb r3,[r7,#18]
 2151 0226 013B     	 subs r3,r3,#1
 2152 0228 BB74     	 strb r3,[r7,#18]
 2153              	.L118:
 904:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_endpoint_enabled(i)) {
 2154              	 .loc 6 904 2 discriminator 1
 2155 022a BA7C     	 ldrb r2,[r7,#18]
 2156 022c FB79     	 ldrb r3,[r7,#7]
 2157 022e 9A42     	 cmp r2,r3
 2158 0230 C1D2     	 bcs .L120
 912:.././hal/sam3u1c/udphs_device.c **** 
 913:.././hal/sam3u1c/udphs_device.c **** 		}
 914:.././hal/sam3u1c/udphs_device.c **** 	}
 915:.././hal/sam3u1c/udphs_device.c **** 
 916:.././hal/sam3u1c/udphs_device.c **** 	// Realloc/Enable endpoints
 917:.././hal/sam3u1c/udphs_device.c **** 	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
 2159              	 .loc 6 917 9
 2160 0232 FB79     	 ldrb r3,[r7,#7]
 2161 0234 BB74     	 strb r3,[r7,#18]
 2162              	 .loc 6 917 2
 2163 0236 ABE0     	 b .L121
 2164              	.L127:
 2165              	.LBB30:
 918:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
 2166              	 .loc 6 918 41
 2167 0238 BB7C     	 ldrb r3,[r7,#18]
 2168 023a 5A1E     	 subs r2,r3,#1
 2169              	 .loc 6 918 17
 2170 023c 1346     	 mov r3,r2
 2171 023e 5B00     	 lsls r3,r3,#1
 2172 0240 1344     	 add r3,r3,r2
 2173 0242 DB00     	 lsls r3,r3,#3
 2174 0244 2F4A     	 ldr r2,.L130+4
 2175 0246 1344     	 add r3,r3,r2
 2176 0248 FB60     	 str r3,[r7,#12]
 919:.././hal/sam3u1c/udphs_device.c **** 		bool b_restart = ptr_job->busy;
 2177              	 .loc 6 919 27
 2178 024a FB68     	 ldr r3,[r7,#12]
 2179 024c 1B7D     	 ldrb r3,[r3,#20]
 2180 024e C3F30003 	 ubfx r3,r3,#0,#1
 2181 0252 DBB2     	 uxtb r3,r3
 2182              	 .loc 6 919 8
 2183 0254 002B     	 cmp r3,#0
 2184 0256 14BF     	 ite ne
 2185 0258 0123     	 movne r3,#1
 2186 025a 0023     	 moveq r3,#0
 2187 025c FB72     	 strb r3,[r7,#11]
 920:.././hal/sam3u1c/udphs_device.c **** 		// Unallocated banks?
 921:.././hal/sam3u1c/udphs_device.c **** 		bank = (ep_allocated >> (i * 2)) & 0x03;
 2188              	 .loc 6 921 24
 2189 025e FA8A     	 ldrh r2,[r7,#22]
 2190              	 .loc 6 921 30
 2191 0260 BB7C     	 ldrb r3,[r7,#18]
 2192 0262 5B00     	 lsls r3,r3,#1
 2193              	 .loc 6 921 24
 2194 0264 42FA03F3 	 asr r3,r2,r3
 2195              	 .loc 6 921 36
 2196 0268 DBB2     	 uxtb r3,r3
 2197              	 .loc 6 921 8
 2198 026a 03F00303 	 and r3,r3,#3
 2199 026e 3B75     	 strb r3,[r7,#20]
 922:.././hal/sam3u1c/udphs_device.c **** 		if (bank == 0) {
 2200              	 .loc 6 922 6
 2201 0270 3B7D     	 ldrb r3,[r7,#20]
 2202 0272 002B     	 cmp r3,#0
 2203 0274 00F08880 	 beq .L129
 923:.././hal/sam3u1c/udphs_device.c **** 			continue;
 924:.././hal/sam3u1c/udphs_device.c **** 		}
 925:.././hal/sam3u1c/udphs_device.c **** 		// Restart running job because
 926:.././hal/sam3u1c/udphs_device.c **** 		// memory window slides up and its data is lost
 927:.././hal/sam3u1c/udphs_device.c **** 		ptr_job->busy = false;
 2204              	 .loc 6 927 17
 2205 0278 FA68     	 ldr r2,[r7,#12]
 2206 027a 137D     	 ldrb r3,[r2,#20]
 2207 027c 6FF30003 	 bfc r3,#0,#1
 2208 0280 1375     	 strb r3,[r2,#20]
 928:.././hal/sam3u1c/udphs_device.c **** 		// Re-allocate memory
 929:.././hal/sam3u1c/udphs_device.c **** 		udd_configure_endpoint_bank(i, bank);
 2209              	 .loc 6 929 3
 2210 0282 1F4A     	 ldr r2,.L130
 2211 0284 BB7C     	 ldrb r3,[r7,#18]
 2212 0286 0833     	 adds r3,r3,#8
 2213 0288 5B01     	 lsls r3,r3,#5
 2214 028a 1344     	 add r3,r3,r2
 2215 028c 1B68     	 ldr r3,[r3]
 2216 028e 23F0C001 	 bic r1,r3,#192
 2217 0292 3B7D     	 ldrb r3,[r7,#20]
 2218 0294 9B01     	 lsls r3,r3,#6
 2219 0296 DAB2     	 uxtb r2,r3
 2220 0298 1948     	 ldr r0,.L130
 2221 029a BB7C     	 ldrb r3,[r7,#18]
 2222 029c 0A43     	 orrs r2,r2,r1
 2223 029e 0833     	 adds r3,r3,#8
 2224 02a0 5B01     	 lsls r3,r3,#5
 2225 02a2 0344     	 add r3,r3,r0
 2226 02a4 1A60     	 str r2,[r3]
 930:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_endpoint(i);
 2227              	 .loc 6 930 3
 2228 02a6 164A     	 ldr r2,.L130
 2229 02a8 BB7C     	 ldrb r3,[r7,#18]
 2230 02aa 0833     	 adds r3,r3,#8
 2231 02ac 5B01     	 lsls r3,r3,#5
 2232 02ae 1344     	 add r3,r3,r2
 2233 02b0 0433     	 adds r3,r3,#4
 2234 02b2 0122     	 movs r2,#1
 2235 02b4 1A60     	 str r2,[r3]
 931:.././hal/sam3u1c/udphs_device.c **** 		if (!Is_udd_endpoint_mapped(i)) {
 2236              	 .loc 6 931 8
 2237 02b6 124A     	 ldr r2,.L130
 2238 02b8 BB7C     	 ldrb r3,[r7,#18]
 2239 02ba 0833     	 adds r3,r3,#8
 2240 02bc 5B01     	 lsls r3,r3,#5
 2241 02be 1344     	 add r3,r3,r2
 2242 02c0 1B68     	 ldr r3,[r3]
 2243              	 .loc 6 931 6
 2244 02c2 002B     	 cmp r3,#0
 2245 02c4 20DB     	 blt .L124
 932:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("ErrRealloc%d-JobE ", i);
 933:.././hal/sam3u1c/udphs_device.c **** 			if (NULL == ptr_job->call_trans) {
 2246              	 .loc 6 933 23
 2247 02c6 FB68     	 ldr r3,[r7,#12]
 2248 02c8 1B68     	 ldr r3,[r3]
 2249              	 .loc 6 933 7
 2250 02ca 002B     	 cmp r3,#0
 2251 02cc 01D1     	 bne .L125
 934:.././hal/sam3u1c/udphs_device.c **** 				return false;
 2252              	 .loc 6 934 12
 2253 02ce 0023     	 movs r3,#0
 2254 02d0 63E0     	 b .L93
 2255              	.L125:
 935:.././hal/sam3u1c/udphs_device.c **** 			}
 936:.././hal/sam3u1c/udphs_device.c **** 			if (Is_udd_endpoint_in(i)) {
 2256              	 .loc 6 936 8
 2257 02d2 0B4A     	 ldr r2,.L130
 2258 02d4 BB7C     	 ldrb r3,[r7,#18]
 2259 02d6 0833     	 adds r3,r3,#8
 2260 02d8 5B01     	 lsls r3,r3,#5
 2261 02da 1344     	 add r3,r3,r2
 2262 02dc 1B68     	 ldr r3,[r3]
 2263 02de 03F00803 	 and r3,r3,#8
 2264              	 .loc 6 936 7
 2265 02e2 002B     	 cmp r3,#0
 2266 02e4 03D0     	 beq .L126
 937:.././hal/sam3u1c/udphs_device.c **** 				i |= USB_EP_DIR_IN;
 2267              	 .loc 6 937 7
 2268 02e6 BB7C     	 ldrb r3,[r7,#18]
 2269 02e8 63F07F03 	 orn r3,r3,#127
 2270 02ec BB74     	 strb r3,[r7,#18]
 2271              	.L126:
 938:.././hal/sam3u1c/udphs_device.c **** 			}
 939:.././hal/sam3u1c/udphs_device.c **** 			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
 2272              	 .loc 6 939 11
 2273 02ee FB68     	 ldr r3,[r7,#12]
 2274 02f0 1B68     	 ldr r3,[r3]
 2275              	 .loc 6 939 4
 2276 02f2 FA68     	 ldr r2,[r7,#12]
 2277 02f4 D168     	 ldr r1,[r2,#12]
 2278 02f6 BA7C     	 ldrb r2,[r7,#18]
 2279 02f8 0120     	 movs r0,#1
 2280 02fa 9847     	 blx r3
 2281              	.LVL49:
 940:.././hal/sam3u1c/udphs_device.c **** 					ptr_job->buf_cnt, i);
 941:.././hal/sam3u1c/udphs_device.c **** 			return false;
 2282              	 .loc 6 941 11
 2283 02fc 0023     	 movs r3,#0
 2284 02fe 4CE0     	 b .L93
 2285              	.L131:
 2286              	 .align 2
 2287              	.L130:
 2288 0300 00400A40 	 .word 1074413568
 2289 0304 00000000 	 .word udd_ep_job
 2290              	.L124:
 942:.././hal/sam3u1c/udphs_device.c **** 		}
 943:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_endpoint_bank_autoswitch(i);
 2291              	 .loc 6 943 3
 2292 0308 264A     	 ldr r2,.L132
 2293 030a BB7C     	 ldrb r3,[r7,#18]
 2294 030c 0833     	 adds r3,r3,#8
 2295 030e 5B01     	 lsls r3,r3,#5
 2296 0310 1344     	 add r3,r3,r2
 2297 0312 0433     	 adds r3,r3,#4
 2298 0314 1A68     	 ldr r2,[r3]
 2299 0316 2349     	 ldr r1,.L132
 2300 0318 BB7C     	 ldrb r3,[r7,#18]
 2301 031a 42F00202 	 orr r2,r2,#2
 2302 031e 0833     	 adds r3,r3,#8
 2303 0320 5B01     	 lsls r3,r3,#5
 2304 0322 0B44     	 add r3,r3,r1
 2305 0324 0433     	 adds r3,r3,#4
 2306 0326 1A60     	 str r2,[r3]
 944:.././hal/sam3u1c/udphs_device.c **** 		if (b_restart) {
 2307              	 .loc 6 944 6
 2308 0328 FB7A     	 ldrb r3,[r7,#11]
 2309 032a 002B     	 cmp r3,#0
 2310 032c 2DD0     	 beq .L123
 945:.././hal/sam3u1c/udphs_device.c **** 			// Re-run the job remaining part
 946:.././hal/sam3u1c/udphs_device.c **** 			ptr_job->buf_cnt -= ptr_job->buf_load;
 2311              	 .loc 6 946 21
 2312 032e FB68     	 ldr r3,[r7,#12]
 2313 0330 DA68     	 ldr r2,[r3,#12]
 2314              	 .loc 6 946 31
 2315 0332 FB68     	 ldr r3,[r7,#12]
 2316 0334 1B69     	 ldr r3,[r3,#16]
 2317              	 .loc 6 946 21
 2318 0336 D21A     	 subs r2,r2,r3
 2319 0338 FB68     	 ldr r3,[r7,#12]
 2320 033a DA60     	 str r2,[r3,#12]
 947:.././hal/sam3u1c/udphs_device.c **** 			b_restart = udd_ep_run(i,
 948:.././hal/sam3u1c/udphs_device.c **** 					ptr_job->b_shortpacket,
 2321              	 .loc 6 948 13
 2322 033c FB68     	 ldr r3,[r7,#12]
 2323 033e 1B7D     	 ldrb r3,[r3,#20]
 2324 0340 C3F34003 	 ubfx r3,r3,#1,#1
 2325 0344 DBB2     	 uxtb r3,r3
 947:.././hal/sam3u1c/udphs_device.c **** 			b_restart = udd_ep_run(i,
 2326              	 .loc 6 947 16
 2327 0346 002B     	 cmp r3,#0
 2328 0348 14BF     	 ite ne
 2329 034a 0123     	 movne r3,#1
 2330 034c 0023     	 moveq r3,#0
 2331 034e D9B2     	 uxtb r1,r3
 949:.././hal/sam3u1c/udphs_device.c **** 					&ptr_job->buf[ptr_job->buf_cnt],
 2332              	 .loc 6 949 14
 2333 0350 FB68     	 ldr r3,[r7,#12]
 2334 0352 5A68     	 ldr r2,[r3,#4]
 2335              	 .loc 6 949 27
 2336 0354 FB68     	 ldr r3,[r7,#12]
 2337 0356 DB68     	 ldr r3,[r3,#12]
 947:.././hal/sam3u1c/udphs_device.c **** 			b_restart = udd_ep_run(i,
 2338              	 .loc 6 947 16
 2339 0358 D418     	 adds r4,r2,r3
 950:.././hal/sam3u1c/udphs_device.c **** 					ptr_job->buf_size
 2340              	 .loc 6 950 13
 2341 035a FB68     	 ldr r3,[r7,#12]
 2342 035c 9A68     	 ldr r2,[r3,#8]
 951:.././hal/sam3u1c/udphs_device.c **** 						- ptr_job->buf_cnt,
 2343              	 .loc 6 951 16
 2344 035e FB68     	 ldr r3,[r7,#12]
 2345 0360 DB68     	 ldr r3,[r3,#12]
 947:.././hal/sam3u1c/udphs_device.c **** 					ptr_job->b_shortpacket,
 2346              	 .loc 6 947 16
 2347 0362 D21A     	 subs r2,r2,r3
 2348 0364 FB68     	 ldr r3,[r7,#12]
 2349 0366 1B68     	 ldr r3,[r3]
 2350 0368 B87C     	 ldrb r0,[r7,#18]
 2351 036a 0093     	 str r3,[sp]
 2352 036c 1346     	 mov r3,r2
 2353 036e 2246     	 mov r2,r4
 2354 0370 0D4C     	 ldr r4,.L132+4
 2355 0372 A047     	 blx r4
 2356              	.LVL50:
 2357 0374 0346     	 mov r3,r0
 2358 0376 FB72     	 strb r3,[r7,#11]
 952:.././hal/sam3u1c/udphs_device.c **** 					ptr_job->call_trans);
 953:.././hal/sam3u1c/udphs_device.c **** 			if (!b_restart) {
 2359              	 .loc 6 953 8
 2360 0378 FB7A     	 ldrb r3,[r7,#11]
 2361 037a 83F00103 	 eor r3,r3,#1
 2362 037e DBB2     	 uxtb r3,r3
 2363              	 .loc 6 953 7
 2364 0380 002B     	 cmp r3,#0
 2365 0382 02D0     	 beq .L123
 954:.././hal/sam3u1c/udphs_device.c **** 				dbg_print("ErrReRun%d ", i);
 955:.././hal/sam3u1c/udphs_device.c **** 				return false;
 2366              	 .loc 6 955 12
 2367 0384 0023     	 movs r3,#0
 2368 0386 08E0     	 b .L93
 2369              	.L129:
 923:.././hal/sam3u1c/udphs_device.c **** 		}
 2370              	 .loc 6 923 4
 2371 0388 00BF     	 nop
 2372              	.L123:
 2373              	.LBE30:
 917:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
 2374              	 .loc 6 917 40 discriminator 2
 2375 038a BB7C     	 ldrb r3,[r7,#18]
 2376 038c 0133     	 adds r3,r3,#1
 2377 038e BB74     	 strb r3,[r7,#18]
 2378              	.L121:
 917:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
 2379              	 .loc 6 917 2 discriminator 1
 2380 0390 BB7C     	 ldrb r3,[r7,#18]
 2381 0392 022B     	 cmp r3,#2
 2382 0394 7FF650AF 	 bls .L127
 956:.././hal/sam3u1c/udphs_device.c **** 			}
 957:.././hal/sam3u1c/udphs_device.c **** 		}
 958:.././hal/sam3u1c/udphs_device.c **** 	}
 959:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("ep_alloc(%d:%08x) ", ep, UDPHS->UDPHS_EPT[ep].UDPHS_EPTCFG);
 960:.././hal/sam3u1c/udphs_device.c **** 	return true;
 2383              	 .loc 6 960 9
 2384 0398 0123     	 movs r3,#1
 2385              	.L93:
 961:.././hal/sam3u1c/udphs_device.c **** }
 2386              	 .loc 6 961 1
 2387 039a 1846     	 mov r0,r3
 2388 039c 1C37     	 adds r7,r7,#28
 2389              	.LCFI100:
 2390              	 .cfi_def_cfa_offset 12
 2391 039e BD46     	 mov sp,r7
 2392              	.LCFI101:
 2393              	 .cfi_def_cfa_register 13
 2394              	 
 2395 03a0 90BD     	 pop {r4,r7,pc}
 2396              	.L133:
 2397 03a2 00BF     	 .align 2
 2398              	.L132:
 2399 03a4 00400A40 	 .word 1074413568
 2400 03a8 00000000 	 .word udd_ep_run
 2401              	 .cfi_endproc
 2402              	.LFE152:
 2404              	 .section .text.udd_ep_free,"ax",%progbits
 2405              	 .align 1
 2406              	 .global udd_ep_free
 2407              	 .syntax unified
 2408              	 .thumb
 2409              	 .thumb_func
 2410              	 .fpu softvfp
 2412              	udd_ep_free:
 2413              	.LFB153:
 962:.././hal/sam3u1c/udphs_device.c **** 
 963:.././hal/sam3u1c/udphs_device.c **** 
 964:.././hal/sam3u1c/udphs_device.c **** void udd_ep_free(udd_ep_id_t ep)
 965:.././hal/sam3u1c/udphs_device.c **** {
 2414              	 .loc 6 965 1
 2415              	 .cfi_startproc
 2416              	 
 2417              	 
 2418 0000 80B5     	 push {r7,lr}
 2419              	.LCFI102:
 2420              	 .cfi_def_cfa_offset 8
 2421              	 .cfi_offset 7,-8
 2422              	 .cfi_offset 14,-4
 2423 0002 84B0     	 sub sp,sp,#16
 2424              	.LCFI103:
 2425              	 .cfi_def_cfa_offset 24
 2426 0004 00AF     	 add r7,sp,#0
 2427              	.LCFI104:
 2428              	 .cfi_def_cfa_register 7
 2429 0006 0346     	 mov r3,r0
 2430 0008 FB71     	 strb r3,[r7,#7]
 966:.././hal/sam3u1c/udphs_device.c **** 	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
 2431              	 .loc 6 966 10
 2432 000a FB79     	 ldrb r3,[r7,#7]
 2433 000c 03F00F03 	 and r3,r3,#15
 2434 0010 FB73     	 strb r3,[r7,#15]
 967:.././hal/sam3u1c/udphs_device.c **** 
 968:.././hal/sam3u1c/udphs_device.c **** 	if (USB_DEVICE_MAX_EP < ep_index) {
 2435              	 .loc 6 968 5
 2436 0012 FB7B     	 ldrb r3,[r7,#15]
 2437 0014 022B     	 cmp r3,#2
 2438 0016 28D8     	 bhi .L137
 969:.././hal/sam3u1c/udphs_device.c **** 		return;
 970:.././hal/sam3u1c/udphs_device.c **** 	}
 971:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_endpoint(ep_index);
 2439              	 .loc 6 971 2
 2440 0018 164A     	 ldr r2,.L138
 2441 001a FB7B     	 ldrb r3,[r7,#15]
 2442 001c 5B01     	 lsls r3,r3,#5
 2443 001e 1344     	 add r3,r3,r2
 2444 0020 03F58473 	 add r3,r3,#264
 2445 0024 0122     	 movs r2,#1
 2446 0026 1A60     	 str r2,[r3]
 972:.././hal/sam3u1c/udphs_device.c **** 	udd_configure_endpoint_bank(ep_index, 0);
 2447              	 .loc 6 972 2
 2448 0028 124A     	 ldr r2,.L138
 2449 002a FB7B     	 ldrb r3,[r7,#15]
 2450 002c 0833     	 adds r3,r3,#8
 2451 002e 5B01     	 lsls r3,r3,#5
 2452 0030 1344     	 add r3,r3,r2
 2453 0032 1A68     	 ldr r2,[r3]
 2454 0034 0F49     	 ldr r1,.L138
 2455 0036 FB7B     	 ldrb r3,[r7,#15]
 2456 0038 22F0C002 	 bic r2,r2,#192
 2457 003c 0833     	 adds r3,r3,#8
 2458 003e 5B01     	 lsls r3,r3,#5
 2459 0040 0B44     	 add r3,r3,r1
 2460 0042 1A60     	 str r2,[r3]
 973:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_abort_job(ep);
 2461              	 .loc 6 973 2
 2462 0044 FB79     	 ldrb r3,[r7,#7]
 2463 0046 1846     	 mov r0,r3
 2464 0048 0B4B     	 ldr r3,.L138+4
 2465 004a 9847     	 blx r3
 2466              	.LVL51:
 974:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job[ep_index - 1].stall_requested = false;
 2467              	 .loc 6 974 22
 2468 004c FB7B     	 ldrb r3,[r7,#15]
 2469 004e 5A1E     	 subs r2,r3,#1
 2470              	 .loc 6 974 43
 2471 0050 0A49     	 ldr r1,.L138+8
 2472 0052 1346     	 mov r3,r2
 2473 0054 5B00     	 lsls r3,r3,#1
 2474 0056 1344     	 add r3,r3,r2
 2475 0058 DB00     	 lsls r3,r3,#3
 2476 005a 0B44     	 add r3,r3,r1
 2477 005c 03F11002 	 add r2,r3,#16
 2478 0060 1379     	 ldrb r3,[r2,#4]
 2479 0062 6FF38203 	 bfc r3,#2,#1
 2480 0066 1371     	 strb r3,[r2,#4]
 2481 0068 00E0     	 b .L134
 2482              	.L137:
 969:.././hal/sam3u1c/udphs_device.c **** 	}
 2483              	 .loc 6 969 3
 2484 006a 00BF     	 nop
 2485              	.L134:
 975:.././hal/sam3u1c/udphs_device.c **** }
 2486              	 .loc 6 975 1
 2487 006c 1037     	 adds r7,r7,#16
 2488              	.LCFI105:
 2489              	 .cfi_def_cfa_offset 8
 2490 006e BD46     	 mov sp,r7
 2491              	.LCFI106:
 2492              	 .cfi_def_cfa_register 13
 2493              	 
 2494 0070 80BD     	 pop {r7,pc}
 2495              	.L139:
 2496 0072 00BF     	 .align 2
 2497              	.L138:
 2498 0074 00400A40 	 .word 1074413568
 2499 0078 00000000 	 .word udd_ep_abort_job
 2500 007c 00000000 	 .word udd_ep_job
 2501              	 .cfi_endproc
 2502              	.LFE153:
 2504              	 .section .text.udd_ep_is_halted,"ax",%progbits
 2505              	 .align 1
 2506              	 .global udd_ep_is_halted
 2507              	 .syntax unified
 2508              	 .thumb
 2509              	 .thumb_func
 2510              	 .fpu softvfp
 2512              	udd_ep_is_halted:
 2513              	.LFB154:
 976:.././hal/sam3u1c/udphs_device.c **** 
 977:.././hal/sam3u1c/udphs_device.c **** 
 978:.././hal/sam3u1c/udphs_device.c **** bool udd_ep_is_halted(udd_ep_id_t ep)
 979:.././hal/sam3u1c/udphs_device.c **** {
 2514              	 .loc 6 979 1
 2515              	 .cfi_startproc
 2516              	 
 2517              	 
 2518              	 
 2519 0000 80B4     	 push {r7}
 2520              	.LCFI107:
 2521              	 .cfi_def_cfa_offset 4
 2522              	 .cfi_offset 7,-4
 2523 0002 85B0     	 sub sp,sp,#20
 2524              	.LCFI108:
 2525              	 .cfi_def_cfa_offset 24
 2526 0004 00AF     	 add r7,sp,#0
 2527              	.LCFI109:
 2528              	 .cfi_def_cfa_register 7
 2529 0006 0346     	 mov r3,r0
 2530 0008 FB71     	 strb r3,[r7,#7]
 980:.././hal/sam3u1c/udphs_device.c **** 	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
 2531              	 .loc 6 980 10
 2532 000a FB79     	 ldrb r3,[r7,#7]
 2533 000c 03F00F03 	 and r3,r3,#15
 2534 0010 FB73     	 strb r3,[r7,#15]
 981:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
 2535              	 .loc 6 981 47
 2536 0012 FB7B     	 ldrb r3,[r7,#15]
 2537 0014 5A1E     	 subs r2,r3,#1
 2538              	 .loc 6 981 16
 2539 0016 1346     	 mov r3,r2
 2540 0018 5B00     	 lsls r3,r3,#1
 2541 001a 1344     	 add r3,r3,r2
 2542 001c DB00     	 lsls r3,r3,#3
 2543 001e 104A     	 ldr r2,.L145
 2544 0020 1344     	 add r3,r3,r2
 2545 0022 BB60     	 str r3,[r7,#8]
 982:.././hal/sam3u1c/udphs_device.c **** 	return (Is_udd_endpoint_stall_requested(ep_index)
 2546              	 .loc 6 982 10
 2547 0024 0F4A     	 ldr r2,.L145+4
 2548 0026 FB7B     	 ldrb r3,[r7,#15]
 2549 0028 5B01     	 lsls r3,r3,#5
 2550 002a 1344     	 add r3,r3,r2
 2551 002c 03F58E73 	 add r3,r3,#284
 2552 0030 1B68     	 ldr r3,[r3]
 2553 0032 03F02003 	 and r3,r3,#32
 983:.././hal/sam3u1c/udphs_device.c **** 			|| ptr_job->stall_requested);
 2554              	 .loc 6 983 4
 2555 0036 002B     	 cmp r3,#0
 2556 0038 06D1     	 bne .L141
 2557              	 .loc 6 983 4 is_stmt 0 discriminator 2
 2558 003a BB68     	 ldr r3,[r7,#8]
 2559 003c 1B7D     	 ldrb r3,[r3,#20]
 2560 003e 03F00403 	 and r3,r3,#4
 2561 0042 DBB2     	 uxtb r3,r3
 2562 0044 002B     	 cmp r3,#0
 2563 0046 01D0     	 beq .L142
 2564              	.L141:
 2565              	 .loc 6 983 4 discriminator 3
 2566 0048 0123     	 movs r3,#1
 2567 004a 00E0     	 b .L143
 2568              	.L142:
 2569              	 .loc 6 983 4 discriminator 4
 2570 004c 0023     	 movs r3,#0
 2571              	.L143:
 2572              	 .loc 6 983 4 discriminator 6
 2573 004e 03F00103 	 and r3,r3,#1
 2574 0052 DBB2     	 uxtb r3,r3
 984:.././hal/sam3u1c/udphs_device.c **** }
 2575              	 .loc 6 984 1 is_stmt 1 discriminator 6
 2576 0054 1846     	 mov r0,r3
 2577 0056 1437     	 adds r7,r7,#20
 2578              	.LCFI110:
 2579              	 .cfi_def_cfa_offset 4
 2580 0058 BD46     	 mov sp,r7
 2581              	.LCFI111:
 2582              	 .cfi_def_cfa_register 13
 2583              	 
 2584 005a 80BC     	 pop {r7}
 2585              	.LCFI112:
 2586              	 .cfi_restore 7
 2587              	 .cfi_def_cfa_offset 0
 2588 005c 7047     	 bx lr
 2589              	.L146:
 2590 005e 00BF     	 .align 2
 2591              	.L145:
 2592 0060 00000000 	 .word udd_ep_job
 2593 0064 00400A40 	 .word 1074413568
 2594              	 .cfi_endproc
 2595              	.LFE154:
 2597              	 .section .text.udd_ep_set_halt,"ax",%progbits
 2598              	 .align 1
 2599              	 .global udd_ep_set_halt
 2600              	 .syntax unified
 2601              	 .thumb
 2602              	 .thumb_func
 2603              	 .fpu softvfp
 2605              	udd_ep_set_halt:
 2606              	.LFB155:
 985:.././hal/sam3u1c/udphs_device.c **** 
 986:.././hal/sam3u1c/udphs_device.c **** 
 987:.././hal/sam3u1c/udphs_device.c **** bool udd_ep_set_halt(udd_ep_id_t ep)
 988:.././hal/sam3u1c/udphs_device.c **** {
 2607              	 .loc 6 988 1
 2608              	 .cfi_startproc
 2609              	 
 2610              	 
 2611              	 
 2612 0000 80B4     	 push {r7}
 2613              	.LCFI113:
 2614              	 .cfi_def_cfa_offset 4
 2615              	 .cfi_offset 7,-4
 2616 0002 85B0     	 sub sp,sp,#20
 2617              	.LCFI114:
 2618              	 .cfi_def_cfa_offset 24
 2619 0004 00AF     	 add r7,sp,#0
 2620              	.LCFI115:
 2621              	 .cfi_def_cfa_register 7
 2622 0006 0346     	 mov r3,r0
 2623 0008 FB71     	 strb r3,[r7,#7]
 989:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_t *ptr_job;
 990:.././hal/sam3u1c/udphs_device.c **** 	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
 2624              	 .loc 6 990 10
 2625 000a FB79     	 ldrb r3,[r7,#7]
 2626 000c 03F00F03 	 and r3,r3,#15
 2627 0010 FB73     	 strb r3,[r7,#15]
 991:.././hal/sam3u1c/udphs_device.c **** 
 992:.././hal/sam3u1c/udphs_device.c **** 	if (USB_DEVICE_MAX_EP < ep_index) {
 2628              	 .loc 6 992 5
 2629 0012 FB7B     	 ldrb r3,[r7,#15]
 2630 0014 022B     	 cmp r3,#2
 2631 0016 01D9     	 bls .L148
 993:.././hal/sam3u1c/udphs_device.c **** 		return false;
 2632              	 .loc 6 993 10
 2633 0018 0023     	 movs r3,#0
 2634 001a 71E0     	 b .L149
 2635              	.L148:
 994:.././hal/sam3u1c/udphs_device.c **** 	}
 995:.././hal/sam3u1c/udphs_device.c **** 
 996:.././hal/sam3u1c/udphs_device.c **** 	ptr_job = &udd_ep_job[ep_index - 1];
 2636              	 .loc 6 996 33
 2637 001c FB7B     	 ldrb r3,[r7,#15]
 2638 001e 5A1E     	 subs r2,r3,#1
 2639              	 .loc 6 996 10
 2640 0020 1346     	 mov r3,r2
 2641 0022 5B00     	 lsls r3,r3,#1
 2642 0024 1344     	 add r3,r3,r2
 2643 0026 DB00     	 lsls r3,r3,#3
 2644 0028 384A     	 ldr r2,.L154
 2645 002a 1344     	 add r3,r3,r2
 2646 002c BB60     	 str r3,[r7,#8]
 997:.././hal/sam3u1c/udphs_device.c **** 
 998:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
 2647              	 .loc 6 998 6
 2648 002e 384A     	 ldr r2,.L154+4
 2649 0030 FB7B     	 ldrb r3,[r7,#15]
 2650 0032 5B01     	 lsls r3,r3,#5
 2651 0034 1344     	 add r3,r3,r2
 2652 0036 03F58E73 	 add r3,r3,#284
 2653 003a 1B68     	 ldr r3,[r3]
 2654 003c 03F02003 	 and r3,r3,#32
 2655              	 .loc 6 998 5
 2656 0040 002B     	 cmp r3,#0
 2657 0042 06D1     	 bne .L150
 999:.././hal/sam3u1c/udphs_device.c **** 			|| ptr_job->stall_requested) { // Endpoint stall is requested
 2658              	 .loc 6 999 4
 2659 0044 BB68     	 ldr r3,[r7,#8]
 2660 0046 1B7D     	 ldrb r3,[r3,#20]
 2661 0048 03F00403 	 and r3,r3,#4
 2662 004c DBB2     	 uxtb r3,r3
 2663 004e 002B     	 cmp r3,#0
 2664 0050 01D0     	 beq .L151
 2665              	.L150:
1000:.././hal/sam3u1c/udphs_device.c **** 		return true; // Already STALL
 2666              	 .loc 6 1000 10
 2667 0052 0123     	 movs r3,#1
 2668 0054 54E0     	 b .L149
 2669              	.L151:
1001:.././hal/sam3u1c/udphs_device.c **** 	}
1002:.././hal/sam3u1c/udphs_device.c **** 
1003:.././hal/sam3u1c/udphs_device.c **** 	if (ptr_job->busy == true) {
 2670              	 .loc 6 1003 20
 2671 0056 BB68     	 ldr r3,[r7,#8]
 2672 0058 1B7D     	 ldrb r3,[r3,#20]
 2673 005a 03F00103 	 and r3,r3,#1
 2674 005e DBB2     	 uxtb r3,r3
 2675              	 .loc 6 1003 5
 2676 0060 002B     	 cmp r3,#0
 2677 0062 01D0     	 beq .L152
1004:.././hal/sam3u1c/udphs_device.c **** 		return false; // Job on going, stall impossible
 2678              	 .loc 6 1004 10
 2679 0064 0023     	 movs r3,#0
 2680 0066 4BE0     	 b .L149
 2681              	.L152:
1005:.././hal/sam3u1c/udphs_device.c **** 	}
1006:.././hal/sam3u1c/udphs_device.c **** 
1007:.././hal/sam3u1c/udphs_device.c **** 	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
 2682              	 .loc 6 1007 6
 2683 0068 97F90730 	 ldrsb r3,[r7,#7]
 2684              	 .loc 6 1007 5
 2685 006c 002B     	 cmp r3,#0
 2686 006e 25DA     	 bge .L153
 2687              	 .loc 6 1007 36 discriminator 1
 2688 0070 274A     	 ldr r2,.L154+4
 2689 0072 FB7B     	 ldrb r3,[r7,#15]
 2690 0074 5B01     	 lsls r3,r3,#5
 2691 0076 1344     	 add r3,r3,r2
 2692 0078 03F58E73 	 add r3,r3,#284
 2693 007c 1B68     	 ldr r3,[r3]
 2694 007e 9B0C     	 lsrs r3,r3,#18
 2695 0080 03F00303 	 and r3,r3,#3
 2696              	 .loc 6 1007 27 discriminator 1
 2697 0084 002B     	 cmp r3,#0
 2698 0086 19D0     	 beq .L153
1008:.././hal/sam3u1c/udphs_device.c **** 			// Delay the stall after the end of IN transfer on USB line
1009:.././hal/sam3u1c/udphs_device.c **** 			ptr_job->stall_requested = true;
 2699              	 .loc 6 1009 29
 2700 0088 BA68     	 ldr r2,[r7,#8]
 2701 008a 137D     	 ldrb r3,[r2,#20]
 2702 008c 43F00403 	 orr r3,r3,#4
 2703 0090 1375     	 strb r3,[r2,#20]
1010:.././hal/sam3u1c/udphs_device.c **** 			udd_enable_bank_interrupt(ep_index);
 2704              	 .loc 6 1010 4
 2705 0092 1F4A     	 ldr r2,.L154+4
 2706 0094 FB7B     	 ldrb r3,[r7,#15]
 2707 0096 0833     	 adds r3,r3,#8
 2708 0098 5B01     	 lsls r3,r3,#5
 2709 009a 1344     	 add r3,r3,r2
 2710 009c 0433     	 adds r3,r3,#4
 2711 009e 4FF48022 	 mov r2,#262144
 2712 00a2 1A60     	 str r2,[r3]
1011:.././hal/sam3u1c/udphs_device.c **** 			udd_enable_endpoint_interrupt(ep_index);
 2713              	 .loc 6 1011 4
 2714 00a4 1A4B     	 ldr r3,.L154+4
 2715 00a6 1A69     	 ldr r2,[r3,#16]
 2716 00a8 FB7B     	 ldrb r3,[r7,#15]
 2717 00aa 4FF48071 	 mov r1,#256
 2718 00ae 01FA03F3 	 lsl r3,r1,r3
 2719 00b2 1749     	 ldr r1,.L154+4
 2720 00b4 1343     	 orrs r3,r3,r2
 2721 00b6 0B61     	 str r3,[r1,#16]
1012:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("<reqHalt%x> ", ep);
1013:.././hal/sam3u1c/udphs_device.c **** 			return true;
 2722              	 .loc 6 1013 11
 2723 00b8 0123     	 movs r3,#1
 2724 00ba 21E0     	 b .L149
 2725              	.L153:
1014:.././hal/sam3u1c/udphs_device.c **** 	}
1015:.././hal/sam3u1c/udphs_device.c **** 
1016:.././hal/sam3u1c/udphs_device.c **** 	// Stall endpoint immediately
1017:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_endpoint_bank_autoswitch(ep_index);
 2726              	 .loc 6 1017 2
 2727 00bc 144A     	 ldr r2,.L154+4
 2728 00be FB7B     	 ldrb r3,[r7,#15]
 2729 00c0 5B01     	 lsls r3,r3,#5
 2730 00c2 1344     	 add r3,r3,r2
 2731 00c4 03F58473 	 add r3,r3,#264
 2732 00c8 1A68     	 ldr r2,[r3]
 2733 00ca 1149     	 ldr r1,.L154+4
 2734 00cc FB7B     	 ldrb r3,[r7,#15]
 2735 00ce 22F00202 	 bic r2,r2,#2
 2736 00d2 5B01     	 lsls r3,r3,#5
 2737 00d4 0B44     	 add r3,r3,r1
 2738 00d6 03F58473 	 add r3,r3,#264
 2739 00da 1A60     	 str r2,[r3]
1018:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_stall(ep_index);
 2740              	 .loc 6 1018 2
 2741 00dc 0C4A     	 ldr r2,.L154+4
 2742 00de FB7B     	 ldrb r3,[r7,#15]
 2743 00e0 5B01     	 lsls r3,r3,#5
 2744 00e2 1344     	 add r3,r3,r2
 2745 00e4 03F58C73 	 add r3,r3,#280
 2746 00e8 4FF40052 	 mov r2,#8192
 2747 00ec 1A60     	 str r2,[r3]
1019:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_stall_handshake(ep_index);
 2748              	 .loc 6 1019 2
 2749 00ee 084A     	 ldr r2,.L154+4
 2750 00f0 FB7B     	 ldrb r3,[r7,#15]
 2751 00f2 5B01     	 lsls r3,r3,#5
 2752 00f4 1344     	 add r3,r3,r2
 2753 00f6 03F58A73 	 add r3,r3,#276
 2754 00fa 2022     	 movs r2,#32
 2755 00fc 1A60     	 str r2,[r3]
1020:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("<Halt%x> ", ep);
1021:.././hal/sam3u1c/udphs_device.c **** 	return true;
 2756              	 .loc 6 1021 9
 2757 00fe 0123     	 movs r3,#1
 2758              	.L149:
1022:.././hal/sam3u1c/udphs_device.c **** }
 2759              	 .loc 6 1022 1
 2760 0100 1846     	 mov r0,r3
 2761 0102 1437     	 adds r7,r7,#20
 2762              	.LCFI116:
 2763              	 .cfi_def_cfa_offset 4
 2764 0104 BD46     	 mov sp,r7
 2765              	.LCFI117:
 2766              	 .cfi_def_cfa_register 13
 2767              	 
 2768 0106 80BC     	 pop {r7}
 2769              	.LCFI118:
 2770              	 .cfi_restore 7
 2771              	 .cfi_def_cfa_offset 0
 2772 0108 7047     	 bx lr
 2773              	.L155:
 2774 010a 00BF     	 .align 2
 2775              	.L154:
 2776 010c 00000000 	 .word udd_ep_job
 2777 0110 00400A40 	 .word 1074413568
 2778              	 .cfi_endproc
 2779              	.LFE155:
 2781              	 .section .text.udd_ep_clear_halt,"ax",%progbits
 2782              	 .align 1
 2783              	 .global udd_ep_clear_halt
 2784              	 .syntax unified
 2785              	 .thumb
 2786              	 .thumb_func
 2787              	 .fpu softvfp
 2789              	udd_ep_clear_halt:
 2790              	.LFB156:
1023:.././hal/sam3u1c/udphs_device.c **** 
1024:.././hal/sam3u1c/udphs_device.c **** 
1025:.././hal/sam3u1c/udphs_device.c **** bool udd_ep_clear_halt(udd_ep_id_t ep)
1026:.././hal/sam3u1c/udphs_device.c **** {
 2791              	 .loc 6 1026 1
 2792              	 .cfi_startproc
 2793              	 
 2794              	 
 2795 0000 80B5     	 push {r7,lr}
 2796              	.LCFI119:
 2797              	 .cfi_def_cfa_offset 8
 2798              	 .cfi_offset 7,-8
 2799              	 .cfi_offset 14,-4
 2800 0002 84B0     	 sub sp,sp,#16
 2801              	.LCFI120:
 2802              	 .cfi_def_cfa_offset 24
 2803 0004 00AF     	 add r7,sp,#0
 2804              	.LCFI121:
 2805              	 .cfi_def_cfa_register 7
 2806 0006 0346     	 mov r3,r0
 2807 0008 FB71     	 strb r3,[r7,#7]
1027:.././hal/sam3u1c/udphs_device.c **** 	bool b_stall_cleared = false;
 2808              	 .loc 6 1027 7
 2809 000a 0023     	 movs r3,#0
 2810 000c FB73     	 strb r3,[r7,#15]
1028:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_t *ptr_job;
1029:.././hal/sam3u1c/udphs_device.c **** 
1030:.././hal/sam3u1c/udphs_device.c **** 	ep &= USB_EP_ADDR_MASK;
 2811              	 .loc 6 1030 5
 2812 000e FB79     	 ldrb r3,[r7,#7]
 2813 0010 03F00F03 	 and r3,r3,#15
 2814 0014 FB71     	 strb r3,[r7,#7]
1031:.././hal/sam3u1c/udphs_device.c **** 	if (USB_DEVICE_MAX_EP < ep)
 2815              	 .loc 6 1031 5
 2816 0016 FB79     	 ldrb r3,[r7,#7]
 2817 0018 022B     	 cmp r3,#2
 2818 001a 01D9     	 bls .L157
1032:.././hal/sam3u1c/udphs_device.c **** 		return false;
 2819              	 .loc 6 1032 10
 2820 001c 0023     	 movs r3,#0
 2821 001e 7EE0     	 b .L158
 2822              	.L157:
1033:.././hal/sam3u1c/udphs_device.c **** 	ptr_job = &udd_ep_job[ep - 1];
 2823              	 .loc 6 1033 27
 2824 0020 FB79     	 ldrb r3,[r7,#7]
 2825 0022 5A1E     	 subs r2,r3,#1
 2826              	 .loc 6 1033 10
 2827 0024 1346     	 mov r3,r2
 2828 0026 5B00     	 lsls r3,r3,#1
 2829 0028 1344     	 add r3,r3,r2
 2830 002a DB00     	 lsls r3,r3,#3
 2831 002c 3E4A     	 ldr r2,.L163
 2832 002e 1344     	 add r3,r3,r2
 2833 0030 BB60     	 str r3,[r7,#8]
1034:.././hal/sam3u1c/udphs_device.c **** 
1035:.././hal/sam3u1c/udphs_device.c **** 	if (ptr_job->stall_requested) {
 2834              	 .loc 6 1035 6
 2835 0032 BB68     	 ldr r3,[r7,#8]
 2836 0034 1B7D     	 ldrb r3,[r3,#20]
 2837 0036 03F00403 	 and r3,r3,#4
 2838 003a DBB2     	 uxtb r3,r3
 2839              	 .loc 6 1035 5
 2840 003c 002B     	 cmp r3,#0
 2841 003e 1AD0     	 beq .L159
1036:.././hal/sam3u1c/udphs_device.c **** 		// Endpoint stall has been requested but not done
1037:.././hal/sam3u1c/udphs_device.c **** 		// Remove stall request
1038:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("<unWHalt%x> ", ep);
1039:.././hal/sam3u1c/udphs_device.c **** 		ptr_job->stall_requested = false;
 2842              	 .loc 6 1039 28
 2843 0040 BA68     	 ldr r2,[r7,#8]
 2844 0042 137D     	 ldrb r3,[r2,#20]
 2845 0044 6FF38203 	 bfc r3,#2,#1
 2846 0048 1375     	 strb r3,[r2,#20]
1040:.././hal/sam3u1c/udphs_device.c **** 		udd_disable_bank_interrupt(ep);
 2847              	 .loc 6 1040 3
 2848 004a 384A     	 ldr r2,.L163+4
 2849 004c FB79     	 ldrb r3,[r7,#7]
 2850 004e 5B01     	 lsls r3,r3,#5
 2851 0050 1344     	 add r3,r3,r2
 2852 0052 03F58473 	 add r3,r3,#264
 2853 0056 4FF48022 	 mov r2,#262144
 2854 005a 1A60     	 str r2,[r3]
1041:.././hal/sam3u1c/udphs_device.c **** 		udd_disable_endpoint_interrupt(ep);
 2855              	 .loc 6 1041 3
 2856 005c 334B     	 ldr r3,.L163+4
 2857 005e 1A69     	 ldr r2,[r3,#16]
 2858 0060 FB79     	 ldrb r3,[r7,#7]
 2859 0062 4FF48071 	 mov r1,#256
 2860 0066 01FA03F3 	 lsl r3,r1,r3
 2861 006a DB43     	 mvns r3,r3
 2862 006c 2F49     	 ldr r1,.L163+4
 2863 006e 1340     	 ands r3,r3,r2
 2864 0070 0B61     	 str r3,[r1,#16]
1042:.././hal/sam3u1c/udphs_device.c **** 		b_stall_cleared = true;
 2865              	 .loc 6 1042 19
 2866 0072 0123     	 movs r3,#1
 2867 0074 FB73     	 strb r3,[r7,#15]
 2868              	.L159:
1043:.././hal/sam3u1c/udphs_device.c **** 	}
1044:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_stall_requested(ep)) {
 2869              	 .loc 6 1044 6
 2870 0076 2D4A     	 ldr r2,.L163+4
 2871 0078 FB79     	 ldrb r3,[r7,#7]
 2872 007a 5B01     	 lsls r3,r3,#5
 2873 007c 1344     	 add r3,r3,r2
 2874 007e 03F58E73 	 add r3,r3,#284
 2875 0082 1B68     	 ldr r3,[r3]
 2876 0084 03F02003 	 and r3,r3,#32
 2877              	 .loc 6 1044 5
 2878 0088 002B     	 cmp r3,#0
 2879 008a 35D0     	 beq .L160
1045:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("<unHalt%x> ", ep);
1046:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_stall(ep)) {
 2880              	 .loc 6 1046 7
 2881 008c 274A     	 ldr r2,.L163+4
 2882 008e FB79     	 ldrb r3,[r7,#7]
 2883 0090 5B01     	 lsls r3,r3,#5
 2884 0092 1344     	 add r3,r3,r2
 2885 0094 03F58E73 	 add r3,r3,#284
 2886 0098 1B68     	 ldr r3,[r3]
 2887 009a 03F40053 	 and r3,r3,#8192
 2888              	 .loc 6 1046 6
 2889 009e 002B     	 cmp r3,#0
 2890 00a0 10D0     	 beq .L161
1047:.././hal/sam3u1c/udphs_device.c **** 			udd_ack_stall(ep);
 2891              	 .loc 6 1047 4
 2892 00a2 224A     	 ldr r2,.L163+4
 2893 00a4 FB79     	 ldrb r3,[r7,#7]
 2894 00a6 5B01     	 lsls r3,r3,#5
 2895 00a8 1344     	 add r3,r3,r2
 2896 00aa 03F58C73 	 add r3,r3,#280
 2897 00ae 4FF40052 	 mov r2,#8192
 2898 00b2 1A60     	 str r2,[r3]
1048:.././hal/sam3u1c/udphs_device.c **** 			// A packet has been stalled
1049:.././hal/sam3u1c/udphs_device.c **** 			// then reset datatoggle
1050:.././hal/sam3u1c/udphs_device.c **** 			udd_reset_data_toggle(ep);
 2899              	 .loc 6 1050 4
 2900 00b4 1D4A     	 ldr r2,.L163+4
 2901 00b6 FB79     	 ldrb r3,[r7,#7]
 2902 00b8 5B01     	 lsls r3,r3,#5
 2903 00ba 1344     	 add r3,r3,r2
 2904 00bc 03F58C73 	 add r3,r3,#280
 2905 00c0 4022     	 movs r2,#64
 2906 00c2 1A60     	 str r2,[r3]
 2907              	.L161:
1051:.././hal/sam3u1c/udphs_device.c **** 		}
1052:.././hal/sam3u1c/udphs_device.c **** 		// Disable stall
1053:.././hal/sam3u1c/udphs_device.c **** 		udd_disable_stall_handshake(ep);
 2908              	 .loc 6 1053 3
 2909 00c4 194A     	 ldr r2,.L163+4
 2910 00c6 FB79     	 ldrb r3,[r7,#7]
 2911 00c8 5B01     	 lsls r3,r3,#5
 2912 00ca 1344     	 add r3,r3,r2
 2913 00cc 03F58C73 	 add r3,r3,#280
 2914 00d0 2022     	 movs r2,#32
 2915 00d2 1A60     	 str r2,[r3]
1054:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_endpoint_bank_autoswitch(ep);
 2916              	 .loc 6 1054 3
 2917 00d4 154A     	 ldr r2,.L163+4
 2918 00d6 FB79     	 ldrb r3,[r7,#7]
 2919 00d8 0833     	 adds r3,r3,#8
 2920 00da 5B01     	 lsls r3,r3,#5
 2921 00dc 1344     	 add r3,r3,r2
 2922 00de 0433     	 adds r3,r3,#4
 2923 00e0 1A68     	 ldr r2,[r3]
 2924 00e2 1249     	 ldr r1,.L163+4
 2925 00e4 FB79     	 ldrb r3,[r7,#7]
 2926 00e6 42F00202 	 orr r2,r2,#2
 2927 00ea 0833     	 adds r3,r3,#8
 2928 00ec 5B01     	 lsls r3,r3,#5
 2929 00ee 0B44     	 add r3,r3,r1
 2930 00f0 0433     	 adds r3,r3,#4
 2931 00f2 1A60     	 str r2,[r3]
1055:.././hal/sam3u1c/udphs_device.c **** 		b_stall_cleared = true;
 2932              	 .loc 6 1055 19
 2933 00f4 0123     	 movs r3,#1
 2934 00f6 FB73     	 strb r3,[r7,#15]
 2935              	.L160:
1056:.././hal/sam3u1c/udphs_device.c **** 	}
1057:.././hal/sam3u1c/udphs_device.c **** 	if (b_stall_cleared) {
 2936              	 .loc 6 1057 5
 2937 00f8 FB7B     	 ldrb r3,[r7,#15]
 2938 00fa 002B     	 cmp r3,#0
 2939 00fc 0ED0     	 beq .L162
1058:.././hal/sam3u1c/udphs_device.c **** 		// If a job is register on clear halt action
1059:.././hal/sam3u1c/udphs_device.c **** 		// then execute callback
1060:.././hal/sam3u1c/udphs_device.c **** 		if (ptr_job->busy == true) {
 2940              	 .loc 6 1060 21
 2941 00fe BB68     	 ldr r3,[r7,#8]
 2942 0100 1B7D     	 ldrb r3,[r3,#20]
 2943 0102 03F00103 	 and r3,r3,#1
 2944 0106 DBB2     	 uxtb r3,r3
 2945              	 .loc 6 1060 6
 2946 0108 002B     	 cmp r3,#0
 2947 010a 07D0     	 beq .L162
1061:.././hal/sam3u1c/udphs_device.c **** 			ptr_job->busy = false;
 2948              	 .loc 6 1061 18
 2949 010c BA68     	 ldr r2,[r7,#8]
 2950 010e 137D     	 ldrb r3,[r2,#20]
 2951 0110 6FF30003 	 bfc r3,#0,#1
 2952 0114 1375     	 strb r3,[r2,#20]
1062:.././hal/sam3u1c/udphs_device.c **** 			ptr_job->call_nohalt();
 2953              	 .loc 6 1062 11
 2954 0116 BB68     	 ldr r3,[r7,#8]
 2955 0118 1B68     	 ldr r3,[r3]
 2956              	 .loc 6 1062 4
 2957 011a 9847     	 blx r3
 2958              	.LVL52:
 2959              	.L162:
1063:.././hal/sam3u1c/udphs_device.c **** 		}
1064:.././hal/sam3u1c/udphs_device.c **** 	}
1065:.././hal/sam3u1c/udphs_device.c **** 	return true;
 2960              	 .loc 6 1065 9
 2961 011c 0123     	 movs r3,#1
 2962              	.L158:
1066:.././hal/sam3u1c/udphs_device.c **** }
 2963              	 .loc 6 1066 1
 2964 011e 1846     	 mov r0,r3
 2965 0120 1037     	 adds r7,r7,#16
 2966              	.LCFI122:
 2967              	 .cfi_def_cfa_offset 8
 2968 0122 BD46     	 mov sp,r7
 2969              	.LCFI123:
 2970              	 .cfi_def_cfa_register 13
 2971              	 
 2972 0124 80BD     	 pop {r7,pc}
 2973              	.L164:
 2974 0126 00BF     	 .align 2
 2975              	.L163:
 2976 0128 00000000 	 .word udd_ep_job
 2977 012c 00400A40 	 .word 1074413568
 2978              	 .cfi_endproc
 2979              	.LFE156:
 2981              	 .section .text.udd_ep_run,"ax",%progbits
 2982              	 .align 1
 2983              	 .global udd_ep_run
 2984              	 .syntax unified
 2985              	 .thumb
 2986              	 .thumb_func
 2987              	 .fpu softvfp
 2989              	udd_ep_run:
 2990              	.LFB157:
1067:.././hal/sam3u1c/udphs_device.c **** 
1068:.././hal/sam3u1c/udphs_device.c **** 
1069:.././hal/sam3u1c/udphs_device.c **** bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
1070:.././hal/sam3u1c/udphs_device.c **** 		uint8_t * buf, iram_size_t buf_size,
1071:.././hal/sam3u1c/udphs_device.c **** 		udd_callback_trans_t callback)
1072:.././hal/sam3u1c/udphs_device.c **** {
 2991              	 .loc 6 1072 1
 2992              	 .cfi_startproc
 2993              	 
 2994              	 
 2995 0000 80B5     	 push {r7,lr}
 2996              	.LCFI124:
 2997              	 .cfi_def_cfa_offset 8
 2998              	 .cfi_offset 7,-8
 2999              	 .cfi_offset 14,-4
 3000 0002 86B0     	 sub sp,sp,#24
 3001              	.LCFI125:
 3002              	 .cfi_def_cfa_offset 32
 3003 0004 00AF     	 add r7,sp,#0
 3004              	.LCFI126:
 3005              	 .cfi_def_cfa_register 7
 3006 0006 BA60     	 str r2,[r7,#8]
 3007 0008 7B60     	 str r3,[r7,#4]
 3008 000a 0346     	 mov r3,r0
 3009 000c FB73     	 strb r3,[r7,#15]
 3010 000e 0B46     	 mov r3,r1
 3011 0010 BB73     	 strb r3,[r7,#14]
1073:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_t *ptr_job;
1074:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1075:.././hal/sam3u1c/udphs_device.c **** 
1076:.././hal/sam3u1c/udphs_device.c **** 	ep &= USB_EP_ADDR_MASK;
 3012              	 .loc 6 1076 5
 3013 0012 FB7B     	 ldrb r3,[r7,#15]
 3014 0014 03F00F03 	 and r3,r3,#15
 3015 0018 FB73     	 strb r3,[r7,#15]
1077:.././hal/sam3u1c/udphs_device.c **** 	if (USB_DEVICE_MAX_EP < ep) {
 3016              	 .loc 6 1077 5
 3017 001a FB7B     	 ldrb r3,[r7,#15]
 3018 001c 022B     	 cmp r3,#2
 3019 001e 01D9     	 bls .L166
1078:.././hal/sam3u1c/udphs_device.c **** 		return false;
 3020              	 .loc 6 1078 10
 3021 0020 0023     	 movs r3,#0
 3022 0022 63E0     	 b .L167
 3023              	.L166:
1079:.././hal/sam3u1c/udphs_device.c **** 	}
1080:.././hal/sam3u1c/udphs_device.c **** 
1081:.././hal/sam3u1c/udphs_device.c **** 	// Get job about endpoint
1082:.././hal/sam3u1c/udphs_device.c **** 	ptr_job = &udd_ep_job[ep - 1];
 3024              	 .loc 6 1082 27
 3025 0024 FB7B     	 ldrb r3,[r7,#15]
 3026 0026 5A1E     	 subs r2,r3,#1
 3027              	 .loc 6 1082 10
 3028 0028 1346     	 mov r3,r2
 3029 002a 5B00     	 lsls r3,r3,#1
 3030 002c 1344     	 add r3,r3,r2
 3031 002e DB00     	 lsls r3,r3,#3
 3032 0030 304A     	 ldr r2,.L174
 3033 0032 1344     	 add r3,r3,r2
 3034 0034 7B61     	 str r3,[r7,#20]
1083:.././hal/sam3u1c/udphs_device.c **** 
1084:.././hal/sam3u1c/udphs_device.c **** 	if ((!Is_udd_endpoint_enabled(ep))
 3035              	 .loc 6 1084 8
 3036 0036 304A     	 ldr r2,.L174+4
 3037 0038 FB7B     	 ldrb r3,[r7,#15]
 3038 003a 5B01     	 lsls r3,r3,#5
 3039 003c 1344     	 add r3,r3,r2
 3040 003e 03F58673 	 add r3,r3,#268
 3041 0042 1B68     	 ldr r3,[r3]
 3042 0044 03F00103 	 and r3,r3,#1
 3043              	 .loc 6 1084 5
 3044 0048 002B     	 cmp r3,#0
 3045 004a 11D0     	 beq .L168
1085:.././hal/sam3u1c/udphs_device.c **** 			|| Is_udd_endpoint_stall_requested(ep)
 3046              	 .loc 6 1085 7
 3047 004c 2A4A     	 ldr r2,.L174+4
 3048 004e FB7B     	 ldrb r3,[r7,#15]
 3049 0050 5B01     	 lsls r3,r3,#5
 3050 0052 1344     	 add r3,r3,r2
 3051 0054 03F58E73 	 add r3,r3,#284
 3052 0058 1B68     	 ldr r3,[r3]
 3053 005a 03F02003 	 and r3,r3,#32
 3054              	 .loc 6 1085 4
 3055 005e 002B     	 cmp r3,#0
 3056 0060 06D1     	 bne .L168
1086:.././hal/sam3u1c/udphs_device.c **** 			|| ptr_job->stall_requested) {
 3057              	 .loc 6 1086 4
 3058 0062 7B69     	 ldr r3,[r7,#20]
 3059 0064 1B7D     	 ldrb r3,[r3,#20]
 3060 0066 03F00403 	 and r3,r3,#4
 3061 006a DBB2     	 uxtb r3,r3
 3062 006c 002B     	 cmp r3,#0
 3063 006e 01D0     	 beq .L169
 3064              	.L168:
1087:.././hal/sam3u1c/udphs_device.c **** 		return false; // Endpoint is halted
 3065              	 .loc 6 1087 10
 3066 0070 0023     	 movs r3,#0
 3067 0072 3BE0     	 b .L167
 3068              	.L169:
1088:.././hal/sam3u1c/udphs_device.c **** 	}
1089:.././hal/sam3u1c/udphs_device.c **** 
1090:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 3069              	 .loc 6 1090 10
 3070 0074 214B     	 ldr r3,.L174+8
 3071 0076 9847     	 blx r3
 3072              	.LVL53:
 3073 0078 3861     	 str r0,[r7,#16]
1091:.././hal/sam3u1c/udphs_device.c **** 	if (ptr_job->busy == true) {
 3074              	 .loc 6 1091 20
 3075 007a 7B69     	 ldr r3,[r7,#20]
 3076 007c 1B7D     	 ldrb r3,[r3,#20]
 3077 007e 03F00103 	 and r3,r3,#1
 3078 0082 DBB2     	 uxtb r3,r3
 3079              	 .loc 6 1091 5
 3080 0084 002B     	 cmp r3,#0
 3081 0086 04D0     	 beq .L170
1092:.././hal/sam3u1c/udphs_device.c **** 		cpu_irq_restore(flags);
 3082              	 .loc 6 1092 3
 3083 0088 3869     	 ldr r0,[r7,#16]
 3084 008a 1D4B     	 ldr r3,.L174+12
 3085 008c 9847     	 blx r3
 3086              	.LVL54:
1093:.././hal/sam3u1c/udphs_device.c **** 		return false; // Job already on going
 3087              	 .loc 6 1093 10
 3088 008e 0023     	 movs r3,#0
 3089 0090 2CE0     	 b .L167
 3090              	.L170:
1094:.././hal/sam3u1c/udphs_device.c **** 	}
1095:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->busy = true;
 3091              	 .loc 6 1095 16
 3092 0092 7A69     	 ldr r2,[r7,#20]
 3093 0094 137D     	 ldrb r3,[r2,#20]
 3094 0096 43F00103 	 orr r3,r3,#1
 3095 009a 1375     	 strb r3,[r2,#20]
1096:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 3096              	 .loc 6 1096 2
 3097 009c 3869     	 ldr r0,[r7,#16]
 3098 009e 184B     	 ldr r3,.L174+12
 3099 00a0 9847     	 blx r3
 3100              	.LVL55:
1097:.././hal/sam3u1c/udphs_device.c **** 
1098:.././hal/sam3u1c/udphs_device.c **** 	// No job running. Let's setup a new one.
1099:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->buf = buf;
 3101              	 .loc 6 1099 15
 3102 00a2 7B69     	 ldr r3,[r7,#20]
 3103 00a4 BA68     	 ldr r2,[r7,#8]
 3104 00a6 5A60     	 str r2,[r3,#4]
1100:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->buf_size = buf_size;
 3105              	 .loc 6 1100 20
 3106 00a8 7B69     	 ldr r3,[r7,#20]
 3107 00aa 7A68     	 ldr r2,[r7,#4]
 3108 00ac 9A60     	 str r2,[r3,#8]
1101:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->buf_cnt = 0;
 3109              	 .loc 6 1101 19
 3110 00ae 7B69     	 ldr r3,[r7,#20]
 3111 00b0 0022     	 movs r2,#0
 3112 00b2 DA60     	 str r2,[r3,#12]
1102:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->buf_load = 0;
 3113              	 .loc 6 1102 20
 3114 00b4 7B69     	 ldr r3,[r7,#20]
 3115 00b6 0022     	 movs r2,#0
 3116 00b8 1A61     	 str r2,[r3,#16]
1103:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->call_trans = callback;
 3117              	 .loc 6 1103 22
 3118 00ba 7B69     	 ldr r3,[r7,#20]
 3119 00bc 3A6A     	 ldr r2,[r7,#32]
 3120 00be 1A60     	 str r2,[r3]
1104:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
 3121              	 .loc 6 1104 41
 3122 00c0 BB7B     	 ldrb r3,[r7,#14]
 3123 00c2 002B     	 cmp r3,#0
 3124 00c4 02D1     	 bne .L171
 3125              	 .loc 6 1104 41 is_stmt 0 discriminator 2
 3126 00c6 7B68     	 ldr r3,[r7,#4]
 3127 00c8 002B     	 cmp r3,#0
 3128 00ca 01D1     	 bne .L172
 3129              	.L171:
 3130              	 .loc 6 1104 41 discriminator 3
 3131 00cc 0123     	 movs r3,#1
 3132 00ce 00E0     	 b .L173
 3133              	.L172:
 3134              	 .loc 6 1104 41 discriminator 4
 3135 00d0 0023     	 movs r3,#0
 3136              	.L173:
 3137              	 .loc 6 1104 41 discriminator 6
 3138 00d2 03F00103 	 and r3,r3,#1
 3139 00d6 D9B2     	 uxtb r1,r3
 3140              	 .loc 6 1104 25 is_stmt 1 discriminator 6
 3141 00d8 7A69     	 ldr r2,[r7,#20]
 3142 00da 137D     	 ldrb r3,[r2,#20]
 3143 00dc 61F34103 	 bfi r3,r1,#1,#1
 3144 00e0 1375     	 strb r3,[r2,#20]
1105:.././hal/sam3u1c/udphs_device.c **** 
1106:.././hal/sam3u1c/udphs_device.c **** 	// Request first DMA transfer
1107:.././hal/sam3u1c/udphs_device.c **** 	//dbg_print("runDMA%d\n\r", ep);
1108:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_trans_done(ep);
 3145              	 .loc 6 1108 2 discriminator 6
 3146 00e2 FB7B     	 ldrb r3,[r7,#15]
 3147 00e4 1846     	 mov r0,r3
 3148 00e6 074B     	 ldr r3,.L174+16
 3149 00e8 9847     	 blx r3
 3150              	.LVL56:
1109:.././hal/sam3u1c/udphs_device.c **** 	return true;
 3151              	 .loc 6 1109 9 discriminator 6
 3152 00ea 0123     	 movs r3,#1
 3153              	.L167:
1110:.././hal/sam3u1c/udphs_device.c **** }
 3154              	 .loc 6 1110 1
 3155 00ec 1846     	 mov r0,r3
 3156 00ee 1837     	 adds r7,r7,#24
 3157              	.LCFI127:
 3158              	 .cfi_def_cfa_offset 8
 3159 00f0 BD46     	 mov sp,r7
 3160              	.LCFI128:
 3161              	 .cfi_def_cfa_register 13
 3162              	 
 3163 00f2 80BD     	 pop {r7,pc}
 3164              	.L175:
 3165              	 .align 2
 3166              	.L174:
 3167 00f4 00000000 	 .word udd_ep_job
 3168 00f8 00400A40 	 .word 1074413568
 3169 00fc 00000000 	 .word cpu_irq_save
 3170 0100 00000000 	 .word cpu_irq_restore
 3171 0104 00000000 	 .word udd_ep_trans_done
 3172              	 .cfi_endproc
 3173              	.LFE157:
 3175              	 .section .text.udd_ep_abort,"ax",%progbits
 3176              	 .align 1
 3177              	 .global udd_ep_abort
 3178              	 .syntax unified
 3179              	 .thumb
 3180              	 .thumb_func
 3181              	 .fpu softvfp
 3183              	udd_ep_abort:
 3184              	.LFB158:
1111:.././hal/sam3u1c/udphs_device.c **** 
1112:.././hal/sam3u1c/udphs_device.c **** 
1113:.././hal/sam3u1c/udphs_device.c **** void udd_ep_abort(udd_ep_id_t ep)
1114:.././hal/sam3u1c/udphs_device.c **** {
 3185              	 .loc 6 1114 1
 3186              	 .cfi_startproc
 3187              	 
 3188              	 
 3189 0000 80B5     	 push {r7,lr}
 3190              	.LCFI129:
 3191              	 .cfi_def_cfa_offset 8
 3192              	 .cfi_offset 7,-8
 3193              	 .cfi_offset 14,-4
 3194 0002 84B0     	 sub sp,sp,#16
 3195              	.LCFI130:
 3196              	 .cfi_def_cfa_offset 24
 3197 0004 00AF     	 add r7,sp,#0
 3198              	.LCFI131:
 3199              	 .cfi_def_cfa_register 7
 3200 0006 0346     	 mov r3,r0
 3201 0008 FB71     	 strb r3,[r7,#7]
1115:.././hal/sam3u1c/udphs_device.c **** 	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
 3202              	 .loc 6 1115 10
 3203 000a FB79     	 ldrb r3,[r7,#7]
 3204 000c 03F00F03 	 and r3,r3,#15
 3205 0010 FB73     	 strb r3,[r7,#15]
1116:.././hal/sam3u1c/udphs_device.c **** 	// Stop DMA transfer
1117:.././hal/sam3u1c/udphs_device.c **** 	udd_endpoint_dma_set_control(ep_index, 0);
 3206              	 .loc 6 1117 2
 3207 0012 FB7B     	 ldrb r3,[r7,#15]
 3208 0014 1A01     	 lsls r2,r3,#4
 3209 0016 194B     	 ldr r3,.L181
 3210 0018 1344     	 add r3,r3,r2
 3211 001a 0022     	 movs r2,#0
 3212 001c 9A60     	 str r2,[r3,#8]
1118:.././hal/sam3u1c/udphs_device.c **** 	// Kill banks for IN
1119:.././hal/sam3u1c/udphs_device.c **** 	if (ep & USB_EP_DIR_IN) {
 3213              	 .loc 6 1119 6
 3214 001e 97F90730 	 ldrsb r3,[r7,#7]
 3215              	 .loc 6 1119 5
 3216 0022 002B     	 cmp r3,#0
 3217 0024 21DA     	 bge .L177
1120:.././hal/sam3u1c/udphs_device.c **** 		for(;udd_nb_busy_bank(ep_index);) {
 3218              	 .loc 6 1120 3
 3219 0026 14E0     	 b .L178
 3220              	.L180:
1121:.././hal/sam3u1c/udphs_device.c **** 			udd_kill_last_in_bank(ep_index);
 3221              	 .loc 6 1121 4
 3222 0028 154A     	 ldr r2,.L181+4
 3223 002a FB7B     	 ldrb r3,[r7,#15]
 3224 002c 5B01     	 lsls r3,r3,#5
 3225 002e 1344     	 add r3,r3,r2
 3226 0030 03F58A73 	 add r3,r3,#276
 3227 0034 4FF40072 	 mov r2,#512
 3228 0038 1A60     	 str r2,[r3]
1122:.././hal/sam3u1c/udphs_device.c **** 			while(Is_udd_kill_last(ep_index));
 3229              	 .loc 6 1122 9
 3230 003a 00BF     	 nop
 3231              	.L179:
 3232              	 .loc 6 1122 10 discriminator 1
 3233 003c 104A     	 ldr r2,.L181+4
 3234 003e FB7B     	 ldrb r3,[r7,#15]
 3235 0040 5B01     	 lsls r3,r3,#5
 3236 0042 1344     	 add r3,r3,r2
 3237 0044 03F58E73 	 add r3,r3,#284
 3238 0048 1B68     	 ldr r3,[r3]
 3239 004a 03F40073 	 and r3,r3,#512
 3240              	 .loc 6 1122 9 discriminator 1
 3241 004e 002B     	 cmp r3,#0
 3242 0050 F4D1     	 bne .L179
 3243              	.L178:
1120:.././hal/sam3u1c/udphs_device.c **** 		for(;udd_nb_busy_bank(ep_index);) {
 3244              	 .loc 6 1120 8
 3245 0052 0B4A     	 ldr r2,.L181+4
 3246 0054 FB7B     	 ldrb r3,[r7,#15]
 3247 0056 5B01     	 lsls r3,r3,#5
 3248 0058 1344     	 add r3,r3,r2
 3249 005a 03F58E73 	 add r3,r3,#284
 3250 005e 1B68     	 ldr r3,[r3]
 3251 0060 9B0C     	 lsrs r3,r3,#18
 3252 0062 03F00303 	 and r3,r3,#3
1120:.././hal/sam3u1c/udphs_device.c **** 		for(;udd_nb_busy_bank(ep_index);) {
 3253              	 .loc 6 1120 3
 3254 0066 002B     	 cmp r3,#0
 3255 0068 DED1     	 bne .L180
 3256              	.L177:
1123:.././hal/sam3u1c/udphs_device.c **** 		}
1124:.././hal/sam3u1c/udphs_device.c **** 	}
1125:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_abort_job(ep);
 3257              	 .loc 6 1125 2
 3258 006a FB79     	 ldrb r3,[r7,#7]
 3259 006c 1846     	 mov r0,r3
 3260 006e 054B     	 ldr r3,.L181+8
 3261 0070 9847     	 blx r3
 3262              	.LVL57:
1126:.././hal/sam3u1c/udphs_device.c **** }
 3263              	 .loc 6 1126 1
 3264 0072 00BF     	 nop
 3265 0074 1037     	 adds r7,r7,#16
 3266              	.LCFI132:
 3267              	 .cfi_def_cfa_offset 8
 3268 0076 BD46     	 mov sp,r7
 3269              	.LCFI133:
 3270              	 .cfi_def_cfa_register 13
 3271              	 
 3272 0078 80BD     	 pop {r7,pc}
 3273              	.L182:
 3274 007a 00BF     	 .align 2
 3275              	.L181:
 3276 007c 00430A40 	 .word 1074414336
 3277 0080 00400A40 	 .word 1074413568
 3278 0084 00000000 	 .word udd_ep_abort_job
 3279              	 .cfi_endproc
 3280              	.LFE158:
 3282              	 .section .text.udd_ep_wait_stall_clear,"ax",%progbits
 3283              	 .align 1
 3284              	 .global udd_ep_wait_stall_clear
 3285              	 .syntax unified
 3286              	 .thumb
 3287              	 .thumb_func
 3288              	 .fpu softvfp
 3290              	udd_ep_wait_stall_clear:
 3291              	.LFB159:
1127:.././hal/sam3u1c/udphs_device.c **** 
1128:.././hal/sam3u1c/udphs_device.c **** 
1129:.././hal/sam3u1c/udphs_device.c **** bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
1130:.././hal/sam3u1c/udphs_device.c **** 		udd_callback_halt_cleared_t callback)
1131:.././hal/sam3u1c/udphs_device.c **** {
 3292              	 .loc 6 1131 1
 3293              	 .cfi_startproc
 3294              	 
 3295              	 
 3296 0000 80B5     	 push {r7,lr}
 3297              	.LCFI134:
 3298              	 .cfi_def_cfa_offset 8
 3299              	 .cfi_offset 7,-8
 3300              	 .cfi_offset 14,-4
 3301 0002 84B0     	 sub sp,sp,#16
 3302              	.LCFI135:
 3303              	 .cfi_def_cfa_offset 24
 3304 0004 00AF     	 add r7,sp,#0
 3305              	.LCFI136:
 3306              	 .cfi_def_cfa_register 7
 3307 0006 0346     	 mov r3,r0
 3308 0008 3960     	 str r1,[r7]
 3309 000a FB71     	 strb r3,[r7,#7]
1132:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_t *ptr_job;
1133:.././hal/sam3u1c/udphs_device.c **** 
1134:.././hal/sam3u1c/udphs_device.c **** 	ep &= USB_EP_ADDR_MASK;
 3310              	 .loc 6 1134 5
 3311 000c FB79     	 ldrb r3,[r7,#7]
 3312 000e 03F00F03 	 and r3,r3,#15
 3313 0012 FB71     	 strb r3,[r7,#7]
1135:.././hal/sam3u1c/udphs_device.c **** 	if (USB_DEVICE_MAX_EP < ep) {
 3314              	 .loc 6 1135 5
 3315 0014 FB79     	 ldrb r3,[r7,#7]
 3316 0016 022B     	 cmp r3,#2
 3317 0018 01D9     	 bls .L184
1136:.././hal/sam3u1c/udphs_device.c **** 		return false;
 3318              	 .loc 6 1136 10
 3319 001a 0023     	 movs r3,#0
 3320 001c 3CE0     	 b .L185
 3321              	.L184:
1137:.././hal/sam3u1c/udphs_device.c **** 	}
1138:.././hal/sam3u1c/udphs_device.c **** 
1139:.././hal/sam3u1c/udphs_device.c **** 	ptr_job = &udd_ep_job[ep - 1];
 3322              	 .loc 6 1139 27
 3323 001e FB79     	 ldrb r3,[r7,#7]
 3324 0020 5A1E     	 subs r2,r3,#1
 3325              	 .loc 6 1139 10
 3326 0022 1346     	 mov r3,r2
 3327 0024 5B00     	 lsls r3,r3,#1
 3328 0026 1344     	 add r3,r3,r2
 3329 0028 DB00     	 lsls r3,r3,#3
 3330 002a 1D4A     	 ldr r2,.L191
 3331 002c 1344     	 add r3,r3,r2
 3332 002e FB60     	 str r3,[r7,#12]
1140:.././hal/sam3u1c/udphs_device.c **** 
1141:.././hal/sam3u1c/udphs_device.c **** 	if (!Is_udd_endpoint_enabled(ep)) {
 3333              	 .loc 6 1141 7
 3334 0030 1C4A     	 ldr r2,.L191+4
 3335 0032 FB79     	 ldrb r3,[r7,#7]
 3336 0034 5B01     	 lsls r3,r3,#5
 3337 0036 1344     	 add r3,r3,r2
 3338 0038 03F58673 	 add r3,r3,#268
 3339 003c 1B68     	 ldr r3,[r3]
 3340 003e 03F00103 	 and r3,r3,#1
 3341              	 .loc 6 1141 5
 3342 0042 002B     	 cmp r3,#0
 3343 0044 01D1     	 bne .L186
1142:.././hal/sam3u1c/udphs_device.c **** 		return false; // Endpoint not enabled
 3344              	 .loc 6 1142 10
 3345 0046 0023     	 movs r3,#0
 3346 0048 26E0     	 b .L185
 3347              	.L186:
1143:.././hal/sam3u1c/udphs_device.c **** 	}
1144:.././hal/sam3u1c/udphs_device.c **** 
1145:.././hal/sam3u1c/udphs_device.c **** 	// Wait clear halt endpoint
1146:.././hal/sam3u1c/udphs_device.c **** 	if (ptr_job->busy == true) {
 3348              	 .loc 6 1146 20
 3349 004a FB68     	 ldr r3,[r7,#12]
 3350 004c 1B7D     	 ldrb r3,[r3,#20]
 3351 004e 03F00103 	 and r3,r3,#1
 3352 0052 DBB2     	 uxtb r3,r3
 3353              	 .loc 6 1146 5
 3354 0054 002B     	 cmp r3,#0
 3355 0056 01D0     	 beq .L187
1147:.././hal/sam3u1c/udphs_device.c **** 		return false; // Job already on going
 3356              	 .loc 6 1147 10
 3357 0058 0023     	 movs r3,#0
 3358 005a 1DE0     	 b .L185
 3359              	.L187:
1148:.././hal/sam3u1c/udphs_device.c **** 	}
1149:.././hal/sam3u1c/udphs_device.c **** 
1150:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_stall_requested(ep)
 3360              	 .loc 6 1150 6
 3361 005c 114A     	 ldr r2,.L191+4
 3362 005e FB79     	 ldrb r3,[r7,#7]
 3363 0060 5B01     	 lsls r3,r3,#5
 3364 0062 1344     	 add r3,r3,r2
 3365 0064 03F58E73 	 add r3,r3,#284
 3366 0068 1B68     	 ldr r3,[r3]
 3367 006a 03F02003 	 and r3,r3,#32
 3368              	 .loc 6 1150 5
 3369 006e 002B     	 cmp r3,#0
 3370 0070 06D1     	 bne .L188
1151:.././hal/sam3u1c/udphs_device.c **** 			|| ptr_job->stall_requested) {
 3371              	 .loc 6 1151 4
 3372 0072 FB68     	 ldr r3,[r7,#12]
 3373 0074 1B7D     	 ldrb r3,[r3,#20]
 3374 0076 03F00403 	 and r3,r3,#4
 3375 007a DBB2     	 uxtb r3,r3
 3376 007c 002B     	 cmp r3,#0
 3377 007e 08D0     	 beq .L189
 3378              	.L188:
1152:.././hal/sam3u1c/udphs_device.c **** 		// Endpoint halted then registers the callback
1153:.././hal/sam3u1c/udphs_device.c **** 		ptr_job->busy = true;
 3379              	 .loc 6 1153 17
 3380 0080 FA68     	 ldr r2,[r7,#12]
 3381 0082 137D     	 ldrb r3,[r2,#20]
 3382 0084 43F00103 	 orr r3,r3,#1
 3383 0088 1375     	 strb r3,[r2,#20]
1154:.././hal/sam3u1c/udphs_device.c **** 		ptr_job->call_nohalt = callback;
 3384              	 .loc 6 1154 24
 3385 008a FB68     	 ldr r3,[r7,#12]
 3386 008c 3A68     	 ldr r2,[r7]
 3387 008e 1A60     	 str r2,[r3]
 3388 0090 01E0     	 b .L190
 3389              	.L189:
1155:.././hal/sam3u1c/udphs_device.c **** 	} else {
1156:.././hal/sam3u1c/udphs_device.c **** 		// endpoint not halted then call directly callback
1157:.././hal/sam3u1c/udphs_device.c **** 		callback();
 3390              	 .loc 6 1157 3
 3391 0092 3B68     	 ldr r3,[r7]
 3392 0094 9847     	 blx r3
 3393              	.LVL58:
 3394              	.L190:
1158:.././hal/sam3u1c/udphs_device.c **** 	}
1159:.././hal/sam3u1c/udphs_device.c **** 	return true;
 3395              	 .loc 6 1159 9
 3396 0096 0123     	 movs r3,#1
 3397              	.L185:
1160:.././hal/sam3u1c/udphs_device.c **** }
 3398              	 .loc 6 1160 1
 3399 0098 1846     	 mov r0,r3
 3400 009a 1037     	 adds r7,r7,#16
 3401              	.LCFI137:
 3402              	 .cfi_def_cfa_offset 8
 3403 009c BD46     	 mov sp,r7
 3404              	.LCFI138:
 3405              	 .cfi_def_cfa_register 13
 3406              	 
 3407 009e 80BD     	 pop {r7,pc}
 3408              	.L192:
 3409              	 .align 2
 3410              	.L191:
 3411 00a0 00000000 	 .word udd_ep_job
 3412 00a4 00400A40 	 .word 1074413568
 3413              	 .cfi_endproc
 3414              	.LFE159:
 3416              	 .section .text.udd_test_mode_j,"ax",%progbits
 3417              	 .align 1
 3418              	 .global udd_test_mode_j
 3419              	 .syntax unified
 3420              	 .thumb
 3421              	 .thumb_func
 3422              	 .fpu softvfp
 3424              	udd_test_mode_j:
 3425              	.LFB160:
1161:.././hal/sam3u1c/udphs_device.c **** #endif // (0!=USB_DEVICE_MAX_EP)
1162:.././hal/sam3u1c/udphs_device.c **** 
1163:.././hal/sam3u1c/udphs_device.c **** 
1164:.././hal/sam3u1c/udphs_device.c **** #ifdef USB_DEVICE_HS_SUPPORT
1165:.././hal/sam3u1c/udphs_device.c **** 
1166:.././hal/sam3u1c/udphs_device.c **** void udd_test_mode_j(void)
1167:.././hal/sam3u1c/udphs_device.c **** {
 3426              	 .loc 6 1167 1
 3427              	 .cfi_startproc
 3428              	 
 3429              	 
 3430              	 
 3431 0000 80B4     	 push {r7}
 3432              	.LCFI139:
 3433              	 .cfi_def_cfa_offset 4
 3434              	 .cfi_offset 7,-4
 3435 0002 00AF     	 add r7,sp,#0
 3436              	.LCFI140:
 3437              	 .cfi_def_cfa_register 7
1168:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_hs_test_mode();
 3438              	 .loc 6 1168 2
 3439 0004 0A4B     	 ldr r3,.L194
 3440 0006 D3F8E030 	 ldr r3,[r3,#224]
 3441 000a 23F00303 	 bic r3,r3,#3
 3442 000e 084A     	 ldr r2,.L194
 3443 0010 43F00203 	 orr r3,r3,#2
 3444 0014 C2F8E030 	 str r3,[r2,#224]
1169:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_hs_test_mode_j();
 3445              	 .loc 6 1169 2
 3446 0018 054B     	 ldr r3,.L194
 3447 001a D3F8E030 	 ldr r3,[r3,#224]
 3448 001e 044A     	 ldr r2,.L194
 3449 0020 43F00403 	 orr r3,r3,#4
 3450 0024 C2F8E030 	 str r3,[r2,#224]
1170:.././hal/sam3u1c/udphs_device.c **** }
 3451              	 .loc 6 1170 1
 3452 0028 00BF     	 nop
 3453 002a BD46     	 mov sp,r7
 3454              	.LCFI141:
 3455              	 .cfi_def_cfa_register 13
 3456              	 
 3457 002c 80BC     	 pop {r7}
 3458              	.LCFI142:
 3459              	 .cfi_restore 7
 3460              	 .cfi_def_cfa_offset 0
 3461 002e 7047     	 bx lr
 3462              	.L195:
 3463              	 .align 2
 3464              	.L194:
 3465 0030 00400A40 	 .word 1074413568
 3466              	 .cfi_endproc
 3467              	.LFE160:
 3469              	 .section .text.udd_test_mode_k,"ax",%progbits
 3470              	 .align 1
 3471              	 .global udd_test_mode_k
 3472              	 .syntax unified
 3473              	 .thumb
 3474              	 .thumb_func
 3475              	 .fpu softvfp
 3477              	udd_test_mode_k:
 3478              	.LFB161:
1171:.././hal/sam3u1c/udphs_device.c **** 
1172:.././hal/sam3u1c/udphs_device.c **** 
1173:.././hal/sam3u1c/udphs_device.c **** void udd_test_mode_k(void)
1174:.././hal/sam3u1c/udphs_device.c **** {
 3479              	 .loc 6 1174 1
 3480              	 .cfi_startproc
 3481              	 
 3482              	 
 3483              	 
 3484 0000 80B4     	 push {r7}
 3485              	.LCFI143:
 3486              	 .cfi_def_cfa_offset 4
 3487              	 .cfi_offset 7,-4
 3488 0002 00AF     	 add r7,sp,#0
 3489              	.LCFI144:
 3490              	 .cfi_def_cfa_register 7
1175:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_hs_test_mode();
 3491              	 .loc 6 1175 2
 3492 0004 0A4B     	 ldr r3,.L197
 3493 0006 D3F8E030 	 ldr r3,[r3,#224]
 3494 000a 23F00303 	 bic r3,r3,#3
 3495 000e 084A     	 ldr r2,.L197
 3496 0010 43F00203 	 orr r3,r3,#2
 3497 0014 C2F8E030 	 str r3,[r2,#224]
1176:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_hs_test_mode_k();
 3498              	 .loc 6 1176 2
 3499 0018 054B     	 ldr r3,.L197
 3500 001a D3F8E030 	 ldr r3,[r3,#224]
 3501 001e 044A     	 ldr r2,.L197
 3502 0020 43F00803 	 orr r3,r3,#8
 3503 0024 C2F8E030 	 str r3,[r2,#224]
1177:.././hal/sam3u1c/udphs_device.c **** }
 3504              	 .loc 6 1177 1
 3505 0028 00BF     	 nop
 3506 002a BD46     	 mov sp,r7
 3507              	.LCFI145:
 3508              	 .cfi_def_cfa_register 13
 3509              	 
 3510 002c 80BC     	 pop {r7}
 3511              	.LCFI146:
 3512              	 .cfi_restore 7
 3513              	 .cfi_def_cfa_offset 0
 3514 002e 7047     	 bx lr
 3515              	.L198:
 3516              	 .align 2
 3517              	.L197:
 3518 0030 00400A40 	 .word 1074413568
 3519              	 .cfi_endproc
 3520              	.LFE161:
 3522              	 .section .text.udd_test_mode_se0_nak,"ax",%progbits
 3523              	 .align 1
 3524              	 .global udd_test_mode_se0_nak
 3525              	 .syntax unified
 3526              	 .thumb
 3527              	 .thumb_func
 3528              	 .fpu softvfp
 3530              	udd_test_mode_se0_nak:
 3531              	.LFB162:
1178:.././hal/sam3u1c/udphs_device.c **** 
1179:.././hal/sam3u1c/udphs_device.c **** 
1180:.././hal/sam3u1c/udphs_device.c **** void udd_test_mode_se0_nak(void)
1181:.././hal/sam3u1c/udphs_device.c **** {
 3532              	 .loc 6 1181 1
 3533              	 .cfi_startproc
 3534              	 
 3535              	 
 3536              	 
 3537 0000 80B4     	 push {r7}
 3538              	.LCFI147:
 3539              	 .cfi_def_cfa_offset 4
 3540              	 .cfi_offset 7,-4
 3541 0002 00AF     	 add r7,sp,#0
 3542              	.LCFI148:
 3543              	 .cfi_def_cfa_register 7
1182:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_hs_test_mode();
 3544              	 .loc 6 1182 2
 3545 0004 064B     	 ldr r3,.L200
 3546 0006 D3F8E030 	 ldr r3,[r3,#224]
 3547 000a 23F00303 	 bic r3,r3,#3
 3548 000e 044A     	 ldr r2,.L200
 3549 0010 43F00203 	 orr r3,r3,#2
 3550 0014 C2F8E030 	 str r3,[r2,#224]
1183:.././hal/sam3u1c/udphs_device.c **** }
 3551              	 .loc 6 1183 1
 3552 0018 00BF     	 nop
 3553 001a BD46     	 mov sp,r7
 3554              	.LCFI149:
 3555              	 .cfi_def_cfa_register 13
 3556              	 
 3557 001c 80BC     	 pop {r7}
 3558              	.LCFI150:
 3559              	 .cfi_restore 7
 3560              	 .cfi_def_cfa_offset 0
 3561 001e 7047     	 bx lr
 3562              	.L201:
 3563              	 .align 2
 3564              	.L200:
 3565 0020 00400A40 	 .word 1074413568
 3566              	 .cfi_endproc
 3567              	.LFE162:
 3569              	 .section .rodata
 3570              	 .align 2
 3571              	.LC0:
 3572 0000 00       	 .byte 0
 3573 0001 00       	 .byte 0
 3574 0002 00       	 .byte 0
 3575 0003 00       	 .byte 0
 3576 0004 00       	 .byte 0
 3577 0005 00       	 .byte 0
 3578 0006 00       	 .byte 0
 3579 0007 00       	 .byte 0
 3580 0008 00       	 .byte 0
 3581 0009 AA       	 .byte -86
 3582 000a AA       	 .byte -86
 3583 000b AA       	 .byte -86
 3584 000c AA       	 .byte -86
 3585 000d AA       	 .byte -86
 3586 000e AA       	 .byte -86
 3587 000f AA       	 .byte -86
 3588 0010 AA       	 .byte -86
 3589 0011 EE       	 .byte -18
 3590 0012 EE       	 .byte -18
 3591 0013 EE       	 .byte -18
 3592 0014 EE       	 .byte -18
 3593 0015 EE       	 .byte -18
 3594 0016 EE       	 .byte -18
 3595 0017 EE       	 .byte -18
 3596 0018 EE       	 .byte -18
 3597 0019 FE       	 .byte -2
 3598 001a FF       	 .byte -1
 3599 001b FF       	 .byte -1
 3600 001c FF       	 .byte -1
 3601 001d FF       	 .byte -1
 3602 001e FF       	 .byte -1
 3603 001f FF       	 .byte -1
 3604 0020 FF       	 .byte -1
 3605 0021 FF       	 .byte -1
 3606 0022 FF       	 .byte -1
 3607 0023 FF       	 .byte -1
 3608 0024 FF       	 .byte -1
 3609 0025 7F       	 .byte 127
 3610 0026 BF       	 .byte -65
 3611 0027 DF       	 .byte -33
 3612 0028 EF       	 .byte -17
 3613 0029 F7       	 .byte -9
 3614 002a FB       	 .byte -5
 3615 002b FD       	 .byte -3
 3616 002c FC       	 .byte -4
 3617 002d 7E       	 .byte 126
 3618 002e BF       	 .byte -65
 3619 002f DF       	 .byte -33
 3620 0030 EF       	 .byte -17
 3621 0031 F7       	 .byte -9
 3622 0032 FB       	 .byte -5
 3623 0033 FD       	 .byte -3
 3624 0034 7E       	 .byte 126
 3625              	 .section .text.udd_test_mode_packet,"ax",%progbits
 3626              	 .align 1
 3627              	 .global udd_test_mode_packet
 3628              	 .syntax unified
 3629              	 .thumb
 3630              	 .thumb_func
 3631              	 .fpu softvfp
 3633              	udd_test_mode_packet:
 3634              	.LFB163:
1184:.././hal/sam3u1c/udphs_device.c **** 
1185:.././hal/sam3u1c/udphs_device.c **** 
1186:.././hal/sam3u1c/udphs_device.c **** void udd_test_mode_packet(void)
1187:.././hal/sam3u1c/udphs_device.c **** {
 3635              	 .loc 6 1187 1
 3636              	 .cfi_startproc
 3637              	 
 3638              	 
 3639              	 
 3640 0000 B0B4     	 push {r4,r5,r7}
 3641              	.LCFI151:
 3642              	 .cfi_def_cfa_offset 12
 3643              	 .cfi_offset 4,-12
 3644              	 .cfi_offset 5,-8
 3645              	 .cfi_offset 7,-4
 3646 0002 93B0     	 sub sp,sp,#76
 3647              	.LCFI152:
 3648              	 .cfi_def_cfa_offset 88
 3649 0004 00AF     	 add r7,sp,#0
 3650              	.LCFI153:
 3651              	 .cfi_def_cfa_register 7
1188:.././hal/sam3u1c/udphs_device.c **** 	uint8_t i;
1189:.././hal/sam3u1c/udphs_device.c **** 	uint8_t *ptr_dest;
1190:.././hal/sam3u1c/udphs_device.c **** 	const uint8_t *ptr_src;
1191:.././hal/sam3u1c/udphs_device.c **** 
1192:.././hal/sam3u1c/udphs_device.c **** 	const uint8_t test_packet[] = {
 3652              	 .loc 6 1192 16
 3653 0006 2E4B     	 ldr r3,.L205
 3654 0008 3C1D     	 adds r4,r7,#4
 3655 000a 1D46     	 mov r5,r3
 3656 000c 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 3657 000e 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 3658 0010 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 3659 0012 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 3660 0014 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 3661 0016 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 3662 0018 95E80300 	 ldm r5,{r0,r1}
 3663 001c 2060     	 str r0,[r4]
 3664 001e 0434     	 adds r4,r4,#4
 3665 0020 2170     	 strb r1,[r4]
1193:.././hal/sam3u1c/udphs_device.c **** 		// 00000000 * 9
1194:.././hal/sam3u1c/udphs_device.c **** 		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
1195:.././hal/sam3u1c/udphs_device.c **** 		// 01010101 * 8
1196:.././hal/sam3u1c/udphs_device.c **** 		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
1197:.././hal/sam3u1c/udphs_device.c **** 		// 01110111 * 8
1198:.././hal/sam3u1c/udphs_device.c **** 		0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,
1199:.././hal/sam3u1c/udphs_device.c **** 		// 0, {111111S * 15}, 111111
1200:.././hal/sam3u1c/udphs_device.c **** 		0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
1201:.././hal/sam3u1c/udphs_device.c **** 				0xFF, 0xFF,
1202:.././hal/sam3u1c/udphs_device.c **** 		// S, 111111S, {0111111S * 7}
1203:.././hal/sam3u1c/udphs_device.c **** 		0x7F, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD,
1204:.././hal/sam3u1c/udphs_device.c **** 		// 00111111, {S0111111 * 9}, S0
1205:.././hal/sam3u1c/udphs_device.c **** 		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
1206:.././hal/sam3u1c/udphs_device.c **** 	};
1207:.././hal/sam3u1c/udphs_device.c **** 
1208:.././hal/sam3u1c/udphs_device.c **** 	// Reconfigure control endpoint to bulk IN endpoint
1209:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_endpoint(0);
 3666              	 .loc 6 1209 2
 3667 0022 284B     	 ldr r3,.L205+4
 3668 0024 0122     	 movs r2,#1
 3669 0026 C3F80821 	 str r2,[r3,#264]
1210:.././hal/sam3u1c/udphs_device.c **** 	udd_configure_endpoint(0, // endpoint number: 0
 3670              	 .loc 6 1210 2
 3671 002a 264B     	 ldr r3,.L205+4
 3672 002c D3F80031 	 ldr r3,[r3,#256]
 3673 0030 23F47F73 	 bic r3,r3,#1020
 3674 0034 23F00303 	 bic r3,r3,#3
 3675 0038 224A     	 ldr r2,.L205+4
 3676 003a 43F06B03 	 orr r3,r3,#107
 3677 003e C2F80031 	 str r3,[r2,#256]
1211:.././hal/sam3u1c/udphs_device.c **** 			USB_EP_TYPE_BULK, // Type: bulk
1212:.././hal/sam3u1c/udphs_device.c **** 			1, // dir: IN
1213:.././hal/sam3u1c/udphs_device.c **** 			64, //Size
1214:.././hal/sam3u1c/udphs_device.c **** 			1, // Bank Number
1215:.././hal/sam3u1c/udphs_device.c **** 			0); // NB Trans (not used for bulk ept)
1216:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_endpoint(0);
 3678              	 .loc 6 1216 2
 3679 0042 204B     	 ldr r3,.L205+4
 3680 0044 0122     	 movs r2,#1
 3681 0046 C3F80421 	 str r2,[r3,#260]
1217:.././hal/sam3u1c/udphs_device.c **** 
1218:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_hs_test_mode();
 3682              	 .loc 6 1218 2
 3683 004a 1E4B     	 ldr r3,.L205+4
 3684 004c D3F8E030 	 ldr r3,[r3,#224]
 3685 0050 23F00303 	 bic r3,r3,#3
 3686 0054 1B4A     	 ldr r2,.L205+4
 3687 0056 43F00203 	 orr r3,r3,#2
 3688 005a C2F8E030 	 str r3,[r2,#224]
1219:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_hs_test_mode_packet();
 3689              	 .loc 6 1219 2
 3690 005e 194B     	 ldr r3,.L205+4
 3691 0060 D3F8E030 	 ldr r3,[r3,#224]
 3692 0064 174A     	 ldr r2,.L205+4
 3693 0066 43F01003 	 orr r3,r3,#16
 3694 006a C2F8E030 	 str r3,[r2,#224]
1220:.././hal/sam3u1c/udphs_device.c **** 
1221:.././hal/sam3u1c/udphs_device.c **** 	// Send packet on endpoint 0
1222:.././hal/sam3u1c/udphs_device.c **** 	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
 3695              	 .loc 6 1222 11
 3696 006e 164B     	 ldr r3,.L205+8
 3697 0070 3B64     	 str r3,[r7,#64]
1223:.././hal/sam3u1c/udphs_device.c **** 	ptr_src = test_packet;
 3698              	 .loc 6 1223 10
 3699 0072 3B1D     	 adds r3,r7,#4
 3700 0074 FB63     	 str r3,[r7,#60]
1224:.././hal/sam3u1c/udphs_device.c **** 
1225:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < sizeof(test_packet); i++) {
 3701              	 .loc 6 1225 9
 3702 0076 0023     	 movs r3,#0
 3703 0078 87F84730 	 strb r3,[r7,#71]
 3704              	 .loc 6 1225 2
 3705 007c 0CE0     	 b .L203
 3706              	.L204:
1226:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 3707              	 .loc 6 1226 25 discriminator 3
 3708 007e FA6B     	 ldr r2,[r7,#60]
 3709 0080 531C     	 adds r3,r2,#1
 3710 0082 FB63     	 str r3,[r7,#60]
 3711              	 .loc 6 1226 12 discriminator 3
 3712 0084 3B6C     	 ldr r3,[r7,#64]
 3713 0086 591C     	 adds r1,r3,#1
 3714 0088 3964     	 str r1,[r7,#64]
 3715              	 .loc 6 1226 17 discriminator 3
 3716 008a 1278     	 ldrb r2,[r2]
 3717              	 .loc 6 1226 15 discriminator 3
 3718 008c 1A70     	 strb r2,[r3]
1225:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 3719              	 .loc 6 1225 40 discriminator 3
 3720 008e 97F84730 	 ldrb r3,[r7,#71]
 3721 0092 0133     	 adds r3,r3,#1
 3722 0094 87F84730 	 strb r3,[r7,#71]
 3723              	.L203:
1225:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 3724              	 .loc 6 1225 2 discriminator 1
 3725 0098 97F84730 	 ldrb r3,[r7,#71]
 3726 009c 342B     	 cmp r3,#52
 3727 009e EED9     	 bls .L204
1227:.././hal/sam3u1c/udphs_device.c **** 	}
1228:.././hal/sam3u1c/udphs_device.c **** 	// Validate and send the data available in the control endpoint buffer
1229:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_in_send(0);
 3728              	 .loc 6 1229 2
 3729 00a0 084B     	 ldr r3,.L205+4
 3730 00a2 4FF48062 	 mov r2,#1024
 3731 00a6 C3F81821 	 str r2,[r3,#280]
1230:.././hal/sam3u1c/udphs_device.c **** 	udd_raise_tx_pkt_ready(0);
 3732              	 .loc 6 1230 2
 3733 00aa 064B     	 ldr r3,.L205+4
 3734 00ac 4FF40062 	 mov r2,#2048
 3735 00b0 C3F81421 	 str r2,[r3,#276]
1231:.././hal/sam3u1c/udphs_device.c **** }
 3736              	 .loc 6 1231 1
 3737 00b4 00BF     	 nop
 3738 00b6 4C37     	 adds r7,r7,#76
 3739              	.LCFI154:
 3740              	 .cfi_def_cfa_offset 12
 3741 00b8 BD46     	 mov sp,r7
 3742              	.LCFI155:
 3743              	 .cfi_def_cfa_register 13
 3744              	 
 3745 00ba B0BC     	 pop {r4,r5,r7}
 3746              	.LCFI156:
 3747              	 .cfi_restore 7
 3748              	 .cfi_restore 5
 3749              	 .cfi_restore 4
 3750              	 .cfi_def_cfa_offset 0
 3751 00bc 7047     	 bx lr
 3752              	.L206:
 3753 00be 00BF     	 .align 2
 3754              	.L205:
 3755 00c0 00000000 	 .word .LC0
 3756 00c4 00400A40 	 .word 1074413568
 3757 00c8 00001820 	 .word 538443776
 3758              	 .cfi_endproc
 3759              	.LFE163:
 3761              	 .section .text.udd_reset_ep_ctrl,"ax",%progbits
 3762              	 .align 1
 3763              	 .syntax unified
 3764              	 .thumb
 3765              	 .thumb_func
 3766              	 .fpu softvfp
 3768              	udd_reset_ep_ctrl:
 3769              	.LFB164:
1232:.././hal/sam3u1c/udphs_device.c **** #endif // USB_DEVICE_HS_SUPPORT
1233:.././hal/sam3u1c/udphs_device.c **** 
1234:.././hal/sam3u1c/udphs_device.c **** 
1235:.././hal/sam3u1c/udphs_device.c **** 
1236:.././hal/sam3u1c/udphs_device.c **** //--------------------------------------------------------
1237:.././hal/sam3u1c/udphs_device.c **** //--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT
1238:.././hal/sam3u1c/udphs_device.c **** 
1239:.././hal/sam3u1c/udphs_device.c **** static void udd_reset_ep_ctrl(void)
1240:.././hal/sam3u1c/udphs_device.c **** {
 3770              	 .loc 6 1240 1
 3771              	 .cfi_startproc
 3772              	 
 3773              	 
 3774 0000 80B5     	 push {r7,lr}
 3775              	.LCFI157:
 3776              	 .cfi_def_cfa_offset 8
 3777              	 .cfi_offset 7,-8
 3778              	 .cfi_offset 14,-4
 3779 0002 82B0     	 sub sp,sp,#8
 3780              	.LCFI158:
 3781              	 .cfi_def_cfa_offset 16
 3782 0004 00AF     	 add r7,sp,#0
 3783              	.LCFI159:
 3784              	 .cfi_def_cfa_register 7
1241:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1242:.././hal/sam3u1c/udphs_device.c **** 
1243:.././hal/sam3u1c/udphs_device.c **** 	// Reset USB address to 0
1244:.././hal/sam3u1c/udphs_device.c **** 	udd_configure_address(0);
 3785              	 .loc 6 1244 2
 3786 0006 1B4B     	 ldr r3,.L208
 3787 0008 1B68     	 ldr r3,[r3]
 3788 000a 1A4A     	 ldr r2,.L208
 3789 000c 23F07F03 	 bic r3,r3,#127
 3790 0010 1360     	 str r3,[r2]
1245:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_address();
 3791              	 .loc 6 1245 2
 3792 0012 184B     	 ldr r3,.L208
 3793 0014 1B68     	 ldr r3,[r3]
 3794 0016 174A     	 ldr r2,.L208
 3795 0018 43F08003 	 orr r3,r3,#128
 3796 001c 1360     	 str r3,[r2]
1246:.././hal/sam3u1c/udphs_device.c **** 
1247:.././hal/sam3u1c/udphs_device.c **** 	// Alloc and configure control endpoint
1248:.././hal/sam3u1c/udphs_device.c **** 	udd_configure_endpoint(0,
 3797              	 .loc 6 1248 2
 3798 001e 154B     	 ldr r3,.L208
 3799 0020 D3F80031 	 ldr r3,[r3,#256]
 3800 0024 23F47F73 	 bic r3,r3,#1020
 3801 0028 23F00303 	 bic r3,r3,#3
 3802 002c 114A     	 ldr r2,.L208
 3803 002e 43F04303 	 orr r3,r3,#67
 3804 0032 C2F80031 	 str r3,[r2,#256]
1249:.././hal/sam3u1c/udphs_device.c **** 			USB_EP_TYPE_CONTROL,
1250:.././hal/sam3u1c/udphs_device.c **** 			0,
1251:.././hal/sam3u1c/udphs_device.c **** 			USB_DEVICE_EP_CTRL_SIZE,
1252:.././hal/sam3u1c/udphs_device.c **** 			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
1253:.././hal/sam3u1c/udphs_device.c **** 			0);
1254:.././hal/sam3u1c/udphs_device.c **** 
1255:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
1256:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_endpoint(0);
 3805              	 .loc 6 1256 2
 3806 0036 0F4B     	 ldr r3,.L208
 3807 0038 0122     	 movs r2,#1
 3808 003a C3F80421 	 str r2,[r3,#260]
1257:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 3809              	 .loc 6 1257 10
 3810 003e 0E4B     	 ldr r3,.L208+4
 3811 0040 9847     	 blx r3
 3812              	.LVL59:
 3813 0042 7860     	 str r0,[r7,#4]
1258:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_setup_received_interrupt(0);
 3814              	 .loc 6 1258 2
 3815 0044 0B4B     	 ldr r3,.L208
 3816 0046 4FF48052 	 mov r2,#4096
 3817 004a C3F80421 	 str r2,[r3,#260]
1259:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_out_received_interrupt(0);
 3818              	 .loc 6 1259 2
 3819 004e 094B     	 ldr r3,.L208
 3820 0050 4FF40072 	 mov r2,#512
 3821 0054 C3F80421 	 str r2,[r3,#260]
1260:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_endpoint_interrupt(0);
 3822              	 .loc 6 1260 2
 3823 0058 064B     	 ldr r3,.L208
 3824 005a 1B69     	 ldr r3,[r3,#16]
 3825 005c 054A     	 ldr r2,.L208
 3826 005e 43F48073 	 orr r3,r3,#256
 3827 0062 1361     	 str r3,[r2,#16]
1261:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 3828              	 .loc 6 1261 2
 3829 0064 7868     	 ldr r0,[r7,#4]
 3830 0066 054B     	 ldr r3,.L208+8
 3831 0068 9847     	 blx r3
 3832              	.LVL60:
1262:.././hal/sam3u1c/udphs_device.c **** }
 3833              	 .loc 6 1262 1
 3834 006a 00BF     	 nop
 3835 006c 0837     	 adds r7,r7,#8
 3836              	.LCFI160:
 3837              	 .cfi_def_cfa_offset 8
 3838 006e BD46     	 mov sp,r7
 3839              	.LCFI161:
 3840              	 .cfi_def_cfa_register 13
 3841              	 
 3842 0070 80BD     	 pop {r7,pc}
 3843              	.L209:
 3844 0072 00BF     	 .align 2
 3845              	.L208:
 3846 0074 00400A40 	 .word 1074413568
 3847 0078 00000000 	 .word cpu_irq_save
 3848 007c 00000000 	 .word cpu_irq_restore
 3849              	 .cfi_endproc
 3850              	.LFE164:
 3852              	 .section .text.udd_ctrl_init,"ax",%progbits
 3853              	 .align 1
 3854              	 .syntax unified
 3855              	 .thumb
 3856              	 .thumb_func
 3857              	 .fpu softvfp
 3859              	udd_ctrl_init:
 3860              	.LFB165:
1263:.././hal/sam3u1c/udphs_device.c **** 
1264:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_init(void)
1265:.././hal/sam3u1c/udphs_device.c **** {
 3861              	 .loc 6 1265 1
 3862              	 .cfi_startproc
 3863              	 
 3864              	 
 3865 0000 80B5     	 push {r7,lr}
 3866              	.LCFI162:
 3867              	 .cfi_def_cfa_offset 8
 3868              	 .cfi_offset 7,-8
 3869              	 .cfi_offset 14,-4
 3870 0002 82B0     	 sub sp,sp,#8
 3871              	.LCFI163:
 3872              	 .cfi_def_cfa_offset 16
 3873 0004 00AF     	 add r7,sp,#0
 3874              	.LCFI164:
 3875              	 .cfi_def_cfa_register 7
1266:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1267:.././hal/sam3u1c/udphs_device.c **** 
1268:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("ctlInit ");
1269:.././hal/sam3u1c/udphs_device.c **** 
1270:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 3876              	 .loc 6 1270 10
 3877 0006 104B     	 ldr r3,.L211
 3878 0008 9847     	 blx r3
 3879              	.LVL61:
 3880 000a 7860     	 str r0,[r7,#4]
1271:.././hal/sam3u1c/udphs_device.c **** 	// In case of abort of IN Data Phase:
1272:.././hal/sam3u1c/udphs_device.c **** 	// No need to abort IN transfer (rise TXINI),
1273:.././hal/sam3u1c/udphs_device.c **** 	// because it is automatically done by hardware when a Setup packet is received.
1274:.././hal/sam3u1c/udphs_device.c **** 	// But the interrupt must be disabled to don't generate interrupt TXINI
1275:.././hal/sam3u1c/udphs_device.c **** 	// after SETUP reception.
1276:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_in_send_interrupt(0);
 3881              	 .loc 6 1276 2
 3882 000c 0F4B     	 ldr r3,.L211+4
 3883 000e 4FF48062 	 mov r2,#1024
 3884 0012 C3F80821 	 str r2,[r3,#264]
1277:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 3885              	 .loc 6 1277 2
 3886 0016 7868     	 ldr r0,[r7,#4]
 3887 0018 0D4B     	 ldr r3,.L211+8
 3888 001a 9847     	 blx r3
 3889              	.LVL62:
1278:.././hal/sam3u1c/udphs_device.c **** 
1279:.././hal/sam3u1c/udphs_device.c **** 	// In case of OUT ZLP event is no processed before Setup event occurs
1280:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_out_received(0);
 3890              	 .loc 6 1280 2
 3891 001c 0B4B     	 ldr r3,.L211+4
 3892 001e 4FF40072 	 mov r2,#512
 3893 0022 C3F81821 	 str r2,[r3,#280]
1281:.././hal/sam3u1c/udphs_device.c **** 
1282:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.callback = NULL;
 3894              	 .loc 6 1282 25
 3895 0026 0B4B     	 ldr r3,.L211+12
 3896 0028 0022     	 movs r2,#0
 3897 002a 1A61     	 str r2,[r3,#16]
1283:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.over_under_run = NULL;
 3898              	 .loc 6 1283 31
 3899 002c 094B     	 ldr r3,.L211+12
 3900 002e 0022     	 movs r2,#0
 3901 0030 5A61     	 str r2,[r3,#20]
1284:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.payload_size = 0;
 3902              	 .loc 6 1284 29
 3903 0032 084B     	 ldr r3,.L211+12
 3904 0034 0022     	 movs r2,#0
 3905 0036 9A81     	 strh r2,[r3,#12]
1285:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_control_state = UDD_EPCTRL_SETUP;
 3906              	 .loc 6 1285 23
 3907 0038 074B     	 ldr r3,.L211+16
 3908 003a 0022     	 movs r2,#0
 3909 003c 1A70     	 strb r2,[r3]
1286:.././hal/sam3u1c/udphs_device.c **** }
 3910              	 .loc 6 1286 1
 3911 003e 00BF     	 nop
 3912 0040 0837     	 adds r7,r7,#8
 3913              	.LCFI165:
 3914              	 .cfi_def_cfa_offset 8
 3915 0042 BD46     	 mov sp,r7
 3916              	.LCFI166:
 3917              	 .cfi_def_cfa_register 13
 3918              	 
 3919 0044 80BD     	 pop {r7,pc}
 3920              	.L212:
 3921 0046 00BF     	 .align 2
 3922              	.L211:
 3923 0048 00000000 	 .word cpu_irq_save
 3924 004c 00400A40 	 .word 1074413568
 3925 0050 00000000 	 .word cpu_irq_restore
 3926 0054 00000000 	 .word udd_g_ctrlreq
 3927 0058 00000000 	 .word udd_ep_control_state
 3928              	 .cfi_endproc
 3929              	.LFE165:
 3931              	 .section .text.udd_ctrl_setup_received,"ax",%progbits
 3932              	 .align 1
 3933              	 .syntax unified
 3934              	 .thumb
 3935              	 .thumb_func
 3936              	 .fpu softvfp
 3938              	udd_ctrl_setup_received:
 3939              	.LFB166:
1287:.././hal/sam3u1c/udphs_device.c **** 
1288:.././hal/sam3u1c/udphs_device.c **** 
1289:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_setup_received(void)
1290:.././hal/sam3u1c/udphs_device.c **** {
 3940              	 .loc 6 1290 1
 3941              	 .cfi_startproc
 3942              	 
 3943              	 
 3944 0000 80B5     	 push {r7,lr}
 3945              	.LCFI167:
 3946              	 .cfi_def_cfa_offset 8
 3947              	 .cfi_offset 7,-8
 3948              	 .cfi_offset 14,-4
 3949 0002 84B0     	 sub sp,sp,#16
 3950              	.LCFI168:
 3951              	 .cfi_def_cfa_offset 24
 3952 0004 00AF     	 add r7,sp,#0
 3953              	.LCFI169:
 3954              	 .cfi_def_cfa_register 7
1291:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1292:.././hal/sam3u1c/udphs_device.c **** 	uint8_t i;
1293:.././hal/sam3u1c/udphs_device.c **** 
1294:.././hal/sam3u1c/udphs_device.c **** 	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
 3955              	 .loc 6 1294 23
 3956 0006 404B     	 ldr r3,.L222
 3957 0008 1B78     	 ldrb r3,[r3]
 3958              	 .loc 6 1294 5
 3959 000a 002B     	 cmp r3,#0
 3960 000c 03D0     	 beq .L214
1295:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("sErr ");
1296:.././hal/sam3u1c/udphs_device.c **** 		// May be a hidden DATA or ZLP phase
1297:.././hal/sam3u1c/udphs_device.c **** 		// or protocol abort
1298:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_endofrequest();
 3961              	 .loc 6 1298 3
 3962 000e 3F4B     	 ldr r3,.L222+4
 3963 0010 9847     	 blx r3
 3964              	.LVL63:
1299:.././hal/sam3u1c/udphs_device.c **** 
1300:.././hal/sam3u1c/udphs_device.c **** 		// Reinitializes control endpoint management
1301:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_init();
 3965              	 .loc 6 1301 3
 3966 0012 3F4B     	 ldr r3,.L222+8
 3967 0014 9847     	 blx r3
 3968              	.LVL64:
 3969              	.L214:
1302:.././hal/sam3u1c/udphs_device.c **** 	}
1303:.././hal/sam3u1c/udphs_device.c **** 	// Fill setup request structure
1304:.././hal/sam3u1c/udphs_device.c **** 	if (8 != udd_byte_count(0)) {
 3970              	 .loc 6 1304 11
 3971 0016 3F4B     	 ldr r3,.L222+12
 3972 0018 D3F81C31 	 ldr r3,[r3,#284]
 3973 001c 1B0D     	 lsrs r3,r3,#20
 3974 001e C3F30A03 	 ubfx r3,r3,#0,#11
 3975              	 .loc 6 1304 5
 3976 0022 082B     	 cmp r3,#8
 3977 0024 07D0     	 beq .L215
1305:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("cntErr ");
1306:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_stall_data();
 3978              	 .loc 6 1306 3
 3979 0026 3C4B     	 ldr r3,.L222+16
 3980 0028 9847     	 blx r3
 3981              	.LVL65:
1307:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_setup_received(0);
 3982              	 .loc 6 1307 3
 3983 002a 3A4B     	 ldr r3,.L222+12
 3984 002c 4FF48052 	 mov r2,#4096
 3985 0030 C3F81821 	 str r2,[r3,#280]
1308:.././hal/sam3u1c/udphs_device.c **** 		return; // Error data number doesn't correspond to SETUP packet
 3986              	 .loc 6 1308 3
 3987 0034 64E0     	 b .L213
 3988              	.L215:
1309:.././hal/sam3u1c/udphs_device.c **** 	}
1310:.././hal/sam3u1c/udphs_device.c **** 
1311:.././hal/sam3u1c/udphs_device.c **** 	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
 3989              	 .loc 6 1311 11
 3990 0036 394B     	 ldr r3,.L222+20
 3991 0038 BB60     	 str r3,[r7,#8]
1312:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < 8; i++) {
 3992              	 .loc 6 1312 9
 3993 003a 0023     	 movs r3,#0
 3994 003c FB73     	 strb r3,[r7,#15]
 3995              	 .loc 6 1312 2
 3996 003e 0AE0     	 b .L217
 3997              	.L218:
1313:.././hal/sam3u1c/udphs_device.c **** 		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
 3998              	 .loc 6 1313 46 discriminator 3
 3999 0040 BB68     	 ldr r3,[r7,#8]
 4000 0042 5A1C     	 adds r2,r3,#1
 4001 0044 BA60     	 str r2,[r7,#8]
 4002              	 .loc 6 1313 36 discriminator 3
 4003 0046 FA7B     	 ldrb r2,[r7,#15]
 4004 0048 3549     	 ldr r1,.L222+24
 4005 004a 0A44     	 add r2,r2,r1
 4006              	 .loc 6 1313 42 discriminator 3
 4007 004c 1B78     	 ldrb r3,[r3]
 4008              	 .loc 6 1313 40 discriminator 3
 4009 004e 1370     	 strb r3,[r2]
1312:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < 8; i++) {
 4010              	 .loc 6 1312 22 discriminator 3
 4011 0050 FB7B     	 ldrb r3,[r7,#15]
 4012 0052 0133     	 adds r3,r3,#1
 4013 0054 FB73     	 strb r3,[r7,#15]
 4014              	.L217:
1312:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < 8; i++) {
 4015              	 .loc 6 1312 2 discriminator 1
 4016 0056 FB7B     	 ldrb r3,[r7,#15]
 4017 0058 072B     	 cmp r3,#7
 4018 005a F1D9     	 bls .L218
1314:.././hal/sam3u1c/udphs_device.c **** 	}
1315:.././hal/sam3u1c/udphs_device.c **** 	// Manage LSB/MSB to fit with CPU usage
1316:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
 4019              	 .loc 6 1316 29
 4020 005c 304B     	 ldr r3,.L222+24
 4021 005e 5A88     	 ldrh r2,[r3,#2]
 4022              	 .loc 6 1316 27
 4023 0060 2F4B     	 ldr r3,.L222+24
 4024 0062 5A80     	 strh r2,[r3,#2]
1317:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
 4025              	 .loc 6 1317 29
 4026 0064 2E4B     	 ldr r3,.L222+24
 4027 0066 9A88     	 ldrh r2,[r3,#4]
 4028              	 .loc 6 1317 27
 4029 0068 2D4B     	 ldr r3,.L222+24
 4030 006a 9A80     	 strh r2,[r3,#4]
1318:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
 4031              	 .loc 6 1318 30
 4032 006c 2C4B     	 ldr r3,.L222+24
 4033 006e DA88     	 ldrh r2,[r3,#6]
 4034              	 .loc 6 1318 28
 4035 0070 2B4B     	 ldr r3,.L222+24
 4036 0072 DA80     	 strh r2,[r3,#6]
1319:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("(%x %x %x %x %x) ",
1320:.././hal/sam3u1c/udphs_device.c **** 			udd_g_ctrlreq.req.bRequest, udd_g_ctrlreq.req.bmRequestType,
1321:.././hal/sam3u1c/udphs_device.c **** 			udd_g_ctrlreq.req.wValue, udd_g_ctrlreq.req.wIndex,
1322:.././hal/sam3u1c/udphs_device.c **** 			udd_g_ctrlreq.req.wLength);
1323:.././hal/sam3u1c/udphs_device.c **** 
1324:.././hal/sam3u1c/udphs_device.c **** 	// Decode setup request
1325:.././hal/sam3u1c/udphs_device.c **** 	if (udc_process_setup() == false) {
 4037              	 .loc 6 1325 6
 4038 0074 2B4B     	 ldr r3,.L222+28
 4039 0076 9847     	 blx r3
 4040              	.LVL66:
 4041 0078 0346     	 mov r3,r0
 4042              	 .loc 6 1325 26
 4043 007a 83F00103 	 eor r3,r3,#1
 4044 007e DBB2     	 uxtb r3,r3
 4045              	 .loc 6 1325 5
 4046 0080 002B     	 cmp r3,#0
 4047 0082 07D0     	 beq .L219
1326:.././hal/sam3u1c/udphs_device.c **** 		// Setup request unknown then stall it
1327:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("ProcErr ");
1328:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_stall_data();
 4048              	 .loc 6 1328 3
 4049 0084 244B     	 ldr r3,.L222+16
 4050 0086 9847     	 blx r3
 4051              	.LVL67:
1329:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_setup_received(0);
 4052              	 .loc 6 1329 3
 4053 0088 224B     	 ldr r3,.L222+12
 4054 008a 4FF48052 	 mov r2,#4096
 4055 008e C3F81821 	 str r2,[r3,#280]
1330:.././hal/sam3u1c/udphs_device.c **** 		return;
 4056              	 .loc 6 1330 3
 4057 0092 35E0     	 b .L213
 4058              	.L219:
1331:.././hal/sam3u1c/udphs_device.c **** 	}
1332:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_setup_received(0);
 4059              	 .loc 6 1332 2
 4060 0094 1F4B     	 ldr r3,.L222+12
 4061 0096 4FF48052 	 mov r2,#4096
 4062 009a C3F81821 	 str r2,[r3,#280]
1333:.././hal/sam3u1c/udphs_device.c **** 
1334:.././hal/sam3u1c/udphs_device.c **** 	if (Udd_setup_is_in()) {
 4063              	 .loc 6 1334 6
 4064 009e 204B     	 ldr r3,.L222+24
 4065 00a0 1B78     	 ldrb r3,[r3]
 4066 00a2 5BB2     	 sxtb r3,r3
 4067              	 .loc 6 1334 5
 4068 00a4 002B     	 cmp r3,#0
 4069 00a6 0BDA     	 bge .L220
1335:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("_I ");
1336:.././hal/sam3u1c/udphs_device.c **** 		// IN data phase requested
1337:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_prev_payload_buf_cnt = 0;
 4070              	 .loc 6 1337 33
 4071 00a8 1F4B     	 ldr r3,.L222+32
 4072 00aa 0022     	 movs r2,#0
 4073 00ac 1A80     	 strh r2,[r3]
1338:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_payload_buf_cnt = 0;
 4074              	 .loc 6 1338 28
 4075 00ae 1F4B     	 ldr r3,.L222+36
 4076 00b0 0022     	 movs r2,#0
 4077 00b2 1A80     	 strh r2,[r3]
1339:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
 4078              	 .loc 6 1339 24
 4079 00b4 144B     	 ldr r3,.L222
 4080 00b6 0222     	 movs r2,#2
 4081 00b8 1A70     	 strb r2,[r3]
1340:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_in_sent(); // Send first data transfer
 4082              	 .loc 6 1340 3
 4083 00ba 1D4B     	 ldr r3,.L222+40
 4084 00bc 9847     	 blx r3
 4085              	.LVL68:
 4086 00be 1FE0     	 b .L213
 4087              	.L220:
1341:.././hal/sam3u1c/udphs_device.c **** 	} else {
1342:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("_O ");
1343:.././hal/sam3u1c/udphs_device.c **** 		if (0 == udd_g_ctrlreq.req.wLength) {
 4088              	 .loc 6 1343 29
 4089 00c0 174B     	 ldr r3,.L222+24
 4090 00c2 DB88     	 ldrh r3,[r3,#6]
 4091              	 .loc 6 1343 6
 4092 00c4 002B     	 cmp r3,#0
 4093 00c6 02D1     	 bne .L221
1344:.././hal/sam3u1c/udphs_device.c **** 			// No data phase requested
1345:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("Zl ");
1346:.././hal/sam3u1c/udphs_device.c **** 			// Send IN ZLP to ACK setup request
1347:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_send_zlp_in();
 4094              	 .loc 6 1347 4
 4095 00c8 1A4B     	 ldr r3,.L222+44
 4096 00ca 9847     	 blx r3
 4097              	.LVL69:
1348:.././hal/sam3u1c/udphs_device.c **** 			return;
 4098              	 .loc 6 1348 4
 4099 00cc 18E0     	 b .L213
 4100              	.L221:
1349:.././hal/sam3u1c/udphs_device.c **** 		}
1350:.././hal/sam3u1c/udphs_device.c **** 		// OUT data phase requested
1351:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_prev_payload_buf_cnt = 0;
 4101              	 .loc 6 1351 33
 4102 00ce 164B     	 ldr r3,.L222+32
 4103 00d0 0022     	 movs r2,#0
 4104 00d2 1A80     	 strh r2,[r3]
1352:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_payload_buf_cnt = 0;
 4105              	 .loc 6 1352 28
 4106 00d4 154B     	 ldr r3,.L222+36
 4107 00d6 0022     	 movs r2,#0
 4108 00d8 1A80     	 strh r2,[r3]
1353:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
 4109              	 .loc 6 1353 24
 4110 00da 0B4B     	 ldr r3,.L222
 4111 00dc 0122     	 movs r2,#1
 4112 00de 1A70     	 strb r2,[r3]
1354:.././hal/sam3u1c/udphs_device.c **** 		// To detect a protocol error, enable nak interrupt on data IN phase
1355:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_nak_in(0);
 4113              	 .loc 6 1355 3
 4114 00e0 0C4B     	 ldr r3,.L222+12
 4115 00e2 4FF48042 	 mov r2,#16384
 4116 00e6 C3F81821 	 str r2,[r3,#280]
1356:.././hal/sam3u1c/udphs_device.c **** 		flags = cpu_irq_save();
 4117              	 .loc 6 1356 11
 4118 00ea 134B     	 ldr r3,.L222+48
 4119 00ec 9847     	 blx r3
 4120              	.LVL70:
 4121 00ee 7860     	 str r0,[r7,#4]
1357:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_nak_in_interrupt(0);
 4122              	 .loc 6 1357 3
 4123 00f0 084B     	 ldr r3,.L222+12
 4124 00f2 4FF48042 	 mov r2,#16384
 4125 00f6 C3F80421 	 str r2,[r3,#260]
1358:.././hal/sam3u1c/udphs_device.c **** 		cpu_irq_restore(flags);
 4126              	 .loc 6 1358 3
 4127 00fa 7868     	 ldr r0,[r7,#4]
 4128 00fc 0F4B     	 ldr r3,.L222+52
 4129 00fe 9847     	 blx r3
 4130              	.LVL71:
 4131              	.L213:
1359:.././hal/sam3u1c/udphs_device.c **** 	}
1360:.././hal/sam3u1c/udphs_device.c **** }
 4132              	 .loc 6 1360 1
 4133 0100 1037     	 adds r7,r7,#16
 4134              	.LCFI170:
 4135              	 .cfi_def_cfa_offset 8
 4136 0102 BD46     	 mov sp,r7
 4137              	.LCFI171:
 4138              	 .cfi_def_cfa_register 13
 4139              	 
 4140 0104 80BD     	 pop {r7,pc}
 4141              	.L223:
 4142 0106 00BF     	 .align 2
 4143              	.L222:
 4144 0108 00000000 	 .word udd_ep_control_state
 4145 010c 00000000 	 .word udd_ctrl_endofrequest
 4146 0110 00000000 	 .word udd_ctrl_init
 4147 0114 00400A40 	 .word 1074413568
 4148 0118 00000000 	 .word udd_ctrl_stall_data
 4149 011c 00001820 	 .word 538443776
 4150 0120 00000000 	 .word udd_g_ctrlreq
 4151 0124 00000000 	 .word udc_process_setup
 4152 0128 00000000 	 .word udd_ctrl_prev_payload_buf_cnt
 4153 012c 00000000 	 .word udd_ctrl_payload_buf_cnt
 4154 0130 00000000 	 .word udd_ctrl_in_sent
 4155 0134 00000000 	 .word udd_ctrl_send_zlp_in
 4156 0138 00000000 	 .word cpu_irq_save
 4157 013c 00000000 	 .word cpu_irq_restore
 4158              	 .cfi_endproc
 4159              	.LFE166:
 4161              	 .section .text.udd_ctrl_in_sent,"ax",%progbits
 4162              	 .align 1
 4163              	 .syntax unified
 4164              	 .thumb
 4165              	 .thumb_func
 4166              	 .fpu softvfp
 4168              	udd_ctrl_in_sent:
 4169              	.LFB167:
1361:.././hal/sam3u1c/udphs_device.c **** 
1362:.././hal/sam3u1c/udphs_device.c **** 
1363:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_in_sent(void)
1364:.././hal/sam3u1c/udphs_device.c **** {
 4170              	 .loc 6 1364 1
 4171              	 .cfi_startproc
 4172              	 
 4173              	 
 4174 0000 80B5     	 push {r7,lr}
 4175              	.LCFI172:
 4176              	 .cfi_def_cfa_offset 8
 4177              	 .cfi_offset 7,-8
 4178              	 .cfi_offset 14,-4
 4179 0002 84B0     	 sub sp,sp,#16
 4180              	.LCFI173:
 4181              	 .cfi_def_cfa_offset 24
 4182 0004 00AF     	 add r7,sp,#0
 4183              	.LCFI174:
 4184              	 .cfi_def_cfa_register 7
1365:.././hal/sam3u1c/udphs_device.c **** 	static bool b_shortpacket = false;
1366:.././hal/sam3u1c/udphs_device.c **** 	uint16_t nb_remain;
1367:.././hal/sam3u1c/udphs_device.c **** 	uint8_t i;
1368:.././hal/sam3u1c/udphs_device.c **** 	uint8_t *ptr_dest, *ptr_src;
1369:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1370:.././hal/sam3u1c/udphs_device.c **** 
1371:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 4185              	 .loc 6 1371 10
 4186 0006 4C4B     	 ldr r3,.L235
 4187 0008 9847     	 blx r3
 4188              	.LVL72:
 4189 000a 3860     	 str r0,[r7]
1372:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_in_send_interrupt(0);
 4190              	 .loc 6 1372 2
 4191 000c 4B4B     	 ldr r3,.L235+4
 4192 000e 4FF48062 	 mov r2,#1024
 4193 0012 C3F80821 	 str r2,[r3,#264]
1373:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 4194              	 .loc 6 1373 2
 4195 0016 3868     	 ldr r0,[r7]
 4196 0018 494B     	 ldr r3,.L235+8
 4197 001a 9847     	 blx r3
 4198              	.LVL73:
1374:.././hal/sam3u1c/udphs_device.c **** 
1375:.././hal/sam3u1c/udphs_device.c **** 	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
 4199              	 .loc 6 1375 39
 4200 001c 494B     	 ldr r3,.L235+12
 4201 001e 1B78     	 ldrb r3,[r3]
 4202              	 .loc 6 1375 5
 4203 0020 032B     	 cmp r3,#3
 4204 0022 04D1     	 bne .L225
1376:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("ZlpE\n\r");
1377:.././hal/sam3u1c/udphs_device.c **** 		// ZLP on IN is sent, then valid end of setup request
1378:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_endofrequest();
 4205              	 .loc 6 1378 3
 4206 0024 484B     	 ldr r3,.L235+16
 4207 0026 9847     	 blx r3
 4208              	.LVL74:
1379:.././hal/sam3u1c/udphs_device.c **** 		// Reinitializes control endpoint management
1380:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_init();
 4209              	 .loc 6 1380 3
 4210 0028 484B     	 ldr r3,.L235+20
 4211 002a 9847     	 blx r3
 4212              	.LVL75:
1381:.././hal/sam3u1c/udphs_device.c **** 		return;
 4213              	 .loc 6 1381 3
 4214 002c 81E0     	 b .L224
 4215              	.L225:
1382:.././hal/sam3u1c/udphs_device.c **** 	}
1383:.././hal/sam3u1c/udphs_device.c **** 	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);
1384:.././hal/sam3u1c/udphs_device.c **** 
1385:.././hal/sam3u1c/udphs_device.c **** 	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
 4216              	 .loc 6 1385 27
 4217 002e 484B     	 ldr r3,.L235+24
 4218 0030 9A89     	 ldrh r2,[r3,#12]
 4219              	 .loc 6 1385 41
 4220 0032 484B     	 ldr r3,.L235+28
 4221 0034 1B88     	 ldrh r3,[r3]
 4222              	 .loc 6 1385 12
 4223 0036 D31A     	 subs r3,r2,r3
 4224 0038 FB81     	 strh r3,[r7,#14]
1386:.././hal/sam3u1c/udphs_device.c **** 	if (0 == nb_remain) {
 4225              	 .loc 6 1386 5
 4226 003a FB89     	 ldrh r3,[r7,#14]
 4227 003c 002B     	 cmp r3,#0
 4228 003e 27D1     	 bne .L227
1387:.././hal/sam3u1c/udphs_device.c **** 		// All content of current buffer payload are sent
1388:.././hal/sam3u1c/udphs_device.c **** 		// Update number of total data sending by previous payload buffer
1389:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
 4229              	 .loc 6 1389 33
 4230 0040 454B     	 ldr r3,.L235+32
 4231 0042 1A88     	 ldrh r2,[r3]
 4232 0044 434B     	 ldr r3,.L235+28
 4233 0046 1B88     	 ldrh r3,[r3]
 4234 0048 1344     	 add r3,r3,r2
 4235 004a 9AB2     	 uxth r2,r3
 4236 004c 424B     	 ldr r3,.L235+32
 4237 004e 1A80     	 strh r2,[r3]
1390:.././hal/sam3u1c/udphs_device.c **** 		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
 4238              	 .loc 6 1390 25
 4239 0050 3F4B     	 ldr r3,.L235+24
 4240 0052 DA88     	 ldrh r2,[r3,#6]
 4241              	 .loc 6 1390 34
 4242 0054 404B     	 ldr r3,.L235+32
 4243 0056 1B88     	 ldrh r3,[r3]
 4244              	 .loc 6 1390 6
 4245 0058 9A42     	 cmp r2,r3
 4246 005a 03D0     	 beq .L228
1391:.././hal/sam3u1c/udphs_device.c **** 				|| b_shortpacket) {
 4247              	 .loc 6 1391 5
 4248 005c 3F4B     	 ldr r3,.L235+36
 4249 005e 1B78     	 ldrb r3,[r3]
 4250 0060 002B     	 cmp r3,#0
 4251 0062 02D0     	 beq .L229
 4252              	.L228:
1392:.././hal/sam3u1c/udphs_device.c **** 			// All data requested are transfered or a short packet has been sent
1393:.././hal/sam3u1c/udphs_device.c **** 			// then it is the end of data phase.
1394:.././hal/sam3u1c/udphs_device.c **** 			// Generate an OUT ZLP for handshake phase.
1395:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("_zO ");
1396:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_send_zlp_out();
 4253              	 .loc 6 1396 4
 4254 0064 3E4B     	 ldr r3,.L235+40
 4255 0066 9847     	 blx r3
 4256              	.LVL76:
1397:.././hal/sam3u1c/udphs_device.c **** 			return;
 4257              	 .loc 6 1397 4
 4258 0068 63E0     	 b .L224
 4259              	.L229:
1398:.././hal/sam3u1c/udphs_device.c **** 		}
1399:.././hal/sam3u1c/udphs_device.c **** 		// Need of new buffer because the data phase is not complete
1400:.././hal/sam3u1c/udphs_device.c **** 		if ((!udd_g_ctrlreq.over_under_run)
 4260              	 .loc 6 1400 22
 4261 006a 394B     	 ldr r3,.L235+24
 4262 006c 5B69     	 ldr r3,[r3,#20]
 4263              	 .loc 6 1400 6
 4264 006e 002B     	 cmp r3,#0
 4265 0070 0ED0     	 beq .L227
1401:.././hal/sam3u1c/udphs_device.c **** 				|| (!udd_g_ctrlreq.over_under_run())) {
 4266              	 .loc 6 1401 23
 4267 0072 374B     	 ldr r3,.L235+24
 4268 0074 5B69     	 ldr r3,[r3,#20]
 4269              	 .loc 6 1401 10
 4270 0076 9847     	 blx r3
 4271              	.LVL77:
 4272 0078 0346     	 mov r3,r0
 4273              	 .loc 6 1401 9
 4274 007a 83F00103 	 eor r3,r3,#1
 4275 007e DBB2     	 uxtb r3,r3
 4276              	 .loc 6 1401 5
 4277 0080 002B     	 cmp r3,#0
 4278 0082 05D1     	 bne .L227
1402:.././hal/sam3u1c/udphs_device.c **** 			// Underrun then send zlp on IN
1403:.././hal/sam3u1c/udphs_device.c **** 			// Here nb_remain=0 and allows to send a IN ZLP
1404:.././hal/sam3u1c/udphs_device.c **** 		} else {
1405:.././hal/sam3u1c/udphs_device.c **** 			// A new payload buffer is given
1406:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_payload_buf_cnt = 0;
 4279              	 .loc 6 1406 29
 4280 0084 334B     	 ldr r3,.L235+28
 4281 0086 0022     	 movs r2,#0
 4282 0088 1A80     	 strh r2,[r3]
1407:.././hal/sam3u1c/udphs_device.c **** 			nb_remain = udd_g_ctrlreq.payload_size;
 4283              	 .loc 6 1407 14
 4284 008a 314B     	 ldr r3,.L235+24
 4285 008c 9B89     	 ldrh r3,[r3,#12]
 4286 008e FB81     	 strh r3,[r7,#14]
 4287              	.L227:
1408:.././hal/sam3u1c/udphs_device.c **** 		}
1409:.././hal/sam3u1c/udphs_device.c **** 	}
1410:.././hal/sam3u1c/udphs_device.c **** 	// Continue transfer and send next data
1411:.././hal/sam3u1c/udphs_device.c **** 	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
 4288              	 .loc 6 1411 5
 4289 0090 FB89     	 ldrh r3,[r7,#14]
 4290 0092 3F2B     	 cmp r3,#63
 4291 0094 05D9     	 bls .L230
1412:.././hal/sam3u1c/udphs_device.c **** 		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
 4292              	 .loc 6 1412 13
 4293 0096 4023     	 movs r3,#64
 4294 0098 FB81     	 strh r3,[r7,#14]
1413:.././hal/sam3u1c/udphs_device.c **** 		b_shortpacket = false;
 4295              	 .loc 6 1413 17
 4296 009a 304B     	 ldr r3,.L235+36
 4297 009c 0022     	 movs r2,#0
 4298 009e 1A70     	 strb r2,[r3]
 4299 00a0 02E0     	 b .L231
 4300              	.L230:
1414:.././hal/sam3u1c/udphs_device.c **** 	} else {
1415:.././hal/sam3u1c/udphs_device.c **** 		b_shortpacket = true;
 4301              	 .loc 6 1415 17
 4302 00a2 2E4B     	 ldr r3,.L235+36
 4303 00a4 0122     	 movs r2,#1
 4304 00a6 1A70     	 strb r2,[r3]
 4305              	.L231:
1416:.././hal/sam3u1c/udphs_device.c **** 	}
1417:.././hal/sam3u1c/udphs_device.c **** 	// Fill buffer of endpoint control
1418:.././hal/sam3u1c/udphs_device.c **** 	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
 4306              	 .loc 6 1418 11
 4307 00a8 2E4B     	 ldr r3,.L235+44
 4308 00aa BB60     	 str r3,[r7,#8]
1419:.././hal/sam3u1c/udphs_device.c **** 	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
 4309              	 .loc 6 1419 25
 4310 00ac 284B     	 ldr r3,.L235+24
 4311 00ae 9B68     	 ldr r3,[r3,#8]
 4312              	 .loc 6 1419 34
 4313 00b0 284A     	 ldr r2,.L235+28
 4314 00b2 1288     	 ldrh r2,[r2]
 4315              	 .loc 6 1419 10
 4316 00b4 1344     	 add r3,r3,r2
 4317 00b6 7B60     	 str r3,[r7,#4]
1420:.././hal/sam3u1c/udphs_device.c **** 	//** Critical section
1421:.././hal/sam3u1c/udphs_device.c **** 	// Only in case of DATA IN phase abort without USB Reset signal after.
1422:.././hal/sam3u1c/udphs_device.c **** 	// The IN data don't must be written in endpoint 0 DPRAM during
1423:.././hal/sam3u1c/udphs_device.c **** 	// a next setup reception in same endpoint 0 DPRAM.
1424:.././hal/sam3u1c/udphs_device.c **** 	// Thereby, an OUT ZLP reception must check before IN data write
1425:.././hal/sam3u1c/udphs_device.c **** 	// and if no OUT ZLP is received the data must be written quickly (800us)
1426:.././hal/sam3u1c/udphs_device.c **** 	// before an eventually ZLP OUT and SETUP reception
1427:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 4318              	 .loc 6 1427 10
 4319 00b8 1F4B     	 ldr r3,.L235
 4320 00ba 9847     	 blx r3
 4321              	.LVL78:
 4322 00bc 3860     	 str r0,[r7]
1428:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_out_received(0)) {
 4323              	 .loc 6 1428 6
 4324 00be 1F4B     	 ldr r3,.L235+4
 4325 00c0 D3F81C31 	 ldr r3,[r3,#284]
 4326 00c4 03F40073 	 and r3,r3,#512
 4327              	 .loc 6 1428 5
 4328 00c8 002B     	 cmp r3,#0
 4329 00ca 06D0     	 beq .L232
1429:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("Abort ");
1430:.././hal/sam3u1c/udphs_device.c **** 		// IN DATA phase aborted by OUT ZLP
1431:.././hal/sam3u1c/udphs_device.c **** 		cpu_irq_restore(flags);
 4330              	 .loc 6 1431 3
 4331 00cc 3868     	 ldr r0,[r7]
 4332 00ce 1C4B     	 ldr r3,.L235+8
 4333 00d0 9847     	 blx r3
 4334              	.LVL79:
1432:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
 4335              	 .loc 6 1432 24
 4336 00d2 1C4B     	 ldr r3,.L235+12
 4337 00d4 0422     	 movs r2,#4
 4338 00d6 1A70     	 strb r2,[r3]
1433:.././hal/sam3u1c/udphs_device.c **** 		return; // Exit of IN DATA phase
 4339              	 .loc 6 1433 3
 4340 00d8 2BE0     	 b .L224
 4341              	.L232:
1434:.././hal/sam3u1c/udphs_device.c **** 	}
1435:.././hal/sam3u1c/udphs_device.c **** 	// dbg_print("t%d ", nb_remain);
1436:.././hal/sam3u1c/udphs_device.c **** 	// Write quickly the IN data
1437:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < nb_remain; i++) {
 4342              	 .loc 6 1437 9
 4343 00da 0023     	 movs r3,#0
 4344 00dc 7B73     	 strb r3,[r7,#13]
 4345              	 .loc 6 1437 2
 4346 00de 0AE0     	 b .L233
 4347              	.L234:
1438:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 4348              	 .loc 6 1438 25 discriminator 3
 4349 00e0 7A68     	 ldr r2,[r7,#4]
 4350 00e2 531C     	 adds r3,r2,#1
 4351 00e4 7B60     	 str r3,[r7,#4]
 4352              	 .loc 6 1438 12 discriminator 3
 4353 00e6 BB68     	 ldr r3,[r7,#8]
 4354 00e8 591C     	 adds r1,r3,#1
 4355 00ea B960     	 str r1,[r7,#8]
 4356              	 .loc 6 1438 17 discriminator 3
 4357 00ec 1278     	 ldrb r2,[r2]
 4358              	 .loc 6 1438 15 discriminator 3
 4359 00ee 1A70     	 strb r2,[r3]
1437:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 4360              	 .loc 6 1437 30 discriminator 3
 4361 00f0 7B7B     	 ldrb r3,[r7,#13]
 4362 00f2 0133     	 adds r3,r3,#1
 4363 00f4 7B73     	 strb r3,[r7,#13]
 4364              	.L233:
1437:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 4365              	 .loc 6 1437 16 discriminator 1
 4366 00f6 7B7B     	 ldrb r3,[r7,#13]
 4367 00f8 9BB2     	 uxth r3,r3
1437:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 4368              	 .loc 6 1437 2 discriminator 1
 4369 00fa FA89     	 ldrh r2,[r7,#14]
 4370 00fc 9A42     	 cmp r2,r3
 4371 00fe EFD8     	 bhi .L234
1439:.././hal/sam3u1c/udphs_device.c **** 	}
1440:.././hal/sam3u1c/udphs_device.c **** 	udd_ctrl_payload_buf_cnt += nb_remain;
 4372              	 .loc 6 1440 27
 4373 0100 144B     	 ldr r3,.L235+28
 4374 0102 1A88     	 ldrh r2,[r3]
 4375 0104 FB89     	 ldrh r3,[r7,#14]
 4376 0106 1344     	 add r3,r3,r2
 4377 0108 9AB2     	 uxth r2,r3
 4378 010a 124B     	 ldr r3,.L235+28
 4379 010c 1A80     	 strh r2,[r3]
1441:.././hal/sam3u1c/udphs_device.c **** 
1442:.././hal/sam3u1c/udphs_device.c **** 	// Validate and send the data available in the control endpoint buffer
1443:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_in_send(0);
 4380              	 .loc 6 1443 2
 4381 010e 0B4B     	 ldr r3,.L235+4
 4382 0110 4FF48062 	 mov r2,#1024
 4383 0114 C3F81821 	 str r2,[r3,#280]
1444:.././hal/sam3u1c/udphs_device.c **** 	udd_raise_tx_pkt_ready(0);
 4384              	 .loc 6 1444 2
 4385 0118 084B     	 ldr r3,.L235+4
 4386 011a 4FF40062 	 mov r2,#2048
 4387 011e C3F81421 	 str r2,[r3,#276]
1445:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_in_send_interrupt(0);
 4388              	 .loc 6 1445 2
 4389 0122 064B     	 ldr r3,.L235+4
 4390 0124 4FF48062 	 mov r2,#1024
 4391 0128 C3F80421 	 str r2,[r3,#260]
1446:.././hal/sam3u1c/udphs_device.c **** 	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
1447:.././hal/sam3u1c/udphs_device.c **** 	// because OUT endpoint is already free and ZLP OUT accepted.
1448:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 4392              	 .loc 6 1448 2
 4393 012c 3868     	 ldr r0,[r7]
 4394 012e 044B     	 ldr r3,.L235+8
 4395 0130 9847     	 blx r3
 4396              	.LVL80:
 4397              	.L224:
1449:.././hal/sam3u1c/udphs_device.c **** }
 4398              	 .loc 6 1449 1
 4399 0132 1037     	 adds r7,r7,#16
 4400              	.LCFI175:
 4401              	 .cfi_def_cfa_offset 8
 4402 0134 BD46     	 mov sp,r7
 4403              	.LCFI176:
 4404              	 .cfi_def_cfa_register 13
 4405              	 
 4406 0136 80BD     	 pop {r7,pc}
 4407              	.L236:
 4408              	 .align 2
 4409              	.L235:
 4410 0138 00000000 	 .word cpu_irq_save
 4411 013c 00400A40 	 .word 1074413568
 4412 0140 00000000 	 .word cpu_irq_restore
 4413 0144 00000000 	 .word udd_ep_control_state
 4414 0148 00000000 	 .word udd_ctrl_endofrequest
 4415 014c 00000000 	 .word udd_ctrl_init
 4416 0150 00000000 	 .word udd_g_ctrlreq
 4417 0154 00000000 	 .word udd_ctrl_payload_buf_cnt
 4418 0158 00000000 	 .word udd_ctrl_prev_payload_buf_cnt
 4419 015c 00000000 	 .word b_shortpacket.8497
 4420 0160 00000000 	 .word udd_ctrl_send_zlp_out
 4421 0164 00001820 	 .word 538443776
 4422              	 .cfi_endproc
 4423              	.LFE167:
 4425              	 .section .text.udd_ctrl_out_received,"ax",%progbits
 4426              	 .align 1
 4427              	 .syntax unified
 4428              	 .thumb
 4429              	 .thumb_func
 4430              	 .fpu softvfp
 4432              	udd_ctrl_out_received:
 4433              	.LFB168:
1450:.././hal/sam3u1c/udphs_device.c **** 
1451:.././hal/sam3u1c/udphs_device.c **** 
1452:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_out_received(void)
1453:.././hal/sam3u1c/udphs_device.c **** {
 4434              	 .loc 6 1453 1
 4435              	 .cfi_startproc
 4436              	 
 4437              	 
 4438 0000 80B5     	 push {r7,lr}
 4439              	.LCFI177:
 4440              	 .cfi_def_cfa_offset 8
 4441              	 .cfi_offset 7,-8
 4442              	 .cfi_offset 14,-4
 4443 0002 84B0     	 sub sp,sp,#16
 4444              	.LCFI178:
 4445              	 .cfi_def_cfa_offset 24
 4446 0004 00AF     	 add r7,sp,#0
 4447              	.LCFI179:
 4448              	 .cfi_def_cfa_register 7
1454:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1455:.././hal/sam3u1c/udphs_device.c **** 	uint8_t i;
1456:.././hal/sam3u1c/udphs_device.c **** 	uint16_t nb_data;
1457:.././hal/sam3u1c/udphs_device.c **** 
1458:.././hal/sam3u1c/udphs_device.c **** 	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
 4449              	 .loc 6 1458 26
 4450 0006 614B     	 ldr r3,.L252
 4451 0008 1B78     	 ldrb r3,[r3]
 4452              	 .loc 6 1458 5
 4453 000a 012B     	 cmp r3,#1
 4454 000c 0FD0     	 beq .L238
1459:.././hal/sam3u1c/udphs_device.c **** 		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
 4455              	 .loc 6 1459 27
 4456 000e 5F4B     	 ldr r3,.L252
 4457 0010 1B78     	 ldrb r3,[r3]
 4458              	 .loc 6 1459 6
 4459 0012 022B     	 cmp r3,#2
 4460 0014 03D0     	 beq .L239
1460:.././hal/sam3u1c/udphs_device.c **** 				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
 4461              	 .loc 6 1460 43
 4462 0016 5D4B     	 ldr r3,.L252
 4463 0018 1B78     	 ldrb r3,[r3]
 4464              	 .loc 6 1460 5
 4465 001a 042B     	 cmp r3,#4
 4466 001c 02D1     	 bne .L240
 4467              	.L239:
1461:.././hal/sam3u1c/udphs_device.c **** 				udd_ep_control_state)) {
1462:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("EoStp\n\r");
1463:.././hal/sam3u1c/udphs_device.c **** 			// End of SETUP request:
1464:.././hal/sam3u1c/udphs_device.c **** 			// - Data IN Phase aborted,
1465:.././hal/sam3u1c/udphs_device.c **** 			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
1466:.././hal/sam3u1c/udphs_device.c **** 			// - or ZLP OUT received normally.
1467:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_endofrequest();
 4468              	 .loc 6 1467 4
 4469 001e 5C4B     	 ldr r3,.L252+4
 4470 0020 9847     	 blx r3
 4471              	.LVL81:
 4472 0022 01E0     	 b .L241
 4473              	.L240:
1468:.././hal/sam3u1c/udphs_device.c **** 		} else {
1469:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("ErrStp\n\r");
1470:.././hal/sam3u1c/udphs_device.c **** 			// Protocol error during SETUP request
1471:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_stall_data();
 4474              	 .loc 6 1471 4
 4475 0024 5B4B     	 ldr r3,.L252+8
 4476 0026 9847     	 blx r3
 4477              	.LVL82:
 4478              	.L241:
1472:.././hal/sam3u1c/udphs_device.c **** 		}
1473:.././hal/sam3u1c/udphs_device.c **** 		// Reinitializes control endpoint management
1474:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_init();
 4479              	 .loc 6 1474 3
 4480 0028 5B4B     	 ldr r3,.L252+12
 4481 002a 9847     	 blx r3
 4482              	.LVL83:
1475:.././hal/sam3u1c/udphs_device.c **** 		return;
 4483              	 .loc 6 1475 3
 4484 002c ABE0     	 b .L237
 4485              	.L238:
1476:.././hal/sam3u1c/udphs_device.c **** 	}
1477:.././hal/sam3u1c/udphs_device.c **** 	// Read data received during OUT phase
1478:.././hal/sam3u1c/udphs_device.c **** 	nb_data = udd_byte_count(0);
 4486              	 .loc 6 1478 12
 4487 002e 5B4B     	 ldr r3,.L252+16
 4488 0030 D3F81C31 	 ldr r3,[r3,#284]
 4489 0034 1B0D     	 lsrs r3,r3,#20
 4490 0036 9BB2     	 uxth r3,r3
 4491              	 .loc 6 1478 10
 4492 0038 C3F30A03 	 ubfx r3,r3,#0,#11
 4493 003c BB81     	 strh r3,[r7,#12]
1479:.././hal/sam3u1c/udphs_device.c **** 	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
 4494              	 .loc 6 1479 19
 4495 003e 584B     	 ldr r3,.L252+20
 4496 0040 9B89     	 ldrh r3,[r3,#12]
 4497 0042 1A46     	 mov r2,r3
 4498              	 .loc 6 1479 61
 4499 0044 574B     	 ldr r3,.L252+24
 4500 0046 1B88     	 ldrh r3,[r3]
 4501 0048 1946     	 mov r1,r3
 4502 004a BB89     	 ldrh r3,[r7,#12]
 4503 004c 0B44     	 add r3,r3,r1
 4504              	 .loc 6 1479 5
 4505 004e 9A42     	 cmp r2,r3
 4506 0050 05DA     	 bge .L243
1480:.././hal/sam3u1c/udphs_device.c **** 		// Payload buffer too small
1481:.././hal/sam3u1c/udphs_device.c **** 		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
 4507              	 .loc 6 1481 26
 4508 0052 534B     	 ldr r3,.L252+20
 4509 0054 9A89     	 ldrh r2,[r3,#12]
 4510              	 .loc 6 1481 40
 4511 0056 534B     	 ldr r3,.L252+24
 4512 0058 1B88     	 ldrh r3,[r3]
 4513              	 .loc 6 1481 11
 4514 005a D31A     	 subs r3,r2,r3
 4515 005c BB81     	 strh r3,[r7,#12]
 4516              	.L243:
1482:.././hal/sam3u1c/udphs_device.c **** 	}
1483:.././hal/sam3u1c/udphs_device.c **** 	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
 4517              	 .loc 6 1483 11
 4518 005e 524B     	 ldr r3,.L252+28
 4519 0060 BB60     	 str r3,[r7,#8]
1484:.././hal/sam3u1c/udphs_device.c **** 	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
 4520              	 .loc 6 1484 35
 4521 0062 4F4B     	 ldr r3,.L252+20
 4522 0064 9B68     	 ldr r3,[r3,#8]
 4523              	 .loc 6 1484 44
 4524 0066 4F4A     	 ldr r2,.L252+24
 4525 0068 1288     	 ldrh r2,[r2]
 4526              	 .loc 6 1484 11
 4527 006a 1344     	 add r3,r3,r2
 4528 006c 7B60     	 str r3,[r7,#4]
1485:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < nb_data; i++) {
 4529              	 .loc 6 1485 9
 4530 006e 0023     	 movs r3,#0
 4531 0070 FB73     	 strb r3,[r7,#15]
 4532              	 .loc 6 1485 2
 4533 0072 0AE0     	 b .L244
 4534              	.L245:
1486:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 4535              	 .loc 6 1486 25 discriminator 3
 4536 0074 BA68     	 ldr r2,[r7,#8]
 4537 0076 531C     	 adds r3,r2,#1
 4538 0078 BB60     	 str r3,[r7,#8]
 4539              	 .loc 6 1486 12 discriminator 3
 4540 007a 7B68     	 ldr r3,[r7,#4]
 4541 007c 591C     	 adds r1,r3,#1
 4542 007e 7960     	 str r1,[r7,#4]
 4543              	 .loc 6 1486 17 discriminator 3
 4544 0080 1278     	 ldrb r2,[r2]
 4545              	 .loc 6 1486 15 discriminator 3
 4546 0082 1A70     	 strb r2,[r3]
1485:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < nb_data; i++) {
 4547              	 .loc 6 1485 28 discriminator 3
 4548 0084 FB7B     	 ldrb r3,[r7,#15]
 4549 0086 0133     	 adds r3,r3,#1
 4550 0088 FB73     	 strb r3,[r7,#15]
 4551              	.L244:
1485:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < nb_data; i++) {
 4552              	 .loc 6 1485 16 discriminator 1
 4553 008a FB7B     	 ldrb r3,[r7,#15]
 4554 008c 9BB2     	 uxth r3,r3
1485:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < nb_data; i++) {
 4555              	 .loc 6 1485 2 discriminator 1
 4556 008e BA89     	 ldrh r2,[r7,#12]
 4557 0090 9A42     	 cmp r2,r3
 4558 0092 EFD8     	 bhi .L245
1487:.././hal/sam3u1c/udphs_device.c **** 	}
1488:.././hal/sam3u1c/udphs_device.c **** 	udd_ctrl_payload_buf_cnt += nb_data;
 4559              	 .loc 6 1488 27
 4560 0094 434B     	 ldr r3,.L252+24
 4561 0096 1A88     	 ldrh r2,[r3]
 4562 0098 BB89     	 ldrh r3,[r7,#12]
 4563 009a 1344     	 add r3,r3,r2
 4564 009c 9AB2     	 uxth r2,r3
 4565 009e 414B     	 ldr r3,.L252+24
 4566 00a0 1A80     	 strh r2,[r3]
1489:.././hal/sam3u1c/udphs_device.c **** 
1490:.././hal/sam3u1c/udphs_device.c **** 	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
 4567              	 .loc 6 1490 5
 4568 00a2 BB89     	 ldrh r3,[r7,#12]
 4569 00a4 402B     	 cmp r3,#64
 4570 00a6 0AD1     	 bne .L246
1491:.././hal/sam3u1c/udphs_device.c **** 			|| (udd_g_ctrlreq.req.wLength <=
 4571              	 .loc 6 1491 25
 4572 00a8 3D4B     	 ldr r3,.L252+20
 4573 00aa DB88     	 ldrh r3,[r3,#6]
 4574 00ac 1A46     	 mov r2,r3
1492:.././hal/sam3u1c/udphs_device.c **** 			(udd_ctrl_prev_payload_buf_cnt +
 4575              	 .loc 6 1492 35
 4576 00ae 3F4B     	 ldr r3,.L252+32
 4577 00b0 1B88     	 ldrh r3,[r3]
 4578 00b2 1946     	 mov r1,r3
 4579 00b4 3B4B     	 ldr r3,.L252+24
 4580 00b6 1B88     	 ldrh r3,[r3]
 4581 00b8 0B44     	 add r3,r3,r1
1491:.././hal/sam3u1c/udphs_device.c **** 			|| (udd_g_ctrlreq.req.wLength <=
 4582              	 .loc 6 1491 4
 4583 00ba 9A42     	 cmp r2,r3
 4584 00bc 20DC     	 bgt .L247
 4585              	.L246:
1493:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_payload_buf_cnt))) {
1494:.././hal/sam3u1c/udphs_device.c **** 		// End of reception because it is a short packet
1495:.././hal/sam3u1c/udphs_device.c **** 		// Before send ZLP, call intermediate callback
1496:.././hal/sam3u1c/udphs_device.c **** 		// in case of data receive generate a stall
1497:.././hal/sam3u1c/udphs_device.c **** 		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
 4586              	 .loc 6 1497 30
 4587 00be 394B     	 ldr r3,.L252+24
 4588 00c0 1A88     	 ldrh r2,[r3]
 4589 00c2 374B     	 ldr r3,.L252+20
 4590 00c4 9A81     	 strh r2,[r3,#12]
1498:.././hal/sam3u1c/udphs_device.c **** 		if (NULL != udd_g_ctrlreq.over_under_run) {
 4591              	 .loc 6 1498 28
 4592 00c6 364B     	 ldr r3,.L252+20
 4593 00c8 5B69     	 ldr r3,[r3,#20]
 4594              	 .loc 6 1498 6
 4595 00ca 002B     	 cmp r3,#0
 4596 00cc 10D0     	 beq .L248
1499:.././hal/sam3u1c/udphs_device.c **** 			if (!udd_g_ctrlreq.over_under_run()) {
 4597              	 .loc 6 1499 22
 4598 00ce 344B     	 ldr r3,.L252+20
 4599 00d0 5B69     	 ldr r3,[r3,#20]
 4600              	 .loc 6 1499 9
 4601 00d2 9847     	 blx r3
 4602              	.LVL84:
 4603 00d4 0346     	 mov r3,r0
 4604              	 .loc 6 1499 8
 4605 00d6 83F00103 	 eor r3,r3,#1
 4606 00da DBB2     	 uxtb r3,r3
 4607              	 .loc 6 1499 7
 4608 00dc 002B     	 cmp r3,#0
 4609 00de 07D0     	 beq .L248
1500:.././hal/sam3u1c/udphs_device.c **** 				// Stall ZLP
1501:.././hal/sam3u1c/udphs_device.c **** 				udd_ctrl_stall_data();
 4610              	 .loc 6 1501 5
 4611 00e0 2C4B     	 ldr r3,.L252+8
 4612 00e2 9847     	 blx r3
 4613              	.LVL85:
1502:.././hal/sam3u1c/udphs_device.c **** 				// Ack reception of OUT to replace NAK by a STALL
1503:.././hal/sam3u1c/udphs_device.c **** 				udd_ack_out_received(0);
 4614              	 .loc 6 1503 5
 4615 00e4 2D4B     	 ldr r3,.L252+16
 4616 00e6 4FF40072 	 mov r2,#512
 4617 00ea C3F81821 	 str r2,[r3,#280]
1504:.././hal/sam3u1c/udphs_device.c **** 				return;
 4618              	 .loc 6 1504 5
 4619 00ee 4AE0     	 b .L237
 4620              	.L248:
1505:.././hal/sam3u1c/udphs_device.c **** 			}
1506:.././hal/sam3u1c/udphs_device.c **** 		}
1507:.././hal/sam3u1c/udphs_device.c **** 		// Send IN ZLP to ACK setup request
1508:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_out_received(0);
 4621              	 .loc 6 1508 3
 4622 00f0 2A4B     	 ldr r3,.L252+16
 4623 00f2 4FF40072 	 mov r2,#512
 4624 00f6 C3F81821 	 str r2,[r3,#280]
1509:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_send_zlp_in();
 4625              	 .loc 6 1509 3
 4626 00fa 2D4B     	 ldr r3,.L252+36
 4627 00fc 9847     	 blx r3
 4628              	.LVL86:
1510:.././hal/sam3u1c/udphs_device.c **** 		return;
 4629              	 .loc 6 1510 3
 4630 00fe 42E0     	 b .L237
 4631              	.L247:
1511:.././hal/sam3u1c/udphs_device.c **** 	}
1512:.././hal/sam3u1c/udphs_device.c **** 
1513:.././hal/sam3u1c/udphs_device.c **** 	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
 4632              	 .loc 6 1513 19
 4633 0100 274B     	 ldr r3,.L252+20
 4634 0102 9A89     	 ldrh r2,[r3,#12]
 4635              	 .loc 6 1513 33
 4636 0104 274B     	 ldr r3,.L252+24
 4637 0106 1B88     	 ldrh r3,[r3]
 4638              	 .loc 6 1513 5
 4639 0108 9A42     	 cmp r2,r3
 4640 010a 27D1     	 bne .L249
1514:.././hal/sam3u1c/udphs_device.c **** 		// Overrun then request a new payload buffer
1515:.././hal/sam3u1c/udphs_device.c **** 		if (!udd_g_ctrlreq.over_under_run) {
 4641              	 .loc 6 1515 21
 4642 010c 244B     	 ldr r3,.L252+20
 4643 010e 5B69     	 ldr r3,[r3,#20]
 4644              	 .loc 6 1515 6
 4645 0110 002B     	 cmp r3,#0
 4646 0112 07D1     	 bne .L250
1516:.././hal/sam3u1c/udphs_device.c **** 			// No callback available to request a new payload buffer
1517:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_stall_data();
 4647              	 .loc 6 1517 4
 4648 0114 1F4B     	 ldr r3,.L252+8
 4649 0116 9847     	 blx r3
 4650              	.LVL87:
1518:.././hal/sam3u1c/udphs_device.c **** 			// Ack reception of OUT to replace NAK by a STALL
1519:.././hal/sam3u1c/udphs_device.c **** 			udd_ack_out_received(0);
 4651              	 .loc 6 1519 4
 4652 0118 204B     	 ldr r3,.L252+16
 4653 011a 4FF40072 	 mov r2,#512
 4654 011e C3F81821 	 str r2,[r3,#280]
1520:.././hal/sam3u1c/udphs_device.c **** 			return;
 4655              	 .loc 6 1520 4
 4656 0122 30E0     	 b .L237
 4657              	.L250:
1521:.././hal/sam3u1c/udphs_device.c **** 		}
1522:.././hal/sam3u1c/udphs_device.c **** 		if (!udd_g_ctrlreq.over_under_run()) {
 4658              	 .loc 6 1522 21
 4659 0124 1E4B     	 ldr r3,.L252+20
 4660 0126 5B69     	 ldr r3,[r3,#20]
 4661              	 .loc 6 1522 8
 4662 0128 9847     	 blx r3
 4663              	.LVL88:
 4664 012a 0346     	 mov r3,r0
 4665              	 .loc 6 1522 7
 4666 012c 83F00103 	 eor r3,r3,#1
 4667 0130 DBB2     	 uxtb r3,r3
 4668              	 .loc 6 1522 6
 4669 0132 002B     	 cmp r3,#0
 4670 0134 07D0     	 beq .L251
1523:.././hal/sam3u1c/udphs_device.c **** 			// No new payload buffer delivered
1524:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_stall_data();
 4671              	 .loc 6 1524 4
 4672 0136 174B     	 ldr r3,.L252+8
 4673 0138 9847     	 blx r3
 4674              	.LVL89:
1525:.././hal/sam3u1c/udphs_device.c **** 			// Ack reception of OUT to replace NAK by a STALL
1526:.././hal/sam3u1c/udphs_device.c **** 			udd_ack_out_received(0);
 4675              	 .loc 6 1526 4
 4676 013a 184B     	 ldr r3,.L252+16
 4677 013c 4FF40072 	 mov r2,#512
 4678 0140 C3F81821 	 str r2,[r3,#280]
1527:.././hal/sam3u1c/udphs_device.c **** 			return;
 4679              	 .loc 6 1527 4
 4680 0144 1FE0     	 b .L237
 4681              	.L251:
1528:.././hal/sam3u1c/udphs_device.c **** 		}
1529:.././hal/sam3u1c/udphs_device.c **** 		// New payload buffer available
1530:.././hal/sam3u1c/udphs_device.c **** 		// Update number of total data received
1531:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
 4682              	 .loc 6 1531 33
 4683 0146 194B     	 ldr r3,.L252+32
 4684 0148 1A88     	 ldrh r2,[r3]
 4685 014a 164B     	 ldr r3,.L252+24
 4686 014c 1B88     	 ldrh r3,[r3]
 4687 014e 1344     	 add r3,r3,r2
 4688 0150 9AB2     	 uxth r2,r3
 4689 0152 164B     	 ldr r3,.L252+32
 4690 0154 1A80     	 strh r2,[r3]
1532:.././hal/sam3u1c/udphs_device.c **** 		// Reinit reception on payload buffer
1533:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_payload_buf_cnt = 0;
 4691              	 .loc 6 1533 28
 4692 0156 134B     	 ldr r3,.L252+24
 4693 0158 0022     	 movs r2,#0
 4694 015a 1A80     	 strh r2,[r3]
 4695              	.L249:
1534:.././hal/sam3u1c/udphs_device.c **** 	}
1535:.././hal/sam3u1c/udphs_device.c **** 	// Free buffer of control endpoint to authorize next reception
1536:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_out_received(0);
 4696              	 .loc 6 1536 2
 4697 015c 0F4B     	 ldr r3,.L252+16
 4698 015e 4FF40072 	 mov r2,#512
 4699 0162 C3F81821 	 str r2,[r3,#280]
1537:.././hal/sam3u1c/udphs_device.c **** 	// To detect a protocol error, enable nak interrupt on data IN phase
1538:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_nak_in(0);
 4700              	 .loc 6 1538 2
 4701 0166 0D4B     	 ldr r3,.L252+16
 4702 0168 4FF48042 	 mov r2,#16384
 4703 016c C3F81821 	 str r2,[r3,#280]
1539:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 4704              	 .loc 6 1539 10
 4705 0170 104B     	 ldr r3,.L252+40
 4706 0172 9847     	 blx r3
 4707              	.LVL90:
 4708 0174 3860     	 str r0,[r7]
1540:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_nak_in_interrupt(0);
 4709              	 .loc 6 1540 2
 4710 0176 094B     	 ldr r3,.L252+16
 4711 0178 4FF48042 	 mov r2,#16384
 4712 017c C3F80421 	 str r2,[r3,#260]
1541:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 4713              	 .loc 6 1541 2
 4714 0180 3868     	 ldr r0,[r7]
 4715 0182 0D4B     	 ldr r3,.L252+44
 4716 0184 9847     	 blx r3
 4717              	.LVL91:
 4718              	.L237:
1542:.././hal/sam3u1c/udphs_device.c **** }
 4719              	 .loc 6 1542 1
 4720 0186 1037     	 adds r7,r7,#16
 4721              	.LCFI180:
 4722              	 .cfi_def_cfa_offset 8
 4723 0188 BD46     	 mov sp,r7
 4724              	.LCFI181:
 4725              	 .cfi_def_cfa_register 13
 4726              	 
 4727 018a 80BD     	 pop {r7,pc}
 4728              	.L253:
 4729              	 .align 2
 4730              	.L252:
 4731 018c 00000000 	 .word udd_ep_control_state
 4732 0190 00000000 	 .word udd_ctrl_endofrequest
 4733 0194 00000000 	 .word udd_ctrl_stall_data
 4734 0198 00000000 	 .word udd_ctrl_init
 4735 019c 00400A40 	 .word 1074413568
 4736 01a0 00000000 	 .word udd_g_ctrlreq
 4737 01a4 00000000 	 .word udd_ctrl_payload_buf_cnt
 4738 01a8 00001820 	 .word 538443776
 4739 01ac 00000000 	 .word udd_ctrl_prev_payload_buf_cnt
 4740 01b0 00000000 	 .word udd_ctrl_send_zlp_in
 4741 01b4 00000000 	 .word cpu_irq_save
 4742 01b8 00000000 	 .word cpu_irq_restore
 4743              	 .cfi_endproc
 4744              	.LFE168:
 4746              	 .section .text.udd_ctrl_underflow,"ax",%progbits
 4747              	 .align 1
 4748              	 .syntax unified
 4749              	 .thumb
 4750              	 .thumb_func
 4751              	 .fpu softvfp
 4753              	udd_ctrl_underflow:
 4754              	.LFB169:
1543:.././hal/sam3u1c/udphs_device.c **** 
1544:.././hal/sam3u1c/udphs_device.c **** 
1545:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_underflow(void)
1546:.././hal/sam3u1c/udphs_device.c **** {
 4755              	 .loc 6 1546 1
 4756              	 .cfi_startproc
 4757              	 
 4758              	 
 4759 0000 80B5     	 push {r7,lr}
 4760              	.LCFI182:
 4761              	 .cfi_def_cfa_offset 8
 4762              	 .cfi_offset 7,-8
 4763              	 .cfi_offset 14,-4
 4764 0002 00AF     	 add r7,sp,#0
 4765              	.LCFI183:
 4766              	 .cfi_def_cfa_register 7
1547:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_out_received(0))
 4767              	 .loc 6 1547 6
 4768 0004 0C4B     	 ldr r3,.L259
 4769 0006 D3F81C31 	 ldr r3,[r3,#284]
 4770 000a 03F40073 	 and r3,r3,#512
 4771              	 .loc 6 1547 5
 4772 000e 002B     	 cmp r3,#0
 4773 0010 0FD1     	 bne .L258
1548:.././hal/sam3u1c/udphs_device.c **** 		return; // underflow ignored if OUT data is received
1549:.././hal/sam3u1c/udphs_device.c **** 
1550:.././hal/sam3u1c/udphs_device.c **** 	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
 4774              	 .loc 6 1550 26
 4775 0012 0A4B     	 ldr r3,.L259+4
 4776 0014 1B78     	 ldrb r3,[r3]
 4777              	 .loc 6 1550 5
 4778 0016 012B     	 cmp r3,#1
 4779 0018 02D1     	 bne .L257
1551:.././hal/sam3u1c/udphs_device.c **** 		// Host want to stop OUT transaction
1552:.././hal/sam3u1c/udphs_device.c **** 		// then stop to wait OUT data phase and wait IN ZLP handshake
1553:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_send_zlp_in();
 4780              	 .loc 6 1553 3
 4781 001a 094B     	 ldr r3,.L259+8
 4782 001c 9847     	 blx r3
 4783              	.LVL92:
 4784 001e 09E0     	 b .L254
 4785              	.L257:
1554:.././hal/sam3u1c/udphs_device.c **** 	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
 4786              	 .loc 6 1554 47
 4787 0020 064B     	 ldr r3,.L259+4
 4788 0022 1B78     	 ldrb r3,[r3]
 4789              	 .loc 6 1554 12
 4790 0024 042B     	 cmp r3,#4
 4791 0026 05D1     	 bne .L254
1555:.././hal/sam3u1c/udphs_device.c **** 		// A OUT handshake is waiting by device,
1556:.././hal/sam3u1c/udphs_device.c **** 		// but host want extra IN data then stall extra IN data
1557:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_stall_handshake(0);
 4792              	 .loc 6 1557 3
 4793 0028 034B     	 ldr r3,.L259
 4794 002a 2022     	 movs r2,#32
 4795 002c C3F81421 	 str r2,[r3,#276]
 4796 0030 00E0     	 b .L254
 4797              	.L258:
1548:.././hal/sam3u1c/udphs_device.c **** 
 4798              	 .loc 6 1548 3
 4799 0032 00BF     	 nop
 4800              	.L254:
1558:.././hal/sam3u1c/udphs_device.c **** 	}
1559:.././hal/sam3u1c/udphs_device.c **** }
 4801              	 .loc 6 1559 1
 4802 0034 80BD     	 pop {r7,pc}
 4803              	.L260:
 4804 0036 00BF     	 .align 2
 4805              	.L259:
 4806 0038 00400A40 	 .word 1074413568
 4807 003c 00000000 	 .word udd_ep_control_state
 4808 0040 00000000 	 .word udd_ctrl_send_zlp_in
 4809              	 .cfi_endproc
 4810              	.LFE169:
 4812              	 .section .text.udd_ctrl_overflow,"ax",%progbits
 4813              	 .align 1
 4814              	 .syntax unified
 4815              	 .thumb
 4816              	 .thumb_func
 4817              	 .fpu softvfp
 4819              	udd_ctrl_overflow:
 4820              	.LFB170:
1560:.././hal/sam3u1c/udphs_device.c **** 
1561:.././hal/sam3u1c/udphs_device.c **** 
1562:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_overflow(void)
1563:.././hal/sam3u1c/udphs_device.c **** {
 4821              	 .loc 6 1563 1
 4822              	 .cfi_startproc
 4823              	 
 4824              	 
 4825              	 
 4826 0000 80B4     	 push {r7}
 4827              	.LCFI184:
 4828              	 .cfi_def_cfa_offset 4
 4829              	 .cfi_offset 7,-4
 4830 0002 00AF     	 add r7,sp,#0
 4831              	.LCFI185:
 4832              	 .cfi_def_cfa_register 7
1564:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_in_send(0))
 4833              	 .loc 6 1564 6
 4834 0004 094B     	 ldr r3,.L265
 4835 0006 D3F81C31 	 ldr r3,[r3,#284]
 4836 000a 03F48063 	 and r3,r3,#1024
 4837              	 .loc 6 1564 5
 4838 000e 002B     	 cmp r3,#0
 4839 0010 08D1     	 bne .L264
1565:.././hal/sam3u1c/udphs_device.c **** 		return; // overflow ignored if IN data is received
1566:.././hal/sam3u1c/udphs_device.c **** 
1567:.././hal/sam3u1c/udphs_device.c **** 	// The case of UDD_EPCTRL_DATA_IN is not managed
1568:.././hal/sam3u1c/udphs_device.c **** 	// because the OUT endpoint is already free and OUT ZLP accepted
1569:.././hal/sam3u1c/udphs_device.c **** 
1570:.././hal/sam3u1c/udphs_device.c **** 	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
 4840              	 .loc 6 1570 39
 4841 0012 074B     	 ldr r3,.L265+4
 4842 0014 1B78     	 ldrb r3,[r3]
 4843              	 .loc 6 1570 5
 4844 0016 032B     	 cmp r3,#3
 4845 0018 05D1     	 bne .L261
1571:.././hal/sam3u1c/udphs_device.c **** 		// A IN handshake is waiting by device,
1572:.././hal/sam3u1c/udphs_device.c **** 		// but host want extra OUT data then stall extra OUT data
1573:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_stall_handshake(0);
 4846              	 .loc 6 1573 3
 4847 001a 044B     	 ldr r3,.L265
 4848 001c 2022     	 movs r2,#32
 4849 001e C3F81421 	 str r2,[r3,#276]
 4850 0022 00E0     	 b .L261
 4851              	.L264:
1565:.././hal/sam3u1c/udphs_device.c **** 		return; // overflow ignored if IN data is received
 4852              	 .loc 6 1565 3
 4853 0024 00BF     	 nop
 4854              	.L261:
1574:.././hal/sam3u1c/udphs_device.c **** 	}
1575:.././hal/sam3u1c/udphs_device.c **** }
 4855              	 .loc 6 1575 1
 4856 0026 BD46     	 mov sp,r7
 4857              	.LCFI186:
 4858              	 .cfi_def_cfa_register 13
 4859              	 
 4860 0028 80BC     	 pop {r7}
 4861              	.LCFI187:
 4862              	 .cfi_restore 7
 4863              	 .cfi_def_cfa_offset 0
 4864 002a 7047     	 bx lr
 4865              	.L266:
 4866              	 .align 2
 4867              	.L265:
 4868 002c 00400A40 	 .word 1074413568
 4869 0030 00000000 	 .word udd_ep_control_state
 4870              	 .cfi_endproc
 4871              	.LFE170:
 4873              	 .section .text.udd_ctrl_stall_data,"ax",%progbits
 4874              	 .align 1
 4875              	 .syntax unified
 4876              	 .thumb
 4877              	 .thumb_func
 4878              	 .fpu softvfp
 4880              	udd_ctrl_stall_data:
 4881              	.LFB171:
1576:.././hal/sam3u1c/udphs_device.c **** 
1577:.././hal/sam3u1c/udphs_device.c **** 
1578:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_stall_data(void)
1579:.././hal/sam3u1c/udphs_device.c **** {
 4882              	 .loc 6 1579 1
 4883              	 .cfi_startproc
 4884              	 
 4885              	 
 4886              	 
 4887 0000 80B4     	 push {r7}
 4888              	.LCFI188:
 4889              	 .cfi_def_cfa_offset 4
 4890              	 .cfi_offset 7,-4
 4891 0002 00AF     	 add r7,sp,#0
 4892              	.LCFI189:
 4893              	 .cfi_def_cfa_register 7
1580:.././hal/sam3u1c/udphs_device.c **** 	// Stall all packets on IN & OUT control endpoint
1581:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
 4894              	 .loc 6 1581 23
 4895 0004 054B     	 ldr r3,.L268
 4896 0006 0522     	 movs r2,#5
 4897 0008 1A70     	 strb r2,[r3]
1582:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_stall_handshake(0);
 4898              	 .loc 6 1582 2
 4899 000a 054B     	 ldr r3,.L268+4
 4900 000c 2022     	 movs r2,#32
 4901 000e C3F81421 	 str r2,[r3,#276]
1583:.././hal/sam3u1c/udphs_device.c **** }
 4902              	 .loc 6 1583 1
 4903 0012 00BF     	 nop
 4904 0014 BD46     	 mov sp,r7
 4905              	.LCFI190:
 4906              	 .cfi_def_cfa_register 13
 4907              	 
 4908 0016 80BC     	 pop {r7}
 4909              	.LCFI191:
 4910              	 .cfi_restore 7
 4911              	 .cfi_def_cfa_offset 0
 4912 0018 7047     	 bx lr
 4913              	.L269:
 4914 001a 00BF     	 .align 2
 4915              	.L268:
 4916 001c 00000000 	 .word udd_ep_control_state
 4917 0020 00400A40 	 .word 1074413568
 4918              	 .cfi_endproc
 4919              	.LFE171:
 4921              	 .section .text.udd_ctrl_send_zlp_in,"ax",%progbits
 4922              	 .align 1
 4923              	 .syntax unified
 4924              	 .thumb
 4925              	 .thumb_func
 4926              	 .fpu softvfp
 4928              	udd_ctrl_send_zlp_in:
 4929              	.LFB172:
1584:.././hal/sam3u1c/udphs_device.c **** 
1585:.././hal/sam3u1c/udphs_device.c **** 
1586:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_send_zlp_in(void)
1587:.././hal/sam3u1c/udphs_device.c **** {
 4930              	 .loc 6 1587 1
 4931              	 .cfi_startproc
 4932              	 
 4933              	 
 4934 0000 80B5     	 push {r7,lr}
 4935              	.LCFI192:
 4936              	 .cfi_def_cfa_offset 8
 4937              	 .cfi_offset 7,-8
 4938              	 .cfi_offset 14,-4
 4939 0002 82B0     	 sub sp,sp,#8
 4940              	.LCFI193:
 4941              	 .cfi_def_cfa_offset 16
 4942 0004 00AF     	 add r7,sp,#0
 4943              	.LCFI194:
 4944              	 .cfi_def_cfa_register 7
1588:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1589:.././hal/sam3u1c/udphs_device.c **** 
1590:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
 4945              	 .loc 6 1590 23
 4946 0006 134B     	 ldr r3,.L271
 4947 0008 0322     	 movs r2,#3
 4948 000a 1A70     	 strb r2,[r3]
1591:.././hal/sam3u1c/udphs_device.c **** 
1592:.././hal/sam3u1c/udphs_device.c **** 	// Validate and send empty IN packet on control endpoint
1593:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 4949              	 .loc 6 1593 10
 4950 000c 124B     	 ldr r3,.L271+4
 4951 000e 9847     	 blx r3
 4952              	.LVL93:
 4953 0010 7860     	 str r0,[r7,#4]
1594:.././hal/sam3u1c/udphs_device.c **** 	// Send ZLP on IN endpoint
1595:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_in_send(0);
 4954              	 .loc 6 1595 2
 4955 0012 124B     	 ldr r3,.L271+8
 4956 0014 4FF48062 	 mov r2,#1024
 4957 0018 C3F81821 	 str r2,[r3,#280]
1596:.././hal/sam3u1c/udphs_device.c **** 	udd_raise_tx_pkt_ready(0);
 4958              	 .loc 6 1596 2
 4959 001c 0F4B     	 ldr r3,.L271+8
 4960 001e 4FF40062 	 mov r2,#2048
 4961 0022 C3F81421 	 str r2,[r3,#276]
1597:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_in_send_interrupt(0);
 4962              	 .loc 6 1597 2
 4963 0026 0D4B     	 ldr r3,.L271+8
 4964 0028 4FF48062 	 mov r2,#1024
 4965 002c C3F80421 	 str r2,[r3,#260]
1598:.././hal/sam3u1c/udphs_device.c **** 	// To detect a protocol error, enable nak interrupt on data OUT phase
1599:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_nak_out(0);
 4966              	 .loc 6 1599 2
 4967 0030 0A4B     	 ldr r3,.L271+8
 4968 0032 4FF40042 	 mov r2,#32768
 4969 0036 C3F81821 	 str r2,[r3,#280]
1600:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_nak_out_interrupt(0);
 4970              	 .loc 6 1600 2
 4971 003a 084B     	 ldr r3,.L271+8
 4972 003c 4FF40042 	 mov r2,#32768
 4973 0040 C3F80421 	 str r2,[r3,#260]
1601:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 4974              	 .loc 6 1601 2
 4975 0044 7868     	 ldr r0,[r7,#4]
 4976 0046 064B     	 ldr r3,.L271+12
 4977 0048 9847     	 blx r3
 4978              	.LVL94:
1602:.././hal/sam3u1c/udphs_device.c **** }
 4979              	 .loc 6 1602 1
 4980 004a 00BF     	 nop
 4981 004c 0837     	 adds r7,r7,#8
 4982              	.LCFI195:
 4983              	 .cfi_def_cfa_offset 8
 4984 004e BD46     	 mov sp,r7
 4985              	.LCFI196:
 4986              	 .cfi_def_cfa_register 13
 4987              	 
 4988 0050 80BD     	 pop {r7,pc}
 4989              	.L272:
 4990 0052 00BF     	 .align 2
 4991              	.L271:
 4992 0054 00000000 	 .word udd_ep_control_state
 4993 0058 00000000 	 .word cpu_irq_save
 4994 005c 00400A40 	 .word 1074413568
 4995 0060 00000000 	 .word cpu_irq_restore
 4996              	 .cfi_endproc
 4997              	.LFE172:
 4999              	 .section .text.udd_ctrl_send_zlp_out,"ax",%progbits
 5000              	 .align 1
 5001              	 .syntax unified
 5002              	 .thumb
 5003              	 .thumb_func
 5004              	 .fpu softvfp
 5006              	udd_ctrl_send_zlp_out:
 5007              	.LFB173:
1603:.././hal/sam3u1c/udphs_device.c **** 
1604:.././hal/sam3u1c/udphs_device.c **** 
1605:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_send_zlp_out(void)
1606:.././hal/sam3u1c/udphs_device.c **** {
 5008              	 .loc 6 1606 1
 5009              	 .cfi_startproc
 5010              	 
 5011              	 
 5012 0000 80B5     	 push {r7,lr}
 5013              	.LCFI197:
 5014              	 .cfi_def_cfa_offset 8
 5015              	 .cfi_offset 7,-8
 5016              	 .cfi_offset 14,-4
 5017 0002 82B0     	 sub sp,sp,#8
 5018              	.LCFI198:
 5019              	 .cfi_def_cfa_offset 16
 5020 0004 00AF     	 add r7,sp,#0
 5021              	.LCFI199:
 5022              	 .cfi_def_cfa_register 7
1607:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1608:.././hal/sam3u1c/udphs_device.c **** 
1609:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
 5023              	 .loc 6 1609 23
 5024 0006 0B4B     	 ldr r3,.L274
 5025 0008 0422     	 movs r2,#4
 5026 000a 1A70     	 strb r2,[r3]
1610:.././hal/sam3u1c/udphs_device.c **** 	// No action is necessary to accept OUT ZLP
1611:.././hal/sam3u1c/udphs_device.c **** 	// because the buffer of control endpoint is already free
1612:.././hal/sam3u1c/udphs_device.c **** 
1613:.././hal/sam3u1c/udphs_device.c **** 	// To detect a protocol error, enable nak interrupt on data IN phase
1614:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 5027              	 .loc 6 1614 10
 5028 000c 0A4B     	 ldr r3,.L274+4
 5029 000e 9847     	 blx r3
 5030              	.LVL95:
 5031 0010 7860     	 str r0,[r7,#4]
1615:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_nak_in(0);
 5032              	 .loc 6 1615 2
 5033 0012 0A4B     	 ldr r3,.L274+8
 5034 0014 4FF48042 	 mov r2,#16384
 5035 0018 C3F81821 	 str r2,[r3,#280]
1616:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_nak_in_interrupt(0);
 5036              	 .loc 6 1616 2
 5037 001c 074B     	 ldr r3,.L274+8
 5038 001e 4FF48042 	 mov r2,#16384
 5039 0022 C3F80421 	 str r2,[r3,#260]
1617:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 5040              	 .loc 6 1617 2
 5041 0026 7868     	 ldr r0,[r7,#4]
 5042 0028 054B     	 ldr r3,.L274+12
 5043 002a 9847     	 blx r3
 5044              	.LVL96:
1618:.././hal/sam3u1c/udphs_device.c **** }
 5045              	 .loc 6 1618 1
 5046 002c 00BF     	 nop
 5047 002e 0837     	 adds r7,r7,#8
 5048              	.LCFI200:
 5049              	 .cfi_def_cfa_offset 8
 5050 0030 BD46     	 mov sp,r7
 5051              	.LCFI201:
 5052              	 .cfi_def_cfa_register 13
 5053              	 
 5054 0032 80BD     	 pop {r7,pc}
 5055              	.L275:
 5056              	 .align 2
 5057              	.L274:
 5058 0034 00000000 	 .word udd_ep_control_state
 5059 0038 00000000 	 .word cpu_irq_save
 5060 003c 00400A40 	 .word 1074413568
 5061 0040 00000000 	 .word cpu_irq_restore
 5062              	 .cfi_endproc
 5063              	.LFE173:
 5065              	 .section .text.udd_ctrl_endofrequest,"ax",%progbits
 5066              	 .align 1
 5067              	 .syntax unified
 5068              	 .thumb
 5069              	 .thumb_func
 5070              	 .fpu softvfp
 5072              	udd_ctrl_endofrequest:
 5073              	.LFB174:
1619:.././hal/sam3u1c/udphs_device.c **** 
1620:.././hal/sam3u1c/udphs_device.c **** 
1621:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_endofrequest(void)
1622:.././hal/sam3u1c/udphs_device.c **** {
 5074              	 .loc 6 1622 1
 5075              	 .cfi_startproc
 5076              	 
 5077              	 
 5078 0000 80B5     	 push {r7,lr}
 5079              	.LCFI202:
 5080              	 .cfi_def_cfa_offset 8
 5081              	 .cfi_offset 7,-8
 5082              	 .cfi_offset 14,-4
 5083 0002 00AF     	 add r7,sp,#0
 5084              	.LCFI203:
 5085              	 .cfi_def_cfa_register 7
1623:.././hal/sam3u1c/udphs_device.c **** 	// If a callback is registered then call it
1624:.././hal/sam3u1c/udphs_device.c **** 	if (udd_g_ctrlreq.callback) {
 5086              	 .loc 6 1624 19
 5087 0004 044B     	 ldr r3,.L279
 5088 0006 1B69     	 ldr r3,[r3,#16]
 5089              	 .loc 6 1624 5
 5090 0008 002B     	 cmp r3,#0
 5091 000a 02D0     	 beq .L278
1625:.././hal/sam3u1c/udphs_device.c **** 		udd_g_ctrlreq.callback();
 5092              	 .loc 6 1625 16
 5093 000c 024B     	 ldr r3,.L279
 5094 000e 1B69     	 ldr r3,[r3,#16]
 5095              	 .loc 6 1625 3
 5096 0010 9847     	 blx r3
 5097              	.LVL97:
 5098              	.L278:
1626:.././hal/sam3u1c/udphs_device.c **** 	}
1627:.././hal/sam3u1c/udphs_device.c **** }
 5099              	 .loc 6 1627 1
 5100 0012 00BF     	 nop
 5101 0014 80BD     	 pop {r7,pc}
 5102              	.L280:
 5103 0016 00BF     	 .align 2
 5104              	.L279:
 5105 0018 00000000 	 .word udd_g_ctrlreq
 5106              	 .cfi_endproc
 5107              	.LFE174:
 5109              	 .section .text.udd_ctrl_interrupt,"ax",%progbits
 5110              	 .align 1
 5111              	 .syntax unified
 5112              	 .thumb
 5113              	 .thumb_func
 5114              	 .fpu softvfp
 5116              	udd_ctrl_interrupt:
 5117              	.LFB175:
1628:.././hal/sam3u1c/udphs_device.c **** 
1629:.././hal/sam3u1c/udphs_device.c **** 
1630:.././hal/sam3u1c/udphs_device.c **** static bool udd_ctrl_interrupt(void)
1631:.././hal/sam3u1c/udphs_device.c **** {
 5118              	 .loc 6 1631 1
 5119              	 .cfi_startproc
 5120              	 
 5121              	 
 5122 0000 80B5     	 push {r7,lr}
 5123              	.LCFI204:
 5124              	 .cfi_def_cfa_offset 8
 5125              	 .cfi_offset 7,-8
 5126              	 .cfi_offset 14,-4
 5127 0002 82B0     	 sub sp,sp,#8
 5128              	.LCFI205:
 5129              	 .cfi_def_cfa_offset 16
 5130 0004 00AF     	 add r7,sp,#0
 5131              	.LCFI206:
 5132              	 .cfi_def_cfa_register 7
1632:.././hal/sam3u1c/udphs_device.c **** 	uint32_t status = udd_get_endpoint_status(0);
 5133              	 .loc 6 1632 20
 5134 0006 314B     	 ldr r3,.L290
 5135              	 .loc 6 1632 11
 5136 0008 D3F81C31 	 ldr r3,[r3,#284]
 5137 000c 7B60     	 str r3,[r7,#4]
1633:.././hal/sam3u1c/udphs_device.c **** 
1634:.././hal/sam3u1c/udphs_device.c **** 	if (!Is_udd_endpoint_interrupt(0)) {
 5138              	 .loc 6 1634 7
 5139 000e 2F4B     	 ldr r3,.L290
 5140 0010 5B69     	 ldr r3,[r3,#20]
 5141 0012 03F48073 	 and r3,r3,#256
 5142              	 .loc 6 1634 5
 5143 0016 002B     	 cmp r3,#0
 5144 0018 01D1     	 bne .L282
1635:.././hal/sam3u1c/udphs_device.c **** 		return false; // No interrupt events on control endpoint
 5145              	 .loc 6 1635 10
 5146 001a 0023     	 movs r3,#0
 5147 001c 52E0     	 b .L283
 5148              	.L282:
1636:.././hal/sam3u1c/udphs_device.c **** 	}
1637:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("0: ");
1638:.././hal/sam3u1c/udphs_device.c **** 
1639:.././hal/sam3u1c/udphs_device.c **** 	// By default disable overflow and underflow interrupt
1640:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_nak_in_interrupt(0);
 5149              	 .loc 6 1640 2
 5150 001e 2B4B     	 ldr r3,.L290
 5151 0020 4FF48042 	 mov r2,#16384
 5152 0024 C3F80821 	 str r2,[r3,#264]
1641:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_nak_out_interrupt(0);
 5153              	 .loc 6 1641 2
 5154 0028 284B     	 ldr r3,.L290
 5155 002a 4FF40042 	 mov r2,#32768
 5156 002e C3F80821 	 str r2,[r3,#264]
1642:.././hal/sam3u1c/udphs_device.c **** 
1643:.././hal/sam3u1c/udphs_device.c **** 	// Search event on control endpoint
1644:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_status_setup_received(status)) {
 5157              	 .loc 6 1644 6
 5158 0032 7B68     	 ldr r3,[r7,#4]
 5159 0034 03F48053 	 and r3,r3,#4096
 5160              	 .loc 6 1644 5
 5161 0038 002B     	 cmp r3,#0
 5162 003a 03D0     	 beq .L284
1645:.././hal/sam3u1c/udphs_device.c **** 		// SETUP packet received
1646:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("Stp ");
1647:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_setup_received();
 5163              	 .loc 6 1647 3
 5164 003c 244B     	 ldr r3,.L290+4
 5165 003e 9847     	 blx r3
 5166              	.LVL98:
1648:.././hal/sam3u1c/udphs_device.c **** 		return true;
 5167              	 .loc 6 1648 10
 5168 0040 0123     	 movs r3,#1
 5169 0042 3FE0     	 b .L283
 5170              	.L284:
1649:.././hal/sam3u1c/udphs_device.c **** 	}
1650:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_status_in_sent(status)
 5171              	 .loc 6 1650 6
 5172 0044 7B68     	 ldr r3,[r7,#4]
 5173 0046 03F48063 	 and r3,r3,#1024
 5174              	 .loc 6 1650 5
 5175 004a 002B     	 cmp r3,#0
 5176 004c 0AD0     	 beq .L285
1651:.././hal/sam3u1c/udphs_device.c **** 			&& Is_udd_in_send_interrupt_enabled(0)) {
 5177              	 .loc 6 1651 7
 5178 004e 1F4B     	 ldr r3,.L290
 5179 0050 D3F80C31 	 ldr r3,[r3,#268]
 5180 0054 03F48063 	 and r3,r3,#1024
 5181              	 .loc 6 1651 4
 5182 0058 002B     	 cmp r3,#0
 5183 005a 03D0     	 beq .L285
1652:.././hal/sam3u1c/udphs_device.c **** 		// IN packet sent
1653:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("In ");
1654:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_in_sent();
 5184              	 .loc 6 1654 3
 5185 005c 1D4B     	 ldr r3,.L290+8
 5186 005e 9847     	 blx r3
 5187              	.LVL99:
1655:.././hal/sam3u1c/udphs_device.c **** 		return true;
 5188              	 .loc 6 1655 10
 5189 0060 0123     	 movs r3,#1
 5190 0062 2FE0     	 b .L283
 5191              	.L285:
1656:.././hal/sam3u1c/udphs_device.c **** 	}
1657:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_status_out_received(status)) {
 5192              	 .loc 6 1657 6
 5193 0064 7B68     	 ldr r3,[r7,#4]
 5194 0066 03F40073 	 and r3,r3,#512
 5195              	 .loc 6 1657 5
 5196 006a 002B     	 cmp r3,#0
 5197 006c 03D0     	 beq .L286
1658:.././hal/sam3u1c/udphs_device.c **** 		// OUT packet received
1659:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("Out ");
1660:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_out_received();
 5198              	 .loc 6 1660 3
 5199 006e 1A4B     	 ldr r3,.L290+12
 5200 0070 9847     	 blx r3
 5201              	.LVL100:
1661:.././hal/sam3u1c/udphs_device.c **** 		return true;
 5202              	 .loc 6 1661 10
 5203 0072 0123     	 movs r3,#1
 5204 0074 26E0     	 b .L283
 5205              	.L286:
1662:.././hal/sam3u1c/udphs_device.c **** 	}
1663:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_status_stall(status)) {
 5206              	 .loc 6 1663 6
 5207 0076 7B68     	 ldr r3,[r7,#4]
 5208 0078 03F40053 	 and r3,r3,#8192
 5209              	 .loc 6 1663 5
 5210 007c 002B     	 cmp r3,#0
 5211 007e 04D0     	 beq .L287
1664:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("Stall\n\r");
1665:.././hal/sam3u1c/udphs_device.c **** 		// STALLed
1666:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_stall(0);
 5212              	 .loc 6 1666 3
 5213 0080 124B     	 ldr r3,.L290
 5214 0082 4FF40052 	 mov r2,#8192
 5215 0086 C3F81821 	 str r2,[r3,#280]
 5216              	.L287:
1667:.././hal/sam3u1c/udphs_device.c **** 	}
1668:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_status_nak_out(status)) {
 5217              	 .loc 6 1668 6
 5218 008a 7B68     	 ldr r3,[r7,#4]
 5219 008c 03F40043 	 and r3,r3,#32768
 5220              	 .loc 6 1668 5
 5221 0090 002B     	 cmp r3,#0
 5222 0092 08D0     	 beq .L288
1669:.././hal/sam3u1c/udphs_device.c **** 		// Overflow on OUT packet
1670:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("NakO ");
1671:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_nak_out(0);
 5223              	 .loc 6 1671 3
 5224 0094 0D4B     	 ldr r3,.L290
 5225 0096 4FF40042 	 mov r2,#32768
 5226 009a C3F81821 	 str r2,[r3,#280]
1672:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_overflow();
 5227              	 .loc 6 1672 3
 5228 009e 0F4B     	 ldr r3,.L290+16
 5229 00a0 9847     	 blx r3
 5230              	.LVL101:
1673:.././hal/sam3u1c/udphs_device.c **** 		return true;
 5231              	 .loc 6 1673 10
 5232 00a2 0123     	 movs r3,#1
 5233 00a4 0EE0     	 b .L283
 5234              	.L288:
1674:.././hal/sam3u1c/udphs_device.c **** 	}
1675:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_status_nak_in(status)) {
 5235              	 .loc 6 1675 6
 5236 00a6 7B68     	 ldr r3,[r7,#4]
 5237 00a8 03F48043 	 and r3,r3,#16384
 5238              	 .loc 6 1675 5
 5239 00ac 002B     	 cmp r3,#0
 5240 00ae 08D0     	 beq .L289
1676:.././hal/sam3u1c/udphs_device.c **** 		// Underflow on IN packet
1677:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("NakI ");
1678:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_nak_in(0);
 5241              	 .loc 6 1678 3
 5242 00b0 064B     	 ldr r3,.L290
 5243 00b2 4FF48042 	 mov r2,#16384
 5244 00b6 C3F81821 	 str r2,[r3,#280]
1679:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_underflow();
 5245              	 .loc 6 1679 3
 5246 00ba 094B     	 ldr r3,.L290+20
 5247 00bc 9847     	 blx r3
 5248              	.LVL102:
1680:.././hal/sam3u1c/udphs_device.c **** 		return true;
 5249              	 .loc 6 1680 10
 5250 00be 0123     	 movs r3,#1
 5251 00c0 00E0     	 b .L283
 5252              	.L289:
1681:.././hal/sam3u1c/udphs_device.c **** 	}
1682:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("UnH ");
1683:.././hal/sam3u1c/udphs_device.c **** 	return false;
 5253              	 .loc 6 1683 9
 5254 00c2 0023     	 movs r3,#0
 5255              	.L283:
1684:.././hal/sam3u1c/udphs_device.c **** }
 5256              	 .loc 6 1684 1
 5257 00c4 1846     	 mov r0,r3
 5258 00c6 0837     	 adds r7,r7,#8
 5259              	.LCFI207:
 5260              	 .cfi_def_cfa_offset 8
 5261 00c8 BD46     	 mov sp,r7
 5262              	.LCFI208:
 5263              	 .cfi_def_cfa_register 13
 5264              	 
 5265 00ca 80BD     	 pop {r7,pc}
 5266              	.L291:
 5267              	 .align 2
 5268              	.L290:
 5269 00cc 00400A40 	 .word 1074413568
 5270 00d0 00000000 	 .word udd_ctrl_setup_received
 5271 00d4 00000000 	 .word udd_ctrl_in_sent
 5272 00d8 00000000 	 .word udd_ctrl_out_received
 5273 00dc 00000000 	 .word udd_ctrl_overflow
 5274 00e0 00000000 	 .word udd_ctrl_underflow
 5275              	 .cfi_endproc
 5276              	.LFE175:
 5278              	 .section .text.udd_ep_job_table_reset,"ax",%progbits
 5279              	 .align 1
 5280              	 .syntax unified
 5281              	 .thumb
 5282              	 .thumb_func
 5283              	 .fpu softvfp
 5285              	udd_ep_job_table_reset:
 5286              	.LFB176:
1685:.././hal/sam3u1c/udphs_device.c **** 
1686:.././hal/sam3u1c/udphs_device.c **** 
1687:.././hal/sam3u1c/udphs_device.c **** //--------------------------------------------------------
1688:.././hal/sam3u1c/udphs_device.c **** //--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS
1689:.././hal/sam3u1c/udphs_device.c **** 
1690:.././hal/sam3u1c/udphs_device.c **** #if (0!=USB_DEVICE_MAX_EP)
1691:.././hal/sam3u1c/udphs_device.c **** 
1692:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_job_table_reset(void)
1693:.././hal/sam3u1c/udphs_device.c **** {
 5287              	 .loc 6 1693 1
 5288              	 .cfi_startproc
 5289              	 
 5290              	 
 5291              	 
 5292 0000 80B4     	 push {r7}
 5293              	.LCFI209:
 5294              	 .cfi_def_cfa_offset 4
 5295              	 .cfi_offset 7,-4
 5296 0002 83B0     	 sub sp,sp,#12
 5297              	.LCFI210:
 5298              	 .cfi_def_cfa_offset 16
 5299 0004 00AF     	 add r7,sp,#0
 5300              	.LCFI211:
 5301              	 .cfi_def_cfa_register 7
1694:.././hal/sam3u1c/udphs_device.c **** 	uint8_t i;
1695:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
 5302              	 .loc 6 1695 9
 5303 0006 0023     	 movs r3,#0
 5304 0008 FB71     	 strb r3,[r7,#7]
 5305              	 .loc 6 1695 2
 5306 000a 1CE0     	 b .L293
 5307              	.L294:
1696:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job[i].busy = false;
 5308              	 .loc 6 1696 16 discriminator 3
 5309 000c FA79     	 ldrb r2,[r7,#7]
 5310              	 .loc 6 1696 22 discriminator 3
 5311 000e 1249     	 ldr r1,.L295
 5312 0010 1346     	 mov r3,r2
 5313 0012 5B00     	 lsls r3,r3,#1
 5314 0014 1344     	 add r3,r3,r2
 5315 0016 DB00     	 lsls r3,r3,#3
 5316 0018 0B44     	 add r3,r3,r1
 5317 001a 03F11002 	 add r2,r3,#16
 5318 001e 1379     	 ldrb r3,[r2,#4]
 5319 0020 6FF30003 	 bfc r3,#0,#1
 5320 0024 1371     	 strb r3,[r2,#4]
1697:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job[i].stall_requested = false;
 5321              	 .loc 6 1697 16 discriminator 3
 5322 0026 FA79     	 ldrb r2,[r7,#7]
 5323              	 .loc 6 1697 33 discriminator 3
 5324 0028 0B49     	 ldr r1,.L295
 5325 002a 1346     	 mov r3,r2
 5326 002c 5B00     	 lsls r3,r3,#1
 5327 002e 1344     	 add r3,r3,r2
 5328 0030 DB00     	 lsls r3,r3,#3
 5329 0032 0B44     	 add r3,r3,r1
 5330 0034 03F11002 	 add r2,r3,#16
 5331 0038 1379     	 ldrb r3,[r2,#4]
 5332 003a 6FF38203 	 bfc r3,#2,#1
 5333 003e 1371     	 strb r3,[r2,#4]
1695:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job[i].busy = false;
 5334              	 .loc 6 1695 38 discriminator 3
 5335 0040 FB79     	 ldrb r3,[r7,#7]
 5336 0042 0133     	 adds r3,r3,#1
 5337 0044 FB71     	 strb r3,[r7,#7]
 5338              	.L293:
1695:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job[i].busy = false;
 5339              	 .loc 6 1695 2 discriminator 1
 5340 0046 FB79     	 ldrb r3,[r7,#7]
 5341 0048 012B     	 cmp r3,#1
 5342 004a DFD9     	 bls .L294
1698:.././hal/sam3u1c/udphs_device.c **** 	}
1699:.././hal/sam3u1c/udphs_device.c **** }
 5343              	 .loc 6 1699 1
 5344 004c 00BF     	 nop
 5345 004e 0C37     	 adds r7,r7,#12
 5346              	.LCFI212:
 5347              	 .cfi_def_cfa_offset 4
 5348 0050 BD46     	 mov sp,r7
 5349              	.LCFI213:
 5350              	 .cfi_def_cfa_register 13
 5351              	 
 5352 0052 80BC     	 pop {r7}
 5353              	.LCFI214:
 5354              	 .cfi_restore 7
 5355              	 .cfi_def_cfa_offset 0
 5356 0054 7047     	 bx lr
 5357              	.L296:
 5358 0056 00BF     	 .align 2
 5359              	.L295:
 5360 0058 00000000 	 .word udd_ep_job
 5361              	 .cfi_endproc
 5362              	.LFE176:
 5364              	 .section .text.udd_ep_job_table_kill,"ax",%progbits
 5365              	 .align 1
 5366              	 .syntax unified
 5367              	 .thumb
 5368              	 .thumb_func
 5369              	 .fpu softvfp
 5371              	udd_ep_job_table_kill:
 5372              	.LFB177:
1700:.././hal/sam3u1c/udphs_device.c **** 
1701:.././hal/sam3u1c/udphs_device.c **** 
1702:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_job_table_kill(void)
1703:.././hal/sam3u1c/udphs_device.c **** {
 5373              	 .loc 6 1703 1
 5374              	 .cfi_startproc
 5375              	 
 5376              	 
 5377 0000 80B5     	 push {r7,lr}
 5378              	.LCFI215:
 5379              	 .cfi_def_cfa_offset 8
 5380              	 .cfi_offset 7,-8
 5381              	 .cfi_offset 14,-4
 5382 0002 82B0     	 sub sp,sp,#8
 5383              	.LCFI216:
 5384              	 .cfi_def_cfa_offset 16
 5385 0004 00AF     	 add r7,sp,#0
 5386              	.LCFI217:
 5387              	 .cfi_def_cfa_register 7
1704:.././hal/sam3u1c/udphs_device.c **** 	uint8_t i;
1705:.././hal/sam3u1c/udphs_device.c **** 
1706:.././hal/sam3u1c/udphs_device.c **** 	// For each endpoint, kill job
1707:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
 5388              	 .loc 6 1707 9
 5389 0006 0023     	 movs r3,#0
 5390 0008 FB71     	 strb r3,[r7,#7]
 5391              	 .loc 6 1707 2
 5392 000a 10E0     	 b .L298
 5393              	.L299:
1708:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
 5394              	 .loc 6 1708 32 discriminator 3
 5395 000c FA79     	 ldrb r2,[r7,#7]
 5396              	 .loc 6 1708 3 discriminator 3
 5397 000e 1346     	 mov r3,r2
 5398 0010 5B00     	 lsls r3,r3,#1
 5399 0012 1344     	 add r3,r3,r2
 5400 0014 DB00     	 lsls r3,r3,#3
 5401 0016 094A     	 ldr r2,.L300
 5402 0018 9818     	 adds r0,r3,r2
 5403 001a FB79     	 ldrb r3,[r7,#7]
 5404 001c 0133     	 adds r3,r3,#1
 5405 001e DBB2     	 uxtb r3,r3
 5406 0020 1A46     	 mov r2,r3
 5407 0022 0121     	 movs r1,#1
 5408 0024 064B     	 ldr r3,.L300+4
 5409 0026 9847     	 blx r3
 5410              	.LVL103:
1707:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
 5411              	 .loc 6 1707 38 discriminator 3
 5412 0028 FB79     	 ldrb r3,[r7,#7]
 5413 002a 0133     	 adds r3,r3,#1
 5414 002c FB71     	 strb r3,[r7,#7]
 5415              	.L298:
1707:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
 5416              	 .loc 6 1707 2 discriminator 1
 5417 002e FB79     	 ldrb r3,[r7,#7]
 5418 0030 012B     	 cmp r3,#1
 5419 0032 EBD9     	 bls .L299
1709:.././hal/sam3u1c/udphs_device.c **** 	}
1710:.././hal/sam3u1c/udphs_device.c **** }
 5420              	 .loc 6 1710 1
 5421 0034 00BF     	 nop
 5422 0036 0837     	 adds r7,r7,#8
 5423              	.LCFI218:
 5424              	 .cfi_def_cfa_offset 8
 5425 0038 BD46     	 mov sp,r7
 5426              	.LCFI219:
 5427              	 .cfi_def_cfa_register 13
 5428              	 
 5429 003a 80BD     	 pop {r7,pc}
 5430              	.L301:
 5431              	 .align 2
 5432              	.L300:
 5433 003c 00000000 	 .word udd_ep_job
 5434 0040 00000000 	 .word udd_ep_finish_job
 5435              	 .cfi_endproc
 5436              	.LFE177:
 5438              	 .section .text.udd_ep_abort_job,"ax",%progbits
 5439              	 .align 1
 5440              	 .syntax unified
 5441              	 .thumb
 5442              	 .thumb_func
 5443              	 .fpu softvfp
 5445              	udd_ep_abort_job:
 5446              	.LFB178:
1711:.././hal/sam3u1c/udphs_device.c **** 
1712:.././hal/sam3u1c/udphs_device.c **** 
1713:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_abort_job(udd_ep_id_t ep)
1714:.././hal/sam3u1c/udphs_device.c **** {
 5447              	 .loc 6 1714 1
 5448              	 .cfi_startproc
 5449              	 
 5450              	 
 5451 0000 80B5     	 push {r7,lr}
 5452              	.LCFI220:
 5453              	 .cfi_def_cfa_offset 8
 5454              	 .cfi_offset 7,-8
 5455              	 .cfi_offset 14,-4
 5456 0002 82B0     	 sub sp,sp,#8
 5457              	.LCFI221:
 5458              	 .cfi_def_cfa_offset 16
 5459 0004 00AF     	 add r7,sp,#0
 5460              	.LCFI222:
 5461              	 .cfi_def_cfa_register 7
 5462 0006 0346     	 mov r3,r0
 5463 0008 FB71     	 strb r3,[r7,#7]
1715:.././hal/sam3u1c/udphs_device.c **** 	ep &= USB_EP_ADDR_MASK;
 5464              	 .loc 6 1715 5
 5465 000a FB79     	 ldrb r3,[r7,#7]
 5466 000c 03F00F03 	 and r3,r3,#15
 5467 0010 FB71     	 strb r3,[r7,#7]
1716:.././hal/sam3u1c/udphs_device.c **** 
1717:.././hal/sam3u1c/udphs_device.c **** 	// Abort job on endpoint
1718:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
 5468              	 .loc 6 1718 35
 5469 0012 FB79     	 ldrb r3,[r7,#7]
 5470 0014 5A1E     	 subs r2,r3,#1
 5471              	 .loc 6 1718 2
 5472 0016 1346     	 mov r3,r2
 5473 0018 5B00     	 lsls r3,r3,#1
 5474 001a 1344     	 add r3,r3,r2
 5475 001c DB00     	 lsls r3,r3,#3
 5476 001e 054A     	 ldr r2,.L303
 5477 0020 1344     	 add r3,r3,r2
 5478 0022 FA79     	 ldrb r2,[r7,#7]
 5479 0024 0121     	 movs r1,#1
 5480 0026 1846     	 mov r0,r3
 5481 0028 034B     	 ldr r3,.L303+4
 5482 002a 9847     	 blx r3
 5483              	.LVL104:
1719:.././hal/sam3u1c/udphs_device.c **** }
 5484              	 .loc 6 1719 1
 5485 002c 00BF     	 nop
 5486 002e 0837     	 adds r7,r7,#8
 5487              	.LCFI223:
 5488              	 .cfi_def_cfa_offset 8
 5489 0030 BD46     	 mov sp,r7
 5490              	.LCFI224:
 5491              	 .cfi_def_cfa_register 13
 5492              	 
 5493 0032 80BD     	 pop {r7,pc}
 5494              	.L304:
 5495              	 .align 2
 5496              	.L303:
 5497 0034 00000000 	 .word udd_ep_job
 5498 0038 00000000 	 .word udd_ep_finish_job
 5499              	 .cfi_endproc
 5500              	.LFE178:
 5502              	 .section .text.udd_ep_finish_job,"ax",%progbits
 5503              	 .align 1
 5504              	 .syntax unified
 5505              	 .thumb
 5506              	 .thumb_func
 5507              	 .fpu softvfp
 5509              	udd_ep_finish_job:
 5510              	.LFB179:
1720:.././hal/sam3u1c/udphs_device.c **** 
1721:.././hal/sam3u1c/udphs_device.c **** 
1722:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
1723:.././hal/sam3u1c/udphs_device.c **** {
 5511              	 .loc 6 1723 1
 5512              	 .cfi_startproc
 5513              	 
 5514              	 
 5515 0000 80B5     	 push {r7,lr}
 5516              	.LCFI225:
 5517              	 .cfi_def_cfa_offset 8
 5518              	 .cfi_offset 7,-8
 5519              	 .cfi_offset 14,-4
 5520 0002 82B0     	 sub sp,sp,#8
 5521              	.LCFI226:
 5522              	 .cfi_def_cfa_offset 16
 5523 0004 00AF     	 add r7,sp,#0
 5524              	.LCFI227:
 5525              	 .cfi_def_cfa_register 7
 5526 0006 7860     	 str r0,[r7,#4]
 5527 0008 0B46     	 mov r3,r1
 5528 000a FB70     	 strb r3,[r7,#3]
 5529 000c 1346     	 mov r3,r2
 5530 000e BB70     	 strb r3,[r7,#2]
1724:.././hal/sam3u1c/udphs_device.c **** 	if (ptr_job->busy == false) {
 5531              	 .loc 6 1724 20
 5532 0010 7B68     	 ldr r3,[r7,#4]
 5533 0012 1B7D     	 ldrb r3,[r3,#20]
 5534 0014 03F00103 	 and r3,r3,#1
 5535 0018 DBB2     	 uxtb r3,r3
 5536              	 .loc 6 1724 5
 5537 001a 002B     	 cmp r3,#0
 5538 001c 1FD0     	 beq .L310
1725:.././hal/sam3u1c/udphs_device.c **** 		return; // No on-going job
1726:.././hal/sam3u1c/udphs_device.c **** 	}
1727:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->busy = false;
 5539              	 .loc 6 1727 16
 5540 001e 7A68     	 ldr r2,[r7,#4]
 5541 0020 137D     	 ldrb r3,[r2,#20]
 5542 0022 6FF30003 	 bfc r3,#0,#1
 5543 0026 1375     	 strb r3,[r2,#20]
1728:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("JobE%d ", b_abort);
1729:.././hal/sam3u1c/udphs_device.c **** 	if (NULL == ptr_job->call_trans) {
 5544              	 .loc 6 1729 21
 5545 0028 7B68     	 ldr r3,[r7,#4]
 5546 002a 1B68     	 ldr r3,[r3]
 5547              	 .loc 6 1729 5
 5548 002c 002B     	 cmp r3,#0
 5549 002e 18D0     	 beq .L311
1730:.././hal/sam3u1c/udphs_device.c **** 		return; // No callback linked to job
1731:.././hal/sam3u1c/udphs_device.c **** 	}
1732:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_in(ep_num)) {
 5550              	 .loc 6 1732 6
 5551 0030 0E4A     	 ldr r2,.L312
 5552 0032 BB78     	 ldrb r3,[r7,#2]
 5553 0034 0833     	 adds r3,r3,#8
 5554 0036 5B01     	 lsls r3,r3,#5
 5555 0038 1344     	 add r3,r3,r2
 5556 003a 1B68     	 ldr r3,[r3]
 5557 003c 03F00803 	 and r3,r3,#8
 5558              	 .loc 6 1732 5
 5559 0040 002B     	 cmp r3,#0
 5560 0042 03D0     	 beq .L309
1733:.././hal/sam3u1c/udphs_device.c **** 		ep_num |= USB_EP_DIR_IN;
 5561              	 .loc 6 1733 10
 5562 0044 BB78     	 ldrb r3,[r7,#2]
 5563 0046 63F07F03 	 orn r3,r3,#127
 5564 004a BB70     	 strb r3,[r7,#2]
 5565              	.L309:
1734:.././hal/sam3u1c/udphs_device.c **** 	}
1735:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
 5566              	 .loc 6 1735 9
 5567 004c 7B68     	 ldr r3,[r7,#4]
 5568 004e 1B68     	 ldr r3,[r3]
 5569              	 .loc 6 1735 2
 5570 0050 FA78     	 ldrb r2,[r7,#3]
 5571 0052 1046     	 mov r0,r2
 5572 0054 7A68     	 ldr r2,[r7,#4]
 5573 0056 9168     	 ldr r1,[r2,#8]
 5574 0058 BA78     	 ldrb r2,[r7,#2]
 5575 005a 9847     	 blx r3
 5576              	.LVL105:
 5577 005c 02E0     	 b .L305
 5578              	.L310:
1725:.././hal/sam3u1c/udphs_device.c **** 	}
 5579              	 .loc 6 1725 3
 5580 005e 00BF     	 nop
 5581 0060 00E0     	 b .L305
 5582              	.L311:
1730:.././hal/sam3u1c/udphs_device.c **** 	}
 5583              	 .loc 6 1730 3
 5584 0062 00BF     	 nop
 5585              	.L305:
1736:.././hal/sam3u1c/udphs_device.c **** 			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
1737:.././hal/sam3u1c/udphs_device.c **** }
 5586              	 .loc 6 1737 1
 5587 0064 0837     	 adds r7,r7,#8
 5588              	.LCFI228:
 5589              	 .cfi_def_cfa_offset 8
 5590 0066 BD46     	 mov sp,r7
 5591              	.LCFI229:
 5592              	 .cfi_def_cfa_register 13
 5593              	 
 5594 0068 80BD     	 pop {r7,pc}
 5595              	.L313:
 5596 006a 00BF     	 .align 2
 5597              	.L312:
 5598 006c 00400A40 	 .word 1074413568
 5599              	 .cfi_endproc
 5600              	.LFE179:
 5602              	 .section .text.udd_ep_trans_done,"ax",%progbits
 5603              	 .align 1
 5604              	 .syntax unified
 5605              	 .thumb
 5606              	 .thumb_func
 5607              	 .fpu softvfp
 5609              	udd_ep_trans_done:
 5610              	.LFB180:
1738:.././hal/sam3u1c/udphs_device.c **** 
1739:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_trans_done(udd_ep_id_t ep)
1740:.././hal/sam3u1c/udphs_device.c **** {
 5611              	 .loc 6 1740 1
 5612              	 .cfi_startproc
 5613              	 
 5614              	 
 5615 0000 80B5     	 push {r7,lr}
 5616              	.LCFI230:
 5617              	 .cfi_def_cfa_offset 8
 5618              	 .cfi_offset 7,-8
 5619              	 .cfi_offset 14,-4
 5620 0002 86B0     	 sub sp,sp,#24
 5621              	.LCFI231:
 5622              	 .cfi_def_cfa_offset 32
 5623 0004 00AF     	 add r7,sp,#0
 5624              	.LCFI232:
 5625              	 .cfi_def_cfa_register 7
 5626 0006 0346     	 mov r3,r0
 5627 0008 FB71     	 strb r3,[r7,#7]
1741:.././hal/sam3u1c/udphs_device.c **** 	uint32_t udd_dma_ctrl = 0;
 5628              	 .loc 6 1741 11
 5629 000a 0023     	 movs r3,#0
 5630 000c 7B61     	 str r3,[r7,#20]
1742:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_t *ptr_job;
1743:.././hal/sam3u1c/udphs_device.c **** 	iram_size_t next_trans;
1744:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1745:.././hal/sam3u1c/udphs_device.c **** 
1746:.././hal/sam3u1c/udphs_device.c **** 	// Get job corresponding at endpoint
1747:.././hal/sam3u1c/udphs_device.c **** 	ptr_job = &udd_ep_job[ep - 1];
 5631              	 .loc 6 1747 27
 5632 000e FB79     	 ldrb r3,[r7,#7]
 5633 0010 5A1E     	 subs r2,r3,#1
 5634              	 .loc 6 1747 10
 5635 0012 1346     	 mov r3,r2
 5636 0014 5B00     	 lsls r3,r3,#1
 5637 0016 1344     	 add r3,r3,r2
 5638 0018 DB00     	 lsls r3,r3,#3
 5639 001a 6D4A     	 ldr r2,.L327
 5640 001c 1344     	 add r3,r3,r2
 5641 001e FB60     	 str r3,[r7,#12]
1748:.././hal/sam3u1c/udphs_device.c **** 
1749:.././hal/sam3u1c/udphs_device.c **** 	if (!ptr_job->busy) {
 5642              	 .loc 6 1749 6
 5643 0020 FB68     	 ldr r3,[r7,#12]
 5644 0022 1B7D     	 ldrb r3,[r3,#20]
 5645 0024 03F00103 	 and r3,r3,#1
 5646 0028 DBB2     	 uxtb r3,r3
 5647              	 .loc 6 1749 5
 5648 002a 002B     	 cmp r3,#0
 5649 002c 00F0CC80 	 beq .L326
1750:.././hal/sam3u1c/udphs_device.c **** 		return; // No job is running, then ignore it (system error)
1751:.././hal/sam3u1c/udphs_device.c **** 	}
1752:.././hal/sam3u1c/udphs_device.c **** 
1753:.././hal/sam3u1c/udphs_device.c **** 	if (ptr_job->buf_cnt != ptr_job->buf_size) {
 5650              	 .loc 6 1753 13
 5651 0030 FB68     	 ldr r3,[r7,#12]
 5652 0032 DA68     	 ldr r2,[r3,#12]
 5653              	 .loc 6 1753 33
 5654 0034 FB68     	 ldr r3,[r7,#12]
 5655 0036 9B68     	 ldr r3,[r3,#8]
 5656              	 .loc 6 1753 5
 5657 0038 9A42     	 cmp r2,r3
 5658 003a 00F09980 	 beq .L317
1754:.././hal/sam3u1c/udphs_device.c **** 		// Need to send or receive other data
1755:.././hal/sam3u1c/udphs_device.c **** 		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
 5659              	 .loc 6 1755 23
 5660 003e FB68     	 ldr r3,[r7,#12]
 5661 0040 9A68     	 ldr r2,[r3,#8]
 5662              	 .loc 6 1755 43
 5663 0042 FB68     	 ldr r3,[r7,#12]
 5664 0044 DB68     	 ldr r3,[r3,#12]
 5665              	 .loc 6 1755 14
 5666 0046 D31A     	 subs r3,r2,r3
 5667 0048 3B61     	 str r3,[r7,#16]
1756:.././hal/sam3u1c/udphs_device.c **** 
1757:.././hal/sam3u1c/udphs_device.c **** 		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
 5668              	 .loc 6 1757 6
 5669 004a 3B69     	 ldr r3,[r7,#16]
 5670 004c B3F5803F 	 cmp r3,#65536
 5671 0050 05D9     	 bls .L318
1758:.././hal/sam3u1c/udphs_device.c **** 			// The USB hardware support a maximum
1759:.././hal/sam3u1c/udphs_device.c **** 			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
1760:.././hal/sam3u1c/udphs_device.c **** 			next_trans = UDD_ENDPOINT_MAX_TRANS;
 5672              	 .loc 6 1760 15
 5673 0052 4FF48033 	 mov r3,#65536
 5674 0056 3B61     	 str r3,[r7,#16]
1761:.././hal/sam3u1c/udphs_device.c **** 
1762:.././hal/sam3u1c/udphs_device.c **** 			// Set 0 to transfer the maximum
1763:.././hal/sam3u1c/udphs_device.c **** 			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
 5675              	 .loc 6 1763 17
 5676 0058 0023     	 movs r3,#0
 5677 005a 7B61     	 str r3,[r7,#20]
 5678 005c 02E0     	 b .L319
 5679              	.L318:
1764:.././hal/sam3u1c/udphs_device.c **** 		} else {
1765:.././hal/sam3u1c/udphs_device.c **** 			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
 5680              	 .loc 6 1765 17
 5681 005e 3B69     	 ldr r3,[r7,#16]
 5682 0060 1B04     	 lsls r3,r3,#16
 5683 0062 7B61     	 str r3,[r7,#20]
 5684              	.L319:
1766:.././hal/sam3u1c/udphs_device.c **** 		}
1767:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_endpoint_in(ep)) {
 5685              	 .loc 6 1767 7
 5686 0064 5B4A     	 ldr r2,.L327+4
 5687 0066 FB79     	 ldrb r3,[r7,#7]
 5688 0068 0833     	 adds r3,r3,#8
 5689 006a 5B01     	 lsls r3,r3,#5
 5690 006c 1344     	 add r3,r3,r2
 5691 006e 1B68     	 ldr r3,[r3]
 5692 0070 03F00803 	 and r3,r3,#8
 5693              	 .loc 6 1767 6
 5694 0074 002B     	 cmp r3,#0
 5695 0076 1DD0     	 beq .L320
1768:.././hal/sam3u1c/udphs_device.c **** 			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
 5696              	 .loc 6 1768 27
 5697 0078 564A     	 ldr r2,.L327+4
 5698 007a FB79     	 ldrb r3,[r7,#7]
 5699 007c 0833     	 adds r3,r3,#8
 5700 007e 5B01     	 lsls r3,r3,#5
 5701 0080 1344     	 add r3,r3,r2
 5702 0082 1B68     	 ldr r3,[r3]
 5703 0084 03F00703 	 and r3,r3,#7
 5704 0088 0822     	 movs r2,#8
 5705 008a 02FA03F3 	 lsl r3,r2,r3
 5706 008e 1A46     	 mov r2,r3
 5707              	 .loc 6 1768 25
 5708 0090 3B69     	 ldr r3,[r7,#16]
 5709 0092 B3FBF2F1 	 udiv r1,r3,r2
 5710 0096 02FB01F2 	 mul r2,r2,r1
 5711 009a 9B1A     	 subs r3,r3,r2
 5712              	 .loc 6 1768 7
 5713 009c 002B     	 cmp r3,#0
 5714 009e 27D0     	 beq .L322
1769:.././hal/sam3u1c/udphs_device.c **** 				// Enable short packet option
1770:.././hal/sam3u1c/udphs_device.c **** 				// else the DMA transfer is accepted
1771:.././hal/sam3u1c/udphs_device.c **** 				// and interrupt DMA valid but nothing is sent.
1772:.././hal/sam3u1c/udphs_device.c **** 				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
 5715              	 .loc 6 1772 18
 5716 00a0 7B69     	 ldr r3,[r7,#20]
 5717 00a2 43F00803 	 orr r3,r3,#8
 5718 00a6 7B61     	 str r3,[r7,#20]
1773:.././hal/sam3u1c/udphs_device.c **** 				// No need to request another ZLP
1774:.././hal/sam3u1c/udphs_device.c **** 				ptr_job->b_shortpacket = false;
 5719              	 .loc 6 1774 28
 5720 00a8 FA68     	 ldr r2,[r7,#12]
 5721 00aa 137D     	 ldrb r3,[r2,#20]
 5722 00ac 6FF34103 	 bfc r3,#1,#1
 5723 00b0 1375     	 strb r3,[r2,#20]
 5724 00b2 1DE0     	 b .L322
 5725              	.L320:
1775:.././hal/sam3u1c/udphs_device.c **** 			}
1776:.././hal/sam3u1c/udphs_device.c **** 		} else {
1777:.././hal/sam3u1c/udphs_device.c **** 			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
 5726              	 .loc 6 1777 36
 5727 00b4 474A     	 ldr r2,.L327+4
 5728 00b6 FB79     	 ldrb r3,[r7,#7]
 5729 00b8 0833     	 adds r3,r3,#8
 5730 00ba 5B01     	 lsls r3,r3,#5
 5731 00bc 1344     	 add r3,r3,r2
 5732 00be 1B68     	 ldr r3,[r3]
 5733 00c0 1B09     	 lsrs r3,r3,#4
 5734 00c2 03F00303 	 and r3,r3,#3
 5735              	 .loc 6 1777 7
 5736 00c6 012B     	 cmp r3,#1
 5737 00c8 0ED1     	 bne .L323
1778:.././hal/sam3u1c/udphs_device.c **** 					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
 5738              	 .loc 6 1778 38
 5739 00ca 424A     	 ldr r2,.L327+4
 5740 00cc FB79     	 ldrb r3,[r7,#7]
 5741 00ce 0833     	 adds r3,r3,#8
 5742 00d0 5B01     	 lsls r3,r3,#5
 5743 00d2 1344     	 add r3,r3,r2
 5744 00d4 1B68     	 ldr r3,[r3]
 5745 00d6 03F00703 	 and r3,r3,#7
 5746 00da 0822     	 movs r2,#8
 5747 00dc 02FA03F3 	 lsl r3,r2,r3
 5748              	 .loc 6 1778 24
 5749 00e0 1A46     	 mov r2,r3
 5750              	 .loc 6 1778 6
 5751 00e2 3B69     	 ldr r3,[r7,#16]
 5752 00e4 9342     	 cmp r3,r2
 5753 00e6 03D8     	 bhi .L322
 5754              	.L323:
1779:.././hal/sam3u1c/udphs_device.c **** 
1780:.././hal/sam3u1c/udphs_device.c **** 				// Enable short packet reception
1781:.././hal/sam3u1c/udphs_device.c **** 				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
 5755              	 .loc 6 1781 18
 5756 00e8 7B69     	 ldr r3,[r7,#20]
 5757 00ea 43F01403 	 orr r3,r3,#20
 5758 00ee 7B61     	 str r3,[r7,#20]
 5759              	.L322:
1782:.././hal/sam3u1c/udphs_device.c **** 						| UDPHS_DMACONTROL_END_TR_EN;
1783:.././hal/sam3u1c/udphs_device.c **** 			}
1784:.././hal/sam3u1c/udphs_device.c **** 		}
1785:.././hal/sam3u1c/udphs_device.c **** 
1786:.././hal/sam3u1c/udphs_device.c **** 		// Start USB DMA to fill or read fifo of the selected endpoint
1787:.././hal/sam3u1c/udphs_device.c **** 		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
 5760              	 .loc 6 1787 3
 5761 00f0 FB68     	 ldr r3,[r7,#12]
 5762 00f2 5A68     	 ldr r2,[r3,#4]
 5763 00f4 FB68     	 ldr r3,[r7,#12]
 5764 00f6 DB68     	 ldr r3,[r3,#12]
 5765 00f8 D118     	 adds r1,r2,r3
 5766 00fa FB79     	 ldrb r3,[r7,#7]
 5767 00fc 1A01     	 lsls r2,r3,#4
 5768 00fe 364B     	 ldr r3,.L327+8
 5769 0100 1344     	 add r3,r3,r2
 5770 0102 0A46     	 mov r2,r1
 5771 0104 5A60     	 str r2,[r3,#4]
1788:.././hal/sam3u1c/udphs_device.c **** 		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
 5772              	 .loc 6 1788 16
 5773 0106 7B69     	 ldr r3,[r7,#20]
 5774 0108 43F02103 	 orr r3,r3,#33
 5775 010c 7B61     	 str r3,[r7,#20]
1789:.././hal/sam3u1c/udphs_device.c **** 
1790:.././hal/sam3u1c/udphs_device.c **** 		// Disable IRQs to have a short sequence
1791:.././hal/sam3u1c/udphs_device.c **** 		// between read of EOT_STA and DMA enable
1792:.././hal/sam3u1c/udphs_device.c **** 		flags = cpu_irq_save();
 5776              	 .loc 6 1792 11
 5777 010e 334B     	 ldr r3,.L327+12
 5778 0110 9847     	 blx r3
 5779              	.LVL106:
 5780 0112 B860     	 str r0,[r7,#8]
1793:.././hal/sam3u1c/udphs_device.c **** 		if (!(udd_endpoint_dma_get_status(ep)
 5781              	 .loc 6 1793 9
 5782 0114 FB79     	 ldrb r3,[r7,#7]
 5783 0116 1A01     	 lsls r2,r3,#4
 5784 0118 2F4B     	 ldr r3,.L327+8
 5785 011a 1344     	 add r3,r3,r2
 5786 011c DB68     	 ldr r3,[r3,#12]
1794:.././hal/sam3u1c/udphs_device.c **** 				& UDPHS_DMASTATUS_END_TR_ST)) {
 5787              	 .loc 6 1794 5
 5788 011e 03F01003 	 and r3,r3,#16
1793:.././hal/sam3u1c/udphs_device.c **** 		if (!(udd_endpoint_dma_get_status(ep)
 5789              	 .loc 6 1793 6
 5790 0122 002B     	 cmp r3,#0
 5791 0124 1DD1     	 bne .L324
1795:.././hal/sam3u1c/udphs_device.c **** 			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
 5792              	 .loc 6 1795 4
 5793 0126 FB79     	 ldrb r3,[r7,#7]
 5794 0128 1A01     	 lsls r2,r3,#4
 5795 012a 2B4B     	 ldr r3,.L327+8
 5796 012c 1344     	 add r3,r3,r2
 5797 012e 7A69     	 ldr r2,[r7,#20]
 5798 0130 9A60     	 str r2,[r3,#8]
1796:.././hal/sam3u1c/udphs_device.c **** 			ptr_job->buf_cnt += next_trans;
 5799              	 .loc 6 1796 21
 5800 0132 FB68     	 ldr r3,[r7,#12]
 5801 0134 DA68     	 ldr r2,[r3,#12]
 5802 0136 3B69     	 ldr r3,[r7,#16]
 5803 0138 1A44     	 add r2,r2,r3
 5804 013a FB68     	 ldr r3,[r7,#12]
 5805 013c DA60     	 str r2,[r3,#12]
1797:.././hal/sam3u1c/udphs_device.c **** 			ptr_job->buf_load = next_trans;
 5806              	 .loc 6 1797 22
 5807 013e FB68     	 ldr r3,[r7,#12]
 5808 0140 3A69     	 ldr r2,[r7,#16]
 5809 0142 1A61     	 str r2,[r3,#16]
1798:.././hal/sam3u1c/udphs_device.c **** 			udd_enable_endpoint_dma_interrupt(ep);
 5810              	 .loc 6 1798 4
 5811 0144 234B     	 ldr r3,.L327+4
 5812 0146 1A69     	 ldr r2,[r3,#16]
 5813 0148 FB79     	 ldrb r3,[r7,#7]
 5814 014a 013B     	 subs r3,r3,#1
 5815 014c 4FF00071 	 mov r1,#33554432
 5816 0150 01FA03F3 	 lsl r3,r1,r3
 5817 0154 1F49     	 ldr r1,.L327+4
 5818 0156 1343     	 orrs r3,r3,r2
 5819 0158 0B61     	 str r3,[r1,#16]
1799:.././hal/sam3u1c/udphs_device.c **** 			cpu_irq_restore(flags);
 5820              	 .loc 6 1799 4
 5821 015a B868     	 ldr r0,[r7,#8]
 5822 015c 204B     	 ldr r3,.L327+16
 5823 015e 9847     	 blx r3
 5824              	.LVL107:
1800:.././hal/sam3u1c/udphs_device.c **** 			return;
 5825              	 .loc 6 1800 4
 5826 0160 33E0     	 b .L314
 5827              	.L324:
1801:.././hal/sam3u1c/udphs_device.c **** 		}
1802:.././hal/sam3u1c/udphs_device.c **** 		cpu_irq_restore(flags);
 5828              	 .loc 6 1802 3
 5829 0162 B868     	 ldr r0,[r7,#8]
 5830 0164 1E4B     	 ldr r3,.L327+16
 5831 0166 9847     	 blx r3
 5832              	.LVL108:
1803:.././hal/sam3u1c/udphs_device.c **** 
1804:.././hal/sam3u1c/udphs_device.c **** 		// Here a ZLP has been received
1805:.././hal/sam3u1c/udphs_device.c **** 		// and the DMA transfer must be not started.
1806:.././hal/sam3u1c/udphs_device.c **** 		// It is the end of transfer
1807:.././hal/sam3u1c/udphs_device.c **** 		ptr_job->buf_size = ptr_job->buf_cnt;
 5833              	 .loc 6 1807 30
 5834 0168 FB68     	 ldr r3,[r7,#12]
 5835 016a DA68     	 ldr r2,[r3,#12]
 5836              	 .loc 6 1807 21
 5837 016c FB68     	 ldr r3,[r7,#12]
 5838 016e 9A60     	 str r2,[r3,#8]
 5839              	.L317:
1808:.././hal/sam3u1c/udphs_device.c **** 	}
1809:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_in(ep)) {
 5840              	 .loc 6 1809 6
 5841 0170 184A     	 ldr r2,.L327+4
 5842 0172 FB79     	 ldrb r3,[r7,#7]
 5843 0174 0833     	 adds r3,r3,#8
 5844 0176 5B01     	 lsls r3,r3,#5
 5845 0178 1344     	 add r3,r3,r2
 5846 017a 1B68     	 ldr r3,[r3]
 5847 017c 03F00803 	 and r3,r3,#8
 5848              	 .loc 6 1809 5
 5849 0180 002B     	 cmp r3,#0
 5850 0182 1AD0     	 beq .L325
1810:.././hal/sam3u1c/udphs_device.c **** 		if (ptr_job->b_shortpacket) {
 5851              	 .loc 6 1810 7
 5852 0184 FB68     	 ldr r3,[r7,#12]
 5853 0186 1B7D     	 ldrb r3,[r3,#20]
 5854 0188 03F00203 	 and r3,r3,#2
 5855 018c DBB2     	 uxtb r3,r3
 5856              	 .loc 6 1810 6
 5857 018e 002B     	 cmp r3,#0
 5858 0190 13D0     	 beq .L325
1811:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("zlp ");
1812:.././hal/sam3u1c/udphs_device.c **** 			// Need to send a ZLP (No possible with USB DMA)
1813:.././hal/sam3u1c/udphs_device.c **** 			// enable interrupt to wait a free bank to sent ZLP
1814:.././hal/sam3u1c/udphs_device.c **** 			udd_enable_tx_pkt_ready_interrupt(ep);
 5859              	 .loc 6 1814 4
 5860 0192 104A     	 ldr r2,.L327+4
 5861 0194 FB79     	 ldrb r3,[r7,#7]
 5862 0196 0833     	 adds r3,r3,#8
 5863 0198 5B01     	 lsls r3,r3,#5
 5864 019a 1344     	 add r3,r3,r2
 5865 019c 0433     	 adds r3,r3,#4
 5866 019e 4FF40062 	 mov r2,#2048
 5867 01a2 1A60     	 str r2,[r3]
1815:.././hal/sam3u1c/udphs_device.c **** 			udd_enable_endpoint_interrupt(ep);
 5868              	 .loc 6 1815 4
 5869 01a4 0B4B     	 ldr r3,.L327+4
 5870 01a6 1A69     	 ldr r2,[r3,#16]
 5871 01a8 FB79     	 ldrb r3,[r7,#7]
 5872 01aa 4FF48071 	 mov r1,#256
 5873 01ae 01FA03F3 	 lsl r3,r1,r3
 5874 01b2 0849     	 ldr r1,.L327+4
 5875 01b4 1343     	 orrs r3,r3,r2
 5876 01b6 0B61     	 str r3,[r1,#16]
1816:.././hal/sam3u1c/udphs_device.c **** 			return;
 5877              	 .loc 6 1816 4
 5878 01b8 07E0     	 b .L314
 5879              	.L325:
1817:.././hal/sam3u1c/udphs_device.c **** 		}
1818:.././hal/sam3u1c/udphs_device.c **** 	}
1819:.././hal/sam3u1c/udphs_device.c **** 	// Call callback to signal end of transfer
1820:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_finish_job(ptr_job, false, ep);
 5880              	 .loc 6 1820 2
 5881 01ba FB79     	 ldrb r3,[r7,#7]
 5882 01bc 1A46     	 mov r2,r3
 5883 01be 0021     	 movs r1,#0
 5884 01c0 F868     	 ldr r0,[r7,#12]
 5885 01c2 084B     	 ldr r3,.L327+20
 5886 01c4 9847     	 blx r3
 5887              	.LVL109:
 5888 01c6 00E0     	 b .L314
 5889              	.L326:
1750:.././hal/sam3u1c/udphs_device.c **** 	}
 5890              	 .loc 6 1750 3
 5891 01c8 00BF     	 nop
 5892              	.L314:
1821:.././hal/sam3u1c/udphs_device.c **** }
 5893              	 .loc 6 1821 1
 5894 01ca 1837     	 adds r7,r7,#24
 5895              	.LCFI233:
 5896              	 .cfi_def_cfa_offset 8
 5897 01cc BD46     	 mov sp,r7
 5898              	.LCFI234:
 5899              	 .cfi_def_cfa_register 13
 5900              	 
 5901 01ce 80BD     	 pop {r7,pc}
 5902              	.L328:
 5903              	 .align 2
 5904              	.L327:
 5905 01d0 00000000 	 .word udd_ep_job
 5906 01d4 00400A40 	 .word 1074413568
 5907 01d8 00430A40 	 .word 1074414336
 5908 01dc 00000000 	 .word cpu_irq_save
 5909 01e0 00000000 	 .word cpu_irq_restore
 5910 01e4 00000000 	 .word udd_ep_finish_job
 5911              	 .cfi_endproc
 5912              	.LFE180:
 5914              	 .section .text.udd_ep_interrupt,"ax",%progbits
 5915              	 .align 1
 5916              	 .syntax unified
 5917              	 .thumb
 5918              	 .thumb_func
 5919              	 .fpu softvfp
 5921              	udd_ep_interrupt:
 5922              	.LFB181:
1822:.././hal/sam3u1c/udphs_device.c **** 
1823:.././hal/sam3u1c/udphs_device.c **** 
1824:.././hal/sam3u1c/udphs_device.c **** static bool udd_ep_interrupt(void)
1825:.././hal/sam3u1c/udphs_device.c **** {
 5923              	 .loc 6 1825 1
 5924              	 .cfi_startproc
 5925              	 
 5926              	 
 5927 0000 80B5     	 push {r7,lr}
 5928              	.LCFI235:
 5929              	 .cfi_def_cfa_offset 8
 5930              	 .cfi_offset 7,-8
 5931              	 .cfi_offset 14,-4
 5932 0002 84B0     	 sub sp,sp,#16
 5933              	.LCFI236:
 5934              	 .cfi_def_cfa_offset 24
 5935 0004 00AF     	 add r7,sp,#0
 5936              	.LCFI237:
 5937              	 .cfi_def_cfa_register 7
1826:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_id_t ep;
1827:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_t *ptr_job;
1828:.././hal/sam3u1c/udphs_device.c **** 
1829:.././hal/sam3u1c/udphs_device.c **** 	// For each endpoint different of control endpoint (0)
1830:.././hal/sam3u1c/udphs_device.c **** 	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
 5938              	 .loc 6 1830 10
 5939 0006 0123     	 movs r3,#1
 5940 0008 FB73     	 strb r3,[r7,#15]
 5941              	 .loc 6 1830 2
 5942 000a E0E0     	 b .L330
 5943              	.L337:
1831:.././hal/sam3u1c/udphs_device.c **** 		// Get job corresponding at endpoint
1832:.././hal/sam3u1c/udphs_device.c **** 		ptr_job = &udd_ep_job[ep - 1];
 5944              	 .loc 6 1832 28
 5945 000c FB7B     	 ldrb r3,[r7,#15]
 5946 000e 5A1E     	 subs r2,r3,#1
 5947              	 .loc 6 1832 11
 5948 0010 1346     	 mov r3,r2
 5949 0012 5B00     	 lsls r3,r3,#1
 5950 0014 1344     	 add r3,r3,r2
 5951 0016 DB00     	 lsls r3,r3,#3
 5952 0018 714A     	 ldr r2,.L338
 5953 001a 1344     	 add r3,r3,r2
 5954 001c BB60     	 str r3,[r7,#8]
1833:.././hal/sam3u1c/udphs_device.c **** 
1834:.././hal/sam3u1c/udphs_device.c **** 		// Check DMA event
1835:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
 5955              	 .loc 6 1835 7
 5956 001e 714B     	 ldr r3,.L338+4
 5957 0020 1A69     	 ldr r2,[r3,#16]
 5958 0022 FB7B     	 ldrb r3,[r7,#15]
 5959 0024 013B     	 subs r3,r3,#1
 5960 0026 4FF00071 	 mov r1,#33554432
 5961 002a 01FA03F3 	 lsl r3,r1,r3
 5962 002e 1340     	 ands r3,r3,r2
 5963              	 .loc 6 1835 6
 5964 0030 002B     	 cmp r3,#0
 5965 0032 3CD0     	 beq .L331
1836:.././hal/sam3u1c/udphs_device.c **** 				&& Is_udd_endpoint_dma_interrupt(ep)) {
 5966              	 .loc 6 1836 8
 5967 0034 6B4B     	 ldr r3,.L338+4
 5968 0036 5A69     	 ldr r2,[r3,#20]
 5969 0038 FB7B     	 ldrb r3,[r7,#15]
 5970 003a 013B     	 subs r3,r3,#1
 5971 003c 4FF00071 	 mov r1,#33554432
 5972 0040 01FA03F3 	 lsl r3,r1,r3
 5973 0044 1340     	 ands r3,r3,r2
 5974              	 .loc 6 1836 5
 5975 0046 002B     	 cmp r3,#0
 5976 0048 31D0     	 beq .L331
 5977              	.LBB31:
1837:.././hal/sam3u1c/udphs_device.c **** 			uint32_t nb_remaining;
1838:.././hal/sam3u1c/udphs_device.c **** 			if (udd_endpoint_dma_get_status(ep)
 5978              	 .loc 6 1838 8
 5979 004a FB7B     	 ldrb r3,[r7,#15]
 5980 004c 1A01     	 lsls r2,r3,#4
 5981 004e 664B     	 ldr r3,.L338+8
 5982 0050 1344     	 add r3,r3,r2
 5983 0052 DB68     	 ldr r3,[r3,#12]
1839:.././hal/sam3u1c/udphs_device.c **** 					& UDPHS_DMASTATUS_CHANN_ENB) {
 5984              	 .loc 6 1839 6
 5985 0054 03F00103 	 and r3,r3,#1
1838:.././hal/sam3u1c/udphs_device.c **** 					& UDPHS_DMASTATUS_CHANN_ENB) {
 5986              	 .loc 6 1838 7
 5987 0058 002B     	 cmp r3,#0
 5988 005a 01D0     	 beq .L332
1840:.././hal/sam3u1c/udphs_device.c **** 				return true; // Ignore EOT_STA interrupt
 5989              	 .loc 6 1840 12
 5990 005c 0123     	 movs r3,#1
 5991 005e BBE0     	 b .L333
 5992              	.L332:
1841:.././hal/sam3u1c/udphs_device.c **** 			}
1842:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("dma%d: ", ep);
1843:.././hal/sam3u1c/udphs_device.c **** 			udd_disable_endpoint_dma_interrupt(ep);
 5993              	 .loc 6 1843 4
 5994 0060 604B     	 ldr r3,.L338+4
 5995 0062 1A69     	 ldr r2,[r3,#16]
 5996 0064 FB7B     	 ldrb r3,[r7,#15]
 5997 0066 013B     	 subs r3,r3,#1
 5998 0068 4FF00071 	 mov r1,#33554432
 5999 006c 01FA03F3 	 lsl r3,r1,r3
 6000 0070 DB43     	 mvns r3,r3
 6001 0072 5C49     	 ldr r1,.L338+4
 6002 0074 1340     	 ands r3,r3,r2
 6003 0076 0B61     	 str r3,[r1,#16]
1844:.././hal/sam3u1c/udphs_device.c **** 			// Save number of data no transfered
1845:.././hal/sam3u1c/udphs_device.c **** 			nb_remaining = (udd_endpoint_dma_get_status(ep) &
 6004              	 .loc 6 1845 20
 6005 0078 FB7B     	 ldrb r3,[r7,#15]
 6006 007a 1A01     	 lsls r2,r3,#4
 6007 007c 5A4B     	 ldr r3,.L338+8
 6008 007e 1344     	 add r3,r3,r2
 6009 0080 DB68     	 ldr r3,[r3,#12]
1846:.././hal/sam3u1c/udphs_device.c **** 					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
1847:.././hal/sam3u1c/udphs_device.c **** 					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
 6010              	 .loc 6 1847 6
 6011 0082 1B0C     	 lsrs r3,r3,#16
1845:.././hal/sam3u1c/udphs_device.c **** 					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
 6012              	 .loc 6 1845 17
 6013 0084 9BB2     	 uxth r3,r3
 6014 0086 7B60     	 str r3,[r7,#4]
1848:.././hal/sam3u1c/udphs_device.c **** 			if (nb_remaining) {
 6015              	 .loc 6 1848 7
 6016 0088 7B68     	 ldr r3,[r7,#4]
 6017 008a 002B     	 cmp r3,#0
 6018 008c 09D0     	 beq .L334
1849:.././hal/sam3u1c/udphs_device.c **** 				// Transfer no complete (short packet or ZLP) then:
1850:.././hal/sam3u1c/udphs_device.c **** 				// Update number of data transfered
1851:.././hal/sam3u1c/udphs_device.c **** 				ptr_job->buf_cnt -= nb_remaining;
 6019              	 .loc 6 1851 22
 6020 008e BB68     	 ldr r3,[r7,#8]
 6021 0090 DA68     	 ldr r2,[r3,#12]
 6022 0092 7B68     	 ldr r3,[r7,#4]
 6023 0094 D21A     	 subs r2,r2,r3
 6024 0096 BB68     	 ldr r3,[r7,#8]
 6025 0098 DA60     	 str r2,[r3,#12]
1852:.././hal/sam3u1c/udphs_device.c **** 				// Set transfer complete to stop the transfer
1853:.././hal/sam3u1c/udphs_device.c **** 				ptr_job->buf_size = ptr_job->buf_cnt;
 6026              	 .loc 6 1853 32
 6027 009a BB68     	 ldr r3,[r7,#8]
 6028 009c DA68     	 ldr r2,[r3,#12]
 6029              	 .loc 6 1853 23
 6030 009e BB68     	 ldr r3,[r7,#8]
 6031 00a0 9A60     	 str r2,[r3,#8]
 6032              	.L334:
1854:.././hal/sam3u1c/udphs_device.c **** 			}
1855:.././hal/sam3u1c/udphs_device.c **** 			udd_ep_trans_done(ep);
 6033              	 .loc 6 1855 4
 6034 00a2 FB7B     	 ldrb r3,[r7,#15]
 6035 00a4 1846     	 mov r0,r3
 6036 00a6 514B     	 ldr r3,.L338+12
 6037 00a8 9847     	 blx r3
 6038              	.LVL110:
1856:.././hal/sam3u1c/udphs_device.c **** 			return true;
 6039              	 .loc 6 1856 11
 6040 00aa 0123     	 movs r3,#1
 6041 00ac 94E0     	 b .L333
 6042              	.L331:
 6043              	.LBE31:
1857:.././hal/sam3u1c/udphs_device.c **** 		}
1858:.././hal/sam3u1c/udphs_device.c **** 		// Check empty bank interrupt event
1859:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_endpoint_interrupt_enabled(ep)) {
 6044              	 .loc 6 1859 7
 6045 00ae 4D4B     	 ldr r3,.L338+4
 6046 00b0 1A69     	 ldr r2,[r3,#16]
 6047 00b2 FB7B     	 ldrb r3,[r7,#15]
 6048 00b4 4FF48071 	 mov r1,#256
 6049 00b8 01FA03F3 	 lsl r3,r1,r3
 6050 00bc 1340     	 ands r3,r3,r2
 6051              	 .loc 6 1859 6
 6052 00be 002B     	 cmp r3,#0
 6053 00c0 00F08280 	 beq .L335
1860:.././hal/sam3u1c/udphs_device.c **** 			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
 6054              	 .loc 6 1860 8
 6055 00c4 474A     	 ldr r2,.L338+4
 6056 00c6 FB7B     	 ldrb r3,[r7,#15]
 6057 00c8 5B01     	 lsls r3,r3,#5
 6058 00ca 1344     	 add r3,r3,r2
 6059 00cc 03F58673 	 add r3,r3,#268
 6060 00d0 1B68     	 ldr r3,[r3]
 6061 00d2 03F40063 	 and r3,r3,#2048
 6062              	 .loc 6 1860 7
 6063 00d6 002B     	 cmp r3,#0
 6064 00d8 24D0     	 beq .L336
1861:.././hal/sam3u1c/udphs_device.c **** 					&& !Is_udd_tx_pkt_ready(ep)) {
 6065              	 .loc 6 1861 10
 6066 00da 424A     	 ldr r2,.L338+4
 6067 00dc FB7B     	 ldrb r3,[r7,#15]
 6068 00de 5B01     	 lsls r3,r3,#5
 6069 00e0 1344     	 add r3,r3,r2
 6070 00e2 03F58E73 	 add r3,r3,#284
 6071 00e6 1B68     	 ldr r3,[r3]
 6072 00e8 03F40063 	 and r3,r3,#2048
 6073              	 .loc 6 1861 6
 6074 00ec 002B     	 cmp r3,#0
 6075 00ee 19D1     	 bne .L336
1862:.././hal/sam3u1c/udphs_device.c **** 				udd_disable_tx_pkt_ready_interrupt(ep);
 6076              	 .loc 6 1862 5
 6077 00f0 3C4A     	 ldr r2,.L338+4
 6078 00f2 FB7B     	 ldrb r3,[r7,#15]
 6079 00f4 5B01     	 lsls r3,r3,#5
 6080 00f6 1344     	 add r3,r3,r2
 6081 00f8 03F58473 	 add r3,r3,#264
 6082 00fc 4FF40062 	 mov r2,#2048
 6083 0100 1A60     	 str r2,[r3]
1863:.././hal/sam3u1c/udphs_device.c **** 				// One bank is free then send a ZLP
1864:.././hal/sam3u1c/udphs_device.c **** 				udd_raise_tx_pkt_ready(ep);
 6084              	 .loc 6 1864 5
 6085 0102 384A     	 ldr r2,.L338+4
 6086 0104 FB7B     	 ldrb r3,[r7,#15]
 6087 0106 5B01     	 lsls r3,r3,#5
 6088 0108 1344     	 add r3,r3,r2
 6089 010a 03F58A73 	 add r3,r3,#276
 6090 010e 4FF40062 	 mov r2,#2048
 6091 0112 1A60     	 str r2,[r3]
1865:.././hal/sam3u1c/udphs_device.c **** 				udd_ep_finish_job(ptr_job, false, ep);
 6092              	 .loc 6 1865 5
 6093 0114 FB7B     	 ldrb r3,[r7,#15]
 6094 0116 1A46     	 mov r2,r3
 6095 0118 0021     	 movs r1,#0
 6096 011a B868     	 ldr r0,[r7,#8]
 6097 011c 344B     	 ldr r3,.L338+16
 6098 011e 9847     	 blx r3
 6099              	.LVL111:
1866:.././hal/sam3u1c/udphs_device.c **** 				return true;
 6100              	 .loc 6 1866 12
 6101 0120 0123     	 movs r3,#1
 6102 0122 59E0     	 b .L333
 6103              	.L336:
1867:.././hal/sam3u1c/udphs_device.c **** 			}
1868:.././hal/sam3u1c/udphs_device.c **** 			if (Is_udd_bank_interrupt_enabled(ep)
 6104              	 .loc 6 1868 8
 6105 0124 2F4A     	 ldr r2,.L338+4
 6106 0126 FB7B     	 ldrb r3,[r7,#15]
 6107 0128 5B01     	 lsls r3,r3,#5
 6108 012a 1344     	 add r3,r3,r2
 6109 012c 03F58673 	 add r3,r3,#268
 6110 0130 1B68     	 ldr r3,[r3]
 6111 0132 03F48023 	 and r3,r3,#262144
 6112              	 .loc 6 1868 7
 6113 0136 002B     	 cmp r3,#0
 6114 0138 46D0     	 beq .L335
1869:.././hal/sam3u1c/udphs_device.c **** 					&& (0 == udd_nb_busy_bank(ep))) {
 6115              	 .loc 6 1869 15
 6116 013a 2A4A     	 ldr r2,.L338+4
 6117 013c FB7B     	 ldrb r3,[r7,#15]
 6118 013e 5B01     	 lsls r3,r3,#5
 6119 0140 1344     	 add r3,r3,r2
 6120 0142 03F58E73 	 add r3,r3,#284
 6121 0146 1B68     	 ldr r3,[r3]
 6122 0148 9B0C     	 lsrs r3,r3,#18
 6123 014a 03F00303 	 and r3,r3,#3
 6124              	 .loc 6 1869 6
 6125 014e 002B     	 cmp r3,#0
 6126 0150 3AD1     	 bne .L335
1870:.././hal/sam3u1c/udphs_device.c **** 				// End of background transfer on IN endpoint
1871:.././hal/sam3u1c/udphs_device.c **** 				udd_disable_bank_interrupt(ep);
 6127              	 .loc 6 1871 5
 6128 0152 244A     	 ldr r2,.L338+4
 6129 0154 FB7B     	 ldrb r3,[r7,#15]
 6130 0156 5B01     	 lsls r3,r3,#5
 6131 0158 1344     	 add r3,r3,r2
 6132 015a 03F58473 	 add r3,r3,#264
 6133 015e 4FF48022 	 mov r2,#262144
 6134 0162 1A60     	 str r2,[r3]
1872:.././hal/sam3u1c/udphs_device.c **** 				udd_disable_endpoint_interrupt(ep);
 6135              	 .loc 6 1872 5
 6136 0164 1F4B     	 ldr r3,.L338+4
 6137 0166 1A69     	 ldr r2,[r3,#16]
 6138 0168 FB7B     	 ldrb r3,[r7,#15]
 6139 016a 4FF48071 	 mov r1,#256
 6140 016e 01FA03F3 	 lsl r3,r1,r3
 6141 0172 DB43     	 mvns r3,r3
 6142 0174 1B49     	 ldr r1,.L338+4
 6143 0176 1340     	 ands r3,r3,r2
 6144 0178 0B61     	 str r3,[r1,#16]
1873:.././hal/sam3u1c/udphs_device.c **** 
1874:.././hal/sam3u1c/udphs_device.c **** 				Assert(ptr_job->stall_requested);
1875:.././hal/sam3u1c/udphs_device.c **** 				// A stall has been requested during background transfer
1876:.././hal/sam3u1c/udphs_device.c **** 				ptr_job->stall_requested = false;
 6145              	 .loc 6 1876 30
 6146 017a BA68     	 ldr r2,[r7,#8]
 6147 017c 137D     	 ldrb r3,[r2,#20]
 6148 017e 6FF38203 	 bfc r3,#2,#1
 6149 0182 1375     	 strb r3,[r2,#20]
1877:.././hal/sam3u1c/udphs_device.c **** 				udd_disable_endpoint_bank_autoswitch(ep);
 6150              	 .loc 6 1877 5
 6151 0184 174A     	 ldr r2,.L338+4
 6152 0186 FB7B     	 ldrb r3,[r7,#15]
 6153 0188 5B01     	 lsls r3,r3,#5
 6154 018a 1344     	 add r3,r3,r2
 6155 018c 03F58473 	 add r3,r3,#264
 6156 0190 1A68     	 ldr r2,[r3]
 6157 0192 1449     	 ldr r1,.L338+4
 6158 0194 FB7B     	 ldrb r3,[r7,#15]
 6159 0196 22F00202 	 bic r2,r2,#2
 6160 019a 5B01     	 lsls r3,r3,#5
 6161 019c 0B44     	 add r3,r3,r1
 6162 019e 03F58473 	 add r3,r3,#264
 6163 01a2 1A60     	 str r2,[r3]
1878:.././hal/sam3u1c/udphs_device.c **** 				udd_enable_stall_handshake(ep);
 6164              	 .loc 6 1878 5
 6165 01a4 0F4A     	 ldr r2,.L338+4
 6166 01a6 FB7B     	 ldrb r3,[r7,#15]
 6167 01a8 5B01     	 lsls r3,r3,#5
 6168 01aa 1344     	 add r3,r3,r2
 6169 01ac 03F58A73 	 add r3,r3,#276
 6170 01b0 2022     	 movs r2,#32
 6171 01b2 1A60     	 str r2,[r3]
1879:.././hal/sam3u1c/udphs_device.c **** 				udd_reset_data_toggle(ep);
 6172              	 .loc 6 1879 5
 6173 01b4 0B4A     	 ldr r2,.L338+4
 6174 01b6 FB7B     	 ldrb r3,[r7,#15]
 6175 01b8 5B01     	 lsls r3,r3,#5
 6176 01ba 1344     	 add r3,r3,r2
 6177 01bc 03F58C73 	 add r3,r3,#280
 6178 01c0 4022     	 movs r2,#64
 6179 01c2 1A60     	 str r2,[r3]
1880:.././hal/sam3u1c/udphs_device.c **** 				//dbg_print("exHalt%x ", ep);
1881:.././hal/sam3u1c/udphs_device.c **** 				return true;
 6180              	 .loc 6 1881 12
 6181 01c4 0123     	 movs r3,#1
 6182 01c6 07E0     	 b .L333
 6183              	.L335:
1830:.././hal/sam3u1c/udphs_device.c **** 		// Get job corresponding at endpoint
 6184              	 .loc 6 1830 42 discriminator 2
 6185 01c8 FB7B     	 ldrb r3,[r7,#15]
 6186 01ca 0133     	 adds r3,r3,#1
 6187 01cc FB73     	 strb r3,[r7,#15]
 6188              	.L330:
1830:.././hal/sam3u1c/udphs_device.c **** 		// Get job corresponding at endpoint
 6189              	 .loc 6 1830 2 discriminator 1
 6190 01ce FB7B     	 ldrb r3,[r7,#15]
 6191 01d0 022B     	 cmp r3,#2
 6192 01d2 7FF61BAF 	 bls .L337
1882:.././hal/sam3u1c/udphs_device.c **** 			}
1883:.././hal/sam3u1c/udphs_device.c **** 		}
1884:.././hal/sam3u1c/udphs_device.c **** 	}
1885:.././hal/sam3u1c/udphs_device.c **** 	return false;
 6193              	 .loc 6 1885 9
 6194 01d6 0023     	 movs r3,#0
 6195              	.L333:
1886:.././hal/sam3u1c/udphs_device.c **** }
 6196              	 .loc 6 1886 1
 6197 01d8 1846     	 mov r0,r3
 6198 01da 1037     	 adds r7,r7,#16
 6199              	.LCFI238:
 6200              	 .cfi_def_cfa_offset 8
 6201 01dc BD46     	 mov sp,r7
 6202              	.LCFI239:
 6203              	 .cfi_def_cfa_register 13
 6204              	 
 6205 01de 80BD     	 pop {r7,pc}
 6206              	.L339:
 6207              	 .align 2
 6208              	.L338:
 6209 01e0 00000000 	 .word udd_ep_job
 6210 01e4 00400A40 	 .word 1074413568
 6211 01e8 00430A40 	 .word 1074414336
 6212 01ec 00000000 	 .word udd_ep_trans_done
 6213 01f0 00000000 	 .word udd_ep_finish_job
 6214              	 .cfi_endproc
 6215              	.LFE181:
 6217              	 .section .bss.b_shortpacket.8497,"aw",%nobits
 6220              	b_shortpacket.8497:
 6221 0000 00       	 .space 1
 6222              	 .text
 6223              	.Letext0:
 6224              	 .file 7 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\machine\\_default_types.h"
 6225              	 .file 8 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\sys\\_stdint.h"
 6226              	 .file 9 ".././hal/sam3u1c/inc/sam3u1c.h"
 6227              	 .file 10 ".././hal/sam3u1c/inc/system_sam3u.h"
 6228              	 .file 11 ".././hal/sam3u1c/inc/component/component_udphs.h"
 6229              	 .file 12 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\sys\\lock.h"
 6230              	 .file 13 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\sys\\_types.h"
 6231              	 .file 14 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\lib\\gcc\\arm-none-eabi\\8.2.1\\include\\stddef.h"
 6232              	 .file 15 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\sys\\reent.h"
 6233              	 .file 16 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\stdlib.h"
 6234              	 .file 17 ".././hal/sam3u1c/inc/compiler.h"
 6235              	 .file 18 "./conf_usb.h"
 6236              	 .file 19 ".././hal/sam3u1c/inc/usb_protocol.h"
 6237              	 .file 20 ".././hal/sam3u1c/inc/udi.h"
 6238              	 .file 21 ".././hal/sam3u1c/inc/udc_desc.h"
 6239              	 .file 22 ".././hal/sam3u1c/inc/udd.h"
 6240              	 .file 23 ".././hal/sam3u1c/inc/udi_vendor.h"
 6241              	 .file 24 ".././hal/sam3u1c/inc/udphs_device.h"
 6242              	 .file 25 ".././hal/sam3u1c/inc/sam/sleepmgr.h"
 6243              	 .file 26 ".././hal/sam3u1c/inc/pmc.h"
 6244              	 .file 27 ".././hal/sam3u1c/inc/sam3u/sysclk.h"
 6245              	 .file 28 ".././hal/sam3u1c/inc/sleep.h"
 6246              	 .file 29 ".././hal/sam3u1c/inc/main.h"
DEFINED SYMBOLS
                            *ABS*:00000000 udphs_device.c
    {standard input}:16     .text.NVIC_EnableIRQ:00000000 $t
    {standard input}:23     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
    {standard input}:74     .text.NVIC_EnableIRQ:0000002c $d
    {standard input}:79     .text.NVIC_SetPriority:00000000 $t
    {standard input}:85     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
    {standard input}:159    .text.NVIC_SetPriority:0000004c $d
    {standard input}:165    .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:168    .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:173    .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:174    .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:176    .text.cpu_irq_save:00000000 $t
    {standard input}:182    .text.cpu_irq_save:00000000 cpu_irq_save
    {standard input}:269    .text.cpu_irq_save:00000034 $d
    {standard input}:274    .text.cpu_irq_is_enabled_flags:00000000 $t
    {standard input}:280    .text.cpu_irq_is_enabled_flags:00000000 cpu_irq_is_enabled_flags
    {standard input}:323    .text.cpu_irq_restore:00000000 $t
    {standard input}:329    .text.cpu_irq_restore:00000000 cpu_irq_restore
    {standard input}:396    .text.cpu_irq_restore:00000028 $d
    {standard input}:402    .text.sleepmgr_lock_mode:00000000 $t
    {standard input}:408    .text.sleepmgr_lock_mode:00000000 sleepmgr_lock_mode
    {standard input}:460    .text.sleepmgr_lock_mode:0000002c $d
    {standard input}:467    .text.sleepmgr_unlock_mode:00000000 $t
    {standard input}:473    .text.sleepmgr_unlock_mode:00000000 sleepmgr_unlock_mode
    {standard input}:524    .text.sleepmgr_unlock_mode:0000002c $d
    {standard input}:533    .bss.udd_b_idle:00000000 udd_b_idle
    {standard input}:534    .bss.udd_b_idle:00000000 $d
    {standard input}:536    .text.udd_sleep_mode:00000000 $t
    {standard input}:542    .text.udd_sleep_mode:00000000 udd_sleep_mode
    {standard input}:615    .text.udd_sleep_mode:0000004c $d
                            *COM*:00000018 udd_g_ctrlreq
    {standard input}:625    .bss.udd_ep_control_state:00000000 udd_ep_control_state
    {standard input}:626    .bss.udd_ep_control_state:00000000 $d
    {standard input}:628    .bss.udd_ctrl_prev_payload_buf_cnt:00000000 $d
    {standard input}:631    .bss.udd_ctrl_prev_payload_buf_cnt:00000000 udd_ctrl_prev_payload_buf_cnt
    {standard input}:634    .bss.udd_ctrl_payload_buf_cnt:00000000 $d
    {standard input}:637    .bss.udd_ctrl_payload_buf_cnt:00000000 udd_ctrl_payload_buf_cnt
    {standard input}:640    .bss.udd_ep_job:00000000 $d
    {standard input}:643    .bss.udd_ep_job:00000000 udd_ep_job
    {standard input}:646    .text.UDPHS_Handler:00000000 $t
    {standard input}:653    .text.UDPHS_Handler:00000000 UDPHS_Handler
    {standard input}:954    .text.UDPHS_Handler:00000184 $d
    {standard input}:5116   .text.udd_ctrl_interrupt:00000000 udd_ctrl_interrupt
    {standard input}:5921   .text.udd_ep_interrupt:00000000 udd_ep_interrupt
    {standard input}:5371   .text.udd_ep_job_table_kill:00000000 udd_ep_job_table_kill
    {standard input}:3768   .text.udd_reset_ep_ctrl:00000000 udd_reset_ep_ctrl
    {standard input}:3859   .text.udd_ctrl_init:00000000 udd_ctrl_init
    {standard input}:974    .text.udd_include_vbus_monitoring:00000000 $t
    {standard input}:981    .text.udd_include_vbus_monitoring:00000000 udd_include_vbus_monitoring
    {standard input}:1012   .text.udd_enable:00000000 $t
    {standard input}:1019   .text.udd_enable:00000000 udd_enable
    {standard input}:1113   .text.udd_enable:0000006c $d
    {standard input}:5285   .text.udd_ep_job_table_reset:00000000 udd_ep_job_table_reset
    {standard input}:1219   .text.udd_attach:00000000 udd_attach
    {standard input}:1129   .text.udd_disable:00000000 $t
    {standard input}:1136   .text.udd_disable:00000000 udd_disable
    {standard input}:1201   .text.udd_disable:0000003c $d
    {standard input}:1212   .text.udd_attach:00000000 $t
    {standard input}:1335   .text.udd_attach:000000a0 $d
    {standard input}:1345   .text.udd_detach:00000000 $t
    {standard input}:1352   .text.udd_detach:00000000 udd_detach
    {standard input}:1398   .text.udd_detach:00000034 $d
    {standard input}:1406   .text.udd_is_high_speed:00000000 $t
    {standard input}:1413   .text.udd_is_high_speed:00000000 udd_is_high_speed
    {standard input}:1451   .text.udd_is_high_speed:00000020 $d
    {standard input}:1456   .text.udd_set_address:00000000 $t
    {standard input}:1463   .text.udd_set_address:00000000 udd_set_address
    {standard input}:1520   .text.udd_set_address:00000040 $d
    {standard input}:1525   .text.udd_getaddress:00000000 $t
    {standard input}:1532   .text.udd_getaddress:00000000 udd_getaddress
    {standard input}:1566   .text.udd_getaddress:00000018 $d
    {standard input}:1571   .text.udd_get_frame_number:00000000 $t
    {standard input}:1578   .text.udd_get_frame_number:00000000 udd_get_frame_number
    {standard input}:1613   .text.udd_get_frame_number:0000001c $d
    {standard input}:1618   .text.udd_get_micro_frame_number:00000000 $t
    {standard input}:1625   .text.udd_get_micro_frame_number:00000000 udd_get_micro_frame_number
    {standard input}:1659   .text.udd_get_micro_frame_number:00000018 $d
    {standard input}:1664   .text.udd_send_remotewakeup:00000000 $t
    {standard input}:1671   .text.udd_send_remotewakeup:00000000 udd_send_remotewakeup
    {standard input}:1716   .text.udd_send_remotewakeup:00000030 $d
    {standard input}:1724   .text.udd_set_setup_payload:00000000 $t
    {standard input}:1731   .text.udd_set_setup_payload:00000000 udd_set_setup_payload
    {standard input}:1776   .text.udd_set_setup_payload:00000024 $d
    {standard input}:1781   .text.udd_ep_alloc:00000000 $t
    {standard input}:1788   .text.udd_ep_alloc:00000000 udd_ep_alloc
    {standard input}:2288   .text.udd_ep_alloc:00000300 $d
    {standard input}:2292   .text.udd_ep_alloc:00000308 $t
    {standard input}:2399   .text.udd_ep_alloc:000003a4 $d
    {standard input}:2989   .text.udd_ep_run:00000000 udd_ep_run
    {standard input}:2405   .text.udd_ep_free:00000000 $t
    {standard input}:2412   .text.udd_ep_free:00000000 udd_ep_free
    {standard input}:2498   .text.udd_ep_free:00000074 $d
    {standard input}:5445   .text.udd_ep_abort_job:00000000 udd_ep_abort_job
    {standard input}:2505   .text.udd_ep_is_halted:00000000 $t
    {standard input}:2512   .text.udd_ep_is_halted:00000000 udd_ep_is_halted
    {standard input}:2592   .text.udd_ep_is_halted:00000060 $d
    {standard input}:2598   .text.udd_ep_set_halt:00000000 $t
    {standard input}:2605   .text.udd_ep_set_halt:00000000 udd_ep_set_halt
    {standard input}:2776   .text.udd_ep_set_halt:0000010c $d
    {standard input}:2782   .text.udd_ep_clear_halt:00000000 $t
    {standard input}:2789   .text.udd_ep_clear_halt:00000000 udd_ep_clear_halt
    {standard input}:2976   .text.udd_ep_clear_halt:00000128 $d
    {standard input}:2982   .text.udd_ep_run:00000000 $t
    {standard input}:3167   .text.udd_ep_run:000000f4 $d
    {standard input}:5609   .text.udd_ep_trans_done:00000000 udd_ep_trans_done
    {standard input}:3176   .text.udd_ep_abort:00000000 $t
    {standard input}:3183   .text.udd_ep_abort:00000000 udd_ep_abort
    {standard input}:3276   .text.udd_ep_abort:0000007c $d
    {standard input}:3283   .text.udd_ep_wait_stall_clear:00000000 $t
    {standard input}:3290   .text.udd_ep_wait_stall_clear:00000000 udd_ep_wait_stall_clear
    {standard input}:3411   .text.udd_ep_wait_stall_clear:000000a0 $d
    {standard input}:3417   .text.udd_test_mode_j:00000000 $t
    {standard input}:3424   .text.udd_test_mode_j:00000000 udd_test_mode_j
    {standard input}:3465   .text.udd_test_mode_j:00000030 $d
    {standard input}:3470   .text.udd_test_mode_k:00000000 $t
    {standard input}:3477   .text.udd_test_mode_k:00000000 udd_test_mode_k
    {standard input}:3518   .text.udd_test_mode_k:00000030 $d
    {standard input}:3523   .text.udd_test_mode_se0_nak:00000000 $t
    {standard input}:3530   .text.udd_test_mode_se0_nak:00000000 udd_test_mode_se0_nak
    {standard input}:3565   .text.udd_test_mode_se0_nak:00000020 $d
    {standard input}:3570   .rodata:00000000 $d
    {standard input}:3626   .text.udd_test_mode_packet:00000000 $t
    {standard input}:3633   .text.udd_test_mode_packet:00000000 udd_test_mode_packet
    {standard input}:3755   .text.udd_test_mode_packet:000000c0 $d
    {standard input}:3762   .text.udd_reset_ep_ctrl:00000000 $t
    {standard input}:3846   .text.udd_reset_ep_ctrl:00000074 $d
    {standard input}:3853   .text.udd_ctrl_init:00000000 $t
    {standard input}:3923   .text.udd_ctrl_init:00000048 $d
    {standard input}:3932   .text.udd_ctrl_setup_received:00000000 $t
    {standard input}:3938   .text.udd_ctrl_setup_received:00000000 udd_ctrl_setup_received
    {standard input}:4144   .text.udd_ctrl_setup_received:00000108 $d
    {standard input}:5072   .text.udd_ctrl_endofrequest:00000000 udd_ctrl_endofrequest
    {standard input}:4880   .text.udd_ctrl_stall_data:00000000 udd_ctrl_stall_data
    {standard input}:4168   .text.udd_ctrl_in_sent:00000000 udd_ctrl_in_sent
    {standard input}:4928   .text.udd_ctrl_send_zlp_in:00000000 udd_ctrl_send_zlp_in
    {standard input}:4162   .text.udd_ctrl_in_sent:00000000 $t
    {standard input}:4410   .text.udd_ctrl_in_sent:00000138 $d
    {standard input}:6220   .bss.b_shortpacket.8497:00000000 b_shortpacket.8497
    {standard input}:5006   .text.udd_ctrl_send_zlp_out:00000000 udd_ctrl_send_zlp_out
    {standard input}:4426   .text.udd_ctrl_out_received:00000000 $t
    {standard input}:4432   .text.udd_ctrl_out_received:00000000 udd_ctrl_out_received
    {standard input}:4731   .text.udd_ctrl_out_received:0000018c $d
    {standard input}:4747   .text.udd_ctrl_underflow:00000000 $t
    {standard input}:4753   .text.udd_ctrl_underflow:00000000 udd_ctrl_underflow
    {standard input}:4806   .text.udd_ctrl_underflow:00000038 $d
    {standard input}:4813   .text.udd_ctrl_overflow:00000000 $t
    {standard input}:4819   .text.udd_ctrl_overflow:00000000 udd_ctrl_overflow
    {standard input}:4868   .text.udd_ctrl_overflow:0000002c $d
    {standard input}:4874   .text.udd_ctrl_stall_data:00000000 $t
    {standard input}:4916   .text.udd_ctrl_stall_data:0000001c $d
    {standard input}:4922   .text.udd_ctrl_send_zlp_in:00000000 $t
    {standard input}:4992   .text.udd_ctrl_send_zlp_in:00000054 $d
    {standard input}:5000   .text.udd_ctrl_send_zlp_out:00000000 $t
    {standard input}:5058   .text.udd_ctrl_send_zlp_out:00000034 $d
    {standard input}:5066   .text.udd_ctrl_endofrequest:00000000 $t
    {standard input}:5105   .text.udd_ctrl_endofrequest:00000018 $d
    {standard input}:5110   .text.udd_ctrl_interrupt:00000000 $t
    {standard input}:5269   .text.udd_ctrl_interrupt:000000cc $d
    {standard input}:5279   .text.udd_ep_job_table_reset:00000000 $t
    {standard input}:5360   .text.udd_ep_job_table_reset:00000058 $d
    {standard input}:5365   .text.udd_ep_job_table_kill:00000000 $t
    {standard input}:5433   .text.udd_ep_job_table_kill:0000003c $d
    {standard input}:5509   .text.udd_ep_finish_job:00000000 udd_ep_finish_job
    {standard input}:5439   .text.udd_ep_abort_job:00000000 $t
    {standard input}:5497   .text.udd_ep_abort_job:00000034 $d
    {standard input}:5503   .text.udd_ep_finish_job:00000000 $t
    {standard input}:5598   .text.udd_ep_finish_job:0000006c $d
    {standard input}:5603   .text.udd_ep_trans_done:00000000 $t
    {standard input}:5905   .text.udd_ep_trans_done:000001d0 $d
    {standard input}:5915   .text.udd_ep_interrupt:00000000 $t
    {standard input}:6209   .text.udd_ep_interrupt:000001e0 $d
    {standard input}:6221   .bss.b_shortpacket.8497:00000000 $d
                           .group:00000000 wm4.0.bacf6c85951b42af729d707f36a7fff6
                           .group:00000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.newlib.h.8.f6e543eac3f2f65163ba2ffe3b04987b
                           .group:00000000 wm4.ieeefp.h.77.d5685ba212d3ed6e914898d045f873e3
                           .group:00000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.cdefs.h.49.2bf373aedffd8b393ccd11dc057e8547
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:00000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:00000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.conf_usb.h.56.3123a395939a56b38cb84f3590ea54ec
                           .group:00000000 wm4.udi_vendor_conf.h.56.4348c8e521d040f44df868219dae6785
                           .group:00000000 wm4.usb_atmel.h.45.c31b525dbe01f8d9e2022a03356ec174
                           .group:00000000 wm4.usb_protocol.h.63.850c58f3469fce50a9ac9a6854f7594b
                           .group:00000000 wm4.usb_protocol_vendor.h.45.83dfe073428ff799abc3ed1c7b04c77d
                           .group:00000000 wm4.udc_desc.h.77.5fec235bd7553e7256e345e020840072
                           .group:00000000 wm4.udd.h.103.3ccc59b50c14ec70568e6136eeb22d56
                           .group:00000000 wm4.udi_vendor.h.125.7b9085237d4d4a9757f4c148fba1918d
                           .group:00000000 wm4.conf_clock.h.45.5dc276d21b4d793a62f1a9757cc18d5c
                           .group:00000000 wm4.board.h.69.3670053ec9e880dbc2016be2b8dca792
                           .group:00000000 wm4.cw521.h.62.d34c289ace4a92d90be8fb389db40479
                           .group:00000000 wm4.pmc.h.45.bbe1bf97a811e3b283420b2eeadf0b35
                           .group:00000000 wm4.osc.h.94.b766cddafe899eca01d775f7b2906680
                           .group:00000000 wm4.pll.h.45.a605c31ca466ae25752a678e8572be48
                           .group:00000000 wm4.sysclk.h.156.541a142b0016a365728ea1f7c0e3db84
                           .group:00000000 wm4.conf_board.h.45.aac520ee9dd7e984e12efac1b366b8fe
                           .group:00000000 wm4.ioport_pio.h.44.373b34364b4ef25fac62017cd942a761
                           .group:00000000 wm4.pio.h.45.95f22b0ea02ddc698ec54fc56bf6f38c
                           .group:00000000 wm4.udphs_device.h.91.605096afd8c16fcd75a5a1c11b74776b
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4.sleep.h.45.ef10e1aee6f903405be19980a8333b7f
                           .group:00000000 wm4.conf_sleepmgr.h.44.d825b913294720022fefe7201514fca3

UNDEFINED SYMBOLS
g_interrupt_enabled
sleepmgr_locks
pmc_enable_periph_clk
pmc_is_wakeup_clocks_restored
udc_sof_notify
main_sof_action
udc_reset
pmc_disable_periph_clk
main_suspend_action
main_resume_action
sysclk_enable_usb
pmc_set_fast_startup_input
sysclk_disable_usb
udc_process_setup
