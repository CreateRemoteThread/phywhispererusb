   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "usart.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .section .text.usart_set_async_baudrate,"ax",%progbits
  27              	 .align 1
  28              	 .global usart_set_async_baudrate
  29              	 .syntax unified
  30              	 .thumb
  31              	 .thumb_func
  32              	 .fpu softvfp
  34              	usart_set_async_baudrate:
  35              	.LFB67:
  36              	 .file 1 ".././hal/sam3u1c/usart.c"
   1:.././hal/sam3u1c/usart.c **** /**
   2:.././hal/sam3u1c/usart.c ****  * \file
   3:.././hal/sam3u1c/usart.c ****  *
   4:.././hal/sam3u1c/usart.c ****  * \brief Universal Synchronous Asynchronous Receiver Transmitter (USART) driver
   5:.././hal/sam3u1c/usart.c ****  * for SAM.
   6:.././hal/sam3u1c/usart.c ****  *
   7:.././hal/sam3u1c/usart.c ****  * Copyright (c) 2011-2014 Atmel Corporation. All rights reserved.
   8:.././hal/sam3u1c/usart.c ****  *
   9:.././hal/sam3u1c/usart.c ****  * \asf_license_start
  10:.././hal/sam3u1c/usart.c ****  *
  11:.././hal/sam3u1c/usart.c ****  * \page License
  12:.././hal/sam3u1c/usart.c ****  *
  13:.././hal/sam3u1c/usart.c ****  * Redistribution and use in source and binary forms, with or without
  14:.././hal/sam3u1c/usart.c ****  * modification, are permitted provided that the following conditions are met:
  15:.././hal/sam3u1c/usart.c ****  *
  16:.././hal/sam3u1c/usart.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  17:.././hal/sam3u1c/usart.c ****  *    this list of conditions and the following disclaimer.
  18:.././hal/sam3u1c/usart.c ****  *
  19:.././hal/sam3u1c/usart.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  20:.././hal/sam3u1c/usart.c ****  *    this list of conditions and the following disclaimer in the documentation
  21:.././hal/sam3u1c/usart.c ****  *    and/or other materials provided with the distribution.
  22:.././hal/sam3u1c/usart.c ****  *
  23:.././hal/sam3u1c/usart.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  24:.././hal/sam3u1c/usart.c ****  *    from this software without specific prior written permission.
  25:.././hal/sam3u1c/usart.c ****  *
  26:.././hal/sam3u1c/usart.c ****  * 4. This software may only be redistributed and used in connection with an
  27:.././hal/sam3u1c/usart.c ****  *    Atmel microcontroller product.
  28:.././hal/sam3u1c/usart.c ****  *
  29:.././hal/sam3u1c/usart.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  30:.././hal/sam3u1c/usart.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  31:.././hal/sam3u1c/usart.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  32:.././hal/sam3u1c/usart.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  33:.././hal/sam3u1c/usart.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:.././hal/sam3u1c/usart.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  35:.././hal/sam3u1c/usart.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  36:.././hal/sam3u1c/usart.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  37:.././hal/sam3u1c/usart.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  38:.././hal/sam3u1c/usart.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  39:.././hal/sam3u1c/usart.c ****  * POSSIBILITY OF SUCH DAMAGE.
  40:.././hal/sam3u1c/usart.c ****  *
  41:.././hal/sam3u1c/usart.c ****  * \asf_license_stop
  42:.././hal/sam3u1c/usart.c ****  *
  43:.././hal/sam3u1c/usart.c ****  */
  44:.././hal/sam3u1c/usart.c **** 
  45:.././hal/sam3u1c/usart.c **** #include "usart.h"
  46:.././hal/sam3u1c/usart.c **** 
  47:.././hal/sam3u1c/usart.c **** /// @cond 0
  48:.././hal/sam3u1c/usart.c **** /**INDENT-OFF**/
  49:.././hal/sam3u1c/usart.c **** #ifdef __cplusplus
  50:.././hal/sam3u1c/usart.c **** extern "C" {
  51:.././hal/sam3u1c/usart.c **** #endif
  52:.././hal/sam3u1c/usart.c **** /**INDENT-ON**/
  53:.././hal/sam3u1c/usart.c **** /// @endcond
  54:.././hal/sam3u1c/usart.c **** 
  55:.././hal/sam3u1c/usart.c **** /**
  56:.././hal/sam3u1c/usart.c ****  * \defgroup sam_drivers_usart_group Universal Synchronous Asynchronous
  57:.././hal/sam3u1c/usart.c ****  * Receiver Transmitter (USART)
  58:.././hal/sam3u1c/usart.c ****  *
  59:.././hal/sam3u1c/usart.c ****  * The Universal Synchronous Asynchronous Receiver Transceiver (USART)
  60:.././hal/sam3u1c/usart.c ****  * provides one full duplex universal synchronous asynchronous serial link.
  61:.././hal/sam3u1c/usart.c ****  * Data frame format is widely programmable (data length, parity, number of
  62:.././hal/sam3u1c/usart.c ****  * stop bits) to support a maximum of standards. The receiver implements
  63:.././hal/sam3u1c/usart.c ****  * parity error, framing error and overrun error detection. The receiver
  64:.././hal/sam3u1c/usart.c ****  * time-out enables handling variable-length frames and the transmitter
  65:.././hal/sam3u1c/usart.c ****  * timeguard facilitates communications with slow remote devices. Multidrop
  66:.././hal/sam3u1c/usart.c ****  * communications are also supported through address bit handling in reception
  67:.././hal/sam3u1c/usart.c ****  * and transmission. The driver supports the following modes:
  68:.././hal/sam3u1c/usart.c ****  * RS232, RS485, SPI, IrDA, ISO7816, MODEM, Hardware handshaking and LIN.
  69:.././hal/sam3u1c/usart.c ****  *
  70:.././hal/sam3u1c/usart.c ****  * @{
  71:.././hal/sam3u1c/usart.c ****  */
  72:.././hal/sam3u1c/usart.c **** 
  73:.././hal/sam3u1c/usart.c **** /* The write protect key value. */
  74:.././hal/sam3u1c/usart.c **** #ifndef US_WPMR_WPKEY_PASSWD
  75:.././hal/sam3u1c/usart.c **** #define US_WPMR_WPKEY_PASSWD    US_WPMR_WPKEY(0x555341U)
  76:.././hal/sam3u1c/usart.c **** #endif
  77:.././hal/sam3u1c/usart.c **** 
  78:.././hal/sam3u1c/usart.c **** #ifndef US_WPMR_WPKEY_PASSWD
  79:.././hal/sam3u1c/usart.c **** #  define US_WPMR_WPKEY_PASSWD US_WPMR_WPKEY(US_WPKEY_VALUE)
  80:.././hal/sam3u1c/usart.c **** #endif
  81:.././hal/sam3u1c/usart.c **** 
  82:.././hal/sam3u1c/usart.c **** /* The CD value scope programmed in MR register. */
  83:.././hal/sam3u1c/usart.c **** #define MIN_CD_VALUE                  0x01
  84:.././hal/sam3u1c/usart.c **** #define MIN_CD_VALUE_SPI              0x04
  85:.././hal/sam3u1c/usart.c **** #define MAX_CD_VALUE                  US_BRGR_CD_Msk
  86:.././hal/sam3u1c/usart.c **** 
  87:.././hal/sam3u1c/usart.c **** /* The receiver sampling divide of baudrate clock. */
  88:.././hal/sam3u1c/usart.c **** #define HIGH_FRQ_SAMPLE_DIV           16
  89:.././hal/sam3u1c/usart.c **** #define LOW_FRQ_SAMPLE_DIV            8
  90:.././hal/sam3u1c/usart.c **** 
  91:.././hal/sam3u1c/usart.c **** /* Max transmitter timeguard. */
  92:.././hal/sam3u1c/usart.c **** #define MAX_TRAN_GUARD_TIME           US_TTGR_TG_Msk
  93:.././hal/sam3u1c/usart.c **** 
  94:.././hal/sam3u1c/usart.c **** /* The non-existent parity error number. */
  95:.././hal/sam3u1c/usart.c **** #define USART_PARITY_ERROR            5
  96:.././hal/sam3u1c/usart.c **** 
  97:.././hal/sam3u1c/usart.c **** /* ISO7816 protocol type. */
  98:.././hal/sam3u1c/usart.c **** #define ISO7816_T_0                   0
  99:.././hal/sam3u1c/usart.c **** #define ISO7816_T_1                   1
 100:.././hal/sam3u1c/usart.c **** 
 101:.././hal/sam3u1c/usart.c **** /**
 102:.././hal/sam3u1c/usart.c ****  * \brief Calculate a clock divider(CD) and a fractional part (FP) for the
 103:.././hal/sam3u1c/usart.c ****  * USART asynchronous modes to generate a baudrate as close as possible to
 104:.././hal/sam3u1c/usart.c ****  * the baudrate set point.
 105:.././hal/sam3u1c/usart.c ****  *
 106:.././hal/sam3u1c/usart.c ****  * \note Baud rate calculation: Baudrate = ul_mck/(Over * (CD + FP/8))
 107:.././hal/sam3u1c/usart.c ****  * (Over being 16 or 8). The maximal oversampling is selected if it allows to
 108:.././hal/sam3u1c/usart.c ****  * generate a baudrate close to the set point.
 109:.././hal/sam3u1c/usart.c ****  *
 110:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 111:.././hal/sam3u1c/usart.c ****  * \param baudrate Baud rate set point.
 112:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 113:.././hal/sam3u1c/usart.c ****  *
 114:.././hal/sam3u1c/usart.c ****  * \retval 0 Baud rate is successfully initialized.
 115:.././hal/sam3u1c/usart.c ****  * \retval 1 Baud rate set point is out of range for the given input clock
 116:.././hal/sam3u1c/usart.c ****  * frequency.
 117:.././hal/sam3u1c/usart.c ****  */
 118:.././hal/sam3u1c/usart.c **** uint32_t usart_set_async_baudrate(Usart *p_usart,
 119:.././hal/sam3u1c/usart.c **** 		uint32_t baudrate, uint32_t ul_mck)
 120:.././hal/sam3u1c/usart.c **** {
  37              	 .loc 1 120 0
  38              	 .cfi_startproc
  39              	 
  40              	 
  41              	 
  42 0000 80B4     	 push {r7}
  43              	.LCFI0:
  44              	 .cfi_def_cfa_offset 4
  45              	 .cfi_offset 7,-4
  46 0002 89B0     	 sub sp,sp,#36
  47              	.LCFI1:
  48              	 .cfi_def_cfa_offset 40
  49 0004 00AF     	 add r7,sp,#0
  50              	.LCFI2:
  51              	 .cfi_def_cfa_register 7
  52 0006 F860     	 str r0,[r7,#12]
  53 0008 B960     	 str r1,[r7,#8]
  54 000a 7A60     	 str r2,[r7,#4]
 121:.././hal/sam3u1c/usart.c **** 	uint32_t over;
 122:.././hal/sam3u1c/usart.c **** 	uint32_t cd_fp;
 123:.././hal/sam3u1c/usart.c **** 	uint32_t cd;
 124:.././hal/sam3u1c/usart.c **** 	uint32_t fp;
 125:.././hal/sam3u1c/usart.c **** 
 126:.././hal/sam3u1c/usart.c **** 	/* Calculate the receiver sampling divide of baudrate clock. */
 127:.././hal/sam3u1c/usart.c **** 	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  55              	 .loc 1 127 0
  56 000c BB68     	 ldr r3,[r7,#8]
  57 000e 1A01     	 lsls r2,r3,#4
  58 0010 7B68     	 ldr r3,[r7,#4]
  59 0012 9A42     	 cmp r2,r3
  60 0014 02D8     	 bhi .L2
 128:.././hal/sam3u1c/usart.c **** 		over = HIGH_FRQ_SAMPLE_DIV;
  61              	 .loc 1 128 0
  62 0016 1023     	 movs r3,#16
  63 0018 FB61     	 str r3,[r7,#28]
  64 001a 01E0     	 b .L3
  65              	.L2:
 129:.././hal/sam3u1c/usart.c **** 	} else {
 130:.././hal/sam3u1c/usart.c **** 		over = LOW_FRQ_SAMPLE_DIV;
  66              	 .loc 1 130 0
  67 001c 0823     	 movs r3,#8
  68 001e FB61     	 str r3,[r7,#28]
  69              	.L3:
 131:.././hal/sam3u1c/usart.c **** 	}
 132:.././hal/sam3u1c/usart.c **** 
 133:.././hal/sam3u1c/usart.c **** 	/* Calculate clock divider according to the fraction calculated formula. */
 134:.././hal/sam3u1c/usart.c **** 	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  70              	 .loc 1 134 0
  71 0020 7B68     	 ldr r3,[r7,#4]
  72 0022 DA00     	 lsls r2,r3,#3
  73 0024 FB69     	 ldr r3,[r7,#28]
  74 0026 B968     	 ldr r1,[r7,#8]
  75 0028 01FB03F3 	 mul r3,r1,r3
  76 002c 5B08     	 lsrs r3,r3,#1
  77 002e 1A44     	 add r2,r2,r3
  78 0030 FB69     	 ldr r3,[r7,#28]
  79 0032 B968     	 ldr r1,[r7,#8]
  80 0034 01FB03F3 	 mul r3,r1,r3
  81 0038 B2FBF3F3 	 udiv r3,r2,r3
  82 003c BB61     	 str r3,[r7,#24]
 135:.././hal/sam3u1c/usart.c **** 	cd = cd_fp >> 3;
  83              	 .loc 1 135 0
  84 003e BB69     	 ldr r3,[r7,#24]
  85 0040 DB08     	 lsrs r3,r3,#3
  86 0042 7B61     	 str r3,[r7,#20]
 136:.././hal/sam3u1c/usart.c **** 	fp = cd_fp & 0x07;
  87              	 .loc 1 136 0
  88 0044 BB69     	 ldr r3,[r7,#24]
  89 0046 03F00703 	 and r3,r3,#7
  90 004a 3B61     	 str r3,[r7,#16]
 137:.././hal/sam3u1c/usart.c **** 	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  91              	 .loc 1 137 0
  92 004c 7B69     	 ldr r3,[r7,#20]
  93 004e 002B     	 cmp r3,#0
  94 0050 03D0     	 beq .L4
  95              	 .loc 1 137 0 is_stmt 0 discriminator 1
  96 0052 7B69     	 ldr r3,[r7,#20]
  97 0054 B3F5803F 	 cmp r3,#65536
  98 0058 01D3     	 bcc .L5
  99              	.L4:
 138:.././hal/sam3u1c/usart.c **** 		return 1;
 100              	 .loc 1 138 0 is_stmt 1
 101 005a 0123     	 movs r3,#1
 102 005c 0FE0     	 b .L6
 103              	.L5:
 139:.././hal/sam3u1c/usart.c **** 	}
 140:.././hal/sam3u1c/usart.c **** 
 141:.././hal/sam3u1c/usart.c **** 	/* Configure the OVER bit in MR register. */
 142:.././hal/sam3u1c/usart.c **** 	if (over == 8) {
 104              	 .loc 1 142 0
 105 005e FB69     	 ldr r3,[r7,#28]
 106 0060 082B     	 cmp r3,#8
 107 0062 05D1     	 bne .L7
 143:.././hal/sam3u1c/usart.c **** 		p_usart->US_MR |= US_MR_OVER;
 108              	 .loc 1 143 0
 109 0064 FB68     	 ldr r3,[r7,#12]
 110 0066 5B68     	 ldr r3,[r3,#4]
 111 0068 43F40022 	 orr r2,r3,#524288
 112 006c FB68     	 ldr r3,[r7,#12]
 113 006e 5A60     	 str r2,[r3,#4]
 114              	.L7:
 144:.././hal/sam3u1c/usart.c **** 	}
 145:.././hal/sam3u1c/usart.c **** 
 146:.././hal/sam3u1c/usart.c **** 	/* Configure the baudrate generate register. */
 147:.././hal/sam3u1c/usart.c **** 	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
 115              	 .loc 1 147 0
 116 0070 3B69     	 ldr r3,[r7,#16]
 117 0072 1A04     	 lsls r2,r3,#16
 118 0074 7B69     	 ldr r3,[r7,#20]
 119 0076 1A43     	 orrs r2,r2,r3
 120 0078 FB68     	 ldr r3,[r7,#12]
 121 007a 1A62     	 str r2,[r3,#32]
 148:.././hal/sam3u1c/usart.c **** 
 149:.././hal/sam3u1c/usart.c **** 	return 0;
 122              	 .loc 1 149 0
 123 007c 0023     	 movs r3,#0
 124              	.L6:
 150:.././hal/sam3u1c/usart.c **** }
 125              	 .loc 1 150 0
 126 007e 1846     	 mov r0,r3
 127 0080 2437     	 adds r7,r7,#36
 128              	.LCFI3:
 129              	 .cfi_def_cfa_offset 4
 130 0082 BD46     	 mov sp,r7
 131              	.LCFI4:
 132              	 .cfi_def_cfa_register 13
 133              	 
 134 0084 80BC     	 pop {r7}
 135              	.LCFI5:
 136              	 .cfi_restore 7
 137              	 .cfi_def_cfa_offset 0
 138 0086 7047     	 bx lr
 139              	 .cfi_endproc
 140              	.LFE67:
 142              	 .section .text.usart_set_sync_master_baudrate,"ax",%progbits
 143              	 .align 1
 144              	 .syntax unified
 145              	 .thumb
 146              	 .thumb_func
 147              	 .fpu softvfp
 149              	usart_set_sync_master_baudrate:
 150              	.LFB68:
 151:.././hal/sam3u1c/usart.c **** 
 152:.././hal/sam3u1c/usart.c **** /**
 153:.././hal/sam3u1c/usart.c ****  * \brief Calculate a clock divider for the USART synchronous master modes
 154:.././hal/sam3u1c/usart.c ****  * to generate a baudrate as close as possible to the baudrate set point.
 155:.././hal/sam3u1c/usart.c ****  *
 156:.././hal/sam3u1c/usart.c ****  * \note Synchronous baudrate calculation: baudrate = ul_mck / cd
 157:.././hal/sam3u1c/usart.c ****  *
 158:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 159:.././hal/sam3u1c/usart.c ****  * \param baudrate Baud rate set point.
 160:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 161:.././hal/sam3u1c/usart.c ****  *
 162:.././hal/sam3u1c/usart.c ****  * \retval 0 Baud rate is successfully initialized.
 163:.././hal/sam3u1c/usart.c ****  * \retval 1 Baud rate set point is out of range for the given input clock
 164:.././hal/sam3u1c/usart.c ****  * frequency.
 165:.././hal/sam3u1c/usart.c ****  */
 166:.././hal/sam3u1c/usart.c **** static uint32_t usart_set_sync_master_baudrate(Usart *p_usart,
 167:.././hal/sam3u1c/usart.c **** 		uint32_t baudrate, uint32_t ul_mck)
 168:.././hal/sam3u1c/usart.c **** {
 151              	 .loc 1 168 0
 152              	 .cfi_startproc
 153              	 
 154              	 
 155              	 
 156 0000 80B4     	 push {r7}
 157              	.LCFI6:
 158              	 .cfi_def_cfa_offset 4
 159              	 .cfi_offset 7,-4
 160 0002 87B0     	 sub sp,sp,#28
 161              	.LCFI7:
 162              	 .cfi_def_cfa_offset 32
 163 0004 00AF     	 add r7,sp,#0
 164              	.LCFI8:
 165              	 .cfi_def_cfa_register 7
 166 0006 F860     	 str r0,[r7,#12]
 167 0008 B960     	 str r1,[r7,#8]
 168 000a 7A60     	 str r2,[r7,#4]
 169:.././hal/sam3u1c/usart.c **** 	uint32_t cd;
 170:.././hal/sam3u1c/usart.c **** 
 171:.././hal/sam3u1c/usart.c **** 	/* Calculate clock divider according to the formula in synchronous mode. */
 172:.././hal/sam3u1c/usart.c **** 	cd = (ul_mck + baudrate / 2) / baudrate;
 169              	 .loc 1 172 0
 170 000c BB68     	 ldr r3,[r7,#8]
 171 000e 5A08     	 lsrs r2,r3,#1
 172 0010 7B68     	 ldr r3,[r7,#4]
 173 0012 1A44     	 add r2,r2,r3
 174 0014 BB68     	 ldr r3,[r7,#8]
 175 0016 B2FBF3F3 	 udiv r3,r2,r3
 176 001a 7B61     	 str r3,[r7,#20]
 173:.././hal/sam3u1c/usart.c **** 
 174:.././hal/sam3u1c/usart.c **** 	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
 177              	 .loc 1 174 0
 178 001c 7B69     	 ldr r3,[r7,#20]
 179 001e 002B     	 cmp r3,#0
 180 0020 03D0     	 beq .L9
 181              	 .loc 1 174 0 is_stmt 0 discriminator 1
 182 0022 7B69     	 ldr r3,[r7,#20]
 183 0024 B3F5803F 	 cmp r3,#65536
 184 0028 01D3     	 bcc .L10
 185              	.L9:
 175:.././hal/sam3u1c/usart.c **** 		return 1;
 186              	 .loc 1 175 0 is_stmt 1
 187 002a 0123     	 movs r3,#1
 188 002c 0BE0     	 b .L11
 189              	.L10:
 176:.././hal/sam3u1c/usart.c **** 	}
 177:.././hal/sam3u1c/usart.c **** 
 178:.././hal/sam3u1c/usart.c **** 	/* Configure the baudrate generate register. */
 179:.././hal/sam3u1c/usart.c **** 	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
 190              	 .loc 1 179 0
 191 002e FB68     	 ldr r3,[r7,#12]
 192 0030 7A69     	 ldr r2,[r7,#20]
 193 0032 1A62     	 str r2,[r3,#32]
 180:.././hal/sam3u1c/usart.c **** 
 181:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
 194              	 .loc 1 181 0
 195 0034 FB68     	 ldr r3,[r7,#12]
 196 0036 5B68     	 ldr r3,[r3,#4]
 182:.././hal/sam3u1c/usart.c **** 			US_MR_USCLKS_MCK | US_MR_SYNC;
 197              	 .loc 1 182 0
 198 0038 23F49873 	 bic r3,r3,#304
 199 003c 43F48072 	 orr r2,r3,#256
 181:.././hal/sam3u1c/usart.c **** 			US_MR_USCLKS_MCK | US_MR_SYNC;
 200              	 .loc 1 181 0
 201 0040 FB68     	 ldr r3,[r7,#12]
 202 0042 5A60     	 str r2,[r3,#4]
 183:.././hal/sam3u1c/usart.c **** 	return 0;
 203              	 .loc 1 183 0
 204 0044 0023     	 movs r3,#0
 205              	.L11:
 184:.././hal/sam3u1c/usart.c **** }
 206              	 .loc 1 184 0
 207 0046 1846     	 mov r0,r3
 208 0048 1C37     	 adds r7,r7,#28
 209              	.LCFI9:
 210              	 .cfi_def_cfa_offset 4
 211 004a BD46     	 mov sp,r7
 212              	.LCFI10:
 213              	 .cfi_def_cfa_register 13
 214              	 
 215 004c 80BC     	 pop {r7}
 216              	.LCFI11:
 217              	 .cfi_restore 7
 218              	 .cfi_def_cfa_offset 0
 219 004e 7047     	 bx lr
 220              	 .cfi_endproc
 221              	.LFE68:
 223              	 .section .text.usart_set_sync_slave_baudrate,"ax",%progbits
 224              	 .align 1
 225              	 .syntax unified
 226              	 .thumb
 227              	 .thumb_func
 228              	 .fpu softvfp
 230              	usart_set_sync_slave_baudrate:
 231              	.LFB69:
 185:.././hal/sam3u1c/usart.c **** 
 186:.././hal/sam3u1c/usart.c **** /**
 187:.././hal/sam3u1c/usart.c ****  * \brief Select the SCK pin as the source of baud rate for the USART
 188:.././hal/sam3u1c/usart.c ****  * synchronous slave modes.
 189:.././hal/sam3u1c/usart.c ****  *
 190:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 191:.././hal/sam3u1c/usart.c ****  */
 192:.././hal/sam3u1c/usart.c **** static void usart_set_sync_slave_baudrate(Usart *p_usart)
 193:.././hal/sam3u1c/usart.c **** {
 232              	 .loc 1 193 0
 233              	 .cfi_startproc
 234              	 
 235              	 
 236              	 
 237 0000 80B4     	 push {r7}
 238              	.LCFI12:
 239              	 .cfi_def_cfa_offset 4
 240              	 .cfi_offset 7,-4
 241 0002 83B0     	 sub sp,sp,#12
 242              	.LCFI13:
 243              	 .cfi_def_cfa_offset 16
 244 0004 00AF     	 add r7,sp,#0
 245              	.LCFI14:
 246              	 .cfi_def_cfa_register 7
 247 0006 7860     	 str r0,[r7,#4]
 194:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
 248              	 .loc 1 194 0
 249 0008 7B68     	 ldr r3,[r7,#4]
 250 000a 5B68     	 ldr r3,[r3,#4]
 195:.././hal/sam3u1c/usart.c **** 			US_MR_USCLKS_SCK | US_MR_SYNC;
 251              	 .loc 1 195 0
 252 000c 43F49872 	 orr r2,r3,#304
 194:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
 253              	 .loc 1 194 0
 254 0010 7B68     	 ldr r3,[r7,#4]
 255 0012 5A60     	 str r2,[r3,#4]
 196:.././hal/sam3u1c/usart.c **** }
 256              	 .loc 1 196 0
 257 0014 00BF     	 nop
 258 0016 0C37     	 adds r7,r7,#12
 259              	.LCFI15:
 260              	 .cfi_def_cfa_offset 4
 261 0018 BD46     	 mov sp,r7
 262              	.LCFI16:
 263              	 .cfi_def_cfa_register 13
 264              	 
 265 001a 80BC     	 pop {r7}
 266              	.LCFI17:
 267              	 .cfi_restore 7
 268              	 .cfi_def_cfa_offset 0
 269 001c 7047     	 bx lr
 270              	 .cfi_endproc
 271              	.LFE69:
 273              	 .section .text.usart_set_iso7816_clock,"ax",%progbits
 274              	 .align 1
 275              	 .syntax unified
 276              	 .thumb
 277              	 .thumb_func
 278              	 .fpu softvfp
 280              	usart_set_iso7816_clock:
 281              	.LFB70:
 197:.././hal/sam3u1c/usart.c **** 
 198:.././hal/sam3u1c/usart.c **** 
 199:.././hal/sam3u1c/usart.c **** /**
 200:.././hal/sam3u1c/usart.c ****  * \brief Calculate a clock divider (\e CD) for the USART ISO7816 mode to
 201:.././hal/sam3u1c/usart.c ****  * generate an ISO7816 clock as close as possible to the clock set point.
 202:.././hal/sam3u1c/usart.c ****  *
 203:.././hal/sam3u1c/usart.c ****  * \note ISO7816 clock calculation: Clock = ul_mck / cd
 204:.././hal/sam3u1c/usart.c ****  *
 205:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 206:.././hal/sam3u1c/usart.c ****  * \param clock ISO7816 clock set point.
 207:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 208:.././hal/sam3u1c/usart.c ****  *
 209:.././hal/sam3u1c/usart.c ****  * \retval 0 ISO7816 clock is successfully initialized.
 210:.././hal/sam3u1c/usart.c ****  * \retval 1 ISO7816 clock set point is out of range for the given input clock
 211:.././hal/sam3u1c/usart.c ****  * frequency.
 212:.././hal/sam3u1c/usart.c ****  */
 213:.././hal/sam3u1c/usart.c **** static uint32_t usart_set_iso7816_clock(Usart *p_usart,
 214:.././hal/sam3u1c/usart.c **** 		uint32_t clock, uint32_t ul_mck)
 215:.././hal/sam3u1c/usart.c **** {
 282              	 .loc 1 215 0
 283              	 .cfi_startproc
 284              	 
 285              	 
 286              	 
 287 0000 80B4     	 push {r7}
 288              	.LCFI18:
 289              	 .cfi_def_cfa_offset 4
 290              	 .cfi_offset 7,-4
 291 0002 87B0     	 sub sp,sp,#28
 292              	.LCFI19:
 293              	 .cfi_def_cfa_offset 32
 294 0004 00AF     	 add r7,sp,#0
 295              	.LCFI20:
 296              	 .cfi_def_cfa_register 7
 297 0006 F860     	 str r0,[r7,#12]
 298 0008 B960     	 str r1,[r7,#8]
 299 000a 7A60     	 str r2,[r7,#4]
 216:.././hal/sam3u1c/usart.c **** 	uint32_t cd;
 217:.././hal/sam3u1c/usart.c **** 
 218:.././hal/sam3u1c/usart.c **** 	/* Calculate clock divider according to the formula in ISO7816 mode. */
 219:.././hal/sam3u1c/usart.c **** 	cd = (ul_mck + clock / 2) / clock;
 300              	 .loc 1 219 0
 301 000c BB68     	 ldr r3,[r7,#8]
 302 000e 5A08     	 lsrs r2,r3,#1
 303 0010 7B68     	 ldr r3,[r7,#4]
 304 0012 1A44     	 add r2,r2,r3
 305 0014 BB68     	 ldr r3,[r7,#8]
 306 0016 B2FBF3F3 	 udiv r3,r2,r3
 307 001a 7B61     	 str r3,[r7,#20]
 220:.././hal/sam3u1c/usart.c **** 
 221:.././hal/sam3u1c/usart.c **** 	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
 308              	 .loc 1 221 0
 309 001c 7B69     	 ldr r3,[r7,#20]
 310 001e 002B     	 cmp r3,#0
 311 0020 03D0     	 beq .L14
 312              	 .loc 1 221 0 is_stmt 0 discriminator 1
 313 0022 7B69     	 ldr r3,[r7,#20]
 314 0024 B3F5803F 	 cmp r3,#65536
 315 0028 01D3     	 bcc .L15
 316              	.L14:
 222:.././hal/sam3u1c/usart.c **** 		return 1;
 317              	 .loc 1 222 0 is_stmt 1
 318 002a 0123     	 movs r3,#1
 319 002c 0DE0     	 b .L16
 320              	.L15:
 223:.././hal/sam3u1c/usart.c **** 	}
 224:.././hal/sam3u1c/usart.c **** 
 225:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~(US_MR_USCLKS_Msk | US_MR_SYNC |
 321              	 .loc 1 225 0
 322 002e FB68     	 ldr r3,[r7,#12]
 323 0030 5B68     	 ldr r3,[r3,#4]
 226:.././hal/sam3u1c/usart.c **** 			US_MR_OVER)) | US_MR_USCLKS_MCK | US_MR_CLKO;
 324              	 .loc 1 226 0
 325 0032 23F44023 	 bic r3,r3,#786432
 326 0036 23F49873 	 bic r3,r3,#304
 327 003a 43F48022 	 orr r2,r3,#262144
 225:.././hal/sam3u1c/usart.c **** 			US_MR_OVER)) | US_MR_USCLKS_MCK | US_MR_CLKO;
 328              	 .loc 1 225 0
 329 003e FB68     	 ldr r3,[r7,#12]
 330 0040 5A60     	 str r2,[r3,#4]
 227:.././hal/sam3u1c/usart.c **** 
 228:.././hal/sam3u1c/usart.c **** 	/* Configure the baudrate generate register. */
 229:.././hal/sam3u1c/usart.c **** 	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
 331              	 .loc 1 229 0
 332 0042 FB68     	 ldr r3,[r7,#12]
 333 0044 7A69     	 ldr r2,[r7,#20]
 334 0046 1A62     	 str r2,[r3,#32]
 230:.././hal/sam3u1c/usart.c **** 
 231:.././hal/sam3u1c/usart.c **** 	return 0;
 335              	 .loc 1 231 0
 336 0048 0023     	 movs r3,#0
 337              	.L16:
 232:.././hal/sam3u1c/usart.c **** }
 338              	 .loc 1 232 0
 339 004a 1846     	 mov r0,r3
 340 004c 1C37     	 adds r7,r7,#28
 341              	.LCFI21:
 342              	 .cfi_def_cfa_offset 4
 343 004e BD46     	 mov sp,r7
 344              	.LCFI22:
 345              	 .cfi_def_cfa_register 13
 346              	 
 347 0050 80BC     	 pop {r7}
 348              	.LCFI23:
 349              	 .cfi_restore 7
 350              	 .cfi_def_cfa_offset 0
 351 0052 7047     	 bx lr
 352              	 .cfi_endproc
 353              	.LFE70:
 355              	 .section .text.usart_set_spi_master_baudrate,"ax",%progbits
 356              	 .align 1
 357              	 .syntax unified
 358              	 .thumb
 359              	 .thumb_func
 360              	 .fpu softvfp
 362              	usart_set_spi_master_baudrate:
 363              	.LFB71:
 233:.././hal/sam3u1c/usart.c **** 
 234:.././hal/sam3u1c/usart.c **** /**
 235:.././hal/sam3u1c/usart.c ****  * \brief Calculate a clock divider (\e CD) for the USART SPI master mode to
 236:.././hal/sam3u1c/usart.c ****  * generate a baud rate as close as possible to the baud rate set point.
 237:.././hal/sam3u1c/usart.c ****  *
 238:.././hal/sam3u1c/usart.c ****  * \note Baud rate calculation:
 239:.././hal/sam3u1c/usart.c ****  * \f$ Baudrate = \frac{SelectedClock}{CD} \f$.
 240:.././hal/sam3u1c/usart.c ****  *
 241:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 242:.././hal/sam3u1c/usart.c ****  * \param baudrate Baud rate set point.
 243:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 244:.././hal/sam3u1c/usart.c ****  *
 245:.././hal/sam3u1c/usart.c ****  * \retval 0 Baud rate is successfully initialized.
 246:.././hal/sam3u1c/usart.c ****  * \retval 1 Baud rate set point is out of range for the given input clock
 247:.././hal/sam3u1c/usart.c ****  * frequency.
 248:.././hal/sam3u1c/usart.c ****  */
 249:.././hal/sam3u1c/usart.c **** static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
 250:.././hal/sam3u1c/usart.c **** 		uint32_t baudrate, uint32_t ul_mck)
 251:.././hal/sam3u1c/usart.c **** {
 364              	 .loc 1 251 0
 365              	 .cfi_startproc
 366              	 
 367              	 
 368              	 
 369 0000 80B4     	 push {r7}
 370              	.LCFI24:
 371              	 .cfi_def_cfa_offset 4
 372              	 .cfi_offset 7,-4
 373 0002 87B0     	 sub sp,sp,#28
 374              	.LCFI25:
 375              	 .cfi_def_cfa_offset 32
 376 0004 00AF     	 add r7,sp,#0
 377              	.LCFI26:
 378              	 .cfi_def_cfa_register 7
 379 0006 F860     	 str r0,[r7,#12]
 380 0008 B960     	 str r1,[r7,#8]
 381 000a 7A60     	 str r2,[r7,#4]
 252:.././hal/sam3u1c/usart.c **** 	uint32_t cd;
 253:.././hal/sam3u1c/usart.c **** 
 254:.././hal/sam3u1c/usart.c **** 	/* Calculate the clock divider according to the formula in SPI mode. */
 255:.././hal/sam3u1c/usart.c **** 	cd = (ul_mck + baudrate / 2) / baudrate;
 382              	 .loc 1 255 0
 383 000c BB68     	 ldr r3,[r7,#8]
 384 000e 5A08     	 lsrs r2,r3,#1
 385 0010 7B68     	 ldr r3,[r7,#4]
 386 0012 1A44     	 add r2,r2,r3
 387 0014 BB68     	 ldr r3,[r7,#8]
 388 0016 B2FBF3F3 	 udiv r3,r2,r3
 389 001a 7B61     	 str r3,[r7,#20]
 256:.././hal/sam3u1c/usart.c **** 
 257:.././hal/sam3u1c/usart.c **** 	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
 390              	 .loc 1 257 0
 391 001c 7B69     	 ldr r3,[r7,#20]
 392 001e 032B     	 cmp r3,#3
 393 0020 03D9     	 bls .L18
 394              	 .loc 1 257 0 is_stmt 0 discriminator 1
 395 0022 7B69     	 ldr r3,[r7,#20]
 396 0024 B3F5803F 	 cmp r3,#65536
 397 0028 01D3     	 bcc .L19
 398              	.L18:
 258:.././hal/sam3u1c/usart.c **** 		return 1;
 399              	 .loc 1 258 0 is_stmt 1
 400 002a 0123     	 movs r3,#1
 401 002c 03E0     	 b .L20
 402              	.L19:
 259:.././hal/sam3u1c/usart.c **** 	}
 260:.././hal/sam3u1c/usart.c **** 
 261:.././hal/sam3u1c/usart.c **** 	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
 403              	 .loc 1 261 0
 404 002e FB68     	 ldr r3,[r7,#12]
 405 0030 7A69     	 ldr r2,[r7,#20]
 406 0032 1A62     	 str r2,[r3,#32]
 262:.././hal/sam3u1c/usart.c **** 
 263:.././hal/sam3u1c/usart.c **** 	return 0;
 407              	 .loc 1 263 0
 408 0034 0023     	 movs r3,#0
 409              	.L20:
 264:.././hal/sam3u1c/usart.c **** }
 410              	 .loc 1 264 0
 411 0036 1846     	 mov r0,r3
 412 0038 1C37     	 adds r7,r7,#28
 413              	.LCFI27:
 414              	 .cfi_def_cfa_offset 4
 415 003a BD46     	 mov sp,r7
 416              	.LCFI28:
 417              	 .cfi_def_cfa_register 13
 418              	 
 419 003c 80BC     	 pop {r7}
 420              	.LCFI29:
 421              	 .cfi_restore 7
 422              	 .cfi_def_cfa_offset 0
 423 003e 7047     	 bx lr
 424              	 .cfi_endproc
 425              	.LFE71:
 427              	 .section .text.usart_set_spi_slave_baudrate,"ax",%progbits
 428              	 .align 1
 429              	 .syntax unified
 430              	 .thumb
 431              	 .thumb_func
 432              	 .fpu softvfp
 434              	usart_set_spi_slave_baudrate:
 435              	.LFB72:
 265:.././hal/sam3u1c/usart.c **** 
 266:.././hal/sam3u1c/usart.c **** /**
 267:.././hal/sam3u1c/usart.c ****  * \brief Select the SCK pin as the source of baudrate for the USART SPI slave
 268:.././hal/sam3u1c/usart.c ****  * mode.
 269:.././hal/sam3u1c/usart.c ****  *
 270:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 271:.././hal/sam3u1c/usart.c ****  */
 272:.././hal/sam3u1c/usart.c **** static void usart_set_spi_slave_baudrate(Usart *p_usart)
 273:.././hal/sam3u1c/usart.c **** {
 436              	 .loc 1 273 0
 437              	 .cfi_startproc
 438              	 
 439              	 
 440              	 
 441 0000 80B4     	 push {r7}
 442              	.LCFI30:
 443              	 .cfi_def_cfa_offset 4
 444              	 .cfi_offset 7,-4
 445 0002 83B0     	 sub sp,sp,#12
 446              	.LCFI31:
 447              	 .cfi_def_cfa_offset 16
 448 0004 00AF     	 add r7,sp,#0
 449              	.LCFI32:
 450              	 .cfi_def_cfa_register 7
 451 0006 7860     	 str r0,[r7,#4]
 274:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR &= ~US_MR_USCLKS_Msk;
 452              	 .loc 1 274 0
 453 0008 7B68     	 ldr r3,[r7,#4]
 454 000a 5B68     	 ldr r3,[r3,#4]
 455 000c 23F03002 	 bic r2,r3,#48
 456 0010 7B68     	 ldr r3,[r7,#4]
 457 0012 5A60     	 str r2,[r3,#4]
 275:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR |= US_MR_USCLKS_SCK;
 458              	 .loc 1 275 0
 459 0014 7B68     	 ldr r3,[r7,#4]
 460 0016 5B68     	 ldr r3,[r3,#4]
 461 0018 43F03002 	 orr r2,r3,#48
 462 001c 7B68     	 ldr r3,[r7,#4]
 463 001e 5A60     	 str r2,[r3,#4]
 276:.././hal/sam3u1c/usart.c **** }
 464              	 .loc 1 276 0
 465 0020 00BF     	 nop
 466 0022 0C37     	 adds r7,r7,#12
 467              	.LCFI33:
 468              	 .cfi_def_cfa_offset 4
 469 0024 BD46     	 mov sp,r7
 470              	.LCFI34:
 471              	 .cfi_def_cfa_register 13
 472              	 
 473 0026 80BC     	 pop {r7}
 474              	.LCFI35:
 475              	 .cfi_restore 7
 476              	 .cfi_def_cfa_offset 0
 477 0028 7047     	 bx lr
 478              	 .cfi_endproc
 479              	.LFE72:
 481              	 .section .text.usart_reset,"ax",%progbits
 482              	 .align 1
 483              	 .global usart_reset
 484              	 .syntax unified
 485              	 .thumb
 486              	 .thumb_func
 487              	 .fpu softvfp
 489              	usart_reset:
 490              	.LFB73:
 277:.././hal/sam3u1c/usart.c **** 
 278:.././hal/sam3u1c/usart.c **** /**
 279:.././hal/sam3u1c/usart.c ****  * \brief Reset the USART and disable TX and RX.
 280:.././hal/sam3u1c/usart.c ****  *
 281:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 282:.././hal/sam3u1c/usart.c ****  */
 283:.././hal/sam3u1c/usart.c **** void usart_reset(Usart *p_usart)
 284:.././hal/sam3u1c/usart.c **** {
 491              	 .loc 1 284 0
 492              	 .cfi_startproc
 493              	 
 494              	 
 495 0000 80B5     	 push {r7,lr}
 496              	.LCFI36:
 497              	 .cfi_def_cfa_offset 8
 498              	 .cfi_offset 7,-8
 499              	 .cfi_offset 14,-4
 500 0002 82B0     	 sub sp,sp,#8
 501              	.LCFI37:
 502              	 .cfi_def_cfa_offset 16
 503 0004 00AF     	 add r7,sp,#0
 504              	.LCFI38:
 505              	 .cfi_def_cfa_register 7
 506 0006 7860     	 str r0,[r7,#4]
 285:.././hal/sam3u1c/usart.c **** 	/* Disable the Write Protect. */
 286:.././hal/sam3u1c/usart.c **** 	usart_disable_writeprotect(p_usart);
 507              	 .loc 1 286 0
 508 0008 7868     	 ldr r0,[r7,#4]
 509 000a 0F4B     	 ldr r3,.L23
 510 000c 9847     	 blx r3
 511              	.LVL0:
 287:.././hal/sam3u1c/usart.c **** 
 288:.././hal/sam3u1c/usart.c **** 	/* Reset registers that could cause unpredictable behavior after reset. */
 289:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR = 0;
 512              	 .loc 1 289 0
 513 000e 7B68     	 ldr r3,[r7,#4]
 514 0010 0022     	 movs r2,#0
 515 0012 5A60     	 str r2,[r3,#4]
 290:.././hal/sam3u1c/usart.c **** 	p_usart->US_RTOR = 0;
 516              	 .loc 1 290 0
 517 0014 7B68     	 ldr r3,[r7,#4]
 518 0016 0022     	 movs r2,#0
 519 0018 5A62     	 str r2,[r3,#36]
 291:.././hal/sam3u1c/usart.c **** 	p_usart->US_TTGR = 0;
 520              	 .loc 1 291 0
 521 001a 7B68     	 ldr r3,[r7,#4]
 522 001c 0022     	 movs r2,#0
 523 001e 9A62     	 str r2,[r3,#40]
 292:.././hal/sam3u1c/usart.c **** 
 293:.././hal/sam3u1c/usart.c **** 	/* Disable TX and RX. */
 294:.././hal/sam3u1c/usart.c **** 	usart_reset_tx(p_usart);
 524              	 .loc 1 294 0
 525 0020 7868     	 ldr r0,[r7,#4]
 526 0022 0A4B     	 ldr r3,.L23+4
 527 0024 9847     	 blx r3
 528              	.LVL1:
 295:.././hal/sam3u1c/usart.c **** 	usart_reset_rx(p_usart);
 529              	 .loc 1 295 0
 530 0026 7868     	 ldr r0,[r7,#4]
 531 0028 094B     	 ldr r3,.L23+8
 532 002a 9847     	 blx r3
 533              	.LVL2:
 296:.././hal/sam3u1c/usart.c **** 	/* Reset status bits. */
 297:.././hal/sam3u1c/usart.c **** 	usart_reset_status(p_usart);
 534              	 .loc 1 297 0
 535 002c 7868     	 ldr r0,[r7,#4]
 536 002e 094B     	 ldr r3,.L23+12
 537 0030 9847     	 blx r3
 538              	.LVL3:
 298:.././hal/sam3u1c/usart.c **** 	/* Turn off RTS and DTR if exist. */
 299:.././hal/sam3u1c/usart.c **** 	usart_drive_RTS_pin_high(p_usart);
 539              	 .loc 1 299 0
 540 0032 7868     	 ldr r0,[r7,#4]
 541 0034 084B     	 ldr r3,.L23+16
 542 0036 9847     	 blx r3
 543              	.LVL4:
 300:.././hal/sam3u1c/usart.c **** #if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
 301:.././hal/sam3u1c/usart.c **** 	usart_drive_DTR_pin_high(p_usart);
 544              	 .loc 1 301 0
 545 0038 7868     	 ldr r0,[r7,#4]
 546 003a 084B     	 ldr r3,.L23+20
 547 003c 9847     	 blx r3
 548              	.LVL5:
 302:.././hal/sam3u1c/usart.c **** #endif
 303:.././hal/sam3u1c/usart.c **** }
 549              	 .loc 1 303 0
 550 003e 00BF     	 nop
 551 0040 0837     	 adds r7,r7,#8
 552              	.LCFI39:
 553              	 .cfi_def_cfa_offset 8
 554 0042 BD46     	 mov sp,r7
 555              	.LCFI40:
 556              	 .cfi_def_cfa_register 13
 557              	 
 558 0044 80BD     	 pop {r7,pc}
 559              	.L24:
 560 0046 00BF     	 .align 2
 561              	.L23:
 562 0048 00000000 	 .word usart_disable_writeprotect
 563 004c 00000000 	 .word usart_reset_tx
 564 0050 00000000 	 .word usart_reset_rx
 565 0054 00000000 	 .word usart_reset_status
 566 0058 00000000 	 .word usart_drive_RTS_pin_high
 567 005c 00000000 	 .word usart_drive_DTR_pin_high
 568              	 .cfi_endproc
 569              	.LFE73:
 571              	 .section .text.usart_init_rs232,"ax",%progbits
 572              	 .align 1
 573              	 .global usart_init_rs232
 574              	 .syntax unified
 575              	 .thumb
 576              	 .thumb_func
 577              	 .fpu softvfp
 579              	usart_init_rs232:
 580              	.LFB74:
 304:.././hal/sam3u1c/usart.c **** 
 305:.././hal/sam3u1c/usart.c **** /**
 306:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in RS232 mode.
 307:.././hal/sam3u1c/usart.c ****  *
 308:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 309:.././hal/sam3u1c/usart.c ****  *
 310:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 311:.././hal/sam3u1c/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 312:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 313:.././hal/sam3u1c/usart.c ****  *
 314:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 315:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 316:.././hal/sam3u1c/usart.c ****  */
 317:.././hal/sam3u1c/usart.c **** uint32_t usart_init_rs232(Usart *p_usart,
 318:.././hal/sam3u1c/usart.c **** 		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
 319:.././hal/sam3u1c/usart.c **** {
 581              	 .loc 1 319 0
 582              	 .cfi_startproc
 583              	 
 584              	 
 585 0000 80B5     	 push {r7,lr}
 586              	.LCFI41:
 587              	 .cfi_def_cfa_offset 8
 588              	 .cfi_offset 7,-8
 589              	 .cfi_offset 14,-4
 590 0002 84B0     	 sub sp,sp,#16
 591              	.LCFI42:
 592              	 .cfi_def_cfa_offset 24
 593 0004 00AF     	 add r7,sp,#0
 594              	.LCFI43:
 595              	 .cfi_def_cfa_register 7
 596 0006 F860     	 str r0,[r7,#12]
 597 0008 B960     	 str r1,[r7,#8]
 598 000a 7A60     	 str r2,[r7,#4]
 320:.././hal/sam3u1c/usart.c **** 	static uint32_t ul_reg_val;
 321:.././hal/sam3u1c/usart.c **** 
 322:.././hal/sam3u1c/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 323:.././hal/sam3u1c/usart.c **** 	usart_reset(p_usart);
 599              	 .loc 1 323 0
 600 000c F868     	 ldr r0,[r7,#12]
 601 000e 1A4B     	 ldr r3,.L29
 602 0010 9847     	 blx r3
 603              	.LVL6:
 324:.././hal/sam3u1c/usart.c **** 
 325:.././hal/sam3u1c/usart.c **** 	ul_reg_val = 0;
 604              	 .loc 1 325 0
 605 0012 1A4B     	 ldr r3,.L29+4
 606 0014 0022     	 movs r2,#0
 607 0016 1A60     	 str r2,[r3]
 326:.././hal/sam3u1c/usart.c **** 	/* Check whether the input values are legal. */
 327:.././hal/sam3u1c/usart.c **** 	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
 608              	 .loc 1 327 0
 609 0018 BB68     	 ldr r3,[r7,#8]
 610 001a 002B     	 cmp r3,#0
 611 001c 09D0     	 beq .L26
 612              	 .loc 1 327 0 is_stmt 0 discriminator 1
 613 001e BB68     	 ldr r3,[r7,#8]
 614 0020 1B68     	 ldr r3,[r3]
 615 0022 7A68     	 ldr r2,[r7,#4]
 616 0024 1946     	 mov r1,r3
 617 0026 F868     	 ldr r0,[r7,#12]
 618 0028 154B     	 ldr r3,.L29+8
 619 002a 9847     	 blx r3
 620              	.LVL7:
 621 002c 0346     	 mov r3,r0
 622 002e 002B     	 cmp r3,#0
 623 0030 01D0     	 beq .L27
 624              	.L26:
 328:.././hal/sam3u1c/usart.c **** 			p_usart_opt->baudrate, ul_mck)) {
 329:.././hal/sam3u1c/usart.c **** 		return 1;
 625              	 .loc 1 329 0 is_stmt 1
 626 0032 0123     	 movs r3,#1
 627 0034 1BE0     	 b .L28
 628              	.L27:
 330:.././hal/sam3u1c/usart.c **** 	}
 331:.././hal/sam3u1c/usart.c **** 
 332:.././hal/sam3u1c/usart.c **** 	/* Configure the USART option. */
 333:.././hal/sam3u1c/usart.c **** 	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
 629              	 .loc 1 333 0
 630 0036 BB68     	 ldr r3,[r7,#8]
 631 0038 5A68     	 ldr r2,[r3,#4]
 632 003a BB68     	 ldr r3,[r7,#8]
 633 003c 9B68     	 ldr r3,[r3,#8]
 634 003e 1A43     	 orrs r2,r2,r3
 334:.././hal/sam3u1c/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 635              	 .loc 1 334 0
 636 0040 BB68     	 ldr r3,[r7,#8]
 637 0042 1B69     	 ldr r3,[r3,#16]
 333:.././hal/sam3u1c/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 638              	 .loc 1 333 0
 639 0044 1A43     	 orrs r2,r2,r3
 640              	 .loc 1 334 0
 641 0046 BB68     	 ldr r3,[r7,#8]
 642 0048 DB68     	 ldr r3,[r3,#12]
 643 004a 1A43     	 orrs r2,r2,r3
 333:.././hal/sam3u1c/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 644              	 .loc 1 333 0
 645 004c 0B4B     	 ldr r3,.L29+4
 646 004e 1B68     	 ldr r3,[r3]
 647 0050 1343     	 orrs r3,r3,r2
 648 0052 0A4A     	 ldr r2,.L29+4
 649 0054 1360     	 str r3,[r2]
 335:.././hal/sam3u1c/usart.c **** 
 336:.././hal/sam3u1c/usart.c **** 	/* Configure the USART mode as normal mode. */
 337:.././hal/sam3u1c/usart.c **** 	ul_reg_val |= US_MR_USART_MODE_NORMAL;
 650              	 .loc 1 337 0
 651 0056 094B     	 ldr r3,.L29+4
 652 0058 1B68     	 ldr r3,[r3]
 653 005a 084A     	 ldr r2,.L29+4
 654 005c 1360     	 str r3,[r2]
 338:.././hal/sam3u1c/usart.c **** 
 339:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR |= ul_reg_val;
 655              	 .loc 1 339 0
 656 005e FB68     	 ldr r3,[r7,#12]
 657 0060 5A68     	 ldr r2,[r3,#4]
 658 0062 064B     	 ldr r3,.L29+4
 659 0064 1B68     	 ldr r3,[r3]
 660 0066 1A43     	 orrs r2,r2,r3
 661 0068 FB68     	 ldr r3,[r7,#12]
 662 006a 5A60     	 str r2,[r3,#4]
 340:.././hal/sam3u1c/usart.c **** 
 341:.././hal/sam3u1c/usart.c **** 	return 0;
 663              	 .loc 1 341 0
 664 006c 0023     	 movs r3,#0
 665              	.L28:
 342:.././hal/sam3u1c/usart.c **** }
 666              	 .loc 1 342 0
 667 006e 1846     	 mov r0,r3
 668 0070 1037     	 adds r7,r7,#16
 669              	.LCFI44:
 670              	 .cfi_def_cfa_offset 8
 671 0072 BD46     	 mov sp,r7
 672              	.LCFI45:
 673              	 .cfi_def_cfa_register 13
 674              	 
 675 0074 80BD     	 pop {r7,pc}
 676              	.L30:
 677 0076 00BF     	 .align 2
 678              	.L29:
 679 0078 00000000 	 .word usart_reset
 680 007c 00000000 	 .word ul_reg_val.7092
 681 0080 00000000 	 .word usart_set_async_baudrate
 682              	 .cfi_endproc
 683              	.LFE74:
 685              	 .section .text.usart_init_hw_handshaking,"ax",%progbits
 686              	 .align 1
 687              	 .global usart_init_hw_handshaking
 688              	 .syntax unified
 689              	 .thumb
 690              	 .thumb_func
 691              	 .fpu softvfp
 693              	usart_init_hw_handshaking:
 694              	.LFB75:
 343:.././hal/sam3u1c/usart.c **** 
 344:.././hal/sam3u1c/usart.c **** /**
 345:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in hardware handshaking mode.
 346:.././hal/sam3u1c/usart.c ****  *
 347:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 348:.././hal/sam3u1c/usart.c ****  *
 349:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 350:.././hal/sam3u1c/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 351:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 352:.././hal/sam3u1c/usart.c ****  *
 353:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 354:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 355:.././hal/sam3u1c/usart.c ****  */
 356:.././hal/sam3u1c/usart.c **** uint32_t usart_init_hw_handshaking(Usart *p_usart,
 357:.././hal/sam3u1c/usart.c **** 		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
 358:.././hal/sam3u1c/usart.c **** {
 695              	 .loc 1 358 0
 696              	 .cfi_startproc
 697              	 
 698              	 
 699 0000 80B5     	 push {r7,lr}
 700              	.LCFI46:
 701              	 .cfi_def_cfa_offset 8
 702              	 .cfi_offset 7,-8
 703              	 .cfi_offset 14,-4
 704 0002 84B0     	 sub sp,sp,#16
 705              	.LCFI47:
 706              	 .cfi_def_cfa_offset 24
 707 0004 00AF     	 add r7,sp,#0
 708              	.LCFI48:
 709              	 .cfi_def_cfa_register 7
 710 0006 F860     	 str r0,[r7,#12]
 711 0008 B960     	 str r1,[r7,#8]
 712 000a 7A60     	 str r2,[r7,#4]
 359:.././hal/sam3u1c/usart.c **** 	/* Initialize the USART as standard RS232. */
 360:.././hal/sam3u1c/usart.c **** 	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
 713              	 .loc 1 360 0
 714 000c 7A68     	 ldr r2,[r7,#4]
 715 000e B968     	 ldr r1,[r7,#8]
 716 0010 F868     	 ldr r0,[r7,#12]
 717 0012 0A4B     	 ldr r3,.L34
 718 0014 9847     	 blx r3
 719              	.LVL8:
 720 0016 0346     	 mov r3,r0
 721 0018 002B     	 cmp r3,#0
 722 001a 01D0     	 beq .L32
 361:.././hal/sam3u1c/usart.c **** 		return 1;
 723              	 .loc 1 361 0
 724 001c 0123     	 movs r3,#1
 725 001e 08E0     	 b .L33
 726              	.L32:
 362:.././hal/sam3u1c/usart.c **** 	}
 363:.././hal/sam3u1c/usart.c **** 
 364:.././hal/sam3u1c/usart.c **** 	/* Set hardware handshaking mode. */
 365:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
 727              	 .loc 1 365 0
 728 0020 FB68     	 ldr r3,[r7,#12]
 729 0022 5B68     	 ldr r3,[r3,#4]
 730 0024 23F00F03 	 bic r3,r3,#15
 731 0028 43F00202 	 orr r2,r3,#2
 732 002c FB68     	 ldr r3,[r7,#12]
 733 002e 5A60     	 str r2,[r3,#4]
 366:.././hal/sam3u1c/usart.c **** 			US_MR_USART_MODE_HW_HANDSHAKING;
 367:.././hal/sam3u1c/usart.c **** 
 368:.././hal/sam3u1c/usart.c **** 	return 0;
 734              	 .loc 1 368 0
 735 0030 0023     	 movs r3,#0
 736              	.L33:
 369:.././hal/sam3u1c/usart.c **** }
 737              	 .loc 1 369 0
 738 0032 1846     	 mov r0,r3
 739 0034 1037     	 adds r7,r7,#16
 740              	.LCFI49:
 741              	 .cfi_def_cfa_offset 8
 742 0036 BD46     	 mov sp,r7
 743              	.LCFI50:
 744              	 .cfi_def_cfa_register 13
 745              	 
 746 0038 80BD     	 pop {r7,pc}
 747              	.L35:
 748 003a 00BF     	 .align 2
 749              	.L34:
 750 003c 00000000 	 .word usart_init_rs232
 751              	 .cfi_endproc
 752              	.LFE75:
 754              	 .section .text.usart_init_modem,"ax",%progbits
 755              	 .align 1
 756              	 .global usart_init_modem
 757              	 .syntax unified
 758              	 .thumb
 759              	 .thumb_func
 760              	 .fpu softvfp
 762              	usart_init_modem:
 763              	.LFB76:
 370:.././hal/sam3u1c/usart.c **** 
 371:.././hal/sam3u1c/usart.c **** #if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
 372:.././hal/sam3u1c/usart.c **** 
 373:.././hal/sam3u1c/usart.c **** /**
 374:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in modem mode.
 375:.././hal/sam3u1c/usart.c ****  *
 376:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 377:.././hal/sam3u1c/usart.c ****  *
 378:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 379:.././hal/sam3u1c/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 380:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 381:.././hal/sam3u1c/usart.c ****  *
 382:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 383:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 384:.././hal/sam3u1c/usart.c ****  */
 385:.././hal/sam3u1c/usart.c **** uint32_t usart_init_modem(Usart *p_usart,
 386:.././hal/sam3u1c/usart.c **** 		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
 387:.././hal/sam3u1c/usart.c **** {
 764              	 .loc 1 387 0
 765              	 .cfi_startproc
 766              	 
 767              	 
 768 0000 80B5     	 push {r7,lr}
 769              	.LCFI51:
 770              	 .cfi_def_cfa_offset 8
 771              	 .cfi_offset 7,-8
 772              	 .cfi_offset 14,-4
 773 0002 84B0     	 sub sp,sp,#16
 774              	.LCFI52:
 775              	 .cfi_def_cfa_offset 24
 776 0004 00AF     	 add r7,sp,#0
 777              	.LCFI53:
 778              	 .cfi_def_cfa_register 7
 779 0006 F860     	 str r0,[r7,#12]
 780 0008 B960     	 str r1,[r7,#8]
 781 000a 7A60     	 str r2,[r7,#4]
 388:.././hal/sam3u1c/usart.c **** 	/*
 389:.././hal/sam3u1c/usart.c **** 	 * SAM3S, SAM4S and SAM4E series support MODEM mode only on USART1,
 390:.././hal/sam3u1c/usart.c **** 	 * SAM3U and SAM4L series support MODEM mode only on USART0.
 391:.././hal/sam3u1c/usart.c **** 	 */
 392:.././hal/sam3u1c/usart.c **** #if (SAM3S || SAM4S || SAM4E)
 393:.././hal/sam3u1c/usart.c **** #ifdef USART1
 394:.././hal/sam3u1c/usart.c **** 	if (p_usart != USART1) {
 395:.././hal/sam3u1c/usart.c **** 		return 1;
 396:.././hal/sam3u1c/usart.c **** 	}
 397:.././hal/sam3u1c/usart.c **** #endif
 398:.././hal/sam3u1c/usart.c **** #elif (SAM3U || SAM4L)
 399:.././hal/sam3u1c/usart.c **** 	if (p_usart != USART0) {
 782              	 .loc 1 399 0
 783 000c FB68     	 ldr r3,[r7,#12]
 784 000e 0E4A     	 ldr r2,.L40
 785 0010 9342     	 cmp r3,r2
 786 0012 01D0     	 beq .L37
 400:.././hal/sam3u1c/usart.c **** 		return 1;
 787              	 .loc 1 400 0
 788 0014 0123     	 movs r3,#1
 789 0016 12E0     	 b .L38
 790              	.L37:
 401:.././hal/sam3u1c/usart.c **** 	}
 402:.././hal/sam3u1c/usart.c **** #endif
 403:.././hal/sam3u1c/usart.c **** 
 404:.././hal/sam3u1c/usart.c **** 	/* Initialize the USART as standard RS232. */
 405:.././hal/sam3u1c/usart.c **** 	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
 791              	 .loc 1 405 0
 792 0018 7A68     	 ldr r2,[r7,#4]
 793 001a B968     	 ldr r1,[r7,#8]
 794 001c F868     	 ldr r0,[r7,#12]
 795 001e 0B4B     	 ldr r3,.L40+4
 796 0020 9847     	 blx r3
 797              	.LVL9:
 798 0022 0346     	 mov r3,r0
 799 0024 002B     	 cmp r3,#0
 800 0026 01D0     	 beq .L39
 406:.././hal/sam3u1c/usart.c **** 		return 1;
 801              	 .loc 1 406 0
 802 0028 0123     	 movs r3,#1
 803 002a 08E0     	 b .L38
 804              	.L39:
 407:.././hal/sam3u1c/usart.c **** 	}
 408:.././hal/sam3u1c/usart.c **** 
 409:.././hal/sam3u1c/usart.c **** 	/* Set MODEM mode. */
 410:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
 805              	 .loc 1 410 0
 806 002c FB68     	 ldr r3,[r7,#12]
 807 002e 5B68     	 ldr r3,[r3,#4]
 808 0030 23F00F03 	 bic r3,r3,#15
 809 0034 43F00302 	 orr r2,r3,#3
 810 0038 FB68     	 ldr r3,[r7,#12]
 811 003a 5A60     	 str r2,[r3,#4]
 411:.././hal/sam3u1c/usart.c **** 			US_MR_USART_MODE_MODEM;
 412:.././hal/sam3u1c/usart.c **** 
 413:.././hal/sam3u1c/usart.c **** 	return 0;
 812              	 .loc 1 413 0
 813 003c 0023     	 movs r3,#0
 814              	.L38:
 414:.././hal/sam3u1c/usart.c **** }
 815              	 .loc 1 414 0
 816 003e 1846     	 mov r0,r3
 817 0040 1037     	 adds r7,r7,#16
 818              	.LCFI54:
 819              	 .cfi_def_cfa_offset 8
 820 0042 BD46     	 mov sp,r7
 821              	.LCFI55:
 822              	 .cfi_def_cfa_register 13
 823              	 
 824 0044 80BD     	 pop {r7,pc}
 825              	.L41:
 826 0046 00BF     	 .align 2
 827              	.L40:
 828 0048 00000940 	 .word 1074331648
 829 004c 00000000 	 .word usart_init_rs232
 830              	 .cfi_endproc
 831              	.LFE76:
 833              	 .section .text.usart_init_sync_master,"ax",%progbits
 834              	 .align 1
 835              	 .global usart_init_sync_master
 836              	 .syntax unified
 837              	 .thumb
 838              	 .thumb_func
 839              	 .fpu softvfp
 841              	usart_init_sync_master:
 842              	.LFB77:
 415:.././hal/sam3u1c/usart.c **** #endif
 416:.././hal/sam3u1c/usart.c **** 
 417:.././hal/sam3u1c/usart.c **** /**
 418:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in SYNC mode and act as a master.
 419:.././hal/sam3u1c/usart.c ****  *
 420:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 421:.././hal/sam3u1c/usart.c ****  *
 422:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 423:.././hal/sam3u1c/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 424:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 425:.././hal/sam3u1c/usart.c ****  *
 426:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 427:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 428:.././hal/sam3u1c/usart.c ****  */
 429:.././hal/sam3u1c/usart.c **** uint32_t usart_init_sync_master(Usart *p_usart,
 430:.././hal/sam3u1c/usart.c **** 		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
 431:.././hal/sam3u1c/usart.c **** {
 843              	 .loc 1 431 0
 844              	 .cfi_startproc
 845              	 
 846              	 
 847 0000 80B5     	 push {r7,lr}
 848              	.LCFI56:
 849              	 .cfi_def_cfa_offset 8
 850              	 .cfi_offset 7,-8
 851              	 .cfi_offset 14,-4
 852 0002 84B0     	 sub sp,sp,#16
 853              	.LCFI57:
 854              	 .cfi_def_cfa_offset 24
 855 0004 00AF     	 add r7,sp,#0
 856              	.LCFI58:
 857              	 .cfi_def_cfa_register 7
 858 0006 F860     	 str r0,[r7,#12]
 859 0008 B960     	 str r1,[r7,#8]
 860 000a 7A60     	 str r2,[r7,#4]
 432:.././hal/sam3u1c/usart.c **** 	static uint32_t ul_reg_val;
 433:.././hal/sam3u1c/usart.c **** 
 434:.././hal/sam3u1c/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 435:.././hal/sam3u1c/usart.c **** 	usart_reset(p_usart);
 861              	 .loc 1 435 0
 862 000c F868     	 ldr r0,[r7,#12]
 863 000e 1B4B     	 ldr r3,.L46
 864 0010 9847     	 blx r3
 865              	.LVL10:
 436:.././hal/sam3u1c/usart.c **** 
 437:.././hal/sam3u1c/usart.c **** 	ul_reg_val = 0;
 866              	 .loc 1 437 0
 867 0012 1B4B     	 ldr r3,.L46+4
 868 0014 0022     	 movs r2,#0
 869 0016 1A60     	 str r2,[r3]
 438:.././hal/sam3u1c/usart.c **** 	/* Check whether the input values are legal. */
 439:.././hal/sam3u1c/usart.c **** 	if (!p_usart_opt || usart_set_sync_master_baudrate(p_usart,
 870              	 .loc 1 439 0
 871 0018 BB68     	 ldr r3,[r7,#8]
 872 001a 002B     	 cmp r3,#0
 873 001c 09D0     	 beq .L43
 874              	 .loc 1 439 0 is_stmt 0 discriminator 1
 875 001e BB68     	 ldr r3,[r7,#8]
 876 0020 1B68     	 ldr r3,[r3]
 877 0022 7A68     	 ldr r2,[r7,#4]
 878 0024 1946     	 mov r1,r3
 879 0026 F868     	 ldr r0,[r7,#12]
 880 0028 164B     	 ldr r3,.L46+8
 881 002a 9847     	 blx r3
 882              	.LVL11:
 883 002c 0346     	 mov r3,r0
 884 002e 002B     	 cmp r3,#0
 885 0030 01D0     	 beq .L44
 886              	.L43:
 440:.././hal/sam3u1c/usart.c **** 			p_usart_opt->baudrate, ul_mck)) {
 441:.././hal/sam3u1c/usart.c **** 		return 1;
 887              	 .loc 1 441 0 is_stmt 1
 888 0032 0123     	 movs r3,#1
 889 0034 1DE0     	 b .L45
 890              	.L44:
 442:.././hal/sam3u1c/usart.c **** 	}
 443:.././hal/sam3u1c/usart.c **** 
 444:.././hal/sam3u1c/usart.c **** 	/* Configure the USART option. */
 445:.././hal/sam3u1c/usart.c **** 	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
 891              	 .loc 1 445 0
 892 0036 BB68     	 ldr r3,[r7,#8]
 893 0038 5A68     	 ldr r2,[r3,#4]
 894 003a BB68     	 ldr r3,[r7,#8]
 895 003c 9B68     	 ldr r3,[r3,#8]
 896 003e 1A43     	 orrs r2,r2,r3
 446:.././hal/sam3u1c/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 897              	 .loc 1 446 0
 898 0040 BB68     	 ldr r3,[r7,#8]
 899 0042 1B69     	 ldr r3,[r3,#16]
 445:.././hal/sam3u1c/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 900              	 .loc 1 445 0
 901 0044 1A43     	 orrs r2,r2,r3
 902              	 .loc 1 446 0
 903 0046 BB68     	 ldr r3,[r7,#8]
 904 0048 DB68     	 ldr r3,[r3,#12]
 905 004a 1A43     	 orrs r2,r2,r3
 445:.././hal/sam3u1c/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 906              	 .loc 1 445 0
 907 004c 0C4B     	 ldr r3,.L46+4
 908 004e 1B68     	 ldr r3,[r3]
 909 0050 1343     	 orrs r3,r3,r2
 910 0052 0B4A     	 ldr r2,.L46+4
 911 0054 1360     	 str r3,[r2]
 447:.././hal/sam3u1c/usart.c **** 
 448:.././hal/sam3u1c/usart.c **** 	/* Set normal mode and output clock as synchronous master. */
 449:.././hal/sam3u1c/usart.c **** 	ul_reg_val |= US_MR_USART_MODE_NORMAL | US_MR_CLKO;
 912              	 .loc 1 449 0
 913 0056 0A4B     	 ldr r3,.L46+4
 914 0058 1B68     	 ldr r3,[r3]
 915 005a 43F48023 	 orr r3,r3,#262144
 916 005e 084A     	 ldr r2,.L46+4
 917 0060 1360     	 str r3,[r2]
 450:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR |= ul_reg_val;
 918              	 .loc 1 450 0
 919 0062 FB68     	 ldr r3,[r7,#12]
 920 0064 5A68     	 ldr r2,[r3,#4]
 921 0066 064B     	 ldr r3,.L46+4
 922 0068 1B68     	 ldr r3,[r3]
 923 006a 1A43     	 orrs r2,r2,r3
 924 006c FB68     	 ldr r3,[r7,#12]
 925 006e 5A60     	 str r2,[r3,#4]
 451:.././hal/sam3u1c/usart.c **** 
 452:.././hal/sam3u1c/usart.c **** 	return 0;
 926              	 .loc 1 452 0
 927 0070 0023     	 movs r3,#0
 928              	.L45:
 453:.././hal/sam3u1c/usart.c **** }
 929              	 .loc 1 453 0
 930 0072 1846     	 mov r0,r3
 931 0074 1037     	 adds r7,r7,#16
 932              	.LCFI59:
 933              	 .cfi_def_cfa_offset 8
 934 0076 BD46     	 mov sp,r7
 935              	.LCFI60:
 936              	 .cfi_def_cfa_register 13
 937              	 
 938 0078 80BD     	 pop {r7,pc}
 939              	.L47:
 940 007a 00BF     	 .align 2
 941              	.L46:
 942 007c 00000000 	 .word usart_reset
 943 0080 00000000 	 .word ul_reg_val.7108
 944 0084 00000000 	 .word usart_set_sync_master_baudrate
 945              	 .cfi_endproc
 946              	.LFE77:
 948              	 .section .text.usart_init_sync_slave,"ax",%progbits
 949              	 .align 1
 950              	 .global usart_init_sync_slave
 951              	 .syntax unified
 952              	 .thumb
 953              	 .thumb_func
 954              	 .fpu softvfp
 956              	usart_init_sync_slave:
 957              	.LFB78:
 454:.././hal/sam3u1c/usart.c **** 
 455:.././hal/sam3u1c/usart.c **** /**
 456:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in SYNC mode and act as a slave.
 457:.././hal/sam3u1c/usart.c ****  *
 458:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 459:.././hal/sam3u1c/usart.c ****  *
 460:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 461:.././hal/sam3u1c/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 462:.././hal/sam3u1c/usart.c ****  *
 463:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 464:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 465:.././hal/sam3u1c/usart.c ****  */
 466:.././hal/sam3u1c/usart.c **** uint32_t usart_init_sync_slave(Usart *p_usart,
 467:.././hal/sam3u1c/usart.c **** 		const sam_usart_opt_t *p_usart_opt)
 468:.././hal/sam3u1c/usart.c **** {
 958              	 .loc 1 468 0
 959              	 .cfi_startproc
 960              	 
 961              	 
 962 0000 80B5     	 push {r7,lr}
 963              	.LCFI61:
 964              	 .cfi_def_cfa_offset 8
 965              	 .cfi_offset 7,-8
 966              	 .cfi_offset 14,-4
 967 0002 82B0     	 sub sp,sp,#8
 968              	.LCFI62:
 969              	 .cfi_def_cfa_offset 16
 970 0004 00AF     	 add r7,sp,#0
 971              	.LCFI63:
 972              	 .cfi_def_cfa_register 7
 973 0006 7860     	 str r0,[r7,#4]
 974 0008 3960     	 str r1,[r7]
 469:.././hal/sam3u1c/usart.c **** 	static uint32_t ul_reg_val;
 470:.././hal/sam3u1c/usart.c **** 
 471:.././hal/sam3u1c/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 472:.././hal/sam3u1c/usart.c **** 	usart_reset(p_usart);
 975              	 .loc 1 472 0
 976 000a 7868     	 ldr r0,[r7,#4]
 977 000c 164B     	 ldr r3,.L51
 978 000e 9847     	 blx r3
 979              	.LVL12:
 473:.././hal/sam3u1c/usart.c **** 
 474:.././hal/sam3u1c/usart.c **** 	ul_reg_val = 0;
 980              	 .loc 1 474 0
 981 0010 164B     	 ldr r3,.L51+4
 982 0012 0022     	 movs r2,#0
 983 0014 1A60     	 str r2,[r3]
 475:.././hal/sam3u1c/usart.c **** 	usart_set_sync_slave_baudrate(p_usart);
 984              	 .loc 1 475 0
 985 0016 7868     	 ldr r0,[r7,#4]
 986 0018 154B     	 ldr r3,.L51+8
 987 001a 9847     	 blx r3
 988              	.LVL13:
 476:.././hal/sam3u1c/usart.c **** 
 477:.././hal/sam3u1c/usart.c **** 	/* Check whether the input values are legal. */
 478:.././hal/sam3u1c/usart.c **** 	if (!p_usart_opt) {
 989              	 .loc 1 478 0
 990 001c 3B68     	 ldr r3,[r7]
 991 001e 002B     	 cmp r3,#0
 992 0020 01D1     	 bne .L49
 479:.././hal/sam3u1c/usart.c **** 		return 1;
 993              	 .loc 1 479 0
 994 0022 0123     	 movs r3,#1
 995 0024 1BE0     	 b .L50
 996              	.L49:
 480:.././hal/sam3u1c/usart.c **** 	}
 481:.././hal/sam3u1c/usart.c **** 
 482:.././hal/sam3u1c/usart.c **** 	/* Configure the USART option. */
 483:.././hal/sam3u1c/usart.c **** 	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
 997              	 .loc 1 483 0
 998 0026 3B68     	 ldr r3,[r7]
 999 0028 5A68     	 ldr r2,[r3,#4]
 1000 002a 3B68     	 ldr r3,[r7]
 1001 002c 9B68     	 ldr r3,[r3,#8]
 1002 002e 1A43     	 orrs r2,r2,r3
 484:.././hal/sam3u1c/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 1003              	 .loc 1 484 0
 1004 0030 3B68     	 ldr r3,[r7]
 1005 0032 1B69     	 ldr r3,[r3,#16]
 483:.././hal/sam3u1c/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 1006              	 .loc 1 483 0
 1007 0034 1A43     	 orrs r2,r2,r3
 1008              	 .loc 1 484 0
 1009 0036 3B68     	 ldr r3,[r7]
 1010 0038 DB68     	 ldr r3,[r3,#12]
 1011 003a 1A43     	 orrs r2,r2,r3
 483:.././hal/sam3u1c/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 1012              	 .loc 1 483 0
 1013 003c 0B4B     	 ldr r3,.L51+4
 1014 003e 1B68     	 ldr r3,[r3]
 1015 0040 1343     	 orrs r3,r3,r2
 1016 0042 0A4A     	 ldr r2,.L51+4
 1017 0044 1360     	 str r3,[r2]
 485:.././hal/sam3u1c/usart.c **** 
 486:.././hal/sam3u1c/usart.c **** 	/* Set normal mode. */
 487:.././hal/sam3u1c/usart.c **** 	ul_reg_val |= US_MR_USART_MODE_NORMAL;
 1018              	 .loc 1 487 0
 1019 0046 094B     	 ldr r3,.L51+4
 1020 0048 1B68     	 ldr r3,[r3]
 1021 004a 084A     	 ldr r2,.L51+4
 1022 004c 1360     	 str r3,[r2]
 488:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR |= ul_reg_val;
 1023              	 .loc 1 488 0
 1024 004e 7B68     	 ldr r3,[r7,#4]
 1025 0050 5A68     	 ldr r2,[r3,#4]
 1026 0052 064B     	 ldr r3,.L51+4
 1027 0054 1B68     	 ldr r3,[r3]
 1028 0056 1A43     	 orrs r2,r2,r3
 1029 0058 7B68     	 ldr r3,[r7,#4]
 1030 005a 5A60     	 str r2,[r3,#4]
 489:.././hal/sam3u1c/usart.c **** 
 490:.././hal/sam3u1c/usart.c **** 	return 0;
 1031              	 .loc 1 490 0
 1032 005c 0023     	 movs r3,#0
 1033              	.L50:
 491:.././hal/sam3u1c/usart.c **** }
 1034              	 .loc 1 491 0
 1035 005e 1846     	 mov r0,r3
 1036 0060 0837     	 adds r7,r7,#8
 1037              	.LCFI64:
 1038              	 .cfi_def_cfa_offset 8
 1039 0062 BD46     	 mov sp,r7
 1040              	.LCFI65:
 1041              	 .cfi_def_cfa_register 13
 1042              	 
 1043 0064 80BD     	 pop {r7,pc}
 1044              	.L52:
 1045 0066 00BF     	 .align 2
 1046              	.L51:
 1047 0068 00000000 	 .word usart_reset
 1048 006c 00000000 	 .word ul_reg_val.7113
 1049 0070 00000000 	 .word usart_set_sync_slave_baudrate
 1050              	 .cfi_endproc
 1051              	.LFE78:
 1053              	 .section .text.usart_init_rs485,"ax",%progbits
 1054              	 .align 1
 1055              	 .global usart_init_rs485
 1056              	 .syntax unified
 1057              	 .thumb
 1058              	 .thumb_func
 1059              	 .fpu softvfp
 1061              	usart_init_rs485:
 1062              	.LFB79:
 492:.././hal/sam3u1c/usart.c **** 
 493:.././hal/sam3u1c/usart.c **** /**
 494:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in RS485 mode.
 495:.././hal/sam3u1c/usart.c ****  *
 496:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 497:.././hal/sam3u1c/usart.c ****  *
 498:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 499:.././hal/sam3u1c/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 500:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 501:.././hal/sam3u1c/usart.c ****  *
 502:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 503:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 504:.././hal/sam3u1c/usart.c ****  */
 505:.././hal/sam3u1c/usart.c **** uint32_t usart_init_rs485(Usart *p_usart,
 506:.././hal/sam3u1c/usart.c **** 		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
 507:.././hal/sam3u1c/usart.c **** {
 1063              	 .loc 1 507 0
 1064              	 .cfi_startproc
 1065              	 
 1066              	 
 1067 0000 80B5     	 push {r7,lr}
 1068              	.LCFI66:
 1069              	 .cfi_def_cfa_offset 8
 1070              	 .cfi_offset 7,-8
 1071              	 .cfi_offset 14,-4
 1072 0002 84B0     	 sub sp,sp,#16
 1073              	.LCFI67:
 1074              	 .cfi_def_cfa_offset 24
 1075 0004 00AF     	 add r7,sp,#0
 1076              	.LCFI68:
 1077              	 .cfi_def_cfa_register 7
 1078 0006 F860     	 str r0,[r7,#12]
 1079 0008 B960     	 str r1,[r7,#8]
 1080 000a 7A60     	 str r2,[r7,#4]
 508:.././hal/sam3u1c/usart.c **** 	/* Initialize the USART as standard RS232. */
 509:.././hal/sam3u1c/usart.c **** 	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
 1081              	 .loc 1 509 0
 1082 000c 7A68     	 ldr r2,[r7,#4]
 1083 000e B968     	 ldr r1,[r7,#8]
 1084 0010 F868     	 ldr r0,[r7,#12]
 1085 0012 0A4B     	 ldr r3,.L56
 1086 0014 9847     	 blx r3
 1087              	.LVL14:
 1088 0016 0346     	 mov r3,r0
 1089 0018 002B     	 cmp r3,#0
 1090 001a 01D0     	 beq .L54
 510:.././hal/sam3u1c/usart.c **** 		return 1;
 1091              	 .loc 1 510 0
 1092 001c 0123     	 movs r3,#1
 1093 001e 08E0     	 b .L55
 1094              	.L54:
 511:.././hal/sam3u1c/usart.c **** 	}
 512:.././hal/sam3u1c/usart.c **** 
 513:.././hal/sam3u1c/usart.c **** 	/* Set RS485 mode. */
 514:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
 1095              	 .loc 1 514 0
 1096 0020 FB68     	 ldr r3,[r7,#12]
 1097 0022 5B68     	 ldr r3,[r3,#4]
 1098 0024 23F00F03 	 bic r3,r3,#15
 1099 0028 43F00102 	 orr r2,r3,#1
 1100 002c FB68     	 ldr r3,[r7,#12]
 1101 002e 5A60     	 str r2,[r3,#4]
 515:.././hal/sam3u1c/usart.c **** 			US_MR_USART_MODE_RS485;
 516:.././hal/sam3u1c/usart.c **** 
 517:.././hal/sam3u1c/usart.c **** 	return 0;
 1102              	 .loc 1 517 0
 1103 0030 0023     	 movs r3,#0
 1104              	.L55:
 518:.././hal/sam3u1c/usart.c **** }
 1105              	 .loc 1 518 0
 1106 0032 1846     	 mov r0,r3
 1107 0034 1037     	 adds r7,r7,#16
 1108              	.LCFI69:
 1109              	 .cfi_def_cfa_offset 8
 1110 0036 BD46     	 mov sp,r7
 1111              	.LCFI70:
 1112              	 .cfi_def_cfa_register 13
 1113              	 
 1114 0038 80BD     	 pop {r7,pc}
 1115              	.L57:
 1116 003a 00BF     	 .align 2
 1117              	.L56:
 1118 003c 00000000 	 .word usart_init_rs232
 1119              	 .cfi_endproc
 1120              	.LFE79:
 1122              	 .section .text.usart_init_irda,"ax",%progbits
 1123              	 .align 1
 1124              	 .global usart_init_irda
 1125              	 .syntax unified
 1126              	 .thumb
 1127              	 .thumb_func
 1128              	 .fpu softvfp
 1130              	usart_init_irda:
 1131              	.LFB80:
 519:.././hal/sam3u1c/usart.c **** 
 520:.././hal/sam3u1c/usart.c **** #if (!SAMG55)
 521:.././hal/sam3u1c/usart.c **** /**
 522:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in IrDA mode.
 523:.././hal/sam3u1c/usart.c ****  *
 524:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 525:.././hal/sam3u1c/usart.c ****  *
 526:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 527:.././hal/sam3u1c/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 528:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 529:.././hal/sam3u1c/usart.c ****  *
 530:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 531:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 532:.././hal/sam3u1c/usart.c ****  */
 533:.././hal/sam3u1c/usart.c **** uint32_t usart_init_irda(Usart *p_usart,
 534:.././hal/sam3u1c/usart.c **** 		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
 535:.././hal/sam3u1c/usart.c **** {
 1132              	 .loc 1 535 0
 1133              	 .cfi_startproc
 1134              	 
 1135              	 
 1136 0000 80B5     	 push {r7,lr}
 1137              	.LCFI71:
 1138              	 .cfi_def_cfa_offset 8
 1139              	 .cfi_offset 7,-8
 1140              	 .cfi_offset 14,-4
 1141 0002 84B0     	 sub sp,sp,#16
 1142              	.LCFI72:
 1143              	 .cfi_def_cfa_offset 24
 1144 0004 00AF     	 add r7,sp,#0
 1145              	.LCFI73:
 1146              	 .cfi_def_cfa_register 7
 1147 0006 F860     	 str r0,[r7,#12]
 1148 0008 B960     	 str r1,[r7,#8]
 1149 000a 7A60     	 str r2,[r7,#4]
 536:.././hal/sam3u1c/usart.c **** 	/* Initialize the USART as standard RS232. */
 537:.././hal/sam3u1c/usart.c **** 	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
 1150              	 .loc 1 537 0
 1151 000c 7A68     	 ldr r2,[r7,#4]
 1152 000e B968     	 ldr r1,[r7,#8]
 1153 0010 F868     	 ldr r0,[r7,#12]
 1154 0012 0C4B     	 ldr r3,.L61
 1155 0014 9847     	 blx r3
 1156              	.LVL15:
 1157 0016 0346     	 mov r3,r0
 1158 0018 002B     	 cmp r3,#0
 1159 001a 01D0     	 beq .L59
 538:.././hal/sam3u1c/usart.c **** 		return 1;
 1160              	 .loc 1 538 0
 1161 001c 0123     	 movs r3,#1
 1162 001e 0CE0     	 b .L60
 1163              	.L59:
 539:.././hal/sam3u1c/usart.c **** 	}
 540:.././hal/sam3u1c/usart.c **** 
 541:.././hal/sam3u1c/usart.c **** 	/* Set IrDA filter. */
 542:.././hal/sam3u1c/usart.c **** 	p_usart->US_IF = p_usart_opt->irda_filter;
 1164              	 .loc 1 542 0
 1165 0020 BB68     	 ldr r3,[r7,#8]
 1166 0022 5A69     	 ldr r2,[r3,#20]
 1167 0024 FB68     	 ldr r3,[r7,#12]
 1168 0026 DA64     	 str r2,[r3,#76]
 543:.././hal/sam3u1c/usart.c **** 
 544:.././hal/sam3u1c/usart.c **** 	/* Set IrDA mode. */
 545:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
 1169              	 .loc 1 545 0
 1170 0028 FB68     	 ldr r3,[r7,#12]
 1171 002a 5B68     	 ldr r3,[r3,#4]
 1172 002c 23F00F03 	 bic r3,r3,#15
 1173 0030 43F00802 	 orr r2,r3,#8
 1174 0034 FB68     	 ldr r3,[r7,#12]
 1175 0036 5A60     	 str r2,[r3,#4]
 546:.././hal/sam3u1c/usart.c **** 			US_MR_USART_MODE_IRDA;
 547:.././hal/sam3u1c/usart.c **** 
 548:.././hal/sam3u1c/usart.c **** 	return 0;
 1176              	 .loc 1 548 0
 1177 0038 0023     	 movs r3,#0
 1178              	.L60:
 549:.././hal/sam3u1c/usart.c **** }
 1179              	 .loc 1 549 0
 1180 003a 1846     	 mov r0,r3
 1181 003c 1037     	 adds r7,r7,#16
 1182              	.LCFI74:
 1183              	 .cfi_def_cfa_offset 8
 1184 003e BD46     	 mov sp,r7
 1185              	.LCFI75:
 1186              	 .cfi_def_cfa_register 13
 1187              	 
 1188 0040 80BD     	 pop {r7,pc}
 1189              	.L62:
 1190 0042 00BF     	 .align 2
 1191              	.L61:
 1192 0044 00000000 	 .word usart_init_rs232
 1193              	 .cfi_endproc
 1194              	.LFE80:
 1196              	 .section .text.usart_init_iso7816,"ax",%progbits
 1197              	 .align 1
 1198              	 .global usart_init_iso7816
 1199              	 .syntax unified
 1200              	 .thumb
 1201              	 .thumb_func
 1202              	 .fpu softvfp
 1204              	usart_init_iso7816:
 1205              	.LFB81:
 550:.././hal/sam3u1c/usart.c **** #endif
 551:.././hal/sam3u1c/usart.c **** 
 552:.././hal/sam3u1c/usart.c **** /**
 553:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in ISO7816 mode.
 554:.././hal/sam3u1c/usart.c ****  *
 555:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 556:.././hal/sam3u1c/usart.c ****  *
 557:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 558:.././hal/sam3u1c/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 559:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 560:.././hal/sam3u1c/usart.c ****  *
 561:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 562:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 563:.././hal/sam3u1c/usart.c ****  */
 564:.././hal/sam3u1c/usart.c **** uint32_t usart_init_iso7816(Usart *p_usart,
 565:.././hal/sam3u1c/usart.c **** 		const usart_iso7816_opt_t *p_usart_opt, uint32_t ul_mck)
 566:.././hal/sam3u1c/usart.c **** {
 1206              	 .loc 1 566 0
 1207              	 .cfi_startproc
 1208              	 
 1209              	 
 1210 0000 80B5     	 push {r7,lr}
 1211              	.LCFI76:
 1212              	 .cfi_def_cfa_offset 8
 1213              	 .cfi_offset 7,-8
 1214              	 .cfi_offset 14,-4
 1215 0002 84B0     	 sub sp,sp,#16
 1216              	.LCFI77:
 1217              	 .cfi_def_cfa_offset 24
 1218 0004 00AF     	 add r7,sp,#0
 1219              	.LCFI78:
 1220              	 .cfi_def_cfa_register 7
 1221 0006 F860     	 str r0,[r7,#12]
 1222 0008 B960     	 str r1,[r7,#8]
 1223 000a 7A60     	 str r2,[r7,#4]
 567:.././hal/sam3u1c/usart.c **** 	static uint32_t ul_reg_val;
 568:.././hal/sam3u1c/usart.c **** 
 569:.././hal/sam3u1c/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 570:.././hal/sam3u1c/usart.c **** 	usart_reset(p_usart);
 1224              	 .loc 1 570 0
 1225 000c F868     	 ldr r0,[r7,#12]
 1226 000e 3E4B     	 ldr r3,.L76
 1227 0010 9847     	 blx r3
 1228              	.LVL16:
 571:.././hal/sam3u1c/usart.c **** 
 572:.././hal/sam3u1c/usart.c **** 	ul_reg_val = 0;
 1229              	 .loc 1 572 0
 1230 0012 3E4B     	 ldr r3,.L76+4
 1231 0014 0022     	 movs r2,#0
 1232 0016 1A60     	 str r2,[r3]
 573:.././hal/sam3u1c/usart.c **** 
 574:.././hal/sam3u1c/usart.c **** 	/* Check whether the input values are legal. */
 575:.././hal/sam3u1c/usart.c **** 	if (!p_usart_opt || ((p_usart_opt->parity_type != US_MR_PAR_EVEN) &&
 1233              	 .loc 1 575 0
 1234 0018 BB68     	 ldr r3,[r7,#8]
 1235 001a 002B     	 cmp r3,#0
 1236 001c 08D0     	 beq .L64
 1237              	 .loc 1 575 0 is_stmt 0 discriminator 1
 1238 001e BB68     	 ldr r3,[r7,#8]
 1239 0020 9B68     	 ldr r3,[r3,#8]
 1240 0022 002B     	 cmp r3,#0
 1241 0024 06D0     	 beq .L65
 576:.././hal/sam3u1c/usart.c **** 			(p_usart_opt->parity_type != US_MR_PAR_ODD))) {
 1242              	 .loc 1 576 0 is_stmt 1 discriminator 2
 1243 0026 BB68     	 ldr r3,[r7,#8]
 1244 0028 9B68     	 ldr r3,[r3,#8]
 575:.././hal/sam3u1c/usart.c **** 			(p_usart_opt->parity_type != US_MR_PAR_ODD))) {
 1245              	 .loc 1 575 0 discriminator 2
 1246 002a B3F5007F 	 cmp r3,#512
 1247 002e 01D0     	 beq .L65
 1248              	.L64:
 577:.././hal/sam3u1c/usart.c **** 		return 1;
 1249              	 .loc 1 577 0
 1250 0030 0123     	 movs r3,#1
 1251 0032 64E0     	 b .L66
 1252              	.L65:
 578:.././hal/sam3u1c/usart.c **** 	}
 579:.././hal/sam3u1c/usart.c **** 
 580:.././hal/sam3u1c/usart.c **** 	if (p_usart_opt->protocol_type == ISO7816_T_0) {
 1253              	 .loc 1 580 0
 1254 0034 BB68     	 ldr r3,[r7,#8]
 1255 0036 DB69     	 ldr r3,[r3,#28]
 1256 0038 002B     	 cmp r3,#0
 1257 003a 16D1     	 bne .L67
 581:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_USART_MODE_IS07816_T_0 | US_MR_NBSTOP_2_BIT |
 582:.././hal/sam3u1c/usart.c **** 				(p_usart_opt->max_iterations << US_MR_MAX_ITERATION_Pos);
 1258              	 .loc 1 582 0
 1259 003c BB68     	 ldr r3,[r7,#8]
 1260 003e 5B69     	 ldr r3,[r3,#20]
 1261 0040 1A06     	 lsls r2,r3,#24
 581:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_USART_MODE_IS07816_T_0 | US_MR_NBSTOP_2_BIT |
 1262              	 .loc 1 581 0
 1263 0042 324B     	 ldr r3,.L76+4
 1264 0044 1B68     	 ldr r3,[r3]
 1265 0046 1343     	 orrs r3,r3,r2
 1266 0048 43F40053 	 orr r3,r3,#8192
 1267 004c 43F00403 	 orr r3,r3,#4
 1268 0050 2E4A     	 ldr r2,.L76+4
 1269 0052 1360     	 str r3,[r2]
 583:.././hal/sam3u1c/usart.c **** 
 584:.././hal/sam3u1c/usart.c **** 		if (p_usart_opt->bit_order) {
 1270              	 .loc 1 584 0
 1271 0054 BB68     	 ldr r3,[r7,#8]
 1272 0056 9B69     	 ldr r3,[r3,#24]
 1273 0058 002B     	 cmp r3,#0
 1274 005a 1DD0     	 beq .L69
 585:.././hal/sam3u1c/usart.c **** 			ul_reg_val |= US_MR_MSBF;
 1275              	 .loc 1 585 0
 1276 005c 2B4B     	 ldr r3,.L76+4
 1277 005e 1B68     	 ldr r3,[r3]
 1278 0060 43F48033 	 orr r3,r3,#65536
 1279 0064 294A     	 ldr r2,.L76+4
 1280 0066 1360     	 str r3,[r2]
 1281 0068 16E0     	 b .L69
 1282              	.L67:
 586:.././hal/sam3u1c/usart.c **** 		}
 587:.././hal/sam3u1c/usart.c **** 	} else if (p_usart_opt->protocol_type == ISO7816_T_1) {
 1283              	 .loc 1 587 0
 1284 006a BB68     	 ldr r3,[r7,#8]
 1285 006c DB69     	 ldr r3,[r3,#28]
 1286 006e 012B     	 cmp r3,#1
 1287 0070 10D1     	 bne .L70
 588:.././hal/sam3u1c/usart.c **** 		/*
 589:.././hal/sam3u1c/usart.c **** 		 * Only LSBF is used in the T=1 protocol, and max_iterations field
 590:.././hal/sam3u1c/usart.c **** 		 * is only used in T=0 mode.
 591:.././hal/sam3u1c/usart.c **** 		 */
 592:.././hal/sam3u1c/usart.c **** 		if (p_usart_opt->bit_order || p_usart_opt->max_iterations) {
 1288              	 .loc 1 592 0
 1289 0072 BB68     	 ldr r3,[r7,#8]
 1290 0074 9B69     	 ldr r3,[r3,#24]
 1291 0076 002B     	 cmp r3,#0
 1292 0078 03D1     	 bne .L71
 1293              	 .loc 1 592 0 is_stmt 0 discriminator 1
 1294 007a BB68     	 ldr r3,[r7,#8]
 1295 007c 5B69     	 ldr r3,[r3,#20]
 1296 007e 002B     	 cmp r3,#0
 1297 0080 01D0     	 beq .L72
 1298              	.L71:
 593:.././hal/sam3u1c/usart.c **** 			return 1;
 1299              	 .loc 1 593 0 is_stmt 1
 1300 0082 0123     	 movs r3,#1
 1301 0084 3BE0     	 b .L66
 1302              	.L72:
 594:.././hal/sam3u1c/usart.c **** 		}
 595:.././hal/sam3u1c/usart.c **** 		
 596:.././hal/sam3u1c/usart.c **** 		/* Set USART mode to ISO7816, T=1, and always uses 1 stop bit. */
 597:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_USART_MODE_IS07816_T_1 | US_MR_NBSTOP_1_BIT;
 1303              	 .loc 1 597 0
 1304 0086 214B     	 ldr r3,.L76+4
 1305 0088 1B68     	 ldr r3,[r3]
 1306 008a 43F00603 	 orr r3,r3,#6
 1307 008e 1F4A     	 ldr r2,.L76+4
 1308 0090 1360     	 str r3,[r2]
 1309 0092 01E0     	 b .L69
 1310              	.L70:
 598:.././hal/sam3u1c/usart.c **** 	} else {
 599:.././hal/sam3u1c/usart.c **** 		return 1;
 1311              	 .loc 1 599 0
 1312 0094 0123     	 movs r3,#1
 1313 0096 32E0     	 b .L66
 1314              	.L69:
 600:.././hal/sam3u1c/usart.c **** 	}
 601:.././hal/sam3u1c/usart.c **** 
 602:.././hal/sam3u1c/usart.c **** 	/* Set up the baudrate. */
 603:.././hal/sam3u1c/usart.c **** 	if (usart_set_iso7816_clock(p_usart, p_usart_opt->iso7816_hz, ul_mck)) {
 1315              	 .loc 1 603 0
 1316 0098 BB68     	 ldr r3,[r7,#8]
 1317 009a 1B68     	 ldr r3,[r3]
 1318 009c 7A68     	 ldr r2,[r7,#4]
 1319 009e 1946     	 mov r1,r3
 1320 00a0 F868     	 ldr r0,[r7,#12]
 1321 00a2 1B4B     	 ldr r3,.L76+8
 1322 00a4 9847     	 blx r3
 1323              	.LVL17:
 1324 00a6 0346     	 mov r3,r0
 1325 00a8 002B     	 cmp r3,#0
 1326 00aa 01D0     	 beq .L73
 604:.././hal/sam3u1c/usart.c **** 		return 1;
 1327              	 .loc 1 604 0
 1328 00ac 0123     	 movs r3,#1
 1329 00ae 26E0     	 b .L66
 1330              	.L73:
 605:.././hal/sam3u1c/usart.c **** 	}
 606:.././hal/sam3u1c/usart.c **** 
 607:.././hal/sam3u1c/usart.c **** 	/* Set FIDI register: bit rate = iso7816_hz / fidi_ratio. */
 608:.././hal/sam3u1c/usart.c **** 	p_usart->US_FIDI = p_usart_opt->fidi_ratio;
 1331              	 .loc 1 608 0
 1332 00b0 BB68     	 ldr r3,[r7,#8]
 1333 00b2 5A68     	 ldr r2,[r3,#4]
 1334 00b4 FB68     	 ldr r3,[r7,#12]
 1335 00b6 1A64     	 str r2,[r3,#64]
 609:.././hal/sam3u1c/usart.c **** 
 610:.././hal/sam3u1c/usart.c **** 	/* Set ISO7816 parity type in the MODE register. */
 611:.././hal/sam3u1c/usart.c **** 	ul_reg_val |= p_usart_opt->parity_type;
 1336              	 .loc 1 611 0
 1337 00b8 BB68     	 ldr r3,[r7,#8]
 1338 00ba 9A68     	 ldr r2,[r3,#8]
 1339 00bc 134B     	 ldr r3,.L76+4
 1340 00be 1B68     	 ldr r3,[r3]
 1341 00c0 1343     	 orrs r3,r3,r2
 1342 00c2 124A     	 ldr r2,.L76+4
 1343 00c4 1360     	 str r3,[r2]
 612:.././hal/sam3u1c/usart.c **** 
 613:.././hal/sam3u1c/usart.c **** 	if (p_usart_opt->inhibit_nack) {
 1344              	 .loc 1 613 0
 1345 00c6 BB68     	 ldr r3,[r7,#8]
 1346 00c8 DB68     	 ldr r3,[r3,#12]
 1347 00ca 002B     	 cmp r3,#0
 1348 00cc 05D0     	 beq .L74
 614:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_INACK;
 1349              	 .loc 1 614 0
 1350 00ce 0F4B     	 ldr r3,.L76+4
 1351 00d0 1B68     	 ldr r3,[r3]
 1352 00d2 43F48013 	 orr r3,r3,#1048576
 1353 00d6 0D4A     	 ldr r2,.L76+4
 1354 00d8 1360     	 str r3,[r2]
 1355              	.L74:
 615:.././hal/sam3u1c/usart.c **** 	}
 616:.././hal/sam3u1c/usart.c **** 	if (p_usart_opt->dis_suc_nack) {
 1356              	 .loc 1 616 0
 1357 00da BB68     	 ldr r3,[r7,#8]
 1358 00dc 1B69     	 ldr r3,[r3,#16]
 1359 00de 002B     	 cmp r3,#0
 1360 00e0 05D0     	 beq .L75
 617:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_DSNACK;
 1361              	 .loc 1 617 0
 1362 00e2 0A4B     	 ldr r3,.L76+4
 1363 00e4 1B68     	 ldr r3,[r3]
 1364 00e6 43F40013 	 orr r3,r3,#2097152
 1365 00ea 084A     	 ldr r2,.L76+4
 1366 00ec 1360     	 str r3,[r2]
 1367              	.L75:
 618:.././hal/sam3u1c/usart.c **** 	}
 619:.././hal/sam3u1c/usart.c **** 
 620:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR |= ul_reg_val;
 1368              	 .loc 1 620 0
 1369 00ee FB68     	 ldr r3,[r7,#12]
 1370 00f0 5A68     	 ldr r2,[r3,#4]
 1371 00f2 064B     	 ldr r3,.L76+4
 1372 00f4 1B68     	 ldr r3,[r3]
 1373 00f6 1A43     	 orrs r2,r2,r3
 1374 00f8 FB68     	 ldr r3,[r7,#12]
 1375 00fa 5A60     	 str r2,[r3,#4]
 621:.././hal/sam3u1c/usart.c **** 
 622:.././hal/sam3u1c/usart.c **** 	return 0;
 1376              	 .loc 1 622 0
 1377 00fc 0023     	 movs r3,#0
 1378              	.L66:
 623:.././hal/sam3u1c/usart.c **** }
 1379              	 .loc 1 623 0
 1380 00fe 1846     	 mov r0,r3
 1381 0100 1037     	 adds r7,r7,#16
 1382              	.LCFI79:
 1383              	 .cfi_def_cfa_offset 8
 1384 0102 BD46     	 mov sp,r7
 1385              	.LCFI80:
 1386              	 .cfi_def_cfa_register 13
 1387              	 
 1388 0104 80BD     	 pop {r7,pc}
 1389              	.L77:
 1390 0106 00BF     	 .align 2
 1391              	.L76:
 1392 0108 00000000 	 .word usart_reset
 1393 010c 00000000 	 .word ul_reg_val.7129
 1394 0110 00000000 	 .word usart_set_iso7816_clock
 1395              	 .cfi_endproc
 1396              	.LFE81:
 1398              	 .section .text.usart_init_spi_master,"ax",%progbits
 1399              	 .align 1
 1400              	 .global usart_init_spi_master
 1401              	 .syntax unified
 1402              	 .thumb
 1403              	 .thumb_func
 1404              	 .fpu softvfp
 1406              	usart_init_spi_master:
 1407              	.LFB82:
 624:.././hal/sam3u1c/usart.c **** 
 625:.././hal/sam3u1c/usart.c **** /**
 626:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in SPI mode and act as a master.
 627:.././hal/sam3u1c/usart.c ****  *
 628:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 629:.././hal/sam3u1c/usart.c ****  *
 630:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 631:.././hal/sam3u1c/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 632:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 633:.././hal/sam3u1c/usart.c ****  *
 634:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 635:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 636:.././hal/sam3u1c/usart.c ****  */
 637:.././hal/sam3u1c/usart.c **** uint32_t usart_init_spi_master(Usart *p_usart,
 638:.././hal/sam3u1c/usart.c **** 		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
 639:.././hal/sam3u1c/usart.c **** {
 1408              	 .loc 1 639 0
 1409              	 .cfi_startproc
 1410              	 
 1411              	 
 1412 0000 80B5     	 push {r7,lr}
 1413              	.LCFI81:
 1414              	 .cfi_def_cfa_offset 8
 1415              	 .cfi_offset 7,-8
 1416              	 .cfi_offset 14,-4
 1417 0002 84B0     	 sub sp,sp,#16
 1418              	.LCFI82:
 1419              	 .cfi_def_cfa_offset 24
 1420 0004 00AF     	 add r7,sp,#0
 1421              	.LCFI83:
 1422              	 .cfi_def_cfa_register 7
 1423 0006 F860     	 str r0,[r7,#12]
 1424 0008 B960     	 str r1,[r7,#8]
 1425 000a 7A60     	 str r2,[r7,#4]
 640:.././hal/sam3u1c/usart.c **** 	static uint32_t ul_reg_val;
 641:.././hal/sam3u1c/usart.c **** 
 642:.././hal/sam3u1c/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 643:.././hal/sam3u1c/usart.c **** 	usart_reset(p_usart);
 1426              	 .loc 1 643 0
 1427 000c F868     	 ldr r0,[r7,#12]
 1428 000e 3D4B     	 ldr r3,.L90
 1429 0010 9847     	 blx r3
 1430              	.LVL18:
 644:.././hal/sam3u1c/usart.c **** 
 645:.././hal/sam3u1c/usart.c **** 	ul_reg_val = 0;
 1431              	 .loc 1 645 0
 1432 0012 3D4B     	 ldr r3,.L90+4
 1433 0014 0022     	 movs r2,#0
 1434 0016 1A60     	 str r2,[r3]
 646:.././hal/sam3u1c/usart.c **** 	/* Check whether the input values are legal. */
 647:.././hal/sam3u1c/usart.c **** 	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
 1435              	 .loc 1 647 0
 1436 0018 BB68     	 ldr r3,[r7,#8]
 1437 001a 002B     	 cmp r3,#0
 1438 001c 0DD0     	 beq .L79
 1439              	 .loc 1 647 0 is_stmt 0 discriminator 1
 1440 001e BB68     	 ldr r3,[r7,#8]
 1441 0020 9B68     	 ldr r3,[r3,#8]
 1442 0022 032B     	 cmp r3,#3
 1443 0024 09D8     	 bhi .L79
 648:.././hal/sam3u1c/usart.c **** 			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
 1444              	 .loc 1 648 0 is_stmt 1 discriminator 2
 1445 0026 BB68     	 ldr r3,[r7,#8]
 1446 0028 1B68     	 ldr r3,[r3]
 1447 002a 7A68     	 ldr r2,[r7,#4]
 1448 002c 1946     	 mov r1,r3
 1449 002e F868     	 ldr r0,[r7,#12]
 1450 0030 364B     	 ldr r3,.L90+8
 1451 0032 9847     	 blx r3
 1452              	.LVL19:
 1453 0034 0346     	 mov r3,r0
 647:.././hal/sam3u1c/usart.c **** 			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
 1454              	 .loc 1 647 0 discriminator 2
 1455 0036 002B     	 cmp r3,#0
 1456 0038 01D0     	 beq .L80
 1457              	.L79:
 649:.././hal/sam3u1c/usart.c **** 			ul_mck)) {
 650:.././hal/sam3u1c/usart.c **** 		return 1;
 1458              	 .loc 1 650 0
 1459 003a 0123     	 movs r3,#1
 1460 003c 5DE0     	 b .L81
 1461              	.L80:
 651:.././hal/sam3u1c/usart.c **** 	}
 652:.././hal/sam3u1c/usart.c **** 
 653:.././hal/sam3u1c/usart.c **** 	/* Configure the character length bit in MR register. */
 654:.././hal/sam3u1c/usart.c **** 	ul_reg_val |= p_usart_opt->char_length;
 1462              	 .loc 1 654 0
 1463 003e BB68     	 ldr r3,[r7,#8]
 1464 0040 5A68     	 ldr r2,[r3,#4]
 1465 0042 314B     	 ldr r3,.L90+4
 1466 0044 1B68     	 ldr r3,[r3]
 1467 0046 1343     	 orrs r3,r3,r2
 1468 0048 2F4A     	 ldr r2,.L90+4
 1469 004a 1360     	 str r3,[r2]
 655:.././hal/sam3u1c/usart.c **** 
 656:.././hal/sam3u1c/usart.c **** 	/* Set SPI master mode and channel mode. */
 657:.././hal/sam3u1c/usart.c **** 	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
 658:.././hal/sam3u1c/usart.c **** 			p_usart_opt->channel_mode;
 1470              	 .loc 1 658 0
 1471 004c BB68     	 ldr r3,[r7,#8]
 1472 004e DA68     	 ldr r2,[r3,#12]
 657:.././hal/sam3u1c/usart.c **** 			p_usart_opt->channel_mode;
 1473              	 .loc 1 657 0
 1474 0050 2D4B     	 ldr r3,.L90+4
 1475 0052 1B68     	 ldr r3,[r3]
 1476 0054 1343     	 orrs r3,r3,r2
 1477 0056 43F48023 	 orr r3,r3,#262144
 1478 005a 43F00E03 	 orr r3,r3,#14
 1479 005e 2A4A     	 ldr r2,.L90+4
 1480 0060 1360     	 str r3,[r2]
 659:.././hal/sam3u1c/usart.c **** 
 660:.././hal/sam3u1c/usart.c **** 	switch (p_usart_opt->spi_mode) {
 1481              	 .loc 1 660 0
 1482 0062 BB68     	 ldr r3,[r7,#8]
 1483 0064 9B68     	 ldr r3,[r3,#8]
 1484 0066 032B     	 cmp r3,#3
 1485 0068 3ED8     	 bhi .L89
 1486 006a 01A2     	 adr r2,.L84
 1487 006c 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1488              	 .p2align 2
 1489              	.L84:
 1490 0070 81000000 	 .word .L83+1
 1491 0074 9B000000 	 .word .L85+1
 1492 0078 B5000000 	 .word .L86+1
 1493 007c CF000000 	 .word .L87+1
 1494              	 .p2align 1
 1495              	.L83:
 661:.././hal/sam3u1c/usart.c **** 	case SPI_MODE_0:
 662:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_CPHA;
 1496              	 .loc 1 662 0
 1497 0080 214B     	 ldr r3,.L90+4
 1498 0082 1B68     	 ldr r3,[r3]
 1499 0084 43F48073 	 orr r3,r3,#256
 1500 0088 1F4A     	 ldr r2,.L90+4
 1501 008a 1360     	 str r3,[r2]
 663:.././hal/sam3u1c/usart.c **** 		ul_reg_val &= ~US_MR_CPOL;
 1502              	 .loc 1 663 0
 1503 008c 1E4B     	 ldr r3,.L90+4
 1504 008e 1B68     	 ldr r3,[r3]
 1505 0090 23F48033 	 bic r3,r3,#65536
 1506 0094 1C4A     	 ldr r2,.L90+4
 1507 0096 1360     	 str r3,[r2]
 664:.././hal/sam3u1c/usart.c **** 		break;
 1508              	 .loc 1 664 0
 1509 0098 27E0     	 b .L88
 1510              	.L85:
 665:.././hal/sam3u1c/usart.c **** 
 666:.././hal/sam3u1c/usart.c **** 	case SPI_MODE_1:
 667:.././hal/sam3u1c/usart.c **** 		ul_reg_val &= ~US_MR_CPHA;
 1511              	 .loc 1 667 0
 1512 009a 1B4B     	 ldr r3,.L90+4
 1513 009c 1B68     	 ldr r3,[r3]
 1514 009e 23F48073 	 bic r3,r3,#256
 1515 00a2 194A     	 ldr r2,.L90+4
 1516 00a4 1360     	 str r3,[r2]
 668:.././hal/sam3u1c/usart.c **** 		ul_reg_val &= ~US_MR_CPOL;
 1517              	 .loc 1 668 0
 1518 00a6 184B     	 ldr r3,.L90+4
 1519 00a8 1B68     	 ldr r3,[r3]
 1520 00aa 23F48033 	 bic r3,r3,#65536
 1521 00ae 164A     	 ldr r2,.L90+4
 1522 00b0 1360     	 str r3,[r2]
 669:.././hal/sam3u1c/usart.c **** 		break;
 1523              	 .loc 1 669 0
 1524 00b2 1AE0     	 b .L88
 1525              	.L86:
 670:.././hal/sam3u1c/usart.c **** 
 671:.././hal/sam3u1c/usart.c **** 	case SPI_MODE_2:
 672:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_CPHA;
 1526              	 .loc 1 672 0
 1527 00b4 144B     	 ldr r3,.L90+4
 1528 00b6 1B68     	 ldr r3,[r3]
 1529 00b8 43F48073 	 orr r3,r3,#256
 1530 00bc 124A     	 ldr r2,.L90+4
 1531 00be 1360     	 str r3,[r2]
 673:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_CPOL;
 1532              	 .loc 1 673 0
 1533 00c0 114B     	 ldr r3,.L90+4
 1534 00c2 1B68     	 ldr r3,[r3]
 1535 00c4 43F48033 	 orr r3,r3,#65536
 1536 00c8 0F4A     	 ldr r2,.L90+4
 1537 00ca 1360     	 str r3,[r2]
 674:.././hal/sam3u1c/usart.c **** 		break;
 1538              	 .loc 1 674 0
 1539 00cc 0DE0     	 b .L88
 1540              	.L87:
 675:.././hal/sam3u1c/usart.c **** 
 676:.././hal/sam3u1c/usart.c **** 	case SPI_MODE_3:
 677:.././hal/sam3u1c/usart.c **** 		ul_reg_val &= ~US_MR_CPHA;
 1541              	 .loc 1 677 0
 1542 00ce 0E4B     	 ldr r3,.L90+4
 1543 00d0 1B68     	 ldr r3,[r3]
 1544 00d2 23F48073 	 bic r3,r3,#256
 1545 00d6 0C4A     	 ldr r2,.L90+4
 1546 00d8 1360     	 str r3,[r2]
 678:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_CPOL;
 1547              	 .loc 1 678 0
 1548 00da 0B4B     	 ldr r3,.L90+4
 1549 00dc 1B68     	 ldr r3,[r3]
 1550 00de 43F48033 	 orr r3,r3,#65536
 1551 00e2 094A     	 ldr r2,.L90+4
 1552 00e4 1360     	 str r3,[r2]
 679:.././hal/sam3u1c/usart.c **** 		break;
 1553              	 .loc 1 679 0
 1554 00e6 00E0     	 b .L88
 1555              	.L89:
 680:.././hal/sam3u1c/usart.c **** 
 681:.././hal/sam3u1c/usart.c **** 	default:
 682:.././hal/sam3u1c/usart.c **** 		break;
 1556              	 .loc 1 682 0
 1557 00e8 00BF     	 nop
 1558              	.L88:
 683:.././hal/sam3u1c/usart.c **** 	}
 684:.././hal/sam3u1c/usart.c **** 
 685:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR |= ul_reg_val;
 1559              	 .loc 1 685 0
 1560 00ea FB68     	 ldr r3,[r7,#12]
 1561 00ec 5A68     	 ldr r2,[r3,#4]
 1562 00ee 064B     	 ldr r3,.L90+4
 1563 00f0 1B68     	 ldr r3,[r3]
 1564 00f2 1A43     	 orrs r2,r2,r3
 1565 00f4 FB68     	 ldr r3,[r7,#12]
 1566 00f6 5A60     	 str r2,[r3,#4]
 686:.././hal/sam3u1c/usart.c **** 
 687:.././hal/sam3u1c/usart.c **** 	return 0;
 1567              	 .loc 1 687 0
 1568 00f8 0023     	 movs r3,#0
 1569              	.L81:
 688:.././hal/sam3u1c/usart.c **** }
 1570              	 .loc 1 688 0
 1571 00fa 1846     	 mov r0,r3
 1572 00fc 1037     	 adds r7,r7,#16
 1573              	.LCFI84:
 1574              	 .cfi_def_cfa_offset 8
 1575 00fe BD46     	 mov sp,r7
 1576              	.LCFI85:
 1577              	 .cfi_def_cfa_register 13
 1578              	 
 1579 0100 80BD     	 pop {r7,pc}
 1580              	.L91:
 1581 0102 00BF     	 .align 2
 1582              	.L90:
 1583 0104 00000000 	 .word usart_reset
 1584 0108 00000000 	 .word ul_reg_val.7135
 1585 010c 00000000 	 .word usart_set_spi_master_baudrate
 1586              	 .cfi_endproc
 1587              	.LFE82:
 1589              	 .section .text.usart_init_spi_slave,"ax",%progbits
 1590              	 .align 1
 1591              	 .global usart_init_spi_slave
 1592              	 .syntax unified
 1593              	 .thumb
 1594              	 .thumb_func
 1595              	 .fpu softvfp
 1597              	usart_init_spi_slave:
 1598              	.LFB83:
 689:.././hal/sam3u1c/usart.c **** 
 690:.././hal/sam3u1c/usart.c **** /**
 691:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in SPI mode and act as a slave.
 692:.././hal/sam3u1c/usart.c ****  *
 693:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 694:.././hal/sam3u1c/usart.c ****  *
 695:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 696:.././hal/sam3u1c/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 697:.././hal/sam3u1c/usart.c ****  *
 698:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 699:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 700:.././hal/sam3u1c/usart.c ****  */
 701:.././hal/sam3u1c/usart.c **** uint32_t usart_init_spi_slave(Usart *p_usart,
 702:.././hal/sam3u1c/usart.c **** 		const usart_spi_opt_t *p_usart_opt)
 703:.././hal/sam3u1c/usart.c **** {
 1599              	 .loc 1 703 0
 1600              	 .cfi_startproc
 1601              	 
 1602              	 
 1603 0000 80B5     	 push {r7,lr}
 1604              	.LCFI86:
 1605              	 .cfi_def_cfa_offset 8
 1606              	 .cfi_offset 7,-8
 1607              	 .cfi_offset 14,-4
 1608 0002 82B0     	 sub sp,sp,#8
 1609              	.LCFI87:
 1610              	 .cfi_def_cfa_offset 16
 1611 0004 00AF     	 add r7,sp,#0
 1612              	.LCFI88:
 1613              	 .cfi_def_cfa_register 7
 1614 0006 7860     	 str r0,[r7,#4]
 1615 0008 3960     	 str r1,[r7]
 704:.././hal/sam3u1c/usart.c **** 	static uint32_t ul_reg_val;
 705:.././hal/sam3u1c/usart.c **** 
 706:.././hal/sam3u1c/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 707:.././hal/sam3u1c/usart.c **** 	usart_reset(p_usart);
 1616              	 .loc 1 707 0
 1617 000a 7868     	 ldr r0,[r7,#4]
 1618 000c 384B     	 ldr r3,.L104
 1619 000e 9847     	 blx r3
 1620              	.LVL20:
 708:.././hal/sam3u1c/usart.c **** 
 709:.././hal/sam3u1c/usart.c **** 	ul_reg_val = 0;
 1621              	 .loc 1 709 0
 1622 0010 384B     	 ldr r3,.L104+4
 1623 0012 0022     	 movs r2,#0
 1624 0014 1A60     	 str r2,[r3]
 710:.././hal/sam3u1c/usart.c **** 	usart_set_spi_slave_baudrate(p_usart);
 1625              	 .loc 1 710 0
 1626 0016 7868     	 ldr r0,[r7,#4]
 1627 0018 374B     	 ldr r3,.L104+8
 1628 001a 9847     	 blx r3
 1629              	.LVL21:
 711:.././hal/sam3u1c/usart.c **** 
 712:.././hal/sam3u1c/usart.c **** 	/* Check whether the input values are legal. */
 713:.././hal/sam3u1c/usart.c **** 	if (!p_usart_opt || p_usart_opt->spi_mode > SPI_MODE_3) {
 1630              	 .loc 1 713 0
 1631 001c 3B68     	 ldr r3,[r7]
 1632 001e 002B     	 cmp r3,#0
 1633 0020 03D0     	 beq .L93
 1634              	 .loc 1 713 0 is_stmt 0 discriminator 1
 1635 0022 3B68     	 ldr r3,[r7]
 1636 0024 9B68     	 ldr r3,[r3,#8]
 1637 0026 032B     	 cmp r3,#3
 1638 0028 01D9     	 bls .L94
 1639              	.L93:
 714:.././hal/sam3u1c/usart.c **** 		return 1;
 1640              	 .loc 1 714 0 is_stmt 1
 1641 002a 0123     	 movs r3,#1
 1642 002c 5BE0     	 b .L95
 1643              	.L94:
 715:.././hal/sam3u1c/usart.c **** 	}
 716:.././hal/sam3u1c/usart.c **** 
 717:.././hal/sam3u1c/usart.c **** 	/* Configure the character length bit in MR register. */
 718:.././hal/sam3u1c/usart.c **** 	ul_reg_val |= p_usart_opt->char_length;
 1644              	 .loc 1 718 0
 1645 002e 3B68     	 ldr r3,[r7]
 1646 0030 5A68     	 ldr r2,[r3,#4]
 1647 0032 304B     	 ldr r3,.L104+4
 1648 0034 1B68     	 ldr r3,[r3]
 1649 0036 1343     	 orrs r3,r3,r2
 1650 0038 2E4A     	 ldr r2,.L104+4
 1651 003a 1360     	 str r3,[r2]
 719:.././hal/sam3u1c/usart.c **** 
 720:.././hal/sam3u1c/usart.c **** 	/* Set SPI slave mode and channel mode. */
 721:.././hal/sam3u1c/usart.c **** 	ul_reg_val |= US_MR_USART_MODE_SPI_SLAVE | p_usart_opt->channel_mode;
 1652              	 .loc 1 721 0
 1653 003c 3B68     	 ldr r3,[r7]
 1654 003e DA68     	 ldr r2,[r3,#12]
 1655 0040 2C4B     	 ldr r3,.L104+4
 1656 0042 1B68     	 ldr r3,[r3]
 1657 0044 1343     	 orrs r3,r3,r2
 1658 0046 43F00F03 	 orr r3,r3,#15
 1659 004a 2A4A     	 ldr r2,.L104+4
 1660 004c 1360     	 str r3,[r2]
 722:.././hal/sam3u1c/usart.c **** 
 723:.././hal/sam3u1c/usart.c **** 	switch (p_usart_opt->spi_mode) {
 1661              	 .loc 1 723 0
 1662 004e 3B68     	 ldr r3,[r7]
 1663 0050 9B68     	 ldr r3,[r3,#8]
 1664 0052 032B     	 cmp r3,#3
 1665 0054 3ED8     	 bhi .L103
 1666 0056 01A2     	 adr r2,.L98
 1667 0058 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1668              	 .p2align 2
 1669              	.L98:
 1670 005c 6D000000 	 .word .L97+1
 1671 0060 87000000 	 .word .L99+1
 1672 0064 A1000000 	 .word .L100+1
 1673 0068 BB000000 	 .word .L101+1
 1674              	 .p2align 1
 1675              	.L97:
 724:.././hal/sam3u1c/usart.c **** 	case SPI_MODE_0:
 725:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_CPHA;
 1676              	 .loc 1 725 0
 1677 006c 214B     	 ldr r3,.L104+4
 1678 006e 1B68     	 ldr r3,[r3]
 1679 0070 43F48073 	 orr r3,r3,#256
 1680 0074 1F4A     	 ldr r2,.L104+4
 1681 0076 1360     	 str r3,[r2]
 726:.././hal/sam3u1c/usart.c **** 		ul_reg_val &= ~US_MR_CPOL;
 1682              	 .loc 1 726 0
 1683 0078 1E4B     	 ldr r3,.L104+4
 1684 007a 1B68     	 ldr r3,[r3]
 1685 007c 23F48033 	 bic r3,r3,#65536
 1686 0080 1C4A     	 ldr r2,.L104+4
 1687 0082 1360     	 str r3,[r2]
 727:.././hal/sam3u1c/usart.c **** 		break;
 1688              	 .loc 1 727 0
 1689 0084 27E0     	 b .L102
 1690              	.L99:
 728:.././hal/sam3u1c/usart.c **** 
 729:.././hal/sam3u1c/usart.c **** 	case SPI_MODE_1:
 730:.././hal/sam3u1c/usart.c **** 		ul_reg_val &= ~US_MR_CPHA;
 1691              	 .loc 1 730 0
 1692 0086 1B4B     	 ldr r3,.L104+4
 1693 0088 1B68     	 ldr r3,[r3]
 1694 008a 23F48073 	 bic r3,r3,#256
 1695 008e 194A     	 ldr r2,.L104+4
 1696 0090 1360     	 str r3,[r2]
 731:.././hal/sam3u1c/usart.c **** 		ul_reg_val &= ~US_MR_CPOL;
 1697              	 .loc 1 731 0
 1698 0092 184B     	 ldr r3,.L104+4
 1699 0094 1B68     	 ldr r3,[r3]
 1700 0096 23F48033 	 bic r3,r3,#65536
 1701 009a 164A     	 ldr r2,.L104+4
 1702 009c 1360     	 str r3,[r2]
 732:.././hal/sam3u1c/usart.c **** 		break;
 1703              	 .loc 1 732 0
 1704 009e 1AE0     	 b .L102
 1705              	.L100:
 733:.././hal/sam3u1c/usart.c **** 
 734:.././hal/sam3u1c/usart.c **** 	case SPI_MODE_2:
 735:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_CPHA;
 1706              	 .loc 1 735 0
 1707 00a0 144B     	 ldr r3,.L104+4
 1708 00a2 1B68     	 ldr r3,[r3]
 1709 00a4 43F48073 	 orr r3,r3,#256
 1710 00a8 124A     	 ldr r2,.L104+4
 1711 00aa 1360     	 str r3,[r2]
 736:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_CPOL;
 1712              	 .loc 1 736 0
 1713 00ac 114B     	 ldr r3,.L104+4
 1714 00ae 1B68     	 ldr r3,[r3]
 1715 00b0 43F48033 	 orr r3,r3,#65536
 1716 00b4 0F4A     	 ldr r2,.L104+4
 1717 00b6 1360     	 str r3,[r2]
 737:.././hal/sam3u1c/usart.c **** 		break;
 1718              	 .loc 1 737 0
 1719 00b8 0DE0     	 b .L102
 1720              	.L101:
 738:.././hal/sam3u1c/usart.c **** 
 739:.././hal/sam3u1c/usart.c **** 	case SPI_MODE_3:
 740:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_CPOL;
 1721              	 .loc 1 740 0
 1722 00ba 0E4B     	 ldr r3,.L104+4
 1723 00bc 1B68     	 ldr r3,[r3]
 1724 00be 43F48033 	 orr r3,r3,#65536
 1725 00c2 0C4A     	 ldr r2,.L104+4
 1726 00c4 1360     	 str r3,[r2]
 741:.././hal/sam3u1c/usart.c **** 		ul_reg_val &= ~US_MR_CPHA;
 1727              	 .loc 1 741 0
 1728 00c6 0B4B     	 ldr r3,.L104+4
 1729 00c8 1B68     	 ldr r3,[r3]
 1730 00ca 23F48073 	 bic r3,r3,#256
 1731 00ce 094A     	 ldr r2,.L104+4
 1732 00d0 1360     	 str r3,[r2]
 742:.././hal/sam3u1c/usart.c **** 		break;
 1733              	 .loc 1 742 0
 1734 00d2 00E0     	 b .L102
 1735              	.L103:
 743:.././hal/sam3u1c/usart.c **** 
 744:.././hal/sam3u1c/usart.c **** 	default:
 745:.././hal/sam3u1c/usart.c **** 		break;
 1736              	 .loc 1 745 0
 1737 00d4 00BF     	 nop
 1738              	.L102:
 746:.././hal/sam3u1c/usart.c **** 	}
 747:.././hal/sam3u1c/usart.c **** 
 748:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR |= ul_reg_val;
 1739              	 .loc 1 748 0
 1740 00d6 7B68     	 ldr r3,[r7,#4]
 1741 00d8 5A68     	 ldr r2,[r3,#4]
 1742 00da 064B     	 ldr r3,.L104+4
 1743 00dc 1B68     	 ldr r3,[r3]
 1744 00de 1A43     	 orrs r2,r2,r3
 1745 00e0 7B68     	 ldr r3,[r7,#4]
 1746 00e2 5A60     	 str r2,[r3,#4]
 749:.././hal/sam3u1c/usart.c **** 
 750:.././hal/sam3u1c/usart.c **** 	return 0;
 1747              	 .loc 1 750 0
 1748 00e4 0023     	 movs r3,#0
 1749              	.L95:
 751:.././hal/sam3u1c/usart.c **** }
 1750              	 .loc 1 751 0
 1751 00e6 1846     	 mov r0,r3
 1752 00e8 0837     	 adds r7,r7,#8
 1753              	.LCFI89:
 1754              	 .cfi_def_cfa_offset 8
 1755 00ea BD46     	 mov sp,r7
 1756              	.LCFI90:
 1757              	 .cfi_def_cfa_register 13
 1758              	 
 1759 00ec 80BD     	 pop {r7,pc}
 1760              	.L105:
 1761 00ee 00BF     	 .align 2
 1762              	.L104:
 1763 00f0 00000000 	 .word usart_reset
 1764 00f4 00000000 	 .word ul_reg_val.7146
 1765 00f8 00000000 	 .word usart_set_spi_slave_baudrate
 1766              	 .cfi_endproc
 1767              	.LFE83:
 1769              	 .section .text.usart_enable_tx,"ax",%progbits
 1770              	 .align 1
 1771              	 .global usart_enable_tx
 1772              	 .syntax unified
 1773              	 .thumb
 1774              	 .thumb_func
 1775              	 .fpu softvfp
 1777              	usart_enable_tx:
 1778              	.LFB84:
 752:.././hal/sam3u1c/usart.c **** 
 753:.././hal/sam3u1c/usart.c **** #if (SAM3XA || SAM4L || SAMG55)
 754:.././hal/sam3u1c/usart.c **** 
 755:.././hal/sam3u1c/usart.c **** /**
 756:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in LIN mode and act as a LIN master.
 757:.././hal/sam3u1c/usart.c ****  *
 758:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 759:.././hal/sam3u1c/usart.c ****  *
 760:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 761:.././hal/sam3u1c/usart.c ****  * \param ul_baudrate Baudrate to be used.
 762:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 763:.././hal/sam3u1c/usart.c ****  *
 764:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 765:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 766:.././hal/sam3u1c/usart.c ****  */
 767:.././hal/sam3u1c/usart.c **** uint32_t usart_init_lin_master(Usart *p_usart,uint32_t ul_baudrate,
 768:.././hal/sam3u1c/usart.c **** 		uint32_t ul_mck)
 769:.././hal/sam3u1c/usart.c **** {
 770:.././hal/sam3u1c/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 771:.././hal/sam3u1c/usart.c **** 	usart_reset(p_usart);
 772:.././hal/sam3u1c/usart.c **** 
 773:.././hal/sam3u1c/usart.c **** 	/* Set up the baudrate. */
 774:.././hal/sam3u1c/usart.c **** 	if (usart_set_async_baudrate(p_usart, ul_baudrate, ul_mck)) {
 775:.././hal/sam3u1c/usart.c **** 		return 1;
 776:.././hal/sam3u1c/usart.c **** 	}
 777:.././hal/sam3u1c/usart.c **** 
 778:.././hal/sam3u1c/usart.c **** 	/* Set LIN master mode. */
 779:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
 780:.././hal/sam3u1c/usart.c **** 			US_MR_USART_MODE_LIN_MASTER;
 781:.././hal/sam3u1c/usart.c **** 
 782:.././hal/sam3u1c/usart.c **** 	usart_enable_rx(p_usart);
 783:.././hal/sam3u1c/usart.c **** 	usart_enable_tx(p_usart);
 784:.././hal/sam3u1c/usart.c **** 
 785:.././hal/sam3u1c/usart.c **** 	return 0;
 786:.././hal/sam3u1c/usart.c **** }
 787:.././hal/sam3u1c/usart.c **** 
 788:.././hal/sam3u1c/usart.c **** /**
 789:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in LIN mode and act as a LIN slave.
 790:.././hal/sam3u1c/usart.c ****  *
 791:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 792:.././hal/sam3u1c/usart.c ****  *
 793:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 794:.././hal/sam3u1c/usart.c ****  * \param ul_baudrate Baudrate to be used.
 795:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 796:.././hal/sam3u1c/usart.c ****  *
 797:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 798:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 799:.././hal/sam3u1c/usart.c ****  */
 800:.././hal/sam3u1c/usart.c **** uint32_t usart_init_lin_slave(Usart *p_usart, uint32_t ul_baudrate,
 801:.././hal/sam3u1c/usart.c **** 		uint32_t ul_mck)
 802:.././hal/sam3u1c/usart.c **** {
 803:.././hal/sam3u1c/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 804:.././hal/sam3u1c/usart.c **** 	usart_reset(p_usart);
 805:.././hal/sam3u1c/usart.c **** 
 806:.././hal/sam3u1c/usart.c **** 	usart_enable_rx(p_usart);
 807:.././hal/sam3u1c/usart.c **** 	usart_enable_tx(p_usart);
 808:.././hal/sam3u1c/usart.c **** 
 809:.././hal/sam3u1c/usart.c **** 	/* Set LIN slave mode. */
 810:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
 811:.././hal/sam3u1c/usart.c **** 			US_MR_USART_MODE_LIN_SLAVE;
 812:.././hal/sam3u1c/usart.c **** 
 813:.././hal/sam3u1c/usart.c **** 	/* Set up the baudrate. */
 814:.././hal/sam3u1c/usart.c **** 	if (usart_set_async_baudrate(p_usart, ul_baudrate, ul_mck)) {
 815:.././hal/sam3u1c/usart.c **** 		return 1;
 816:.././hal/sam3u1c/usart.c **** 	}
 817:.././hal/sam3u1c/usart.c **** 
 818:.././hal/sam3u1c/usart.c **** 	return 0;
 819:.././hal/sam3u1c/usart.c **** }
 820:.././hal/sam3u1c/usart.c **** 
 821:.././hal/sam3u1c/usart.c **** /**
 822:.././hal/sam3u1c/usart.c ****  * \brief Abort the current LIN transmission.
 823:.././hal/sam3u1c/usart.c ****  *
 824:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 825:.././hal/sam3u1c/usart.c ****  */
 826:.././hal/sam3u1c/usart.c **** void usart_lin_abort_tx(Usart *p_usart)
 827:.././hal/sam3u1c/usart.c **** {
 828:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_LINABT;
 829:.././hal/sam3u1c/usart.c **** }
 830:.././hal/sam3u1c/usart.c **** 
 831:.././hal/sam3u1c/usart.c **** /**
 832:.././hal/sam3u1c/usart.c ****  * \brief Send a wakeup signal on the LIN bus.
 833:.././hal/sam3u1c/usart.c ****  *
 834:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 835:.././hal/sam3u1c/usart.c ****  */
 836:.././hal/sam3u1c/usart.c **** void usart_lin_send_wakeup_signal(Usart *p_usart)
 837:.././hal/sam3u1c/usart.c **** {
 838:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_LINWKUP;
 839:.././hal/sam3u1c/usart.c **** }
 840:.././hal/sam3u1c/usart.c **** 
 841:.././hal/sam3u1c/usart.c **** /**
 842:.././hal/sam3u1c/usart.c ****  * \brief Configure the LIN node action, which should be one of PUBLISH,
 843:.././hal/sam3u1c/usart.c ****  * SUBSCRIBE or IGNORE.
 844:.././hal/sam3u1c/usart.c ****  *
 845:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 846:.././hal/sam3u1c/usart.c ****  * \param uc_action 0 for PUBLISH, 1 for SUBSCRIBE, 2 for IGNORE.
 847:.././hal/sam3u1c/usart.c ****  */
 848:.././hal/sam3u1c/usart.c **** void usart_lin_set_node_action(Usart *p_usart, uint8_t uc_action)
 849:.././hal/sam3u1c/usart.c **** {
 850:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR = (p_usart->US_LINMR & ~US_LINMR_NACT_Msk) |
 851:.././hal/sam3u1c/usart.c **** 			(uc_action << US_LINMR_NACT_Pos);
 852:.././hal/sam3u1c/usart.c **** }
 853:.././hal/sam3u1c/usart.c **** 
 854:.././hal/sam3u1c/usart.c **** /**
 855:.././hal/sam3u1c/usart.c ****  * \brief Disable the parity check during the LIN communication.
 856:.././hal/sam3u1c/usart.c ****  *
 857:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 858:.././hal/sam3u1c/usart.c ****  */
 859:.././hal/sam3u1c/usart.c **** void usart_lin_disable_parity(Usart *p_usart)
 860:.././hal/sam3u1c/usart.c **** {
 861:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR |= US_LINMR_PARDIS;
 862:.././hal/sam3u1c/usart.c **** }
 863:.././hal/sam3u1c/usart.c **** 
 864:.././hal/sam3u1c/usart.c **** /**
 865:.././hal/sam3u1c/usart.c ****  * \brief Enable the parity check during the LIN communication.
 866:.././hal/sam3u1c/usart.c ****  *
 867:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 868:.././hal/sam3u1c/usart.c ****  */
 869:.././hal/sam3u1c/usart.c **** void usart_lin_enable_parity(Usart *p_usart)
 870:.././hal/sam3u1c/usart.c **** {
 871:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR &= ~US_LINMR_PARDIS;
 872:.././hal/sam3u1c/usart.c **** }
 873:.././hal/sam3u1c/usart.c **** 
 874:.././hal/sam3u1c/usart.c **** /**
 875:.././hal/sam3u1c/usart.c ****  * \brief Disable the checksum during the LIN communication.
 876:.././hal/sam3u1c/usart.c ****  *
 877:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 878:.././hal/sam3u1c/usart.c ****  */
 879:.././hal/sam3u1c/usart.c **** void usart_lin_disable_checksum(Usart *p_usart)
 880:.././hal/sam3u1c/usart.c **** {
 881:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR |= US_LINMR_CHKDIS;
 882:.././hal/sam3u1c/usart.c **** }
 883:.././hal/sam3u1c/usart.c **** 
 884:.././hal/sam3u1c/usart.c **** /**
 885:.././hal/sam3u1c/usart.c ****  * \brief Enable the checksum during the LIN communication.
 886:.././hal/sam3u1c/usart.c ****  *
 887:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 888:.././hal/sam3u1c/usart.c ****  */
 889:.././hal/sam3u1c/usart.c **** void usart_lin_enable_checksum(Usart *p_usart)
 890:.././hal/sam3u1c/usart.c **** {
 891:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR &= ~US_LINMR_CHKDIS;
 892:.././hal/sam3u1c/usart.c **** }
 893:.././hal/sam3u1c/usart.c **** 
 894:.././hal/sam3u1c/usart.c **** /**
 895:.././hal/sam3u1c/usart.c ****  * \brief Configure the checksum type during the LIN communication.
 896:.././hal/sam3u1c/usart.c ****  *
 897:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 898:.././hal/sam3u1c/usart.c ****  * \param uc_type 0 for LIN 2.0 Enhanced checksum or 1 for LIN 1.3 Classic
 899:.././hal/sam3u1c/usart.c ****  *  checksum.
 900:.././hal/sam3u1c/usart.c ****  */
 901:.././hal/sam3u1c/usart.c **** void usart_lin_set_checksum_type(Usart *p_usart, uint8_t uc_type)
 902:.././hal/sam3u1c/usart.c **** {
 903:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR = (p_usart->US_LINMR & ~US_LINMR_CHKTYP) |
 904:.././hal/sam3u1c/usart.c **** 			(uc_type << 4);
 905:.././hal/sam3u1c/usart.c **** }
 906:.././hal/sam3u1c/usart.c **** 
 907:.././hal/sam3u1c/usart.c **** /**
 908:.././hal/sam3u1c/usart.c ****  * \brief Configure the data length mode during the LIN communication.
 909:.././hal/sam3u1c/usart.c ****  *
 910:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 911:.././hal/sam3u1c/usart.c ****  * \param uc_mode Indicate the data length type: 0 if the data length is
 912:.././hal/sam3u1c/usart.c ****  * defined by the DLC of LIN mode register or 1 if the data length is defined
 913:.././hal/sam3u1c/usart.c ****  * by the bit 5 and 6 of the identifier.
 914:.././hal/sam3u1c/usart.c ****  */
 915:.././hal/sam3u1c/usart.c **** void usart_lin_set_data_len_mode(Usart *p_usart, uint8_t uc_mode)
 916:.././hal/sam3u1c/usart.c **** {
 917:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR = (p_usart->US_LINMR & ~US_LINMR_DLM) |
 918:.././hal/sam3u1c/usart.c **** 			(uc_mode << 5);
 919:.././hal/sam3u1c/usart.c **** }
 920:.././hal/sam3u1c/usart.c **** 
 921:.././hal/sam3u1c/usart.c **** /**
 922:.././hal/sam3u1c/usart.c ****  * \brief Disable the frame slot mode during the LIN communication.
 923:.././hal/sam3u1c/usart.c ****  *
 924:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 925:.././hal/sam3u1c/usart.c ****  */
 926:.././hal/sam3u1c/usart.c **** void usart_lin_disable_frame_slot(Usart *p_usart)
 927:.././hal/sam3u1c/usart.c **** {
 928:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR |= US_LINMR_FSDIS;
 929:.././hal/sam3u1c/usart.c **** }
 930:.././hal/sam3u1c/usart.c **** 
 931:.././hal/sam3u1c/usart.c **** /**
 932:.././hal/sam3u1c/usart.c ****  * \brief Enable the frame slot mode during the LIN communication.
 933:.././hal/sam3u1c/usart.c ****  *
 934:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 935:.././hal/sam3u1c/usart.c ****  */
 936:.././hal/sam3u1c/usart.c **** void usart_lin_enable_frame_slot(Usart *p_usart)
 937:.././hal/sam3u1c/usart.c **** {
 938:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR &= ~US_LINMR_FSDIS;
 939:.././hal/sam3u1c/usart.c **** }
 940:.././hal/sam3u1c/usart.c **** 
 941:.././hal/sam3u1c/usart.c **** /**
 942:.././hal/sam3u1c/usart.c ****  * \brief Configure the wakeup signal type during the LIN communication.
 943:.././hal/sam3u1c/usart.c ****  *
 944:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 945:.././hal/sam3u1c/usart.c ****  * \param uc_type Indicate the checksum type: 0 if the wakeup signal is a
 946:.././hal/sam3u1c/usart.c ****  * LIN 2.0 wakeup signal; 1 if the wakeup signal is a LIN 1.3 wakeup signal.
 947:.././hal/sam3u1c/usart.c ****  */
 948:.././hal/sam3u1c/usart.c **** void usart_lin_set_wakeup_signal_type(Usart *p_usart, uint8_t uc_type)
 949:.././hal/sam3u1c/usart.c **** {
 950:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR = (p_usart->US_LINMR & ~US_LINMR_WKUPTYP) |
 951:.././hal/sam3u1c/usart.c **** 			(uc_type << 7);
 952:.././hal/sam3u1c/usart.c **** }
 953:.././hal/sam3u1c/usart.c **** 
 954:.././hal/sam3u1c/usart.c **** /**
 955:.././hal/sam3u1c/usart.c ****  * \brief Configure the response data length if the data length is defined by
 956:.././hal/sam3u1c/usart.c ****  * the DLC field during the LIN communication.
 957:.././hal/sam3u1c/usart.c ****  *
 958:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 959:.././hal/sam3u1c/usart.c ****  * \param uc_len Indicate the response data length.
 960:.././hal/sam3u1c/usart.c ****  */
 961:.././hal/sam3u1c/usart.c **** void usart_lin_set_response_data_len(Usart *p_usart, uint8_t uc_len)
 962:.././hal/sam3u1c/usart.c **** {
 963:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR = (p_usart->US_LINMR & ~US_LINMR_DLC_Msk) |
 964:.././hal/sam3u1c/usart.c **** 			((uc_len - 1) << US_LINMR_DLC_Pos);
 965:.././hal/sam3u1c/usart.c **** }
 966:.././hal/sam3u1c/usart.c **** 
 967:.././hal/sam3u1c/usart.c **** /**
 968:.././hal/sam3u1c/usart.c ****  * \brief The LIN mode register is not written by the PDC.
 969:.././hal/sam3u1c/usart.c ****  *
 970:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 971:.././hal/sam3u1c/usart.c ****  */
 972:.././hal/sam3u1c/usart.c **** void usart_lin_disable_pdc_mode(Usart *p_usart)
 973:.././hal/sam3u1c/usart.c **** {
 974:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR &= ~US_LINMR_PDCM;
 975:.././hal/sam3u1c/usart.c **** }
 976:.././hal/sam3u1c/usart.c **** 
 977:.././hal/sam3u1c/usart.c **** /**
 978:.././hal/sam3u1c/usart.c ****  * \brief The LIN mode register (except this flag) is written by the PDC.
 979:.././hal/sam3u1c/usart.c ****  *
 980:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 981:.././hal/sam3u1c/usart.c ****  */
 982:.././hal/sam3u1c/usart.c **** void usart_lin_enable_pdc_mode(Usart *p_usart)
 983:.././hal/sam3u1c/usart.c **** {
 984:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR |= US_LINMR_PDCM;
 985:.././hal/sam3u1c/usart.c **** }
 986:.././hal/sam3u1c/usart.c **** 
 987:.././hal/sam3u1c/usart.c **** /**
 988:.././hal/sam3u1c/usart.c ****  * \brief Configure the LIN identifier when USART works in LIN master mode.
 989:.././hal/sam3u1c/usart.c ****  *
 990:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 991:.././hal/sam3u1c/usart.c ****  * \param uc_id The identifier to be transmitted.
 992:.././hal/sam3u1c/usart.c ****  */
 993:.././hal/sam3u1c/usart.c **** void usart_lin_set_tx_identifier(Usart *p_usart, uint8_t uc_id)
 994:.././hal/sam3u1c/usart.c **** {
 995:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINIR = (p_usart->US_LINIR & ~US_LINIR_IDCHR_Msk) |
 996:.././hal/sam3u1c/usart.c **** 			US_LINIR_IDCHR(uc_id);
 997:.././hal/sam3u1c/usart.c **** }
 998:.././hal/sam3u1c/usart.c **** 
 999:.././hal/sam3u1c/usart.c **** /**
1000:.././hal/sam3u1c/usart.c ****  * \brief Read the identifier when USART works in LIN mode.
1001:.././hal/sam3u1c/usart.c ****  *
1002:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1003:.././hal/sam3u1c/usart.c ****  *
1004:.././hal/sam3u1c/usart.c ****  * \return The last identifier received in LIN slave mode or the last
1005:.././hal/sam3u1c/usart.c ****  * identifier transmitted in LIN master mode.
1006:.././hal/sam3u1c/usart.c ****  */
1007:.././hal/sam3u1c/usart.c **** uint8_t usart_lin_read_identifier(Usart *p_usart)
1008:.././hal/sam3u1c/usart.c **** {
1009:.././hal/sam3u1c/usart.c **** 	return (p_usart->US_LINIR & US_LINIR_IDCHR_Msk);
1010:.././hal/sam3u1c/usart.c **** }
1011:.././hal/sam3u1c/usart.c **** 
1012:.././hal/sam3u1c/usart.c **** /**
1013:.././hal/sam3u1c/usart.c ****  * \brief Get data length.
1014:.././hal/sam3u1c/usart.c ****  *
1015:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1016:.././hal/sam3u1c/usart.c ****  *
1017:.././hal/sam3u1c/usart.c ****  * \return Data length.
1018:.././hal/sam3u1c/usart.c ****  */
1019:.././hal/sam3u1c/usart.c **** uint8_t usart_lin_get_data_length(Usart *usart)
1020:.././hal/sam3u1c/usart.c **** {
1021:.././hal/sam3u1c/usart.c **** 	if (usart->US_LINMR & US_LINMR_DLM) {
1022:.././hal/sam3u1c/usart.c **** 		uint8_t data_length = 1 << ((usart->US_LINIR >>
1023:.././hal/sam3u1c/usart.c **** 				(US_LINIR_IDCHR_Pos + 4)) & 0x03);
1024:.././hal/sam3u1c/usart.c **** 		return data_length;
1025:.././hal/sam3u1c/usart.c **** 	} else {
1026:.././hal/sam3u1c/usart.c **** 		return ((usart->US_LINMR & US_LINMR_DLC_Msk) >> US_LINMR_DLC_Pos) + 1;
1027:.././hal/sam3u1c/usart.c **** 	}
1028:.././hal/sam3u1c/usart.c **** }
1029:.././hal/sam3u1c/usart.c **** 
1030:.././hal/sam3u1c/usart.c **** #endif
1031:.././hal/sam3u1c/usart.c **** 
1032:.././hal/sam3u1c/usart.c **** /**
1033:.././hal/sam3u1c/usart.c ****  * \brief Enable USART transmitter.
1034:.././hal/sam3u1c/usart.c ****  *
1035:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1036:.././hal/sam3u1c/usart.c ****  */
1037:.././hal/sam3u1c/usart.c **** void usart_enable_tx(Usart *p_usart)
1038:.././hal/sam3u1c/usart.c **** {
 1779              	 .loc 1 1038 0
 1780              	 .cfi_startproc
 1781              	 
 1782              	 
 1783              	 
 1784 0000 80B4     	 push {r7}
 1785              	.LCFI91:
 1786              	 .cfi_def_cfa_offset 4
 1787              	 .cfi_offset 7,-4
 1788 0002 83B0     	 sub sp,sp,#12
 1789              	.LCFI92:
 1790              	 .cfi_def_cfa_offset 16
 1791 0004 00AF     	 add r7,sp,#0
 1792              	.LCFI93:
 1793              	 .cfi_def_cfa_register 7
 1794 0006 7860     	 str r0,[r7,#4]
1039:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_TXEN;
 1795              	 .loc 1 1039 0
 1796 0008 7B68     	 ldr r3,[r7,#4]
 1797 000a 4022     	 movs r2,#64
 1798 000c 1A60     	 str r2,[r3]
1040:.././hal/sam3u1c/usart.c **** }
 1799              	 .loc 1 1040 0
 1800 000e 00BF     	 nop
 1801 0010 0C37     	 adds r7,r7,#12
 1802              	.LCFI94:
 1803              	 .cfi_def_cfa_offset 4
 1804 0012 BD46     	 mov sp,r7
 1805              	.LCFI95:
 1806              	 .cfi_def_cfa_register 13
 1807              	 
 1808 0014 80BC     	 pop {r7}
 1809              	.LCFI96:
 1810              	 .cfi_restore 7
 1811              	 .cfi_def_cfa_offset 0
 1812 0016 7047     	 bx lr
 1813              	 .cfi_endproc
 1814              	.LFE84:
 1816              	 .section .text.usart_disable_tx,"ax",%progbits
 1817              	 .align 1
 1818              	 .global usart_disable_tx
 1819              	 .syntax unified
 1820              	 .thumb
 1821              	 .thumb_func
 1822              	 .fpu softvfp
 1824              	usart_disable_tx:
 1825              	.LFB85:
1041:.././hal/sam3u1c/usart.c **** 
1042:.././hal/sam3u1c/usart.c **** /**
1043:.././hal/sam3u1c/usart.c ****  * \brief Disable USART transmitter.
1044:.././hal/sam3u1c/usart.c ****  *
1045:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1046:.././hal/sam3u1c/usart.c ****  */
1047:.././hal/sam3u1c/usart.c **** void usart_disable_tx(Usart *p_usart)
1048:.././hal/sam3u1c/usart.c **** {
 1826              	 .loc 1 1048 0
 1827              	 .cfi_startproc
 1828              	 
 1829              	 
 1830              	 
 1831 0000 80B4     	 push {r7}
 1832              	.LCFI97:
 1833              	 .cfi_def_cfa_offset 4
 1834              	 .cfi_offset 7,-4
 1835 0002 83B0     	 sub sp,sp,#12
 1836              	.LCFI98:
 1837              	 .cfi_def_cfa_offset 16
 1838 0004 00AF     	 add r7,sp,#0
 1839              	.LCFI99:
 1840              	 .cfi_def_cfa_register 7
 1841 0006 7860     	 str r0,[r7,#4]
1049:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_TXDIS;
 1842              	 .loc 1 1049 0
 1843 0008 7B68     	 ldr r3,[r7,#4]
 1844 000a 8022     	 movs r2,#128
 1845 000c 1A60     	 str r2,[r3]
1050:.././hal/sam3u1c/usart.c **** }
 1846              	 .loc 1 1050 0
 1847 000e 00BF     	 nop
 1848 0010 0C37     	 adds r7,r7,#12
 1849              	.LCFI100:
 1850              	 .cfi_def_cfa_offset 4
 1851 0012 BD46     	 mov sp,r7
 1852              	.LCFI101:
 1853              	 .cfi_def_cfa_register 13
 1854              	 
 1855 0014 80BC     	 pop {r7}
 1856              	.LCFI102:
 1857              	 .cfi_restore 7
 1858              	 .cfi_def_cfa_offset 0
 1859 0016 7047     	 bx lr
 1860              	 .cfi_endproc
 1861              	.LFE85:
 1863              	 .section .text.usart_reset_tx,"ax",%progbits
 1864              	 .align 1
 1865              	 .global usart_reset_tx
 1866              	 .syntax unified
 1867              	 .thumb
 1868              	 .thumb_func
 1869              	 .fpu softvfp
 1871              	usart_reset_tx:
 1872              	.LFB86:
1051:.././hal/sam3u1c/usart.c **** 
1052:.././hal/sam3u1c/usart.c **** /**
1053:.././hal/sam3u1c/usart.c ****  * \brief Immediately stop and disable USART transmitter.
1054:.././hal/sam3u1c/usart.c ****  *
1055:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1056:.././hal/sam3u1c/usart.c ****  */
1057:.././hal/sam3u1c/usart.c **** void usart_reset_tx(Usart *p_usart)
1058:.././hal/sam3u1c/usart.c **** {
 1873              	 .loc 1 1058 0
 1874              	 .cfi_startproc
 1875              	 
 1876              	 
 1877              	 
 1878 0000 80B4     	 push {r7}
 1879              	.LCFI103:
 1880              	 .cfi_def_cfa_offset 4
 1881              	 .cfi_offset 7,-4
 1882 0002 83B0     	 sub sp,sp,#12
 1883              	.LCFI104:
 1884              	 .cfi_def_cfa_offset 16
 1885 0004 00AF     	 add r7,sp,#0
 1886              	.LCFI105:
 1887              	 .cfi_def_cfa_register 7
 1888 0006 7860     	 str r0,[r7,#4]
1059:.././hal/sam3u1c/usart.c **** 	/* Reset transmitter */
1060:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
 1889              	 .loc 1 1060 0
 1890 0008 7B68     	 ldr r3,[r7,#4]
 1891 000a 8822     	 movs r2,#136
 1892 000c 1A60     	 str r2,[r3]
1061:.././hal/sam3u1c/usart.c **** }
 1893              	 .loc 1 1061 0
 1894 000e 00BF     	 nop
 1895 0010 0C37     	 adds r7,r7,#12
 1896              	.LCFI106:
 1897              	 .cfi_def_cfa_offset 4
 1898 0012 BD46     	 mov sp,r7
 1899              	.LCFI107:
 1900              	 .cfi_def_cfa_register 13
 1901              	 
 1902 0014 80BC     	 pop {r7}
 1903              	.LCFI108:
 1904              	 .cfi_restore 7
 1905              	 .cfi_def_cfa_offset 0
 1906 0016 7047     	 bx lr
 1907              	 .cfi_endproc
 1908              	.LFE86:
 1910              	 .section .text.usart_set_tx_timeguard,"ax",%progbits
 1911              	 .align 1
 1912              	 .global usart_set_tx_timeguard
 1913              	 .syntax unified
 1914              	 .thumb
 1915              	 .thumb_func
 1916              	 .fpu softvfp
 1918              	usart_set_tx_timeguard:
 1919              	.LFB87:
1062:.././hal/sam3u1c/usart.c **** 
1063:.././hal/sam3u1c/usart.c **** /**
1064:.././hal/sam3u1c/usart.c ****  * \brief Configure the transmit timeguard register.
1065:.././hal/sam3u1c/usart.c ****  *
1066:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1067:.././hal/sam3u1c/usart.c ****  * \param timeguard The value of transmit timeguard.
1068:.././hal/sam3u1c/usart.c ****  */
1069:.././hal/sam3u1c/usart.c **** void usart_set_tx_timeguard(Usart *p_usart, uint32_t timeguard)
1070:.././hal/sam3u1c/usart.c **** {
 1920              	 .loc 1 1070 0
 1921              	 .cfi_startproc
 1922              	 
 1923              	 
 1924              	 
 1925 0000 80B4     	 push {r7}
 1926              	.LCFI109:
 1927              	 .cfi_def_cfa_offset 4
 1928              	 .cfi_offset 7,-4
 1929 0002 83B0     	 sub sp,sp,#12
 1930              	.LCFI110:
 1931              	 .cfi_def_cfa_offset 16
 1932 0004 00AF     	 add r7,sp,#0
 1933              	.LCFI111:
 1934              	 .cfi_def_cfa_register 7
 1935 0006 7860     	 str r0,[r7,#4]
 1936 0008 3960     	 str r1,[r7]
1071:.././hal/sam3u1c/usart.c **** 	p_usart->US_TTGR = timeguard;
 1937              	 .loc 1 1071 0
 1938 000a 7B68     	 ldr r3,[r7,#4]
 1939 000c 3A68     	 ldr r2,[r7]
 1940 000e 9A62     	 str r2,[r3,#40]
1072:.././hal/sam3u1c/usart.c **** }
 1941              	 .loc 1 1072 0
 1942 0010 00BF     	 nop
 1943 0012 0C37     	 adds r7,r7,#12
 1944              	.LCFI112:
 1945              	 .cfi_def_cfa_offset 4
 1946 0014 BD46     	 mov sp,r7
 1947              	.LCFI113:
 1948              	 .cfi_def_cfa_register 13
 1949              	 
 1950 0016 80BC     	 pop {r7}
 1951              	.LCFI114:
 1952              	 .cfi_restore 7
 1953              	 .cfi_def_cfa_offset 0
 1954 0018 7047     	 bx lr
 1955              	 .cfi_endproc
 1956              	.LFE87:
 1958              	 .section .text.usart_enable_rx,"ax",%progbits
 1959              	 .align 1
 1960              	 .global usart_enable_rx
 1961              	 .syntax unified
 1962              	 .thumb
 1963              	 .thumb_func
 1964              	 .fpu softvfp
 1966              	usart_enable_rx:
 1967              	.LFB88:
1073:.././hal/sam3u1c/usart.c **** 
1074:.././hal/sam3u1c/usart.c **** /**
1075:.././hal/sam3u1c/usart.c ****  * \brief Enable USART receiver.
1076:.././hal/sam3u1c/usart.c ****  *
1077:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1078:.././hal/sam3u1c/usart.c ****  */
1079:.././hal/sam3u1c/usart.c **** void usart_enable_rx(Usart *p_usart)
1080:.././hal/sam3u1c/usart.c **** {
 1968              	 .loc 1 1080 0
 1969              	 .cfi_startproc
 1970              	 
 1971              	 
 1972              	 
 1973 0000 80B4     	 push {r7}
 1974              	.LCFI115:
 1975              	 .cfi_def_cfa_offset 4
 1976              	 .cfi_offset 7,-4
 1977 0002 83B0     	 sub sp,sp,#12
 1978              	.LCFI116:
 1979              	 .cfi_def_cfa_offset 16
 1980 0004 00AF     	 add r7,sp,#0
 1981              	.LCFI117:
 1982              	 .cfi_def_cfa_register 7
 1983 0006 7860     	 str r0,[r7,#4]
1081:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_RXEN;
 1984              	 .loc 1 1081 0
 1985 0008 7B68     	 ldr r3,[r7,#4]
 1986 000a 1022     	 movs r2,#16
 1987 000c 1A60     	 str r2,[r3]
1082:.././hal/sam3u1c/usart.c **** }
 1988              	 .loc 1 1082 0
 1989 000e 00BF     	 nop
 1990 0010 0C37     	 adds r7,r7,#12
 1991              	.LCFI118:
 1992              	 .cfi_def_cfa_offset 4
 1993 0012 BD46     	 mov sp,r7
 1994              	.LCFI119:
 1995              	 .cfi_def_cfa_register 13
 1996              	 
 1997 0014 80BC     	 pop {r7}
 1998              	.LCFI120:
 1999              	 .cfi_restore 7
 2000              	 .cfi_def_cfa_offset 0
 2001 0016 7047     	 bx lr
 2002              	 .cfi_endproc
 2003              	.LFE88:
 2005              	 .section .text.usart_disable_rx,"ax",%progbits
 2006              	 .align 1
 2007              	 .global usart_disable_rx
 2008              	 .syntax unified
 2009              	 .thumb
 2010              	 .thumb_func
 2011              	 .fpu softvfp
 2013              	usart_disable_rx:
 2014              	.LFB89:
1083:.././hal/sam3u1c/usart.c **** 
1084:.././hal/sam3u1c/usart.c **** /**
1085:.././hal/sam3u1c/usart.c ****  * \brief Disable USART receiver.
1086:.././hal/sam3u1c/usart.c ****  *
1087:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1088:.././hal/sam3u1c/usart.c ****  */
1089:.././hal/sam3u1c/usart.c **** void usart_disable_rx(Usart *p_usart)
1090:.././hal/sam3u1c/usart.c **** {
 2015              	 .loc 1 1090 0
 2016              	 .cfi_startproc
 2017              	 
 2018              	 
 2019              	 
 2020 0000 80B4     	 push {r7}
 2021              	.LCFI121:
 2022              	 .cfi_def_cfa_offset 4
 2023              	 .cfi_offset 7,-4
 2024 0002 83B0     	 sub sp,sp,#12
 2025              	.LCFI122:
 2026              	 .cfi_def_cfa_offset 16
 2027 0004 00AF     	 add r7,sp,#0
 2028              	.LCFI123:
 2029              	 .cfi_def_cfa_register 7
 2030 0006 7860     	 str r0,[r7,#4]
1091:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_RXDIS;
 2031              	 .loc 1 1091 0
 2032 0008 7B68     	 ldr r3,[r7,#4]
 2033 000a 2022     	 movs r2,#32
 2034 000c 1A60     	 str r2,[r3]
1092:.././hal/sam3u1c/usart.c **** }
 2035              	 .loc 1 1092 0
 2036 000e 00BF     	 nop
 2037 0010 0C37     	 adds r7,r7,#12
 2038              	.LCFI124:
 2039              	 .cfi_def_cfa_offset 4
 2040 0012 BD46     	 mov sp,r7
 2041              	.LCFI125:
 2042              	 .cfi_def_cfa_register 13
 2043              	 
 2044 0014 80BC     	 pop {r7}
 2045              	.LCFI126:
 2046              	 .cfi_restore 7
 2047              	 .cfi_def_cfa_offset 0
 2048 0016 7047     	 bx lr
 2049              	 .cfi_endproc
 2050              	.LFE89:
 2052              	 .section .text.usart_reset_rx,"ax",%progbits
 2053              	 .align 1
 2054              	 .global usart_reset_rx
 2055              	 .syntax unified
 2056              	 .thumb
 2057              	 .thumb_func
 2058              	 .fpu softvfp
 2060              	usart_reset_rx:
 2061              	.LFB90:
1093:.././hal/sam3u1c/usart.c **** 
1094:.././hal/sam3u1c/usart.c **** /**
1095:.././hal/sam3u1c/usart.c ****  * \brief Immediately stop and disable USART receiver.
1096:.././hal/sam3u1c/usart.c ****  *
1097:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1098:.././hal/sam3u1c/usart.c ****  */
1099:.././hal/sam3u1c/usart.c **** void usart_reset_rx(Usart *p_usart)
1100:.././hal/sam3u1c/usart.c **** {
 2062              	 .loc 1 1100 0
 2063              	 .cfi_startproc
 2064              	 
 2065              	 
 2066              	 
 2067 0000 80B4     	 push {r7}
 2068              	.LCFI127:
 2069              	 .cfi_def_cfa_offset 4
 2070              	 .cfi_offset 7,-4
 2071 0002 83B0     	 sub sp,sp,#12
 2072              	.LCFI128:
 2073              	 .cfi_def_cfa_offset 16
 2074 0004 00AF     	 add r7,sp,#0
 2075              	.LCFI129:
 2076              	 .cfi_def_cfa_register 7
 2077 0006 7860     	 str r0,[r7,#4]
1101:.././hal/sam3u1c/usart.c **** 	/* Reset Receiver */
1102:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
 2078              	 .loc 1 1102 0
 2079 0008 7B68     	 ldr r3,[r7,#4]
 2080 000a 2422     	 movs r2,#36
 2081 000c 1A60     	 str r2,[r3]
1103:.././hal/sam3u1c/usart.c **** }
 2082              	 .loc 1 1103 0
 2083 000e 00BF     	 nop
 2084 0010 0C37     	 adds r7,r7,#12
 2085              	.LCFI130:
 2086              	 .cfi_def_cfa_offset 4
 2087 0012 BD46     	 mov sp,r7
 2088              	.LCFI131:
 2089              	 .cfi_def_cfa_register 13
 2090              	 
 2091 0014 80BC     	 pop {r7}
 2092              	.LCFI132:
 2093              	 .cfi_restore 7
 2094              	 .cfi_def_cfa_offset 0
 2095 0016 7047     	 bx lr
 2096              	 .cfi_endproc
 2097              	.LFE90:
 2099              	 .section .text.usart_set_rx_timeout,"ax",%progbits
 2100              	 .align 1
 2101              	 .global usart_set_rx_timeout
 2102              	 .syntax unified
 2103              	 .thumb
 2104              	 .thumb_func
 2105              	 .fpu softvfp
 2107              	usart_set_rx_timeout:
 2108              	.LFB91:
1104:.././hal/sam3u1c/usart.c **** 
1105:.././hal/sam3u1c/usart.c **** /**
1106:.././hal/sam3u1c/usart.c ****  * \brief Configure the receive timeout register.
1107:.././hal/sam3u1c/usart.c ****  *
1108:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1109:.././hal/sam3u1c/usart.c ****  * \param timeout The value of receive timeout.
1110:.././hal/sam3u1c/usart.c ****  */
1111:.././hal/sam3u1c/usart.c **** void usart_set_rx_timeout(Usart *p_usart, uint32_t timeout)
1112:.././hal/sam3u1c/usart.c **** {
 2109              	 .loc 1 1112 0
 2110              	 .cfi_startproc
 2111              	 
 2112              	 
 2113              	 
 2114 0000 80B4     	 push {r7}
 2115              	.LCFI133:
 2116              	 .cfi_def_cfa_offset 4
 2117              	 .cfi_offset 7,-4
 2118 0002 83B0     	 sub sp,sp,#12
 2119              	.LCFI134:
 2120              	 .cfi_def_cfa_offset 16
 2121 0004 00AF     	 add r7,sp,#0
 2122              	.LCFI135:
 2123              	 .cfi_def_cfa_register 7
 2124 0006 7860     	 str r0,[r7,#4]
 2125 0008 3960     	 str r1,[r7]
1113:.././hal/sam3u1c/usart.c **** 	p_usart->US_RTOR = timeout;
 2126              	 .loc 1 1113 0
 2127 000a 7B68     	 ldr r3,[r7,#4]
 2128 000c 3A68     	 ldr r2,[r7]
 2129 000e 5A62     	 str r2,[r3,#36]
1114:.././hal/sam3u1c/usart.c **** }
 2130              	 .loc 1 1114 0
 2131 0010 00BF     	 nop
 2132 0012 0C37     	 adds r7,r7,#12
 2133              	.LCFI136:
 2134              	 .cfi_def_cfa_offset 4
 2135 0014 BD46     	 mov sp,r7
 2136              	.LCFI137:
 2137              	 .cfi_def_cfa_register 13
 2138              	 
 2139 0016 80BC     	 pop {r7}
 2140              	.LCFI138:
 2141              	 .cfi_restore 7
 2142              	 .cfi_def_cfa_offset 0
 2143 0018 7047     	 bx lr
 2144              	 .cfi_endproc
 2145              	.LFE91:
 2147              	 .section .text.usart_enable_interrupt,"ax",%progbits
 2148              	 .align 1
 2149              	 .global usart_enable_interrupt
 2150              	 .syntax unified
 2151              	 .thumb
 2152              	 .thumb_func
 2153              	 .fpu softvfp
 2155              	usart_enable_interrupt:
 2156              	.LFB92:
1115:.././hal/sam3u1c/usart.c **** 
1116:.././hal/sam3u1c/usart.c **** /**
1117:.././hal/sam3u1c/usart.c ****  * \brief Enable USART interrupts.
1118:.././hal/sam3u1c/usart.c ****  *
1119:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART peripheral.
1120:.././hal/sam3u1c/usart.c ****  * \param ul_sources Interrupt sources bit map.
1121:.././hal/sam3u1c/usart.c ****  */
1122:.././hal/sam3u1c/usart.c **** void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
1123:.././hal/sam3u1c/usart.c **** {
 2157              	 .loc 1 1123 0
 2158              	 .cfi_startproc
 2159              	 
 2160              	 
 2161              	 
 2162 0000 80B4     	 push {r7}
 2163              	.LCFI139:
 2164              	 .cfi_def_cfa_offset 4
 2165              	 .cfi_offset 7,-4
 2166 0002 83B0     	 sub sp,sp,#12
 2167              	.LCFI140:
 2168              	 .cfi_def_cfa_offset 16
 2169 0004 00AF     	 add r7,sp,#0
 2170              	.LCFI141:
 2171              	 .cfi_def_cfa_register 7
 2172 0006 7860     	 str r0,[r7,#4]
 2173 0008 3960     	 str r1,[r7]
1124:.././hal/sam3u1c/usart.c **** 	p_usart->US_IER = ul_sources;
 2174              	 .loc 1 1124 0
 2175 000a 7B68     	 ldr r3,[r7,#4]
 2176 000c 3A68     	 ldr r2,[r7]
 2177 000e 9A60     	 str r2,[r3,#8]
1125:.././hal/sam3u1c/usart.c **** }
 2178              	 .loc 1 1125 0
 2179 0010 00BF     	 nop
 2180 0012 0C37     	 adds r7,r7,#12
 2181              	.LCFI142:
 2182              	 .cfi_def_cfa_offset 4
 2183 0014 BD46     	 mov sp,r7
 2184              	.LCFI143:
 2185              	 .cfi_def_cfa_register 13
 2186              	 
 2187 0016 80BC     	 pop {r7}
 2188              	.LCFI144:
 2189              	 .cfi_restore 7
 2190              	 .cfi_def_cfa_offset 0
 2191 0018 7047     	 bx lr
 2192              	 .cfi_endproc
 2193              	.LFE92:
 2195              	 .section .text.usart_disable_interrupt,"ax",%progbits
 2196              	 .align 1
 2197              	 .global usart_disable_interrupt
 2198              	 .syntax unified
 2199              	 .thumb
 2200              	 .thumb_func
 2201              	 .fpu softvfp
 2203              	usart_disable_interrupt:
 2204              	.LFB93:
1126:.././hal/sam3u1c/usart.c **** 
1127:.././hal/sam3u1c/usart.c **** /**
1128:.././hal/sam3u1c/usart.c ****  * \brief Disable USART interrupts.
1129:.././hal/sam3u1c/usart.c ****  *
1130:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART peripheral.
1131:.././hal/sam3u1c/usart.c ****  * \param ul_sources Interrupt sources bit map.
1132:.././hal/sam3u1c/usart.c ****  */
1133:.././hal/sam3u1c/usart.c **** void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
1134:.././hal/sam3u1c/usart.c **** {
 2205              	 .loc 1 1134 0
 2206              	 .cfi_startproc
 2207              	 
 2208              	 
 2209              	 
 2210 0000 80B4     	 push {r7}
 2211              	.LCFI145:
 2212              	 .cfi_def_cfa_offset 4
 2213              	 .cfi_offset 7,-4
 2214 0002 83B0     	 sub sp,sp,#12
 2215              	.LCFI146:
 2216              	 .cfi_def_cfa_offset 16
 2217 0004 00AF     	 add r7,sp,#0
 2218              	.LCFI147:
 2219              	 .cfi_def_cfa_register 7
 2220 0006 7860     	 str r0,[r7,#4]
 2221 0008 3960     	 str r1,[r7]
1135:.././hal/sam3u1c/usart.c **** 	p_usart->US_IDR = ul_sources;
 2222              	 .loc 1 1135 0
 2223 000a 7B68     	 ldr r3,[r7,#4]
 2224 000c 3A68     	 ldr r2,[r7]
 2225 000e DA60     	 str r2,[r3,#12]
1136:.././hal/sam3u1c/usart.c **** }
 2226              	 .loc 1 1136 0
 2227 0010 00BF     	 nop
 2228 0012 0C37     	 adds r7,r7,#12
 2229              	.LCFI148:
 2230              	 .cfi_def_cfa_offset 4
 2231 0014 BD46     	 mov sp,r7
 2232              	.LCFI149:
 2233              	 .cfi_def_cfa_register 13
 2234              	 
 2235 0016 80BC     	 pop {r7}
 2236              	.LCFI150:
 2237              	 .cfi_restore 7
 2238              	 .cfi_def_cfa_offset 0
 2239 0018 7047     	 bx lr
 2240              	 .cfi_endproc
 2241              	.LFE93:
 2243              	 .section .text.usart_get_interrupt_mask,"ax",%progbits
 2244              	 .align 1
 2245              	 .global usart_get_interrupt_mask
 2246              	 .syntax unified
 2247              	 .thumb
 2248              	 .thumb_func
 2249              	 .fpu softvfp
 2251              	usart_get_interrupt_mask:
 2252              	.LFB94:
1137:.././hal/sam3u1c/usart.c **** 
1138:.././hal/sam3u1c/usart.c **** /**
1139:.././hal/sam3u1c/usart.c ****  * \brief Read USART interrupt mask.
1140:.././hal/sam3u1c/usart.c ****  *
1141:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART peripheral.
1142:.././hal/sam3u1c/usart.c ****  *
1143:.././hal/sam3u1c/usart.c ****  * \return The interrupt mask value.
1144:.././hal/sam3u1c/usart.c ****  */
1145:.././hal/sam3u1c/usart.c **** uint32_t usart_get_interrupt_mask(Usart *p_usart)
1146:.././hal/sam3u1c/usart.c **** {
 2253              	 .loc 1 1146 0
 2254              	 .cfi_startproc
 2255              	 
 2256              	 
 2257              	 
 2258 0000 80B4     	 push {r7}
 2259              	.LCFI151:
 2260              	 .cfi_def_cfa_offset 4
 2261              	 .cfi_offset 7,-4
 2262 0002 83B0     	 sub sp,sp,#12
 2263              	.LCFI152:
 2264              	 .cfi_def_cfa_offset 16
 2265 0004 00AF     	 add r7,sp,#0
 2266              	.LCFI153:
 2267              	 .cfi_def_cfa_register 7
 2268 0006 7860     	 str r0,[r7,#4]
1147:.././hal/sam3u1c/usart.c **** 	return p_usart->US_IMR;
 2269              	 .loc 1 1147 0
 2270 0008 7B68     	 ldr r3,[r7,#4]
 2271 000a 1B69     	 ldr r3,[r3,#16]
1148:.././hal/sam3u1c/usart.c **** }
 2272              	 .loc 1 1148 0
 2273 000c 1846     	 mov r0,r3
 2274 000e 0C37     	 adds r7,r7,#12
 2275              	.LCFI154:
 2276              	 .cfi_def_cfa_offset 4
 2277 0010 BD46     	 mov sp,r7
 2278              	.LCFI155:
 2279              	 .cfi_def_cfa_register 13
 2280              	 
 2281 0012 80BC     	 pop {r7}
 2282              	.LCFI156:
 2283              	 .cfi_restore 7
 2284              	 .cfi_def_cfa_offset 0
 2285 0014 7047     	 bx lr
 2286              	 .cfi_endproc
 2287              	.LFE94:
 2289              	 .section .text.usart_get_status,"ax",%progbits
 2290              	 .align 1
 2291              	 .global usart_get_status
 2292              	 .syntax unified
 2293              	 .thumb
 2294              	 .thumb_func
 2295              	 .fpu softvfp
 2297              	usart_get_status:
 2298              	.LFB95:
1149:.././hal/sam3u1c/usart.c **** 
1150:.././hal/sam3u1c/usart.c **** /**
1151:.././hal/sam3u1c/usart.c ****  * \brief Get current status.
1152:.././hal/sam3u1c/usart.c ****  *
1153:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1154:.././hal/sam3u1c/usart.c ****  *
1155:.././hal/sam3u1c/usart.c ****  * \return The current USART status.
1156:.././hal/sam3u1c/usart.c ****  */
1157:.././hal/sam3u1c/usart.c **** uint32_t usart_get_status(Usart *p_usart)
1158:.././hal/sam3u1c/usart.c **** {
 2299              	 .loc 1 1158 0
 2300              	 .cfi_startproc
 2301              	 
 2302              	 
 2303              	 
 2304 0000 80B4     	 push {r7}
 2305              	.LCFI157:
 2306              	 .cfi_def_cfa_offset 4
 2307              	 .cfi_offset 7,-4
 2308 0002 83B0     	 sub sp,sp,#12
 2309              	.LCFI158:
 2310              	 .cfi_def_cfa_offset 16
 2311 0004 00AF     	 add r7,sp,#0
 2312              	.LCFI159:
 2313              	 .cfi_def_cfa_register 7
 2314 0006 7860     	 str r0,[r7,#4]
1159:.././hal/sam3u1c/usart.c **** 	return p_usart->US_CSR;
 2315              	 .loc 1 1159 0
 2316 0008 7B68     	 ldr r3,[r7,#4]
 2317 000a 5B69     	 ldr r3,[r3,#20]
1160:.././hal/sam3u1c/usart.c **** }
 2318              	 .loc 1 1160 0
 2319 000c 1846     	 mov r0,r3
 2320 000e 0C37     	 adds r7,r7,#12
 2321              	.LCFI160:
 2322              	 .cfi_def_cfa_offset 4
 2323 0010 BD46     	 mov sp,r7
 2324              	.LCFI161:
 2325              	 .cfi_def_cfa_register 13
 2326              	 
 2327 0012 80BC     	 pop {r7}
 2328              	.LCFI162:
 2329              	 .cfi_restore 7
 2330              	 .cfi_def_cfa_offset 0
 2331 0014 7047     	 bx lr
 2332              	 .cfi_endproc
 2333              	.LFE95:
 2335              	 .section .text.usart_reset_status,"ax",%progbits
 2336              	 .align 1
 2337              	 .global usart_reset_status
 2338              	 .syntax unified
 2339              	 .thumb
 2340              	 .thumb_func
 2341              	 .fpu softvfp
 2343              	usart_reset_status:
 2344              	.LFB96:
1161:.././hal/sam3u1c/usart.c **** 
1162:.././hal/sam3u1c/usart.c **** /**
1163:.././hal/sam3u1c/usart.c ****  * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
1164:.././hal/sam3u1c/usart.c ****  *
1165:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1166:.././hal/sam3u1c/usart.c ****  */
1167:.././hal/sam3u1c/usart.c **** void usart_reset_status(Usart *p_usart)
1168:.././hal/sam3u1c/usart.c **** {
 2345              	 .loc 1 1168 0
 2346              	 .cfi_startproc
 2347              	 
 2348              	 
 2349              	 
 2350 0000 80B4     	 push {r7}
 2351              	.LCFI163:
 2352              	 .cfi_def_cfa_offset 4
 2353              	 .cfi_offset 7,-4
 2354 0002 83B0     	 sub sp,sp,#12
 2355              	.LCFI164:
 2356              	 .cfi_def_cfa_offset 16
 2357 0004 00AF     	 add r7,sp,#0
 2358              	.LCFI165:
 2359              	 .cfi_def_cfa_register 7
 2360 0006 7860     	 str r0,[r7,#4]
1169:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_RSTSTA;
 2361              	 .loc 1 1169 0
 2362 0008 7B68     	 ldr r3,[r7,#4]
 2363 000a 4FF48072 	 mov r2,#256
 2364 000e 1A60     	 str r2,[r3]
1170:.././hal/sam3u1c/usart.c **** }
 2365              	 .loc 1 1170 0
 2366 0010 00BF     	 nop
 2367 0012 0C37     	 adds r7,r7,#12
 2368              	.LCFI166:
 2369              	 .cfi_def_cfa_offset 4
 2370 0014 BD46     	 mov sp,r7
 2371              	.LCFI167:
 2372              	 .cfi_def_cfa_register 13
 2373              	 
 2374 0016 80BC     	 pop {r7}
 2375              	.LCFI168:
 2376              	 .cfi_restore 7
 2377              	 .cfi_def_cfa_offset 0
 2378 0018 7047     	 bx lr
 2379              	 .cfi_endproc
 2380              	.LFE96:
 2382              	 .section .text.usart_start_tx_break,"ax",%progbits
 2383              	 .align 1
 2384              	 .global usart_start_tx_break
 2385              	 .syntax unified
 2386              	 .thumb
 2387              	 .thumb_func
 2388              	 .fpu softvfp
 2390              	usart_start_tx_break:
 2391              	.LFB97:
1171:.././hal/sam3u1c/usart.c **** 
1172:.././hal/sam3u1c/usart.c **** /**
1173:.././hal/sam3u1c/usart.c ****  * \brief Start transmission of a break.
1174:.././hal/sam3u1c/usart.c ****  *
1175:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1176:.././hal/sam3u1c/usart.c ****  */
1177:.././hal/sam3u1c/usart.c **** void usart_start_tx_break(Usart *p_usart)
1178:.././hal/sam3u1c/usart.c **** {
 2392              	 .loc 1 1178 0
 2393              	 .cfi_startproc
 2394              	 
 2395              	 
 2396              	 
 2397 0000 80B4     	 push {r7}
 2398              	.LCFI169:
 2399              	 .cfi_def_cfa_offset 4
 2400              	 .cfi_offset 7,-4
 2401 0002 83B0     	 sub sp,sp,#12
 2402              	.LCFI170:
 2403              	 .cfi_def_cfa_offset 16
 2404 0004 00AF     	 add r7,sp,#0
 2405              	.LCFI171:
 2406              	 .cfi_def_cfa_register 7
 2407 0006 7860     	 str r0,[r7,#4]
1179:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_STTBRK;
 2408              	 .loc 1 1179 0
 2409 0008 7B68     	 ldr r3,[r7,#4]
 2410 000a 4FF40072 	 mov r2,#512
 2411 000e 1A60     	 str r2,[r3]
1180:.././hal/sam3u1c/usart.c **** }
 2412              	 .loc 1 1180 0
 2413 0010 00BF     	 nop
 2414 0012 0C37     	 adds r7,r7,#12
 2415              	.LCFI172:
 2416              	 .cfi_def_cfa_offset 4
 2417 0014 BD46     	 mov sp,r7
 2418              	.LCFI173:
 2419              	 .cfi_def_cfa_register 13
 2420              	 
 2421 0016 80BC     	 pop {r7}
 2422              	.LCFI174:
 2423              	 .cfi_restore 7
 2424              	 .cfi_def_cfa_offset 0
 2425 0018 7047     	 bx lr
 2426              	 .cfi_endproc
 2427              	.LFE97:
 2429              	 .section .text.usart_stop_tx_break,"ax",%progbits
 2430              	 .align 1
 2431              	 .global usart_stop_tx_break
 2432              	 .syntax unified
 2433              	 .thumb
 2434              	 .thumb_func
 2435              	 .fpu softvfp
 2437              	usart_stop_tx_break:
 2438              	.LFB98:
1181:.././hal/sam3u1c/usart.c **** 
1182:.././hal/sam3u1c/usart.c **** /**
1183:.././hal/sam3u1c/usart.c ****  * \brief Stop transmission of a break.
1184:.././hal/sam3u1c/usart.c ****  *
1185:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1186:.././hal/sam3u1c/usart.c ****  */
1187:.././hal/sam3u1c/usart.c **** void usart_stop_tx_break(Usart *p_usart)
1188:.././hal/sam3u1c/usart.c **** {
 2439              	 .loc 1 1188 0
 2440              	 .cfi_startproc
 2441              	 
 2442              	 
 2443              	 
 2444 0000 80B4     	 push {r7}
 2445              	.LCFI175:
 2446              	 .cfi_def_cfa_offset 4
 2447              	 .cfi_offset 7,-4
 2448 0002 83B0     	 sub sp,sp,#12
 2449              	.LCFI176:
 2450              	 .cfi_def_cfa_offset 16
 2451 0004 00AF     	 add r7,sp,#0
 2452              	.LCFI177:
 2453              	 .cfi_def_cfa_register 7
 2454 0006 7860     	 str r0,[r7,#4]
1189:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_STPBRK;
 2455              	 .loc 1 1189 0
 2456 0008 7B68     	 ldr r3,[r7,#4]
 2457 000a 4FF48062 	 mov r2,#1024
 2458 000e 1A60     	 str r2,[r3]
1190:.././hal/sam3u1c/usart.c **** }
 2459              	 .loc 1 1190 0
 2460 0010 00BF     	 nop
 2461 0012 0C37     	 adds r7,r7,#12
 2462              	.LCFI178:
 2463              	 .cfi_def_cfa_offset 4
 2464 0014 BD46     	 mov sp,r7
 2465              	.LCFI179:
 2466              	 .cfi_def_cfa_register 13
 2467              	 
 2468 0016 80BC     	 pop {r7}
 2469              	.LCFI180:
 2470              	 .cfi_restore 7
 2471              	 .cfi_def_cfa_offset 0
 2472 0018 7047     	 bx lr
 2473              	 .cfi_endproc
 2474              	.LFE98:
 2476              	 .section .text.usart_start_rx_timeout,"ax",%progbits
 2477              	 .align 1
 2478              	 .global usart_start_rx_timeout
 2479              	 .syntax unified
 2480              	 .thumb
 2481              	 .thumb_func
 2482              	 .fpu softvfp
 2484              	usart_start_rx_timeout:
 2485              	.LFB99:
1191:.././hal/sam3u1c/usart.c **** 
1192:.././hal/sam3u1c/usart.c **** /**
1193:.././hal/sam3u1c/usart.c ****  * \brief Start waiting for a character before clocking the timeout count.
1194:.././hal/sam3u1c/usart.c ****  * Reset the status bit TIMEOUT in US_CSR.
1195:.././hal/sam3u1c/usart.c ****  *
1196:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1197:.././hal/sam3u1c/usart.c ****  */
1198:.././hal/sam3u1c/usart.c **** void usart_start_rx_timeout(Usart *p_usart)
1199:.././hal/sam3u1c/usart.c **** {
 2486              	 .loc 1 1199 0
 2487              	 .cfi_startproc
 2488              	 
 2489              	 
 2490              	 
 2491 0000 80B4     	 push {r7}
 2492              	.LCFI181:
 2493              	 .cfi_def_cfa_offset 4
 2494              	 .cfi_offset 7,-4
 2495 0002 83B0     	 sub sp,sp,#12
 2496              	.LCFI182:
 2497              	 .cfi_def_cfa_offset 16
 2498 0004 00AF     	 add r7,sp,#0
 2499              	.LCFI183:
 2500              	 .cfi_def_cfa_register 7
 2501 0006 7860     	 str r0,[r7,#4]
1200:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_STTTO;
 2502              	 .loc 1 1200 0
 2503 0008 7B68     	 ldr r3,[r7,#4]
 2504 000a 4FF40062 	 mov r2,#2048
 2505 000e 1A60     	 str r2,[r3]
1201:.././hal/sam3u1c/usart.c **** }
 2506              	 .loc 1 1201 0
 2507 0010 00BF     	 nop
 2508 0012 0C37     	 adds r7,r7,#12
 2509              	.LCFI184:
 2510              	 .cfi_def_cfa_offset 4
 2511 0014 BD46     	 mov sp,r7
 2512              	.LCFI185:
 2513              	 .cfi_def_cfa_register 13
 2514              	 
 2515 0016 80BC     	 pop {r7}
 2516              	.LCFI186:
 2517              	 .cfi_restore 7
 2518              	 .cfi_def_cfa_offset 0
 2519 0018 7047     	 bx lr
 2520              	 .cfi_endproc
 2521              	.LFE99:
 2523              	 .section .text.usart_send_address,"ax",%progbits
 2524              	 .align 1
 2525              	 .global usart_send_address
 2526              	 .syntax unified
 2527              	 .thumb
 2528              	 .thumb_func
 2529              	 .fpu softvfp
 2531              	usart_send_address:
 2532              	.LFB100:
1202:.././hal/sam3u1c/usart.c **** 
1203:.././hal/sam3u1c/usart.c **** /**
1204:.././hal/sam3u1c/usart.c ****  * \brief In Multidrop mode only, the next character written to the US_THR
1205:.././hal/sam3u1c/usart.c ****  * is sent with the address bit set.
1206:.././hal/sam3u1c/usart.c ****  *
1207:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1208:.././hal/sam3u1c/usart.c ****  * \param ul_addr The address to be sent out.
1209:.././hal/sam3u1c/usart.c ****  *
1210:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
1211:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
1212:.././hal/sam3u1c/usart.c ****  */
1213:.././hal/sam3u1c/usart.c **** uint32_t usart_send_address(Usart *p_usart, uint32_t ul_addr)
1214:.././hal/sam3u1c/usart.c **** {
 2533              	 .loc 1 1214 0
 2534              	 .cfi_startproc
 2535              	 
 2536              	 
 2537 0000 80B5     	 push {r7,lr}
 2538              	.LCFI187:
 2539              	 .cfi_def_cfa_offset 8
 2540              	 .cfi_offset 7,-8
 2541              	 .cfi_offset 14,-4
 2542 0002 82B0     	 sub sp,sp,#8
 2543              	.LCFI188:
 2544              	 .cfi_def_cfa_offset 16
 2545 0004 00AF     	 add r7,sp,#0
 2546              	.LCFI189:
 2547              	 .cfi_def_cfa_register 7
 2548 0006 7860     	 str r0,[r7,#4]
 2549 0008 3960     	 str r1,[r7]
1215:.././hal/sam3u1c/usart.c **** 	if ((p_usart->US_MR & US_MR_PAR_MULTIDROP) != US_MR_PAR_MULTIDROP) {
 2550              	 .loc 1 1215 0
 2551 000a 7B68     	 ldr r3,[r7,#4]
 2552 000c 5B68     	 ldr r3,[r3,#4]
 2553 000e 03F44063 	 and r3,r3,#3072
 2554 0012 B3F5406F 	 cmp r3,#3072
 2555 0016 01D0     	 beq .L125
1216:.././hal/sam3u1c/usart.c **** 		return 1;
 2556              	 .loc 1 1216 0
 2557 0018 0123     	 movs r3,#1
 2558 001a 0DE0     	 b .L126
 2559              	.L125:
1217:.././hal/sam3u1c/usart.c **** 	}
1218:.././hal/sam3u1c/usart.c **** 
1219:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_SENDA;
 2560              	 .loc 1 1219 0
 2561 001c 7B68     	 ldr r3,[r7,#4]
 2562 001e 4FF48052 	 mov r2,#4096
 2563 0022 1A60     	 str r2,[r3]
1220:.././hal/sam3u1c/usart.c **** 
1221:.././hal/sam3u1c/usart.c **** 	if (usart_write(p_usart, ul_addr)) {
 2564              	 .loc 1 1221 0
 2565 0024 3968     	 ldr r1,[r7]
 2566 0026 7868     	 ldr r0,[r7,#4]
 2567 0028 054B     	 ldr r3,.L128
 2568 002a 9847     	 blx r3
 2569              	.LVL22:
 2570 002c 0346     	 mov r3,r0
 2571 002e 002B     	 cmp r3,#0
 2572 0030 01D0     	 beq .L127
1222:.././hal/sam3u1c/usart.c **** 		return 1;
 2573              	 .loc 1 1222 0
 2574 0032 0123     	 movs r3,#1
 2575 0034 00E0     	 b .L126
 2576              	.L127:
1223:.././hal/sam3u1c/usart.c **** 	} else {
1224:.././hal/sam3u1c/usart.c **** 		return 0;
 2577              	 .loc 1 1224 0
 2578 0036 0023     	 movs r3,#0
 2579              	.L126:
1225:.././hal/sam3u1c/usart.c **** 	}
1226:.././hal/sam3u1c/usart.c **** }
 2580              	 .loc 1 1226 0
 2581 0038 1846     	 mov r0,r3
 2582 003a 0837     	 adds r7,r7,#8
 2583              	.LCFI190:
 2584              	 .cfi_def_cfa_offset 8
 2585 003c BD46     	 mov sp,r7
 2586              	.LCFI191:
 2587              	 .cfi_def_cfa_register 13
 2588              	 
 2589 003e 80BD     	 pop {r7,pc}
 2590              	.L129:
 2591              	 .align 2
 2592              	.L128:
 2593 0040 00000000 	 .word usart_write
 2594              	 .cfi_endproc
 2595              	.LFE100:
 2597              	 .section .text.usart_reset_iterations,"ax",%progbits
 2598              	 .align 1
 2599              	 .global usart_reset_iterations
 2600              	 .syntax unified
 2601              	 .thumb
 2602              	 .thumb_func
 2603              	 .fpu softvfp
 2605              	usart_reset_iterations:
 2606              	.LFB101:
1227:.././hal/sam3u1c/usart.c **** 
1228:.././hal/sam3u1c/usart.c **** /**
1229:.././hal/sam3u1c/usart.c ****  * \brief Reset the ITERATION in US_CSR when the ISO7816 mode is enabled.
1230:.././hal/sam3u1c/usart.c ****  *
1231:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1232:.././hal/sam3u1c/usart.c ****  */
1233:.././hal/sam3u1c/usart.c **** void usart_reset_iterations(Usart *p_usart)
1234:.././hal/sam3u1c/usart.c **** {
 2607              	 .loc 1 1234 0
 2608              	 .cfi_startproc
 2609              	 
 2610              	 
 2611              	 
 2612 0000 80B4     	 push {r7}
 2613              	.LCFI192:
 2614              	 .cfi_def_cfa_offset 4
 2615              	 .cfi_offset 7,-4
 2616 0002 83B0     	 sub sp,sp,#12
 2617              	.LCFI193:
 2618              	 .cfi_def_cfa_offset 16
 2619 0004 00AF     	 add r7,sp,#0
 2620              	.LCFI194:
 2621              	 .cfi_def_cfa_register 7
 2622 0006 7860     	 str r0,[r7,#4]
1235:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_RSTIT;
 2623              	 .loc 1 1235 0
 2624 0008 7B68     	 ldr r3,[r7,#4]
 2625 000a 4FF40052 	 mov r2,#8192
 2626 000e 1A60     	 str r2,[r3]
1236:.././hal/sam3u1c/usart.c **** }
 2627              	 .loc 1 1236 0
 2628 0010 00BF     	 nop
 2629 0012 0C37     	 adds r7,r7,#12
 2630              	.LCFI195:
 2631              	 .cfi_def_cfa_offset 4
 2632 0014 BD46     	 mov sp,r7
 2633              	.LCFI196:
 2634              	 .cfi_def_cfa_register 13
 2635              	 
 2636 0016 80BC     	 pop {r7}
 2637              	.LCFI197:
 2638              	 .cfi_restore 7
 2639              	 .cfi_def_cfa_offset 0
 2640 0018 7047     	 bx lr
 2641              	 .cfi_endproc
 2642              	.LFE101:
 2644              	 .section .text.usart_reset_nack,"ax",%progbits
 2645              	 .align 1
 2646              	 .global usart_reset_nack
 2647              	 .syntax unified
 2648              	 .thumb
 2649              	 .thumb_func
 2650              	 .fpu softvfp
 2652              	usart_reset_nack:
 2653              	.LFB102:
1237:.././hal/sam3u1c/usart.c **** 
1238:.././hal/sam3u1c/usart.c **** /**
1239:.././hal/sam3u1c/usart.c ****  * \brief Reset NACK in US_CSR.
1240:.././hal/sam3u1c/usart.c ****  *
1241:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1242:.././hal/sam3u1c/usart.c ****  */
1243:.././hal/sam3u1c/usart.c **** void usart_reset_nack(Usart *p_usart)
1244:.././hal/sam3u1c/usart.c **** {
 2654              	 .loc 1 1244 0
 2655              	 .cfi_startproc
 2656              	 
 2657              	 
 2658              	 
 2659 0000 80B4     	 push {r7}
 2660              	.LCFI198:
 2661              	 .cfi_def_cfa_offset 4
 2662              	 .cfi_offset 7,-4
 2663 0002 83B0     	 sub sp,sp,#12
 2664              	.LCFI199:
 2665              	 .cfi_def_cfa_offset 16
 2666 0004 00AF     	 add r7,sp,#0
 2667              	.LCFI200:
 2668              	 .cfi_def_cfa_register 7
 2669 0006 7860     	 str r0,[r7,#4]
1245:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_RSTNACK;
 2670              	 .loc 1 1245 0
 2671 0008 7B68     	 ldr r3,[r7,#4]
 2672 000a 4FF48042 	 mov r2,#16384
 2673 000e 1A60     	 str r2,[r3]
1246:.././hal/sam3u1c/usart.c **** }
 2674              	 .loc 1 1246 0
 2675 0010 00BF     	 nop
 2676 0012 0C37     	 adds r7,r7,#12
 2677              	.LCFI201:
 2678              	 .cfi_def_cfa_offset 4
 2679 0014 BD46     	 mov sp,r7
 2680              	.LCFI202:
 2681              	 .cfi_def_cfa_register 13
 2682              	 
 2683 0016 80BC     	 pop {r7}
 2684              	.LCFI203:
 2685              	 .cfi_restore 7
 2686              	 .cfi_def_cfa_offset 0
 2687 0018 7047     	 bx lr
 2688              	 .cfi_endproc
 2689              	.LFE102:
 2691              	 .section .text.usart_restart_rx_timeout,"ax",%progbits
 2692              	 .align 1
 2693              	 .global usart_restart_rx_timeout
 2694              	 .syntax unified
 2695              	 .thumb
 2696              	 .thumb_func
 2697              	 .fpu softvfp
 2699              	usart_restart_rx_timeout:
 2700              	.LFB103:
1247:.././hal/sam3u1c/usart.c **** 
1248:.././hal/sam3u1c/usart.c **** /**
1249:.././hal/sam3u1c/usart.c ****  * \brief Restart the receive timeout.
1250:.././hal/sam3u1c/usart.c ****  *
1251:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1252:.././hal/sam3u1c/usart.c ****  */
1253:.././hal/sam3u1c/usart.c **** void usart_restart_rx_timeout(Usart *p_usart)
1254:.././hal/sam3u1c/usart.c **** {
 2701              	 .loc 1 1254 0
 2702              	 .cfi_startproc
 2703              	 
 2704              	 
 2705              	 
 2706 0000 80B4     	 push {r7}
 2707              	.LCFI204:
 2708              	 .cfi_def_cfa_offset 4
 2709              	 .cfi_offset 7,-4
 2710 0002 83B0     	 sub sp,sp,#12
 2711              	.LCFI205:
 2712              	 .cfi_def_cfa_offset 16
 2713 0004 00AF     	 add r7,sp,#0
 2714              	.LCFI206:
 2715              	 .cfi_def_cfa_register 7
 2716 0006 7860     	 str r0,[r7,#4]
1255:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_RETTO;
 2717              	 .loc 1 1255 0
 2718 0008 7B68     	 ldr r3,[r7,#4]
 2719 000a 4FF40042 	 mov r2,#32768
 2720 000e 1A60     	 str r2,[r3]
1256:.././hal/sam3u1c/usart.c **** }
 2721              	 .loc 1 1256 0
 2722 0010 00BF     	 nop
 2723 0012 0C37     	 adds r7,r7,#12
 2724              	.LCFI207:
 2725              	 .cfi_def_cfa_offset 4
 2726 0014 BD46     	 mov sp,r7
 2727              	.LCFI208:
 2728              	 .cfi_def_cfa_register 13
 2729              	 
 2730 0016 80BC     	 pop {r7}
 2731              	.LCFI209:
 2732              	 .cfi_restore 7
 2733              	 .cfi_def_cfa_offset 0
 2734 0018 7047     	 bx lr
 2735              	 .cfi_endproc
 2736              	.LFE103:
 2738              	 .section .text.usart_drive_DTR_pin_low,"ax",%progbits
 2739              	 .align 1
 2740              	 .global usart_drive_DTR_pin_low
 2741              	 .syntax unified
 2742              	 .thumb
 2743              	 .thumb_func
 2744              	 .fpu softvfp
 2746              	usart_drive_DTR_pin_low:
 2747              	.LFB104:
1257:.././hal/sam3u1c/usart.c **** 
1258:.././hal/sam3u1c/usart.c **** #if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
1259:.././hal/sam3u1c/usart.c **** 
1260:.././hal/sam3u1c/usart.c **** /**
1261:.././hal/sam3u1c/usart.c ****  * \brief Drive the pin DTR to 0.
1262:.././hal/sam3u1c/usart.c ****  *
1263:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1264:.././hal/sam3u1c/usart.c ****  */
1265:.././hal/sam3u1c/usart.c **** void usart_drive_DTR_pin_low(Usart *p_usart)
1266:.././hal/sam3u1c/usart.c **** {
 2748              	 .loc 1 1266 0
 2749              	 .cfi_startproc
 2750              	 
 2751              	 
 2752              	 
 2753 0000 80B4     	 push {r7}
 2754              	.LCFI210:
 2755              	 .cfi_def_cfa_offset 4
 2756              	 .cfi_offset 7,-4
 2757 0002 83B0     	 sub sp,sp,#12
 2758              	.LCFI211:
 2759              	 .cfi_def_cfa_offset 16
 2760 0004 00AF     	 add r7,sp,#0
 2761              	.LCFI212:
 2762              	 .cfi_def_cfa_register 7
 2763 0006 7860     	 str r0,[r7,#4]
1267:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_DTREN;
 2764              	 .loc 1 1267 0
 2765 0008 7B68     	 ldr r3,[r7,#4]
 2766 000a 4FF48032 	 mov r2,#65536
 2767 000e 1A60     	 str r2,[r3]
1268:.././hal/sam3u1c/usart.c **** }
 2768              	 .loc 1 1268 0
 2769 0010 00BF     	 nop
 2770 0012 0C37     	 adds r7,r7,#12
 2771              	.LCFI213:
 2772              	 .cfi_def_cfa_offset 4
 2773 0014 BD46     	 mov sp,r7
 2774              	.LCFI214:
 2775              	 .cfi_def_cfa_register 13
 2776              	 
 2777 0016 80BC     	 pop {r7}
 2778              	.LCFI215:
 2779              	 .cfi_restore 7
 2780              	 .cfi_def_cfa_offset 0
 2781 0018 7047     	 bx lr
 2782              	 .cfi_endproc
 2783              	.LFE104:
 2785              	 .section .text.usart_drive_DTR_pin_high,"ax",%progbits
 2786              	 .align 1
 2787              	 .global usart_drive_DTR_pin_high
 2788              	 .syntax unified
 2789              	 .thumb
 2790              	 .thumb_func
 2791              	 .fpu softvfp
 2793              	usart_drive_DTR_pin_high:
 2794              	.LFB105:
1269:.././hal/sam3u1c/usart.c **** 
1270:.././hal/sam3u1c/usart.c **** /**
1271:.././hal/sam3u1c/usart.c ****  * \brief Drive the pin DTR to 1.
1272:.././hal/sam3u1c/usart.c ****  *
1273:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1274:.././hal/sam3u1c/usart.c ****  */
1275:.././hal/sam3u1c/usart.c **** void usart_drive_DTR_pin_high(Usart *p_usart)
1276:.././hal/sam3u1c/usart.c **** {
 2795              	 .loc 1 1276 0
 2796              	 .cfi_startproc
 2797              	 
 2798              	 
 2799              	 
 2800 0000 80B4     	 push {r7}
 2801              	.LCFI216:
 2802              	 .cfi_def_cfa_offset 4
 2803              	 .cfi_offset 7,-4
 2804 0002 83B0     	 sub sp,sp,#12
 2805              	.LCFI217:
 2806              	 .cfi_def_cfa_offset 16
 2807 0004 00AF     	 add r7,sp,#0
 2808              	.LCFI218:
 2809              	 .cfi_def_cfa_register 7
 2810 0006 7860     	 str r0,[r7,#4]
1277:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_DTRDIS;
 2811              	 .loc 1 1277 0
 2812 0008 7B68     	 ldr r3,[r7,#4]
 2813 000a 4FF40032 	 mov r2,#131072
 2814 000e 1A60     	 str r2,[r3]
1278:.././hal/sam3u1c/usart.c **** }
 2815              	 .loc 1 1278 0
 2816 0010 00BF     	 nop
 2817 0012 0C37     	 adds r7,r7,#12
 2818              	.LCFI219:
 2819              	 .cfi_def_cfa_offset 4
 2820 0014 BD46     	 mov sp,r7
 2821              	.LCFI220:
 2822              	 .cfi_def_cfa_register 13
 2823              	 
 2824 0016 80BC     	 pop {r7}
 2825              	.LCFI221:
 2826              	 .cfi_restore 7
 2827              	 .cfi_def_cfa_offset 0
 2828 0018 7047     	 bx lr
 2829              	 .cfi_endproc
 2830              	.LFE105:
 2832              	 .section .text.usart_drive_RTS_pin_low,"ax",%progbits
 2833              	 .align 1
 2834              	 .global usart_drive_RTS_pin_low
 2835              	 .syntax unified
 2836              	 .thumb
 2837              	 .thumb_func
 2838              	 .fpu softvfp
 2840              	usart_drive_RTS_pin_low:
 2841              	.LFB106:
1279:.././hal/sam3u1c/usart.c **** 
1280:.././hal/sam3u1c/usart.c **** #endif
1281:.././hal/sam3u1c/usart.c **** 
1282:.././hal/sam3u1c/usart.c **** /**
1283:.././hal/sam3u1c/usart.c ****  * \brief Drive the pin RTS to 0.
1284:.././hal/sam3u1c/usart.c ****  *
1285:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1286:.././hal/sam3u1c/usart.c ****  */
1287:.././hal/sam3u1c/usart.c **** void usart_drive_RTS_pin_low(Usart *p_usart)
1288:.././hal/sam3u1c/usart.c **** {
 2842              	 .loc 1 1288 0
 2843              	 .cfi_startproc
 2844              	 
 2845              	 
 2846              	 
 2847 0000 80B4     	 push {r7}
 2848              	.LCFI222:
 2849              	 .cfi_def_cfa_offset 4
 2850              	 .cfi_offset 7,-4
 2851 0002 83B0     	 sub sp,sp,#12
 2852              	.LCFI223:
 2853              	 .cfi_def_cfa_offset 16
 2854 0004 00AF     	 add r7,sp,#0
 2855              	.LCFI224:
 2856              	 .cfi_def_cfa_register 7
 2857 0006 7860     	 str r0,[r7,#4]
1289:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_RTSEN;
 2858              	 .loc 1 1289 0
 2859 0008 7B68     	 ldr r3,[r7,#4]
 2860 000a 4FF48022 	 mov r2,#262144
 2861 000e 1A60     	 str r2,[r3]
1290:.././hal/sam3u1c/usart.c **** }
 2862              	 .loc 1 1290 0
 2863 0010 00BF     	 nop
 2864 0012 0C37     	 adds r7,r7,#12
 2865              	.LCFI225:
 2866              	 .cfi_def_cfa_offset 4
 2867 0014 BD46     	 mov sp,r7
 2868              	.LCFI226:
 2869              	 .cfi_def_cfa_register 13
 2870              	 
 2871 0016 80BC     	 pop {r7}
 2872              	.LCFI227:
 2873              	 .cfi_restore 7
 2874              	 .cfi_def_cfa_offset 0
 2875 0018 7047     	 bx lr
 2876              	 .cfi_endproc
 2877              	.LFE106:
 2879              	 .section .text.usart_drive_RTS_pin_high,"ax",%progbits
 2880              	 .align 1
 2881              	 .global usart_drive_RTS_pin_high
 2882              	 .syntax unified
 2883              	 .thumb
 2884              	 .thumb_func
 2885              	 .fpu softvfp
 2887              	usart_drive_RTS_pin_high:
 2888              	.LFB107:
1291:.././hal/sam3u1c/usart.c **** 
1292:.././hal/sam3u1c/usart.c **** /**
1293:.././hal/sam3u1c/usart.c ****  * \brief Drive the pin RTS to 1.
1294:.././hal/sam3u1c/usart.c ****  *
1295:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1296:.././hal/sam3u1c/usart.c ****  */
1297:.././hal/sam3u1c/usart.c **** void usart_drive_RTS_pin_high(Usart *p_usart)
1298:.././hal/sam3u1c/usart.c **** {
 2889              	 .loc 1 1298 0
 2890              	 .cfi_startproc
 2891              	 
 2892              	 
 2893              	 
 2894 0000 80B4     	 push {r7}
 2895              	.LCFI228:
 2896              	 .cfi_def_cfa_offset 4
 2897              	 .cfi_offset 7,-4
 2898 0002 83B0     	 sub sp,sp,#12
 2899              	.LCFI229:
 2900              	 .cfi_def_cfa_offset 16
 2901 0004 00AF     	 add r7,sp,#0
 2902              	.LCFI230:
 2903              	 .cfi_def_cfa_register 7
 2904 0006 7860     	 str r0,[r7,#4]
1299:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_RTSDIS;
 2905              	 .loc 1 1299 0
 2906 0008 7B68     	 ldr r3,[r7,#4]
 2907 000a 4FF40022 	 mov r2,#524288
 2908 000e 1A60     	 str r2,[r3]
1300:.././hal/sam3u1c/usart.c **** }
 2909              	 .loc 1 1300 0
 2910 0010 00BF     	 nop
 2911 0012 0C37     	 adds r7,r7,#12
 2912              	.LCFI231:
 2913              	 .cfi_def_cfa_offset 4
 2914 0014 BD46     	 mov sp,r7
 2915              	.LCFI232:
 2916              	 .cfi_def_cfa_register 13
 2917              	 
 2918 0016 80BC     	 pop {r7}
 2919              	.LCFI233:
 2920              	 .cfi_restore 7
 2921              	 .cfi_def_cfa_offset 0
 2922 0018 7047     	 bx lr
 2923              	 .cfi_endproc
 2924              	.LFE107:
 2926              	 .section .text.usart_spi_force_chip_select,"ax",%progbits
 2927              	 .align 1
 2928              	 .global usart_spi_force_chip_select
 2929              	 .syntax unified
 2930              	 .thumb
 2931              	 .thumb_func
 2932              	 .fpu softvfp
 2934              	usart_spi_force_chip_select:
 2935              	.LFB108:
1301:.././hal/sam3u1c/usart.c **** 
1302:.././hal/sam3u1c/usart.c **** /**
1303:.././hal/sam3u1c/usart.c ****  * \brief Drive the slave select line NSS (RTS pin) to 0 in SPI master mode.
1304:.././hal/sam3u1c/usart.c ****  *
1305:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1306:.././hal/sam3u1c/usart.c ****  */
1307:.././hal/sam3u1c/usart.c **** void usart_spi_force_chip_select(Usart *p_usart)
1308:.././hal/sam3u1c/usart.c **** {
 2936              	 .loc 1 1308 0
 2937              	 .cfi_startproc
 2938              	 
 2939              	 
 2940              	 
 2941 0000 80B4     	 push {r7}
 2942              	.LCFI234:
 2943              	 .cfi_def_cfa_offset 4
 2944              	 .cfi_offset 7,-4
 2945 0002 83B0     	 sub sp,sp,#12
 2946              	.LCFI235:
 2947              	 .cfi_def_cfa_offset 16
 2948 0004 00AF     	 add r7,sp,#0
 2949              	.LCFI236:
 2950              	 .cfi_def_cfa_register 7
 2951 0006 7860     	 str r0,[r7,#4]
1309:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_FCS;
 2952              	 .loc 1 1309 0
 2953 0008 7B68     	 ldr r3,[r7,#4]
 2954 000a 4FF48022 	 mov r2,#262144
 2955 000e 1A60     	 str r2,[r3]
1310:.././hal/sam3u1c/usart.c **** }
 2956              	 .loc 1 1310 0
 2957 0010 00BF     	 nop
 2958 0012 0C37     	 adds r7,r7,#12
 2959              	.LCFI237:
 2960              	 .cfi_def_cfa_offset 4
 2961 0014 BD46     	 mov sp,r7
 2962              	.LCFI238:
 2963              	 .cfi_def_cfa_register 13
 2964              	 
 2965 0016 80BC     	 pop {r7}
 2966              	.LCFI239:
 2967              	 .cfi_restore 7
 2968              	 .cfi_def_cfa_offset 0
 2969 0018 7047     	 bx lr
 2970              	 .cfi_endproc
 2971              	.LFE108:
 2973              	 .section .text.usart_spi_release_chip_select,"ax",%progbits
 2974              	 .align 1
 2975              	 .global usart_spi_release_chip_select
 2976              	 .syntax unified
 2977              	 .thumb
 2978              	 .thumb_func
 2979              	 .fpu softvfp
 2981              	usart_spi_release_chip_select:
 2982              	.LFB109:
1311:.././hal/sam3u1c/usart.c **** 
1312:.././hal/sam3u1c/usart.c **** /**
1313:.././hal/sam3u1c/usart.c ****  * \brief Drive the slave select line NSS (RTS pin) to 1 in SPI master mode.
1314:.././hal/sam3u1c/usart.c ****  *
1315:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1316:.././hal/sam3u1c/usart.c ****  */
1317:.././hal/sam3u1c/usart.c **** void usart_spi_release_chip_select(Usart *p_usart)
1318:.././hal/sam3u1c/usart.c **** {
 2983              	 .loc 1 1318 0
 2984              	 .cfi_startproc
 2985              	 
 2986              	 
 2987              	 
 2988 0000 80B4     	 push {r7}
 2989              	.LCFI240:
 2990              	 .cfi_def_cfa_offset 4
 2991              	 .cfi_offset 7,-4
 2992 0002 83B0     	 sub sp,sp,#12
 2993              	.LCFI241:
 2994              	 .cfi_def_cfa_offset 16
 2995 0004 00AF     	 add r7,sp,#0
 2996              	.LCFI242:
 2997              	 .cfi_def_cfa_register 7
 2998 0006 7860     	 str r0,[r7,#4]
1319:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_RCS;
 2999              	 .loc 1 1319 0
 3000 0008 7B68     	 ldr r3,[r7,#4]
 3001 000a 4FF40022 	 mov r2,#524288
 3002 000e 1A60     	 str r2,[r3]
1320:.././hal/sam3u1c/usart.c **** }
 3003              	 .loc 1 1320 0
 3004 0010 00BF     	 nop
 3005 0012 0C37     	 adds r7,r7,#12
 3006              	.LCFI243:
 3007              	 .cfi_def_cfa_offset 4
 3008 0014 BD46     	 mov sp,r7
 3009              	.LCFI244:
 3010              	 .cfi_def_cfa_register 13
 3011              	 
 3012 0016 80BC     	 pop {r7}
 3013              	.LCFI245:
 3014              	 .cfi_restore 7
 3015              	 .cfi_def_cfa_offset 0
 3016 0018 7047     	 bx lr
 3017              	 .cfi_endproc
 3018              	.LFE109:
 3020              	 .section .text.usart_is_tx_ready,"ax",%progbits
 3021              	 .align 1
 3022              	 .global usart_is_tx_ready
 3023              	 .syntax unified
 3024              	 .thumb
 3025              	 .thumb_func
 3026              	 .fpu softvfp
 3028              	usart_is_tx_ready:
 3029              	.LFB110:
1321:.././hal/sam3u1c/usart.c **** 
1322:.././hal/sam3u1c/usart.c **** /**
1323:.././hal/sam3u1c/usart.c ****  * \brief Check if Transmit is Ready.
1324:.././hal/sam3u1c/usart.c ****  * Check if data have been loaded in USART_THR and are waiting to be loaded
1325:.././hal/sam3u1c/usart.c ****  * into the Transmit Shift Register (TSR).
1326:.././hal/sam3u1c/usart.c ****  *
1327:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1328:.././hal/sam3u1c/usart.c ****  *
1329:.././hal/sam3u1c/usart.c ****  * \retval 1 No data is in the Transmit Holding Register.
1330:.././hal/sam3u1c/usart.c ****  * \retval 0 There is data in the Transmit Holding Register.
1331:.././hal/sam3u1c/usart.c ****  */
1332:.././hal/sam3u1c/usart.c **** uint32_t usart_is_tx_ready(Usart *p_usart)
1333:.././hal/sam3u1c/usart.c **** {
 3030              	 .loc 1 1333 0
 3031              	 .cfi_startproc
 3032              	 
 3033              	 
 3034              	 
 3035 0000 80B4     	 push {r7}
 3036              	.LCFI246:
 3037              	 .cfi_def_cfa_offset 4
 3038              	 .cfi_offset 7,-4
 3039 0002 83B0     	 sub sp,sp,#12
 3040              	.LCFI247:
 3041              	 .cfi_def_cfa_offset 16
 3042 0004 00AF     	 add r7,sp,#0
 3043              	.LCFI248:
 3044              	 .cfi_def_cfa_register 7
 3045 0006 7860     	 str r0,[r7,#4]
1334:.././hal/sam3u1c/usart.c **** 	return (p_usart->US_CSR & US_CSR_TXRDY) > 0;
 3046              	 .loc 1 1334 0
 3047 0008 7B68     	 ldr r3,[r7,#4]
 3048 000a 5B69     	 ldr r3,[r3,#20]
 3049 000c 03F00203 	 and r3,r3,#2
 3050 0010 002B     	 cmp r3,#0
 3051 0012 14BF     	 ite ne
 3052 0014 0123     	 movne r3,#1
 3053 0016 0023     	 moveq r3,#0
 3054 0018 DBB2     	 uxtb r3,r3
1335:.././hal/sam3u1c/usart.c **** }
 3055              	 .loc 1 1335 0
 3056 001a 1846     	 mov r0,r3
 3057 001c 0C37     	 adds r7,r7,#12
 3058              	.LCFI249:
 3059              	 .cfi_def_cfa_offset 4
 3060 001e BD46     	 mov sp,r7
 3061              	.LCFI250:
 3062              	 .cfi_def_cfa_register 13
 3063              	 
 3064 0020 80BC     	 pop {r7}
 3065              	.LCFI251:
 3066              	 .cfi_restore 7
 3067              	 .cfi_def_cfa_offset 0
 3068 0022 7047     	 bx lr
 3069              	 .cfi_endproc
 3070              	.LFE110:
 3072              	 .section .text.usart_is_tx_empty,"ax",%progbits
 3073              	 .align 1
 3074              	 .global usart_is_tx_empty
 3075              	 .syntax unified
 3076              	 .thumb
 3077              	 .thumb_func
 3078              	 .fpu softvfp
 3080              	usart_is_tx_empty:
 3081              	.LFB111:
1336:.././hal/sam3u1c/usart.c **** 
1337:.././hal/sam3u1c/usart.c **** /**
1338:.././hal/sam3u1c/usart.c ****  * \brief Check if Transmit Holding Register is empty.
1339:.././hal/sam3u1c/usart.c ****  * Check if the last data written in USART_THR have been loaded in TSR and the
1340:.././hal/sam3u1c/usart.c ****  * last data loaded in TSR have been transmitted.
1341:.././hal/sam3u1c/usart.c ****  *
1342:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1343:.././hal/sam3u1c/usart.c ****  *
1344:.././hal/sam3u1c/usart.c ****  * \retval 1 Transmitter is empty.
1345:.././hal/sam3u1c/usart.c ****  * \retval 0 Transmitter is not empty.
1346:.././hal/sam3u1c/usart.c ****  */
1347:.././hal/sam3u1c/usart.c **** uint32_t usart_is_tx_empty(Usart *p_usart)
1348:.././hal/sam3u1c/usart.c **** {
 3082              	 .loc 1 1348 0
 3083              	 .cfi_startproc
 3084              	 
 3085              	 
 3086              	 
 3087 0000 80B4     	 push {r7}
 3088              	.LCFI252:
 3089              	 .cfi_def_cfa_offset 4
 3090              	 .cfi_offset 7,-4
 3091 0002 83B0     	 sub sp,sp,#12
 3092              	.LCFI253:
 3093              	 .cfi_def_cfa_offset 16
 3094 0004 00AF     	 add r7,sp,#0
 3095              	.LCFI254:
 3096              	 .cfi_def_cfa_register 7
 3097 0006 7860     	 str r0,[r7,#4]
1349:.././hal/sam3u1c/usart.c **** 	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
 3098              	 .loc 1 1349 0
 3099 0008 7B68     	 ldr r3,[r7,#4]
 3100 000a 5B69     	 ldr r3,[r3,#20]
 3101 000c 03F40073 	 and r3,r3,#512
 3102 0010 002B     	 cmp r3,#0
 3103 0012 14BF     	 ite ne
 3104 0014 0123     	 movne r3,#1
 3105 0016 0023     	 moveq r3,#0
 3106 0018 DBB2     	 uxtb r3,r3
1350:.././hal/sam3u1c/usart.c **** }
 3107              	 .loc 1 1350 0
 3108 001a 1846     	 mov r0,r3
 3109 001c 0C37     	 adds r7,r7,#12
 3110              	.LCFI255:
 3111              	 .cfi_def_cfa_offset 4
 3112 001e BD46     	 mov sp,r7
 3113              	.LCFI256:
 3114              	 .cfi_def_cfa_register 13
 3115              	 
 3116 0020 80BC     	 pop {r7}
 3117              	.LCFI257:
 3118              	 .cfi_restore 7
 3119              	 .cfi_def_cfa_offset 0
 3120 0022 7047     	 bx lr
 3121              	 .cfi_endproc
 3122              	.LFE111:
 3124              	 .section .text.usart_is_rx_ready,"ax",%progbits
 3125              	 .align 1
 3126              	 .global usart_is_rx_ready
 3127              	 .syntax unified
 3128              	 .thumb
 3129              	 .thumb_func
 3130              	 .fpu softvfp
 3132              	usart_is_rx_ready:
 3133              	.LFB112:
1351:.././hal/sam3u1c/usart.c **** 
1352:.././hal/sam3u1c/usart.c **** /**
1353:.././hal/sam3u1c/usart.c ****  * \brief Check if the received data are ready.
1354:.././hal/sam3u1c/usart.c ****  * Check if Data have been received and loaded into USART_RHR.
1355:.././hal/sam3u1c/usart.c ****  *
1356:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1357:.././hal/sam3u1c/usart.c ****  *
1358:.././hal/sam3u1c/usart.c ****  * \retval 1 Some data has been received.
1359:.././hal/sam3u1c/usart.c ****  * \retval 0 No data has been received.
1360:.././hal/sam3u1c/usart.c ****  */
1361:.././hal/sam3u1c/usart.c **** uint32_t usart_is_rx_ready(Usart *p_usart)
1362:.././hal/sam3u1c/usart.c **** {
 3134              	 .loc 1 1362 0
 3135              	 .cfi_startproc
 3136              	 
 3137              	 
 3138              	 
 3139 0000 80B4     	 push {r7}
 3140              	.LCFI258:
 3141              	 .cfi_def_cfa_offset 4
 3142              	 .cfi_offset 7,-4
 3143 0002 83B0     	 sub sp,sp,#12
 3144              	.LCFI259:
 3145              	 .cfi_def_cfa_offset 16
 3146 0004 00AF     	 add r7,sp,#0
 3147              	.LCFI260:
 3148              	 .cfi_def_cfa_register 7
 3149 0006 7860     	 str r0,[r7,#4]
1363:.././hal/sam3u1c/usart.c **** 	return (p_usart->US_CSR & US_CSR_RXRDY) > 0;
 3150              	 .loc 1 1363 0
 3151 0008 7B68     	 ldr r3,[r7,#4]
 3152 000a 5B69     	 ldr r3,[r3,#20]
 3153 000c 03F00103 	 and r3,r3,#1
 3154 0010 002B     	 cmp r3,#0
 3155 0012 14BF     	 ite ne
 3156 0014 0123     	 movne r3,#1
 3157 0016 0023     	 moveq r3,#0
 3158 0018 DBB2     	 uxtb r3,r3
1364:.././hal/sam3u1c/usart.c **** }
 3159              	 .loc 1 1364 0
 3160 001a 1846     	 mov r0,r3
 3161 001c 0C37     	 adds r7,r7,#12
 3162              	.LCFI261:
 3163              	 .cfi_def_cfa_offset 4
 3164 001e BD46     	 mov sp,r7
 3165              	.LCFI262:
 3166              	 .cfi_def_cfa_register 13
 3167              	 
 3168 0020 80BC     	 pop {r7}
 3169              	.LCFI263:
 3170              	 .cfi_restore 7
 3171              	 .cfi_def_cfa_offset 0
 3172 0022 7047     	 bx lr
 3173              	 .cfi_endproc
 3174              	.LFE112:
 3176              	 .section .text.usart_is_rx_buf_end,"ax",%progbits
 3177              	 .align 1
 3178              	 .global usart_is_rx_buf_end
 3179              	 .syntax unified
 3180              	 .thumb
 3181              	 .thumb_func
 3182              	 .fpu softvfp
 3184              	usart_is_rx_buf_end:
 3185              	.LFB113:
1365:.././hal/sam3u1c/usart.c **** 
1366:.././hal/sam3u1c/usart.c **** /**
1367:.././hal/sam3u1c/usart.c ****  * \brief Check if one receive buffer is filled.
1368:.././hal/sam3u1c/usart.c ****  *
1369:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1370:.././hal/sam3u1c/usart.c ****  *
1371:.././hal/sam3u1c/usart.c ****  * \retval 1 Receive is complete.
1372:.././hal/sam3u1c/usart.c ****  * \retval 0 Receive is still pending.
1373:.././hal/sam3u1c/usart.c ****  */
1374:.././hal/sam3u1c/usart.c **** uint32_t usart_is_rx_buf_end(Usart *p_usart)
1375:.././hal/sam3u1c/usart.c **** {
 3186              	 .loc 1 1375 0
 3187              	 .cfi_startproc
 3188              	 
 3189              	 
 3190              	 
 3191 0000 80B4     	 push {r7}
 3192              	.LCFI264:
 3193              	 .cfi_def_cfa_offset 4
 3194              	 .cfi_offset 7,-4
 3195 0002 83B0     	 sub sp,sp,#12
 3196              	.LCFI265:
 3197              	 .cfi_def_cfa_offset 16
 3198 0004 00AF     	 add r7,sp,#0
 3199              	.LCFI266:
 3200              	 .cfi_def_cfa_register 7
 3201 0006 7860     	 str r0,[r7,#4]
1376:.././hal/sam3u1c/usart.c **** 	return (p_usart->US_CSR & US_CSR_ENDRX) > 0;
 3202              	 .loc 1 1376 0
 3203 0008 7B68     	 ldr r3,[r7,#4]
 3204 000a 5B69     	 ldr r3,[r3,#20]
 3205 000c 03F00803 	 and r3,r3,#8
 3206 0010 002B     	 cmp r3,#0
 3207 0012 14BF     	 ite ne
 3208 0014 0123     	 movne r3,#1
 3209 0016 0023     	 moveq r3,#0
 3210 0018 DBB2     	 uxtb r3,r3
1377:.././hal/sam3u1c/usart.c **** }
 3211              	 .loc 1 1377 0
 3212 001a 1846     	 mov r0,r3
 3213 001c 0C37     	 adds r7,r7,#12
 3214              	.LCFI267:
 3215              	 .cfi_def_cfa_offset 4
 3216 001e BD46     	 mov sp,r7
 3217              	.LCFI268:
 3218              	 .cfi_def_cfa_register 13
 3219              	 
 3220 0020 80BC     	 pop {r7}
 3221              	.LCFI269:
 3222              	 .cfi_restore 7
 3223              	 .cfi_def_cfa_offset 0
 3224 0022 7047     	 bx lr
 3225              	 .cfi_endproc
 3226              	.LFE113:
 3228              	 .section .text.usart_is_tx_buf_end,"ax",%progbits
 3229              	 .align 1
 3230              	 .global usart_is_tx_buf_end
 3231              	 .syntax unified
 3232              	 .thumb
 3233              	 .thumb_func
 3234              	 .fpu softvfp
 3236              	usart_is_tx_buf_end:
 3237              	.LFB114:
1378:.././hal/sam3u1c/usart.c **** 
1379:.././hal/sam3u1c/usart.c **** /**
1380:.././hal/sam3u1c/usart.c ****  * \brief Check if one transmit buffer is empty.
1381:.././hal/sam3u1c/usart.c ****  *
1382:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1383:.././hal/sam3u1c/usart.c ****  *
1384:.././hal/sam3u1c/usart.c ****  * \retval 1 Transmit is complete.
1385:.././hal/sam3u1c/usart.c ****  * \retval 0 Transmit is still pending.
1386:.././hal/sam3u1c/usart.c ****  */
1387:.././hal/sam3u1c/usart.c **** uint32_t usart_is_tx_buf_end(Usart *p_usart)
1388:.././hal/sam3u1c/usart.c **** {
 3238              	 .loc 1 1388 0
 3239              	 .cfi_startproc
 3240              	 
 3241              	 
 3242              	 
 3243 0000 80B4     	 push {r7}
 3244              	.LCFI270:
 3245              	 .cfi_def_cfa_offset 4
 3246              	 .cfi_offset 7,-4
 3247 0002 83B0     	 sub sp,sp,#12
 3248              	.LCFI271:
 3249              	 .cfi_def_cfa_offset 16
 3250 0004 00AF     	 add r7,sp,#0
 3251              	.LCFI272:
 3252              	 .cfi_def_cfa_register 7
 3253 0006 7860     	 str r0,[r7,#4]
1389:.././hal/sam3u1c/usart.c **** 	return (p_usart->US_CSR & US_CSR_ENDTX) > 0;
 3254              	 .loc 1 1389 0
 3255 0008 7B68     	 ldr r3,[r7,#4]
 3256 000a 5B69     	 ldr r3,[r3,#20]
 3257 000c 03F01003 	 and r3,r3,#16
 3258 0010 002B     	 cmp r3,#0
 3259 0012 14BF     	 ite ne
 3260 0014 0123     	 movne r3,#1
 3261 0016 0023     	 moveq r3,#0
 3262 0018 DBB2     	 uxtb r3,r3
1390:.././hal/sam3u1c/usart.c **** }
 3263              	 .loc 1 1390 0
 3264 001a 1846     	 mov r0,r3
 3265 001c 0C37     	 adds r7,r7,#12
 3266              	.LCFI273:
 3267              	 .cfi_def_cfa_offset 4
 3268 001e BD46     	 mov sp,r7
 3269              	.LCFI274:
 3270              	 .cfi_def_cfa_register 13
 3271              	 
 3272 0020 80BC     	 pop {r7}
 3273              	.LCFI275:
 3274              	 .cfi_restore 7
 3275              	 .cfi_def_cfa_offset 0
 3276 0022 7047     	 bx lr
 3277              	 .cfi_endproc
 3278              	.LFE114:
 3280              	 .section .text.usart_is_rx_buf_full,"ax",%progbits
 3281              	 .align 1
 3282              	 .global usart_is_rx_buf_full
 3283              	 .syntax unified
 3284              	 .thumb
 3285              	 .thumb_func
 3286              	 .fpu softvfp
 3288              	usart_is_rx_buf_full:
 3289              	.LFB115:
1391:.././hal/sam3u1c/usart.c **** 
1392:.././hal/sam3u1c/usart.c **** /**
1393:.././hal/sam3u1c/usart.c ****  * \brief Check if both receive buffers are full.
1394:.././hal/sam3u1c/usart.c ****  *
1395:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1396:.././hal/sam3u1c/usart.c ****  *
1397:.././hal/sam3u1c/usart.c ****  * \retval 1 Receive buffers are full.
1398:.././hal/sam3u1c/usart.c ****  * \retval 0 Receive buffers are not full.
1399:.././hal/sam3u1c/usart.c ****  */
1400:.././hal/sam3u1c/usart.c **** uint32_t usart_is_rx_buf_full(Usart *p_usart)
1401:.././hal/sam3u1c/usart.c **** {
 3290              	 .loc 1 1401 0
 3291              	 .cfi_startproc
 3292              	 
 3293              	 
 3294              	 
 3295 0000 80B4     	 push {r7}
 3296              	.LCFI276:
 3297              	 .cfi_def_cfa_offset 4
 3298              	 .cfi_offset 7,-4
 3299 0002 83B0     	 sub sp,sp,#12
 3300              	.LCFI277:
 3301              	 .cfi_def_cfa_offset 16
 3302 0004 00AF     	 add r7,sp,#0
 3303              	.LCFI278:
 3304              	 .cfi_def_cfa_register 7
 3305 0006 7860     	 str r0,[r7,#4]
1402:.././hal/sam3u1c/usart.c **** 	return (p_usart->US_CSR & US_CSR_RXBUFF) > 0;
 3306              	 .loc 1 1402 0
 3307 0008 7B68     	 ldr r3,[r7,#4]
 3308 000a 5B69     	 ldr r3,[r3,#20]
 3309 000c 03F48053 	 and r3,r3,#4096
 3310 0010 002B     	 cmp r3,#0
 3311 0012 14BF     	 ite ne
 3312 0014 0123     	 movne r3,#1
 3313 0016 0023     	 moveq r3,#0
 3314 0018 DBB2     	 uxtb r3,r3
1403:.././hal/sam3u1c/usart.c **** }
 3315              	 .loc 1 1403 0
 3316 001a 1846     	 mov r0,r3
 3317 001c 0C37     	 adds r7,r7,#12
 3318              	.LCFI279:
 3319              	 .cfi_def_cfa_offset 4
 3320 001e BD46     	 mov sp,r7
 3321              	.LCFI280:
 3322              	 .cfi_def_cfa_register 13
 3323              	 
 3324 0020 80BC     	 pop {r7}
 3325              	.LCFI281:
 3326              	 .cfi_restore 7
 3327              	 .cfi_def_cfa_offset 0
 3328 0022 7047     	 bx lr
 3329              	 .cfi_endproc
 3330              	.LFE115:
 3332              	 .section .text.usart_is_tx_buf_empty,"ax",%progbits
 3333              	 .align 1
 3334              	 .global usart_is_tx_buf_empty
 3335              	 .syntax unified
 3336              	 .thumb
 3337              	 .thumb_func
 3338              	 .fpu softvfp
 3340              	usart_is_tx_buf_empty:
 3341              	.LFB116:
1404:.././hal/sam3u1c/usart.c **** 
1405:.././hal/sam3u1c/usart.c **** /**
1406:.././hal/sam3u1c/usart.c ****  * \brief Check if both transmit buffers are empty.
1407:.././hal/sam3u1c/usart.c ****  *
1408:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1409:.././hal/sam3u1c/usart.c ****  *
1410:.././hal/sam3u1c/usart.c ****  * \retval 1 Transmit buffers are empty.
1411:.././hal/sam3u1c/usart.c ****  * \retval 0 Transmit buffers are not empty.
1412:.././hal/sam3u1c/usart.c ****  */
1413:.././hal/sam3u1c/usart.c **** uint32_t usart_is_tx_buf_empty(Usart *p_usart)
1414:.././hal/sam3u1c/usart.c **** {
 3342              	 .loc 1 1414 0
 3343              	 .cfi_startproc
 3344              	 
 3345              	 
 3346              	 
 3347 0000 80B4     	 push {r7}
 3348              	.LCFI282:
 3349              	 .cfi_def_cfa_offset 4
 3350              	 .cfi_offset 7,-4
 3351 0002 83B0     	 sub sp,sp,#12
 3352              	.LCFI283:
 3353              	 .cfi_def_cfa_offset 16
 3354 0004 00AF     	 add r7,sp,#0
 3355              	.LCFI284:
 3356              	 .cfi_def_cfa_register 7
 3357 0006 7860     	 str r0,[r7,#4]
1415:.././hal/sam3u1c/usart.c **** 	return (p_usart->US_CSR & US_CSR_TXBUFE) > 0;
 3358              	 .loc 1 1415 0
 3359 0008 7B68     	 ldr r3,[r7,#4]
 3360 000a 5B69     	 ldr r3,[r3,#20]
 3361 000c 03F40063 	 and r3,r3,#2048
 3362 0010 002B     	 cmp r3,#0
 3363 0012 14BF     	 ite ne
 3364 0014 0123     	 movne r3,#1
 3365 0016 0023     	 moveq r3,#0
 3366 0018 DBB2     	 uxtb r3,r3
1416:.././hal/sam3u1c/usart.c **** }
 3367              	 .loc 1 1416 0
 3368 001a 1846     	 mov r0,r3
 3369 001c 0C37     	 adds r7,r7,#12
 3370              	.LCFI285:
 3371              	 .cfi_def_cfa_offset 4
 3372 001e BD46     	 mov sp,r7
 3373              	.LCFI286:
 3374              	 .cfi_def_cfa_register 13
 3375              	 
 3376 0020 80BC     	 pop {r7}
 3377              	.LCFI287:
 3378              	 .cfi_restore 7
 3379              	 .cfi_def_cfa_offset 0
 3380 0022 7047     	 bx lr
 3381              	 .cfi_endproc
 3382              	.LFE116:
 3384              	 .section .text.usart_write,"ax",%progbits
 3385              	 .align 1
 3386              	 .global usart_write
 3387              	 .syntax unified
 3388              	 .thumb
 3389              	 .thumb_func
 3390              	 .fpu softvfp
 3392              	usart_write:
 3393              	.LFB117:
1417:.././hal/sam3u1c/usart.c **** 
1418:.././hal/sam3u1c/usart.c **** /**
1419:.././hal/sam3u1c/usart.c ****  * \brief Write to USART Transmit Holding Register.
1420:.././hal/sam3u1c/usart.c ****  *
1421:.././hal/sam3u1c/usart.c ****  * \note Before writing user should check if tx is ready (or empty).
1422:.././hal/sam3u1c/usart.c ****  *
1423:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1424:.././hal/sam3u1c/usart.c ****  * \param c Data to be sent.
1425:.././hal/sam3u1c/usart.c ****  *
1426:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
1427:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
1428:.././hal/sam3u1c/usart.c ****  */
1429:.././hal/sam3u1c/usart.c **** uint32_t usart_write(Usart *p_usart, uint32_t c)
1430:.././hal/sam3u1c/usart.c **** {
 3394              	 .loc 1 1430 0
 3395              	 .cfi_startproc
 3396              	 
 3397              	 
 3398              	 
 3399 0000 80B4     	 push {r7}
 3400              	.LCFI288:
 3401              	 .cfi_def_cfa_offset 4
 3402              	 .cfi_offset 7,-4
 3403 0002 83B0     	 sub sp,sp,#12
 3404              	.LCFI289:
 3405              	 .cfi_def_cfa_offset 16
 3406 0004 00AF     	 add r7,sp,#0
 3407              	.LCFI290:
 3408              	 .cfi_def_cfa_register 7
 3409 0006 7860     	 str r0,[r7,#4]
 3410 0008 3960     	 str r1,[r7]
1431:.././hal/sam3u1c/usart.c **** 	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
 3411              	 .loc 1 1431 0
 3412 000a 7B68     	 ldr r3,[r7,#4]
 3413 000c 5B69     	 ldr r3,[r3,#20]
 3414 000e 03F00203 	 and r3,r3,#2
 3415 0012 002B     	 cmp r3,#0
 3416 0014 01D1     	 bne .L154
1432:.././hal/sam3u1c/usart.c **** 		return 1;
 3417              	 .loc 1 1432 0
 3418 0016 0123     	 movs r3,#1
 3419 0018 05E0     	 b .L155
 3420              	.L154:
1433:.././hal/sam3u1c/usart.c **** 	}
1434:.././hal/sam3u1c/usart.c **** 
1435:.././hal/sam3u1c/usart.c **** 	p_usart->US_THR = US_THR_TXCHR(c);
 3421              	 .loc 1 1435 0
 3422 001a 3B68     	 ldr r3,[r7]
 3423 001c C3F30802 	 ubfx r2,r3,#0,#9
 3424 0020 7B68     	 ldr r3,[r7,#4]
 3425 0022 DA61     	 str r2,[r3,#28]
1436:.././hal/sam3u1c/usart.c **** 	return 0;
 3426              	 .loc 1 1436 0
 3427 0024 0023     	 movs r3,#0
 3428              	.L155:
1437:.././hal/sam3u1c/usart.c **** }
 3429              	 .loc 1 1437 0
 3430 0026 1846     	 mov r0,r3
 3431 0028 0C37     	 adds r7,r7,#12
 3432              	.LCFI291:
 3433              	 .cfi_def_cfa_offset 4
 3434 002a BD46     	 mov sp,r7
 3435              	.LCFI292:
 3436              	 .cfi_def_cfa_register 13
 3437              	 
 3438 002c 80BC     	 pop {r7}
 3439              	.LCFI293:
 3440              	 .cfi_restore 7
 3441              	 .cfi_def_cfa_offset 0
 3442 002e 7047     	 bx lr
 3443              	 .cfi_endproc
 3444              	.LFE117:
 3446              	 .section .text.usart_putchar,"ax",%progbits
 3447              	 .align 1
 3448              	 .global usart_putchar
 3449              	 .syntax unified
 3450              	 .thumb
 3451              	 .thumb_func
 3452              	 .fpu softvfp
 3454              	usart_putchar:
 3455              	.LFB118:
1438:.././hal/sam3u1c/usart.c **** 
1439:.././hal/sam3u1c/usart.c **** /**
1440:.././hal/sam3u1c/usart.c ****  * \brief Write to USART Transmit Holding Register.
1441:.././hal/sam3u1c/usart.c ****  *
1442:.././hal/sam3u1c/usart.c ****  * \note Before writing user should check if tx is ready (or empty).
1443:.././hal/sam3u1c/usart.c ****  *
1444:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1445:.././hal/sam3u1c/usart.c ****  * \param c Data to be sent.
1446:.././hal/sam3u1c/usart.c ****  *
1447:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
1448:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
1449:.././hal/sam3u1c/usart.c ****  */
1450:.././hal/sam3u1c/usart.c **** uint32_t usart_putchar(Usart *p_usart, uint32_t c)
1451:.././hal/sam3u1c/usart.c **** {
 3456              	 .loc 1 1451 0
 3457              	 .cfi_startproc
 3458              	 
 3459              	 
 3460              	 
 3461 0000 80B4     	 push {r7}
 3462              	.LCFI294:
 3463              	 .cfi_def_cfa_offset 4
 3464              	 .cfi_offset 7,-4
 3465 0002 83B0     	 sub sp,sp,#12
 3466              	.LCFI295:
 3467              	 .cfi_def_cfa_offset 16
 3468 0004 00AF     	 add r7,sp,#0
 3469              	.LCFI296:
 3470              	 .cfi_def_cfa_register 7
 3471 0006 7860     	 str r0,[r7,#4]
 3472 0008 3960     	 str r1,[r7]
1452:.././hal/sam3u1c/usart.c **** 	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
 3473              	 .loc 1 1452 0
 3474 000a 00BF     	 nop
 3475              	.L157:
 3476              	 .loc 1 1452 0 is_stmt 0 discriminator 1
 3477 000c 7B68     	 ldr r3,[r7,#4]
 3478 000e 5B69     	 ldr r3,[r3,#20]
 3479 0010 03F00203 	 and r3,r3,#2
 3480 0014 002B     	 cmp r3,#0
 3481 0016 F9D0     	 beq .L157
1453:.././hal/sam3u1c/usart.c **** 	}
1454:.././hal/sam3u1c/usart.c **** 
1455:.././hal/sam3u1c/usart.c **** 	p_usart->US_THR = US_THR_TXCHR(c);
 3482              	 .loc 1 1455 0 is_stmt 1
 3483 0018 3B68     	 ldr r3,[r7]
 3484 001a C3F30802 	 ubfx r2,r3,#0,#9
 3485 001e 7B68     	 ldr r3,[r7,#4]
 3486 0020 DA61     	 str r2,[r3,#28]
1456:.././hal/sam3u1c/usart.c **** 
1457:.././hal/sam3u1c/usart.c **** 	return 0;
 3487              	 .loc 1 1457 0
 3488 0022 0023     	 movs r3,#0
1458:.././hal/sam3u1c/usart.c **** }
 3489              	 .loc 1 1458 0
 3490 0024 1846     	 mov r0,r3
 3491 0026 0C37     	 adds r7,r7,#12
 3492              	.LCFI297:
 3493              	 .cfi_def_cfa_offset 4
 3494 0028 BD46     	 mov sp,r7
 3495              	.LCFI298:
 3496              	 .cfi_def_cfa_register 13
 3497              	 
 3498 002a 80BC     	 pop {r7}
 3499              	.LCFI299:
 3500              	 .cfi_restore 7
 3501              	 .cfi_def_cfa_offset 0
 3502 002c 7047     	 bx lr
 3503              	 .cfi_endproc
 3504              	.LFE118:
 3506              	 .section .text.usart_write_line,"ax",%progbits
 3507              	 .align 1
 3508              	 .global usart_write_line
 3509              	 .syntax unified
 3510              	 .thumb
 3511              	 .thumb_func
 3512              	 .fpu softvfp
 3514              	usart_write_line:
 3515              	.LFB119:
1459:.././hal/sam3u1c/usart.c **** 
1460:.././hal/sam3u1c/usart.c **** /**
1461:.././hal/sam3u1c/usart.c ****  * \brief Write one-line string through USART.
1462:.././hal/sam3u1c/usart.c ****  *
1463:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1464:.././hal/sam3u1c/usart.c ****  * \param string Pointer to one-line string to be sent.
1465:.././hal/sam3u1c/usart.c ****  */
1466:.././hal/sam3u1c/usart.c **** void usart_write_line(Usart *p_usart, const char *string)
1467:.././hal/sam3u1c/usart.c **** {
 3516              	 .loc 1 1467 0
 3517              	 .cfi_startproc
 3518              	 
 3519              	 
 3520 0000 80B5     	 push {r7,lr}
 3521              	.LCFI300:
 3522              	 .cfi_def_cfa_offset 8
 3523              	 .cfi_offset 7,-8
 3524              	 .cfi_offset 14,-4
 3525 0002 82B0     	 sub sp,sp,#8
 3526              	.LCFI301:
 3527              	 .cfi_def_cfa_offset 16
 3528 0004 00AF     	 add r7,sp,#0
 3529              	.LCFI302:
 3530              	 .cfi_def_cfa_register 7
 3531 0006 7860     	 str r0,[r7,#4]
 3532 0008 3960     	 str r1,[r7]
1468:.././hal/sam3u1c/usart.c **** 	while (*string != '\0') {
 3533              	 .loc 1 1468 0
 3534 000a 07E0     	 b .L160
 3535              	.L161:
1469:.././hal/sam3u1c/usart.c **** 		usart_putchar(p_usart, *string++);
 3536              	 .loc 1 1469 0
 3537 000c 3B68     	 ldr r3,[r7]
 3538 000e 5A1C     	 adds r2,r3,#1
 3539 0010 3A60     	 str r2,[r7]
 3540 0012 1B78     	 ldrb r3,[r3]
 3541 0014 1946     	 mov r1,r3
 3542 0016 7868     	 ldr r0,[r7,#4]
 3543 0018 044B     	 ldr r3,.L162
 3544 001a 9847     	 blx r3
 3545              	.LVL23:
 3546              	.L160:
1468:.././hal/sam3u1c/usart.c **** 	while (*string != '\0') {
 3547              	 .loc 1 1468 0
 3548 001c 3B68     	 ldr r3,[r7]
 3549 001e 1B78     	 ldrb r3,[r3]
 3550 0020 002B     	 cmp r3,#0
 3551 0022 F3D1     	 bne .L161
1470:.././hal/sam3u1c/usart.c **** 	}
1471:.././hal/sam3u1c/usart.c **** }
 3552              	 .loc 1 1471 0
 3553 0024 00BF     	 nop
 3554 0026 0837     	 adds r7,r7,#8
 3555              	.LCFI303:
 3556              	 .cfi_def_cfa_offset 8
 3557 0028 BD46     	 mov sp,r7
 3558              	.LCFI304:
 3559              	 .cfi_def_cfa_register 13
 3560              	 
 3561 002a 80BD     	 pop {r7,pc}
 3562              	.L163:
 3563              	 .align 2
 3564              	.L162:
 3565 002c 00000000 	 .word usart_putchar
 3566              	 .cfi_endproc
 3567              	.LFE119:
 3569              	 .section .text.usart_read,"ax",%progbits
 3570              	 .align 1
 3571              	 .global usart_read
 3572              	 .syntax unified
 3573              	 .thumb
 3574              	 .thumb_func
 3575              	 .fpu softvfp
 3577              	usart_read:
 3578              	.LFB120:
1472:.././hal/sam3u1c/usart.c **** 
1473:.././hal/sam3u1c/usart.c **** /**
1474:.././hal/sam3u1c/usart.c ****  * \brief Read from USART Receive Holding Register.
1475:.././hal/sam3u1c/usart.c ****  *
1476:.././hal/sam3u1c/usart.c ****  * \note Before reading user should check if rx is ready.
1477:.././hal/sam3u1c/usart.c ****  *
1478:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1479:.././hal/sam3u1c/usart.c ****  * \param c Pointer where the one-byte received data will be stored.
1480:.././hal/sam3u1c/usart.c ****  *
1481:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
1482:.././hal/sam3u1c/usart.c ****  * \retval 1 if no data is available or errors.
1483:.././hal/sam3u1c/usart.c ****  */
1484:.././hal/sam3u1c/usart.c **** uint32_t usart_read(Usart *p_usart, uint32_t *c)
1485:.././hal/sam3u1c/usart.c **** {
 3579              	 .loc 1 1485 0
 3580              	 .cfi_startproc
 3581              	 
 3582              	 
 3583              	 
 3584 0000 80B4     	 push {r7}
 3585              	.LCFI305:
 3586              	 .cfi_def_cfa_offset 4
 3587              	 .cfi_offset 7,-4
 3588 0002 83B0     	 sub sp,sp,#12
 3589              	.LCFI306:
 3590              	 .cfi_def_cfa_offset 16
 3591 0004 00AF     	 add r7,sp,#0
 3592              	.LCFI307:
 3593              	 .cfi_def_cfa_register 7
 3594 0006 7860     	 str r0,[r7,#4]
 3595 0008 3960     	 str r1,[r7]
1486:.././hal/sam3u1c/usart.c **** 	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
 3596              	 .loc 1 1486 0
 3597 000a 7B68     	 ldr r3,[r7,#4]
 3598 000c 5B69     	 ldr r3,[r3,#20]
 3599 000e 03F00103 	 and r3,r3,#1
 3600 0012 002B     	 cmp r3,#0
 3601 0014 01D1     	 bne .L165
1487:.././hal/sam3u1c/usart.c **** 		return 1;
 3602              	 .loc 1 1487 0
 3603 0016 0123     	 movs r3,#1
 3604 0018 06E0     	 b .L166
 3605              	.L165:
1488:.././hal/sam3u1c/usart.c **** 	}
1489:.././hal/sam3u1c/usart.c **** 
1490:.././hal/sam3u1c/usart.c **** 	/* Read character */
1491:.././hal/sam3u1c/usart.c **** 	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
 3606              	 .loc 1 1491 0
 3607 001a 7B68     	 ldr r3,[r7,#4]
 3608 001c 9B69     	 ldr r3,[r3,#24]
 3609 001e C3F30802 	 ubfx r2,r3,#0,#9
 3610 0022 3B68     	 ldr r3,[r7]
 3611 0024 1A60     	 str r2,[r3]
1492:.././hal/sam3u1c/usart.c **** 
1493:.././hal/sam3u1c/usart.c **** 	return 0;
 3612              	 .loc 1 1493 0
 3613 0026 0023     	 movs r3,#0
 3614              	.L166:
1494:.././hal/sam3u1c/usart.c **** }
 3615              	 .loc 1 1494 0
 3616 0028 1846     	 mov r0,r3
 3617 002a 0C37     	 adds r7,r7,#12
 3618              	.LCFI308:
 3619              	 .cfi_def_cfa_offset 4
 3620 002c BD46     	 mov sp,r7
 3621              	.LCFI309:
 3622              	 .cfi_def_cfa_register 13
 3623              	 
 3624 002e 80BC     	 pop {r7}
 3625              	.LCFI310:
 3626              	 .cfi_restore 7
 3627              	 .cfi_def_cfa_offset 0
 3628 0030 7047     	 bx lr
 3629              	 .cfi_endproc
 3630              	.LFE120:
 3632              	 .section .text.usart_getchar,"ax",%progbits
 3633              	 .align 1
 3634              	 .global usart_getchar
 3635              	 .syntax unified
 3636              	 .thumb
 3637              	 .thumb_func
 3638              	 .fpu softvfp
 3640              	usart_getchar:
 3641              	.LFB121:
1495:.././hal/sam3u1c/usart.c **** 
1496:.././hal/sam3u1c/usart.c **** /**
1497:.././hal/sam3u1c/usart.c ****  * \brief Read from USART Receive Holding Register.
1498:.././hal/sam3u1c/usart.c ****  * Before reading user should check if rx is ready.
1499:.././hal/sam3u1c/usart.c ****  *
1500:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1501:.././hal/sam3u1c/usart.c ****  * \param c Pointer where the one-byte received data will be stored.
1502:.././hal/sam3u1c/usart.c ****  *
1503:.././hal/sam3u1c/usart.c ****  * \retval 0 Data has been received.
1504:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
1505:.././hal/sam3u1c/usart.c ****  */
1506:.././hal/sam3u1c/usart.c **** uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
1507:.././hal/sam3u1c/usart.c **** {
 3642              	 .loc 1 1507 0
 3643              	 .cfi_startproc
 3644              	 
 3645              	 
 3646              	 
 3647 0000 80B4     	 push {r7}
 3648              	.LCFI311:
 3649              	 .cfi_def_cfa_offset 4
 3650              	 .cfi_offset 7,-4
 3651 0002 83B0     	 sub sp,sp,#12
 3652              	.LCFI312:
 3653              	 .cfi_def_cfa_offset 16
 3654 0004 00AF     	 add r7,sp,#0
 3655              	.LCFI313:
 3656              	 .cfi_def_cfa_register 7
 3657 0006 7860     	 str r0,[r7,#4]
 3658 0008 3960     	 str r1,[r7]
1508:.././hal/sam3u1c/usart.c **** 	/* Wait until it's not empty or timeout has reached. */
1509:.././hal/sam3u1c/usart.c **** 	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
 3659              	 .loc 1 1509 0
 3660 000a 00BF     	 nop
 3661              	.L168:
 3662              	 .loc 1 1509 0 is_stmt 0 discriminator 1
 3663 000c 7B68     	 ldr r3,[r7,#4]
 3664 000e 5B69     	 ldr r3,[r3,#20]
 3665 0010 03F00103 	 and r3,r3,#1
 3666 0014 002B     	 cmp r3,#0
 3667 0016 F9D0     	 beq .L168
1510:.././hal/sam3u1c/usart.c **** 	}
1511:.././hal/sam3u1c/usart.c **** 
1512:.././hal/sam3u1c/usart.c **** 	/* Read character */
1513:.././hal/sam3u1c/usart.c **** 	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
 3668              	 .loc 1 1513 0 is_stmt 1
 3669 0018 7B68     	 ldr r3,[r7,#4]
 3670 001a 9B69     	 ldr r3,[r3,#24]
 3671 001c C3F30802 	 ubfx r2,r3,#0,#9
 3672 0020 3B68     	 ldr r3,[r7]
 3673 0022 1A60     	 str r2,[r3]
1514:.././hal/sam3u1c/usart.c **** 
1515:.././hal/sam3u1c/usart.c **** 	return 0;
 3674              	 .loc 1 1515 0
 3675 0024 0023     	 movs r3,#0
1516:.././hal/sam3u1c/usart.c **** }
 3676              	 .loc 1 1516 0
 3677 0026 1846     	 mov r0,r3
 3678 0028 0C37     	 adds r7,r7,#12
 3679              	.LCFI314:
 3680              	 .cfi_def_cfa_offset 4
 3681 002a BD46     	 mov sp,r7
 3682              	.LCFI315:
 3683              	 .cfi_def_cfa_register 13
 3684              	 
 3685 002c 80BC     	 pop {r7}
 3686              	.LCFI316:
 3687              	 .cfi_restore 7
 3688              	 .cfi_def_cfa_offset 0
 3689 002e 7047     	 bx lr
 3690              	 .cfi_endproc
 3691              	.LFE121:
 3693              	 .section .text.usart_get_tx_access,"ax",%progbits
 3694              	 .align 1
 3695              	 .global usart_get_tx_access
 3696              	 .syntax unified
 3697              	 .thumb
 3698              	 .thumb_func
 3699              	 .fpu softvfp
 3701              	usart_get_tx_access:
 3702              	.LFB122:
1517:.././hal/sam3u1c/usart.c **** 
1518:.././hal/sam3u1c/usart.c **** #if (SAM3XA || SAM3U)
1519:.././hal/sam3u1c/usart.c **** /**
1520:.././hal/sam3u1c/usart.c ****  * \brief Get Transmit address for DMA operation.
1521:.././hal/sam3u1c/usart.c ****  *
1522:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1523:.././hal/sam3u1c/usart.c ****  *
1524:.././hal/sam3u1c/usart.c ****  * \return Transmit address for DMA access.
1525:.././hal/sam3u1c/usart.c ****  */
1526:.././hal/sam3u1c/usart.c **** uint32_t *usart_get_tx_access(Usart *p_usart)
1527:.././hal/sam3u1c/usart.c **** {
 3703              	 .loc 1 1527 0
 3704              	 .cfi_startproc
 3705              	 
 3706              	 
 3707              	 
 3708 0000 80B4     	 push {r7}
 3709              	.LCFI317:
 3710              	 .cfi_def_cfa_offset 4
 3711              	 .cfi_offset 7,-4
 3712 0002 83B0     	 sub sp,sp,#12
 3713              	.LCFI318:
 3714              	 .cfi_def_cfa_offset 16
 3715 0004 00AF     	 add r7,sp,#0
 3716              	.LCFI319:
 3717              	 .cfi_def_cfa_register 7
 3718 0006 7860     	 str r0,[r7,#4]
1528:.././hal/sam3u1c/usart.c **** 	return (uint32_t *)&(p_usart->US_THR);
 3719              	 .loc 1 1528 0
 3720 0008 7B68     	 ldr r3,[r7,#4]
 3721 000a 1C33     	 adds r3,r3,#28
1529:.././hal/sam3u1c/usart.c **** }
 3722              	 .loc 1 1529 0
 3723 000c 1846     	 mov r0,r3
 3724 000e 0C37     	 adds r7,r7,#12
 3725              	.LCFI320:
 3726              	 .cfi_def_cfa_offset 4
 3727 0010 BD46     	 mov sp,r7
 3728              	.LCFI321:
 3729              	 .cfi_def_cfa_register 13
 3730              	 
 3731 0012 80BC     	 pop {r7}
 3732              	.LCFI322:
 3733              	 .cfi_restore 7
 3734              	 .cfi_def_cfa_offset 0
 3735 0014 7047     	 bx lr
 3736              	 .cfi_endproc
 3737              	.LFE122:
 3739              	 .section .text.usart_get_rx_access,"ax",%progbits
 3740              	 .align 1
 3741              	 .global usart_get_rx_access
 3742              	 .syntax unified
 3743              	 .thumb
 3744              	 .thumb_func
 3745              	 .fpu softvfp
 3747              	usart_get_rx_access:
 3748              	.LFB123:
1530:.././hal/sam3u1c/usart.c **** 
1531:.././hal/sam3u1c/usart.c **** /**
1532:.././hal/sam3u1c/usart.c ****  * \brief Get Receive address for DMA operation.
1533:.././hal/sam3u1c/usart.c ****  *
1534:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1535:.././hal/sam3u1c/usart.c ****  *
1536:.././hal/sam3u1c/usart.c ****  * \return Receive address for DMA access.
1537:.././hal/sam3u1c/usart.c ****  */
1538:.././hal/sam3u1c/usart.c **** uint32_t *usart_get_rx_access(Usart *p_usart)
1539:.././hal/sam3u1c/usart.c **** {
 3749              	 .loc 1 1539 0
 3750              	 .cfi_startproc
 3751              	 
 3752              	 
 3753              	 
 3754 0000 80B4     	 push {r7}
 3755              	.LCFI323:
 3756              	 .cfi_def_cfa_offset 4
 3757              	 .cfi_offset 7,-4
 3758 0002 83B0     	 sub sp,sp,#12
 3759              	.LCFI324:
 3760              	 .cfi_def_cfa_offset 16
 3761 0004 00AF     	 add r7,sp,#0
 3762              	.LCFI325:
 3763              	 .cfi_def_cfa_register 7
 3764 0006 7860     	 str r0,[r7,#4]
1540:.././hal/sam3u1c/usart.c **** 	return (uint32_t *)&(p_usart->US_RHR);
 3765              	 .loc 1 1540 0
 3766 0008 7B68     	 ldr r3,[r7,#4]
 3767 000a 1833     	 adds r3,r3,#24
1541:.././hal/sam3u1c/usart.c **** }
 3768              	 .loc 1 1541 0
 3769 000c 1846     	 mov r0,r3
 3770 000e 0C37     	 adds r7,r7,#12
 3771              	.LCFI326:
 3772              	 .cfi_def_cfa_offset 4
 3773 0010 BD46     	 mov sp,r7
 3774              	.LCFI327:
 3775              	 .cfi_def_cfa_register 13
 3776              	 
 3777 0012 80BC     	 pop {r7}
 3778              	.LCFI328:
 3779              	 .cfi_restore 7
 3780              	 .cfi_def_cfa_offset 0
 3781 0014 7047     	 bx lr
 3782              	 .cfi_endproc
 3783              	.LFE123:
 3785              	 .section .text.usart_get_pdc_base,"ax",%progbits
 3786              	 .align 1
 3787              	 .global usart_get_pdc_base
 3788              	 .syntax unified
 3789              	 .thumb
 3790              	 .thumb_func
 3791              	 .fpu softvfp
 3793              	usart_get_pdc_base:
 3794              	.LFB124:
1542:.././hal/sam3u1c/usart.c **** #endif
1543:.././hal/sam3u1c/usart.c **** 
1544:.././hal/sam3u1c/usart.c **** #if (!SAM4L)
1545:.././hal/sam3u1c/usart.c **** /**
1546:.././hal/sam3u1c/usart.c ****  * \brief Get USART PDC base address.
1547:.././hal/sam3u1c/usart.c ****  *
1548:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a UART instance.
1549:.././hal/sam3u1c/usart.c ****  *
1550:.././hal/sam3u1c/usart.c ****  * \return USART PDC registers base for PDC driver to access.
1551:.././hal/sam3u1c/usart.c ****  */
1552:.././hal/sam3u1c/usart.c **** Pdc *usart_get_pdc_base(Usart *p_usart)
1553:.././hal/sam3u1c/usart.c **** {
 3795              	 .loc 1 1553 0
 3796              	 .cfi_startproc
 3797              	 
 3798              	 
 3799              	 
 3800 0000 80B4     	 push {r7}
 3801              	.LCFI329:
 3802              	 .cfi_def_cfa_offset 4
 3803              	 .cfi_offset 7,-4
 3804 0002 85B0     	 sub sp,sp,#20
 3805              	.LCFI330:
 3806              	 .cfi_def_cfa_offset 24
 3807 0004 00AF     	 add r7,sp,#0
 3808              	.LCFI331:
 3809              	 .cfi_def_cfa_register 7
 3810 0006 7860     	 str r0,[r7,#4]
1554:.././hal/sam3u1c/usart.c **** 	Pdc *p_pdc_base;
1555:.././hal/sam3u1c/usart.c **** 
1556:.././hal/sam3u1c/usart.c **** 	p_pdc_base = (Pdc *)NULL;
 3811              	 .loc 1 1556 0
 3812 0008 0023     	 movs r3,#0
 3813 000a FB60     	 str r3,[r7,#12]
1557:.././hal/sam3u1c/usart.c **** 
1558:.././hal/sam3u1c/usart.c **** #ifdef PDC_USART
1559:.././hal/sam3u1c/usart.c **** 	if (p_usart == USART) {
1560:.././hal/sam3u1c/usart.c **** 		p_pdc_base = PDC_USART;
1561:.././hal/sam3u1c/usart.c **** 		return p_pdc_base;
1562:.././hal/sam3u1c/usart.c **** 	}
1563:.././hal/sam3u1c/usart.c **** #endif
1564:.././hal/sam3u1c/usart.c **** #ifdef PDC_USART0
1565:.././hal/sam3u1c/usart.c **** 	if (p_usart == USART0) {
 3814              	 .loc 1 1565 0
 3815 000c 7B68     	 ldr r3,[r7,#4]
 3816 000e 0E4A     	 ldr r2,.L179
 3817 0010 9342     	 cmp r3,r2
 3818 0012 03D1     	 bne .L175
1566:.././hal/sam3u1c/usart.c **** 		p_pdc_base = PDC_USART0;
 3819              	 .loc 1 1566 0
 3820 0014 0D4B     	 ldr r3,.L179+4
 3821 0016 FB60     	 str r3,[r7,#12]
1567:.././hal/sam3u1c/usart.c **** 		return p_pdc_base;
 3822              	 .loc 1 1567 0
 3823 0018 FB68     	 ldr r3,[r7,#12]
 3824 001a 10E0     	 b .L176
 3825              	.L175:
1568:.././hal/sam3u1c/usart.c **** 	}
1569:.././hal/sam3u1c/usart.c **** #endif
1570:.././hal/sam3u1c/usart.c **** #ifdef PDC_USART1
1571:.././hal/sam3u1c/usart.c **** 	else if (p_usart == USART1) {
 3826              	 .loc 1 1571 0
 3827 001c 7B68     	 ldr r3,[r7,#4]
 3828 001e 0C4A     	 ldr r2,.L179+8
 3829 0020 9342     	 cmp r3,r2
 3830 0022 03D1     	 bne .L177
1572:.././hal/sam3u1c/usart.c **** 		p_pdc_base = PDC_USART1;
 3831              	 .loc 1 1572 0
 3832 0024 0B4B     	 ldr r3,.L179+12
 3833 0026 FB60     	 str r3,[r7,#12]
1573:.././hal/sam3u1c/usart.c **** 		return p_pdc_base;
 3834              	 .loc 1 1573 0
 3835 0028 FB68     	 ldr r3,[r7,#12]
 3836 002a 08E0     	 b .L176
 3837              	.L177:
1574:.././hal/sam3u1c/usart.c **** 	}
1575:.././hal/sam3u1c/usart.c **** #endif
1576:.././hal/sam3u1c/usart.c **** #ifdef PDC_USART2
1577:.././hal/sam3u1c/usart.c **** 	else if (p_usart == USART2) {
 3838              	 .loc 1 1577 0
 3839 002c 7B68     	 ldr r3,[r7,#4]
 3840 002e 0A4A     	 ldr r2,.L179+16
 3841 0030 9342     	 cmp r3,r2
 3842 0032 03D1     	 bne .L178
1578:.././hal/sam3u1c/usart.c **** 		p_pdc_base = PDC_USART2;
 3843              	 .loc 1 1578 0
 3844 0034 094B     	 ldr r3,.L179+20
 3845 0036 FB60     	 str r3,[r7,#12]
1579:.././hal/sam3u1c/usart.c **** 		return p_pdc_base;
 3846              	 .loc 1 1579 0
 3847 0038 FB68     	 ldr r3,[r7,#12]
 3848 003a 00E0     	 b .L176
 3849              	.L178:
1580:.././hal/sam3u1c/usart.c **** 	}
1581:.././hal/sam3u1c/usart.c **** #endif
1582:.././hal/sam3u1c/usart.c **** #ifdef PDC_USART3
1583:.././hal/sam3u1c/usart.c **** 	else if (p_usart == USART3) {
1584:.././hal/sam3u1c/usart.c **** 		p_pdc_base = PDC_USART3;
1585:.././hal/sam3u1c/usart.c **** 		return p_pdc_base;
1586:.././hal/sam3u1c/usart.c **** 	}
1587:.././hal/sam3u1c/usart.c **** #endif
1588:.././hal/sam3u1c/usart.c **** #ifdef PDC_USART4
1589:.././hal/sam3u1c/usart.c **** 	else if (p_usart == USART4) {
1590:.././hal/sam3u1c/usart.c **** 		p_pdc_base = PDC_USART4;
1591:.././hal/sam3u1c/usart.c **** 		return p_pdc_base;
1592:.././hal/sam3u1c/usart.c **** 	}
1593:.././hal/sam3u1c/usart.c **** #endif
1594:.././hal/sam3u1c/usart.c **** #ifdef PDC_USART5
1595:.././hal/sam3u1c/usart.c **** 	else if (p_usart == USART5) {
1596:.././hal/sam3u1c/usart.c **** 		p_pdc_base = PDC_USART5;
1597:.././hal/sam3u1c/usart.c **** 		return p_pdc_base;
1598:.././hal/sam3u1c/usart.c **** 	}
1599:.././hal/sam3u1c/usart.c **** #endif
1600:.././hal/sam3u1c/usart.c **** #ifdef PDC_USART6
1601:.././hal/sam3u1c/usart.c **** 	else if (p_usart == USART6) {
1602:.././hal/sam3u1c/usart.c **** 		p_pdc_base = PDC_USART6;
1603:.././hal/sam3u1c/usart.c **** 		return p_pdc_base;
1604:.././hal/sam3u1c/usart.c **** 	}
1605:.././hal/sam3u1c/usart.c **** #endif
1606:.././hal/sam3u1c/usart.c **** #ifdef PDC_USART7
1607:.././hal/sam3u1c/usart.c **** 	else if (p_usart == USART7) {
1608:.././hal/sam3u1c/usart.c **** 		p_pdc_base = PDC_USART7;
1609:.././hal/sam3u1c/usart.c **** 		return p_pdc_base;
1610:.././hal/sam3u1c/usart.c **** 	}
1611:.././hal/sam3u1c/usart.c **** #endif
1612:.././hal/sam3u1c/usart.c **** 
1613:.././hal/sam3u1c/usart.c **** 	return p_pdc_base;
 3850              	 .loc 1 1613 0
 3851 003c FB68     	 ldr r3,[r7,#12]
 3852              	.L176:
1614:.././hal/sam3u1c/usart.c **** }
 3853              	 .loc 1 1614 0
 3854 003e 1846     	 mov r0,r3
 3855 0040 1437     	 adds r7,r7,#20
 3856              	.LCFI332:
 3857              	 .cfi_def_cfa_offset 4
 3858 0042 BD46     	 mov sp,r7
 3859              	.LCFI333:
 3860              	 .cfi_def_cfa_register 13
 3861              	 
 3862 0044 80BC     	 pop {r7}
 3863              	.LCFI334:
 3864              	 .cfi_restore 7
 3865              	 .cfi_def_cfa_offset 0
 3866 0046 7047     	 bx lr
 3867              	.L180:
 3868              	 .align 2
 3869              	.L179:
 3870 0048 00000940 	 .word 1074331648
 3871 004c 00010940 	 .word 1074331904
 3872 0050 00400940 	 .word 1074348032
 3873 0054 00410940 	 .word 1074348288
 3874 0058 00800940 	 .word 1074364416
 3875 005c 00810940 	 .word 1074364672
 3876              	 .cfi_endproc
 3877              	.LFE124:
 3879              	 .section .text.usart_enable_writeprotect,"ax",%progbits
 3880              	 .align 1
 3881              	 .global usart_enable_writeprotect
 3882              	 .syntax unified
 3883              	 .thumb
 3884              	 .thumb_func
 3885              	 .fpu softvfp
 3887              	usart_enable_writeprotect:
 3888              	.LFB125:
1615:.././hal/sam3u1c/usart.c **** #endif
1616:.././hal/sam3u1c/usart.c **** 
1617:.././hal/sam3u1c/usart.c **** /**
1618:.././hal/sam3u1c/usart.c ****  * \brief Enable write protect of USART registers.
1619:.././hal/sam3u1c/usart.c ****  *
1620:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1621:.././hal/sam3u1c/usart.c ****  */
1622:.././hal/sam3u1c/usart.c **** void usart_enable_writeprotect(Usart *p_usart)
1623:.././hal/sam3u1c/usart.c **** {
 3889              	 .loc 1 1623 0
 3890              	 .cfi_startproc
 3891              	 
 3892              	 
 3893              	 
 3894 0000 80B4     	 push {r7}
 3895              	.LCFI335:
 3896              	 .cfi_def_cfa_offset 4
 3897              	 .cfi_offset 7,-4
 3898 0002 83B0     	 sub sp,sp,#12
 3899              	.LCFI336:
 3900              	 .cfi_def_cfa_offset 16
 3901 0004 00AF     	 add r7,sp,#0
 3902              	.LCFI337:
 3903              	 .cfi_def_cfa_register 7
 3904 0006 7860     	 str r0,[r7,#4]
1624:.././hal/sam3u1c/usart.c **** 	p_usart->US_WPMR = US_WPMR_WPEN | US_WPMR_WPKEY_PASSWD;
 3905              	 .loc 1 1624 0
 3906 0008 7B68     	 ldr r3,[r7,#4]
 3907 000a 044A     	 ldr r2,.L182
 3908 000c C3F8E420 	 str r2,[r3,#228]
1625:.././hal/sam3u1c/usart.c **** }
 3909              	 .loc 1 1625 0
 3910 0010 00BF     	 nop
 3911 0012 0C37     	 adds r7,r7,#12
 3912              	.LCFI338:
 3913              	 .cfi_def_cfa_offset 4
 3914 0014 BD46     	 mov sp,r7
 3915              	.LCFI339:
 3916              	 .cfi_def_cfa_register 13
 3917              	 
 3918 0016 80BC     	 pop {r7}
 3919              	.LCFI340:
 3920              	 .cfi_restore 7
 3921              	 .cfi_def_cfa_offset 0
 3922 0018 7047     	 bx lr
 3923              	.L183:
 3924 001a 00BF     	 .align 2
 3925              	.L182:
 3926 001c 01415355 	 .word 1431519489
 3927              	 .cfi_endproc
 3928              	.LFE125:
 3930              	 .section .text.usart_disable_writeprotect,"ax",%progbits
 3931              	 .align 1
 3932              	 .global usart_disable_writeprotect
 3933              	 .syntax unified
 3934              	 .thumb
 3935              	 .thumb_func
 3936              	 .fpu softvfp
 3938              	usart_disable_writeprotect:
 3939              	.LFB126:
1626:.././hal/sam3u1c/usart.c **** 
1627:.././hal/sam3u1c/usart.c **** /**
1628:.././hal/sam3u1c/usart.c ****  * \brief Disable write protect of USART registers.
1629:.././hal/sam3u1c/usart.c ****  *
1630:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1631:.././hal/sam3u1c/usart.c ****  */
1632:.././hal/sam3u1c/usart.c **** void usart_disable_writeprotect(Usart *p_usart)
1633:.././hal/sam3u1c/usart.c **** {
 3940              	 .loc 1 1633 0
 3941              	 .cfi_startproc
 3942              	 
 3943              	 
 3944              	 
 3945 0000 80B4     	 push {r7}
 3946              	.LCFI341:
 3947              	 .cfi_def_cfa_offset 4
 3948              	 .cfi_offset 7,-4
 3949 0002 83B0     	 sub sp,sp,#12
 3950              	.LCFI342:
 3951              	 .cfi_def_cfa_offset 16
 3952 0004 00AF     	 add r7,sp,#0
 3953              	.LCFI343:
 3954              	 .cfi_def_cfa_register 7
 3955 0006 7860     	 str r0,[r7,#4]
1634:.././hal/sam3u1c/usart.c **** 	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
 3956              	 .loc 1 1634 0
 3957 0008 7B68     	 ldr r3,[r7,#4]
 3958 000a 044A     	 ldr r2,.L185
 3959 000c C3F8E420 	 str r2,[r3,#228]
1635:.././hal/sam3u1c/usart.c **** }
 3960              	 .loc 1 1635 0
 3961 0010 00BF     	 nop
 3962 0012 0C37     	 adds r7,r7,#12
 3963              	.LCFI344:
 3964              	 .cfi_def_cfa_offset 4
 3965 0014 BD46     	 mov sp,r7
 3966              	.LCFI345:
 3967              	 .cfi_def_cfa_register 13
 3968              	 
 3969 0016 80BC     	 pop {r7}
 3970              	.LCFI346:
 3971              	 .cfi_restore 7
 3972              	 .cfi_def_cfa_offset 0
 3973 0018 7047     	 bx lr
 3974              	.L186:
 3975 001a 00BF     	 .align 2
 3976              	.L185:
 3977 001c 00415355 	 .word 1431519488
 3978              	 .cfi_endproc
 3979              	.LFE126:
 3981              	 .section .text.usart_get_writeprotect_status,"ax",%progbits
 3982              	 .align 1
 3983              	 .global usart_get_writeprotect_status
 3984              	 .syntax unified
 3985              	 .thumb
 3986              	 .thumb_func
 3987              	 .fpu softvfp
 3989              	usart_get_writeprotect_status:
 3990              	.LFB127:
1636:.././hal/sam3u1c/usart.c **** 
1637:.././hal/sam3u1c/usart.c **** /**
1638:.././hal/sam3u1c/usart.c ****  * \brief Get write protect status.
1639:.././hal/sam3u1c/usart.c ****  *
1640:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1641:.././hal/sam3u1c/usart.c ****  *
1642:.././hal/sam3u1c/usart.c ****  * \return 0 if the peripheral is not protected.
1643:.././hal/sam3u1c/usart.c ****  * \return 16-bit Write Protect Violation Status otherwise.
1644:.././hal/sam3u1c/usart.c ****  */
1645:.././hal/sam3u1c/usart.c **** uint32_t usart_get_writeprotect_status(Usart *p_usart)
1646:.././hal/sam3u1c/usart.c **** {
 3991              	 .loc 1 1646 0
 3992              	 .cfi_startproc
 3993              	 
 3994              	 
 3995              	 
 3996 0000 80B4     	 push {r7}
 3997              	.LCFI347:
 3998              	 .cfi_def_cfa_offset 4
 3999              	 .cfi_offset 7,-4
 4000 0002 85B0     	 sub sp,sp,#20
 4001              	.LCFI348:
 4002              	 .cfi_def_cfa_offset 24
 4003 0004 00AF     	 add r7,sp,#0
 4004              	.LCFI349:
 4005              	 .cfi_def_cfa_register 7
 4006 0006 7860     	 str r0,[r7,#4]
1647:.././hal/sam3u1c/usart.c **** 	uint32_t reg_value;
1648:.././hal/sam3u1c/usart.c **** 
1649:.././hal/sam3u1c/usart.c **** 	reg_value = p_usart->US_WPSR;
 4007              	 .loc 1 1649 0
 4008 0008 7B68     	 ldr r3,[r7,#4]
 4009 000a D3F8E830 	 ldr r3,[r3,#232]
 4010 000e FB60     	 str r3,[r7,#12]
1650:.././hal/sam3u1c/usart.c **** 	if (reg_value & US_WPSR_WPVS) {
 4011              	 .loc 1 1650 0
 4012 0010 FB68     	 ldr r3,[r7,#12]
 4013 0012 03F00103 	 and r3,r3,#1
 4014 0016 002B     	 cmp r3,#0
 4015 0018 03D0     	 beq .L188
1651:.././hal/sam3u1c/usart.c **** 		return (reg_value & US_WPSR_WPVSRC_Msk) >> US_WPSR_WPVSRC_Pos;
 4016              	 .loc 1 1651 0
 4017 001a FB68     	 ldr r3,[r7,#12]
 4018 001c 1B0A     	 lsrs r3,r3,#8
 4019 001e 9BB2     	 uxth r3,r3
 4020 0020 00E0     	 b .L189
 4021              	.L188:
1652:.././hal/sam3u1c/usart.c **** 	} else {
1653:.././hal/sam3u1c/usart.c **** 		return 0;
 4022              	 .loc 1 1653 0
 4023 0022 0023     	 movs r3,#0
 4024              	.L189:
1654:.././hal/sam3u1c/usart.c **** 	}
1655:.././hal/sam3u1c/usart.c **** }
 4025              	 .loc 1 1655 0
 4026 0024 1846     	 mov r0,r3
 4027 0026 1437     	 adds r7,r7,#20
 4028              	.LCFI350:
 4029              	 .cfi_def_cfa_offset 4
 4030 0028 BD46     	 mov sp,r7
 4031              	.LCFI351:
 4032              	 .cfi_def_cfa_register 13
 4033              	 
 4034 002a 80BC     	 pop {r7}
 4035              	.LCFI352:
 4036              	 .cfi_restore 7
 4037              	 .cfi_def_cfa_offset 0
 4038 002c 7047     	 bx lr
 4039              	 .cfi_endproc
 4040              	.LFE127:
 4042              	 .section .text.usart_get_error_number,"ax",%progbits
 4043              	 .align 1
 4044              	 .global usart_get_error_number
 4045              	 .syntax unified
 4046              	 .thumb
 4047              	 .thumb_func
 4048              	 .fpu softvfp
 4050              	usart_get_error_number:
 4051              	.LFB128:
1656:.././hal/sam3u1c/usart.c **** 
1657:.././hal/sam3u1c/usart.c **** /**
1658:.././hal/sam3u1c/usart.c ****  * \brief Get the total number of errors that occur during an ISO7816 transfer.
1659:.././hal/sam3u1c/usart.c ****  *
1660:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1661:.././hal/sam3u1c/usart.c ****  *
1662:.././hal/sam3u1c/usart.c ****  * \return The number of errors that occurred.
1663:.././hal/sam3u1c/usart.c ****  */
1664:.././hal/sam3u1c/usart.c **** uint8_t usart_get_error_number(Usart *p_usart)
1665:.././hal/sam3u1c/usart.c **** {
 4052              	 .loc 1 1665 0
 4053              	 .cfi_startproc
 4054              	 
 4055              	 
 4056              	 
 4057 0000 80B4     	 push {r7}
 4058              	.LCFI353:
 4059              	 .cfi_def_cfa_offset 4
 4060              	 .cfi_offset 7,-4
 4061 0002 83B0     	 sub sp,sp,#12
 4062              	.LCFI354:
 4063              	 .cfi_def_cfa_offset 16
 4064 0004 00AF     	 add r7,sp,#0
 4065              	.LCFI355:
 4066              	 .cfi_def_cfa_register 7
 4067 0006 7860     	 str r0,[r7,#4]
1666:.././hal/sam3u1c/usart.c **** 	return (p_usart->US_NER & US_NER_NB_ERRORS_Msk);
 4068              	 .loc 1 1666 0
 4069 0008 7B68     	 ldr r3,[r7,#4]
 4070 000a 5B6C     	 ldr r3,[r3,#68]
 4071 000c DBB2     	 uxtb r3,r3
1667:.././hal/sam3u1c/usart.c **** }
 4072              	 .loc 1 1667 0
 4073 000e 1846     	 mov r0,r3
 4074 0010 0C37     	 adds r7,r7,#12
 4075              	.LCFI356:
 4076              	 .cfi_def_cfa_offset 4
 4077 0012 BD46     	 mov sp,r7
 4078              	.LCFI357:
 4079              	 .cfi_def_cfa_register 13
 4080              	 
 4081 0014 80BC     	 pop {r7}
 4082              	.LCFI358:
 4083              	 .cfi_restore 7
 4084              	 .cfi_def_cfa_offset 0
 4085 0016 7047     	 bx lr
 4086              	 .cfi_endproc
 4087              	.LFE128:
 4089              	 .section .text.usart_man_set_tx_pre_len,"ax",%progbits
 4090              	 .align 1
 4091              	 .global usart_man_set_tx_pre_len
 4092              	 .syntax unified
 4093              	 .thumb
 4094              	 .thumb_func
 4095              	 .fpu softvfp
 4097              	usart_man_set_tx_pre_len:
 4098              	.LFB129:
1668:.././hal/sam3u1c/usart.c **** 
1669:.././hal/sam3u1c/usart.c **** #if (SAM3S || SAM4S || SAM3U || SAM3XA || SAM4L || SAM4E || SAM4C || SAM4CP || SAM4CM)
1670:.././hal/sam3u1c/usart.c **** 
1671:.././hal/sam3u1c/usart.c **** /**
1672:.././hal/sam3u1c/usart.c ****  * \brief Configure the transmitter preamble length when the Manchester
1673:.././hal/sam3u1c/usart.c ****  * encode/decode is enabled.
1674:.././hal/sam3u1c/usart.c ****  *
1675:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1676:.././hal/sam3u1c/usart.c ****  * \param uc_len The transmitter preamble length, which should be 0 ~ 15.
1677:.././hal/sam3u1c/usart.c ****  */
1678:.././hal/sam3u1c/usart.c **** void usart_man_set_tx_pre_len(Usart *p_usart, uint8_t uc_len)
1679:.././hal/sam3u1c/usart.c **** {
 4099              	 .loc 1 1679 0
 4100              	 .cfi_startproc
 4101              	 
 4102              	 
 4103              	 
 4104 0000 80B4     	 push {r7}
 4105              	.LCFI359:
 4106              	 .cfi_def_cfa_offset 4
 4107              	 .cfi_offset 7,-4
 4108 0002 83B0     	 sub sp,sp,#12
 4109              	.LCFI360:
 4110              	 .cfi_def_cfa_offset 16
 4111 0004 00AF     	 add r7,sp,#0
 4112              	.LCFI361:
 4113              	 .cfi_def_cfa_register 7
 4114 0006 7860     	 str r0,[r7,#4]
 4115 0008 0B46     	 mov r3,r1
 4116 000a FB70     	 strb r3,[r7,#3]
1680:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_TX_PL_Msk) |
 4117              	 .loc 1 1680 0
 4118 000c 7B68     	 ldr r3,[r7,#4]
 4119 000e 1B6D     	 ldr r3,[r3,#80]
 4120 0010 23F00F02 	 bic r2,r3,#15
1681:.././hal/sam3u1c/usart.c **** 			US_MAN_TX_PL(uc_len);
 4121              	 .loc 1 1681 0
 4122 0014 FB78     	 ldrb r3,[r7,#3]
 4123 0016 03F00F03 	 and r3,r3,#15
1680:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_TX_PL_Msk) |
 4124              	 .loc 1 1680 0
 4125 001a 1A43     	 orrs r2,r2,r3
 4126 001c 7B68     	 ldr r3,[r7,#4]
 4127 001e 1A65     	 str r2,[r3,#80]
1682:.././hal/sam3u1c/usart.c **** }
 4128              	 .loc 1 1682 0
 4129 0020 00BF     	 nop
 4130 0022 0C37     	 adds r7,r7,#12
 4131              	.LCFI362:
 4132              	 .cfi_def_cfa_offset 4
 4133 0024 BD46     	 mov sp,r7
 4134              	.LCFI363:
 4135              	 .cfi_def_cfa_register 13
 4136              	 
 4137 0026 80BC     	 pop {r7}
 4138              	.LCFI364:
 4139              	 .cfi_restore 7
 4140              	 .cfi_def_cfa_offset 0
 4141 0028 7047     	 bx lr
 4142              	 .cfi_endproc
 4143              	.LFE129:
 4145              	 .section .text.usart_man_set_tx_pre_pattern,"ax",%progbits
 4146              	 .align 1
 4147              	 .global usart_man_set_tx_pre_pattern
 4148              	 .syntax unified
 4149              	 .thumb
 4150              	 .thumb_func
 4151              	 .fpu softvfp
 4153              	usart_man_set_tx_pre_pattern:
 4154              	.LFB130:
1683:.././hal/sam3u1c/usart.c **** 
1684:.././hal/sam3u1c/usart.c **** /**
1685:.././hal/sam3u1c/usart.c ****  * \brief Configure the transmitter preamble pattern when the Manchester
1686:.././hal/sam3u1c/usart.c ****  * encode/decode is enabled, which should be 0 ~ 3.
1687:.././hal/sam3u1c/usart.c ****  *
1688:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1689:.././hal/sam3u1c/usart.c ****  * \param uc_pattern 0 if the preamble is composed of '1's;
1690:.././hal/sam3u1c/usart.c ****  * 1 if the preamble is composed of '0's;
1691:.././hal/sam3u1c/usart.c ****  * 2 if the preamble is composed of '01's;
1692:.././hal/sam3u1c/usart.c ****  * 3 if the preamble is composed of '10's.
1693:.././hal/sam3u1c/usart.c ****  */
1694:.././hal/sam3u1c/usart.c **** void usart_man_set_tx_pre_pattern(Usart *p_usart, uint8_t uc_pattern)
1695:.././hal/sam3u1c/usart.c **** {
 4155              	 .loc 1 1695 0
 4156              	 .cfi_startproc
 4157              	 
 4158              	 
 4159              	 
 4160 0000 80B4     	 push {r7}
 4161              	.LCFI365:
 4162              	 .cfi_def_cfa_offset 4
 4163              	 .cfi_offset 7,-4
 4164 0002 83B0     	 sub sp,sp,#12
 4165              	.LCFI366:
 4166              	 .cfi_def_cfa_offset 16
 4167 0004 00AF     	 add r7,sp,#0
 4168              	.LCFI367:
 4169              	 .cfi_def_cfa_register 7
 4170 0006 7860     	 str r0,[r7,#4]
 4171 0008 0B46     	 mov r3,r1
 4172 000a FB70     	 strb r3,[r7,#3]
1696:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_TX_PP_Msk) |
 4173              	 .loc 1 1696 0
 4174 000c 7B68     	 ldr r3,[r7,#4]
 4175 000e 1B6D     	 ldr r3,[r3,#80]
 4176 0010 23F44073 	 bic r3,r3,#768
1697:.././hal/sam3u1c/usart.c **** 			(uc_pattern << US_MAN_TX_PP_Pos);
 4177              	 .loc 1 1697 0
 4178 0014 FA78     	 ldrb r2,[r7,#3]
 4179 0016 1202     	 lsls r2,r2,#8
1696:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_TX_PP_Msk) |
 4180              	 .loc 1 1696 0
 4181 0018 1A43     	 orrs r2,r2,r3
 4182 001a 7B68     	 ldr r3,[r7,#4]
 4183 001c 1A65     	 str r2,[r3,#80]
1698:.././hal/sam3u1c/usart.c **** }
 4184              	 .loc 1 1698 0
 4185 001e 00BF     	 nop
 4186 0020 0C37     	 adds r7,r7,#12
 4187              	.LCFI368:
 4188              	 .cfi_def_cfa_offset 4
 4189 0022 BD46     	 mov sp,r7
 4190              	.LCFI369:
 4191              	 .cfi_def_cfa_register 13
 4192              	 
 4193 0024 80BC     	 pop {r7}
 4194              	.LCFI370:
 4195              	 .cfi_restore 7
 4196              	 .cfi_def_cfa_offset 0
 4197 0026 7047     	 bx lr
 4198              	 .cfi_endproc
 4199              	.LFE130:
 4201              	 .section .text.usart_man_set_tx_polarity,"ax",%progbits
 4202              	 .align 1
 4203              	 .global usart_man_set_tx_polarity
 4204              	 .syntax unified
 4205              	 .thumb
 4206              	 .thumb_func
 4207              	 .fpu softvfp
 4209              	usart_man_set_tx_polarity:
 4210              	.LFB131:
1699:.././hal/sam3u1c/usart.c **** 
1700:.././hal/sam3u1c/usart.c **** /**
1701:.././hal/sam3u1c/usart.c ****  * \brief Configure the transmitter Manchester polarity when the Manchester
1702:.././hal/sam3u1c/usart.c ****  * encode/decode is enabled.
1703:.././hal/sam3u1c/usart.c ****  *
1704:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1705:.././hal/sam3u1c/usart.c ****  * \param uc_polarity Indicate the transmitter Manchester polarity, which
1706:.././hal/sam3u1c/usart.c ****  * should be 0 or 1.
1707:.././hal/sam3u1c/usart.c ****  */
1708:.././hal/sam3u1c/usart.c **** void usart_man_set_tx_polarity(Usart *p_usart, uint8_t uc_polarity)
1709:.././hal/sam3u1c/usart.c **** {
 4211              	 .loc 1 1709 0
 4212              	 .cfi_startproc
 4213              	 
 4214              	 
 4215              	 
 4216 0000 80B4     	 push {r7}
 4217              	.LCFI371:
 4218              	 .cfi_def_cfa_offset 4
 4219              	 .cfi_offset 7,-4
 4220 0002 83B0     	 sub sp,sp,#12
 4221              	.LCFI372:
 4222              	 .cfi_def_cfa_offset 16
 4223 0004 00AF     	 add r7,sp,#0
 4224              	.LCFI373:
 4225              	 .cfi_def_cfa_register 7
 4226 0006 7860     	 str r0,[r7,#4]
 4227 0008 0B46     	 mov r3,r1
 4228 000a FB70     	 strb r3,[r7,#3]
1710:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_TX_MPOL) |
 4229              	 .loc 1 1710 0
 4230 000c 7B68     	 ldr r3,[r7,#4]
 4231 000e 1B6D     	 ldr r3,[r3,#80]
 4232 0010 23F48053 	 bic r3,r3,#4096
1711:.././hal/sam3u1c/usart.c **** 			(uc_polarity << 12);
 4233              	 .loc 1 1711 0
 4234 0014 FA78     	 ldrb r2,[r7,#3]
 4235 0016 1203     	 lsls r2,r2,#12
1710:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_TX_MPOL) |
 4236              	 .loc 1 1710 0
 4237 0018 1A43     	 orrs r2,r2,r3
 4238 001a 7B68     	 ldr r3,[r7,#4]
 4239 001c 1A65     	 str r2,[r3,#80]
1712:.././hal/sam3u1c/usart.c **** }
 4240              	 .loc 1 1712 0
 4241 001e 00BF     	 nop
 4242 0020 0C37     	 adds r7,r7,#12
 4243              	.LCFI374:
 4244              	 .cfi_def_cfa_offset 4
 4245 0022 BD46     	 mov sp,r7
 4246              	.LCFI375:
 4247              	 .cfi_def_cfa_register 13
 4248              	 
 4249 0024 80BC     	 pop {r7}
 4250              	.LCFI376:
 4251              	 .cfi_restore 7
 4252              	 .cfi_def_cfa_offset 0
 4253 0026 7047     	 bx lr
 4254              	 .cfi_endproc
 4255              	.LFE131:
 4257              	 .section .text.usart_man_set_rx_pre_len,"ax",%progbits
 4258              	 .align 1
 4259              	 .global usart_man_set_rx_pre_len
 4260              	 .syntax unified
 4261              	 .thumb
 4262              	 .thumb_func
 4263              	 .fpu softvfp
 4265              	usart_man_set_rx_pre_len:
 4266              	.LFB132:
1713:.././hal/sam3u1c/usart.c **** 
1714:.././hal/sam3u1c/usart.c **** /**
1715:.././hal/sam3u1c/usart.c ****  * \brief Configure the detected receiver preamble length when the Manchester
1716:.././hal/sam3u1c/usart.c ****  * encode/decode is enabled.
1717:.././hal/sam3u1c/usart.c ****  *
1718:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1719:.././hal/sam3u1c/usart.c ****  * \param uc_len The detected receiver preamble length, which should be 0 ~ 15.
1720:.././hal/sam3u1c/usart.c ****  */
1721:.././hal/sam3u1c/usart.c **** void usart_man_set_rx_pre_len(Usart *p_usart, uint8_t uc_len)
1722:.././hal/sam3u1c/usart.c **** {
 4267              	 .loc 1 1722 0
 4268              	 .cfi_startproc
 4269              	 
 4270              	 
 4271              	 
 4272 0000 80B4     	 push {r7}
 4273              	.LCFI377:
 4274              	 .cfi_def_cfa_offset 4
 4275              	 .cfi_offset 7,-4
 4276 0002 83B0     	 sub sp,sp,#12
 4277              	.LCFI378:
 4278              	 .cfi_def_cfa_offset 16
 4279 0004 00AF     	 add r7,sp,#0
 4280              	.LCFI379:
 4281              	 .cfi_def_cfa_register 7
 4282 0006 7860     	 str r0,[r7,#4]
 4283 0008 0B46     	 mov r3,r1
 4284 000a FB70     	 strb r3,[r7,#3]
1723:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_RX_PL_Msk) |
 4285              	 .loc 1 1723 0
 4286 000c 7B68     	 ldr r3,[r7,#4]
 4287 000e 1B6D     	 ldr r3,[r3,#80]
 4288 0010 23F47022 	 bic r2,r3,#983040
1724:.././hal/sam3u1c/usart.c **** 			US_MAN_RX_PL(uc_len);
 4289              	 .loc 1 1724 0
 4290 0014 FB78     	 ldrb r3,[r7,#3]
 4291 0016 1B04     	 lsls r3,r3,#16
 4292 0018 03F47023 	 and r3,r3,#983040
1723:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_RX_PL_Msk) |
 4293              	 .loc 1 1723 0
 4294 001c 1A43     	 orrs r2,r2,r3
 4295 001e 7B68     	 ldr r3,[r7,#4]
 4296 0020 1A65     	 str r2,[r3,#80]
1725:.././hal/sam3u1c/usart.c **** }
 4297              	 .loc 1 1725 0
 4298 0022 00BF     	 nop
 4299 0024 0C37     	 adds r7,r7,#12
 4300              	.LCFI380:
 4301              	 .cfi_def_cfa_offset 4
 4302 0026 BD46     	 mov sp,r7
 4303              	.LCFI381:
 4304              	 .cfi_def_cfa_register 13
 4305              	 
 4306 0028 80BC     	 pop {r7}
 4307              	.LCFI382:
 4308              	 .cfi_restore 7
 4309              	 .cfi_def_cfa_offset 0
 4310 002a 7047     	 bx lr
 4311              	 .cfi_endproc
 4312              	.LFE132:
 4314              	 .section .text.usart_man_set_rx_pre_pattern,"ax",%progbits
 4315              	 .align 1
 4316              	 .global usart_man_set_rx_pre_pattern
 4317              	 .syntax unified
 4318              	 .thumb
 4319              	 .thumb_func
 4320              	 .fpu softvfp
 4322              	usart_man_set_rx_pre_pattern:
 4323              	.LFB133:
1726:.././hal/sam3u1c/usart.c **** 
1727:.././hal/sam3u1c/usart.c **** /**
1728:.././hal/sam3u1c/usart.c ****  * \brief Configure the detected receiver preamble pattern when the Manchester
1729:.././hal/sam3u1c/usart.c ****  *  encode/decode is enabled, which should be 0 ~ 3.
1730:.././hal/sam3u1c/usart.c ****  *
1731:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1732:.././hal/sam3u1c/usart.c ****  * \param uc_pattern 0 if the preamble is composed of '1's;
1733:.././hal/sam3u1c/usart.c ****  * 1 if the preamble is composed of '0's;
1734:.././hal/sam3u1c/usart.c ****  * 2 if the preamble is composed of '01's;
1735:.././hal/sam3u1c/usart.c ****  * 3 if the preamble is composed of '10's.
1736:.././hal/sam3u1c/usart.c ****  */
1737:.././hal/sam3u1c/usart.c **** void usart_man_set_rx_pre_pattern(Usart *p_usart, uint8_t uc_pattern)
1738:.././hal/sam3u1c/usart.c **** {
 4324              	 .loc 1 1738 0
 4325              	 .cfi_startproc
 4326              	 
 4327              	 
 4328              	 
 4329 0000 80B4     	 push {r7}
 4330              	.LCFI383:
 4331              	 .cfi_def_cfa_offset 4
 4332              	 .cfi_offset 7,-4
 4333 0002 83B0     	 sub sp,sp,#12
 4334              	.LCFI384:
 4335              	 .cfi_def_cfa_offset 16
 4336 0004 00AF     	 add r7,sp,#0
 4337              	.LCFI385:
 4338              	 .cfi_def_cfa_register 7
 4339 0006 7860     	 str r0,[r7,#4]
 4340 0008 0B46     	 mov r3,r1
 4341 000a FB70     	 strb r3,[r7,#3]
1739:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_RX_PP_Msk) |
 4342              	 .loc 1 1739 0
 4343 000c 7B68     	 ldr r3,[r7,#4]
 4344 000e 1B6D     	 ldr r3,[r3,#80]
 4345 0010 23F04073 	 bic r3,r3,#50331648
1740:.././hal/sam3u1c/usart.c **** 			(uc_pattern << US_MAN_RX_PP_Pos);
 4346              	 .loc 1 1740 0
 4347 0014 FA78     	 ldrb r2,[r7,#3]
 4348 0016 1206     	 lsls r2,r2,#24
1739:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_RX_PP_Msk) |
 4349              	 .loc 1 1739 0
 4350 0018 1A43     	 orrs r2,r2,r3
 4351 001a 7B68     	 ldr r3,[r7,#4]
 4352 001c 1A65     	 str r2,[r3,#80]
1741:.././hal/sam3u1c/usart.c **** }
 4353              	 .loc 1 1741 0
 4354 001e 00BF     	 nop
 4355 0020 0C37     	 adds r7,r7,#12
 4356              	.LCFI386:
 4357              	 .cfi_def_cfa_offset 4
 4358 0022 BD46     	 mov sp,r7
 4359              	.LCFI387:
 4360              	 .cfi_def_cfa_register 13
 4361              	 
 4362 0024 80BC     	 pop {r7}
 4363              	.LCFI388:
 4364              	 .cfi_restore 7
 4365              	 .cfi_def_cfa_offset 0
 4366 0026 7047     	 bx lr
 4367              	 .cfi_endproc
 4368              	.LFE133:
 4370              	 .section .text.usart_man_set_rx_polarity,"ax",%progbits
 4371              	 .align 1
 4372              	 .global usart_man_set_rx_polarity
 4373              	 .syntax unified
 4374              	 .thumb
 4375              	 .thumb_func
 4376              	 .fpu softvfp
 4378              	usart_man_set_rx_polarity:
 4379              	.LFB134:
1742:.././hal/sam3u1c/usart.c **** 
1743:.././hal/sam3u1c/usart.c **** /**
1744:.././hal/sam3u1c/usart.c ****  * \brief Configure the receiver Manchester polarity when the Manchester
1745:.././hal/sam3u1c/usart.c ****  * encode/decode is enabled.
1746:.././hal/sam3u1c/usart.c ****  *
1747:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1748:.././hal/sam3u1c/usart.c ****  * \param uc_polarity Indicate the receiver Manchester polarity, which should
1749:.././hal/sam3u1c/usart.c ****  * be 0 or 1.
1750:.././hal/sam3u1c/usart.c ****  */
1751:.././hal/sam3u1c/usart.c **** void usart_man_set_rx_polarity(Usart *p_usart, uint8_t uc_polarity)
1752:.././hal/sam3u1c/usart.c **** {
 4380              	 .loc 1 1752 0
 4381              	 .cfi_startproc
 4382              	 
 4383              	 
 4384              	 
 4385 0000 80B4     	 push {r7}
 4386              	.LCFI389:
 4387              	 .cfi_def_cfa_offset 4
 4388              	 .cfi_offset 7,-4
 4389 0002 83B0     	 sub sp,sp,#12
 4390              	.LCFI390:
 4391              	 .cfi_def_cfa_offset 16
 4392 0004 00AF     	 add r7,sp,#0
 4393              	.LCFI391:
 4394              	 .cfi_def_cfa_register 7
 4395 0006 7860     	 str r0,[r7,#4]
 4396 0008 0B46     	 mov r3,r1
 4397 000a FB70     	 strb r3,[r7,#3]
1753:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_RX_MPOL) |
 4398              	 .loc 1 1753 0
 4399 000c 7B68     	 ldr r3,[r7,#4]
 4400 000e 1B6D     	 ldr r3,[r3,#80]
 4401 0010 23F08053 	 bic r3,r3,#268435456
1754:.././hal/sam3u1c/usart.c **** 			(uc_polarity << 28);
 4402              	 .loc 1 1754 0
 4403 0014 FA78     	 ldrb r2,[r7,#3]
 4404 0016 1207     	 lsls r2,r2,#28
1753:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_RX_MPOL) |
 4405              	 .loc 1 1753 0
 4406 0018 1A43     	 orrs r2,r2,r3
 4407 001a 7B68     	 ldr r3,[r7,#4]
 4408 001c 1A65     	 str r2,[r3,#80]
1755:.././hal/sam3u1c/usart.c **** }
 4409              	 .loc 1 1755 0
 4410 001e 00BF     	 nop
 4411 0020 0C37     	 adds r7,r7,#12
 4412              	.LCFI392:
 4413              	 .cfi_def_cfa_offset 4
 4414 0022 BD46     	 mov sp,r7
 4415              	.LCFI393:
 4416              	 .cfi_def_cfa_register 13
 4417              	 
 4418 0024 80BC     	 pop {r7}
 4419              	.LCFI394:
 4420              	 .cfi_restore 7
 4421              	 .cfi_def_cfa_offset 0
 4422 0026 7047     	 bx lr
 4423              	 .cfi_endproc
 4424              	.LFE134:
 4426              	 .section .text.usart_man_enable_drift_compensation,"ax",%progbits
 4427              	 .align 1
 4428              	 .global usart_man_enable_drift_compensation
 4429              	 .syntax unified
 4430              	 .thumb
 4431              	 .thumb_func
 4432              	 .fpu softvfp
 4434              	usart_man_enable_drift_compensation:
 4435              	.LFB135:
1756:.././hal/sam3u1c/usart.c **** 
1757:.././hal/sam3u1c/usart.c **** /**
1758:.././hal/sam3u1c/usart.c ****  * \brief Enable drift compensation.
1759:.././hal/sam3u1c/usart.c ****  *
1760:.././hal/sam3u1c/usart.c ****  * \note The 16X clock mode must be enabled.
1761:.././hal/sam3u1c/usart.c ****  *
1762:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1763:.././hal/sam3u1c/usart.c ****  */
1764:.././hal/sam3u1c/usart.c **** void usart_man_enable_drift_compensation(Usart *p_usart)
1765:.././hal/sam3u1c/usart.c **** {
 4436              	 .loc 1 1765 0
 4437              	 .cfi_startproc
 4438              	 
 4439              	 
 4440              	 
 4441 0000 80B4     	 push {r7}
 4442              	.LCFI395:
 4443              	 .cfi_def_cfa_offset 4
 4444              	 .cfi_offset 7,-4
 4445 0002 83B0     	 sub sp,sp,#12
 4446              	.LCFI396:
 4447              	 .cfi_def_cfa_offset 16
 4448 0004 00AF     	 add r7,sp,#0
 4449              	.LCFI397:
 4450              	 .cfi_def_cfa_register 7
 4451 0006 7860     	 str r0,[r7,#4]
1766:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN |= US_MAN_DRIFT;
 4452              	 .loc 1 1766 0
 4453 0008 7B68     	 ldr r3,[r7,#4]
 4454 000a 1B6D     	 ldr r3,[r3,#80]
 4455 000c 43F08042 	 orr r2,r3,#1073741824
 4456 0010 7B68     	 ldr r3,[r7,#4]
 4457 0012 1A65     	 str r2,[r3,#80]
1767:.././hal/sam3u1c/usart.c **** }
 4458              	 .loc 1 1767 0
 4459 0014 00BF     	 nop
 4460 0016 0C37     	 adds r7,r7,#12
 4461              	.LCFI398:
 4462              	 .cfi_def_cfa_offset 4
 4463 0018 BD46     	 mov sp,r7
 4464              	.LCFI399:
 4465              	 .cfi_def_cfa_register 13
 4466              	 
 4467 001a 80BC     	 pop {r7}
 4468              	.LCFI400:
 4469              	 .cfi_restore 7
 4470              	 .cfi_def_cfa_offset 0
 4471 001c 7047     	 bx lr
 4472              	 .cfi_endproc
 4473              	.LFE135:
 4475              	 .section .text.usart_man_disable_drift_compensation,"ax",%progbits
 4476              	 .align 1
 4477              	 .global usart_man_disable_drift_compensation
 4478              	 .syntax unified
 4479              	 .thumb
 4480              	 .thumb_func
 4481              	 .fpu softvfp
 4483              	usart_man_disable_drift_compensation:
 4484              	.LFB136:
1768:.././hal/sam3u1c/usart.c **** 
1769:.././hal/sam3u1c/usart.c **** /**
1770:.././hal/sam3u1c/usart.c ****  * \brief Disable drift compensation.
1771:.././hal/sam3u1c/usart.c ****  *
1772:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1773:.././hal/sam3u1c/usart.c ****  */
1774:.././hal/sam3u1c/usart.c **** void usart_man_disable_drift_compensation(Usart *p_usart)
1775:.././hal/sam3u1c/usart.c **** {
 4485              	 .loc 1 1775 0
 4486              	 .cfi_startproc
 4487              	 
 4488              	 
 4489              	 
 4490 0000 80B4     	 push {r7}
 4491              	.LCFI401:
 4492              	 .cfi_def_cfa_offset 4
 4493              	 .cfi_offset 7,-4
 4494 0002 83B0     	 sub sp,sp,#12
 4495              	.LCFI402:
 4496              	 .cfi_def_cfa_offset 16
 4497 0004 00AF     	 add r7,sp,#0
 4498              	.LCFI403:
 4499              	 .cfi_def_cfa_register 7
 4500 0006 7860     	 str r0,[r7,#4]
1776:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN &= ~US_MAN_DRIFT;
 4501              	 .loc 1 1776 0
 4502 0008 7B68     	 ldr r3,[r7,#4]
 4503 000a 1B6D     	 ldr r3,[r3,#80]
 4504 000c 23F08042 	 bic r2,r3,#1073741824
 4505 0010 7B68     	 ldr r3,[r7,#4]
 4506 0012 1A65     	 str r2,[r3,#80]
1777:.././hal/sam3u1c/usart.c **** }
 4507              	 .loc 1 1777 0
 4508 0014 00BF     	 nop
 4509 0016 0C37     	 adds r7,r7,#12
 4510              	.LCFI404:
 4511              	 .cfi_def_cfa_offset 4
 4512 0018 BD46     	 mov sp,r7
 4513              	.LCFI405:
 4514              	 .cfi_def_cfa_register 13
 4515              	 
 4516 001a 80BC     	 pop {r7}
 4517              	.LCFI406:
 4518              	 .cfi_restore 7
 4519              	 .cfi_def_cfa_offset 0
 4520 001c 7047     	 bx lr
 4521              	 .cfi_endproc
 4522              	.LFE136:
 4524              	 .section .bss.ul_reg_val.7092,"aw",%nobits
 4525              	 .align 2
 4528              	ul_reg_val.7092:
 4529 0000 00000000 	 .space 4
 4530              	 .section .bss.ul_reg_val.7108,"aw",%nobits
 4531              	 .align 2
 4534              	ul_reg_val.7108:
 4535 0000 00000000 	 .space 4
 4536              	 .section .bss.ul_reg_val.7113,"aw",%nobits
 4537              	 .align 2
 4540              	ul_reg_val.7113:
 4541 0000 00000000 	 .space 4
 4542              	 .section .bss.ul_reg_val.7129,"aw",%nobits
 4543              	 .align 2
 4546              	ul_reg_val.7129:
 4547 0000 00000000 	 .space 4
 4548              	 .section .bss.ul_reg_val.7135,"aw",%nobits
 4549              	 .align 2
 4552              	ul_reg_val.7135:
 4553 0000 00000000 	 .space 4
 4554              	 .section .bss.ul_reg_val.7146,"aw",%nobits
 4555              	 .align 2
 4558              	ul_reg_val.7146:
 4559 0000 00000000 	 .space 4
 4560              	 .text
 4561              	.Letext0:
 4562              	 .file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 4563              	 .file 3 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 4564              	 .file 4 ".././hal/sam3u1c/inc/sam3u1c.h"
 4565              	 .file 5 ".././hal/sam3u1c/inc/core_cm3.h"
 4566              	 .file 6 ".././hal/sam3u1c/inc/system_sam3u.h"
 4567              	 .file 7 ".././hal/sam3u1c/inc/component/component_pdc.h"
 4568              	 .file 8 ".././hal/sam3u1c/inc/component/component_usart.h"
 4569              	 .file 9 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\lock.h"
 4570              	 .file 10 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\_types.h"
 4571              	 .file 11 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\lib\\gcc\\arm-none-eabi\\6.3.1\\include\\stddef.h"
 4572              	 .file 12 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\sys\\reent.h"
 4573              	 .file 13 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\arm\\arm-gnu-toolchain\\arm-none-eabi\\include\\stdlib.h"
 4574              	 .file 14 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
 4575              	 .file 15 ".././hal/sam3u1c/inc/usart.h"
DEFINED SYMBOLS
                            *ABS*:00000000 usart.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:27     .text.usart_set_async_baudrate:00000000 $t
    {standard input}:34     .text.usart_set_async_baudrate:00000000 usart_set_async_baudrate
    {standard input}:143    .text.usart_set_sync_master_baudrate:00000000 $t
    {standard input}:149    .text.usart_set_sync_master_baudrate:00000000 usart_set_sync_master_baudrate
    {standard input}:224    .text.usart_set_sync_slave_baudrate:00000000 $t
    {standard input}:230    .text.usart_set_sync_slave_baudrate:00000000 usart_set_sync_slave_baudrate
    {standard input}:274    .text.usart_set_iso7816_clock:00000000 $t
    {standard input}:280    .text.usart_set_iso7816_clock:00000000 usart_set_iso7816_clock
    {standard input}:356    .text.usart_set_spi_master_baudrate:00000000 $t
    {standard input}:362    .text.usart_set_spi_master_baudrate:00000000 usart_set_spi_master_baudrate
    {standard input}:428    .text.usart_set_spi_slave_baudrate:00000000 $t
    {standard input}:434    .text.usart_set_spi_slave_baudrate:00000000 usart_set_spi_slave_baudrate
    {standard input}:482    .text.usart_reset:00000000 $t
    {standard input}:489    .text.usart_reset:00000000 usart_reset
    {standard input}:562    .text.usart_reset:00000048 $d
    {standard input}:3938   .text.usart_disable_writeprotect:00000000 usart_disable_writeprotect
    {standard input}:1871   .text.usart_reset_tx:00000000 usart_reset_tx
    {standard input}:2060   .text.usart_reset_rx:00000000 usart_reset_rx
    {standard input}:2343   .text.usart_reset_status:00000000 usart_reset_status
    {standard input}:2887   .text.usart_drive_RTS_pin_high:00000000 usart_drive_RTS_pin_high
    {standard input}:2793   .text.usart_drive_DTR_pin_high:00000000 usart_drive_DTR_pin_high
    {standard input}:572    .text.usart_init_rs232:00000000 $t
    {standard input}:579    .text.usart_init_rs232:00000000 usart_init_rs232
    {standard input}:679    .text.usart_init_rs232:00000078 $d
    {standard input}:4528   .bss.ul_reg_val.7092:00000000 ul_reg_val.7092
    {standard input}:686    .text.usart_init_hw_handshaking:00000000 $t
    {standard input}:693    .text.usart_init_hw_handshaking:00000000 usart_init_hw_handshaking
    {standard input}:750    .text.usart_init_hw_handshaking:0000003c $d
    {standard input}:755    .text.usart_init_modem:00000000 $t
    {standard input}:762    .text.usart_init_modem:00000000 usart_init_modem
    {standard input}:828    .text.usart_init_modem:00000048 $d
    {standard input}:834    .text.usart_init_sync_master:00000000 $t
    {standard input}:841    .text.usart_init_sync_master:00000000 usart_init_sync_master
    {standard input}:942    .text.usart_init_sync_master:0000007c $d
    {standard input}:4534   .bss.ul_reg_val.7108:00000000 ul_reg_val.7108
    {standard input}:949    .text.usart_init_sync_slave:00000000 $t
    {standard input}:956    .text.usart_init_sync_slave:00000000 usart_init_sync_slave
    {standard input}:1047   .text.usart_init_sync_slave:00000068 $d
    {standard input}:4540   .bss.ul_reg_val.7113:00000000 ul_reg_val.7113
    {standard input}:1054   .text.usart_init_rs485:00000000 $t
    {standard input}:1061   .text.usart_init_rs485:00000000 usart_init_rs485
    {standard input}:1118   .text.usart_init_rs485:0000003c $d
    {standard input}:1123   .text.usart_init_irda:00000000 $t
    {standard input}:1130   .text.usart_init_irda:00000000 usart_init_irda
    {standard input}:1192   .text.usart_init_irda:00000044 $d
    {standard input}:1197   .text.usart_init_iso7816:00000000 $t
    {standard input}:1204   .text.usart_init_iso7816:00000000 usart_init_iso7816
    {standard input}:1392   .text.usart_init_iso7816:00000108 $d
    {standard input}:4546   .bss.ul_reg_val.7129:00000000 ul_reg_val.7129
    {standard input}:1399   .text.usart_init_spi_master:00000000 $t
    {standard input}:1406   .text.usart_init_spi_master:00000000 usart_init_spi_master
    {standard input}:1490   .text.usart_init_spi_master:00000070 $d
    {standard input}:1494   .text.usart_init_spi_master:00000080 $t
    {standard input}:1583   .text.usart_init_spi_master:00000104 $d
    {standard input}:4552   .bss.ul_reg_val.7135:00000000 ul_reg_val.7135
    {standard input}:1590   .text.usart_init_spi_slave:00000000 $t
    {standard input}:1597   .text.usart_init_spi_slave:00000000 usart_init_spi_slave
    {standard input}:1670   .text.usart_init_spi_slave:0000005c $d
    {standard input}:1674   .text.usart_init_spi_slave:0000006c $t
    {standard input}:1763   .text.usart_init_spi_slave:000000f0 $d
    {standard input}:4558   .bss.ul_reg_val.7146:00000000 ul_reg_val.7146
    {standard input}:1770   .text.usart_enable_tx:00000000 $t
    {standard input}:1777   .text.usart_enable_tx:00000000 usart_enable_tx
    {standard input}:1817   .text.usart_disable_tx:00000000 $t
    {standard input}:1824   .text.usart_disable_tx:00000000 usart_disable_tx
    {standard input}:1864   .text.usart_reset_tx:00000000 $t
    {standard input}:1911   .text.usart_set_tx_timeguard:00000000 $t
    {standard input}:1918   .text.usart_set_tx_timeguard:00000000 usart_set_tx_timeguard
    {standard input}:1959   .text.usart_enable_rx:00000000 $t
    {standard input}:1966   .text.usart_enable_rx:00000000 usart_enable_rx
    {standard input}:2006   .text.usart_disable_rx:00000000 $t
    {standard input}:2013   .text.usart_disable_rx:00000000 usart_disable_rx
    {standard input}:2053   .text.usart_reset_rx:00000000 $t
    {standard input}:2100   .text.usart_set_rx_timeout:00000000 $t
    {standard input}:2107   .text.usart_set_rx_timeout:00000000 usart_set_rx_timeout
    {standard input}:2148   .text.usart_enable_interrupt:00000000 $t
    {standard input}:2155   .text.usart_enable_interrupt:00000000 usart_enable_interrupt
    {standard input}:2196   .text.usart_disable_interrupt:00000000 $t
    {standard input}:2203   .text.usart_disable_interrupt:00000000 usart_disable_interrupt
    {standard input}:2244   .text.usart_get_interrupt_mask:00000000 $t
    {standard input}:2251   .text.usart_get_interrupt_mask:00000000 usart_get_interrupt_mask
    {standard input}:2290   .text.usart_get_status:00000000 $t
    {standard input}:2297   .text.usart_get_status:00000000 usart_get_status
    {standard input}:2336   .text.usart_reset_status:00000000 $t
    {standard input}:2383   .text.usart_start_tx_break:00000000 $t
    {standard input}:2390   .text.usart_start_tx_break:00000000 usart_start_tx_break
    {standard input}:2430   .text.usart_stop_tx_break:00000000 $t
    {standard input}:2437   .text.usart_stop_tx_break:00000000 usart_stop_tx_break
    {standard input}:2477   .text.usart_start_rx_timeout:00000000 $t
    {standard input}:2484   .text.usart_start_rx_timeout:00000000 usart_start_rx_timeout
    {standard input}:2524   .text.usart_send_address:00000000 $t
    {standard input}:2531   .text.usart_send_address:00000000 usart_send_address
    {standard input}:2593   .text.usart_send_address:00000040 $d
    {standard input}:3392   .text.usart_write:00000000 usart_write
    {standard input}:2598   .text.usart_reset_iterations:00000000 $t
    {standard input}:2605   .text.usart_reset_iterations:00000000 usart_reset_iterations
    {standard input}:2645   .text.usart_reset_nack:00000000 $t
    {standard input}:2652   .text.usart_reset_nack:00000000 usart_reset_nack
    {standard input}:2692   .text.usart_restart_rx_timeout:00000000 $t
    {standard input}:2699   .text.usart_restart_rx_timeout:00000000 usart_restart_rx_timeout
    {standard input}:2739   .text.usart_drive_DTR_pin_low:00000000 $t
    {standard input}:2746   .text.usart_drive_DTR_pin_low:00000000 usart_drive_DTR_pin_low
    {standard input}:2786   .text.usart_drive_DTR_pin_high:00000000 $t
    {standard input}:2833   .text.usart_drive_RTS_pin_low:00000000 $t
    {standard input}:2840   .text.usart_drive_RTS_pin_low:00000000 usart_drive_RTS_pin_low
    {standard input}:2880   .text.usart_drive_RTS_pin_high:00000000 $t
    {standard input}:2927   .text.usart_spi_force_chip_select:00000000 $t
    {standard input}:2934   .text.usart_spi_force_chip_select:00000000 usart_spi_force_chip_select
    {standard input}:2974   .text.usart_spi_release_chip_select:00000000 $t
    {standard input}:2981   .text.usart_spi_release_chip_select:00000000 usart_spi_release_chip_select
    {standard input}:3021   .text.usart_is_tx_ready:00000000 $t
    {standard input}:3028   .text.usart_is_tx_ready:00000000 usart_is_tx_ready
    {standard input}:3073   .text.usart_is_tx_empty:00000000 $t
    {standard input}:3080   .text.usart_is_tx_empty:00000000 usart_is_tx_empty
    {standard input}:3125   .text.usart_is_rx_ready:00000000 $t
    {standard input}:3132   .text.usart_is_rx_ready:00000000 usart_is_rx_ready
    {standard input}:3177   .text.usart_is_rx_buf_end:00000000 $t
    {standard input}:3184   .text.usart_is_rx_buf_end:00000000 usart_is_rx_buf_end
    {standard input}:3229   .text.usart_is_tx_buf_end:00000000 $t
    {standard input}:3236   .text.usart_is_tx_buf_end:00000000 usart_is_tx_buf_end
    {standard input}:3281   .text.usart_is_rx_buf_full:00000000 $t
    {standard input}:3288   .text.usart_is_rx_buf_full:00000000 usart_is_rx_buf_full
    {standard input}:3333   .text.usart_is_tx_buf_empty:00000000 $t
    {standard input}:3340   .text.usart_is_tx_buf_empty:00000000 usart_is_tx_buf_empty
    {standard input}:3385   .text.usart_write:00000000 $t
    {standard input}:3447   .text.usart_putchar:00000000 $t
    {standard input}:3454   .text.usart_putchar:00000000 usart_putchar
    {standard input}:3507   .text.usart_write_line:00000000 $t
    {standard input}:3514   .text.usart_write_line:00000000 usart_write_line
    {standard input}:3565   .text.usart_write_line:0000002c $d
    {standard input}:3570   .text.usart_read:00000000 $t
    {standard input}:3577   .text.usart_read:00000000 usart_read
    {standard input}:3633   .text.usart_getchar:00000000 $t
    {standard input}:3640   .text.usart_getchar:00000000 usart_getchar
    {standard input}:3694   .text.usart_get_tx_access:00000000 $t
    {standard input}:3701   .text.usart_get_tx_access:00000000 usart_get_tx_access
    {standard input}:3740   .text.usart_get_rx_access:00000000 $t
    {standard input}:3747   .text.usart_get_rx_access:00000000 usart_get_rx_access
    {standard input}:3786   .text.usart_get_pdc_base:00000000 $t
    {standard input}:3793   .text.usart_get_pdc_base:00000000 usart_get_pdc_base
    {standard input}:3870   .text.usart_get_pdc_base:00000048 $d
    {standard input}:3880   .text.usart_enable_writeprotect:00000000 $t
    {standard input}:3887   .text.usart_enable_writeprotect:00000000 usart_enable_writeprotect
    {standard input}:3926   .text.usart_enable_writeprotect:0000001c $d
    {standard input}:3931   .text.usart_disable_writeprotect:00000000 $t
    {standard input}:3977   .text.usart_disable_writeprotect:0000001c $d
    {standard input}:3982   .text.usart_get_writeprotect_status:00000000 $t
    {standard input}:3989   .text.usart_get_writeprotect_status:00000000 usart_get_writeprotect_status
    {standard input}:4043   .text.usart_get_error_number:00000000 $t
    {standard input}:4050   .text.usart_get_error_number:00000000 usart_get_error_number
    {standard input}:4090   .text.usart_man_set_tx_pre_len:00000000 $t
    {standard input}:4097   .text.usart_man_set_tx_pre_len:00000000 usart_man_set_tx_pre_len
    {standard input}:4146   .text.usart_man_set_tx_pre_pattern:00000000 $t
    {standard input}:4153   .text.usart_man_set_tx_pre_pattern:00000000 usart_man_set_tx_pre_pattern
    {standard input}:4202   .text.usart_man_set_tx_polarity:00000000 $t
    {standard input}:4209   .text.usart_man_set_tx_polarity:00000000 usart_man_set_tx_polarity
    {standard input}:4258   .text.usart_man_set_rx_pre_len:00000000 $t
    {standard input}:4265   .text.usart_man_set_rx_pre_len:00000000 usart_man_set_rx_pre_len
    {standard input}:4315   .text.usart_man_set_rx_pre_pattern:00000000 $t
    {standard input}:4322   .text.usart_man_set_rx_pre_pattern:00000000 usart_man_set_rx_pre_pattern
    {standard input}:4371   .text.usart_man_set_rx_polarity:00000000 $t
    {standard input}:4378   .text.usart_man_set_rx_polarity:00000000 usart_man_set_rx_polarity
    {standard input}:4427   .text.usart_man_enable_drift_compensation:00000000 $t
    {standard input}:4434   .text.usart_man_enable_drift_compensation:00000000 usart_man_enable_drift_compensation
    {standard input}:4476   .text.usart_man_disable_drift_compensation:00000000 $t
    {standard input}:4483   .text.usart_man_disable_drift_compensation:00000000 usart_man_disable_drift_compensation
    {standard input}:4525   .bss.ul_reg_val.7092:00000000 $d
    {standard input}:4531   .bss.ul_reg_val.7108:00000000 $d
    {standard input}:4537   .bss.ul_reg_val.7113:00000000 $d
    {standard input}:4543   .bss.ul_reg_val.7129:00000000 $d
    {standard input}:4549   .bss.ul_reg_val.7135:00000000 $d
    {standard input}:4555   .bss.ul_reg_val.7146:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.e23d094898ba82b639bd2bf6d23b6497
                           .group:00000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._newlib_version.h.4.3572908597b70d672d181fc7fc501c19
                           .group:00000000 wm4.features.h.33.863f3be0b2e521e624fcc7d6fa31d2ca
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.newlib.h.8.5f2124c7e712be65f83b91ff86a0b1c1
                           .group:00000000 wm4.config.h.219.65a553ab5bef5482f0d7880b0d33015e
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.cdefs.h.47.776a25dae4205bae6cce27d545bc475b
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.183.c226d164ceca1f2ecb9ae9360c54a098
                           .group:00000000 wm4.reent.h.17.23b059516345f8f5abfa01ddc379570f
                           .group:00000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.30.bbece7fa40993a78092dcc5805132560
                           .group:00000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.8188691c2279eac7a223caa50f6694b9
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.usart.h.71.248b8e0fdca1a015d75f4e432843f84f

NO UNDEFINED SYMBOLS
