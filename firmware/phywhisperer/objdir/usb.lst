   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "usb.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .section .text.osc_enable,"ax",%progbits
  27              	 .align 1
  28              	 .arch armv7-m
  29              	 .syntax unified
  30              	 .thumb
  31              	 .thumb_func
  32              	 .fpu softvfp
  34              	osc_enable:
  35              	.LFB69:
  36              	 .file 1 ".././hal/sam3u1c/inc/sam3u/osc.h"
   1:.././hal/sam3u1c/inc/sam3u/osc.h **** /**
   2:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \file
   3:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   4:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \brief Chip-specific oscillator management functions.
   5:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   6:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Copyright (c) 2011 - 2013 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   8:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  10:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \page License
  11:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  12:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sam3u/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  15:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  18:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  22:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  25:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  28:.././hal/sam3u1c/inc/sam3u/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sam3u/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sam3u/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sam3u/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sam3u/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sam3u/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sam3u/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sam3u/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sam3u/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sam3u/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sam3u/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  40:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  42:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  43:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  44:.././hal/sam3u1c/inc/sam3u/osc.h **** #ifndef CHIP_OSC_H_INCLUDED
  45:.././hal/sam3u1c/inc/sam3u/osc.h **** #define CHIP_OSC_H_INCLUDED
  46:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  47:.././hal/sam3u1c/inc/sam3u/osc.h **** #include "board.h"
  48:.././hal/sam3u1c/inc/sam3u/osc.h **** #include "pmc.h"
  49:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  50:.././hal/sam3u1c/inc/sam3u/osc.h **** /// @cond 0
  51:.././hal/sam3u1c/inc/sam3u/osc.h **** /**INDENT-OFF**/
  52:.././hal/sam3u1c/inc/sam3u/osc.h **** #ifdef __cplusplus
  53:.././hal/sam3u1c/inc/sam3u/osc.h **** extern "C" {
  54:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  55:.././hal/sam3u1c/inc/sam3u/osc.h **** /**INDENT-ON**/
  56:.././hal/sam3u1c/inc/sam3u/osc.h **** /// @endcond
  57:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  58:.././hal/sam3u1c/inc/sam3u/osc.h **** /*
  59:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Below BOARD_XXX macros are related to the specific board, and
  60:.././hal/sam3u1c/inc/sam3u/osc.h ****  * should be defined by the board code, otherwise default value are used.
  61:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  62:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_SLCK_XTAL)
  63:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board slow clock xtal frequency has not been defined.
  64:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_SLCK_XTAL      (32768UL)
  65:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  66:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  67:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_SLCK_BYPASS)
  68:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board slow clock bypass frequency has not been defined.
  69:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_SLCK_BYPASS    (32768UL)
  70:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  71:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  72:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_MAINCK_XTAL)
  73:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock xtal frequency has not been defined.
  74:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_MAINCK_XTAL    (12000000UL)
  75:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  76:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  77:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_MAINCK_BYPASS)
  78:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock bypass frequency has not been defined.
  79:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_MAINCK_BYPASS  (12000000UL)
  80:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  81:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  82:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_OSC_STARTUP_US)
  83:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock xtal startup time has not been defined.
  84:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_OSC_STARTUP_US      (15625UL)
  85:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  86:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  87:.././hal/sam3u1c/inc/sam3u/osc.h **** /**
  88:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \weakgroup osc_group
  89:.././hal/sam3u1c/inc/sam3u/osc.h ****  * @{
  90:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  91:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  92:.././hal/sam3u1c/inc/sam3u/osc.h **** //! \name Oscillator identifiers
  93:.././hal/sam3u1c/inc/sam3u/osc.h **** //@{
  94:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_RC             0    //!< Internal 32kHz RC oscillator.
  95:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_XTAL           1    //!< External 32kHz crystal oscillator.
  96:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_BYPASS         2    //!< External 32kHz bypass oscillator.
  97:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_4M_RC            3    //!< Internal 4MHz RC oscillator.
  98:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_8M_RC            4    //!< Internal 8MHz RC oscillator.
  99:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_12M_RC           5    //!< Internal 12MHz RC oscillator.
 100:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_XTAL             6    //!< External crystal oscillator.
 101:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_BYPASS           7    //!< External bypass oscillator.
 102:.././hal/sam3u1c/inc/sam3u/osc.h **** //@}
 103:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 104:.././hal/sam3u1c/inc/sam3u/osc.h **** //! \name Oscillator clock speed in hertz
 105:.././hal/sam3u1c/inc/sam3u/osc.h **** //@{
 106:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_RC_HZ          CHIP_FREQ_SLCK_RC               //!< Internal 32kHz RC oscillat
 107:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_XTAL_HZ        BOARD_FREQ_SLCK_XTAL            //!< External 32kHz crystal osc
 108:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_BYPASS_HZ      BOARD_FREQ_SLCK_BYPASS          //!< External 32kHz bypass osci
 109:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_4M_RC_HZ         CHIP_FREQ_MAINCK_RC_4MHZ        //!< Internal 4MHz RC oscillato
 110:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_8M_RC_HZ         CHIP_FREQ_MAINCK_RC_8MHZ        //!< Internal 8MHz RC oscillato
 111:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_12M_RC_HZ        CHIP_FREQ_MAINCK_RC_12MHZ       //!< Internal 12MHz RC oscillat
 112:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillato
 113:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator
 114:.././hal/sam3u1c/inc/sam3u/osc.h **** //@}
 115:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 116:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline void osc_enable(uint32_t ul_id)
 117:.././hal/sam3u1c/inc/sam3u/osc.h **** {
  37              	 .loc 1 117 1
  38              	 .cfi_startproc
  39              	 
  40              	 
  41 0000 80B5     	 push {r7,lr}
  42              	.LCFI0:
  43              	 .cfi_def_cfa_offset 8
  44              	 .cfi_offset 7,-8
  45              	 .cfi_offset 14,-4
  46 0002 82B0     	 sub sp,sp,#8
  47              	.LCFI1:
  48              	 .cfi_def_cfa_offset 16
  49 0004 00AF     	 add r7,sp,#0
  50              	.LCFI2:
  51              	 .cfi_def_cfa_register 7
  52 0006 7860     	 str r0,[r7,#4]
 118:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
  53              	 .loc 1 118 2
  54 0008 7B68     	 ldr r3,[r7,#4]
  55 000a 072B     	 cmp r3,#7
  56 000c 2ED8     	 bhi .L12
  57 000e 01A2     	 adr r2,.L4
  58 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
  59              	 .p2align 2
  60              	.L4:
  61 0014 6B000000 	 .word .L13+1
  62 0018 35000000 	 .word .L10+1
  63 001c 3D000000 	 .word .L9+1
  64 0020 45000000 	 .word .L8+1
  65 0024 4D000000 	 .word .L7+1
  66 0028 55000000 	 .word .L6+1
  67 002c 5D000000 	 .word .L5+1
  68 0030 65000000 	 .word .L3+1
  69              	 .p2align 1
  70              	.L10:
 119:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 120:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 121:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 122:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 123:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  71              	 .loc 1 123 3
  72 0034 0020     	 movs r0,#0
  73 0036 0F4B     	 ldr r3,.L14
  74 0038 9847     	 blx r3
  75              	.LVL0:
 124:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  76              	 .loc 1 124 3
  77 003a 17E0     	 b .L2
  78              	.L9:
 125:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 126:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 127:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  79              	 .loc 1 127 3
  80 003c 0120     	 movs r0,#1
  81 003e 0D4B     	 ldr r3,.L14
  82 0040 9847     	 blx r3
  83              	.LVL1:
 128:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  84              	 .loc 1 128 3
  85 0042 13E0     	 b .L2
  86              	.L8:
 129:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 130:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 131:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 132:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  87              	 .loc 1 132 3
  88 0044 0020     	 movs r0,#0
  89 0046 0C4B     	 ldr r3,.L14+4
  90 0048 9847     	 blx r3
  91              	.LVL2:
 133:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  92              	 .loc 1 133 3
  93 004a 0FE0     	 b .L2
  94              	.L7:
 134:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 135:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 136:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  95              	 .loc 1 136 3
  96 004c 1020     	 movs r0,#16
  97 004e 0A4B     	 ldr r3,.L14+4
  98 0050 9847     	 blx r3
  99              	.LVL3:
 137:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 100              	 .loc 1 137 3
 101 0052 0BE0     	 b .L2
 102              	.L6:
 138:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 139:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 140:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
 103              	 .loc 1 140 3
 104 0054 2020     	 movs r0,#32
 105 0056 084B     	 ldr r3,.L14+4
 106 0058 9847     	 blx r3
 107              	.LVL4:
 141:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 108              	 .loc 1 141 3
 109 005a 07E0     	 b .L2
 110              	.L5:
 142:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 143:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 144:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 145:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
 111              	 .loc 1 145 3
 112 005c 3E20     	 movs r0,#62
 113 005e 074B     	 ldr r3,.L14+8
 114 0060 9847     	 blx r3
 115              	.LVL5:
 146:.././hal/sam3u1c/inc/sam3u/osc.h **** 				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
 147:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 116              	 .loc 1 147 3
 117 0062 03E0     	 b .L2
 118              	.L3:
 148:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 149:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 150:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_bypass_main_xtal();
 119              	 .loc 1 150 3
 120 0064 064B     	 ldr r3,.L14+12
 121 0066 9847     	 blx r3
 122              	.LVL6:
 151:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 123              	 .loc 1 151 3
 124 0068 00E0     	 b .L2
 125              	.L13:
 120:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 126              	 .loc 1 120 3
 127 006a 00BF     	 nop
 128              	.L2:
 129              	.L12:
 152:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 153:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 130              	 .loc 1 153 1
 131 006c 00BF     	 nop
 132 006e 0837     	 adds r7,r7,#8
 133              	.LCFI3:
 134              	 .cfi_def_cfa_offset 8
 135 0070 BD46     	 mov sp,r7
 136              	.LCFI4:
 137              	 .cfi_def_cfa_register 13
 138              	 
 139 0072 80BD     	 pop {r7,pc}
 140              	.L15:
 141              	 .align 2
 142              	.L14:
 143 0074 00000000 	 .word pmc_switch_sclk_to_32kxtal
 144 0078 00000000 	 .word pmc_osc_enable_fastrc
 145 007c 00000000 	 .word pmc_osc_enable_main_xtal
 146 0080 00000000 	 .word pmc_osc_bypass_main_xtal
 147              	 .cfi_endproc
 148              	.LFE69:
 150              	 .section .text.osc_is_ready,"ax",%progbits
 151              	 .align 1
 152              	 .syntax unified
 153              	 .thumb
 154              	 .thumb_func
 155              	 .fpu softvfp
 157              	osc_is_ready:
 158              	.LFB71:
 154:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 155:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline void osc_disable(uint32_t ul_id)
 156:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 157:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 158:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 159:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 160:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 161:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 162:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 163:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 164:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 165:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 166:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_fastrc();
 167:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 168:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 169:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 170:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_xtal(PMC_OSC_XTAL);
 171:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 172:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 173:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 174:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_xtal(PMC_OSC_BYPASS);
 175:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 176:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 177:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 178:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 179:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline bool osc_is_ready(uint32_t ul_id)
 180:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 159              	 .loc 1 180 1
 160              	 .cfi_startproc
 161              	 
 162              	 
 163 0000 80B5     	 push {r7,lr}
 164              	.LCFI5:
 165              	 .cfi_def_cfa_offset 8
 166              	 .cfi_offset 7,-8
 167              	 .cfi_offset 14,-4
 168 0002 82B0     	 sub sp,sp,#8
 169              	.LCFI6:
 170              	 .cfi_def_cfa_offset 16
 171 0004 00AF     	 add r7,sp,#0
 172              	.LCFI7:
 173              	 .cfi_def_cfa_register 7
 174 0006 7860     	 str r0,[r7,#4]
 181:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 175              	 .loc 1 181 2
 176 0008 7B68     	 ldr r3,[r7,#4]
 177 000a 072B     	 cmp r3,#7
 178 000c 2FD8     	 bhi .L17
 179 000e 01A2     	 adr r2,.L19
 180 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 181              	 .p2align 2
 182              	.L19:
 183 0014 35000000 	 .word .L22+1
 184 0018 39000000 	 .word .L21+1
 185 001c 39000000 	 .word .L21+1
 186 0020 4B000000 	 .word .L20+1
 187 0024 4B000000 	 .word .L20+1
 188 0028 4B000000 	 .word .L20+1
 189 002c 5D000000 	 .word .L18+1
 190 0030 5D000000 	 .word .L18+1
 191              	 .p2align 1
 192              	.L22:
 182:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 183:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return 1;
 193              	 .loc 1 183 10
 194 0034 0123     	 movs r3,#1
 195 0036 1BE0     	 b .L23
 196              	.L21:
 184:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 185:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 186:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 187:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_32kxtal();
 197              	 .loc 1 187 10
 198 0038 0F4B     	 ldr r3,.L24
 199 003a 9847     	 blx r3
 200              	.LVL7:
 201 003c 0346     	 mov r3,r0
 202 003e 002B     	 cmp r3,#0
 203 0040 14BF     	 ite ne
 204 0042 0123     	 movne r3,#1
 205 0044 0023     	 moveq r3,#0
 206 0046 DBB2     	 uxtb r3,r3
 207 0048 12E0     	 b .L23
 208              	.L20:
 188:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 189:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 190:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 191:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 192:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_fastrc();
 209              	 .loc 1 192 10
 210 004a 0C4B     	 ldr r3,.L24+4
 211 004c 9847     	 blx r3
 212              	.LVL8:
 213 004e 0346     	 mov r3,r0
 214 0050 002B     	 cmp r3,#0
 215 0052 14BF     	 ite ne
 216 0054 0123     	 movne r3,#1
 217 0056 0023     	 moveq r3,#0
 218 0058 DBB2     	 uxtb r3,r3
 219 005a 09E0     	 b .L23
 220              	.L18:
 193:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 194:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 195:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 196:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_main_xtal();
 221              	 .loc 1 196 10
 222 005c 084B     	 ldr r3,.L24+8
 223 005e 9847     	 blx r3
 224              	.LVL9:
 225 0060 0346     	 mov r3,r0
 226 0062 002B     	 cmp r3,#0
 227 0064 14BF     	 ite ne
 228 0066 0123     	 movne r3,#1
 229 0068 0023     	 moveq r3,#0
 230 006a DBB2     	 uxtb r3,r3
 231 006c 00E0     	 b .L23
 232              	.L17:
 197:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 198:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 199:.././hal/sam3u1c/inc/sam3u/osc.h **** 	return 0;
 233              	 .loc 1 199 9
 234 006e 0023     	 movs r3,#0
 235              	.L23:
 200:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 236              	 .loc 1 200 1
 237 0070 1846     	 mov r0,r3
 238 0072 0837     	 adds r7,r7,#8
 239              	.LCFI8:
 240              	 .cfi_def_cfa_offset 8
 241 0074 BD46     	 mov sp,r7
 242              	.LCFI9:
 243              	 .cfi_def_cfa_register 13
 244              	 
 245 0076 80BD     	 pop {r7,pc}
 246              	.L25:
 247              	 .align 2
 248              	.L24:
 249 0078 00000000 	 .word pmc_osc_is_ready_32kxtal
 250 007c 00000000 	 .word pmc_osc_is_ready_fastrc
 251 0080 00000000 	 .word pmc_osc_is_ready_main_xtal
 252              	 .cfi_endproc
 253              	.LFE71:
 255              	 .section .text.osc_wait_ready,"ax",%progbits
 256              	 .align 1
 257              	 .syntax unified
 258              	 .thumb
 259              	 .thumb_func
 260              	 .fpu softvfp
 262              	osc_wait_ready:
 263              	.LFB73:
 264              	 .file 2 ".././hal/sam3u1c/inc/osc.h"
   1:.././hal/sam3u1c/inc/osc.h **** /**
   2:.././hal/sam3u1c/inc/osc.h ****  * \file
   3:.././hal/sam3u1c/inc/osc.h ****  *
   4:.././hal/sam3u1c/inc/osc.h ****  * \brief Oscillator management
   5:.././hal/sam3u1c/inc/osc.h ****  *
   6:.././hal/sam3u1c/inc/osc.h ****  * Copyright (c) 2010-2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/osc.h ****  *
   8:.././hal/sam3u1c/inc/osc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/osc.h ****  *
  10:.././hal/sam3u1c/inc/osc.h ****  * \page License
  11:.././hal/sam3u1c/inc/osc.h ****  *
  12:.././hal/sam3u1c/inc/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/osc.h ****  *
  15:.././hal/sam3u1c/inc/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/osc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/osc.h ****  *
  18:.././hal/sam3u1c/inc/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/osc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/osc.h ****  *
  22:.././hal/sam3u1c/inc/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/osc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/osc.h ****  *
  25:.././hal/sam3u1c/inc/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/osc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/osc.h ****  *
  28:.././hal/sam3u1c/inc/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/osc.h ****  *
  40:.././hal/sam3u1c/inc/osc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/osc.h ****  *
  42:.././hal/sam3u1c/inc/osc.h ****  */
  43:.././hal/sam3u1c/inc/osc.h **** #ifndef OSC_H_INCLUDED
  44:.././hal/sam3u1c/inc/osc.h **** #define OSC_H_INCLUDED
  45:.././hal/sam3u1c/inc/osc.h **** 
  46:.././hal/sam3u1c/inc/osc.h **** #include "parts.h"
  47:.././hal/sam3u1c/inc/osc.h **** #include "conf_clock.h"
  48:.././hal/sam3u1c/inc/osc.h **** 
  49:.././hal/sam3u1c/inc/osc.h **** #if SAM3S
  50:.././hal/sam3u1c/inc/osc.h **** # include "sam3s/osc.h"
  51:.././hal/sam3u1c/inc/osc.h **** #elif SAM3XA
  52:.././hal/sam3u1c/inc/osc.h **** # include "sam3x/osc.h"
  53:.././hal/sam3u1c/inc/osc.h **** #elif SAM3U
  54:.././hal/sam3u1c/inc/osc.h **** # include "sam3u/osc.h"
  55:.././hal/sam3u1c/inc/osc.h **** #elif SAM3N
  56:.././hal/sam3u1c/inc/osc.h **** # include "sam3n/osc.h"
  57:.././hal/sam3u1c/inc/osc.h **** #elif SAM4S
  58:.././hal/sam3u1c/inc/osc.h **** # include "sam4s/osc.h"
  59:.././hal/sam3u1c/inc/osc.h **** #elif SAM4E
  60:.././hal/sam3u1c/inc/osc.h **** # include "sam4e/osc.h"
  61:.././hal/sam3u1c/inc/osc.h **** #elif SAM4C
  62:.././hal/sam3u1c/inc/osc.h **** # include "sam4c/osc.h"
  63:.././hal/sam3u1c/inc/osc.h **** #elif SAM4CM
  64:.././hal/sam3u1c/inc/osc.h **** # include "sam4cm/osc.h"
  65:.././hal/sam3u1c/inc/osc.h **** #elif SAM4CP
  66:.././hal/sam3u1c/inc/osc.h **** # include "sam4cp/osc.h"
  67:.././hal/sam3u1c/inc/osc.h **** #elif SAM4L
  68:.././hal/sam3u1c/inc/osc.h **** # include "sam4l/osc.h"
  69:.././hal/sam3u1c/inc/osc.h **** #elif SAM4N
  70:.././hal/sam3u1c/inc/osc.h **** # include "sam4n/osc.h"
  71:.././hal/sam3u1c/inc/osc.h **** #elif SAMG
  72:.././hal/sam3u1c/inc/osc.h **** # include "samg/osc.h"
  73:.././hal/sam3u1c/inc/osc.h **** #elif (UC3A0 || UC3A1)
  74:.././hal/sam3u1c/inc/osc.h **** # include "uc3a0_a1/osc.h"
  75:.././hal/sam3u1c/inc/osc.h **** #elif UC3A3
  76:.././hal/sam3u1c/inc/osc.h **** # include "uc3a3_a4/osc.h"
  77:.././hal/sam3u1c/inc/osc.h **** #elif UC3B
  78:.././hal/sam3u1c/inc/osc.h **** # include "uc3b0_b1/osc.h"
  79:.././hal/sam3u1c/inc/osc.h **** #elif UC3C
  80:.././hal/sam3u1c/inc/osc.h **** # include "uc3c/osc.h"
  81:.././hal/sam3u1c/inc/osc.h **** #elif UC3D
  82:.././hal/sam3u1c/inc/osc.h **** # include "uc3d/osc.h"
  83:.././hal/sam3u1c/inc/osc.h **** #elif UC3L
  84:.././hal/sam3u1c/inc/osc.h **** # include "uc3l/osc.h"
  85:.././hal/sam3u1c/inc/osc.h **** #elif XMEGA
  86:.././hal/sam3u1c/inc/osc.h **** # include "xmega/osc.h"
  87:.././hal/sam3u1c/inc/osc.h **** #else
  88:.././hal/sam3u1c/inc/osc.h **** # error Unsupported chip type
  89:.././hal/sam3u1c/inc/osc.h **** #endif
  90:.././hal/sam3u1c/inc/osc.h **** 
  91:.././hal/sam3u1c/inc/osc.h **** /**
  92:.././hal/sam3u1c/inc/osc.h ****  * \ingroup clk_group
  93:.././hal/sam3u1c/inc/osc.h ****  * \defgroup osc_group Oscillator Management
  94:.././hal/sam3u1c/inc/osc.h ****  *
  95:.././hal/sam3u1c/inc/osc.h ****  * This group contains functions and definitions related to configuring
  96:.././hal/sam3u1c/inc/osc.h ****  * and enabling/disabling on-chip oscillators. Internal RC-oscillators,
  97:.././hal/sam3u1c/inc/osc.h ****  * external crystal oscillators and external clock generators are
  98:.././hal/sam3u1c/inc/osc.h ****  * supported by this module. What all of these have in common is that
  99:.././hal/sam3u1c/inc/osc.h ****  * they swing at a fixed, nominal frequency which is normally not
 100:.././hal/sam3u1c/inc/osc.h ****  * adjustable.
 101:.././hal/sam3u1c/inc/osc.h ****  *
 102:.././hal/sam3u1c/inc/osc.h ****  * \par Example: Enabling an oscillator
 103:.././hal/sam3u1c/inc/osc.h ****  *
 104:.././hal/sam3u1c/inc/osc.h ****  * The following example demonstrates how to enable the external
 105:.././hal/sam3u1c/inc/osc.h ****  * oscillator on XMEGA A and wait for it to be ready to use. The
 106:.././hal/sam3u1c/inc/osc.h ****  * oscillator identifiers are platform-specific, so while the same
 107:.././hal/sam3u1c/inc/osc.h ****  * procedure is used on all platforms, the parameter to osc_enable()
 108:.././hal/sam3u1c/inc/osc.h ****  * will be different from device to device.
 109:.././hal/sam3u1c/inc/osc.h ****  * \code
 110:.././hal/sam3u1c/inc/osc.h **** 	osc_enable(OSC_ID_XOSC);
 111:.././hal/sam3u1c/inc/osc.h **** 	osc_wait_ready(OSC_ID_XOSC); \endcode
 112:.././hal/sam3u1c/inc/osc.h ****  *
 113:.././hal/sam3u1c/inc/osc.h ****  * \section osc_group_board Board-specific Definitions
 114:.././hal/sam3u1c/inc/osc.h ****  * If external oscillators are used, the board code must provide the
 115:.././hal/sam3u1c/inc/osc.h ****  * following definitions for each of those:
 116:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_HZ: The nominal frequency of the oscillator.
 117:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_STARTUP_US: The startup time of the
 118:.././hal/sam3u1c/inc/osc.h ****  *     oscillator in microseconds.
 119:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_TYPE: The type of oscillator connected, i.e.
 120:.././hal/sam3u1c/inc/osc.h ****  *     whether it's a crystal or external clock, and sometimes what kind
 121:.././hal/sam3u1c/inc/osc.h ****  *     of crystal it is. The meaning of this value is platform-specific.
 122:.././hal/sam3u1c/inc/osc.h ****  *
 123:.././hal/sam3u1c/inc/osc.h ****  * @{
 124:.././hal/sam3u1c/inc/osc.h ****  */
 125:.././hal/sam3u1c/inc/osc.h **** 
 126:.././hal/sam3u1c/inc/osc.h **** //! \name Oscillator Management
 127:.././hal/sam3u1c/inc/osc.h **** //@{
 128:.././hal/sam3u1c/inc/osc.h **** /**
 129:.././hal/sam3u1c/inc/osc.h ****  * \fn void osc_enable(uint8_t id)
 130:.././hal/sam3u1c/inc/osc.h ****  * \brief Enable oscillator \a id
 131:.././hal/sam3u1c/inc/osc.h ****  *
 132:.././hal/sam3u1c/inc/osc.h ****  * The startup time and mode value is automatically determined based on
 133:.././hal/sam3u1c/inc/osc.h ****  * definitions in the board code.
 134:.././hal/sam3u1c/inc/osc.h ****  */
 135:.././hal/sam3u1c/inc/osc.h **** /**
 136:.././hal/sam3u1c/inc/osc.h ****  * \fn void osc_disable(uint8_t id)
 137:.././hal/sam3u1c/inc/osc.h ****  * \brief Disable oscillator \a id
 138:.././hal/sam3u1c/inc/osc.h ****  */
 139:.././hal/sam3u1c/inc/osc.h **** /**
 140:.././hal/sam3u1c/inc/osc.h ****  * \fn osc_is_ready(uint8_t id)
 141:.././hal/sam3u1c/inc/osc.h ****  * \brief Determine whether oscillator \a id is ready.
 142:.././hal/sam3u1c/inc/osc.h ****  * \retval true Oscillator \a id is running and ready to use as a clock
 143:.././hal/sam3u1c/inc/osc.h ****  * source.
 144:.././hal/sam3u1c/inc/osc.h ****  * \retval false Oscillator \a id is not running.
 145:.././hal/sam3u1c/inc/osc.h ****  */
 146:.././hal/sam3u1c/inc/osc.h **** /**
 147:.././hal/sam3u1c/inc/osc.h ****  * \fn uint32_t osc_get_rate(uint8_t id)
 148:.././hal/sam3u1c/inc/osc.h ****  * \brief Return the frequency of oscillator \a id in Hz
 149:.././hal/sam3u1c/inc/osc.h ****  */
 150:.././hal/sam3u1c/inc/osc.h **** 
 151:.././hal/sam3u1c/inc/osc.h **** #ifndef __ASSEMBLY__
 152:.././hal/sam3u1c/inc/osc.h **** 
 153:.././hal/sam3u1c/inc/osc.h **** /**
 154:.././hal/sam3u1c/inc/osc.h ****  * \brief Wait until the oscillator identified by \a id is ready
 155:.././hal/sam3u1c/inc/osc.h ****  *
 156:.././hal/sam3u1c/inc/osc.h ****  * This function will busy-wait for the oscillator identified by \a id
 157:.././hal/sam3u1c/inc/osc.h ****  * to become stable and ready to use as a clock source.
 158:.././hal/sam3u1c/inc/osc.h ****  *
 159:.././hal/sam3u1c/inc/osc.h ****  * \param id A number identifying the oscillator to wait for.
 160:.././hal/sam3u1c/inc/osc.h ****  */
 161:.././hal/sam3u1c/inc/osc.h **** static inline void osc_wait_ready(uint8_t id)
 162:.././hal/sam3u1c/inc/osc.h **** {
 265              	 .loc 2 162 1
 266              	 .cfi_startproc
 267              	 
 268              	 
 269 0000 80B5     	 push {r7,lr}
 270              	.LCFI10:
 271              	 .cfi_def_cfa_offset 8
 272              	 .cfi_offset 7,-8
 273              	 .cfi_offset 14,-4
 274 0002 82B0     	 sub sp,sp,#8
 275              	.LCFI11:
 276              	 .cfi_def_cfa_offset 16
 277 0004 00AF     	 add r7,sp,#0
 278              	.LCFI12:
 279              	 .cfi_def_cfa_register 7
 280 0006 0346     	 mov r3,r0
 281 0008 FB71     	 strb r3,[r7,#7]
 163:.././hal/sam3u1c/inc/osc.h **** 	while (!osc_is_ready(id)) {
 282              	 .loc 2 163 8
 283 000a 00BF     	 nop
 284              	.L27:
 285              	 .loc 2 163 10 discriminator 1
 286 000c FB79     	 ldrb r3,[r7,#7]
 287 000e 1846     	 mov r0,r3
 288 0010 054B     	 ldr r3,.L28
 289 0012 9847     	 blx r3
 290              	.LVL10:
 291 0014 0346     	 mov r3,r0
 292              	 .loc 2 163 9 discriminator 1
 293 0016 83F00103 	 eor r3,r3,#1
 294 001a DBB2     	 uxtb r3,r3
 295              	 .loc 2 163 8 discriminator 1
 296 001c 002B     	 cmp r3,#0
 297 001e F5D1     	 bne .L27
 164:.././hal/sam3u1c/inc/osc.h **** 		/* Do nothing */
 165:.././hal/sam3u1c/inc/osc.h **** 	}
 166:.././hal/sam3u1c/inc/osc.h **** }
 298              	 .loc 2 166 1
 299 0020 00BF     	 nop
 300 0022 0837     	 adds r7,r7,#8
 301              	.LCFI13:
 302              	 .cfi_def_cfa_offset 8
 303 0024 BD46     	 mov sp,r7
 304              	.LCFI14:
 305              	 .cfi_def_cfa_register 13
 306              	 
 307 0026 80BD     	 pop {r7,pc}
 308              	.L29:
 309              	 .align 2
 310              	.L28:
 311 0028 00000000 	 .word osc_is_ready
 312              	 .cfi_endproc
 313              	.LFE73:
 315              	 .section .text.udc_detach,"ax",%progbits
 316              	 .align 1
 317              	 .syntax unified
 318              	 .thumb
 319              	 .thumb_func
 320              	 .fpu softvfp
 322              	udc_detach:
 323              	.LFB179:
 324              	 .file 3 ".././hal/sam3u1c/inc/udc.h"
   1:.././hal/sam3u1c/inc/udc.h **** /**
   2:.././hal/sam3u1c/inc/udc.h ****  * \file
   3:.././hal/sam3u1c/inc/udc.h ****  *
   4:.././hal/sam3u1c/inc/udc.h ****  * \brief Interface of the USB Device Controller (UDC)
   5:.././hal/sam3u1c/inc/udc.h ****  *
   6:.././hal/sam3u1c/inc/udc.h ****  * Copyright (c) 2009 - 2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/udc.h ****  *
   8:.././hal/sam3u1c/inc/udc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/udc.h ****  *
  10:.././hal/sam3u1c/inc/udc.h ****  * \page License
  11:.././hal/sam3u1c/inc/udc.h ****  *
  12:.././hal/sam3u1c/inc/udc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/udc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/udc.h ****  *
  15:.././hal/sam3u1c/inc/udc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/udc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/udc.h ****  *
  18:.././hal/sam3u1c/inc/udc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/udc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/udc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/udc.h ****  *
  22:.././hal/sam3u1c/inc/udc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/udc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/udc.h ****  *
  25:.././hal/sam3u1c/inc/udc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/udc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/udc.h ****  *
  28:.././hal/sam3u1c/inc/udc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/udc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/udc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/udc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/udc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/udc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/udc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/udc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/udc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/udc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/udc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/udc.h ****  *
  40:.././hal/sam3u1c/inc/udc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/udc.h ****  *
  42:.././hal/sam3u1c/inc/udc.h ****  */
  43:.././hal/sam3u1c/inc/udc.h **** 
  44:.././hal/sam3u1c/inc/udc.h **** #ifndef _UDC_H_
  45:.././hal/sam3u1c/inc/udc.h **** #define _UDC_H_
  46:.././hal/sam3u1c/inc/udc.h **** 
  47:.././hal/sam3u1c/inc/udc.h **** #include "conf_usb.h"
  48:.././hal/sam3u1c/inc/udc.h **** #include "usb_protocol.h"
  49:.././hal/sam3u1c/inc/udc.h **** #include "udc_desc.h"
  50:.././hal/sam3u1c/inc/udc.h **** #include "udd.h"
  51:.././hal/sam3u1c/inc/udc.h **** 
  52:.././hal/sam3u1c/inc/udc.h **** #if USB_DEVICE_VENDOR_ID == 0
  53:.././hal/sam3u1c/inc/udc.h **** #   error USB_DEVICE_VENDOR_ID cannot be equal to 0
  54:.././hal/sam3u1c/inc/udc.h **** #endif
  55:.././hal/sam3u1c/inc/udc.h **** 
  56:.././hal/sam3u1c/inc/udc.h **** #if USB_DEVICE_PRODUCT_ID == 0
  57:.././hal/sam3u1c/inc/udc.h **** #   error USB_DEVICE_PRODUCT_ID cannot be equal to 0
  58:.././hal/sam3u1c/inc/udc.h **** #endif
  59:.././hal/sam3u1c/inc/udc.h **** 
  60:.././hal/sam3u1c/inc/udc.h **** #ifdef __cplusplus
  61:.././hal/sam3u1c/inc/udc.h **** extern "C" {
  62:.././hal/sam3u1c/inc/udc.h **** #endif
  63:.././hal/sam3u1c/inc/udc.h **** 
  64:.././hal/sam3u1c/inc/udc.h **** /**
  65:.././hal/sam3u1c/inc/udc.h ****  * \ingroup usb_device_group
  66:.././hal/sam3u1c/inc/udc.h ****  * \defgroup udc_group USB Device Controller (UDC)
  67:.././hal/sam3u1c/inc/udc.h ****  *
  68:.././hal/sam3u1c/inc/udc.h ****  * The UDC provides a high-level abstraction of the usb device.
  69:.././hal/sam3u1c/inc/udc.h ****  * You can use these functions to control the main device state
  70:.././hal/sam3u1c/inc/udc.h ****  * (start/attach/wakeup).
  71:.././hal/sam3u1c/inc/udc.h ****  *
  72:.././hal/sam3u1c/inc/udc.h ****  * \section USB_DEVICE_CONF USB Device Custom configuration
  73:.././hal/sam3u1c/inc/udc.h ****  * The following USB Device configuration must be included in the conf_usb.h
  74:.././hal/sam3u1c/inc/udc.h ****  * file of the application.
  75:.././hal/sam3u1c/inc/udc.h ****  *
  76:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_VENDOR_ID (Word)<br>
  77:.././hal/sam3u1c/inc/udc.h ****  * Vendor ID provided by USB org (ATMEL 0x03EB).
  78:.././hal/sam3u1c/inc/udc.h ****  *
  79:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_PRODUCT_ID (Word)<br>
  80:.././hal/sam3u1c/inc/udc.h ****  * Product ID (Referenced in usb_atmel.h).
  81:.././hal/sam3u1c/inc/udc.h ****  *
  82:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_MAJOR_VERSION (Byte)<br>
  83:.././hal/sam3u1c/inc/udc.h ****  * Major version of the device
  84:.././hal/sam3u1c/inc/udc.h ****  *
  85:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_MINOR_VERSION (Byte)<br>
  86:.././hal/sam3u1c/inc/udc.h ****  * Minor version of the device
  87:.././hal/sam3u1c/inc/udc.h ****  *
  88:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_MANUFACTURE_NAME (string)<br>
  89:.././hal/sam3u1c/inc/udc.h ****  * ASCII name for the manufacture
  90:.././hal/sam3u1c/inc/udc.h ****  *
  91:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_PRODUCT_NAME (string)<br>
  92:.././hal/sam3u1c/inc/udc.h ****  * ASCII name for the product
  93:.././hal/sam3u1c/inc/udc.h ****  *
  94:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_SERIAL_NAME (string)<br>
  95:.././hal/sam3u1c/inc/udc.h ****  * ASCII name to enable and set a serial number
  96:.././hal/sam3u1c/inc/udc.h ****  *
  97:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_POWER (Numeric)<br>
  98:.././hal/sam3u1c/inc/udc.h ****  * (unit mA) Maximum device power
  99:.././hal/sam3u1c/inc/udc.h ****  *
 100:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_ATTR (Byte)<br>
 101:.././hal/sam3u1c/inc/udc.h ****  * USB attributes available:
 102:.././hal/sam3u1c/inc/udc.h ****  *  - USB_CONFIG_ATTR_SELF_POWERED
 103:.././hal/sam3u1c/inc/udc.h ****  *  - USB_CONFIG_ATTR_REMOTE_WAKEUP
 104:.././hal/sam3u1c/inc/udc.h ****  *  Note: if remote wake enabled then defines remotewakeup callbacks,
 105:.././hal/sam3u1c/inc/udc.h ****  * see Table 5-2. External API from UDC - Callback
 106:.././hal/sam3u1c/inc/udc.h ****  *
 107:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_LOW_SPEED (Only defined)<br>
 108:.././hal/sam3u1c/inc/udc.h ****  * Force the USB Device to run in low speed
 109:.././hal/sam3u1c/inc/udc.h ****  *
 110:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_HS_SUPPORT (Only defined)<br>
 111:.././hal/sam3u1c/inc/udc.h ****  * Authorize the USB Device to run in high speed
 112:.././hal/sam3u1c/inc/udc.h ****  *
 113:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_MAX_EP (Byte)<br>
 114:.././hal/sam3u1c/inc/udc.h ****  * Define the maximum endpoint number used by the USB Device.<br>
 115:.././hal/sam3u1c/inc/udc.h ****  * This one is already defined in UDI default configuration.
 116:.././hal/sam3u1c/inc/udc.h ****  * Ex:
 117:.././hal/sam3u1c/inc/udc.h ****  * - When endpoint control 0x00, endpoint 0x01 and
 118:.././hal/sam3u1c/inc/udc.h ****  *   endpoint 0x82 is used then USB_DEVICE_MAX_EP=2
 119:.././hal/sam3u1c/inc/udc.h ****  * - When only endpoint control 0x00 is used then USB_DEVICE_MAX_EP=0
 120:.././hal/sam3u1c/inc/udc.h ****  * - When endpoint 0x01 and endpoint 0x81 is used then USB_DEVICE_MAX_EP=1<br>
 121:.././hal/sam3u1c/inc/udc.h ****  *   (configuration not possible on USBB interface)
 122:.././hal/sam3u1c/inc/udc.h ****  * @{
 123:.././hal/sam3u1c/inc/udc.h ****  */
 124:.././hal/sam3u1c/inc/udc.h **** 
 125:.././hal/sam3u1c/inc/udc.h **** /**
 126:.././hal/sam3u1c/inc/udc.h ****  * \brief Authorizes the VBUS event
 127:.././hal/sam3u1c/inc/udc.h ****  *
 128:.././hal/sam3u1c/inc/udc.h ****  * \return true, if the VBUS monitoring is possible.
 129:.././hal/sam3u1c/inc/udc.h ****  *
 130:.././hal/sam3u1c/inc/udc.h ****  * \section udc_vbus_monitoring VBus monitoring used cases
 131:.././hal/sam3u1c/inc/udc.h ****  *
 132:.././hal/sam3u1c/inc/udc.h ****  * The VBus monitoring is used only for USB SELF Power application.
 133:.././hal/sam3u1c/inc/udc.h ****  *
 134:.././hal/sam3u1c/inc/udc.h ****  * - By default the USB device is automatically attached when Vbus is high
 135:.././hal/sam3u1c/inc/udc.h ****  * or when USB is start for devices without internal Vbus monitoring.
 136:.././hal/sam3u1c/inc/udc.h ****  * conf_usb.h file does not contains define USB_DEVICE_ATTACH_AUTO_DISABLE.
 137:.././hal/sam3u1c/inc/udc.h ****  * \code //#define USB_DEVICE_ATTACH_AUTO_DISABLE \endcode
 138:.././hal/sam3u1c/inc/udc.h ****  *
 139:.././hal/sam3u1c/inc/udc.h ****  * - Add custom VBUS monitoring. conf_usb.h file contains define
 140:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_ATTACH_AUTO_DISABLE:
 141:.././hal/sam3u1c/inc/udc.h ****  * \code #define USB_DEVICE_ATTACH_AUTO_DISABLE \endcode
 142:.././hal/sam3u1c/inc/udc.h ****  * User C file contains:
 143:.././hal/sam3u1c/inc/udc.h ****  * \code  
 144:.././hal/sam3u1c/inc/udc.h **** 	// Authorize VBUS monitoring
 145:.././hal/sam3u1c/inc/udc.h **** 	if (!udc_include_vbus_monitoring()) {
 146:.././hal/sam3u1c/inc/udc.h **** 	  // Implement custom VBUS monitoring via GPIO or other
 147:.././hal/sam3u1c/inc/udc.h **** 	}
 148:.././hal/sam3u1c/inc/udc.h **** 	Event_VBUS_present() // VBUS interrupt or GPIO interrupt or other
 149:.././hal/sam3u1c/inc/udc.h **** 	{
 150:.././hal/sam3u1c/inc/udc.h **** 	  // Attach USB Device
 151:.././hal/sam3u1c/inc/udc.h **** 	  udc_attach();
 152:.././hal/sam3u1c/inc/udc.h **** 	}
 153:.././hal/sam3u1c/inc/udc.h **** \endcode
 154:.././hal/sam3u1c/inc/udc.h ****  *
 155:.././hal/sam3u1c/inc/udc.h ****  * - Case of battery charging. conf_usb.h file contains define
 156:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_ATTACH_AUTO_DISABLE:
 157:.././hal/sam3u1c/inc/udc.h ****  * \code #define USB_DEVICE_ATTACH_AUTO_DISABLE \endcode
 158:.././hal/sam3u1c/inc/udc.h ****  * User C file contains:
 159:.././hal/sam3u1c/inc/udc.h ****  * \code  
 160:.././hal/sam3u1c/inc/udc.h **** 	Event VBUS present() // VBUS interrupt or GPIO interrupt or ..
 161:.././hal/sam3u1c/inc/udc.h **** 	{
 162:.././hal/sam3u1c/inc/udc.h **** 	  // Authorize battery charging, but wait key press to start USB.
 163:.././hal/sam3u1c/inc/udc.h **** 	}
 164:.././hal/sam3u1c/inc/udc.h **** 	Event Key press()
 165:.././hal/sam3u1c/inc/udc.h **** 	{
 166:.././hal/sam3u1c/inc/udc.h **** 	  // Stop batteries charging
 167:.././hal/sam3u1c/inc/udc.h **** 	  // Start USB
 168:.././hal/sam3u1c/inc/udc.h **** 	  udc_attach();
 169:.././hal/sam3u1c/inc/udc.h **** 	}
 170:.././hal/sam3u1c/inc/udc.h **** \endcode
 171:.././hal/sam3u1c/inc/udc.h ****  */
 172:.././hal/sam3u1c/inc/udc.h **** static inline bool udc_include_vbus_monitoring(void)
 173:.././hal/sam3u1c/inc/udc.h **** {
 174:.././hal/sam3u1c/inc/udc.h **** 	return udd_include_vbus_monitoring();
 175:.././hal/sam3u1c/inc/udc.h **** }
 176:.././hal/sam3u1c/inc/udc.h **** 
 177:.././hal/sam3u1c/inc/udc.h **** /*! \brief Start the USB Device stack
 178:.././hal/sam3u1c/inc/udc.h ****  */
 179:.././hal/sam3u1c/inc/udc.h **** void udc_start(void);
 180:.././hal/sam3u1c/inc/udc.h **** 
 181:.././hal/sam3u1c/inc/udc.h **** /*! \brief Stop the USB Device stack
 182:.././hal/sam3u1c/inc/udc.h ****  */
 183:.././hal/sam3u1c/inc/udc.h **** void udc_stop(void);
 184:.././hal/sam3u1c/inc/udc.h **** 
 185:.././hal/sam3u1c/inc/udc.h **** /**
 186:.././hal/sam3u1c/inc/udc.h ****  * \brief Attach device to the bus when possible
 187:.././hal/sam3u1c/inc/udc.h ****  *
 188:.././hal/sam3u1c/inc/udc.h ****  * \warning If a VBus control is included in driver,
 189:.././hal/sam3u1c/inc/udc.h ****  * then it will attach device when an acceptable Vbus
 190:.././hal/sam3u1c/inc/udc.h ****  * level from the host is detected.
 191:.././hal/sam3u1c/inc/udc.h ****  */
 192:.././hal/sam3u1c/inc/udc.h **** static inline void udc_attach(void)
 193:.././hal/sam3u1c/inc/udc.h **** {
 194:.././hal/sam3u1c/inc/udc.h **** 	udd_attach();
 195:.././hal/sam3u1c/inc/udc.h **** }
 196:.././hal/sam3u1c/inc/udc.h **** 
 197:.././hal/sam3u1c/inc/udc.h **** 
 198:.././hal/sam3u1c/inc/udc.h **** /**
 199:.././hal/sam3u1c/inc/udc.h ****  * \brief Detaches the device from the bus
 200:.././hal/sam3u1c/inc/udc.h ****  *
 201:.././hal/sam3u1c/inc/udc.h ****  * The driver must remove pull-up on USB line D- or D+.
 202:.././hal/sam3u1c/inc/udc.h ****  */
 203:.././hal/sam3u1c/inc/udc.h **** static inline void udc_detach(void)
 204:.././hal/sam3u1c/inc/udc.h **** {
 325              	 .loc 3 204 1
 326              	 .cfi_startproc
 327              	 
 328              	 
 329 0000 80B5     	 push {r7,lr}
 330              	.LCFI15:
 331              	 .cfi_def_cfa_offset 8
 332              	 .cfi_offset 7,-8
 333              	 .cfi_offset 14,-4
 334 0002 00AF     	 add r7,sp,#0
 335              	.LCFI16:
 336              	 .cfi_def_cfa_register 7
 205:.././hal/sam3u1c/inc/udc.h **** 	udd_detach();
 337              	 .loc 3 205 2
 338 0004 014B     	 ldr r3,.L31
 339 0006 9847     	 blx r3
 340              	.LVL11:
 206:.././hal/sam3u1c/inc/udc.h **** }
 341              	 .loc 3 206 1
 342 0008 00BF     	 nop
 343 000a 80BD     	 pop {r7,pc}
 344              	.L32:
 345              	 .align 2
 346              	.L31:
 347 000c 00000000 	 .word udd_detach
 348              	 .cfi_endproc
 349              	.LFE179:
 351              	 .global g_captureinprogress
 352              	 .section .data.g_captureinprogress,"aw"
 355              	g_captureinprogress:
 356 0000 01       	 .byte 1
 357              	 .section .data.main_b_vendor_enable,"aw"
 360              	main_b_vendor_enable:
 361 0000 01       	 .byte 1
 362              	 .global USB_PWR_STATE
 363              	 .section .bss.USB_PWR_STATE,"aw",%nobits
 366              	USB_PWR_STATE:
 367 0000 00       	 .space 1
 368              	 .section .bss.main_buf_loopback,"aw",%nobits
 369              	 .align 2
 372              	main_buf_loopback:
 373 0000 00000000 	 .space 1024
 373      00000000 
 373      00000000 
 373      00000000 
 373      00000000 
 374              	 .section .text.main_suspend_action,"ax",%progbits
 375              	 .align 1
 376              	 .global main_suspend_action
 377              	 .syntax unified
 378              	 .thumb
 379              	 .thumb_func
 380              	 .fpu softvfp
 382              	main_suspend_action:
 383              	.LFB190:
 384              	 .file 4 "usb.c"
   1:usb.c         **** /*
   2:usb.c         ****   Copyright (c) 2014-2015 NewAE Technology Inc. All rights reserved.
   3:usb.c         ****   This program is free software: you can redistribute it and/or modify
   4:usb.c         ****   it under the terms of the GNU General Public License as published by
   5:usb.c         ****   the Free Software Foundation, either version 3 of the License, or
   6:usb.c         ****   (at your option) any later version.
   7:usb.c         ****   This program is distributed in the hope that it will be useful,
   8:usb.c         ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
   9:usb.c         ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  10:usb.c         ****   GNU General Public License for more details.
  11:usb.c         ****   You should have received a copy of the GNU General Public License
  12:usb.c         ****   along with this program.  If not, see <http://www.gnu.org/licenses/>.
  13:usb.c         **** */
  14:usb.c         **** 
  15:usb.c         **** #include <asf.h>
  16:usb.c         **** #include "conf_usb.h"
  17:usb.c         **** #include "stdio_serial.h"
  18:usb.c         **** #include "ui.h"
  19:usb.c         **** #include "genclk.h"
  20:usb.c         **** #include "usb.h"
  21:usb.c         **** #include "usb_xmem.h"
  22:usb.c         **** #include "fpga_program.h"
  23:usb.c         **** #include <string.h>
  24:usb.c         **** 
  25:usb.c         **** #define FW_VER_MAJOR 0
  26:usb.c         **** #define FW_VER_MINOR 10
  27:usb.c         **** #define FW_VER_DEBUG 0
  28:usb.c         **** 
  29:usb.c         **** #define REQ_MEMREAD_BULK 0x10
  30:usb.c         **** #define REQ_MEMWRITE_BULK 0x11
  31:usb.c         **** #define REQ_MEMREAD_CTRL 0x12
  32:usb.c         **** #define REQ_MEMWRITE_CTRL 0x13
  33:usb.c         **** #define REQ_MEMSTREAM 0x14
  34:usb.c         **** #define REQ_FPGA_STATUS 0x15
  35:usb.c         **** #define REQ_FPGA_PROGRAM 0x16
  36:usb.c         **** #define REQ_FW_VERSION 0x17
  37:usb.c         **** #define REQ_USART0_DATA 0x1A
  38:usb.c         **** #define REQ_USART0_CONFIG 0x1B
  39:usb.c         **** #define REQ_SCARD_DATA 0x1C
  40:usb.c         **** #define REQ_SCARD_CONFIG 0x1D
  41:usb.c         **** #define REQ_SCARD_AUX 0x1E
  42:usb.c         **** #define REQ_USART2DUMP_ENABLE 0x1F
  43:usb.c         **** #define REQ_XMEGA_PROGRAM 0x20
  44:usb.c         **** #define REQ_AVR_PROGRAM 0x21
  45:usb.c         **** #define REQ_SAM3U_CFG 0x22
  46:usb.c         **** #define REQ_CC_PROGRAM 0x23
  47:usb.c         **** #define REQ_CHANGE_PWR 0x24
  48:usb.c         **** #define REQ_FPGA_RESET 0x25
  49:usb.c         **** 
  50:usb.c         **** volatile bool g_captureinprogress = true;
  51:usb.c         **** 
  52:usb.c         **** static volatile bool main_b_vendor_enable = true;
  53:usb.c         **** 
  54:usb.c         **** uint8_t USB_PWR_STATE = 0;
  55:usb.c         **** 
  56:usb.c         **** COMPILER_WORD_ALIGNED
  57:usb.c         **** static uint8_t main_buf_loopback[MAIN_LOOPBACK_SIZE];
  58:usb.c         **** 
  59:usb.c         **** void main_vendor_bulk_in_received(udd_ep_status_t status,
  60:usb.c         ****                                   iram_size_t nb_transfered, udd_ep_id_t ep);
  61:usb.c         **** void main_vendor_bulk_out_received(udd_ep_status_t status,
  62:usb.c         ****                                    iram_size_t nb_transfered, udd_ep_id_t ep);
  63:usb.c         **** 
  64:usb.c         **** //this stuff just turns leds on and off
  65:usb.c         **** void main_suspend_action(void)
  66:usb.c         **** {
 385              	 .loc 4 66 1
 386              	 .cfi_startproc
 387              	 
 388              	 
 389              	 
 390 0000 80B4     	 push {r7}
 391              	.LCFI17:
 392              	 .cfi_def_cfa_offset 4
 393              	 .cfi_offset 7,-4
 394 0002 00AF     	 add r7,sp,#0
 395              	.LCFI18:
 396              	 .cfi_def_cfa_register 7
  67:usb.c         **** }
 397              	 .loc 4 67 1
 398 0004 00BF     	 nop
 399 0006 BD46     	 mov sp,r7
 400              	.LCFI19:
 401              	 .cfi_def_cfa_register 13
 402              	 
 403 0008 80BC     	 pop {r7}
 404              	.LCFI20:
 405              	 .cfi_restore 7
 406              	 .cfi_def_cfa_offset 0
 407 000a 7047     	 bx lr
 408              	 .cfi_endproc
 409              	.LFE190:
 411              	 .section .text.main_resume_action,"ax",%progbits
 412              	 .align 1
 413              	 .global main_resume_action
 414              	 .syntax unified
 415              	 .thumb
 416              	 .thumb_func
 417              	 .fpu softvfp
 419              	main_resume_action:
 420              	.LFB191:
  68:usb.c         **** 
  69:usb.c         **** void main_resume_action(void)
  70:usb.c         **** {
 421              	 .loc 4 70 1
 422              	 .cfi_startproc
 423              	 
 424              	 
 425              	 
 426 0000 80B4     	 push {r7}
 427              	.LCFI21:
 428              	 .cfi_def_cfa_offset 4
 429              	 .cfi_offset 7,-4
 430 0002 00AF     	 add r7,sp,#0
 431              	.LCFI22:
 432              	 .cfi_def_cfa_register 7
  71:usb.c         **** }
 433              	 .loc 4 71 1
 434 0004 00BF     	 nop
 435 0006 BD46     	 mov sp,r7
 436              	.LCFI23:
 437              	 .cfi_def_cfa_register 13
 438              	 
 439 0008 80BC     	 pop {r7}
 440              	.LCFI24:
 441              	 .cfi_restore 7
 442              	 .cfi_def_cfa_offset 0
 443 000a 7047     	 bx lr
 444              	 .cfi_endproc
 445              	.LFE191:
 447              	 .section .text.main_sof_action,"ax",%progbits
 448              	 .align 1
 449              	 .global main_sof_action
 450              	 .syntax unified
 451              	 .thumb
 452              	 .thumb_func
 453              	 .fpu softvfp
 455              	main_sof_action:
 456              	.LFB192:
  72:usb.c         **** 
  73:usb.c         **** void main_sof_action(void)
  74:usb.c         **** {
 457              	 .loc 4 74 1
 458              	 .cfi_startproc
 459              	 
 460              	 
 461              	 
 462 0000 80B4     	 push {r7}
 463              	.LCFI25:
 464              	 .cfi_def_cfa_offset 4
 465              	 .cfi_offset 7,-4
 466 0002 00AF     	 add r7,sp,#0
 467              	.LCFI26:
 468              	 .cfi_def_cfa_register 7
  75:usb.c         ****     if (!main_b_vendor_enable)
 469              	 .loc 4 75 9
 470 0004 044B     	 ldr r3,.L37
 471 0006 1B78     	 ldrb r3,[r3]
 472 0008 DBB2     	 uxtb r3,r3
 473 000a 83F00103 	 eor r3,r3,#1
 474 000e DBB2     	 uxtb r3,r3
 475              	 .loc 4 75 8
 476 0010 002B     	 cmp r3,#0
  76:usb.c         ****         return;
  77:usb.c         **** }
 477              	 .loc 4 77 1
 478 0012 BD46     	 mov sp,r7
 479              	.LCFI27:
 480              	 .cfi_def_cfa_register 13
 481              	 
 482 0014 80BC     	 pop {r7}
 483              	.LCFI28:
 484              	 .cfi_restore 7
 485              	 .cfi_def_cfa_offset 0
 486 0016 7047     	 bx lr
 487              	.L38:
 488              	 .align 2
 489              	.L37:
 490 0018 00000000 	 .word main_b_vendor_enable
 491              	 .cfi_endproc
 492              	.LFE192:
 494              	 .section .text.main_vendor_enable,"ax",%progbits
 495              	 .align 1
 496              	 .global main_vendor_enable
 497              	 .syntax unified
 498              	 .thumb
 499              	 .thumb_func
 500              	 .fpu softvfp
 502              	main_vendor_enable:
 503              	.LFB193:
  78:usb.c         **** 
  79:usb.c         **** bool main_vendor_enable(void)
  80:usb.c         **** {
 504              	 .loc 4 80 1
 505              	 .cfi_startproc
 506              	 
 507              	 
 508 0000 80B5     	 push {r7,lr}
 509              	.LCFI29:
 510              	 .cfi_def_cfa_offset 8
 511              	 .cfi_offset 7,-8
 512              	 .cfi_offset 14,-4
 513 0002 00AF     	 add r7,sp,#0
 514              	.LCFI30:
 515              	 .cfi_def_cfa_register 7
  81:usb.c         ****     main_b_vendor_enable = true;
 516              	 .loc 4 81 26
 517 0004 054B     	 ldr r3,.L41
 518 0006 0122     	 movs r2,#1
 519 0008 1A70     	 strb r2,[r3]
  82:usb.c         ****     // Start data reception on OUT endpoints
  83:usb.c         **** #if UDI_VENDOR_EPS_SIZE_BULK_FS
  84:usb.c         ****     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
  85:usb.c         ****     udi_vendor_bulk_out_run(
 520              	 .loc 4 85 5
 521 000a 054A     	 ldr r2,.L41+4
 522 000c 4FF48061 	 mov r1,#1024
 523 0010 0448     	 ldr r0,.L41+8
 524 0012 054B     	 ldr r3,.L41+12
 525 0014 9847     	 blx r3
 526              	.LVL12:
  86:usb.c         ****         main_buf_loopback,
  87:usb.c         ****         sizeof(main_buf_loopback),
  88:usb.c         ****         main_vendor_bulk_out_received);
  89:usb.c         **** #endif
  90:usb.c         ****     return true;
 527              	 .loc 4 90 12
 528 0016 0123     	 movs r3,#1
  91:usb.c         **** }
 529              	 .loc 4 91 1
 530 0018 1846     	 mov r0,r3
 531 001a 80BD     	 pop {r7,pc}
 532              	.L42:
 533              	 .align 2
 534              	.L41:
 535 001c 00000000 	 .word main_b_vendor_enable
 536 0020 00000000 	 .word main_vendor_bulk_out_received
 537 0024 00000000 	 .word main_buf_loopback
 538 0028 00000000 	 .word udi_vendor_bulk_out_run
 539              	 .cfi_endproc
 540              	.LFE193:
 542              	 .section .text.main_vendor_disable,"ax",%progbits
 543              	 .align 1
 544              	 .global main_vendor_disable
 545              	 .syntax unified
 546              	 .thumb
 547              	 .thumb_func
 548              	 .fpu softvfp
 550              	main_vendor_disable:
 551              	.LFB194:
  92:usb.c         **** 
  93:usb.c         **** void main_vendor_disable(void)
  94:usb.c         **** {
 552              	 .loc 4 94 1
 553              	 .cfi_startproc
 554              	 
 555              	 
 556              	 
 557 0000 80B4     	 push {r7}
 558              	.LCFI31:
 559              	 .cfi_def_cfa_offset 4
 560              	 .cfi_offset 7,-4
 561 0002 00AF     	 add r7,sp,#0
 562              	.LCFI32:
 563              	 .cfi_def_cfa_register 7
  95:usb.c         ****     main_b_vendor_enable = false;
 564              	 .loc 4 95 26
 565 0004 034B     	 ldr r3,.L44
 566 0006 0022     	 movs r2,#0
 567 0008 1A70     	 strb r2,[r3]
  96:usb.c         **** }
 568              	 .loc 4 96 1
 569 000a 00BF     	 nop
 570 000c BD46     	 mov sp,r7
 571              	.LCFI33:
 572              	 .cfi_def_cfa_register 13
 573              	 
 574 000e 80BC     	 pop {r7}
 575              	.LCFI34:
 576              	 .cfi_restore 7
 577              	 .cfi_def_cfa_offset 0
 578 0010 7047     	 bx lr
 579              	.L45:
 580 0012 00BF     	 .align 2
 581              	.L44:
 582 0014 00000000 	 .word main_b_vendor_enable
 583              	 .cfi_endproc
 584              	.LFE194:
 586              	 .section .bss.ctrlbuffer,"aw",%nobits
 587              	 .align 2
 590              	ctrlbuffer:
 591 0000 00000000 	 .space 64
 591      00000000 
 591      00000000 
 591      00000000 
 591      00000000 
 592              	 .section .bss.blockendpoint_usage,"aw",%nobits
 595              	blockendpoint_usage:
 596 0000 00       	 .space 1
 597              	 .section .bss.ctrlmemread_buf,"aw",%nobits
 598              	 .align 2
 601              	ctrlmemread_buf:
 602 0000 00000000 	 .space 4
 603              	 .section .bss.ctrlmemread_size,"aw",%nobits
 604              	 .align 2
 607              	ctrlmemread_size:
 608 0000 00000000 	 .space 4
 609              	 .section .text.ctrl_readmem_bulk,"ax",%progbits
 610              	 .align 1
 611              	 .global ctrl_readmem_bulk
 612              	 .syntax unified
 613              	 .thumb
 614              	 .thumb_func
 615              	 .fpu softvfp
 617              	ctrl_readmem_bulk:
 618              	.LFB195:
  97:usb.c         **** 
  98:usb.c         **** #define REQ_MEMREAD_BULK 0x10
  99:usb.c         **** #define REQ_MEMWRITE_BULK 0x11
 100:usb.c         **** #define REQ_MEMREAD_CTRL 0x12
 101:usb.c         **** #define REQ_MEMWRITE_CTRL 0x13
 102:usb.c         **** #define REQ_FW_VERSION 0x17
 103:usb.c         **** #define REQ_SAM3U_CFG 0x22
 104:usb.c         **** 
 105:usb.c         **** COMPILER_WORD_ALIGNED static uint8_t ctrlbuffer[64];
 106:usb.c         **** #define CTRLBUFFER_WORDPTR ((uint32_t *) ((void *)ctrlbuffer))
 107:usb.c         **** 
 108:usb.c         **** typedef enum {
 109:usb.c         ****     bep_emem=0,
 110:usb.c         ****     bep_fpgabitstream=10
 111:usb.c         **** } blockep_usage_t;
 112:usb.c         **** 
 113:usb.c         **** static blockep_usage_t blockendpoint_usage = bep_emem;
 114:usb.c         **** 
 115:usb.c         **** static uint8_t * ctrlmemread_buf;
 116:usb.c         **** static unsigned int ctrlmemread_size;
 117:usb.c         **** 
 118:usb.c         **** void ctrl_readmem_bulk(void);
 119:usb.c         **** void ctrl_readmem_ctrl(void);
 120:usb.c         **** void ctrl_writemem_bulk(void);
 121:usb.c         **** void ctrl_writemem_ctrl(void);
 122:usb.c         **** void ctrl_progfpga_bulk(void);
 123:usb.c         **** 
 124:usb.c         **** 
 125:usb.c         **** void ctrl_readmem_bulk(void){
 619              	 .loc 4 125 29
 620              	 .cfi_startproc
 621              	 
 622              	 
 623 0000 80B5     	 push {r7,lr}
 624              	.LCFI35:
 625              	 .cfi_def_cfa_offset 8
 626              	 .cfi_offset 7,-8
 627              	 .cfi_offset 14,-4
 628 0002 82B0     	 sub sp,sp,#8
 629              	.LCFI36:
 630              	 .cfi_def_cfa_offset 16
 631 0004 00AF     	 add r7,sp,#0
 632              	.LCFI37:
 633              	 .cfi_def_cfa_register 7
 126:usb.c         ****     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
 634              	 .loc 4 126 25
 635 0006 0F4B     	 ldr r3,.L48
 636              	 .loc 4 126 14
 637 0008 1B68     	 ldr r3,[r3]
 638 000a 7B60     	 str r3,[r7,#4]
 127:usb.c         ****     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
 639              	 .loc 4 127 14
 640 000c 0D4B     	 ldr r3,.L48
 641 000e 5B68     	 ldr r3,[r3,#4]
 642 0010 3B60     	 str r3,[r7]
 128:usb.c         **** 
 129:usb.c         ****     FPGA_releaselock();
 643              	 .loc 4 129 5
 644 0012 0D4B     	 ldr r3,.L48+4
 645 0014 9847     	 blx r3
 646              	.LVL13:
 130:usb.c         ****     while(!FPGA_setlock(fpga_blockin));
 647              	 .loc 4 130 10
 648 0016 00BF     	 nop
 649              	.L47:
 650              	 .loc 4 130 12 discriminator 1
 651 0018 0220     	 movs r0,#2
 652 001a 0C4B     	 ldr r3,.L48+8
 653 001c 9847     	 blx r3
 654              	.LVL14:
 655 001e 0346     	 mov r3,r0
 656              	 .loc 4 130 10 discriminator 1
 657 0020 002B     	 cmp r3,#0
 658 0022 F9D0     	 beq .L47
 131:usb.c         **** 
 132:usb.c         ****     FPGA_setaddr(address);
 659              	 .loc 4 132 5
 660 0024 3868     	 ldr r0,[r7]
 661 0026 0A4B     	 ldr r3,.L48+12
 662 0028 9847     	 blx r3
 663              	.LVL15:
 133:usb.c         **** 
 134:usb.c         ****     /* Do memory read */
 135:usb.c         ****     udi_vendor_bulk_in_run(
 664              	 .loc 4 135 5
 665 002a 0A4A     	 ldr r2,.L48+16
 666 002c 7968     	 ldr r1,[r7,#4]
 667 002e 4FF0C040 	 mov r0,#1610612736
 668 0032 094B     	 ldr r3,.L48+20
 669 0034 9847     	 blx r3
 670              	.LVL16:
 136:usb.c         ****         (uint8_t *) PSRAM_BASE_ADDRESS,
 137:usb.c         ****         buflen,
 138:usb.c         ****         main_vendor_bulk_in_received
 139:usb.c         ****         );
 140:usb.c         ****     FPGA_releaselock();
 671              	 .loc 4 140 5
 672 0036 044B     	 ldr r3,.L48+4
 673 0038 9847     	 blx r3
 674              	.LVL17:
 141:usb.c         **** }
 675              	 .loc 4 141 1
 676 003a 00BF     	 nop
 677 003c 0837     	 adds r7,r7,#8
 678              	.LCFI38:
 679              	 .cfi_def_cfa_offset 8
 680 003e BD46     	 mov sp,r7
 681              	.LCFI39:
 682              	 .cfi_def_cfa_register 13
 683              	 
 684 0040 80BD     	 pop {r7,pc}
 685              	.L49:
 686 0042 00BF     	 .align 2
 687              	.L48:
 688 0044 00000000 	 .word ctrlbuffer
 689 0048 00000000 	 .word FPGA_releaselock
 690 004c 00000000 	 .word FPGA_setlock
 691 0050 00000000 	 .word FPGA_setaddr
 692 0054 00000000 	 .word main_vendor_bulk_in_received
 693 0058 00000000 	 .word udi_vendor_bulk_in_run
 694              	 .cfi_endproc
 695              	.LFE195:
 697              	 .section .text.ctrl_readmem_ctrl,"ax",%progbits
 698              	 .align 1
 699              	 .global ctrl_readmem_ctrl
 700              	 .syntax unified
 701              	 .thumb
 702              	 .thumb_func
 703              	 .fpu softvfp
 705              	ctrl_readmem_ctrl:
 706              	.LFB196:
 142:usb.c         **** 
 143:usb.c         **** void ctrl_readmem_ctrl(void){
 707              	 .loc 4 143 29
 708              	 .cfi_startproc
 709              	 
 710              	 
 711 0000 80B5     	 push {r7,lr}
 712              	.LCFI40:
 713              	 .cfi_def_cfa_offset 8
 714              	 .cfi_offset 7,-8
 715              	 .cfi_offset 14,-4
 716 0002 82B0     	 sub sp,sp,#8
 717              	.LCFI41:
 718              	 .cfi_def_cfa_offset 16
 719 0004 00AF     	 add r7,sp,#0
 720              	.LCFI42:
 721              	 .cfi_def_cfa_register 7
 144:usb.c         ****     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
 722              	 .loc 4 144 25
 723 0006 0F4B     	 ldr r3,.L52
 724              	 .loc 4 144 14
 725 0008 1B68     	 ldr r3,[r3]
 726 000a 7B60     	 str r3,[r7,#4]
 145:usb.c         ****     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
 727              	 .loc 4 145 14
 728 000c 0D4B     	 ldr r3,.L52
 729 000e 5B68     	 ldr r3,[r3,#4]
 730 0010 3B60     	 str r3,[r7]
 146:usb.c         **** 
 147:usb.c         ****     FPGA_releaselock();
 731              	 .loc 4 147 5
 732 0012 0D4B     	 ldr r3,.L52+4
 733 0014 9847     	 blx r3
 734              	.LVL18:
 148:usb.c         ****     while(!FPGA_setlock(fpga_ctrlmem));
 735              	 .loc 4 148 10
 736 0016 00BF     	 nop
 737              	.L51:
 738              	 .loc 4 148 12 discriminator 1
 739 0018 0520     	 movs r0,#5
 740 001a 0C4B     	 ldr r3,.L52+8
 741 001c 9847     	 blx r3
 742              	.LVL19:
 743 001e 0346     	 mov r3,r0
 744              	 .loc 4 148 10 discriminator 1
 745 0020 002B     	 cmp r3,#0
 746 0022 F9D0     	 beq .L51
 149:usb.c         **** 
 150:usb.c         ****     /* Set address */
 151:usb.c         ****     FPGA_setaddr(address);
 747              	 .loc 4 151 5
 748 0024 3868     	 ldr r0,[r7]
 749 0026 0A4B     	 ldr r3,.L52+12
 750 0028 9847     	 blx r3
 751              	.LVL20:
 152:usb.c         **** 
 153:usb.c         ****     /* Do memory read */
 154:usb.c         ****     ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
 752              	 .loc 4 154 21
 753 002a 0A4B     	 ldr r3,.L52+16
 754 002c 4FF0C042 	 mov r2,#1610612736
 755 0030 1A60     	 str r2,[r3]
 155:usb.c         **** 
 156:usb.c         ****     /* Set size to read */
 157:usb.c         ****     ctrlmemread_size = buflen;
 756              	 .loc 4 157 22
 757 0032 094A     	 ldr r2,.L52+20
 758 0034 7B68     	 ldr r3,[r7,#4]
 759 0036 1360     	 str r3,[r2]
 158:usb.c         **** 
 159:usb.c         ****     /* Start Transaction */
 160:usb.c         ****     FPGA_releaselock();
 760              	 .loc 4 160 5
 761 0038 034B     	 ldr r3,.L52+4
 762 003a 9847     	 blx r3
 763              	.LVL21:
 161:usb.c         **** }
 764              	 .loc 4 161 1
 765 003c 00BF     	 nop
 766 003e 0837     	 adds r7,r7,#8
 767              	.LCFI43:
 768              	 .cfi_def_cfa_offset 8
 769 0040 BD46     	 mov sp,r7
 770              	.LCFI44:
 771              	 .cfi_def_cfa_register 13
 772              	 
 773 0042 80BD     	 pop {r7,pc}
 774              	.L53:
 775              	 .align 2
 776              	.L52:
 777 0044 00000000 	 .word ctrlbuffer
 778 0048 00000000 	 .word FPGA_releaselock
 779 004c 00000000 	 .word FPGA_setlock
 780 0050 00000000 	 .word FPGA_setaddr
 781 0054 00000000 	 .word ctrlmemread_buf
 782 0058 00000000 	 .word ctrlmemread_size
 783              	 .cfi_endproc
 784              	.LFE196:
 786              	 .section .text.ctrl_writemem_ctrl,"ax",%progbits
 787              	 .align 1
 788              	 .global ctrl_writemem_ctrl
 789              	 .syntax unified
 790              	 .thumb
 791              	 .thumb_func
 792              	 .fpu softvfp
 794              	ctrl_writemem_ctrl:
 795              	.LFB197:
 162:usb.c         **** 
 163:usb.c         **** 
 164:usb.c         **** void ctrl_writemem_ctrl(void){
 796              	 .loc 4 164 30
 797              	 .cfi_startproc
 798              	 
 799              	 
 800 0000 80B5     	 push {r7,lr}
 801              	.LCFI45:
 802              	 .cfi_def_cfa_offset 8
 803              	 .cfi_offset 7,-8
 804              	 .cfi_offset 14,-4
 805 0002 84B0     	 sub sp,sp,#16
 806              	.LCFI46:
 807              	 .cfi_def_cfa_offset 24
 808 0004 00AF     	 add r7,sp,#0
 809              	.LCFI47:
 810              	 .cfi_def_cfa_register 7
 165:usb.c         ****     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
 811              	 .loc 4 165 25
 812 0006 164B     	 ldr r3,.L58
 813              	 .loc 4 165 14
 814 0008 1B68     	 ldr r3,[r3]
 815 000a BB60     	 str r3,[r7,#8]
 166:usb.c         ****     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
 816              	 .loc 4 166 14
 817 000c 144B     	 ldr r3,.L58
 818 000e 5B68     	 ldr r3,[r3,#4]
 819 0010 7B60     	 str r3,[r7,#4]
 167:usb.c         **** 
 168:usb.c         ****     uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
 820              	 .loc 4 168 15
 821 0012 144B     	 ldr r3,.L58+4
 822 0014 3B60     	 str r3,[r7]
 169:usb.c         **** 
 170:usb.c         ****     //printf("Writing to %x, %d\n", address, buflen);
 171:usb.c         **** 
 172:usb.c         ****     FPGA_releaselock();
 823              	 .loc 4 172 5
 824 0016 144B     	 ldr r3,.L58+8
 825 0018 9847     	 blx r3
 826              	.LVL22:
 173:usb.c         ****     while(!FPGA_setlock(fpga_generic));
 827              	 .loc 4 173 10
 828 001a 00BF     	 nop
 829              	.L55:
 830              	 .loc 4 173 12 discriminator 1
 831 001c 0120     	 movs r0,#1
 832 001e 134B     	 ldr r3,.L58+12
 833 0020 9847     	 blx r3
 834              	.LVL23:
 835 0022 0346     	 mov r3,r0
 836              	 .loc 4 173 10 discriminator 1
 837 0024 002B     	 cmp r3,#0
 838 0026 F9D0     	 beq .L55
 174:usb.c         **** 
 175:usb.c         ****     /* Set address */
 176:usb.c         ****     FPGA_setaddr(address);
 839              	 .loc 4 176 5
 840 0028 7868     	 ldr r0,[r7,#4]
 841 002a 114B     	 ldr r3,.L58+16
 842 002c 9847     	 blx r3
 843              	.LVL24:
 844              	.LBB2:
 177:usb.c         **** 
 178:usb.c         ****     /* Start Transaction */
 179:usb.c         **** 
 180:usb.c         ****     /* Do memory write */
 181:usb.c         ****     for(unsigned int i = 0; i < buflen; i++){
 845              	 .loc 4 181 22
 846 002e 0023     	 movs r3,#0
 847 0030 FB60     	 str r3,[r7,#12]
 848              	 .loc 4 181 5
 849 0032 0BE0     	 b .L56
 850              	.L57:
 182:usb.c         ****         xram[i] = ctrlbuf_payload[i];
 851              	 .loc 4 182 34 discriminator 3
 852 0034 3A68     	 ldr r2,[r7]
 853 0036 FB68     	 ldr r3,[r7,#12]
 854 0038 1A44     	 add r2,r2,r3
 855              	 .loc 4 182 13 discriminator 3
 856 003a 0E4B     	 ldr r3,.L58+20
 857 003c 1968     	 ldr r1,[r3]
 858 003e FB68     	 ldr r3,[r7,#12]
 859 0040 0B44     	 add r3,r3,r1
 860              	 .loc 4 182 34 discriminator 3
 861 0042 1278     	 ldrb r2,[r2]
 862              	 .loc 4 182 17 discriminator 3
 863 0044 1A70     	 strb r2,[r3]
 181:usb.c         ****         xram[i] = ctrlbuf_payload[i];
 864              	 .loc 4 181 42 discriminator 3
 865 0046 FB68     	 ldr r3,[r7,#12]
 866 0048 0133     	 adds r3,r3,#1
 867 004a FB60     	 str r3,[r7,#12]
 868              	.L56:
 181:usb.c         ****         xram[i] = ctrlbuf_payload[i];
 869              	 .loc 4 181 5 discriminator 1
 870 004c FA68     	 ldr r2,[r7,#12]
 871 004e BB68     	 ldr r3,[r7,#8]
 872 0050 9A42     	 cmp r2,r3
 873 0052 EFD3     	 bcc .L57
 874              	.LBE2:
 183:usb.c         ****     }
 184:usb.c         **** 
 185:usb.c         ****     FPGA_releaselock();
 875              	 .loc 4 185 5
 876 0054 044B     	 ldr r3,.L58+8
 877 0056 9847     	 blx r3
 878              	.LVL25:
 186:usb.c         **** }
 879              	 .loc 4 186 1
 880 0058 00BF     	 nop
 881 005a 1037     	 adds r7,r7,#16
 882              	.LCFI48:
 883              	 .cfi_def_cfa_offset 8
 884 005c BD46     	 mov sp,r7
 885              	.LCFI49:
 886              	 .cfi_def_cfa_register 13
 887              	 
 888 005e 80BD     	 pop {r7,pc}
 889              	.L59:
 890              	 .align 2
 891              	.L58:
 892 0060 00000000 	 .word ctrlbuffer
 893 0064 08000000 	 .word ctrlbuffer+8
 894 0068 00000000 	 .word FPGA_releaselock
 895 006c 00000000 	 .word FPGA_setlock
 896 0070 00000000 	 .word FPGA_setaddr
 897 0074 00000000 	 .word xram
 898              	 .cfi_endproc
 899              	.LFE197:
 901              	 .section .bss.bulkread_address,"aw",%nobits
 902              	 .align 2
 905              	bulkread_address:
 906 0000 00000000 	 .space 4
 907              	 .section .bss.bulkread_len,"aw",%nobits
 908              	 .align 2
 911              	bulkread_len:
 912 0000 00000000 	 .space 4
 913              	 .section .text.ctrl_writemem_bulk,"ax",%progbits
 914              	 .align 1
 915              	 .global ctrl_writemem_bulk
 916              	 .syntax unified
 917              	 .thumb
 918              	 .thumb_func
 919              	 .fpu softvfp
 921              	ctrl_writemem_bulk:
 922              	.LFB198:
 187:usb.c         **** 
 188:usb.c         **** static uint32_t bulkread_address = 0;
 189:usb.c         **** static uint32_t bulkread_len = 0;
 190:usb.c         **** 
 191:usb.c         **** void ctrl_writemem_bulk(void){
 923              	 .loc 4 191 30
 924              	 .cfi_startproc
 925              	 
 926              	 
 927 0000 80B5     	 push {r7,lr}
 928              	.LCFI50:
 929              	 .cfi_def_cfa_offset 8
 930              	 .cfi_offset 7,-8
 931              	 .cfi_offset 14,-4
 932 0002 82B0     	 sub sp,sp,#8
 933              	.LCFI51:
 934              	 .cfi_def_cfa_offset 16
 935 0004 00AF     	 add r7,sp,#0
 936              	.LCFI52:
 937              	 .cfi_def_cfa_register 7
 192:usb.c         **** //uint32_t buflen = *(CTRLBUFFER_WORDPTR);
 193:usb.c         ****     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
 938              	 .loc 4 193 14
 939 0006 0A4B     	 ldr r3,.L62
 940 0008 5B68     	 ldr r3,[r3,#4]
 941 000a 7B60     	 str r3,[r7,#4]
 194:usb.c         **** 
 195:usb.c         ****     // TODO: see block in
 196:usb.c         ****     FPGA_releaselock();
 942              	 .loc 4 196 5
 943 000c 094B     	 ldr r3,.L62+4
 944 000e 9847     	 blx r3
 945              	.LVL26:
 197:usb.c         ****     while(!FPGA_setlock(fpga_blockout));
 946              	 .loc 4 197 10
 947 0010 00BF     	 nop
 948              	.L61:
 949              	 .loc 4 197 12 discriminator 1
 950 0012 0420     	 movs r0,#4
 951 0014 084B     	 ldr r3,.L62+8
 952 0016 9847     	 blx r3
 953              	.LVL27:
 954 0018 0346     	 mov r3,r0
 955              	 .loc 4 197 10 discriminator 1
 956 001a 002B     	 cmp r3,#0
 957 001c F9D0     	 beq .L61
 198:usb.c         **** 
 199:usb.c         ****     /* Set address */
 200:usb.c         ****     FPGA_setaddr(address);
 958              	 .loc 4 200 5
 959 001e 7868     	 ldr r0,[r7,#4]
 960 0020 064B     	 ldr r3,.L62+12
 961 0022 9847     	 blx r3
 962              	.LVL28:
 201:usb.c         **** 
 202:usb.c         ****     /* Transaction done in generic callback */
 203:usb.c         ****     FPGA_releaselock();
 963              	 .loc 4 203 5
 964 0024 034B     	 ldr r3,.L62+4
 965 0026 9847     	 blx r3
 966              	.LVL29:
 204:usb.c         **** }
 967              	 .loc 4 204 1
 968 0028 00BF     	 nop
 969 002a 0837     	 adds r7,r7,#8
 970              	.LCFI53:
 971              	 .cfi_def_cfa_offset 8
 972 002c BD46     	 mov sp,r7
 973              	.LCFI54:
 974              	 .cfi_def_cfa_register 13
 975              	 
 976 002e 80BD     	 pop {r7,pc}
 977              	.L63:
 978              	 .align 2
 979              	.L62:
 980 0030 00000000 	 .word ctrlbuffer
 981 0034 00000000 	 .word FPGA_releaselock
 982 0038 00000000 	 .word FPGA_setlock
 983 003c 00000000 	 .word FPGA_setaddr
 984              	 .cfi_endproc
 985              	.LFE198:
 987              	 .section .text.ctrl_sam3ucfg_cb,"ax",%progbits
 988              	 .align 1
 989              	 .syntax unified
 990              	 .thumb
 991              	 .thumb_func
 992              	 .fpu softvfp
 994              	ctrl_sam3ucfg_cb:
 995              	.LFB199:
 205:usb.c         **** 
 206:usb.c         **** static void ctrl_sam3ucfg_cb(void)
 207:usb.c         **** {
 996              	 .loc 4 207 1
 997              	 .cfi_startproc
 998              	 
 999              	 
 1000 0000 80B5     	 push {r7,lr}
 1001              	.LCFI55:
 1002              	 .cfi_def_cfa_offset 8
 1003              	 .cfi_offset 7,-8
 1004              	 .cfi_offset 14,-4
 1005 0002 00AF     	 add r7,sp,#0
 1006              	.LCFI56:
 1007              	 .cfi_def_cfa_register 7
 208:usb.c         ****     switch(udd_g_ctrlreq.req.wValue & 0xFF)
 1008              	 .loc 4 208 29
 1009 0004 184B     	 ldr r3,.L72
 1010 0006 5B88     	 ldrh r3,[r3,#2]
 1011              	 .loc 4 208 37
 1012 0008 DBB2     	 uxtb r3,r3
 1013              	 .loc 4 208 5
 1014 000a 022B     	 cmp r3,#2
 1015 000c 0DD0     	 beq .L65
 1016 000e 032B     	 cmp r3,#3
 1017 0010 0FD0     	 beq .L66
 1018 0012 012B     	 cmp r3,#1
 1019 0014 24D1     	 bne .L71
 209:usb.c         ****     {
 210:usb.c         ****         /* Turn on slow clock */
 211:usb.c         ****     case 0x01:
 212:usb.c         ****         osc_enable(OSC_MAINCK_XTAL);
 1020              	 .loc 4 212 9
 1021 0016 0620     	 movs r0,#6
 1022 0018 144B     	 ldr r3,.L72+4
 1023 001a 9847     	 blx r3
 1024              	.LVL30:
 213:usb.c         ****         osc_wait_ready(OSC_MAINCK_XTAL);
 1025              	 .loc 4 213 9
 1026 001c 0620     	 movs r0,#6
 1027 001e 144B     	 ldr r3,.L72+8
 1028 0020 9847     	 blx r3
 1029              	.LVL31:
 214:usb.c         ****         pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
 1030              	 .loc 4 214 9
 1031 0022 1020     	 movs r0,#16
 1032 0024 134B     	 ldr r3,.L72+12
 1033 0026 9847     	 blx r3
 1034              	.LVL32:
 215:usb.c         ****         break;
 1035              	 .loc 4 215 9
 1036 0028 1BE0     	 b .L68
 1037              	.L65:
 216:usb.c         **** 
 217:usb.c         ****         /* Turn off slow clock */
 218:usb.c         ****     case 0x02:
 219:usb.c         ****         pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
 1038              	 .loc 4 219 9
 1039 002a 1020     	 movs r0,#16
 1040 002c 124B     	 ldr r3,.L72+16
 1041 002e 9847     	 blx r3
 1042              	.LVL33:
 220:usb.c         ****         break;
 1043              	 .loc 4 220 9
 1044 0030 17E0     	 b .L68
 1045              	.L66:
 221:usb.c         **** 
 222:usb.c         ****         /* Jump to ROM-resident bootloader */
 223:usb.c         ****     case 0x03:
 224:usb.c         ****         /* Turn off connected stuff */
 225:usb.c         ****         //board_power(0);
 226:usb.c         **** 
 227:usb.c         ****         /* Clear ROM-mapping bit. */
 228:usb.c         ****         efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
 1046              	 .loc 4 228 9
 1047 0032 0122     	 movs r2,#1
 1048 0034 0C21     	 movs r1,#12
 1049 0036 1148     	 ldr r0,.L72+20
 1050 0038 114B     	 ldr r3,.L72+24
 1051 003a 9847     	 blx r3
 1052              	.LVL34:
 229:usb.c         **** 
 230:usb.c         ****         /* Disconnect USB (will kill connection) */
 231:usb.c         ****         udc_detach();
 1053              	 .loc 4 231 9
 1054 003c 114B     	 ldr r3,.L72+28
 1055 003e 9847     	 blx r3
 1056              	.LVL35:
 232:usb.c         **** 
 233:usb.c         ****         /* With knowledge that I will rise again, I lay down my life. */
 234:usb.c         ****         while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
 1057              	 .loc 4 234 15
 1058 0040 00BF     	 nop
 1059              	.L69:
 1060              	 .loc 4 234 20 discriminator 1
 1061 0042 114B     	 ldr r3,.L72+32
 1062 0044 5B68     	 ldr r3,[r3,#4]
 1063              	 .loc 4 234 30 discriminator 1
 1064 0046 03F40033 	 and r3,r3,#131072
 1065              	 .loc 4 234 15 discriminator 1
 1066 004a 002B     	 cmp r3,#0
 1067 004c F9D1     	 bne .L69
 235:usb.c         ****         RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
 1068              	 .loc 4 235 23
 1069 004e 0E4B     	 ldr r3,.L72+32
 1070 0050 1B68     	 ldr r3,[r3]
 1071 0052 0D4A     	 ldr r2,.L72+32
 1072 0054 43F02543 	 orr r3,r3,#-1526726656
 1073 0058 43F00503 	 orr r3,r3,#5
 1074 005c 1360     	 str r3,[r2]
 1075              	.L70:
 236:usb.c         ****         while(1);
 1076              	 .loc 4 236 14 discriminator 1
 1077 005e FEE7     	 b .L70
 1078              	.L71:
 237:usb.c         ****         break;
 238:usb.c         ****         /* Disconnect USB (will kill stuff) */
 239:usb.c         **** 
 240:usb.c         ****         /* Make the jump */
 241:usb.c         ****         break;
 242:usb.c         **** 
 243:usb.c         ****         /* Oh well, sucks to be you */
 244:usb.c         ****     default:
 245:usb.c         ****         break;
 1079              	 .loc 4 245 9
 1080 0060 00BF     	 nop
 1081              	.L68:
 246:usb.c         ****     }
 247:usb.c         **** }
 1082              	 .loc 4 247 1
 1083 0062 00BF     	 nop
 1084 0064 80BD     	 pop {r7,pc}
 1085              	.L73:
 1086 0066 00BF     	 .align 2
 1087              	.L72:
 1088 0068 00000000 	 .word udd_g_ctrlreq
 1089 006c 00000000 	 .word osc_enable
 1090 0070 00000000 	 .word osc_wait_ready
 1091 0074 00000000 	 .word pmc_switch_mck_to_mainck
 1092 0078 00000000 	 .word pmc_switch_mck_to_pllack
 1093 007c 00080E40 	 .word 1074661376
 1094 0080 00000000 	 .word efc_perform_command
 1095 0084 00000000 	 .word udc_detach
 1096 0088 00120E40 	 .word 1074663936
 1097              	 .cfi_endproc
 1098              	.LFE199:
 1100              	 .section .text.ctrl_progfpga_bulk,"ax",%progbits
 1101              	 .align 1
 1102              	 .global ctrl_progfpga_bulk
 1103              	 .syntax unified
 1104              	 .thumb
 1105              	 .thumb_func
 1106              	 .fpu softvfp
 1108              	ctrl_progfpga_bulk:
 1109              	.LFB200:
 248:usb.c         **** 
 249:usb.c         **** void ctrl_progfpga_bulk(void){
 1110              	 .loc 4 249 30
 1111              	 .cfi_startproc
 1112              	 
 1113              	 
 1114 0000 80B5     	 push {r7,lr}
 1115              	.LCFI57:
 1116              	 .cfi_def_cfa_offset 8
 1117              	 .cfi_offset 7,-8
 1118              	 .cfi_offset 14,-4
 1119 0002 00AF     	 add r7,sp,#0
 1120              	.LCFI58:
 1121              	 .cfi_def_cfa_register 7
 250:usb.c         **** 
 251:usb.c         ****     switch(udd_g_ctrlreq.req.wValue){
 1122              	 .loc 4 251 29
 1123 0004 0B4B     	 ldr r3,.L80
 1124 0006 5B88     	 ldrh r3,[r3,#2]
 1125              	 .loc 4 251 5
 1126 0008 A12B     	 cmp r3,#161
 1127 000a 06D0     	 beq .L75
 1128 000c A22B     	 cmp r3,#162
 1129 000e 0AD0     	 beq .L76
 1130 0010 A02B     	 cmp r3,#160
 1131 0012 0CD1     	 bne .L79
 252:usb.c         ****     case 0xA0:
 253:usb.c         ****         fpga_program_setup1();
 1132              	 .loc 4 253 9
 1133 0014 084B     	 ldr r3,.L80+4
 1134 0016 9847     	 blx r3
 1135              	.LVL36:
 254:usb.c         ****         break;
 1136              	 .loc 4 254 9
 1137 0018 0AE0     	 b .L78
 1138              	.L75:
 255:usb.c         **** 
 256:usb.c         ****     case 0xA1:
 257:usb.c         ****         /* Waiting on data... */
 258:usb.c         ****         fpga_program_setup2();
 1139              	 .loc 4 258 9
 1140 001a 084B     	 ldr r3,.L80+8
 1141 001c 9847     	 blx r3
 1142              	.LVL37:
 259:usb.c         ****         blockendpoint_usage = bep_fpgabitstream;
 1143              	 .loc 4 259 29
 1144 001e 084B     	 ldr r3,.L80+12
 1145 0020 0A22     	 movs r2,#10
 1146 0022 1A70     	 strb r2,[r3]
 260:usb.c         ****         break;
 1147              	 .loc 4 260 9
 1148 0024 04E0     	 b .L78
 1149              	.L76:
 261:usb.c         **** 
 262:usb.c         ****     case 0xA2:
 263:usb.c         ****         /* Done */
 264:usb.c         ****         blockendpoint_usage = bep_emem;
 1150              	 .loc 4 264 29
 1151 0026 064B     	 ldr r3,.L80+12
 1152 0028 0022     	 movs r2,#0
 1153 002a 1A70     	 strb r2,[r3]
 265:usb.c         ****         break;
 1154              	 .loc 4 265 9
 1155 002c 00E0     	 b .L78
 1156              	.L79:
 266:usb.c         **** 
 267:usb.c         ****     default:
 268:usb.c         ****         break;
 1157              	 .loc 4 268 9
 1158 002e 00BF     	 nop
 1159              	.L78:
 269:usb.c         ****     }
 270:usb.c         **** }
 1160              	 .loc 4 270 1
 1161 0030 00BF     	 nop
 1162 0032 80BD     	 pop {r7,pc}
 1163              	.L81:
 1164              	 .align 2
 1165              	.L80:
 1166 0034 00000000 	 .word udd_g_ctrlreq
 1167 0038 00000000 	 .word fpga_program_setup1
 1168 003c 00000000 	 .word fpga_program_setup2
 1169 0040 00000000 	 .word blockendpoint_usage
 1170              	 .cfi_endproc
 1171              	.LFE200:
 1173              	 .section .text.ctrl_change_pwr,"ax",%progbits
 1174              	 .align 1
 1175              	 .global ctrl_change_pwr
 1176              	 .syntax unified
 1177              	 .thumb
 1178              	 .thumb_func
 1179              	 .fpu softvfp
 1181              	ctrl_change_pwr:
 1182              	.LFB201:
 271:usb.c         **** 
 272:usb.c         **** void ctrl_change_pwr(void) {
 1183              	 .loc 4 272 28
 1184              	 .cfi_startproc
 1185              	 
 1186              	 
 1187              	 
 1188 0000 80B4     	 push {r7}
 1189              	.LCFI59:
 1190              	 .cfi_def_cfa_offset 4
 1191              	 .cfi_offset 7,-4
 1192 0002 00AF     	 add r7,sp,#0
 1193              	.LCFI60:
 1194              	 .cfi_def_cfa_register 7
 273:usb.c         ****     switch(udd_g_ctrlreq.req.wValue) {
 1195              	 .loc 4 273 29
 1196 0004 174B     	 ldr r3,.L87
 1197 0006 5B88     	 ldrh r3,[r3,#2]
 1198              	 .loc 4 273 5
 1199 0008 012B     	 cmp r3,#1
 1200 000a 0FD0     	 beq .L83
 1201 000c 022B     	 cmp r3,#2
 1202 000e 19D0     	 beq .L84
 1203 0010 002B     	 cmp r3,#0
 1204 0012 23D1     	 bne .L86
 274:usb.c         ****     case 0x00: //USB power off
 275:usb.c         ****         PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
 1205              	 .loc 4 275 13
 1206 0014 144B     	 ldr r3,.L87+4
 1207              	 .loc 4 275 24
 1208 0016 4FF00072 	 mov r2,#33554432
 1209 001a 5A63     	 str r2,[r3,#52]
 276:usb.c         ****         PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
 1210              	 .loc 4 276 13
 1211 001c 124B     	 ldr r3,.L87+4
 1212              	 .loc 4 276 24
 1213 001e 4FF08062 	 mov r2,#67108864
 1214 0022 5A63     	 str r2,[r3,#52]
 277:usb.c         ****         USB_PWR_STATE = 0;
 1215              	 .loc 4 277 23
 1216 0024 114B     	 ldr r3,.L87+8
 1217 0026 0022     	 movs r2,#0
 1218 0028 1A70     	 strb r2,[r3]
 278:usb.c         ****         break;
 1219              	 .loc 4 278 9
 1220 002a 17E0     	 b .L85
 1221              	.L83:
 279:usb.c         ****     case 0x01: //Use 5V power
 280:usb.c         ****         PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
 1222              	 .loc 4 280 13
 1223 002c 0E4B     	 ldr r3,.L87+4
 1224              	 .loc 4 280 24
 1225 002e 4FF00072 	 mov r2,#33554432
 1226 0032 5A63     	 str r2,[r3,#52]
 281:usb.c         ****         PIOA->PIO_SODR = (1 << F_VB5V); //enable host power
 1227              	 .loc 4 281 13
 1228 0034 0C4B     	 ldr r3,.L87+4
 1229              	 .loc 4 281 24
 1230 0036 4FF08062 	 mov r2,#67108864
 1231 003a 1A63     	 str r2,[r3,#48]
 282:usb.c         ****         USB_PWR_STATE = 1;
 1232              	 .loc 4 282 23
 1233 003c 0B4B     	 ldr r3,.L87+8
 1234 003e 0122     	 movs r2,#1
 1235 0040 1A70     	 strb r2,[r3]
 283:usb.c         ****         break;
 1236              	 .loc 4 283 9
 1237 0042 0BE0     	 b .L85
 1238              	.L84:
 284:usb.c         ****     case 0x02: //Use host power
 285:usb.c         ****         PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
 1239              	 .loc 4 285 13
 1240 0044 084B     	 ldr r3,.L87+4
 1241              	 .loc 4 285 24
 1242 0046 4FF08062 	 mov r2,#67108864
 1243 004a 5A63     	 str r2,[r3,#52]
 286:usb.c         ****         PIOA->PIO_SODR = (1 << F_VBHOST); //enable sniff power
 1244              	 .loc 4 286 13
 1245 004c 064B     	 ldr r3,.L87+4
 1246              	 .loc 4 286 24
 1247 004e 4FF00072 	 mov r2,#33554432
 1248 0052 1A63     	 str r2,[r3,#48]
 287:usb.c         ****         USB_PWR_STATE = 2;
 1249              	 .loc 4 287 23
 1250 0054 054B     	 ldr r3,.L87+8
 1251 0056 0222     	 movs r2,#2
 1252 0058 1A70     	 strb r2,[r3]
 288:usb.c         ****         break;
 1253              	 .loc 4 288 9
 1254 005a 00BF     	 nop
 1255              	.L85:
 1256              	.L86:
 289:usb.c         ****     }
 290:usb.c         **** }
 1257              	 .loc 4 290 1
 1258 005c 00BF     	 nop
 1259 005e BD46     	 mov sp,r7
 1260              	.LCFI61:
 1261              	 .cfi_def_cfa_register 13
 1262              	 
 1263 0060 80BC     	 pop {r7}
 1264              	.LCFI62:
 1265              	 .cfi_restore 7
 1266              	 .cfi_def_cfa_offset 0
 1267 0062 7047     	 bx lr
 1268              	.L88:
 1269              	 .align 2
 1270              	.L87:
 1271 0064 00000000 	 .word udd_g_ctrlreq
 1272 0068 000C0E40 	 .word 1074662400
 1273 006c 00000000 	 .word USB_PWR_STATE
 1274              	 .cfi_endproc
 1275              	.LFE201:
 1277              	 .section .text.ctrl_fpga_reset,"ax",%progbits
 1278              	 .align 1
 1279              	 .global ctrl_fpga_reset
 1280              	 .syntax unified
 1281              	 .thumb
 1282              	 .thumb_func
 1283              	 .fpu softvfp
 1285              	ctrl_fpga_reset:
 1286              	.LFB202:
 291:usb.c         **** 
 292:usb.c         **** void ctrl_fpga_reset(void) {
 1287              	 .loc 4 292 28
 1288              	 .cfi_startproc
 1289              	 
 1290              	 
 1291 0000 80B5     	 push {r7,lr}
 1292              	.LCFI63:
 1293              	 .cfi_def_cfa_offset 8
 1294              	 .cfi_offset 7,-8
 1295              	 .cfi_offset 14,-4
 1296 0002 00AF     	 add r7,sp,#0
 1297              	.LCFI64:
 1298              	 .cfi_def_cfa_register 7
 293:usb.c         ****   gpio_set_pin_high(PIN_EBI_USB_SPARE0);
 1299              	 .loc 4 293 3
 1300 0004 2620     	 movs r0,#38
 1301 0006 034B     	 ldr r3,.L90
 1302 0008 9847     	 blx r3
 1303              	.LVL38:
 294:usb.c         ****   gpio_set_pin_low(PIN_EBI_USB_SPARE0);
 1304              	 .loc 4 294 3
 1305 000a 2620     	 movs r0,#38
 1306 000c 024B     	 ldr r3,.L90+4
 1307 000e 9847     	 blx r3
 1308              	.LVL39:
 295:usb.c         **** }
 1309              	 .loc 4 295 1
 1310 0010 00BF     	 nop
 1311 0012 80BD     	 pop {r7,pc}
 1312              	.L91:
 1313              	 .align 2
 1314              	.L90:
 1315 0014 00000000 	 .word pio_set_pin_high
 1316 0018 00000000 	 .word pio_set_pin_low
 1317              	 .cfi_endproc
 1318              	.LFE202:
 1320              	 .section .text.main_setup_out_received,"ax",%progbits
 1321              	 .align 1
 1322              	 .global main_setup_out_received
 1323              	 .syntax unified
 1324              	 .thumb
 1325              	 .thumb_func
 1326              	 .fpu softvfp
 1328              	main_setup_out_received:
 1329              	.LFB203:
 296:usb.c         **** 
 297:usb.c         **** 
 298:usb.c         **** bool main_setup_out_received(void)
 299:usb.c         **** {
 1330              	 .loc 4 299 1
 1331              	 .cfi_startproc
 1332              	 
 1333              	 
 1334 0000 80B5     	 push {r7,lr}
 1335              	.LCFI65:
 1336              	 .cfi_def_cfa_offset 8
 1337              	 .cfi_offset 7,-8
 1338              	 .cfi_offset 14,-4
 1339 0002 00AF     	 add r7,sp,#0
 1340              	.LCFI66:
 1341              	 .cfi_def_cfa_register 7
 300:usb.c         ****     //Add buffer if used
 301:usb.c         ****     udd_g_ctrlreq.payload = ctrlbuffer;
 1342              	 .loc 4 301 27
 1343 0004 464B     	 ldr r3,.L113
 1344 0006 474A     	 ldr r2,.L113+4
 1345 0008 9A60     	 str r2,[r3,#8]
 302:usb.c         ****     udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
 1346              	 .loc 4 302 34
 1347 000a 454B     	 ldr r3,.L113
 1348 000c DB88     	 ldrh r3,[r3,#6]
 1349 000e 402B     	 cmp r3,#64
 1350 0010 28BF     	 it cs
 1351 0012 4023     	 movcs r3,#64
 1352 0014 9AB2     	 uxth r2,r3
 1353              	 .loc 4 302 32
 1354 0016 424B     	 ldr r3,.L113
 1355 0018 9A81     	 strh r2,[r3,#12]
 303:usb.c         **** 
 304:usb.c         ****     blockendpoint_usage = bep_emem;
 1356              	 .loc 4 304 25
 1357 001a 434B     	 ldr r3,.L113+8
 1358 001c 0022     	 movs r2,#0
 1359 001e 1A70     	 strb r2,[r3]
 305:usb.c         ****     static uint8_t  respbuf[128];
 306:usb.c         ****     switch(udd_g_ctrlreq.req.bRequest){
 1360              	 .loc 4 306 29
 1361 0020 3F4B     	 ldr r3,.L113
 1362 0022 5B78     	 ldrb r3,[r3,#1]
 1363              	 .loc 4 306 5
 1364 0024 103B     	 subs r3,r3,#16
 1365 0026 152B     	 cmp r3,#21
 1366 0028 6ED8     	 bhi .L93
 1367 002a 01A2     	 adr r2,.L95
 1368 002c 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1369              	 .p2align 2
 1370              	.L95:
 1371 0030 89000000 	 .word .L102+1
 1372 0034 B5000000 	 .word .L101+1
 1373 0038 9F000000 	 .word .L100+1
 1374 003c CB000000 	 .word .L99+1
 1375 0040 09010000 	 .word .L93+1
 1376 0044 09010000 	 .word .L93+1
 1377 0048 E1000000 	 .word .L98+1
 1378 004c 09010000 	 .word .L93+1
 1379 0050 09010000 	 .word .L93+1
 1380 0054 09010000 	 .word .L93+1
 1381 0058 09010000 	 .word .L93+1
 1382 005c 09010000 	 .word .L93+1
 1383 0060 09010000 	 .word .L93+1
 1384 0064 09010000 	 .word .L93+1
 1385 0068 09010000 	 .word .L93+1
 1386 006c 09010000 	 .word .L93+1
 1387 0070 09010000 	 .word .L93+1
 1388 0074 09010000 	 .word .L93+1
 1389 0078 EB000000 	 .word .L97+1
 1390 007c 09010000 	 .word .L93+1
 1391 0080 F5000000 	 .word .L96+1
 1392 0084 FF000000 	 .word .L94+1
 1393              	 .p2align 1
 1394              	.L102:
 307:usb.c         ****         /* Memory Read */
 308:usb.c         ****     case REQ_MEMREAD_BULK:
 309:usb.c         ****         if (FPGA_setlock(fpga_usblocked)){
 1395              	 .loc 4 309 13
 1396 0088 0620     	 movs r0,#6
 1397 008a 284B     	 ldr r3,.L113+12
 1398 008c 9847     	 blx r3
 1399              	.LVL40:
 1400 008e 0346     	 mov r3,r0
 1401              	 .loc 4 309 12
 1402 0090 002B     	 cmp r3,#0
 1403 0092 3BD0     	 beq .L109
 310:usb.c         ****             udd_g_ctrlreq.callback = ctrl_readmem_bulk;
 1404              	 .loc 4 310 36
 1405 0094 224B     	 ldr r3,.L113
 1406 0096 264A     	 ldr r2,.L113+16
 1407 0098 1A61     	 str r2,[r3,#16]
 311:usb.c         ****             return true;
 1408              	 .loc 4 311 20
 1409 009a 0123     	 movs r3,#1
 1410 009c 3EE0     	 b .L104
 1411              	.L100:
 312:usb.c         ****         }
 313:usb.c         ****         break;
 314:usb.c         ****     case REQ_MEMREAD_CTRL:
 315:usb.c         ****         if (FPGA_setlock(fpga_usblocked)){
 1412              	 .loc 4 315 13
 1413 009e 0620     	 movs r0,#6
 1414 00a0 224B     	 ldr r3,.L113+12
 1415 00a2 9847     	 blx r3
 1416              	.LVL41:
 1417 00a4 0346     	 mov r3,r0
 1418              	 .loc 4 315 12
 1419 00a6 002B     	 cmp r3,#0
 1420 00a8 32D0     	 beq .L110
 316:usb.c         ****             udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
 1421              	 .loc 4 316 36
 1422 00aa 1D4B     	 ldr r3,.L113
 1423 00ac 214A     	 ldr r2,.L113+20
 1424 00ae 1A61     	 str r2,[r3,#16]
 317:usb.c         ****             return true;
 1425              	 .loc 4 317 20
 1426 00b0 0123     	 movs r3,#1
 1427 00b2 33E0     	 b .L104
 1428              	.L101:
 318:usb.c         ****         }
 319:usb.c         ****         break;
 320:usb.c         **** 
 321:usb.c         **** 
 322:usb.c         ****         /* Memory Write */
 323:usb.c         ****     case REQ_MEMWRITE_BULK:
 324:usb.c         ****         if (FPGA_setlock(fpga_usblocked)){
 1429              	 .loc 4 324 13
 1430 00b4 0620     	 movs r0,#6
 1431 00b6 1D4B     	 ldr r3,.L113+12
 1432 00b8 9847     	 blx r3
 1433              	.LVL42:
 1434 00ba 0346     	 mov r3,r0
 1435              	 .loc 4 324 12
 1436 00bc 002B     	 cmp r3,#0
 1437 00be 29D0     	 beq .L111
 325:usb.c         ****             udd_g_ctrlreq.callback = ctrl_writemem_bulk;
 1438              	 .loc 4 325 36
 1439 00c0 174B     	 ldr r3,.L113
 1440 00c2 1D4A     	 ldr r2,.L113+24
 1441 00c4 1A61     	 str r2,[r3,#16]
 326:usb.c         ****             return true;
 1442              	 .loc 4 326 20
 1443 00c6 0123     	 movs r3,#1
 1444 00c8 28E0     	 b .L104
 1445              	.L99:
 327:usb.c         ****         }
 328:usb.c         ****         break;
 329:usb.c         **** 
 330:usb.c         **** 
 331:usb.c         ****     case REQ_MEMWRITE_CTRL:
 332:usb.c         ****         if (FPGA_setlock(fpga_usblocked)){
 1446              	 .loc 4 332 13
 1447 00ca 0620     	 movs r0,#6
 1448 00cc 174B     	 ldr r3,.L113+12
 1449 00ce 9847     	 blx r3
 1450              	.LVL43:
 1451 00d0 0346     	 mov r3,r0
 1452              	 .loc 4 332 12
 1453 00d2 002B     	 cmp r3,#0
 1454 00d4 20D0     	 beq .L112
 333:usb.c         ****             udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
 1455              	 .loc 4 333 36
 1456 00d6 124B     	 ldr r3,.L113
 1457 00d8 184A     	 ldr r2,.L113+28
 1458 00da 1A61     	 str r2,[r3,#16]
 334:usb.c         ****             return true;
 1459              	 .loc 4 334 20
 1460 00dc 0123     	 movs r3,#1
 1461 00de 1DE0     	 b .L104
 1462              	.L98:
 335:usb.c         ****         }
 336:usb.c         ****         break;
 337:usb.c         **** 
 338:usb.c         ****     case REQ_FPGA_PROGRAM:
 339:usb.c         ****         udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
 1463              	 .loc 4 339 32
 1464 00e0 0F4B     	 ldr r3,.L113
 1465 00e2 174A     	 ldr r2,.L113+32
 1466 00e4 1A61     	 str r2,[r3,#16]
 340:usb.c         ****         return true;
 1467              	 .loc 4 340 16
 1468 00e6 0123     	 movs r3,#1
 1469 00e8 18E0     	 b .L104
 1470              	.L97:
 341:usb.c         **** 
 342:usb.c         ****     case REQ_SAM3U_CFG:
 343:usb.c         ****         udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
 1471              	 .loc 4 343 32
 1472 00ea 0D4B     	 ldr r3,.L113
 1473 00ec 154A     	 ldr r2,.L113+36
 1474 00ee 1A61     	 str r2,[r3,#16]
 344:usb.c         ****         return true;
 1475              	 .loc 4 344 16
 1476 00f0 0123     	 movs r3,#1
 1477 00f2 13E0     	 b .L104
 1478              	.L96:
 345:usb.c         **** 
 346:usb.c         ****     case REQ_CHANGE_PWR:
 347:usb.c         ****         //TODO
 348:usb.c         ****         udd_g_ctrlreq.callback = ctrl_change_pwr;
 1479              	 .loc 4 348 32
 1480 00f4 0A4B     	 ldr r3,.L113
 1481 00f6 144A     	 ldr r2,.L113+40
 1482 00f8 1A61     	 str r2,[r3,#16]
 349:usb.c         ****         return true;
 1483              	 .loc 4 349 16
 1484 00fa 0123     	 movs r3,#1
 1485 00fc 0EE0     	 b .L104
 1486              	.L94:
 350:usb.c         **** 
 351:usb.c         ****     case REQ_FPGA_RESET:
 352:usb.c         ****         udd_g_ctrlreq.callback = ctrl_fpga_reset;
 1487              	 .loc 4 352 32
 1488 00fe 084B     	 ldr r3,.L113
 1489 0100 124A     	 ldr r2,.L113+44
 1490 0102 1A61     	 str r2,[r3,#16]
 353:usb.c         ****         return true;
 1491              	 .loc 4 353 16
 1492 0104 0123     	 movs r3,#1
 1493 0106 09E0     	 b .L104
 1494              	.L93:
 354:usb.c         **** 
 355:usb.c         ****     default:
 356:usb.c         ****         return false;
 1495              	 .loc 4 356 16
 1496 0108 0023     	 movs r3,#0
 1497 010a 07E0     	 b .L104
 1498              	.L109:
 313:usb.c         ****     case REQ_MEMREAD_CTRL:
 1499              	 .loc 4 313 9
 1500 010c 00BF     	 nop
 1501 010e 04E0     	 b .L105
 1502              	.L110:
 319:usb.c         **** 
 1503              	 .loc 4 319 9
 1504 0110 00BF     	 nop
 1505 0112 02E0     	 b .L105
 1506              	.L111:
 328:usb.c         **** 
 1507              	 .loc 4 328 9
 1508 0114 00BF     	 nop
 1509 0116 00E0     	 b .L105
 1510              	.L112:
 336:usb.c         **** 
 1511              	 .loc 4 336 9
 1512 0118 00BF     	 nop
 1513              	.L105:
 357:usb.c         ****     }
 358:usb.c         **** 
 359:usb.c         ****     return false;
 1514              	 .loc 4 359 12
 1515 011a 0023     	 movs r3,#0
 1516              	.L104:
 360:usb.c         **** }
 1517              	 .loc 4 360 1
 1518 011c 1846     	 mov r0,r3
 1519 011e 80BD     	 pop {r7,pc}
 1520              	.L114:
 1521              	 .align 2
 1522              	.L113:
 1523 0120 00000000 	 .word udd_g_ctrlreq
 1524 0124 00000000 	 .word ctrlbuffer
 1525 0128 00000000 	 .word blockendpoint_usage
 1526 012c 00000000 	 .word FPGA_setlock
 1527 0130 00000000 	 .word ctrl_readmem_bulk
 1528 0134 00000000 	 .word ctrl_readmem_ctrl
 1529 0138 00000000 	 .word ctrl_writemem_bulk
 1530 013c 00000000 	 .word ctrl_writemem_ctrl
 1531 0140 00000000 	 .word ctrl_progfpga_bulk
 1532 0144 00000000 	 .word ctrl_sam3ucfg_cb
 1533 0148 00000000 	 .word ctrl_change_pwr
 1534 014c 00000000 	 .word ctrl_fpga_reset
 1535              	 .cfi_endproc
 1536              	.LFE203:
 1538              	 .section .text.main_setup_in_received,"ax",%progbits
 1539              	 .align 1
 1540              	 .global main_setup_in_received
 1541              	 .syntax unified
 1542              	 .thumb
 1543              	 .thumb_func
 1544              	 .fpu softvfp
 1546              	main_setup_in_received:
 1547              	.LFB204:
 361:usb.c         **** 
 362:usb.c         **** 
 363:usb.c         **** /*
 364:usb.c         ****   udd_g_ctrlreq.req.bRequest == 0
 365:usb.c         ****   && (udd_g_ctrlreq.req.bRequest == 0)
 366:usb.c         ****   && (0 != udd_g_ctrlreq.req.wLength)
 367:usb.c         **** */
 368:usb.c         **** 
 369:usb.c         **** bool main_setup_in_received(void)
 370:usb.c         **** {
 1548              	 .loc 4 370 1
 1549              	 .cfi_startproc
 1550              	 
 1551              	 
 1552 0000 80B5     	 push {r7,lr}
 1553              	.LCFI67:
 1554              	 .cfi_def_cfa_offset 8
 1555              	 .cfi_offset 7,-8
 1556              	 .cfi_offset 14,-4
 1557 0002 00AF     	 add r7,sp,#0
 1558              	.LCFI68:
 1559              	 .cfi_def_cfa_register 7
 371:usb.c         ****     /*
 372:usb.c         ****       udd_g_ctrlreq.payload = main_buf_loopback;
 373:usb.c         ****       udd_g_ctrlreq.payload_size =
 374:usb.c         ****       min( udd_g_ctrlreq.req.wLength,
 375:usb.c         ****       sizeof(main_buf_loopback) );
 376:usb.c         ****     */
 377:usb.c         **** 
 378:usb.c         ****     static uint8_t  respbuf[64];
 379:usb.c         ****     unsigned int cnt;
 380:usb.c         **** 
 381:usb.c         ****     switch(udd_g_ctrlreq.req.bRequest){
 1560              	 .loc 4 381 29
 1561 0004 274B     	 ldr r3,.L121
 1562 0006 5B78     	 ldrb r3,[r3,#1]
 1563              	 .loc 4 381 5
 1564 0008 152B     	 cmp r3,#21
 1565 000a 2AD0     	 beq .L116
 1566 000c 172B     	 cmp r3,#23
 1567 000e 17D0     	 beq .L117
 1568 0010 122B     	 cmp r3,#18
 1569 0012 43D1     	 bne .L118
 382:usb.c         ****     case REQ_MEMREAD_CTRL:
 383:usb.c         ****         udd_g_ctrlreq.payload = ctrlmemread_buf;
 1570              	 .loc 4 383 31
 1571 0014 244B     	 ldr r3,.L121+4
 1572 0016 1B68     	 ldr r3,[r3]
 1573 0018 224A     	 ldr r2,.L121
 1574 001a 9360     	 str r3,[r2,#8]
 384:usb.c         ****         udd_g_ctrlreq.payload_size = ctrlmemread_size;
 1575              	 .loc 4 384 36
 1576 001c 234B     	 ldr r3,.L121+8
 1577 001e 1B68     	 ldr r3,[r3]
 1578 0020 9AB2     	 uxth r2,r3
 1579 0022 204B     	 ldr r3,.L121
 1580 0024 9A81     	 strh r2,[r3,#12]
 385:usb.c         ****         ctrlmemread_size = 0;
 1581              	 .loc 4 385 26
 1582 0026 214B     	 ldr r3,.L121+8
 1583 0028 0022     	 movs r2,#0
 1584 002a 1A60     	 str r2,[r3]
 386:usb.c         **** 
 387:usb.c         ****         if (FPGA_lockstatus() == fpga_ctrlmem){
 1585              	 .loc 4 387 13
 1586 002c 204B     	 ldr r3,.L121+12
 1587 002e 9847     	 blx r3
 1588              	.LVL44:
 1589 0030 0346     	 mov r3,r0
 1590              	 .loc 4 387 12
 1591 0032 052B     	 cmp r3,#5
 1592 0034 02D1     	 bne .L119
 388:usb.c         ****             FPGA_setlock(fpga_unlocked);
 1593              	 .loc 4 388 13
 1594 0036 0020     	 movs r0,#0
 1595 0038 1E4B     	 ldr r3,.L121+16
 1596 003a 9847     	 blx r3
 1597              	.LVL45:
 1598              	.L119:
 389:usb.c         ****         }
 390:usb.c         **** 
 391:usb.c         ****         return true;
 1599              	 .loc 4 391 16
 1600 003c 0123     	 movs r3,#1
 1601 003e 2EE0     	 b .L120
 1602              	.L117:
 392:usb.c         ****         break;
 393:usb.c         **** 
 394:usb.c         ****     case REQ_FW_VERSION:
 395:usb.c         ****         respbuf[0] = FW_VER_MAJOR;
 1603              	 .loc 4 395 20
 1604 0040 1D4B     	 ldr r3,.L121+20
 1605 0042 0022     	 movs r2,#0
 1606 0044 1A70     	 strb r2,[r3]
 396:usb.c         ****         respbuf[1] = FW_VER_MINOR;
 1607              	 .loc 4 396 20
 1608 0046 1C4B     	 ldr r3,.L121+20
 1609 0048 0A22     	 movs r2,#10
 1610 004a 5A70     	 strb r2,[r3,#1]
 397:usb.c         ****         respbuf[2] = FW_VER_DEBUG;
 1611              	 .loc 4 397 20
 1612 004c 1A4B     	 ldr r3,.L121+20
 1613 004e 0022     	 movs r2,#0
 1614 0050 9A70     	 strb r2,[r3,#2]
 398:usb.c         ****         udd_g_ctrlreq.payload = respbuf;
 1615              	 .loc 4 398 31
 1616 0052 144B     	 ldr r3,.L121
 1617 0054 184A     	 ldr r2,.L121+20
 1618 0056 9A60     	 str r2,[r3,#8]
 399:usb.c         ****         udd_g_ctrlreq.payload_size = 3;
 1619              	 .loc 4 399 36
 1620 0058 124B     	 ldr r3,.L121
 1621 005a 0322     	 movs r2,#3
 1622 005c 9A81     	 strh r2,[r3,#12]
 400:usb.c         ****         return true;
 1623              	 .loc 4 400 16
 1624 005e 0123     	 movs r3,#1
 1625 0060 1DE0     	 b .L120
 1626              	.L116:
 401:usb.c         ****         break;
 402:usb.c         **** 
 403:usb.c         ****     case REQ_FPGA_STATUS:
 404:usb.c         ****         respbuf[0] = FPGA_ISDONE();
 1627              	 .loc 4 404 22
 1628 0062 1320     	 movs r0,#19
 1629 0064 154B     	 ldr r3,.L121+24
 1630 0066 9847     	 blx r3
 1631              	.LVL46:
 1632 0068 0346     	 mov r3,r0
 1633 006a 002B     	 cmp r3,#0
 1634 006c 14BF     	 ite ne
 1635 006e 0123     	 movne r3,#1
 1636 0070 0023     	 moveq r3,#0
 1637 0072 DBB2     	 uxtb r3,r3
 1638 0074 1A46     	 mov r2,r3
 1639              	 .loc 4 404 20
 1640 0076 104B     	 ldr r3,.L121+20
 1641 0078 1A70     	 strb r2,[r3]
 405:usb.c         ****         respbuf[1] = 0;
 1642              	 .loc 4 405 20
 1643 007a 0F4B     	 ldr r3,.L121+20
 1644 007c 0022     	 movs r2,#0
 1645 007e 5A70     	 strb r2,[r3,#1]
 406:usb.c         ****         respbuf[2] = 0;
 1646              	 .loc 4 406 20
 1647 0080 0D4B     	 ldr r3,.L121+20
 1648 0082 0022     	 movs r2,#0
 1649 0084 9A70     	 strb r2,[r3,#2]
 407:usb.c         ****         respbuf[3] = 0;
 1650              	 .loc 4 407 20
 1651 0086 0C4B     	 ldr r3,.L121+20
 1652 0088 0022     	 movs r2,#0
 1653 008a DA70     	 strb r2,[r3,#3]
 408:usb.c         ****         udd_g_ctrlreq.payload = respbuf;
 1654              	 .loc 4 408 31
 1655 008c 054B     	 ldr r3,.L121
 1656 008e 0A4A     	 ldr r2,.L121+20
 1657 0090 9A60     	 str r2,[r3,#8]
 409:usb.c         ****         udd_g_ctrlreq.payload_size = 4;
 1658              	 .loc 4 409 36
 1659 0092 044B     	 ldr r3,.L121
 1660 0094 0422     	 movs r2,#4
 1661 0096 9A81     	 strh r2,[r3,#12]
 410:usb.c         ****         return true;
 1662              	 .loc 4 410 16
 1663 0098 0123     	 movs r3,#1
 1664 009a 00E0     	 b .L120
 1665              	.L118:
 411:usb.c         ****         break;
 412:usb.c         ****     default:
 413:usb.c         ****         return false;
 1666              	 .loc 4 413 16
 1667 009c 0023     	 movs r3,#0
 1668              	.L120:
 414:usb.c         ****     }
 415:usb.c         ****     return false;
 416:usb.c         **** }
 1669              	 .loc 4 416 1
 1670 009e 1846     	 mov r0,r3
 1671 00a0 80BD     	 pop {r7,pc}
 1672              	.L122:
 1673 00a2 00BF     	 .align 2
 1674              	.L121:
 1675 00a4 00000000 	 .word udd_g_ctrlreq
 1676 00a8 00000000 	 .word ctrlmemread_buf
 1677 00ac 00000000 	 .word ctrlmemread_size
 1678 00b0 00000000 	 .word FPGA_lockstatus
 1679 00b4 00000000 	 .word FPGA_setlock
 1680 00b8 00000000 	 .word respbuf.9327
 1681 00bc 00000000 	 .word pio_get_pin_value
 1682              	 .cfi_endproc
 1683              	.LFE204:
 1685              	 .section .text.main_vendor_bulk_in_received,"ax",%progbits
 1686              	 .align 1
 1687              	 .global main_vendor_bulk_in_received
 1688              	 .syntax unified
 1689              	 .thumb
 1690              	 .thumb_func
 1691              	 .fpu softvfp
 1693              	main_vendor_bulk_in_received:
 1694              	.LFB205:
 417:usb.c         **** 
 418:usb.c         **** void main_vendor_bulk_in_received(udd_ep_status_t status,
 419:usb.c         ****                                   iram_size_t nb_transfered, udd_ep_id_t ep)
 420:usb.c         **** {
 1695              	 .loc 4 420 1
 1696              	 .cfi_startproc
 1697              	 
 1698              	 
 1699 0000 80B5     	 push {r7,lr}
 1700              	.LCFI69:
 1701              	 .cfi_def_cfa_offset 8
 1702              	 .cfi_offset 7,-8
 1703              	 .cfi_offset 14,-4
 1704 0002 82B0     	 sub sp,sp,#8
 1705              	.LCFI70:
 1706              	 .cfi_def_cfa_offset 16
 1707 0004 00AF     	 add r7,sp,#0
 1708              	.LCFI71:
 1709              	 .cfi_def_cfa_register 7
 1710 0006 0346     	 mov r3,r0
 1711 0008 3960     	 str r1,[r7]
 1712 000a FB71     	 strb r3,[r7,#7]
 1713 000c 1346     	 mov r3,r2
 1714 000e BB71     	 strb r3,[r7,#6]
 421:usb.c         ****     UNUSED(nb_transfered);
 422:usb.c         ****     UNUSED(ep);
 423:usb.c         ****     if (UDD_EP_TRANSFER_OK != status) {
 1715              	 .loc 4 423 8
 1716 0010 FB79     	 ldrb r3,[r7,#7]
 1717 0012 002B     	 cmp r3,#0
 1718 0014 08D1     	 bne .L126
 424:usb.c         ****         return; // Transfer aborted/error
 425:usb.c         ****     }
 426:usb.c         **** 
 427:usb.c         ****     if (FPGA_lockstatus() == fpga_blockin){
 1719              	 .loc 4 427 9
 1720 0016 064B     	 ldr r3,.L127
 1721 0018 9847     	 blx r3
 1722              	.LVL47:
 1723 001a 0346     	 mov r3,r0
 1724              	 .loc 4 427 8
 1725 001c 022B     	 cmp r3,#2
 1726 001e 04D1     	 bne .L123
 428:usb.c         ****         FPGA_setlock(fpga_unlocked);
 1727              	 .loc 4 428 9
 1728 0020 0020     	 movs r0,#0
 1729 0022 044B     	 ldr r3,.L127+4
 1730 0024 9847     	 blx r3
 1731              	.LVL48:
 1732 0026 00E0     	 b .L123
 1733              	.L126:
 424:usb.c         ****         return; // Transfer aborted/error
 1734              	 .loc 4 424 9
 1735 0028 00BF     	 nop
 1736              	.L123:
 429:usb.c         ****     }
 430:usb.c         **** }
 1737              	 .loc 4 430 1
 1738 002a 0837     	 adds r7,r7,#8
 1739              	.LCFI72:
 1740              	 .cfi_def_cfa_offset 8
 1741 002c BD46     	 mov sp,r7
 1742              	.LCFI73:
 1743              	 .cfi_def_cfa_register 13
 1744              	 
 1745 002e 80BD     	 pop {r7,pc}
 1746              	.L128:
 1747              	 .align 2
 1748              	.L127:
 1749 0030 00000000 	 .word FPGA_lockstatus
 1750 0034 00000000 	 .word FPGA_setlock
 1751              	 .cfi_endproc
 1752              	.LFE205:
 1754              	 .section .text.main_vendor_bulk_out_received,"ax",%progbits
 1755              	 .align 1
 1756              	 .global main_vendor_bulk_out_received
 1757              	 .syntax unified
 1758              	 .thumb
 1759              	 .thumb_func
 1760              	 .fpu softvfp
 1762              	main_vendor_bulk_out_received:
 1763              	.LFB206:
 431:usb.c         **** 
 432:usb.c         **** void main_vendor_bulk_out_received(udd_ep_status_t status,
 433:usb.c         ****                                    iram_size_t nb_transfered, udd_ep_id_t ep)
 434:usb.c         **** {
 1764              	 .loc 4 434 1
 1765              	 .cfi_startproc
 1766              	 
 1767              	 
 1768 0000 80B5     	 push {r7,lr}
 1769              	.LCFI74:
 1770              	 .cfi_def_cfa_offset 8
 1771              	 .cfi_offset 7,-8
 1772              	 .cfi_offset 14,-4
 1773 0002 84B0     	 sub sp,sp,#16
 1774              	.LCFI75:
 1775              	 .cfi_def_cfa_offset 24
 1776 0004 00AF     	 add r7,sp,#0
 1777              	.LCFI76:
 1778              	 .cfi_def_cfa_register 7
 1779 0006 0346     	 mov r3,r0
 1780 0008 3960     	 str r1,[r7]
 1781 000a FB71     	 strb r3,[r7,#7]
 1782 000c 1346     	 mov r3,r2
 1783 000e BB71     	 strb r3,[r7,#6]
 435:usb.c         ****     UNUSED(ep);
 436:usb.c         ****     if (UDD_EP_TRANSFER_OK != status) {
 1784              	 .loc 4 436 8
 1785 0010 FB79     	 ldrb r3,[r7,#7]
 1786 0012 002B     	 cmp r3,#0
 1787 0014 06D0     	 beq .L130
 437:usb.c         ****         // Transfer aborted
 438:usb.c         **** 
 439:usb.c         ****         //restart
 440:usb.c         ****         udi_vendor_bulk_out_run(
 1788              	 .loc 4 440 9
 1789 0016 224A     	 ldr r2,.L139
 1790 0018 4FF48061 	 mov r1,#1024
 1791 001c 2148     	 ldr r0,.L139+4
 1792 001e 224B     	 ldr r3,.L139+8
 1793 0020 9847     	 blx r3
 1794              	.LVL49:
 441:usb.c         ****             main_buf_loopback,
 442:usb.c         ****             sizeof(main_buf_loopback),
 443:usb.c         ****             main_vendor_bulk_out_received);
 444:usb.c         **** 
 445:usb.c         ****         return;
 1795              	 .loc 4 445 9
 1796 0022 39E0     	 b .L129
 1797              	.L130:
 446:usb.c         ****     }
 447:usb.c         **** 
 448:usb.c         ****     if (blockendpoint_usage == bep_emem){
 1798              	 .loc 4 448 29
 1799 0024 214B     	 ldr r3,.L139+12
 1800 0026 1B78     	 ldrb r3,[r3]
 1801              	 .loc 4 448 8
 1802 0028 002B     	 cmp r3,#0
 1803 002a 1AD1     	 bne .L132
 1804              	.LBB3:
 449:usb.c         ****         for(unsigned int i = 0; i < nb_transfered; i++){
 1805              	 .loc 4 449 26
 1806 002c 0023     	 movs r3,#0
 1807 002e FB60     	 str r3,[r7,#12]
 1808              	 .loc 4 449 9
 1809 0030 0BE0     	 b .L133
 1810              	.L134:
 450:usb.c         ****             xram[i] = main_buf_loopback[i];
 1811              	 .loc 4 450 17 discriminator 3
 1812 0032 1F4B     	 ldr r3,.L139+16
 1813 0034 1A68     	 ldr r2,[r3]
 1814 0036 FB68     	 ldr r3,[r7,#12]
 1815 0038 1344     	 add r3,r3,r2
 1816              	 .loc 4 450 40 discriminator 3
 1817 003a 1A49     	 ldr r1,.L139+4
 1818 003c FA68     	 ldr r2,[r7,#12]
 1819 003e 0A44     	 add r2,r2,r1
 1820 0040 1278     	 ldrb r2,[r2]
 1821              	 .loc 4 450 21 discriminator 3
 1822 0042 1A70     	 strb r2,[r3]
 449:usb.c         ****         for(unsigned int i = 0; i < nb_transfered; i++){
 1823              	 .loc 4 449 53 discriminator 3
 1824 0044 FB68     	 ldr r3,[r7,#12]
 1825 0046 0133     	 adds r3,r3,#1
 1826 0048 FB60     	 str r3,[r7,#12]
 1827              	.L133:
 449:usb.c         ****         for(unsigned int i = 0; i < nb_transfered; i++){
 1828              	 .loc 4 449 9 discriminator 1
 1829 004a FA68     	 ldr r2,[r7,#12]
 1830 004c 3B68     	 ldr r3,[r7]
 1831 004e 9A42     	 cmp r2,r3
 1832 0050 EFD3     	 bcc .L134
 1833              	.LBE3:
 451:usb.c         ****         }
 452:usb.c         **** 
 453:usb.c         ****         if (FPGA_lockstatus() == fpga_blockout){
 1834              	 .loc 4 453 13
 1835 0052 184B     	 ldr r3,.L139+20
 1836 0054 9847     	 blx r3
 1837              	.LVL50:
 1838 0056 0346     	 mov r3,r0
 1839              	 .loc 4 453 12
 1840 0058 042B     	 cmp r3,#4
 1841 005a 17D1     	 bne .L136
 454:usb.c         ****             FPGA_releaselock();
 1842              	 .loc 4 454 13
 1843 005c 164B     	 ldr r3,.L139+24
 1844 005e 9847     	 blx r3
 1845              	.LVL51:
 1846 0060 14E0     	 b .L136
 1847              	.L132:
 455:usb.c         ****         }
 456:usb.c         ****     } else if (blockendpoint_usage == bep_fpgabitstream){
 1848              	 .loc 4 456 36
 1849 0062 124B     	 ldr r3,.L139+12
 1850 0064 1B78     	 ldrb r3,[r3]
 1851              	 .loc 4 456 15
 1852 0066 0A2B     	 cmp r3,#10
 1853 0068 10D1     	 bne .L136
 1854              	.LBB4:
 457:usb.c         **** 
 458:usb.c         ****         /* Send byte to FPGA - this could eventually be done via SPI */
 459:usb.c         ****         // TODO: is this dangerous?
 460:usb.c         ****         for(unsigned int i = 0; i < nb_transfered; i++){
 1855              	 .loc 4 460 26
 1856 006a 0023     	 movs r3,#0
 1857 006c BB60     	 str r3,[r7,#8]
 1858              	 .loc 4 460 9
 1859 006e 09E0     	 b .L137
 1860              	.L138:
 461:usb.c         ****             fpga_program_sendbyte(main_buf_loopback[i]);
 1861              	 .loc 4 461 13 discriminator 3
 1862 0070 0C4A     	 ldr r2,.L139+4
 1863 0072 BB68     	 ldr r3,[r7,#8]
 1864 0074 1344     	 add r3,r3,r2
 1865 0076 1B78     	 ldrb r3,[r3]
 1866 0078 1846     	 mov r0,r3
 1867 007a 104B     	 ldr r3,.L139+28
 1868 007c 9847     	 blx r3
 1869              	.LVL52:
 460:usb.c         ****             fpga_program_sendbyte(main_buf_loopback[i]);
 1870              	 .loc 4 460 53 discriminator 3
 1871 007e BB68     	 ldr r3,[r7,#8]
 1872 0080 0133     	 adds r3,r3,#1
 1873 0082 BB60     	 str r3,[r7,#8]
 1874              	.L137:
 460:usb.c         ****             fpga_program_sendbyte(main_buf_loopback[i]);
 1875              	 .loc 4 460 9 discriminator 1
 1876 0084 BA68     	 ldr r2,[r7,#8]
 1877 0086 3B68     	 ldr r3,[r7]
 1878 0088 9A42     	 cmp r2,r3
 1879 008a F1D3     	 bcc .L138
 1880              	.L136:
 1881              	.LBE4:
 462:usb.c         ****         }
 463:usb.c         **** #if FPGA_USE_BITBANG
 464:usb.c         ****         FPGA_CCLK_LOW();
 465:usb.c         **** #endif
 466:usb.c         ****     }
 467:usb.c         **** 
 468:usb.c         ****     //printf("BULKOUT: %d bytes\n", (int)nb_transfered);
 469:usb.c         **** 
 470:usb.c         ****     udi_vendor_bulk_out_run(
 1882              	 .loc 4 470 5
 1883 008c 044A     	 ldr r2,.L139
 1884 008e 4FF48061 	 mov r1,#1024
 1885 0092 0448     	 ldr r0,.L139+4
 1886 0094 044B     	 ldr r3,.L139+8
 1887 0096 9847     	 blx r3
 1888              	.LVL53:
 1889              	.L129:
 471:usb.c         ****         main_buf_loopback,
 472:usb.c         ****         sizeof(main_buf_loopback),
 473:usb.c         ****         main_vendor_bulk_out_received);
 474:usb.c         **** }
 1890              	 .loc 4 474 1
 1891 0098 1037     	 adds r7,r7,#16
 1892              	.LCFI77:
 1893              	 .cfi_def_cfa_offset 8
 1894 009a BD46     	 mov sp,r7
 1895              	.LCFI78:
 1896              	 .cfi_def_cfa_register 13
 1897              	 
 1898 009c 80BD     	 pop {r7,pc}
 1899              	.L140:
 1900 009e 00BF     	 .align 2
 1901              	.L139:
 1902 00a0 00000000 	 .word main_vendor_bulk_out_received
 1903 00a4 00000000 	 .word main_buf_loopback
 1904 00a8 00000000 	 .word udi_vendor_bulk_out_run
 1905 00ac 00000000 	 .word blockendpoint_usage
 1906 00b0 00000000 	 .word xram
 1907 00b4 00000000 	 .word FPGA_lockstatus
 1908 00b8 00000000 	 .word FPGA_releaselock
 1909 00bc 00000000 	 .word fpga_program_sendbyte
 1910              	 .cfi_endproc
 1911              	.LFE206:
 1913              	 .section .bss.respbuf.9313,"aw",%nobits
 1914              	 .align 2
 1917              	respbuf.9313:
 1918 0000 00000000 	 .space 128
 1918      00000000 
 1918      00000000 
 1918      00000000 
 1918      00000000 
 1919              	 .section .bss.respbuf.9327,"aw",%nobits
 1920              	 .align 2
 1923              	respbuf.9327:
 1924 0000 00000000 	 .space 64
 1924      00000000 
 1924      00000000 
 1924      00000000 
 1924      00000000 
 1925              	 .text
 1926              	.Letext0:
 1927              	 .file 5 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\machine\\_default_types.h"
 1928              	 .file 6 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\sys\\_stdint.h"
 1929              	 .file 7 ".././hal/sam3u1c/inc/sam3u1c.h"
 1930              	 .file 8 ".././hal/sam3u1c/inc/core_cm3.h"
 1931              	 .file 9 ".././hal/sam3u1c/inc/system_sam3u.h"
 1932              	 .file 10 ".././hal/sam3u1c/inc/component/component_efc.h"
 1933              	 .file 11 ".././hal/sam3u1c/inc/component/component_pio.h"
 1934              	 .file 12 ".././hal/sam3u1c/inc/component/component_rstc.h"
 1935              	 .file 13 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\sys\\lock.h"
 1936              	 .file 14 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\sys\\_types.h"
 1937              	 .file 15 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\lib\\gcc\\arm-none-eabi\\8.2.1\\include\\stddef.h"
 1938              	 .file 16 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\sys\\reent.h"
 1939              	 .file 17 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\\stdlib.h"
 1940              	 .file 18 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
 1941              	 .file 19 ".././hal/sam3u1c/inc/compiler.h"
 1942              	 .file 20 ".././hal/sam3u1c/inc/sam/sleepmgr.h"
 1943              	 .file 21 "./conf_usb.h"
 1944              	 .file 22 ".././hal/sam3u1c/inc/usb_protocol.h"
 1945              	 .file 23 ".././hal/sam3u1c/inc/udi.h"
 1946              	 .file 24 ".././hal/sam3u1c/inc/udc_desc.h"
 1947              	 .file 25 ".././hal/sam3u1c/inc/udd.h"
 1948              	 .file 26 ".././hal/sam3u1c/inc/udi_vendor.h"
 1949              	 .file 27 ".././hal/sam3u1c/inc/stdio_serial.h"
 1950              	 .file 28 ".././hal/sam3u1c/inc/usb.h"
 1951              	 .file 29 "usb_xmem.h"
 1952              	 .file 30 "fpga_program.h"
 1953              	 .file 31 ".././hal/sam3u1c/inc/pio.h"
 1954              	 .file 32 ".././hal/sam3u1c/inc/pmc.h"
 1955              	 .file 33 ".././hal/sam3u1c/inc/efc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 usb.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:27     .text.osc_enable:00000000 $t
    {standard input}:34     .text.osc_enable:00000000 osc_enable
    {standard input}:61     .text.osc_enable:00000014 $d
    {standard input}:69     .text.osc_enable:00000034 $t
    {standard input}:143    .text.osc_enable:00000074 $d
    {standard input}:151    .text.osc_is_ready:00000000 $t
    {standard input}:157    .text.osc_is_ready:00000000 osc_is_ready
    {standard input}:183    .text.osc_is_ready:00000014 $d
    {standard input}:191    .text.osc_is_ready:00000034 $t
    {standard input}:249    .text.osc_is_ready:00000078 $d
    {standard input}:256    .text.osc_wait_ready:00000000 $t
    {standard input}:262    .text.osc_wait_ready:00000000 osc_wait_ready
    {standard input}:311    .text.osc_wait_ready:00000028 $d
    {standard input}:316    .text.udc_detach:00000000 $t
    {standard input}:322    .text.udc_detach:00000000 udc_detach
    {standard input}:347    .text.udc_detach:0000000c $d
    {standard input}:355    .data.g_captureinprogress:00000000 g_captureinprogress
    {standard input}:360    .data.main_b_vendor_enable:00000000 main_b_vendor_enable
    {standard input}:366    .bss.USB_PWR_STATE:00000000 USB_PWR_STATE
    {standard input}:367    .bss.USB_PWR_STATE:00000000 $d
    {standard input}:369    .bss.main_buf_loopback:00000000 $d
    {standard input}:372    .bss.main_buf_loopback:00000000 main_buf_loopback
    {standard input}:375    .text.main_suspend_action:00000000 $t
    {standard input}:382    .text.main_suspend_action:00000000 main_suspend_action
    {standard input}:412    .text.main_resume_action:00000000 $t
    {standard input}:419    .text.main_resume_action:00000000 main_resume_action
    {standard input}:448    .text.main_sof_action:00000000 $t
    {standard input}:455    .text.main_sof_action:00000000 main_sof_action
    {standard input}:490    .text.main_sof_action:00000018 $d
    {standard input}:495    .text.main_vendor_enable:00000000 $t
    {standard input}:502    .text.main_vendor_enable:00000000 main_vendor_enable
    {standard input}:535    .text.main_vendor_enable:0000001c $d
    {standard input}:1762   .text.main_vendor_bulk_out_received:00000000 main_vendor_bulk_out_received
    {standard input}:543    .text.main_vendor_disable:00000000 $t
    {standard input}:550    .text.main_vendor_disable:00000000 main_vendor_disable
    {standard input}:582    .text.main_vendor_disable:00000014 $d
    {standard input}:587    .bss.ctrlbuffer:00000000 $d
    {standard input}:590    .bss.ctrlbuffer:00000000 ctrlbuffer
    {standard input}:595    .bss.blockendpoint_usage:00000000 blockendpoint_usage
    {standard input}:596    .bss.blockendpoint_usage:00000000 $d
    {standard input}:598    .bss.ctrlmemread_buf:00000000 $d
    {standard input}:601    .bss.ctrlmemread_buf:00000000 ctrlmemread_buf
    {standard input}:604    .bss.ctrlmemread_size:00000000 $d
    {standard input}:607    .bss.ctrlmemread_size:00000000 ctrlmemread_size
    {standard input}:610    .text.ctrl_readmem_bulk:00000000 $t
    {standard input}:617    .text.ctrl_readmem_bulk:00000000 ctrl_readmem_bulk
    {standard input}:688    .text.ctrl_readmem_bulk:00000044 $d
    {standard input}:1693   .text.main_vendor_bulk_in_received:00000000 main_vendor_bulk_in_received
    {standard input}:698    .text.ctrl_readmem_ctrl:00000000 $t
    {standard input}:705    .text.ctrl_readmem_ctrl:00000000 ctrl_readmem_ctrl
    {standard input}:777    .text.ctrl_readmem_ctrl:00000044 $d
    {standard input}:787    .text.ctrl_writemem_ctrl:00000000 $t
    {standard input}:794    .text.ctrl_writemem_ctrl:00000000 ctrl_writemem_ctrl
    {standard input}:892    .text.ctrl_writemem_ctrl:00000060 $d
    {standard input}:902    .bss.bulkread_address:00000000 $d
    {standard input}:905    .bss.bulkread_address:00000000 bulkread_address
    {standard input}:908    .bss.bulkread_len:00000000 $d
    {standard input}:911    .bss.bulkread_len:00000000 bulkread_len
    {standard input}:914    .text.ctrl_writemem_bulk:00000000 $t
    {standard input}:921    .text.ctrl_writemem_bulk:00000000 ctrl_writemem_bulk
    {standard input}:980    .text.ctrl_writemem_bulk:00000030 $d
    {standard input}:988    .text.ctrl_sam3ucfg_cb:00000000 $t
    {standard input}:994    .text.ctrl_sam3ucfg_cb:00000000 ctrl_sam3ucfg_cb
    {standard input}:1088   .text.ctrl_sam3ucfg_cb:00000068 $d
    {standard input}:1101   .text.ctrl_progfpga_bulk:00000000 $t
    {standard input}:1108   .text.ctrl_progfpga_bulk:00000000 ctrl_progfpga_bulk
    {standard input}:1166   .text.ctrl_progfpga_bulk:00000034 $d
    {standard input}:1174   .text.ctrl_change_pwr:00000000 $t
    {standard input}:1181   .text.ctrl_change_pwr:00000000 ctrl_change_pwr
    {standard input}:1271   .text.ctrl_change_pwr:00000064 $d
    {standard input}:1278   .text.ctrl_fpga_reset:00000000 $t
    {standard input}:1285   .text.ctrl_fpga_reset:00000000 ctrl_fpga_reset
    {standard input}:1315   .text.ctrl_fpga_reset:00000014 $d
    {standard input}:1321   .text.main_setup_out_received:00000000 $t
    {standard input}:1328   .text.main_setup_out_received:00000000 main_setup_out_received
    {standard input}:1371   .text.main_setup_out_received:00000030 $d
    {standard input}:1393   .text.main_setup_out_received:00000088 $t
    {standard input}:1523   .text.main_setup_out_received:00000120 $d
    {standard input}:1539   .text.main_setup_in_received:00000000 $t
    {standard input}:1546   .text.main_setup_in_received:00000000 main_setup_in_received
    {standard input}:1675   .text.main_setup_in_received:000000a4 $d
    {standard input}:1923   .bss.respbuf.9327:00000000 respbuf.9327
    {standard input}:1686   .text.main_vendor_bulk_in_received:00000000 $t
    {standard input}:1749   .text.main_vendor_bulk_in_received:00000030 $d
    {standard input}:1755   .text.main_vendor_bulk_out_received:00000000 $t
    {standard input}:1902   .text.main_vendor_bulk_out_received:000000a0 $d
    {standard input}:1914   .bss.respbuf.9313:00000000 $d
    {standard input}:1917   .bss.respbuf.9313:00000000 respbuf.9313
    {standard input}:1920   .bss.respbuf.9327:00000000 $d
                           .group:00000000 wm4.0.bacf6c85951b42af729d707f36a7fff6
                           .group:00000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.newlib.h.8.f6e543eac3f2f65163ba2ffe3b04987b
                           .group:00000000 wm4.ieeefp.h.77.d5685ba212d3ed6e914898d045f873e3
                           .group:00000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.cdefs.h.49.2bf373aedffd8b393ccd11dc057e8547
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:00000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:00000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.conf_clock.h.45.5dc276d21b4d793a62f1a9757cc18d5c
                           .group:00000000 wm4.board.h.48.ce8d06c36cc583d9bf62738411f62e4d
                           .group:00000000 wm4.cw521.h.62.d34c289ace4a92d90be8fb389db40479
                           .group:00000000 wm4.pmc.h.45.bbe1bf97a811e3b283420b2eeadf0b35
                           .group:00000000 wm4.osc.h.94.b766cddafe899eca01d775f7b2906680
                           .group:00000000 wm4.pll.h.45.a605c31ca466ae25752a678e8572be48
                           .group:00000000 wm4.sysclk.h.156.541a142b0016a365728ea1f7c0e3db84
                           .group:00000000 wm4.cycle_counter.h.44.fde38fb1acfd6555d72e65fae6e86af5
                           .group:00000000 wm4.delay.h.105.f2a8ab5e71eab0684cf6985b5c2fc9e8
                           .group:00000000 wm4.efc.h.45.ec5734119c630498df26106bacf9a684
                           .group:00000000 wm4.flash_efc.h.90.a4a39259055880dc10b861c5fe1b99e7
                           .group:00000000 wm4.pio.h.45.95f22b0ea02ddc698ec54fc56bf6f38c
                           .group:00000000 wm4.sam_gpio.h.50.76a45c51855d665134f8211cd601d693
                           .group:00000000 wm4.ioport_pio.h.44.373b34364b4ef25fac62017cd942a761
                           .group:00000000 wm4.sleep.h.45.ef10e1aee6f903405be19980a8333b7f
                           .group:00000000 wm4.smc.h.45.17a94aa976bb62b1109d03e8a314a569
                           .group:00000000 wm4.spi.h.45.712c66be09ffbac297c2e00923077297
                           .group:00000000 wm4.conf_sleepmgr.h.44.d825b913294720022fefe7201514fca3
                           .group:00000000 wm4.twi.h.45.ba70de99d200dafba570ce8f7058737a
                           .group:00000000 wm4.twi_master.h.90.08c062d0fa8f8aeea342ceeb79263395
                           .group:00000000 wm4.twi_slave.h.45.8b3d1a3d2e43ebc7d0161f4142989871
                           .group:00000000 wm4.uart.h.45.a5af743b8064bd84d1a6438457096e18
                           .group:00000000 wm4.usart.h.46.eae6fe592b7ea0768efef8d312e7f44f
                           .group:00000000 wm4.conf_uart_serial.h.45.245cdceaa1a3811fd043bf660ce38054
                           .group:00000000 wm4.conf_usb.h.45.dde1b096e128cb4c70cbe39d63ef79bf
                           .group:00000000 wm4.udi_vendor_conf.h.56.4348c8e521d040f44df868219dae6785
                           .group:00000000 wm4.usb_atmel.h.45.c31b525dbe01f8d9e2022a03356ec174
                           .group:00000000 wm4.usb_protocol.h.63.850c58f3469fce50a9ac9a6854f7594b
                           .group:00000000 wm4.usb_protocol_vendor.h.45.83dfe073428ff799abc3ed1c7b04c77d
                           .group:00000000 wm4.udc_desc.h.77.5fec235bd7553e7256e345e020840072
                           .group:00000000 wm4.udd.h.103.3ccc59b50c14ec70568e6136eeb22d56
                           .group:00000000 wm4.udi_vendor.h.125.7b9085237d4d4a9757f4c148fba1918d
                           .group:00000000 wm4.genclk.h.45.f7865052b40a907e4bab1a8f483a50e2
                           .group:00000000 wm4.usb.h.20.f560de5b472e2e451b5cba954e5d0064
                           .group:00000000 wm4.usb_xmem.h.16.2bfdefafb315212fe60310212368ffbb
                           .group:00000000 wm4.fpga_program.h.36.ca9933fdd1528ae3419efe9d74ea4ee5
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd

UNDEFINED SYMBOLS
pmc_switch_sclk_to_32kxtal
pmc_osc_enable_fastrc
pmc_osc_enable_main_xtal
pmc_osc_bypass_main_xtal
pmc_osc_is_ready_32kxtal
pmc_osc_is_ready_fastrc
pmc_osc_is_ready_main_xtal
udd_detach
udi_vendor_bulk_out_run
FPGA_releaselock
FPGA_setlock
FPGA_setaddr
udi_vendor_bulk_in_run
xram
udd_g_ctrlreq
pmc_switch_mck_to_mainck
pmc_switch_mck_to_pllack
efc_perform_command
fpga_program_setup1
fpga_program_setup2
pio_set_pin_high
pio_set_pin_low
FPGA_lockstatus
pio_get_pin_value
fpga_program_sendbyte
