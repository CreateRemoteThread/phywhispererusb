   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "usb.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .section .text.osc_enable,"ax",%progbits
  27              	 .align 1
  28              	 .syntax unified
  29              	 .thumb
  30              	 .thumb_func
  31              	 .fpu softvfp
  33              	osc_enable:
  34              	.LFB69:
  35              	 .file 1 ".././hal/sam3u1c/inc/sam3u/osc.h"
   1:.././hal/sam3u1c/inc/sam3u/osc.h **** /**
   2:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \file
   3:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   4:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \brief Chip-specific oscillator management functions.
   5:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   6:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Copyright (c) 2011 - 2013 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   8:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  10:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \page License
  11:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  12:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sam3u/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  15:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  18:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  22:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  25:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  28:.././hal/sam3u1c/inc/sam3u/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sam3u/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sam3u/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sam3u/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sam3u/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sam3u/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sam3u/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sam3u/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sam3u/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sam3u/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sam3u/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  40:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  42:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  43:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  44:.././hal/sam3u1c/inc/sam3u/osc.h **** #ifndef CHIP_OSC_H_INCLUDED
  45:.././hal/sam3u1c/inc/sam3u/osc.h **** #define CHIP_OSC_H_INCLUDED
  46:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  47:.././hal/sam3u1c/inc/sam3u/osc.h **** #include "board.h"
  48:.././hal/sam3u1c/inc/sam3u/osc.h **** #include "pmc.h"
  49:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  50:.././hal/sam3u1c/inc/sam3u/osc.h **** /// @cond 0
  51:.././hal/sam3u1c/inc/sam3u/osc.h **** /**INDENT-OFF**/
  52:.././hal/sam3u1c/inc/sam3u/osc.h **** #ifdef __cplusplus
  53:.././hal/sam3u1c/inc/sam3u/osc.h **** extern "C" {
  54:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  55:.././hal/sam3u1c/inc/sam3u/osc.h **** /**INDENT-ON**/
  56:.././hal/sam3u1c/inc/sam3u/osc.h **** /// @endcond
  57:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  58:.././hal/sam3u1c/inc/sam3u/osc.h **** /*
  59:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Below BOARD_XXX macros are related to the specific board, and
  60:.././hal/sam3u1c/inc/sam3u/osc.h ****  * should be defined by the board code, otherwise default value are used.
  61:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  62:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_SLCK_XTAL)
  63:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board slow clock xtal frequency has not been defined.
  64:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_SLCK_XTAL      (32768UL)
  65:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  66:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  67:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_SLCK_BYPASS)
  68:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board slow clock bypass frequency has not been defined.
  69:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_SLCK_BYPASS    (32768UL)
  70:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  71:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  72:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_MAINCK_XTAL)
  73:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock xtal frequency has not been defined.
  74:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_MAINCK_XTAL    (12000000UL)
  75:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  76:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  77:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_MAINCK_BYPASS)
  78:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock bypass frequency has not been defined.
  79:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_MAINCK_BYPASS  (12000000UL)
  80:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  81:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  82:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_OSC_STARTUP_US)
  83:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock xtal startup time has not been defined.
  84:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_OSC_STARTUP_US      (15625UL)
  85:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  86:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  87:.././hal/sam3u1c/inc/sam3u/osc.h **** /**
  88:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \weakgroup osc_group
  89:.././hal/sam3u1c/inc/sam3u/osc.h ****  * @{
  90:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  91:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  92:.././hal/sam3u1c/inc/sam3u/osc.h **** //! \name Oscillator identifiers
  93:.././hal/sam3u1c/inc/sam3u/osc.h **** //@{
  94:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_RC             0    //!< Internal 32kHz RC oscillator.
  95:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_XTAL           1    //!< External 32kHz crystal oscillator.
  96:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_BYPASS         2    //!< External 32kHz bypass oscillator.
  97:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_4M_RC            3    //!< Internal 4MHz RC oscillator.
  98:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_8M_RC            4    //!< Internal 8MHz RC oscillator.
  99:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_12M_RC           5    //!< Internal 12MHz RC oscillator.
 100:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_XTAL             6    //!< External crystal oscillator.
 101:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_BYPASS           7    //!< External bypass oscillator.
 102:.././hal/sam3u1c/inc/sam3u/osc.h **** //@}
 103:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 104:.././hal/sam3u1c/inc/sam3u/osc.h **** //! \name Oscillator clock speed in hertz
 105:.././hal/sam3u1c/inc/sam3u/osc.h **** //@{
 106:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_RC_HZ          CHIP_FREQ_SLCK_RC               //!< Internal 32kHz RC oscillat
 107:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_XTAL_HZ        BOARD_FREQ_SLCK_XTAL            //!< External 32kHz crystal osc
 108:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_BYPASS_HZ      BOARD_FREQ_SLCK_BYPASS          //!< External 32kHz bypass osci
 109:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_4M_RC_HZ         CHIP_FREQ_MAINCK_RC_4MHZ        //!< Internal 4MHz RC oscillato
 110:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_8M_RC_HZ         CHIP_FREQ_MAINCK_RC_8MHZ        //!< Internal 8MHz RC oscillato
 111:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_12M_RC_HZ        CHIP_FREQ_MAINCK_RC_12MHZ       //!< Internal 12MHz RC oscillat
 112:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillato
 113:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator
 114:.././hal/sam3u1c/inc/sam3u/osc.h **** //@}
 115:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 116:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline void osc_enable(uint32_t ul_id)
 117:.././hal/sam3u1c/inc/sam3u/osc.h **** {
  36              	 .loc 1 117 0
  37              	 .cfi_startproc
  38              	 
  39              	 
  40 0000 80B5     	 push {r7,lr}
  41              	.LCFI0:
  42              	 .cfi_def_cfa_offset 8
  43              	 .cfi_offset 7,-8
  44              	 .cfi_offset 14,-4
  45 0002 82B0     	 sub sp,sp,#8
  46              	.LCFI1:
  47              	 .cfi_def_cfa_offset 16
  48 0004 00AF     	 add r7,sp,#0
  49              	.LCFI2:
  50              	 .cfi_def_cfa_register 7
  51 0006 7860     	 str r0,[r7,#4]
 118:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
  52              	 .loc 1 118 0
  53 0008 7B68     	 ldr r3,[r7,#4]
  54 000a 072B     	 cmp r3,#7
  55 000c 2ED8     	 bhi .L12
  56 000e 01A2     	 adr r2,.L4
  57 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
  58              	 .p2align 2
  59              	.L4:
  60 0014 6B000000 	 .word .L13+1
  61 0018 35000000 	 .word .L5+1
  62 001c 3D000000 	 .word .L6+1
  63 0020 45000000 	 .word .L7+1
  64 0024 4D000000 	 .word .L8+1
  65 0028 55000000 	 .word .L9+1
  66 002c 5D000000 	 .word .L10+1
  67 0030 65000000 	 .word .L11+1
  68              	 .p2align 1
  69              	.L5:
 119:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 120:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 121:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 122:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 123:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  70              	 .loc 1 123 0
  71 0034 0020     	 movs r0,#0
  72 0036 0F4B     	 ldr r3,.L14
  73 0038 9847     	 blx r3
  74              	.LVL0:
 124:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  75              	 .loc 1 124 0
  76 003a 17E0     	 b .L2
  77              	.L6:
 125:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 126:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 127:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  78              	 .loc 1 127 0
  79 003c 0120     	 movs r0,#1
  80 003e 0D4B     	 ldr r3,.L14
  81 0040 9847     	 blx r3
  82              	.LVL1:
 128:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  83              	 .loc 1 128 0
  84 0042 13E0     	 b .L2
  85              	.L7:
 129:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 130:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 131:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 132:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  86              	 .loc 1 132 0
  87 0044 0020     	 movs r0,#0
  88 0046 0C4B     	 ldr r3,.L14+4
  89 0048 9847     	 blx r3
  90              	.LVL2:
 133:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  91              	 .loc 1 133 0
  92 004a 0FE0     	 b .L2
  93              	.L8:
 134:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 135:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 136:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  94              	 .loc 1 136 0
  95 004c 1020     	 movs r0,#16
  96 004e 0A4B     	 ldr r3,.L14+4
  97 0050 9847     	 blx r3
  98              	.LVL3:
 137:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  99              	 .loc 1 137 0
 100 0052 0BE0     	 b .L2
 101              	.L9:
 138:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 139:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 140:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
 102              	 .loc 1 140 0
 103 0054 2020     	 movs r0,#32
 104 0056 084B     	 ldr r3,.L14+4
 105 0058 9847     	 blx r3
 106              	.LVL4:
 141:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 107              	 .loc 1 141 0
 108 005a 07E0     	 b .L2
 109              	.L10:
 142:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 143:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 144:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 145:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
 110              	 .loc 1 145 0
 111 005c 3E20     	 movs r0,#62
 112 005e 074B     	 ldr r3,.L14+8
 113 0060 9847     	 blx r3
 114              	.LVL5:
 146:.././hal/sam3u1c/inc/sam3u/osc.h **** 				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
 147:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 115              	 .loc 1 147 0
 116 0062 03E0     	 b .L2
 117              	.L11:
 148:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 149:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 150:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_bypass_main_xtal();
 118              	 .loc 1 150 0
 119 0064 064B     	 ldr r3,.L14+12
 120 0066 9847     	 blx r3
 121              	.LVL6:
 151:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 122              	 .loc 1 151 0
 123 0068 00E0     	 b .L2
 124              	.L13:
 120:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 125              	 .loc 1 120 0
 126 006a 00BF     	 nop
 127              	.L2:
 128              	.L12:
 152:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 153:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 129              	 .loc 1 153 0
 130 006c 00BF     	 nop
 131 006e 0837     	 adds r7,r7,#8
 132              	.LCFI3:
 133              	 .cfi_def_cfa_offset 8
 134 0070 BD46     	 mov sp,r7
 135              	.LCFI4:
 136              	 .cfi_def_cfa_register 13
 137              	 
 138 0072 80BD     	 pop {r7,pc}
 139              	.L15:
 140              	 .align 2
 141              	.L14:
 142 0074 00000000 	 .word pmc_switch_sclk_to_32kxtal
 143 0078 00000000 	 .word pmc_osc_enable_fastrc
 144 007c 00000000 	 .word pmc_osc_enable_main_xtal
 145 0080 00000000 	 .word pmc_osc_bypass_main_xtal
 146              	 .cfi_endproc
 147              	.LFE69:
 149              	 .section .text.osc_is_ready,"ax",%progbits
 150              	 .align 1
 151              	 .syntax unified
 152              	 .thumb
 153              	 .thumb_func
 154              	 .fpu softvfp
 156              	osc_is_ready:
 157              	.LFB71:
 154:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 155:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline void osc_disable(uint32_t ul_id)
 156:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 157:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 158:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 159:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 160:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 161:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 162:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 163:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 164:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 165:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 166:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_fastrc();
 167:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 168:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 169:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 170:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_xtal(PMC_OSC_XTAL);
 171:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 172:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 173:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 174:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_xtal(PMC_OSC_BYPASS);
 175:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 176:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 177:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 178:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 179:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline bool osc_is_ready(uint32_t ul_id)
 180:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 158              	 .loc 1 180 0
 159              	 .cfi_startproc
 160              	 
 161              	 
 162 0000 80B5     	 push {r7,lr}
 163              	.LCFI5:
 164              	 .cfi_def_cfa_offset 8
 165              	 .cfi_offset 7,-8
 166              	 .cfi_offset 14,-4
 167 0002 82B0     	 sub sp,sp,#8
 168              	.LCFI6:
 169              	 .cfi_def_cfa_offset 16
 170 0004 00AF     	 add r7,sp,#0
 171              	.LCFI7:
 172              	 .cfi_def_cfa_register 7
 173 0006 7860     	 str r0,[r7,#4]
 181:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 174              	 .loc 1 181 0
 175 0008 7B68     	 ldr r3,[r7,#4]
 176 000a 072B     	 cmp r3,#7
 177 000c 2FD8     	 bhi .L17
 178 000e 01A2     	 adr r2,.L19
 179 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 180              	 .p2align 2
 181              	.L19:
 182 0014 35000000 	 .word .L18+1
 183 0018 39000000 	 .word .L20+1
 184 001c 39000000 	 .word .L20+1
 185 0020 4B000000 	 .word .L21+1
 186 0024 4B000000 	 .word .L21+1
 187 0028 4B000000 	 .word .L21+1
 188 002c 5D000000 	 .word .L22+1
 189 0030 5D000000 	 .word .L22+1
 190              	 .p2align 1
 191              	.L18:
 182:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 183:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return 1;
 192              	 .loc 1 183 0
 193 0034 0123     	 movs r3,#1
 194 0036 1BE0     	 b .L23
 195              	.L20:
 184:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 185:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 186:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 187:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_32kxtal();
 196              	 .loc 1 187 0
 197 0038 0F4B     	 ldr r3,.L24
 198 003a 9847     	 blx r3
 199              	.LVL7:
 200 003c 0346     	 mov r3,r0
 201 003e 002B     	 cmp r3,#0
 202 0040 14BF     	 ite ne
 203 0042 0123     	 movne r3,#1
 204 0044 0023     	 moveq r3,#0
 205 0046 DBB2     	 uxtb r3,r3
 206 0048 12E0     	 b .L23
 207              	.L21:
 188:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 189:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 190:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 191:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 192:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_fastrc();
 208              	 .loc 1 192 0
 209 004a 0C4B     	 ldr r3,.L24+4
 210 004c 9847     	 blx r3
 211              	.LVL8:
 212 004e 0346     	 mov r3,r0
 213 0050 002B     	 cmp r3,#0
 214 0052 14BF     	 ite ne
 215 0054 0123     	 movne r3,#1
 216 0056 0023     	 moveq r3,#0
 217 0058 DBB2     	 uxtb r3,r3
 218 005a 09E0     	 b .L23
 219              	.L22:
 193:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 194:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 195:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 196:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_main_xtal();
 220              	 .loc 1 196 0
 221 005c 084B     	 ldr r3,.L24+8
 222 005e 9847     	 blx r3
 223              	.LVL9:
 224 0060 0346     	 mov r3,r0
 225 0062 002B     	 cmp r3,#0
 226 0064 14BF     	 ite ne
 227 0066 0123     	 movne r3,#1
 228 0068 0023     	 moveq r3,#0
 229 006a DBB2     	 uxtb r3,r3
 230 006c 00E0     	 b .L23
 231              	.L17:
 197:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 198:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 199:.././hal/sam3u1c/inc/sam3u/osc.h **** 	return 0;
 232              	 .loc 1 199 0
 233 006e 0023     	 movs r3,#0
 234              	.L23:
 200:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 235              	 .loc 1 200 0
 236 0070 1846     	 mov r0,r3
 237 0072 0837     	 adds r7,r7,#8
 238              	.LCFI8:
 239              	 .cfi_def_cfa_offset 8
 240 0074 BD46     	 mov sp,r7
 241              	.LCFI9:
 242              	 .cfi_def_cfa_register 13
 243              	 
 244 0076 80BD     	 pop {r7,pc}
 245              	.L25:
 246              	 .align 2
 247              	.L24:
 248 0078 00000000 	 .word pmc_osc_is_ready_32kxtal
 249 007c 00000000 	 .word pmc_osc_is_ready_fastrc
 250 0080 00000000 	 .word pmc_osc_is_ready_main_xtal
 251              	 .cfi_endproc
 252              	.LFE71:
 254              	 .section .text.osc_wait_ready,"ax",%progbits
 255              	 .align 1
 256              	 .syntax unified
 257              	 .thumb
 258              	 .thumb_func
 259              	 .fpu softvfp
 261              	osc_wait_ready:
 262              	.LFB73:
 263              	 .file 2 ".././hal/sam3u1c/inc/osc.h"
   1:.././hal/sam3u1c/inc/osc.h **** /**
   2:.././hal/sam3u1c/inc/osc.h ****  * \file
   3:.././hal/sam3u1c/inc/osc.h ****  *
   4:.././hal/sam3u1c/inc/osc.h ****  * \brief Oscillator management
   5:.././hal/sam3u1c/inc/osc.h ****  *
   6:.././hal/sam3u1c/inc/osc.h ****  * Copyright (c) 2010-2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/osc.h ****  *
   8:.././hal/sam3u1c/inc/osc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/osc.h ****  *
  10:.././hal/sam3u1c/inc/osc.h ****  * \page License
  11:.././hal/sam3u1c/inc/osc.h ****  *
  12:.././hal/sam3u1c/inc/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/osc.h ****  *
  15:.././hal/sam3u1c/inc/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/osc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/osc.h ****  *
  18:.././hal/sam3u1c/inc/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/osc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/osc.h ****  *
  22:.././hal/sam3u1c/inc/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/osc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/osc.h ****  *
  25:.././hal/sam3u1c/inc/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/osc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/osc.h ****  *
  28:.././hal/sam3u1c/inc/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/osc.h ****  *
  40:.././hal/sam3u1c/inc/osc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/osc.h ****  *
  42:.././hal/sam3u1c/inc/osc.h ****  */
  43:.././hal/sam3u1c/inc/osc.h **** #ifndef OSC_H_INCLUDED
  44:.././hal/sam3u1c/inc/osc.h **** #define OSC_H_INCLUDED
  45:.././hal/sam3u1c/inc/osc.h **** 
  46:.././hal/sam3u1c/inc/osc.h **** #include "parts.h"
  47:.././hal/sam3u1c/inc/osc.h **** #include "conf_clock.h"
  48:.././hal/sam3u1c/inc/osc.h **** 
  49:.././hal/sam3u1c/inc/osc.h **** #if SAM3S
  50:.././hal/sam3u1c/inc/osc.h **** # include "sam3s/osc.h"
  51:.././hal/sam3u1c/inc/osc.h **** #elif SAM3XA
  52:.././hal/sam3u1c/inc/osc.h **** # include "sam3x/osc.h"
  53:.././hal/sam3u1c/inc/osc.h **** #elif SAM3U
  54:.././hal/sam3u1c/inc/osc.h **** # include "sam3u/osc.h"
  55:.././hal/sam3u1c/inc/osc.h **** #elif SAM3N
  56:.././hal/sam3u1c/inc/osc.h **** # include "sam3n/osc.h"
  57:.././hal/sam3u1c/inc/osc.h **** #elif SAM4S
  58:.././hal/sam3u1c/inc/osc.h **** # include "sam4s/osc.h"
  59:.././hal/sam3u1c/inc/osc.h **** #elif SAM4E
  60:.././hal/sam3u1c/inc/osc.h **** # include "sam4e/osc.h"
  61:.././hal/sam3u1c/inc/osc.h **** #elif SAM4C
  62:.././hal/sam3u1c/inc/osc.h **** # include "sam4c/osc.h"
  63:.././hal/sam3u1c/inc/osc.h **** #elif SAM4CM
  64:.././hal/sam3u1c/inc/osc.h **** # include "sam4cm/osc.h"
  65:.././hal/sam3u1c/inc/osc.h **** #elif SAM4CP
  66:.././hal/sam3u1c/inc/osc.h **** # include "sam4cp/osc.h"
  67:.././hal/sam3u1c/inc/osc.h **** #elif SAM4L
  68:.././hal/sam3u1c/inc/osc.h **** # include "sam4l/osc.h"
  69:.././hal/sam3u1c/inc/osc.h **** #elif SAM4N
  70:.././hal/sam3u1c/inc/osc.h **** # include "sam4n/osc.h"
  71:.././hal/sam3u1c/inc/osc.h **** #elif SAMG
  72:.././hal/sam3u1c/inc/osc.h **** # include "samg/osc.h"
  73:.././hal/sam3u1c/inc/osc.h **** #elif (UC3A0 || UC3A1)
  74:.././hal/sam3u1c/inc/osc.h **** # include "uc3a0_a1/osc.h"
  75:.././hal/sam3u1c/inc/osc.h **** #elif UC3A3
  76:.././hal/sam3u1c/inc/osc.h **** # include "uc3a3_a4/osc.h"
  77:.././hal/sam3u1c/inc/osc.h **** #elif UC3B
  78:.././hal/sam3u1c/inc/osc.h **** # include "uc3b0_b1/osc.h"
  79:.././hal/sam3u1c/inc/osc.h **** #elif UC3C
  80:.././hal/sam3u1c/inc/osc.h **** # include "uc3c/osc.h"
  81:.././hal/sam3u1c/inc/osc.h **** #elif UC3D
  82:.././hal/sam3u1c/inc/osc.h **** # include "uc3d/osc.h"
  83:.././hal/sam3u1c/inc/osc.h **** #elif UC3L
  84:.././hal/sam3u1c/inc/osc.h **** # include "uc3l/osc.h"
  85:.././hal/sam3u1c/inc/osc.h **** #elif XMEGA
  86:.././hal/sam3u1c/inc/osc.h **** # include "xmega/osc.h"
  87:.././hal/sam3u1c/inc/osc.h **** #else
  88:.././hal/sam3u1c/inc/osc.h **** # error Unsupported chip type
  89:.././hal/sam3u1c/inc/osc.h **** #endif
  90:.././hal/sam3u1c/inc/osc.h **** 
  91:.././hal/sam3u1c/inc/osc.h **** /**
  92:.././hal/sam3u1c/inc/osc.h ****  * \ingroup clk_group
  93:.././hal/sam3u1c/inc/osc.h ****  * \defgroup osc_group Oscillator Management
  94:.././hal/sam3u1c/inc/osc.h ****  *
  95:.././hal/sam3u1c/inc/osc.h ****  * This group contains functions and definitions related to configuring
  96:.././hal/sam3u1c/inc/osc.h ****  * and enabling/disabling on-chip oscillators. Internal RC-oscillators,
  97:.././hal/sam3u1c/inc/osc.h ****  * external crystal oscillators and external clock generators are
  98:.././hal/sam3u1c/inc/osc.h ****  * supported by this module. What all of these have in common is that
  99:.././hal/sam3u1c/inc/osc.h ****  * they swing at a fixed, nominal frequency which is normally not
 100:.././hal/sam3u1c/inc/osc.h ****  * adjustable.
 101:.././hal/sam3u1c/inc/osc.h ****  *
 102:.././hal/sam3u1c/inc/osc.h ****  * \par Example: Enabling an oscillator
 103:.././hal/sam3u1c/inc/osc.h ****  *
 104:.././hal/sam3u1c/inc/osc.h ****  * The following example demonstrates how to enable the external
 105:.././hal/sam3u1c/inc/osc.h ****  * oscillator on XMEGA A and wait for it to be ready to use. The
 106:.././hal/sam3u1c/inc/osc.h ****  * oscillator identifiers are platform-specific, so while the same
 107:.././hal/sam3u1c/inc/osc.h ****  * procedure is used on all platforms, the parameter to osc_enable()
 108:.././hal/sam3u1c/inc/osc.h ****  * will be different from device to device.
 109:.././hal/sam3u1c/inc/osc.h ****  * \code
 110:.././hal/sam3u1c/inc/osc.h **** 	osc_enable(OSC_ID_XOSC);
 111:.././hal/sam3u1c/inc/osc.h **** 	osc_wait_ready(OSC_ID_XOSC); \endcode
 112:.././hal/sam3u1c/inc/osc.h ****  *
 113:.././hal/sam3u1c/inc/osc.h ****  * \section osc_group_board Board-specific Definitions
 114:.././hal/sam3u1c/inc/osc.h ****  * If external oscillators are used, the board code must provide the
 115:.././hal/sam3u1c/inc/osc.h ****  * following definitions for each of those:
 116:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_HZ: The nominal frequency of the oscillator.
 117:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_STARTUP_US: The startup time of the
 118:.././hal/sam3u1c/inc/osc.h ****  *     oscillator in microseconds.
 119:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_TYPE: The type of oscillator connected, i.e.
 120:.././hal/sam3u1c/inc/osc.h ****  *     whether it's a crystal or external clock, and sometimes what kind
 121:.././hal/sam3u1c/inc/osc.h ****  *     of crystal it is. The meaning of this value is platform-specific.
 122:.././hal/sam3u1c/inc/osc.h ****  *
 123:.././hal/sam3u1c/inc/osc.h ****  * @{
 124:.././hal/sam3u1c/inc/osc.h ****  */
 125:.././hal/sam3u1c/inc/osc.h **** 
 126:.././hal/sam3u1c/inc/osc.h **** //! \name Oscillator Management
 127:.././hal/sam3u1c/inc/osc.h **** //@{
 128:.././hal/sam3u1c/inc/osc.h **** /**
 129:.././hal/sam3u1c/inc/osc.h ****  * \fn void osc_enable(uint8_t id)
 130:.././hal/sam3u1c/inc/osc.h ****  * \brief Enable oscillator \a id
 131:.././hal/sam3u1c/inc/osc.h ****  *
 132:.././hal/sam3u1c/inc/osc.h ****  * The startup time and mode value is automatically determined based on
 133:.././hal/sam3u1c/inc/osc.h ****  * definitions in the board code.
 134:.././hal/sam3u1c/inc/osc.h ****  */
 135:.././hal/sam3u1c/inc/osc.h **** /**
 136:.././hal/sam3u1c/inc/osc.h ****  * \fn void osc_disable(uint8_t id)
 137:.././hal/sam3u1c/inc/osc.h ****  * \brief Disable oscillator \a id
 138:.././hal/sam3u1c/inc/osc.h ****  */
 139:.././hal/sam3u1c/inc/osc.h **** /**
 140:.././hal/sam3u1c/inc/osc.h ****  * \fn osc_is_ready(uint8_t id)
 141:.././hal/sam3u1c/inc/osc.h ****  * \brief Determine whether oscillator \a id is ready.
 142:.././hal/sam3u1c/inc/osc.h ****  * \retval true Oscillator \a id is running and ready to use as a clock
 143:.././hal/sam3u1c/inc/osc.h ****  * source.
 144:.././hal/sam3u1c/inc/osc.h ****  * \retval false Oscillator \a id is not running.
 145:.././hal/sam3u1c/inc/osc.h ****  */
 146:.././hal/sam3u1c/inc/osc.h **** /**
 147:.././hal/sam3u1c/inc/osc.h ****  * \fn uint32_t osc_get_rate(uint8_t id)
 148:.././hal/sam3u1c/inc/osc.h ****  * \brief Return the frequency of oscillator \a id in Hz
 149:.././hal/sam3u1c/inc/osc.h ****  */
 150:.././hal/sam3u1c/inc/osc.h **** 
 151:.././hal/sam3u1c/inc/osc.h **** #ifndef __ASSEMBLY__
 152:.././hal/sam3u1c/inc/osc.h **** 
 153:.././hal/sam3u1c/inc/osc.h **** /**
 154:.././hal/sam3u1c/inc/osc.h ****  * \brief Wait until the oscillator identified by \a id is ready
 155:.././hal/sam3u1c/inc/osc.h ****  *
 156:.././hal/sam3u1c/inc/osc.h ****  * This function will busy-wait for the oscillator identified by \a id
 157:.././hal/sam3u1c/inc/osc.h ****  * to become stable and ready to use as a clock source.
 158:.././hal/sam3u1c/inc/osc.h ****  *
 159:.././hal/sam3u1c/inc/osc.h ****  * \param id A number identifying the oscillator to wait for.
 160:.././hal/sam3u1c/inc/osc.h ****  */
 161:.././hal/sam3u1c/inc/osc.h **** static inline void osc_wait_ready(uint8_t id)
 162:.././hal/sam3u1c/inc/osc.h **** {
 264              	 .loc 2 162 0
 265              	 .cfi_startproc
 266              	 
 267              	 
 268 0000 80B5     	 push {r7,lr}
 269              	.LCFI10:
 270              	 .cfi_def_cfa_offset 8
 271              	 .cfi_offset 7,-8
 272              	 .cfi_offset 14,-4
 273 0002 82B0     	 sub sp,sp,#8
 274              	.LCFI11:
 275              	 .cfi_def_cfa_offset 16
 276 0004 00AF     	 add r7,sp,#0
 277              	.LCFI12:
 278              	 .cfi_def_cfa_register 7
 279 0006 0346     	 mov r3,r0
 280 0008 FB71     	 strb r3,[r7,#7]
 163:.././hal/sam3u1c/inc/osc.h **** 	while (!osc_is_ready(id)) {
 281              	 .loc 2 163 0
 282 000a 00BF     	 nop
 283              	.L27:
 284              	 .loc 2 163 0 is_stmt 0 discriminator 1
 285 000c FB79     	 ldrb r3,[r7,#7]
 286 000e 1846     	 mov r0,r3
 287 0010 054B     	 ldr r3,.L28
 288 0012 9847     	 blx r3
 289              	.LVL10:
 290 0014 0346     	 mov r3,r0
 291 0016 83F00103 	 eor r3,r3,#1
 292 001a DBB2     	 uxtb r3,r3
 293 001c 002B     	 cmp r3,#0
 294 001e F5D1     	 bne .L27
 164:.././hal/sam3u1c/inc/osc.h **** 		/* Do nothing */
 165:.././hal/sam3u1c/inc/osc.h **** 	}
 166:.././hal/sam3u1c/inc/osc.h **** }
 295              	 .loc 2 166 0 is_stmt 1
 296 0020 00BF     	 nop
 297 0022 0837     	 adds r7,r7,#8
 298              	.LCFI13:
 299              	 .cfi_def_cfa_offset 8
 300 0024 BD46     	 mov sp,r7
 301              	.LCFI14:
 302              	 .cfi_def_cfa_register 13
 303              	 
 304 0026 80BD     	 pop {r7,pc}
 305              	.L29:
 306              	 .align 2
 307              	.L28:
 308 0028 00000000 	 .word osc_is_ready
 309              	 .cfi_endproc
 310              	.LFE73:
 312              	 .section .text.udc_detach,"ax",%progbits
 313              	 .align 1
 314              	 .syntax unified
 315              	 .thumb
 316              	 .thumb_func
 317              	 .fpu softvfp
 319              	udc_detach:
 320              	.LFB179:
 321              	 .file 3 ".././hal/sam3u1c/inc/udc.h"
   1:.././hal/sam3u1c/inc/udc.h **** /**
   2:.././hal/sam3u1c/inc/udc.h ****  * \file
   3:.././hal/sam3u1c/inc/udc.h ****  *
   4:.././hal/sam3u1c/inc/udc.h ****  * \brief Interface of the USB Device Controller (UDC)
   5:.././hal/sam3u1c/inc/udc.h ****  *
   6:.././hal/sam3u1c/inc/udc.h ****  * Copyright (c) 2009 - 2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/udc.h ****  *
   8:.././hal/sam3u1c/inc/udc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/udc.h ****  *
  10:.././hal/sam3u1c/inc/udc.h ****  * \page License
  11:.././hal/sam3u1c/inc/udc.h ****  *
  12:.././hal/sam3u1c/inc/udc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/udc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/udc.h ****  *
  15:.././hal/sam3u1c/inc/udc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/udc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/udc.h ****  *
  18:.././hal/sam3u1c/inc/udc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/udc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/udc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/udc.h ****  *
  22:.././hal/sam3u1c/inc/udc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/udc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/udc.h ****  *
  25:.././hal/sam3u1c/inc/udc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/udc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/udc.h ****  *
  28:.././hal/sam3u1c/inc/udc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/udc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/udc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/udc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/udc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/udc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/udc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/udc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/udc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/udc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/udc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/udc.h ****  *
  40:.././hal/sam3u1c/inc/udc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/udc.h ****  *
  42:.././hal/sam3u1c/inc/udc.h ****  */
  43:.././hal/sam3u1c/inc/udc.h **** 
  44:.././hal/sam3u1c/inc/udc.h **** #ifndef _UDC_H_
  45:.././hal/sam3u1c/inc/udc.h **** #define _UDC_H_
  46:.././hal/sam3u1c/inc/udc.h **** 
  47:.././hal/sam3u1c/inc/udc.h **** #include "conf_usb.h"
  48:.././hal/sam3u1c/inc/udc.h **** #include "usb_protocol.h"
  49:.././hal/sam3u1c/inc/udc.h **** #include "udc_desc.h"
  50:.././hal/sam3u1c/inc/udc.h **** #include "udd.h"
  51:.././hal/sam3u1c/inc/udc.h **** 
  52:.././hal/sam3u1c/inc/udc.h **** #if USB_DEVICE_VENDOR_ID == 0
  53:.././hal/sam3u1c/inc/udc.h **** #   error USB_DEVICE_VENDOR_ID cannot be equal to 0
  54:.././hal/sam3u1c/inc/udc.h **** #endif
  55:.././hal/sam3u1c/inc/udc.h **** 
  56:.././hal/sam3u1c/inc/udc.h **** #if USB_DEVICE_PRODUCT_ID == 0
  57:.././hal/sam3u1c/inc/udc.h **** #   error USB_DEVICE_PRODUCT_ID cannot be equal to 0
  58:.././hal/sam3u1c/inc/udc.h **** #endif
  59:.././hal/sam3u1c/inc/udc.h **** 
  60:.././hal/sam3u1c/inc/udc.h **** #ifdef __cplusplus
  61:.././hal/sam3u1c/inc/udc.h **** extern "C" {
  62:.././hal/sam3u1c/inc/udc.h **** #endif
  63:.././hal/sam3u1c/inc/udc.h **** 
  64:.././hal/sam3u1c/inc/udc.h **** /**
  65:.././hal/sam3u1c/inc/udc.h ****  * \ingroup usb_device_group
  66:.././hal/sam3u1c/inc/udc.h ****  * \defgroup udc_group USB Device Controller (UDC)
  67:.././hal/sam3u1c/inc/udc.h ****  *
  68:.././hal/sam3u1c/inc/udc.h ****  * The UDC provides a high-level abstraction of the usb device.
  69:.././hal/sam3u1c/inc/udc.h ****  * You can use these functions to control the main device state
  70:.././hal/sam3u1c/inc/udc.h ****  * (start/attach/wakeup).
  71:.././hal/sam3u1c/inc/udc.h ****  *
  72:.././hal/sam3u1c/inc/udc.h ****  * \section USB_DEVICE_CONF USB Device Custom configuration
  73:.././hal/sam3u1c/inc/udc.h ****  * The following USB Device configuration must be included in the conf_usb.h
  74:.././hal/sam3u1c/inc/udc.h ****  * file of the application.
  75:.././hal/sam3u1c/inc/udc.h ****  *
  76:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_VENDOR_ID (Word)<br>
  77:.././hal/sam3u1c/inc/udc.h ****  * Vendor ID provided by USB org (ATMEL 0x03EB).
  78:.././hal/sam3u1c/inc/udc.h ****  *
  79:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_PRODUCT_ID (Word)<br>
  80:.././hal/sam3u1c/inc/udc.h ****  * Product ID (Referenced in usb_atmel.h).
  81:.././hal/sam3u1c/inc/udc.h ****  *
  82:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_MAJOR_VERSION (Byte)<br>
  83:.././hal/sam3u1c/inc/udc.h ****  * Major version of the device
  84:.././hal/sam3u1c/inc/udc.h ****  *
  85:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_MINOR_VERSION (Byte)<br>
  86:.././hal/sam3u1c/inc/udc.h ****  * Minor version of the device
  87:.././hal/sam3u1c/inc/udc.h ****  *
  88:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_MANUFACTURE_NAME (string)<br>
  89:.././hal/sam3u1c/inc/udc.h ****  * ASCII name for the manufacture
  90:.././hal/sam3u1c/inc/udc.h ****  *
  91:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_PRODUCT_NAME (string)<br>
  92:.././hal/sam3u1c/inc/udc.h ****  * ASCII name for the product
  93:.././hal/sam3u1c/inc/udc.h ****  *
  94:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_SERIAL_NAME (string)<br>
  95:.././hal/sam3u1c/inc/udc.h ****  * ASCII name to enable and set a serial number
  96:.././hal/sam3u1c/inc/udc.h ****  *
  97:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_POWER (Numeric)<br>
  98:.././hal/sam3u1c/inc/udc.h ****  * (unit mA) Maximum device power
  99:.././hal/sam3u1c/inc/udc.h ****  *
 100:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_ATTR (Byte)<br>
 101:.././hal/sam3u1c/inc/udc.h ****  * USB attributes available:
 102:.././hal/sam3u1c/inc/udc.h ****  *  - USB_CONFIG_ATTR_SELF_POWERED
 103:.././hal/sam3u1c/inc/udc.h ****  *  - USB_CONFIG_ATTR_REMOTE_WAKEUP
 104:.././hal/sam3u1c/inc/udc.h ****  *  Note: if remote wake enabled then defines remotewakeup callbacks,
 105:.././hal/sam3u1c/inc/udc.h ****  * see Table 5-2. External API from UDC - Callback
 106:.././hal/sam3u1c/inc/udc.h ****  *
 107:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_LOW_SPEED (Only defined)<br>
 108:.././hal/sam3u1c/inc/udc.h ****  * Force the USB Device to run in low speed
 109:.././hal/sam3u1c/inc/udc.h ****  *
 110:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_HS_SUPPORT (Only defined)<br>
 111:.././hal/sam3u1c/inc/udc.h ****  * Authorize the USB Device to run in high speed
 112:.././hal/sam3u1c/inc/udc.h ****  *
 113:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_MAX_EP (Byte)<br>
 114:.././hal/sam3u1c/inc/udc.h ****  * Define the maximum endpoint number used by the USB Device.<br>
 115:.././hal/sam3u1c/inc/udc.h ****  * This one is already defined in UDI default configuration.
 116:.././hal/sam3u1c/inc/udc.h ****  * Ex:
 117:.././hal/sam3u1c/inc/udc.h ****  * - When endpoint control 0x00, endpoint 0x01 and
 118:.././hal/sam3u1c/inc/udc.h ****  *   endpoint 0x82 is used then USB_DEVICE_MAX_EP=2
 119:.././hal/sam3u1c/inc/udc.h ****  * - When only endpoint control 0x00 is used then USB_DEVICE_MAX_EP=0
 120:.././hal/sam3u1c/inc/udc.h ****  * - When endpoint 0x01 and endpoint 0x81 is used then USB_DEVICE_MAX_EP=1<br>
 121:.././hal/sam3u1c/inc/udc.h ****  *   (configuration not possible on USBB interface)
 122:.././hal/sam3u1c/inc/udc.h ****  * @{
 123:.././hal/sam3u1c/inc/udc.h ****  */
 124:.././hal/sam3u1c/inc/udc.h **** 
 125:.././hal/sam3u1c/inc/udc.h **** /**
 126:.././hal/sam3u1c/inc/udc.h ****  * \brief Authorizes the VBUS event
 127:.././hal/sam3u1c/inc/udc.h ****  *
 128:.././hal/sam3u1c/inc/udc.h ****  * \return true, if the VBUS monitoring is possible.
 129:.././hal/sam3u1c/inc/udc.h ****  *
 130:.././hal/sam3u1c/inc/udc.h ****  * \section udc_vbus_monitoring VBus monitoring used cases
 131:.././hal/sam3u1c/inc/udc.h ****  *
 132:.././hal/sam3u1c/inc/udc.h ****  * The VBus monitoring is used only for USB SELF Power application.
 133:.././hal/sam3u1c/inc/udc.h ****  *
 134:.././hal/sam3u1c/inc/udc.h ****  * - By default the USB device is automatically attached when Vbus is high
 135:.././hal/sam3u1c/inc/udc.h ****  * or when USB is start for devices without internal Vbus monitoring.
 136:.././hal/sam3u1c/inc/udc.h ****  * conf_usb.h file does not contains define USB_DEVICE_ATTACH_AUTO_DISABLE.
 137:.././hal/sam3u1c/inc/udc.h ****  * \code //#define USB_DEVICE_ATTACH_AUTO_DISABLE \endcode
 138:.././hal/sam3u1c/inc/udc.h ****  *
 139:.././hal/sam3u1c/inc/udc.h ****  * - Add custom VBUS monitoring. conf_usb.h file contains define
 140:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_ATTACH_AUTO_DISABLE:
 141:.././hal/sam3u1c/inc/udc.h ****  * \code #define USB_DEVICE_ATTACH_AUTO_DISABLE \endcode
 142:.././hal/sam3u1c/inc/udc.h ****  * User C file contains:
 143:.././hal/sam3u1c/inc/udc.h ****  * \code  
 144:.././hal/sam3u1c/inc/udc.h **** 	// Authorize VBUS monitoring
 145:.././hal/sam3u1c/inc/udc.h **** 	if (!udc_include_vbus_monitoring()) {
 146:.././hal/sam3u1c/inc/udc.h **** 	  // Implement custom VBUS monitoring via GPIO or other
 147:.././hal/sam3u1c/inc/udc.h **** 	}
 148:.././hal/sam3u1c/inc/udc.h **** 	Event_VBUS_present() // VBUS interrupt or GPIO interrupt or other
 149:.././hal/sam3u1c/inc/udc.h **** 	{
 150:.././hal/sam3u1c/inc/udc.h **** 	  // Attach USB Device
 151:.././hal/sam3u1c/inc/udc.h **** 	  udc_attach();
 152:.././hal/sam3u1c/inc/udc.h **** 	}
 153:.././hal/sam3u1c/inc/udc.h **** \endcode
 154:.././hal/sam3u1c/inc/udc.h ****  *
 155:.././hal/sam3u1c/inc/udc.h ****  * - Case of battery charging. conf_usb.h file contains define
 156:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_ATTACH_AUTO_DISABLE:
 157:.././hal/sam3u1c/inc/udc.h ****  * \code #define USB_DEVICE_ATTACH_AUTO_DISABLE \endcode
 158:.././hal/sam3u1c/inc/udc.h ****  * User C file contains:
 159:.././hal/sam3u1c/inc/udc.h ****  * \code  
 160:.././hal/sam3u1c/inc/udc.h **** 	Event VBUS present() // VBUS interrupt or GPIO interrupt or ..
 161:.././hal/sam3u1c/inc/udc.h **** 	{
 162:.././hal/sam3u1c/inc/udc.h **** 	  // Authorize battery charging, but wait key press to start USB.
 163:.././hal/sam3u1c/inc/udc.h **** 	}
 164:.././hal/sam3u1c/inc/udc.h **** 	Event Key press()
 165:.././hal/sam3u1c/inc/udc.h **** 	{
 166:.././hal/sam3u1c/inc/udc.h **** 	  // Stop batteries charging
 167:.././hal/sam3u1c/inc/udc.h **** 	  // Start USB
 168:.././hal/sam3u1c/inc/udc.h **** 	  udc_attach();
 169:.././hal/sam3u1c/inc/udc.h **** 	}
 170:.././hal/sam3u1c/inc/udc.h **** \endcode
 171:.././hal/sam3u1c/inc/udc.h ****  */
 172:.././hal/sam3u1c/inc/udc.h **** static inline bool udc_include_vbus_monitoring(void)
 173:.././hal/sam3u1c/inc/udc.h **** {
 174:.././hal/sam3u1c/inc/udc.h **** 	return udd_include_vbus_monitoring();
 175:.././hal/sam3u1c/inc/udc.h **** }
 176:.././hal/sam3u1c/inc/udc.h **** 
 177:.././hal/sam3u1c/inc/udc.h **** /*! \brief Start the USB Device stack
 178:.././hal/sam3u1c/inc/udc.h ****  */
 179:.././hal/sam3u1c/inc/udc.h **** void udc_start(void);
 180:.././hal/sam3u1c/inc/udc.h **** 
 181:.././hal/sam3u1c/inc/udc.h **** /*! \brief Stop the USB Device stack
 182:.././hal/sam3u1c/inc/udc.h ****  */
 183:.././hal/sam3u1c/inc/udc.h **** void udc_stop(void);
 184:.././hal/sam3u1c/inc/udc.h **** 
 185:.././hal/sam3u1c/inc/udc.h **** /**
 186:.././hal/sam3u1c/inc/udc.h ****  * \brief Attach device to the bus when possible
 187:.././hal/sam3u1c/inc/udc.h ****  *
 188:.././hal/sam3u1c/inc/udc.h ****  * \warning If a VBus control is included in driver,
 189:.././hal/sam3u1c/inc/udc.h ****  * then it will attach device when an acceptable Vbus
 190:.././hal/sam3u1c/inc/udc.h ****  * level from the host is detected.
 191:.././hal/sam3u1c/inc/udc.h ****  */
 192:.././hal/sam3u1c/inc/udc.h **** static inline void udc_attach(void)
 193:.././hal/sam3u1c/inc/udc.h **** {
 194:.././hal/sam3u1c/inc/udc.h **** 	udd_attach();
 195:.././hal/sam3u1c/inc/udc.h **** }
 196:.././hal/sam3u1c/inc/udc.h **** 
 197:.././hal/sam3u1c/inc/udc.h **** 
 198:.././hal/sam3u1c/inc/udc.h **** /**
 199:.././hal/sam3u1c/inc/udc.h ****  * \brief Detaches the device from the bus
 200:.././hal/sam3u1c/inc/udc.h ****  *
 201:.././hal/sam3u1c/inc/udc.h ****  * The driver must remove pull-up on USB line D- or D+.
 202:.././hal/sam3u1c/inc/udc.h ****  */
 203:.././hal/sam3u1c/inc/udc.h **** static inline void udc_detach(void)
 204:.././hal/sam3u1c/inc/udc.h **** {
 322              	 .loc 3 204 0
 323              	 .cfi_startproc
 324              	 
 325              	 
 326 0000 80B5     	 push {r7,lr}
 327              	.LCFI15:
 328              	 .cfi_def_cfa_offset 8
 329              	 .cfi_offset 7,-8
 330              	 .cfi_offset 14,-4
 331 0002 00AF     	 add r7,sp,#0
 332              	.LCFI16:
 333              	 .cfi_def_cfa_register 7
 205:.././hal/sam3u1c/inc/udc.h **** 	udd_detach();
 334              	 .loc 3 205 0
 335 0004 014B     	 ldr r3,.L31
 336 0006 9847     	 blx r3
 337              	.LVL11:
 206:.././hal/sam3u1c/inc/udc.h **** }
 338              	 .loc 3 206 0
 339 0008 00BF     	 nop
 340 000a 80BD     	 pop {r7,pc}
 341              	.L32:
 342              	 .align 2
 343              	.L31:
 344 000c 00000000 	 .word udd_detach
 345              	 .cfi_endproc
 346              	.LFE179:
 348              	 .global g_captureinprogress
 349              	 .section .data.g_captureinprogress,"aw",%progbits
 352              	g_captureinprogress:
 353 0000 01       	 .byte 1
 354              	 .section .data.main_b_vendor_enable,"aw",%progbits
 357              	main_b_vendor_enable:
 358 0000 01       	 .byte 1
 359              	 .global USB_PWR_STATE
 360              	 .section .bss.USB_PWR_STATE,"aw",%nobits
 363              	USB_PWR_STATE:
 364 0000 00       	 .space 1
 365              	 .section .bss.main_buf_loopback,"aw",%nobits
 366              	 .align 2
 369              	main_buf_loopback:
 370 0000 00000000 	 .space 1024
 370      00000000 
 370      00000000 
 370      00000000 
 370      00000000 
 371              	 .section .text.main_suspend_action,"ax",%progbits
 372              	 .align 1
 373              	 .global main_suspend_action
 374              	 .syntax unified
 375              	 .thumb
 376              	 .thumb_func
 377              	 .fpu softvfp
 379              	main_suspend_action:
 380              	.LFB190:
 381              	 .file 4 "usb.c"
   1:usb.c         **** /*
   2:usb.c         ****   Copyright (c) 2014-2015 NewAE Technology Inc. All rights reserved.
   3:usb.c         ****   This program is free software: you can redistribute it and/or modify
   4:usb.c         ****   it under the terms of the GNU General Public License as published by
   5:usb.c         ****   the Free Software Foundation, either version 3 of the License, or
   6:usb.c         ****   (at your option) any later version.
   7:usb.c         ****   This program is distributed in the hope that it will be useful,
   8:usb.c         ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
   9:usb.c         ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  10:usb.c         ****   GNU General Public License for more details.
  11:usb.c         ****   You should have received a copy of the GNU General Public License
  12:usb.c         ****   along with this program.  If not, see <http://www.gnu.org/licenses/>.
  13:usb.c         **** */
  14:usb.c         **** 
  15:usb.c         **** #include <asf.h>
  16:usb.c         **** #include "conf_usb.h"
  17:usb.c         **** #include "stdio_serial.h"
  18:usb.c         **** #include "ui.h"
  19:usb.c         **** #include "genclk.h"
  20:usb.c         **** #include "usb.h"
  21:usb.c         **** #include "usb_xmem.h"
  22:usb.c         **** #include "fpga_program.h"
  23:usb.c         **** #include <string.h>
  24:usb.c         **** 
  25:usb.c         **** #define FW_VER_MAJOR 0
  26:usb.c         **** #define FW_VER_MINOR 10
  27:usb.c         **** #define FW_VER_DEBUG 0
  28:usb.c         **** 
  29:usb.c         **** #define REQ_MEMREAD_BULK 0x10
  30:usb.c         **** #define REQ_MEMWRITE_BULK 0x11
  31:usb.c         **** #define REQ_MEMREAD_CTRL 0x12
  32:usb.c         **** #define REQ_MEMWRITE_CTRL 0x13
  33:usb.c         **** #define REQ_MEMSTREAM 0x14
  34:usb.c         **** #define REQ_FPGA_STATUS 0x15
  35:usb.c         **** #define REQ_FPGA_PROGRAM 0x16
  36:usb.c         **** #define REQ_FW_VERSION 0x17
  37:usb.c         **** #define REQ_USART0_DATA 0x1A
  38:usb.c         **** #define REQ_USART0_CONFIG 0x1B
  39:usb.c         **** #define REQ_SCARD_DATA 0x1C
  40:usb.c         **** #define REQ_SCARD_CONFIG 0x1D
  41:usb.c         **** #define REQ_SCARD_AUX 0x1E
  42:usb.c         **** #define REQ_USART2DUMP_ENABLE 0x1F
  43:usb.c         **** #define REQ_XMEGA_PROGRAM 0x20
  44:usb.c         **** #define REQ_AVR_PROGRAM 0x21
  45:usb.c         **** #define REQ_SAM3U_CFG 0x22
  46:usb.c         **** #define REQ_CC_PROGRAM 0x23
  47:usb.c         **** #define REQ_CHANGE_PWR 0x24
  48:usb.c         **** #define REQ_FPGA_RESET 0x25
  49:usb.c         **** 
  50:usb.c         **** volatile bool g_captureinprogress = true;
  51:usb.c         **** 
  52:usb.c         **** static volatile bool main_b_vendor_enable = true;
  53:usb.c         **** 
  54:usb.c         **** uint8_t USB_PWR_STATE = 0;
  55:usb.c         **** 
  56:usb.c         **** COMPILER_WORD_ALIGNED
  57:usb.c         **** static uint8_t main_buf_loopback[MAIN_LOOPBACK_SIZE];
  58:usb.c         **** 
  59:usb.c         **** void main_vendor_bulk_in_received(udd_ep_status_t status,
  60:usb.c         ****                                   iram_size_t nb_transfered, udd_ep_id_t ep);
  61:usb.c         **** void main_vendor_bulk_out_received(udd_ep_status_t status,
  62:usb.c         ****                                    iram_size_t nb_transfered, udd_ep_id_t ep);
  63:usb.c         **** 
  64:usb.c         **** //this stuff just turns leds on and off
  65:usb.c         **** void main_suspend_action(void)
  66:usb.c         **** {
 382              	 .loc 4 66 0
 383              	 .cfi_startproc
 384              	 
 385              	 
 386              	 
 387 0000 80B4     	 push {r7}
 388              	.LCFI17:
 389              	 .cfi_def_cfa_offset 4
 390              	 .cfi_offset 7,-4
 391 0002 00AF     	 add r7,sp,#0
 392              	.LCFI18:
 393              	 .cfi_def_cfa_register 7
  67:usb.c         **** }
 394              	 .loc 4 67 0
 395 0004 00BF     	 nop
 396 0006 BD46     	 mov sp,r7
 397              	.LCFI19:
 398              	 .cfi_def_cfa_register 13
 399              	 
 400 0008 80BC     	 pop {r7}
 401              	.LCFI20:
 402              	 .cfi_restore 7
 403              	 .cfi_def_cfa_offset 0
 404 000a 7047     	 bx lr
 405              	 .cfi_endproc
 406              	.LFE190:
 408              	 .section .text.main_resume_action,"ax",%progbits
 409              	 .align 1
 410              	 .global main_resume_action
 411              	 .syntax unified
 412              	 .thumb
 413              	 .thumb_func
 414              	 .fpu softvfp
 416              	main_resume_action:
 417              	.LFB191:
  68:usb.c         **** 
  69:usb.c         **** void main_resume_action(void)
  70:usb.c         **** {
 418              	 .loc 4 70 0
 419              	 .cfi_startproc
 420              	 
 421              	 
 422              	 
 423 0000 80B4     	 push {r7}
 424              	.LCFI21:
 425              	 .cfi_def_cfa_offset 4
 426              	 .cfi_offset 7,-4
 427 0002 00AF     	 add r7,sp,#0
 428              	.LCFI22:
 429              	 .cfi_def_cfa_register 7
  71:usb.c         **** }
 430              	 .loc 4 71 0
 431 0004 00BF     	 nop
 432 0006 BD46     	 mov sp,r7
 433              	.LCFI23:
 434              	 .cfi_def_cfa_register 13
 435              	 
 436 0008 80BC     	 pop {r7}
 437              	.LCFI24:
 438              	 .cfi_restore 7
 439              	 .cfi_def_cfa_offset 0
 440 000a 7047     	 bx lr
 441              	 .cfi_endproc
 442              	.LFE191:
 444              	 .section .text.main_sof_action,"ax",%progbits
 445              	 .align 1
 446              	 .global main_sof_action
 447              	 .syntax unified
 448              	 .thumb
 449              	 .thumb_func
 450              	 .fpu softvfp
 452              	main_sof_action:
 453              	.LFB192:
  72:usb.c         **** 
  73:usb.c         **** void main_sof_action(void)
  74:usb.c         **** {
 454              	 .loc 4 74 0
 455              	 .cfi_startproc
 456              	 
 457              	 
 458              	 
 459 0000 80B4     	 push {r7}
 460              	.LCFI25:
 461              	 .cfi_def_cfa_offset 4
 462              	 .cfi_offset 7,-4
 463 0002 00AF     	 add r7,sp,#0
 464              	.LCFI26:
 465              	 .cfi_def_cfa_register 7
  75:usb.c         ****     if (!main_b_vendor_enable)
 466              	 .loc 4 75 0
 467 0004 044B     	 ldr r3,.L37
 468 0006 1B78     	 ldrb r3,[r3]
 469 0008 DBB2     	 uxtb r3,r3
 470 000a 83F00103 	 eor r3,r3,#1
 471 000e DBB2     	 uxtb r3,r3
 472 0010 002B     	 cmp r3,#0
  76:usb.c         ****         return;
  77:usb.c         **** }
 473              	 .loc 4 77 0
 474 0012 BD46     	 mov sp,r7
 475              	.LCFI27:
 476              	 .cfi_def_cfa_register 13
 477              	 
 478 0014 80BC     	 pop {r7}
 479              	.LCFI28:
 480              	 .cfi_restore 7
 481              	 .cfi_def_cfa_offset 0
 482 0016 7047     	 bx lr
 483              	.L38:
 484              	 .align 2
 485              	.L37:
 486 0018 00000000 	 .word main_b_vendor_enable
 487              	 .cfi_endproc
 488              	.LFE192:
 490              	 .section .text.main_vendor_enable,"ax",%progbits
 491              	 .align 1
 492              	 .global main_vendor_enable
 493              	 .syntax unified
 494              	 .thumb
 495              	 .thumb_func
 496              	 .fpu softvfp
 498              	main_vendor_enable:
 499              	.LFB193:
  78:usb.c         **** 
  79:usb.c         **** bool main_vendor_enable(void)
  80:usb.c         **** {
 500              	 .loc 4 80 0
 501              	 .cfi_startproc
 502              	 
 503              	 
 504 0000 80B5     	 push {r7,lr}
 505              	.LCFI29:
 506              	 .cfi_def_cfa_offset 8
 507              	 .cfi_offset 7,-8
 508              	 .cfi_offset 14,-4
 509 0002 00AF     	 add r7,sp,#0
 510              	.LCFI30:
 511              	 .cfi_def_cfa_register 7
  81:usb.c         ****     main_b_vendor_enable = true;
 512              	 .loc 4 81 0
 513 0004 054B     	 ldr r3,.L41
 514 0006 0122     	 movs r2,#1
 515 0008 1A70     	 strb r2,[r3]
  82:usb.c         ****     // Start data reception on OUT endpoints
  83:usb.c         **** #if UDI_VENDOR_EPS_SIZE_BULK_FS
  84:usb.c         ****     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
  85:usb.c         ****     udi_vendor_bulk_out_run(
 516              	 .loc 4 85 0
 517 000a 054A     	 ldr r2,.L41+4
 518 000c 4FF48061 	 mov r1,#1024
 519 0010 0448     	 ldr r0,.L41+8
 520 0012 054B     	 ldr r3,.L41+12
 521 0014 9847     	 blx r3
 522              	.LVL12:
  86:usb.c         ****         main_buf_loopback,
  87:usb.c         ****         sizeof(main_buf_loopback),
  88:usb.c         ****         main_vendor_bulk_out_received);
  89:usb.c         **** #endif
  90:usb.c         ****     return true;
 523              	 .loc 4 90 0
 524 0016 0123     	 movs r3,#1
  91:usb.c         **** }
 525              	 .loc 4 91 0
 526 0018 1846     	 mov r0,r3
 527 001a 80BD     	 pop {r7,pc}
 528              	.L42:
 529              	 .align 2
 530              	.L41:
 531 001c 00000000 	 .word main_b_vendor_enable
 532 0020 00000000 	 .word main_vendor_bulk_out_received
 533 0024 00000000 	 .word main_buf_loopback
 534 0028 00000000 	 .word udi_vendor_bulk_out_run
 535              	 .cfi_endproc
 536              	.LFE193:
 538              	 .section .text.main_vendor_disable,"ax",%progbits
 539              	 .align 1
 540              	 .global main_vendor_disable
 541              	 .syntax unified
 542              	 .thumb
 543              	 .thumb_func
 544              	 .fpu softvfp
 546              	main_vendor_disable:
 547              	.LFB194:
  92:usb.c         **** 
  93:usb.c         **** void main_vendor_disable(void)
  94:usb.c         **** {
 548              	 .loc 4 94 0
 549              	 .cfi_startproc
 550              	 
 551              	 
 552              	 
 553 0000 80B4     	 push {r7}
 554              	.LCFI31:
 555              	 .cfi_def_cfa_offset 4
 556              	 .cfi_offset 7,-4
 557 0002 00AF     	 add r7,sp,#0
 558              	.LCFI32:
 559              	 .cfi_def_cfa_register 7
  95:usb.c         ****     main_b_vendor_enable = false;
 560              	 .loc 4 95 0
 561 0004 034B     	 ldr r3,.L44
 562 0006 0022     	 movs r2,#0
 563 0008 1A70     	 strb r2,[r3]
  96:usb.c         **** }
 564              	 .loc 4 96 0
 565 000a 00BF     	 nop
 566 000c BD46     	 mov sp,r7
 567              	.LCFI33:
 568              	 .cfi_def_cfa_register 13
 569              	 
 570 000e 80BC     	 pop {r7}
 571              	.LCFI34:
 572              	 .cfi_restore 7
 573              	 .cfi_def_cfa_offset 0
 574 0010 7047     	 bx lr
 575              	.L45:
 576 0012 00BF     	 .align 2
 577              	.L44:
 578 0014 00000000 	 .word main_b_vendor_enable
 579              	 .cfi_endproc
 580              	.LFE194:
 582              	 .section .bss.ctrlbuffer,"aw",%nobits
 583              	 .align 2
 586              	ctrlbuffer:
 587 0000 00000000 	 .space 64
 587      00000000 
 587      00000000 
 587      00000000 
 587      00000000 
 588              	 .section .bss.blockendpoint_usage,"aw",%nobits
 591              	blockendpoint_usage:
 592 0000 00       	 .space 1
 593              	 .section .bss.ctrlmemread_buf,"aw",%nobits
 594              	 .align 2
 597              	ctrlmemread_buf:
 598 0000 00000000 	 .space 4
 599              	 .section .bss.ctrlmemread_size,"aw",%nobits
 600              	 .align 2
 603              	ctrlmemread_size:
 604 0000 00000000 	 .space 4
 605              	 .section .text.ctrl_readmem_bulk,"ax",%progbits
 606              	 .align 1
 607              	 .global ctrl_readmem_bulk
 608              	 .syntax unified
 609              	 .thumb
 610              	 .thumb_func
 611              	 .fpu softvfp
 613              	ctrl_readmem_bulk:
 614              	.LFB195:
  97:usb.c         **** 
  98:usb.c         **** #define REQ_MEMREAD_BULK 0x10
  99:usb.c         **** #define REQ_MEMWRITE_BULK 0x11
 100:usb.c         **** #define REQ_MEMREAD_CTRL 0x12
 101:usb.c         **** #define REQ_MEMWRITE_CTRL 0x13
 102:usb.c         **** #define REQ_FW_VERSION 0x17
 103:usb.c         **** #define REQ_SAM3U_CFG 0x22
 104:usb.c         **** 
 105:usb.c         **** COMPILER_WORD_ALIGNED static uint8_t ctrlbuffer[64];
 106:usb.c         **** #define CTRLBUFFER_WORDPTR ((uint32_t *) ((void *)ctrlbuffer))
 107:usb.c         **** 
 108:usb.c         **** typedef enum {
 109:usb.c         ****     bep_emem=0,
 110:usb.c         ****     bep_fpgabitstream=10
 111:usb.c         **** } blockep_usage_t;
 112:usb.c         **** 
 113:usb.c         **** static blockep_usage_t blockendpoint_usage = bep_emem;
 114:usb.c         **** 
 115:usb.c         **** static uint8_t * ctrlmemread_buf;
 116:usb.c         **** static unsigned int ctrlmemread_size;
 117:usb.c         **** 
 118:usb.c         **** void ctrl_readmem_bulk(void);
 119:usb.c         **** void ctrl_readmem_ctrl(void);
 120:usb.c         **** void ctrl_writemem_bulk(void);
 121:usb.c         **** void ctrl_writemem_ctrl(void);
 122:usb.c         **** void ctrl_progfpga_bulk(void);
 123:usb.c         **** 
 124:usb.c         **** 
 125:usb.c         **** void ctrl_readmem_bulk(void){
 615              	 .loc 4 125 0
 616              	 .cfi_startproc
 617              	 
 618              	 
 619 0000 80B5     	 push {r7,lr}
 620              	.LCFI35:
 621              	 .cfi_def_cfa_offset 8
 622              	 .cfi_offset 7,-8
 623              	 .cfi_offset 14,-4
 624 0002 82B0     	 sub sp,sp,#8
 625              	.LCFI36:
 626              	 .cfi_def_cfa_offset 16
 627 0004 00AF     	 add r7,sp,#0
 628              	.LCFI37:
 629              	 .cfi_def_cfa_register 7
 126:usb.c         ****     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
 630              	 .loc 4 126 0
 631 0006 0F4B     	 ldr r3,.L48
 632 0008 1B68     	 ldr r3,[r3]
 633 000a 7B60     	 str r3,[r7,#4]
 127:usb.c         ****     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
 634              	 .loc 4 127 0
 635 000c 0D4B     	 ldr r3,.L48
 636 000e 5B68     	 ldr r3,[r3,#4]
 637 0010 3B60     	 str r3,[r7]
 128:usb.c         **** 
 129:usb.c         ****     FPGA_releaselock();
 638              	 .loc 4 129 0
 639 0012 0D4B     	 ldr r3,.L48+4
 640 0014 9847     	 blx r3
 641              	.LVL13:
 130:usb.c         ****     while(!FPGA_setlock(fpga_blockin));
 642              	 .loc 4 130 0
 643 0016 00BF     	 nop
 644              	.L47:
 645              	 .loc 4 130 0 is_stmt 0 discriminator 1
 646 0018 0220     	 movs r0,#2
 647 001a 0C4B     	 ldr r3,.L48+8
 648 001c 9847     	 blx r3
 649              	.LVL14:
 650 001e 0346     	 mov r3,r0
 651 0020 002B     	 cmp r3,#0
 652 0022 F9D0     	 beq .L47
 131:usb.c         **** 
 132:usb.c         ****     FPGA_setaddr(address);
 653              	 .loc 4 132 0 is_stmt 1
 654 0024 3868     	 ldr r0,[r7]
 655 0026 0A4B     	 ldr r3,.L48+12
 656 0028 9847     	 blx r3
 657              	.LVL15:
 133:usb.c         **** 
 134:usb.c         ****     /* Do memory read */
 135:usb.c         ****     udi_vendor_bulk_in_run(
 658              	 .loc 4 135 0
 659 002a 0A4A     	 ldr r2,.L48+16
 660 002c 7968     	 ldr r1,[r7,#4]
 661 002e 4FF0C040 	 mov r0,#1610612736
 662 0032 094B     	 ldr r3,.L48+20
 663 0034 9847     	 blx r3
 664              	.LVL16:
 136:usb.c         ****         (uint8_t *) PSRAM_BASE_ADDRESS,
 137:usb.c         ****         buflen,
 138:usb.c         ****         main_vendor_bulk_in_received
 139:usb.c         ****         );
 140:usb.c         ****     FPGA_releaselock();
 665              	 .loc 4 140 0
 666 0036 044B     	 ldr r3,.L48+4
 667 0038 9847     	 blx r3
 668              	.LVL17:
 141:usb.c         **** }
 669              	 .loc 4 141 0
 670 003a 00BF     	 nop
 671 003c 0837     	 adds r7,r7,#8
 672              	.LCFI38:
 673              	 .cfi_def_cfa_offset 8
 674 003e BD46     	 mov sp,r7
 675              	.LCFI39:
 676              	 .cfi_def_cfa_register 13
 677              	 
 678 0040 80BD     	 pop {r7,pc}
 679              	.L49:
 680 0042 00BF     	 .align 2
 681              	.L48:
 682 0044 00000000 	 .word ctrlbuffer
 683 0048 00000000 	 .word FPGA_releaselock
 684 004c 00000000 	 .word FPGA_setlock
 685 0050 00000000 	 .word FPGA_setaddr
 686 0054 00000000 	 .word main_vendor_bulk_in_received
 687 0058 00000000 	 .word udi_vendor_bulk_in_run
 688              	 .cfi_endproc
 689              	.LFE195:
 691              	 .section .text.ctrl_readmem_ctrl,"ax",%progbits
 692              	 .align 1
 693              	 .global ctrl_readmem_ctrl
 694              	 .syntax unified
 695              	 .thumb
 696              	 .thumb_func
 697              	 .fpu softvfp
 699              	ctrl_readmem_ctrl:
 700              	.LFB196:
 142:usb.c         **** 
 143:usb.c         **** void ctrl_readmem_ctrl(void){
 701              	 .loc 4 143 0
 702              	 .cfi_startproc
 703              	 
 704              	 
 705 0000 80B5     	 push {r7,lr}
 706              	.LCFI40:
 707              	 .cfi_def_cfa_offset 8
 708              	 .cfi_offset 7,-8
 709              	 .cfi_offset 14,-4
 710 0002 82B0     	 sub sp,sp,#8
 711              	.LCFI41:
 712              	 .cfi_def_cfa_offset 16
 713 0004 00AF     	 add r7,sp,#0
 714              	.LCFI42:
 715              	 .cfi_def_cfa_register 7
 144:usb.c         ****     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
 716              	 .loc 4 144 0
 717 0006 0F4B     	 ldr r3,.L52
 718 0008 1B68     	 ldr r3,[r3]
 719 000a 7B60     	 str r3,[r7,#4]
 145:usb.c         ****     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
 720              	 .loc 4 145 0
 721 000c 0D4B     	 ldr r3,.L52
 722 000e 5B68     	 ldr r3,[r3,#4]
 723 0010 3B60     	 str r3,[r7]
 146:usb.c         **** 
 147:usb.c         ****     FPGA_releaselock();
 724              	 .loc 4 147 0
 725 0012 0D4B     	 ldr r3,.L52+4
 726 0014 9847     	 blx r3
 727              	.LVL18:
 148:usb.c         ****     while(!FPGA_setlock(fpga_ctrlmem));
 728              	 .loc 4 148 0
 729 0016 00BF     	 nop
 730              	.L51:
 731              	 .loc 4 148 0 is_stmt 0 discriminator 1
 732 0018 0520     	 movs r0,#5
 733 001a 0C4B     	 ldr r3,.L52+8
 734 001c 9847     	 blx r3
 735              	.LVL19:
 736 001e 0346     	 mov r3,r0
 737 0020 002B     	 cmp r3,#0
 738 0022 F9D0     	 beq .L51
 149:usb.c         **** 
 150:usb.c         ****     /* Set address */
 151:usb.c         ****     FPGA_setaddr(address);
 739              	 .loc 4 151 0 is_stmt 1
 740 0024 3868     	 ldr r0,[r7]
 741 0026 0A4B     	 ldr r3,.L52+12
 742 0028 9847     	 blx r3
 743              	.LVL20:
 152:usb.c         **** 
 153:usb.c         ****     /* Do memory read */
 154:usb.c         ****     ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
 744              	 .loc 4 154 0
 745 002a 0A4B     	 ldr r3,.L52+16
 746 002c 4FF0C042 	 mov r2,#1610612736
 747 0030 1A60     	 str r2,[r3]
 155:usb.c         **** 
 156:usb.c         ****     /* Set size to read */
 157:usb.c         ****     ctrlmemread_size = buflen;
 748              	 .loc 4 157 0
 749 0032 094A     	 ldr r2,.L52+20
 750 0034 7B68     	 ldr r3,[r7,#4]
 751 0036 1360     	 str r3,[r2]
 158:usb.c         **** 
 159:usb.c         ****     /* Start Transaction */
 160:usb.c         ****     FPGA_releaselock();
 752              	 .loc 4 160 0
 753 0038 034B     	 ldr r3,.L52+4
 754 003a 9847     	 blx r3
 755              	.LVL21:
 161:usb.c         **** }
 756              	 .loc 4 161 0
 757 003c 00BF     	 nop
 758 003e 0837     	 adds r7,r7,#8
 759              	.LCFI43:
 760              	 .cfi_def_cfa_offset 8
 761 0040 BD46     	 mov sp,r7
 762              	.LCFI44:
 763              	 .cfi_def_cfa_register 13
 764              	 
 765 0042 80BD     	 pop {r7,pc}
 766              	.L53:
 767              	 .align 2
 768              	.L52:
 769 0044 00000000 	 .word ctrlbuffer
 770 0048 00000000 	 .word FPGA_releaselock
 771 004c 00000000 	 .word FPGA_setlock
 772 0050 00000000 	 .word FPGA_setaddr
 773 0054 00000000 	 .word ctrlmemread_buf
 774 0058 00000000 	 .word ctrlmemread_size
 775              	 .cfi_endproc
 776              	.LFE196:
 778              	 .section .text.ctrl_writemem_ctrl,"ax",%progbits
 779              	 .align 1
 780              	 .global ctrl_writemem_ctrl
 781              	 .syntax unified
 782              	 .thumb
 783              	 .thumb_func
 784              	 .fpu softvfp
 786              	ctrl_writemem_ctrl:
 787              	.LFB197:
 162:usb.c         **** 
 163:usb.c         **** 
 164:usb.c         **** void ctrl_writemem_ctrl(void){
 788              	 .loc 4 164 0
 789              	 .cfi_startproc
 790              	 
 791              	 
 792 0000 80B5     	 push {r7,lr}
 793              	.LCFI45:
 794              	 .cfi_def_cfa_offset 8
 795              	 .cfi_offset 7,-8
 796              	 .cfi_offset 14,-4
 797 0002 84B0     	 sub sp,sp,#16
 798              	.LCFI46:
 799              	 .cfi_def_cfa_offset 24
 800 0004 00AF     	 add r7,sp,#0
 801              	.LCFI47:
 802              	 .cfi_def_cfa_register 7
 165:usb.c         ****     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
 803              	 .loc 4 165 0
 804 0006 164B     	 ldr r3,.L58
 805 0008 1B68     	 ldr r3,[r3]
 806 000a BB60     	 str r3,[r7,#8]
 166:usb.c         ****     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
 807              	 .loc 4 166 0
 808 000c 144B     	 ldr r3,.L58
 809 000e 5B68     	 ldr r3,[r3,#4]
 810 0010 7B60     	 str r3,[r7,#4]
 167:usb.c         **** 
 168:usb.c         ****     uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
 811              	 .loc 4 168 0
 812 0012 144B     	 ldr r3,.L58+4
 813 0014 3B60     	 str r3,[r7]
 169:usb.c         **** 
 170:usb.c         ****     //printf("Writing to %x, %d\n", address, buflen);
 171:usb.c         **** 
 172:usb.c         ****     FPGA_releaselock();
 814              	 .loc 4 172 0
 815 0016 144B     	 ldr r3,.L58+8
 816 0018 9847     	 blx r3
 817              	.LVL22:
 173:usb.c         ****     while(!FPGA_setlock(fpga_generic));
 818              	 .loc 4 173 0
 819 001a 00BF     	 nop
 820              	.L55:
 821              	 .loc 4 173 0 is_stmt 0 discriminator 1
 822 001c 0120     	 movs r0,#1
 823 001e 134B     	 ldr r3,.L58+12
 824 0020 9847     	 blx r3
 825              	.LVL23:
 826 0022 0346     	 mov r3,r0
 827 0024 002B     	 cmp r3,#0
 828 0026 F9D0     	 beq .L55
 174:usb.c         **** 
 175:usb.c         ****     /* Set address */
 176:usb.c         ****     FPGA_setaddr(address);
 829              	 .loc 4 176 0 is_stmt 1
 830 0028 7868     	 ldr r0,[r7,#4]
 831 002a 114B     	 ldr r3,.L58+16
 832 002c 9847     	 blx r3
 833              	.LVL24:
 834              	.LBB2:
 177:usb.c         **** 
 178:usb.c         ****     /* Start Transaction */
 179:usb.c         **** 
 180:usb.c         ****     /* Do memory write */
 181:usb.c         ****     for(unsigned int i = 0; i < buflen; i++){
 835              	 .loc 4 181 0
 836 002e 0023     	 movs r3,#0
 837 0030 FB60     	 str r3,[r7,#12]
 838 0032 0BE0     	 b .L56
 839              	.L57:
 182:usb.c         ****         xram[i] = ctrlbuf_payload[i];
 840              	 .loc 4 182 0 discriminator 3
 841 0034 3A68     	 ldr r2,[r7]
 842 0036 FB68     	 ldr r3,[r7,#12]
 843 0038 1A44     	 add r2,r2,r3
 844 003a 0E4B     	 ldr r3,.L58+20
 845 003c 1968     	 ldr r1,[r3]
 846 003e FB68     	 ldr r3,[r7,#12]
 847 0040 0B44     	 add r3,r3,r1
 848 0042 1278     	 ldrb r2,[r2]
 849 0044 1A70     	 strb r2,[r3]
 181:usb.c         ****         xram[i] = ctrlbuf_payload[i];
 850              	 .loc 4 181 0 discriminator 3
 851 0046 FB68     	 ldr r3,[r7,#12]
 852 0048 0133     	 adds r3,r3,#1
 853 004a FB60     	 str r3,[r7,#12]
 854              	.L56:
 181:usb.c         ****         xram[i] = ctrlbuf_payload[i];
 855              	 .loc 4 181 0 is_stmt 0 discriminator 1
 856 004c FA68     	 ldr r2,[r7,#12]
 857 004e BB68     	 ldr r3,[r7,#8]
 858 0050 9A42     	 cmp r2,r3
 859 0052 EFD3     	 bcc .L57
 860              	.LBE2:
 183:usb.c         ****     }
 184:usb.c         **** 
 185:usb.c         ****     FPGA_releaselock();
 861              	 .loc 4 185 0 is_stmt 1
 862 0054 044B     	 ldr r3,.L58+8
 863 0056 9847     	 blx r3
 864              	.LVL25:
 186:usb.c         **** }
 865              	 .loc 4 186 0
 866 0058 00BF     	 nop
 867 005a 1037     	 adds r7,r7,#16
 868              	.LCFI48:
 869              	 .cfi_def_cfa_offset 8
 870 005c BD46     	 mov sp,r7
 871              	.LCFI49:
 872              	 .cfi_def_cfa_register 13
 873              	 
 874 005e 80BD     	 pop {r7,pc}
 875              	.L59:
 876              	 .align 2
 877              	.L58:
 878 0060 00000000 	 .word ctrlbuffer
 879 0064 08000000 	 .word ctrlbuffer+8
 880 0068 00000000 	 .word FPGA_releaselock
 881 006c 00000000 	 .word FPGA_setlock
 882 0070 00000000 	 .word FPGA_setaddr
 883 0074 00000000 	 .word xram
 884              	 .cfi_endproc
 885              	.LFE197:
 887              	 .section .bss.bulkread_address,"aw",%nobits
 888              	 .align 2
 891              	bulkread_address:
 892 0000 00000000 	 .space 4
 893              	 .section .bss.bulkread_len,"aw",%nobits
 894              	 .align 2
 897              	bulkread_len:
 898 0000 00000000 	 .space 4
 899              	 .section .text.ctrl_writemem_bulk,"ax",%progbits
 900              	 .align 1
 901              	 .global ctrl_writemem_bulk
 902              	 .syntax unified
 903              	 .thumb
 904              	 .thumb_func
 905              	 .fpu softvfp
 907              	ctrl_writemem_bulk:
 908              	.LFB198:
 187:usb.c         **** 
 188:usb.c         **** static uint32_t bulkread_address = 0;
 189:usb.c         **** static uint32_t bulkread_len = 0;
 190:usb.c         **** 
 191:usb.c         **** void ctrl_writemem_bulk(void){
 909              	 .loc 4 191 0
 910              	 .cfi_startproc
 911              	 
 912              	 
 913 0000 80B5     	 push {r7,lr}
 914              	.LCFI50:
 915              	 .cfi_def_cfa_offset 8
 916              	 .cfi_offset 7,-8
 917              	 .cfi_offset 14,-4
 918 0002 82B0     	 sub sp,sp,#8
 919              	.LCFI51:
 920              	 .cfi_def_cfa_offset 16
 921 0004 00AF     	 add r7,sp,#0
 922              	.LCFI52:
 923              	 .cfi_def_cfa_register 7
 192:usb.c         **** //uint32_t buflen = *(CTRLBUFFER_WORDPTR);
 193:usb.c         ****     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
 924              	 .loc 4 193 0
 925 0006 0A4B     	 ldr r3,.L62
 926 0008 5B68     	 ldr r3,[r3,#4]
 927 000a 7B60     	 str r3,[r7,#4]
 194:usb.c         **** 
 195:usb.c         ****     // TODO: see block in
 196:usb.c         ****     FPGA_releaselock();
 928              	 .loc 4 196 0
 929 000c 094B     	 ldr r3,.L62+4
 930 000e 9847     	 blx r3
 931              	.LVL26:
 197:usb.c         ****     while(!FPGA_setlock(fpga_blockout));
 932              	 .loc 4 197 0
 933 0010 00BF     	 nop
 934              	.L61:
 935              	 .loc 4 197 0 is_stmt 0 discriminator 1
 936 0012 0420     	 movs r0,#4
 937 0014 084B     	 ldr r3,.L62+8
 938 0016 9847     	 blx r3
 939              	.LVL27:
 940 0018 0346     	 mov r3,r0
 941 001a 002B     	 cmp r3,#0
 942 001c F9D0     	 beq .L61
 198:usb.c         **** 
 199:usb.c         ****     /* Set address */
 200:usb.c         ****     FPGA_setaddr(address);
 943              	 .loc 4 200 0 is_stmt 1
 944 001e 7868     	 ldr r0,[r7,#4]
 945 0020 064B     	 ldr r3,.L62+12
 946 0022 9847     	 blx r3
 947              	.LVL28:
 201:usb.c         **** 
 202:usb.c         ****     /* Transaction done in generic callback */
 203:usb.c         ****     FPGA_releaselock();
 948              	 .loc 4 203 0
 949 0024 034B     	 ldr r3,.L62+4
 950 0026 9847     	 blx r3
 951              	.LVL29:
 204:usb.c         **** }
 952              	 .loc 4 204 0
 953 0028 00BF     	 nop
 954 002a 0837     	 adds r7,r7,#8
 955              	.LCFI53:
 956              	 .cfi_def_cfa_offset 8
 957 002c BD46     	 mov sp,r7
 958              	.LCFI54:
 959              	 .cfi_def_cfa_register 13
 960              	 
 961 002e 80BD     	 pop {r7,pc}
 962              	.L63:
 963              	 .align 2
 964              	.L62:
 965 0030 00000000 	 .word ctrlbuffer
 966 0034 00000000 	 .word FPGA_releaselock
 967 0038 00000000 	 .word FPGA_setlock
 968 003c 00000000 	 .word FPGA_setaddr
 969              	 .cfi_endproc
 970              	.LFE198:
 972              	 .section .text.ctrl_sam3ucfg_cb,"ax",%progbits
 973              	 .align 1
 974              	 .syntax unified
 975              	 .thumb
 976              	 .thumb_func
 977              	 .fpu softvfp
 979              	ctrl_sam3ucfg_cb:
 980              	.LFB199:
 205:usb.c         **** 
 206:usb.c         **** static void ctrl_sam3ucfg_cb(void)
 207:usb.c         **** {
 981              	 .loc 4 207 0
 982              	 .cfi_startproc
 983              	 
 984              	 
 985 0000 80B5     	 push {r7,lr}
 986              	.LCFI55:
 987              	 .cfi_def_cfa_offset 8
 988              	 .cfi_offset 7,-8
 989              	 .cfi_offset 14,-4
 990 0002 00AF     	 add r7,sp,#0
 991              	.LCFI56:
 992              	 .cfi_def_cfa_register 7
 208:usb.c         ****     switch(udd_g_ctrlreq.req.wValue & 0xFF)
 993              	 .loc 4 208 0
 994 0004 184B     	 ldr r3,.L72
 995 0006 5B88     	 ldrh r3,[r3,#2]
 996 0008 DBB2     	 uxtb r3,r3
 997 000a 022B     	 cmp r3,#2
 998 000c 0ED0     	 beq .L66
 999 000e 032B     	 cmp r3,#3
 1000 0010 10D0     	 beq .L67
 1001 0012 012B     	 cmp r3,#1
 1002 0014 00D0     	 beq .L68
 209:usb.c         ****     {
 210:usb.c         ****         /* Turn on slow clock */
 211:usb.c         ****     case 0x01:
 212:usb.c         ****         osc_enable(OSC_MAINCK_XTAL);
 213:usb.c         ****         osc_wait_ready(OSC_MAINCK_XTAL);
 214:usb.c         ****         pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
 215:usb.c         ****         break;
 216:usb.c         **** 
 217:usb.c         ****         /* Turn off slow clock */
 218:usb.c         ****     case 0x02:
 219:usb.c         ****         pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
 220:usb.c         ****         break;
 221:usb.c         **** 
 222:usb.c         ****         /* Jump to ROM-resident bootloader */
 223:usb.c         ****     case 0x03:
 224:usb.c         ****         /* Turn off connected stuff */
 225:usb.c         ****         //board_power(0);
 226:usb.c         **** 
 227:usb.c         ****         /* Clear ROM-mapping bit. */
 228:usb.c         ****         efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
 229:usb.c         **** 
 230:usb.c         ****         /* Disconnect USB (will kill connection) */
 231:usb.c         ****         udc_detach();
 232:usb.c         **** 
 233:usb.c         ****         /* With knowledge that I will rise again, I lay down my life. */
 234:usb.c         ****         while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
 235:usb.c         ****         RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
 236:usb.c         ****         while(1);
 237:usb.c         ****         break;
 238:usb.c         ****         /* Disconnect USB (will kill stuff) */
 239:usb.c         **** 
 240:usb.c         ****         /* Make the jump */
 241:usb.c         ****         break;
 242:usb.c         **** 
 243:usb.c         ****         /* Oh well, sucks to be you */
 244:usb.c         ****     default:
 245:usb.c         ****         break;
 1003              	 .loc 4 245 0
 1004 0016 24E0     	 b .L69
 1005              	.L68:
 212:usb.c         ****         osc_wait_ready(OSC_MAINCK_XTAL);
 1006              	 .loc 4 212 0
 1007 0018 0620     	 movs r0,#6
 1008 001a 144B     	 ldr r3,.L72+4
 1009 001c 9847     	 blx r3
 1010              	.LVL30:
 213:usb.c         ****         pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
 1011              	 .loc 4 213 0
 1012 001e 0620     	 movs r0,#6
 1013 0020 134B     	 ldr r3,.L72+8
 1014 0022 9847     	 blx r3
 1015              	.LVL31:
 214:usb.c         ****         break;
 1016              	 .loc 4 214 0
 1017 0024 1020     	 movs r0,#16
 1018 0026 134B     	 ldr r3,.L72+12
 1019 0028 9847     	 blx r3
 1020              	.LVL32:
 215:usb.c         **** 
 1021              	 .loc 4 215 0
 1022 002a 1AE0     	 b .L69
 1023              	.L66:
 219:usb.c         ****         break;
 1024              	 .loc 4 219 0
 1025 002c 1020     	 movs r0,#16
 1026 002e 124B     	 ldr r3,.L72+16
 1027 0030 9847     	 blx r3
 1028              	.LVL33:
 220:usb.c         **** 
 1029              	 .loc 4 220 0
 1030 0032 16E0     	 b .L69
 1031              	.L67:
 228:usb.c         **** 
 1032              	 .loc 4 228 0
 1033 0034 0122     	 movs r2,#1
 1034 0036 0C21     	 movs r1,#12
 1035 0038 1048     	 ldr r0,.L72+20
 1036 003a 114B     	 ldr r3,.L72+24
 1037 003c 9847     	 blx r3
 1038              	.LVL34:
 231:usb.c         **** 
 1039              	 .loc 4 231 0
 1040 003e 114B     	 ldr r3,.L72+28
 1041 0040 9847     	 blx r3
 1042              	.LVL35:
 234:usb.c         ****         RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
 1043              	 .loc 4 234 0
 1044 0042 00BF     	 nop
 1045              	.L70:
 234:usb.c         ****         RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
 1046              	 .loc 4 234 0 is_stmt 0 discriminator 1
 1047 0044 104B     	 ldr r3,.L72+32
 1048 0046 5B68     	 ldr r3,[r3,#4]
 1049 0048 03F40033 	 and r3,r3,#131072
 1050 004c 002B     	 cmp r3,#0
 1051 004e F9D1     	 bne .L70
 235:usb.c         ****         while(1);
 1052              	 .loc 4 235 0 is_stmt 1
 1053 0050 0D4B     	 ldr r3,.L72+32
 1054 0052 1B68     	 ldr r3,[r3]
 1055 0054 0C4A     	 ldr r2,.L72+32
 1056 0056 43F02543 	 orr r3,r3,#-1526726656
 1057 005a 43F00503 	 orr r3,r3,#5
 1058 005e 1360     	 str r3,[r2]
 1059              	.L71:
 236:usb.c         ****         break;
 1060              	 .loc 4 236 0 discriminator 1
 1061 0060 FEE7     	 b .L71
 1062              	.L69:
 246:usb.c         ****     }
 247:usb.c         **** }
 1063              	 .loc 4 247 0
 1064 0062 00BF     	 nop
 1065 0064 80BD     	 pop {r7,pc}
 1066              	.L73:
 1067 0066 00BF     	 .align 2
 1068              	.L72:
 1069 0068 00000000 	 .word udd_g_ctrlreq
 1070 006c 00000000 	 .word osc_enable
 1071 0070 00000000 	 .word osc_wait_ready
 1072 0074 00000000 	 .word pmc_switch_mck_to_mainck
 1073 0078 00000000 	 .word pmc_switch_mck_to_pllack
 1074 007c 00080E40 	 .word 1074661376
 1075 0080 00000000 	 .word efc_perform_command
 1076 0084 00000000 	 .word udc_detach
 1077 0088 00120E40 	 .word 1074663936
 1078              	 .cfi_endproc
 1079              	.LFE199:
 1081              	 .section .text.ctrl_progfpga_bulk,"ax",%progbits
 1082              	 .align 1
 1083              	 .global ctrl_progfpga_bulk
 1084              	 .syntax unified
 1085              	 .thumb
 1086              	 .thumb_func
 1087              	 .fpu softvfp
 1089              	ctrl_progfpga_bulk:
 1090              	.LFB200:
 248:usb.c         **** 
 249:usb.c         **** void ctrl_progfpga_bulk(void){
 1091              	 .loc 4 249 0
 1092              	 .cfi_startproc
 1093              	 
 1094              	 
 1095 0000 80B5     	 push {r7,lr}
 1096              	.LCFI57:
 1097              	 .cfi_def_cfa_offset 8
 1098              	 .cfi_offset 7,-8
 1099              	 .cfi_offset 14,-4
 1100 0002 00AF     	 add r7,sp,#0
 1101              	.LCFI58:
 1102              	 .cfi_def_cfa_register 7
 250:usb.c         **** 
 251:usb.c         ****     switch(udd_g_ctrlreq.req.wValue){
 1103              	 .loc 4 251 0
 1104 0004 0B4B     	 ldr r3,.L80
 1105 0006 5B88     	 ldrh r3,[r3,#2]
 1106 0008 A12B     	 cmp r3,#161
 1107 000a 07D0     	 beq .L76
 1108 000c A22B     	 cmp r3,#162
 1109 000e 0BD0     	 beq .L77
 1110 0010 A02B     	 cmp r3,#160
 1111 0012 00D0     	 beq .L78
 252:usb.c         ****     case 0xA0:
 253:usb.c         ****         fpga_program_setup1();
 254:usb.c         ****         break;
 255:usb.c         **** 
 256:usb.c         ****     case 0xA1:
 257:usb.c         ****         /* Waiting on data... */
 258:usb.c         ****         fpga_program_setup2();
 259:usb.c         ****         blockendpoint_usage = bep_fpgabitstream;
 260:usb.c         ****         break;
 261:usb.c         **** 
 262:usb.c         ****     case 0xA2:
 263:usb.c         ****         /* Done */
 264:usb.c         ****         blockendpoint_usage = bep_emem;
 265:usb.c         ****         break;
 266:usb.c         **** 
 267:usb.c         ****     default:
 268:usb.c         ****         break;
 1112              	 .loc 4 268 0
 1113 0014 0CE0     	 b .L79
 1114              	.L78:
 253:usb.c         ****         break;
 1115              	 .loc 4 253 0
 1116 0016 084B     	 ldr r3,.L80+4
 1117 0018 9847     	 blx r3
 1118              	.LVL36:
 254:usb.c         **** 
 1119              	 .loc 4 254 0
 1120 001a 09E0     	 b .L79
 1121              	.L76:
 258:usb.c         ****         blockendpoint_usage = bep_fpgabitstream;
 1122              	 .loc 4 258 0
 1123 001c 074B     	 ldr r3,.L80+8
 1124 001e 9847     	 blx r3
 1125              	.LVL37:
 259:usb.c         ****         break;
 1126              	 .loc 4 259 0
 1127 0020 074B     	 ldr r3,.L80+12
 1128 0022 0A22     	 movs r2,#10
 1129 0024 1A70     	 strb r2,[r3]
 260:usb.c         **** 
 1130              	 .loc 4 260 0
 1131 0026 03E0     	 b .L79
 1132              	.L77:
 264:usb.c         ****         break;
 1133              	 .loc 4 264 0
 1134 0028 054B     	 ldr r3,.L80+12
 1135 002a 0022     	 movs r2,#0
 1136 002c 1A70     	 strb r2,[r3]
 265:usb.c         **** 
 1137              	 .loc 4 265 0
 1138 002e 00BF     	 nop
 1139              	.L79:
 269:usb.c         ****     }
 270:usb.c         **** }
 1140              	 .loc 4 270 0
 1141 0030 00BF     	 nop
 1142 0032 80BD     	 pop {r7,pc}
 1143              	.L81:
 1144              	 .align 2
 1145              	.L80:
 1146 0034 00000000 	 .word udd_g_ctrlreq
 1147 0038 00000000 	 .word fpga_program_setup1
 1148 003c 00000000 	 .word fpga_program_setup2
 1149 0040 00000000 	 .word blockendpoint_usage
 1150              	 .cfi_endproc
 1151              	.LFE200:
 1153              	 .section .text.ctrl_change_pwr,"ax",%progbits
 1154              	 .align 1
 1155              	 .global ctrl_change_pwr
 1156              	 .syntax unified
 1157              	 .thumb
 1158              	 .thumb_func
 1159              	 .fpu softvfp
 1161              	ctrl_change_pwr:
 1162              	.LFB201:
 271:usb.c         **** 
 272:usb.c         **** void ctrl_change_pwr(void) {
 1163              	 .loc 4 272 0
 1164              	 .cfi_startproc
 1165              	 
 1166              	 
 1167              	 
 1168 0000 80B4     	 push {r7}
 1169              	.LCFI59:
 1170              	 .cfi_def_cfa_offset 4
 1171              	 .cfi_offset 7,-4
 1172 0002 00AF     	 add r7,sp,#0
 1173              	.LCFI60:
 1174              	 .cfi_def_cfa_register 7
 273:usb.c         ****     switch(udd_g_ctrlreq.req.wValue) {
 1175              	 .loc 4 273 0
 1176 0004 184B     	 ldr r3,.L88
 1177 0006 5B88     	 ldrh r3,[r3,#2]
 1178 0008 012B     	 cmp r3,#1
 1179 000a 10D0     	 beq .L84
 1180 000c 022B     	 cmp r3,#2
 1181 000e 1AD0     	 beq .L85
 1182 0010 002B     	 cmp r3,#0
 1183 0012 00D0     	 beq .L86
 274:usb.c         ****     case 0x00: //USB power off
 275:usb.c         ****         PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
 276:usb.c         ****         PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
 277:usb.c         ****         USB_PWR_STATE = 0;
 278:usb.c         ****         break;
 279:usb.c         ****     case 0x01: //Use 5V power
 280:usb.c         ****         PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
 281:usb.c         ****         PIOA->PIO_SODR = (1 << F_VB5V); //enable host power
 282:usb.c         ****         USB_PWR_STATE = 1;
 283:usb.c         ****         break;
 284:usb.c         ****     case 0x02: //Use host power
 285:usb.c         ****         PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
 286:usb.c         ****         PIOA->PIO_SODR = (1 << F_VBHOST); //enable sniff power
 287:usb.c         ****         USB_PWR_STATE = 2;
 288:usb.c         ****         break;
 289:usb.c         ****     }
 290:usb.c         **** }
 1184              	 .loc 4 290 0
 1185 0014 23E0     	 b .L87
 1186              	.L86:
 275:usb.c         ****         PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
 1187              	 .loc 4 275 0
 1188 0016 154B     	 ldr r3,.L88+4
 1189 0018 4FF00072 	 mov r2,#33554432
 1190 001c 5A63     	 str r2,[r3,#52]
 276:usb.c         ****         USB_PWR_STATE = 0;
 1191              	 .loc 4 276 0
 1192 001e 134B     	 ldr r3,.L88+4
 1193 0020 4FF08062 	 mov r2,#67108864
 1194 0024 5A63     	 str r2,[r3,#52]
 277:usb.c         ****         break;
 1195              	 .loc 4 277 0
 1196 0026 124B     	 ldr r3,.L88+8
 1197 0028 0022     	 movs r2,#0
 1198 002a 1A70     	 strb r2,[r3]
 278:usb.c         ****     case 0x01: //Use 5V power
 1199              	 .loc 4 278 0
 1200 002c 17E0     	 b .L83
 1201              	.L84:
 280:usb.c         ****         PIOA->PIO_SODR = (1 << F_VB5V); //enable host power
 1202              	 .loc 4 280 0
 1203 002e 0F4B     	 ldr r3,.L88+4
 1204 0030 4FF00072 	 mov r2,#33554432
 1205 0034 5A63     	 str r2,[r3,#52]
 281:usb.c         ****         USB_PWR_STATE = 1;
 1206              	 .loc 4 281 0
 1207 0036 0D4B     	 ldr r3,.L88+4
 1208 0038 4FF08062 	 mov r2,#67108864
 1209 003c 1A63     	 str r2,[r3,#48]
 282:usb.c         ****         break;
 1210              	 .loc 4 282 0
 1211 003e 0C4B     	 ldr r3,.L88+8
 1212 0040 0122     	 movs r2,#1
 1213 0042 1A70     	 strb r2,[r3]
 283:usb.c         ****     case 0x02: //Use host power
 1214              	 .loc 4 283 0
 1215 0044 0BE0     	 b .L83
 1216              	.L85:
 285:usb.c         ****         PIOA->PIO_SODR = (1 << F_VBHOST); //enable sniff power
 1217              	 .loc 4 285 0
 1218 0046 094B     	 ldr r3,.L88+4
 1219 0048 4FF08062 	 mov r2,#67108864
 1220 004c 5A63     	 str r2,[r3,#52]
 286:usb.c         ****         USB_PWR_STATE = 2;
 1221              	 .loc 4 286 0
 1222 004e 074B     	 ldr r3,.L88+4
 1223 0050 4FF00072 	 mov r2,#33554432
 1224 0054 1A63     	 str r2,[r3,#48]
 287:usb.c         ****         break;
 1225              	 .loc 4 287 0
 1226 0056 064B     	 ldr r3,.L88+8
 1227 0058 0222     	 movs r2,#2
 1228 005a 1A70     	 strb r2,[r3]
 288:usb.c         ****     }
 1229              	 .loc 4 288 0
 1230 005c 00BF     	 nop
 1231              	.L83:
 1232              	.L87:
 1233              	 .loc 4 290 0
 1234 005e 00BF     	 nop
 1235 0060 BD46     	 mov sp,r7
 1236              	.LCFI61:
 1237              	 .cfi_def_cfa_register 13
 1238              	 
 1239 0062 80BC     	 pop {r7}
 1240              	.LCFI62:
 1241              	 .cfi_restore 7
 1242              	 .cfi_def_cfa_offset 0
 1243 0064 7047     	 bx lr
 1244              	.L89:
 1245 0066 00BF     	 .align 2
 1246              	.L88:
 1247 0068 00000000 	 .word udd_g_ctrlreq
 1248 006c 000C0E40 	 .word 1074662400
 1249 0070 00000000 	 .word USB_PWR_STATE
 1250              	 .cfi_endproc
 1251              	.LFE201:
 1253              	 .section .text.ctrl_fpga_reset,"ax",%progbits
 1254              	 .align 1
 1255              	 .global ctrl_fpga_reset
 1256              	 .syntax unified
 1257              	 .thumb
 1258              	 .thumb_func
 1259              	 .fpu softvfp
 1261              	ctrl_fpga_reset:
 1262              	.LFB202:
 291:usb.c         **** 
 292:usb.c         **** void ctrl_fpga_reset(void) {
 1263              	 .loc 4 292 0
 1264              	 .cfi_startproc
 1265              	 
 1266              	 
 1267 0000 80B5     	 push {r7,lr}
 1268              	.LCFI63:
 1269              	 .cfi_def_cfa_offset 8
 1270              	 .cfi_offset 7,-8
 1271              	 .cfi_offset 14,-4
 1272 0002 00AF     	 add r7,sp,#0
 1273              	.LCFI64:
 1274              	 .cfi_def_cfa_register 7
 293:usb.c         ****   gpio_set_pin_high(PIN_EBI_USB_SPARE0);
 1275              	 .loc 4 293 0
 1276 0004 2620     	 movs r0,#38
 1277 0006 034B     	 ldr r3,.L91
 1278 0008 9847     	 blx r3
 1279              	.LVL38:
 294:usb.c         ****   gpio_set_pin_low(PIN_EBI_USB_SPARE0);
 1280              	 .loc 4 294 0
 1281 000a 2620     	 movs r0,#38
 1282 000c 024B     	 ldr r3,.L91+4
 1283 000e 9847     	 blx r3
 1284              	.LVL39:
 295:usb.c         **** }
 1285              	 .loc 4 295 0
 1286 0010 00BF     	 nop
 1287 0012 80BD     	 pop {r7,pc}
 1288              	.L92:
 1289              	 .align 2
 1290              	.L91:
 1291 0014 00000000 	 .word pio_set_pin_high
 1292 0018 00000000 	 .word pio_set_pin_low
 1293              	 .cfi_endproc
 1294              	.LFE202:
 1296              	 .section .text.main_setup_out_received,"ax",%progbits
 1297              	 .align 1
 1298              	 .global main_setup_out_received
 1299              	 .syntax unified
 1300              	 .thumb
 1301              	 .thumb_func
 1302              	 .fpu softvfp
 1304              	main_setup_out_received:
 1305              	.LFB203:
 296:usb.c         **** 
 297:usb.c         **** 
 298:usb.c         **** bool main_setup_out_received(void)
 299:usb.c         **** {
 1306              	 .loc 4 299 0
 1307              	 .cfi_startproc
 1308              	 
 1309              	 
 1310 0000 80B5     	 push {r7,lr}
 1311              	.LCFI65:
 1312              	 .cfi_def_cfa_offset 8
 1313              	 .cfi_offset 7,-8
 1314              	 .cfi_offset 14,-4
 1315 0002 00AF     	 add r7,sp,#0
 1316              	.LCFI66:
 1317              	 .cfi_def_cfa_register 7
 300:usb.c         ****     //Add buffer if used
 301:usb.c         ****     udd_g_ctrlreq.payload = ctrlbuffer;
 1318              	 .loc 4 301 0
 1319 0004 464B     	 ldr r3,.L114
 1320 0006 474A     	 ldr r2,.L114+4
 1321 0008 9A60     	 str r2,[r3,#8]
 302:usb.c         ****     udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
 1322              	 .loc 4 302 0
 1323 000a 454B     	 ldr r3,.L114
 1324 000c DB88     	 ldrh r3,[r3,#6]
 1325 000e 402B     	 cmp r3,#64
 1326 0010 28BF     	 it cs
 1327 0012 4023     	 movcs r3,#64
 1328 0014 9AB2     	 uxth r2,r3
 1329 0016 424B     	 ldr r3,.L114
 1330 0018 9A81     	 strh r2,[r3,#12]
 303:usb.c         **** 
 304:usb.c         ****     blockendpoint_usage = bep_emem;
 1331              	 .loc 4 304 0
 1332 001a 434B     	 ldr r3,.L114+8
 1333 001c 0022     	 movs r2,#0
 1334 001e 1A70     	 strb r2,[r3]
 305:usb.c         ****     static uint8_t  respbuf[128];
 306:usb.c         ****     switch(udd_g_ctrlreq.req.bRequest){
 1335              	 .loc 4 306 0
 1336 0020 3F4B     	 ldr r3,.L114
 1337 0022 5B78     	 ldrb r3,[r3,#1]
 1338 0024 103B     	 subs r3,r3,#16
 1339 0026 152B     	 cmp r3,#21
 1340 0028 6ED8     	 bhi .L94
 1341 002a 01A2     	 adr r2,.L96
 1342 002c 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1343              	 .p2align 2
 1344              	.L96:
 1345 0030 89000000 	 .word .L95+1
 1346 0034 B5000000 	 .word .L97+1
 1347 0038 9F000000 	 .word .L98+1
 1348 003c CB000000 	 .word .L99+1
 1349 0040 09010000 	 .word .L94+1
 1350 0044 09010000 	 .word .L94+1
 1351 0048 E1000000 	 .word .L100+1
 1352 004c 09010000 	 .word .L94+1
 1353 0050 09010000 	 .word .L94+1
 1354 0054 09010000 	 .word .L94+1
 1355 0058 09010000 	 .word .L94+1
 1356 005c 09010000 	 .word .L94+1
 1357 0060 09010000 	 .word .L94+1
 1358 0064 09010000 	 .word .L94+1
 1359 0068 09010000 	 .word .L94+1
 1360 006c 09010000 	 .word .L94+1
 1361 0070 09010000 	 .word .L94+1
 1362 0074 09010000 	 .word .L94+1
 1363 0078 EB000000 	 .word .L101+1
 1364 007c 09010000 	 .word .L94+1
 1365 0080 F5000000 	 .word .L102+1
 1366 0084 FF000000 	 .word .L103+1
 1367              	 .p2align 1
 1368              	.L95:
 307:usb.c         ****         /* Memory Read */
 308:usb.c         ****     case REQ_MEMREAD_BULK:
 309:usb.c         ****         if (FPGA_setlock(fpga_usblocked)){
 1369              	 .loc 4 309 0
 1370 0088 0620     	 movs r0,#6
 1371 008a 284B     	 ldr r3,.L114+12
 1372 008c 9847     	 blx r3
 1373              	.LVL40:
 1374 008e 0346     	 mov r3,r0
 1375 0090 002B     	 cmp r3,#0
 1376 0092 3BD0     	 beq .L110
 310:usb.c         ****             udd_g_ctrlreq.callback = ctrl_readmem_bulk;
 1377              	 .loc 4 310 0
 1378 0094 224B     	 ldr r3,.L114
 1379 0096 264A     	 ldr r2,.L114+16
 1380 0098 1A61     	 str r2,[r3,#16]
 311:usb.c         ****             return true;
 1381              	 .loc 4 311 0
 1382 009a 0123     	 movs r3,#1
 1383 009c 3EE0     	 b .L105
 1384              	.L98:
 312:usb.c         ****         }
 313:usb.c         ****         break;
 314:usb.c         ****     case REQ_MEMREAD_CTRL:
 315:usb.c         ****         if (FPGA_setlock(fpga_usblocked)){
 1385              	 .loc 4 315 0
 1386 009e 0620     	 movs r0,#6
 1387 00a0 224B     	 ldr r3,.L114+12
 1388 00a2 9847     	 blx r3
 1389              	.LVL41:
 1390 00a4 0346     	 mov r3,r0
 1391 00a6 002B     	 cmp r3,#0
 1392 00a8 32D0     	 beq .L111
 316:usb.c         ****             udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
 1393              	 .loc 4 316 0
 1394 00aa 1D4B     	 ldr r3,.L114
 1395 00ac 214A     	 ldr r2,.L114+20
 1396 00ae 1A61     	 str r2,[r3,#16]
 317:usb.c         ****             return true;
 1397              	 .loc 4 317 0
 1398 00b0 0123     	 movs r3,#1
 1399 00b2 33E0     	 b .L105
 1400              	.L97:
 318:usb.c         ****         }
 319:usb.c         ****         break;
 320:usb.c         **** 
 321:usb.c         **** 
 322:usb.c         ****         /* Memory Write */
 323:usb.c         ****     case REQ_MEMWRITE_BULK:
 324:usb.c         ****         if (FPGA_setlock(fpga_usblocked)){
 1401              	 .loc 4 324 0
 1402 00b4 0620     	 movs r0,#6
 1403 00b6 1D4B     	 ldr r3,.L114+12
 1404 00b8 9847     	 blx r3
 1405              	.LVL42:
 1406 00ba 0346     	 mov r3,r0
 1407 00bc 002B     	 cmp r3,#0
 1408 00be 29D0     	 beq .L112
 325:usb.c         ****             udd_g_ctrlreq.callback = ctrl_writemem_bulk;
 1409              	 .loc 4 325 0
 1410 00c0 174B     	 ldr r3,.L114
 1411 00c2 1D4A     	 ldr r2,.L114+24
 1412 00c4 1A61     	 str r2,[r3,#16]
 326:usb.c         ****             return true;
 1413              	 .loc 4 326 0
 1414 00c6 0123     	 movs r3,#1
 1415 00c8 28E0     	 b .L105
 1416              	.L99:
 327:usb.c         ****         }
 328:usb.c         ****         break;
 329:usb.c         **** 
 330:usb.c         **** 
 331:usb.c         ****     case REQ_MEMWRITE_CTRL:
 332:usb.c         ****         if (FPGA_setlock(fpga_usblocked)){
 1417              	 .loc 4 332 0
 1418 00ca 0620     	 movs r0,#6
 1419 00cc 174B     	 ldr r3,.L114+12
 1420 00ce 9847     	 blx r3
 1421              	.LVL43:
 1422 00d0 0346     	 mov r3,r0
 1423 00d2 002B     	 cmp r3,#0
 1424 00d4 20D0     	 beq .L113
 333:usb.c         ****             udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
 1425              	 .loc 4 333 0
 1426 00d6 124B     	 ldr r3,.L114
 1427 00d8 184A     	 ldr r2,.L114+28
 1428 00da 1A61     	 str r2,[r3,#16]
 334:usb.c         ****             return true;
 1429              	 .loc 4 334 0
 1430 00dc 0123     	 movs r3,#1
 1431 00de 1DE0     	 b .L105
 1432              	.L100:
 335:usb.c         ****         }
 336:usb.c         ****         break;
 337:usb.c         **** 
 338:usb.c         ****     case REQ_FPGA_PROGRAM:
 339:usb.c         ****         udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
 1433              	 .loc 4 339 0
 1434 00e0 0F4B     	 ldr r3,.L114
 1435 00e2 174A     	 ldr r2,.L114+32
 1436 00e4 1A61     	 str r2,[r3,#16]
 340:usb.c         ****         return true;
 1437              	 .loc 4 340 0
 1438 00e6 0123     	 movs r3,#1
 1439 00e8 18E0     	 b .L105
 1440              	.L101:
 341:usb.c         **** 
 342:usb.c         ****     case REQ_SAM3U_CFG:
 343:usb.c         ****         udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
 1441              	 .loc 4 343 0
 1442 00ea 0D4B     	 ldr r3,.L114
 1443 00ec 154A     	 ldr r2,.L114+36
 1444 00ee 1A61     	 str r2,[r3,#16]
 344:usb.c         ****         return true;
 1445              	 .loc 4 344 0
 1446 00f0 0123     	 movs r3,#1
 1447 00f2 13E0     	 b .L105
 1448              	.L102:
 345:usb.c         **** 
 346:usb.c         ****     case REQ_CHANGE_PWR:
 347:usb.c         ****         //TODO
 348:usb.c         ****         udd_g_ctrlreq.callback = ctrl_change_pwr;
 1449              	 .loc 4 348 0
 1450 00f4 0A4B     	 ldr r3,.L114
 1451 00f6 144A     	 ldr r2,.L114+40
 1452 00f8 1A61     	 str r2,[r3,#16]
 349:usb.c         ****         return true;
 1453              	 .loc 4 349 0
 1454 00fa 0123     	 movs r3,#1
 1455 00fc 0EE0     	 b .L105
 1456              	.L103:
 350:usb.c         **** 
 351:usb.c         ****     case REQ_FPGA_RESET:
 352:usb.c         ****         udd_g_ctrlreq.callback = ctrl_fpga_reset;
 1457              	 .loc 4 352 0
 1458 00fe 084B     	 ldr r3,.L114
 1459 0100 124A     	 ldr r2,.L114+44
 1460 0102 1A61     	 str r2,[r3,#16]
 353:usb.c         ****         return true;
 1461              	 .loc 4 353 0
 1462 0104 0123     	 movs r3,#1
 1463 0106 09E0     	 b .L105
 1464              	.L94:
 354:usb.c         **** 
 355:usb.c         ****     default:
 356:usb.c         ****         return false;
 1465              	 .loc 4 356 0
 1466 0108 0023     	 movs r3,#0
 1467 010a 07E0     	 b .L105
 1468              	.L110:
 313:usb.c         ****     case REQ_MEMREAD_CTRL:
 1469              	 .loc 4 313 0
 1470 010c 00BF     	 nop
 1471 010e 04E0     	 b .L106
 1472              	.L111:
 319:usb.c         **** 
 1473              	 .loc 4 319 0
 1474 0110 00BF     	 nop
 1475 0112 02E0     	 b .L106
 1476              	.L112:
 328:usb.c         **** 
 1477              	 .loc 4 328 0
 1478 0114 00BF     	 nop
 1479 0116 00E0     	 b .L106
 1480              	.L113:
 336:usb.c         **** 
 1481              	 .loc 4 336 0
 1482 0118 00BF     	 nop
 1483              	.L106:
 357:usb.c         ****     }
 358:usb.c         **** 
 359:usb.c         ****     return false;
 1484              	 .loc 4 359 0
 1485 011a 0023     	 movs r3,#0
 1486              	.L105:
 360:usb.c         **** }
 1487              	 .loc 4 360 0
 1488 011c 1846     	 mov r0,r3
 1489 011e 80BD     	 pop {r7,pc}
 1490              	.L115:
 1491              	 .align 2
 1492              	.L114:
 1493 0120 00000000 	 .word udd_g_ctrlreq
 1494 0124 00000000 	 .word ctrlbuffer
 1495 0128 00000000 	 .word blockendpoint_usage
 1496 012c 00000000 	 .word FPGA_setlock
 1497 0130 00000000 	 .word ctrl_readmem_bulk
 1498 0134 00000000 	 .word ctrl_readmem_ctrl
 1499 0138 00000000 	 .word ctrl_writemem_bulk
 1500 013c 00000000 	 .word ctrl_writemem_ctrl
 1501 0140 00000000 	 .word ctrl_progfpga_bulk
 1502 0144 00000000 	 .word ctrl_sam3ucfg_cb
 1503 0148 00000000 	 .word ctrl_change_pwr
 1504 014c 00000000 	 .word ctrl_fpga_reset
 1505              	 .cfi_endproc
 1506              	.LFE203:
 1508              	 .section .text.main_setup_in_received,"ax",%progbits
 1509              	 .align 1
 1510              	 .global main_setup_in_received
 1511              	 .syntax unified
 1512              	 .thumb
 1513              	 .thumb_func
 1514              	 .fpu softvfp
 1516              	main_setup_in_received:
 1517              	.LFB204:
 361:usb.c         **** 
 362:usb.c         **** 
 363:usb.c         **** /*
 364:usb.c         ****   udd_g_ctrlreq.req.bRequest == 0
 365:usb.c         ****   && (udd_g_ctrlreq.req.bRequest == 0)
 366:usb.c         ****   && (0 != udd_g_ctrlreq.req.wLength)
 367:usb.c         **** */
 368:usb.c         **** 
 369:usb.c         **** bool main_setup_in_received(void)
 370:usb.c         **** {
 1518              	 .loc 4 370 0
 1519              	 .cfi_startproc
 1520              	 
 1521              	 
 1522 0000 80B5     	 push {r7,lr}
 1523              	.LCFI67:
 1524              	 .cfi_def_cfa_offset 8
 1525              	 .cfi_offset 7,-8
 1526              	 .cfi_offset 14,-4
 1527 0002 00AF     	 add r7,sp,#0
 1528              	.LCFI68:
 1529              	 .cfi_def_cfa_register 7
 371:usb.c         ****     /*
 372:usb.c         ****       udd_g_ctrlreq.payload = main_buf_loopback;
 373:usb.c         ****       udd_g_ctrlreq.payload_size =
 374:usb.c         ****       min( udd_g_ctrlreq.req.wLength,
 375:usb.c         ****       sizeof(main_buf_loopback) );
 376:usb.c         ****     */
 377:usb.c         **** 
 378:usb.c         ****     static uint8_t  respbuf[64];
 379:usb.c         ****     unsigned int cnt;
 380:usb.c         **** 
 381:usb.c         ****     switch(udd_g_ctrlreq.req.bRequest){
 1530              	 .loc 4 381 0
 1531 0004 274B     	 ldr r3,.L124
 1532 0006 5B78     	 ldrb r3,[r3,#1]
 1533 0008 152B     	 cmp r3,#21
 1534 000a 2AD0     	 beq .L118
 1535 000c 172B     	 cmp r3,#23
 1536 000e 17D0     	 beq .L119
 1537 0010 122B     	 cmp r3,#18
 1538 0012 43D1     	 bne .L123
 382:usb.c         ****     case REQ_MEMREAD_CTRL:
 383:usb.c         ****         udd_g_ctrlreq.payload = ctrlmemread_buf;
 1539              	 .loc 4 383 0
 1540 0014 244B     	 ldr r3,.L124+4
 1541 0016 1B68     	 ldr r3,[r3]
 1542 0018 224A     	 ldr r2,.L124
 1543 001a 9360     	 str r3,[r2,#8]
 384:usb.c         ****         udd_g_ctrlreq.payload_size = ctrlmemread_size;
 1544              	 .loc 4 384 0
 1545 001c 234B     	 ldr r3,.L124+8
 1546 001e 1B68     	 ldr r3,[r3]
 1547 0020 9AB2     	 uxth r2,r3
 1548 0022 204B     	 ldr r3,.L124
 1549 0024 9A81     	 strh r2,[r3,#12]
 385:usb.c         ****         ctrlmemread_size = 0;
 1550              	 .loc 4 385 0
 1551 0026 214B     	 ldr r3,.L124+8
 1552 0028 0022     	 movs r2,#0
 1553 002a 1A60     	 str r2,[r3]
 386:usb.c         **** 
 387:usb.c         ****         if (FPGA_lockstatus() == fpga_ctrlmem){
 1554              	 .loc 4 387 0
 1555 002c 204B     	 ldr r3,.L124+12
 1556 002e 9847     	 blx r3
 1557              	.LVL44:
 1558 0030 0346     	 mov r3,r0
 1559 0032 052B     	 cmp r3,#5
 1560 0034 02D1     	 bne .L121
 388:usb.c         ****             FPGA_setlock(fpga_unlocked);
 1561              	 .loc 4 388 0
 1562 0036 0020     	 movs r0,#0
 1563 0038 1E4B     	 ldr r3,.L124+16
 1564 003a 9847     	 blx r3
 1565              	.LVL45:
 1566              	.L121:
 389:usb.c         ****         }
 390:usb.c         **** 
 391:usb.c         ****         return true;
 1567              	 .loc 4 391 0
 1568 003c 0123     	 movs r3,#1
 1569 003e 2EE0     	 b .L122
 1570              	.L119:
 392:usb.c         ****         break;
 393:usb.c         **** 
 394:usb.c         ****     case REQ_FW_VERSION:
 395:usb.c         ****         respbuf[0] = FW_VER_MAJOR;
 1571              	 .loc 4 395 0
 1572 0040 1D4B     	 ldr r3,.L124+20
 1573 0042 0022     	 movs r2,#0
 1574 0044 1A70     	 strb r2,[r3]
 396:usb.c         ****         respbuf[1] = FW_VER_MINOR;
 1575              	 .loc 4 396 0
 1576 0046 1C4B     	 ldr r3,.L124+20
 1577 0048 0A22     	 movs r2,#10
 1578 004a 5A70     	 strb r2,[r3,#1]
 397:usb.c         ****         respbuf[2] = FW_VER_DEBUG;
 1579              	 .loc 4 397 0
 1580 004c 1A4B     	 ldr r3,.L124+20
 1581 004e 0022     	 movs r2,#0
 1582 0050 9A70     	 strb r2,[r3,#2]
 398:usb.c         ****         udd_g_ctrlreq.payload = respbuf;
 1583              	 .loc 4 398 0
 1584 0052 144B     	 ldr r3,.L124
 1585 0054 184A     	 ldr r2,.L124+20
 1586 0056 9A60     	 str r2,[r3,#8]
 399:usb.c         ****         udd_g_ctrlreq.payload_size = 3;
 1587              	 .loc 4 399 0
 1588 0058 124B     	 ldr r3,.L124
 1589 005a 0322     	 movs r2,#3
 1590 005c 9A81     	 strh r2,[r3,#12]
 400:usb.c         ****         return true;
 1591              	 .loc 4 400 0
 1592 005e 0123     	 movs r3,#1
 1593 0060 1DE0     	 b .L122
 1594              	.L118:
 401:usb.c         ****         break;
 402:usb.c         **** 
 403:usb.c         ****     case REQ_FPGA_STATUS:
 404:usb.c         ****         respbuf[0] = FPGA_ISDONE();
 1595              	 .loc 4 404 0
 1596 0062 1320     	 movs r0,#19
 1597 0064 154B     	 ldr r3,.L124+24
 1598 0066 9847     	 blx r3
 1599              	.LVL46:
 1600 0068 0346     	 mov r3,r0
 1601 006a 002B     	 cmp r3,#0
 1602 006c 14BF     	 ite ne
 1603 006e 0123     	 movne r3,#1
 1604 0070 0023     	 moveq r3,#0
 1605 0072 DBB2     	 uxtb r3,r3
 1606 0074 1A46     	 mov r2,r3
 1607 0076 104B     	 ldr r3,.L124+20
 1608 0078 1A70     	 strb r2,[r3]
 405:usb.c         ****         respbuf[1] = 0;
 1609              	 .loc 4 405 0
 1610 007a 0F4B     	 ldr r3,.L124+20
 1611 007c 0022     	 movs r2,#0
 1612 007e 5A70     	 strb r2,[r3,#1]
 406:usb.c         ****         respbuf[2] = 0;
 1613              	 .loc 4 406 0
 1614 0080 0D4B     	 ldr r3,.L124+20
 1615 0082 0022     	 movs r2,#0
 1616 0084 9A70     	 strb r2,[r3,#2]
 407:usb.c         ****         respbuf[3] = 0;
 1617              	 .loc 4 407 0
 1618 0086 0C4B     	 ldr r3,.L124+20
 1619 0088 0022     	 movs r2,#0
 1620 008a DA70     	 strb r2,[r3,#3]
 408:usb.c         ****         udd_g_ctrlreq.payload = respbuf;
 1621              	 .loc 4 408 0
 1622 008c 054B     	 ldr r3,.L124
 1623 008e 0A4A     	 ldr r2,.L124+20
 1624 0090 9A60     	 str r2,[r3,#8]
 409:usb.c         ****         udd_g_ctrlreq.payload_size = 4;
 1625              	 .loc 4 409 0
 1626 0092 044B     	 ldr r3,.L124
 1627 0094 0422     	 movs r2,#4
 1628 0096 9A81     	 strh r2,[r3,#12]
 410:usb.c         ****         return true;
 1629              	 .loc 4 410 0
 1630 0098 0123     	 movs r3,#1
 1631 009a 00E0     	 b .L122
 1632              	.L123:
 411:usb.c         ****         break;
 412:usb.c         ****     default:
 413:usb.c         ****         return false;
 1633              	 .loc 4 413 0
 1634 009c 0023     	 movs r3,#0
 1635              	.L122:
 414:usb.c         ****     }
 415:usb.c         ****     return false;
 416:usb.c         **** }
 1636              	 .loc 4 416 0
 1637 009e 1846     	 mov r0,r3
 1638 00a0 80BD     	 pop {r7,pc}
 1639              	.L125:
 1640 00a2 00BF     	 .align 2
 1641              	.L124:
 1642 00a4 00000000 	 .word udd_g_ctrlreq
 1643 00a8 00000000 	 .word ctrlmemread_buf
 1644 00ac 00000000 	 .word ctrlmemread_size
 1645 00b0 00000000 	 .word FPGA_lockstatus
 1646 00b4 00000000 	 .word FPGA_setlock
 1647 00b8 00000000 	 .word respbuf.9232
 1648 00bc 00000000 	 .word pio_get_pin_value
 1649              	 .cfi_endproc
 1650              	.LFE204:
 1652              	 .section .text.main_vendor_bulk_in_received,"ax",%progbits
 1653              	 .align 1
 1654              	 .global main_vendor_bulk_in_received
 1655              	 .syntax unified
 1656              	 .thumb
 1657              	 .thumb_func
 1658              	 .fpu softvfp
 1660              	main_vendor_bulk_in_received:
 1661              	.LFB205:
 417:usb.c         **** 
 418:usb.c         **** void main_vendor_bulk_in_received(udd_ep_status_t status,
 419:usb.c         ****                                   iram_size_t nb_transfered, udd_ep_id_t ep)
 420:usb.c         **** {
 1662              	 .loc 4 420 0
 1663              	 .cfi_startproc
 1664              	 
 1665              	 
 1666 0000 80B5     	 push {r7,lr}
 1667              	.LCFI69:
 1668              	 .cfi_def_cfa_offset 8
 1669              	 .cfi_offset 7,-8
 1670              	 .cfi_offset 14,-4
 1671 0002 82B0     	 sub sp,sp,#8
 1672              	.LCFI70:
 1673              	 .cfi_def_cfa_offset 16
 1674 0004 00AF     	 add r7,sp,#0
 1675              	.LCFI71:
 1676              	 .cfi_def_cfa_register 7
 1677 0006 0346     	 mov r3,r0
 1678 0008 3960     	 str r1,[r7]
 1679 000a FB71     	 strb r3,[r7,#7]
 1680 000c 1346     	 mov r3,r2
 1681 000e BB71     	 strb r3,[r7,#6]
 421:usb.c         ****     UNUSED(nb_transfered);
 422:usb.c         ****     UNUSED(ep);
 423:usb.c         ****     if (UDD_EP_TRANSFER_OK != status) {
 1682              	 .loc 4 423 0
 1683 0010 FB79     	 ldrb r3,[r7,#7]
 1684 0012 002B     	 cmp r3,#0
 1685 0014 08D1     	 bne .L129
 424:usb.c         ****         return; // Transfer aborted/error
 425:usb.c         ****     }
 426:usb.c         **** 
 427:usb.c         ****     if (FPGA_lockstatus() == fpga_blockin){
 1686              	 .loc 4 427 0
 1687 0016 064B     	 ldr r3,.L130
 1688 0018 9847     	 blx r3
 1689              	.LVL47:
 1690 001a 0346     	 mov r3,r0
 1691 001c 022B     	 cmp r3,#2
 1692 001e 04D1     	 bne .L126
 428:usb.c         ****         FPGA_setlock(fpga_unlocked);
 1693              	 .loc 4 428 0
 1694 0020 0020     	 movs r0,#0
 1695 0022 044B     	 ldr r3,.L130+4
 1696 0024 9847     	 blx r3
 1697              	.LVL48:
 1698 0026 00E0     	 b .L126
 1699              	.L129:
 424:usb.c         ****         return; // Transfer aborted/error
 1700              	 .loc 4 424 0
 1701 0028 00BF     	 nop
 1702              	.L126:
 429:usb.c         ****     }
 430:usb.c         **** }
 1703              	 .loc 4 430 0
 1704 002a 0837     	 adds r7,r7,#8
 1705              	.LCFI72:
 1706              	 .cfi_def_cfa_offset 8
 1707 002c BD46     	 mov sp,r7
 1708              	.LCFI73:
 1709              	 .cfi_def_cfa_register 13
 1710              	 
 1711 002e 80BD     	 pop {r7,pc}
 1712              	.L131:
 1713              	 .align 2
 1714              	.L130:
 1715 0030 00000000 	 .word FPGA_lockstatus
 1716 0034 00000000 	 .word FPGA_setlock
 1717              	 .cfi_endproc
 1718              	.LFE205:
 1720              	 .section .text.main_vendor_bulk_out_received,"ax",%progbits
 1721              	 .align 1
 1722              	 .global main_vendor_bulk_out_received
 1723              	 .syntax unified
 1724              	 .thumb
 1725              	 .thumb_func
 1726              	 .fpu softvfp
 1728              	main_vendor_bulk_out_received:
 1729              	.LFB206:
 431:usb.c         **** 
 432:usb.c         **** void main_vendor_bulk_out_received(udd_ep_status_t status,
 433:usb.c         ****                                    iram_size_t nb_transfered, udd_ep_id_t ep)
 434:usb.c         **** {
 1730              	 .loc 4 434 0
 1731              	 .cfi_startproc
 1732              	 
 1733              	 
 1734 0000 80B5     	 push {r7,lr}
 1735              	.LCFI74:
 1736              	 .cfi_def_cfa_offset 8
 1737              	 .cfi_offset 7,-8
 1738              	 .cfi_offset 14,-4
 1739 0002 84B0     	 sub sp,sp,#16
 1740              	.LCFI75:
 1741              	 .cfi_def_cfa_offset 24
 1742 0004 00AF     	 add r7,sp,#0
 1743              	.LCFI76:
 1744              	 .cfi_def_cfa_register 7
 1745 0006 0346     	 mov r3,r0
 1746 0008 3960     	 str r1,[r7]
 1747 000a FB71     	 strb r3,[r7,#7]
 1748 000c 1346     	 mov r3,r2
 1749 000e BB71     	 strb r3,[r7,#6]
 435:usb.c         ****     UNUSED(ep);
 436:usb.c         ****     if (UDD_EP_TRANSFER_OK != status) {
 1750              	 .loc 4 436 0
 1751 0010 FB79     	 ldrb r3,[r7,#7]
 1752 0012 002B     	 cmp r3,#0
 1753 0014 06D0     	 beq .L133
 437:usb.c         ****         // Transfer aborted
 438:usb.c         **** 
 439:usb.c         ****         //restart
 440:usb.c         ****         udi_vendor_bulk_out_run(
 1754              	 .loc 4 440 0
 1755 0016 224A     	 ldr r2,.L142
 1756 0018 4FF48061 	 mov r1,#1024
 1757 001c 2148     	 ldr r0,.L142+4
 1758 001e 224B     	 ldr r3,.L142+8
 1759 0020 9847     	 blx r3
 1760              	.LVL49:
 441:usb.c         ****             main_buf_loopback,
 442:usb.c         ****             sizeof(main_buf_loopback),
 443:usb.c         ****             main_vendor_bulk_out_received);
 444:usb.c         **** 
 445:usb.c         ****         return;
 1761              	 .loc 4 445 0
 1762 0022 39E0     	 b .L132
 1763              	.L133:
 446:usb.c         ****     }
 447:usb.c         **** 
 448:usb.c         ****     if (blockendpoint_usage == bep_emem){
 1764              	 .loc 4 448 0
 1765 0024 214B     	 ldr r3,.L142+12
 1766 0026 1B78     	 ldrb r3,[r3]
 1767 0028 002B     	 cmp r3,#0
 1768 002a 1AD1     	 bne .L135
 1769              	.LBB3:
 449:usb.c         ****         for(unsigned int i = 0; i < nb_transfered; i++){
 1770              	 .loc 4 449 0
 1771 002c 0023     	 movs r3,#0
 1772 002e FB60     	 str r3,[r7,#12]
 1773 0030 0BE0     	 b .L136
 1774              	.L137:
 450:usb.c         ****             xram[i] = main_buf_loopback[i];
 1775              	 .loc 4 450 0 discriminator 3
 1776 0032 1F4B     	 ldr r3,.L142+16
 1777 0034 1A68     	 ldr r2,[r3]
 1778 0036 FB68     	 ldr r3,[r7,#12]
 1779 0038 1344     	 add r3,r3,r2
 1780 003a 1A49     	 ldr r1,.L142+4
 1781 003c FA68     	 ldr r2,[r7,#12]
 1782 003e 0A44     	 add r2,r2,r1
 1783 0040 1278     	 ldrb r2,[r2]
 1784 0042 1A70     	 strb r2,[r3]
 449:usb.c         ****         for(unsigned int i = 0; i < nb_transfered; i++){
 1785              	 .loc 4 449 0 discriminator 3
 1786 0044 FB68     	 ldr r3,[r7,#12]
 1787 0046 0133     	 adds r3,r3,#1
 1788 0048 FB60     	 str r3,[r7,#12]
 1789              	.L136:
 449:usb.c         ****         for(unsigned int i = 0; i < nb_transfered; i++){
 1790              	 .loc 4 449 0 is_stmt 0 discriminator 1
 1791 004a FA68     	 ldr r2,[r7,#12]
 1792 004c 3B68     	 ldr r3,[r7]
 1793 004e 9A42     	 cmp r2,r3
 1794 0050 EFD3     	 bcc .L137
 1795              	.LBE3:
 451:usb.c         ****         }
 452:usb.c         **** 
 453:usb.c         ****         if (FPGA_lockstatus() == fpga_blockout){
 1796              	 .loc 4 453 0 is_stmt 1
 1797 0052 184B     	 ldr r3,.L142+20
 1798 0054 9847     	 blx r3
 1799              	.LVL50:
 1800 0056 0346     	 mov r3,r0
 1801 0058 042B     	 cmp r3,#4
 1802 005a 17D1     	 bne .L139
 454:usb.c         ****             FPGA_releaselock();
 1803              	 .loc 4 454 0
 1804 005c 164B     	 ldr r3,.L142+24
 1805 005e 9847     	 blx r3
 1806              	.LVL51:
 1807 0060 14E0     	 b .L139
 1808              	.L135:
 455:usb.c         ****         }
 456:usb.c         ****     } else if (blockendpoint_usage == bep_fpgabitstream){
 1809              	 .loc 4 456 0
 1810 0062 124B     	 ldr r3,.L142+12
 1811 0064 1B78     	 ldrb r3,[r3]
 1812 0066 0A2B     	 cmp r3,#10
 1813 0068 10D1     	 bne .L139
 1814              	.LBB4:
 457:usb.c         **** 
 458:usb.c         ****         /* Send byte to FPGA - this could eventually be done via SPI */
 459:usb.c         ****         // TODO: is this dangerous?
 460:usb.c         ****         for(unsigned int i = 0; i < nb_transfered; i++){
 1815              	 .loc 4 460 0
 1816 006a 0023     	 movs r3,#0
 1817 006c BB60     	 str r3,[r7,#8]
 1818 006e 09E0     	 b .L140
 1819              	.L141:
 461:usb.c         ****             fpga_program_sendbyte(main_buf_loopback[i]);
 1820              	 .loc 4 461 0 discriminator 3
 1821 0070 0C4A     	 ldr r2,.L142+4
 1822 0072 BB68     	 ldr r3,[r7,#8]
 1823 0074 1344     	 add r3,r3,r2
 1824 0076 1B78     	 ldrb r3,[r3]
 1825 0078 1846     	 mov r0,r3
 1826 007a 104B     	 ldr r3,.L142+28
 1827 007c 9847     	 blx r3
 1828              	.LVL52:
 460:usb.c         ****             fpga_program_sendbyte(main_buf_loopback[i]);
 1829              	 .loc 4 460 0 discriminator 3
 1830 007e BB68     	 ldr r3,[r7,#8]
 1831 0080 0133     	 adds r3,r3,#1
 1832 0082 BB60     	 str r3,[r7,#8]
 1833              	.L140:
 460:usb.c         ****             fpga_program_sendbyte(main_buf_loopback[i]);
 1834              	 .loc 4 460 0 is_stmt 0 discriminator 1
 1835 0084 BA68     	 ldr r2,[r7,#8]
 1836 0086 3B68     	 ldr r3,[r7]
 1837 0088 9A42     	 cmp r2,r3
 1838 008a F1D3     	 bcc .L141
 1839              	.L139:
 1840              	.LBE4:
 462:usb.c         ****         }
 463:usb.c         **** #if FPGA_USE_BITBANG
 464:usb.c         ****         FPGA_CCLK_LOW();
 465:usb.c         **** #endif
 466:usb.c         ****     }
 467:usb.c         **** 
 468:usb.c         ****     //printf("BULKOUT: %d bytes\n", (int)nb_transfered);
 469:usb.c         **** 
 470:usb.c         ****     udi_vendor_bulk_out_run(
 1841              	 .loc 4 470 0 is_stmt 1
 1842 008c 044A     	 ldr r2,.L142
 1843 008e 4FF48061 	 mov r1,#1024
 1844 0092 0448     	 ldr r0,.L142+4
 1845 0094 044B     	 ldr r3,.L142+8
 1846 0096 9847     	 blx r3
 1847              	.LVL53:
 1848              	.L132:
 471:usb.c         ****         main_buf_loopback,
 472:usb.c         ****         sizeof(main_buf_loopback),
 473:usb.c         ****         main_vendor_bulk_out_received);
 474:usb.c         **** }
 1849              	 .loc 4 474 0
 1850 0098 1037     	 adds r7,r7,#16
 1851              	.LCFI77:
 1852              	 .cfi_def_cfa_offset 8
 1853 009a BD46     	 mov sp,r7
 1854              	.LCFI78:
 1855              	 .cfi_def_cfa_register 13
 1856              	 
 1857 009c 80BD     	 pop {r7,pc}
 1858              	.L143:
 1859 009e 00BF     	 .align 2
 1860              	.L142:
 1861 00a0 00000000 	 .word main_vendor_bulk_out_received
 1862 00a4 00000000 	 .word main_buf_loopback
 1863 00a8 00000000 	 .word udi_vendor_bulk_out_run
 1864 00ac 00000000 	 .word blockendpoint_usage
 1865 00b0 00000000 	 .word xram
 1866 00b4 00000000 	 .word FPGA_lockstatus
 1867 00b8 00000000 	 .word FPGA_releaselock
 1868 00bc 00000000 	 .word fpga_program_sendbyte
 1869              	 .cfi_endproc
 1870              	.LFE206:
 1872              	 .section .bss.respbuf.9218,"aw",%nobits
 1873              	 .align 2
 1876              	respbuf.9218:
 1877 0000 00000000 	 .space 128
 1877      00000000 
 1877      00000000 
 1877      00000000 
 1877      00000000 
 1878              	 .section .bss.respbuf.9232,"aw",%nobits
 1879              	 .align 2
 1882              	respbuf.9232:
 1883 0000 00000000 	 .space 64
 1883      00000000 
 1883      00000000 
 1883      00000000 
 1883      00000000 
 1884              	 .text
 1885              	.Letext0:
 1886              	 .file 5 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 1887              	 .file 6 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 1888              	 .file 7 ".././hal/sam3u1c/inc/sam3u1c.h"
 1889              	 .file 8 ".././hal/sam3u1c/inc/core_cm3.h"
 1890              	 .file 9 ".././hal/sam3u1c/inc/system_sam3u.h"
 1891              	 .file 10 ".././hal/sam3u1c/inc/component/component_efc.h"
 1892              	 .file 11 ".././hal/sam3u1c/inc/component/component_pio.h"
 1893              	 .file 12 ".././hal/sam3u1c/inc/component/component_rstc.h"
 1894              	 .file 13 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\sys\\lock.h"
 1895              	 .file 14 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\sys\\_types.h"
 1896              	 .file 15 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\lib\\gcc\\arm-none-eabi\\7.3.1\\include\\stddef.h"
 1897              	 .file 16 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\sys\\reent.h"
 1898              	 .file 17 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\stdlib.h"
 1899              	 .file 18 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
 1900              	 .file 19 ".././hal/sam3u1c/inc/compiler.h"
 1901              	 .file 20 ".././hal/sam3u1c/inc/sam/sleepmgr.h"
 1902              	 .file 21 "./conf_usb.h"
 1903              	 .file 22 ".././hal/sam3u1c/inc/usb_protocol.h"
 1904              	 .file 23 ".././hal/sam3u1c/inc/udi.h"
 1905              	 .file 24 ".././hal/sam3u1c/inc/udc_desc.h"
 1906              	 .file 25 ".././hal/sam3u1c/inc/udd.h"
 1907              	 .file 26 ".././hal/sam3u1c/inc/udi_vendor.h"
 1908              	 .file 27 ".././hal/sam3u1c/inc/stdio_serial.h"
 1909              	 .file 28 ".././hal/sam3u1c/inc/usb.h"
 1910              	 .file 29 "usb_xmem.h"
 1911              	 .file 30 "fpga_program.h"
 1912              	 .file 31 ".././hal/sam3u1c/inc/pio.h"
 1913              	 .file 32 ".././hal/sam3u1c/inc/pmc.h"
 1914              	 .file 33 ".././hal/sam3u1c/inc/efc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 usb.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:27     .text.osc_enable:00000000 $t
    {standard input}:33     .text.osc_enable:00000000 osc_enable
    {standard input}:60     .text.osc_enable:00000014 $d
    {standard input}:68     .text.osc_enable:00000034 $t
    {standard input}:142    .text.osc_enable:00000074 $d
    {standard input}:150    .text.osc_is_ready:00000000 $t
    {standard input}:156    .text.osc_is_ready:00000000 osc_is_ready
    {standard input}:182    .text.osc_is_ready:00000014 $d
    {standard input}:190    .text.osc_is_ready:00000034 $t
    {standard input}:248    .text.osc_is_ready:00000078 $d
    {standard input}:255    .text.osc_wait_ready:00000000 $t
    {standard input}:261    .text.osc_wait_ready:00000000 osc_wait_ready
    {standard input}:308    .text.osc_wait_ready:00000028 $d
    {standard input}:313    .text.udc_detach:00000000 $t
    {standard input}:319    .text.udc_detach:00000000 udc_detach
    {standard input}:344    .text.udc_detach:0000000c $d
    {standard input}:352    .data.g_captureinprogress:00000000 g_captureinprogress
    {standard input}:357    .data.main_b_vendor_enable:00000000 main_b_vendor_enable
    {standard input}:363    .bss.USB_PWR_STATE:00000000 USB_PWR_STATE
    {standard input}:364    .bss.USB_PWR_STATE:00000000 $d
    {standard input}:366    .bss.main_buf_loopback:00000000 $d
    {standard input}:369    .bss.main_buf_loopback:00000000 main_buf_loopback
    {standard input}:372    .text.main_suspend_action:00000000 $t
    {standard input}:379    .text.main_suspend_action:00000000 main_suspend_action
    {standard input}:409    .text.main_resume_action:00000000 $t
    {standard input}:416    .text.main_resume_action:00000000 main_resume_action
    {standard input}:445    .text.main_sof_action:00000000 $t
    {standard input}:452    .text.main_sof_action:00000000 main_sof_action
    {standard input}:486    .text.main_sof_action:00000018 $d
    {standard input}:491    .text.main_vendor_enable:00000000 $t
    {standard input}:498    .text.main_vendor_enable:00000000 main_vendor_enable
    {standard input}:531    .text.main_vendor_enable:0000001c $d
    {standard input}:1728   .text.main_vendor_bulk_out_received:00000000 main_vendor_bulk_out_received
    {standard input}:539    .text.main_vendor_disable:00000000 $t
    {standard input}:546    .text.main_vendor_disable:00000000 main_vendor_disable
    {standard input}:578    .text.main_vendor_disable:00000014 $d
    {standard input}:583    .bss.ctrlbuffer:00000000 $d
    {standard input}:586    .bss.ctrlbuffer:00000000 ctrlbuffer
    {standard input}:591    .bss.blockendpoint_usage:00000000 blockendpoint_usage
    {standard input}:592    .bss.blockendpoint_usage:00000000 $d
    {standard input}:594    .bss.ctrlmemread_buf:00000000 $d
    {standard input}:597    .bss.ctrlmemread_buf:00000000 ctrlmemread_buf
    {standard input}:600    .bss.ctrlmemread_size:00000000 $d
    {standard input}:603    .bss.ctrlmemread_size:00000000 ctrlmemread_size
    {standard input}:606    .text.ctrl_readmem_bulk:00000000 $t
    {standard input}:613    .text.ctrl_readmem_bulk:00000000 ctrl_readmem_bulk
    {standard input}:682    .text.ctrl_readmem_bulk:00000044 $d
    {standard input}:1660   .text.main_vendor_bulk_in_received:00000000 main_vendor_bulk_in_received
    {standard input}:692    .text.ctrl_readmem_ctrl:00000000 $t
    {standard input}:699    .text.ctrl_readmem_ctrl:00000000 ctrl_readmem_ctrl
    {standard input}:769    .text.ctrl_readmem_ctrl:00000044 $d
    {standard input}:779    .text.ctrl_writemem_ctrl:00000000 $t
    {standard input}:786    .text.ctrl_writemem_ctrl:00000000 ctrl_writemem_ctrl
    {standard input}:878    .text.ctrl_writemem_ctrl:00000060 $d
    {standard input}:888    .bss.bulkread_address:00000000 $d
    {standard input}:891    .bss.bulkread_address:00000000 bulkread_address
    {standard input}:894    .bss.bulkread_len:00000000 $d
    {standard input}:897    .bss.bulkread_len:00000000 bulkread_len
    {standard input}:900    .text.ctrl_writemem_bulk:00000000 $t
    {standard input}:907    .text.ctrl_writemem_bulk:00000000 ctrl_writemem_bulk
    {standard input}:965    .text.ctrl_writemem_bulk:00000030 $d
    {standard input}:973    .text.ctrl_sam3ucfg_cb:00000000 $t
    {standard input}:979    .text.ctrl_sam3ucfg_cb:00000000 ctrl_sam3ucfg_cb
    {standard input}:1069   .text.ctrl_sam3ucfg_cb:00000068 $d
    {standard input}:1082   .text.ctrl_progfpga_bulk:00000000 $t
    {standard input}:1089   .text.ctrl_progfpga_bulk:00000000 ctrl_progfpga_bulk
    {standard input}:1146   .text.ctrl_progfpga_bulk:00000034 $d
    {standard input}:1154   .text.ctrl_change_pwr:00000000 $t
    {standard input}:1161   .text.ctrl_change_pwr:00000000 ctrl_change_pwr
    {standard input}:1247   .text.ctrl_change_pwr:00000068 $d
    {standard input}:1254   .text.ctrl_fpga_reset:00000000 $t
    {standard input}:1261   .text.ctrl_fpga_reset:00000000 ctrl_fpga_reset
    {standard input}:1291   .text.ctrl_fpga_reset:00000014 $d
    {standard input}:1297   .text.main_setup_out_received:00000000 $t
    {standard input}:1304   .text.main_setup_out_received:00000000 main_setup_out_received
    {standard input}:1345   .text.main_setup_out_received:00000030 $d
    {standard input}:1367   .text.main_setup_out_received:00000088 $t
    {standard input}:1493   .text.main_setup_out_received:00000120 $d
    {standard input}:1509   .text.main_setup_in_received:00000000 $t
    {standard input}:1516   .text.main_setup_in_received:00000000 main_setup_in_received
    {standard input}:1642   .text.main_setup_in_received:000000a4 $d
    {standard input}:1882   .bss.respbuf.9232:00000000 respbuf.9232
    {standard input}:1653   .text.main_vendor_bulk_in_received:00000000 $t
    {standard input}:1715   .text.main_vendor_bulk_in_received:00000030 $d
    {standard input}:1721   .text.main_vendor_bulk_out_received:00000000 $t
    {standard input}:1861   .text.main_vendor_bulk_out_received:000000a0 $d
    {standard input}:1873   .bss.respbuf.9218:00000000 $d
    {standard input}:1876   .bss.respbuf.9218:00000000 respbuf.9218
    {standard input}:1879   .bss.respbuf.9232:00000000 $d
                           .group:00000000 wm4.0.7d8dd4860124405c65f5049e8a79afcb
                           .group:00000000 wm4.stddef.h.39.99b5021e28f91cdb161c889e07266673
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.newlib.h.8.f6e543eac3f2f65163ba2ffe3b04987b
                           .group:00000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:00000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.cdefs.h.47.14fad0b327eb9dcf106599b738d85132
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:00000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:00000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.conf_clock.h.45.5dc276d21b4d793a62f1a9757cc18d5c
                           .group:00000000 wm4.board.h.48.ce8d06c36cc583d9bf62738411f62e4d
                           .group:00000000 wm4.cw521.h.62.d34c289ace4a92d90be8fb389db40479
                           .group:00000000 wm4.pmc.h.45.bbe1bf97a811e3b283420b2eeadf0b35
                           .group:00000000 wm4.osc.h.94.b766cddafe899eca01d775f7b2906680
                           .group:00000000 wm4.pll.h.45.a605c31ca466ae25752a678e8572be48
                           .group:00000000 wm4.sysclk.h.156.541a142b0016a365728ea1f7c0e3db84
                           .group:00000000 wm4.cycle_counter.h.44.fde38fb1acfd6555d72e65fae6e86af5
                           .group:00000000 wm4.delay.h.105.f2a8ab5e71eab0684cf6985b5c2fc9e8
                           .group:00000000 wm4.efc.h.45.ec5734119c630498df26106bacf9a684
                           .group:00000000 wm4.flash_efc.h.90.a4a39259055880dc10b861c5fe1b99e7
                           .group:00000000 wm4.pio.h.45.95f22b0ea02ddc698ec54fc56bf6f38c
                           .group:00000000 wm4.sam_gpio.h.50.76a45c51855d665134f8211cd601d693
                           .group:00000000 wm4.ioport_pio.h.44.373b34364b4ef25fac62017cd942a761
                           .group:00000000 wm4.sleep.h.45.ef10e1aee6f903405be19980a8333b7f
                           .group:00000000 wm4.smc.h.45.17a94aa976bb62b1109d03e8a314a569
                           .group:00000000 wm4.spi.h.45.712c66be09ffbac297c2e00923077297
                           .group:00000000 wm4.conf_sleepmgr.h.44.d825b913294720022fefe7201514fca3
                           .group:00000000 wm4.twi.h.45.ba70de99d200dafba570ce8f7058737a
                           .group:00000000 wm4.twi_master.h.90.08c062d0fa8f8aeea342ceeb79263395
                           .group:00000000 wm4.twi_slave.h.45.8b3d1a3d2e43ebc7d0161f4142989871
                           .group:00000000 wm4.uart.h.45.a5af743b8064bd84d1a6438457096e18
                           .group:00000000 wm4.usart.h.46.eae6fe592b7ea0768efef8d312e7f44f
                           .group:00000000 wm4.conf_uart_serial.h.45.245cdceaa1a3811fd043bf660ce38054
                           .group:00000000 wm4.conf_usb.h.45.dde1b096e128cb4c70cbe39d63ef79bf
                           .group:00000000 wm4.udi_vendor_conf.h.56.4348c8e521d040f44df868219dae6785
                           .group:00000000 wm4.usb_atmel.h.45.c31b525dbe01f8d9e2022a03356ec174
                           .group:00000000 wm4.usb_protocol.h.63.850c58f3469fce50a9ac9a6854f7594b
                           .group:00000000 wm4.usb_protocol_vendor.h.45.83dfe073428ff799abc3ed1c7b04c77d
                           .group:00000000 wm4.udc_desc.h.77.5fec235bd7553e7256e345e020840072
                           .group:00000000 wm4.udd.h.103.3ccc59b50c14ec70568e6136eeb22d56
                           .group:00000000 wm4.udi_vendor.h.125.7b9085237d4d4a9757f4c148fba1918d
                           .group:00000000 wm4.genclk.h.45.f7865052b40a907e4bab1a8f483a50e2
                           .group:00000000 wm4.usb.h.20.f560de5b472e2e451b5cba954e5d0064
                           .group:00000000 wm4.usb_xmem.h.16.2bfdefafb315212fe60310212368ffbb
                           .group:00000000 wm4.fpga_program.h.36.ca9933fdd1528ae3419efe9d74ea4ee5
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd

UNDEFINED SYMBOLS
pmc_switch_sclk_to_32kxtal
pmc_osc_enable_fastrc
pmc_osc_enable_main_xtal
pmc_osc_bypass_main_xtal
pmc_osc_is_ready_32kxtal
pmc_osc_is_ready_fastrc
pmc_osc_is_ready_main_xtal
udd_detach
udi_vendor_bulk_out_run
FPGA_releaselock
FPGA_setlock
FPGA_setaddr
udi_vendor_bulk_in_run
xram
udd_g_ctrlreq
pmc_switch_mck_to_mainck
pmc_switch_mck_to_pllack
efc_perform_command
fpga_program_setup1
fpga_program_setup2
pio_set_pin_high
pio_set_pin_low
FPGA_lockstatus
pio_get_pin_value
fpga_program_sendbyte
