
phywhisperer-SAM3U1C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000adbc  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008adbc  0008adbc  0001adbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000d58  20000000  0008adc4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000005fc  20000d58  0008bb1c  00020d58  2**2
                  ALLOC
  4 .stack        00000400  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020d58  2**0
                  CONTENTS, READONLY
  6 .comment      00000075  00000000  00000000  00020d81  2**0
                  CONTENTS, READONLY
  7 .debug_info   000212b3  00000000  00000000  00020df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000438e  00000000  00000000  000420a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000088ca  00000000  00000000  00046437  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ff8  00000000  00000000  0004ed01  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000e98  00000000  00000000  0004fcf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00018411  00000000  00000000  00050b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000142c6  00000000  00000000  00068fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000595a9  00000000  00000000  0007d268  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004f94  00000000  00000000  000d6814  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 04 08 20 11 37 08 00 d9 46 08 00 d9 46 08 00     ... .7...F...F..
   80010:	d9 46 08 00 d9 46 08 00 d9 46 08 00 00 00 00 00     .F...F...F......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 d9 46 08 00     .............F..
   80030:	d9 46 08 00 00 00 00 00 d9 46 08 00 d9 46 08 00     .F.......F...F..
   80040:	d9 46 08 00 d9 46 08 00 d9 46 08 00 d9 46 08 00     .F...F...F...F..
   80050:	d9 46 08 00 d9 46 08 00 d9 46 08 00 d9 46 08 00     .F...F...F...F..
   80060:	d9 46 08 00 d9 46 08 00 99 1a 08 00 b1 1a 08 00     .F...F..........
   80070:	d9 46 08 00 d9 46 08 00 d9 46 08 00 d9 46 08 00     .F...F...F...F..
   80080:	d9 46 08 00 d9 46 08 00 d9 46 08 00 d9 46 08 00     .F...F...F...F..
   80090:	d9 46 08 00 d9 46 08 00 d9 46 08 00 d9 46 08 00     .F...F...F...F..
   800a0:	d9 46 08 00 d9 46 08 00 d9 46 08 00 d9 46 08 00     .F...F...F...F..
   800b0:	d9 46 08 00 9d 1c 08 00 d9 46 08 00                 .F.......F..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000d58 	.word	0x20000d58
   800d8:	00000000 	.word	0x00000000
   800dc:	0008adc4 	.word	0x0008adc4

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	20000d5c 	.word	0x20000d5c
   800f8:	0008adc4 	.word	0x0008adc4

000800fc <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   800fc:	b580      	push	{r7, lr}
   800fe:	b082      	sub	sp, #8
   80100:	af00      	add	r7, sp, #0
   80102:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80104:	687b      	ldr	r3, [r7, #4]
   80106:	2b07      	cmp	r3, #7
   80108:	d82e      	bhi.n	80168 <osc_enable+0x6c>
   8010a:	a201      	add	r2, pc, #4	; (adr r2, 80110 <osc_enable+0x14>)
   8010c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80110:	00080167 	.word	0x00080167
   80114:	00080131 	.word	0x00080131
   80118:	00080139 	.word	0x00080139
   8011c:	00080141 	.word	0x00080141
   80120:	00080149 	.word	0x00080149
   80124:	00080151 	.word	0x00080151
   80128:	00080159 	.word	0x00080159
   8012c:	00080161 	.word	0x00080161
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80130:	2000      	movs	r0, #0
   80132:	4b0f      	ldr	r3, [pc, #60]	; (80170 <osc_enable+0x74>)
   80134:	4798      	blx	r3
		break;
   80136:	e017      	b.n	80168 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80138:	2001      	movs	r0, #1
   8013a:	4b0d      	ldr	r3, [pc, #52]	; (80170 <osc_enable+0x74>)
   8013c:	4798      	blx	r3
		break;
   8013e:	e013      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80140:	2000      	movs	r0, #0
   80142:	4b0c      	ldr	r3, [pc, #48]	; (80174 <osc_enable+0x78>)
   80144:	4798      	blx	r3
		break;
   80146:	e00f      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80148:	2010      	movs	r0, #16
   8014a:	4b0a      	ldr	r3, [pc, #40]	; (80174 <osc_enable+0x78>)
   8014c:	4798      	blx	r3
		break;
   8014e:	e00b      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80150:	2020      	movs	r0, #32
   80152:	4b08      	ldr	r3, [pc, #32]	; (80174 <osc_enable+0x78>)
   80154:	4798      	blx	r3
		break;
   80156:	e007      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80158:	203e      	movs	r0, #62	; 0x3e
   8015a:	4b07      	ldr	r3, [pc, #28]	; (80178 <osc_enable+0x7c>)
   8015c:	4798      	blx	r3
				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
		break;
   8015e:	e003      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_osc_bypass_main_xtal();
   80160:	4b06      	ldr	r3, [pc, #24]	; (8017c <osc_enable+0x80>)
   80162:	4798      	blx	r3
		break;
   80164:	e000      	b.n	80168 <osc_enable+0x6c>
		break;
   80166:	bf00      	nop
	}
}
   80168:	bf00      	nop
   8016a:	3708      	adds	r7, #8
   8016c:	46bd      	mov	sp, r7
   8016e:	bd80      	pop	{r7, pc}
   80170:	00083c89 	.word	0x00083c89
   80174:	00083cf5 	.word	0x00083cf5
   80178:	00083d69 	.word	0x00083d69
   8017c:	00083db5 	.word	0x00083db5

00080180 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   80180:	b580      	push	{r7, lr}
   80182:	b082      	sub	sp, #8
   80184:	af00      	add	r7, sp, #0
   80186:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80188:	687b      	ldr	r3, [r7, #4]
   8018a:	2b07      	cmp	r3, #7
   8018c:	d82f      	bhi.n	801ee <osc_is_ready+0x6e>
   8018e:	a201      	add	r2, pc, #4	; (adr r2, 80194 <osc_is_ready+0x14>)
   80190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80194:	000801b5 	.word	0x000801b5
   80198:	000801b9 	.word	0x000801b9
   8019c:	000801b9 	.word	0x000801b9
   801a0:	000801cb 	.word	0x000801cb
   801a4:	000801cb 	.word	0x000801cb
   801a8:	000801cb 	.word	0x000801cb
   801ac:	000801dd 	.word	0x000801dd
   801b0:	000801dd 	.word	0x000801dd
	case OSC_SLCK_32K_RC:
		return 1;
   801b4:	2301      	movs	r3, #1
   801b6:	e01b      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   801b8:	4b0f      	ldr	r3, [pc, #60]	; (801f8 <osc_is_ready+0x78>)
   801ba:	4798      	blx	r3
   801bc:	4603      	mov	r3, r0
   801be:	2b00      	cmp	r3, #0
   801c0:	bf14      	ite	ne
   801c2:	2301      	movne	r3, #1
   801c4:	2300      	moveq	r3, #0
   801c6:	b2db      	uxtb	r3, r3
   801c8:	e012      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();
   801ca:	4b0c      	ldr	r3, [pc, #48]	; (801fc <osc_is_ready+0x7c>)
   801cc:	4798      	blx	r3
   801ce:	4603      	mov	r3, r0
   801d0:	2b00      	cmp	r3, #0
   801d2:	bf14      	ite	ne
   801d4:	2301      	movne	r3, #1
   801d6:	2300      	moveq	r3, #0
   801d8:	b2db      	uxtb	r3, r3
   801da:	e009      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   801dc:	4b08      	ldr	r3, [pc, #32]	; (80200 <osc_is_ready+0x80>)
   801de:	4798      	blx	r3
   801e0:	4603      	mov	r3, r0
   801e2:	2b00      	cmp	r3, #0
   801e4:	bf14      	ite	ne
   801e6:	2301      	movne	r3, #1
   801e8:	2300      	moveq	r3, #0
   801ea:	b2db      	uxtb	r3, r3
   801ec:	e000      	b.n	801f0 <osc_is_ready+0x70>
	}

	return 0;
   801ee:	2300      	movs	r3, #0
}
   801f0:	4618      	mov	r0, r3
   801f2:	3708      	adds	r7, #8
   801f4:	46bd      	mov	sp, r7
   801f6:	bd80      	pop	{r7, pc}
   801f8:	00083cc1 	.word	0x00083cc1
   801fc:	00083d51 	.word	0x00083d51
   80200:	00083e01 	.word	0x00083e01

00080204 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80204:	b480      	push	{r7}
   80206:	b083      	sub	sp, #12
   80208:	af00      	add	r7, sp, #0
   8020a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8020c:	687b      	ldr	r3, [r7, #4]
   8020e:	2b07      	cmp	r3, #7
   80210:	d823      	bhi.n	8025a <osc_get_rate+0x56>
   80212:	a201      	add	r2, pc, #4	; (adr r2, 80218 <osc_get_rate+0x14>)
   80214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80218:	00080239 	.word	0x00080239
   8021c:	0008023f 	.word	0x0008023f
   80220:	00080243 	.word	0x00080243
   80224:	00080247 	.word	0x00080247
   80228:	0008024b 	.word	0x0008024b
   8022c:	0008024f 	.word	0x0008024f
   80230:	00080253 	.word	0x00080253
   80234:	00080257 	.word	0x00080257
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80238:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8023c:	e00e      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8023e:	2300      	movs	r3, #0
   80240:	e00c      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80242:	2300      	movs	r3, #0
   80244:	e00a      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80246:	4b08      	ldr	r3, [pc, #32]	; (80268 <osc_get_rate+0x64>)
   80248:	e008      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8024a:	4b08      	ldr	r3, [pc, #32]	; (8026c <osc_get_rate+0x68>)
   8024c:	e006      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8024e:	4b08      	ldr	r3, [pc, #32]	; (80270 <osc_get_rate+0x6c>)
   80250:	e004      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80252:	4b07      	ldr	r3, [pc, #28]	; (80270 <osc_get_rate+0x6c>)
   80254:	e002      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80256:	4b06      	ldr	r3, [pc, #24]	; (80270 <osc_get_rate+0x6c>)
   80258:	e000      	b.n	8025c <osc_get_rate+0x58>
	}

	return 0;
   8025a:	2300      	movs	r3, #0
}
   8025c:	4618      	mov	r0, r3
   8025e:	370c      	adds	r7, #12
   80260:	46bd      	mov	sp, r7
   80262:	bc80      	pop	{r7}
   80264:	4770      	bx	lr
   80266:	bf00      	nop
   80268:	003d0900 	.word	0x003d0900
   8026c:	007a1200 	.word	0x007a1200
   80270:	00b71b00 	.word	0x00b71b00

00080274 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   80274:	b580      	push	{r7, lr}
   80276:	b082      	sub	sp, #8
   80278:	af00      	add	r7, sp, #0
   8027a:	4603      	mov	r3, r0
   8027c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8027e:	bf00      	nop
   80280:	79fb      	ldrb	r3, [r7, #7]
   80282:	4618      	mov	r0, r3
   80284:	4b05      	ldr	r3, [pc, #20]	; (8029c <osc_wait_ready+0x28>)
   80286:	4798      	blx	r3
   80288:	4603      	mov	r3, r0
   8028a:	f083 0301 	eor.w	r3, r3, #1
   8028e:	b2db      	uxtb	r3, r3
   80290:	2b00      	cmp	r3, #0
   80292:	d1f5      	bne.n	80280 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   80294:	bf00      	nop
   80296:	3708      	adds	r7, #8
   80298:	46bd      	mov	sp, r7
   8029a:	bd80      	pop	{r7, pc}
   8029c:	00080181 	.word	0x00080181

000802a0 <pll_config_init>:
 *       hardware mul+1 is hidden in this implementation. Use mul as mul
 *       effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802a0:	b580      	push	{r7, lr}
   802a2:	b086      	sub	sp, #24
   802a4:	af00      	add	r7, sp, #0
   802a6:	60f8      	str	r0, [r7, #12]
   802a8:	607a      	str	r2, [r7, #4]
   802aa:	603b      	str	r3, [r7, #0]
   802ac:	460b      	mov	r3, r1
   802ae:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802b0:	687b      	ldr	r3, [r7, #4]
   802b2:	2b00      	cmp	r3, #0
   802b4:	d107      	bne.n	802c6 <pll_config_init+0x26>
   802b6:	683b      	ldr	r3, [r7, #0]
   802b8:	2b00      	cmp	r3, #0
   802ba:	d104      	bne.n	802c6 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   802bc:	68fb      	ldr	r3, [r7, #12]
   802be:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   802c2:	601a      	str	r2, [r3, #0]
   802c4:	e019      	b.n	802fa <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   802c6:	7afb      	ldrb	r3, [r7, #11]
   802c8:	4618      	mov	r0, r3
   802ca:	4b0e      	ldr	r3, [pc, #56]	; (80304 <pll_config_init+0x64>)
   802cc:	4798      	blx	r3
   802ce:	4602      	mov	r2, r0
   802d0:	687b      	ldr	r3, [r7, #4]
   802d2:	fbb2 f3f3 	udiv	r3, r2, r3
   802d6:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   802d8:	697b      	ldr	r3, [r7, #20]
   802da:	683a      	ldr	r2, [r7, #0]
   802dc:	fb02 f303 	mul.w	r3, r2, r3
   802e0:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802e2:	683b      	ldr	r3, [r7, #0]
   802e4:	3b01      	subs	r3, #1
   802e6:	041a      	lsls	r2, r3, #16
   802e8:	4b07      	ldr	r3, [pc, #28]	; (80308 <pll_config_init+0x68>)
   802ea:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802ec:	687a      	ldr	r2, [r7, #4]
   802ee:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802f0:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802f2:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802f6:	68fb      	ldr	r3, [r7, #12]
   802f8:	601a      	str	r2, [r3, #0]
			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
   802fa:	bf00      	nop
   802fc:	3718      	adds	r7, #24
   802fe:	46bd      	mov	sp, r7
   80300:	bd80      	pop	{r7, pc}
   80302:	bf00      	nop
   80304:	00080205 	.word	0x00080205
   80308:	07ff0000 	.word	0x07ff0000

0008030c <pll_enable>:
	}
}

static inline void pll_enable(const struct pll_config *p_cfg,
		uint32_t ul_pll_id)
{
   8030c:	b580      	push	{r7, lr}
   8030e:	b082      	sub	sp, #8
   80310:	af00      	add	r7, sp, #0
   80312:	6078      	str	r0, [r7, #4]
   80314:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80316:	683b      	ldr	r3, [r7, #0]
   80318:	2b00      	cmp	r3, #0
   8031a:	d108      	bne.n	8032e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   8031c:	4b09      	ldr	r3, [pc, #36]	; (80344 <pll_enable+0x38>)
   8031e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80320:	687b      	ldr	r3, [r7, #4]
   80322:	681b      	ldr	r3, [r3, #0]
   80324:	4a08      	ldr	r2, [pc, #32]	; (80348 <pll_enable+0x3c>)
   80326:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8032a:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   8032c:	e005      	b.n	8033a <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8032e:	687b      	ldr	r3, [r7, #4]
   80330:	681b      	ldr	r3, [r3, #0]
   80332:	4a05      	ldr	r2, [pc, #20]	; (80348 <pll_enable+0x3c>)
   80334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80338:	61d3      	str	r3, [r2, #28]
}
   8033a:	bf00      	nop
   8033c:	3708      	adds	r7, #8
   8033e:	46bd      	mov	sp, r7
   80340:	bd80      	pop	{r7, pc}
   80342:	bf00      	nop
   80344:	00083e71 	.word	0x00083e71
   80348:	400e0400 	.word	0x400e0400

0008034c <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   8034c:	b580      	push	{r7, lr}
   8034e:	b082      	sub	sp, #8
   80350:	af00      	add	r7, sp, #0
   80352:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80354:	687b      	ldr	r3, [r7, #4]
   80356:	2b00      	cmp	r3, #0
   80358:	d103      	bne.n	80362 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8035a:	4b05      	ldr	r3, [pc, #20]	; (80370 <pll_is_locked+0x24>)
   8035c:	4798      	blx	r3
   8035e:	4603      	mov	r3, r0
   80360:	e002      	b.n	80368 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   80362:	4b04      	ldr	r3, [pc, #16]	; (80374 <pll_is_locked+0x28>)
   80364:	4798      	blx	r3
   80366:	4603      	mov	r3, r0
	}
}
   80368:	4618      	mov	r0, r3
   8036a:	3708      	adds	r7, #8
   8036c:	46bd      	mov	sp, r7
   8036e:	bd80      	pop	{r7, pc}
   80370:	00083e89 	.word	0x00083e89
   80374:	00083ebd 	.word	0x00083ebd

00080378 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   80378:	b580      	push	{r7, lr}
   8037a:	b082      	sub	sp, #8
   8037c:	af00      	add	r7, sp, #0
   8037e:	4603      	mov	r3, r0
   80380:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80382:	79fb      	ldrb	r3, [r7, #7]
   80384:	3b03      	subs	r3, #3
   80386:	2b04      	cmp	r3, #4
   80388:	d808      	bhi.n	8039c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8038a:	79fb      	ldrb	r3, [r7, #7]
   8038c:	4618      	mov	r0, r3
   8038e:	4b06      	ldr	r3, [pc, #24]	; (803a8 <pll_enable_source+0x30>)
   80390:	4798      	blx	r3
		osc_wait_ready(e_src);
   80392:	79fb      	ldrb	r3, [r7, #7]
   80394:	4618      	mov	r0, r3
   80396:	4b05      	ldr	r3, [pc, #20]	; (803ac <pll_enable_source+0x34>)
   80398:	4798      	blx	r3
		break;
   8039a:	e000      	b.n	8039e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   8039c:	bf00      	nop
	}
}
   8039e:	bf00      	nop
   803a0:	3708      	adds	r7, #8
   803a2:	46bd      	mov	sp, r7
   803a4:	bd80      	pop	{r7, pc}
   803a6:	bf00      	nop
   803a8:	000800fd 	.word	0x000800fd
   803ac:	00080275 	.word	0x00080275

000803b0 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int ul_pll_id)
{
   803b0:	b590      	push	{r4, r7, lr}
   803b2:	b085      	sub	sp, #20
   803b4:	af00      	add	r7, sp, #0
   803b6:	6078      	str	r0, [r7, #4]
	struct pll_config pllcfg;

	if (pll_is_locked(ul_pll_id)) {
   803b8:	6878      	ldr	r0, [r7, #4]
   803ba:	4b21      	ldr	r3, [pc, #132]	; (80440 <pll_enable_config_defaults+0x90>)
   803bc:	4798      	blx	r3
   803be:	4603      	mov	r3, r0
   803c0:	2b00      	cmp	r3, #0
   803c2:	d139      	bne.n	80438 <pll_enable_config_defaults+0x88>
		return; // Pll already running
	}
	switch (ul_pll_id) {
   803c4:	687b      	ldr	r3, [r7, #4]
   803c6:	2b00      	cmp	r3, #0
   803c8:	d003      	beq.n	803d2 <pll_enable_config_defaults+0x22>
   803ca:	687b      	ldr	r3, [r7, #4]
   803cc:	2b01      	cmp	r3, #1
   803ce:	d015      	beq.n	803fc <pll_enable_config_defaults+0x4c>
				CONFIG_PLL1_MUL);
		break;
#endif
	default:
		Assert(false);
		break;
   803d0:	e024      	b.n	8041c <pll_enable_config_defaults+0x6c>
		pll_enable_source(CONFIG_PLL0_SOURCE);
   803d2:	2006      	movs	r0, #6
   803d4:	4b1b      	ldr	r3, [pc, #108]	; (80444 <pll_enable_config_defaults+0x94>)
   803d6:	4798      	blx	r3
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   803d8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   803dc:	4b1a      	ldr	r3, [pc, #104]	; (80448 <pll_enable_config_defaults+0x98>)
   803de:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   803e0:	bf00      	nop
   803e2:	4b1a      	ldr	r3, [pc, #104]	; (8044c <pll_enable_config_defaults+0x9c>)
   803e4:	4798      	blx	r3
   803e6:	4603      	mov	r3, r0
   803e8:	2b00      	cmp	r3, #0
   803ea:	d0fa      	beq.n	803e2 <pll_enable_config_defaults+0x32>
		pll_config_init(&pllcfg,
   803ec:	f107 000c 	add.w	r0, r7, #12
   803f0:	2310      	movs	r3, #16
   803f2:	2201      	movs	r2, #1
   803f4:	2106      	movs	r1, #6
   803f6:	4c16      	ldr	r4, [pc, #88]	; (80450 <pll_enable_config_defaults+0xa0>)
   803f8:	47a0      	blx	r4
		break;
   803fa:	e00f      	b.n	8041c <pll_enable_config_defaults+0x6c>
		if (pmc_osc_is_bypassed_main_xtal()) {
   803fc:	4b15      	ldr	r3, [pc, #84]	; (80454 <pll_enable_config_defaults+0xa4>)
   803fe:	4798      	blx	r3
   80400:	4603      	mov	r3, r0
   80402:	2b00      	cmp	r3, #0
   80404:	d102      	bne.n	8040c <pll_enable_config_defaults+0x5c>
			pll_enable_source(CONFIG_PLL1_SOURCE);
   80406:	2006      	movs	r0, #6
   80408:	4b0e      	ldr	r3, [pc, #56]	; (80444 <pll_enable_config_defaults+0x94>)
   8040a:	4798      	blx	r3
		pll_config_init(&pllcfg,
   8040c:	f107 000c 	add.w	r0, r7, #12
   80410:	2300      	movs	r3, #0
   80412:	2200      	movs	r2, #0
   80414:	2106      	movs	r1, #6
   80416:	4c0e      	ldr	r4, [pc, #56]	; (80450 <pll_enable_config_defaults+0xa0>)
   80418:	47a0      	blx	r4
		break;
   8041a:	bf00      	nop
	}
	pll_enable(&pllcfg, ul_pll_id);
   8041c:	f107 030c 	add.w	r3, r7, #12
   80420:	6879      	ldr	r1, [r7, #4]
   80422:	4618      	mov	r0, r3
   80424:	4b0c      	ldr	r3, [pc, #48]	; (80458 <pll_enable_config_defaults+0xa8>)
   80426:	4798      	blx	r3
	while (!pll_is_locked(ul_pll_id));
   80428:	bf00      	nop
   8042a:	6878      	ldr	r0, [r7, #4]
   8042c:	4b04      	ldr	r3, [pc, #16]	; (80440 <pll_enable_config_defaults+0x90>)
   8042e:	4798      	blx	r3
   80430:	4603      	mov	r3, r0
   80432:	2b00      	cmp	r3, #0
   80434:	d0f9      	beq.n	8042a <pll_enable_config_defaults+0x7a>
   80436:	e000      	b.n	8043a <pll_enable_config_defaults+0x8a>
		return; // Pll already running
   80438:	bf00      	nop
}
   8043a:	3714      	adds	r7, #20
   8043c:	46bd      	mov	sp, r7
   8043e:	bd90      	pop	{r4, r7, pc}
   80440:	0008034d 	.word	0x0008034d
   80444:	00080379 	.word	0x00080379
   80448:	00083e31 	.word	0x00083e31
   8044c:	00083e19 	.word	0x00083e19
   80450:	000802a1 	.word	0x000802a1
   80454:	00083de9 	.word	0x00083de9
   80458:	0008030d 	.word	0x0008030d

0008045c <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
   8045c:	b480      	push	{r7}
   8045e:	b08d      	sub	sp, #52	; 0x34
   80460:	af00      	add	r7, sp, #0
   80462:	6078      	str	r0, [r7, #4]
   80464:	6039      	str	r1, [r7, #0]
   80466:	687b      	ldr	r3, [r7, #4]
   80468:	62fb      	str	r3, [r7, #44]	; 0x2c
   8046a:	683b      	ldr	r3, [r7, #0]
   8046c:	62bb      	str	r3, [r7, #40]	; 0x28
   8046e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80470:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   80472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80474:	095a      	lsrs	r2, r3, #5
   80476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80478:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   8047a:	6a3b      	ldr	r3, [r7, #32]
   8047c:	f003 031f 	and.w	r3, r3, #31
   80480:	2101      	movs	r1, #1
   80482:	fa01 f303 	lsl.w	r3, r1, r3
   80486:	61fa      	str	r2, [r7, #28]
   80488:	61bb      	str	r3, [r7, #24]
   8048a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8048c:	617b      	str	r3, [r7, #20]
   8048e:	69fb      	ldr	r3, [r7, #28]
   80490:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80492:	693b      	ldr	r3, [r7, #16]
   80494:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80498:	f203 7306 	addw	r3, r3, #1798	; 0x706
   8049c:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
   8049e:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
   804a0:	697b      	ldr	r3, [r7, #20]
   804a2:	f003 0308 	and.w	r3, r3, #8
   804a6:	2b00      	cmp	r3, #0
   804a8:	d003      	beq.n	804b2 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   804aa:	68fb      	ldr	r3, [r7, #12]
   804ac:	69ba      	ldr	r2, [r7, #24]
   804ae:	665a      	str	r2, [r3, #100]	; 0x64
   804b0:	e002      	b.n	804b8 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
   804b2:	68fb      	ldr	r3, [r7, #12]
   804b4:	69ba      	ldr	r2, [r7, #24]
   804b6:	661a      	str	r2, [r3, #96]	; 0x60
	} else {
		base->PIO_PPDDR = mask;
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   804b8:	697b      	ldr	r3, [r7, #20]
   804ba:	f003 0320 	and.w	r3, r3, #32
   804be:	2b00      	cmp	r3, #0
   804c0:	d003      	beq.n	804ca <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   804c2:	68fb      	ldr	r3, [r7, #12]
   804c4:	69ba      	ldr	r2, [r7, #24]
   804c6:	651a      	str	r2, [r3, #80]	; 0x50
   804c8:	e002      	b.n	804d0 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_MDDR = mask;
   804ca:	68fb      	ldr	r3, [r7, #12]
   804cc:	69ba      	ldr	r2, [r7, #24]
   804ce:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   804d0:	697b      	ldr	r3, [r7, #20]
   804d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   804d6:	2b00      	cmp	r3, #0
   804d8:	d003      	beq.n	804e2 <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   804da:	68fb      	ldr	r3, [r7, #12]
   804dc:	69ba      	ldr	r2, [r7, #24]
   804de:	621a      	str	r2, [r3, #32]
   804e0:	e002      	b.n	804e8 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_IFDR = mask;
   804e2:	68fb      	ldr	r3, [r7, #12]
   804e4:	69ba      	ldr	r2, [r7, #24]
   804e6:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
   804e8:	697b      	ldr	r3, [r7, #20]
   804ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
   804ee:	2b00      	cmp	r3, #0
   804f0:	d004      	beq.n	804fc <ioport_set_pin_mode+0xa0>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   804f2:	68fb      	ldr	r3, [r7, #12]
   804f4:	69ba      	ldr	r2, [r7, #24]
   804f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   804fa:	e003      	b.n	80504 <ioport_set_pin_mode+0xa8>
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   804fc:	68fb      	ldr	r3, [r7, #12]
   804fe:	69ba      	ldr	r2, [r7, #24]
   80500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_IFSCDR = mask;
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
   80504:	697b      	ldr	r3, [r7, #20]
   80506:	f003 0301 	and.w	r3, r3, #1
   8050a:	2b00      	cmp	r3, #0
   8050c:	d006      	beq.n	8051c <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   8050e:	68fb      	ldr	r3, [r7, #12]
   80510:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80512:	69bb      	ldr	r3, [r7, #24]
   80514:	431a      	orrs	r2, r3
   80516:	68fb      	ldr	r3, [r7, #12]
   80518:	671a      	str	r2, [r3, #112]	; 0x70
	arch_ioport_set_pin_mode(pin, mode);
}
   8051a:	e006      	b.n	8052a <ioport_set_pin_mode+0xce>
	} else {
		base->PIO_ABSR &= ~mask;
   8051c:	68fb      	ldr	r3, [r7, #12]
   8051e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80520:	69bb      	ldr	r3, [r7, #24]
   80522:	43db      	mvns	r3, r3
   80524:	401a      	ands	r2, r3
   80526:	68fb      	ldr	r3, [r7, #12]
   80528:	671a      	str	r2, [r3, #112]	; 0x70
   8052a:	bf00      	nop
   8052c:	3734      	adds	r7, #52	; 0x34
   8052e:	46bd      	mov	sp, r7
   80530:	bc80      	pop	{r7}
   80532:	4770      	bx	lr

00080534 <sleepmgr_sleep>:
#endif /* CONFIG_SLEEPMGR_ENABLE */
//! @}


static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
   80534:	b580      	push	{r7, lr}
   80536:	b082      	sub	sp, #8
   80538:	af00      	add	r7, sp, #0
   8053a:	4603      	mov	r3, r0
   8053c:	71fb      	strb	r3, [r7, #7]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8053e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80540:	f3bf 8f5f 	dmb	sy
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
   80544:	4b05      	ldr	r3, [pc, #20]	; (8055c <sleepmgr_sleep+0x28>)
   80546:	2200      	movs	r2, #0
   80548:	701a      	strb	r2, [r3, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
   8054a:	79fb      	ldrb	r3, [r7, #7]
   8054c:	4618      	mov	r0, r3
   8054e:	4b04      	ldr	r3, [pc, #16]	; (80560 <sleepmgr_sleep+0x2c>)
   80550:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
   80552:	bf00      	nop
   80554:	3708      	adds	r7, #8
   80556:	46bd      	mov	sp, r7
   80558:	bd80      	pop	{r7, pc}
   8055a:	bf00      	nop
   8055c:	2000031a 	.word	0x2000031a
   80560:	000854b1 	.word	0x000854b1

00080564 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
   80564:	b480      	push	{r7}
   80566:	b083      	sub	sp, #12
   80568:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   8056a:	2300      	movs	r3, #0
   8056c:	71fb      	strb	r3, [r7, #7]
   8056e:	e006      	b.n	8057e <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
   80570:	79fb      	ldrb	r3, [r7, #7]
   80572:	4a08      	ldr	r2, [pc, #32]	; (80594 <sleepmgr_init+0x30>)
   80574:	2100      	movs	r1, #0
   80576:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   80578:	79fb      	ldrb	r3, [r7, #7]
   8057a:	3301      	adds	r3, #1
   8057c:	71fb      	strb	r3, [r7, #7]
   8057e:	79fb      	ldrb	r3, [r7, #7]
   80580:	2b04      	cmp	r3, #4
   80582:	d9f5      	bls.n	80570 <sleepmgr_init+0xc>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   80584:	4b03      	ldr	r3, [pc, #12]	; (80594 <sleepmgr_init+0x30>)
   80586:	2201      	movs	r2, #1
   80588:	715a      	strb	r2, [r3, #5]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   8058a:	bf00      	nop
   8058c:	370c      	adds	r7, #12
   8058e:	46bd      	mov	sp, r7
   80590:	bc80      	pop	{r7}
   80592:	4770      	bx	lr
   80594:	20001324 	.word	0x20001324

00080598 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
   80598:	b480      	push	{r7}
   8059a:	b083      	sub	sp, #12
   8059c:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
   8059e:	2300      	movs	r3, #0
   805a0:	71fb      	strb	r3, [r7, #7]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
   805a2:	4b09      	ldr	r3, [pc, #36]	; (805c8 <sleepmgr_get_sleep_mode+0x30>)
   805a4:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
   805a6:	e005      	b.n	805b4 <sleepmgr_get_sleep_mode+0x1c>
		lock_ptr++;
   805a8:	683b      	ldr	r3, [r7, #0]
   805aa:	3301      	adds	r3, #1
   805ac:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
   805ae:	79fb      	ldrb	r3, [r7, #7]
   805b0:	3301      	adds	r3, #1
   805b2:	71fb      	strb	r3, [r7, #7]
	while (!(*lock_ptr)) {
   805b4:	683b      	ldr	r3, [r7, #0]
   805b6:	781b      	ldrb	r3, [r3, #0]
   805b8:	2b00      	cmp	r3, #0
   805ba:	d0f5      	beq.n	805a8 <sleepmgr_get_sleep_mode+0x10>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
   805bc:	79fb      	ldrb	r3, [r7, #7]
}
   805be:	4618      	mov	r0, r3
   805c0:	370c      	adds	r7, #12
   805c2:	46bd      	mov	sp, r7
   805c4:	bc80      	pop	{r7}
   805c6:	4770      	bx	lr
   805c8:	20001324 	.word	0x20001324

000805cc <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
   805cc:	b580      	push	{r7, lr}
   805ce:	b082      	sub	sp, #8
   805d0:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode;

	//cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
   805d2:	4b0a      	ldr	r3, [pc, #40]	; (805fc <sleepmgr_enter_sleep+0x30>)
   805d4:	4798      	blx	r3
   805d6:	4603      	mov	r3, r0
   805d8:	71fb      	strb	r3, [r7, #7]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
   805da:	79fb      	ldrb	r3, [r7, #7]
   805dc:	2b00      	cmp	r3, #0
   805de:	d106      	bne.n	805ee <sleepmgr_enter_sleep+0x22>
		cpu_irq_enable();
   805e0:	4b07      	ldr	r3, [pc, #28]	; (80600 <sleepmgr_enter_sleep+0x34>)
   805e2:	2201      	movs	r2, #1
   805e4:	701a      	strb	r2, [r3, #0]
   805e6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   805ea:	b662      	cpsie	i
		return;
   805ec:	e003      	b.n	805f6 <sleepmgr_enter_sleep+0x2a>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
   805ee:	79fb      	ldrb	r3, [r7, #7]
   805f0:	4618      	mov	r0, r3
   805f2:	4b04      	ldr	r3, [pc, #16]	; (80604 <sleepmgr_enter_sleep+0x38>)
   805f4:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   805f6:	3708      	adds	r7, #8
   805f8:	46bd      	mov	sp, r7
   805fa:	bd80      	pop	{r7, pc}
   805fc:	00080599 	.word	0x00080599
   80600:	2000031a 	.word	0x2000031a
   80604:	00080535 	.word	0x00080535

00080608 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   80608:	b480      	push	{r7}
   8060a:	b083      	sub	sp, #12
   8060c:	af00      	add	r7, sp, #0
   8060e:	6078      	str	r0, [r7, #4]
   80610:	6039      	str	r1, [r7, #0]
	ul_id = ul_id;
	p_cfg->ctrl = 0;
   80612:	687b      	ldr	r3, [r7, #4]
   80614:	2200      	movs	r2, #0
   80616:	601a      	str	r2, [r3, #0]
}
   80618:	bf00      	nop
   8061a:	370c      	adds	r7, #12
   8061c:	46bd      	mov	sp, r7
   8061e:	bc80      	pop	{r7}
   80620:	4770      	bx	lr
   80622:	0000      	movs	r0, r0

00080624 <genclk_config_set_source>:
//! \name Programmable Clock Source and Prescaler configuration
//@{

static inline void genclk_config_set_source(struct genclk_config *p_cfg,
		enum genclk_source e_src)
{
   80624:	b480      	push	{r7}
   80626:	b083      	sub	sp, #12
   80628:	af00      	add	r7, sp, #0
   8062a:	6078      	str	r0, [r7, #4]
   8062c:	460b      	mov	r3, r1
   8062e:	70fb      	strb	r3, [r7, #3]
	p_cfg->ctrl &= (~PMC_PCK_CSS_Msk);
   80630:	687b      	ldr	r3, [r7, #4]
   80632:	681b      	ldr	r3, [r3, #0]
   80634:	f023 0207 	bic.w	r2, r3, #7
   80638:	687b      	ldr	r3, [r7, #4]
   8063a:	601a      	str	r2, [r3, #0]

	switch (e_src) {
   8063c:	78fb      	ldrb	r3, [r7, #3]
   8063e:	2b0a      	cmp	r3, #10
   80640:	d839      	bhi.n	806b6 <genclk_config_set_source+0x92>
   80642:	a201      	add	r2, pc, #4	; (adr r2, 80648 <genclk_config_set_source+0x24>)
   80644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80648:	00080675 	.word	0x00080675
   8064c:	00080675 	.word	0x00080675
   80650:	00080675 	.word	0x00080675
   80654:	0008067f 	.word	0x0008067f
   80658:	0008067f 	.word	0x0008067f
   8065c:	0008067f 	.word	0x0008067f
   80660:	0008067f 	.word	0x0008067f
   80664:	0008067f 	.word	0x0008067f
   80668:	0008068d 	.word	0x0008068d
   8066c:	0008069b 	.word	0x0008069b
   80670:	000806a9 	.word	0x000806a9
	case GENCLK_PCK_SRC_SLCK_RC:
	case GENCLK_PCK_SRC_SLCK_XTAL:
	case GENCLK_PCK_SRC_SLCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_SLOW_CLK);
   80674:	687b      	ldr	r3, [r7, #4]
   80676:	681a      	ldr	r2, [r3, #0]
   80678:	687b      	ldr	r3, [r7, #4]
   8067a:	601a      	str	r2, [r3, #0]
		break;
   8067c:	e01b      	b.n	806b6 <genclk_config_set_source+0x92>
	case GENCLK_PCK_SRC_MAINCK_4M_RC:
	case GENCLK_PCK_SRC_MAINCK_8M_RC:
	case GENCLK_PCK_SRC_MAINCK_12M_RC:
	case GENCLK_PCK_SRC_MAINCK_XTAL:
	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_MAIN_CLK);
   8067e:	687b      	ldr	r3, [r7, #4]
   80680:	681b      	ldr	r3, [r3, #0]
   80682:	f043 0201 	orr.w	r2, r3, #1
   80686:	687b      	ldr	r3, [r7, #4]
   80688:	601a      	str	r2, [r3, #0]
		break;
   8068a:	e014      	b.n	806b6 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLACK:
		p_cfg->ctrl |= (PMC_PCK_CSS_PLLA_CLK);
   8068c:	687b      	ldr	r3, [r7, #4]
   8068e:	681b      	ldr	r3, [r3, #0]
   80690:	f043 0202 	orr.w	r2, r3, #2
   80694:	687b      	ldr	r3, [r7, #4]
   80696:	601a      	str	r2, [r3, #0]
		break;
   80698:	e00d      	b.n	806b6 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLBCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_UPLL_CLK);
   8069a:	687b      	ldr	r3, [r7, #4]
   8069c:	681b      	ldr	r3, [r3, #0]
   8069e:	f043 0203 	orr.w	r2, r3, #3
   806a2:	687b      	ldr	r3, [r7, #4]
   806a4:	601a      	str	r2, [r3, #0]
		break;
   806a6:	e006      	b.n	806b6 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_MCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_MCK);
   806a8:	687b      	ldr	r3, [r7, #4]
   806aa:	681b      	ldr	r3, [r3, #0]
   806ac:	f043 0204 	orr.w	r2, r3, #4
   806b0:	687b      	ldr	r3, [r7, #4]
   806b2:	601a      	str	r2, [r3, #0]
		break;
   806b4:	bf00      	nop
	}
}
   806b6:	bf00      	nop
   806b8:	370c      	adds	r7, #12
   806ba:	46bd      	mov	sp, r7
   806bc:	bc80      	pop	{r7}
   806be:	4770      	bx	lr

000806c0 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *p_cfg,
		uint32_t e_divider)
{
   806c0:	b480      	push	{r7}
   806c2:	b083      	sub	sp, #12
   806c4:	af00      	add	r7, sp, #0
   806c6:	6078      	str	r0, [r7, #4]
   806c8:	6039      	str	r1, [r7, #0]
	p_cfg->ctrl &= ~PMC_PCK_PRES_Msk;
   806ca:	687b      	ldr	r3, [r7, #4]
   806cc:	681b      	ldr	r3, [r3, #0]
   806ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   806d2:	687b      	ldr	r3, [r7, #4]
   806d4:	601a      	str	r2, [r3, #0]
	p_cfg->ctrl |= e_divider;
   806d6:	687b      	ldr	r3, [r7, #4]
   806d8:	681a      	ldr	r2, [r3, #0]
   806da:	683b      	ldr	r3, [r7, #0]
   806dc:	431a      	orrs	r2, r3
   806de:	687b      	ldr	r3, [r7, #4]
   806e0:	601a      	str	r2, [r3, #0]
}
   806e2:	bf00      	nop
   806e4:	370c      	adds	r7, #12
   806e6:	46bd      	mov	sp, r7
   806e8:	bc80      	pop	{r7}
   806ea:	4770      	bx	lr

000806ec <genclk_enable>:

//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   806ec:	b580      	push	{r7, lr}
   806ee:	b082      	sub	sp, #8
   806f0:	af00      	add	r7, sp, #0
   806f2:	6078      	str	r0, [r7, #4]
   806f4:	6039      	str	r1, [r7, #0]
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   806f6:	4907      	ldr	r1, [pc, #28]	; (80714 <genclk_enable+0x28>)
   806f8:	687b      	ldr	r3, [r7, #4]
   806fa:	681a      	ldr	r2, [r3, #0]
   806fc:	683b      	ldr	r3, [r7, #0]
   806fe:	3310      	adds	r3, #16
   80700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	pmc_enable_pck(ul_id);
   80704:	6838      	ldr	r0, [r7, #0]
   80706:	4b04      	ldr	r3, [pc, #16]	; (80718 <genclk_enable+0x2c>)
   80708:	4798      	blx	r3
}
   8070a:	bf00      	nop
   8070c:	3708      	adds	r7, #8
   8070e:	46bd      	mov	sp, r7
   80710:	bd80      	pop	{r7, pc}
   80712:	bf00      	nop
   80714:	400e0400 	.word	0x400e0400
   80718:	00083f6d 	.word	0x00083f6d

0008071c <genclk_enable_source>:
{
	pmc_disable_pck(ul_id);
}

static inline void genclk_enable_source(enum genclk_source e_src)
{
   8071c:	b580      	push	{r7, lr}
   8071e:	b082      	sub	sp, #8
   80720:	af00      	add	r7, sp, #0
   80722:	4603      	mov	r3, r0
   80724:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80726:	79fb      	ldrb	r3, [r7, #7]
   80728:	2b0a      	cmp	r3, #10
   8072a:	f200 80a2 	bhi.w	80872 <genclk_enable_source+0x156>
   8072e:	a201      	add	r2, pc, #4	; (adr r2, 80734 <genclk_enable_source+0x18>)
   80730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80734:	00080761 	.word	0x00080761
   80738:	00080783 	.word	0x00080783
   8073c:	000807a3 	.word	0x000807a3
   80740:	000807c3 	.word	0x000807c3
   80744:	000807e3 	.word	0x000807e3
   80748:	00080803 	.word	0x00080803
   8074c:	00080823 	.word	0x00080823
   80750:	00080843 	.word	0x00080843
   80754:	00080863 	.word	0x00080863
   80758:	0008086b 	.word	0x0008086b
   8075c:	00080873 	.word	0x00080873
	case GENCLK_PCK_SRC_SLCK_RC:
		if (!osc_is_ready(OSC_SLCK_32K_RC)) {
   80760:	2000      	movs	r0, #0
   80762:	4b4e      	ldr	r3, [pc, #312]	; (8089c <genclk_enable_source+0x180>)
   80764:	4798      	blx	r3
   80766:	4603      	mov	r3, r0
   80768:	f083 0301 	eor.w	r3, r3, #1
   8076c:	b2db      	uxtb	r3, r3
   8076e:	2b00      	cmp	r3, #0
   80770:	f000 8081 	beq.w	80876 <genclk_enable_source+0x15a>
			osc_enable(OSC_SLCK_32K_RC);
   80774:	2000      	movs	r0, #0
   80776:	4b4a      	ldr	r3, [pc, #296]	; (808a0 <genclk_enable_source+0x184>)
   80778:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_RC);
   8077a:	2000      	movs	r0, #0
   8077c:	4b49      	ldr	r3, [pc, #292]	; (808a4 <genclk_enable_source+0x188>)
   8077e:	4798      	blx	r3
		}
		break;
   80780:	e079      	b.n	80876 <genclk_enable_source+0x15a>

	case GENCLK_PCK_SRC_SLCK_XTAL:
		if (!osc_is_ready(OSC_SLCK_32K_XTAL)) {
   80782:	2001      	movs	r0, #1
   80784:	4b45      	ldr	r3, [pc, #276]	; (8089c <genclk_enable_source+0x180>)
   80786:	4798      	blx	r3
   80788:	4603      	mov	r3, r0
   8078a:	f083 0301 	eor.w	r3, r3, #1
   8078e:	b2db      	uxtb	r3, r3
   80790:	2b00      	cmp	r3, #0
   80792:	d072      	beq.n	8087a <genclk_enable_source+0x15e>
			osc_enable(OSC_SLCK_32K_XTAL);
   80794:	2001      	movs	r0, #1
   80796:	4b42      	ldr	r3, [pc, #264]	; (808a0 <genclk_enable_source+0x184>)
   80798:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_XTAL);
   8079a:	2001      	movs	r0, #1
   8079c:	4b41      	ldr	r3, [pc, #260]	; (808a4 <genclk_enable_source+0x188>)
   8079e:	4798      	blx	r3
		}
		break;
   807a0:	e06b      	b.n	8087a <genclk_enable_source+0x15e>

	case GENCLK_PCK_SRC_SLCK_BYPASS:
		if (!osc_is_ready(OSC_SLCK_32K_BYPASS)) {
   807a2:	2002      	movs	r0, #2
   807a4:	4b3d      	ldr	r3, [pc, #244]	; (8089c <genclk_enable_source+0x180>)
   807a6:	4798      	blx	r3
   807a8:	4603      	mov	r3, r0
   807aa:	f083 0301 	eor.w	r3, r3, #1
   807ae:	b2db      	uxtb	r3, r3
   807b0:	2b00      	cmp	r3, #0
   807b2:	d064      	beq.n	8087e <genclk_enable_source+0x162>
			osc_enable(OSC_SLCK_32K_BYPASS);
   807b4:	2002      	movs	r0, #2
   807b6:	4b3a      	ldr	r3, [pc, #232]	; (808a0 <genclk_enable_source+0x184>)
   807b8:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_BYPASS);
   807ba:	2002      	movs	r0, #2
   807bc:	4b39      	ldr	r3, [pc, #228]	; (808a4 <genclk_enable_source+0x188>)
   807be:	4798      	blx	r3
		}
		break;
   807c0:	e05d      	b.n	8087e <genclk_enable_source+0x162>

	case GENCLK_PCK_SRC_MAINCK_4M_RC:
		if (!osc_is_ready(OSC_MAINCK_4M_RC)) {
   807c2:	2003      	movs	r0, #3
   807c4:	4b35      	ldr	r3, [pc, #212]	; (8089c <genclk_enable_source+0x180>)
   807c6:	4798      	blx	r3
   807c8:	4603      	mov	r3, r0
   807ca:	f083 0301 	eor.w	r3, r3, #1
   807ce:	b2db      	uxtb	r3, r3
   807d0:	2b00      	cmp	r3, #0
   807d2:	d056      	beq.n	80882 <genclk_enable_source+0x166>
			osc_enable(OSC_MAINCK_4M_RC);
   807d4:	2003      	movs	r0, #3
   807d6:	4b32      	ldr	r3, [pc, #200]	; (808a0 <genclk_enable_source+0x184>)
   807d8:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_4M_RC);
   807da:	2003      	movs	r0, #3
   807dc:	4b31      	ldr	r3, [pc, #196]	; (808a4 <genclk_enable_source+0x188>)
   807de:	4798      	blx	r3
		}
		break;
   807e0:	e04f      	b.n	80882 <genclk_enable_source+0x166>

	case GENCLK_PCK_SRC_MAINCK_8M_RC:
		if (!osc_is_ready(OSC_MAINCK_8M_RC)) {
   807e2:	2004      	movs	r0, #4
   807e4:	4b2d      	ldr	r3, [pc, #180]	; (8089c <genclk_enable_source+0x180>)
   807e6:	4798      	blx	r3
   807e8:	4603      	mov	r3, r0
   807ea:	f083 0301 	eor.w	r3, r3, #1
   807ee:	b2db      	uxtb	r3, r3
   807f0:	2b00      	cmp	r3, #0
   807f2:	d048      	beq.n	80886 <genclk_enable_source+0x16a>
			osc_enable(OSC_MAINCK_8M_RC);
   807f4:	2004      	movs	r0, #4
   807f6:	4b2a      	ldr	r3, [pc, #168]	; (808a0 <genclk_enable_source+0x184>)
   807f8:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_8M_RC);
   807fa:	2004      	movs	r0, #4
   807fc:	4b29      	ldr	r3, [pc, #164]	; (808a4 <genclk_enable_source+0x188>)
   807fe:	4798      	blx	r3
		}
		break;
   80800:	e041      	b.n	80886 <genclk_enable_source+0x16a>

	case GENCLK_PCK_SRC_MAINCK_12M_RC:
		if (!osc_is_ready(OSC_MAINCK_12M_RC)) {
   80802:	2005      	movs	r0, #5
   80804:	4b25      	ldr	r3, [pc, #148]	; (8089c <genclk_enable_source+0x180>)
   80806:	4798      	blx	r3
   80808:	4603      	mov	r3, r0
   8080a:	f083 0301 	eor.w	r3, r3, #1
   8080e:	b2db      	uxtb	r3, r3
   80810:	2b00      	cmp	r3, #0
   80812:	d03a      	beq.n	8088a <genclk_enable_source+0x16e>
			osc_enable(OSC_MAINCK_12M_RC);
   80814:	2005      	movs	r0, #5
   80816:	4b22      	ldr	r3, [pc, #136]	; (808a0 <genclk_enable_source+0x184>)
   80818:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_12M_RC);
   8081a:	2005      	movs	r0, #5
   8081c:	4b21      	ldr	r3, [pc, #132]	; (808a4 <genclk_enable_source+0x188>)
   8081e:	4798      	blx	r3
		}
		break;
   80820:	e033      	b.n	8088a <genclk_enable_source+0x16e>

	case GENCLK_PCK_SRC_MAINCK_XTAL:
		if (!osc_is_ready(OSC_MAINCK_XTAL)) {
   80822:	2006      	movs	r0, #6
   80824:	4b1d      	ldr	r3, [pc, #116]	; (8089c <genclk_enable_source+0x180>)
   80826:	4798      	blx	r3
   80828:	4603      	mov	r3, r0
   8082a:	f083 0301 	eor.w	r3, r3, #1
   8082e:	b2db      	uxtb	r3, r3
   80830:	2b00      	cmp	r3, #0
   80832:	d02c      	beq.n	8088e <genclk_enable_source+0x172>
			osc_enable(OSC_MAINCK_XTAL);
   80834:	2006      	movs	r0, #6
   80836:	4b1a      	ldr	r3, [pc, #104]	; (808a0 <genclk_enable_source+0x184>)
   80838:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_XTAL);
   8083a:	2006      	movs	r0, #6
   8083c:	4b19      	ldr	r3, [pc, #100]	; (808a4 <genclk_enable_source+0x188>)
   8083e:	4798      	blx	r3
		}
		break;
   80840:	e025      	b.n	8088e <genclk_enable_source+0x172>

	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		if (!osc_is_ready(OSC_MAINCK_BYPASS)) {
   80842:	2007      	movs	r0, #7
   80844:	4b15      	ldr	r3, [pc, #84]	; (8089c <genclk_enable_source+0x180>)
   80846:	4798      	blx	r3
   80848:	4603      	mov	r3, r0
   8084a:	f083 0301 	eor.w	r3, r3, #1
   8084e:	b2db      	uxtb	r3, r3
   80850:	2b00      	cmp	r3, #0
   80852:	d01e      	beq.n	80892 <genclk_enable_source+0x176>
			osc_enable(OSC_MAINCK_BYPASS);
   80854:	2007      	movs	r0, #7
   80856:	4b12      	ldr	r3, [pc, #72]	; (808a0 <genclk_enable_source+0x184>)
   80858:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_BYPASS);
   8085a:	2007      	movs	r0, #7
   8085c:	4b11      	ldr	r3, [pc, #68]	; (808a4 <genclk_enable_source+0x188>)
   8085e:	4798      	blx	r3
		}
		break;
   80860:	e017      	b.n	80892 <genclk_enable_source+0x176>

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_PCK_SRC_PLLACK:
		pll_enable_config_defaults(0);
   80862:	2000      	movs	r0, #0
   80864:	4b10      	ldr	r3, [pc, #64]	; (808a8 <genclk_enable_source+0x18c>)
   80866:	4798      	blx	r3
		break;
   80868:	e014      	b.n	80894 <genclk_enable_source+0x178>
#endif

#ifdef CONFIG_PLL1_SOURCE
	case GENCLK_PCK_SRC_PLLBCK:
		pll_enable_config_defaults(1);
   8086a:	2001      	movs	r0, #1
   8086c:	4b0e      	ldr	r3, [pc, #56]	; (808a8 <genclk_enable_source+0x18c>)
   8086e:	4798      	blx	r3
		break;
   80870:	e010      	b.n	80894 <genclk_enable_source+0x178>
	case GENCLK_PCK_SRC_MCK:
		break;

	default:
		Assert(false);
		break;
   80872:	bf00      	nop
   80874:	e00e      	b.n	80894 <genclk_enable_source+0x178>
		break;
   80876:	bf00      	nop
   80878:	e00c      	b.n	80894 <genclk_enable_source+0x178>
		break;
   8087a:	bf00      	nop
   8087c:	e00a      	b.n	80894 <genclk_enable_source+0x178>
		break;
   8087e:	bf00      	nop
   80880:	e008      	b.n	80894 <genclk_enable_source+0x178>
		break;
   80882:	bf00      	nop
   80884:	e006      	b.n	80894 <genclk_enable_source+0x178>
		break;
   80886:	bf00      	nop
   80888:	e004      	b.n	80894 <genclk_enable_source+0x178>
		break;
   8088a:	bf00      	nop
   8088c:	e002      	b.n	80894 <genclk_enable_source+0x178>
		break;
   8088e:	bf00      	nop
   80890:	e000      	b.n	80894 <genclk_enable_source+0x178>
		break;
   80892:	bf00      	nop
	}
}
   80894:	bf00      	nop
   80896:	3708      	adds	r7, #8
   80898:	46bd      	mov	sp, r7
   8089a:	bd80      	pop	{r7, pc}
   8089c:	00080181 	.word	0x00080181
   808a0:	000800fd 	.word	0x000800fd
   808a4:	00080275 	.word	0x00080275
   808a8:	000803b1 	.word	0x000803b1

000808ac <phywhisperer_no_pwr>:

//Serial Number - will be read by device ID
char usb_serial_number[33] = "000000000000DEADBEEF";

void phywhisperer_no_pwr(void)
{
   808ac:	b480      	push	{r7}
   808ae:	af00      	add	r7, sp, #0
    PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   808b0:	4b05      	ldr	r3, [pc, #20]	; (808c8 <phywhisperer_no_pwr+0x1c>)
   808b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   808b6:	635a      	str	r2, [r3, #52]	; 0x34
    PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   808b8:	4b03      	ldr	r3, [pc, #12]	; (808c8 <phywhisperer_no_pwr+0x1c>)
   808ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   808be:	635a      	str	r2, [r3, #52]	; 0x34
}
   808c0:	bf00      	nop
   808c2:	46bd      	mov	sp, r7
   808c4:	bc80      	pop	{r7}
   808c6:	4770      	bx	lr
   808c8:	400e0c00 	.word	0x400e0c00

000808cc <phywhisperer_5V_pwr>:

void phywhisperer_5V_pwr(void)
{
   808cc:	b480      	push	{r7}
   808ce:	af00      	add	r7, sp, #0
    PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   808d0:	4b05      	ldr	r3, [pc, #20]	; (808e8 <phywhisperer_5V_pwr+0x1c>)
   808d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   808d6:	635a      	str	r2, [r3, #52]	; 0x34
    PIOA->PIO_SODR = (1 << F_VB5V); //enable host power
   808d8:	4b03      	ldr	r3, [pc, #12]	; (808e8 <phywhisperer_5V_pwr+0x1c>)
   808da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   808de:	631a      	str	r2, [r3, #48]	; 0x30
}
   808e0:	bf00      	nop
   808e2:	46bd      	mov	sp, r7
   808e4:	bc80      	pop	{r7}
   808e6:	4770      	bx	lr
   808e8:	400e0c00 	.word	0x400e0c00

000808ec <phywhisperer_host_pwr>:

void phywhisperer_host_pwr(void)
{
   808ec:	b480      	push	{r7}
   808ee:	af00      	add	r7, sp, #0
    PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   808f0:	4b05      	ldr	r3, [pc, #20]	; (80908 <phywhisperer_host_pwr+0x1c>)
   808f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   808f6:	635a      	str	r2, [r3, #52]	; 0x34
    PIOA->PIO_SODR = (1 << F_VBHOST); //enable sniff power
   808f8:	4b03      	ldr	r3, [pc, #12]	; (80908 <phywhisperer_host_pwr+0x1c>)
   808fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   808fe:	631a      	str	r2, [r3, #48]	; 0x30
}
   80900:	bf00      	nop
   80902:	46bd      	mov	sp, r7
   80904:	bc80      	pop	{r7}
   80906:	4770      	bx	lr
   80908:	400e0c00 	.word	0x400e0c00

0008090c <pwr_st_from_io>:
        phywhisperer_host_pwr();
    }
}

uint8_t pwr_st_from_io(void)
{
   8090c:	b480      	push	{r7}
   8090e:	af00      	add	r7, sp, #0
    if (!(PIOA->PIO_ODSR & (1 << F_VBHOST)) && !(PIOA->PIO_ODSR & (1 << F_VB5V))) {
   80910:	4b17      	ldr	r3, [pc, #92]	; (80970 <pwr_st_from_io+0x64>)
   80912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   80918:	2b00      	cmp	r3, #0
   8091a:	d107      	bne.n	8092c <pwr_st_from_io+0x20>
   8091c:	4b14      	ldr	r3, [pc, #80]	; (80970 <pwr_st_from_io+0x64>)
   8091e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80920:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   80924:	2b00      	cmp	r3, #0
   80926:	d101      	bne.n	8092c <pwr_st_from_io+0x20>
        //USB off
        return 0;
   80928:	2300      	movs	r3, #0
   8092a:	e01c      	b.n	80966 <pwr_st_from_io+0x5a>
    } else if (!(PIOA->PIO_ODSR & (1 << F_VBHOST)) && (PIOA->PIO_ODSR & (1 << F_VB5V))) {
   8092c:	4b10      	ldr	r3, [pc, #64]	; (80970 <pwr_st_from_io+0x64>)
   8092e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   80934:	2b00      	cmp	r3, #0
   80936:	d107      	bne.n	80948 <pwr_st_from_io+0x3c>
   80938:	4b0d      	ldr	r3, [pc, #52]	; (80970 <pwr_st_from_io+0x64>)
   8093a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8093c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   80940:	2b00      	cmp	r3, #0
   80942:	d001      	beq.n	80948 <pwr_st_from_io+0x3c>
        //Host power
        return 1;
   80944:	2301      	movs	r3, #1
   80946:	e00e      	b.n	80966 <pwr_st_from_io+0x5a>
    } else if ((PIOA->PIO_ODSR & (1 << F_VBHOST)) && !(PIOA->PIO_ODSR & (1 << F_VB5V))) {
   80948:	4b09      	ldr	r3, [pc, #36]	; (80970 <pwr_st_from_io+0x64>)
   8094a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8094c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   80950:	2b00      	cmp	r3, #0
   80952:	d007      	beq.n	80964 <pwr_st_from_io+0x58>
   80954:	4b06      	ldr	r3, [pc, #24]	; (80970 <pwr_st_from_io+0x64>)
   80956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80958:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   8095c:	2b00      	cmp	r3, #0
   8095e:	d101      	bne.n	80964 <pwr_st_from_io+0x58>
        //Sniffer power
        return 2;
   80960:	2302      	movs	r3, #2
   80962:	e000      	b.n	80966 <pwr_st_from_io+0x5a>
    } else {
        //Everything's on...
        return 0xFF;
   80964:	23ff      	movs	r3, #255	; 0xff
    }

}
   80966:	4618      	mov	r0, r3
   80968:	46bd      	mov	sp, r7
   8096a:	bc80      	pop	{r7}
   8096c:	4770      	bx	lr
   8096e:	bf00      	nop
   80970:	400e0c00 	.word	0x400e0c00

00080974 <phywhisperer_setup_pins>:

void phywhisperer_setup_pins(void)
{
   80974:	b580      	push	{r7, lr}
   80976:	af00      	add	r7, sp, #0
    board_init();
   80978:	4b3a      	ldr	r3, [pc, #232]	; (80a64 <phywhisperer_setup_pins+0xf0>)
   8097a:	4798      	blx	r3
    ioport_set_pin_mode(BUTTON_IN, IOPORT_MODE_PULLUP); //(1 << 2) = PULL UP
   8097c:	2108      	movs	r1, #8
   8097e:	2018      	movs	r0, #24
   80980:	4b39      	ldr	r3, [pc, #228]	; (80a68 <phywhisperer_setup_pins+0xf4>)
   80982:	4798      	blx	r3
    PIOA->PIO_ODR = (1 << BUTTON_IN);
   80984:	4b39      	ldr	r3, [pc, #228]	; (80a6c <phywhisperer_setup_pins+0xf8>)
   80986:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   8098a:	615a      	str	r2, [r3, #20]
    PIOA->PIO_PUER = (1 << BUTTON_IN); // enable pullup
   8098c:	4b37      	ldr	r3, [pc, #220]	; (80a6c <phywhisperer_setup_pins+0xf8>)
   8098e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   80992:	665a      	str	r2, [r3, #100]	; 0x64
    PIOA->PIO_DIFSR = (1 << BUTTON_IN); //enable debounce
   80994:	4b35      	ldr	r3, [pc, #212]	; (80a6c <phywhisperer_setup_pins+0xf8>)
   80996:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   8099a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    PIOA->PIO_OER = (1 << F_VB5V) | (1 << F_VBHOST); //enable output mode on VBHOST/VBSNIFF pins
   8099e:	4b33      	ldr	r3, [pc, #204]	; (80a6c <phywhisperer_setup_pins+0xf8>)
   809a0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
   809a4:	611a      	str	r2, [r3, #16]

    phywhisperer_host_pwr();
   809a6:	4b32      	ldr	r3, [pc, #200]	; (80a70 <phywhisperer_setup_pins+0xfc>)
   809a8:	4798      	blx	r3
    
    //Configure FPGA to allow programming via USB
    fpga_program_init();
   809aa:	4b32      	ldr	r3, [pc, #200]	; (80a74 <phywhisperer_setup_pins+0x100>)
   809ac:	4798      	blx	r3

    /* Enable SMC */
    pmc_enable_periph_clk(ID_SMC);
   809ae:	2009      	movs	r0, #9
   809b0:	4b31      	ldr	r3, [pc, #196]	; (80a78 <phywhisperer_setup_pins+0x104>)
   809b2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   809b4:	4931      	ldr	r1, [pc, #196]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809b6:	2029      	movs	r0, #41	; 0x29
   809b8:	4b31      	ldr	r3, [pc, #196]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809ba:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   809bc:	492f      	ldr	r1, [pc, #188]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809be:	202a      	movs	r0, #42	; 0x2a
   809c0:	4b2f      	ldr	r3, [pc, #188]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809c2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   809c4:	492d      	ldr	r1, [pc, #180]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809c6:	202b      	movs	r0, #43	; 0x2b
   809c8:	4b2d      	ldr	r3, [pc, #180]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809ca:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   809cc:	492b      	ldr	r1, [pc, #172]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809ce:	202c      	movs	r0, #44	; 0x2c
   809d0:	4b2b      	ldr	r3, [pc, #172]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809d2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   809d4:	4929      	ldr	r1, [pc, #164]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809d6:	202d      	movs	r0, #45	; 0x2d
   809d8:	4b29      	ldr	r3, [pc, #164]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809da:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   809dc:	4927      	ldr	r1, [pc, #156]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809de:	202e      	movs	r0, #46	; 0x2e
   809e0:	4b27      	ldr	r3, [pc, #156]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809e2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   809e4:	4925      	ldr	r1, [pc, #148]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809e6:	202f      	movs	r0, #47	; 0x2f
   809e8:	4b25      	ldr	r3, [pc, #148]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809ea:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   809ec:	4923      	ldr	r1, [pc, #140]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809ee:	2030      	movs	r0, #48	; 0x30
   809f0:	4b23      	ldr	r3, [pc, #140]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809f2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   809f4:	4921      	ldr	r1, [pc, #132]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809f6:	2033      	movs	r0, #51	; 0x33
   809f8:	4b21      	ldr	r3, [pc, #132]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809fa:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   809fc:	491f      	ldr	r1, [pc, #124]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809fe:	2037      	movs	r0, #55	; 0x37
   80a00:	4b1f      	ldr	r3, [pc, #124]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   80a02:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   80a04:	491d      	ldr	r1, [pc, #116]	; (80a7c <phywhisperer_setup_pins+0x108>)
   80a06:	2034      	movs	r0, #52	; 0x34
   80a08:	4b1d      	ldr	r3, [pc, #116]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   80a0a:	4798      	blx	r3

    gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80a0c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   80a10:	f240 11bf 	movw	r1, #447	; 0x1bf
   80a14:	481b      	ldr	r0, [pc, #108]	; (80a84 <phywhisperer_setup_pins+0x110>)
   80a16:	4b1c      	ldr	r3, [pc, #112]	; (80a88 <phywhisperer_setup_pins+0x114>)
   80a18:	4798      	blx	r3
    pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   80a1a:	f240 11bf 	movw	r1, #447	; 0x1bf
   80a1e:	4819      	ldr	r0, [pc, #100]	; (80a84 <phywhisperer_setup_pins+0x110>)
   80a20:	4b1a      	ldr	r3, [pc, #104]	; (80a8c <phywhisperer_setup_pins+0x118>)
   80a22:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG1);
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG1);
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG1);
    */

    gpio_configure_pin(PIN_EBI_USB_SPARE0, PIN_EBI_USB_SPARE0_FLAGS);
   80a24:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80a28:	2026      	movs	r0, #38	; 0x26
   80a2a:	4b15      	ldr	r3, [pc, #84]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   80a2c:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_USB_SPARE1, PIN_EBI_USB_SPARE1_FLAGS);
   80a2e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80a32:	2031      	movs	r0, #49	; 0x31
   80a34:	4b12      	ldr	r3, [pc, #72]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   80a36:	4798      	blx	r3

    smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   80a38:	4a15      	ldr	r2, [pc, #84]	; (80a90 <phywhisperer_setup_pins+0x11c>)
   80a3a:	2100      	movs	r1, #0
   80a3c:	4815      	ldr	r0, [pc, #84]	; (80a94 <phywhisperer_setup_pins+0x120>)
   80a3e:	4b16      	ldr	r3, [pc, #88]	; (80a98 <phywhisperer_setup_pins+0x124>)
   80a40:	4798      	blx	r3
                         | SMC_SETUP_NCS_WR_SETUP(1)
                         | SMC_SETUP_NRD_SETUP(1)
                         | SMC_SETUP_NCS_RD_SETUP(1));
    smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   80a42:	4a16      	ldr	r2, [pc, #88]	; (80a9c <phywhisperer_setup_pins+0x128>)
   80a44:	2100      	movs	r1, #0
   80a46:	4813      	ldr	r0, [pc, #76]	; (80a94 <phywhisperer_setup_pins+0x120>)
   80a48:	4b15      	ldr	r3, [pc, #84]	; (80aa0 <phywhisperer_setup_pins+0x12c>)
   80a4a:	4798      	blx	r3
                         | SMC_PULSE_NCS_WR_PULSE(1)
                         | SMC_PULSE_NRD_PULSE(3)
                         | SMC_PULSE_NCS_RD_PULSE(1));
    smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   80a4c:	4a15      	ldr	r2, [pc, #84]	; (80aa4 <phywhisperer_setup_pins+0x130>)
   80a4e:	2100      	movs	r1, #0
   80a50:	4810      	ldr	r0, [pc, #64]	; (80a94 <phywhisperer_setup_pins+0x120>)
   80a52:	4b15      	ldr	r3, [pc, #84]	; (80aa8 <phywhisperer_setup_pins+0x134>)
   80a54:	4798      	blx	r3
                         | SMC_CYCLE_NRD_CYCLE(4));
    smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   80a56:	2203      	movs	r2, #3
   80a58:	2100      	movs	r1, #0
   80a5a:	480e      	ldr	r0, [pc, #56]	; (80a94 <phywhisperer_setup_pins+0x120>)
   80a5c:	4b13      	ldr	r3, [pc, #76]	; (80aac <phywhisperer_setup_pins+0x138>)
   80a5e:	4798      	blx	r3
                 | SMC_MODE_DBW_BIT_8);
}
   80a60:	bf00      	nop
   80a62:	bd80      	pop	{r7, pc}
   80a64:	000859a1 	.word	0x000859a1
   80a68:	0008045d 	.word	0x0008045d
   80a6c:	400e0c00 	.word	0x400e0c00
   80a70:	000808ed 	.word	0x000808ed
   80a74:	00081561 	.word	0x00081561
   80a78:	00083ed5 	.word	0x00083ed5
   80a7c:	08000001 	.word	0x08000001
   80a80:	000844bd 	.word	0x000844bd
   80a84:	400e0e00 	.word	0x400e0e00
   80a88:	000845e1 	.word	0x000845e1
   80a8c:	000843b1 	.word	0x000843b1
   80a90:	01010100 	.word	0x01010100
   80a94:	400e0000 	.word	0x400e0000
   80a98:	0008193d 	.word	0x0008193d
   80a9c:	01030101 	.word	0x01030101
   80aa0:	00081967 	.word	0x00081967
   80aa4:	00040002 	.word	0x00040002
   80aa8:	00081991 	.word	0x00081991
   80aac:	000819bb 	.word	0x000819bb

00080ab0 <hacky_delay>:

void hacky_delay(void)
{
   80ab0:	b480      	push	{r7}
   80ab2:	b083      	sub	sp, #12
   80ab4:	af00      	add	r7, sp, #0
    for (volatile uint32_t i = 0; i < 250000; i++);
   80ab6:	2300      	movs	r3, #0
   80ab8:	607b      	str	r3, [r7, #4]
   80aba:	e002      	b.n	80ac2 <hacky_delay+0x12>
   80abc:	687b      	ldr	r3, [r7, #4]
   80abe:	3301      	adds	r3, #1
   80ac0:	607b      	str	r3, [r7, #4]
   80ac2:	687b      	ldr	r3, [r7, #4]
   80ac4:	4a03      	ldr	r2, [pc, #12]	; (80ad4 <hacky_delay+0x24>)
   80ac6:	4293      	cmp	r3, r2
   80ac8:	d9f8      	bls.n	80abc <hacky_delay+0xc>
}
   80aca:	bf00      	nop
   80acc:	370c      	adds	r7, #12
   80ace:	46bd      	mov	sp, r7
   80ad0:	bc80      	pop	{r7}
   80ad2:	4770      	bx	lr
   80ad4:	0003d08f 	.word	0x0003d08f

00080ad8 <genclk_enable_config>:

static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
   80ad8:	b580      	push	{r7, lr}
   80ada:	b086      	sub	sp, #24
   80adc:	af00      	add	r7, sp, #0
   80ade:	60f8      	str	r0, [r7, #12]
   80ae0:	460b      	mov	r3, r1
   80ae2:	607a      	str	r2, [r7, #4]
   80ae4:	72fb      	strb	r3, [r7, #11]
    struct genclk_config gcfg;

    genclk_config_defaults(&gcfg, id);
   80ae6:	f107 0314 	add.w	r3, r7, #20
   80aea:	68f9      	ldr	r1, [r7, #12]
   80aec:	4618      	mov	r0, r3
   80aee:	4b0e      	ldr	r3, [pc, #56]	; (80b28 <genclk_enable_config+0x50>)
   80af0:	4798      	blx	r3
    genclk_enable_source(src);
   80af2:	7afb      	ldrb	r3, [r7, #11]
   80af4:	4618      	mov	r0, r3
   80af6:	4b0d      	ldr	r3, [pc, #52]	; (80b2c <genclk_enable_config+0x54>)
   80af8:	4798      	blx	r3
    genclk_config_set_source(&gcfg, src);
   80afa:	7afa      	ldrb	r2, [r7, #11]
   80afc:	f107 0314 	add.w	r3, r7, #20
   80b00:	4611      	mov	r1, r2
   80b02:	4618      	mov	r0, r3
   80b04:	4b0a      	ldr	r3, [pc, #40]	; (80b30 <genclk_enable_config+0x58>)
   80b06:	4798      	blx	r3
    genclk_config_set_divider(&gcfg, divider);
   80b08:	f107 0314 	add.w	r3, r7, #20
   80b0c:	6879      	ldr	r1, [r7, #4]
   80b0e:	4618      	mov	r0, r3
   80b10:	4b08      	ldr	r3, [pc, #32]	; (80b34 <genclk_enable_config+0x5c>)
   80b12:	4798      	blx	r3
    genclk_enable(&gcfg, id);
   80b14:	f107 0314 	add.w	r3, r7, #20
   80b18:	68f9      	ldr	r1, [r7, #12]
   80b1a:	4618      	mov	r0, r3
   80b1c:	4b06      	ldr	r3, [pc, #24]	; (80b38 <genclk_enable_config+0x60>)
   80b1e:	4798      	blx	r3
}
   80b20:	bf00      	nop
   80b22:	3718      	adds	r7, #24
   80b24:	46bd      	mov	sp, r7
   80b26:	bd80      	pop	{r7, pc}
   80b28:	00080609 	.word	0x00080609
   80b2c:	0008071d 	.word	0x0008071d
   80b30:	00080625 	.word	0x00080625
   80b34:	000806c1 	.word	0x000806c1
   80b38:	000806ed 	.word	0x000806ed

00080b3c <main>:

void (*pwr_list[])(void) = {phywhisperer_no_pwr, phywhisperer_5V_pwr, phywhisperer_host_pwr};

int main(void)
{
   80b3c:	b580      	push	{r7, lr}
   80b3e:	b086      	sub	sp, #24
   80b40:	af00      	add	r7, sp, #0
    uint32_t serial_number[4];

    // Read Device-ID from SAM3U. Do this before enabling interrupts etc.
    flash_read_unique_id(serial_number, sizeof(serial_number));
   80b42:	463b      	mov	r3, r7
   80b44:	2110      	movs	r1, #16
   80b46:	4618      	mov	r0, r3
   80b48:	4b37      	ldr	r3, [pc, #220]	; (80c28 <main+0xec>)
   80b4a:	4798      	blx	r3

    irq_initialize_vectors();
    cpu_irq_enable();
   80b4c:	4b37      	ldr	r3, [pc, #220]	; (80c2c <main+0xf0>)
   80b4e:	2201      	movs	r2, #1
   80b50:	701a      	strb	r2, [r3, #0]
   80b52:	f3bf 8f5f 	dmb	sy
   80b56:	b662      	cpsie	i

    // Initialize the sleep manager
    sleepmgr_init();
   80b58:	4b35      	ldr	r3, [pc, #212]	; (80c30 <main+0xf4>)
   80b5a:	4798      	blx	r3
#if !SAMD21 && !SAMR21
    sysclk_init();
   80b5c:	4b35      	ldr	r3, [pc, #212]	; (80c34 <main+0xf8>)
   80b5e:	4798      	blx	r3
    phywhisperer_setup_pins();
   80b60:	4b35      	ldr	r3, [pc, #212]	; (80c38 <main+0xfc>)
   80b62:	4798      	blx	r3
#else
    system_init();
#endif

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
   80b64:	2300      	movs	r3, #0
   80b66:	617b      	str	r3, [r7, #20]
   80b68:	e011      	b.n	80b8e <main+0x52>
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   80b6a:	697b      	ldr	r3, [r7, #20]
   80b6c:	00db      	lsls	r3, r3, #3
   80b6e:	4a33      	ldr	r2, [pc, #204]	; (80c3c <main+0x100>)
   80b70:	1898      	adds	r0, r3, r2
   80b72:	697b      	ldr	r3, [r7, #20]
   80b74:	009b      	lsls	r3, r3, #2
   80b76:	f107 0218 	add.w	r2, r7, #24
   80b7a:	4413      	add	r3, r2
   80b7c:	f853 3c18 	ldr.w	r3, [r3, #-24]
   80b80:	461a      	mov	r2, r3
   80b82:	492f      	ldr	r1, [pc, #188]	; (80c40 <main+0x104>)
   80b84:	4b2f      	ldr	r3, [pc, #188]	; (80c44 <main+0x108>)
   80b86:	4798      	blx	r3
	for(unsigned int i = 0; i < 4; i++){
   80b88:	697b      	ldr	r3, [r7, #20]
   80b8a:	3301      	adds	r3, #1
   80b8c:	617b      	str	r3, [r7, #20]
   80b8e:	697b      	ldr	r3, [r7, #20]
   80b90:	2b03      	cmp	r3, #3
   80b92:	d9ea      	bls.n	80b6a <main+0x2e>
	}
	usb_serial_number[32] = 0;
   80b94:	4b29      	ldr	r3, [pc, #164]	; (80c3c <main+0x100>)
   80b96:	2200      	movs	r2, #0
   80b98:	f883 2020 	strb.w	r2, [r3, #32]

    genclk_enable_config(GENCLK_PCK_1, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
   80b9c:	2200      	movs	r2, #0
   80b9e:	210a      	movs	r1, #10
   80ba0:	2001      	movs	r0, #1
   80ba2:	4b29      	ldr	r3, [pc, #164]	; (80c48 <main+0x10c>)
   80ba4:	4798      	blx	r3
    udc_start();
   80ba6:	4b29      	ldr	r3, [pc, #164]	; (80c4c <main+0x110>)
   80ba8:	4798      	blx	r3
    gpio_set_pin_high(LED0_GPIO);
   80baa:	201d      	movs	r0, #29
   80bac:	4b28      	ldr	r3, [pc, #160]	; (80c50 <main+0x114>)
   80bae:	4798      	blx	r3
    gpio_set_pin_low(LED1_GPIO);
   80bb0:	201f      	movs	r0, #31
   80bb2:	4b28      	ldr	r3, [pc, #160]	; (80c54 <main+0x118>)
   80bb4:	4798      	blx	r3

    phywhisperer_no_pwr();
   80bb6:	4b28      	ldr	r3, [pc, #160]	; (80c58 <main+0x11c>)
   80bb8:	4798      	blx	r3
    USB_PWR_STATE = 0;
   80bba:	4b28      	ldr	r3, [pc, #160]	; (80c5c <main+0x120>)
   80bbc:	2200      	movs	r2, #0
   80bbe:	701a      	strb	r2, [r3, #0]

    uint8_t curr_pwr_setting = 0;
   80bc0:	2300      	movs	r3, #0
   80bc2:	74fb      	strb	r3, [r7, #19]
    while(1) {
        sleepmgr_enter_sleep();
   80bc4:	4b26      	ldr	r3, [pc, #152]	; (80c60 <main+0x124>)
   80bc6:	4798      	blx	r3
        uint8_t button_status = !(PIOA->PIO_PDSR & (1 << BUTTON_IN));
   80bc8:	4b26      	ldr	r3, [pc, #152]	; (80c64 <main+0x128>)
   80bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80bd0:	2b00      	cmp	r3, #0
   80bd2:	bf0c      	ite	eq
   80bd4:	2301      	moveq	r3, #1
   80bd6:	2300      	movne	r3, #0
   80bd8:	b2db      	uxtb	r3, r3
   80bda:	74bb      	strb	r3, [r7, #18]
        if (button_status){
   80bdc:	7cbb      	ldrb	r3, [r7, #18]
   80bde:	2b00      	cmp	r3, #0
   80be0:	d0f0      	beq.n	80bc4 <main+0x88>
            hacky_delay(); //delay to try to debounce
   80be2:	4b21      	ldr	r3, [pc, #132]	; (80c68 <main+0x12c>)
   80be4:	4798      	blx	r3
            while (!(PIOA->PIO_PDSR & (1 << BUTTON_IN))); //wait for trigger to be unpressed
   80be6:	bf00      	nop
   80be8:	4b1e      	ldr	r3, [pc, #120]	; (80c64 <main+0x128>)
   80bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80bf0:	2b00      	cmp	r3, #0
   80bf2:	d0f9      	beq.n	80be8 <main+0xac>

            if (USB_PWR_STATE && USB_PWR_STATE <= 2) {
   80bf4:	4b19      	ldr	r3, [pc, #100]	; (80c5c <main+0x120>)
   80bf6:	781b      	ldrb	r3, [r3, #0]
   80bf8:	2b00      	cmp	r3, #0
   80bfa:	d012      	beq.n	80c22 <main+0xe6>
   80bfc:	4b17      	ldr	r3, [pc, #92]	; (80c5c <main+0x120>)
   80bfe:	781b      	ldrb	r3, [r3, #0]
   80c00:	2b02      	cmp	r3, #2
   80c02:	d80e      	bhi.n	80c22 <main+0xe6>
                if (pwr_st_from_io()) { //currently on
   80c04:	4b19      	ldr	r3, [pc, #100]	; (80c6c <main+0x130>)
   80c06:	4798      	blx	r3
   80c08:	4603      	mov	r3, r0
   80c0a:	2b00      	cmp	r3, #0
   80c0c:	d002      	beq.n	80c14 <main+0xd8>
                    phywhisperer_no_pwr();
   80c0e:	4b12      	ldr	r3, [pc, #72]	; (80c58 <main+0x11c>)
   80c10:	4798      	blx	r3
   80c12:	e006      	b.n	80c22 <main+0xe6>
                } else {
                    pwr_list[USB_PWR_STATE]();
   80c14:	4b11      	ldr	r3, [pc, #68]	; (80c5c <main+0x120>)
   80c16:	781b      	ldrb	r3, [r3, #0]
   80c18:	461a      	mov	r2, r3
   80c1a:	4b15      	ldr	r3, [pc, #84]	; (80c70 <main+0x134>)
   80c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80c20:	4798      	blx	r3
                }
            }
            hacky_delay();
   80c22:	4b11      	ldr	r3, [pc, #68]	; (80c68 <main+0x12c>)
   80c24:	4798      	blx	r3
    while(1) {
   80c26:	e7cd      	b.n	80bc4 <main+0x88>
   80c28:	00081639 	.word	0x00081639
   80c2c:	2000031a 	.word	0x2000031a
   80c30:	00080565 	.word	0x00080565
   80c34:	00083afd 	.word	0x00083afd
   80c38:	00080975 	.word	0x00080975
   80c3c:	2000025c 	.word	0x2000025c
   80c40:	0008aacc 	.word	0x0008aacc
   80c44:	00085da5 	.word	0x00085da5
   80c48:	00080ad9 	.word	0x00080ad9
   80c4c:	0008495d 	.word	0x0008495d
   80c50:	0008445d 	.word	0x0008445d
   80c54:	0008448d 	.word	0x0008448d
   80c58:	000808ad 	.word	0x000808ad
   80c5c:	20000d74 	.word	0x20000d74
   80c60:	000805cd 	.word	0x000805cd
   80c64:	400e0c00 	.word	0x400e0c00
   80c68:	00080ab1 	.word	0x00080ab1
   80c6c:	0008090d 	.word	0x0008090d
   80c70:	20000280 	.word	0x20000280

00080c74 <osc_enable>:
{
   80c74:	b580      	push	{r7, lr}
   80c76:	b082      	sub	sp, #8
   80c78:	af00      	add	r7, sp, #0
   80c7a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80c7c:	687b      	ldr	r3, [r7, #4]
   80c7e:	2b07      	cmp	r3, #7
   80c80:	d82e      	bhi.n	80ce0 <osc_enable+0x6c>
   80c82:	a201      	add	r2, pc, #4	; (adr r2, 80c88 <osc_enable+0x14>)
   80c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80c88:	00080cdf 	.word	0x00080cdf
   80c8c:	00080ca9 	.word	0x00080ca9
   80c90:	00080cb1 	.word	0x00080cb1
   80c94:	00080cb9 	.word	0x00080cb9
   80c98:	00080cc1 	.word	0x00080cc1
   80c9c:	00080cc9 	.word	0x00080cc9
   80ca0:	00080cd1 	.word	0x00080cd1
   80ca4:	00080cd9 	.word	0x00080cd9
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80ca8:	2000      	movs	r0, #0
   80caa:	4b0f      	ldr	r3, [pc, #60]	; (80ce8 <osc_enable+0x74>)
   80cac:	4798      	blx	r3
		break;
   80cae:	e017      	b.n	80ce0 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80cb0:	2001      	movs	r0, #1
   80cb2:	4b0d      	ldr	r3, [pc, #52]	; (80ce8 <osc_enable+0x74>)
   80cb4:	4798      	blx	r3
		break;
   80cb6:	e013      	b.n	80ce0 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80cb8:	2000      	movs	r0, #0
   80cba:	4b0c      	ldr	r3, [pc, #48]	; (80cec <osc_enable+0x78>)
   80cbc:	4798      	blx	r3
		break;
   80cbe:	e00f      	b.n	80ce0 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80cc0:	2010      	movs	r0, #16
   80cc2:	4b0a      	ldr	r3, [pc, #40]	; (80cec <osc_enable+0x78>)
   80cc4:	4798      	blx	r3
		break;
   80cc6:	e00b      	b.n	80ce0 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80cc8:	2020      	movs	r0, #32
   80cca:	4b08      	ldr	r3, [pc, #32]	; (80cec <osc_enable+0x78>)
   80ccc:	4798      	blx	r3
		break;
   80cce:	e007      	b.n	80ce0 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80cd0:	203e      	movs	r0, #62	; 0x3e
   80cd2:	4b07      	ldr	r3, [pc, #28]	; (80cf0 <osc_enable+0x7c>)
   80cd4:	4798      	blx	r3
		break;
   80cd6:	e003      	b.n	80ce0 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   80cd8:	4b06      	ldr	r3, [pc, #24]	; (80cf4 <osc_enable+0x80>)
   80cda:	4798      	blx	r3
		break;
   80cdc:	e000      	b.n	80ce0 <osc_enable+0x6c>
		break;
   80cde:	bf00      	nop
}
   80ce0:	bf00      	nop
   80ce2:	3708      	adds	r7, #8
   80ce4:	46bd      	mov	sp, r7
   80ce6:	bd80      	pop	{r7, pc}
   80ce8:	00083c89 	.word	0x00083c89
   80cec:	00083cf5 	.word	0x00083cf5
   80cf0:	00083d69 	.word	0x00083d69
   80cf4:	00083db5 	.word	0x00083db5

00080cf8 <osc_is_ready>:
{
   80cf8:	b580      	push	{r7, lr}
   80cfa:	b082      	sub	sp, #8
   80cfc:	af00      	add	r7, sp, #0
   80cfe:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80d00:	687b      	ldr	r3, [r7, #4]
   80d02:	2b07      	cmp	r3, #7
   80d04:	d82f      	bhi.n	80d66 <osc_is_ready+0x6e>
   80d06:	a201      	add	r2, pc, #4	; (adr r2, 80d0c <osc_is_ready+0x14>)
   80d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80d0c:	00080d2d 	.word	0x00080d2d
   80d10:	00080d31 	.word	0x00080d31
   80d14:	00080d31 	.word	0x00080d31
   80d18:	00080d43 	.word	0x00080d43
   80d1c:	00080d43 	.word	0x00080d43
   80d20:	00080d43 	.word	0x00080d43
   80d24:	00080d55 	.word	0x00080d55
   80d28:	00080d55 	.word	0x00080d55
		return 1;
   80d2c:	2301      	movs	r3, #1
   80d2e:	e01b      	b.n	80d68 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   80d30:	4b0f      	ldr	r3, [pc, #60]	; (80d70 <osc_is_ready+0x78>)
   80d32:	4798      	blx	r3
   80d34:	4603      	mov	r3, r0
   80d36:	2b00      	cmp	r3, #0
   80d38:	bf14      	ite	ne
   80d3a:	2301      	movne	r3, #1
   80d3c:	2300      	moveq	r3, #0
   80d3e:	b2db      	uxtb	r3, r3
   80d40:	e012      	b.n	80d68 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   80d42:	4b0c      	ldr	r3, [pc, #48]	; (80d74 <osc_is_ready+0x7c>)
   80d44:	4798      	blx	r3
   80d46:	4603      	mov	r3, r0
   80d48:	2b00      	cmp	r3, #0
   80d4a:	bf14      	ite	ne
   80d4c:	2301      	movne	r3, #1
   80d4e:	2300      	moveq	r3, #0
   80d50:	b2db      	uxtb	r3, r3
   80d52:	e009      	b.n	80d68 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   80d54:	4b08      	ldr	r3, [pc, #32]	; (80d78 <osc_is_ready+0x80>)
   80d56:	4798      	blx	r3
   80d58:	4603      	mov	r3, r0
   80d5a:	2b00      	cmp	r3, #0
   80d5c:	bf14      	ite	ne
   80d5e:	2301      	movne	r3, #1
   80d60:	2300      	moveq	r3, #0
   80d62:	b2db      	uxtb	r3, r3
   80d64:	e000      	b.n	80d68 <osc_is_ready+0x70>
	return 0;
   80d66:	2300      	movs	r3, #0
}
   80d68:	4618      	mov	r0, r3
   80d6a:	3708      	adds	r7, #8
   80d6c:	46bd      	mov	sp, r7
   80d6e:	bd80      	pop	{r7, pc}
   80d70:	00083cc1 	.word	0x00083cc1
   80d74:	00083d51 	.word	0x00083d51
   80d78:	00083e01 	.word	0x00083e01

00080d7c <osc_wait_ready>:
{
   80d7c:	b580      	push	{r7, lr}
   80d7e:	b082      	sub	sp, #8
   80d80:	af00      	add	r7, sp, #0
   80d82:	4603      	mov	r3, r0
   80d84:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   80d86:	bf00      	nop
   80d88:	79fb      	ldrb	r3, [r7, #7]
   80d8a:	4618      	mov	r0, r3
   80d8c:	4b05      	ldr	r3, [pc, #20]	; (80da4 <osc_wait_ready+0x28>)
   80d8e:	4798      	blx	r3
   80d90:	4603      	mov	r3, r0
   80d92:	f083 0301 	eor.w	r3, r3, #1
   80d96:	b2db      	uxtb	r3, r3
   80d98:	2b00      	cmp	r3, #0
   80d9a:	d1f5      	bne.n	80d88 <osc_wait_ready+0xc>
}
   80d9c:	bf00      	nop
   80d9e:	3708      	adds	r7, #8
   80da0:	46bd      	mov	sp, r7
   80da2:	bd80      	pop	{r7, pc}
   80da4:	00080cf9 	.word	0x00080cf9

00080da8 <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
   80da8:	b580      	push	{r7, lr}
   80daa:	af00      	add	r7, sp, #0
	udd_detach();
   80dac:	4b01      	ldr	r3, [pc, #4]	; (80db4 <udc_detach+0xc>)
   80dae:	4798      	blx	r3
}
   80db0:	bf00      	nop
   80db2:	bd80      	pop	{r7, pc}
   80db4:	00081fb5 	.word	0x00081fb5

00080db8 <main_suspend_action>:
void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   80db8:	b480      	push	{r7}
   80dba:	af00      	add	r7, sp, #0
}
   80dbc:	bf00      	nop
   80dbe:	46bd      	mov	sp, r7
   80dc0:	bc80      	pop	{r7}
   80dc2:	4770      	bx	lr

00080dc4 <main_resume_action>:

void main_resume_action(void)
{
   80dc4:	b480      	push	{r7}
   80dc6:	af00      	add	r7, sp, #0
}
   80dc8:	bf00      	nop
   80dca:	46bd      	mov	sp, r7
   80dcc:	bc80      	pop	{r7}
   80dce:	4770      	bx	lr

00080dd0 <main_sof_action>:

void main_sof_action(void)
{
   80dd0:	b480      	push	{r7}
   80dd2:	af00      	add	r7, sp, #0
    if (!main_b_vendor_enable)
   80dd4:	4b04      	ldr	r3, [pc, #16]	; (80de8 <main_sof_action+0x18>)
   80dd6:	781b      	ldrb	r3, [r3, #0]
   80dd8:	b2db      	uxtb	r3, r3
   80dda:	f083 0301 	eor.w	r3, r3, #1
   80dde:	b2db      	uxtb	r3, r3
   80de0:	2b00      	cmp	r3, #0
        return;
}
   80de2:	46bd      	mov	sp, r7
   80de4:	bc80      	pop	{r7}
   80de6:	4770      	bx	lr
   80de8:	2000028c 	.word	0x2000028c

00080dec <main_vendor_enable>:

bool main_vendor_enable(void)
{
   80dec:	b580      	push	{r7, lr}
   80dee:	af00      	add	r7, sp, #0
    main_b_vendor_enable = true;
   80df0:	4b05      	ldr	r3, [pc, #20]	; (80e08 <main_vendor_enable+0x1c>)
   80df2:	2201      	movs	r2, #1
   80df4:	701a      	strb	r2, [r3, #0]
    // Start data reception on OUT endpoints
#if UDI_VENDOR_EPS_SIZE_BULK_FS
    //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   80df6:	4a05      	ldr	r2, [pc, #20]	; (80e0c <main_vendor_enable+0x20>)
   80df8:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80dfc:	4804      	ldr	r0, [pc, #16]	; (80e10 <main_vendor_enable+0x24>)
   80dfe:	4b05      	ldr	r3, [pc, #20]	; (80e14 <main_vendor_enable+0x28>)
   80e00:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
#endif
    return true;
   80e02:	2301      	movs	r3, #1
}
   80e04:	4618      	mov	r0, r3
   80e06:	bd80      	pop	{r7, pc}
   80e08:	2000028c 	.word	0x2000028c
   80e0c:	00081345 	.word	0x00081345
   80e10:	20000d78 	.word	0x20000d78
   80e14:	00084105 	.word	0x00084105

00080e18 <main_vendor_disable>:

void main_vendor_disable(void)
{
   80e18:	b480      	push	{r7}
   80e1a:	af00      	add	r7, sp, #0
    main_b_vendor_enable = false;
   80e1c:	4b03      	ldr	r3, [pc, #12]	; (80e2c <main_vendor_disable+0x14>)
   80e1e:	2200      	movs	r2, #0
   80e20:	701a      	strb	r2, [r3, #0]
}
   80e22:	bf00      	nop
   80e24:	46bd      	mov	sp, r7
   80e26:	bc80      	pop	{r7}
   80e28:	4770      	bx	lr
   80e2a:	bf00      	nop
   80e2c:	2000028c 	.word	0x2000028c

00080e30 <ctrl_readmem_bulk>:
void ctrl_writemem_bulk(void);
void ctrl_writemem_ctrl(void);
void ctrl_progfpga_bulk(void);


void ctrl_readmem_bulk(void){
   80e30:	b580      	push	{r7, lr}
   80e32:	b082      	sub	sp, #8
   80e34:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80e36:	4b0f      	ldr	r3, [pc, #60]	; (80e74 <ctrl_readmem_bulk+0x44>)
   80e38:	681b      	ldr	r3, [r3, #0]
   80e3a:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80e3c:	4b0d      	ldr	r3, [pc, #52]	; (80e74 <ctrl_readmem_bulk+0x44>)
   80e3e:	685b      	ldr	r3, [r3, #4]
   80e40:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80e42:	4b0d      	ldr	r3, [pc, #52]	; (80e78 <ctrl_readmem_bulk+0x48>)
   80e44:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   80e46:	bf00      	nop
   80e48:	2002      	movs	r0, #2
   80e4a:	4b0c      	ldr	r3, [pc, #48]	; (80e7c <ctrl_readmem_bulk+0x4c>)
   80e4c:	4798      	blx	r3
   80e4e:	4603      	mov	r3, r0
   80e50:	2b00      	cmp	r3, #0
   80e52:	d0f9      	beq.n	80e48 <ctrl_readmem_bulk+0x18>

    FPGA_setaddr(address);
   80e54:	6838      	ldr	r0, [r7, #0]
   80e56:	4b0a      	ldr	r3, [pc, #40]	; (80e80 <ctrl_readmem_bulk+0x50>)
   80e58:	4798      	blx	r3

    /* Do memory read */
    udi_vendor_bulk_in_run(
   80e5a:	4a0a      	ldr	r2, [pc, #40]	; (80e84 <ctrl_readmem_bulk+0x54>)
   80e5c:	6879      	ldr	r1, [r7, #4]
   80e5e:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   80e62:	4b09      	ldr	r3, [pc, #36]	; (80e88 <ctrl_readmem_bulk+0x58>)
   80e64:	4798      	blx	r3
        (uint8_t *) PSRAM_BASE_ADDRESS,
        buflen,
        main_vendor_bulk_in_received
        );
    FPGA_releaselock();
   80e66:	4b04      	ldr	r3, [pc, #16]	; (80e78 <ctrl_readmem_bulk+0x48>)
   80e68:	4798      	blx	r3
}
   80e6a:	bf00      	nop
   80e6c:	3708      	adds	r7, #8
   80e6e:	46bd      	mov	sp, r7
   80e70:	bd80      	pop	{r7, pc}
   80e72:	bf00      	nop
   80e74:	20001178 	.word	0x20001178
   80e78:	00081445 	.word	0x00081445
   80e7c:	00081405 	.word	0x00081405
   80e80:	00081475 	.word	0x00081475
   80e84:	0008130d 	.word	0x0008130d
   80e88:	000840d9 	.word	0x000840d9

00080e8c <ctrl_readmem_ctrl>:

void ctrl_readmem_ctrl(void){
   80e8c:	b580      	push	{r7, lr}
   80e8e:	b082      	sub	sp, #8
   80e90:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80e92:	4b0f      	ldr	r3, [pc, #60]	; (80ed0 <ctrl_readmem_ctrl+0x44>)
   80e94:	681b      	ldr	r3, [r3, #0]
   80e96:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80e98:	4b0d      	ldr	r3, [pc, #52]	; (80ed0 <ctrl_readmem_ctrl+0x44>)
   80e9a:	685b      	ldr	r3, [r3, #4]
   80e9c:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80e9e:	4b0d      	ldr	r3, [pc, #52]	; (80ed4 <ctrl_readmem_ctrl+0x48>)
   80ea0:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   80ea2:	bf00      	nop
   80ea4:	2005      	movs	r0, #5
   80ea6:	4b0c      	ldr	r3, [pc, #48]	; (80ed8 <ctrl_readmem_ctrl+0x4c>)
   80ea8:	4798      	blx	r3
   80eaa:	4603      	mov	r3, r0
   80eac:	2b00      	cmp	r3, #0
   80eae:	d0f9      	beq.n	80ea4 <ctrl_readmem_ctrl+0x18>

    /* Set address */
    FPGA_setaddr(address);
   80eb0:	6838      	ldr	r0, [r7, #0]
   80eb2:	4b0a      	ldr	r3, [pc, #40]	; (80edc <ctrl_readmem_ctrl+0x50>)
   80eb4:	4798      	blx	r3

    /* Do memory read */
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   80eb6:	4b0a      	ldr	r3, [pc, #40]	; (80ee0 <ctrl_readmem_ctrl+0x54>)
   80eb8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   80ebc:	601a      	str	r2, [r3, #0]

    /* Set size to read */
    ctrlmemread_size = buflen;
   80ebe:	4a09      	ldr	r2, [pc, #36]	; (80ee4 <ctrl_readmem_ctrl+0x58>)
   80ec0:	687b      	ldr	r3, [r7, #4]
   80ec2:	6013      	str	r3, [r2, #0]

    /* Start Transaction */
    FPGA_releaselock();
   80ec4:	4b03      	ldr	r3, [pc, #12]	; (80ed4 <ctrl_readmem_ctrl+0x48>)
   80ec6:	4798      	blx	r3
}
   80ec8:	bf00      	nop
   80eca:	3708      	adds	r7, #8
   80ecc:	46bd      	mov	sp, r7
   80ece:	bd80      	pop	{r7, pc}
   80ed0:	20001178 	.word	0x20001178
   80ed4:	00081445 	.word	0x00081445
   80ed8:	00081405 	.word	0x00081405
   80edc:	00081475 	.word	0x00081475
   80ee0:	200011bc 	.word	0x200011bc
   80ee4:	200011c0 	.word	0x200011c0

00080ee8 <ctrl_writemem_ctrl>:


void ctrl_writemem_ctrl(void){
   80ee8:	b580      	push	{r7, lr}
   80eea:	b084      	sub	sp, #16
   80eec:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80eee:	4b16      	ldr	r3, [pc, #88]	; (80f48 <ctrl_writemem_ctrl+0x60>)
   80ef0:	681b      	ldr	r3, [r3, #0]
   80ef2:	60bb      	str	r3, [r7, #8]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80ef4:	4b14      	ldr	r3, [pc, #80]	; (80f48 <ctrl_writemem_ctrl+0x60>)
   80ef6:	685b      	ldr	r3, [r3, #4]
   80ef8:	607b      	str	r3, [r7, #4]

    uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
   80efa:	4b14      	ldr	r3, [pc, #80]	; (80f4c <ctrl_writemem_ctrl+0x64>)
   80efc:	603b      	str	r3, [r7, #0]

    //printf("Writing to %x, %d\n", address, buflen);

    FPGA_releaselock();
   80efe:	4b14      	ldr	r3, [pc, #80]	; (80f50 <ctrl_writemem_ctrl+0x68>)
   80f00:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   80f02:	bf00      	nop
   80f04:	2001      	movs	r0, #1
   80f06:	4b13      	ldr	r3, [pc, #76]	; (80f54 <ctrl_writemem_ctrl+0x6c>)
   80f08:	4798      	blx	r3
   80f0a:	4603      	mov	r3, r0
   80f0c:	2b00      	cmp	r3, #0
   80f0e:	d0f9      	beq.n	80f04 <ctrl_writemem_ctrl+0x1c>

    /* Set address */
    FPGA_setaddr(address);
   80f10:	6878      	ldr	r0, [r7, #4]
   80f12:	4b11      	ldr	r3, [pc, #68]	; (80f58 <ctrl_writemem_ctrl+0x70>)
   80f14:	4798      	blx	r3

    /* Start Transaction */

    /* Do memory write */
    for(unsigned int i = 0; i < buflen; i++){
   80f16:	2300      	movs	r3, #0
   80f18:	60fb      	str	r3, [r7, #12]
   80f1a:	e00b      	b.n	80f34 <ctrl_writemem_ctrl+0x4c>
        xram[i] = ctrlbuf_payload[i];
   80f1c:	683a      	ldr	r2, [r7, #0]
   80f1e:	68fb      	ldr	r3, [r7, #12]
   80f20:	441a      	add	r2, r3
   80f22:	4b0e      	ldr	r3, [pc, #56]	; (80f5c <ctrl_writemem_ctrl+0x74>)
   80f24:	6819      	ldr	r1, [r3, #0]
   80f26:	68fb      	ldr	r3, [r7, #12]
   80f28:	440b      	add	r3, r1
   80f2a:	7812      	ldrb	r2, [r2, #0]
   80f2c:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < buflen; i++){
   80f2e:	68fb      	ldr	r3, [r7, #12]
   80f30:	3301      	adds	r3, #1
   80f32:	60fb      	str	r3, [r7, #12]
   80f34:	68fa      	ldr	r2, [r7, #12]
   80f36:	68bb      	ldr	r3, [r7, #8]
   80f38:	429a      	cmp	r2, r3
   80f3a:	d3ef      	bcc.n	80f1c <ctrl_writemem_ctrl+0x34>
    }

    FPGA_releaselock();
   80f3c:	4b04      	ldr	r3, [pc, #16]	; (80f50 <ctrl_writemem_ctrl+0x68>)
   80f3e:	4798      	blx	r3
}
   80f40:	bf00      	nop
   80f42:	3710      	adds	r7, #16
   80f44:	46bd      	mov	sp, r7
   80f46:	bd80      	pop	{r7, pc}
   80f48:	20001178 	.word	0x20001178
   80f4c:	20001180 	.word	0x20001180
   80f50:	00081445 	.word	0x00081445
   80f54:	00081405 	.word	0x00081405
   80f58:	00081475 	.word	0x00081475
   80f5c:	20000290 	.word	0x20000290

00080f60 <ctrl_writemem_bulk>:

static uint32_t bulkread_address = 0;
static uint32_t bulkread_len = 0;

void ctrl_writemem_bulk(void){
   80f60:	b580      	push	{r7, lr}
   80f62:	b082      	sub	sp, #8
   80f64:	af00      	add	r7, sp, #0
//uint32_t buflen = *(CTRLBUFFER_WORDPTR);
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80f66:	4b0a      	ldr	r3, [pc, #40]	; (80f90 <ctrl_writemem_bulk+0x30>)
   80f68:	685b      	ldr	r3, [r3, #4]
   80f6a:	607b      	str	r3, [r7, #4]

    // TODO: see block in
    FPGA_releaselock();
   80f6c:	4b09      	ldr	r3, [pc, #36]	; (80f94 <ctrl_writemem_bulk+0x34>)
   80f6e:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   80f70:	bf00      	nop
   80f72:	2004      	movs	r0, #4
   80f74:	4b08      	ldr	r3, [pc, #32]	; (80f98 <ctrl_writemem_bulk+0x38>)
   80f76:	4798      	blx	r3
   80f78:	4603      	mov	r3, r0
   80f7a:	2b00      	cmp	r3, #0
   80f7c:	d0f9      	beq.n	80f72 <ctrl_writemem_bulk+0x12>

    /* Set address */
    FPGA_setaddr(address);
   80f7e:	6878      	ldr	r0, [r7, #4]
   80f80:	4b06      	ldr	r3, [pc, #24]	; (80f9c <ctrl_writemem_bulk+0x3c>)
   80f82:	4798      	blx	r3

    /* Transaction done in generic callback */
    FPGA_releaselock();
   80f84:	4b03      	ldr	r3, [pc, #12]	; (80f94 <ctrl_writemem_bulk+0x34>)
   80f86:	4798      	blx	r3
}
   80f88:	bf00      	nop
   80f8a:	3708      	adds	r7, #8
   80f8c:	46bd      	mov	sp, r7
   80f8e:	bd80      	pop	{r7, pc}
   80f90:	20001178 	.word	0x20001178
   80f94:	00081445 	.word	0x00081445
   80f98:	00081405 	.word	0x00081405
   80f9c:	00081475 	.word	0x00081475

00080fa0 <ctrl_sam3ucfg_cb>:

static void ctrl_sam3ucfg_cb(void)
{
   80fa0:	b580      	push	{r7, lr}
   80fa2:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   80fa4:	4b18      	ldr	r3, [pc, #96]	; (81008 <ctrl_sam3ucfg_cb+0x68>)
   80fa6:	885b      	ldrh	r3, [r3, #2]
   80fa8:	b2db      	uxtb	r3, r3
   80faa:	2b02      	cmp	r3, #2
   80fac:	d00d      	beq.n	80fca <ctrl_sam3ucfg_cb+0x2a>
   80fae:	2b03      	cmp	r3, #3
   80fb0:	d00f      	beq.n	80fd2 <ctrl_sam3ucfg_cb+0x32>
   80fb2:	2b01      	cmp	r3, #1
   80fb4:	d124      	bne.n	81000 <ctrl_sam3ucfg_cb+0x60>
    {
        /* Turn on slow clock */
    case 0x01:
        osc_enable(OSC_MAINCK_XTAL);
   80fb6:	2006      	movs	r0, #6
   80fb8:	4b14      	ldr	r3, [pc, #80]	; (8100c <ctrl_sam3ucfg_cb+0x6c>)
   80fba:	4798      	blx	r3
        osc_wait_ready(OSC_MAINCK_XTAL);
   80fbc:	2006      	movs	r0, #6
   80fbe:	4b14      	ldr	r3, [pc, #80]	; (81010 <ctrl_sam3ucfg_cb+0x70>)
   80fc0:	4798      	blx	r3
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   80fc2:	2010      	movs	r0, #16
   80fc4:	4b13      	ldr	r3, [pc, #76]	; (81014 <ctrl_sam3ucfg_cb+0x74>)
   80fc6:	4798      	blx	r3
        break;
   80fc8:	e01b      	b.n	81002 <ctrl_sam3ucfg_cb+0x62>

        /* Turn off slow clock */
    case 0x02:
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80fca:	2010      	movs	r0, #16
   80fcc:	4b12      	ldr	r3, [pc, #72]	; (81018 <ctrl_sam3ucfg_cb+0x78>)
   80fce:	4798      	blx	r3
        break;
   80fd0:	e017      	b.n	81002 <ctrl_sam3ucfg_cb+0x62>
    case 0x03:
        /* Turn off connected stuff */
        //board_power(0);

        /* Clear ROM-mapping bit. */
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   80fd2:	2201      	movs	r2, #1
   80fd4:	210c      	movs	r1, #12
   80fd6:	4811      	ldr	r0, [pc, #68]	; (8101c <ctrl_sam3ucfg_cb+0x7c>)
   80fd8:	4b11      	ldr	r3, [pc, #68]	; (81020 <ctrl_sam3ucfg_cb+0x80>)
   80fda:	4798      	blx	r3

        /* Disconnect USB (will kill connection) */
        udc_detach();
   80fdc:	4b11      	ldr	r3, [pc, #68]	; (81024 <ctrl_sam3ucfg_cb+0x84>)
   80fde:	4798      	blx	r3

        /* With knowledge that I will rise again, I lay down my life. */
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   80fe0:	bf00      	nop
   80fe2:	4b11      	ldr	r3, [pc, #68]	; (81028 <ctrl_sam3ucfg_cb+0x88>)
   80fe4:	685b      	ldr	r3, [r3, #4]
   80fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80fea:	2b00      	cmp	r3, #0
   80fec:	d1f9      	bne.n	80fe2 <ctrl_sam3ucfg_cb+0x42>
        RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   80fee:	4b0e      	ldr	r3, [pc, #56]	; (81028 <ctrl_sam3ucfg_cb+0x88>)
   80ff0:	681b      	ldr	r3, [r3, #0]
   80ff2:	4a0d      	ldr	r2, [pc, #52]	; (81028 <ctrl_sam3ucfg_cb+0x88>)
   80ff4:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80ff8:	f043 0305 	orr.w	r3, r3, #5
   80ffc:	6013      	str	r3, [r2, #0]
        while(1);
   80ffe:	e7fe      	b.n	80ffe <ctrl_sam3ucfg_cb+0x5e>
        /* Make the jump */
        break;

        /* Oh well, sucks to be you */
    default:
        break;
   81000:	bf00      	nop
    }
}
   81002:	bf00      	nop
   81004:	bd80      	pop	{r7, pc}
   81006:	bf00      	nop
   81008:	2000130c 	.word	0x2000130c
   8100c:	00080c75 	.word	0x00080c75
   81010:	00080d7d 	.word	0x00080d7d
   81014:	00083b89 	.word	0x00083b89
   81018:	00083c09 	.word	0x00083c09
   8101c:	400e0800 	.word	0x400e0800
   81020:	000841b9 	.word	0x000841b9
   81024:	00080da9 	.word	0x00080da9
   81028:	400e1200 	.word	0x400e1200

0008102c <ctrl_progfpga_bulk>:

void ctrl_progfpga_bulk(void){
   8102c:	b580      	push	{r7, lr}
   8102e:	af00      	add	r7, sp, #0

    switch(udd_g_ctrlreq.req.wValue){
   81030:	4b0b      	ldr	r3, [pc, #44]	; (81060 <ctrl_progfpga_bulk+0x34>)
   81032:	885b      	ldrh	r3, [r3, #2]
   81034:	2ba1      	cmp	r3, #161	; 0xa1
   81036:	d006      	beq.n	81046 <ctrl_progfpga_bulk+0x1a>
   81038:	2ba2      	cmp	r3, #162	; 0xa2
   8103a:	d00a      	beq.n	81052 <ctrl_progfpga_bulk+0x26>
   8103c:	2ba0      	cmp	r3, #160	; 0xa0
   8103e:	d10c      	bne.n	8105a <ctrl_progfpga_bulk+0x2e>
    case 0xA0:
        fpga_program_setup1();
   81040:	4b08      	ldr	r3, [pc, #32]	; (81064 <ctrl_progfpga_bulk+0x38>)
   81042:	4798      	blx	r3
        break;
   81044:	e00a      	b.n	8105c <ctrl_progfpga_bulk+0x30>

    case 0xA1:
        /* Waiting on data... */
        fpga_program_setup2();
   81046:	4b08      	ldr	r3, [pc, #32]	; (81068 <ctrl_progfpga_bulk+0x3c>)
   81048:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   8104a:	4b08      	ldr	r3, [pc, #32]	; (8106c <ctrl_progfpga_bulk+0x40>)
   8104c:	220a      	movs	r2, #10
   8104e:	701a      	strb	r2, [r3, #0]
        break;
   81050:	e004      	b.n	8105c <ctrl_progfpga_bulk+0x30>

    case 0xA2:
        /* Done */
        blockendpoint_usage = bep_emem;
   81052:	4b06      	ldr	r3, [pc, #24]	; (8106c <ctrl_progfpga_bulk+0x40>)
   81054:	2200      	movs	r2, #0
   81056:	701a      	strb	r2, [r3, #0]
        break;
   81058:	e000      	b.n	8105c <ctrl_progfpga_bulk+0x30>

    default:
        break;
   8105a:	bf00      	nop
    }
}
   8105c:	bf00      	nop
   8105e:	bd80      	pop	{r7, pc}
   81060:	2000130c 	.word	0x2000130c
   81064:	00081581 	.word	0x00081581
   81068:	00081601 	.word	0x00081601
   8106c:	200011b8 	.word	0x200011b8

00081070 <ctrl_change_pwr>:

void ctrl_change_pwr(void) {
   81070:	b480      	push	{r7}
   81072:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.wValue) {
   81074:	4b17      	ldr	r3, [pc, #92]	; (810d4 <ctrl_change_pwr+0x64>)
   81076:	885b      	ldrh	r3, [r3, #2]
   81078:	2b01      	cmp	r3, #1
   8107a:	d00f      	beq.n	8109c <ctrl_change_pwr+0x2c>
   8107c:	2b02      	cmp	r3, #2
   8107e:	d019      	beq.n	810b4 <ctrl_change_pwr+0x44>
   81080:	2b00      	cmp	r3, #0
   81082:	d123      	bne.n	810cc <ctrl_change_pwr+0x5c>
    case 0x00: //USB power off
        PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   81084:	4b14      	ldr	r3, [pc, #80]	; (810d8 <ctrl_change_pwr+0x68>)
   81086:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8108a:	635a      	str	r2, [r3, #52]	; 0x34
        PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   8108c:	4b12      	ldr	r3, [pc, #72]	; (810d8 <ctrl_change_pwr+0x68>)
   8108e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   81092:	635a      	str	r2, [r3, #52]	; 0x34
        USB_PWR_STATE = 0;
   81094:	4b11      	ldr	r3, [pc, #68]	; (810dc <ctrl_change_pwr+0x6c>)
   81096:	2200      	movs	r2, #0
   81098:	701a      	strb	r2, [r3, #0]
        break;
   8109a:	e017      	b.n	810cc <ctrl_change_pwr+0x5c>
    case 0x01: //Use 5V power
        PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   8109c:	4b0e      	ldr	r3, [pc, #56]	; (810d8 <ctrl_change_pwr+0x68>)
   8109e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   810a2:	635a      	str	r2, [r3, #52]	; 0x34
        PIOA->PIO_SODR = (1 << F_VB5V); //enable host power
   810a4:	4b0c      	ldr	r3, [pc, #48]	; (810d8 <ctrl_change_pwr+0x68>)
   810a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   810aa:	631a      	str	r2, [r3, #48]	; 0x30
        USB_PWR_STATE = 1;
   810ac:	4b0b      	ldr	r3, [pc, #44]	; (810dc <ctrl_change_pwr+0x6c>)
   810ae:	2201      	movs	r2, #1
   810b0:	701a      	strb	r2, [r3, #0]
        break;
   810b2:	e00b      	b.n	810cc <ctrl_change_pwr+0x5c>
    case 0x02: //Use host power
        PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   810b4:	4b08      	ldr	r3, [pc, #32]	; (810d8 <ctrl_change_pwr+0x68>)
   810b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   810ba:	635a      	str	r2, [r3, #52]	; 0x34
        PIOA->PIO_SODR = (1 << F_VBHOST); //enable sniff power
   810bc:	4b06      	ldr	r3, [pc, #24]	; (810d8 <ctrl_change_pwr+0x68>)
   810be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   810c2:	631a      	str	r2, [r3, #48]	; 0x30
        USB_PWR_STATE = 2;
   810c4:	4b05      	ldr	r3, [pc, #20]	; (810dc <ctrl_change_pwr+0x6c>)
   810c6:	2202      	movs	r2, #2
   810c8:	701a      	strb	r2, [r3, #0]
        break;
   810ca:	bf00      	nop
    }
}
   810cc:	bf00      	nop
   810ce:	46bd      	mov	sp, r7
   810d0:	bc80      	pop	{r7}
   810d2:	4770      	bx	lr
   810d4:	2000130c 	.word	0x2000130c
   810d8:	400e0c00 	.word	0x400e0c00
   810dc:	20000d74 	.word	0x20000d74

000810e0 <ctrl_fpga_reset>:

void ctrl_fpga_reset(void) {
   810e0:	b580      	push	{r7, lr}
   810e2:	af00      	add	r7, sp, #0
  gpio_set_pin_high(PIN_EBI_USB_SPARE0);
   810e4:	2026      	movs	r0, #38	; 0x26
   810e6:	4b03      	ldr	r3, [pc, #12]	; (810f4 <ctrl_fpga_reset+0x14>)
   810e8:	4798      	blx	r3
  gpio_set_pin_low(PIN_EBI_USB_SPARE0);
   810ea:	2026      	movs	r0, #38	; 0x26
   810ec:	4b02      	ldr	r3, [pc, #8]	; (810f8 <ctrl_fpga_reset+0x18>)
   810ee:	4798      	blx	r3
}
   810f0:	bf00      	nop
   810f2:	bd80      	pop	{r7, pc}
   810f4:	0008445d 	.word	0x0008445d
   810f8:	0008448d 	.word	0x0008448d

000810fc <main_setup_out_received>:


bool main_setup_out_received(void)
{
   810fc:	b580      	push	{r7, lr}
   810fe:	af00      	add	r7, sp, #0
    //Add buffer if used
    udd_g_ctrlreq.payload = ctrlbuffer;
   81100:	4b46      	ldr	r3, [pc, #280]	; (8121c <main_setup_out_received+0x120>)
   81102:	4a47      	ldr	r2, [pc, #284]	; (81220 <main_setup_out_received+0x124>)
   81104:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   81106:	4b45      	ldr	r3, [pc, #276]	; (8121c <main_setup_out_received+0x120>)
   81108:	88db      	ldrh	r3, [r3, #6]
   8110a:	2b40      	cmp	r3, #64	; 0x40
   8110c:	bf28      	it	cs
   8110e:	2340      	movcs	r3, #64	; 0x40
   81110:	b29a      	uxth	r2, r3
   81112:	4b42      	ldr	r3, [pc, #264]	; (8121c <main_setup_out_received+0x120>)
   81114:	819a      	strh	r2, [r3, #12]

    blockendpoint_usage = bep_emem;
   81116:	4b43      	ldr	r3, [pc, #268]	; (81224 <main_setup_out_received+0x128>)
   81118:	2200      	movs	r2, #0
   8111a:	701a      	strb	r2, [r3, #0]
    static uint8_t  respbuf[128];
    switch(udd_g_ctrlreq.req.bRequest){
   8111c:	4b3f      	ldr	r3, [pc, #252]	; (8121c <main_setup_out_received+0x120>)
   8111e:	785b      	ldrb	r3, [r3, #1]
   81120:	3b10      	subs	r3, #16
   81122:	2b15      	cmp	r3, #21
   81124:	d86e      	bhi.n	81204 <main_setup_out_received+0x108>
   81126:	a201      	add	r2, pc, #4	; (adr r2, 8112c <main_setup_out_received+0x30>)
   81128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8112c:	00081185 	.word	0x00081185
   81130:	000811b1 	.word	0x000811b1
   81134:	0008119b 	.word	0x0008119b
   81138:	000811c7 	.word	0x000811c7
   8113c:	00081205 	.word	0x00081205
   81140:	00081205 	.word	0x00081205
   81144:	000811dd 	.word	0x000811dd
   81148:	00081205 	.word	0x00081205
   8114c:	00081205 	.word	0x00081205
   81150:	00081205 	.word	0x00081205
   81154:	00081205 	.word	0x00081205
   81158:	00081205 	.word	0x00081205
   8115c:	00081205 	.word	0x00081205
   81160:	00081205 	.word	0x00081205
   81164:	00081205 	.word	0x00081205
   81168:	00081205 	.word	0x00081205
   8116c:	00081205 	.word	0x00081205
   81170:	00081205 	.word	0x00081205
   81174:	000811e7 	.word	0x000811e7
   81178:	00081205 	.word	0x00081205
   8117c:	000811f1 	.word	0x000811f1
   81180:	000811fb 	.word	0x000811fb
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   81184:	2006      	movs	r0, #6
   81186:	4b28      	ldr	r3, [pc, #160]	; (81228 <main_setup_out_received+0x12c>)
   81188:	4798      	blx	r3
   8118a:	4603      	mov	r3, r0
   8118c:	2b00      	cmp	r3, #0
   8118e:	d03b      	beq.n	81208 <main_setup_out_received+0x10c>
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   81190:	4b22      	ldr	r3, [pc, #136]	; (8121c <main_setup_out_received+0x120>)
   81192:	4a26      	ldr	r2, [pc, #152]	; (8122c <main_setup_out_received+0x130>)
   81194:	611a      	str	r2, [r3, #16]
            return true;
   81196:	2301      	movs	r3, #1
   81198:	e03e      	b.n	81218 <main_setup_out_received+0x11c>
        }
        break;
    case REQ_MEMREAD_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   8119a:	2006      	movs	r0, #6
   8119c:	4b22      	ldr	r3, [pc, #136]	; (81228 <main_setup_out_received+0x12c>)
   8119e:	4798      	blx	r3
   811a0:	4603      	mov	r3, r0
   811a2:	2b00      	cmp	r3, #0
   811a4:	d032      	beq.n	8120c <main_setup_out_received+0x110>
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   811a6:	4b1d      	ldr	r3, [pc, #116]	; (8121c <main_setup_out_received+0x120>)
   811a8:	4a21      	ldr	r2, [pc, #132]	; (81230 <main_setup_out_received+0x134>)
   811aa:	611a      	str	r2, [r3, #16]
            return true;
   811ac:	2301      	movs	r3, #1
   811ae:	e033      	b.n	81218 <main_setup_out_received+0x11c>
        break;


        /* Memory Write */
    case REQ_MEMWRITE_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   811b0:	2006      	movs	r0, #6
   811b2:	4b1d      	ldr	r3, [pc, #116]	; (81228 <main_setup_out_received+0x12c>)
   811b4:	4798      	blx	r3
   811b6:	4603      	mov	r3, r0
   811b8:	2b00      	cmp	r3, #0
   811ba:	d029      	beq.n	81210 <main_setup_out_received+0x114>
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   811bc:	4b17      	ldr	r3, [pc, #92]	; (8121c <main_setup_out_received+0x120>)
   811be:	4a1d      	ldr	r2, [pc, #116]	; (81234 <main_setup_out_received+0x138>)
   811c0:	611a      	str	r2, [r3, #16]
            return true;
   811c2:	2301      	movs	r3, #1
   811c4:	e028      	b.n	81218 <main_setup_out_received+0x11c>
        }
        break;


    case REQ_MEMWRITE_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   811c6:	2006      	movs	r0, #6
   811c8:	4b17      	ldr	r3, [pc, #92]	; (81228 <main_setup_out_received+0x12c>)
   811ca:	4798      	blx	r3
   811cc:	4603      	mov	r3, r0
   811ce:	2b00      	cmp	r3, #0
   811d0:	d020      	beq.n	81214 <main_setup_out_received+0x118>
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   811d2:	4b12      	ldr	r3, [pc, #72]	; (8121c <main_setup_out_received+0x120>)
   811d4:	4a18      	ldr	r2, [pc, #96]	; (81238 <main_setup_out_received+0x13c>)
   811d6:	611a      	str	r2, [r3, #16]
            return true;
   811d8:	2301      	movs	r3, #1
   811da:	e01d      	b.n	81218 <main_setup_out_received+0x11c>
        }
        break;

    case REQ_FPGA_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   811dc:	4b0f      	ldr	r3, [pc, #60]	; (8121c <main_setup_out_received+0x120>)
   811de:	4a17      	ldr	r2, [pc, #92]	; (8123c <main_setup_out_received+0x140>)
   811e0:	611a      	str	r2, [r3, #16]
        return true;
   811e2:	2301      	movs	r3, #1
   811e4:	e018      	b.n	81218 <main_setup_out_received+0x11c>

    case REQ_SAM3U_CFG:
        udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
   811e6:	4b0d      	ldr	r3, [pc, #52]	; (8121c <main_setup_out_received+0x120>)
   811e8:	4a15      	ldr	r2, [pc, #84]	; (81240 <main_setup_out_received+0x144>)
   811ea:	611a      	str	r2, [r3, #16]
        return true;
   811ec:	2301      	movs	r3, #1
   811ee:	e013      	b.n	81218 <main_setup_out_received+0x11c>

    case REQ_CHANGE_PWR:
        //TODO
        udd_g_ctrlreq.callback = ctrl_change_pwr;
   811f0:	4b0a      	ldr	r3, [pc, #40]	; (8121c <main_setup_out_received+0x120>)
   811f2:	4a14      	ldr	r2, [pc, #80]	; (81244 <main_setup_out_received+0x148>)
   811f4:	611a      	str	r2, [r3, #16]
        return true;
   811f6:	2301      	movs	r3, #1
   811f8:	e00e      	b.n	81218 <main_setup_out_received+0x11c>

    case REQ_FPGA_RESET:
        udd_g_ctrlreq.callback = ctrl_fpga_reset;
   811fa:	4b08      	ldr	r3, [pc, #32]	; (8121c <main_setup_out_received+0x120>)
   811fc:	4a12      	ldr	r2, [pc, #72]	; (81248 <main_setup_out_received+0x14c>)
   811fe:	611a      	str	r2, [r3, #16]
        return true;
   81200:	2301      	movs	r3, #1
   81202:	e009      	b.n	81218 <main_setup_out_received+0x11c>

    default:
        return false;
   81204:	2300      	movs	r3, #0
   81206:	e007      	b.n	81218 <main_setup_out_received+0x11c>
        break;
   81208:	bf00      	nop
   8120a:	e004      	b.n	81216 <main_setup_out_received+0x11a>
        break;
   8120c:	bf00      	nop
   8120e:	e002      	b.n	81216 <main_setup_out_received+0x11a>
        break;
   81210:	bf00      	nop
   81212:	e000      	b.n	81216 <main_setup_out_received+0x11a>
        break;
   81214:	bf00      	nop
    }

    return false;
   81216:	2300      	movs	r3, #0
}
   81218:	4618      	mov	r0, r3
   8121a:	bd80      	pop	{r7, pc}
   8121c:	2000130c 	.word	0x2000130c
   81220:	20001178 	.word	0x20001178
   81224:	200011b8 	.word	0x200011b8
   81228:	00081405 	.word	0x00081405
   8122c:	00080e31 	.word	0x00080e31
   81230:	00080e8d 	.word	0x00080e8d
   81234:	00080f61 	.word	0x00080f61
   81238:	00080ee9 	.word	0x00080ee9
   8123c:	0008102d 	.word	0x0008102d
   81240:	00080fa1 	.word	0x00080fa1
   81244:	00081071 	.word	0x00081071
   81248:	000810e1 	.word	0x000810e1

0008124c <main_setup_in_received>:
  && (udd_g_ctrlreq.req.bRequest == 0)
  && (0 != udd_g_ctrlreq.req.wLength)
*/

bool main_setup_in_received(void)
{
   8124c:	b580      	push	{r7, lr}
   8124e:	af00      	add	r7, sp, #0
    */

    static uint8_t  respbuf[64];
    unsigned int cnt;

    switch(udd_g_ctrlreq.req.bRequest){
   81250:	4b27      	ldr	r3, [pc, #156]	; (812f0 <main_setup_in_received+0xa4>)
   81252:	785b      	ldrb	r3, [r3, #1]
   81254:	2b15      	cmp	r3, #21
   81256:	d02a      	beq.n	812ae <main_setup_in_received+0x62>
   81258:	2b17      	cmp	r3, #23
   8125a:	d017      	beq.n	8128c <main_setup_in_received+0x40>
   8125c:	2b12      	cmp	r3, #18
   8125e:	d143      	bne.n	812e8 <main_setup_in_received+0x9c>
    case REQ_MEMREAD_CTRL:
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   81260:	4b24      	ldr	r3, [pc, #144]	; (812f4 <main_setup_in_received+0xa8>)
   81262:	681b      	ldr	r3, [r3, #0]
   81264:	4a22      	ldr	r2, [pc, #136]	; (812f0 <main_setup_in_received+0xa4>)
   81266:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   81268:	4b23      	ldr	r3, [pc, #140]	; (812f8 <main_setup_in_received+0xac>)
   8126a:	681b      	ldr	r3, [r3, #0]
   8126c:	b29a      	uxth	r2, r3
   8126e:	4b20      	ldr	r3, [pc, #128]	; (812f0 <main_setup_in_received+0xa4>)
   81270:	819a      	strh	r2, [r3, #12]
        ctrlmemread_size = 0;
   81272:	4b21      	ldr	r3, [pc, #132]	; (812f8 <main_setup_in_received+0xac>)
   81274:	2200      	movs	r2, #0
   81276:	601a      	str	r2, [r3, #0]

        if (FPGA_lockstatus() == fpga_ctrlmem){
   81278:	4b20      	ldr	r3, [pc, #128]	; (812fc <main_setup_in_received+0xb0>)
   8127a:	4798      	blx	r3
   8127c:	4603      	mov	r3, r0
   8127e:	2b05      	cmp	r3, #5
   81280:	d102      	bne.n	81288 <main_setup_in_received+0x3c>
            FPGA_setlock(fpga_unlocked);
   81282:	2000      	movs	r0, #0
   81284:	4b1e      	ldr	r3, [pc, #120]	; (81300 <main_setup_in_received+0xb4>)
   81286:	4798      	blx	r3
        }

        return true;
   81288:	2301      	movs	r3, #1
   8128a:	e02e      	b.n	812ea <main_setup_in_received+0x9e>
        break;

    case REQ_FW_VERSION:
        respbuf[0] = FW_VER_MAJOR;
   8128c:	4b1d      	ldr	r3, [pc, #116]	; (81304 <main_setup_in_received+0xb8>)
   8128e:	2200      	movs	r2, #0
   81290:	701a      	strb	r2, [r3, #0]
        respbuf[1] = FW_VER_MINOR;
   81292:	4b1c      	ldr	r3, [pc, #112]	; (81304 <main_setup_in_received+0xb8>)
   81294:	220a      	movs	r2, #10
   81296:	705a      	strb	r2, [r3, #1]
        respbuf[2] = FW_VER_DEBUG;
   81298:	4b1a      	ldr	r3, [pc, #104]	; (81304 <main_setup_in_received+0xb8>)
   8129a:	2200      	movs	r2, #0
   8129c:	709a      	strb	r2, [r3, #2]
        udd_g_ctrlreq.payload = respbuf;
   8129e:	4b14      	ldr	r3, [pc, #80]	; (812f0 <main_setup_in_received+0xa4>)
   812a0:	4a18      	ldr	r2, [pc, #96]	; (81304 <main_setup_in_received+0xb8>)
   812a2:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 3;
   812a4:	4b12      	ldr	r3, [pc, #72]	; (812f0 <main_setup_in_received+0xa4>)
   812a6:	2203      	movs	r2, #3
   812a8:	819a      	strh	r2, [r3, #12]
        return true;
   812aa:	2301      	movs	r3, #1
   812ac:	e01d      	b.n	812ea <main_setup_in_received+0x9e>
        break;

    case REQ_FPGA_STATUS:
        respbuf[0] = FPGA_ISDONE();
   812ae:	2013      	movs	r0, #19
   812b0:	4b15      	ldr	r3, [pc, #84]	; (81308 <main_setup_in_received+0xbc>)
   812b2:	4798      	blx	r3
   812b4:	4603      	mov	r3, r0
   812b6:	2b00      	cmp	r3, #0
   812b8:	bf14      	ite	ne
   812ba:	2301      	movne	r3, #1
   812bc:	2300      	moveq	r3, #0
   812be:	b2db      	uxtb	r3, r3
   812c0:	461a      	mov	r2, r3
   812c2:	4b10      	ldr	r3, [pc, #64]	; (81304 <main_setup_in_received+0xb8>)
   812c4:	701a      	strb	r2, [r3, #0]
        respbuf[1] = 0;
   812c6:	4b0f      	ldr	r3, [pc, #60]	; (81304 <main_setup_in_received+0xb8>)
   812c8:	2200      	movs	r2, #0
   812ca:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   812cc:	4b0d      	ldr	r3, [pc, #52]	; (81304 <main_setup_in_received+0xb8>)
   812ce:	2200      	movs	r2, #0
   812d0:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   812d2:	4b0c      	ldr	r3, [pc, #48]	; (81304 <main_setup_in_received+0xb8>)
   812d4:	2200      	movs	r2, #0
   812d6:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   812d8:	4b05      	ldr	r3, [pc, #20]	; (812f0 <main_setup_in_received+0xa4>)
   812da:	4a0a      	ldr	r2, [pc, #40]	; (81304 <main_setup_in_received+0xb8>)
   812dc:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 4;
   812de:	4b04      	ldr	r3, [pc, #16]	; (812f0 <main_setup_in_received+0xa4>)
   812e0:	2204      	movs	r2, #4
   812e2:	819a      	strh	r2, [r3, #12]
        return true;
   812e4:	2301      	movs	r3, #1
   812e6:	e000      	b.n	812ea <main_setup_in_received+0x9e>
        break;
    default:
        return false;
   812e8:	2300      	movs	r3, #0
    }
    return false;
}
   812ea:	4618      	mov	r0, r3
   812ec:	bd80      	pop	{r7, pc}
   812ee:	bf00      	nop
   812f0:	2000130c 	.word	0x2000130c
   812f4:	200011bc 	.word	0x200011bc
   812f8:	200011c0 	.word	0x200011c0
   812fc:	0008145d 	.word	0x0008145d
   81300:	00081405 	.word	0x00081405
   81304:	200011c4 	.word	0x200011c4
   81308:	0008442d 	.word	0x0008442d

0008130c <main_vendor_bulk_in_received>:

void main_vendor_bulk_in_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
   8130c:	b580      	push	{r7, lr}
   8130e:	b082      	sub	sp, #8
   81310:	af00      	add	r7, sp, #0
   81312:	4603      	mov	r3, r0
   81314:	6039      	str	r1, [r7, #0]
   81316:	71fb      	strb	r3, [r7, #7]
   81318:	4613      	mov	r3, r2
   8131a:	71bb      	strb	r3, [r7, #6]
    UNUSED(nb_transfered);
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   8131c:	79fb      	ldrb	r3, [r7, #7]
   8131e:	2b00      	cmp	r3, #0
   81320:	d108      	bne.n	81334 <main_vendor_bulk_in_received+0x28>
        return; // Transfer aborted/error
    }

    if (FPGA_lockstatus() == fpga_blockin){
   81322:	4b06      	ldr	r3, [pc, #24]	; (8133c <main_vendor_bulk_in_received+0x30>)
   81324:	4798      	blx	r3
   81326:	4603      	mov	r3, r0
   81328:	2b02      	cmp	r3, #2
   8132a:	d104      	bne.n	81336 <main_vendor_bulk_in_received+0x2a>
        FPGA_setlock(fpga_unlocked);
   8132c:	2000      	movs	r0, #0
   8132e:	4b04      	ldr	r3, [pc, #16]	; (81340 <main_vendor_bulk_in_received+0x34>)
   81330:	4798      	blx	r3
   81332:	e000      	b.n	81336 <main_vendor_bulk_in_received+0x2a>
        return; // Transfer aborted/error
   81334:	bf00      	nop
    }
}
   81336:	3708      	adds	r7, #8
   81338:	46bd      	mov	sp, r7
   8133a:	bd80      	pop	{r7, pc}
   8133c:	0008145d 	.word	0x0008145d
   81340:	00081405 	.word	0x00081405

00081344 <main_vendor_bulk_out_received>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep)
{
   81344:	b580      	push	{r7, lr}
   81346:	b084      	sub	sp, #16
   81348:	af00      	add	r7, sp, #0
   8134a:	4603      	mov	r3, r0
   8134c:	6039      	str	r1, [r7, #0]
   8134e:	71fb      	strb	r3, [r7, #7]
   81350:	4613      	mov	r3, r2
   81352:	71bb      	strb	r3, [r7, #6]
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   81354:	79fb      	ldrb	r3, [r7, #7]
   81356:	2b00      	cmp	r3, #0
   81358:	d006      	beq.n	81368 <main_vendor_bulk_out_received+0x24>
        // Transfer aborted

        //restart
        udi_vendor_bulk_out_run(
   8135a:	4a22      	ldr	r2, [pc, #136]	; (813e4 <main_vendor_bulk_out_received+0xa0>)
   8135c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81360:	4821      	ldr	r0, [pc, #132]	; (813e8 <main_vendor_bulk_out_received+0xa4>)
   81362:	4b22      	ldr	r3, [pc, #136]	; (813ec <main_vendor_bulk_out_received+0xa8>)
   81364:	4798      	blx	r3
            main_buf_loopback,
            sizeof(main_buf_loopback),
            main_vendor_bulk_out_received);

        return;
   81366:	e039      	b.n	813dc <main_vendor_bulk_out_received+0x98>
    }

    if (blockendpoint_usage == bep_emem){
   81368:	4b21      	ldr	r3, [pc, #132]	; (813f0 <main_vendor_bulk_out_received+0xac>)
   8136a:	781b      	ldrb	r3, [r3, #0]
   8136c:	2b00      	cmp	r3, #0
   8136e:	d11a      	bne.n	813a6 <main_vendor_bulk_out_received+0x62>
        for(unsigned int i = 0; i < nb_transfered; i++){
   81370:	2300      	movs	r3, #0
   81372:	60fb      	str	r3, [r7, #12]
   81374:	e00b      	b.n	8138e <main_vendor_bulk_out_received+0x4a>
            xram[i] = main_buf_loopback[i];
   81376:	4b1f      	ldr	r3, [pc, #124]	; (813f4 <main_vendor_bulk_out_received+0xb0>)
   81378:	681a      	ldr	r2, [r3, #0]
   8137a:	68fb      	ldr	r3, [r7, #12]
   8137c:	4413      	add	r3, r2
   8137e:	491a      	ldr	r1, [pc, #104]	; (813e8 <main_vendor_bulk_out_received+0xa4>)
   81380:	68fa      	ldr	r2, [r7, #12]
   81382:	440a      	add	r2, r1
   81384:	7812      	ldrb	r2, [r2, #0]
   81386:	701a      	strb	r2, [r3, #0]
        for(unsigned int i = 0; i < nb_transfered; i++){
   81388:	68fb      	ldr	r3, [r7, #12]
   8138a:	3301      	adds	r3, #1
   8138c:	60fb      	str	r3, [r7, #12]
   8138e:	68fa      	ldr	r2, [r7, #12]
   81390:	683b      	ldr	r3, [r7, #0]
   81392:	429a      	cmp	r2, r3
   81394:	d3ef      	bcc.n	81376 <main_vendor_bulk_out_received+0x32>
        }

        if (FPGA_lockstatus() == fpga_blockout){
   81396:	4b18      	ldr	r3, [pc, #96]	; (813f8 <main_vendor_bulk_out_received+0xb4>)
   81398:	4798      	blx	r3
   8139a:	4603      	mov	r3, r0
   8139c:	2b04      	cmp	r3, #4
   8139e:	d117      	bne.n	813d0 <main_vendor_bulk_out_received+0x8c>
            FPGA_releaselock();
   813a0:	4b16      	ldr	r3, [pc, #88]	; (813fc <main_vendor_bulk_out_received+0xb8>)
   813a2:	4798      	blx	r3
   813a4:	e014      	b.n	813d0 <main_vendor_bulk_out_received+0x8c>
        }
    } else if (blockendpoint_usage == bep_fpgabitstream){
   813a6:	4b12      	ldr	r3, [pc, #72]	; (813f0 <main_vendor_bulk_out_received+0xac>)
   813a8:	781b      	ldrb	r3, [r3, #0]
   813aa:	2b0a      	cmp	r3, #10
   813ac:	d110      	bne.n	813d0 <main_vendor_bulk_out_received+0x8c>

        /* Send byte to FPGA - this could eventually be done via SPI */
        // TODO: is this dangerous?
        for(unsigned int i = 0; i < nb_transfered; i++){
   813ae:	2300      	movs	r3, #0
   813b0:	60bb      	str	r3, [r7, #8]
   813b2:	e009      	b.n	813c8 <main_vendor_bulk_out_received+0x84>
            fpga_program_sendbyte(main_buf_loopback[i]);
   813b4:	4a0c      	ldr	r2, [pc, #48]	; (813e8 <main_vendor_bulk_out_received+0xa4>)
   813b6:	68bb      	ldr	r3, [r7, #8]
   813b8:	4413      	add	r3, r2
   813ba:	781b      	ldrb	r3, [r3, #0]
   813bc:	4618      	mov	r0, r3
   813be:	4b10      	ldr	r3, [pc, #64]	; (81400 <main_vendor_bulk_out_received+0xbc>)
   813c0:	4798      	blx	r3
        for(unsigned int i = 0; i < nb_transfered; i++){
   813c2:	68bb      	ldr	r3, [r7, #8]
   813c4:	3301      	adds	r3, #1
   813c6:	60bb      	str	r3, [r7, #8]
   813c8:	68ba      	ldr	r2, [r7, #8]
   813ca:	683b      	ldr	r3, [r7, #0]
   813cc:	429a      	cmp	r2, r3
   813ce:	d3f1      	bcc.n	813b4 <main_vendor_bulk_out_received+0x70>
#endif
    }

    //printf("BULKOUT: %d bytes\n", (int)nb_transfered);

    udi_vendor_bulk_out_run(
   813d0:	4a04      	ldr	r2, [pc, #16]	; (813e4 <main_vendor_bulk_out_received+0xa0>)
   813d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   813d6:	4804      	ldr	r0, [pc, #16]	; (813e8 <main_vendor_bulk_out_received+0xa4>)
   813d8:	4b04      	ldr	r3, [pc, #16]	; (813ec <main_vendor_bulk_out_received+0xa8>)
   813da:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
}
   813dc:	3710      	adds	r7, #16
   813de:	46bd      	mov	sp, r7
   813e0:	bd80      	pop	{r7, pc}
   813e2:	bf00      	nop
   813e4:	00081345 	.word	0x00081345
   813e8:	20000d78 	.word	0x20000d78
   813ec:	00084105 	.word	0x00084105
   813f0:	200011b8 	.word	0x200011b8
   813f4:	20000290 	.word	0x20000290
   813f8:	0008145d 	.word	0x0008145d
   813fc:	00081445 	.word	0x00081445
   81400:	00081615 	.word	0x00081615

00081404 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   81404:	b580      	push	{r7, lr}
   81406:	b084      	sub	sp, #16
   81408:	af00      	add	r7, sp, #0
   8140a:	4603      	mov	r3, r0
   8140c:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
   8140e:	2300      	movs	r3, #0
   81410:	60fb      	str	r3, [r7, #12]
  cpu_irq_enter_critical();
   81412:	4b09      	ldr	r3, [pc, #36]	; (81438 <FPGA_setlock+0x34>)
   81414:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   81416:	4b09      	ldr	r3, [pc, #36]	; (8143c <FPGA_setlock+0x38>)
   81418:	781b      	ldrb	r3, [r3, #0]
   8141a:	b2db      	uxtb	r3, r3
   8141c:	2b00      	cmp	r3, #0
   8141e:	d104      	bne.n	8142a <FPGA_setlock+0x26>
  {
    ret = 1;
   81420:	2301      	movs	r3, #1
   81422:	60fb      	str	r3, [r7, #12]
    _fpga_locked = lockstatus;
   81424:	4a05      	ldr	r2, [pc, #20]	; (8143c <FPGA_setlock+0x38>)
   81426:	79fb      	ldrb	r3, [r7, #7]
   81428:	7013      	strb	r3, [r2, #0]
  }
  cpu_irq_leave_critical();
   8142a:	4b05      	ldr	r3, [pc, #20]	; (81440 <FPGA_setlock+0x3c>)
   8142c:	4798      	blx	r3
  return ret;
   8142e:	68fb      	ldr	r3, [r7, #12]
}
   81430:	4618      	mov	r0, r3
   81432:	3710      	adds	r7, #16
   81434:	46bd      	mov	sp, r7
   81436:	bd80      	pop	{r7, pc}
   81438:	000859c5 	.word	0x000859c5
   8143c:	20001204 	.word	0x20001204
   81440:	00085a19 	.word	0x00085a19

00081444 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
   81444:	b480      	push	{r7}
   81446:	af00      	add	r7, sp, #0
  _fpga_locked = fpga_unlocked;
   81448:	4b03      	ldr	r3, [pc, #12]	; (81458 <FPGA_releaselock+0x14>)
   8144a:	2200      	movs	r2, #0
   8144c:	701a      	strb	r2, [r3, #0]
}
   8144e:	bf00      	nop
   81450:	46bd      	mov	sp, r7
   81452:	bc80      	pop	{r7}
   81454:	4770      	bx	lr
   81456:	bf00      	nop
   81458:	20001204 	.word	0x20001204

0008145c <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
   8145c:	b480      	push	{r7}
   8145e:	af00      	add	r7, sp, #0
  return _fpga_locked;
   81460:	4b03      	ldr	r3, [pc, #12]	; (81470 <FPGA_lockstatus+0x14>)
   81462:	781b      	ldrb	r3, [r3, #0]
   81464:	b2db      	uxtb	r3, r3
}
   81466:	4618      	mov	r0, r3
   81468:	46bd      	mov	sp, r7
   8146a:	bc80      	pop	{r7}
   8146c:	4770      	bx	lr
   8146e:	bf00      	nop
   81470:	20001204 	.word	0x20001204

00081474 <FPGA_setaddr>:
  FPGA_releaselock();
  cpu_irq_leave_critical();
}

void FPGA_setaddr(uint32_t addr)
{
   81474:	b580      	push	{r7, lr}
   81476:	b082      	sub	sp, #8
   81478:	af00      	add	r7, sp, #0
   8147a:	6078      	str	r0, [r7, #4]
  pio_sync_output_write(FPGA_ADDR_PORT, addr);
   8147c:	6879      	ldr	r1, [r7, #4]
   8147e:	4806      	ldr	r0, [pc, #24]	; (81498 <FPGA_setaddr+0x24>)
   81480:	4b06      	ldr	r3, [pc, #24]	; (8149c <FPGA_setaddr+0x28>)
   81482:	4798      	blx	r3
  gpio_set_pin_low(PIN_EBI_USB_SPARE1);
   81484:	2031      	movs	r0, #49	; 0x31
   81486:	4b06      	ldr	r3, [pc, #24]	; (814a0 <FPGA_setaddr+0x2c>)
   81488:	4798      	blx	r3
  gpio_set_pin_high(PIN_EBI_USB_SPARE1);
   8148a:	2031      	movs	r0, #49	; 0x31
   8148c:	4b05      	ldr	r3, [pc, #20]	; (814a4 <FPGA_setaddr+0x30>)
   8148e:	4798      	blx	r3
}
   81490:	bf00      	nop
   81492:	3708      	adds	r7, #8
   81494:	46bd      	mov	sp, r7
   81496:	bd80      	pop	{r7, pc}
   81498:	400e0e00 	.word	0x400e0e00
   8149c:	000843cd 	.word	0x000843cd
   814a0:	0008448d 	.word	0x0008448d
   814a4:	0008445d 	.word	0x0008445d

000814a8 <osc_get_rate>:
{
   814a8:	b480      	push	{r7}
   814aa:	b083      	sub	sp, #12
   814ac:	af00      	add	r7, sp, #0
   814ae:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   814b0:	687b      	ldr	r3, [r7, #4]
   814b2:	2b07      	cmp	r3, #7
   814b4:	d823      	bhi.n	814fe <osc_get_rate+0x56>
   814b6:	a201      	add	r2, pc, #4	; (adr r2, 814bc <osc_get_rate+0x14>)
   814b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   814bc:	000814dd 	.word	0x000814dd
   814c0:	000814e3 	.word	0x000814e3
   814c4:	000814e7 	.word	0x000814e7
   814c8:	000814eb 	.word	0x000814eb
   814cc:	000814ef 	.word	0x000814ef
   814d0:	000814f3 	.word	0x000814f3
   814d4:	000814f7 	.word	0x000814f7
   814d8:	000814fb 	.word	0x000814fb
		return OSC_SLCK_32K_RC_HZ;
   814dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   814e0:	e00e      	b.n	81500 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   814e2:	2300      	movs	r3, #0
   814e4:	e00c      	b.n	81500 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   814e6:	2300      	movs	r3, #0
   814e8:	e00a      	b.n	81500 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   814ea:	4b08      	ldr	r3, [pc, #32]	; (8150c <osc_get_rate+0x64>)
   814ec:	e008      	b.n	81500 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   814ee:	4b08      	ldr	r3, [pc, #32]	; (81510 <osc_get_rate+0x68>)
   814f0:	e006      	b.n	81500 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   814f2:	4b08      	ldr	r3, [pc, #32]	; (81514 <osc_get_rate+0x6c>)
   814f4:	e004      	b.n	81500 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   814f6:	4b07      	ldr	r3, [pc, #28]	; (81514 <osc_get_rate+0x6c>)
   814f8:	e002      	b.n	81500 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   814fa:	4b06      	ldr	r3, [pc, #24]	; (81514 <osc_get_rate+0x6c>)
   814fc:	e000      	b.n	81500 <osc_get_rate+0x58>
	return 0;
   814fe:	2300      	movs	r3, #0
}
   81500:	4618      	mov	r0, r3
   81502:	370c      	adds	r7, #12
   81504:	46bd      	mov	sp, r7
   81506:	bc80      	pop	{r7}
   81508:	4770      	bx	lr
   8150a:	bf00      	nop
   8150c:	003d0900 	.word	0x003d0900
   81510:	007a1200 	.word	0x007a1200
   81514:	00b71b00 	.word	0x00b71b00

00081518 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   81518:	b580      	push	{r7, lr}
   8151a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   8151c:	2006      	movs	r0, #6
   8151e:	4b03      	ldr	r3, [pc, #12]	; (8152c <sysclk_get_main_hz+0x14>)
   81520:	4798      	blx	r3
   81522:	4603      	mov	r3, r0
   81524:	011b      	lsls	r3, r3, #4
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   81526:	4618      	mov	r0, r3
   81528:	bd80      	pop	{r7, pc}
   8152a:	bf00      	nop
   8152c:	000814a9 	.word	0x000814a9

00081530 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   81530:	b580      	push	{r7, lr}
   81532:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   81534:	4b02      	ldr	r3, [pc, #8]	; (81540 <sysclk_get_cpu_hz+0x10>)
   81536:	4798      	blx	r3
   81538:	4603      	mov	r3, r0
   8153a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   8153c:	4618      	mov	r0, r3
   8153e:	bd80      	pop	{r7, pc}
   81540:	00081519 	.word	0x00081519

00081544 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   81544:	b580      	push	{r7, lr}
   81546:	b082      	sub	sp, #8
   81548:	af00      	add	r7, sp, #0
   8154a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   8154c:	6878      	ldr	r0, [r7, #4]
   8154e:	4b03      	ldr	r3, [pc, #12]	; (8155c <sysclk_enable_peripheral_clock+0x18>)
   81550:	4798      	blx	r3
}
   81552:	bf00      	nop
   81554:	3708      	adds	r7, #8
   81556:	46bd      	mov	sp, r7
   81558:	bd80      	pop	{r7, pc}
   8155a:	bf00      	nop
   8155c:	00083ed5 	.word	0x00083ed5

00081560 <fpga_program_init>:
#include "fpga_program.h"
#include "spi.h"

/* FPGA Programming: Init pins, set to standby state */
void fpga_program_init(void)
{
   81560:	b580      	push	{r7, lr}
   81562:	af00      	add	r7, sp, #0
    FPGA_NPROG_SETUP();
   81564:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81568:	2014      	movs	r0, #20
   8156a:	4b03      	ldr	r3, [pc, #12]	; (81578 <fpga_program_init+0x18>)
   8156c:	4798      	blx	r3
    FPGA_NPROG_HIGH();
   8156e:	2014      	movs	r0, #20
   81570:	4b02      	ldr	r3, [pc, #8]	; (8157c <fpga_program_init+0x1c>)
   81572:	4798      	blx	r3
}
   81574:	bf00      	nop
   81576:	bd80      	pop	{r7, pc}
   81578:	000844bd 	.word	0x000844bd
   8157c:	0008445d 	.word	0x0008445d

00081580 <fpga_program_setup1>:

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   81580:	b580      	push	{r7, lr}
   81582:	b084      	sub	sp, #16
   81584:	af00      	add	r7, sp, #0
    /* Init - set program low to erase FPGA */
    FPGA_NPROG_LOW();
   81586:	2014      	movs	r0, #20
   81588:	4b14      	ldr	r3, [pc, #80]	; (815dc <fpga_program_setup1+0x5c>)
   8158a:	4798      	blx	r3

    usart_spi_opt_t spiopts;
    spiopts.baudrate = 10000000UL;
   8158c:	4b14      	ldr	r3, [pc, #80]	; (815e0 <fpga_program_setup1+0x60>)
   8158e:	603b      	str	r3, [r7, #0]
    spiopts.char_length = US_MR_CHRL_8_BIT;
   81590:	23c0      	movs	r3, #192	; 0xc0
   81592:	607b      	str	r3, [r7, #4]
    spiopts.channel_mode = US_MR_CHMODE_NORMAL;
   81594:	2300      	movs	r3, #0
   81596:	60fb      	str	r3, [r7, #12]
    spiopts.spi_mode = SPI_MODE_0;
   81598:	2300      	movs	r3, #0
   8159a:	60bb      	str	r3, [r7, #8]

    sysclk_enable_peripheral_clock(FPGA_PROG_USART_ID);
   8159c:	200d      	movs	r0, #13
   8159e:	4b11      	ldr	r3, [pc, #68]	; (815e4 <fpga_program_setup1+0x64>)
   815a0:	4798      	blx	r3
    usart_init_spi_master(FPGA_PROG_USART, &spiopts, sysclk_get_cpu_hz());
   815a2:	4b11      	ldr	r3, [pc, #68]	; (815e8 <fpga_program_setup1+0x68>)
   815a4:	4798      	blx	r3
   815a6:	4602      	mov	r2, r0
   815a8:	463b      	mov	r3, r7
   815aa:	4619      	mov	r1, r3
   815ac:	480f      	ldr	r0, [pc, #60]	; (815ec <fpga_program_setup1+0x6c>)
   815ae:	4b10      	ldr	r3, [pc, #64]	; (815f0 <fpga_program_setup1+0x70>)
   815b0:	4798      	blx	r3
    FPGA_DO_SETUP();
   815b2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   815b6:	2012      	movs	r0, #18
   815b8:	4b0e      	ldr	r3, [pc, #56]	; (815f4 <fpga_program_setup1+0x74>)
   815ba:	4798      	blx	r3
    FPGA_CCLK_SETUP();
   815bc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   815c0:	2011      	movs	r0, #17
   815c2:	4b0c      	ldr	r3, [pc, #48]	; (815f4 <fpga_program_setup1+0x74>)
   815c4:	4798      	blx	r3

    //pin setup doesn't transfer control over to USART, so have to do it manually
    PIOA->PIO_PDR = (1 << PIN_FPGA_DO_GPIO) | (1 << PIN_FPGA_CCLK_GPIO);
   815c6:	4b0c      	ldr	r3, [pc, #48]	; (815f8 <fpga_program_setup1+0x78>)
   815c8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   815cc:	605a      	str	r2, [r3, #4]
    usart_enable_tx(FPGA_PROG_USART);
   815ce:	4807      	ldr	r0, [pc, #28]	; (815ec <fpga_program_setup1+0x6c>)
   815d0:	4b0a      	ldr	r3, [pc, #40]	; (815fc <fpga_program_setup1+0x7c>)
   815d2:	4798      	blx	r3
}
   815d4:	bf00      	nop
   815d6:	3710      	adds	r7, #16
   815d8:	46bd      	mov	sp, r7
   815da:	bd80      	pop	{r7, pc}
   815dc:	0008448d 	.word	0x0008448d
   815e0:	00989680 	.word	0x00989680
   815e4:	00081545 	.word	0x00081545
   815e8:	00081531 	.word	0x00081531
   815ec:	40090000 	.word	0x40090000
   815f0:	00081749 	.word	0x00081749
   815f4:	000844bd 	.word	0x000844bd
   815f8:	400e0c00 	.word	0x400e0c00
   815fc:	00081859 	.word	0x00081859

00081600 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   81600:	b580      	push	{r7, lr}
   81602:	af00      	add	r7, sp, #0
    FPGA_NPROG_HIGH();
   81604:	2014      	movs	r0, #20
   81606:	4b02      	ldr	r3, [pc, #8]	; (81610 <fpga_program_setup2+0x10>)
   81608:	4798      	blx	r3
}
   8160a:	bf00      	nop
   8160c:	bd80      	pop	{r7, pc}
   8160e:	bf00      	nop
   81610:	0008445d 	.word	0x0008445d

00081614 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   81614:	b580      	push	{r7, lr}
   81616:	b082      	sub	sp, #8
   81618:	af00      	add	r7, sp, #0
   8161a:	4603      	mov	r3, r0
   8161c:	71fb      	strb	r3, [r7, #7]
    //For debug only
    //fpga_total_bs_len++;
    usart_putchar(FPGA_PROG_USART, databyte);
   8161e:	79fb      	ldrb	r3, [r7, #7]
   81620:	4619      	mov	r1, r3
   81622:	4803      	ldr	r0, [pc, #12]	; (81630 <fpga_program_sendbyte+0x1c>)
   81624:	4b03      	ldr	r3, [pc, #12]	; (81634 <fpga_program_sendbyte+0x20>)
   81626:	4798      	blx	r3
}
   81628:	bf00      	nop
   8162a:	3708      	adds	r7, #8
   8162c:	46bd      	mov	sp, r7
   8162e:	bd80      	pop	{r7, pc}
   81630:	40090000 	.word	0x40090000
   81634:	000818ef 	.word	0x000818ef

00081638 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   81638:	b590      	push	{r4, r7, lr}
   8163a:	b08b      	sub	sp, #44	; 0x2c
   8163c:	af02      	add	r7, sp, #8
   8163e:	6078      	str	r0, [r7, #4]
   81640:	6039      	str	r1, [r7, #0]
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   81642:	f107 020c 	add.w	r2, r7, #12
   81646:	2304      	movs	r3, #4
   81648:	9300      	str	r3, [sp, #0]
   8164a:	4613      	mov	r3, r2
   8164c:	220f      	movs	r2, #15
   8164e:	210e      	movs	r1, #14
   81650:	4813      	ldr	r0, [pc, #76]	; (816a0 <flash_read_unique_id+0x68>)
   81652:	4c14      	ldr	r4, [pc, #80]	; (816a4 <flash_read_unique_id+0x6c>)
   81654:	47a0      	blx	r4
   81656:	4603      	mov	r3, r0
   81658:	2b00      	cmp	r3, #0
   8165a:	d001      	beq.n	81660 <flash_read_unique_id+0x28>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   8165c:	2310      	movs	r3, #16
   8165e:	e01b      	b.n	81698 <flash_read_unique_id+0x60>
	}

	if (ul_size > 4) {
   81660:	683b      	ldr	r3, [r7, #0]
   81662:	2b04      	cmp	r3, #4
   81664:	d901      	bls.n	8166a <flash_read_unique_id+0x32>
		/* Only 4 dword to store unique ID */
		ul_size = 4;
   81666:	2304      	movs	r3, #4
   81668:	603b      	str	r3, [r7, #0]
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   8166a:	2300      	movs	r3, #0
   8166c:	61fb      	str	r3, [r7, #28]
   8166e:	e00e      	b.n	8168e <flash_read_unique_id+0x56>
		pul_data[ul_idx] = uid_buf[ul_idx];
   81670:	69fb      	ldr	r3, [r7, #28]
   81672:	009b      	lsls	r3, r3, #2
   81674:	687a      	ldr	r2, [r7, #4]
   81676:	441a      	add	r2, r3
   81678:	69fb      	ldr	r3, [r7, #28]
   8167a:	009b      	lsls	r3, r3, #2
   8167c:	f107 0120 	add.w	r1, r7, #32
   81680:	440b      	add	r3, r1
   81682:	f853 3c14 	ldr.w	r3, [r3, #-20]
   81686:	6013      	str	r3, [r2, #0]
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81688:	69fb      	ldr	r3, [r7, #28]
   8168a:	3301      	adds	r3, #1
   8168c:	61fb      	str	r3, [r7, #28]
   8168e:	69fa      	ldr	r2, [r7, #28]
   81690:	683b      	ldr	r3, [r7, #0]
   81692:	429a      	cmp	r2, r3
   81694:	d3ec      	bcc.n	81670 <flash_read_unique_id+0x38>
	}

	return FLASH_RC_OK;
   81696:	2300      	movs	r3, #0
}
   81698:	4618      	mov	r0, r3
   8169a:	3724      	adds	r7, #36	; 0x24
   8169c:	46bd      	mov	sp, r7
   8169e:	bd90      	pop	{r4, r7, pc}
   816a0:	400e0800 	.word	0x400e0800
   816a4:	20000001 	.word	0x20000001

000816a8 <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   816a8:	b480      	push	{r7}
   816aa:	b087      	sub	sp, #28
   816ac:	af00      	add	r7, sp, #0
   816ae:	60f8      	str	r0, [r7, #12]
   816b0:	60b9      	str	r1, [r7, #8]
   816b2:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   816b4:	68bb      	ldr	r3, [r7, #8]
   816b6:	085a      	lsrs	r2, r3, #1
   816b8:	687b      	ldr	r3, [r7, #4]
   816ba:	441a      	add	r2, r3
   816bc:	68bb      	ldr	r3, [r7, #8]
   816be:	fbb2 f3f3 	udiv	r3, r2, r3
   816c2:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   816c4:	697b      	ldr	r3, [r7, #20]
   816c6:	2b03      	cmp	r3, #3
   816c8:	d903      	bls.n	816d2 <usart_set_spi_master_baudrate+0x2a>
   816ca:	697b      	ldr	r3, [r7, #20]
   816cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   816d0:	d301      	bcc.n	816d6 <usart_set_spi_master_baudrate+0x2e>
		return 1;
   816d2:	2301      	movs	r3, #1
   816d4:	e003      	b.n	816de <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   816d6:	68fb      	ldr	r3, [r7, #12]
   816d8:	697a      	ldr	r2, [r7, #20]
   816da:	621a      	str	r2, [r3, #32]

	return 0;
   816dc:	2300      	movs	r3, #0
}
   816de:	4618      	mov	r0, r3
   816e0:	371c      	adds	r7, #28
   816e2:	46bd      	mov	sp, r7
   816e4:	bc80      	pop	{r7}
   816e6:	4770      	bx	lr

000816e8 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   816e8:	b580      	push	{r7, lr}
   816ea:	b082      	sub	sp, #8
   816ec:	af00      	add	r7, sp, #0
   816ee:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   816f0:	6878      	ldr	r0, [r7, #4]
   816f2:	4b0f      	ldr	r3, [pc, #60]	; (81730 <usart_reset+0x48>)
   816f4:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   816f6:	687b      	ldr	r3, [r7, #4]
   816f8:	2200      	movs	r2, #0
   816fa:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   816fc:	687b      	ldr	r3, [r7, #4]
   816fe:	2200      	movs	r2, #0
   81700:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   81702:	687b      	ldr	r3, [r7, #4]
   81704:	2200      	movs	r2, #0
   81706:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   81708:	6878      	ldr	r0, [r7, #4]
   8170a:	4b0a      	ldr	r3, [pc, #40]	; (81734 <usart_reset+0x4c>)
   8170c:	4798      	blx	r3
	usart_reset_rx(p_usart);
   8170e:	6878      	ldr	r0, [r7, #4]
   81710:	4b09      	ldr	r3, [pc, #36]	; (81738 <usart_reset+0x50>)
   81712:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   81714:	6878      	ldr	r0, [r7, #4]
   81716:	4b09      	ldr	r3, [pc, #36]	; (8173c <usart_reset+0x54>)
   81718:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   8171a:	6878      	ldr	r0, [r7, #4]
   8171c:	4b08      	ldr	r3, [pc, #32]	; (81740 <usart_reset+0x58>)
   8171e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
   81720:	6878      	ldr	r0, [r7, #4]
   81722:	4b08      	ldr	r3, [pc, #32]	; (81744 <usart_reset+0x5c>)
   81724:	4798      	blx	r3
#endif
}
   81726:	bf00      	nop
   81728:	3708      	adds	r7, #8
   8172a:	46bd      	mov	sp, r7
   8172c:	bd80      	pop	{r7, pc}
   8172e:	bf00      	nop
   81730:	0008191d 	.word	0x0008191d
   81734:	00081871 	.word	0x00081871
   81738:	00081889 	.word	0x00081889
   8173c:	000818a1 	.word	0x000818a1
   81740:	000818d5 	.word	0x000818d5
   81744:	000818bb 	.word	0x000818bb

00081748 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   81748:	b580      	push	{r7, lr}
   8174a:	b084      	sub	sp, #16
   8174c:	af00      	add	r7, sp, #0
   8174e:	60f8      	str	r0, [r7, #12]
   81750:	60b9      	str	r1, [r7, #8]
   81752:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   81754:	68f8      	ldr	r0, [r7, #12]
   81756:	4b3d      	ldr	r3, [pc, #244]	; (8184c <usart_init_spi_master+0x104>)
   81758:	4798      	blx	r3

	ul_reg_val = 0;
   8175a:	4b3d      	ldr	r3, [pc, #244]	; (81850 <usart_init_spi_master+0x108>)
   8175c:	2200      	movs	r2, #0
   8175e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   81760:	68bb      	ldr	r3, [r7, #8]
   81762:	2b00      	cmp	r3, #0
   81764:	d00d      	beq.n	81782 <usart_init_spi_master+0x3a>
   81766:	68bb      	ldr	r3, [r7, #8]
   81768:	689b      	ldr	r3, [r3, #8]
   8176a:	2b03      	cmp	r3, #3
   8176c:	d809      	bhi.n	81782 <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   8176e:	68bb      	ldr	r3, [r7, #8]
   81770:	681b      	ldr	r3, [r3, #0]
   81772:	687a      	ldr	r2, [r7, #4]
   81774:	4619      	mov	r1, r3
   81776:	68f8      	ldr	r0, [r7, #12]
   81778:	4b36      	ldr	r3, [pc, #216]	; (81854 <usart_init_spi_master+0x10c>)
   8177a:	4798      	blx	r3
   8177c:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   8177e:	2b00      	cmp	r3, #0
   81780:	d001      	beq.n	81786 <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   81782:	2301      	movs	r3, #1
   81784:	e05d      	b.n	81842 <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   81786:	68bb      	ldr	r3, [r7, #8]
   81788:	685a      	ldr	r2, [r3, #4]
   8178a:	4b31      	ldr	r3, [pc, #196]	; (81850 <usart_init_spi_master+0x108>)
   8178c:	681b      	ldr	r3, [r3, #0]
   8178e:	4313      	orrs	r3, r2
   81790:	4a2f      	ldr	r2, [pc, #188]	; (81850 <usart_init_spi_master+0x108>)
   81792:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   81794:	68bb      	ldr	r3, [r7, #8]
   81796:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   81798:	4b2d      	ldr	r3, [pc, #180]	; (81850 <usart_init_spi_master+0x108>)
   8179a:	681b      	ldr	r3, [r3, #0]
   8179c:	4313      	orrs	r3, r2
   8179e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   817a2:	f043 030e 	orr.w	r3, r3, #14
   817a6:	4a2a      	ldr	r2, [pc, #168]	; (81850 <usart_init_spi_master+0x108>)
   817a8:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   817aa:	68bb      	ldr	r3, [r7, #8]
   817ac:	689b      	ldr	r3, [r3, #8]
   817ae:	2b03      	cmp	r3, #3
   817b0:	d83e      	bhi.n	81830 <usart_init_spi_master+0xe8>
   817b2:	a201      	add	r2, pc, #4	; (adr r2, 817b8 <usart_init_spi_master+0x70>)
   817b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   817b8:	000817c9 	.word	0x000817c9
   817bc:	000817e3 	.word	0x000817e3
   817c0:	000817fd 	.word	0x000817fd
   817c4:	00081817 	.word	0x00081817
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   817c8:	4b21      	ldr	r3, [pc, #132]	; (81850 <usart_init_spi_master+0x108>)
   817ca:	681b      	ldr	r3, [r3, #0]
   817cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   817d0:	4a1f      	ldr	r2, [pc, #124]	; (81850 <usart_init_spi_master+0x108>)
   817d2:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   817d4:	4b1e      	ldr	r3, [pc, #120]	; (81850 <usart_init_spi_master+0x108>)
   817d6:	681b      	ldr	r3, [r3, #0]
   817d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   817dc:	4a1c      	ldr	r2, [pc, #112]	; (81850 <usart_init_spi_master+0x108>)
   817de:	6013      	str	r3, [r2, #0]
		break;
   817e0:	e027      	b.n	81832 <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   817e2:	4b1b      	ldr	r3, [pc, #108]	; (81850 <usart_init_spi_master+0x108>)
   817e4:	681b      	ldr	r3, [r3, #0]
   817e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   817ea:	4a19      	ldr	r2, [pc, #100]	; (81850 <usart_init_spi_master+0x108>)
   817ec:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   817ee:	4b18      	ldr	r3, [pc, #96]	; (81850 <usart_init_spi_master+0x108>)
   817f0:	681b      	ldr	r3, [r3, #0]
   817f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   817f6:	4a16      	ldr	r2, [pc, #88]	; (81850 <usart_init_spi_master+0x108>)
   817f8:	6013      	str	r3, [r2, #0]
		break;
   817fa:	e01a      	b.n	81832 <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   817fc:	4b14      	ldr	r3, [pc, #80]	; (81850 <usart_init_spi_master+0x108>)
   817fe:	681b      	ldr	r3, [r3, #0]
   81800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   81804:	4a12      	ldr	r2, [pc, #72]	; (81850 <usart_init_spi_master+0x108>)
   81806:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   81808:	4b11      	ldr	r3, [pc, #68]	; (81850 <usart_init_spi_master+0x108>)
   8180a:	681b      	ldr	r3, [r3, #0]
   8180c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81810:	4a0f      	ldr	r2, [pc, #60]	; (81850 <usart_init_spi_master+0x108>)
   81812:	6013      	str	r3, [r2, #0]
		break;
   81814:	e00d      	b.n	81832 <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   81816:	4b0e      	ldr	r3, [pc, #56]	; (81850 <usart_init_spi_master+0x108>)
   81818:	681b      	ldr	r3, [r3, #0]
   8181a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   8181e:	4a0c      	ldr	r2, [pc, #48]	; (81850 <usart_init_spi_master+0x108>)
   81820:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   81822:	4b0b      	ldr	r3, [pc, #44]	; (81850 <usart_init_spi_master+0x108>)
   81824:	681b      	ldr	r3, [r3, #0]
   81826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8182a:	4a09      	ldr	r2, [pc, #36]	; (81850 <usart_init_spi_master+0x108>)
   8182c:	6013      	str	r3, [r2, #0]
		break;
   8182e:	e000      	b.n	81832 <usart_init_spi_master+0xea>

	default:
		break;
   81830:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   81832:	68fb      	ldr	r3, [r7, #12]
   81834:	685a      	ldr	r2, [r3, #4]
   81836:	4b06      	ldr	r3, [pc, #24]	; (81850 <usart_init_spi_master+0x108>)
   81838:	681b      	ldr	r3, [r3, #0]
   8183a:	431a      	orrs	r2, r3
   8183c:	68fb      	ldr	r3, [r7, #12]
   8183e:	605a      	str	r2, [r3, #4]

	return 0;
   81840:	2300      	movs	r3, #0
}
   81842:	4618      	mov	r0, r3
   81844:	3710      	adds	r7, #16
   81846:	46bd      	mov	sp, r7
   81848:	bd80      	pop	{r7, pc}
   8184a:	bf00      	nop
   8184c:	000816e9 	.word	0x000816e9
   81850:	20001208 	.word	0x20001208
   81854:	000816a9 	.word	0x000816a9

00081858 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   81858:	b480      	push	{r7}
   8185a:	b083      	sub	sp, #12
   8185c:	af00      	add	r7, sp, #0
   8185e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   81860:	687b      	ldr	r3, [r7, #4]
   81862:	2240      	movs	r2, #64	; 0x40
   81864:	601a      	str	r2, [r3, #0]
}
   81866:	bf00      	nop
   81868:	370c      	adds	r7, #12
   8186a:	46bd      	mov	sp, r7
   8186c:	bc80      	pop	{r7}
   8186e:	4770      	bx	lr

00081870 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   81870:	b480      	push	{r7}
   81872:	b083      	sub	sp, #12
   81874:	af00      	add	r7, sp, #0
   81876:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   81878:	687b      	ldr	r3, [r7, #4]
   8187a:	2288      	movs	r2, #136	; 0x88
   8187c:	601a      	str	r2, [r3, #0]
}
   8187e:	bf00      	nop
   81880:	370c      	adds	r7, #12
   81882:	46bd      	mov	sp, r7
   81884:	bc80      	pop	{r7}
   81886:	4770      	bx	lr

00081888 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   81888:	b480      	push	{r7}
   8188a:	b083      	sub	sp, #12
   8188c:	af00      	add	r7, sp, #0
   8188e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   81890:	687b      	ldr	r3, [r7, #4]
   81892:	2224      	movs	r2, #36	; 0x24
   81894:	601a      	str	r2, [r3, #0]
}
   81896:	bf00      	nop
   81898:	370c      	adds	r7, #12
   8189a:	46bd      	mov	sp, r7
   8189c:	bc80      	pop	{r7}
   8189e:	4770      	bx	lr

000818a0 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   818a0:	b480      	push	{r7}
   818a2:	b083      	sub	sp, #12
   818a4:	af00      	add	r7, sp, #0
   818a6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   818a8:	687b      	ldr	r3, [r7, #4]
   818aa:	f44f 7280 	mov.w	r2, #256	; 0x100
   818ae:	601a      	str	r2, [r3, #0]
}
   818b0:	bf00      	nop
   818b2:	370c      	adds	r7, #12
   818b4:	46bd      	mov	sp, r7
   818b6:	bc80      	pop	{r7}
   818b8:	4770      	bx	lr

000818ba <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
   818ba:	b480      	push	{r7}
   818bc:	b083      	sub	sp, #12
   818be:	af00      	add	r7, sp, #0
   818c0:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
   818c2:	687b      	ldr	r3, [r7, #4]
   818c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   818c8:	601a      	str	r2, [r3, #0]
}
   818ca:	bf00      	nop
   818cc:	370c      	adds	r7, #12
   818ce:	46bd      	mov	sp, r7
   818d0:	bc80      	pop	{r7}
   818d2:	4770      	bx	lr

000818d4 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   818d4:	b480      	push	{r7}
   818d6:	b083      	sub	sp, #12
   818d8:	af00      	add	r7, sp, #0
   818da:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   818dc:	687b      	ldr	r3, [r7, #4]
   818de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   818e2:	601a      	str	r2, [r3, #0]
}
   818e4:	bf00      	nop
   818e6:	370c      	adds	r7, #12
   818e8:	46bd      	mov	sp, r7
   818ea:	bc80      	pop	{r7}
   818ec:	4770      	bx	lr

000818ee <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
   818ee:	b480      	push	{r7}
   818f0:	b083      	sub	sp, #12
   818f2:	af00      	add	r7, sp, #0
   818f4:	6078      	str	r0, [r7, #4]
   818f6:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   818f8:	bf00      	nop
   818fa:	687b      	ldr	r3, [r7, #4]
   818fc:	695b      	ldr	r3, [r3, #20]
   818fe:	f003 0302 	and.w	r3, r3, #2
   81902:	2b00      	cmp	r3, #0
   81904:	d0f9      	beq.n	818fa <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   81906:	683b      	ldr	r3, [r7, #0]
   81908:	f3c3 0208 	ubfx	r2, r3, #0, #9
   8190c:	687b      	ldr	r3, [r7, #4]
   8190e:	61da      	str	r2, [r3, #28]

	return 0;
   81910:	2300      	movs	r3, #0
}
   81912:	4618      	mov	r0, r3
   81914:	370c      	adds	r7, #12
   81916:	46bd      	mov	sp, r7
   81918:	bc80      	pop	{r7}
   8191a:	4770      	bx	lr

0008191c <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   8191c:	b480      	push	{r7}
   8191e:	b083      	sub	sp, #12
   81920:	af00      	add	r7, sp, #0
   81922:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   81924:	687b      	ldr	r3, [r7, #4]
   81926:	4a04      	ldr	r2, [pc, #16]	; (81938 <usart_disable_writeprotect+0x1c>)
   81928:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   8192c:	bf00      	nop
   8192e:	370c      	adds	r7, #12
   81930:	46bd      	mov	sp, r7
   81932:	bc80      	pop	{r7}
   81934:	4770      	bx	lr
   81936:	bf00      	nop
   81938:	55534100 	.word	0x55534100

0008193c <smc_set_setup_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
   8193c:	b480      	push	{r7}
   8193e:	b085      	sub	sp, #20
   81940:	af00      	add	r7, sp, #0
   81942:	60f8      	str	r0, [r7, #12]
   81944:	60b9      	str	r1, [r7, #8]
   81946:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   81948:	68f9      	ldr	r1, [r7, #12]
   8194a:	68ba      	ldr	r2, [r7, #8]
   8194c:	4613      	mov	r3, r2
   8194e:	009b      	lsls	r3, r3, #2
   81950:	4413      	add	r3, r2
   81952:	009b      	lsls	r3, r3, #2
   81954:	440b      	add	r3, r1
   81956:	3370      	adds	r3, #112	; 0x70
   81958:	687a      	ldr	r2, [r7, #4]
   8195a:	601a      	str	r2, [r3, #0]
}
   8195c:	bf00      	nop
   8195e:	3714      	adds	r7, #20
   81960:	46bd      	mov	sp, r7
   81962:	bc80      	pop	{r7}
   81964:	4770      	bx	lr

00081966 <smc_set_pulse_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
   81966:	b480      	push	{r7}
   81968:	b085      	sub	sp, #20
   8196a:	af00      	add	r7, sp, #0
   8196c:	60f8      	str	r0, [r7, #12]
   8196e:	60b9      	str	r1, [r7, #8]
   81970:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   81972:	68f9      	ldr	r1, [r7, #12]
   81974:	68ba      	ldr	r2, [r7, #8]
   81976:	4613      	mov	r3, r2
   81978:	009b      	lsls	r3, r3, #2
   8197a:	4413      	add	r3, r2
   8197c:	009b      	lsls	r3, r3, #2
   8197e:	440b      	add	r3, r1
   81980:	3374      	adds	r3, #116	; 0x74
   81982:	687a      	ldr	r2, [r7, #4]
   81984:	601a      	str	r2, [r3, #0]
}
   81986:	bf00      	nop
   81988:	3714      	adds	r7, #20
   8198a:	46bd      	mov	sp, r7
   8198c:	bc80      	pop	{r7}
   8198e:	4770      	bx	lr

00081990 <smc_set_cycle_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
   81990:	b480      	push	{r7}
   81992:	b085      	sub	sp, #20
   81994:	af00      	add	r7, sp, #0
   81996:	60f8      	str	r0, [r7, #12]
   81998:	60b9      	str	r1, [r7, #8]
   8199a:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   8199c:	68f9      	ldr	r1, [r7, #12]
   8199e:	68ba      	ldr	r2, [r7, #8]
   819a0:	4613      	mov	r3, r2
   819a2:	009b      	lsls	r3, r3, #2
   819a4:	4413      	add	r3, r2
   819a6:	009b      	lsls	r3, r3, #2
   819a8:	440b      	add	r3, r1
   819aa:	3378      	adds	r3, #120	; 0x78
   819ac:	687a      	ldr	r2, [r7, #4]
   819ae:	601a      	str	r2, [r3, #0]
}
   819b0:	bf00      	nop
   819b2:	3714      	adds	r7, #20
   819b4:	46bd      	mov	sp, r7
   819b6:	bc80      	pop	{r7}
   819b8:	4770      	bx	lr

000819ba <smc_set_mode>:
 * \param p_smc Pointer to an SMC instance.
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
   819ba:	b480      	push	{r7}
   819bc:	b085      	sub	sp, #20
   819be:	af00      	add	r7, sp, #0
   819c0:	60f8      	str	r0, [r7, #12]
   819c2:	60b9      	str	r1, [r7, #8]
   819c4:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   819c6:	68f9      	ldr	r1, [r7, #12]
   819c8:	68ba      	ldr	r2, [r7, #8]
   819ca:	4613      	mov	r3, r2
   819cc:	009b      	lsls	r3, r3, #2
   819ce:	4413      	add	r3, r2
   819d0:	009b      	lsls	r3, r3, #2
   819d2:	440b      	add	r3, r1
   819d4:	3380      	adds	r3, #128	; 0x80
   819d6:	687a      	ldr	r2, [r7, #4]
   819d8:	601a      	str	r2, [r3, #0]
}
   819da:	bf00      	nop
   819dc:	3714      	adds	r7, #20
   819de:	46bd      	mov	sp, r7
   819e0:	bc80      	pop	{r7}
   819e2:	4770      	bx	lr

000819e4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   819e4:	b580      	push	{r7, lr}
   819e6:	b084      	sub	sp, #16
   819e8:	af00      	add	r7, sp, #0
   819ea:	6078      	str	r0, [r7, #4]
   819ec:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   819ee:	6878      	ldr	r0, [r7, #4]
   819f0:	4b26      	ldr	r3, [pc, #152]	; (81a8c <pio_handler_process+0xa8>)
   819f2:	4798      	blx	r3
   819f4:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   819f6:	6878      	ldr	r0, [r7, #4]
   819f8:	4b25      	ldr	r3, [pc, #148]	; (81a90 <pio_handler_process+0xac>)
   819fa:	4798      	blx	r3
   819fc:	4602      	mov	r2, r0
   819fe:	68fb      	ldr	r3, [r7, #12]
   81a00:	4013      	ands	r3, r2
   81a02:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   81a04:	68fb      	ldr	r3, [r7, #12]
   81a06:	2b00      	cmp	r3, #0
   81a08:	d03c      	beq.n	81a84 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
   81a0a:	2300      	movs	r3, #0
   81a0c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   81a0e:	e034      	b.n	81a7a <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   81a10:	4a20      	ldr	r2, [pc, #128]	; (81a94 <pio_handler_process+0xb0>)
   81a12:	68bb      	ldr	r3, [r7, #8]
   81a14:	011b      	lsls	r3, r3, #4
   81a16:	4413      	add	r3, r2
   81a18:	681b      	ldr	r3, [r3, #0]
   81a1a:	683a      	ldr	r2, [r7, #0]
   81a1c:	429a      	cmp	r2, r3
   81a1e:	d126      	bne.n	81a6e <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81a20:	4a1c      	ldr	r2, [pc, #112]	; (81a94 <pio_handler_process+0xb0>)
   81a22:	68bb      	ldr	r3, [r7, #8]
   81a24:	011b      	lsls	r3, r3, #4
   81a26:	4413      	add	r3, r2
   81a28:	3304      	adds	r3, #4
   81a2a:	681a      	ldr	r2, [r3, #0]
   81a2c:	68fb      	ldr	r3, [r7, #12]
   81a2e:	4013      	ands	r3, r2
   81a30:	2b00      	cmp	r3, #0
   81a32:	d01c      	beq.n	81a6e <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81a34:	4a17      	ldr	r2, [pc, #92]	; (81a94 <pio_handler_process+0xb0>)
   81a36:	68bb      	ldr	r3, [r7, #8]
   81a38:	011b      	lsls	r3, r3, #4
   81a3a:	4413      	add	r3, r2
   81a3c:	330c      	adds	r3, #12
   81a3e:	681b      	ldr	r3, [r3, #0]
   81a40:	4914      	ldr	r1, [pc, #80]	; (81a94 <pio_handler_process+0xb0>)
   81a42:	68ba      	ldr	r2, [r7, #8]
   81a44:	0112      	lsls	r2, r2, #4
   81a46:	440a      	add	r2, r1
   81a48:	6810      	ldr	r0, [r2, #0]
   81a4a:	4912      	ldr	r1, [pc, #72]	; (81a94 <pio_handler_process+0xb0>)
   81a4c:	68ba      	ldr	r2, [r7, #8]
   81a4e:	0112      	lsls	r2, r2, #4
   81a50:	440a      	add	r2, r1
   81a52:	3204      	adds	r2, #4
   81a54:	6812      	ldr	r2, [r2, #0]
   81a56:	4611      	mov	r1, r2
   81a58:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   81a5a:	4a0e      	ldr	r2, [pc, #56]	; (81a94 <pio_handler_process+0xb0>)
   81a5c:	68bb      	ldr	r3, [r7, #8]
   81a5e:	011b      	lsls	r3, r3, #4
   81a60:	4413      	add	r3, r2
   81a62:	3304      	adds	r3, #4
   81a64:	681b      	ldr	r3, [r3, #0]
   81a66:	43db      	mvns	r3, r3
   81a68:	68fa      	ldr	r2, [r7, #12]
   81a6a:	4013      	ands	r3, r2
   81a6c:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   81a6e:	68bb      	ldr	r3, [r7, #8]
   81a70:	3301      	adds	r3, #1
   81a72:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
   81a74:	68bb      	ldr	r3, [r7, #8]
   81a76:	2b06      	cmp	r3, #6
   81a78:	d803      	bhi.n	81a82 <pio_handler_process+0x9e>
		while (status != 0) {
   81a7a:	68fb      	ldr	r3, [r7, #12]
   81a7c:	2b00      	cmp	r3, #0
   81a7e:	d1c7      	bne.n	81a10 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   81a80:	e000      	b.n	81a84 <pio_handler_process+0xa0>
				break;
   81a82:	bf00      	nop
}
   81a84:	bf00      	nop
   81a86:	3710      	adds	r7, #16
   81a88:	46bd      	mov	sp, r7
   81a8a:	bd80      	pop	{r7, pc}
   81a8c:	00084401 	.word	0x00084401
   81a90:	00084417 	.word	0x00084417
   81a94:	2000120c 	.word	0x2000120c

00081a98 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81a98:	b580      	push	{r7, lr}
   81a9a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   81a9c:	210a      	movs	r1, #10
   81a9e:	4802      	ldr	r0, [pc, #8]	; (81aa8 <PIOA_Handler+0x10>)
   81aa0:	4b02      	ldr	r3, [pc, #8]	; (81aac <PIOA_Handler+0x14>)
   81aa2:	4798      	blx	r3
}
   81aa4:	bf00      	nop
   81aa6:	bd80      	pop	{r7, pc}
   81aa8:	400e0c00 	.word	0x400e0c00
   81aac:	000819e5 	.word	0x000819e5

00081ab0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81ab0:	b580      	push	{r7, lr}
   81ab2:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   81ab4:	210b      	movs	r1, #11
   81ab6:	4802      	ldr	r0, [pc, #8]	; (81ac0 <PIOB_Handler+0x10>)
   81ab8:	4b02      	ldr	r3, [pc, #8]	; (81ac4 <PIOB_Handler+0x14>)
   81aba:	4798      	blx	r3
}
   81abc:	bf00      	nop
   81abe:	bd80      	pop	{r7, pc}
   81ac0:	400e0e00 	.word	0x400e0e00
   81ac4:	000819e5 	.word	0x000819e5

00081ac8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   81ac8:	b480      	push	{r7}
   81aca:	b083      	sub	sp, #12
   81acc:	af00      	add	r7, sp, #0
   81ace:	4603      	mov	r3, r0
   81ad0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81ad2:	79fb      	ldrb	r3, [r7, #7]
   81ad4:	f003 031f 	and.w	r3, r3, #31
   81ad8:	2201      	movs	r2, #1
   81ada:	fa02 f103 	lsl.w	r1, r2, r3
   81ade:	4a05      	ldr	r2, [pc, #20]	; (81af4 <NVIC_EnableIRQ+0x2c>)
   81ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81ae4:	095b      	lsrs	r3, r3, #5
   81ae6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   81aea:	bf00      	nop
   81aec:	370c      	adds	r7, #12
   81aee:	46bd      	mov	sp, r7
   81af0:	bc80      	pop	{r7}
   81af2:	4770      	bx	lr
   81af4:	e000e100 	.word	0xe000e100

00081af8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   81af8:	b480      	push	{r7}
   81afa:	b083      	sub	sp, #12
   81afc:	af00      	add	r7, sp, #0
   81afe:	4603      	mov	r3, r0
   81b00:	6039      	str	r1, [r7, #0]
   81b02:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   81b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81b08:	2b00      	cmp	r3, #0
   81b0a:	da0b      	bge.n	81b24 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81b0c:	683b      	ldr	r3, [r7, #0]
   81b0e:	b2da      	uxtb	r2, r3
   81b10:	490c      	ldr	r1, [pc, #48]	; (81b44 <NVIC_SetPriority+0x4c>)
   81b12:	79fb      	ldrb	r3, [r7, #7]
   81b14:	f003 030f 	and.w	r3, r3, #15
   81b18:	3b04      	subs	r3, #4
   81b1a:	0112      	lsls	r2, r2, #4
   81b1c:	b2d2      	uxtb	r2, r2
   81b1e:	440b      	add	r3, r1
   81b20:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   81b22:	e009      	b.n	81b38 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81b24:	683b      	ldr	r3, [r7, #0]
   81b26:	b2da      	uxtb	r2, r3
   81b28:	4907      	ldr	r1, [pc, #28]	; (81b48 <NVIC_SetPriority+0x50>)
   81b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81b2e:	0112      	lsls	r2, r2, #4
   81b30:	b2d2      	uxtb	r2, r2
   81b32:	440b      	add	r3, r1
   81b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   81b38:	bf00      	nop
   81b3a:	370c      	adds	r7, #12
   81b3c:	46bd      	mov	sp, r7
   81b3e:	bc80      	pop	{r7}
   81b40:	4770      	bx	lr
   81b42:	bf00      	nop
   81b44:	e000ed00 	.word	0xe000ed00
   81b48:	e000e100 	.word	0xe000e100

00081b4c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   81b4c:	b480      	push	{r7}
   81b4e:	b083      	sub	sp, #12
   81b50:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81b52:	f3ef 8310 	mrs	r3, PRIMASK
   81b56:	603b      	str	r3, [r7, #0]
  return(result);
   81b58:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   81b5a:	2b00      	cmp	r3, #0
   81b5c:	bf0c      	ite	eq
   81b5e:	2301      	moveq	r3, #1
   81b60:	2300      	movne	r3, #0
   81b62:	b2db      	uxtb	r3, r3
   81b64:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   81b66:	b672      	cpsid	i
   81b68:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81b6c:	4b04      	ldr	r3, [pc, #16]	; (81b80 <cpu_irq_save+0x34>)
   81b6e:	2200      	movs	r2, #0
   81b70:	701a      	strb	r2, [r3, #0]
	return flags;
   81b72:	687b      	ldr	r3, [r7, #4]
}
   81b74:	4618      	mov	r0, r3
   81b76:	370c      	adds	r7, #12
   81b78:	46bd      	mov	sp, r7
   81b7a:	bc80      	pop	{r7}
   81b7c:	4770      	bx	lr
   81b7e:	bf00      	nop
   81b80:	2000031a 	.word	0x2000031a

00081b84 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   81b84:	b480      	push	{r7}
   81b86:	b083      	sub	sp, #12
   81b88:	af00      	add	r7, sp, #0
   81b8a:	6078      	str	r0, [r7, #4]
	return (flags);
   81b8c:	687b      	ldr	r3, [r7, #4]
   81b8e:	2b00      	cmp	r3, #0
   81b90:	bf14      	ite	ne
   81b92:	2301      	movne	r3, #1
   81b94:	2300      	moveq	r3, #0
   81b96:	b2db      	uxtb	r3, r3
}
   81b98:	4618      	mov	r0, r3
   81b9a:	370c      	adds	r7, #12
   81b9c:	46bd      	mov	sp, r7
   81b9e:	bc80      	pop	{r7}
   81ba0:	4770      	bx	lr
   81ba2:	0000      	movs	r0, r0

00081ba4 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   81ba4:	b580      	push	{r7, lr}
   81ba6:	b082      	sub	sp, #8
   81ba8:	af00      	add	r7, sp, #0
   81baa:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   81bac:	6878      	ldr	r0, [r7, #4]
   81bae:	4b07      	ldr	r3, [pc, #28]	; (81bcc <cpu_irq_restore+0x28>)
   81bb0:	4798      	blx	r3
   81bb2:	4603      	mov	r3, r0
   81bb4:	2b00      	cmp	r3, #0
   81bb6:	d005      	beq.n	81bc4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
   81bb8:	4b05      	ldr	r3, [pc, #20]	; (81bd0 <cpu_irq_restore+0x2c>)
   81bba:	2201      	movs	r2, #1
   81bbc:	701a      	strb	r2, [r3, #0]
   81bbe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81bc2:	b662      	cpsie	i
}
   81bc4:	bf00      	nop
   81bc6:	3708      	adds	r7, #8
   81bc8:	46bd      	mov	sp, r7
   81bca:	bd80      	pop	{r7, pc}
   81bcc:	00081b85 	.word	0x00081b85
   81bd0:	2000031a 	.word	0x2000031a

00081bd4 <sleepmgr_lock_mode>:
{
   81bd4:	b580      	push	{r7, lr}
   81bd6:	b084      	sub	sp, #16
   81bd8:	af00      	add	r7, sp, #0
   81bda:	4603      	mov	r3, r0
   81bdc:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   81bde:	4b08      	ldr	r3, [pc, #32]	; (81c00 <sleepmgr_lock_mode+0x2c>)
   81be0:	4798      	blx	r3
   81be2:	60f8      	str	r0, [r7, #12]
	++sleepmgr_locks[mode];
   81be4:	79fb      	ldrb	r3, [r7, #7]
   81be6:	4a07      	ldr	r2, [pc, #28]	; (81c04 <sleepmgr_lock_mode+0x30>)
   81be8:	5cd2      	ldrb	r2, [r2, r3]
   81bea:	3201      	adds	r2, #1
   81bec:	b2d1      	uxtb	r1, r2
   81bee:	4a05      	ldr	r2, [pc, #20]	; (81c04 <sleepmgr_lock_mode+0x30>)
   81bf0:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   81bf2:	68f8      	ldr	r0, [r7, #12]
   81bf4:	4b04      	ldr	r3, [pc, #16]	; (81c08 <sleepmgr_lock_mode+0x34>)
   81bf6:	4798      	blx	r3
}
   81bf8:	bf00      	nop
   81bfa:	3710      	adds	r7, #16
   81bfc:	46bd      	mov	sp, r7
   81bfe:	bd80      	pop	{r7, pc}
   81c00:	00081b4d 	.word	0x00081b4d
   81c04:	20001324 	.word	0x20001324
   81c08:	00081ba5 	.word	0x00081ba5

00081c0c <sleepmgr_unlock_mode>:
{
   81c0c:	b580      	push	{r7, lr}
   81c0e:	b084      	sub	sp, #16
   81c10:	af00      	add	r7, sp, #0
   81c12:	4603      	mov	r3, r0
   81c14:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   81c16:	4b08      	ldr	r3, [pc, #32]	; (81c38 <sleepmgr_unlock_mode+0x2c>)
   81c18:	4798      	blx	r3
   81c1a:	60f8      	str	r0, [r7, #12]
	--sleepmgr_locks[mode];
   81c1c:	79fb      	ldrb	r3, [r7, #7]
   81c1e:	4a07      	ldr	r2, [pc, #28]	; (81c3c <sleepmgr_unlock_mode+0x30>)
   81c20:	5cd2      	ldrb	r2, [r2, r3]
   81c22:	3a01      	subs	r2, #1
   81c24:	b2d1      	uxtb	r1, r2
   81c26:	4a05      	ldr	r2, [pc, #20]	; (81c3c <sleepmgr_unlock_mode+0x30>)
   81c28:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   81c2a:	68f8      	ldr	r0, [r7, #12]
   81c2c:	4b04      	ldr	r3, [pc, #16]	; (81c40 <sleepmgr_unlock_mode+0x34>)
   81c2e:	4798      	blx	r3
}
   81c30:	bf00      	nop
   81c32:	3710      	adds	r7, #16
   81c34:	46bd      	mov	sp, r7
   81c36:	bd80      	pop	{r7, pc}
   81c38:	00081b4d 	.word	0x00081b4d
   81c3c:	20001324 	.word	0x20001324
   81c40:	00081ba5 	.word	0x00081ba5

00081c44 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
   81c44:	b580      	push	{r7, lr}
   81c46:	b082      	sub	sp, #8
   81c48:	af00      	add	r7, sp, #0
   81c4a:	4603      	mov	r3, r0
   81c4c:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
   81c4e:	79fb      	ldrb	r3, [r7, #7]
   81c50:	f083 0301 	eor.w	r3, r3, #1
   81c54:	b2db      	uxtb	r3, r3
   81c56:	2b00      	cmp	r3, #0
   81c58:	d006      	beq.n	81c68 <udd_sleep_mode+0x24>
   81c5a:	4b0d      	ldr	r3, [pc, #52]	; (81c90 <udd_sleep_mode+0x4c>)
   81c5c:	781b      	ldrb	r3, [r3, #0]
   81c5e:	2b00      	cmp	r3, #0
   81c60:	d002      	beq.n	81c68 <udd_sleep_mode+0x24>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   81c62:	2002      	movs	r0, #2
   81c64:	4b0b      	ldr	r3, [pc, #44]	; (81c94 <udd_sleep_mode+0x50>)
   81c66:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
   81c68:	79fb      	ldrb	r3, [r7, #7]
   81c6a:	2b00      	cmp	r3, #0
   81c6c:	d009      	beq.n	81c82 <udd_sleep_mode+0x3e>
   81c6e:	4b08      	ldr	r3, [pc, #32]	; (81c90 <udd_sleep_mode+0x4c>)
   81c70:	781b      	ldrb	r3, [r3, #0]
   81c72:	f083 0301 	eor.w	r3, r3, #1
   81c76:	b2db      	uxtb	r3, r3
   81c78:	2b00      	cmp	r3, #0
   81c7a:	d002      	beq.n	81c82 <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   81c7c:	2002      	movs	r0, #2
   81c7e:	4b06      	ldr	r3, [pc, #24]	; (81c98 <udd_sleep_mode+0x54>)
   81c80:	4798      	blx	r3
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   81c82:	4a03      	ldr	r2, [pc, #12]	; (81c90 <udd_sleep_mode+0x4c>)
   81c84:	79fb      	ldrb	r3, [r7, #7]
   81c86:	7013      	strb	r3, [r2, #0]
}
   81c88:	bf00      	nop
   81c8a:	3708      	adds	r7, #8
   81c8c:	46bd      	mov	sp, r7
   81c8e:	bd80      	pop	{r7, pc}
   81c90:	2000127c 	.word	0x2000127c
   81c94:	00081c0d 	.word	0x00081c0d
   81c98:	00081bd5 	.word	0x00081bd5

00081c9c <UDPHS_Handler>:
 * Here, the global interrupt mask is not clear when an USB interrupt is enabled
 * because this one can not be occurred during the USB ISR (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests in peripheral modules.
 */
ISR(UDD_USB_INT_FUN)
{
   81c9c:	b580      	push	{r7, lr}
   81c9e:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   81ca0:	201d      	movs	r0, #29
   81ca2:	4b5f      	ldr	r3, [pc, #380]	; (81e20 <UDPHS_Handler+0x184>)
   81ca4:	4798      	blx	r3
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   81ca6:	4b5f      	ldr	r3, [pc, #380]	; (81e24 <UDPHS_Handler+0x188>)
   81ca8:	4798      	blx	r3
   81caa:	4603      	mov	r3, r0
   81cac:	f083 0301 	eor.w	r3, r3, #1
   81cb0:	b2db      	uxtb	r3, r3
   81cb2:	2b00      	cmp	r3, #0
   81cb4:	d00c      	beq.n	81cd0 <UDPHS_Handler+0x34>
   81cb6:	4b5c      	ldr	r3, [pc, #368]	; (81e28 <UDPHS_Handler+0x18c>)
   81cb8:	695b      	ldr	r3, [r3, #20]
   81cba:	f003 0302 	and.w	r3, r3, #2
   81cbe:	2b00      	cmp	r3, #0
   81cc0:	d106      	bne.n	81cd0 <UDPHS_Handler+0x34>
  __ASM volatile ("cpsid i");
   81cc2:	b672      	cpsid	i
   81cc4:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   81cc8:	4b58      	ldr	r3, [pc, #352]	; (81e2c <UDPHS_Handler+0x190>)
   81cca:	2200      	movs	r2, #0
   81ccc:	701a      	strb	r2, [r3, #0]
		return;
   81cce:	e0a5      	b.n	81e1c <UDPHS_Handler+0x180>
	}

	if (Is_udd_sof()) {
   81cd0:	4b55      	ldr	r3, [pc, #340]	; (81e28 <UDPHS_Handler+0x18c>)
   81cd2:	695b      	ldr	r3, [r3, #20]
   81cd4:	f003 0308 	and.w	r3, r3, #8
   81cd8:	2b00      	cmp	r3, #0
   81cda:	d00d      	beq.n	81cf8 <UDPHS_Handler+0x5c>
		udd_ack_sof();
   81cdc:	4b52      	ldr	r3, [pc, #328]	; (81e28 <UDPHS_Handler+0x18c>)
   81cde:	2208      	movs	r2, #8
   81ce0:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   81ce2:	4b51      	ldr	r3, [pc, #324]	; (81e28 <UDPHS_Handler+0x18c>)
   81ce4:	695b      	ldr	r3, [r3, #20]
   81ce6:	f003 0301 	and.w	r3, r3, #1
   81cea:	2b00      	cmp	r3, #0
   81cec:	d101      	bne.n	81cf2 <UDPHS_Handler+0x56>
			udc_sof_notify();
   81cee:	4b50      	ldr	r3, [pc, #320]	; (81e30 <UDPHS_Handler+0x194>)
   81cf0:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   81cf2:	4b50      	ldr	r3, [pc, #320]	; (81e34 <UDPHS_Handler+0x198>)
   81cf4:	4798      	blx	r3
#endif
		goto udd_interrupt_sof_end;
   81cf6:	e090      	b.n	81e1a <UDPHS_Handler+0x17e>
	}

	if (Is_udd_msof()) {
   81cf8:	4b4b      	ldr	r3, [pc, #300]	; (81e28 <UDPHS_Handler+0x18c>)
   81cfa:	695b      	ldr	r3, [r3, #20]
   81cfc:	f003 0304 	and.w	r3, r3, #4
   81d00:	2b00      	cmp	r3, #0
   81d02:	d005      	beq.n	81d10 <UDPHS_Handler+0x74>
		udd_ack_msof();
   81d04:	4b48      	ldr	r3, [pc, #288]	; (81e28 <UDPHS_Handler+0x18c>)
   81d06:	2204      	movs	r2, #4
   81d08:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   81d0a:	4b49      	ldr	r3, [pc, #292]	; (81e30 <UDPHS_Handler+0x194>)
   81d0c:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   81d0e:	e084      	b.n	81e1a <UDPHS_Handler+0x17e>
	}
	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');

	if (udd_ctrl_interrupt()) {
   81d10:	4b49      	ldr	r3, [pc, #292]	; (81e38 <UDPHS_Handler+0x19c>)
   81d12:	4798      	blx	r3
   81d14:	4603      	mov	r3, r0
   81d16:	2b00      	cmp	r3, #0
   81d18:	d17a      	bne.n	81e10 <UDPHS_Handler+0x174>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
   81d1a:	4b48      	ldr	r3, [pc, #288]	; (81e3c <UDPHS_Handler+0x1a0>)
   81d1c:	4798      	blx	r3
   81d1e:	4603      	mov	r3, r0
   81d20:	2b00      	cmp	r3, #0
   81d22:	d177      	bne.n	81e14 <UDPHS_Handler+0x178>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   81d24:	4b40      	ldr	r3, [pc, #256]	; (81e28 <UDPHS_Handler+0x18c>)
   81d26:	695b      	ldr	r3, [r3, #20]
   81d28:	f003 0310 	and.w	r3, r3, #16
   81d2c:	2b00      	cmp	r3, #0
   81d2e:	d01d      	beq.n	81d6c <UDPHS_Handler+0xd0>
		dbg_print("EoR ");
		udd_ack_reset();
   81d30:	4b3d      	ldr	r3, [pc, #244]	; (81e28 <UDPHS_Handler+0x18c>)
   81d32:	2210      	movs	r2, #16
   81d34:	619a      	str	r2, [r3, #24]
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
   81d36:	4b42      	ldr	r3, [pc, #264]	; (81e40 <UDPHS_Handler+0x1a4>)
   81d38:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
   81d3a:	4b42      	ldr	r3, [pc, #264]	; (81e44 <UDPHS_Handler+0x1a8>)
   81d3c:	4798      	blx	r3
		// Reset endpoint control
		udd_reset_ep_ctrl();
   81d3e:	4b42      	ldr	r3, [pc, #264]	; (81e48 <UDPHS_Handler+0x1ac>)
   81d40:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
   81d42:	4b42      	ldr	r3, [pc, #264]	; (81e4c <UDPHS_Handler+0x1b0>)
   81d44:	4798      	blx	r3
		// Enable SOF interrupts cleared by USB reset event
		udd_enable_sof_interrupt();
   81d46:	4b38      	ldr	r3, [pc, #224]	; (81e28 <UDPHS_Handler+0x18c>)
   81d48:	691b      	ldr	r3, [r3, #16]
   81d4a:	4a37      	ldr	r2, [pc, #220]	; (81e28 <UDPHS_Handler+0x18c>)
   81d4c:	f043 0308 	orr.w	r3, r3, #8
   81d50:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   81d52:	4b35      	ldr	r3, [pc, #212]	; (81e28 <UDPHS_Handler+0x18c>)
   81d54:	691b      	ldr	r3, [r3, #16]
   81d56:	4a34      	ldr	r2, [pc, #208]	; (81e28 <UDPHS_Handler+0x18c>)
   81d58:	f043 0304 	orr.w	r3, r3, #4
   81d5c:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   81d5e:	4b32      	ldr	r3, [pc, #200]	; (81e28 <UDPHS_Handler+0x18c>)
   81d60:	691b      	ldr	r3, [r3, #16]
   81d62:	4a31      	ldr	r2, [pc, #196]	; (81e28 <UDPHS_Handler+0x18c>)
   81d64:	f043 0302 	orr.w	r3, r3, #2
   81d68:	6113      	str	r3, [r2, #16]
		goto udd_interrupt_end;
   81d6a:	e056      	b.n	81e1a <UDPHS_Handler+0x17e>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   81d6c:	4b2e      	ldr	r3, [pc, #184]	; (81e28 <UDPHS_Handler+0x18c>)
   81d6e:	691b      	ldr	r3, [r3, #16]
   81d70:	f003 0302 	and.w	r3, r3, #2
   81d74:	2b00      	cmp	r3, #0
   81d76:	d020      	beq.n	81dba <UDPHS_Handler+0x11e>
   81d78:	4b2b      	ldr	r3, [pc, #172]	; (81e28 <UDPHS_Handler+0x18c>)
   81d7a:	695b      	ldr	r3, [r3, #20]
   81d7c:	f003 0302 	and.w	r3, r3, #2
   81d80:	2b00      	cmp	r3, #0
   81d82:	d01a      	beq.n	81dba <UDPHS_Handler+0x11e>
		dbg_print("Susp ");
		// Remove old wakeup status
		udd_ack_wake_up();
   81d84:	4b28      	ldr	r3, [pc, #160]	; (81e28 <UDPHS_Handler+0x18c>)
   81d86:	2220      	movs	r2, #32
   81d88:	619a      	str	r2, [r3, #24]
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   81d8a:	4b27      	ldr	r3, [pc, #156]	; (81e28 <UDPHS_Handler+0x18c>)
   81d8c:	691b      	ldr	r3, [r3, #16]
   81d8e:	4a26      	ldr	r2, [pc, #152]	; (81e28 <UDPHS_Handler+0x18c>)
   81d90:	f023 0302 	bic.w	r3, r3, #2
   81d94:	6113      	str	r3, [r2, #16]
		udd_enable_wake_up_interrupt();
   81d96:	4b24      	ldr	r3, [pc, #144]	; (81e28 <UDPHS_Handler+0x18c>)
   81d98:	691b      	ldr	r3, [r3, #16]
   81d9a:	4a23      	ldr	r2, [pc, #140]	; (81e28 <UDPHS_Handler+0x18c>)
   81d9c:	f043 0320 	orr.w	r3, r3, #32
   81da0:	6113      	str	r3, [r2, #16]

		// The wakeup interrupt is generated even if the device controller clock is disabled.
		udd_ack_suspend();
   81da2:	4b21      	ldr	r3, [pc, #132]	; (81e28 <UDPHS_Handler+0x18c>)
   81da4:	2202      	movs	r2, #2
   81da6:	619a      	str	r2, [r3, #24]

		udd_disable_periph_ck();
   81da8:	201d      	movs	r0, #29
   81daa:	4b29      	ldr	r3, [pc, #164]	; (81e50 <UDPHS_Handler+0x1b4>)
   81dac:	4798      	blx	r3

#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   81dae:	4b29      	ldr	r3, [pc, #164]	; (81e54 <UDPHS_Handler+0x1b8>)
   81db0:	4798      	blx	r3
#endif
		udd_sleep_mode(false); // Enter in SUSPEND mode
   81db2:	2000      	movs	r0, #0
   81db4:	4b28      	ldr	r3, [pc, #160]	; (81e58 <UDPHS_Handler+0x1bc>)
   81db6:	4798      	blx	r3
		goto udd_interrupt_end;
   81db8:	e02f      	b.n	81e1a <UDPHS_Handler+0x17e>
	}

	// On wakeup, _IEN is reseted only with EoR enabled
	if (Is_udd_wake_up()) {
   81dba:	4b1b      	ldr	r3, [pc, #108]	; (81e28 <UDPHS_Handler+0x18c>)
   81dbc:	695b      	ldr	r3, [r3, #20]
   81dbe:	f003 0320 	and.w	r3, r3, #32
   81dc2:	2b00      	cmp	r3, #0
   81dc4:	d028      	beq.n	81e18 <UDPHS_Handler+0x17c>
		udd_sleep_mode(true); // Enter in IDLE mode
   81dc6:	2001      	movs	r0, #1
   81dc8:	4b23      	ldr	r3, [pc, #140]	; (81e58 <UDPHS_Handler+0x1bc>)
   81dca:	4798      	blx	r3
		// Remove old suspend status
		udd_ack_suspend();
   81dcc:	4b16      	ldr	r3, [pc, #88]	; (81e28 <UDPHS_Handler+0x18c>)
   81dce:	2202      	movs	r2, #2
   81dd0:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wake_up();
   81dd2:	4b15      	ldr	r3, [pc, #84]	; (81e28 <UDPHS_Handler+0x18c>)
   81dd4:	2220      	movs	r2, #32
   81dd6:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_disable_wake_up_interrupt();
   81dd8:	4b13      	ldr	r3, [pc, #76]	; (81e28 <UDPHS_Handler+0x18c>)
   81dda:	691b      	ldr	r3, [r3, #16]
   81ddc:	4a12      	ldr	r2, [pc, #72]	; (81e28 <UDPHS_Handler+0x18c>)
   81dde:	f023 0320 	bic.w	r3, r3, #32
   81de2:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   81de4:	4b10      	ldr	r3, [pc, #64]	; (81e28 <UDPHS_Handler+0x18c>)
   81de6:	691b      	ldr	r3, [r3, #16]
   81de8:	4a0f      	ldr	r2, [pc, #60]	; (81e28 <UDPHS_Handler+0x18c>)
   81dea:	f043 0302 	orr.w	r3, r3, #2
   81dee:	6113      	str	r3, [r2, #16]
		udd_enable_sof_interrupt();
   81df0:	4b0d      	ldr	r3, [pc, #52]	; (81e28 <UDPHS_Handler+0x18c>)
   81df2:	691b      	ldr	r3, [r3, #16]
   81df4:	4a0c      	ldr	r2, [pc, #48]	; (81e28 <UDPHS_Handler+0x18c>)
   81df6:	f043 0308 	orr.w	r3, r3, #8
   81dfa:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   81dfc:	4b0a      	ldr	r3, [pc, #40]	; (81e28 <UDPHS_Handler+0x18c>)
   81dfe:	691b      	ldr	r3, [r3, #16]
   81e00:	4a09      	ldr	r2, [pc, #36]	; (81e28 <UDPHS_Handler+0x18c>)
   81e02:	f043 0304 	orr.w	r3, r3, #4
   81e06:	6113      	str	r3, [r2, #16]

#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   81e08:	4b14      	ldr	r3, [pc, #80]	; (81e5c <UDPHS_Handler+0x1c0>)
   81e0a:	4798      	blx	r3
#endif
		dbg_print("Wkup ");
		goto udd_interrupt_end;
   81e0c:	bf00      	nop
   81e0e:	e004      	b.n	81e1a <UDPHS_Handler+0x17e>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
   81e10:	bf00      	nop
   81e12:	e002      	b.n	81e1a <UDPHS_Handler+0x17e>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
   81e14:	bf00      	nop
   81e16:	e000      	b.n	81e1a <UDPHS_Handler+0x17e>
	}
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);

udd_interrupt_end:
   81e18:	bf00      	nop
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
	//dbg_print("m%08x", UDPHS->UDPHS_IEN);
	dbg_print("\n\r");
udd_interrupt_sof_end:
	return;
   81e1a:	bf00      	nop
}
   81e1c:	bd80      	pop	{r7, pc}
   81e1e:	bf00      	nop
   81e20:	00083ed5 	.word	0x00083ed5
   81e24:	0008589d 	.word	0x0008589d
   81e28:	400a4000 	.word	0x400a4000
   81e2c:	2000031a 	.word	0x2000031a
   81e30:	000849c1 	.word	0x000849c1
   81e34:	00080dd1 	.word	0x00080dd1
   81e38:	00083105 	.word	0x00083105
   81e3c:	0008351d 	.word	0x0008351d
   81e40:	00083245 	.word	0x00083245
   81e44:	0008496d 	.word	0x0008496d
   81e48:	00082a65 	.word	0x00082a65
   81e4c:	00082ae5 	.word	0x00082ae5
   81e50:	00083f21 	.word	0x00083f21
   81e54:	00080db9 	.word	0x00080db9
   81e58:	00081c45 	.word	0x00081c45
   81e5c:	00080dc5 	.word	0x00080dc5

00081e60 <udd_enable>:
#endif
}


void udd_enable(void)
{
   81e60:	b580      	push	{r7, lr}
   81e62:	b082      	sub	sp, #8
   81e64:	af00      	add	r7, sp, #0
	irqflags_t flags;
	sysclk_enable_usb();
   81e66:	4b19      	ldr	r3, [pc, #100]	; (81ecc <udd_enable+0x6c>)
   81e68:	4798      	blx	r3

	udd_enable_periph_ck();
   81e6a:	201d      	movs	r0, #29
   81e6c:	4b18      	ldr	r3, [pc, #96]	; (81ed0 <udd_enable+0x70>)
   81e6e:	4798      	blx	r3

	flags = cpu_irq_save();
   81e70:	4b18      	ldr	r3, [pc, #96]	; (81ed4 <udd_enable+0x74>)
   81e72:	4798      	blx	r3
   81e74:	6078      	str	r0, [r7, #4]

	//** Enable USB hardware
	udd_enable_periph();
   81e76:	4b18      	ldr	r3, [pc, #96]	; (81ed8 <udd_enable+0x78>)
   81e78:	681b      	ldr	r3, [r3, #0]
   81e7a:	4a17      	ldr	r2, [pc, #92]	; (81ed8 <udd_enable+0x78>)
   81e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   81e80:	6013      	str	r3, [r2, #0]

	// Cortex-M3, uses NVIC, no need to register IRQ handler
	// Here, only the Device mode is possible,
	// UDPHS interrupt is UDD interrupt
	NVIC_SetPriority((IRQn_Type) ID_UDPHS, UDD_USB_INT_LEVEL);
   81e82:	2105      	movs	r1, #5
   81e84:	201d      	movs	r0, #29
   81e86:	4b15      	ldr	r3, [pc, #84]	; (81edc <udd_enable+0x7c>)
   81e88:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDPHS);
   81e8a:	201d      	movs	r0, #29
   81e8c:	4b14      	ldr	r3, [pc, #80]	; (81ee0 <udd_enable+0x80>)
   81e8e:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
   81e90:	4b14      	ldr	r3, [pc, #80]	; (81ee4 <udd_enable+0x84>)
   81e92:	4798      	blx	r3
#endif

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   81e94:	4b10      	ldr	r3, [pc, #64]	; (81ed8 <udd_enable+0x78>)
   81e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   81e9a:	4a0f      	ldr	r2, [pc, #60]	; (81ed8 <udd_enable+0x78>)
   81e9c:	f023 0303 	bic.w	r3, r3, #3
   81ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
#else
	udd_high_speed_disable();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   81ea4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   81ea8:	4b0f      	ldr	r3, [pc, #60]	; (81ee8 <udd_enable+0x88>)
   81eaa:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
   81eac:	4b0f      	ldr	r3, [pc, #60]	; (81eec <udd_enable+0x8c>)
   81eae:	2200      	movs	r2, #0
   81eb0:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
   81eb2:	2003      	movs	r0, #3
   81eb4:	4b0e      	ldr	r3, [pc, #56]	; (81ef0 <udd_enable+0x90>)
   81eb6:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
   81eb8:	4b0e      	ldr	r3, [pc, #56]	; (81ef4 <udd_enable+0x94>)
   81eba:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
   81ebc:	6878      	ldr	r0, [r7, #4]
   81ebe:	4b0e      	ldr	r3, [pc, #56]	; (81ef8 <udd_enable+0x98>)
   81ec0:	4798      	blx	r3
}
   81ec2:	bf00      	nop
   81ec4:	3708      	adds	r7, #8
   81ec6:	46bd      	mov	sp, r7
   81ec8:	bd80      	pop	{r7, pc}
   81eca:	bf00      	nop
   81ecc:	00083abd 	.word	0x00083abd
   81ed0:	00083ed5 	.word	0x00083ed5
   81ed4:	00081b4d 	.word	0x00081b4d
   81ed8:	400a4000 	.word	0x400a4000
   81edc:	00081af9 	.word	0x00081af9
   81ee0:	00081ac9 	.word	0x00081ac9
   81ee4:	000831e9 	.word	0x000831e9
   81ee8:	00083f91 	.word	0x00083f91
   81eec:	2000127c 	.word	0x2000127c
   81ef0:	00081bd5 	.word	0x00081bd5
   81ef4:	00081efd 	.word	0x00081efd
   81ef8:	00081ba5 	.word	0x00081ba5

00081efc <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   81efc:	b580      	push	{r7, lr}
   81efe:	b082      	sub	sp, #8
   81f00:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
   81f02:	4b26      	ldr	r3, [pc, #152]	; (81f9c <udd_attach+0xa0>)
   81f04:	4798      	blx	r3
   81f06:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   81f08:	2001      	movs	r0, #1
   81f0a:	4b25      	ldr	r3, [pc, #148]	; (81fa0 <udd_attach+0xa4>)
   81f0c:	4798      	blx	r3
	udd_enable_periph_ck();
   81f0e:	201d      	movs	r0, #29
   81f10:	4b24      	ldr	r3, [pc, #144]	; (81fa4 <udd_attach+0xa8>)
   81f12:	4798      	blx	r3

	// Authorize attach if Vbus is present
	udd_attach_device();
   81f14:	4b24      	ldr	r3, [pc, #144]	; (81fa8 <udd_attach+0xac>)
   81f16:	681b      	ldr	r3, [r3, #0]
   81f18:	4a23      	ldr	r2, [pc, #140]	; (81fa8 <udd_attach+0xac>)
   81f1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81f1e:	6013      	str	r3, [r2, #0]
   81f20:	4b21      	ldr	r3, [pc, #132]	; (81fa8 <udd_attach+0xac>)
   81f22:	681b      	ldr	r3, [r3, #0]
   81f24:	4a20      	ldr	r2, [pc, #128]	; (81fa8 <udd_attach+0xac>)
   81f26:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   81f2a:	6013      	str	r3, [r2, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   81f2c:	4b1e      	ldr	r3, [pc, #120]	; (81fa8 <udd_attach+0xac>)
   81f2e:	691b      	ldr	r3, [r3, #16]
   81f30:	4a1d      	ldr	r2, [pc, #116]	; (81fa8 <udd_attach+0xac>)
   81f32:	f043 0310 	orr.w	r3, r3, #16
   81f36:	6113      	str	r3, [r2, #16]
	udd_enable_suspend_interrupt();
   81f38:	4b1b      	ldr	r3, [pc, #108]	; (81fa8 <udd_attach+0xac>)
   81f3a:	691b      	ldr	r3, [r3, #16]
   81f3c:	4a1a      	ldr	r2, [pc, #104]	; (81fa8 <udd_attach+0xac>)
   81f3e:	f043 0302 	orr.w	r3, r3, #2
   81f42:	6113      	str	r3, [r2, #16]
	udd_enable_wake_up_interrupt();
   81f44:	4b18      	ldr	r3, [pc, #96]	; (81fa8 <udd_attach+0xac>)
   81f46:	691b      	ldr	r3, [r3, #16]
   81f48:	4a17      	ldr	r2, [pc, #92]	; (81fa8 <udd_attach+0xac>)
   81f4a:	f043 0320 	orr.w	r3, r3, #32
   81f4e:	6113      	str	r3, [r2, #16]
	udd_enable_sof_interrupt();
   81f50:	4b15      	ldr	r3, [pc, #84]	; (81fa8 <udd_attach+0xac>)
   81f52:	691b      	ldr	r3, [r3, #16]
   81f54:	4a14      	ldr	r2, [pc, #80]	; (81fa8 <udd_attach+0xac>)
   81f56:	f043 0308 	orr.w	r3, r3, #8
   81f5a:	6113      	str	r3, [r2, #16]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   81f5c:	4b12      	ldr	r3, [pc, #72]	; (81fa8 <udd_attach+0xac>)
   81f5e:	691b      	ldr	r3, [r3, #16]
   81f60:	4a11      	ldr	r2, [pc, #68]	; (81fa8 <udd_attach+0xac>)
   81f62:	f043 0304 	orr.w	r3, r3, #4
   81f66:	6113      	str	r3, [r2, #16]
#endif
	// Reset following interrupts flag
	udd_ack_sof();
   81f68:	4b0f      	ldr	r3, [pc, #60]	; (81fa8 <udd_attach+0xac>)
   81f6a:	2208      	movs	r2, #8
   81f6c:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   81f6e:	4b0e      	ldr	r3, [pc, #56]	; (81fa8 <udd_attach+0xac>)
   81f70:	2204      	movs	r2, #4
   81f72:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   81f74:	4b0c      	ldr	r3, [pc, #48]	; (81fa8 <udd_attach+0xac>)
   81f76:	2210      	movs	r2, #16
   81f78:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   81f7a:	4b0b      	ldr	r3, [pc, #44]	; (81fa8 <udd_attach+0xac>)
   81f7c:	2202      	movs	r2, #2
   81f7e:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   81f80:	4b09      	ldr	r3, [pc, #36]	; (81fa8 <udd_attach+0xac>)
   81f82:	2220      	movs	r2, #32
   81f84:	619a      	str	r2, [r3, #24]

	udd_disable_periph_ck();
   81f86:	201d      	movs	r0, #29
   81f88:	4b08      	ldr	r3, [pc, #32]	; (81fac <udd_attach+0xb0>)
   81f8a:	4798      	blx	r3
	cpu_irq_restore(flags);
   81f8c:	6878      	ldr	r0, [r7, #4]
   81f8e:	4b08      	ldr	r3, [pc, #32]	; (81fb0 <udd_attach+0xb4>)
   81f90:	4798      	blx	r3
}
   81f92:	bf00      	nop
   81f94:	3708      	adds	r7, #8
   81f96:	46bd      	mov	sp, r7
   81f98:	bd80      	pop	{r7, pc}
   81f9a:	bf00      	nop
   81f9c:	00081b4d 	.word	0x00081b4d
   81fa0:	00081c45 	.word	0x00081c45
   81fa4:	00083ed5 	.word	0x00083ed5
   81fa8:	400a4000 	.word	0x400a4000
   81fac:	00083f21 	.word	0x00083f21
   81fb0:	00081ba5 	.word	0x00081ba5

00081fb4 <udd_detach>:


void udd_detach(void)
{
   81fb4:	b580      	push	{r7, lr}
   81fb6:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   81fb8:	201d      	movs	r0, #29
   81fba:	4b0b      	ldr	r3, [pc, #44]	; (81fe8 <udd_detach+0x34>)
   81fbc:	4798      	blx	r3
	// Detach device from the bus
	udd_detach_device();
   81fbe:	4b0b      	ldr	r3, [pc, #44]	; (81fec <udd_detach+0x38>)
   81fc0:	681b      	ldr	r3, [r3, #0]
   81fc2:	4a0a      	ldr	r2, [pc, #40]	; (81fec <udd_detach+0x38>)
   81fc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   81fc8:	6013      	str	r3, [r2, #0]
   81fca:	4b08      	ldr	r3, [pc, #32]	; (81fec <udd_detach+0x38>)
   81fcc:	681b      	ldr	r3, [r3, #0]
   81fce:	4a07      	ldr	r2, [pc, #28]	; (81fec <udd_detach+0x38>)
   81fd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81fd4:	6013      	str	r3, [r2, #0]
	udd_disable_periph_ck();
   81fd6:	201d      	movs	r0, #29
   81fd8:	4b05      	ldr	r3, [pc, #20]	; (81ff0 <udd_detach+0x3c>)
   81fda:	4798      	blx	r3
	udd_sleep_mode(false);
   81fdc:	2000      	movs	r0, #0
   81fde:	4b05      	ldr	r3, [pc, #20]	; (81ff4 <udd_detach+0x40>)
   81fe0:	4798      	blx	r3
}
   81fe2:	bf00      	nop
   81fe4:	bd80      	pop	{r7, pc}
   81fe6:	bf00      	nop
   81fe8:	00083ed5 	.word	0x00083ed5
   81fec:	400a4000 	.word	0x400a4000
   81ff0:	00083f21 	.word	0x00083f21
   81ff4:	00081c45 	.word	0x00081c45

00081ff8 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
   81ff8:	b480      	push	{r7}
   81ffa:	af00      	add	r7, sp, #0
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   81ffc:	4b06      	ldr	r3, [pc, #24]	; (82018 <udd_is_high_speed+0x20>)
   81ffe:	695b      	ldr	r3, [r3, #20]
   82000:	f003 0301 	and.w	r3, r3, #1
   82004:	2b00      	cmp	r3, #0
   82006:	bf14      	ite	ne
   82008:	2301      	movne	r3, #1
   8200a:	2300      	moveq	r3, #0
   8200c:	b2db      	uxtb	r3, r3
#else
	return false;
#endif
}
   8200e:	4618      	mov	r0, r3
   82010:	46bd      	mov	sp, r7
   82012:	bc80      	pop	{r7}
   82014:	4770      	bx	lr
   82016:	bf00      	nop
   82018:	400a4000 	.word	0x400a4000

0008201c <udd_set_address>:


void udd_set_address(uint8_t address)
{
   8201c:	b480      	push	{r7}
   8201e:	b083      	sub	sp, #12
   82020:	af00      	add	r7, sp, #0
   82022:	4603      	mov	r3, r0
   82024:	71fb      	strb	r3, [r7, #7]
	dbg_print("Addr%d ", address);
	udd_disable_address();
   82026:	4b0d      	ldr	r3, [pc, #52]	; (8205c <udd_set_address+0x40>)
   82028:	681b      	ldr	r3, [r3, #0]
   8202a:	4a0c      	ldr	r2, [pc, #48]	; (8205c <udd_set_address+0x40>)
   8202c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82030:	6013      	str	r3, [r2, #0]
	udd_configure_address(address);
   82032:	4b0a      	ldr	r3, [pc, #40]	; (8205c <udd_set_address+0x40>)
   82034:	681b      	ldr	r3, [r3, #0]
   82036:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   8203a:	79fb      	ldrb	r3, [r7, #7]
   8203c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   82040:	4906      	ldr	r1, [pc, #24]	; (8205c <udd_set_address+0x40>)
   82042:	4313      	orrs	r3, r2
   82044:	600b      	str	r3, [r1, #0]
	udd_enable_address();
   82046:	4b05      	ldr	r3, [pc, #20]	; (8205c <udd_set_address+0x40>)
   82048:	681b      	ldr	r3, [r3, #0]
   8204a:	4a04      	ldr	r2, [pc, #16]	; (8205c <udd_set_address+0x40>)
   8204c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82050:	6013      	str	r3, [r2, #0]
}
   82052:	bf00      	nop
   82054:	370c      	adds	r7, #12
   82056:	46bd      	mov	sp, r7
   82058:	bc80      	pop	{r7}
   8205a:	4770      	bx	lr
   8205c:	400a4000 	.word	0x400a4000

00082060 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
   82060:	b480      	push	{r7}
   82062:	af00      	add	r7, sp, #0
	return udd_get_configured_address();
   82064:	4b04      	ldr	r3, [pc, #16]	; (82078 <udd_getaddress+0x18>)
   82066:	681b      	ldr	r3, [r3, #0]
   82068:	b2db      	uxtb	r3, r3
   8206a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   8206e:	b2db      	uxtb	r3, r3
}
   82070:	4618      	mov	r0, r3
   82072:	46bd      	mov	sp, r7
   82074:	bc80      	pop	{r7}
   82076:	4770      	bx	lr
   82078:	400a4000 	.word	0x400a4000

0008207c <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
   8207c:	b480      	push	{r7}
   8207e:	b083      	sub	sp, #12
   82080:	af00      	add	r7, sp, #0
   82082:	6078      	str	r0, [r7, #4]
   82084:	460b      	mov	r3, r1
   82086:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
   82088:	4a05      	ldr	r2, [pc, #20]	; (820a0 <udd_set_setup_payload+0x24>)
   8208a:	687b      	ldr	r3, [r7, #4]
   8208c:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   8208e:	4a04      	ldr	r2, [pc, #16]	; (820a0 <udd_set_setup_payload+0x24>)
   82090:	887b      	ldrh	r3, [r7, #2]
   82092:	8193      	strh	r3, [r2, #12]
}
   82094:	bf00      	nop
   82096:	370c      	adds	r7, #12
   82098:	46bd      	mov	sp, r7
   8209a:	bc80      	pop	{r7}
   8209c:	4770      	bx	lr
   8209e:	bf00      	nop
   820a0:	2000130c 	.word	0x2000130c

000820a4 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   820a4:	b590      	push	{r4, r7, lr}
   820a6:	b089      	sub	sp, #36	; 0x24
   820a8:	af02      	add	r7, sp, #8
   820aa:	4603      	mov	r3, r0
   820ac:	71fb      	strb	r3, [r7, #7]
   820ae:	460b      	mov	r3, r1
   820b0:	71bb      	strb	r3, [r7, #6]
   820b2:	4613      	mov	r3, r2
   820b4:	80bb      	strh	r3, [r7, #4]
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, nb_tran = 0, i;
   820b6:	2300      	movs	r3, #0
   820b8:	74fb      	strb	r3, [r7, #19]
	bool b_iso_hbw = false;
   820ba:	2300      	movs	r3, #0
   820bc:	747b      	strb	r3, [r7, #17]

	b_dir_in = ep & USB_EP_DIR_IN;
   820be:	79fb      	ldrb	r3, [r7, #7]
   820c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
   820c4:	2b00      	cmp	r3, #0
   820c6:	bf14      	ite	ne
   820c8:	2301      	movne	r3, #1
   820ca:	2300      	moveq	r3, #0
   820cc:	743b      	strb	r3, [r7, #16]
	ep = ep & USB_EP_ADDR_MASK;
   820ce:	79fb      	ldrb	r3, [r7, #7]
   820d0:	f003 030f 	and.w	r3, r3, #15
   820d4:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
   820d6:	79fb      	ldrb	r3, [r7, #7]
   820d8:	2b02      	cmp	r3, #2
   820da:	d901      	bls.n	820e0 <udd_ep_alloc+0x3c>
		return false;
   820dc:	2300      	movs	r3, #0
   820de:	e1ae      	b.n	8243e <udd_ep_alloc+0x39a>
	}
	if (Is_udd_endpoint_enabled(ep)) {
   820e0:	4ab0      	ldr	r2, [pc, #704]	; (823a4 <udd_ep_alloc+0x300>)
   820e2:	79fb      	ldrb	r3, [r7, #7]
   820e4:	015b      	lsls	r3, r3, #5
   820e6:	4413      	add	r3, r2
   820e8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   820ec:	681b      	ldr	r3, [r3, #0]
   820ee:	f003 0301 	and.w	r3, r3, #1
   820f2:	2b00      	cmp	r3, #0
   820f4:	d001      	beq.n	820fa <udd_ep_alloc+0x56>
		return false;
   820f6:	2300      	movs	r3, #0
   820f8:	e1a1      	b.n	8243e <udd_ep_alloc+0x39a>
	}

	// Bank choice
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   820fa:	79bb      	ldrb	r3, [r7, #6]
   820fc:	f003 0303 	and.w	r3, r3, #3
   82100:	2b02      	cmp	r3, #2
   82102:	d01a      	beq.n	8213a <udd_ep_alloc+0x96>
   82104:	2b03      	cmp	r3, #3
   82106:	d015      	beq.n	82134 <udd_ep_alloc+0x90>
   82108:	2b01      	cmp	r3, #1
   8210a:	d119      	bne.n	82140 <udd_ep_alloc+0x9c>
	case USB_EP_TYPE_ISOCHRONOUS:
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   8210c:	79fb      	ldrb	r3, [r7, #7]
   8210e:	2b00      	cmp	r3, #0
   82110:	d007      	beq.n	82122 <udd_ep_alloc+0x7e>
   82112:	79fb      	ldrb	r3, [r7, #7]
   82114:	2b03      	cmp	r3, #3
   82116:	d004      	beq.n	82122 <udd_ep_alloc+0x7e>
   82118:	79fb      	ldrb	r3, [r7, #7]
   8211a:	2b04      	cmp	r3, #4
   8211c:	d001      	beq.n	82122 <udd_ep_alloc+0x7e>
   8211e:	2301      	movs	r3, #1
   82120:	e000      	b.n	82124 <udd_ep_alloc+0x80>
   82122:	2300      	movs	r3, #0
   82124:	747b      	strb	r3, [r7, #17]
   82126:	7c7b      	ldrb	r3, [r7, #17]
   82128:	f003 0301 	and.w	r3, r3, #1
   8212c:	747b      	strb	r3, [r7, #17]
		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
   8212e:	2301      	movs	r3, #1
   82130:	757b      	strb	r3, [r7, #21]
		break;
   82132:	e007      	b.n	82144 <udd_ep_alloc+0xa0>
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
   82134:	2301      	movs	r3, #1
   82136:	757b      	strb	r3, [r7, #21]
		break;
   82138:	e004      	b.n	82144 <udd_ep_alloc+0xa0>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   8213a:	2302      	movs	r3, #2
   8213c:	757b      	strb	r3, [r7, #21]
		break;
   8213e:	e001      	b.n	82144 <udd_ep_alloc+0xa0>
	default:
		Assert(false);
		return false;
   82140:	2300      	movs	r3, #0
   82142:	e17c      	b.n	8243e <udd_ep_alloc+0x39a>
	}
	switch (nb_bank) {
   82144:	7d7b      	ldrb	r3, [r7, #21]
   82146:	2b02      	cmp	r3, #2
   82148:	d006      	beq.n	82158 <udd_ep_alloc+0xb4>
   8214a:	2b03      	cmp	r3, #3
   8214c:	d007      	beq.n	8215e <udd_ep_alloc+0xba>
   8214e:	2b01      	cmp	r3, #1
   82150:	d108      	bne.n	82164 <udd_ep_alloc+0xc0>
	case 1:
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   82152:	2301      	movs	r3, #1
   82154:	753b      	strb	r3, [r7, #20]
		break;
   82156:	e007      	b.n	82168 <udd_ep_alloc+0xc4>
	case 2:
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   82158:	2302      	movs	r3, #2
   8215a:	753b      	strb	r3, [r7, #20]
		break;
   8215c:	e004      	b.n	82168 <udd_ep_alloc+0xc4>
	case 3:
		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   8215e:	2303      	movs	r3, #3
   82160:	753b      	strb	r3, [r7, #20]
		break;
   82162:	e001      	b.n	82168 <udd_ep_alloc+0xc4>
	default:
		Assert(false);
		return false;
   82164:	2300      	movs	r3, #0
   82166:	e16a      	b.n	8243e <udd_ep_alloc+0x39a>
	}
	if (b_iso_hbw) {
   82168:	7c7b      	ldrb	r3, [r7, #17]
   8216a:	2b00      	cmp	r3, #0
   8216c:	d017      	beq.n	8219e <udd_ep_alloc+0xfa>
		switch(MaxEndpointSize & (0x3u << 11)) {
   8216e:	88bb      	ldrh	r3, [r7, #4]
   82170:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   82174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   82178:	d003      	beq.n	82182 <udd_ep_alloc+0xde>
   8217a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   8217e:	d003      	beq.n	82188 <udd_ep_alloc+0xe4>
   82180:	e005      	b.n	8218e <udd_ep_alloc+0xea>
		case (0x1u << 11):
			nb_tran = 2;
   82182:	2302      	movs	r3, #2
   82184:	74fb      	strb	r3, [r7, #19]
			break;
   82186:	e005      	b.n	82194 <udd_ep_alloc+0xf0>
		case (0x2u << 11):
			nb_tran = 3;
   82188:	2303      	movs	r3, #3
   8218a:	74fb      	strb	r3, [r7, #19]
			break;
   8218c:	e002      	b.n	82194 <udd_ep_alloc+0xf0>
		default:
			nb_tran = 1;
   8218e:	2301      	movs	r3, #1
   82190:	74fb      	strb	r3, [r7, #19]
			break;
   82192:	bf00      	nop
		}
		MaxEndpointSize &= ~(0x3u << 11);
   82194:	88bb      	ldrh	r3, [r7, #4]
   82196:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
   8219a:	80bb      	strh	r3, [r7, #4]
   8219c:	e006      	b.n	821ac <udd_ep_alloc+0x108>
	} else if (MaxEndpointSize & (0x3u << 11)) {
   8219e:	88bb      	ldrh	r3, [r7, #4]
   821a0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   821a4:	2b00      	cmp	r3, #0
   821a6:	d001      	beq.n	821ac <udd_ep_alloc+0x108>
		// High BW not supported
		return false;
   821a8:	2300      	movs	r3, #0
   821aa:	e148      	b.n	8243e <udd_ep_alloc+0x39a>
	Assert(MaxEndpointSize <= udd_get_endpoint_size_max(ep));
	Assert(nb_bank <= udd_get_endpoint_bank_max_nbr(ep));

	// Set configuration of new endpoint
	// Note: NB_TRANS is at maximum for isochronous endpoint, else 0 (ignored).
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   821ac:	4a7d      	ldr	r2, [pc, #500]	; (823a4 <udd_ep_alloc+0x300>)
   821ae:	79fb      	ldrb	r3, [r7, #7]
   821b0:	3308      	adds	r3, #8
   821b2:	015b      	lsls	r3, r3, #5
   821b4:	4413      	add	r3, r2
   821b6:	681b      	ldr	r3, [r3, #0]
   821b8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   821bc:	f023 0303 	bic.w	r3, r3, #3
   821c0:	79ba      	ldrb	r2, [r7, #6]
   821c2:	0112      	lsls	r2, r2, #4
   821c4:	f002 0230 	and.w	r2, r2, #48	; 0x30
   821c8:	7c39      	ldrb	r1, [r7, #16]
   821ca:	2900      	cmp	r1, #0
   821cc:	d001      	beq.n	821d2 <udd_ep_alloc+0x12e>
   821ce:	2108      	movs	r1, #8
   821d0:	e000      	b.n	821d4 <udd_ep_alloc+0x130>
   821d2:	2100      	movs	r1, #0
   821d4:	4311      	orrs	r1, r2
   821d6:	88ba      	ldrh	r2, [r7, #4]
   821d8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   821dc:	d207      	bcs.n	821ee <udd_ep_alloc+0x14a>
   821de:	88ba      	ldrh	r2, [r7, #4]
   821e0:	2a08      	cmp	r2, #8
   821e2:	bf38      	it	cc
   821e4:	2208      	movcc	r2, #8
   821e6:	b292      	uxth	r2, r2
   821e8:	0052      	lsls	r2, r2, #1
   821ea:	3a01      	subs	r2, #1
   821ec:	e001      	b.n	821f2 <udd_ep_alloc+0x14e>
   821ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
   821f2:	fab2 f282 	clz	r2, r2
   821f6:	f1c2 021c 	rsb	r2, r2, #28
   821fa:	4311      	orrs	r1, r2
   821fc:	7d3a      	ldrb	r2, [r7, #20]
   821fe:	0192      	lsls	r2, r2, #6
   82200:	b2d2      	uxtb	r2, r2
   82202:	4311      	orrs	r1, r2
   82204:	7c7a      	ldrb	r2, [r7, #17]
   82206:	2a00      	cmp	r2, #0
   82208:	d004      	beq.n	82214 <udd_ep_alloc+0x170>
   8220a:	7cfa      	ldrb	r2, [r7, #19]
   8220c:	0212      	lsls	r2, r2, #8
   8220e:	f402 7240 	and.w	r2, r2, #768	; 0x300
   82212:	e000      	b.n	82216 <udd_ep_alloc+0x172>
   82214:	2200      	movs	r2, #0
   82216:	430a      	orrs	r2, r1
   82218:	f3c2 0209 	ubfx	r2, r2, #0, #10
   8221c:	4861      	ldr	r0, [pc, #388]	; (823a4 <udd_ep_alloc+0x300>)
   8221e:	79f9      	ldrb	r1, [r7, #7]
   82220:	431a      	orrs	r2, r3
   82222:	f101 0308 	add.w	r3, r1, #8
   82226:	015b      	lsls	r3, r3, #5
   82228:	4403      	add	r3, r0
   8222a:	601a      	str	r2, [r3, #0]
			MaxEndpointSize, bank, (b_iso_hbw)?nb_tran:0);
	if (!Is_udd_endpoint_mapped(ep)) {
   8222c:	4a5d      	ldr	r2, [pc, #372]	; (823a4 <udd_ep_alloc+0x300>)
   8222e:	79fb      	ldrb	r3, [r7, #7]
   82230:	3308      	adds	r3, #8
   82232:	015b      	lsls	r3, r3, #5
   82234:	4413      	add	r3, r2
   82236:	681b      	ldr	r3, [r3, #0]
   82238:	2b00      	cmp	r3, #0
   8223a:	db01      	blt.n	82240 <udd_ep_alloc+0x19c>
		return false;
   8223c:	2300      	movs	r3, #0
   8223e:	e0fe      	b.n	8243e <udd_ep_alloc+0x39a>
	}
	udd_enable_endpoint(ep);
   82240:	4a58      	ldr	r2, [pc, #352]	; (823a4 <udd_ep_alloc+0x300>)
   82242:	79fb      	ldrb	r3, [r7, #7]
   82244:	3308      	adds	r3, #8
   82246:	015b      	lsls	r3, r3, #5
   82248:	4413      	add	r3, r2
   8224a:	3304      	adds	r3, #4
   8224c:	2201      	movs	r2, #1
   8224e:	601a      	str	r2, [r3, #0]

	// To avoid conflict during reorganization of the DPRAM
	// the superior endpoint must be unallocated and reallocated
	ep_allocated = 0;
   82250:	2300      	movs	r3, #0
   82252:	82fb      	strh	r3, [r7, #22]

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   82254:	2302      	movs	r3, #2
   82256:	74bb      	strb	r3, [r7, #18]
   82258:	e039      	b.n	822ce <udd_ep_alloc+0x22a>
		if (Is_udd_endpoint_enabled(i)) {
   8225a:	4a52      	ldr	r2, [pc, #328]	; (823a4 <udd_ep_alloc+0x300>)
   8225c:	7cbb      	ldrb	r3, [r7, #18]
   8225e:	015b      	lsls	r3, r3, #5
   82260:	4413      	add	r3, r2
   82262:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   82266:	681b      	ldr	r3, [r3, #0]
   82268:	f003 0301 	and.w	r3, r3, #1
   8226c:	2b00      	cmp	r3, #0
   8226e:	d02b      	beq.n	822c8 <udd_ep_alloc+0x224>
			// Save number of bank value
			bank = udd_get_endpoint_bank(i);
   82270:	4a4c      	ldr	r2, [pc, #304]	; (823a4 <udd_ep_alloc+0x300>)
   82272:	7cbb      	ldrb	r3, [r7, #18]
   82274:	3308      	adds	r3, #8
   82276:	015b      	lsls	r3, r3, #5
   82278:	4413      	add	r3, r2
   8227a:	681b      	ldr	r3, [r3, #0]
   8227c:	099b      	lsrs	r3, r3, #6
   8227e:	b2db      	uxtb	r3, r3
   82280:	f003 0303 	and.w	r3, r3, #3
   82284:	753b      	strb	r3, [r7, #20]
			ep_allocated |=  bank << (i * 2);
   82286:	7d3a      	ldrb	r2, [r7, #20]
   82288:	7cbb      	ldrb	r3, [r7, #18]
   8228a:	005b      	lsls	r3, r3, #1
   8228c:	fa02 f303 	lsl.w	r3, r2, r3
   82290:	b21a      	sxth	r2, r3
   82292:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   82296:	4313      	orrs	r3, r2
   82298:	b21b      	sxth	r3, r3
   8229a:	82fb      	strh	r3, [r7, #22]
			// Disable and unallocate endpoint
			udd_disable_endpoint(i);
   8229c:	4a41      	ldr	r2, [pc, #260]	; (823a4 <udd_ep_alloc+0x300>)
   8229e:	7cbb      	ldrb	r3, [r7, #18]
   822a0:	015b      	lsls	r3, r3, #5
   822a2:	4413      	add	r3, r2
   822a4:	f503 7384 	add.w	r3, r3, #264	; 0x108
   822a8:	2201      	movs	r2, #1
   822aa:	601a      	str	r2, [r3, #0]
			udd_configure_endpoint_bank(i, 0);
   822ac:	4a3d      	ldr	r2, [pc, #244]	; (823a4 <udd_ep_alloc+0x300>)
   822ae:	7cbb      	ldrb	r3, [r7, #18]
   822b0:	3308      	adds	r3, #8
   822b2:	015b      	lsls	r3, r3, #5
   822b4:	4413      	add	r3, r2
   822b6:	681a      	ldr	r2, [r3, #0]
   822b8:	493a      	ldr	r1, [pc, #232]	; (823a4 <udd_ep_alloc+0x300>)
   822ba:	7cbb      	ldrb	r3, [r7, #18]
   822bc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   822c0:	3308      	adds	r3, #8
   822c2:	015b      	lsls	r3, r3, #5
   822c4:	440b      	add	r3, r1
   822c6:	601a      	str	r2, [r3, #0]
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   822c8:	7cbb      	ldrb	r3, [r7, #18]
   822ca:	3b01      	subs	r3, #1
   822cc:	74bb      	strb	r3, [r7, #18]
   822ce:	7cba      	ldrb	r2, [r7, #18]
   822d0:	79fb      	ldrb	r3, [r7, #7]
   822d2:	429a      	cmp	r2, r3
   822d4:	d2c1      	bcs.n	8225a <udd_ep_alloc+0x1b6>

		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   822d6:	79fb      	ldrb	r3, [r7, #7]
   822d8:	74bb      	strb	r3, [r7, #18]
   822da:	e0ab      	b.n	82434 <udd_ep_alloc+0x390>
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   822dc:	7cbb      	ldrb	r3, [r7, #18]
   822de:	1e5a      	subs	r2, r3, #1
   822e0:	4613      	mov	r3, r2
   822e2:	005b      	lsls	r3, r3, #1
   822e4:	4413      	add	r3, r2
   822e6:	00db      	lsls	r3, r3, #3
   822e8:	4a2f      	ldr	r2, [pc, #188]	; (823a8 <udd_ep_alloc+0x304>)
   822ea:	4413      	add	r3, r2
   822ec:	60fb      	str	r3, [r7, #12]
		bool b_restart = ptr_job->busy;
   822ee:	68fb      	ldr	r3, [r7, #12]
   822f0:	7d1b      	ldrb	r3, [r3, #20]
   822f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
   822f6:	b2db      	uxtb	r3, r3
   822f8:	2b00      	cmp	r3, #0
   822fa:	bf14      	ite	ne
   822fc:	2301      	movne	r3, #1
   822fe:	2300      	moveq	r3, #0
   82300:	72fb      	strb	r3, [r7, #11]
		// Unallocated banks?
		bank = (ep_allocated >> (i * 2)) & 0x03;
   82302:	8afa      	ldrh	r2, [r7, #22]
   82304:	7cbb      	ldrb	r3, [r7, #18]
   82306:	005b      	lsls	r3, r3, #1
   82308:	fa42 f303 	asr.w	r3, r2, r3
   8230c:	b2db      	uxtb	r3, r3
   8230e:	f003 0303 	and.w	r3, r3, #3
   82312:	753b      	strb	r3, [r7, #20]
		if (bank == 0) {
   82314:	7d3b      	ldrb	r3, [r7, #20]
   82316:	2b00      	cmp	r3, #0
   82318:	f000 8088 	beq.w	8242c <udd_ep_alloc+0x388>
			continue;
		}
		// Restart running job because
		// memory window slides up and its data is lost
		ptr_job->busy = false;
   8231c:	68fa      	ldr	r2, [r7, #12]
   8231e:	7d13      	ldrb	r3, [r2, #20]
   82320:	f36f 0300 	bfc	r3, #0, #1
   82324:	7513      	strb	r3, [r2, #20]
		// Re-allocate memory
		udd_configure_endpoint_bank(i, bank);
   82326:	4a1f      	ldr	r2, [pc, #124]	; (823a4 <udd_ep_alloc+0x300>)
   82328:	7cbb      	ldrb	r3, [r7, #18]
   8232a:	3308      	adds	r3, #8
   8232c:	015b      	lsls	r3, r3, #5
   8232e:	4413      	add	r3, r2
   82330:	681b      	ldr	r3, [r3, #0]
   82332:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
   82336:	7d3b      	ldrb	r3, [r7, #20]
   82338:	019b      	lsls	r3, r3, #6
   8233a:	b2da      	uxtb	r2, r3
   8233c:	4819      	ldr	r0, [pc, #100]	; (823a4 <udd_ep_alloc+0x300>)
   8233e:	7cbb      	ldrb	r3, [r7, #18]
   82340:	430a      	orrs	r2, r1
   82342:	3308      	adds	r3, #8
   82344:	015b      	lsls	r3, r3, #5
   82346:	4403      	add	r3, r0
   82348:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint(i);
   8234a:	4a16      	ldr	r2, [pc, #88]	; (823a4 <udd_ep_alloc+0x300>)
   8234c:	7cbb      	ldrb	r3, [r7, #18]
   8234e:	3308      	adds	r3, #8
   82350:	015b      	lsls	r3, r3, #5
   82352:	4413      	add	r3, r2
   82354:	3304      	adds	r3, #4
   82356:	2201      	movs	r2, #1
   82358:	601a      	str	r2, [r3, #0]
		if (!Is_udd_endpoint_mapped(i)) {
   8235a:	4a12      	ldr	r2, [pc, #72]	; (823a4 <udd_ep_alloc+0x300>)
   8235c:	7cbb      	ldrb	r3, [r7, #18]
   8235e:	3308      	adds	r3, #8
   82360:	015b      	lsls	r3, r3, #5
   82362:	4413      	add	r3, r2
   82364:	681b      	ldr	r3, [r3, #0]
   82366:	2b00      	cmp	r3, #0
   82368:	db20      	blt.n	823ac <udd_ep_alloc+0x308>
			dbg_print("ErrRealloc%d-JobE ", i);
			if (NULL == ptr_job->call_trans) {
   8236a:	68fb      	ldr	r3, [r7, #12]
   8236c:	681b      	ldr	r3, [r3, #0]
   8236e:	2b00      	cmp	r3, #0
   82370:	d101      	bne.n	82376 <udd_ep_alloc+0x2d2>
				return false;
   82372:	2300      	movs	r3, #0
   82374:	e063      	b.n	8243e <udd_ep_alloc+0x39a>
			}
			if (Is_udd_endpoint_in(i)) {
   82376:	4a0b      	ldr	r2, [pc, #44]	; (823a4 <udd_ep_alloc+0x300>)
   82378:	7cbb      	ldrb	r3, [r7, #18]
   8237a:	3308      	adds	r3, #8
   8237c:	015b      	lsls	r3, r3, #5
   8237e:	4413      	add	r3, r2
   82380:	681b      	ldr	r3, [r3, #0]
   82382:	f003 0308 	and.w	r3, r3, #8
   82386:	2b00      	cmp	r3, #0
   82388:	d003      	beq.n	82392 <udd_ep_alloc+0x2ee>
				i |= USB_EP_DIR_IN;
   8238a:	7cbb      	ldrb	r3, [r7, #18]
   8238c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   82390:	74bb      	strb	r3, [r7, #18]
			}
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   82392:	68fb      	ldr	r3, [r7, #12]
   82394:	681b      	ldr	r3, [r3, #0]
   82396:	68fa      	ldr	r2, [r7, #12]
   82398:	68d1      	ldr	r1, [r2, #12]
   8239a:	7cba      	ldrb	r2, [r7, #18]
   8239c:	2001      	movs	r0, #1
   8239e:	4798      	blx	r3
					ptr_job->buf_cnt, i);
			return false;
   823a0:	2300      	movs	r3, #0
   823a2:	e04c      	b.n	8243e <udd_ep_alloc+0x39a>
   823a4:	400a4000 	.word	0x400a4000
   823a8:	20001284 	.word	0x20001284
		}
		udd_enable_endpoint_bank_autoswitch(i);
   823ac:	4a26      	ldr	r2, [pc, #152]	; (82448 <udd_ep_alloc+0x3a4>)
   823ae:	7cbb      	ldrb	r3, [r7, #18]
   823b0:	3308      	adds	r3, #8
   823b2:	015b      	lsls	r3, r3, #5
   823b4:	4413      	add	r3, r2
   823b6:	3304      	adds	r3, #4
   823b8:	681a      	ldr	r2, [r3, #0]
   823ba:	4923      	ldr	r1, [pc, #140]	; (82448 <udd_ep_alloc+0x3a4>)
   823bc:	7cbb      	ldrb	r3, [r7, #18]
   823be:	f042 0202 	orr.w	r2, r2, #2
   823c2:	3308      	adds	r3, #8
   823c4:	015b      	lsls	r3, r3, #5
   823c6:	440b      	add	r3, r1
   823c8:	3304      	adds	r3, #4
   823ca:	601a      	str	r2, [r3, #0]
		if (b_restart) {
   823cc:	7afb      	ldrb	r3, [r7, #11]
   823ce:	2b00      	cmp	r3, #0
   823d0:	d02d      	beq.n	8242e <udd_ep_alloc+0x38a>
			// Re-run the job remaining part
			ptr_job->buf_cnt -= ptr_job->buf_load;
   823d2:	68fb      	ldr	r3, [r7, #12]
   823d4:	68da      	ldr	r2, [r3, #12]
   823d6:	68fb      	ldr	r3, [r7, #12]
   823d8:	691b      	ldr	r3, [r3, #16]
   823da:	1ad2      	subs	r2, r2, r3
   823dc:	68fb      	ldr	r3, [r7, #12]
   823de:	60da      	str	r2, [r3, #12]
			b_restart = udd_ep_run(i,
					ptr_job->b_shortpacket,
   823e0:	68fb      	ldr	r3, [r7, #12]
   823e2:	7d1b      	ldrb	r3, [r3, #20]
   823e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
   823e8:	b2db      	uxtb	r3, r3
			b_restart = udd_ep_run(i,
   823ea:	2b00      	cmp	r3, #0
   823ec:	bf14      	ite	ne
   823ee:	2301      	movne	r3, #1
   823f0:	2300      	moveq	r3, #0
   823f2:	b2d9      	uxtb	r1, r3
					&ptr_job->buf[ptr_job->buf_cnt],
   823f4:	68fb      	ldr	r3, [r7, #12]
   823f6:	685a      	ldr	r2, [r3, #4]
   823f8:	68fb      	ldr	r3, [r7, #12]
   823fa:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   823fc:	18d4      	adds	r4, r2, r3
					ptr_job->buf_size
   823fe:	68fb      	ldr	r3, [r7, #12]
   82400:	689a      	ldr	r2, [r3, #8]
						- ptr_job->buf_cnt,
   82402:	68fb      	ldr	r3, [r7, #12]
   82404:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   82406:	1ad2      	subs	r2, r2, r3
   82408:	68fb      	ldr	r3, [r7, #12]
   8240a:	681b      	ldr	r3, [r3, #0]
   8240c:	7cb8      	ldrb	r0, [r7, #18]
   8240e:	9300      	str	r3, [sp, #0]
   82410:	4613      	mov	r3, r2
   82412:	4622      	mov	r2, r4
   82414:	4c0d      	ldr	r4, [pc, #52]	; (8244c <udd_ep_alloc+0x3a8>)
   82416:	47a0      	blx	r4
   82418:	4603      	mov	r3, r0
   8241a:	72fb      	strb	r3, [r7, #11]
					ptr_job->call_trans);
			if (!b_restart) {
   8241c:	7afb      	ldrb	r3, [r7, #11]
   8241e:	f083 0301 	eor.w	r3, r3, #1
   82422:	b2db      	uxtb	r3, r3
   82424:	2b00      	cmp	r3, #0
   82426:	d002      	beq.n	8242e <udd_ep_alloc+0x38a>
				dbg_print("ErrReRun%d ", i);
				return false;
   82428:	2300      	movs	r3, #0
   8242a:	e008      	b.n	8243e <udd_ep_alloc+0x39a>
			continue;
   8242c:	bf00      	nop
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   8242e:	7cbb      	ldrb	r3, [r7, #18]
   82430:	3301      	adds	r3, #1
   82432:	74bb      	strb	r3, [r7, #18]
   82434:	7cbb      	ldrb	r3, [r7, #18]
   82436:	2b02      	cmp	r3, #2
   82438:	f67f af50 	bls.w	822dc <udd_ep_alloc+0x238>
			}
		}
	}
	dbg_print("ep_alloc(%d:%08x) ", ep, UDPHS->UDPHS_EPT[ep].UDPHS_EPTCFG);
	return true;
   8243c:	2301      	movs	r3, #1
}
   8243e:	4618      	mov	r0, r3
   82440:	371c      	adds	r7, #28
   82442:	46bd      	mov	sp, r7
   82444:	bd90      	pop	{r4, r7, pc}
   82446:	bf00      	nop
   82448:	400a4000 	.word	0x400a4000
   8244c:	0008277d 	.word	0x0008277d

00082450 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
   82450:	b580      	push	{r7, lr}
   82452:	b084      	sub	sp, #16
   82454:	af00      	add	r7, sp, #0
   82456:	4603      	mov	r3, r0
   82458:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8245a:	79fb      	ldrb	r3, [r7, #7]
   8245c:	f003 030f 	and.w	r3, r3, #15
   82460:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   82462:	7bfb      	ldrb	r3, [r7, #15]
   82464:	2b02      	cmp	r3, #2
   82466:	d828      	bhi.n	824ba <udd_ep_free+0x6a>
		return;
	}
	udd_disable_endpoint(ep_index);
   82468:	4a16      	ldr	r2, [pc, #88]	; (824c4 <udd_ep_free+0x74>)
   8246a:	7bfb      	ldrb	r3, [r7, #15]
   8246c:	015b      	lsls	r3, r3, #5
   8246e:	4413      	add	r3, r2
   82470:	f503 7384 	add.w	r3, r3, #264	; 0x108
   82474:	2201      	movs	r2, #1
   82476:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint_bank(ep_index, 0);
   82478:	4a12      	ldr	r2, [pc, #72]	; (824c4 <udd_ep_free+0x74>)
   8247a:	7bfb      	ldrb	r3, [r7, #15]
   8247c:	3308      	adds	r3, #8
   8247e:	015b      	lsls	r3, r3, #5
   82480:	4413      	add	r3, r2
   82482:	681a      	ldr	r2, [r3, #0]
   82484:	490f      	ldr	r1, [pc, #60]	; (824c4 <udd_ep_free+0x74>)
   82486:	7bfb      	ldrb	r3, [r7, #15]
   82488:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   8248c:	3308      	adds	r3, #8
   8248e:	015b      	lsls	r3, r3, #5
   82490:	440b      	add	r3, r1
   82492:	601a      	str	r2, [r3, #0]
	udd_ep_abort_job(ep);
   82494:	79fb      	ldrb	r3, [r7, #7]
   82496:	4618      	mov	r0, r3
   82498:	4b0b      	ldr	r3, [pc, #44]	; (824c8 <udd_ep_free+0x78>)
   8249a:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   8249c:	7bfb      	ldrb	r3, [r7, #15]
   8249e:	1e5a      	subs	r2, r3, #1
   824a0:	490a      	ldr	r1, [pc, #40]	; (824cc <udd_ep_free+0x7c>)
   824a2:	4613      	mov	r3, r2
   824a4:	005b      	lsls	r3, r3, #1
   824a6:	4413      	add	r3, r2
   824a8:	00db      	lsls	r3, r3, #3
   824aa:	440b      	add	r3, r1
   824ac:	f103 0210 	add.w	r2, r3, #16
   824b0:	7913      	ldrb	r3, [r2, #4]
   824b2:	f36f 0382 	bfc	r3, #2, #1
   824b6:	7113      	strb	r3, [r2, #4]
   824b8:	e000      	b.n	824bc <udd_ep_free+0x6c>
		return;
   824ba:	bf00      	nop
}
   824bc:	3710      	adds	r7, #16
   824be:	46bd      	mov	sp, r7
   824c0:	bd80      	pop	{r7, pc}
   824c2:	bf00      	nop
   824c4:	400a4000 	.word	0x400a4000
   824c8:	00083289 	.word	0x00083289
   824cc:	20001284 	.word	0x20001284

000824d0 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
   824d0:	b480      	push	{r7}
   824d2:	b085      	sub	sp, #20
   824d4:	af00      	add	r7, sp, #0
   824d6:	4603      	mov	r3, r0
   824d8:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   824da:	79fb      	ldrb	r3, [r7, #7]
   824dc:	f003 030f 	and.w	r3, r3, #15
   824e0:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   824e2:	7bfb      	ldrb	r3, [r7, #15]
   824e4:	1e5a      	subs	r2, r3, #1
   824e6:	4613      	mov	r3, r2
   824e8:	005b      	lsls	r3, r3, #1
   824ea:	4413      	add	r3, r2
   824ec:	00db      	lsls	r3, r3, #3
   824ee:	4a10      	ldr	r2, [pc, #64]	; (82530 <udd_ep_is_halted+0x60>)
   824f0:	4413      	add	r3, r2
   824f2:	60bb      	str	r3, [r7, #8]
	return (Is_udd_endpoint_stall_requested(ep_index)
   824f4:	4a0f      	ldr	r2, [pc, #60]	; (82534 <udd_ep_is_halted+0x64>)
   824f6:	7bfb      	ldrb	r3, [r7, #15]
   824f8:	015b      	lsls	r3, r3, #5
   824fa:	4413      	add	r3, r2
   824fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   82500:	681b      	ldr	r3, [r3, #0]
   82502:	f003 0320 	and.w	r3, r3, #32
			|| ptr_job->stall_requested);
   82506:	2b00      	cmp	r3, #0
   82508:	d106      	bne.n	82518 <udd_ep_is_halted+0x48>
   8250a:	68bb      	ldr	r3, [r7, #8]
   8250c:	7d1b      	ldrb	r3, [r3, #20]
   8250e:	f003 0304 	and.w	r3, r3, #4
   82512:	b2db      	uxtb	r3, r3
   82514:	2b00      	cmp	r3, #0
   82516:	d001      	beq.n	8251c <udd_ep_is_halted+0x4c>
   82518:	2301      	movs	r3, #1
   8251a:	e000      	b.n	8251e <udd_ep_is_halted+0x4e>
   8251c:	2300      	movs	r3, #0
   8251e:	f003 0301 	and.w	r3, r3, #1
   82522:	b2db      	uxtb	r3, r3
}
   82524:	4618      	mov	r0, r3
   82526:	3714      	adds	r7, #20
   82528:	46bd      	mov	sp, r7
   8252a:	bc80      	pop	{r7}
   8252c:	4770      	bx	lr
   8252e:	bf00      	nop
   82530:	20001284 	.word	0x20001284
   82534:	400a4000 	.word	0x400a4000

00082538 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   82538:	b480      	push	{r7}
   8253a:	b085      	sub	sp, #20
   8253c:	af00      	add	r7, sp, #0
   8253e:	4603      	mov	r3, r0
   82540:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82542:	79fb      	ldrb	r3, [r7, #7]
   82544:	f003 030f 	and.w	r3, r3, #15
   82548:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   8254a:	7bfb      	ldrb	r3, [r7, #15]
   8254c:	2b02      	cmp	r3, #2
   8254e:	d901      	bls.n	82554 <udd_ep_set_halt+0x1c>
		return false;
   82550:	2300      	movs	r3, #0
   82552:	e071      	b.n	82638 <udd_ep_set_halt+0x100>
	}

	ptr_job = &udd_ep_job[ep_index - 1];
   82554:	7bfb      	ldrb	r3, [r7, #15]
   82556:	1e5a      	subs	r2, r3, #1
   82558:	4613      	mov	r3, r2
   8255a:	005b      	lsls	r3, r3, #1
   8255c:	4413      	add	r3, r2
   8255e:	00db      	lsls	r3, r3, #3
   82560:	4a38      	ldr	r2, [pc, #224]	; (82644 <udd_ep_set_halt+0x10c>)
   82562:	4413      	add	r3, r2
   82564:	60bb      	str	r3, [r7, #8]

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   82566:	4a38      	ldr	r2, [pc, #224]	; (82648 <udd_ep_set_halt+0x110>)
   82568:	7bfb      	ldrb	r3, [r7, #15]
   8256a:	015b      	lsls	r3, r3, #5
   8256c:	4413      	add	r3, r2
   8256e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   82572:	681b      	ldr	r3, [r3, #0]
   82574:	f003 0320 	and.w	r3, r3, #32
   82578:	2b00      	cmp	r3, #0
   8257a:	d106      	bne.n	8258a <udd_ep_set_halt+0x52>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   8257c:	68bb      	ldr	r3, [r7, #8]
   8257e:	7d1b      	ldrb	r3, [r3, #20]
   82580:	f003 0304 	and.w	r3, r3, #4
   82584:	b2db      	uxtb	r3, r3
   82586:	2b00      	cmp	r3, #0
   82588:	d001      	beq.n	8258e <udd_ep_set_halt+0x56>
		return true; // Already STALL
   8258a:	2301      	movs	r3, #1
   8258c:	e054      	b.n	82638 <udd_ep_set_halt+0x100>
	}

	if (ptr_job->busy == true) {
   8258e:	68bb      	ldr	r3, [r7, #8]
   82590:	7d1b      	ldrb	r3, [r3, #20]
   82592:	f003 0301 	and.w	r3, r3, #1
   82596:	b2db      	uxtb	r3, r3
   82598:	2b00      	cmp	r3, #0
   8259a:	d001      	beq.n	825a0 <udd_ep_set_halt+0x68>
		return false; // Job on going, stall impossible
   8259c:	2300      	movs	r3, #0
   8259e:	e04b      	b.n	82638 <udd_ep_set_halt+0x100>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   825a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   825a4:	2b00      	cmp	r3, #0
   825a6:	da25      	bge.n	825f4 <udd_ep_set_halt+0xbc>
   825a8:	4a27      	ldr	r2, [pc, #156]	; (82648 <udd_ep_set_halt+0x110>)
   825aa:	7bfb      	ldrb	r3, [r7, #15]
   825ac:	015b      	lsls	r3, r3, #5
   825ae:	4413      	add	r3, r2
   825b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   825b4:	681b      	ldr	r3, [r3, #0]
   825b6:	0c9b      	lsrs	r3, r3, #18
   825b8:	f003 0303 	and.w	r3, r3, #3
   825bc:	2b00      	cmp	r3, #0
   825be:	d019      	beq.n	825f4 <udd_ep_set_halt+0xbc>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
   825c0:	68ba      	ldr	r2, [r7, #8]
   825c2:	7d13      	ldrb	r3, [r2, #20]
   825c4:	f043 0304 	orr.w	r3, r3, #4
   825c8:	7513      	strb	r3, [r2, #20]
			udd_enable_bank_interrupt(ep_index);
   825ca:	4a1f      	ldr	r2, [pc, #124]	; (82648 <udd_ep_set_halt+0x110>)
   825cc:	7bfb      	ldrb	r3, [r7, #15]
   825ce:	3308      	adds	r3, #8
   825d0:	015b      	lsls	r3, r3, #5
   825d2:	4413      	add	r3, r2
   825d4:	3304      	adds	r3, #4
   825d6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   825da:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep_index);
   825dc:	4b1a      	ldr	r3, [pc, #104]	; (82648 <udd_ep_set_halt+0x110>)
   825de:	691a      	ldr	r2, [r3, #16]
   825e0:	7bfb      	ldrb	r3, [r7, #15]
   825e2:	f44f 7180 	mov.w	r1, #256	; 0x100
   825e6:	fa01 f303 	lsl.w	r3, r1, r3
   825ea:	4917      	ldr	r1, [pc, #92]	; (82648 <udd_ep_set_halt+0x110>)
   825ec:	4313      	orrs	r3, r2
   825ee:	610b      	str	r3, [r1, #16]
			dbg_print("<reqHalt%x> ", ep);
			return true;
   825f0:	2301      	movs	r3, #1
   825f2:	e021      	b.n	82638 <udd_ep_set_halt+0x100>
	}

	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   825f4:	4a14      	ldr	r2, [pc, #80]	; (82648 <udd_ep_set_halt+0x110>)
   825f6:	7bfb      	ldrb	r3, [r7, #15]
   825f8:	015b      	lsls	r3, r3, #5
   825fa:	4413      	add	r3, r2
   825fc:	f503 7384 	add.w	r3, r3, #264	; 0x108
   82600:	681a      	ldr	r2, [r3, #0]
   82602:	4911      	ldr	r1, [pc, #68]	; (82648 <udd_ep_set_halt+0x110>)
   82604:	7bfb      	ldrb	r3, [r7, #15]
   82606:	f022 0202 	bic.w	r2, r2, #2
   8260a:	015b      	lsls	r3, r3, #5
   8260c:	440b      	add	r3, r1
   8260e:	f503 7384 	add.w	r3, r3, #264	; 0x108
   82612:	601a      	str	r2, [r3, #0]
	udd_ack_stall(ep_index);
   82614:	4a0c      	ldr	r2, [pc, #48]	; (82648 <udd_ep_set_halt+0x110>)
   82616:	7bfb      	ldrb	r3, [r7, #15]
   82618:	015b      	lsls	r3, r3, #5
   8261a:	4413      	add	r3, r2
   8261c:	f503 738c 	add.w	r3, r3, #280	; 0x118
   82620:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   82624:	601a      	str	r2, [r3, #0]
	udd_enable_stall_handshake(ep_index);
   82626:	4a08      	ldr	r2, [pc, #32]	; (82648 <udd_ep_set_halt+0x110>)
   82628:	7bfb      	ldrb	r3, [r7, #15]
   8262a:	015b      	lsls	r3, r3, #5
   8262c:	4413      	add	r3, r2
   8262e:	f503 738a 	add.w	r3, r3, #276	; 0x114
   82632:	2220      	movs	r2, #32
   82634:	601a      	str	r2, [r3, #0]
	dbg_print("<Halt%x> ", ep);
	return true;
   82636:	2301      	movs	r3, #1
}
   82638:	4618      	mov	r0, r3
   8263a:	3714      	adds	r7, #20
   8263c:	46bd      	mov	sp, r7
   8263e:	bc80      	pop	{r7}
   82640:	4770      	bx	lr
   82642:	bf00      	nop
   82644:	20001284 	.word	0x20001284
   82648:	400a4000 	.word	0x400a4000

0008264c <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   8264c:	b580      	push	{r7, lr}
   8264e:	b084      	sub	sp, #16
   82650:	af00      	add	r7, sp, #0
   82652:	4603      	mov	r3, r0
   82654:	71fb      	strb	r3, [r7, #7]
	bool b_stall_cleared = false;
   82656:	2300      	movs	r3, #0
   82658:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   8265a:	79fb      	ldrb	r3, [r7, #7]
   8265c:	f003 030f 	and.w	r3, r3, #15
   82660:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
   82662:	79fb      	ldrb	r3, [r7, #7]
   82664:	2b02      	cmp	r3, #2
   82666:	d901      	bls.n	8266c <udd_ep_clear_halt+0x20>
		return false;
   82668:	2300      	movs	r3, #0
   8266a:	e07e      	b.n	8276a <udd_ep_clear_halt+0x11e>
	ptr_job = &udd_ep_job[ep - 1];
   8266c:	79fb      	ldrb	r3, [r7, #7]
   8266e:	1e5a      	subs	r2, r3, #1
   82670:	4613      	mov	r3, r2
   82672:	005b      	lsls	r3, r3, #1
   82674:	4413      	add	r3, r2
   82676:	00db      	lsls	r3, r3, #3
   82678:	4a3e      	ldr	r2, [pc, #248]	; (82774 <udd_ep_clear_halt+0x128>)
   8267a:	4413      	add	r3, r2
   8267c:	60bb      	str	r3, [r7, #8]

	if (ptr_job->stall_requested) {
   8267e:	68bb      	ldr	r3, [r7, #8]
   82680:	7d1b      	ldrb	r3, [r3, #20]
   82682:	f003 0304 	and.w	r3, r3, #4
   82686:	b2db      	uxtb	r3, r3
   82688:	2b00      	cmp	r3, #0
   8268a:	d01a      	beq.n	826c2 <udd_ep_clear_halt+0x76>
		// Endpoint stall has been requested but not done
		// Remove stall request
		dbg_print("<unWHalt%x> ", ep);
		ptr_job->stall_requested = false;
   8268c:	68ba      	ldr	r2, [r7, #8]
   8268e:	7d13      	ldrb	r3, [r2, #20]
   82690:	f36f 0382 	bfc	r3, #2, #1
   82694:	7513      	strb	r3, [r2, #20]
		udd_disable_bank_interrupt(ep);
   82696:	4a38      	ldr	r2, [pc, #224]	; (82778 <udd_ep_clear_halt+0x12c>)
   82698:	79fb      	ldrb	r3, [r7, #7]
   8269a:	015b      	lsls	r3, r3, #5
   8269c:	4413      	add	r3, r2
   8269e:	f503 7384 	add.w	r3, r3, #264	; 0x108
   826a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   826a6:	601a      	str	r2, [r3, #0]
		udd_disable_endpoint_interrupt(ep);
   826a8:	4b33      	ldr	r3, [pc, #204]	; (82778 <udd_ep_clear_halt+0x12c>)
   826aa:	691a      	ldr	r2, [r3, #16]
   826ac:	79fb      	ldrb	r3, [r7, #7]
   826ae:	f44f 7180 	mov.w	r1, #256	; 0x100
   826b2:	fa01 f303 	lsl.w	r3, r1, r3
   826b6:	43db      	mvns	r3, r3
   826b8:	492f      	ldr	r1, [pc, #188]	; (82778 <udd_ep_clear_halt+0x12c>)
   826ba:	4013      	ands	r3, r2
   826bc:	610b      	str	r3, [r1, #16]
		b_stall_cleared = true;
   826be:	2301      	movs	r3, #1
   826c0:	73fb      	strb	r3, [r7, #15]
	}
	if (Is_udd_endpoint_stall_requested(ep)) {
   826c2:	4a2d      	ldr	r2, [pc, #180]	; (82778 <udd_ep_clear_halt+0x12c>)
   826c4:	79fb      	ldrb	r3, [r7, #7]
   826c6:	015b      	lsls	r3, r3, #5
   826c8:	4413      	add	r3, r2
   826ca:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   826ce:	681b      	ldr	r3, [r3, #0]
   826d0:	f003 0320 	and.w	r3, r3, #32
   826d4:	2b00      	cmp	r3, #0
   826d6:	d035      	beq.n	82744 <udd_ep_clear_halt+0xf8>
		dbg_print("<unHalt%x> ", ep);
		if (Is_udd_stall(ep)) {
   826d8:	4a27      	ldr	r2, [pc, #156]	; (82778 <udd_ep_clear_halt+0x12c>)
   826da:	79fb      	ldrb	r3, [r7, #7]
   826dc:	015b      	lsls	r3, r3, #5
   826de:	4413      	add	r3, r2
   826e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   826e4:	681b      	ldr	r3, [r3, #0]
   826e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   826ea:	2b00      	cmp	r3, #0
   826ec:	d010      	beq.n	82710 <udd_ep_clear_halt+0xc4>
			udd_ack_stall(ep);
   826ee:	4a22      	ldr	r2, [pc, #136]	; (82778 <udd_ep_clear_halt+0x12c>)
   826f0:	79fb      	ldrb	r3, [r7, #7]
   826f2:	015b      	lsls	r3, r3, #5
   826f4:	4413      	add	r3, r2
   826f6:	f503 738c 	add.w	r3, r3, #280	; 0x118
   826fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   826fe:	601a      	str	r2, [r3, #0]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
   82700:	4a1d      	ldr	r2, [pc, #116]	; (82778 <udd_ep_clear_halt+0x12c>)
   82702:	79fb      	ldrb	r3, [r7, #7]
   82704:	015b      	lsls	r3, r3, #5
   82706:	4413      	add	r3, r2
   82708:	f503 738c 	add.w	r3, r3, #280	; 0x118
   8270c:	2240      	movs	r2, #64	; 0x40
   8270e:	601a      	str	r2, [r3, #0]
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
   82710:	4a19      	ldr	r2, [pc, #100]	; (82778 <udd_ep_clear_halt+0x12c>)
   82712:	79fb      	ldrb	r3, [r7, #7]
   82714:	015b      	lsls	r3, r3, #5
   82716:	4413      	add	r3, r2
   82718:	f503 738c 	add.w	r3, r3, #280	; 0x118
   8271c:	2220      	movs	r2, #32
   8271e:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_bank_autoswitch(ep);
   82720:	4a15      	ldr	r2, [pc, #84]	; (82778 <udd_ep_clear_halt+0x12c>)
   82722:	79fb      	ldrb	r3, [r7, #7]
   82724:	3308      	adds	r3, #8
   82726:	015b      	lsls	r3, r3, #5
   82728:	4413      	add	r3, r2
   8272a:	3304      	adds	r3, #4
   8272c:	681a      	ldr	r2, [r3, #0]
   8272e:	4912      	ldr	r1, [pc, #72]	; (82778 <udd_ep_clear_halt+0x12c>)
   82730:	79fb      	ldrb	r3, [r7, #7]
   82732:	f042 0202 	orr.w	r2, r2, #2
   82736:	3308      	adds	r3, #8
   82738:	015b      	lsls	r3, r3, #5
   8273a:	440b      	add	r3, r1
   8273c:	3304      	adds	r3, #4
   8273e:	601a      	str	r2, [r3, #0]
		b_stall_cleared = true;
   82740:	2301      	movs	r3, #1
   82742:	73fb      	strb	r3, [r7, #15]
	}
	if (b_stall_cleared) {
   82744:	7bfb      	ldrb	r3, [r7, #15]
   82746:	2b00      	cmp	r3, #0
   82748:	d00e      	beq.n	82768 <udd_ep_clear_halt+0x11c>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   8274a:	68bb      	ldr	r3, [r7, #8]
   8274c:	7d1b      	ldrb	r3, [r3, #20]
   8274e:	f003 0301 	and.w	r3, r3, #1
   82752:	b2db      	uxtb	r3, r3
   82754:	2b00      	cmp	r3, #0
   82756:	d007      	beq.n	82768 <udd_ep_clear_halt+0x11c>
			ptr_job->busy = false;
   82758:	68ba      	ldr	r2, [r7, #8]
   8275a:	7d13      	ldrb	r3, [r2, #20]
   8275c:	f36f 0300 	bfc	r3, #0, #1
   82760:	7513      	strb	r3, [r2, #20]
			ptr_job->call_nohalt();
   82762:	68bb      	ldr	r3, [r7, #8]
   82764:	681b      	ldr	r3, [r3, #0]
   82766:	4798      	blx	r3
		}
	}
	return true;
   82768:	2301      	movs	r3, #1
}
   8276a:	4618      	mov	r0, r3
   8276c:	3710      	adds	r7, #16
   8276e:	46bd      	mov	sp, r7
   82770:	bd80      	pop	{r7, pc}
   82772:	bf00      	nop
   82774:	20001284 	.word	0x20001284
   82778:	400a4000 	.word	0x400a4000

0008277c <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   8277c:	b580      	push	{r7, lr}
   8277e:	b086      	sub	sp, #24
   82780:	af00      	add	r7, sp, #0
   82782:	60ba      	str	r2, [r7, #8]
   82784:	607b      	str	r3, [r7, #4]
   82786:	4603      	mov	r3, r0
   82788:	73fb      	strb	r3, [r7, #15]
   8278a:	460b      	mov	r3, r1
   8278c:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   8278e:	7bfb      	ldrb	r3, [r7, #15]
   82790:	f003 030f 	and.w	r3, r3, #15
   82794:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
   82796:	7bfb      	ldrb	r3, [r7, #15]
   82798:	2b02      	cmp	r3, #2
   8279a:	d901      	bls.n	827a0 <udd_ep_run+0x24>
		return false;
   8279c:	2300      	movs	r3, #0
   8279e:	e063      	b.n	82868 <udd_ep_run+0xec>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   827a0:	7bfb      	ldrb	r3, [r7, #15]
   827a2:	1e5a      	subs	r2, r3, #1
   827a4:	4613      	mov	r3, r2
   827a6:	005b      	lsls	r3, r3, #1
   827a8:	4413      	add	r3, r2
   827aa:	00db      	lsls	r3, r3, #3
   827ac:	4a30      	ldr	r2, [pc, #192]	; (82870 <udd_ep_run+0xf4>)
   827ae:	4413      	add	r3, r2
   827b0:	617b      	str	r3, [r7, #20]

	if ((!Is_udd_endpoint_enabled(ep))
   827b2:	4a30      	ldr	r2, [pc, #192]	; (82874 <udd_ep_run+0xf8>)
   827b4:	7bfb      	ldrb	r3, [r7, #15]
   827b6:	015b      	lsls	r3, r3, #5
   827b8:	4413      	add	r3, r2
   827ba:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   827be:	681b      	ldr	r3, [r3, #0]
   827c0:	f003 0301 	and.w	r3, r3, #1
   827c4:	2b00      	cmp	r3, #0
   827c6:	d011      	beq.n	827ec <udd_ep_run+0x70>
			|| Is_udd_endpoint_stall_requested(ep)
   827c8:	4a2a      	ldr	r2, [pc, #168]	; (82874 <udd_ep_run+0xf8>)
   827ca:	7bfb      	ldrb	r3, [r7, #15]
   827cc:	015b      	lsls	r3, r3, #5
   827ce:	4413      	add	r3, r2
   827d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   827d4:	681b      	ldr	r3, [r3, #0]
   827d6:	f003 0320 	and.w	r3, r3, #32
   827da:	2b00      	cmp	r3, #0
   827dc:	d106      	bne.n	827ec <udd_ep_run+0x70>
			|| ptr_job->stall_requested) {
   827de:	697b      	ldr	r3, [r7, #20]
   827e0:	7d1b      	ldrb	r3, [r3, #20]
   827e2:	f003 0304 	and.w	r3, r3, #4
   827e6:	b2db      	uxtb	r3, r3
   827e8:	2b00      	cmp	r3, #0
   827ea:	d001      	beq.n	827f0 <udd_ep_run+0x74>
		return false; // Endpoint is halted
   827ec:	2300      	movs	r3, #0
   827ee:	e03b      	b.n	82868 <udd_ep_run+0xec>
	}

	flags = cpu_irq_save();
   827f0:	4b21      	ldr	r3, [pc, #132]	; (82878 <udd_ep_run+0xfc>)
   827f2:	4798      	blx	r3
   827f4:	6138      	str	r0, [r7, #16]
	if (ptr_job->busy == true) {
   827f6:	697b      	ldr	r3, [r7, #20]
   827f8:	7d1b      	ldrb	r3, [r3, #20]
   827fa:	f003 0301 	and.w	r3, r3, #1
   827fe:	b2db      	uxtb	r3, r3
   82800:	2b00      	cmp	r3, #0
   82802:	d004      	beq.n	8280e <udd_ep_run+0x92>
		cpu_irq_restore(flags);
   82804:	6938      	ldr	r0, [r7, #16]
   82806:	4b1d      	ldr	r3, [pc, #116]	; (8287c <udd_ep_run+0x100>)
   82808:	4798      	blx	r3
		return false; // Job already on going
   8280a:	2300      	movs	r3, #0
   8280c:	e02c      	b.n	82868 <udd_ep_run+0xec>
	}
	ptr_job->busy = true;
   8280e:	697a      	ldr	r2, [r7, #20]
   82810:	7d13      	ldrb	r3, [r2, #20]
   82812:	f043 0301 	orr.w	r3, r3, #1
   82816:	7513      	strb	r3, [r2, #20]
	cpu_irq_restore(flags);
   82818:	6938      	ldr	r0, [r7, #16]
   8281a:	4b18      	ldr	r3, [pc, #96]	; (8287c <udd_ep_run+0x100>)
   8281c:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   8281e:	697b      	ldr	r3, [r7, #20]
   82820:	68ba      	ldr	r2, [r7, #8]
   82822:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
   82824:	697b      	ldr	r3, [r7, #20]
   82826:	687a      	ldr	r2, [r7, #4]
   82828:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
   8282a:	697b      	ldr	r3, [r7, #20]
   8282c:	2200      	movs	r2, #0
   8282e:	60da      	str	r2, [r3, #12]
	ptr_job->buf_load = 0;
   82830:	697b      	ldr	r3, [r7, #20]
   82832:	2200      	movs	r2, #0
   82834:	611a      	str	r2, [r3, #16]
	ptr_job->call_trans = callback;
   82836:	697b      	ldr	r3, [r7, #20]
   82838:	6a3a      	ldr	r2, [r7, #32]
   8283a:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   8283c:	7bbb      	ldrb	r3, [r7, #14]
   8283e:	2b00      	cmp	r3, #0
   82840:	d102      	bne.n	82848 <udd_ep_run+0xcc>
   82842:	687b      	ldr	r3, [r7, #4]
   82844:	2b00      	cmp	r3, #0
   82846:	d101      	bne.n	8284c <udd_ep_run+0xd0>
   82848:	2301      	movs	r3, #1
   8284a:	e000      	b.n	8284e <udd_ep_run+0xd2>
   8284c:	2300      	movs	r3, #0
   8284e:	f003 0301 	and.w	r3, r3, #1
   82852:	b2d9      	uxtb	r1, r3
   82854:	697a      	ldr	r2, [r7, #20]
   82856:	7d13      	ldrb	r3, [r2, #20]
   82858:	f361 0341 	bfi	r3, r1, #1, #1
   8285c:	7513      	strb	r3, [r2, #20]

	// Request first DMA transfer
	//dbg_print("runDMA%d\n\r", ep);
	udd_ep_trans_done(ep);
   8285e:	7bfb      	ldrb	r3, [r7, #15]
   82860:	4618      	mov	r0, r3
   82862:	4b07      	ldr	r3, [pc, #28]	; (82880 <udd_ep_run+0x104>)
   82864:	4798      	blx	r3
	return true;
   82866:	2301      	movs	r3, #1
}
   82868:	4618      	mov	r0, r3
   8286a:	3718      	adds	r7, #24
   8286c:	46bd      	mov	sp, r7
   8286e:	bd80      	pop	{r7, pc}
   82870:	20001284 	.word	0x20001284
   82874:	400a4000 	.word	0x400a4000
   82878:	00081b4d 	.word	0x00081b4d
   8287c:	00081ba5 	.word	0x00081ba5
   82880:	00083335 	.word	0x00083335

00082884 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
   82884:	b580      	push	{r7, lr}
   82886:	b084      	sub	sp, #16
   82888:	af00      	add	r7, sp, #0
   8288a:	4603      	mov	r3, r0
   8288c:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8288e:	79fb      	ldrb	r3, [r7, #7]
   82890:	f003 030f 	and.w	r3, r3, #15
   82894:	73fb      	strb	r3, [r7, #15]
	// Stop DMA transfer
	udd_endpoint_dma_set_control(ep_index, 0);
   82896:	7bfb      	ldrb	r3, [r7, #15]
   82898:	011a      	lsls	r2, r3, #4
   8289a:	4b19      	ldr	r3, [pc, #100]	; (82900 <udd_ep_abort+0x7c>)
   8289c:	4413      	add	r3, r2
   8289e:	2200      	movs	r2, #0
   828a0:	609a      	str	r2, [r3, #8]
	// Kill banks for IN
	if (ep & USB_EP_DIR_IN) {
   828a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
   828a6:	2b00      	cmp	r3, #0
   828a8:	da21      	bge.n	828ee <udd_ep_abort+0x6a>
		for(;udd_nb_busy_bank(ep_index);) {
   828aa:	e014      	b.n	828d6 <udd_ep_abort+0x52>
			udd_kill_last_in_bank(ep_index);
   828ac:	4a15      	ldr	r2, [pc, #84]	; (82904 <udd_ep_abort+0x80>)
   828ae:	7bfb      	ldrb	r3, [r7, #15]
   828b0:	015b      	lsls	r3, r3, #5
   828b2:	4413      	add	r3, r2
   828b4:	f503 738a 	add.w	r3, r3, #276	; 0x114
   828b8:	f44f 7200 	mov.w	r2, #512	; 0x200
   828bc:	601a      	str	r2, [r3, #0]
			while(Is_udd_kill_last(ep_index));
   828be:	bf00      	nop
   828c0:	4a10      	ldr	r2, [pc, #64]	; (82904 <udd_ep_abort+0x80>)
   828c2:	7bfb      	ldrb	r3, [r7, #15]
   828c4:	015b      	lsls	r3, r3, #5
   828c6:	4413      	add	r3, r2
   828c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   828cc:	681b      	ldr	r3, [r3, #0]
   828ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
   828d2:	2b00      	cmp	r3, #0
   828d4:	d1f4      	bne.n	828c0 <udd_ep_abort+0x3c>
		for(;udd_nb_busy_bank(ep_index);) {
   828d6:	4a0b      	ldr	r2, [pc, #44]	; (82904 <udd_ep_abort+0x80>)
   828d8:	7bfb      	ldrb	r3, [r7, #15]
   828da:	015b      	lsls	r3, r3, #5
   828dc:	4413      	add	r3, r2
   828de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   828e2:	681b      	ldr	r3, [r3, #0]
   828e4:	0c9b      	lsrs	r3, r3, #18
   828e6:	f003 0303 	and.w	r3, r3, #3
   828ea:	2b00      	cmp	r3, #0
   828ec:	d1de      	bne.n	828ac <udd_ep_abort+0x28>
		}
	}
	udd_ep_abort_job(ep);
   828ee:	79fb      	ldrb	r3, [r7, #7]
   828f0:	4618      	mov	r0, r3
   828f2:	4b05      	ldr	r3, [pc, #20]	; (82908 <udd_ep_abort+0x84>)
   828f4:	4798      	blx	r3
}
   828f6:	bf00      	nop
   828f8:	3710      	adds	r7, #16
   828fa:	46bd      	mov	sp, r7
   828fc:	bd80      	pop	{r7, pc}
   828fe:	bf00      	nop
   82900:	400a4300 	.word	0x400a4300
   82904:	400a4000 	.word	0x400a4000
   82908:	00083289 	.word	0x00083289

0008290c <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
   8290c:	b480      	push	{r7}
   8290e:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   82910:	4b0a      	ldr	r3, [pc, #40]	; (8293c <udd_test_mode_j+0x30>)
   82912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   82916:	f023 0303 	bic.w	r3, r3, #3
   8291a:	4a08      	ldr	r2, [pc, #32]	; (8293c <udd_test_mode_j+0x30>)
   8291c:	f043 0302 	orr.w	r3, r3, #2
   82920:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   82924:	4b05      	ldr	r3, [pc, #20]	; (8293c <udd_test_mode_j+0x30>)
   82926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8292a:	4a04      	ldr	r2, [pc, #16]	; (8293c <udd_test_mode_j+0x30>)
   8292c:	f043 0304 	orr.w	r3, r3, #4
   82930:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   82934:	bf00      	nop
   82936:	46bd      	mov	sp, r7
   82938:	bc80      	pop	{r7}
   8293a:	4770      	bx	lr
   8293c:	400a4000 	.word	0x400a4000

00082940 <udd_test_mode_k>:


void udd_test_mode_k(void)
{
   82940:	b480      	push	{r7}
   82942:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   82944:	4b0a      	ldr	r3, [pc, #40]	; (82970 <udd_test_mode_k+0x30>)
   82946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8294a:	f023 0303 	bic.w	r3, r3, #3
   8294e:	4a08      	ldr	r2, [pc, #32]	; (82970 <udd_test_mode_k+0x30>)
   82950:	f043 0302 	orr.w	r3, r3, #2
   82954:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   82958:	4b05      	ldr	r3, [pc, #20]	; (82970 <udd_test_mode_k+0x30>)
   8295a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8295e:	4a04      	ldr	r2, [pc, #16]	; (82970 <udd_test_mode_k+0x30>)
   82960:	f043 0308 	orr.w	r3, r3, #8
   82964:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   82968:	bf00      	nop
   8296a:	46bd      	mov	sp, r7
   8296c:	bc80      	pop	{r7}
   8296e:	4770      	bx	lr
   82970:	400a4000 	.word	0x400a4000

00082974 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
   82974:	b480      	push	{r7}
   82976:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   82978:	4b06      	ldr	r3, [pc, #24]	; (82994 <udd_test_mode_se0_nak+0x20>)
   8297a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8297e:	f023 0303 	bic.w	r3, r3, #3
   82982:	4a04      	ldr	r2, [pc, #16]	; (82994 <udd_test_mode_se0_nak+0x20>)
   82984:	f043 0302 	orr.w	r3, r3, #2
   82988:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   8298c:	bf00      	nop
   8298e:	46bd      	mov	sp, r7
   82990:	bc80      	pop	{r7}
   82992:	4770      	bx	lr
   82994:	400a4000 	.word	0x400a4000

00082998 <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
   82998:	b4b0      	push	{r4, r5, r7}
   8299a:	b093      	sub	sp, #76	; 0x4c
   8299c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   8299e:	4b2e      	ldr	r3, [pc, #184]	; (82a58 <udd_test_mode_packet+0xc0>)
   829a0:	1d3c      	adds	r4, r7, #4
   829a2:	461d      	mov	r5, r3
   829a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   829a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   829a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   829aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   829ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   829ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   829b0:	e895 0003 	ldmia.w	r5, {r0, r1}
   829b4:	6020      	str	r0, [r4, #0]
   829b6:	3404      	adds	r4, #4
   829b8:	7021      	strb	r1, [r4, #0]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   829ba:	4b28      	ldr	r3, [pc, #160]	; (82a5c <udd_test_mode_packet+0xc4>)
   829bc:	2201      	movs	r2, #1
   829be:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   829c2:	4b26      	ldr	r3, [pc, #152]	; (82a5c <udd_test_mode_packet+0xc4>)
   829c4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   829c8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   829cc:	f023 0303 	bic.w	r3, r3, #3
   829d0:	4a22      	ldr	r2, [pc, #136]	; (82a5c <udd_test_mode_packet+0xc4>)
   829d2:	f043 036b 	orr.w	r3, r3, #107	; 0x6b
   829d6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_EP_TYPE_BULK, // Type: bulk
			1, // dir: IN
			64, //Size
			1, // Bank Number
			0); // NB Trans (not used for bulk ept)
	udd_enable_endpoint(0);
   829da:	4b20      	ldr	r3, [pc, #128]	; (82a5c <udd_test_mode_packet+0xc4>)
   829dc:	2201      	movs	r2, #1
   829de:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	udd_enable_hs_test_mode();
   829e2:	4b1e      	ldr	r3, [pc, #120]	; (82a5c <udd_test_mode_packet+0xc4>)
   829e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   829e8:	f023 0303 	bic.w	r3, r3, #3
   829ec:	4a1b      	ldr	r2, [pc, #108]	; (82a5c <udd_test_mode_packet+0xc4>)
   829ee:	f043 0302 	orr.w	r3, r3, #2
   829f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   829f6:	4b19      	ldr	r3, [pc, #100]	; (82a5c <udd_test_mode_packet+0xc4>)
   829f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   829fc:	4a17      	ldr	r2, [pc, #92]	; (82a5c <udd_test_mode_packet+0xc4>)
   829fe:	f043 0310 	orr.w	r3, r3, #16
   82a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   82a06:	4b16      	ldr	r3, [pc, #88]	; (82a60 <udd_test_mode_packet+0xc8>)
   82a08:	643b      	str	r3, [r7, #64]	; 0x40
	ptr_src = test_packet;
   82a0a:	1d3b      	adds	r3, r7, #4
   82a0c:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (i = 0; i < sizeof(test_packet); i++) {
   82a0e:	2300      	movs	r3, #0
   82a10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   82a14:	e00c      	b.n	82a30 <udd_test_mode_packet+0x98>
		*ptr_dest++ = *ptr_src++;
   82a16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   82a18:	1c53      	adds	r3, r2, #1
   82a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   82a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   82a1e:	1c59      	adds	r1, r3, #1
   82a20:	6439      	str	r1, [r7, #64]	; 0x40
   82a22:	7812      	ldrb	r2, [r2, #0]
   82a24:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   82a26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   82a2a:	3301      	adds	r3, #1
   82a2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   82a30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   82a34:	2b34      	cmp	r3, #52	; 0x34
   82a36:	d9ee      	bls.n	82a16 <udd_test_mode_packet+0x7e>
	}
	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   82a38:	4b08      	ldr	r3, [pc, #32]	; (82a5c <udd_test_mode_packet+0xc4>)
   82a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82a3e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   82a42:	4b06      	ldr	r3, [pc, #24]	; (82a5c <udd_test_mode_packet+0xc4>)
   82a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
   82a48:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   82a4c:	bf00      	nop
   82a4e:	374c      	adds	r7, #76	; 0x4c
   82a50:	46bd      	mov	sp, r7
   82a52:	bcb0      	pop	{r4, r5, r7}
   82a54:	4770      	bx	lr
   82a56:	bf00      	nop
   82a58:	0008aad4 	.word	0x0008aad4
   82a5c:	400a4000 	.word	0x400a4000
   82a60:	20180000 	.word	0x20180000

00082a64 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
   82a64:	b580      	push	{r7, lr}
   82a66:	b082      	sub	sp, #8
   82a68:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   82a6a:	4b1b      	ldr	r3, [pc, #108]	; (82ad8 <udd_reset_ep_ctrl+0x74>)
   82a6c:	681b      	ldr	r3, [r3, #0]
   82a6e:	4a1a      	ldr	r2, [pc, #104]	; (82ad8 <udd_reset_ep_ctrl+0x74>)
   82a70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82a74:	6013      	str	r3, [r2, #0]
	udd_enable_address();
   82a76:	4b18      	ldr	r3, [pc, #96]	; (82ad8 <udd_reset_ep_ctrl+0x74>)
   82a78:	681b      	ldr	r3, [r3, #0]
   82a7a:	4a17      	ldr	r2, [pc, #92]	; (82ad8 <udd_reset_ep_ctrl+0x74>)
   82a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82a80:	6013      	str	r3, [r2, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   82a82:	4b15      	ldr	r3, [pc, #84]	; (82ad8 <udd_reset_ep_ctrl+0x74>)
   82a84:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   82a88:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   82a8c:	f023 0303 	bic.w	r3, r3, #3
   82a90:	4a11      	ldr	r2, [pc, #68]	; (82ad8 <udd_reset_ep_ctrl+0x74>)
   82a92:	f043 0343 	orr.w	r3, r3, #67	; 0x43
   82a96:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_DEVICE_EP_CTRL_SIZE,
			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
			0);

	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
	udd_enable_endpoint(0);
   82a9a:	4b0f      	ldr	r3, [pc, #60]	; (82ad8 <udd_reset_ep_ctrl+0x74>)
   82a9c:	2201      	movs	r2, #1
   82a9e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	flags = cpu_irq_save();
   82aa2:	4b0e      	ldr	r3, [pc, #56]	; (82adc <udd_reset_ep_ctrl+0x78>)
   82aa4:	4798      	blx	r3
   82aa6:	6078      	str	r0, [r7, #4]
	udd_enable_setup_received_interrupt(0);
   82aa8:	4b0b      	ldr	r3, [pc, #44]	; (82ad8 <udd_reset_ep_ctrl+0x74>)
   82aaa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82aae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   82ab2:	4b09      	ldr	r3, [pc, #36]	; (82ad8 <udd_reset_ep_ctrl+0x74>)
   82ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
   82ab8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   82abc:	4b06      	ldr	r3, [pc, #24]	; (82ad8 <udd_reset_ep_ctrl+0x74>)
   82abe:	691b      	ldr	r3, [r3, #16]
   82ac0:	4a05      	ldr	r2, [pc, #20]	; (82ad8 <udd_reset_ep_ctrl+0x74>)
   82ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   82ac6:	6113      	str	r3, [r2, #16]
	cpu_irq_restore(flags);
   82ac8:	6878      	ldr	r0, [r7, #4]
   82aca:	4b05      	ldr	r3, [pc, #20]	; (82ae0 <udd_reset_ep_ctrl+0x7c>)
   82acc:	4798      	blx	r3
}
   82ace:	bf00      	nop
   82ad0:	3708      	adds	r7, #8
   82ad2:	46bd      	mov	sp, r7
   82ad4:	bd80      	pop	{r7, pc}
   82ad6:	bf00      	nop
   82ad8:	400a4000 	.word	0x400a4000
   82adc:	00081b4d 	.word	0x00081b4d
   82ae0:	00081ba5 	.word	0x00081ba5

00082ae4 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
   82ae4:	b580      	push	{r7, lr}
   82ae6:	b082      	sub	sp, #8
   82ae8:	af00      	add	r7, sp, #0
	irqflags_t flags;

	dbg_print("ctlInit ");

	flags = cpu_irq_save();
   82aea:	4b10      	ldr	r3, [pc, #64]	; (82b2c <udd_ctrl_init+0x48>)
   82aec:	4798      	blx	r3
   82aee:	6078      	str	r0, [r7, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   82af0:	4b0f      	ldr	r3, [pc, #60]	; (82b30 <udd_ctrl_init+0x4c>)
   82af2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82af6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   82afa:	6878      	ldr	r0, [r7, #4]
   82afc:	4b0d      	ldr	r3, [pc, #52]	; (82b34 <udd_ctrl_init+0x50>)
   82afe:	4798      	blx	r3

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   82b00:	4b0b      	ldr	r3, [pc, #44]	; (82b30 <udd_ctrl_init+0x4c>)
   82b02:	f44f 7200 	mov.w	r2, #512	; 0x200
   82b06:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   82b0a:	4b0b      	ldr	r3, [pc, #44]	; (82b38 <udd_ctrl_init+0x54>)
   82b0c:	2200      	movs	r2, #0
   82b0e:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   82b10:	4b09      	ldr	r3, [pc, #36]	; (82b38 <udd_ctrl_init+0x54>)
   82b12:	2200      	movs	r2, #0
   82b14:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
   82b16:	4b08      	ldr	r3, [pc, #32]	; (82b38 <udd_ctrl_init+0x54>)
   82b18:	2200      	movs	r2, #0
   82b1a:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   82b1c:	4b07      	ldr	r3, [pc, #28]	; (82b3c <udd_ctrl_init+0x58>)
   82b1e:	2200      	movs	r2, #0
   82b20:	701a      	strb	r2, [r3, #0]
}
   82b22:	bf00      	nop
   82b24:	3708      	adds	r7, #8
   82b26:	46bd      	mov	sp, r7
   82b28:	bd80      	pop	{r7, pc}
   82b2a:	bf00      	nop
   82b2c:	00081b4d 	.word	0x00081b4d
   82b30:	400a4000 	.word	0x400a4000
   82b34:	00081ba5 	.word	0x00081ba5
   82b38:	2000130c 	.word	0x2000130c
   82b3c:	2000127d 	.word	0x2000127d

00082b40 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
   82b40:	b580      	push	{r7, lr}
   82b42:	b084      	sub	sp, #16
   82b44:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   82b46:	4b40      	ldr	r3, [pc, #256]	; (82c48 <udd_ctrl_setup_received+0x108>)
   82b48:	781b      	ldrb	r3, [r3, #0]
   82b4a:	2b00      	cmp	r3, #0
   82b4c:	d003      	beq.n	82b56 <udd_ctrl_setup_received+0x16>
		dbg_print("sErr ");
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
   82b4e:	4b3f      	ldr	r3, [pc, #252]	; (82c4c <udd_ctrl_setup_received+0x10c>)
   82b50:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   82b52:	4b3f      	ldr	r3, [pc, #252]	; (82c50 <udd_ctrl_setup_received+0x110>)
   82b54:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   82b56:	4b3f      	ldr	r3, [pc, #252]	; (82c54 <udd_ctrl_setup_received+0x114>)
   82b58:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   82b5c:	0d1b      	lsrs	r3, r3, #20
   82b5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
   82b62:	2b08      	cmp	r3, #8
   82b64:	d007      	beq.n	82b76 <udd_ctrl_setup_received+0x36>
		dbg_print("cntErr ");
		udd_ctrl_stall_data();
   82b66:	4b3c      	ldr	r3, [pc, #240]	; (82c58 <udd_ctrl_setup_received+0x118>)
   82b68:	4798      	blx	r3
		udd_ack_setup_received(0);
   82b6a:	4b3a      	ldr	r3, [pc, #232]	; (82c54 <udd_ctrl_setup_received+0x114>)
   82b6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82b70:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   82b74:	e064      	b.n	82c40 <udd_ctrl_setup_received+0x100>
	}

	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   82b76:	4b39      	ldr	r3, [pc, #228]	; (82c5c <udd_ctrl_setup_received+0x11c>)
   82b78:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
   82b7a:	2300      	movs	r3, #0
   82b7c:	73fb      	strb	r3, [r7, #15]
   82b7e:	e00a      	b.n	82b96 <udd_ctrl_setup_received+0x56>
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   82b80:	68bb      	ldr	r3, [r7, #8]
   82b82:	1c5a      	adds	r2, r3, #1
   82b84:	60ba      	str	r2, [r7, #8]
   82b86:	7bfa      	ldrb	r2, [r7, #15]
   82b88:	4935      	ldr	r1, [pc, #212]	; (82c60 <udd_ctrl_setup_received+0x120>)
   82b8a:	440a      	add	r2, r1
   82b8c:	781b      	ldrb	r3, [r3, #0]
   82b8e:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < 8; i++) {
   82b90:	7bfb      	ldrb	r3, [r7, #15]
   82b92:	3301      	adds	r3, #1
   82b94:	73fb      	strb	r3, [r7, #15]
   82b96:	7bfb      	ldrb	r3, [r7, #15]
   82b98:	2b07      	cmp	r3, #7
   82b9a:	d9f1      	bls.n	82b80 <udd_ctrl_setup_received+0x40>
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
   82b9c:	4b30      	ldr	r3, [pc, #192]	; (82c60 <udd_ctrl_setup_received+0x120>)
   82b9e:	885a      	ldrh	r2, [r3, #2]
   82ba0:	4b2f      	ldr	r3, [pc, #188]	; (82c60 <udd_ctrl_setup_received+0x120>)
   82ba2:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
   82ba4:	4b2e      	ldr	r3, [pc, #184]	; (82c60 <udd_ctrl_setup_received+0x120>)
   82ba6:	889a      	ldrh	r2, [r3, #4]
   82ba8:	4b2d      	ldr	r3, [pc, #180]	; (82c60 <udd_ctrl_setup_received+0x120>)
   82baa:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
   82bac:	4b2c      	ldr	r3, [pc, #176]	; (82c60 <udd_ctrl_setup_received+0x120>)
   82bae:	88da      	ldrh	r2, [r3, #6]
   82bb0:	4b2b      	ldr	r3, [pc, #172]	; (82c60 <udd_ctrl_setup_received+0x120>)
   82bb2:	80da      	strh	r2, [r3, #6]
			udd_g_ctrlreq.req.bRequest, udd_g_ctrlreq.req.bmRequestType,
			udd_g_ctrlreq.req.wValue, udd_g_ctrlreq.req.wIndex,
			udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   82bb4:	4b2b      	ldr	r3, [pc, #172]	; (82c64 <udd_ctrl_setup_received+0x124>)
   82bb6:	4798      	blx	r3
   82bb8:	4603      	mov	r3, r0
   82bba:	f083 0301 	eor.w	r3, r3, #1
   82bbe:	b2db      	uxtb	r3, r3
   82bc0:	2b00      	cmp	r3, #0
   82bc2:	d007      	beq.n	82bd4 <udd_ctrl_setup_received+0x94>
		// Setup request unknown then stall it
		dbg_print("ProcErr ");
		udd_ctrl_stall_data();
   82bc4:	4b24      	ldr	r3, [pc, #144]	; (82c58 <udd_ctrl_setup_received+0x118>)
   82bc6:	4798      	blx	r3
		udd_ack_setup_received(0);
   82bc8:	4b22      	ldr	r3, [pc, #136]	; (82c54 <udd_ctrl_setup_received+0x114>)
   82bca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82bce:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   82bd2:	e035      	b.n	82c40 <udd_ctrl_setup_received+0x100>
	}
	udd_ack_setup_received(0);
   82bd4:	4b1f      	ldr	r3, [pc, #124]	; (82c54 <udd_ctrl_setup_received+0x114>)
   82bd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82bda:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	if (Udd_setup_is_in()) {
   82bde:	4b20      	ldr	r3, [pc, #128]	; (82c60 <udd_ctrl_setup_received+0x120>)
   82be0:	781b      	ldrb	r3, [r3, #0]
   82be2:	b25b      	sxtb	r3, r3
   82be4:	2b00      	cmp	r3, #0
   82be6:	da0b      	bge.n	82c00 <udd_ctrl_setup_received+0xc0>
		dbg_print("_I ");
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   82be8:	4b1f      	ldr	r3, [pc, #124]	; (82c68 <udd_ctrl_setup_received+0x128>)
   82bea:	2200      	movs	r2, #0
   82bec:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   82bee:	4b1f      	ldr	r3, [pc, #124]	; (82c6c <udd_ctrl_setup_received+0x12c>)
   82bf0:	2200      	movs	r2, #0
   82bf2:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   82bf4:	4b14      	ldr	r3, [pc, #80]	; (82c48 <udd_ctrl_setup_received+0x108>)
   82bf6:	2202      	movs	r2, #2
   82bf8:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   82bfa:	4b1d      	ldr	r3, [pc, #116]	; (82c70 <udd_ctrl_setup_received+0x130>)
   82bfc:	4798      	blx	r3
   82bfe:	e01f      	b.n	82c40 <udd_ctrl_setup_received+0x100>
	} else {
		dbg_print("_O ");
		if (0 == udd_g_ctrlreq.req.wLength) {
   82c00:	4b17      	ldr	r3, [pc, #92]	; (82c60 <udd_ctrl_setup_received+0x120>)
   82c02:	88db      	ldrh	r3, [r3, #6]
   82c04:	2b00      	cmp	r3, #0
   82c06:	d102      	bne.n	82c0e <udd_ctrl_setup_received+0xce>
			// No data phase requested
			dbg_print("Zl ");
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   82c08:	4b1a      	ldr	r3, [pc, #104]	; (82c74 <udd_ctrl_setup_received+0x134>)
   82c0a:	4798      	blx	r3
			return;
   82c0c:	e018      	b.n	82c40 <udd_ctrl_setup_received+0x100>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   82c0e:	4b16      	ldr	r3, [pc, #88]	; (82c68 <udd_ctrl_setup_received+0x128>)
   82c10:	2200      	movs	r2, #0
   82c12:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   82c14:	4b15      	ldr	r3, [pc, #84]	; (82c6c <udd_ctrl_setup_received+0x12c>)
   82c16:	2200      	movs	r2, #0
   82c18:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   82c1a:	4b0b      	ldr	r3, [pc, #44]	; (82c48 <udd_ctrl_setup_received+0x108>)
   82c1c:	2201      	movs	r2, #1
   82c1e:	701a      	strb	r2, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   82c20:	4b0c      	ldr	r3, [pc, #48]	; (82c54 <udd_ctrl_setup_received+0x114>)
   82c22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   82c26:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		flags = cpu_irq_save();
   82c2a:	4b13      	ldr	r3, [pc, #76]	; (82c78 <udd_ctrl_setup_received+0x138>)
   82c2c:	4798      	blx	r3
   82c2e:	6078      	str	r0, [r7, #4]
		udd_enable_nak_in_interrupt(0);
   82c30:	4b08      	ldr	r3, [pc, #32]	; (82c54 <udd_ctrl_setup_received+0x114>)
   82c32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   82c36:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		cpu_irq_restore(flags);
   82c3a:	6878      	ldr	r0, [r7, #4]
   82c3c:	4b0f      	ldr	r3, [pc, #60]	; (82c7c <udd_ctrl_setup_received+0x13c>)
   82c3e:	4798      	blx	r3
	}
}
   82c40:	3710      	adds	r7, #16
   82c42:	46bd      	mov	sp, r7
   82c44:	bd80      	pop	{r7, pc}
   82c46:	bf00      	nop
   82c48:	2000127d 	.word	0x2000127d
   82c4c:	000830e9 	.word	0x000830e9
   82c50:	00082ae5 	.word	0x00082ae5
   82c54:	400a4000 	.word	0x400a4000
   82c58:	0008301d 	.word	0x0008301d
   82c5c:	20180000 	.word	0x20180000
   82c60:	2000130c 	.word	0x2000130c
   82c64:	00085421 	.word	0x00085421
   82c68:	2000127e 	.word	0x2000127e
   82c6c:	20001280 	.word	0x20001280
   82c70:	00082c81 	.word	0x00082c81
   82c74:	00083041 	.word	0x00083041
   82c78:	00081b4d 	.word	0x00081b4d
   82c7c:	00081ba5 	.word	0x00081ba5

00082c80 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
   82c80:	b580      	push	{r7, lr}
   82c82:	b084      	sub	sp, #16
   82c84:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
   82c86:	4b4c      	ldr	r3, [pc, #304]	; (82db8 <udd_ctrl_in_sent+0x138>)
   82c88:	4798      	blx	r3
   82c8a:	6038      	str	r0, [r7, #0]
	udd_disable_in_send_interrupt(0);
   82c8c:	4b4b      	ldr	r3, [pc, #300]	; (82dbc <udd_ctrl_in_sent+0x13c>)
   82c8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82c92:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   82c96:	6838      	ldr	r0, [r7, #0]
   82c98:	4b49      	ldr	r3, [pc, #292]	; (82dc0 <udd_ctrl_in_sent+0x140>)
   82c9a:	4798      	blx	r3

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   82c9c:	4b49      	ldr	r3, [pc, #292]	; (82dc4 <udd_ctrl_in_sent+0x144>)
   82c9e:	781b      	ldrb	r3, [r3, #0]
   82ca0:	2b03      	cmp	r3, #3
   82ca2:	d104      	bne.n	82cae <udd_ctrl_in_sent+0x2e>
		dbg_print("ZlpE\n\r");
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   82ca4:	4b48      	ldr	r3, [pc, #288]	; (82dc8 <udd_ctrl_in_sent+0x148>)
   82ca6:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   82ca8:	4b48      	ldr	r3, [pc, #288]	; (82dcc <udd_ctrl_in_sent+0x14c>)
   82caa:	4798      	blx	r3
		return;
   82cac:	e081      	b.n	82db2 <udd_ctrl_in_sent+0x132>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   82cae:	4b48      	ldr	r3, [pc, #288]	; (82dd0 <udd_ctrl_in_sent+0x150>)
   82cb0:	899a      	ldrh	r2, [r3, #12]
   82cb2:	4b48      	ldr	r3, [pc, #288]	; (82dd4 <udd_ctrl_in_sent+0x154>)
   82cb4:	881b      	ldrh	r3, [r3, #0]
   82cb6:	1ad3      	subs	r3, r2, r3
   82cb8:	81fb      	strh	r3, [r7, #14]
	if (0 == nb_remain) {
   82cba:	89fb      	ldrh	r3, [r7, #14]
   82cbc:	2b00      	cmp	r3, #0
   82cbe:	d127      	bne.n	82d10 <udd_ctrl_in_sent+0x90>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   82cc0:	4b45      	ldr	r3, [pc, #276]	; (82dd8 <udd_ctrl_in_sent+0x158>)
   82cc2:	881a      	ldrh	r2, [r3, #0]
   82cc4:	4b43      	ldr	r3, [pc, #268]	; (82dd4 <udd_ctrl_in_sent+0x154>)
   82cc6:	881b      	ldrh	r3, [r3, #0]
   82cc8:	4413      	add	r3, r2
   82cca:	b29a      	uxth	r2, r3
   82ccc:	4b42      	ldr	r3, [pc, #264]	; (82dd8 <udd_ctrl_in_sent+0x158>)
   82cce:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   82cd0:	4b3f      	ldr	r3, [pc, #252]	; (82dd0 <udd_ctrl_in_sent+0x150>)
   82cd2:	88da      	ldrh	r2, [r3, #6]
   82cd4:	4b40      	ldr	r3, [pc, #256]	; (82dd8 <udd_ctrl_in_sent+0x158>)
   82cd6:	881b      	ldrh	r3, [r3, #0]
   82cd8:	429a      	cmp	r2, r3
   82cda:	d003      	beq.n	82ce4 <udd_ctrl_in_sent+0x64>
				|| b_shortpacket) {
   82cdc:	4b3f      	ldr	r3, [pc, #252]	; (82ddc <udd_ctrl_in_sent+0x15c>)
   82cde:	781b      	ldrb	r3, [r3, #0]
   82ce0:	2b00      	cmp	r3, #0
   82ce2:	d002      	beq.n	82cea <udd_ctrl_in_sent+0x6a>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			dbg_print("_zO ");
			udd_ctrl_send_zlp_out();
   82ce4:	4b3e      	ldr	r3, [pc, #248]	; (82de0 <udd_ctrl_in_sent+0x160>)
   82ce6:	4798      	blx	r3
			return;
   82ce8:	e063      	b.n	82db2 <udd_ctrl_in_sent+0x132>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   82cea:	4b39      	ldr	r3, [pc, #228]	; (82dd0 <udd_ctrl_in_sent+0x150>)
   82cec:	695b      	ldr	r3, [r3, #20]
   82cee:	2b00      	cmp	r3, #0
   82cf0:	d00e      	beq.n	82d10 <udd_ctrl_in_sent+0x90>
				|| (!udd_g_ctrlreq.over_under_run())) {
   82cf2:	4b37      	ldr	r3, [pc, #220]	; (82dd0 <udd_ctrl_in_sent+0x150>)
   82cf4:	695b      	ldr	r3, [r3, #20]
   82cf6:	4798      	blx	r3
   82cf8:	4603      	mov	r3, r0
   82cfa:	f083 0301 	eor.w	r3, r3, #1
   82cfe:	b2db      	uxtb	r3, r3
   82d00:	2b00      	cmp	r3, #0
   82d02:	d105      	bne.n	82d10 <udd_ctrl_in_sent+0x90>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   82d04:	4b33      	ldr	r3, [pc, #204]	; (82dd4 <udd_ctrl_in_sent+0x154>)
   82d06:	2200      	movs	r2, #0
   82d08:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   82d0a:	4b31      	ldr	r3, [pc, #196]	; (82dd0 <udd_ctrl_in_sent+0x150>)
   82d0c:	899b      	ldrh	r3, [r3, #12]
   82d0e:	81fb      	strh	r3, [r7, #14]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   82d10:	89fb      	ldrh	r3, [r7, #14]
   82d12:	2b3f      	cmp	r3, #63	; 0x3f
   82d14:	d905      	bls.n	82d22 <udd_ctrl_in_sent+0xa2>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   82d16:	2340      	movs	r3, #64	; 0x40
   82d18:	81fb      	strh	r3, [r7, #14]
		b_shortpacket = false;
   82d1a:	4b30      	ldr	r3, [pc, #192]	; (82ddc <udd_ctrl_in_sent+0x15c>)
   82d1c:	2200      	movs	r2, #0
   82d1e:	701a      	strb	r2, [r3, #0]
   82d20:	e002      	b.n	82d28 <udd_ctrl_in_sent+0xa8>
	} else {
		b_shortpacket = true;
   82d22:	4b2e      	ldr	r3, [pc, #184]	; (82ddc <udd_ctrl_in_sent+0x15c>)
   82d24:	2201      	movs	r2, #1
   82d26:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   82d28:	4b2e      	ldr	r3, [pc, #184]	; (82de4 <udd_ctrl_in_sent+0x164>)
   82d2a:	60bb      	str	r3, [r7, #8]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   82d2c:	4b28      	ldr	r3, [pc, #160]	; (82dd0 <udd_ctrl_in_sent+0x150>)
   82d2e:	689b      	ldr	r3, [r3, #8]
   82d30:	4a28      	ldr	r2, [pc, #160]	; (82dd4 <udd_ctrl_in_sent+0x154>)
   82d32:	8812      	ldrh	r2, [r2, #0]
   82d34:	4413      	add	r3, r2
   82d36:	607b      	str	r3, [r7, #4]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
   82d38:	4b1f      	ldr	r3, [pc, #124]	; (82db8 <udd_ctrl_in_sent+0x138>)
   82d3a:	4798      	blx	r3
   82d3c:	6038      	str	r0, [r7, #0]
	if (Is_udd_out_received(0)) {
   82d3e:	4b1f      	ldr	r3, [pc, #124]	; (82dbc <udd_ctrl_in_sent+0x13c>)
   82d40:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   82d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
   82d48:	2b00      	cmp	r3, #0
   82d4a:	d006      	beq.n	82d5a <udd_ctrl_in_sent+0xda>
		dbg_print("Abort ");
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
   82d4c:	6838      	ldr	r0, [r7, #0]
   82d4e:	4b1c      	ldr	r3, [pc, #112]	; (82dc0 <udd_ctrl_in_sent+0x140>)
   82d50:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   82d52:	4b1c      	ldr	r3, [pc, #112]	; (82dc4 <udd_ctrl_in_sent+0x144>)
   82d54:	2204      	movs	r2, #4
   82d56:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   82d58:	e02b      	b.n	82db2 <udd_ctrl_in_sent+0x132>
	}
	// dbg_print("t%d ", nb_remain);
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   82d5a:	2300      	movs	r3, #0
   82d5c:	737b      	strb	r3, [r7, #13]
   82d5e:	e00a      	b.n	82d76 <udd_ctrl_in_sent+0xf6>
		*ptr_dest++ = *ptr_src++;
   82d60:	687a      	ldr	r2, [r7, #4]
   82d62:	1c53      	adds	r3, r2, #1
   82d64:	607b      	str	r3, [r7, #4]
   82d66:	68bb      	ldr	r3, [r7, #8]
   82d68:	1c59      	adds	r1, r3, #1
   82d6a:	60b9      	str	r1, [r7, #8]
   82d6c:	7812      	ldrb	r2, [r2, #0]
   82d6e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_remain; i++) {
   82d70:	7b7b      	ldrb	r3, [r7, #13]
   82d72:	3301      	adds	r3, #1
   82d74:	737b      	strb	r3, [r7, #13]
   82d76:	7b7b      	ldrb	r3, [r7, #13]
   82d78:	b29b      	uxth	r3, r3
   82d7a:	89fa      	ldrh	r2, [r7, #14]
   82d7c:	429a      	cmp	r2, r3
   82d7e:	d8ef      	bhi.n	82d60 <udd_ctrl_in_sent+0xe0>
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   82d80:	4b14      	ldr	r3, [pc, #80]	; (82dd4 <udd_ctrl_in_sent+0x154>)
   82d82:	881a      	ldrh	r2, [r3, #0]
   82d84:	89fb      	ldrh	r3, [r7, #14]
   82d86:	4413      	add	r3, r2
   82d88:	b29a      	uxth	r2, r3
   82d8a:	4b12      	ldr	r3, [pc, #72]	; (82dd4 <udd_ctrl_in_sent+0x154>)
   82d8c:	801a      	strh	r2, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   82d8e:	4b0b      	ldr	r3, [pc, #44]	; (82dbc <udd_ctrl_in_sent+0x13c>)
   82d90:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82d94:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   82d98:	4b08      	ldr	r3, [pc, #32]	; (82dbc <udd_ctrl_in_sent+0x13c>)
   82d9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   82d9e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   82da2:	4b06      	ldr	r3, [pc, #24]	; (82dbc <udd_ctrl_in_sent+0x13c>)
   82da4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82da8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
   82dac:	6838      	ldr	r0, [r7, #0]
   82dae:	4b04      	ldr	r3, [pc, #16]	; (82dc0 <udd_ctrl_in_sent+0x140>)
   82db0:	4798      	blx	r3
}
   82db2:	3710      	adds	r7, #16
   82db4:	46bd      	mov	sp, r7
   82db6:	bd80      	pop	{r7, pc}
   82db8:	00081b4d 	.word	0x00081b4d
   82dbc:	400a4000 	.word	0x400a4000
   82dc0:	00081ba5 	.word	0x00081ba5
   82dc4:	2000127d 	.word	0x2000127d
   82dc8:	000830e9 	.word	0x000830e9
   82dcc:	00082ae5 	.word	0x00082ae5
   82dd0:	2000130c 	.word	0x2000130c
   82dd4:	20001280 	.word	0x20001280
   82dd8:	2000127e 	.word	0x2000127e
   82ddc:	200012b4 	.word	0x200012b4
   82de0:	000830a5 	.word	0x000830a5
   82de4:	20180000 	.word	0x20180000

00082de8 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
   82de8:	b580      	push	{r7, lr}
   82dea:	b084      	sub	sp, #16
   82dec:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   82dee:	4b61      	ldr	r3, [pc, #388]	; (82f74 <udd_ctrl_out_received+0x18c>)
   82df0:	781b      	ldrb	r3, [r3, #0]
   82df2:	2b01      	cmp	r3, #1
   82df4:	d00f      	beq.n	82e16 <udd_ctrl_out_received+0x2e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   82df6:	4b5f      	ldr	r3, [pc, #380]	; (82f74 <udd_ctrl_out_received+0x18c>)
   82df8:	781b      	ldrb	r3, [r3, #0]
   82dfa:	2b02      	cmp	r3, #2
   82dfc:	d003      	beq.n	82e06 <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   82dfe:	4b5d      	ldr	r3, [pc, #372]	; (82f74 <udd_ctrl_out_received+0x18c>)
   82e00:	781b      	ldrb	r3, [r3, #0]
   82e02:	2b04      	cmp	r3, #4
   82e04:	d102      	bne.n	82e0c <udd_ctrl_out_received+0x24>
			dbg_print("EoStp\n\r");
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
   82e06:	4b5c      	ldr	r3, [pc, #368]	; (82f78 <udd_ctrl_out_received+0x190>)
   82e08:	4798      	blx	r3
   82e0a:	e001      	b.n	82e10 <udd_ctrl_out_received+0x28>
		} else {
			dbg_print("ErrStp\n\r");
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   82e0c:	4b5b      	ldr	r3, [pc, #364]	; (82f7c <udd_ctrl_out_received+0x194>)
   82e0e:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   82e10:	4b5b      	ldr	r3, [pc, #364]	; (82f80 <udd_ctrl_out_received+0x198>)
   82e12:	4798      	blx	r3
		return;
   82e14:	e0ab      	b.n	82f6e <udd_ctrl_out_received+0x186>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   82e16:	4b5b      	ldr	r3, [pc, #364]	; (82f84 <udd_ctrl_out_received+0x19c>)
   82e18:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   82e1c:	0d1b      	lsrs	r3, r3, #20
   82e1e:	b29b      	uxth	r3, r3
   82e20:	f3c3 030a 	ubfx	r3, r3, #0, #11
   82e24:	81bb      	strh	r3, [r7, #12]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   82e26:	4b58      	ldr	r3, [pc, #352]	; (82f88 <udd_ctrl_out_received+0x1a0>)
   82e28:	899b      	ldrh	r3, [r3, #12]
   82e2a:	461a      	mov	r2, r3
   82e2c:	4b57      	ldr	r3, [pc, #348]	; (82f8c <udd_ctrl_out_received+0x1a4>)
   82e2e:	881b      	ldrh	r3, [r3, #0]
   82e30:	4619      	mov	r1, r3
   82e32:	89bb      	ldrh	r3, [r7, #12]
   82e34:	440b      	add	r3, r1
   82e36:	429a      	cmp	r2, r3
   82e38:	da05      	bge.n	82e46 <udd_ctrl_out_received+0x5e>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   82e3a:	4b53      	ldr	r3, [pc, #332]	; (82f88 <udd_ctrl_out_received+0x1a0>)
   82e3c:	899a      	ldrh	r2, [r3, #12]
   82e3e:	4b53      	ldr	r3, [pc, #332]	; (82f8c <udd_ctrl_out_received+0x1a4>)
   82e40:	881b      	ldrh	r3, [r3, #0]
   82e42:	1ad3      	subs	r3, r2, r3
   82e44:	81bb      	strh	r3, [r7, #12]
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   82e46:	4b52      	ldr	r3, [pc, #328]	; (82f90 <udd_ctrl_out_received+0x1a8>)
   82e48:	60bb      	str	r3, [r7, #8]
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   82e4a:	4b4f      	ldr	r3, [pc, #316]	; (82f88 <udd_ctrl_out_received+0x1a0>)
   82e4c:	689b      	ldr	r3, [r3, #8]
   82e4e:	4a4f      	ldr	r2, [pc, #316]	; (82f8c <udd_ctrl_out_received+0x1a4>)
   82e50:	8812      	ldrh	r2, [r2, #0]
   82e52:	4413      	add	r3, r2
   82e54:	607b      	str	r3, [r7, #4]
	for (i = 0; i < nb_data; i++) {
   82e56:	2300      	movs	r3, #0
   82e58:	73fb      	strb	r3, [r7, #15]
   82e5a:	e00a      	b.n	82e72 <udd_ctrl_out_received+0x8a>
		*ptr_dest++ = *ptr_src++;
   82e5c:	68ba      	ldr	r2, [r7, #8]
   82e5e:	1c53      	adds	r3, r2, #1
   82e60:	60bb      	str	r3, [r7, #8]
   82e62:	687b      	ldr	r3, [r7, #4]
   82e64:	1c59      	adds	r1, r3, #1
   82e66:	6079      	str	r1, [r7, #4]
   82e68:	7812      	ldrb	r2, [r2, #0]
   82e6a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_data; i++) {
   82e6c:	7bfb      	ldrb	r3, [r7, #15]
   82e6e:	3301      	adds	r3, #1
   82e70:	73fb      	strb	r3, [r7, #15]
   82e72:	7bfb      	ldrb	r3, [r7, #15]
   82e74:	b29b      	uxth	r3, r3
   82e76:	89ba      	ldrh	r2, [r7, #12]
   82e78:	429a      	cmp	r2, r3
   82e7a:	d8ef      	bhi.n	82e5c <udd_ctrl_out_received+0x74>
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   82e7c:	4b43      	ldr	r3, [pc, #268]	; (82f8c <udd_ctrl_out_received+0x1a4>)
   82e7e:	881a      	ldrh	r2, [r3, #0]
   82e80:	89bb      	ldrh	r3, [r7, #12]
   82e82:	4413      	add	r3, r2
   82e84:	b29a      	uxth	r2, r3
   82e86:	4b41      	ldr	r3, [pc, #260]	; (82f8c <udd_ctrl_out_received+0x1a4>)
   82e88:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   82e8a:	89bb      	ldrh	r3, [r7, #12]
   82e8c:	2b40      	cmp	r3, #64	; 0x40
   82e8e:	d10a      	bne.n	82ea6 <udd_ctrl_out_received+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   82e90:	4b3d      	ldr	r3, [pc, #244]	; (82f88 <udd_ctrl_out_received+0x1a0>)
   82e92:	88db      	ldrh	r3, [r3, #6]
   82e94:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_buf_cnt +
   82e96:	4b3f      	ldr	r3, [pc, #252]	; (82f94 <udd_ctrl_out_received+0x1ac>)
   82e98:	881b      	ldrh	r3, [r3, #0]
   82e9a:	4619      	mov	r1, r3
   82e9c:	4b3b      	ldr	r3, [pc, #236]	; (82f8c <udd_ctrl_out_received+0x1a4>)
   82e9e:	881b      	ldrh	r3, [r3, #0]
   82ea0:	440b      	add	r3, r1
			|| (udd_g_ctrlreq.req.wLength <=
   82ea2:	429a      	cmp	r2, r3
   82ea4:	dc20      	bgt.n	82ee8 <udd_ctrl_out_received+0x100>
			udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   82ea6:	4b39      	ldr	r3, [pc, #228]	; (82f8c <udd_ctrl_out_received+0x1a4>)
   82ea8:	881a      	ldrh	r2, [r3, #0]
   82eaa:	4b37      	ldr	r3, [pc, #220]	; (82f88 <udd_ctrl_out_received+0x1a0>)
   82eac:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   82eae:	4b36      	ldr	r3, [pc, #216]	; (82f88 <udd_ctrl_out_received+0x1a0>)
   82eb0:	695b      	ldr	r3, [r3, #20]
   82eb2:	2b00      	cmp	r3, #0
   82eb4:	d010      	beq.n	82ed8 <udd_ctrl_out_received+0xf0>
			if (!udd_g_ctrlreq.over_under_run()) {
   82eb6:	4b34      	ldr	r3, [pc, #208]	; (82f88 <udd_ctrl_out_received+0x1a0>)
   82eb8:	695b      	ldr	r3, [r3, #20]
   82eba:	4798      	blx	r3
   82ebc:	4603      	mov	r3, r0
   82ebe:	f083 0301 	eor.w	r3, r3, #1
   82ec2:	b2db      	uxtb	r3, r3
   82ec4:	2b00      	cmp	r3, #0
   82ec6:	d007      	beq.n	82ed8 <udd_ctrl_out_received+0xf0>
				// Stall ZLP
				udd_ctrl_stall_data();
   82ec8:	4b2c      	ldr	r3, [pc, #176]	; (82f7c <udd_ctrl_out_received+0x194>)
   82eca:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   82ecc:	4b2d      	ldr	r3, [pc, #180]	; (82f84 <udd_ctrl_out_received+0x19c>)
   82ece:	f44f 7200 	mov.w	r2, #512	; 0x200
   82ed2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   82ed6:	e04a      	b.n	82f6e <udd_ctrl_out_received+0x186>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   82ed8:	4b2a      	ldr	r3, [pc, #168]	; (82f84 <udd_ctrl_out_received+0x19c>)
   82eda:	f44f 7200 	mov.w	r2, #512	; 0x200
   82ede:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   82ee2:	4b2d      	ldr	r3, [pc, #180]	; (82f98 <udd_ctrl_out_received+0x1b0>)
   82ee4:	4798      	blx	r3
		return;
   82ee6:	e042      	b.n	82f6e <udd_ctrl_out_received+0x186>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   82ee8:	4b27      	ldr	r3, [pc, #156]	; (82f88 <udd_ctrl_out_received+0x1a0>)
   82eea:	899a      	ldrh	r2, [r3, #12]
   82eec:	4b27      	ldr	r3, [pc, #156]	; (82f8c <udd_ctrl_out_received+0x1a4>)
   82eee:	881b      	ldrh	r3, [r3, #0]
   82ef0:	429a      	cmp	r2, r3
   82ef2:	d127      	bne.n	82f44 <udd_ctrl_out_received+0x15c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   82ef4:	4b24      	ldr	r3, [pc, #144]	; (82f88 <udd_ctrl_out_received+0x1a0>)
   82ef6:	695b      	ldr	r3, [r3, #20]
   82ef8:	2b00      	cmp	r3, #0
   82efa:	d107      	bne.n	82f0c <udd_ctrl_out_received+0x124>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
   82efc:	4b1f      	ldr	r3, [pc, #124]	; (82f7c <udd_ctrl_out_received+0x194>)
   82efe:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   82f00:	4b20      	ldr	r3, [pc, #128]	; (82f84 <udd_ctrl_out_received+0x19c>)
   82f02:	f44f 7200 	mov.w	r2, #512	; 0x200
   82f06:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   82f0a:	e030      	b.n	82f6e <udd_ctrl_out_received+0x186>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   82f0c:	4b1e      	ldr	r3, [pc, #120]	; (82f88 <udd_ctrl_out_received+0x1a0>)
   82f0e:	695b      	ldr	r3, [r3, #20]
   82f10:	4798      	blx	r3
   82f12:	4603      	mov	r3, r0
   82f14:	f083 0301 	eor.w	r3, r3, #1
   82f18:	b2db      	uxtb	r3, r3
   82f1a:	2b00      	cmp	r3, #0
   82f1c:	d007      	beq.n	82f2e <udd_ctrl_out_received+0x146>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   82f1e:	4b17      	ldr	r3, [pc, #92]	; (82f7c <udd_ctrl_out_received+0x194>)
   82f20:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   82f22:	4b18      	ldr	r3, [pc, #96]	; (82f84 <udd_ctrl_out_received+0x19c>)
   82f24:	f44f 7200 	mov.w	r2, #512	; 0x200
   82f28:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   82f2c:	e01f      	b.n	82f6e <udd_ctrl_out_received+0x186>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   82f2e:	4b19      	ldr	r3, [pc, #100]	; (82f94 <udd_ctrl_out_received+0x1ac>)
   82f30:	881a      	ldrh	r2, [r3, #0]
   82f32:	4b16      	ldr	r3, [pc, #88]	; (82f8c <udd_ctrl_out_received+0x1a4>)
   82f34:	881b      	ldrh	r3, [r3, #0]
   82f36:	4413      	add	r3, r2
   82f38:	b29a      	uxth	r2, r3
   82f3a:	4b16      	ldr	r3, [pc, #88]	; (82f94 <udd_ctrl_out_received+0x1ac>)
   82f3c:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   82f3e:	4b13      	ldr	r3, [pc, #76]	; (82f8c <udd_ctrl_out_received+0x1a4>)
   82f40:	2200      	movs	r2, #0
   82f42:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   82f44:	4b0f      	ldr	r3, [pc, #60]	; (82f84 <udd_ctrl_out_received+0x19c>)
   82f46:	f44f 7200 	mov.w	r2, #512	; 0x200
   82f4a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   82f4e:	4b0d      	ldr	r3, [pc, #52]	; (82f84 <udd_ctrl_out_received+0x19c>)
   82f50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   82f54:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	flags = cpu_irq_save();
   82f58:	4b10      	ldr	r3, [pc, #64]	; (82f9c <udd_ctrl_out_received+0x1b4>)
   82f5a:	4798      	blx	r3
   82f5c:	6038      	str	r0, [r7, #0]
	udd_enable_nak_in_interrupt(0);
   82f5e:	4b09      	ldr	r3, [pc, #36]	; (82f84 <udd_ctrl_out_received+0x19c>)
   82f60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   82f64:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   82f68:	6838      	ldr	r0, [r7, #0]
   82f6a:	4b0d      	ldr	r3, [pc, #52]	; (82fa0 <udd_ctrl_out_received+0x1b8>)
   82f6c:	4798      	blx	r3
}
   82f6e:	3710      	adds	r7, #16
   82f70:	46bd      	mov	sp, r7
   82f72:	bd80      	pop	{r7, pc}
   82f74:	2000127d 	.word	0x2000127d
   82f78:	000830e9 	.word	0x000830e9
   82f7c:	0008301d 	.word	0x0008301d
   82f80:	00082ae5 	.word	0x00082ae5
   82f84:	400a4000 	.word	0x400a4000
   82f88:	2000130c 	.word	0x2000130c
   82f8c:	20001280 	.word	0x20001280
   82f90:	20180000 	.word	0x20180000
   82f94:	2000127e 	.word	0x2000127e
   82f98:	00083041 	.word	0x00083041
   82f9c:	00081b4d 	.word	0x00081b4d
   82fa0:	00081ba5 	.word	0x00081ba5

00082fa4 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
   82fa4:	b580      	push	{r7, lr}
   82fa6:	af00      	add	r7, sp, #0
	if (Is_udd_out_received(0))
   82fa8:	4b0c      	ldr	r3, [pc, #48]	; (82fdc <udd_ctrl_underflow+0x38>)
   82faa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   82fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
   82fb2:	2b00      	cmp	r3, #0
   82fb4:	d10f      	bne.n	82fd6 <udd_ctrl_underflow+0x32>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   82fb6:	4b0a      	ldr	r3, [pc, #40]	; (82fe0 <udd_ctrl_underflow+0x3c>)
   82fb8:	781b      	ldrb	r3, [r3, #0]
   82fba:	2b01      	cmp	r3, #1
   82fbc:	d102      	bne.n	82fc4 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   82fbe:	4b09      	ldr	r3, [pc, #36]	; (82fe4 <udd_ctrl_underflow+0x40>)
   82fc0:	4798      	blx	r3
   82fc2:	e009      	b.n	82fd8 <udd_ctrl_underflow+0x34>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   82fc4:	4b06      	ldr	r3, [pc, #24]	; (82fe0 <udd_ctrl_underflow+0x3c>)
   82fc6:	781b      	ldrb	r3, [r3, #0]
   82fc8:	2b04      	cmp	r3, #4
   82fca:	d105      	bne.n	82fd8 <udd_ctrl_underflow+0x34>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   82fcc:	4b03      	ldr	r3, [pc, #12]	; (82fdc <udd_ctrl_underflow+0x38>)
   82fce:	2220      	movs	r2, #32
   82fd0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   82fd4:	e000      	b.n	82fd8 <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received
   82fd6:	bf00      	nop
	}
}
   82fd8:	bd80      	pop	{r7, pc}
   82fda:	bf00      	nop
   82fdc:	400a4000 	.word	0x400a4000
   82fe0:	2000127d 	.word	0x2000127d
   82fe4:	00083041 	.word	0x00083041

00082fe8 <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
   82fe8:	b480      	push	{r7}
   82fea:	af00      	add	r7, sp, #0
	if (Is_udd_in_send(0))
   82fec:	4b09      	ldr	r3, [pc, #36]	; (83014 <udd_ctrl_overflow+0x2c>)
   82fee:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   82ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   82ff6:	2b00      	cmp	r3, #0
   82ff8:	d108      	bne.n	8300c <udd_ctrl_overflow+0x24>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   82ffa:	4b07      	ldr	r3, [pc, #28]	; (83018 <udd_ctrl_overflow+0x30>)
   82ffc:	781b      	ldrb	r3, [r3, #0]
   82ffe:	2b03      	cmp	r3, #3
   83000:	d105      	bne.n	8300e <udd_ctrl_overflow+0x26>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   83002:	4b04      	ldr	r3, [pc, #16]	; (83014 <udd_ctrl_overflow+0x2c>)
   83004:	2220      	movs	r2, #32
   83006:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   8300a:	e000      	b.n	8300e <udd_ctrl_overflow+0x26>
		return; // overflow ignored if IN data is received
   8300c:	bf00      	nop
	}
}
   8300e:	46bd      	mov	sp, r7
   83010:	bc80      	pop	{r7}
   83012:	4770      	bx	lr
   83014:	400a4000 	.word	0x400a4000
   83018:	2000127d 	.word	0x2000127d

0008301c <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
   8301c:	b480      	push	{r7}
   8301e:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   83020:	4b05      	ldr	r3, [pc, #20]	; (83038 <udd_ctrl_stall_data+0x1c>)
   83022:	2205      	movs	r2, #5
   83024:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   83026:	4b05      	ldr	r3, [pc, #20]	; (8303c <udd_ctrl_stall_data+0x20>)
   83028:	2220      	movs	r2, #32
   8302a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   8302e:	bf00      	nop
   83030:	46bd      	mov	sp, r7
   83032:	bc80      	pop	{r7}
   83034:	4770      	bx	lr
   83036:	bf00      	nop
   83038:	2000127d 	.word	0x2000127d
   8303c:	400a4000 	.word	0x400a4000

00083040 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
   83040:	b580      	push	{r7, lr}
   83042:	b082      	sub	sp, #8
   83044:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   83046:	4b13      	ldr	r3, [pc, #76]	; (83094 <udd_ctrl_send_zlp_in+0x54>)
   83048:	2203      	movs	r2, #3
   8304a:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
   8304c:	4b12      	ldr	r3, [pc, #72]	; (83098 <udd_ctrl_send_zlp_in+0x58>)
   8304e:	4798      	blx	r3
   83050:	6078      	str	r0, [r7, #4]
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   83052:	4b12      	ldr	r3, [pc, #72]	; (8309c <udd_ctrl_send_zlp_in+0x5c>)
   83054:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83058:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   8305c:	4b0f      	ldr	r3, [pc, #60]	; (8309c <udd_ctrl_send_zlp_in+0x5c>)
   8305e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   83062:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   83066:	4b0d      	ldr	r3, [pc, #52]	; (8309c <udd_ctrl_send_zlp_in+0x5c>)
   83068:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8306c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   83070:	4b0a      	ldr	r3, [pc, #40]	; (8309c <udd_ctrl_send_zlp_in+0x5c>)
   83072:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83076:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   8307a:	4b08      	ldr	r3, [pc, #32]	; (8309c <udd_ctrl_send_zlp_in+0x5c>)
   8307c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83080:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   83084:	6878      	ldr	r0, [r7, #4]
   83086:	4b06      	ldr	r3, [pc, #24]	; (830a0 <udd_ctrl_send_zlp_in+0x60>)
   83088:	4798      	blx	r3
}
   8308a:	bf00      	nop
   8308c:	3708      	adds	r7, #8
   8308e:	46bd      	mov	sp, r7
   83090:	bd80      	pop	{r7, pc}
   83092:	bf00      	nop
   83094:	2000127d 	.word	0x2000127d
   83098:	00081b4d 	.word	0x00081b4d
   8309c:	400a4000 	.word	0x400a4000
   830a0:	00081ba5 	.word	0x00081ba5

000830a4 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
   830a4:	b580      	push	{r7, lr}
   830a6:	b082      	sub	sp, #8
   830a8:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   830aa:	4b0b      	ldr	r3, [pc, #44]	; (830d8 <udd_ctrl_send_zlp_out+0x34>)
   830ac:	2204      	movs	r2, #4
   830ae:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
   830b0:	4b0a      	ldr	r3, [pc, #40]	; (830dc <udd_ctrl_send_zlp_out+0x38>)
   830b2:	4798      	blx	r3
   830b4:	6078      	str	r0, [r7, #4]
	udd_ack_nak_in(0);
   830b6:	4b0a      	ldr	r3, [pc, #40]	; (830e0 <udd_ctrl_send_zlp_out+0x3c>)
   830b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   830bc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   830c0:	4b07      	ldr	r3, [pc, #28]	; (830e0 <udd_ctrl_send_zlp_out+0x3c>)
   830c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   830c6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   830ca:	6878      	ldr	r0, [r7, #4]
   830cc:	4b05      	ldr	r3, [pc, #20]	; (830e4 <udd_ctrl_send_zlp_out+0x40>)
   830ce:	4798      	blx	r3
}
   830d0:	bf00      	nop
   830d2:	3708      	adds	r7, #8
   830d4:	46bd      	mov	sp, r7
   830d6:	bd80      	pop	{r7, pc}
   830d8:	2000127d 	.word	0x2000127d
   830dc:	00081b4d 	.word	0x00081b4d
   830e0:	400a4000 	.word	0x400a4000
   830e4:	00081ba5 	.word	0x00081ba5

000830e8 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   830e8:	b580      	push	{r7, lr}
   830ea:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   830ec:	4b04      	ldr	r3, [pc, #16]	; (83100 <udd_ctrl_endofrequest+0x18>)
   830ee:	691b      	ldr	r3, [r3, #16]
   830f0:	2b00      	cmp	r3, #0
   830f2:	d002      	beq.n	830fa <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
   830f4:	4b02      	ldr	r3, [pc, #8]	; (83100 <udd_ctrl_endofrequest+0x18>)
   830f6:	691b      	ldr	r3, [r3, #16]
   830f8:	4798      	blx	r3
	}
}
   830fa:	bf00      	nop
   830fc:	bd80      	pop	{r7, pc}
   830fe:	bf00      	nop
   83100:	2000130c 	.word	0x2000130c

00083104 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
   83104:	b580      	push	{r7, lr}
   83106:	b082      	sub	sp, #8
   83108:	af00      	add	r7, sp, #0
	uint32_t status = udd_get_endpoint_status(0);
   8310a:	4b31      	ldr	r3, [pc, #196]	; (831d0 <udd_ctrl_interrupt+0xcc>)
   8310c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   83110:	607b      	str	r3, [r7, #4]

	if (!Is_udd_endpoint_interrupt(0)) {
   83112:	4b2f      	ldr	r3, [pc, #188]	; (831d0 <udd_ctrl_interrupt+0xcc>)
   83114:	695b      	ldr	r3, [r3, #20]
   83116:	f403 7380 	and.w	r3, r3, #256	; 0x100
   8311a:	2b00      	cmp	r3, #0
   8311c:	d101      	bne.n	83122 <udd_ctrl_interrupt+0x1e>
		return false; // No interrupt events on control endpoint
   8311e:	2300      	movs	r3, #0
   83120:	e052      	b.n	831c8 <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   83122:	4b2b      	ldr	r3, [pc, #172]	; (831d0 <udd_ctrl_interrupt+0xcc>)
   83124:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83128:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   8312c:	4b28      	ldr	r3, [pc, #160]	; (831d0 <udd_ctrl_interrupt+0xcc>)
   8312e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83132:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	// Search event on control endpoint
	if (Is_udd_endpoint_status_setup_received(status)) {
   83136:	687b      	ldr	r3, [r7, #4]
   83138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   8313c:	2b00      	cmp	r3, #0
   8313e:	d003      	beq.n	83148 <udd_ctrl_interrupt+0x44>
		// SETUP packet received
		dbg_print("Stp ");
		udd_ctrl_setup_received();
   83140:	4b24      	ldr	r3, [pc, #144]	; (831d4 <udd_ctrl_interrupt+0xd0>)
   83142:	4798      	blx	r3
		return true;
   83144:	2301      	movs	r3, #1
   83146:	e03f      	b.n	831c8 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_in_sent(status)
   83148:	687b      	ldr	r3, [r7, #4]
   8314a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   8314e:	2b00      	cmp	r3, #0
   83150:	d00a      	beq.n	83168 <udd_ctrl_interrupt+0x64>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   83152:	4b1f      	ldr	r3, [pc, #124]	; (831d0 <udd_ctrl_interrupt+0xcc>)
   83154:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   83158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   8315c:	2b00      	cmp	r3, #0
   8315e:	d003      	beq.n	83168 <udd_ctrl_interrupt+0x64>
		// IN packet sent
		dbg_print("In ");
		udd_ctrl_in_sent();
   83160:	4b1d      	ldr	r3, [pc, #116]	; (831d8 <udd_ctrl_interrupt+0xd4>)
   83162:	4798      	blx	r3
		return true;
   83164:	2301      	movs	r3, #1
   83166:	e02f      	b.n	831c8 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_out_received(status)) {
   83168:	687b      	ldr	r3, [r7, #4]
   8316a:	f403 7300 	and.w	r3, r3, #512	; 0x200
   8316e:	2b00      	cmp	r3, #0
   83170:	d003      	beq.n	8317a <udd_ctrl_interrupt+0x76>
		// OUT packet received
		dbg_print("Out ");
		udd_ctrl_out_received();
   83172:	4b1a      	ldr	r3, [pc, #104]	; (831dc <udd_ctrl_interrupt+0xd8>)
   83174:	4798      	blx	r3
		return true;
   83176:	2301      	movs	r3, #1
   83178:	e026      	b.n	831c8 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_stall(status)) {
   8317a:	687b      	ldr	r3, [r7, #4]
   8317c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   83180:	2b00      	cmp	r3, #0
   83182:	d004      	beq.n	8318e <udd_ctrl_interrupt+0x8a>
		dbg_print("Stall\n\r");
		// STALLed
		udd_ack_stall(0);
   83184:	4b12      	ldr	r3, [pc, #72]	; (831d0 <udd_ctrl_interrupt+0xcc>)
   83186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8318a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	if (Is_udd_endpoint_status_nak_out(status)) {
   8318e:	687b      	ldr	r3, [r7, #4]
   83190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   83194:	2b00      	cmp	r3, #0
   83196:	d008      	beq.n	831aa <udd_ctrl_interrupt+0xa6>
		// Overflow on OUT packet
		dbg_print("NakO ");
		udd_ack_nak_out(0);
   83198:	4b0d      	ldr	r3, [pc, #52]	; (831d0 <udd_ctrl_interrupt+0xcc>)
   8319a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8319e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_overflow();
   831a2:	4b0f      	ldr	r3, [pc, #60]	; (831e0 <udd_ctrl_interrupt+0xdc>)
   831a4:	4798      	blx	r3
		return true;
   831a6:	2301      	movs	r3, #1
   831a8:	e00e      	b.n	831c8 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_nak_in(status)) {
   831aa:	687b      	ldr	r3, [r7, #4]
   831ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   831b0:	2b00      	cmp	r3, #0
   831b2:	d008      	beq.n	831c6 <udd_ctrl_interrupt+0xc2>
		// Underflow on IN packet
		dbg_print("NakI ");
		udd_ack_nak_in(0);
   831b4:	4b06      	ldr	r3, [pc, #24]	; (831d0 <udd_ctrl_interrupt+0xcc>)
   831b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   831ba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_underflow();
   831be:	4b09      	ldr	r3, [pc, #36]	; (831e4 <udd_ctrl_interrupt+0xe0>)
   831c0:	4798      	blx	r3
		return true;
   831c2:	2301      	movs	r3, #1
   831c4:	e000      	b.n	831c8 <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("UnH ");
	return false;
   831c6:	2300      	movs	r3, #0
}
   831c8:	4618      	mov	r0, r3
   831ca:	3708      	adds	r7, #8
   831cc:	46bd      	mov	sp, r7
   831ce:	bd80      	pop	{r7, pc}
   831d0:	400a4000 	.word	0x400a4000
   831d4:	00082b41 	.word	0x00082b41
   831d8:	00082c81 	.word	0x00082c81
   831dc:	00082de9 	.word	0x00082de9
   831e0:	00082fe9 	.word	0x00082fe9
   831e4:	00082fa5 	.word	0x00082fa5

000831e8 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
   831e8:	b480      	push	{r7}
   831ea:	b083      	sub	sp, #12
   831ec:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   831ee:	2300      	movs	r3, #0
   831f0:	71fb      	strb	r3, [r7, #7]
   831f2:	e01c      	b.n	8322e <udd_ep_job_table_reset+0x46>
		udd_ep_job[i].busy = false;
   831f4:	79fa      	ldrb	r2, [r7, #7]
   831f6:	4912      	ldr	r1, [pc, #72]	; (83240 <udd_ep_job_table_reset+0x58>)
   831f8:	4613      	mov	r3, r2
   831fa:	005b      	lsls	r3, r3, #1
   831fc:	4413      	add	r3, r2
   831fe:	00db      	lsls	r3, r3, #3
   83200:	440b      	add	r3, r1
   83202:	f103 0210 	add.w	r2, r3, #16
   83206:	7913      	ldrb	r3, [r2, #4]
   83208:	f36f 0300 	bfc	r3, #0, #1
   8320c:	7113      	strb	r3, [r2, #4]
		udd_ep_job[i].stall_requested = false;
   8320e:	79fa      	ldrb	r2, [r7, #7]
   83210:	490b      	ldr	r1, [pc, #44]	; (83240 <udd_ep_job_table_reset+0x58>)
   83212:	4613      	mov	r3, r2
   83214:	005b      	lsls	r3, r3, #1
   83216:	4413      	add	r3, r2
   83218:	00db      	lsls	r3, r3, #3
   8321a:	440b      	add	r3, r1
   8321c:	f103 0210 	add.w	r2, r3, #16
   83220:	7913      	ldrb	r3, [r2, #4]
   83222:	f36f 0382 	bfc	r3, #2, #1
   83226:	7113      	strb	r3, [r2, #4]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83228:	79fb      	ldrb	r3, [r7, #7]
   8322a:	3301      	adds	r3, #1
   8322c:	71fb      	strb	r3, [r7, #7]
   8322e:	79fb      	ldrb	r3, [r7, #7]
   83230:	2b01      	cmp	r3, #1
   83232:	d9df      	bls.n	831f4 <udd_ep_job_table_reset+0xc>
	}
}
   83234:	bf00      	nop
   83236:	370c      	adds	r7, #12
   83238:	46bd      	mov	sp, r7
   8323a:	bc80      	pop	{r7}
   8323c:	4770      	bx	lr
   8323e:	bf00      	nop
   83240:	20001284 	.word	0x20001284

00083244 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
   83244:	b580      	push	{r7, lr}
   83246:	b082      	sub	sp, #8
   83248:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8324a:	2300      	movs	r3, #0
   8324c:	71fb      	strb	r3, [r7, #7]
   8324e:	e010      	b.n	83272 <udd_ep_job_table_kill+0x2e>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   83250:	79fa      	ldrb	r2, [r7, #7]
   83252:	4613      	mov	r3, r2
   83254:	005b      	lsls	r3, r3, #1
   83256:	4413      	add	r3, r2
   83258:	00db      	lsls	r3, r3, #3
   8325a:	4a09      	ldr	r2, [pc, #36]	; (83280 <udd_ep_job_table_kill+0x3c>)
   8325c:	1898      	adds	r0, r3, r2
   8325e:	79fb      	ldrb	r3, [r7, #7]
   83260:	3301      	adds	r3, #1
   83262:	b2db      	uxtb	r3, r3
   83264:	461a      	mov	r2, r3
   83266:	2101      	movs	r1, #1
   83268:	4b06      	ldr	r3, [pc, #24]	; (83284 <udd_ep_job_table_kill+0x40>)
   8326a:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8326c:	79fb      	ldrb	r3, [r7, #7]
   8326e:	3301      	adds	r3, #1
   83270:	71fb      	strb	r3, [r7, #7]
   83272:	79fb      	ldrb	r3, [r7, #7]
   83274:	2b01      	cmp	r3, #1
   83276:	d9eb      	bls.n	83250 <udd_ep_job_table_kill+0xc>
	}
}
   83278:	bf00      	nop
   8327a:	3708      	adds	r7, #8
   8327c:	46bd      	mov	sp, r7
   8327e:	bd80      	pop	{r7, pc}
   83280:	20001284 	.word	0x20001284
   83284:	000832c5 	.word	0x000832c5

00083288 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   83288:	b580      	push	{r7, lr}
   8328a:	b082      	sub	sp, #8
   8328c:	af00      	add	r7, sp, #0
   8328e:	4603      	mov	r3, r0
   83290:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
   83292:	79fb      	ldrb	r3, [r7, #7]
   83294:	f003 030f 	and.w	r3, r3, #15
   83298:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   8329a:	79fb      	ldrb	r3, [r7, #7]
   8329c:	1e5a      	subs	r2, r3, #1
   8329e:	4613      	mov	r3, r2
   832a0:	005b      	lsls	r3, r3, #1
   832a2:	4413      	add	r3, r2
   832a4:	00db      	lsls	r3, r3, #3
   832a6:	4a05      	ldr	r2, [pc, #20]	; (832bc <udd_ep_abort_job+0x34>)
   832a8:	4413      	add	r3, r2
   832aa:	79fa      	ldrb	r2, [r7, #7]
   832ac:	2101      	movs	r1, #1
   832ae:	4618      	mov	r0, r3
   832b0:	4b03      	ldr	r3, [pc, #12]	; (832c0 <udd_ep_abort_job+0x38>)
   832b2:	4798      	blx	r3
}
   832b4:	bf00      	nop
   832b6:	3708      	adds	r7, #8
   832b8:	46bd      	mov	sp, r7
   832ba:	bd80      	pop	{r7, pc}
   832bc:	20001284 	.word	0x20001284
   832c0:	000832c5 	.word	0x000832c5

000832c4 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   832c4:	b580      	push	{r7, lr}
   832c6:	b082      	sub	sp, #8
   832c8:	af00      	add	r7, sp, #0
   832ca:	6078      	str	r0, [r7, #4]
   832cc:	460b      	mov	r3, r1
   832ce:	70fb      	strb	r3, [r7, #3]
   832d0:	4613      	mov	r3, r2
   832d2:	70bb      	strb	r3, [r7, #2]
	if (ptr_job->busy == false) {
   832d4:	687b      	ldr	r3, [r7, #4]
   832d6:	7d1b      	ldrb	r3, [r3, #20]
   832d8:	f003 0301 	and.w	r3, r3, #1
   832dc:	b2db      	uxtb	r3, r3
   832de:	2b00      	cmp	r3, #0
   832e0:	d01f      	beq.n	83322 <udd_ep_finish_job+0x5e>
		return; // No on-going job
	}
	ptr_job->busy = false;
   832e2:	687a      	ldr	r2, [r7, #4]
   832e4:	7d13      	ldrb	r3, [r2, #20]
   832e6:	f36f 0300 	bfc	r3, #0, #1
   832ea:	7513      	strb	r3, [r2, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   832ec:	687b      	ldr	r3, [r7, #4]
   832ee:	681b      	ldr	r3, [r3, #0]
   832f0:	2b00      	cmp	r3, #0
   832f2:	d018      	beq.n	83326 <udd_ep_finish_job+0x62>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   832f4:	4a0e      	ldr	r2, [pc, #56]	; (83330 <udd_ep_finish_job+0x6c>)
   832f6:	78bb      	ldrb	r3, [r7, #2]
   832f8:	3308      	adds	r3, #8
   832fa:	015b      	lsls	r3, r3, #5
   832fc:	4413      	add	r3, r2
   832fe:	681b      	ldr	r3, [r3, #0]
   83300:	f003 0308 	and.w	r3, r3, #8
   83304:	2b00      	cmp	r3, #0
   83306:	d003      	beq.n	83310 <udd_ep_finish_job+0x4c>
		ep_num |= USB_EP_DIR_IN;
   83308:	78bb      	ldrb	r3, [r7, #2]
   8330a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   8330e:	70bb      	strb	r3, [r7, #2]
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   83310:	687b      	ldr	r3, [r7, #4]
   83312:	681b      	ldr	r3, [r3, #0]
   83314:	78fa      	ldrb	r2, [r7, #3]
   83316:	4610      	mov	r0, r2
   83318:	687a      	ldr	r2, [r7, #4]
   8331a:	6891      	ldr	r1, [r2, #8]
   8331c:	78ba      	ldrb	r2, [r7, #2]
   8331e:	4798      	blx	r3
   83320:	e002      	b.n	83328 <udd_ep_finish_job+0x64>
		return; // No on-going job
   83322:	bf00      	nop
   83324:	e000      	b.n	83328 <udd_ep_finish_job+0x64>
		return; // No callback linked to job
   83326:	bf00      	nop
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   83328:	3708      	adds	r7, #8
   8332a:	46bd      	mov	sp, r7
   8332c:	bd80      	pop	{r7, pc}
   8332e:	bf00      	nop
   83330:	400a4000 	.word	0x400a4000

00083334 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   83334:	b580      	push	{r7, lr}
   83336:	b086      	sub	sp, #24
   83338:	af00      	add	r7, sp, #0
   8333a:	4603      	mov	r3, r0
   8333c:	71fb      	strb	r3, [r7, #7]
	uint32_t udd_dma_ctrl = 0;
   8333e:	2300      	movs	r3, #0
   83340:	617b      	str	r3, [r7, #20]
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   83342:	79fb      	ldrb	r3, [r7, #7]
   83344:	1e5a      	subs	r2, r3, #1
   83346:	4613      	mov	r3, r2
   83348:	005b      	lsls	r3, r3, #1
   8334a:	4413      	add	r3, r2
   8334c:	00db      	lsls	r3, r3, #3
   8334e:	4a6d      	ldr	r2, [pc, #436]	; (83504 <udd_ep_trans_done+0x1d0>)
   83350:	4413      	add	r3, r2
   83352:	60fb      	str	r3, [r7, #12]

	if (!ptr_job->busy) {
   83354:	68fb      	ldr	r3, [r7, #12]
   83356:	7d1b      	ldrb	r3, [r3, #20]
   83358:	f003 0301 	and.w	r3, r3, #1
   8335c:	b2db      	uxtb	r3, r3
   8335e:	2b00      	cmp	r3, #0
   83360:	f000 80cc 	beq.w	834fc <udd_ep_trans_done+0x1c8>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   83364:	68fb      	ldr	r3, [r7, #12]
   83366:	68da      	ldr	r2, [r3, #12]
   83368:	68fb      	ldr	r3, [r7, #12]
   8336a:	689b      	ldr	r3, [r3, #8]
   8336c:	429a      	cmp	r2, r3
   8336e:	f000 8099 	beq.w	834a4 <udd_ep_trans_done+0x170>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   83372:	68fb      	ldr	r3, [r7, #12]
   83374:	689a      	ldr	r2, [r3, #8]
   83376:	68fb      	ldr	r3, [r7, #12]
   83378:	68db      	ldr	r3, [r3, #12]
   8337a:	1ad3      	subs	r3, r2, r3
   8337c:	613b      	str	r3, [r7, #16]

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   8337e:	693b      	ldr	r3, [r7, #16]
   83380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   83384:	d905      	bls.n	83392 <udd_ep_trans_done+0x5e>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   83386:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   8338a:	613b      	str	r3, [r7, #16]

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   8338c:	2300      	movs	r3, #0
   8338e:	617b      	str	r3, [r7, #20]
   83390:	e002      	b.n	83398 <udd_ep_trans_done+0x64>
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   83392:	693b      	ldr	r3, [r7, #16]
   83394:	041b      	lsls	r3, r3, #16
   83396:	617b      	str	r3, [r7, #20]
		}
		if (Is_udd_endpoint_in(ep)) {
   83398:	4a5b      	ldr	r2, [pc, #364]	; (83508 <udd_ep_trans_done+0x1d4>)
   8339a:	79fb      	ldrb	r3, [r7, #7]
   8339c:	3308      	adds	r3, #8
   8339e:	015b      	lsls	r3, r3, #5
   833a0:	4413      	add	r3, r2
   833a2:	681b      	ldr	r3, [r3, #0]
   833a4:	f003 0308 	and.w	r3, r3, #8
   833a8:	2b00      	cmp	r3, #0
   833aa:	d01d      	beq.n	833e8 <udd_ep_trans_done+0xb4>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   833ac:	4a56      	ldr	r2, [pc, #344]	; (83508 <udd_ep_trans_done+0x1d4>)
   833ae:	79fb      	ldrb	r3, [r7, #7]
   833b0:	3308      	adds	r3, #8
   833b2:	015b      	lsls	r3, r3, #5
   833b4:	4413      	add	r3, r2
   833b6:	681b      	ldr	r3, [r3, #0]
   833b8:	f003 0307 	and.w	r3, r3, #7
   833bc:	2208      	movs	r2, #8
   833be:	fa02 f303 	lsl.w	r3, r2, r3
   833c2:	461a      	mov	r2, r3
   833c4:	693b      	ldr	r3, [r7, #16]
   833c6:	fbb3 f1f2 	udiv	r1, r3, r2
   833ca:	fb02 f201 	mul.w	r2, r2, r1
   833ce:	1a9b      	subs	r3, r3, r2
   833d0:	2b00      	cmp	r3, #0
   833d2:	d027      	beq.n	83424 <udd_ep_trans_done+0xf0>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   833d4:	697b      	ldr	r3, [r7, #20]
   833d6:	f043 0308 	orr.w	r3, r3, #8
   833da:	617b      	str	r3, [r7, #20]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   833dc:	68fa      	ldr	r2, [r7, #12]
   833de:	7d13      	ldrb	r3, [r2, #20]
   833e0:	f36f 0341 	bfc	r3, #1, #1
   833e4:	7513      	strb	r3, [r2, #20]
   833e6:	e01d      	b.n	83424 <udd_ep_trans_done+0xf0>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   833e8:	4a47      	ldr	r2, [pc, #284]	; (83508 <udd_ep_trans_done+0x1d4>)
   833ea:	79fb      	ldrb	r3, [r7, #7]
   833ec:	3308      	adds	r3, #8
   833ee:	015b      	lsls	r3, r3, #5
   833f0:	4413      	add	r3, r2
   833f2:	681b      	ldr	r3, [r3, #0]
   833f4:	091b      	lsrs	r3, r3, #4
   833f6:	f003 0303 	and.w	r3, r3, #3
   833fa:	2b01      	cmp	r3, #1
   833fc:	d10e      	bne.n	8341c <udd_ep_trans_done+0xe8>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   833fe:	4a42      	ldr	r2, [pc, #264]	; (83508 <udd_ep_trans_done+0x1d4>)
   83400:	79fb      	ldrb	r3, [r7, #7]
   83402:	3308      	adds	r3, #8
   83404:	015b      	lsls	r3, r3, #5
   83406:	4413      	add	r3, r2
   83408:	681b      	ldr	r3, [r3, #0]
   8340a:	f003 0307 	and.w	r3, r3, #7
   8340e:	2208      	movs	r2, #8
   83410:	fa02 f303 	lsl.w	r3, r2, r3
   83414:	461a      	mov	r2, r3
   83416:	693b      	ldr	r3, [r7, #16]
   83418:	4293      	cmp	r3, r2
   8341a:	d803      	bhi.n	83424 <udd_ep_trans_done+0xf0>

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   8341c:	697b      	ldr	r3, [r7, #20]
   8341e:	f043 0314 	orr.w	r3, r3, #20
   83422:	617b      	str	r3, [r7, #20]
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   83424:	68fb      	ldr	r3, [r7, #12]
   83426:	685a      	ldr	r2, [r3, #4]
   83428:	68fb      	ldr	r3, [r7, #12]
   8342a:	68db      	ldr	r3, [r3, #12]
   8342c:	18d1      	adds	r1, r2, r3
   8342e:	79fb      	ldrb	r3, [r7, #7]
   83430:	011a      	lsls	r2, r3, #4
   83432:	4b36      	ldr	r3, [pc, #216]	; (8350c <udd_ep_trans_done+0x1d8>)
   83434:	4413      	add	r3, r2
   83436:	460a      	mov	r2, r1
   83438:	605a      	str	r2, [r3, #4]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   8343a:	697b      	ldr	r3, [r7, #20]
   8343c:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   83440:	617b      	str	r3, [r7, #20]

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
   83442:	4b33      	ldr	r3, [pc, #204]	; (83510 <udd_ep_trans_done+0x1dc>)
   83444:	4798      	blx	r3
   83446:	60b8      	str	r0, [r7, #8]
		if (!(udd_endpoint_dma_get_status(ep)
   83448:	79fb      	ldrb	r3, [r7, #7]
   8344a:	011a      	lsls	r2, r3, #4
   8344c:	4b2f      	ldr	r3, [pc, #188]	; (8350c <udd_ep_trans_done+0x1d8>)
   8344e:	4413      	add	r3, r2
   83450:	68db      	ldr	r3, [r3, #12]
				& UDPHS_DMASTATUS_END_TR_ST)) {
   83452:	f003 0310 	and.w	r3, r3, #16
		if (!(udd_endpoint_dma_get_status(ep)
   83456:	2b00      	cmp	r3, #0
   83458:	d11d      	bne.n	83496 <udd_ep_trans_done+0x162>
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   8345a:	79fb      	ldrb	r3, [r7, #7]
   8345c:	011a      	lsls	r2, r3, #4
   8345e:	4b2b      	ldr	r3, [pc, #172]	; (8350c <udd_ep_trans_done+0x1d8>)
   83460:	4413      	add	r3, r2
   83462:	697a      	ldr	r2, [r7, #20]
   83464:	609a      	str	r2, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   83466:	68fb      	ldr	r3, [r7, #12]
   83468:	68da      	ldr	r2, [r3, #12]
   8346a:	693b      	ldr	r3, [r7, #16]
   8346c:	441a      	add	r2, r3
   8346e:	68fb      	ldr	r3, [r7, #12]
   83470:	60da      	str	r2, [r3, #12]
			ptr_job->buf_load = next_trans;
   83472:	68fb      	ldr	r3, [r7, #12]
   83474:	693a      	ldr	r2, [r7, #16]
   83476:	611a      	str	r2, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   83478:	4b23      	ldr	r3, [pc, #140]	; (83508 <udd_ep_trans_done+0x1d4>)
   8347a:	691a      	ldr	r2, [r3, #16]
   8347c:	79fb      	ldrb	r3, [r7, #7]
   8347e:	3b01      	subs	r3, #1
   83480:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   83484:	fa01 f303 	lsl.w	r3, r1, r3
   83488:	491f      	ldr	r1, [pc, #124]	; (83508 <udd_ep_trans_done+0x1d4>)
   8348a:	4313      	orrs	r3, r2
   8348c:	610b      	str	r3, [r1, #16]
			cpu_irq_restore(flags);
   8348e:	68b8      	ldr	r0, [r7, #8]
   83490:	4b20      	ldr	r3, [pc, #128]	; (83514 <udd_ep_trans_done+0x1e0>)
   83492:	4798      	blx	r3
			return;
   83494:	e033      	b.n	834fe <udd_ep_trans_done+0x1ca>
		}
		cpu_irq_restore(flags);
   83496:	68b8      	ldr	r0, [r7, #8]
   83498:	4b1e      	ldr	r3, [pc, #120]	; (83514 <udd_ep_trans_done+0x1e0>)
   8349a:	4798      	blx	r3

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   8349c:	68fb      	ldr	r3, [r7, #12]
   8349e:	68da      	ldr	r2, [r3, #12]
   834a0:	68fb      	ldr	r3, [r7, #12]
   834a2:	609a      	str	r2, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   834a4:	4a18      	ldr	r2, [pc, #96]	; (83508 <udd_ep_trans_done+0x1d4>)
   834a6:	79fb      	ldrb	r3, [r7, #7]
   834a8:	3308      	adds	r3, #8
   834aa:	015b      	lsls	r3, r3, #5
   834ac:	4413      	add	r3, r2
   834ae:	681b      	ldr	r3, [r3, #0]
   834b0:	f003 0308 	and.w	r3, r3, #8
   834b4:	2b00      	cmp	r3, #0
   834b6:	d01a      	beq.n	834ee <udd_ep_trans_done+0x1ba>
		if (ptr_job->b_shortpacket) {
   834b8:	68fb      	ldr	r3, [r7, #12]
   834ba:	7d1b      	ldrb	r3, [r3, #20]
   834bc:	f003 0302 	and.w	r3, r3, #2
   834c0:	b2db      	uxtb	r3, r3
   834c2:	2b00      	cmp	r3, #0
   834c4:	d013      	beq.n	834ee <udd_ep_trans_done+0x1ba>
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   834c6:	4a10      	ldr	r2, [pc, #64]	; (83508 <udd_ep_trans_done+0x1d4>)
   834c8:	79fb      	ldrb	r3, [r7, #7]
   834ca:	3308      	adds	r3, #8
   834cc:	015b      	lsls	r3, r3, #5
   834ce:	4413      	add	r3, r2
   834d0:	3304      	adds	r3, #4
   834d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   834d6:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep);
   834d8:	4b0b      	ldr	r3, [pc, #44]	; (83508 <udd_ep_trans_done+0x1d4>)
   834da:	691a      	ldr	r2, [r3, #16]
   834dc:	79fb      	ldrb	r3, [r7, #7]
   834de:	f44f 7180 	mov.w	r1, #256	; 0x100
   834e2:	fa01 f303 	lsl.w	r3, r1, r3
   834e6:	4908      	ldr	r1, [pc, #32]	; (83508 <udd_ep_trans_done+0x1d4>)
   834e8:	4313      	orrs	r3, r2
   834ea:	610b      	str	r3, [r1, #16]
			return;
   834ec:	e007      	b.n	834fe <udd_ep_trans_done+0x1ca>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   834ee:	79fb      	ldrb	r3, [r7, #7]
   834f0:	461a      	mov	r2, r3
   834f2:	2100      	movs	r1, #0
   834f4:	68f8      	ldr	r0, [r7, #12]
   834f6:	4b08      	ldr	r3, [pc, #32]	; (83518 <udd_ep_trans_done+0x1e4>)
   834f8:	4798      	blx	r3
   834fa:	e000      	b.n	834fe <udd_ep_trans_done+0x1ca>
		return; // No job is running, then ignore it (system error)
   834fc:	bf00      	nop
}
   834fe:	3718      	adds	r7, #24
   83500:	46bd      	mov	sp, r7
   83502:	bd80      	pop	{r7, pc}
   83504:	20001284 	.word	0x20001284
   83508:	400a4000 	.word	0x400a4000
   8350c:	400a4300 	.word	0x400a4300
   83510:	00081b4d 	.word	0x00081b4d
   83514:	00081ba5 	.word	0x00081ba5
   83518:	000832c5 	.word	0x000832c5

0008351c <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
   8351c:	b580      	push	{r7, lr}
   8351e:	b084      	sub	sp, #16
   83520:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   83522:	2301      	movs	r3, #1
   83524:	73fb      	strb	r3, [r7, #15]
   83526:	e0e0      	b.n	836ea <udd_ep_interrupt+0x1ce>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   83528:	7bfb      	ldrb	r3, [r7, #15]
   8352a:	1e5a      	subs	r2, r3, #1
   8352c:	4613      	mov	r3, r2
   8352e:	005b      	lsls	r3, r3, #1
   83530:	4413      	add	r3, r2
   83532:	00db      	lsls	r3, r3, #3
   83534:	4a71      	ldr	r2, [pc, #452]	; (836fc <udd_ep_interrupt+0x1e0>)
   83536:	4413      	add	r3, r2
   83538:	60bb      	str	r3, [r7, #8]

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   8353a:	4b71      	ldr	r3, [pc, #452]	; (83700 <udd_ep_interrupt+0x1e4>)
   8353c:	691a      	ldr	r2, [r3, #16]
   8353e:	7bfb      	ldrb	r3, [r7, #15]
   83540:	3b01      	subs	r3, #1
   83542:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   83546:	fa01 f303 	lsl.w	r3, r1, r3
   8354a:	4013      	ands	r3, r2
   8354c:	2b00      	cmp	r3, #0
   8354e:	d03c      	beq.n	835ca <udd_ep_interrupt+0xae>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   83550:	4b6b      	ldr	r3, [pc, #428]	; (83700 <udd_ep_interrupt+0x1e4>)
   83552:	695a      	ldr	r2, [r3, #20]
   83554:	7bfb      	ldrb	r3, [r7, #15]
   83556:	3b01      	subs	r3, #1
   83558:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   8355c:	fa01 f303 	lsl.w	r3, r1, r3
   83560:	4013      	ands	r3, r2
   83562:	2b00      	cmp	r3, #0
   83564:	d031      	beq.n	835ca <udd_ep_interrupt+0xae>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   83566:	7bfb      	ldrb	r3, [r7, #15]
   83568:	011a      	lsls	r2, r3, #4
   8356a:	4b66      	ldr	r3, [pc, #408]	; (83704 <udd_ep_interrupt+0x1e8>)
   8356c:	4413      	add	r3, r2
   8356e:	68db      	ldr	r3, [r3, #12]
					& UDPHS_DMASTATUS_CHANN_ENB) {
   83570:	f003 0301 	and.w	r3, r3, #1
			if (udd_endpoint_dma_get_status(ep)
   83574:	2b00      	cmp	r3, #0
   83576:	d001      	beq.n	8357c <udd_ep_interrupt+0x60>
				return true; // Ignore EOT_STA interrupt
   83578:	2301      	movs	r3, #1
   8357a:	e0bb      	b.n	836f4 <udd_ep_interrupt+0x1d8>
			}
			dbg_print("dma%d: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   8357c:	4b60      	ldr	r3, [pc, #384]	; (83700 <udd_ep_interrupt+0x1e4>)
   8357e:	691a      	ldr	r2, [r3, #16]
   83580:	7bfb      	ldrb	r3, [r7, #15]
   83582:	3b01      	subs	r3, #1
   83584:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   83588:	fa01 f303 	lsl.w	r3, r1, r3
   8358c:	43db      	mvns	r3, r3
   8358e:	495c      	ldr	r1, [pc, #368]	; (83700 <udd_ep_interrupt+0x1e4>)
   83590:	4013      	ands	r3, r2
   83592:	610b      	str	r3, [r1, #16]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   83594:	7bfb      	ldrb	r3, [r7, #15]
   83596:	011a      	lsls	r2, r3, #4
   83598:	4b5a      	ldr	r3, [pc, #360]	; (83704 <udd_ep_interrupt+0x1e8>)
   8359a:	4413      	add	r3, r2
   8359c:	68db      	ldr	r3, [r3, #12]
					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
   8359e:	0c1b      	lsrs	r3, r3, #16
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   835a0:	b29b      	uxth	r3, r3
   835a2:	607b      	str	r3, [r7, #4]
			if (nb_remaining) {
   835a4:	687b      	ldr	r3, [r7, #4]
   835a6:	2b00      	cmp	r3, #0
   835a8:	d009      	beq.n	835be <udd_ep_interrupt+0xa2>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   835aa:	68bb      	ldr	r3, [r7, #8]
   835ac:	68da      	ldr	r2, [r3, #12]
   835ae:	687b      	ldr	r3, [r7, #4]
   835b0:	1ad2      	subs	r2, r2, r3
   835b2:	68bb      	ldr	r3, [r7, #8]
   835b4:	60da      	str	r2, [r3, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   835b6:	68bb      	ldr	r3, [r7, #8]
   835b8:	68da      	ldr	r2, [r3, #12]
   835ba:	68bb      	ldr	r3, [r7, #8]
   835bc:	609a      	str	r2, [r3, #8]
			}
			udd_ep_trans_done(ep);
   835be:	7bfb      	ldrb	r3, [r7, #15]
   835c0:	4618      	mov	r0, r3
   835c2:	4b51      	ldr	r3, [pc, #324]	; (83708 <udd_ep_interrupt+0x1ec>)
   835c4:	4798      	blx	r3
			return true;
   835c6:	2301      	movs	r3, #1
   835c8:	e094      	b.n	836f4 <udd_ep_interrupt+0x1d8>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   835ca:	4b4d      	ldr	r3, [pc, #308]	; (83700 <udd_ep_interrupt+0x1e4>)
   835cc:	691a      	ldr	r2, [r3, #16]
   835ce:	7bfb      	ldrb	r3, [r7, #15]
   835d0:	f44f 7180 	mov.w	r1, #256	; 0x100
   835d4:	fa01 f303 	lsl.w	r3, r1, r3
   835d8:	4013      	ands	r3, r2
   835da:	2b00      	cmp	r3, #0
   835dc:	f000 8082 	beq.w	836e4 <udd_ep_interrupt+0x1c8>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   835e0:	4a47      	ldr	r2, [pc, #284]	; (83700 <udd_ep_interrupt+0x1e4>)
   835e2:	7bfb      	ldrb	r3, [r7, #15]
   835e4:	015b      	lsls	r3, r3, #5
   835e6:	4413      	add	r3, r2
   835e8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   835ec:	681b      	ldr	r3, [r3, #0]
   835ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   835f2:	2b00      	cmp	r3, #0
   835f4:	d024      	beq.n	83640 <udd_ep_interrupt+0x124>
					&& !Is_udd_tx_pkt_ready(ep)) {
   835f6:	4a42      	ldr	r2, [pc, #264]	; (83700 <udd_ep_interrupt+0x1e4>)
   835f8:	7bfb      	ldrb	r3, [r7, #15]
   835fa:	015b      	lsls	r3, r3, #5
   835fc:	4413      	add	r3, r2
   835fe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83602:	681b      	ldr	r3, [r3, #0]
   83604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   83608:	2b00      	cmp	r3, #0
   8360a:	d119      	bne.n	83640 <udd_ep_interrupt+0x124>
				udd_disable_tx_pkt_ready_interrupt(ep);
   8360c:	4a3c      	ldr	r2, [pc, #240]	; (83700 <udd_ep_interrupt+0x1e4>)
   8360e:	7bfb      	ldrb	r3, [r7, #15]
   83610:	015b      	lsls	r3, r3, #5
   83612:	4413      	add	r3, r2
   83614:	f503 7384 	add.w	r3, r3, #264	; 0x108
   83618:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8361c:	601a      	str	r2, [r3, #0]
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   8361e:	4a38      	ldr	r2, [pc, #224]	; (83700 <udd_ep_interrupt+0x1e4>)
   83620:	7bfb      	ldrb	r3, [r7, #15]
   83622:	015b      	lsls	r3, r3, #5
   83624:	4413      	add	r3, r2
   83626:	f503 738a 	add.w	r3, r3, #276	; 0x114
   8362a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8362e:	601a      	str	r2, [r3, #0]
				udd_ep_finish_job(ptr_job, false, ep);
   83630:	7bfb      	ldrb	r3, [r7, #15]
   83632:	461a      	mov	r2, r3
   83634:	2100      	movs	r1, #0
   83636:	68b8      	ldr	r0, [r7, #8]
   83638:	4b34      	ldr	r3, [pc, #208]	; (8370c <udd_ep_interrupt+0x1f0>)
   8363a:	4798      	blx	r3
				return true;
   8363c:	2301      	movs	r3, #1
   8363e:	e059      	b.n	836f4 <udd_ep_interrupt+0x1d8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   83640:	4a2f      	ldr	r2, [pc, #188]	; (83700 <udd_ep_interrupt+0x1e4>)
   83642:	7bfb      	ldrb	r3, [r7, #15]
   83644:	015b      	lsls	r3, r3, #5
   83646:	4413      	add	r3, r2
   83648:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   8364c:	681b      	ldr	r3, [r3, #0]
   8364e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   83652:	2b00      	cmp	r3, #0
   83654:	d046      	beq.n	836e4 <udd_ep_interrupt+0x1c8>
					&& (0 == udd_nb_busy_bank(ep))) {
   83656:	4a2a      	ldr	r2, [pc, #168]	; (83700 <udd_ep_interrupt+0x1e4>)
   83658:	7bfb      	ldrb	r3, [r7, #15]
   8365a:	015b      	lsls	r3, r3, #5
   8365c:	4413      	add	r3, r2
   8365e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83662:	681b      	ldr	r3, [r3, #0]
   83664:	0c9b      	lsrs	r3, r3, #18
   83666:	f003 0303 	and.w	r3, r3, #3
   8366a:	2b00      	cmp	r3, #0
   8366c:	d13a      	bne.n	836e4 <udd_ep_interrupt+0x1c8>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   8366e:	4a24      	ldr	r2, [pc, #144]	; (83700 <udd_ep_interrupt+0x1e4>)
   83670:	7bfb      	ldrb	r3, [r7, #15]
   83672:	015b      	lsls	r3, r3, #5
   83674:	4413      	add	r3, r2
   83676:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8367a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   8367e:	601a      	str	r2, [r3, #0]
				udd_disable_endpoint_interrupt(ep);
   83680:	4b1f      	ldr	r3, [pc, #124]	; (83700 <udd_ep_interrupt+0x1e4>)
   83682:	691a      	ldr	r2, [r3, #16]
   83684:	7bfb      	ldrb	r3, [r7, #15]
   83686:	f44f 7180 	mov.w	r1, #256	; 0x100
   8368a:	fa01 f303 	lsl.w	r3, r1, r3
   8368e:	43db      	mvns	r3, r3
   83690:	491b      	ldr	r1, [pc, #108]	; (83700 <udd_ep_interrupt+0x1e4>)
   83692:	4013      	ands	r3, r2
   83694:	610b      	str	r3, [r1, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   83696:	68ba      	ldr	r2, [r7, #8]
   83698:	7d13      	ldrb	r3, [r2, #20]
   8369a:	f36f 0382 	bfc	r3, #2, #1
   8369e:	7513      	strb	r3, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   836a0:	4a17      	ldr	r2, [pc, #92]	; (83700 <udd_ep_interrupt+0x1e4>)
   836a2:	7bfb      	ldrb	r3, [r7, #15]
   836a4:	015b      	lsls	r3, r3, #5
   836a6:	4413      	add	r3, r2
   836a8:	f503 7384 	add.w	r3, r3, #264	; 0x108
   836ac:	681a      	ldr	r2, [r3, #0]
   836ae:	4914      	ldr	r1, [pc, #80]	; (83700 <udd_ep_interrupt+0x1e4>)
   836b0:	7bfb      	ldrb	r3, [r7, #15]
   836b2:	f022 0202 	bic.w	r2, r2, #2
   836b6:	015b      	lsls	r3, r3, #5
   836b8:	440b      	add	r3, r1
   836ba:	f503 7384 	add.w	r3, r3, #264	; 0x108
   836be:	601a      	str	r2, [r3, #0]
				udd_enable_stall_handshake(ep);
   836c0:	4a0f      	ldr	r2, [pc, #60]	; (83700 <udd_ep_interrupt+0x1e4>)
   836c2:	7bfb      	ldrb	r3, [r7, #15]
   836c4:	015b      	lsls	r3, r3, #5
   836c6:	4413      	add	r3, r2
   836c8:	f503 738a 	add.w	r3, r3, #276	; 0x114
   836cc:	2220      	movs	r2, #32
   836ce:	601a      	str	r2, [r3, #0]
				udd_reset_data_toggle(ep);
   836d0:	4a0b      	ldr	r2, [pc, #44]	; (83700 <udd_ep_interrupt+0x1e4>)
   836d2:	7bfb      	ldrb	r3, [r7, #15]
   836d4:	015b      	lsls	r3, r3, #5
   836d6:	4413      	add	r3, r2
   836d8:	f503 738c 	add.w	r3, r3, #280	; 0x118
   836dc:	2240      	movs	r2, #64	; 0x40
   836de:	601a      	str	r2, [r3, #0]
				//dbg_print("exHalt%x ", ep);
				return true;
   836e0:	2301      	movs	r3, #1
   836e2:	e007      	b.n	836f4 <udd_ep_interrupt+0x1d8>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   836e4:	7bfb      	ldrb	r3, [r7, #15]
   836e6:	3301      	adds	r3, #1
   836e8:	73fb      	strb	r3, [r7, #15]
   836ea:	7bfb      	ldrb	r3, [r7, #15]
   836ec:	2b02      	cmp	r3, #2
   836ee:	f67f af1b 	bls.w	83528 <udd_ep_interrupt+0xc>
			}
		}
	}
	return false;
   836f2:	2300      	movs	r3, #0
}
   836f4:	4618      	mov	r0, r3
   836f6:	3710      	adds	r7, #16
   836f8:	46bd      	mov	sp, r7
   836fa:	bd80      	pop	{r7, pc}
   836fc:	20001284 	.word	0x20001284
   83700:	400a4000 	.word	0x400a4000
   83704:	400a4300 	.word	0x400a4300
   83708:	00083335 	.word	0x00083335
   8370c:	000832c5 	.word	0x000832c5

00083710 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   83710:	b580      	push	{r7, lr}
   83712:	b082      	sub	sp, #8
   83714:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   83716:	4b1e      	ldr	r3, [pc, #120]	; (83790 <Reset_Handler+0x80>)
   83718:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   8371a:	4b1e      	ldr	r3, [pc, #120]	; (83794 <Reset_Handler+0x84>)
   8371c:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   8371e:	687a      	ldr	r2, [r7, #4]
   83720:	683b      	ldr	r3, [r7, #0]
   83722:	429a      	cmp	r2, r3
   83724:	d00c      	beq.n	83740 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   83726:	e007      	b.n	83738 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   83728:	687a      	ldr	r2, [r7, #4]
   8372a:	1d13      	adds	r3, r2, #4
   8372c:	607b      	str	r3, [r7, #4]
   8372e:	683b      	ldr	r3, [r7, #0]
   83730:	1d19      	adds	r1, r3, #4
   83732:	6039      	str	r1, [r7, #0]
   83734:	6812      	ldr	r2, [r2, #0]
   83736:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   83738:	683b      	ldr	r3, [r7, #0]
   8373a:	4a17      	ldr	r2, [pc, #92]	; (83798 <Reset_Handler+0x88>)
   8373c:	4293      	cmp	r3, r2
   8373e:	d3f3      	bcc.n	83728 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83740:	4b16      	ldr	r3, [pc, #88]	; (8379c <Reset_Handler+0x8c>)
   83742:	603b      	str	r3, [r7, #0]
   83744:	e004      	b.n	83750 <Reset_Handler+0x40>
		*pDest++ = 0;
   83746:	683b      	ldr	r3, [r7, #0]
   83748:	1d1a      	adds	r2, r3, #4
   8374a:	603a      	str	r2, [r7, #0]
   8374c:	2200      	movs	r2, #0
   8374e:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   83750:	683b      	ldr	r3, [r7, #0]
   83752:	4a13      	ldr	r2, [pc, #76]	; (837a0 <Reset_Handler+0x90>)
   83754:	4293      	cmp	r3, r2
   83756:	d3f6      	bcc.n	83746 <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   83758:	4b12      	ldr	r3, [pc, #72]	; (837a4 <Reset_Handler+0x94>)
   8375a:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8375c:	687b      	ldr	r3, [r7, #4]
   8375e:	4a12      	ldr	r2, [pc, #72]	; (837a8 <Reset_Handler+0x98>)
   83760:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   83764:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   83768:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   8376a:	687b      	ldr	r3, [r7, #4]
   8376c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   83770:	d309      	bcc.n	83786 <Reset_Handler+0x76>
   83772:	687b      	ldr	r3, [r7, #4]
   83774:	4a0d      	ldr	r2, [pc, #52]	; (837ac <Reset_Handler+0x9c>)
   83776:	4293      	cmp	r3, r2
   83778:	d805      	bhi.n	83786 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8377a:	4b0b      	ldr	r3, [pc, #44]	; (837a8 <Reset_Handler+0x98>)
   8377c:	689b      	ldr	r3, [r3, #8]
   8377e:	4a0a      	ldr	r2, [pc, #40]	; (837a8 <Reset_Handler+0x98>)
   83780:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83784:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   83786:	4b0a      	ldr	r3, [pc, #40]	; (837b0 <Reset_Handler+0xa0>)
   83788:	4798      	blx	r3

	/* Branch to main function */
	main();
   8378a:	4b0a      	ldr	r3, [pc, #40]	; (837b4 <Reset_Handler+0xa4>)
   8378c:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   8378e:	e7fe      	b.n	8378e <Reset_Handler+0x7e>
   83790:	0008adc4 	.word	0x0008adc4
   83794:	20000000 	.word	0x20000000
   83798:	20000d58 	.word	0x20000d58
   8379c:	20000d58 	.word	0x20000d58
   837a0:	20001354 	.word	0x20001354
   837a4:	00080000 	.word	0x00080000
   837a8:	e000ed00 	.word	0xe000ed00
   837ac:	20003fff 	.word	0x20003fff
   837b0:	00085bd1 	.word	0x00085bd1
   837b4:	00080b3d 	.word	0x00080b3d

000837b8 <osc_enable>:
{
   837b8:	b580      	push	{r7, lr}
   837ba:	b082      	sub	sp, #8
   837bc:	af00      	add	r7, sp, #0
   837be:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   837c0:	687b      	ldr	r3, [r7, #4]
   837c2:	2b07      	cmp	r3, #7
   837c4:	d82e      	bhi.n	83824 <osc_enable+0x6c>
   837c6:	a201      	add	r2, pc, #4	; (adr r2, 837cc <osc_enable+0x14>)
   837c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   837cc:	00083823 	.word	0x00083823
   837d0:	000837ed 	.word	0x000837ed
   837d4:	000837f5 	.word	0x000837f5
   837d8:	000837fd 	.word	0x000837fd
   837dc:	00083805 	.word	0x00083805
   837e0:	0008380d 	.word	0x0008380d
   837e4:	00083815 	.word	0x00083815
   837e8:	0008381d 	.word	0x0008381d
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   837ec:	2000      	movs	r0, #0
   837ee:	4b0f      	ldr	r3, [pc, #60]	; (8382c <osc_enable+0x74>)
   837f0:	4798      	blx	r3
		break;
   837f2:	e017      	b.n	83824 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   837f4:	2001      	movs	r0, #1
   837f6:	4b0d      	ldr	r3, [pc, #52]	; (8382c <osc_enable+0x74>)
   837f8:	4798      	blx	r3
		break;
   837fa:	e013      	b.n	83824 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   837fc:	2000      	movs	r0, #0
   837fe:	4b0c      	ldr	r3, [pc, #48]	; (83830 <osc_enable+0x78>)
   83800:	4798      	blx	r3
		break;
   83802:	e00f      	b.n	83824 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   83804:	2010      	movs	r0, #16
   83806:	4b0a      	ldr	r3, [pc, #40]	; (83830 <osc_enable+0x78>)
   83808:	4798      	blx	r3
		break;
   8380a:	e00b      	b.n	83824 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   8380c:	2020      	movs	r0, #32
   8380e:	4b08      	ldr	r3, [pc, #32]	; (83830 <osc_enable+0x78>)
   83810:	4798      	blx	r3
		break;
   83812:	e007      	b.n	83824 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   83814:	203e      	movs	r0, #62	; 0x3e
   83816:	4b07      	ldr	r3, [pc, #28]	; (83834 <osc_enable+0x7c>)
   83818:	4798      	blx	r3
		break;
   8381a:	e003      	b.n	83824 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   8381c:	4b06      	ldr	r3, [pc, #24]	; (83838 <osc_enable+0x80>)
   8381e:	4798      	blx	r3
		break;
   83820:	e000      	b.n	83824 <osc_enable+0x6c>
		break;
   83822:	bf00      	nop
}
   83824:	bf00      	nop
   83826:	3708      	adds	r7, #8
   83828:	46bd      	mov	sp, r7
   8382a:	bd80      	pop	{r7, pc}
   8382c:	00083c89 	.word	0x00083c89
   83830:	00083cf5 	.word	0x00083cf5
   83834:	00083d69 	.word	0x00083d69
   83838:	00083db5 	.word	0x00083db5

0008383c <osc_is_ready>:
{
   8383c:	b580      	push	{r7, lr}
   8383e:	b082      	sub	sp, #8
   83840:	af00      	add	r7, sp, #0
   83842:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83844:	687b      	ldr	r3, [r7, #4]
   83846:	2b07      	cmp	r3, #7
   83848:	d82f      	bhi.n	838aa <osc_is_ready+0x6e>
   8384a:	a201      	add	r2, pc, #4	; (adr r2, 83850 <osc_is_ready+0x14>)
   8384c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83850:	00083871 	.word	0x00083871
   83854:	00083875 	.word	0x00083875
   83858:	00083875 	.word	0x00083875
   8385c:	00083887 	.word	0x00083887
   83860:	00083887 	.word	0x00083887
   83864:	00083887 	.word	0x00083887
   83868:	00083899 	.word	0x00083899
   8386c:	00083899 	.word	0x00083899
		return 1;
   83870:	2301      	movs	r3, #1
   83872:	e01b      	b.n	838ac <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   83874:	4b0f      	ldr	r3, [pc, #60]	; (838b4 <osc_is_ready+0x78>)
   83876:	4798      	blx	r3
   83878:	4603      	mov	r3, r0
   8387a:	2b00      	cmp	r3, #0
   8387c:	bf14      	ite	ne
   8387e:	2301      	movne	r3, #1
   83880:	2300      	moveq	r3, #0
   83882:	b2db      	uxtb	r3, r3
   83884:	e012      	b.n	838ac <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   83886:	4b0c      	ldr	r3, [pc, #48]	; (838b8 <osc_is_ready+0x7c>)
   83888:	4798      	blx	r3
   8388a:	4603      	mov	r3, r0
   8388c:	2b00      	cmp	r3, #0
   8388e:	bf14      	ite	ne
   83890:	2301      	movne	r3, #1
   83892:	2300      	moveq	r3, #0
   83894:	b2db      	uxtb	r3, r3
   83896:	e009      	b.n	838ac <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   83898:	4b08      	ldr	r3, [pc, #32]	; (838bc <osc_is_ready+0x80>)
   8389a:	4798      	blx	r3
   8389c:	4603      	mov	r3, r0
   8389e:	2b00      	cmp	r3, #0
   838a0:	bf14      	ite	ne
   838a2:	2301      	movne	r3, #1
   838a4:	2300      	moveq	r3, #0
   838a6:	b2db      	uxtb	r3, r3
   838a8:	e000      	b.n	838ac <osc_is_ready+0x70>
	return 0;
   838aa:	2300      	movs	r3, #0
}
   838ac:	4618      	mov	r0, r3
   838ae:	3708      	adds	r7, #8
   838b0:	46bd      	mov	sp, r7
   838b2:	bd80      	pop	{r7, pc}
   838b4:	00083cc1 	.word	0x00083cc1
   838b8:	00083d51 	.word	0x00083d51
   838bc:	00083e01 	.word	0x00083e01

000838c0 <osc_get_rate>:
{
   838c0:	b480      	push	{r7}
   838c2:	b083      	sub	sp, #12
   838c4:	af00      	add	r7, sp, #0
   838c6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   838c8:	687b      	ldr	r3, [r7, #4]
   838ca:	2b07      	cmp	r3, #7
   838cc:	d823      	bhi.n	83916 <osc_get_rate+0x56>
   838ce:	a201      	add	r2, pc, #4	; (adr r2, 838d4 <osc_get_rate+0x14>)
   838d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   838d4:	000838f5 	.word	0x000838f5
   838d8:	000838fb 	.word	0x000838fb
   838dc:	000838ff 	.word	0x000838ff
   838e0:	00083903 	.word	0x00083903
   838e4:	00083907 	.word	0x00083907
   838e8:	0008390b 	.word	0x0008390b
   838ec:	0008390f 	.word	0x0008390f
   838f0:	00083913 	.word	0x00083913
		return OSC_SLCK_32K_RC_HZ;
   838f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   838f8:	e00e      	b.n	83918 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   838fa:	2300      	movs	r3, #0
   838fc:	e00c      	b.n	83918 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   838fe:	2300      	movs	r3, #0
   83900:	e00a      	b.n	83918 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   83902:	4b08      	ldr	r3, [pc, #32]	; (83924 <osc_get_rate+0x64>)
   83904:	e008      	b.n	83918 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   83906:	4b08      	ldr	r3, [pc, #32]	; (83928 <osc_get_rate+0x68>)
   83908:	e006      	b.n	83918 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   8390a:	4b08      	ldr	r3, [pc, #32]	; (8392c <osc_get_rate+0x6c>)
   8390c:	e004      	b.n	83918 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   8390e:	4b07      	ldr	r3, [pc, #28]	; (8392c <osc_get_rate+0x6c>)
   83910:	e002      	b.n	83918 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   83912:	4b06      	ldr	r3, [pc, #24]	; (8392c <osc_get_rate+0x6c>)
   83914:	e000      	b.n	83918 <osc_get_rate+0x58>
	return 0;
   83916:	2300      	movs	r3, #0
}
   83918:	4618      	mov	r0, r3
   8391a:	370c      	adds	r7, #12
   8391c:	46bd      	mov	sp, r7
   8391e:	bc80      	pop	{r7}
   83920:	4770      	bx	lr
   83922:	bf00      	nop
   83924:	003d0900 	.word	0x003d0900
   83928:	007a1200 	.word	0x007a1200
   8392c:	00b71b00 	.word	0x00b71b00

00083930 <osc_wait_ready>:
{
   83930:	b580      	push	{r7, lr}
   83932:	b082      	sub	sp, #8
   83934:	af00      	add	r7, sp, #0
   83936:	4603      	mov	r3, r0
   83938:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8393a:	bf00      	nop
   8393c:	79fb      	ldrb	r3, [r7, #7]
   8393e:	4618      	mov	r0, r3
   83940:	4b05      	ldr	r3, [pc, #20]	; (83958 <osc_wait_ready+0x28>)
   83942:	4798      	blx	r3
   83944:	4603      	mov	r3, r0
   83946:	f083 0301 	eor.w	r3, r3, #1
   8394a:	b2db      	uxtb	r3, r3
   8394c:	2b00      	cmp	r3, #0
   8394e:	d1f5      	bne.n	8393c <osc_wait_ready+0xc>
}
   83950:	bf00      	nop
   83952:	3708      	adds	r7, #8
   83954:	46bd      	mov	sp, r7
   83956:	bd80      	pop	{r7, pc}
   83958:	0008383d 	.word	0x0008383d

0008395c <pll_config_init>:
{
   8395c:	b580      	push	{r7, lr}
   8395e:	b086      	sub	sp, #24
   83960:	af00      	add	r7, sp, #0
   83962:	60f8      	str	r0, [r7, #12]
   83964:	607a      	str	r2, [r7, #4]
   83966:	603b      	str	r3, [r7, #0]
   83968:	460b      	mov	r3, r1
   8396a:	72fb      	strb	r3, [r7, #11]
	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   8396c:	687b      	ldr	r3, [r7, #4]
   8396e:	2b00      	cmp	r3, #0
   83970:	d107      	bne.n	83982 <pll_config_init+0x26>
   83972:	683b      	ldr	r3, [r7, #0]
   83974:	2b00      	cmp	r3, #0
   83976:	d104      	bne.n	83982 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   83978:	68fb      	ldr	r3, [r7, #12]
   8397a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8397e:	601a      	str	r2, [r3, #0]
   83980:	e019      	b.n	839b6 <pll_config_init+0x5a>
		vco_hz = osc_get_rate(e_src) / ul_div;
   83982:	7afb      	ldrb	r3, [r7, #11]
   83984:	4618      	mov	r0, r3
   83986:	4b0e      	ldr	r3, [pc, #56]	; (839c0 <pll_config_init+0x64>)
   83988:	4798      	blx	r3
   8398a:	4602      	mov	r2, r0
   8398c:	687b      	ldr	r3, [r7, #4]
   8398e:	fbb2 f3f3 	udiv	r3, r2, r3
   83992:	617b      	str	r3, [r7, #20]
		vco_hz *= ul_mul;
   83994:	697b      	ldr	r3, [r7, #20]
   83996:	683a      	ldr	r2, [r7, #0]
   83998:	fb02 f303 	mul.w	r3, r2, r3
   8399c:	617b      	str	r3, [r7, #20]
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   8399e:	683b      	ldr	r3, [r7, #0]
   839a0:	3b01      	subs	r3, #1
   839a2:	041a      	lsls	r2, r3, #16
   839a4:	4b07      	ldr	r3, [pc, #28]	; (839c4 <pll_config_init+0x68>)
   839a6:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   839a8:	687a      	ldr	r2, [r7, #4]
   839aa:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   839ac:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   839ae:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   839b2:	68fb      	ldr	r3, [r7, #12]
   839b4:	601a      	str	r2, [r3, #0]
}
   839b6:	bf00      	nop
   839b8:	3718      	adds	r7, #24
   839ba:	46bd      	mov	sp, r7
   839bc:	bd80      	pop	{r7, pc}
   839be:	bf00      	nop
   839c0:	000838c1 	.word	0x000838c1
   839c4:	07ff0000 	.word	0x07ff0000

000839c8 <pll_enable>:
{
   839c8:	b580      	push	{r7, lr}
   839ca:	b082      	sub	sp, #8
   839cc:	af00      	add	r7, sp, #0
   839ce:	6078      	str	r0, [r7, #4]
   839d0:	6039      	str	r1, [r7, #0]
	if (ul_pll_id == PLLA_ID) {
   839d2:	683b      	ldr	r3, [r7, #0]
   839d4:	2b00      	cmp	r3, #0
   839d6:	d108      	bne.n	839ea <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   839d8:	4b09      	ldr	r3, [pc, #36]	; (83a00 <pll_enable+0x38>)
   839da:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   839dc:	687b      	ldr	r3, [r7, #4]
   839de:	681b      	ldr	r3, [r3, #0]
   839e0:	4a08      	ldr	r2, [pc, #32]	; (83a04 <pll_enable+0x3c>)
   839e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   839e6:	6293      	str	r3, [r2, #40]	; 0x28
}
   839e8:	e005      	b.n	839f6 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   839ea:	687b      	ldr	r3, [r7, #4]
   839ec:	681b      	ldr	r3, [r3, #0]
   839ee:	4a05      	ldr	r2, [pc, #20]	; (83a04 <pll_enable+0x3c>)
   839f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   839f4:	61d3      	str	r3, [r2, #28]
}
   839f6:	bf00      	nop
   839f8:	3708      	adds	r7, #8
   839fa:	46bd      	mov	sp, r7
   839fc:	bd80      	pop	{r7, pc}
   839fe:	bf00      	nop
   83a00:	00083e71 	.word	0x00083e71
   83a04:	400e0400 	.word	0x400e0400

00083a08 <pll_is_locked>:
{
   83a08:	b580      	push	{r7, lr}
   83a0a:	b082      	sub	sp, #8
   83a0c:	af00      	add	r7, sp, #0
   83a0e:	6078      	str	r0, [r7, #4]
	if (ul_pll_id == PLLA_ID) {
   83a10:	687b      	ldr	r3, [r7, #4]
   83a12:	2b00      	cmp	r3, #0
   83a14:	d103      	bne.n	83a1e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   83a16:	4b05      	ldr	r3, [pc, #20]	; (83a2c <pll_is_locked+0x24>)
   83a18:	4798      	blx	r3
   83a1a:	4603      	mov	r3, r0
   83a1c:	e002      	b.n	83a24 <pll_is_locked+0x1c>
		return pmc_is_locked_upll();
   83a1e:	4b04      	ldr	r3, [pc, #16]	; (83a30 <pll_is_locked+0x28>)
   83a20:	4798      	blx	r3
   83a22:	4603      	mov	r3, r0
}
   83a24:	4618      	mov	r0, r3
   83a26:	3708      	adds	r7, #8
   83a28:	46bd      	mov	sp, r7
   83a2a:	bd80      	pop	{r7, pc}
   83a2c:	00083e89 	.word	0x00083e89
   83a30:	00083ebd 	.word	0x00083ebd

00083a34 <pll_enable_source>:
{
   83a34:	b580      	push	{r7, lr}
   83a36:	b082      	sub	sp, #8
   83a38:	af00      	add	r7, sp, #0
   83a3a:	4603      	mov	r3, r0
   83a3c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   83a3e:	79fb      	ldrb	r3, [r7, #7]
   83a40:	3b03      	subs	r3, #3
   83a42:	2b04      	cmp	r3, #4
   83a44:	d808      	bhi.n	83a58 <pll_enable_source+0x24>
		osc_enable(e_src);
   83a46:	79fb      	ldrb	r3, [r7, #7]
   83a48:	4618      	mov	r0, r3
   83a4a:	4b06      	ldr	r3, [pc, #24]	; (83a64 <pll_enable_source+0x30>)
   83a4c:	4798      	blx	r3
		osc_wait_ready(e_src);
   83a4e:	79fb      	ldrb	r3, [r7, #7]
   83a50:	4618      	mov	r0, r3
   83a52:	4b05      	ldr	r3, [pc, #20]	; (83a68 <pll_enable_source+0x34>)
   83a54:	4798      	blx	r3
		break;
   83a56:	e000      	b.n	83a5a <pll_enable_source+0x26>
		break;
   83a58:	bf00      	nop
}
   83a5a:	bf00      	nop
   83a5c:	3708      	adds	r7, #8
   83a5e:	46bd      	mov	sp, r7
   83a60:	bd80      	pop	{r7, pc}
   83a62:	bf00      	nop
   83a64:	000837b9 	.word	0x000837b9
   83a68:	00083931 	.word	0x00083931

00083a6c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   83a6c:	b580      	push	{r7, lr}
   83a6e:	b082      	sub	sp, #8
   83a70:	af00      	add	r7, sp, #0
   83a72:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   83a74:	bf00      	nop
   83a76:	6878      	ldr	r0, [r7, #4]
   83a78:	4b04      	ldr	r3, [pc, #16]	; (83a8c <pll_wait_for_lock+0x20>)
   83a7a:	4798      	blx	r3
   83a7c:	4603      	mov	r3, r0
   83a7e:	2b00      	cmp	r3, #0
   83a80:	d0f9      	beq.n	83a76 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   83a82:	2300      	movs	r3, #0
}
   83a84:	4618      	mov	r0, r3
   83a86:	3708      	adds	r7, #8
   83a88:	46bd      	mov	sp, r7
   83a8a:	bd80      	pop	{r7, pc}
   83a8c:	00083a09 	.word	0x00083a09

00083a90 <sysclk_get_main_hz>:
{
   83a90:	b580      	push	{r7, lr}
   83a92:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   83a94:	2006      	movs	r0, #6
   83a96:	4b03      	ldr	r3, [pc, #12]	; (83aa4 <sysclk_get_main_hz+0x14>)
   83a98:	4798      	blx	r3
   83a9a:	4603      	mov	r3, r0
   83a9c:	011b      	lsls	r3, r3, #4
}
   83a9e:	4618      	mov	r0, r3
   83aa0:	bd80      	pop	{r7, pc}
   83aa2:	bf00      	nop
   83aa4:	000838c1 	.word	0x000838c1

00083aa8 <sysclk_get_cpu_hz>:
{
   83aa8:	b580      	push	{r7, lr}
   83aaa:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   83aac:	4b02      	ldr	r3, [pc, #8]	; (83ab8 <sysclk_get_cpu_hz+0x10>)
   83aae:	4798      	blx	r3
   83ab0:	4603      	mov	r3, r0
   83ab2:	085b      	lsrs	r3, r3, #1
}
   83ab4:	4618      	mov	r0, r3
   83ab6:	bd80      	pop	{r7, pc}
   83ab8:	00083a91 	.word	0x00083a91

00083abc <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   83abc:	b590      	push	{r4, r7, lr}
   83abe:	b083      	sub	sp, #12
   83ac0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	pll_enable_source(CONFIG_PLL1_SOURCE);
   83ac2:	2006      	movs	r0, #6
   83ac4:	4b09      	ldr	r3, [pc, #36]	; (83aec <sysclk_enable_usb+0x30>)
   83ac6:	4798      	blx	r3
	pll_config_defaults(&pllcfg, 1);
   83ac8:	1d38      	adds	r0, r7, #4
   83aca:	2300      	movs	r3, #0
   83acc:	2200      	movs	r2, #0
   83ace:	2106      	movs	r1, #6
   83ad0:	4c07      	ldr	r4, [pc, #28]	; (83af0 <sysclk_enable_usb+0x34>)
   83ad2:	47a0      	blx	r4
	pll_enable(&pllcfg, 1);
   83ad4:	1d3b      	adds	r3, r7, #4
   83ad6:	2101      	movs	r1, #1
   83ad8:	4618      	mov	r0, r3
   83ada:	4b06      	ldr	r3, [pc, #24]	; (83af4 <sysclk_enable_usb+0x38>)
   83adc:	4798      	blx	r3
	pll_wait_for_lock(1);
   83ade:	2001      	movs	r0, #1
   83ae0:	4b05      	ldr	r3, [pc, #20]	; (83af8 <sysclk_enable_usb+0x3c>)
   83ae2:	4798      	blx	r3
}
   83ae4:	bf00      	nop
   83ae6:	370c      	adds	r7, #12
   83ae8:	46bd      	mov	sp, r7
   83aea:	bd90      	pop	{r4, r7, pc}
   83aec:	00083a35 	.word	0x00083a35
   83af0:	0008395d 	.word	0x0008395d
   83af4:	000839c9 	.word	0x000839c9
   83af8:	00083a6d 	.word	0x00083a6d

00083afc <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   83afc:	b590      	push	{r4, r7, lr}
   83afe:	b083      	sub	sp, #12
   83b00:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   83b02:	4816      	ldr	r0, [pc, #88]	; (83b5c <sysclk_init+0x60>)
   83b04:	4b16      	ldr	r3, [pc, #88]	; (83b60 <sysclk_init+0x64>)
   83b06:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   83b08:	2006      	movs	r0, #6
   83b0a:	4b16      	ldr	r3, [pc, #88]	; (83b64 <sysclk_init+0x68>)
   83b0c:	4798      	blx	r3
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   83b0e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   83b12:	4b15      	ldr	r3, [pc, #84]	; (83b68 <sysclk_init+0x6c>)
   83b14:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   83b16:	bf00      	nop
   83b18:	4b14      	ldr	r3, [pc, #80]	; (83b6c <sysclk_init+0x70>)
   83b1a:	4798      	blx	r3
   83b1c:	4603      	mov	r3, r0
   83b1e:	2b00      	cmp	r3, #0
   83b20:	d0fa      	beq.n	83b18 <sysclk_init+0x1c>
		}
		pll_config_defaults(&pllcfg, 0);
   83b22:	1d38      	adds	r0, r7, #4
   83b24:	2310      	movs	r3, #16
   83b26:	2201      	movs	r2, #1
   83b28:	2106      	movs	r1, #6
   83b2a:	4c11      	ldr	r4, [pc, #68]	; (83b70 <sysclk_init+0x74>)
   83b2c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   83b2e:	1d3b      	adds	r3, r7, #4
   83b30:	2100      	movs	r1, #0
   83b32:	4618      	mov	r0, r3
   83b34:	4b0f      	ldr	r3, [pc, #60]	; (83b74 <sysclk_init+0x78>)
   83b36:	4798      	blx	r3
		pll_wait_for_lock(0);
   83b38:	2000      	movs	r0, #0
   83b3a:	4b0f      	ldr	r3, [pc, #60]	; (83b78 <sysclk_init+0x7c>)
   83b3c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   83b3e:	2010      	movs	r0, #16
   83b40:	4b0e      	ldr	r3, [pc, #56]	; (83b7c <sysclk_init+0x80>)
   83b42:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   83b44:	4b0e      	ldr	r3, [pc, #56]	; (83b80 <sysclk_init+0x84>)
   83b46:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83b48:	4b0e      	ldr	r3, [pc, #56]	; (83b84 <sysclk_init+0x88>)
   83b4a:	4798      	blx	r3
   83b4c:	4603      	mov	r3, r0
   83b4e:	4618      	mov	r0, r3
   83b50:	4b03      	ldr	r3, [pc, #12]	; (83b60 <sysclk_init+0x64>)
   83b52:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   83b54:	bf00      	nop
   83b56:	370c      	adds	r7, #12
   83b58:	46bd      	mov	sp, r7
   83b5a:	bd90      	pop	{r4, r7, pc}
   83b5c:	05b8d800 	.word	0x05b8d800
   83b60:	200001bd 	.word	0x200001bd
   83b64:	00083a35 	.word	0x00083a35
   83b68:	00083e31 	.word	0x00083e31
   83b6c:	00083e19 	.word	0x00083e19
   83b70:	0008395d 	.word	0x0008395d
   83b74:	000839c9 	.word	0x000839c9
   83b78:	00083a6d 	.word	0x00083a6d
   83b7c:	00083c09 	.word	0x00083c09
   83b80:	00085a59 	.word	0x00085a59
   83b84:	00083aa9 	.word	0x00083aa9

00083b88 <pmc_switch_mck_to_mainck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
   83b88:	b480      	push	{r7}
   83b8a:	b085      	sub	sp, #20
   83b8c:	af00      	add	r7, sp, #0
   83b8e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83b90:	4b1c      	ldr	r3, [pc, #112]	; (83c04 <pmc_switch_mck_to_mainck+0x7c>)
   83b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83b94:	f023 0303 	bic.w	r3, r3, #3
   83b98:	4a1a      	ldr	r2, [pc, #104]	; (83c04 <pmc_switch_mck_to_mainck+0x7c>)
   83b9a:	f043 0301 	orr.w	r3, r3, #1
   83b9e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83ba0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83ba4:	60fb      	str	r3, [r7, #12]
   83ba6:	e007      	b.n	83bb8 <pmc_switch_mck_to_mainck+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83ba8:	68fb      	ldr	r3, [r7, #12]
   83baa:	2b00      	cmp	r3, #0
   83bac:	d101      	bne.n	83bb2 <pmc_switch_mck_to_mainck+0x2a>
			return 1;
   83bae:	2301      	movs	r3, #1
   83bb0:	e023      	b.n	83bfa <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   83bb2:	68fb      	ldr	r3, [r7, #12]
   83bb4:	3b01      	subs	r3, #1
   83bb6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83bb8:	4b12      	ldr	r3, [pc, #72]	; (83c04 <pmc_switch_mck_to_mainck+0x7c>)
   83bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83bbc:	f003 0308 	and.w	r3, r3, #8
   83bc0:	2b00      	cmp	r3, #0
   83bc2:	d0f1      	beq.n	83ba8 <pmc_switch_mck_to_mainck+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83bc4:	4b0f      	ldr	r3, [pc, #60]	; (83c04 <pmc_switch_mck_to_mainck+0x7c>)
   83bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83bc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   83bcc:	490d      	ldr	r1, [pc, #52]	; (83c04 <pmc_switch_mck_to_mainck+0x7c>)
   83bce:	687b      	ldr	r3, [r7, #4]
   83bd0:	4313      	orrs	r3, r2
   83bd2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83bd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83bd8:	60fb      	str	r3, [r7, #12]
   83bda:	e007      	b.n	83bec <pmc_switch_mck_to_mainck+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83bdc:	68fb      	ldr	r3, [r7, #12]
   83bde:	2b00      	cmp	r3, #0
   83be0:	d101      	bne.n	83be6 <pmc_switch_mck_to_mainck+0x5e>
			return 1;
   83be2:	2301      	movs	r3, #1
   83be4:	e009      	b.n	83bfa <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   83be6:	68fb      	ldr	r3, [r7, #12]
   83be8:	3b01      	subs	r3, #1
   83bea:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83bec:	4b05      	ldr	r3, [pc, #20]	; (83c04 <pmc_switch_mck_to_mainck+0x7c>)
   83bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83bf0:	f003 0308 	and.w	r3, r3, #8
   83bf4:	2b00      	cmp	r3, #0
   83bf6:	d0f1      	beq.n	83bdc <pmc_switch_mck_to_mainck+0x54>
		}
	}

	return 0;
   83bf8:	2300      	movs	r3, #0
}
   83bfa:	4618      	mov	r0, r3
   83bfc:	3714      	adds	r7, #20
   83bfe:	46bd      	mov	sp, r7
   83c00:	bc80      	pop	{r7}
   83c02:	4770      	bx	lr
   83c04:	400e0400 	.word	0x400e0400

00083c08 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   83c08:	b480      	push	{r7}
   83c0a:	b085      	sub	sp, #20
   83c0c:	af00      	add	r7, sp, #0
   83c0e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83c10:	4b1c      	ldr	r3, [pc, #112]	; (83c84 <pmc_switch_mck_to_pllack+0x7c>)
   83c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83c14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   83c18:	491a      	ldr	r1, [pc, #104]	; (83c84 <pmc_switch_mck_to_pllack+0x7c>)
   83c1a:	687b      	ldr	r3, [r7, #4]
   83c1c:	4313      	orrs	r3, r2
   83c1e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83c20:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83c24:	60fb      	str	r3, [r7, #12]
   83c26:	e007      	b.n	83c38 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83c28:	68fb      	ldr	r3, [r7, #12]
   83c2a:	2b00      	cmp	r3, #0
   83c2c:	d101      	bne.n	83c32 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   83c2e:	2301      	movs	r3, #1
   83c30:	e023      	b.n	83c7a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   83c32:	68fb      	ldr	r3, [r7, #12]
   83c34:	3b01      	subs	r3, #1
   83c36:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83c38:	4b12      	ldr	r3, [pc, #72]	; (83c84 <pmc_switch_mck_to_pllack+0x7c>)
   83c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83c3c:	f003 0308 	and.w	r3, r3, #8
   83c40:	2b00      	cmp	r3, #0
   83c42:	d0f1      	beq.n	83c28 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83c44:	4b0f      	ldr	r3, [pc, #60]	; (83c84 <pmc_switch_mck_to_pllack+0x7c>)
   83c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83c48:	f023 0303 	bic.w	r3, r3, #3
   83c4c:	4a0d      	ldr	r2, [pc, #52]	; (83c84 <pmc_switch_mck_to_pllack+0x7c>)
   83c4e:	f043 0302 	orr.w	r3, r3, #2
   83c52:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83c54:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83c58:	60fb      	str	r3, [r7, #12]
   83c5a:	e007      	b.n	83c6c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83c5c:	68fb      	ldr	r3, [r7, #12]
   83c5e:	2b00      	cmp	r3, #0
   83c60:	d101      	bne.n	83c66 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   83c62:	2301      	movs	r3, #1
   83c64:	e009      	b.n	83c7a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   83c66:	68fb      	ldr	r3, [r7, #12]
   83c68:	3b01      	subs	r3, #1
   83c6a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83c6c:	4b05      	ldr	r3, [pc, #20]	; (83c84 <pmc_switch_mck_to_pllack+0x7c>)
   83c6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83c70:	f003 0308 	and.w	r3, r3, #8
   83c74:	2b00      	cmp	r3, #0
   83c76:	d0f1      	beq.n	83c5c <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   83c78:	2300      	movs	r3, #0
}
   83c7a:	4618      	mov	r0, r3
   83c7c:	3714      	adds	r7, #20
   83c7e:	46bd      	mov	sp, r7
   83c80:	bc80      	pop	{r7}
   83c82:	4770      	bx	lr
   83c84:	400e0400 	.word	0x400e0400

00083c88 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   83c88:	b480      	push	{r7}
   83c8a:	b083      	sub	sp, #12
   83c8c:	af00      	add	r7, sp, #0
   83c8e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   83c90:	687b      	ldr	r3, [r7, #4]
   83c92:	2b01      	cmp	r3, #1
   83c94:	d107      	bne.n	83ca6 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   83c96:	4b08      	ldr	r3, [pc, #32]	; (83cb8 <pmc_switch_sclk_to_32kxtal+0x30>)
   83c98:	689b      	ldr	r3, [r3, #8]
   83c9a:	4a07      	ldr	r2, [pc, #28]	; (83cb8 <pmc_switch_sclk_to_32kxtal+0x30>)
   83c9c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   83ca0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83ca4:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   83ca6:	4b04      	ldr	r3, [pc, #16]	; (83cb8 <pmc_switch_sclk_to_32kxtal+0x30>)
   83ca8:	4a04      	ldr	r2, [pc, #16]	; (83cbc <pmc_switch_sclk_to_32kxtal+0x34>)
   83caa:	601a      	str	r2, [r3, #0]
}
   83cac:	bf00      	nop
   83cae:	370c      	adds	r7, #12
   83cb0:	46bd      	mov	sp, r7
   83cb2:	bc80      	pop	{r7}
   83cb4:	4770      	bx	lr
   83cb6:	bf00      	nop
   83cb8:	400e1210 	.word	0x400e1210
   83cbc:	a5000008 	.word	0xa5000008

00083cc0 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   83cc0:	b480      	push	{r7}
   83cc2:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   83cc4:	4b09      	ldr	r3, [pc, #36]	; (83cec <pmc_osc_is_ready_32kxtal+0x2c>)
   83cc6:	695b      	ldr	r3, [r3, #20]
   83cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   83ccc:	2b00      	cmp	r3, #0
   83cce:	d007      	beq.n	83ce0 <pmc_osc_is_ready_32kxtal+0x20>
   83cd0:	4b07      	ldr	r3, [pc, #28]	; (83cf0 <pmc_osc_is_ready_32kxtal+0x30>)
   83cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83cd8:	2b00      	cmp	r3, #0
   83cda:	d001      	beq.n	83ce0 <pmc_osc_is_ready_32kxtal+0x20>
   83cdc:	2301      	movs	r3, #1
   83cde:	e000      	b.n	83ce2 <pmc_osc_is_ready_32kxtal+0x22>
   83ce0:	2300      	movs	r3, #0
}
   83ce2:	4618      	mov	r0, r3
   83ce4:	46bd      	mov	sp, r7
   83ce6:	bc80      	pop	{r7}
   83ce8:	4770      	bx	lr
   83cea:	bf00      	nop
   83cec:	400e1210 	.word	0x400e1210
   83cf0:	400e0400 	.word	0x400e0400

00083cf4 <pmc_osc_enable_fastrc>:
 * \brief Enable fast RC oscillator.
 *
 * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 */
void pmc_osc_enable_fastrc(uint32_t ul_rc)
{
   83cf4:	b480      	push	{r7}
   83cf6:	b083      	sub	sp, #12
   83cf8:	af00      	add	r7, sp, #0
   83cfa:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   83cfc:	4b13      	ldr	r3, [pc, #76]	; (83d4c <pmc_osc_enable_fastrc+0x58>)
   83cfe:	6a1b      	ldr	r3, [r3, #32]
   83d00:	4a12      	ldr	r2, [pc, #72]	; (83d4c <pmc_osc_enable_fastrc+0x58>)
   83d02:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83d06:	f043 0308 	orr.w	r3, r3, #8
   83d0a:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83d0c:	bf00      	nop
   83d0e:	4b0f      	ldr	r3, [pc, #60]	; (83d4c <pmc_osc_enable_fastrc+0x58>)
   83d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83d16:	2b00      	cmp	r3, #0
   83d18:	d0f9      	beq.n	83d0e <pmc_osc_enable_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83d1a:	4b0c      	ldr	r3, [pc, #48]	; (83d4c <pmc_osc_enable_fastrc+0x58>)
   83d1c:	6a1b      	ldr	r3, [r3, #32]
   83d1e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_rc;
   83d26:	687a      	ldr	r2, [r7, #4]
   83d28:	4313      	orrs	r3, r2
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83d2a:	4a08      	ldr	r2, [pc, #32]	; (83d4c <pmc_osc_enable_fastrc+0x58>)
			CKGR_MOR_KEY_PASSWD | ul_rc;
   83d2c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83d30:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83d32:	bf00      	nop
   83d34:	4b05      	ldr	r3, [pc, #20]	; (83d4c <pmc_osc_enable_fastrc+0x58>)
   83d36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83d3c:	2b00      	cmp	r3, #0
   83d3e:	d0f9      	beq.n	83d34 <pmc_osc_enable_fastrc+0x40>
}
   83d40:	bf00      	nop
   83d42:	370c      	adds	r7, #12
   83d44:	46bd      	mov	sp, r7
   83d46:	bc80      	pop	{r7}
   83d48:	4770      	bx	lr
   83d4a:	bf00      	nop
   83d4c:	400e0400 	.word	0x400e0400

00083d50 <pmc_osc_is_ready_fastrc>:
 * \brief Check if the main fastrc is ready.
 *
 * \retval 0 Xtal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_fastrc(void)
{
   83d50:	b480      	push	{r7}
   83d52:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
   83d54:	4b03      	ldr	r3, [pc, #12]	; (83d64 <pmc_osc_is_ready_fastrc+0x14>)
   83d56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
}
   83d5c:	4618      	mov	r0, r3
   83d5e:	46bd      	mov	sp, r7
   83d60:	bc80      	pop	{r7}
   83d62:	4770      	bx	lr
   83d64:	400e0400 	.word	0x400e0400

00083d68 <pmc_osc_enable_main_xtal>:
 * \brief Enable main XTAL oscillator.
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
   83d68:	b480      	push	{r7}
   83d6a:	b085      	sub	sp, #20
   83d6c:	af00      	add	r7, sp, #0
   83d6e:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   83d70:	4b0f      	ldr	r3, [pc, #60]	; (83db0 <pmc_osc_enable_main_xtal+0x48>)
   83d72:	6a1b      	ldr	r3, [r3, #32]
   83d74:	60fb      	str	r3, [r7, #12]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   83d76:	68fb      	ldr	r3, [r7, #12]
   83d78:	f023 0303 	bic.w	r3, r3, #3
   83d7c:	60fb      	str	r3, [r7, #12]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83d7e:	687b      	ldr	r3, [r7, #4]
   83d80:	021b      	lsls	r3, r3, #8
   83d82:	b29a      	uxth	r2, r3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83d84:	68fb      	ldr	r3, [r7, #12]
   83d86:	4313      	orrs	r3, r2
   83d88:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83d8c:	f043 0301 	orr.w	r3, r3, #1
   83d90:	60fb      	str	r3, [r7, #12]
	PMC->CKGR_MOR = mor;
   83d92:	4a07      	ldr	r2, [pc, #28]	; (83db0 <pmc_osc_enable_main_xtal+0x48>)
   83d94:	68fb      	ldr	r3, [r7, #12]
   83d96:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83d98:	bf00      	nop
   83d9a:	4b05      	ldr	r3, [pc, #20]	; (83db0 <pmc_osc_enable_main_xtal+0x48>)
   83d9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83d9e:	f003 0301 	and.w	r3, r3, #1
   83da2:	2b00      	cmp	r3, #0
   83da4:	d0f9      	beq.n	83d9a <pmc_osc_enable_main_xtal+0x32>
}
   83da6:	bf00      	nop
   83da8:	3714      	adds	r7, #20
   83daa:	46bd      	mov	sp, r7
   83dac:	bc80      	pop	{r7}
   83dae:	4770      	bx	lr
   83db0:	400e0400 	.word	0x400e0400

00083db4 <pmc_osc_bypass_main_xtal>:

/**
 * \brief Bypass main XTAL.
 */
void pmc_osc_bypass_main_xtal(void)
{
   83db4:	b480      	push	{r7}
   83db6:	b083      	sub	sp, #12
   83db8:	af00      	add	r7, sp, #0
	uint32_t mor = PMC->CKGR_MOR;
   83dba:	4b0a      	ldr	r3, [pc, #40]	; (83de4 <pmc_osc_bypass_main_xtal+0x30>)
   83dbc:	6a1b      	ldr	r3, [r3, #32]
   83dbe:	607b      	str	r3, [r7, #4]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   83dc0:	687b      	ldr	r3, [r7, #4]
   83dc2:	f023 0303 	bic.w	r3, r3, #3
   83dc6:	607b      	str	r3, [r7, #4]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
   83dc8:	687b      	ldr	r3, [r7, #4]
   83dca:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83dce:	f043 0302 	orr.w	r3, r3, #2
   83dd2:	607b      	str	r3, [r7, #4]
	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
	PMC->CKGR_MOR = mor;
   83dd4:	4a03      	ldr	r2, [pc, #12]	; (83de4 <pmc_osc_bypass_main_xtal+0x30>)
   83dd6:	687b      	ldr	r3, [r7, #4]
   83dd8:	6213      	str	r3, [r2, #32]
	/* The MOSCXTS in PMC_SR is automatically set */
}
   83dda:	bf00      	nop
   83ddc:	370c      	adds	r7, #12
   83dde:	46bd      	mov	sp, r7
   83de0:	bc80      	pop	{r7}
   83de2:	4770      	bx	lr
   83de4:	400e0400 	.word	0x400e0400

00083de8 <pmc_osc_is_bypassed_main_xtal>:
 * \brief Check if the main crystal is bypassed.
 *
 * \retval 0 Xtal is bypassed, otherwise not.
 */
uint32_t pmc_osc_is_bypassed_main_xtal(void)
{
   83de8:	b480      	push	{r7}
   83dea:	af00      	add	r7, sp, #0
	return (PMC->CKGR_MOR & CKGR_MOR_MOSCXTBY);
   83dec:	4b03      	ldr	r3, [pc, #12]	; (83dfc <pmc_osc_is_bypassed_main_xtal+0x14>)
   83dee:	6a1b      	ldr	r3, [r3, #32]
   83df0:	f003 0302 	and.w	r3, r3, #2
}
   83df4:	4618      	mov	r0, r3
   83df6:	46bd      	mov	sp, r7
   83df8:	bc80      	pop	{r7}
   83dfa:	4770      	bx	lr
   83dfc:	400e0400 	.word	0x400e0400

00083e00 <pmc_osc_is_ready_main_xtal>:
 * \note If main crystal is bypassed, it's always ready.
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
   83e00:	b480      	push	{r7}
   83e02:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   83e04:	4b03      	ldr	r3, [pc, #12]	; (83e14 <pmc_osc_is_ready_main_xtal+0x14>)
   83e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83e08:	f003 0301 	and.w	r3, r3, #1
}
   83e0c:	4618      	mov	r0, r3
   83e0e:	46bd      	mov	sp, r7
   83e10:	bc80      	pop	{r7}
   83e12:	4770      	bx	lr
   83e14:	400e0400 	.word	0x400e0400

00083e18 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   83e18:	b480      	push	{r7}
   83e1a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83e1c:	4b03      	ldr	r3, [pc, #12]	; (83e2c <pmc_osc_is_ready_mainck+0x14>)
   83e1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   83e24:	4618      	mov	r0, r3
   83e26:	46bd      	mov	sp, r7
   83e28:	bc80      	pop	{r7}
   83e2a:	4770      	bx	lr
   83e2c:	400e0400 	.word	0x400e0400

00083e30 <pmc_mainck_osc_select>:
 * \note This function will not enable/disable RC or Main Crystal.
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
   83e30:	b480      	push	{r7}
   83e32:	b085      	sub	sp, #20
   83e34:	af00      	add	r7, sp, #0
   83e36:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   83e38:	4b0c      	ldr	r3, [pc, #48]	; (83e6c <pmc_mainck_osc_select+0x3c>)
   83e3a:	6a1b      	ldr	r3, [r3, #32]
   83e3c:	60fb      	str	r3, [r7, #12]
	if (ul_xtal_rc) {
   83e3e:	687b      	ldr	r3, [r7, #4]
   83e40:	2b00      	cmp	r3, #0
   83e42:	d004      	beq.n	83e4e <pmc_mainck_osc_select+0x1e>
		mor |=  CKGR_MOR_MOSCSEL;
   83e44:	68fb      	ldr	r3, [r7, #12]
   83e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   83e4a:	60fb      	str	r3, [r7, #12]
   83e4c:	e003      	b.n	83e56 <pmc_mainck_osc_select+0x26>
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   83e4e:	68fb      	ldr	r3, [r7, #12]
   83e50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   83e54:	60fb      	str	r3, [r7, #12]
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   83e56:	4a05      	ldr	r2, [pc, #20]	; (83e6c <pmc_mainck_osc_select+0x3c>)
   83e58:	68fb      	ldr	r3, [r7, #12]
   83e5a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83e5e:	6213      	str	r3, [r2, #32]
}
   83e60:	bf00      	nop
   83e62:	3714      	adds	r7, #20
   83e64:	46bd      	mov	sp, r7
   83e66:	bc80      	pop	{r7}
   83e68:	4770      	bx	lr
   83e6a:	bf00      	nop
   83e6c:	400e0400 	.word	0x400e0400

00083e70 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   83e70:	b480      	push	{r7}
   83e72:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83e74:	4b03      	ldr	r3, [pc, #12]	; (83e84 <pmc_disable_pllack+0x14>)
   83e76:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83e7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   83e7c:	bf00      	nop
   83e7e:	46bd      	mov	sp, r7
   83e80:	bc80      	pop	{r7}
   83e82:	4770      	bx	lr
   83e84:	400e0400 	.word	0x400e0400

00083e88 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   83e88:	b480      	push	{r7}
   83e8a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83e8c:	4b03      	ldr	r3, [pc, #12]	; (83e9c <pmc_is_locked_pllack+0x14>)
   83e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83e90:	f003 0302 	and.w	r3, r3, #2
}
   83e94:	4618      	mov	r0, r3
   83e96:	46bd      	mov	sp, r7
   83e98:	bc80      	pop	{r7}
   83e9a:	4770      	bx	lr
   83e9c:	400e0400 	.word	0x400e0400

00083ea0 <pmc_disable_upll_clock>:

/**
 * \brief Disable UPLL clock.
 */
void pmc_disable_upll_clock(void)
{
   83ea0:	b480      	push	{r7}
   83ea2:	af00      	add	r7, sp, #0
	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   83ea4:	4b04      	ldr	r3, [pc, #16]	; (83eb8 <pmc_disable_upll_clock+0x18>)
   83ea6:	69db      	ldr	r3, [r3, #28]
   83ea8:	4a03      	ldr	r2, [pc, #12]	; (83eb8 <pmc_disable_upll_clock+0x18>)
   83eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   83eae:	61d3      	str	r3, [r2, #28]
}
   83eb0:	bf00      	nop
   83eb2:	46bd      	mov	sp, r7
   83eb4:	bc80      	pop	{r7}
   83eb6:	4770      	bx	lr
   83eb8:	400e0400 	.word	0x400e0400

00083ebc <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   83ebc:	b480      	push	{r7}
   83ebe:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   83ec0:	4b03      	ldr	r3, [pc, #12]	; (83ed0 <pmc_is_locked_upll+0x14>)
   83ec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   83ec8:	4618      	mov	r0, r3
   83eca:	46bd      	mov	sp, r7
   83ecc:	bc80      	pop	{r7}
   83ece:	4770      	bx	lr
   83ed0:	400e0400 	.word	0x400e0400

00083ed4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   83ed4:	b480      	push	{r7}
   83ed6:	b083      	sub	sp, #12
   83ed8:	af00      	add	r7, sp, #0
   83eda:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   83edc:	687b      	ldr	r3, [r7, #4]
   83ede:	2b1d      	cmp	r3, #29
   83ee0:	d901      	bls.n	83ee6 <pmc_enable_periph_clk+0x12>
		return 1;
   83ee2:	2301      	movs	r3, #1
   83ee4:	e015      	b.n	83f12 <pmc_enable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   83ee6:	687b      	ldr	r3, [r7, #4]
   83ee8:	2b1f      	cmp	r3, #31
   83eea:	d811      	bhi.n	83f10 <pmc_enable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   83eec:	4b0b      	ldr	r3, [pc, #44]	; (83f1c <pmc_enable_periph_clk+0x48>)
   83eee:	699a      	ldr	r2, [r3, #24]
   83ef0:	2101      	movs	r1, #1
   83ef2:	687b      	ldr	r3, [r7, #4]
   83ef4:	fa01 f303 	lsl.w	r3, r1, r3
   83ef8:	401a      	ands	r2, r3
   83efa:	2101      	movs	r1, #1
   83efc:	687b      	ldr	r3, [r7, #4]
   83efe:	fa01 f303 	lsl.w	r3, r1, r3
   83f02:	429a      	cmp	r2, r3
   83f04:	d004      	beq.n	83f10 <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER0 = 1 << ul_id;
   83f06:	2201      	movs	r2, #1
   83f08:	687b      	ldr	r3, [r7, #4]
   83f0a:	409a      	lsls	r2, r3
   83f0c:	4b03      	ldr	r3, [pc, #12]	; (83f1c <pmc_enable_periph_clk+0x48>)
   83f0e:	611a      	str	r2, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   83f10:	2300      	movs	r3, #0
}
   83f12:	4618      	mov	r0, r3
   83f14:	370c      	adds	r7, #12
   83f16:	46bd      	mov	sp, r7
   83f18:	bc80      	pop	{r7}
   83f1a:	4770      	bx	lr
   83f1c:	400e0400 	.word	0x400e0400

00083f20 <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
   83f20:	b480      	push	{r7}
   83f22:	b083      	sub	sp, #12
   83f24:	af00      	add	r7, sp, #0
   83f26:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   83f28:	687b      	ldr	r3, [r7, #4]
   83f2a:	2b1d      	cmp	r3, #29
   83f2c:	d901      	bls.n	83f32 <pmc_disable_periph_clk+0x12>
		return 1;
   83f2e:	2301      	movs	r3, #1
   83f30:	e015      	b.n	83f5e <pmc_disable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   83f32:	687b      	ldr	r3, [r7, #4]
   83f34:	2b1f      	cmp	r3, #31
   83f36:	d811      	bhi.n	83f5c <pmc_disable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   83f38:	4b0b      	ldr	r3, [pc, #44]	; (83f68 <pmc_disable_periph_clk+0x48>)
   83f3a:	699a      	ldr	r2, [r3, #24]
   83f3c:	2101      	movs	r1, #1
   83f3e:	687b      	ldr	r3, [r7, #4]
   83f40:	fa01 f303 	lsl.w	r3, r1, r3
   83f44:	401a      	ands	r2, r3
   83f46:	2101      	movs	r1, #1
   83f48:	687b      	ldr	r3, [r7, #4]
   83f4a:	fa01 f303 	lsl.w	r3, r1, r3
   83f4e:	429a      	cmp	r2, r3
   83f50:	d104      	bne.n	83f5c <pmc_disable_periph_clk+0x3c>
			PMC->PMC_PCDR0 = 1 << ul_id;
   83f52:	2201      	movs	r2, #1
   83f54:	687b      	ldr	r3, [r7, #4]
   83f56:	409a      	lsls	r2, r3
   83f58:	4b03      	ldr	r3, [pc, #12]	; (83f68 <pmc_disable_periph_clk+0x48>)
   83f5a:	615a      	str	r2, [r3, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   83f5c:	2300      	movs	r3, #0
}
   83f5e:	4618      	mov	r0, r3
   83f60:	370c      	adds	r7, #12
   83f62:	46bd      	mov	sp, r7
   83f64:	bc80      	pop	{r7}
   83f66:	4770      	bx	lr
   83f68:	400e0400 	.word	0x400e0400

00083f6c <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
   83f6c:	b480      	push	{r7}
   83f6e:	b083      	sub	sp, #12
   83f70:	af00      	add	r7, sp, #0
   83f72:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   83f74:	4a05      	ldr	r2, [pc, #20]	; (83f8c <pmc_enable_pck+0x20>)
   83f76:	f44f 7180 	mov.w	r1, #256	; 0x100
   83f7a:	687b      	ldr	r3, [r7, #4]
   83f7c:	fa01 f303 	lsl.w	r3, r1, r3
   83f80:	6013      	str	r3, [r2, #0]
}
   83f82:	bf00      	nop
   83f84:	370c      	adds	r7, #12
   83f86:	46bd      	mov	sp, r7
   83f88:	bc80      	pop	{r7}
   83f8a:	4770      	bx	lr
   83f8c:	400e0400 	.word	0x400e0400

00083f90 <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
   83f90:	b480      	push	{r7}
   83f92:	b083      	sub	sp, #12
   83f94:	af00      	add	r7, sp, #0
   83f96:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   83f98:	687b      	ldr	r3, [r7, #4]
   83f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
   83f9e:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
   83fa0:	4b05      	ldr	r3, [pc, #20]	; (83fb8 <pmc_set_fast_startup_input+0x28>)
   83fa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83fa4:	4904      	ldr	r1, [pc, #16]	; (83fb8 <pmc_set_fast_startup_input+0x28>)
   83fa6:	687b      	ldr	r3, [r7, #4]
   83fa8:	4313      	orrs	r3, r2
   83faa:	670b      	str	r3, [r1, #112]	; 0x70
}
   83fac:	bf00      	nop
   83fae:	370c      	adds	r7, #12
   83fb0:	46bd      	mov	sp, r7
   83fb2:	bc80      	pop	{r7}
   83fb4:	4770      	bx	lr
   83fb6:	bf00      	nop
   83fb8:	400e0400 	.word	0x400e0400

00083fbc <pmc_enable_waitmode>:
/**
 * \brief Enable Wait Mode. Enter condition: WFE + (SLEEPDEEP bit = 0) +
 * (LPM bit = 1)
 */
void pmc_enable_waitmode(void)
{
   83fbc:	b480      	push	{r7}
   83fbe:	b083      	sub	sp, #12
   83fc0:	af00      	add	r7, sp, #0
	uint32_t i;

	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
   83fc2:	4b12      	ldr	r3, [pc, #72]	; (8400c <pmc_enable_waitmode+0x50>)
   83fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   83fc6:	4a11      	ldr	r2, [pc, #68]	; (8400c <pmc_enable_waitmode+0x50>)
   83fc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83fcc:	6713      	str	r3, [r2, #112]	; 0x70
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
   83fce:	4b10      	ldr	r3, [pc, #64]	; (84010 <pmc_enable_waitmode+0x54>)
   83fd0:	691b      	ldr	r3, [r3, #16]
   83fd2:	4a0f      	ldr	r2, [pc, #60]	; (84010 <pmc_enable_waitmode+0x54>)
   83fd4:	f023 0304 	bic.w	r3, r3, #4
   83fd8:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfe");
   83fda:	bf20      	wfe
	__WFE();

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
   83fdc:	2300      	movs	r3, #0
   83fde:	607b      	str	r3, [r7, #4]
   83fe0:	e003      	b.n	83fea <pmc_enable_waitmode+0x2e>
  __ASM volatile ("nop");
   83fe2:	bf00      	nop
   83fe4:	687b      	ldr	r3, [r7, #4]
   83fe6:	3301      	adds	r3, #1
   83fe8:	607b      	str	r3, [r7, #4]
   83fea:	687b      	ldr	r3, [r7, #4]
   83fec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   83ff0:	d3f7      	bcc.n	83fe2 <pmc_enable_waitmode+0x26>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
   83ff2:	bf00      	nop
   83ff4:	4b05      	ldr	r3, [pc, #20]	; (8400c <pmc_enable_waitmode+0x50>)
   83ff6:	6a1b      	ldr	r3, [r3, #32]
   83ff8:	f003 0308 	and.w	r3, r3, #8
   83ffc:	2b00      	cmp	r3, #0
   83ffe:	d0f9      	beq.n	83ff4 <pmc_enable_waitmode+0x38>

}
   84000:	bf00      	nop
   84002:	370c      	adds	r7, #12
   84004:	46bd      	mov	sp, r7
   84006:	bc80      	pop	{r7}
   84008:	4770      	bx	lr
   8400a:	bf00      	nop
   8400c:	400e0400 	.word	0x400e0400
   84010:	e000ed00 	.word	0xe000ed00

00084014 <udi_vendor_enable>:
/**
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
   84014:	b580      	push	{r7, lr}
   84016:	af00      	add	r7, sp, #0
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   84018:	4b0b      	ldr	r3, [pc, #44]	; (84048 <udi_vendor_enable+0x34>)
   8401a:	4798      	blx	r3
   8401c:	4603      	mov	r3, r0
   8401e:	78da      	ldrb	r2, [r3, #3]
   84020:	4b0a      	ldr	r3, [pc, #40]	; (8404c <udi_vendor_enable+0x38>)
   84022:	701a      	strb	r2, [r3, #0]
	if (0 == udi_vendor_alternate_setting) {
   84024:	4b09      	ldr	r3, [pc, #36]	; (8404c <udi_vendor_enable+0x38>)
   84026:	781b      	ldrb	r3, [r3, #0]
   84028:	2b00      	cmp	r3, #0
   8402a:	d109      	bne.n	84040 <udi_vendor_enable+0x2c>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
   8402c:	4b08      	ldr	r3, [pc, #32]	; (84050 <udi_vendor_enable+0x3c>)
   8402e:	4798      	blx	r3
   84030:	4603      	mov	r3, r0
   84032:	f083 0301 	eor.w	r3, r3, #1
   84036:	b2db      	uxtb	r3, r3
   84038:	2b00      	cmp	r3, #0
   8403a:	d001      	beq.n	84040 <udi_vendor_enable+0x2c>
			return false;
   8403c:	2300      	movs	r3, #0
   8403e:	e000      	b.n	84042 <udi_vendor_enable+0x2e>
		}
	}
	return true;
   84040:	2301      	movs	r3, #1
}
   84042:	4618      	mov	r0, r3
   84044:	bd80      	pop	{r7, pc}
   84046:	bf00      	nop
   84048:	000846f5 	.word	0x000846f5
   8404c:	200012b5 	.word	0x200012b5
   84050:	00080ded 	.word	0x00080ded

00084054 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
   84054:	b580      	push	{r7, lr}
   84056:	af00      	add	r7, sp, #0
	if (0 == udi_vendor_alternate_setting) {
   84058:	4b03      	ldr	r3, [pc, #12]	; (84068 <udi_vendor_disable+0x14>)
   8405a:	781b      	ldrb	r3, [r3, #0]
   8405c:	2b00      	cmp	r3, #0
   8405e:	d101      	bne.n	84064 <udi_vendor_disable+0x10>
		UDI_VENDOR_DISABLE_EXT();
   84060:	4b02      	ldr	r3, [pc, #8]	; (8406c <udi_vendor_disable+0x18>)
   84062:	4798      	blx	r3
	}
}
   84064:	bf00      	nop
   84066:	bd80      	pop	{r7, pc}
   84068:	200012b5 	.word	0x200012b5
   8406c:	00080e19 	.word	0x00080e19

00084070 <udi_vendor_setup>:

bool udi_vendor_setup(void)
{
   84070:	b580      	push	{r7, lr}
   84072:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   84074:	4b10      	ldr	r3, [pc, #64]	; (840b8 <udi_vendor_setup+0x48>)
   84076:	781b      	ldrb	r3, [r3, #0]
   84078:	b25b      	sxtb	r3, r3
   8407a:	2b00      	cmp	r3, #0
   8407c:	da09      	bge.n	84092 <udi_vendor_setup+0x22>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   8407e:	4b0e      	ldr	r3, [pc, #56]	; (840b8 <udi_vendor_setup+0x48>)
   84080:	781b      	ldrb	r3, [r3, #0]
   84082:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84086:	2b40      	cmp	r3, #64	; 0x40
   84088:	d103      	bne.n	84092 <udi_vendor_setup+0x22>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   8408a:	4b0c      	ldr	r3, [pc, #48]	; (840bc <udi_vendor_setup+0x4c>)
   8408c:	4798      	blx	r3
   8408e:	4603      	mov	r3, r0
   84090:	e00f      	b.n	840b2 <udi_vendor_setup+0x42>
		}
	}
	if (Udd_setup_is_out()) {
   84092:	4b09      	ldr	r3, [pc, #36]	; (840b8 <udi_vendor_setup+0x48>)
   84094:	781b      	ldrb	r3, [r3, #0]
   84096:	b25b      	sxtb	r3, r3
   84098:	2b00      	cmp	r3, #0
   8409a:	db09      	blt.n	840b0 <udi_vendor_setup+0x40>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   8409c:	4b06      	ldr	r3, [pc, #24]	; (840b8 <udi_vendor_setup+0x48>)
   8409e:	781b      	ldrb	r3, [r3, #0]
   840a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
   840a4:	2b40      	cmp	r3, #64	; 0x40
   840a6:	d103      	bne.n	840b0 <udi_vendor_setup+0x40>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   840a8:	4b05      	ldr	r3, [pc, #20]	; (840c0 <udi_vendor_setup+0x50>)
   840aa:	4798      	blx	r3
   840ac:	4603      	mov	r3, r0
   840ae:	e000      	b.n	840b2 <udi_vendor_setup+0x42>
		}
	}
	return false; // Not supported request
   840b0:	2300      	movs	r3, #0
}
   840b2:	4618      	mov	r0, r3
   840b4:	bd80      	pop	{r7, pc}
   840b6:	bf00      	nop
   840b8:	2000130c 	.word	0x2000130c
   840bc:	0008124d 	.word	0x0008124d
   840c0:	000810fd 	.word	0x000810fd

000840c4 <udi_vendor_getsetting>:

uint8_t udi_vendor_getsetting(void)
{
   840c4:	b480      	push	{r7}
   840c6:	af00      	add	r7, sp, #0
	return udi_vendor_alternate_setting;
   840c8:	4b02      	ldr	r3, [pc, #8]	; (840d4 <udi_vendor_getsetting+0x10>)
   840ca:	781b      	ldrb	r3, [r3, #0]
}
   840cc:	4618      	mov	r0, r3
   840ce:	46bd      	mov	sp, r7
   840d0:	bc80      	pop	{r7}
   840d2:	4770      	bx	lr
   840d4:	200012b5 	.word	0x200012b5

000840d8 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   840d8:	b590      	push	{r4, r7, lr}
   840da:	b087      	sub	sp, #28
   840dc:	af02      	add	r7, sp, #8
   840de:	60f8      	str	r0, [r7, #12]
   840e0:	60b9      	str	r1, [r7, #8]
   840e2:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   840e4:	687b      	ldr	r3, [r7, #4]
   840e6:	9300      	str	r3, [sp, #0]
   840e8:	68bb      	ldr	r3, [r7, #8]
   840ea:	68fa      	ldr	r2, [r7, #12]
   840ec:	2100      	movs	r1, #0
   840ee:	2081      	movs	r0, #129	; 0x81
   840f0:	4c03      	ldr	r4, [pc, #12]	; (84100 <udi_vendor_bulk_in_run+0x28>)
   840f2:	47a0      	blx	r4
   840f4:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   840f6:	4618      	mov	r0, r3
   840f8:	3714      	adds	r7, #20
   840fa:	46bd      	mov	sp, r7
   840fc:	bd90      	pop	{r4, r7, pc}
   840fe:	bf00      	nop
   84100:	0008277d 	.word	0x0008277d

00084104 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84104:	b590      	push	{r4, r7, lr}
   84106:	b087      	sub	sp, #28
   84108:	af02      	add	r7, sp, #8
   8410a:	60f8      	str	r0, [r7, #12]
   8410c:	60b9      	str	r1, [r7, #8]
   8410e:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   84110:	687b      	ldr	r3, [r7, #4]
   84112:	9300      	str	r3, [sp, #0]
   84114:	68bb      	ldr	r3, [r7, #8]
   84116:	68fa      	ldr	r2, [r7, #12]
   84118:	2100      	movs	r1, #0
   8411a:	2002      	movs	r0, #2
   8411c:	4c03      	ldr	r4, [pc, #12]	; (8412c <udi_vendor_bulk_out_run+0x28>)
   8411e:	47a0      	blx	r4
   84120:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   84122:	4618      	mov	r0, r3
   84124:	3714      	adds	r7, #20
   84126:	46bd      	mov	sp, r7
   84128:	bd90      	pop	{r4, r7, pc}
   8412a:	bf00      	nop
   8412c:	0008277d 	.word	0x0008277d

00084130 <cpu_irq_save>:
{
   84130:	b480      	push	{r7}
   84132:	b083      	sub	sp, #12
   84134:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84136:	f3ef 8310 	mrs	r3, PRIMASK
   8413a:	603b      	str	r3, [r7, #0]
  return(result);
   8413c:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   8413e:	2b00      	cmp	r3, #0
   84140:	bf0c      	ite	eq
   84142:	2301      	moveq	r3, #1
   84144:	2300      	movne	r3, #0
   84146:	b2db      	uxtb	r3, r3
   84148:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   8414a:	b672      	cpsid	i
  __ASM volatile ("dmb");
   8414c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84150:	4b04      	ldr	r3, [pc, #16]	; (84164 <cpu_irq_save+0x34>)
   84152:	2200      	movs	r2, #0
   84154:	701a      	strb	r2, [r3, #0]
	return flags;
   84156:	687b      	ldr	r3, [r7, #4]
}
   84158:	4618      	mov	r0, r3
   8415a:	370c      	adds	r7, #12
   8415c:	46bd      	mov	sp, r7
   8415e:	bc80      	pop	{r7}
   84160:	4770      	bx	lr
   84162:	bf00      	nop
   84164:	2000031a 	.word	0x2000031a

00084168 <cpu_irq_is_enabled_flags>:
{
   84168:	b480      	push	{r7}
   8416a:	b083      	sub	sp, #12
   8416c:	af00      	add	r7, sp, #0
   8416e:	6078      	str	r0, [r7, #4]
	return (flags);
   84170:	687b      	ldr	r3, [r7, #4]
   84172:	2b00      	cmp	r3, #0
   84174:	bf14      	ite	ne
   84176:	2301      	movne	r3, #1
   84178:	2300      	moveq	r3, #0
   8417a:	b2db      	uxtb	r3, r3
}
   8417c:	4618      	mov	r0, r3
   8417e:	370c      	adds	r7, #12
   84180:	46bd      	mov	sp, r7
   84182:	bc80      	pop	{r7}
   84184:	4770      	bx	lr
   84186:	0000      	movs	r0, r0

00084188 <cpu_irq_restore>:
{
   84188:	b580      	push	{r7, lr}
   8418a:	b082      	sub	sp, #8
   8418c:	af00      	add	r7, sp, #0
   8418e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   84190:	6878      	ldr	r0, [r7, #4]
   84192:	4b07      	ldr	r3, [pc, #28]	; (841b0 <cpu_irq_restore+0x28>)
   84194:	4798      	blx	r3
   84196:	4603      	mov	r3, r0
   84198:	2b00      	cmp	r3, #0
   8419a:	d005      	beq.n	841a8 <cpu_irq_restore+0x20>
		cpu_irq_enable();
   8419c:	4b05      	ldr	r3, [pc, #20]	; (841b4 <cpu_irq_restore+0x2c>)
   8419e:	2201      	movs	r2, #1
   841a0:	701a      	strb	r2, [r3, #0]
   841a2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   841a6:	b662      	cpsie	i
}
   841a8:	bf00      	nop
   841aa:	3708      	adds	r7, #8
   841ac:	46bd      	mov	sp, r7
   841ae:	bd80      	pop	{r7, pc}
   841b0:	00084169 	.word	0x00084169
   841b4:	2000031a 	.word	0x2000031a

000841b8 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   841b8:	b580      	push	{r7, lr}
   841ba:	b086      	sub	sp, #24
   841bc:	af00      	add	r7, sp, #0
   841be:	60f8      	str	r0, [r7, #12]
   841c0:	60b9      	str	r1, [r7, #8]
   841c2:	607a      	str	r2, [r7, #4]
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   841c4:	68bb      	ldr	r3, [r7, #8]
   841c6:	2b0e      	cmp	r3, #14
   841c8:	d002      	beq.n	841d0 <efc_perform_command+0x18>
   841ca:	68bb      	ldr	r3, [r7, #8]
   841cc:	2b0f      	cmp	r3, #15
   841ce:	d102      	bne.n	841d6 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   841d0:	f04f 33ff 	mov.w	r3, #4294967295
   841d4:	e016      	b.n	84204 <efc_perform_command+0x4c>
	}

	flags = cpu_irq_save();
   841d6:	4b0d      	ldr	r3, [pc, #52]	; (8420c <efc_perform_command+0x54>)
   841d8:	4798      	blx	r3
   841da:	6178      	str	r0, [r7, #20]
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   841dc:	687b      	ldr	r3, [r7, #4]
   841de:	021b      	lsls	r3, r3, #8
   841e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   841e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   841e8:	68ba      	ldr	r2, [r7, #8]
   841ea:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   841ec:	4313      	orrs	r3, r2
	result = efc_perform_fcr(p_efc,
   841ee:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   841f2:	4619      	mov	r1, r3
   841f4:	68f8      	ldr	r0, [r7, #12]
   841f6:	4b06      	ldr	r3, [pc, #24]	; (84210 <efc_perform_command+0x58>)
   841f8:	4798      	blx	r3
   841fa:	6138      	str	r0, [r7, #16]
	cpu_irq_restore(flags);
   841fc:	6978      	ldr	r0, [r7, #20]
   841fe:	4b05      	ldr	r3, [pc, #20]	; (84214 <efc_perform_command+0x5c>)
   84200:	4798      	blx	r3
	return result;
   84202:	693b      	ldr	r3, [r7, #16]
}
   84204:	4618      	mov	r0, r3
   84206:	3718      	adds	r7, #24
   84208:	46bd      	mov	sp, r7
   8420a:	bd80      	pop	{r7, pc}
   8420c:	00084131 	.word	0x00084131
   84210:	200000bd 	.word	0x200000bd
   84214:	00084189 	.word	0x00084189

00084218 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   84218:	b480      	push	{r7}
   8421a:	b085      	sub	sp, #20
   8421c:	af00      	add	r7, sp, #0
   8421e:	60f8      	str	r0, [r7, #12]
   84220:	60b9      	str	r1, [r7, #8]
   84222:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   84224:	687b      	ldr	r3, [r7, #4]
   84226:	2b00      	cmp	r3, #0
   84228:	d003      	beq.n	84232 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   8422a:	68fb      	ldr	r3, [r7, #12]
   8422c:	68ba      	ldr	r2, [r7, #8]
   8422e:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   84230:	e002      	b.n	84238 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
   84232:	68fb      	ldr	r3, [r7, #12]
   84234:	68ba      	ldr	r2, [r7, #8]
   84236:	661a      	str	r2, [r3, #96]	; 0x60
}
   84238:	bf00      	nop
   8423a:	3714      	adds	r7, #20
   8423c:	46bd      	mov	sp, r7
   8423e:	bc80      	pop	{r7}
   84240:	4770      	bx	lr

00084242 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   84242:	b480      	push	{r7}
   84244:	b087      	sub	sp, #28
   84246:	af00      	add	r7, sp, #0
   84248:	60f8      	str	r0, [r7, #12]
   8424a:	60b9      	str	r1, [r7, #8]
   8424c:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8424e:	68fb      	ldr	r3, [r7, #12]
   84250:	687a      	ldr	r2, [r7, #4]
   84252:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   84254:	68bb      	ldr	r3, [r7, #8]
   84256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8425a:	d025      	beq.n	842a8 <pio_set_peripheral+0x66>
   8425c:	68bb      	ldr	r3, [r7, #8]
   8425e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   84262:	d807      	bhi.n	84274 <pio_set_peripheral+0x32>
   84264:	68bb      	ldr	r3, [r7, #8]
   84266:	2b00      	cmp	r3, #0
   84268:	d02b      	beq.n	842c2 <pio_set_peripheral+0x80>
   8426a:	68bb      	ldr	r3, [r7, #8]
   8426c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   84270:	d00d      	beq.n	8428e <pio_set_peripheral+0x4c>
   84272:	e022      	b.n	842ba <pio_set_peripheral+0x78>
   84274:	68bb      	ldr	r3, [r7, #8]
   84276:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8427a:	d022      	beq.n	842c2 <pio_set_peripheral+0x80>
   8427c:	68bb      	ldr	r3, [r7, #8]
   8427e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84282:	d01e      	beq.n	842c2 <pio_set_peripheral+0x80>
   84284:	68bb      	ldr	r3, [r7, #8]
   84286:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8428a:	d01a      	beq.n	842c2 <pio_set_peripheral+0x80>
   8428c:	e015      	b.n	842ba <pio_set_peripheral+0x78>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8428e:	68fb      	ldr	r3, [r7, #12]
   84290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   84292:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   84294:	68fb      	ldr	r3, [r7, #12]
   84296:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   84298:	687b      	ldr	r3, [r7, #4]
   8429a:	43d9      	mvns	r1, r3
   8429c:	697b      	ldr	r3, [r7, #20]
   8429e:	400b      	ands	r3, r1
   842a0:	401a      	ands	r2, r3
   842a2:	68fb      	ldr	r3, [r7, #12]
   842a4:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   842a6:	e008      	b.n	842ba <pio_set_peripheral+0x78>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   842a8:	68fb      	ldr	r3, [r7, #12]
   842aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   842ac:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   842ae:	687a      	ldr	r2, [r7, #4]
   842b0:	697b      	ldr	r3, [r7, #20]
   842b2:	431a      	orrs	r2, r3
   842b4:	68fb      	ldr	r3, [r7, #12]
   842b6:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   842b8:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   842ba:	68fb      	ldr	r3, [r7, #12]
   842bc:	687a      	ldr	r2, [r7, #4]
   842be:	605a      	str	r2, [r3, #4]
   842c0:	e000      	b.n	842c4 <pio_set_peripheral+0x82>
		return;
   842c2:	bf00      	nop
}
   842c4:	371c      	adds	r7, #28
   842c6:	46bd      	mov	sp, r7
   842c8:	bc80      	pop	{r7}
   842ca:	4770      	bx	lr

000842cc <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   842cc:	b580      	push	{r7, lr}
   842ce:	b084      	sub	sp, #16
   842d0:	af00      	add	r7, sp, #0
   842d2:	60f8      	str	r0, [r7, #12]
   842d4:	60b9      	str	r1, [r7, #8]
   842d6:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   842d8:	68b9      	ldr	r1, [r7, #8]
   842da:	68f8      	ldr	r0, [r7, #12]
   842dc:	4b19      	ldr	r3, [pc, #100]	; (84344 <pio_set_input+0x78>)
   842de:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   842e0:	687b      	ldr	r3, [r7, #4]
   842e2:	f003 0301 	and.w	r3, r3, #1
   842e6:	461a      	mov	r2, r3
   842e8:	68b9      	ldr	r1, [r7, #8]
   842ea:	68f8      	ldr	r0, [r7, #12]
   842ec:	4b16      	ldr	r3, [pc, #88]	; (84348 <pio_set_input+0x7c>)
   842ee:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   842f0:	687b      	ldr	r3, [r7, #4]
   842f2:	f003 030a 	and.w	r3, r3, #10
   842f6:	2b00      	cmp	r3, #0
   842f8:	d003      	beq.n	84302 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   842fa:	68fb      	ldr	r3, [r7, #12]
   842fc:	68ba      	ldr	r2, [r7, #8]
   842fe:	621a      	str	r2, [r3, #32]
   84300:	e002      	b.n	84308 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   84302:	68fb      	ldr	r3, [r7, #12]
   84304:	68ba      	ldr	r2, [r7, #8]
   84306:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   84308:	687b      	ldr	r3, [r7, #4]
   8430a:	f003 0302 	and.w	r3, r3, #2
   8430e:	2b00      	cmp	r3, #0
   84310:	d004      	beq.n	8431c <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   84312:	68fb      	ldr	r3, [r7, #12]
   84314:	68ba      	ldr	r2, [r7, #8]
   84316:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   8431a:	e008      	b.n	8432e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8431c:	687b      	ldr	r3, [r7, #4]
   8431e:	f003 0308 	and.w	r3, r3, #8
   84322:	2b00      	cmp	r3, #0
   84324:	d003      	beq.n	8432e <pio_set_input+0x62>
			p_pio->PIO_DIFSR = ul_mask;
   84326:	68fb      	ldr	r3, [r7, #12]
   84328:	68ba      	ldr	r2, [r7, #8]
   8432a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8432e:	68fb      	ldr	r3, [r7, #12]
   84330:	68ba      	ldr	r2, [r7, #8]
   84332:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   84334:	68fb      	ldr	r3, [r7, #12]
   84336:	68ba      	ldr	r2, [r7, #8]
   84338:	601a      	str	r2, [r3, #0]
}
   8433a:	bf00      	nop
   8433c:	3710      	adds	r7, #16
   8433e:	46bd      	mov	sp, r7
   84340:	bd80      	pop	{r7, pc}
   84342:	bf00      	nop
   84344:	000843e7 	.word	0x000843e7
   84348:	00084219 	.word	0x00084219

0008434c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8434c:	b580      	push	{r7, lr}
   8434e:	b084      	sub	sp, #16
   84350:	af00      	add	r7, sp, #0
   84352:	60f8      	str	r0, [r7, #12]
   84354:	60b9      	str	r1, [r7, #8]
   84356:	607a      	str	r2, [r7, #4]
   84358:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   8435a:	68b9      	ldr	r1, [r7, #8]
   8435c:	68f8      	ldr	r0, [r7, #12]
   8435e:	4b12      	ldr	r3, [pc, #72]	; (843a8 <pio_set_output+0x5c>)
   84360:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   84362:	69ba      	ldr	r2, [r7, #24]
   84364:	68b9      	ldr	r1, [r7, #8]
   84366:	68f8      	ldr	r0, [r7, #12]
   84368:	4b10      	ldr	r3, [pc, #64]	; (843ac <pio_set_output+0x60>)
   8436a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8436c:	683b      	ldr	r3, [r7, #0]
   8436e:	2b00      	cmp	r3, #0
   84370:	d003      	beq.n	8437a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   84372:	68fb      	ldr	r3, [r7, #12]
   84374:	68ba      	ldr	r2, [r7, #8]
   84376:	651a      	str	r2, [r3, #80]	; 0x50
   84378:	e002      	b.n	84380 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8437a:	68fb      	ldr	r3, [r7, #12]
   8437c:	68ba      	ldr	r2, [r7, #8]
   8437e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   84380:	687b      	ldr	r3, [r7, #4]
   84382:	2b00      	cmp	r3, #0
   84384:	d003      	beq.n	8438e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   84386:	68fb      	ldr	r3, [r7, #12]
   84388:	68ba      	ldr	r2, [r7, #8]
   8438a:	631a      	str	r2, [r3, #48]	; 0x30
   8438c:	e002      	b.n	84394 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8438e:	68fb      	ldr	r3, [r7, #12]
   84390:	68ba      	ldr	r2, [r7, #8]
   84392:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   84394:	68fb      	ldr	r3, [r7, #12]
   84396:	68ba      	ldr	r2, [r7, #8]
   84398:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   8439a:	68fb      	ldr	r3, [r7, #12]
   8439c:	68ba      	ldr	r2, [r7, #8]
   8439e:	601a      	str	r2, [r3, #0]
}
   843a0:	bf00      	nop
   843a2:	3710      	adds	r7, #16
   843a4:	46bd      	mov	sp, r7
   843a6:	bd80      	pop	{r7, pc}
   843a8:	000843e7 	.word	0x000843e7
   843ac:	00084219 	.word	0x00084219

000843b0 <pio_enable_output_write>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_enable_output_write(Pio *p_pio, const uint32_t ul_mask)
{
   843b0:	b480      	push	{r7}
   843b2:	b083      	sub	sp, #12
   843b4:	af00      	add	r7, sp, #0
   843b6:	6078      	str	r0, [r7, #4]
   843b8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_OWER = ul_mask;
   843ba:	687b      	ldr	r3, [r7, #4]
   843bc:	683a      	ldr	r2, [r7, #0]
   843be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   843c2:	bf00      	nop
   843c4:	370c      	adds	r7, #12
   843c6:	46bd      	mov	sp, r7
   843c8:	bc80      	pop	{r7}
   843ca:	4770      	bx	lr

000843cc <pio_sync_output_write>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_sync_output_write(Pio *p_pio, const uint32_t ul_mask)
{
   843cc:	b480      	push	{r7}
   843ce:	b083      	sub	sp, #12
   843d0:	af00      	add	r7, sp, #0
   843d2:	6078      	str	r0, [r7, #4]
   843d4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_ODSR = ul_mask;
   843d6:	687b      	ldr	r3, [r7, #4]
   843d8:	683a      	ldr	r2, [r7, #0]
   843da:	639a      	str	r2, [r3, #56]	; 0x38
}
   843dc:	bf00      	nop
   843de:	370c      	adds	r7, #12
   843e0:	46bd      	mov	sp, r7
   843e2:	bc80      	pop	{r7}
   843e4:	4770      	bx	lr

000843e6 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   843e6:	b480      	push	{r7}
   843e8:	b083      	sub	sp, #12
   843ea:	af00      	add	r7, sp, #0
   843ec:	6078      	str	r0, [r7, #4]
   843ee:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   843f0:	687b      	ldr	r3, [r7, #4]
   843f2:	683a      	ldr	r2, [r7, #0]
   843f4:	645a      	str	r2, [r3, #68]	; 0x44
}
   843f6:	bf00      	nop
   843f8:	370c      	adds	r7, #12
   843fa:	46bd      	mov	sp, r7
   843fc:	bc80      	pop	{r7}
   843fe:	4770      	bx	lr

00084400 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   84400:	b480      	push	{r7}
   84402:	b083      	sub	sp, #12
   84404:	af00      	add	r7, sp, #0
   84406:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   84408:	687b      	ldr	r3, [r7, #4]
   8440a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   8440c:	4618      	mov	r0, r3
   8440e:	370c      	adds	r7, #12
   84410:	46bd      	mov	sp, r7
   84412:	bc80      	pop	{r7}
   84414:	4770      	bx	lr

00084416 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   84416:	b480      	push	{r7}
   84418:	b083      	sub	sp, #12
   8441a:	af00      	add	r7, sp, #0
   8441c:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   8441e:	687b      	ldr	r3, [r7, #4]
   84420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   84422:	4618      	mov	r0, r3
   84424:	370c      	adds	r7, #12
   84426:	46bd      	mov	sp, r7
   84428:	bc80      	pop	{r7}
   8442a:	4770      	bx	lr

0008442c <pio_get_pin_value>:
 *       level.
 * \note If pin is input: PIOx must be clocked to sample the signal.
 *       See PMC driver.
 */
uint32_t pio_get_pin_value(uint32_t ul_pin)
{
   8442c:	b580      	push	{r7, lr}
   8442e:	b084      	sub	sp, #16
   84430:	af00      	add	r7, sp, #0
   84432:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   84434:	6878      	ldr	r0, [r7, #4]
   84436:	4b08      	ldr	r3, [pc, #32]	; (84458 <pio_get_pin_value+0x2c>)
   84438:	4798      	blx	r3
   8443a:	60f8      	str	r0, [r7, #12]

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   8443c:	68fb      	ldr	r3, [r7, #12]
   8443e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   84440:	687b      	ldr	r3, [r7, #4]
   84442:	f003 031f 	and.w	r3, r3, #31
   84446:	fa22 f303 	lsr.w	r3, r2, r3
   8444a:	f003 0301 	and.w	r3, r3, #1
}
   8444e:	4618      	mov	r0, r3
   84450:	3710      	adds	r7, #16
   84452:	46bd      	mov	sp, r7
   84454:	bd80      	pop	{r7, pc}
   84456:	bf00      	nop
   84458:	000846b5 	.word	0x000846b5

0008445c <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   8445c:	b580      	push	{r7, lr}
   8445e:	b084      	sub	sp, #16
   84460:	af00      	add	r7, sp, #0
   84462:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   84464:	6878      	ldr	r0, [r7, #4]
   84466:	4b08      	ldr	r3, [pc, #32]	; (84488 <pio_set_pin_high+0x2c>)
   84468:	4798      	blx	r3
   8446a:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   8446c:	687b      	ldr	r3, [r7, #4]
   8446e:	f003 031f 	and.w	r3, r3, #31
   84472:	2201      	movs	r2, #1
   84474:	fa02 f303 	lsl.w	r3, r2, r3
   84478:	461a      	mov	r2, r3
   8447a:	68fb      	ldr	r3, [r7, #12]
   8447c:	631a      	str	r2, [r3, #48]	; 0x30
}
   8447e:	bf00      	nop
   84480:	3710      	adds	r7, #16
   84482:	46bd      	mov	sp, r7
   84484:	bd80      	pop	{r7, pc}
   84486:	bf00      	nop
   84488:	000846b5 	.word	0x000846b5

0008448c <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   8448c:	b580      	push	{r7, lr}
   8448e:	b084      	sub	sp, #16
   84490:	af00      	add	r7, sp, #0
   84492:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   84494:	6878      	ldr	r0, [r7, #4]
   84496:	4b08      	ldr	r3, [pc, #32]	; (844b8 <pio_set_pin_low+0x2c>)
   84498:	4798      	blx	r3
   8449a:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   8449c:	687b      	ldr	r3, [r7, #4]
   8449e:	f003 031f 	and.w	r3, r3, #31
   844a2:	2201      	movs	r2, #1
   844a4:	fa02 f303 	lsl.w	r3, r2, r3
   844a8:	461a      	mov	r2, r3
   844aa:	68fb      	ldr	r3, [r7, #12]
   844ac:	635a      	str	r2, [r3, #52]	; 0x34
}
   844ae:	bf00      	nop
   844b0:	3710      	adds	r7, #16
   844b2:	46bd      	mov	sp, r7
   844b4:	bd80      	pop	{r7, pc}
   844b6:	bf00      	nop
   844b8:	000846b5 	.word	0x000846b5

000844bc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   844bc:	b590      	push	{r4, r7, lr}
   844be:	b087      	sub	sp, #28
   844c0:	af02      	add	r7, sp, #8
   844c2:	6078      	str	r0, [r7, #4]
   844c4:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   844c6:	6878      	ldr	r0, [r7, #4]
   844c8:	4b40      	ldr	r3, [pc, #256]	; (845cc <pio_configure_pin+0x110>)
   844ca:	4798      	blx	r3
   844cc:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   844ce:	683b      	ldr	r3, [r7, #0]
   844d0:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   844d4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   844d8:	d046      	beq.n	84568 <pio_configure_pin+0xac>
   844da:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   844de:	d806      	bhi.n	844ee <pio_configure_pin+0x32>
   844e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   844e4:	d00a      	beq.n	844fc <pio_configure_pin+0x40>
   844e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   844ea:	d022      	beq.n	84532 <pio_configure_pin+0x76>
   844ec:	e067      	b.n	845be <pio_configure_pin+0x102>
   844ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   844f2:	d045      	beq.n	84580 <pio_configure_pin+0xc4>
   844f4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   844f8:	d042      	beq.n	84580 <pio_configure_pin+0xc4>
   844fa:	e060      	b.n	845be <pio_configure_pin+0x102>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   844fc:	687b      	ldr	r3, [r7, #4]
   844fe:	f003 031f 	and.w	r3, r3, #31
   84502:	2201      	movs	r2, #1
   84504:	fa02 f303 	lsl.w	r3, r2, r3
   84508:	461a      	mov	r2, r3
   8450a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8450e:	68f8      	ldr	r0, [r7, #12]
   84510:	4b2f      	ldr	r3, [pc, #188]	; (845d0 <pio_configure_pin+0x114>)
   84512:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   84514:	687b      	ldr	r3, [r7, #4]
   84516:	f003 031f 	and.w	r3, r3, #31
   8451a:	2201      	movs	r2, #1
   8451c:	fa02 f303 	lsl.w	r3, r2, r3
   84520:	4619      	mov	r1, r3
   84522:	683b      	ldr	r3, [r7, #0]
   84524:	f003 0301 	and.w	r3, r3, #1
   84528:	461a      	mov	r2, r3
   8452a:	68f8      	ldr	r0, [r7, #12]
   8452c:	4b29      	ldr	r3, [pc, #164]	; (845d4 <pio_configure_pin+0x118>)
   8452e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   84530:	e047      	b.n	845c2 <pio_configure_pin+0x106>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   84532:	687b      	ldr	r3, [r7, #4]
   84534:	f003 031f 	and.w	r3, r3, #31
   84538:	2201      	movs	r2, #1
   8453a:	fa02 f303 	lsl.w	r3, r2, r3
   8453e:	461a      	mov	r2, r3
   84540:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   84544:	68f8      	ldr	r0, [r7, #12]
   84546:	4b22      	ldr	r3, [pc, #136]	; (845d0 <pio_configure_pin+0x114>)
   84548:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   8454a:	687b      	ldr	r3, [r7, #4]
   8454c:	f003 031f 	and.w	r3, r3, #31
   84550:	2201      	movs	r2, #1
   84552:	fa02 f303 	lsl.w	r3, r2, r3
   84556:	4619      	mov	r1, r3
   84558:	683b      	ldr	r3, [r7, #0]
   8455a:	f003 0301 	and.w	r3, r3, #1
   8455e:	461a      	mov	r2, r3
   84560:	68f8      	ldr	r0, [r7, #12]
   84562:	4b1c      	ldr	r3, [pc, #112]	; (845d4 <pio_configure_pin+0x118>)
   84564:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   84566:	e02c      	b.n	845c2 <pio_configure_pin+0x106>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   84568:	687b      	ldr	r3, [r7, #4]
   8456a:	f003 031f 	and.w	r3, r3, #31
   8456e:	2201      	movs	r2, #1
   84570:	fa02 f303 	lsl.w	r3, r2, r3
   84574:	683a      	ldr	r2, [r7, #0]
   84576:	4619      	mov	r1, r3
   84578:	68f8      	ldr	r0, [r7, #12]
   8457a:	4b17      	ldr	r3, [pc, #92]	; (845d8 <pio_configure_pin+0x11c>)
   8457c:	4798      	blx	r3
		break;
   8457e:	e020      	b.n	845c2 <pio_configure_pin+0x106>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   84580:	687b      	ldr	r3, [r7, #4]
   84582:	f003 031f 	and.w	r3, r3, #31
   84586:	2201      	movs	r2, #1
   84588:	fa02 f303 	lsl.w	r3, r2, r3
   8458c:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8458e:	683b      	ldr	r3, [r7, #0]
   84590:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   84594:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84598:	bf0c      	ite	eq
   8459a:	2301      	moveq	r3, #1
   8459c:	2300      	movne	r3, #0
   8459e:	b2db      	uxtb	r3, r3
   845a0:	4618      	mov	r0, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   845a2:	683b      	ldr	r3, [r7, #0]
   845a4:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   845a6:	f003 0201 	and.w	r2, r3, #1
   845aa:	683b      	ldr	r3, [r7, #0]
   845ac:	f003 0301 	and.w	r3, r3, #1
   845b0:	9300      	str	r3, [sp, #0]
   845b2:	4613      	mov	r3, r2
   845b4:	4602      	mov	r2, r0
   845b6:	68f8      	ldr	r0, [r7, #12]
   845b8:	4c08      	ldr	r4, [pc, #32]	; (845dc <pio_configure_pin+0x120>)
   845ba:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   845bc:	e001      	b.n	845c2 <pio_configure_pin+0x106>

	default:
		return 0;
   845be:	2300      	movs	r3, #0
   845c0:	e000      	b.n	845c4 <pio_configure_pin+0x108>
	}

	return 1;
   845c2:	2301      	movs	r3, #1
}
   845c4:	4618      	mov	r0, r3
   845c6:	3714      	adds	r7, #20
   845c8:	46bd      	mov	sp, r7
   845ca:	bd90      	pop	{r4, r7, pc}
   845cc:	000846b5 	.word	0x000846b5
   845d0:	00084243 	.word	0x00084243
   845d4:	00084219 	.word	0x00084219
   845d8:	000842cd 	.word	0x000842cd
   845dc:	0008434d 	.word	0x0008434d

000845e0 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   845e0:	b590      	push	{r4, r7, lr}
   845e2:	b087      	sub	sp, #28
   845e4:	af02      	add	r7, sp, #8
   845e6:	60f8      	str	r0, [r7, #12]
   845e8:	60b9      	str	r1, [r7, #8]
   845ea:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   845ec:	687b      	ldr	r3, [r7, #4]
   845ee:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   845f2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   845f6:	d02e      	beq.n	84656 <pio_configure_pin_group+0x76>
   845f8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   845fc:	d806      	bhi.n	8460c <pio_configure_pin_group+0x2c>
   845fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   84602:	d00a      	beq.n	8461a <pio_configure_pin_group+0x3a>
   84604:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   84608:	d016      	beq.n	84638 <pio_configure_pin_group+0x58>
   8460a:	e043      	b.n	84694 <pio_configure_pin_group+0xb4>
   8460c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   84610:	d027      	beq.n	84662 <pio_configure_pin_group+0x82>
   84612:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84616:	d024      	beq.n	84662 <pio_configure_pin_group+0x82>
   84618:	e03c      	b.n	84694 <pio_configure_pin_group+0xb4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8461a:	68ba      	ldr	r2, [r7, #8]
   8461c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   84620:	68f8      	ldr	r0, [r7, #12]
   84622:	4b20      	ldr	r3, [pc, #128]	; (846a4 <pio_configure_pin_group+0xc4>)
   84624:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   84626:	687b      	ldr	r3, [r7, #4]
   84628:	f003 0301 	and.w	r3, r3, #1
   8462c:	461a      	mov	r2, r3
   8462e:	68b9      	ldr	r1, [r7, #8]
   84630:	68f8      	ldr	r0, [r7, #12]
   84632:	4b1d      	ldr	r3, [pc, #116]	; (846a8 <pio_configure_pin_group+0xc8>)
   84634:	4798      	blx	r3
		break;
   84636:	e02f      	b.n	84698 <pio_configure_pin_group+0xb8>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   84638:	68ba      	ldr	r2, [r7, #8]
   8463a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8463e:	68f8      	ldr	r0, [r7, #12]
   84640:	4b18      	ldr	r3, [pc, #96]	; (846a4 <pio_configure_pin_group+0xc4>)
   84642:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   84644:	687b      	ldr	r3, [r7, #4]
   84646:	f003 0301 	and.w	r3, r3, #1
   8464a:	461a      	mov	r2, r3
   8464c:	68b9      	ldr	r1, [r7, #8]
   8464e:	68f8      	ldr	r0, [r7, #12]
   84650:	4b15      	ldr	r3, [pc, #84]	; (846a8 <pio_configure_pin_group+0xc8>)
   84652:	4798      	blx	r3
		break;
   84654:	e020      	b.n	84698 <pio_configure_pin_group+0xb8>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   84656:	687a      	ldr	r2, [r7, #4]
   84658:	68b9      	ldr	r1, [r7, #8]
   8465a:	68f8      	ldr	r0, [r7, #12]
   8465c:	4b13      	ldr	r3, [pc, #76]	; (846ac <pio_configure_pin_group+0xcc>)
   8465e:	4798      	blx	r3
		break;
   84660:	e01a      	b.n	84698 <pio_configure_pin_group+0xb8>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   84662:	687b      	ldr	r3, [r7, #4]
   84664:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   84668:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8466c:	bf0c      	ite	eq
   8466e:	2301      	moveq	r3, #1
   84670:	2300      	movne	r3, #0
   84672:	b2db      	uxtb	r3, r3
   84674:	4619      	mov	r1, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   84676:	687b      	ldr	r3, [r7, #4]
   84678:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, ul_mask,
   8467a:	f003 0201 	and.w	r2, r3, #1
   8467e:	687b      	ldr	r3, [r7, #4]
   84680:	f003 0301 	and.w	r3, r3, #1
   84684:	9300      	str	r3, [sp, #0]
   84686:	4613      	mov	r3, r2
   84688:	460a      	mov	r2, r1
   8468a:	68b9      	ldr	r1, [r7, #8]
   8468c:	68f8      	ldr	r0, [r7, #12]
   8468e:	4c08      	ldr	r4, [pc, #32]	; (846b0 <pio_configure_pin_group+0xd0>)
   84690:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   84692:	e001      	b.n	84698 <pio_configure_pin_group+0xb8>

	default:
		return 0;
   84694:	2300      	movs	r3, #0
   84696:	e000      	b.n	8469a <pio_configure_pin_group+0xba>
	}

	return 1;
   84698:	2301      	movs	r3, #1
}
   8469a:	4618      	mov	r0, r3
   8469c:	3714      	adds	r7, #20
   8469e:	46bd      	mov	sp, r7
   846a0:	bd90      	pop	{r4, r7, pc}
   846a2:	bf00      	nop
   846a4:	00084243 	.word	0x00084243
   846a8:	00084219 	.word	0x00084219
   846ac:	000842cd 	.word	0x000842cd
   846b0:	0008434d 	.word	0x0008434d

000846b4 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
   846b4:	b480      	push	{r7}
   846b6:	b085      	sub	sp, #20
   846b8:	af00      	add	r7, sp, #0
   846ba:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   846bc:	687b      	ldr	r3, [r7, #4]
   846be:	095b      	lsrs	r3, r3, #5
   846c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   846c4:	f203 7306 	addw	r3, r3, #1798	; 0x706
   846c8:	025b      	lsls	r3, r3, #9
   846ca:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
   846cc:	68fb      	ldr	r3, [r7, #12]
}
   846ce:	4618      	mov	r0, r3
   846d0:	3714      	adds	r7, #20
   846d2:	46bd      	mov	sp, r7
   846d4:	bc80      	pop	{r7}
   846d6:	4770      	bx	lr

000846d8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   846d8:	b480      	push	{r7}
   846da:	af00      	add	r7, sp, #0
	while (1) {
   846dc:	e7fe      	b.n	846dc <Dummy_Handler+0x4>
   846de:	0000      	movs	r0, r0

000846e0 <udc_get_string_serial_name>:
 * to a suitable pointer. This will also require the serial number length
 * define USB_DEVICE_GET_SERIAL_NAME_LENGTH.
 */
#if defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	static const uint8_t *udc_get_string_serial_name(void)
	{
   846e0:	b480      	push	{r7}
   846e2:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_GET_SERIAL_NAME_POINTER;
   846e4:	4b02      	ldr	r3, [pc, #8]	; (846f0 <udc_get_string_serial_name+0x10>)
	}
   846e6:	4618      	mov	r0, r3
   846e8:	46bd      	mov	sp, r7
   846ea:	bc80      	pop	{r7}
   846ec:	4770      	bx	lr
   846ee:	bf00      	nop
   846f0:	2000025c 	.word	0x2000025c

000846f4 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
   846f4:	b480      	push	{r7}
   846f6:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
   846f8:	4b02      	ldr	r3, [pc, #8]	; (84704 <udc_get_interface_desc+0x10>)
   846fa:	681b      	ldr	r3, [r3, #0]
}
   846fc:	4618      	mov	r0, r3
   846fe:	46bd      	mov	sp, r7
   84700:	bc80      	pop	{r7}
   84702:	4770      	bx	lr
   84704:	200012c0 	.word	0x200012c0

00084708 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
   84708:	b480      	push	{r7}
   8470a:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   8470c:	4b06      	ldr	r3, [pc, #24]	; (84728 <udc_get_eof_conf+0x20>)
   8470e:	681b      	ldr	r3, [r3, #0]
   84710:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   84712:	4a05      	ldr	r2, [pc, #20]	; (84728 <udc_get_eof_conf+0x20>)
   84714:	6812      	ldr	r2, [r2, #0]
   84716:	6812      	ldr	r2, [r2, #0]
   84718:	8852      	ldrh	r2, [r2, #2]
   8471a:	b292      	uxth	r2, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   8471c:	4413      	add	r3, r2
}
   8471e:	4618      	mov	r0, r3
   84720:	46bd      	mov	sp, r7
   84722:	bc80      	pop	{r7}
   84724:	4770      	bx	lr
   84726:	bf00      	nop
   84728:	200012bc 	.word	0x200012bc

0008472c <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   8472c:	b580      	push	{r7, lr}
   8472e:	b084      	sub	sp, #16
   84730:	af00      	add	r7, sp, #0
   84732:	6078      	str	r0, [r7, #4]
   84734:	460b      	mov	r3, r1
   84736:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   84738:	4b12      	ldr	r3, [pc, #72]	; (84784 <udc_next_desc_in_iface+0x58>)
   8473a:	4798      	blx	r3
   8473c:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   8473e:	687b      	ldr	r3, [r7, #4]
   84740:	781b      	ldrb	r3, [r3, #0]
   84742:	461a      	mov	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   84744:	687b      	ldr	r3, [r7, #4]
   84746:	4413      	add	r3, r2
   84748:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   8474a:	e010      	b.n	8476e <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   8474c:	687b      	ldr	r3, [r7, #4]
   8474e:	785b      	ldrb	r3, [r3, #1]
   84750:	2b04      	cmp	r3, #4
   84752:	d011      	beq.n	84778 <udc_next_desc_in_iface+0x4c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   84754:	687b      	ldr	r3, [r7, #4]
   84756:	785b      	ldrb	r3, [r3, #1]
   84758:	78fa      	ldrb	r2, [r7, #3]
   8475a:	429a      	cmp	r2, r3
   8475c:	d101      	bne.n	84762 <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
   8475e:	687b      	ldr	r3, [r7, #4]
   84760:	e00c      	b.n	8477c <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   84762:	687b      	ldr	r3, [r7, #4]
   84764:	781b      	ldrb	r3, [r3, #0]
   84766:	461a      	mov	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   84768:	687b      	ldr	r3, [r7, #4]
   8476a:	4413      	add	r3, r2
   8476c:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
   8476e:	68fa      	ldr	r2, [r7, #12]
   84770:	687b      	ldr	r3, [r7, #4]
   84772:	429a      	cmp	r2, r3
   84774:	d8ea      	bhi.n	8474c <udc_next_desc_in_iface+0x20>
   84776:	e000      	b.n	8477a <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
   84778:	bf00      	nop
	}
	return NULL; // No specific descriptor found
   8477a:	2300      	movs	r3, #0
}
   8477c:	4618      	mov	r0, r3
   8477e:	3710      	adds	r7, #16
   84780:	46bd      	mov	sp, r7
   84782:	bd80      	pop	{r7, pc}
   84784:	00084709 	.word	0x00084709

00084788 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   84788:	b580      	push	{r7, lr}
   8478a:	b084      	sub	sp, #16
   8478c:	af00      	add	r7, sp, #0
   8478e:	4603      	mov	r3, r0
   84790:	460a      	mov	r2, r1
   84792:	71fb      	strb	r3, [r7, #7]
   84794:	4613      	mov	r3, r2
   84796:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   84798:	4b1e      	ldr	r3, [pc, #120]	; (84814 <udc_update_iface_desc+0x8c>)
   8479a:	781b      	ldrb	r3, [r3, #0]
   8479c:	2b00      	cmp	r3, #0
   8479e:	d101      	bne.n	847a4 <udc_update_iface_desc+0x1c>
		return false;
   847a0:	2300      	movs	r3, #0
   847a2:	e032      	b.n	8480a <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   847a4:	4b1c      	ldr	r3, [pc, #112]	; (84818 <udc_update_iface_desc+0x90>)
   847a6:	681b      	ldr	r3, [r3, #0]
   847a8:	681b      	ldr	r3, [r3, #0]
   847aa:	791b      	ldrb	r3, [r3, #4]
   847ac:	79fa      	ldrb	r2, [r7, #7]
   847ae:	429a      	cmp	r2, r3
   847b0:	d301      	bcc.n	847b6 <udc_update_iface_desc+0x2e>
		return false;
   847b2:	2300      	movs	r3, #0
   847b4:	e029      	b.n	8480a <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
   847b6:	4b18      	ldr	r3, [pc, #96]	; (84818 <udc_update_iface_desc+0x90>)
   847b8:	681b      	ldr	r3, [r3, #0]
   847ba:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   847bc:	4a17      	ldr	r2, [pc, #92]	; (8481c <udc_update_iface_desc+0x94>)
   847be:	6013      	str	r3, [r2, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   847c0:	4b17      	ldr	r3, [pc, #92]	; (84820 <udc_update_iface_desc+0x98>)
   847c2:	4798      	blx	r3
   847c4:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
   847c6:	e01a      	b.n	847fe <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   847c8:	4b14      	ldr	r3, [pc, #80]	; (8481c <udc_update_iface_desc+0x94>)
   847ca:	681b      	ldr	r3, [r3, #0]
   847cc:	785b      	ldrb	r3, [r3, #1]
   847ce:	2b04      	cmp	r3, #4
   847d0:	d10d      	bne.n	847ee <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   847d2:	4b12      	ldr	r3, [pc, #72]	; (8481c <udc_update_iface_desc+0x94>)
   847d4:	681b      	ldr	r3, [r3, #0]
   847d6:	789b      	ldrb	r3, [r3, #2]
   847d8:	79fa      	ldrb	r2, [r7, #7]
   847da:	429a      	cmp	r2, r3
   847dc:	d107      	bne.n	847ee <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
   847de:	4b0f      	ldr	r3, [pc, #60]	; (8481c <udc_update_iface_desc+0x94>)
   847e0:	681b      	ldr	r3, [r3, #0]
   847e2:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   847e4:	79ba      	ldrb	r2, [r7, #6]
   847e6:	429a      	cmp	r2, r3
   847e8:	d101      	bne.n	847ee <udc_update_iface_desc+0x66>
				return true; // Interface found
   847ea:	2301      	movs	r3, #1
   847ec:	e00d      	b.n	8480a <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   847ee:	4b0b      	ldr	r3, [pc, #44]	; (8481c <udc_update_iface_desc+0x94>)
   847f0:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   847f2:	4a0a      	ldr	r2, [pc, #40]	; (8481c <udc_update_iface_desc+0x94>)
   847f4:	6812      	ldr	r2, [r2, #0]
   847f6:	7812      	ldrb	r2, [r2, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   847f8:	4413      	add	r3, r2
   847fa:	4a08      	ldr	r2, [pc, #32]	; (8481c <udc_update_iface_desc+0x94>)
   847fc:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   847fe:	4b07      	ldr	r3, [pc, #28]	; (8481c <udc_update_iface_desc+0x94>)
   84800:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
   84802:	68fa      	ldr	r2, [r7, #12]
   84804:	429a      	cmp	r2, r3
   84806:	d8df      	bhi.n	847c8 <udc_update_iface_desc+0x40>
	}
	return false; // Interface not found
   84808:	2300      	movs	r3, #0
}
   8480a:	4618      	mov	r0, r3
   8480c:	3710      	adds	r7, #16
   8480e:	46bd      	mov	sp, r7
   84810:	bd80      	pop	{r7, pc}
   84812:	bf00      	nop
   84814:	200012b8 	.word	0x200012b8
   84818:	200012bc 	.word	0x200012bc
   8481c:	200012c0 	.word	0x200012c0
   84820:	00084709 	.word	0x00084709

00084824 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   84824:	b580      	push	{r7, lr}
   84826:	b084      	sub	sp, #16
   84828:	af00      	add	r7, sp, #0
   8482a:	4603      	mov	r3, r0
   8482c:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   8482e:	79fb      	ldrb	r3, [r7, #7]
   84830:	2100      	movs	r1, #0
   84832:	4618      	mov	r0, r3
   84834:	4b1e      	ldr	r3, [pc, #120]	; (848b0 <udc_iface_disable+0x8c>)
   84836:	4798      	blx	r3
   84838:	4603      	mov	r3, r0
   8483a:	f083 0301 	eor.w	r3, r3, #1
   8483e:	b2db      	uxtb	r3, r3
   84840:	2b00      	cmp	r3, #0
   84842:	d001      	beq.n	84848 <udc_iface_disable+0x24>
		return false;
   84844:	2300      	movs	r3, #0
   84846:	e02f      	b.n	848a8 <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   84848:	4b1a      	ldr	r3, [pc, #104]	; (848b4 <udc_iface_disable+0x90>)
   8484a:	681b      	ldr	r3, [r3, #0]
   8484c:	685a      	ldr	r2, [r3, #4]
   8484e:	79fb      	ldrb	r3, [r7, #7]
   84850:	009b      	lsls	r3, r3, #2
   84852:	4413      	add	r3, r2
   84854:	681b      	ldr	r3, [r3, #0]
   84856:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84858:	68bb      	ldr	r3, [r7, #8]
   8485a:	68db      	ldr	r3, [r3, #12]
   8485c:	4798      	blx	r3
   8485e:	4603      	mov	r3, r0
   84860:	461a      	mov	r2, r3
   84862:	79fb      	ldrb	r3, [r7, #7]
   84864:	4611      	mov	r1, r2
   84866:	4618      	mov	r0, r3
   84868:	4b11      	ldr	r3, [pc, #68]	; (848b0 <udc_iface_disable+0x8c>)
   8486a:	4798      	blx	r3
   8486c:	4603      	mov	r3, r0
   8486e:	f083 0301 	eor.w	r3, r3, #1
   84872:	b2db      	uxtb	r3, r3
   84874:	2b00      	cmp	r3, #0
   84876:	d001      	beq.n	8487c <udc_iface_disable+0x58>
		return false;
   84878:	2300      	movs	r3, #0
   8487a:	e015      	b.n	848a8 <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   8487c:	4b0e      	ldr	r3, [pc, #56]	; (848b8 <udc_iface_disable+0x94>)
   8487e:	681b      	ldr	r3, [r3, #0]
   84880:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   84882:	2105      	movs	r1, #5
   84884:	68f8      	ldr	r0, [r7, #12]
   84886:	4b0d      	ldr	r3, [pc, #52]	; (848bc <udc_iface_disable+0x98>)
   84888:	4798      	blx	r3
   8488a:	60f8      	str	r0, [r7, #12]
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   8488c:	68fb      	ldr	r3, [r7, #12]
   8488e:	2b00      	cmp	r3, #0
   84890:	d005      	beq.n	8489e <udc_iface_disable+0x7a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   84892:	68fb      	ldr	r3, [r7, #12]
   84894:	789b      	ldrb	r3, [r3, #2]
   84896:	4618      	mov	r0, r3
   84898:	4b09      	ldr	r3, [pc, #36]	; (848c0 <udc_iface_disable+0x9c>)
   8489a:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   8489c:	e7f1      	b.n	84882 <udc_iface_disable+0x5e>
				break;
   8489e:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
   848a0:	68bb      	ldr	r3, [r7, #8]
   848a2:	685b      	ldr	r3, [r3, #4]
   848a4:	4798      	blx	r3
	return true;
   848a6:	2301      	movs	r3, #1
}
   848a8:	4618      	mov	r0, r3
   848aa:	3710      	adds	r7, #16
   848ac:	46bd      	mov	sp, r7
   848ae:	bd80      	pop	{r7, pc}
   848b0:	00084789 	.word	0x00084789
   848b4:	200012bc 	.word	0x200012bc
   848b8:	200012c0 	.word	0x200012c0
   848bc:	0008472d 	.word	0x0008472d
   848c0:	00082451 	.word	0x00082451

000848c4 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   848c4:	b580      	push	{r7, lr}
   848c6:	b084      	sub	sp, #16
   848c8:	af00      	add	r7, sp, #0
   848ca:	4603      	mov	r3, r0
   848cc:	460a      	mov	r2, r1
   848ce:	71fb      	strb	r3, [r7, #7]
   848d0:	4613      	mov	r3, r2
   848d2:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   848d4:	79ba      	ldrb	r2, [r7, #6]
   848d6:	79fb      	ldrb	r3, [r7, #7]
   848d8:	4611      	mov	r1, r2
   848da:	4618      	mov	r0, r3
   848dc:	4b1a      	ldr	r3, [pc, #104]	; (84948 <udc_iface_enable+0x84>)
   848de:	4798      	blx	r3
   848e0:	4603      	mov	r3, r0
   848e2:	f083 0301 	eor.w	r3, r3, #1
   848e6:	b2db      	uxtb	r3, r3
   848e8:	2b00      	cmp	r3, #0
   848ea:	d001      	beq.n	848f0 <udc_iface_enable+0x2c>
		return false;
   848ec:	2300      	movs	r3, #0
   848ee:	e027      	b.n	84940 <udc_iface_enable+0x7c>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   848f0:	4b16      	ldr	r3, [pc, #88]	; (8494c <udc_iface_enable+0x88>)
   848f2:	681b      	ldr	r3, [r3, #0]
   848f4:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   848f6:	2105      	movs	r1, #5
   848f8:	68f8      	ldr	r0, [r7, #12]
   848fa:	4b15      	ldr	r3, [pc, #84]	; (84950 <udc_iface_enable+0x8c>)
   848fc:	4798      	blx	r3
   848fe:	60f8      	str	r0, [r7, #12]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   84900:	68fb      	ldr	r3, [r7, #12]
   84902:	2b00      	cmp	r3, #0
   84904:	d011      	beq.n	8492a <udc_iface_enable+0x66>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   84906:	68fb      	ldr	r3, [r7, #12]
   84908:	7898      	ldrb	r0, [r3, #2]
   8490a:	68fb      	ldr	r3, [r7, #12]
   8490c:	78d9      	ldrb	r1, [r3, #3]
   8490e:	68fb      	ldr	r3, [r7, #12]
   84910:	889b      	ldrh	r3, [r3, #4]
   84912:	b29b      	uxth	r3, r3
   84914:	461a      	mov	r2, r3
   84916:	4b0f      	ldr	r3, [pc, #60]	; (84954 <udc_iface_enable+0x90>)
   84918:	4798      	blx	r3
   8491a:	4603      	mov	r3, r0
   8491c:	f083 0301 	eor.w	r3, r3, #1
   84920:	b2db      	uxtb	r3, r3
   84922:	2b00      	cmp	r3, #0
   84924:	d0e7      	beq.n	848f6 <udc_iface_enable+0x32>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
   84926:	2300      	movs	r3, #0
   84928:	e00a      	b.n	84940 <udc_iface_enable+0x7c>
			break;
   8492a:	bf00      	nop
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   8492c:	4b0a      	ldr	r3, [pc, #40]	; (84958 <udc_iface_enable+0x94>)
   8492e:	681b      	ldr	r3, [r3, #0]
   84930:	685a      	ldr	r2, [r3, #4]
   84932:	79fb      	ldrb	r3, [r7, #7]
   84934:	009b      	lsls	r3, r3, #2
   84936:	4413      	add	r3, r2
   84938:	681b      	ldr	r3, [r3, #0]
   8493a:	681b      	ldr	r3, [r3, #0]
   8493c:	4798      	blx	r3
   8493e:	4603      	mov	r3, r0
}
   84940:	4618      	mov	r0, r3
   84942:	3710      	adds	r7, #16
   84944:	46bd      	mov	sp, r7
   84946:	bd80      	pop	{r7, pc}
   84948:	00084789 	.word	0x00084789
   8494c:	200012c0 	.word	0x200012c0
   84950:	0008472d 	.word	0x0008472d
   84954:	000820a5 	.word	0x000820a5
   84958:	200012bc 	.word	0x200012bc

0008495c <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   8495c:	b580      	push	{r7, lr}
   8495e:	af00      	add	r7, sp, #0
	udd_enable();
   84960:	4b01      	ldr	r3, [pc, #4]	; (84968 <udc_start+0xc>)
   84962:	4798      	blx	r3
}
   84964:	bf00      	nop
   84966:	bd80      	pop	{r7, pc}
   84968:	00081e61 	.word	0x00081e61

0008496c <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   8496c:	b580      	push	{r7, lr}
   8496e:	b082      	sub	sp, #8
   84970:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   84972:	4b0f      	ldr	r3, [pc, #60]	; (849b0 <udc_reset+0x44>)
   84974:	781b      	ldrb	r3, [r3, #0]
   84976:	2b00      	cmp	r3, #0
   84978:	d010      	beq.n	8499c <udc_reset+0x30>
		for (iface_num = 0;
   8497a:	2300      	movs	r3, #0
   8497c:	71fb      	strb	r3, [r7, #7]
   8497e:	e006      	b.n	8498e <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   84980:	79fb      	ldrb	r3, [r7, #7]
   84982:	4618      	mov	r0, r3
   84984:	4b0b      	ldr	r3, [pc, #44]	; (849b4 <udc_reset+0x48>)
   84986:	4798      	blx	r3
				iface_num++) {
   84988:	79fb      	ldrb	r3, [r7, #7]
   8498a:	3301      	adds	r3, #1
   8498c:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8498e:	4b0a      	ldr	r3, [pc, #40]	; (849b8 <udc_reset+0x4c>)
   84990:	681b      	ldr	r3, [r3, #0]
   84992:	681b      	ldr	r3, [r3, #0]
   84994:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   84996:	79fa      	ldrb	r2, [r7, #7]
   84998:	429a      	cmp	r2, r3
   8499a:	d3f1      	bcc.n	84980 <udc_reset+0x14>
		}
	}
	udc_num_configuration = 0;
   8499c:	4b04      	ldr	r3, [pc, #16]	; (849b0 <udc_reset+0x44>)
   8499e:	2200      	movs	r2, #0
   849a0:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   849a2:	4b06      	ldr	r3, [pc, #24]	; (849bc <udc_reset+0x50>)
   849a4:	2200      	movs	r2, #0
   849a6:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
   849a8:	bf00      	nop
   849aa:	3708      	adds	r7, #8
   849ac:	46bd      	mov	sp, r7
   849ae:	bd80      	pop	{r7, pc}
   849b0:	200012b8 	.word	0x200012b8
   849b4:	00084825 	.word	0x00084825
   849b8:	200012bc 	.word	0x200012bc
   849bc:	200012b6 	.word	0x200012b6

000849c0 <udc_sof_notify>:

void udc_sof_notify(void)
{
   849c0:	b580      	push	{r7, lr}
   849c2:	b082      	sub	sp, #8
   849c4:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   849c6:	4b14      	ldr	r3, [pc, #80]	; (84a18 <udc_sof_notify+0x58>)
   849c8:	781b      	ldrb	r3, [r3, #0]
   849ca:	2b00      	cmp	r3, #0
   849cc:	d01f      	beq.n	84a0e <udc_sof_notify+0x4e>
		for (iface_num = 0;
   849ce:	2300      	movs	r3, #0
   849d0:	71fb      	strb	r3, [r7, #7]
   849d2:	e015      	b.n	84a00 <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   849d4:	4b11      	ldr	r3, [pc, #68]	; (84a1c <udc_sof_notify+0x5c>)
   849d6:	681b      	ldr	r3, [r3, #0]
   849d8:	685a      	ldr	r2, [r3, #4]
   849da:	79fb      	ldrb	r3, [r7, #7]
   849dc:	009b      	lsls	r3, r3, #2
   849de:	4413      	add	r3, r2
   849e0:	681b      	ldr	r3, [r3, #0]
   849e2:	691b      	ldr	r3, [r3, #16]
   849e4:	2b00      	cmp	r3, #0
   849e6:	d008      	beq.n	849fa <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   849e8:	4b0c      	ldr	r3, [pc, #48]	; (84a1c <udc_sof_notify+0x5c>)
   849ea:	681b      	ldr	r3, [r3, #0]
   849ec:	685a      	ldr	r2, [r3, #4]
   849ee:	79fb      	ldrb	r3, [r7, #7]
   849f0:	009b      	lsls	r3, r3, #2
   849f2:	4413      	add	r3, r2
   849f4:	681b      	ldr	r3, [r3, #0]
   849f6:	691b      	ldr	r3, [r3, #16]
   849f8:	4798      	blx	r3
				iface_num++) {
   849fa:	79fb      	ldrb	r3, [r7, #7]
   849fc:	3301      	adds	r3, #1
   849fe:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84a00:	4b06      	ldr	r3, [pc, #24]	; (84a1c <udc_sof_notify+0x5c>)
   84a02:	681b      	ldr	r3, [r3, #0]
   84a04:	681b      	ldr	r3, [r3, #0]
   84a06:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   84a08:	79fa      	ldrb	r2, [r7, #7]
   84a0a:	429a      	cmp	r2, r3
   84a0c:	d3e2      	bcc.n	849d4 <udc_sof_notify+0x14>
			}
		}
	}
}
   84a0e:	bf00      	nop
   84a10:	3708      	adds	r7, #8
   84a12:	46bd      	mov	sp, r7
   84a14:	bd80      	pop	{r7, pc}
   84a16:	bf00      	nop
   84a18:	200012b8 	.word	0x200012b8
   84a1c:	200012bc 	.word	0x200012bc

00084a20 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
   84a20:	b580      	push	{r7, lr}
   84a22:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   84a24:	4b06      	ldr	r3, [pc, #24]	; (84a40 <udc_req_std_dev_get_status+0x20>)
   84a26:	88db      	ldrh	r3, [r3, #6]
   84a28:	2b02      	cmp	r3, #2
   84a2a:	d001      	beq.n	84a30 <udc_req_std_dev_get_status+0x10>
		return false;
   84a2c:	2300      	movs	r3, #0
   84a2e:	e004      	b.n	84a3a <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   84a30:	2102      	movs	r1, #2
   84a32:	4804      	ldr	r0, [pc, #16]	; (84a44 <udc_req_std_dev_get_status+0x24>)
   84a34:	4b04      	ldr	r3, [pc, #16]	; (84a48 <udc_req_std_dev_get_status+0x28>)
   84a36:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   84a38:	2301      	movs	r3, #1
}
   84a3a:	4618      	mov	r0, r3
   84a3c:	bd80      	pop	{r7, pc}
   84a3e:	bf00      	nop
   84a40:	2000130c 	.word	0x2000130c
   84a44:	200012b6 	.word	0x200012b6
   84a48:	0008207d 	.word	0x0008207d

00084a4c <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
   84a4c:	b580      	push	{r7, lr}
   84a4e:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   84a50:	4b0b      	ldr	r3, [pc, #44]	; (84a80 <udc_req_std_ep_get_status+0x34>)
   84a52:	88db      	ldrh	r3, [r3, #6]
   84a54:	2b02      	cmp	r3, #2
   84a56:	d001      	beq.n	84a5c <udc_req_std_ep_get_status+0x10>
		return false;
   84a58:	2300      	movs	r3, #0
   84a5a:	e00e      	b.n	84a7a <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   84a5c:	4b08      	ldr	r3, [pc, #32]	; (84a80 <udc_req_std_ep_get_status+0x34>)
   84a5e:	889b      	ldrh	r3, [r3, #4]
   84a60:	b2db      	uxtb	r3, r3
   84a62:	4618      	mov	r0, r3
   84a64:	4b07      	ldr	r3, [pc, #28]	; (84a84 <udc_req_std_ep_get_status+0x38>)
   84a66:	4798      	blx	r3
   84a68:	4603      	mov	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   84a6a:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   84a6c:	4b06      	ldr	r3, [pc, #24]	; (84a88 <udc_req_std_ep_get_status+0x3c>)
   84a6e:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   84a70:	2102      	movs	r1, #2
   84a72:	4805      	ldr	r0, [pc, #20]	; (84a88 <udc_req_std_ep_get_status+0x3c>)
   84a74:	4b05      	ldr	r3, [pc, #20]	; (84a8c <udc_req_std_ep_get_status+0x40>)
   84a76:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
   84a78:	2301      	movs	r3, #1
}
   84a7a:	4618      	mov	r0, r3
   84a7c:	bd80      	pop	{r7, pc}
   84a7e:	bf00      	nop
   84a80:	2000130c 	.word	0x2000130c
   84a84:	000824d1 	.word	0x000824d1
   84a88:	200012c4 	.word	0x200012c4
   84a8c:	0008207d 	.word	0x0008207d

00084a90 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
   84a90:	b480      	push	{r7}
   84a92:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84a94:	4b0b      	ldr	r3, [pc, #44]	; (84ac4 <udc_req_std_dev_clear_feature+0x34>)
   84a96:	88db      	ldrh	r3, [r3, #6]
   84a98:	2b00      	cmp	r3, #0
   84a9a:	d001      	beq.n	84aa0 <udc_req_std_dev_clear_feature+0x10>
		return false;
   84a9c:	2300      	movs	r3, #0
   84a9e:	e00d      	b.n	84abc <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   84aa0:	4b08      	ldr	r3, [pc, #32]	; (84ac4 <udc_req_std_dev_clear_feature+0x34>)
   84aa2:	885b      	ldrh	r3, [r3, #2]
   84aa4:	2b01      	cmp	r3, #1
   84aa6:	d108      	bne.n	84aba <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   84aa8:	4b07      	ldr	r3, [pc, #28]	; (84ac8 <udc_req_std_dev_clear_feature+0x38>)
   84aaa:	881b      	ldrh	r3, [r3, #0]
   84aac:	f023 0302 	bic.w	r3, r3, #2
   84ab0:	b29a      	uxth	r2, r3
   84ab2:	4b05      	ldr	r3, [pc, #20]	; (84ac8 <udc_req_std_dev_clear_feature+0x38>)
   84ab4:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   84ab6:	2301      	movs	r3, #1
   84ab8:	e000      	b.n	84abc <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
   84aba:	2300      	movs	r3, #0
}
   84abc:	4618      	mov	r0, r3
   84abe:	46bd      	mov	sp, r7
   84ac0:	bc80      	pop	{r7}
   84ac2:	4770      	bx	lr
   84ac4:	2000130c 	.word	0x2000130c
   84ac8:	200012b6 	.word	0x200012b6

00084acc <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
   84acc:	b580      	push	{r7, lr}
   84ace:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84ad0:	4b0a      	ldr	r3, [pc, #40]	; (84afc <udc_req_std_ep_clear_feature+0x30>)
   84ad2:	88db      	ldrh	r3, [r3, #6]
   84ad4:	2b00      	cmp	r3, #0
   84ad6:	d001      	beq.n	84adc <udc_req_std_ep_clear_feature+0x10>
		return false;
   84ad8:	2300      	movs	r3, #0
   84ada:	e00c      	b.n	84af6 <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84adc:	4b07      	ldr	r3, [pc, #28]	; (84afc <udc_req_std_ep_clear_feature+0x30>)
   84ade:	885b      	ldrh	r3, [r3, #2]
   84ae0:	2b00      	cmp	r3, #0
   84ae2:	d107      	bne.n	84af4 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   84ae4:	4b05      	ldr	r3, [pc, #20]	; (84afc <udc_req_std_ep_clear_feature+0x30>)
   84ae6:	889b      	ldrh	r3, [r3, #4]
   84ae8:	b2db      	uxtb	r3, r3
   84aea:	4618      	mov	r0, r3
   84aec:	4b04      	ldr	r3, [pc, #16]	; (84b00 <udc_req_std_ep_clear_feature+0x34>)
   84aee:	4798      	blx	r3
   84af0:	4603      	mov	r3, r0
   84af2:	e000      	b.n	84af6 <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
   84af4:	2300      	movs	r3, #0
}
   84af6:	4618      	mov	r0, r3
   84af8:	bd80      	pop	{r7, pc}
   84afa:	bf00      	nop
   84afc:	2000130c 	.word	0x2000130c
   84b00:	0008264d 	.word	0x0008264d

00084b04 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
   84b04:	b580      	push	{r7, lr}
   84b06:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84b08:	4b26      	ldr	r3, [pc, #152]	; (84ba4 <udc_req_std_dev_set_feature+0xa0>)
   84b0a:	88db      	ldrh	r3, [r3, #6]
   84b0c:	2b00      	cmp	r3, #0
   84b0e:	d001      	beq.n	84b14 <udc_req_std_dev_set_feature+0x10>
		return false;
   84b10:	2300      	movs	r3, #0
   84b12:	e045      	b.n	84ba0 <udc_req_std_dev_set_feature+0x9c>
	}

	switch (udd_g_ctrlreq.req.wValue) {
   84b14:	4b23      	ldr	r3, [pc, #140]	; (84ba4 <udc_req_std_dev_set_feature+0xa0>)
   84b16:	885b      	ldrh	r3, [r3, #2]
   84b18:	2b01      	cmp	r3, #1
   84b1a:	d002      	beq.n	84b22 <udc_req_std_dev_set_feature+0x1e>
   84b1c:	2b02      	cmp	r3, #2
   84b1e:	d002      	beq.n	84b26 <udc_req_std_dev_set_feature+0x22>
			break;
		}
		break;
#endif
	default:
		break;
   84b20:	e03d      	b.n	84b9e <udc_req_std_dev_set_feature+0x9a>
		return false;
   84b22:	2300      	movs	r3, #0
   84b24:	e03c      	b.n	84ba0 <udc_req_std_dev_set_feature+0x9c>
		if (!udd_is_high_speed()) {
   84b26:	4b20      	ldr	r3, [pc, #128]	; (84ba8 <udc_req_std_dev_set_feature+0xa4>)
   84b28:	4798      	blx	r3
   84b2a:	4603      	mov	r3, r0
   84b2c:	f083 0301 	eor.w	r3, r3, #1
   84b30:	b2db      	uxtb	r3, r3
   84b32:	2b00      	cmp	r3, #0
   84b34:	d130      	bne.n	84b98 <udc_req_std_dev_set_feature+0x94>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   84b36:	4b1b      	ldr	r3, [pc, #108]	; (84ba4 <udc_req_std_dev_set_feature+0xa0>)
   84b38:	889b      	ldrh	r3, [r3, #4]
   84b3a:	b2db      	uxtb	r3, r3
   84b3c:	2b00      	cmp	r3, #0
   84b3e:	d12d      	bne.n	84b9c <udc_req_std_dev_set_feature+0x98>
		udc_reset();
   84b40:	4b1a      	ldr	r3, [pc, #104]	; (84bac <udc_req_std_dev_set_feature+0xa8>)
   84b42:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   84b44:	4b17      	ldr	r3, [pc, #92]	; (84ba4 <udc_req_std_dev_set_feature+0xa0>)
   84b46:	889b      	ldrh	r3, [r3, #4]
   84b48:	0a1b      	lsrs	r3, r3, #8
   84b4a:	b29b      	uxth	r3, r3
   84b4c:	b2db      	uxtb	r3, r3
   84b4e:	3b01      	subs	r3, #1
   84b50:	2b03      	cmp	r3, #3
   84b52:	d81f      	bhi.n	84b94 <udc_req_std_dev_set_feature+0x90>
   84b54:	a201      	add	r2, pc, #4	; (adr r2, 84b5c <udc_req_std_dev_set_feature+0x58>)
   84b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84b5a:	bf00      	nop
   84b5c:	00084b6d 	.word	0x00084b6d
   84b60:	00084b77 	.word	0x00084b77
   84b64:	00084b81 	.word	0x00084b81
   84b68:	00084b8b 	.word	0x00084b8b
			udd_g_ctrlreq.callback = udd_test_mode_j;
   84b6c:	4b0d      	ldr	r3, [pc, #52]	; (84ba4 <udc_req_std_dev_set_feature+0xa0>)
   84b6e:	4a10      	ldr	r2, [pc, #64]	; (84bb0 <udc_req_std_dev_set_feature+0xac>)
   84b70:	611a      	str	r2, [r3, #16]
			return true;
   84b72:	2301      	movs	r3, #1
   84b74:	e014      	b.n	84ba0 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   84b76:	4b0b      	ldr	r3, [pc, #44]	; (84ba4 <udc_req_std_dev_set_feature+0xa0>)
   84b78:	4a0e      	ldr	r2, [pc, #56]	; (84bb4 <udc_req_std_dev_set_feature+0xb0>)
   84b7a:	611a      	str	r2, [r3, #16]
			return true;
   84b7c:	2301      	movs	r3, #1
   84b7e:	e00f      	b.n	84ba0 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   84b80:	4b08      	ldr	r3, [pc, #32]	; (84ba4 <udc_req_std_dev_set_feature+0xa0>)
   84b82:	4a0d      	ldr	r2, [pc, #52]	; (84bb8 <udc_req_std_dev_set_feature+0xb4>)
   84b84:	611a      	str	r2, [r3, #16]
			return true;
   84b86:	2301      	movs	r3, #1
   84b88:	e00a      	b.n	84ba0 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   84b8a:	4b06      	ldr	r3, [pc, #24]	; (84ba4 <udc_req_std_dev_set_feature+0xa0>)
   84b8c:	4a0b      	ldr	r2, [pc, #44]	; (84bbc <udc_req_std_dev_set_feature+0xb8>)
   84b8e:	611a      	str	r2, [r3, #16]
			return true;
   84b90:	2301      	movs	r3, #1
   84b92:	e005      	b.n	84ba0 <udc_req_std_dev_set_feature+0x9c>
			break;
   84b94:	bf00      	nop
		break;
   84b96:	e002      	b.n	84b9e <udc_req_std_dev_set_feature+0x9a>
			break;
   84b98:	bf00      	nop
   84b9a:	e000      	b.n	84b9e <udc_req_std_dev_set_feature+0x9a>
			break;
   84b9c:	bf00      	nop
	}
	return false;
   84b9e:	2300      	movs	r3, #0
}
   84ba0:	4618      	mov	r0, r3
   84ba2:	bd80      	pop	{r7, pc}
   84ba4:	2000130c 	.word	0x2000130c
   84ba8:	00081ff9 	.word	0x00081ff9
   84bac:	0008496d 	.word	0x0008496d
   84bb0:	0008290d 	.word	0x0008290d
   84bb4:	00082941 	.word	0x00082941
   84bb8:	00082975 	.word	0x00082975
   84bbc:	00082999 	.word	0x00082999

00084bc0 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
   84bc0:	b580      	push	{r7, lr}
   84bc2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84bc4:	4b0d      	ldr	r3, [pc, #52]	; (84bfc <udc_req_std_ep_set_feature+0x3c>)
   84bc6:	88db      	ldrh	r3, [r3, #6]
   84bc8:	2b00      	cmp	r3, #0
   84bca:	d001      	beq.n	84bd0 <udc_req_std_ep_set_feature+0x10>
		return false;
   84bcc:	2300      	movs	r3, #0
   84bce:	e012      	b.n	84bf6 <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84bd0:	4b0a      	ldr	r3, [pc, #40]	; (84bfc <udc_req_std_ep_set_feature+0x3c>)
   84bd2:	885b      	ldrh	r3, [r3, #2]
   84bd4:	2b00      	cmp	r3, #0
   84bd6:	d10d      	bne.n	84bf4 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   84bd8:	4b08      	ldr	r3, [pc, #32]	; (84bfc <udc_req_std_ep_set_feature+0x3c>)
   84bda:	889b      	ldrh	r3, [r3, #4]
   84bdc:	b2db      	uxtb	r3, r3
   84bde:	4618      	mov	r0, r3
   84be0:	4b07      	ldr	r3, [pc, #28]	; (84c00 <udc_req_std_ep_set_feature+0x40>)
   84be2:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   84be4:	4b05      	ldr	r3, [pc, #20]	; (84bfc <udc_req_std_ep_set_feature+0x3c>)
   84be6:	889b      	ldrh	r3, [r3, #4]
   84be8:	b2db      	uxtb	r3, r3
   84bea:	4618      	mov	r0, r3
   84bec:	4b05      	ldr	r3, [pc, #20]	; (84c04 <udc_req_std_ep_set_feature+0x44>)
   84bee:	4798      	blx	r3
   84bf0:	4603      	mov	r3, r0
   84bf2:	e000      	b.n	84bf6 <udc_req_std_ep_set_feature+0x36>
	}
	return false;
   84bf4:	2300      	movs	r3, #0
}
   84bf6:	4618      	mov	r0, r3
   84bf8:	bd80      	pop	{r7, pc}
   84bfa:	bf00      	nop
   84bfc:	2000130c 	.word	0x2000130c
   84c00:	00082885 	.word	0x00082885
   84c04:	00082539 	.word	0x00082539

00084c08 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   84c08:	b580      	push	{r7, lr}
   84c0a:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   84c0c:	4b05      	ldr	r3, [pc, #20]	; (84c24 <udc_valid_address+0x1c>)
   84c0e:	885b      	ldrh	r3, [r3, #2]
   84c10:	b2db      	uxtb	r3, r3
   84c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   84c16:	b2db      	uxtb	r3, r3
   84c18:	4618      	mov	r0, r3
   84c1a:	4b03      	ldr	r3, [pc, #12]	; (84c28 <udc_valid_address+0x20>)
   84c1c:	4798      	blx	r3
}
   84c1e:	bf00      	nop
   84c20:	bd80      	pop	{r7, pc}
   84c22:	bf00      	nop
   84c24:	2000130c 	.word	0x2000130c
   84c28:	0008201d 	.word	0x0008201d

00084c2c <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
   84c2c:	b480      	push	{r7}
   84c2e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84c30:	4b06      	ldr	r3, [pc, #24]	; (84c4c <udc_req_std_dev_set_address+0x20>)
   84c32:	88db      	ldrh	r3, [r3, #6]
   84c34:	2b00      	cmp	r3, #0
   84c36:	d001      	beq.n	84c3c <udc_req_std_dev_set_address+0x10>
		return false;
   84c38:	2300      	movs	r3, #0
   84c3a:	e003      	b.n	84c44 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   84c3c:	4b03      	ldr	r3, [pc, #12]	; (84c4c <udc_req_std_dev_set_address+0x20>)
   84c3e:	4a04      	ldr	r2, [pc, #16]	; (84c50 <udc_req_std_dev_set_address+0x24>)
   84c40:	611a      	str	r2, [r3, #16]
	return true;
   84c42:	2301      	movs	r3, #1
}
   84c44:	4618      	mov	r0, r3
   84c46:	46bd      	mov	sp, r7
   84c48:	bc80      	pop	{r7}
   84c4a:	4770      	bx	lr
   84c4c:	2000130c 	.word	0x2000130c
   84c50:	00084c09 	.word	0x00084c09

00084c54 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
   84c54:	b580      	push	{r7, lr}
   84c56:	b084      	sub	sp, #16
   84c58:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
   84c5a:	2300      	movs	r3, #0
   84c5c:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   84c5e:	4b29      	ldr	r3, [pc, #164]	; (84d04 <udc_req_std_dev_get_str_desc+0xb0>)
   84c60:	885b      	ldrh	r3, [r3, #2]
   84c62:	b2db      	uxtb	r3, r3
   84c64:	2b03      	cmp	r3, #3
   84c66:	d820      	bhi.n	84caa <udc_req_std_dev_get_str_desc+0x56>
   84c68:	a201      	add	r2, pc, #4	; (adr r2, 84c70 <udc_req_std_dev_get_str_desc+0x1c>)
   84c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84c6e:	bf00      	nop
   84c70:	00084c81 	.word	0x00084c81
   84c74:	00084c8b 	.word	0x00084c8b
   84c78:	00084c95 	.word	0x00084c95
   84c7c:	00084c9f 	.word	0x00084c9f
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   84c80:	2104      	movs	r1, #4
   84c82:	4821      	ldr	r0, [pc, #132]	; (84d08 <udc_req_std_dev_get_str_desc+0xb4>)
   84c84:	4b21      	ldr	r3, [pc, #132]	; (84d0c <udc_req_std_dev_get_str_desc+0xb8>)
   84c86:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
   84c88:	e011      	b.n	84cae <udc_req_std_dev_get_str_desc+0x5a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   84c8a:	2315      	movs	r3, #21
   84c8c:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
   84c8e:	4b20      	ldr	r3, [pc, #128]	; (84d10 <udc_req_std_dev_get_str_desc+0xbc>)
   84c90:	60bb      	str	r3, [r7, #8]
		break;
   84c92:	e00c      	b.n	84cae <udc_req_std_dev_get_str_desc+0x5a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   84c94:	2310      	movs	r3, #16
   84c96:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
   84c98:	4b1e      	ldr	r3, [pc, #120]	; (84d14 <udc_req_std_dev_get_str_desc+0xc0>)
   84c9a:	60bb      	str	r3, [r7, #8]
		break;
   84c9c:	e007      	b.n	84cae <udc_req_std_dev_get_str_desc+0x5a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   84c9e:	2320      	movs	r3, #32
   84ca0:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
   84ca2:	4b1d      	ldr	r3, [pc, #116]	; (84d18 <udc_req_std_dev_get_str_desc+0xc4>)
   84ca4:	4798      	blx	r3
   84ca6:	60b8      	str	r0, [r7, #8]
		break;
   84ca8:	e001      	b.n	84cae <udc_req_std_dev_get_str_desc+0x5a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
   84caa:	2300      	movs	r3, #0
   84cac:	e026      	b.n	84cfc <udc_req_std_dev_get_str_desc+0xa8>
	}

	if (str_length) {
   84cae:	79fb      	ldrb	r3, [r7, #7]
   84cb0:	2b00      	cmp	r3, #0
   84cb2:	d022      	beq.n	84cfa <udc_req_std_dev_get_str_desc+0xa6>
		for(i = 0; i < str_length; i++) {
   84cb4:	2300      	movs	r3, #0
   84cb6:	73fb      	strb	r3, [r7, #15]
   84cb8:	e00d      	b.n	84cd6 <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   84cba:	7bfb      	ldrb	r3, [r7, #15]
   84cbc:	68ba      	ldr	r2, [r7, #8]
   84cbe:	4413      	add	r3, r2
   84cc0:	781a      	ldrb	r2, [r3, #0]
   84cc2:	7bfb      	ldrb	r3, [r7, #15]
   84cc4:	b291      	uxth	r1, r2
   84cc6:	4a15      	ldr	r2, [pc, #84]	; (84d1c <udc_req_std_dev_get_str_desc+0xc8>)
   84cc8:	005b      	lsls	r3, r3, #1
   84cca:	4413      	add	r3, r2
   84ccc:	460a      	mov	r2, r1
   84cce:	805a      	strh	r2, [r3, #2]
		for(i = 0; i < str_length; i++) {
   84cd0:	7bfb      	ldrb	r3, [r7, #15]
   84cd2:	3301      	adds	r3, #1
   84cd4:	73fb      	strb	r3, [r7, #15]
   84cd6:	7bfa      	ldrb	r2, [r7, #15]
   84cd8:	79fb      	ldrb	r3, [r7, #7]
   84cda:	429a      	cmp	r2, r3
   84cdc:	d3ed      	bcc.n	84cba <udc_req_std_dev_get_str_desc+0x66>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   84cde:	79fb      	ldrb	r3, [r7, #7]
   84ce0:	3301      	adds	r3, #1
   84ce2:	b2db      	uxtb	r3, r3
   84ce4:	005b      	lsls	r3, r3, #1
   84ce6:	b2da      	uxtb	r2, r3
   84ce8:	4b0c      	ldr	r3, [pc, #48]	; (84d1c <udc_req_std_dev_get_str_desc+0xc8>)
   84cea:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
   84cec:	4b0b      	ldr	r3, [pc, #44]	; (84d1c <udc_req_std_dev_get_str_desc+0xc8>)
   84cee:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
   84cf0:	b29b      	uxth	r3, r3
   84cf2:	4619      	mov	r1, r3
   84cf4:	4809      	ldr	r0, [pc, #36]	; (84d1c <udc_req_std_dev_get_str_desc+0xc8>)
   84cf6:	4b05      	ldr	r3, [pc, #20]	; (84d0c <udc_req_std_dev_get_str_desc+0xb8>)
   84cf8:	4798      	blx	r3
	}

	return true;
   84cfa:	2301      	movs	r3, #1
}
   84cfc:	4618      	mov	r0, r3
   84cfe:	3710      	adds	r7, #16
   84d00:	46bd      	mov	sp, r7
   84d02:	bd80      	pop	{r7, pc}
   84d04:	2000130c 	.word	0x2000130c
   84d08:	200002a8 	.word	0x200002a8
   84d0c:	0008207d 	.word	0x0008207d
   84d10:	200002ac 	.word	0x200002ac
   84d14:	200002c4 	.word	0x200002c4
   84d18:	000846e1 	.word	0x000846e1
   84d1c:	200002d8 	.word	0x200002d8

00084d20 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
   84d20:	b580      	push	{r7, lr}
   84d22:	b082      	sub	sp, #8
   84d24:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   84d26:	4b80      	ldr	r3, [pc, #512]	; (84f28 <udc_req_std_dev_get_descriptor+0x208>)
   84d28:	885b      	ldrh	r3, [r3, #2]
   84d2a:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   84d2c:	4b7e      	ldr	r3, [pc, #504]	; (84f28 <udc_req_std_dev_get_descriptor+0x208>)
   84d2e:	885b      	ldrh	r3, [r3, #2]
   84d30:	0a1b      	lsrs	r3, r3, #8
   84d32:	b29b      	uxth	r3, r3
   84d34:	b2db      	uxtb	r3, r3
   84d36:	3b01      	subs	r3, #1
   84d38:	2b0e      	cmp	r3, #14
   84d3a:	f200 80e2 	bhi.w	84f02 <udc_req_std_dev_get_descriptor+0x1e2>
   84d3e:	a201      	add	r2, pc, #4	; (adr r2, 84d44 <udc_req_std_dev_get_descriptor+0x24>)
   84d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84d44:	00084d81 	.word	0x00084d81
   84d48:	00084dbd 	.word	0x00084dbd
   84d4c:	00084eef 	.word	0x00084eef
   84d50:	00084f03 	.word	0x00084f03
   84d54:	00084f03 	.word	0x00084f03
   84d58:	00084e37 	.word	0x00084e37
   84d5c:	00084e4d 	.word	0x00084e4d
   84d60:	00084f03 	.word	0x00084f03
   84d64:	00084f03 	.word	0x00084f03
   84d68:	00084f03 	.word	0x00084f03
   84d6c:	00084f03 	.word	0x00084f03
   84d70:	00084f03 	.word	0x00084f03
   84d74:	00084f03 	.word	0x00084f03
   84d78:	00084f03 	.word	0x00084f03
   84d7c:	00084ecd 	.word	0x00084ecd
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   84d80:	4b6a      	ldr	r3, [pc, #424]	; (84f2c <udc_req_std_dev_get_descriptor+0x20c>)
   84d82:	4798      	blx	r3
   84d84:	4603      	mov	r3, r0
   84d86:	f083 0301 	eor.w	r3, r3, #1
   84d8a:	b2db      	uxtb	r3, r3
   84d8c:	2b00      	cmp	r3, #0
   84d8e:	d00a      	beq.n	84da6 <udc_req_std_dev_get_descriptor+0x86>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
   84d90:	4b67      	ldr	r3, [pc, #412]	; (84f30 <udc_req_std_dev_get_descriptor+0x210>)
   84d92:	689a      	ldr	r2, [r3, #8]
				udc_config.confdev_hs->bLength);
   84d94:	4b66      	ldr	r3, [pc, #408]	; (84f30 <udc_req_std_dev_get_descriptor+0x210>)
   84d96:	689b      	ldr	r3, [r3, #8]
   84d98:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   84d9a:	b29b      	uxth	r3, r3
   84d9c:	4619      	mov	r1, r3
   84d9e:	4610      	mov	r0, r2
   84da0:	4b64      	ldr	r3, [pc, #400]	; (84f34 <udc_req_std_dev_get_descriptor+0x214>)
   84da2:	4798      	blx	r3
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
   84da4:	e0b0      	b.n	84f08 <udc_req_std_dev_get_descriptor+0x1e8>
				(uint8_t *) udc_config.confdev_lsfs,
   84da6:	4b62      	ldr	r3, [pc, #392]	; (84f30 <udc_req_std_dev_get_descriptor+0x210>)
   84da8:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
   84daa:	4b61      	ldr	r3, [pc, #388]	; (84f30 <udc_req_std_dev_get_descriptor+0x210>)
   84dac:	681b      	ldr	r3, [r3, #0]
   84dae:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   84db0:	b29b      	uxth	r3, r3
   84db2:	4619      	mov	r1, r3
   84db4:	4610      	mov	r0, r2
   84db6:	4b5f      	ldr	r3, [pc, #380]	; (84f34 <udc_req_std_dev_get_descriptor+0x214>)
   84db8:	4798      	blx	r3
		break;
   84dba:	e0a5      	b.n	84f08 <udc_req_std_dev_get_descriptor+0x1e8>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   84dbc:	4b5b      	ldr	r3, [pc, #364]	; (84f2c <udc_req_std_dev_get_descriptor+0x20c>)
   84dbe:	4798      	blx	r3
   84dc0:	4603      	mov	r3, r0
   84dc2:	2b00      	cmp	r3, #0
   84dc4:	d019      	beq.n	84dfa <udc_req_std_dev_get_descriptor+0xda>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   84dc6:	4b5a      	ldr	r3, [pc, #360]	; (84f30 <udc_req_std_dev_get_descriptor+0x210>)
   84dc8:	689b      	ldr	r3, [r3, #8]
   84dca:	7c5b      	ldrb	r3, [r3, #17]
   84dcc:	79fa      	ldrb	r2, [r7, #7]
   84dce:	429a      	cmp	r2, r3
   84dd0:	d301      	bcc.n	84dd6 <udc_req_std_dev_get_descriptor+0xb6>
					bNumConfigurations) {
				return false;
   84dd2:	2300      	movs	r3, #0
   84dd4:	e0a3      	b.n	84f1e <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   84dd6:	4b56      	ldr	r3, [pc, #344]	; (84f30 <udc_req_std_dev_get_descriptor+0x210>)
   84dd8:	691a      	ldr	r2, [r3, #16]
   84dda:	79fb      	ldrb	r3, [r7, #7]
   84ddc:	00db      	lsls	r3, r3, #3
   84dde:	4413      	add	r3, r2
   84de0:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   84de2:	4b53      	ldr	r3, [pc, #332]	; (84f30 <udc_req_std_dev_get_descriptor+0x210>)
   84de4:	691a      	ldr	r2, [r3, #16]
   84de6:	79fb      	ldrb	r3, [r7, #7]
   84de8:	00db      	lsls	r3, r3, #3
   84dea:	4413      	add	r3, r2
   84dec:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   84dee:	885b      	ldrh	r3, [r3, #2]
   84df0:	b29b      	uxth	r3, r3
   84df2:	4619      	mov	r1, r3
   84df4:	4b4f      	ldr	r3, [pc, #316]	; (84f34 <udc_req_std_dev_get_descriptor+0x214>)
   84df6:	4798      	blx	r3
   84df8:	e018      	b.n	84e2c <udc_req_std_dev_get_descriptor+0x10c>
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   84dfa:	4b4d      	ldr	r3, [pc, #308]	; (84f30 <udc_req_std_dev_get_descriptor+0x210>)
   84dfc:	681b      	ldr	r3, [r3, #0]
   84dfe:	7c5b      	ldrb	r3, [r3, #17]
   84e00:	79fa      	ldrb	r2, [r7, #7]
   84e02:	429a      	cmp	r2, r3
   84e04:	d301      	bcc.n	84e0a <udc_req_std_dev_get_descriptor+0xea>
					bNumConfigurations) {
				return false;
   84e06:	2300      	movs	r3, #0
   84e08:	e089      	b.n	84f1e <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   84e0a:	4b49      	ldr	r3, [pc, #292]	; (84f30 <udc_req_std_dev_get_descriptor+0x210>)
   84e0c:	685a      	ldr	r2, [r3, #4]
   84e0e:	79fb      	ldrb	r3, [r7, #7]
   84e10:	00db      	lsls	r3, r3, #3
   84e12:	4413      	add	r3, r2
   84e14:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   84e16:	4b46      	ldr	r3, [pc, #280]	; (84f30 <udc_req_std_dev_get_descriptor+0x210>)
   84e18:	685a      	ldr	r2, [r3, #4]
   84e1a:	79fb      	ldrb	r3, [r7, #7]
   84e1c:	00db      	lsls	r3, r3, #3
   84e1e:	4413      	add	r3, r2
   84e20:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   84e22:	885b      	ldrh	r3, [r3, #2]
   84e24:	b29b      	uxth	r3, r3
   84e26:	4619      	mov	r1, r3
   84e28:	4b42      	ldr	r3, [pc, #264]	; (84f34 <udc_req_std_dev_get_descriptor+0x214>)
   84e2a:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   84e2c:	4b3e      	ldr	r3, [pc, #248]	; (84f28 <udc_req_std_dev_get_descriptor+0x208>)
   84e2e:	689b      	ldr	r3, [r3, #8]
   84e30:	2202      	movs	r2, #2
   84e32:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
   84e34:	e068      	b.n	84f08 <udc_req_std_dev_get_descriptor+0x1e8>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   84e36:	4b3e      	ldr	r3, [pc, #248]	; (84f30 <udc_req_std_dev_get_descriptor+0x210>)
   84e38:	68da      	ldr	r2, [r3, #12]
				udc_config.qualifier->bLength);
   84e3a:	4b3d      	ldr	r3, [pc, #244]	; (84f30 <udc_req_std_dev_get_descriptor+0x210>)
   84e3c:	68db      	ldr	r3, [r3, #12]
   84e3e:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   84e40:	b29b      	uxth	r3, r3
   84e42:	4619      	mov	r1, r3
   84e44:	4610      	mov	r0, r2
   84e46:	4b3b      	ldr	r3, [pc, #236]	; (84f34 <udc_req_std_dev_get_descriptor+0x214>)
   84e48:	4798      	blx	r3
		break;
   84e4a:	e05d      	b.n	84f08 <udc_req_std_dev_get_descriptor+0x1e8>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   84e4c:	4b37      	ldr	r3, [pc, #220]	; (84f2c <udc_req_std_dev_get_descriptor+0x20c>)
   84e4e:	4798      	blx	r3
   84e50:	4603      	mov	r3, r0
   84e52:	f083 0301 	eor.w	r3, r3, #1
   84e56:	b2db      	uxtb	r3, r3
   84e58:	2b00      	cmp	r3, #0
   84e5a:	d019      	beq.n	84e90 <udc_req_std_dev_get_descriptor+0x170>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   84e5c:	4b34      	ldr	r3, [pc, #208]	; (84f30 <udc_req_std_dev_get_descriptor+0x210>)
   84e5e:	689b      	ldr	r3, [r3, #8]
   84e60:	7c5b      	ldrb	r3, [r3, #17]
   84e62:	79fa      	ldrb	r2, [r7, #7]
   84e64:	429a      	cmp	r2, r3
   84e66:	d301      	bcc.n	84e6c <udc_req_std_dev_get_descriptor+0x14c>
					bNumConfigurations) {
				return false;
   84e68:	2300      	movs	r3, #0
   84e6a:	e058      	b.n	84f1e <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   84e6c:	4b30      	ldr	r3, [pc, #192]	; (84f30 <udc_req_std_dev_get_descriptor+0x210>)
   84e6e:	691a      	ldr	r2, [r3, #16]
   84e70:	79fb      	ldrb	r3, [r7, #7]
   84e72:	00db      	lsls	r3, r3, #3
   84e74:	4413      	add	r3, r2
   84e76:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   84e78:	4b2d      	ldr	r3, [pc, #180]	; (84f30 <udc_req_std_dev_get_descriptor+0x210>)
   84e7a:	691a      	ldr	r2, [r3, #16]
   84e7c:	79fb      	ldrb	r3, [r7, #7]
   84e7e:	00db      	lsls	r3, r3, #3
   84e80:	4413      	add	r3, r2
   84e82:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   84e84:	885b      	ldrh	r3, [r3, #2]
   84e86:	b29b      	uxth	r3, r3
   84e88:	4619      	mov	r1, r3
   84e8a:	4b2a      	ldr	r3, [pc, #168]	; (84f34 <udc_req_std_dev_get_descriptor+0x214>)
   84e8c:	4798      	blx	r3
   84e8e:	e018      	b.n	84ec2 <udc_req_std_dev_get_descriptor+0x1a2>
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   84e90:	4b27      	ldr	r3, [pc, #156]	; (84f30 <udc_req_std_dev_get_descriptor+0x210>)
   84e92:	681b      	ldr	r3, [r3, #0]
   84e94:	7c5b      	ldrb	r3, [r3, #17]
   84e96:	79fa      	ldrb	r2, [r7, #7]
   84e98:	429a      	cmp	r2, r3
   84e9a:	d301      	bcc.n	84ea0 <udc_req_std_dev_get_descriptor+0x180>
					bNumConfigurations) {
				return false;
   84e9c:	2300      	movs	r3, #0
   84e9e:	e03e      	b.n	84f1e <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   84ea0:	4b23      	ldr	r3, [pc, #140]	; (84f30 <udc_req_std_dev_get_descriptor+0x210>)
   84ea2:	685a      	ldr	r2, [r3, #4]
   84ea4:	79fb      	ldrb	r3, [r7, #7]
   84ea6:	00db      	lsls	r3, r3, #3
   84ea8:	4413      	add	r3, r2
   84eaa:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   84eac:	4b20      	ldr	r3, [pc, #128]	; (84f30 <udc_req_std_dev_get_descriptor+0x210>)
   84eae:	685a      	ldr	r2, [r3, #4]
   84eb0:	79fb      	ldrb	r3, [r7, #7]
   84eb2:	00db      	lsls	r3, r3, #3
   84eb4:	4413      	add	r3, r2
   84eb6:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   84eb8:	885b      	ldrh	r3, [r3, #2]
   84eba:	b29b      	uxth	r3, r3
   84ebc:	4619      	mov	r1, r3
   84ebe:	4b1d      	ldr	r3, [pc, #116]	; (84f34 <udc_req_std_dev_get_descriptor+0x214>)
   84ec0:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   84ec2:	4b19      	ldr	r3, [pc, #100]	; (84f28 <udc_req_std_dev_get_descriptor+0x208>)
   84ec4:	689b      	ldr	r3, [r3, #8]
   84ec6:	2207      	movs	r2, #7
   84ec8:	705a      	strb	r2, [r3, #1]
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
   84eca:	e01d      	b.n	84f08 <udc_req_std_dev_get_descriptor+0x1e8>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
   84ecc:	4b18      	ldr	r3, [pc, #96]	; (84f30 <udc_req_std_dev_get_descriptor+0x210>)
   84ece:	695b      	ldr	r3, [r3, #20]
   84ed0:	2b00      	cmp	r3, #0
   84ed2:	d101      	bne.n	84ed8 <udc_req_std_dev_get_descriptor+0x1b8>
			return false;
   84ed4:	2300      	movs	r3, #0
   84ed6:	e022      	b.n	84f1e <udc_req_std_dev_get_descriptor+0x1fe>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   84ed8:	4b15      	ldr	r3, [pc, #84]	; (84f30 <udc_req_std_dev_get_descriptor+0x210>)
   84eda:	695a      	ldr	r2, [r3, #20]
				udc_config.conf_bos->wTotalLength);
   84edc:	4b14      	ldr	r3, [pc, #80]	; (84f30 <udc_req_std_dev_get_descriptor+0x210>)
   84ede:	695b      	ldr	r3, [r3, #20]
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   84ee0:	885b      	ldrh	r3, [r3, #2]
   84ee2:	b29b      	uxth	r3, r3
   84ee4:	4619      	mov	r1, r3
   84ee6:	4610      	mov	r0, r2
   84ee8:	4b12      	ldr	r3, [pc, #72]	; (84f34 <udc_req_std_dev_get_descriptor+0x214>)
   84eea:	4798      	blx	r3
		break;
   84eec:	e00c      	b.n	84f08 <udc_req_std_dev_get_descriptor+0x1e8>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
   84eee:	4b12      	ldr	r3, [pc, #72]	; (84f38 <udc_req_std_dev_get_descriptor+0x218>)
   84ef0:	4798      	blx	r3
   84ef2:	4603      	mov	r3, r0
   84ef4:	f083 0301 	eor.w	r3, r3, #1
   84ef8:	b2db      	uxtb	r3, r3
   84efa:	2b00      	cmp	r3, #0
   84efc:	d003      	beq.n	84f06 <udc_req_std_dev_get_descriptor+0x1e6>
			return false;
   84efe:	2300      	movs	r3, #0
   84f00:	e00d      	b.n	84f1e <udc_req_std_dev_get_descriptor+0x1fe>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   84f02:	2300      	movs	r3, #0
   84f04:	e00b      	b.n	84f1e <udc_req_std_dev_get_descriptor+0x1fe>
		break;
   84f06:	bf00      	nop
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   84f08:	4b07      	ldr	r3, [pc, #28]	; (84f28 <udc_req_std_dev_get_descriptor+0x208>)
   84f0a:	88da      	ldrh	r2, [r3, #6]
   84f0c:	4b06      	ldr	r3, [pc, #24]	; (84f28 <udc_req_std_dev_get_descriptor+0x208>)
   84f0e:	899b      	ldrh	r3, [r3, #12]
   84f10:	429a      	cmp	r2, r3
   84f12:	d203      	bcs.n	84f1c <udc_req_std_dev_get_descriptor+0x1fc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   84f14:	4b04      	ldr	r3, [pc, #16]	; (84f28 <udc_req_std_dev_get_descriptor+0x208>)
   84f16:	88da      	ldrh	r2, [r3, #6]
   84f18:	4b03      	ldr	r3, [pc, #12]	; (84f28 <udc_req_std_dev_get_descriptor+0x208>)
   84f1a:	819a      	strh	r2, [r3, #12]
	}
	return true;
   84f1c:	2301      	movs	r3, #1
}
   84f1e:	4618      	mov	r0, r3
   84f20:	3708      	adds	r7, #8
   84f22:	46bd      	mov	sp, r7
   84f24:	bd80      	pop	{r7, pc}
   84f26:	bf00      	nop
   84f28:	2000130c 	.word	0x2000130c
   84f2c:	00081ff9 	.word	0x00081ff9
   84f30:	20000390 	.word	0x20000390
   84f34:	0008207d 	.word	0x0008207d
   84f38:	00084c55 	.word	0x00084c55

00084f3c <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
   84f3c:	b580      	push	{r7, lr}
   84f3e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
   84f40:	4b06      	ldr	r3, [pc, #24]	; (84f5c <udc_req_std_dev_get_configuration+0x20>)
   84f42:	88db      	ldrh	r3, [r3, #6]
   84f44:	2b01      	cmp	r3, #1
   84f46:	d001      	beq.n	84f4c <udc_req_std_dev_get_configuration+0x10>
		return false;
   84f48:	2300      	movs	r3, #0
   84f4a:	e004      	b.n	84f56 <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   84f4c:	2101      	movs	r1, #1
   84f4e:	4804      	ldr	r0, [pc, #16]	; (84f60 <udc_req_std_dev_get_configuration+0x24>)
   84f50:	4b04      	ldr	r3, [pc, #16]	; (84f64 <udc_req_std_dev_get_configuration+0x28>)
   84f52:	4798      	blx	r3
	return true;
   84f54:	2301      	movs	r3, #1
}
   84f56:	4618      	mov	r0, r3
   84f58:	bd80      	pop	{r7, pc}
   84f5a:	bf00      	nop
   84f5c:	2000130c 	.word	0x2000130c
   84f60:	200012b8 	.word	0x200012b8
   84f64:	0008207d 	.word	0x0008207d

00084f68 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
   84f68:	b580      	push	{r7, lr}
   84f6a:	b082      	sub	sp, #8
   84f6c:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   84f6e:	4b37      	ldr	r3, [pc, #220]	; (8504c <udc_req_std_dev_set_configuration+0xe4>)
   84f70:	88db      	ldrh	r3, [r3, #6]
   84f72:	2b00      	cmp	r3, #0
   84f74:	d001      	beq.n	84f7a <udc_req_std_dev_set_configuration+0x12>
		return false;
   84f76:	2300      	movs	r3, #0
   84f78:	e063      	b.n	85042 <udc_req_std_dev_set_configuration+0xda>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   84f7a:	4b35      	ldr	r3, [pc, #212]	; (85050 <udc_req_std_dev_set_configuration+0xe8>)
   84f7c:	4798      	blx	r3
   84f7e:	4603      	mov	r3, r0
   84f80:	2b00      	cmp	r3, #0
   84f82:	d101      	bne.n	84f88 <udc_req_std_dev_set_configuration+0x20>
		return false;
   84f84:	2300      	movs	r3, #0
   84f86:	e05c      	b.n	85042 <udc_req_std_dev_set_configuration+0xda>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   84f88:	4b32      	ldr	r3, [pc, #200]	; (85054 <udc_req_std_dev_set_configuration+0xec>)
   84f8a:	4798      	blx	r3
   84f8c:	4603      	mov	r3, r0
   84f8e:	2b00      	cmp	r3, #0
   84f90:	d009      	beq.n	84fa6 <udc_req_std_dev_set_configuration+0x3e>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84f92:	4b2e      	ldr	r3, [pc, #184]	; (8504c <udc_req_std_dev_set_configuration+0xe4>)
   84f94:	885b      	ldrh	r3, [r3, #2]
   84f96:	b2db      	uxtb	r3, r3
				udc_config.confdev_hs->bNumConfigurations) {
   84f98:	4a2f      	ldr	r2, [pc, #188]	; (85058 <udc_req_std_dev_set_configuration+0xf0>)
   84f9a:	6892      	ldr	r2, [r2, #8]
   84f9c:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84f9e:	4293      	cmp	r3, r2
   84fa0:	dd0b      	ble.n	84fba <udc_req_std_dev_set_configuration+0x52>
			return false;
   84fa2:	2300      	movs	r3, #0
   84fa4:	e04d      	b.n	85042 <udc_req_std_dev_set_configuration+0xda>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84fa6:	4b29      	ldr	r3, [pc, #164]	; (8504c <udc_req_std_dev_set_configuration+0xe4>)
   84fa8:	885b      	ldrh	r3, [r3, #2]
   84faa:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
   84fac:	4a2a      	ldr	r2, [pc, #168]	; (85058 <udc_req_std_dev_set_configuration+0xf0>)
   84fae:	6812      	ldr	r2, [r2, #0]
   84fb0:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84fb2:	4293      	cmp	r3, r2
   84fb4:	dd01      	ble.n	84fba <udc_req_std_dev_set_configuration+0x52>
			return false;
   84fb6:	2300      	movs	r3, #0
   84fb8:	e043      	b.n	85042 <udc_req_std_dev_set_configuration+0xda>
		}
	}

	// Reset current configuration
	udc_reset();
   84fba:	4b28      	ldr	r3, [pc, #160]	; (8505c <udc_req_std_dev_set_configuration+0xf4>)
   84fbc:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   84fbe:	4b23      	ldr	r3, [pc, #140]	; (8504c <udc_req_std_dev_set_configuration+0xe4>)
   84fc0:	885b      	ldrh	r3, [r3, #2]
   84fc2:	b2da      	uxtb	r2, r3
   84fc4:	4b26      	ldr	r3, [pc, #152]	; (85060 <udc_req_std_dev_set_configuration+0xf8>)
   84fc6:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
   84fc8:	4b25      	ldr	r3, [pc, #148]	; (85060 <udc_req_std_dev_set_configuration+0xf8>)
   84fca:	781b      	ldrb	r3, [r3, #0]
   84fcc:	2b00      	cmp	r3, #0
   84fce:	d101      	bne.n	84fd4 <udc_req_std_dev_set_configuration+0x6c>
		return true; // Default empty configuration requested
   84fd0:	2301      	movs	r3, #1
   84fd2:	e036      	b.n	85042 <udc_req_std_dev_set_configuration+0xda>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   84fd4:	4b1f      	ldr	r3, [pc, #124]	; (85054 <udc_req_std_dev_set_configuration+0xec>)
   84fd6:	4798      	blx	r3
   84fd8:	4603      	mov	r3, r0
   84fda:	2b00      	cmp	r3, #0
   84fdc:	d00b      	beq.n	84ff6 <udc_req_std_dev_set_configuration+0x8e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   84fde:	4b1e      	ldr	r3, [pc, #120]	; (85058 <udc_req_std_dev_set_configuration+0xf0>)
   84fe0:	691a      	ldr	r2, [r3, #16]
   84fe2:	4b1f      	ldr	r3, [pc, #124]	; (85060 <udc_req_std_dev_set_configuration+0xf8>)
   84fe4:	781b      	ldrb	r3, [r3, #0]
   84fe6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   84fea:	3b01      	subs	r3, #1
   84fec:	00db      	lsls	r3, r3, #3
   84fee:	4413      	add	r3, r2
   84ff0:	4a1c      	ldr	r2, [pc, #112]	; (85064 <udc_req_std_dev_set_configuration+0xfc>)
   84ff2:	6013      	str	r3, [r2, #0]
   84ff4:	e00a      	b.n	8500c <udc_req_std_dev_set_configuration+0xa4>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   84ff6:	4b18      	ldr	r3, [pc, #96]	; (85058 <udc_req_std_dev_set_configuration+0xf0>)
   84ff8:	685a      	ldr	r2, [r3, #4]
   84ffa:	4b19      	ldr	r3, [pc, #100]	; (85060 <udc_req_std_dev_set_configuration+0xf8>)
   84ffc:	781b      	ldrb	r3, [r3, #0]
   84ffe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   85002:	3b01      	subs	r3, #1
   85004:	00db      	lsls	r3, r3, #3
   85006:	4413      	add	r3, r2
   85008:	4a16      	ldr	r2, [pc, #88]	; (85064 <udc_req_std_dev_set_configuration+0xfc>)
   8500a:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8500c:	2300      	movs	r3, #0
   8500e:	71fb      	strb	r3, [r7, #7]
   85010:	e00f      	b.n	85032 <udc_req_std_dev_set_configuration+0xca>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   85012:	79fb      	ldrb	r3, [r7, #7]
   85014:	2100      	movs	r1, #0
   85016:	4618      	mov	r0, r3
   85018:	4b13      	ldr	r3, [pc, #76]	; (85068 <udc_req_std_dev_set_configuration+0x100>)
   8501a:	4798      	blx	r3
   8501c:	4603      	mov	r3, r0
   8501e:	f083 0301 	eor.w	r3, r3, #1
   85022:	b2db      	uxtb	r3, r3
   85024:	2b00      	cmp	r3, #0
   85026:	d001      	beq.n	8502c <udc_req_std_dev_set_configuration+0xc4>
			return false;
   85028:	2300      	movs	r3, #0
   8502a:	e00a      	b.n	85042 <udc_req_std_dev_set_configuration+0xda>
			iface_num++) {
   8502c:	79fb      	ldrb	r3, [r7, #7]
   8502e:	3301      	adds	r3, #1
   85030:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85032:	4b0c      	ldr	r3, [pc, #48]	; (85064 <udc_req_std_dev_set_configuration+0xfc>)
   85034:	681b      	ldr	r3, [r3, #0]
   85036:	681b      	ldr	r3, [r3, #0]
   85038:	791b      	ldrb	r3, [r3, #4]
   8503a:	79fa      	ldrb	r2, [r7, #7]
   8503c:	429a      	cmp	r2, r3
   8503e:	d3e8      	bcc.n	85012 <udc_req_std_dev_set_configuration+0xaa>
		}
	}
	return true;
   85040:	2301      	movs	r3, #1
}
   85042:	4618      	mov	r0, r3
   85044:	3708      	adds	r7, #8
   85046:	46bd      	mov	sp, r7
   85048:	bd80      	pop	{r7, pc}
   8504a:	bf00      	nop
   8504c:	2000130c 	.word	0x2000130c
   85050:	00082061 	.word	0x00082061
   85054:	00081ff9 	.word	0x00081ff9
   85058:	20000390 	.word	0x20000390
   8505c:	0008496d 	.word	0x0008496d
   85060:	200012b8 	.word	0x200012b8
   85064:	200012bc 	.word	0x200012bc
   85068:	000848c5 	.word	0x000848c5

0008506c <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
   8506c:	b580      	push	{r7, lr}
   8506e:	b082      	sub	sp, #8
   85070:	af00      	add	r7, sp, #0
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   85072:	4b1e      	ldr	r3, [pc, #120]	; (850ec <udc_req_std_iface_get_setting+0x80>)
   85074:	88db      	ldrh	r3, [r3, #6]
   85076:	2b01      	cmp	r3, #1
   85078:	d001      	beq.n	8507e <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
   8507a:	2300      	movs	r3, #0
   8507c:	e032      	b.n	850e4 <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
   8507e:	4b1c      	ldr	r3, [pc, #112]	; (850f0 <udc_req_std_iface_get_setting+0x84>)
   85080:	781b      	ldrb	r3, [r3, #0]
   85082:	2b00      	cmp	r3, #0
   85084:	d101      	bne.n	8508a <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
   85086:	2300      	movs	r3, #0
   85088:	e02c      	b.n	850e4 <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8508a:	4b18      	ldr	r3, [pc, #96]	; (850ec <udc_req_std_iface_get_setting+0x80>)
   8508c:	889b      	ldrh	r3, [r3, #4]
   8508e:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   85090:	4b18      	ldr	r3, [pc, #96]	; (850f4 <udc_req_std_iface_get_setting+0x88>)
   85092:	681b      	ldr	r3, [r3, #0]
   85094:	681b      	ldr	r3, [r3, #0]
   85096:	791b      	ldrb	r3, [r3, #4]
   85098:	79fa      	ldrb	r2, [r7, #7]
   8509a:	429a      	cmp	r2, r3
   8509c:	d301      	bcc.n	850a2 <udc_req_std_iface_get_setting+0x36>
		return false;
   8509e:	2300      	movs	r3, #0
   850a0:	e020      	b.n	850e4 <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   850a2:	79fb      	ldrb	r3, [r7, #7]
   850a4:	2100      	movs	r1, #0
   850a6:	4618      	mov	r0, r3
   850a8:	4b13      	ldr	r3, [pc, #76]	; (850f8 <udc_req_std_iface_get_setting+0x8c>)
   850aa:	4798      	blx	r3
   850ac:	4603      	mov	r3, r0
   850ae:	f083 0301 	eor.w	r3, r3, #1
   850b2:	b2db      	uxtb	r3, r3
   850b4:	2b00      	cmp	r3, #0
   850b6:	d001      	beq.n	850bc <udc_req_std_iface_get_setting+0x50>
		return false;
   850b8:	2300      	movs	r3, #0
   850ba:	e013      	b.n	850e4 <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   850bc:	4b0d      	ldr	r3, [pc, #52]	; (850f4 <udc_req_std_iface_get_setting+0x88>)
   850be:	681b      	ldr	r3, [r3, #0]
   850c0:	685a      	ldr	r2, [r3, #4]
   850c2:	79fb      	ldrb	r3, [r7, #7]
   850c4:	009b      	lsls	r3, r3, #2
   850c6:	4413      	add	r3, r2
   850c8:	681b      	ldr	r3, [r3, #0]
   850ca:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
   850cc:	683b      	ldr	r3, [r7, #0]
   850ce:	68db      	ldr	r3, [r3, #12]
   850d0:	4798      	blx	r3
   850d2:	4603      	mov	r3, r0
   850d4:	461a      	mov	r2, r3
   850d6:	4b09      	ldr	r3, [pc, #36]	; (850fc <udc_req_std_iface_get_setting+0x90>)
   850d8:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   850da:	2101      	movs	r1, #1
   850dc:	4807      	ldr	r0, [pc, #28]	; (850fc <udc_req_std_iface_get_setting+0x90>)
   850de:	4b08      	ldr	r3, [pc, #32]	; (85100 <udc_req_std_iface_get_setting+0x94>)
   850e0:	4798      	blx	r3
	return true;
   850e2:	2301      	movs	r3, #1
}
   850e4:	4618      	mov	r0, r3
   850e6:	3708      	adds	r7, #8
   850e8:	46bd      	mov	sp, r7
   850ea:	bd80      	pop	{r7, pc}
   850ec:	2000130c 	.word	0x2000130c
   850f0:	200012b8 	.word	0x200012b8
   850f4:	200012bc 	.word	0x200012bc
   850f8:	00084789 	.word	0x00084789
   850fc:	200012c6 	.word	0x200012c6
   85100:	0008207d 	.word	0x0008207d

00085104 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
   85104:	b580      	push	{r7, lr}
   85106:	b082      	sub	sp, #8
   85108:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   8510a:	4b14      	ldr	r3, [pc, #80]	; (8515c <udc_req_std_iface_set_setting+0x58>)
   8510c:	88db      	ldrh	r3, [r3, #6]
   8510e:	2b00      	cmp	r3, #0
   85110:	d001      	beq.n	85116 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
   85112:	2300      	movs	r3, #0
   85114:	e01e      	b.n	85154 <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
   85116:	4b12      	ldr	r3, [pc, #72]	; (85160 <udc_req_std_iface_set_setting+0x5c>)
   85118:	781b      	ldrb	r3, [r3, #0]
   8511a:	2b00      	cmp	r3, #0
   8511c:	d101      	bne.n	85122 <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
   8511e:	2300      	movs	r3, #0
   85120:	e018      	b.n	85154 <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   85122:	4b0e      	ldr	r3, [pc, #56]	; (8515c <udc_req_std_iface_set_setting+0x58>)
   85124:	889b      	ldrh	r3, [r3, #4]
   85126:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   85128:	4b0c      	ldr	r3, [pc, #48]	; (8515c <udc_req_std_iface_set_setting+0x58>)
   8512a:	885b      	ldrh	r3, [r3, #2]
   8512c:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   8512e:	79fb      	ldrb	r3, [r7, #7]
   85130:	4618      	mov	r0, r3
   85132:	4b0c      	ldr	r3, [pc, #48]	; (85164 <udc_req_std_iface_set_setting+0x60>)
   85134:	4798      	blx	r3
   85136:	4603      	mov	r3, r0
   85138:	f083 0301 	eor.w	r3, r3, #1
   8513c:	b2db      	uxtb	r3, r3
   8513e:	2b00      	cmp	r3, #0
   85140:	d001      	beq.n	85146 <udc_req_std_iface_set_setting+0x42>
		return false;
   85142:	2300      	movs	r3, #0
   85144:	e006      	b.n	85154 <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   85146:	79ba      	ldrb	r2, [r7, #6]
   85148:	79fb      	ldrb	r3, [r7, #7]
   8514a:	4611      	mov	r1, r2
   8514c:	4618      	mov	r0, r3
   8514e:	4b06      	ldr	r3, [pc, #24]	; (85168 <udc_req_std_iface_set_setting+0x64>)
   85150:	4798      	blx	r3
   85152:	4603      	mov	r3, r0
}
   85154:	4618      	mov	r0, r3
   85156:	3708      	adds	r7, #8
   85158:	46bd      	mov	sp, r7
   8515a:	bd80      	pop	{r7, pc}
   8515c:	2000130c 	.word	0x2000130c
   85160:	200012b8 	.word	0x200012b8
   85164:	00084825 	.word	0x00084825
   85168:	000848c5 	.word	0x000848c5

0008516c <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
   8516c:	b580      	push	{r7, lr}
   8516e:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   85170:	4b54      	ldr	r3, [pc, #336]	; (852c4 <udc_reqstd+0x158>)
   85172:	781b      	ldrb	r3, [r3, #0]
   85174:	b25b      	sxtb	r3, r3
   85176:	2b00      	cmp	r3, #0
   85178:	da41      	bge.n	851fe <udc_reqstd+0x92>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
   8517a:	4b52      	ldr	r3, [pc, #328]	; (852c4 <udc_reqstd+0x158>)
   8517c:	88db      	ldrh	r3, [r3, #6]
   8517e:	2b00      	cmp	r3, #0
   85180:	d101      	bne.n	85186 <udc_reqstd+0x1a>
			return false; // Error for USB host
   85182:	2300      	movs	r3, #0
   85184:	e09b      	b.n	852be <udc_reqstd+0x152>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   85186:	4b4f      	ldr	r3, [pc, #316]	; (852c4 <udc_reqstd+0x158>)
   85188:	781b      	ldrb	r3, [r3, #0]
   8518a:	f003 031f 	and.w	r3, r3, #31
   8518e:	2b00      	cmp	r3, #0
   85190:	d113      	bne.n	851ba <udc_reqstd+0x4e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   85192:	4b4c      	ldr	r3, [pc, #304]	; (852c4 <udc_reqstd+0x158>)
   85194:	785b      	ldrb	r3, [r3, #1]
   85196:	2b06      	cmp	r3, #6
   85198:	d007      	beq.n	851aa <udc_reqstd+0x3e>
   8519a:	2b08      	cmp	r3, #8
   8519c:	d009      	beq.n	851b2 <udc_reqstd+0x46>
   8519e:	2b00      	cmp	r3, #0
   851a0:	d10d      	bne.n	851be <udc_reqstd+0x52>
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
   851a2:	4b49      	ldr	r3, [pc, #292]	; (852c8 <udc_reqstd+0x15c>)
   851a4:	4798      	blx	r3
   851a6:	4603      	mov	r3, r0
   851a8:	e089      	b.n	852be <udc_reqstd+0x152>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
   851aa:	4b48      	ldr	r3, [pc, #288]	; (852cc <udc_reqstd+0x160>)
   851ac:	4798      	blx	r3
   851ae:	4603      	mov	r3, r0
   851b0:	e085      	b.n	852be <udc_reqstd+0x152>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
   851b2:	4b47      	ldr	r3, [pc, #284]	; (852d0 <udc_reqstd+0x164>)
   851b4:	4798      	blx	r3
   851b6:	4603      	mov	r3, r0
   851b8:	e081      	b.n	852be <udc_reqstd+0x152>
			default:
				break;
			}
		}
   851ba:	bf00      	nop
   851bc:	e000      	b.n	851c0 <udc_reqstd+0x54>
				break;
   851be:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   851c0:	4b40      	ldr	r3, [pc, #256]	; (852c4 <udc_reqstd+0x158>)
   851c2:	781b      	ldrb	r3, [r3, #0]
   851c4:	f003 031f 	and.w	r3, r3, #31
   851c8:	2b01      	cmp	r3, #1
   851ca:	d107      	bne.n	851dc <udc_reqstd+0x70>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   851cc:	4b3d      	ldr	r3, [pc, #244]	; (852c4 <udc_reqstd+0x158>)
   851ce:	785b      	ldrb	r3, [r3, #1]
   851d0:	2b0a      	cmp	r3, #10
   851d2:	d105      	bne.n	851e0 <udc_reqstd+0x74>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
   851d4:	4b3f      	ldr	r3, [pc, #252]	; (852d4 <udc_reqstd+0x168>)
   851d6:	4798      	blx	r3
   851d8:	4603      	mov	r3, r0
   851da:	e070      	b.n	852be <udc_reqstd+0x152>
			default:
				break;
			}
		}
   851dc:	bf00      	nop
   851de:	e000      	b.n	851e2 <udc_reqstd+0x76>
				break;
   851e0:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   851e2:	4b38      	ldr	r3, [pc, #224]	; (852c4 <udc_reqstd+0x158>)
   851e4:	781b      	ldrb	r3, [r3, #0]
   851e6:	f003 031f 	and.w	r3, r3, #31
   851ea:	2b02      	cmp	r3, #2
   851ec:	d161      	bne.n	852b2 <udc_reqstd+0x146>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   851ee:	4b35      	ldr	r3, [pc, #212]	; (852c4 <udc_reqstd+0x158>)
   851f0:	785b      	ldrb	r3, [r3, #1]
   851f2:	2b00      	cmp	r3, #0
   851f4:	d15f      	bne.n	852b6 <udc_reqstd+0x14a>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
   851f6:	4b38      	ldr	r3, [pc, #224]	; (852d8 <udc_reqstd+0x16c>)
   851f8:	4798      	blx	r3
   851fa:	4603      	mov	r3, r0
   851fc:	e05f      	b.n	852be <udc_reqstd+0x152>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   851fe:	4b31      	ldr	r3, [pc, #196]	; (852c4 <udc_reqstd+0x158>)
   85200:	781b      	ldrb	r3, [r3, #0]
   85202:	f003 031f 	and.w	r3, r3, #31
   85206:	2b00      	cmp	r3, #0
   85208:	d12a      	bne.n	85260 <udc_reqstd+0xf4>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   8520a:	4b2e      	ldr	r3, [pc, #184]	; (852c4 <udc_reqstd+0x158>)
   8520c:	785b      	ldrb	r3, [r3, #1]
   8520e:	3b01      	subs	r3, #1
   85210:	2b08      	cmp	r3, #8
   85212:	d827      	bhi.n	85264 <udc_reqstd+0xf8>
   85214:	a201      	add	r2, pc, #4	; (adr r2, 8521c <udc_reqstd+0xb0>)
   85216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8521a:	bf00      	nop
   8521c:	00085249 	.word	0x00085249
   85220:	00085265 	.word	0x00085265
   85224:	00085251 	.word	0x00085251
   85228:	00085265 	.word	0x00085265
   8522c:	00085241 	.word	0x00085241
   85230:	00085265 	.word	0x00085265
   85234:	00085265 	.word	0x00085265
   85238:	00085265 	.word	0x00085265
   8523c:	00085259 	.word	0x00085259
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
   85240:	4b26      	ldr	r3, [pc, #152]	; (852dc <udc_reqstd+0x170>)
   85242:	4798      	blx	r3
   85244:	4603      	mov	r3, r0
   85246:	e03a      	b.n	852be <udc_reqstd+0x152>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
   85248:	4b25      	ldr	r3, [pc, #148]	; (852e0 <udc_reqstd+0x174>)
   8524a:	4798      	blx	r3
   8524c:	4603      	mov	r3, r0
   8524e:	e036      	b.n	852be <udc_reqstd+0x152>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   85250:	4b24      	ldr	r3, [pc, #144]	; (852e4 <udc_reqstd+0x178>)
   85252:	4798      	blx	r3
   85254:	4603      	mov	r3, r0
   85256:	e032      	b.n	852be <udc_reqstd+0x152>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
   85258:	4b23      	ldr	r3, [pc, #140]	; (852e8 <udc_reqstd+0x17c>)
   8525a:	4798      	blx	r3
   8525c:	4603      	mov	r3, r0
   8525e:	e02e      	b.n	852be <udc_reqstd+0x152>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
			}
		}
   85260:	bf00      	nop
   85262:	e000      	b.n	85266 <udc_reqstd+0xfa>
				break;
   85264:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   85266:	4b17      	ldr	r3, [pc, #92]	; (852c4 <udc_reqstd+0x158>)
   85268:	781b      	ldrb	r3, [r3, #0]
   8526a:	f003 031f 	and.w	r3, r3, #31
   8526e:	2b01      	cmp	r3, #1
   85270:	d107      	bne.n	85282 <udc_reqstd+0x116>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   85272:	4b14      	ldr	r3, [pc, #80]	; (852c4 <udc_reqstd+0x158>)
   85274:	785b      	ldrb	r3, [r3, #1]
   85276:	2b0b      	cmp	r3, #11
   85278:	d105      	bne.n	85286 <udc_reqstd+0x11a>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
   8527a:	4b1c      	ldr	r3, [pc, #112]	; (852ec <udc_reqstd+0x180>)
   8527c:	4798      	blx	r3
   8527e:	4603      	mov	r3, r0
   85280:	e01d      	b.n	852be <udc_reqstd+0x152>
			default:
				break;
			}
		}
   85282:	bf00      	nop
   85284:	e000      	b.n	85288 <udc_reqstd+0x11c>
				break;
   85286:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   85288:	4b0e      	ldr	r3, [pc, #56]	; (852c4 <udc_reqstd+0x158>)
   8528a:	781b      	ldrb	r3, [r3, #0]
   8528c:	f003 031f 	and.w	r3, r3, #31
   85290:	2b02      	cmp	r3, #2
   85292:	d112      	bne.n	852ba <udc_reqstd+0x14e>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   85294:	4b0b      	ldr	r3, [pc, #44]	; (852c4 <udc_reqstd+0x158>)
   85296:	785b      	ldrb	r3, [r3, #1]
   85298:	2b01      	cmp	r3, #1
   8529a:	d002      	beq.n	852a2 <udc_reqstd+0x136>
   8529c:	2b03      	cmp	r3, #3
   8529e:	d004      	beq.n	852aa <udc_reqstd+0x13e>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
   852a0:	e00c      	b.n	852bc <udc_reqstd+0x150>
				return udc_req_std_ep_clear_feature();
   852a2:	4b13      	ldr	r3, [pc, #76]	; (852f0 <udc_reqstd+0x184>)
   852a4:	4798      	blx	r3
   852a6:	4603      	mov	r3, r0
   852a8:	e009      	b.n	852be <udc_reqstd+0x152>
				return udc_req_std_ep_set_feature();
   852aa:	4b12      	ldr	r3, [pc, #72]	; (852f4 <udc_reqstd+0x188>)
   852ac:	4798      	blx	r3
   852ae:	4603      	mov	r3, r0
   852b0:	e005      	b.n	852be <udc_reqstd+0x152>
		}
   852b2:	bf00      	nop
   852b4:	e002      	b.n	852bc <udc_reqstd+0x150>
				break;
   852b6:	bf00      	nop
   852b8:	e000      	b.n	852bc <udc_reqstd+0x150>
			}
		}
   852ba:	bf00      	nop
#endif
	}
	return false;
   852bc:	2300      	movs	r3, #0
}
   852be:	4618      	mov	r0, r3
   852c0:	bd80      	pop	{r7, pc}
   852c2:	bf00      	nop
   852c4:	2000130c 	.word	0x2000130c
   852c8:	00084a21 	.word	0x00084a21
   852cc:	00084d21 	.word	0x00084d21
   852d0:	00084f3d 	.word	0x00084f3d
   852d4:	0008506d 	.word	0x0008506d
   852d8:	00084a4d 	.word	0x00084a4d
   852dc:	00084c2d 	.word	0x00084c2d
   852e0:	00084a91 	.word	0x00084a91
   852e4:	00084b05 	.word	0x00084b05
   852e8:	00084f69 	.word	0x00084f69
   852ec:	00085105 	.word	0x00085105
   852f0:	00084acd 	.word	0x00084acd
   852f4:	00084bc1 	.word	0x00084bc1

000852f8 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   852f8:	b580      	push	{r7, lr}
   852fa:	b082      	sub	sp, #8
   852fc:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   852fe:	4b20      	ldr	r3, [pc, #128]	; (85380 <udc_req_iface+0x88>)
   85300:	781b      	ldrb	r3, [r3, #0]
   85302:	2b00      	cmp	r3, #0
   85304:	d101      	bne.n	8530a <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
   85306:	2300      	movs	r3, #0
   85308:	e036      	b.n	85378 <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8530a:	4b1e      	ldr	r3, [pc, #120]	; (85384 <udc_req_iface+0x8c>)
   8530c:	889b      	ldrh	r3, [r3, #4]
   8530e:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   85310:	4b1d      	ldr	r3, [pc, #116]	; (85388 <udc_req_iface+0x90>)
   85312:	681b      	ldr	r3, [r3, #0]
   85314:	681b      	ldr	r3, [r3, #0]
   85316:	791b      	ldrb	r3, [r3, #4]
   85318:	79fa      	ldrb	r2, [r7, #7]
   8531a:	429a      	cmp	r2, r3
   8531c:	d301      	bcc.n	85322 <udc_req_iface+0x2a>
		return false;
   8531e:	2300      	movs	r3, #0
   85320:	e02a      	b.n	85378 <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   85322:	79fb      	ldrb	r3, [r7, #7]
   85324:	2100      	movs	r1, #0
   85326:	4618      	mov	r0, r3
   85328:	4b18      	ldr	r3, [pc, #96]	; (8538c <udc_req_iface+0x94>)
   8532a:	4798      	blx	r3
   8532c:	4603      	mov	r3, r0
   8532e:	f083 0301 	eor.w	r3, r3, #1
   85332:	b2db      	uxtb	r3, r3
   85334:	2b00      	cmp	r3, #0
   85336:	d001      	beq.n	8533c <udc_req_iface+0x44>
		return false;
   85338:	2300      	movs	r3, #0
   8533a:	e01d      	b.n	85378 <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8533c:	4b12      	ldr	r3, [pc, #72]	; (85388 <udc_req_iface+0x90>)
   8533e:	681b      	ldr	r3, [r3, #0]
   85340:	685a      	ldr	r2, [r3, #4]
   85342:	79fb      	ldrb	r3, [r7, #7]
   85344:	009b      	lsls	r3, r3, #2
   85346:	4413      	add	r3, r2
   85348:	681b      	ldr	r3, [r3, #0]
   8534a:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8534c:	683b      	ldr	r3, [r7, #0]
   8534e:	68db      	ldr	r3, [r3, #12]
   85350:	4798      	blx	r3
   85352:	4603      	mov	r3, r0
   85354:	461a      	mov	r2, r3
   85356:	79fb      	ldrb	r3, [r7, #7]
   85358:	4611      	mov	r1, r2
   8535a:	4618      	mov	r0, r3
   8535c:	4b0b      	ldr	r3, [pc, #44]	; (8538c <udc_req_iface+0x94>)
   8535e:	4798      	blx	r3
   85360:	4603      	mov	r3, r0
   85362:	f083 0301 	eor.w	r3, r3, #1
   85366:	b2db      	uxtb	r3, r3
   85368:	2b00      	cmp	r3, #0
   8536a:	d001      	beq.n	85370 <udc_req_iface+0x78>
		return false;
   8536c:	2300      	movs	r3, #0
   8536e:	e003      	b.n	85378 <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   85370:	683b      	ldr	r3, [r7, #0]
   85372:	689b      	ldr	r3, [r3, #8]
   85374:	4798      	blx	r3
   85376:	4603      	mov	r3, r0
}
   85378:	4618      	mov	r0, r3
   8537a:	3708      	adds	r7, #8
   8537c:	46bd      	mov	sp, r7
   8537e:	bd80      	pop	{r7, pc}
   85380:	200012b8 	.word	0x200012b8
   85384:	2000130c 	.word	0x2000130c
   85388:	200012bc 	.word	0x200012bc
   8538c:	00084789 	.word	0x00084789

00085390 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   85390:	b580      	push	{r7, lr}
   85392:	b082      	sub	sp, #8
   85394:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   85396:	4b1e      	ldr	r3, [pc, #120]	; (85410 <udc_req_ep+0x80>)
   85398:	781b      	ldrb	r3, [r3, #0]
   8539a:	2b00      	cmp	r3, #0
   8539c:	d101      	bne.n	853a2 <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
   8539e:	2300      	movs	r3, #0
   853a0:	e032      	b.n	85408 <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   853a2:	4b1c      	ldr	r3, [pc, #112]	; (85414 <udc_req_ep+0x84>)
   853a4:	889b      	ldrh	r3, [r3, #4]
   853a6:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   853a8:	2300      	movs	r3, #0
   853aa:	71fb      	strb	r3, [r7, #7]
   853ac:	e024      	b.n	853f8 <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   853ae:	4b1a      	ldr	r3, [pc, #104]	; (85418 <udc_req_ep+0x88>)
   853b0:	681b      	ldr	r3, [r3, #0]
   853b2:	685a      	ldr	r2, [r3, #4]
   853b4:	79fb      	ldrb	r3, [r7, #7]
   853b6:	009b      	lsls	r3, r3, #2
   853b8:	4413      	add	r3, r2
   853ba:	681b      	ldr	r3, [r3, #0]
   853bc:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   853be:	683b      	ldr	r3, [r7, #0]
   853c0:	68db      	ldr	r3, [r3, #12]
   853c2:	4798      	blx	r3
   853c4:	4603      	mov	r3, r0
   853c6:	461a      	mov	r2, r3
   853c8:	79fb      	ldrb	r3, [r7, #7]
   853ca:	4611      	mov	r1, r2
   853cc:	4618      	mov	r0, r3
   853ce:	4b13      	ldr	r3, [pc, #76]	; (8541c <udc_req_ep+0x8c>)
   853d0:	4798      	blx	r3
   853d2:	4603      	mov	r3, r0
   853d4:	f083 0301 	eor.w	r3, r3, #1
   853d8:	b2db      	uxtb	r3, r3
   853da:	2b00      	cmp	r3, #0
   853dc:	d001      	beq.n	853e2 <udc_req_ep+0x52>
			return false;
   853de:	2300      	movs	r3, #0
   853e0:	e012      	b.n	85408 <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   853e2:	683b      	ldr	r3, [r7, #0]
   853e4:	689b      	ldr	r3, [r3, #8]
   853e6:	4798      	blx	r3
   853e8:	4603      	mov	r3, r0
   853ea:	2b00      	cmp	r3, #0
   853ec:	d001      	beq.n	853f2 <udc_req_ep+0x62>
			return true;
   853ee:	2301      	movs	r3, #1
   853f0:	e00a      	b.n	85408 <udc_req_ep+0x78>
			iface_num++) {
   853f2:	79fb      	ldrb	r3, [r7, #7]
   853f4:	3301      	adds	r3, #1
   853f6:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   853f8:	4b07      	ldr	r3, [pc, #28]	; (85418 <udc_req_ep+0x88>)
   853fa:	681b      	ldr	r3, [r3, #0]
   853fc:	681b      	ldr	r3, [r3, #0]
   853fe:	791b      	ldrb	r3, [r3, #4]
   85400:	79fa      	ldrb	r2, [r7, #7]
   85402:	429a      	cmp	r2, r3
   85404:	d3d3      	bcc.n	853ae <udc_req_ep+0x1e>
		}
	}
	return false;
   85406:	2300      	movs	r3, #0
}
   85408:	4618      	mov	r0, r3
   8540a:	3708      	adds	r7, #8
   8540c:	46bd      	mov	sp, r7
   8540e:	bd80      	pop	{r7, pc}
   85410:	200012b8 	.word	0x200012b8
   85414:	2000130c 	.word	0x2000130c
   85418:	200012bc 	.word	0x200012bc
   8541c:	00084789 	.word	0x00084789

00085420 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   85420:	b580      	push	{r7, lr}
   85422:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   85424:	4b1e      	ldr	r3, [pc, #120]	; (854a0 <udc_process_setup+0x80>)
   85426:	2200      	movs	r2, #0
   85428:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   8542a:	4b1d      	ldr	r3, [pc, #116]	; (854a0 <udc_process_setup+0x80>)
   8542c:	2200      	movs	r2, #0
   8542e:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   85430:	4b1b      	ldr	r3, [pc, #108]	; (854a0 <udc_process_setup+0x80>)
   85432:	2200      	movs	r2, #0
   85434:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   85436:	4b1a      	ldr	r3, [pc, #104]	; (854a0 <udc_process_setup+0x80>)
   85438:	781b      	ldrb	r3, [r3, #0]
   8543a:	b25b      	sxtb	r3, r3
   8543c:	2b00      	cmp	r3, #0
   8543e:	da05      	bge.n	8544c <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
   85440:	4b17      	ldr	r3, [pc, #92]	; (854a0 <udc_process_setup+0x80>)
   85442:	88db      	ldrh	r3, [r3, #6]
   85444:	2b00      	cmp	r3, #0
   85446:	d101      	bne.n	8544c <udc_process_setup+0x2c>
			return false; // Error from USB host
   85448:	2300      	movs	r3, #0
   8544a:	e027      	b.n	8549c <udc_process_setup+0x7c>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   8544c:	4b14      	ldr	r3, [pc, #80]	; (854a0 <udc_process_setup+0x80>)
   8544e:	781b      	ldrb	r3, [r3, #0]
   85450:	f003 0360 	and.w	r3, r3, #96	; 0x60
   85454:	2b00      	cmp	r3, #0
   85456:	d106      	bne.n	85466 <udc_process_setup+0x46>
		if (udc_reqstd()) {
   85458:	4b12      	ldr	r3, [pc, #72]	; (854a4 <udc_process_setup+0x84>)
   8545a:	4798      	blx	r3
   8545c:	4603      	mov	r3, r0
   8545e:	2b00      	cmp	r3, #0
   85460:	d001      	beq.n	85466 <udc_process_setup+0x46>
			return true;
   85462:	2301      	movs	r3, #1
   85464:	e01a      	b.n	8549c <udc_process_setup+0x7c>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   85466:	4b0e      	ldr	r3, [pc, #56]	; (854a0 <udc_process_setup+0x80>)
   85468:	781b      	ldrb	r3, [r3, #0]
   8546a:	f003 031f 	and.w	r3, r3, #31
   8546e:	2b01      	cmp	r3, #1
   85470:	d106      	bne.n	85480 <udc_process_setup+0x60>
		if (udc_req_iface()) {
   85472:	4b0d      	ldr	r3, [pc, #52]	; (854a8 <udc_process_setup+0x88>)
   85474:	4798      	blx	r3
   85476:	4603      	mov	r3, r0
   85478:	2b00      	cmp	r3, #0
   8547a:	d001      	beq.n	85480 <udc_process_setup+0x60>
			return true;
   8547c:	2301      	movs	r3, #1
   8547e:	e00d      	b.n	8549c <udc_process_setup+0x7c>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   85480:	4b07      	ldr	r3, [pc, #28]	; (854a0 <udc_process_setup+0x80>)
   85482:	781b      	ldrb	r3, [r3, #0]
   85484:	f003 031f 	and.w	r3, r3, #31
   85488:	2b02      	cmp	r3, #2
   8548a:	d106      	bne.n	8549a <udc_process_setup+0x7a>
		if (udc_req_ep()) {
   8548c:	4b07      	ldr	r3, [pc, #28]	; (854ac <udc_process_setup+0x8c>)
   8548e:	4798      	blx	r3
   85490:	4603      	mov	r3, r0
   85492:	2b00      	cmp	r3, #0
   85494:	d001      	beq.n	8549a <udc_process_setup+0x7a>
			return true;
   85496:	2301      	movs	r3, #1
   85498:	e000      	b.n	8549c <udc_process_setup+0x7c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   8549a:	2300      	movs	r3, #0
#endif
}
   8549c:	4618      	mov	r0, r3
   8549e:	bd80      	pop	{r7, pc}
   854a0:	2000130c 	.word	0x2000130c
   854a4:	0008516d 	.word	0x0008516d
   854a8:	000852f9 	.word	0x000852f9
   854ac:	00085391 	.word	0x00085391

000854b0 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
   854b0:	b5b0      	push	{r4, r5, r7, lr}
   854b2:	b09c      	sub	sp, #112	; 0x70
   854b4:	af00      	add	r7, sp, #0
   854b6:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
   854b8:	687b      	ldr	r3, [r7, #4]
   854ba:	3b01      	subs	r3, #1
   854bc:	2b04      	cmp	r3, #4
   854be:	f200 81d9 	bhi.w	85874 <pmc_sleep+0x3c4>
   854c2:	a201      	add	r2, pc, #4	; (adr r2, 854c8 <pmc_sleep+0x18>)
   854c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   854c8:	000854dd 	.word	0x000854dd
   854cc:	000854dd 	.word	0x000854dd
   854d0:	0008550f 	.word	0x0008550f
   854d4:	0008550f 	.word	0x0008550f
   854d8:	00085859 	.word	0x00085859
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
		cpu_irq_enable();
		__WFI();
		break;
#else
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
   854dc:	4b80      	ldr	r3, [pc, #512]	; (856e0 <pmc_sleep+0x230>)
   854de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   854e0:	4a7f      	ldr	r2, [pc, #508]	; (856e0 <pmc_sleep+0x230>)
   854e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   854e6:	6713      	str	r3, [r2, #112]	; 0x70
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
   854e8:	4b7e      	ldr	r3, [pc, #504]	; (856e4 <pmc_sleep+0x234>)
   854ea:	691b      	ldr	r3, [r3, #16]
   854ec:	4a7d      	ldr	r2, [pc, #500]	; (856e4 <pmc_sleep+0x234>)
   854ee:	f023 0304 	bic.w	r3, r3, #4
   854f2:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   854f4:	4b7c      	ldr	r3, [pc, #496]	; (856e8 <pmc_sleep+0x238>)
   854f6:	2201      	movs	r2, #1
   854f8:	701a      	strb	r2, [r3, #0]
   854fa:	f3bf 8f5f 	dmb	sy
   854fe:	b662      	cpsie	i
		if (sleep_mode == SAM_PM_SMODE_SLEEP_WFI)
   85500:	687b      	ldr	r3, [r7, #4]
   85502:	2b02      	cmp	r3, #2
   85504:	d101      	bne.n	8550a <pmc_sleep+0x5a>
  __ASM volatile ("wfi");
   85506:	bf30      	wfi
			__WFI();
		else
			__WFE();
		break;
   85508:	e1b4      	b.n	85874 <pmc_sleep+0x3c4>
  __ASM volatile ("wfe");
   8550a:	bf20      	wfe
   8550c:	e1b2      	b.n	85874 <pmc_sleep+0x3c4>
  __ASM volatile ("cpsid i");
   8550e:	b672      	cpsid	i
  __ASM volatile ("dmb");
   85510:	f3bf 8f5f 	dmb	sy
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
#endif
		cpu_irq_disable();
   85514:	4b74      	ldr	r3, [pc, #464]	; (856e8 <pmc_sleep+0x238>)
   85516:	2200      	movs	r2, #0
   85518:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
   8551a:	4b74      	ldr	r3, [pc, #464]	; (856ec <pmc_sleep+0x23c>)
   8551c:	2201      	movs	r2, #1
   8551e:	701a      	strb	r2, [r3, #0]
		/* Backup the sub-system 1 status and stop sub-system 1 */
		uint32_t cpclk_backup = PMC->PMC_SCSR &
				(PMC_SCSR_CPCK | PMC_SCSR_CPBMCK);
		PMC->PMC_SCDR = cpclk_backup | PMC_SCDR_CPKEY_PASSWD;
#endif
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
   85520:	687b      	ldr	r3, [r7, #4]
   85522:	2b04      	cmp	r3, #4
   85524:	bf0c      	ite	eq
   85526:	2301      	moveq	r3, #1
   85528:	2300      	movne	r3, #0
   8552a:	b2da      	uxtb	r2, r3
   8552c:	f107 0320 	add.w	r3, r7, #32
   85530:	64fb      	str	r3, [r7, #76]	; 0x4c
   85532:	f107 031c 	add.w	r3, r7, #28
   85536:	64bb      	str	r3, [r7, #72]	; 0x48
   85538:	f107 0318 	add.w	r3, r7, #24
   8553c:	647b      	str	r3, [r7, #68]	; 0x44
   8553e:	f107 0314 	add.w	r3, r7, #20
   85542:	643b      	str	r3, [r7, #64]	; 0x40
   85544:	f107 0310 	add.w	r3, r7, #16
   85548:	63fb      	str	r3, [r7, #60]	; 0x3c
   8554a:	f107 030c 	add.w	r3, r7, #12
   8554e:	63bb      	str	r3, [r7, #56]	; 0x38
   85550:	4613      	mov	r3, r2
   85552:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t mor  = PMC->CKGR_MOR;
   85556:	4b62      	ldr	r3, [pc, #392]	; (856e0 <pmc_sleep+0x230>)
   85558:	6a1b      	ldr	r3, [r3, #32]
   8555a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t mckr = PMC->PMC_MCKR;
   8555c:	4b60      	ldr	r3, [pc, #384]	; (856e0 <pmc_sleep+0x230>)
   8555e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85560:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fmr  = EFC0->EEFC_FMR;
   85562:	4b63      	ldr	r3, [pc, #396]	; (856f0 <pmc_sleep+0x240>)
   85564:	681b      	ldr	r3, [r3, #0]
   85566:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fmr1 = EFC1->EEFC_FMR;
   85568:	4b62      	ldr	r3, [pc, #392]	; (856f4 <pmc_sleep+0x244>)
   8556a:	681b      	ldr	r3, [r3, #0]
   8556c:	627b      	str	r3, [r7, #36]	; 0x24
	if (p_osc_setting) {
   8556e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   85570:	2b00      	cmp	r3, #0
   85572:	d002      	beq.n	8557a <pmc_sleep+0xca>
		*p_osc_setting = mor;
   85574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   85576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   85578:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
   8557a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   8557c:	2b00      	cmp	r3, #0
   8557e:	d003      	beq.n	85588 <pmc_sleep+0xd8>
		*p_pll0_setting = PMC->CKGR_PLLAR;
   85580:	4b57      	ldr	r3, [pc, #348]	; (856e0 <pmc_sleep+0x230>)
   85582:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   85584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   85586:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
   85588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   8558a:	2b00      	cmp	r3, #0
   8558c:	d003      	beq.n	85596 <pmc_sleep+0xe6>
		*p_pll1_setting = PMC->CKGR_UCKR;
   8558e:	4b54      	ldr	r3, [pc, #336]	; (856e0 <pmc_sleep+0x230>)
   85590:	69da      	ldr	r2, [r3, #28]
   85592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   85594:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
   85596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85598:	2b00      	cmp	r3, #0
   8559a:	d002      	beq.n	855a2 <pmc_sleep+0xf2>
		*p_mck_setting  = mckr;
   8559c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8559e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   855a0:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
   855a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   855a4:	2b00      	cmp	r3, #0
   855a6:	d002      	beq.n	855ae <pmc_sleep+0xfe>
		*p_fmr_setting  = fmr;
   855a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   855aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   855ac:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting1) {
   855ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   855b0:	2b00      	cmp	r3, #0
   855b2:	d002      	beq.n	855ba <pmc_sleep+0x10a>
		*p_fmr_setting1 = fmr1;
   855b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   855b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   855b8:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
   855ba:	4a49      	ldr	r2, [pc, #292]	; (856e0 <pmc_sleep+0x230>)
   855bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   855be:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   855c2:	f043 0308 	orr.w	r3, r3, #8
   855c6:	6213      	str	r3, [r2, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
   855c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   855ca:	f003 0302 	and.w	r3, r3, #2
   855ce:	2b00      	cmp	r3, #0
   855d0:	d00e      	beq.n	855f0 <pmc_sleep+0x140>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
   855d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   855d4:	f023 0303 	bic.w	r3, r3, #3
   855d8:	f043 0301 	orr.w	r3, r3, #1
   855dc:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   855de:	4a40      	ldr	r2, [pc, #256]	; (856e0 <pmc_sleep+0x230>)
   855e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   855e2:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   855e4:	4b3e      	ldr	r3, [pc, #248]	; (856e0 <pmc_sleep+0x230>)
   855e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   855e8:	f003 0308 	and.w	r3, r3, #8
   855ec:	2b00      	cmp	r3, #0
   855ee:	d0f9      	beq.n	855e4 <pmc_sleep+0x134>
	if (mckr & PMC_MCKR_PRES_Msk) {
   855f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   855f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   855f6:	2b00      	cmp	r3, #0
   855f8:	d00c      	beq.n	85614 <pmc_sleep+0x164>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
   855fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   855fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   85600:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   85602:	4a37      	ldr	r2, [pc, #220]	; (856e0 <pmc_sleep+0x230>)
   85604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   85606:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   85608:	4b35      	ldr	r3, [pc, #212]	; (856e0 <pmc_sleep+0x230>)
   8560a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8560c:	f003 0308 	and.w	r3, r3, #8
   85610:	2b00      	cmp	r3, #0
   85612:	d0f9      	beq.n	85608 <pmc_sleep+0x158>
	pmc_disable_pllack();
   85614:	4b38      	ldr	r3, [pc, #224]	; (856f8 <pmc_sleep+0x248>)
   85616:	4798      	blx	r3
	pmc_disable_upll_clock();
   85618:	4b38      	ldr	r3, [pc, #224]	; (856fc <pmc_sleep+0x24c>)
   8561a:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8561c:	4b30      	ldr	r3, [pc, #192]	; (856e0 <pmc_sleep+0x230>)
   8561e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   85624:	2b00      	cmp	r3, #0
   85626:	d0f9      	beq.n	8561c <pmc_sleep+0x16c>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   85628:	4b2d      	ldr	r3, [pc, #180]	; (856e0 <pmc_sleep+0x230>)
   8562a:	6a1b      	ldr	r3, [r3, #32]
   8562c:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   85630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   85634:	4a2a      	ldr	r2, [pc, #168]	; (856e0 <pmc_sleep+0x230>)
   85636:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8563a:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   8563c:	4b28      	ldr	r3, [pc, #160]	; (856e0 <pmc_sleep+0x230>)
   8563e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   85644:	2b00      	cmp	r3, #0
   85646:	d0f9      	beq.n	8563c <pmc_sleep+0x18c>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
   85648:	4a29      	ldr	r2, [pc, #164]	; (856f0 <pmc_sleep+0x240>)
   8564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8564c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   85650:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
   85652:	4a28      	ldr	r2, [pc, #160]	; (856f4 <pmc_sleep+0x244>)
   85654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   85656:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   8565a:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
   8565c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   85660:	2b00      	cmp	r3, #0
   85662:	d009      	beq.n	85678 <pmc_sleep+0x1c8>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   85664:	4b1e      	ldr	r3, [pc, #120]	; (856e0 <pmc_sleep+0x230>)
   85666:	6a1b      	ldr	r3, [r3, #32]
   85668:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8566c:	f023 0301 	bic.w	r3, r3, #1
   85670:	4a1b      	ldr	r2, [pc, #108]	; (856e0 <pmc_sleep+0x230>)
   85672:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85676:	6213      	str	r3, [r2, #32]
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
   85678:	4b1b      	ldr	r3, [pc, #108]	; (856e8 <pmc_sleep+0x238>)
   8567a:	2201      	movs	r2, #1
   8567c:	701a      	strb	r2, [r3, #0]
   8567e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85682:	b662      	cpsie	i

		pmc_enable_waitmode();
   85684:	4b1e      	ldr	r3, [pc, #120]	; (85700 <pmc_sleep+0x250>)
   85686:	4798      	blx	r3
  __ASM volatile ("cpsid i");
   85688:	b672      	cpsid	i
   8568a:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
   8568e:	4b16      	ldr	r3, [pc, #88]	; (856e8 <pmc_sleep+0x238>)
   85690:	2200      	movs	r2, #0
   85692:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
   85694:	6a3d      	ldr	r5, [r7, #32]
   85696:	69fc      	ldr	r4, [r7, #28]
   85698:	69b8      	ldr	r0, [r7, #24]
   8569a:	6979      	ldr	r1, [r7, #20]
   8569c:	693a      	ldr	r2, [r7, #16]
   8569e:	68fb      	ldr	r3, [r7, #12]
   856a0:	66fd      	str	r5, [r7, #108]	; 0x6c
   856a2:	66bc      	str	r4, [r7, #104]	; 0x68
   856a4:	6678      	str	r0, [r7, #100]	; 0x64
   856a6:	6639      	str	r1, [r7, #96]	; 0x60
   856a8:	65fa      	str	r2, [r7, #92]	; 0x5c
   856aa:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t pll_sr = 0;
   856ac:	2300      	movs	r3, #0
   856ae:	657b      	str	r3, [r7, #84]	; 0x54
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
   856b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   856b2:	f003 0302 	and.w	r3, r3, #2
   856b6:	2b00      	cmp	r3, #0
   856b8:	d028      	beq.n	8570c <pmc_sleep+0x25c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   856ba:	4b09      	ldr	r3, [pc, #36]	; (856e0 <pmc_sleep+0x230>)
   856bc:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   856be:	4a11      	ldr	r2, [pc, #68]	; (85704 <pmc_sleep+0x254>)
   856c0:	401a      	ands	r2, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   856c2:	4907      	ldr	r1, [pc, #28]	; (856e0 <pmc_sleep+0x230>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   856c4:	4b10      	ldr	r3, [pc, #64]	; (85708 <pmc_sleep+0x258>)
   856c6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   856c8:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   856ca:	4b05      	ldr	r3, [pc, #20]	; (856e0 <pmc_sleep+0x230>)
   856cc:	6a1b      	ldr	r3, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
   856ce:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   856d2:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   856d6:	4a02      	ldr	r2, [pc, #8]	; (856e0 <pmc_sleep+0x230>)
				| CKGR_MOR_KEY_PASSWD;
   856d8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   856dc:	6213      	str	r3, [r2, #32]
   856de:	e050      	b.n	85782 <pmc_sleep+0x2d2>
   856e0:	400e0400 	.word	0x400e0400
   856e4:	e000ed00 	.word	0xe000ed00
   856e8:	2000031a 	.word	0x2000031a
   856ec:	200012c7 	.word	0x200012c7
   856f0:	400e0800 	.word	0x400e0800
   856f4:	400e0a00 	.word	0x400e0a00
   856f8:	00083e71 	.word	0x00083e71
   856fc:	00083ea1 	.word	0x00083ea1
   85700:	00083fbd 	.word	0x00083fbd
   85704:	fec8fffc 	.word	0xfec8fffc
   85708:	01370002 	.word	0x01370002
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
   8570c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   8570e:	f003 0301 	and.w	r3, r3, #1
   85712:	2b00      	cmp	r3, #0
   85714:	d035      	beq.n	85782 <pmc_sleep+0x2d2>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
   85716:	4b59      	ldr	r3, [pc, #356]	; (8587c <pmc_sleep+0x3cc>)
   85718:	6a1b      	ldr	r3, [r3, #32]
   8571a:	f003 0301 	and.w	r3, r3, #1
   8571e:	2b00      	cmp	r3, #0
   85720:	d111      	bne.n	85746 <pmc_sleep+0x296>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   85722:	4b56      	ldr	r3, [pc, #344]	; (8587c <pmc_sleep+0x3cc>)
   85724:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   85726:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8572a:	f023 0303 	bic.w	r3, r3, #3
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8572e:	4a53      	ldr	r2, [pc, #332]	; (8587c <pmc_sleep+0x3cc>)
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   85730:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85734:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   85738:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8573a:	4b50      	ldr	r3, [pc, #320]	; (8587c <pmc_sleep+0x3cc>)
   8573c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8573e:	f003 0301 	and.w	r3, r3, #1
   85742:	2b00      	cmp	r3, #0
   85744:	d0f9      	beq.n	8573a <pmc_sleep+0x28a>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
   85746:	4b4d      	ldr	r3, [pc, #308]	; (8587c <pmc_sleep+0x3cc>)
   85748:	6a1b      	ldr	r3, [r3, #32]
   8574a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8574e:	2b00      	cmp	r3, #0
   85750:	d10d      	bne.n	8576e <pmc_sleep+0x2be>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   85752:	4b4a      	ldr	r3, [pc, #296]	; (8587c <pmc_sleep+0x3cc>)
   85754:	6a1b      	ldr	r3, [r3, #32]
   85756:	4a49      	ldr	r2, [pc, #292]	; (8587c <pmc_sleep+0x3cc>)
   85758:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8575c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   85760:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   85762:	4b46      	ldr	r3, [pc, #280]	; (8587c <pmc_sleep+0x3cc>)
   85764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   8576a:	2b00      	cmp	r3, #0
   8576c:	d0f9      	beq.n	85762 <pmc_sleep+0x2b2>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   8576e:	4b43      	ldr	r3, [pc, #268]	; (8587c <pmc_sleep+0x3cc>)
   85770:	6a1b      	ldr	r3, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
   85772:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   85776:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   8577a:	4a40      	ldr	r2, [pc, #256]	; (8587c <pmc_sleep+0x3cc>)
					| CKGR_MOR_KEY_PASSWD;
   8577c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   85780:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
   85782:	6eba      	ldr	r2, [r7, #104]	; 0x68
   85784:	4b3e      	ldr	r3, [pc, #248]	; (85880 <pmc_sleep+0x3d0>)
   85786:	4013      	ands	r3, r2
   85788:	2b00      	cmp	r3, #0
   8578a:	d008      	beq.n	8579e <pmc_sleep+0x2ee>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
   8578c:	4a3b      	ldr	r2, [pc, #236]	; (8587c <pmc_sleep+0x3cc>)
   8578e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   85790:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   85794:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
   85796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   85798:	f043 0302 	orr.w	r3, r3, #2
   8579c:	657b      	str	r3, [r7, #84]	; 0x54
	if (pll1_setting & CKGR_UCKR_UPLLEN) {
   8579e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   857a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   857a4:	2b00      	cmp	r3, #0
   857a6:	d006      	beq.n	857b6 <pmc_sleep+0x306>
		PMC->CKGR_UCKR = pll1_setting;
   857a8:	4a34      	ldr	r2, [pc, #208]	; (8587c <pmc_sleep+0x3cc>)
   857aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   857ac:	61d3      	str	r3, [r2, #28]
		pll_sr |= PMC_SR_LOCKU;
   857ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   857b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   857b4:	657b      	str	r3, [r7, #84]	; 0x54
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
   857b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   857b8:	f003 0303 	and.w	r3, r3, #3
   857bc:	2b02      	cmp	r3, #2
   857be:	d002      	beq.n	857c6 <pmc_sleep+0x316>
   857c0:	2b03      	cmp	r3, #3
   857c2:	d007      	beq.n	857d4 <pmc_sleep+0x324>
   857c4:	e00c      	b.n	857e0 <pmc_sleep+0x330>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
   857c6:	4b2d      	ldr	r3, [pc, #180]	; (8587c <pmc_sleep+0x3cc>)
   857c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   857ca:	f003 0302 	and.w	r3, r3, #2
   857ce:	2b00      	cmp	r3, #0
   857d0:	d0f9      	beq.n	857c6 <pmc_sleep+0x316>
   857d2:	e005      	b.n	857e0 <pmc_sleep+0x330>
		while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   857d4:	4b29      	ldr	r3, [pc, #164]	; (8587c <pmc_sleep+0x3cc>)
   857d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   857d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
   857dc:	2b00      	cmp	r3, #0
   857de:	d0f9      	beq.n	857d4 <pmc_sleep+0x324>
	mckr = PMC->PMC_MCKR;
   857e0:	4b26      	ldr	r3, [pc, #152]	; (8587c <pmc_sleep+0x3cc>)
   857e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   857e4:	653b      	str	r3, [r7, #80]	; 0x50
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   857e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   857e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
   857ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   857ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   857f2:	4922      	ldr	r1, [pc, #136]	; (8587c <pmc_sleep+0x3cc>)
		| (mck_setting & PMC_MCKR_PRES_Msk);
   857f4:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   857f6:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   857f8:	4b20      	ldr	r3, [pc, #128]	; (8587c <pmc_sleep+0x3cc>)
   857fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   857fc:	f003 0308 	and.w	r3, r3, #8
   85800:	2b00      	cmp	r3, #0
   85802:	d0f9      	beq.n	857f8 <pmc_sleep+0x348>
	EFC0->EEFC_FMR = fmr_setting;
   85804:	4a1f      	ldr	r2, [pc, #124]	; (85884 <pmc_sleep+0x3d4>)
   85806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   85808:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr_setting1;
   8580a:	4a1f      	ldr	r2, [pc, #124]	; (85888 <pmc_sleep+0x3d8>)
   8580c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   8580e:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
   85810:	4a1a      	ldr	r2, [pc, #104]	; (8587c <pmc_sleep+0x3cc>)
   85812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   85814:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   85816:	4b19      	ldr	r3, [pc, #100]	; (8587c <pmc_sleep+0x3cc>)
   85818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8581a:	f003 0308 	and.w	r3, r3, #8
   8581e:	2b00      	cmp	r3, #0
   85820:	d0f9      	beq.n	85816 <pmc_sleep+0x366>
	while (!(PMC->PMC_SR & pll_sr));
   85822:	4b16      	ldr	r3, [pc, #88]	; (8587c <pmc_sleep+0x3cc>)
   85824:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   85826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   85828:	4013      	ands	r3, r2
   8582a:	2b00      	cmp	r3, #0
   8582c:	d0f9      	beq.n	85822 <pmc_sleep+0x372>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
   8582e:	4b17      	ldr	r3, [pc, #92]	; (8588c <pmc_sleep+0x3dc>)
   85830:	2200      	movs	r2, #0
   85832:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
   85834:	4b16      	ldr	r3, [pc, #88]	; (85890 <pmc_sleep+0x3e0>)
   85836:	681b      	ldr	r3, [r3, #0]
   85838:	2b00      	cmp	r3, #0
   8583a:	d005      	beq.n	85848 <pmc_sleep+0x398>
			callback_clocks_restored();
   8583c:	4b14      	ldr	r3, [pc, #80]	; (85890 <pmc_sleep+0x3e0>)
   8583e:	681b      	ldr	r3, [r3, #0]
   85840:	4798      	blx	r3
			callback_clocks_restored = NULL;
   85842:	4b13      	ldr	r3, [pc, #76]	; (85890 <pmc_sleep+0x3e0>)
   85844:	2200      	movs	r2, #0
   85846:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
   85848:	4b12      	ldr	r3, [pc, #72]	; (85894 <pmc_sleep+0x3e4>)
   8584a:	2201      	movs	r2, #1
   8584c:	701a      	strb	r2, [r3, #0]
   8584e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85852:	b662      	cpsie	i

		break;
   85854:	bf00      	nop
   85856:	e00d      	b.n	85874 <pmc_sleep+0x3c4>
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
   85858:	4b0f      	ldr	r3, [pc, #60]	; (85898 <pmc_sleep+0x3e8>)
   8585a:	691b      	ldr	r3, [r3, #16]
   8585c:	4a0e      	ldr	r2, [pc, #56]	; (85898 <pmc_sleep+0x3e8>)
   8585e:	f043 0304 	orr.w	r3, r3, #4
   85862:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
		cpu_irq_enable();
		__WFI() ;
#else
		cpu_irq_enable();
   85864:	4b0b      	ldr	r3, [pc, #44]	; (85894 <pmc_sleep+0x3e4>)
   85866:	2201      	movs	r2, #1
   85868:	701a      	strb	r2, [r3, #0]
   8586a:	f3bf 8f5f 	dmb	sy
   8586e:	b662      	cpsie	i
  __ASM volatile ("wfe");
   85870:	bf20      	wfe
		__WFE() ;
#endif
		break;
   85872:	bf00      	nop
#endif
	}
}
   85874:	bf00      	nop
   85876:	3770      	adds	r7, #112	; 0x70
   85878:	46bd      	mov	sp, r7
   8587a:	bdb0      	pop	{r4, r5, r7, pc}
   8587c:	400e0400 	.word	0x400e0400
   85880:	07ff0000 	.word	0x07ff0000
   85884:	400e0800 	.word	0x400e0800
   85888:	400e0a00 	.word	0x400e0a00
   8588c:	200012c7 	.word	0x200012c7
   85890:	200012c8 	.word	0x200012c8
   85894:	2000031a 	.word	0x2000031a
   85898:	e000ed00 	.word	0xe000ed00

0008589c <pmc_is_wakeup_clocks_restored>:

bool pmc_is_wakeup_clocks_restored(void)
{
   8589c:	b480      	push	{r7}
   8589e:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
   858a0:	4b08      	ldr	r3, [pc, #32]	; (858c4 <pmc_is_wakeup_clocks_restored+0x28>)
   858a2:	781b      	ldrb	r3, [r3, #0]
   858a4:	b2db      	uxtb	r3, r3
   858a6:	2b00      	cmp	r3, #0
   858a8:	bf14      	ite	ne
   858aa:	2301      	movne	r3, #1
   858ac:	2300      	moveq	r3, #0
   858ae:	b2db      	uxtb	r3, r3
   858b0:	f083 0301 	eor.w	r3, r3, #1
   858b4:	b2db      	uxtb	r3, r3
   858b6:	f003 0301 	and.w	r3, r3, #1
   858ba:	b2db      	uxtb	r3, r3
}
   858bc:	4618      	mov	r0, r3
   858be:	46bd      	mov	sp, r7
   858c0:	bc80      	pop	{r7}
   858c2:	4770      	bx	lr
   858c4:	200012c7 	.word	0x200012c7

000858c8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   858c8:	b480      	push	{r7}
   858ca:	b085      	sub	sp, #20
   858cc:	af00      	add	r7, sp, #0
   858ce:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   858d0:	4b10      	ldr	r3, [pc, #64]	; (85914 <_sbrk+0x4c>)
   858d2:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   858d4:	4b10      	ldr	r3, [pc, #64]	; (85918 <_sbrk+0x50>)
   858d6:	681b      	ldr	r3, [r3, #0]
   858d8:	2b00      	cmp	r3, #0
   858da:	d102      	bne.n	858e2 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   858dc:	4b0e      	ldr	r3, [pc, #56]	; (85918 <_sbrk+0x50>)
   858de:	4a0f      	ldr	r2, [pc, #60]	; (8591c <_sbrk+0x54>)
   858e0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   858e2:	4b0d      	ldr	r3, [pc, #52]	; (85918 <_sbrk+0x50>)
   858e4:	681b      	ldr	r3, [r3, #0]
   858e6:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   858e8:	68ba      	ldr	r2, [r7, #8]
   858ea:	687b      	ldr	r3, [r7, #4]
   858ec:	4413      	add	r3, r2
   858ee:	68fa      	ldr	r2, [r7, #12]
   858f0:	429a      	cmp	r2, r3
   858f2:	da02      	bge.n	858fa <_sbrk+0x32>
		return (caddr_t) -1;	
   858f4:	f04f 33ff 	mov.w	r3, #4294967295
   858f8:	e006      	b.n	85908 <_sbrk+0x40>
	}

	heap += incr;
   858fa:	4b07      	ldr	r3, [pc, #28]	; (85918 <_sbrk+0x50>)
   858fc:	681a      	ldr	r2, [r3, #0]
   858fe:	687b      	ldr	r3, [r7, #4]
   85900:	4413      	add	r3, r2
   85902:	4a05      	ldr	r2, [pc, #20]	; (85918 <_sbrk+0x50>)
   85904:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   85906:	68bb      	ldr	r3, [r7, #8]
}
   85908:	4618      	mov	r0, r3
   8590a:	3714      	adds	r7, #20
   8590c:	46bd      	mov	sp, r7
   8590e:	bc80      	pop	{r7}
   85910:	4770      	bx	lr
   85912:	bf00      	nop
   85914:	20081ffc 	.word	0x20081ffc
   85918:	200012cc 	.word	0x200012cc
   8591c:	20080400 	.word	0x20080400

00085920 <sysclk_enable_peripheral_clock>:
{
   85920:	b580      	push	{r7, lr}
   85922:	b082      	sub	sp, #8
   85924:	af00      	add	r7, sp, #0
   85926:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   85928:	6878      	ldr	r0, [r7, #4]
   8592a:	4b03      	ldr	r3, [pc, #12]	; (85938 <sysclk_enable_peripheral_clock+0x18>)
   8592c:	4798      	blx	r3
}
   8592e:	bf00      	nop
   85930:	3708      	adds	r7, #8
   85932:	46bd      	mov	sp, r7
   85934:	bd80      	pop	{r7, pc}
   85936:	bf00      	nop
   85938:	00083ed5 	.word	0x00083ed5

0008593c <ioport_init>:
{
   8593c:	b580      	push	{r7, lr}
   8593e:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   85940:	200a      	movs	r0, #10
   85942:	4b03      	ldr	r3, [pc, #12]	; (85950 <ioport_init+0x14>)
   85944:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   85946:	200b      	movs	r0, #11
   85948:	4b01      	ldr	r3, [pc, #4]	; (85950 <ioport_init+0x14>)
   8594a:	4798      	blx	r3
}
   8594c:	bf00      	nop
   8594e:	bd80      	pop	{r7, pc}
   85950:	00085921 	.word	0x00085921

00085954 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   85954:	b580      	push	{r7, lr}
   85956:	af00      	add	r7, sp, #0
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   85958:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8595c:	201d      	movs	r0, #29
   8595e:	4b0d      	ldr	r3, [pc, #52]	; (85994 <iopins_normal+0x40>)
   85960:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   85962:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   85966:	201f      	movs	r0, #31
   85968:	4b0a      	ldr	r3, [pc, #40]	; (85994 <iopins_normal+0x40>)
   8596a:	4798      	blx	r3
	//gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   8596c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   85970:	2018      	movs	r0, #24
   85972:	4b08      	ldr	r3, [pc, #32]	; (85994 <iopins_normal+0x40>)
   85974:	4798      	blx	r3
	//board_sram_pwron();

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   85976:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8597a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   8597e:	4806      	ldr	r0, [pc, #24]	; (85998 <iopins_normal+0x44>)
   85980:	4b06      	ldr	r3, [pc, #24]	; (8599c <iopins_normal+0x48>)
   85982:	4798      	blx	r3
#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
#endif

#ifdef CONF_BOARD_PCK1
gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
   85984:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   85988:	2038      	movs	r0, #56	; 0x38
   8598a:	4b02      	ldr	r3, [pc, #8]	; (85994 <iopins_normal+0x40>)
   8598c:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   8598e:	bf00      	nop
   85990:	bd80      	pop	{r7, pc}
   85992:	bf00      	nop
   85994:	000844bd 	.word	0x000844bd
   85998:	400e0c00 	.word	0x400e0c00
   8599c:	000845e1 	.word	0x000845e1

000859a0 <board_init>:

void board_init(void)
{
   859a0:	b580      	push	{r7, lr}
   859a2:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   859a4:	4b04      	ldr	r3, [pc, #16]	; (859b8 <board_init+0x18>)
   859a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   859aa:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   859ac:	4b03      	ldr	r3, [pc, #12]	; (859bc <board_init+0x1c>)
   859ae:	4798      	blx	r3

	iopins_normal();
   859b0:	4b03      	ldr	r3, [pc, #12]	; (859c0 <board_init+0x20>)
   859b2:	4798      	blx	r3

}
   859b4:	bf00      	nop
   859b6:	bd80      	pop	{r7, pc}
   859b8:	400e1250 	.word	0x400e1250
   859bc:	0008593d 	.word	0x0008593d
   859c0:	00085955 	.word	0x00085955

000859c4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   859c4:	b480      	push	{r7}
   859c6:	b083      	sub	sp, #12
   859c8:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   859ca:	4b10      	ldr	r3, [pc, #64]	; (85a0c <cpu_irq_enter_critical+0x48>)
   859cc:	681b      	ldr	r3, [r3, #0]
   859ce:	2b00      	cmp	r3, #0
   859d0:	d112      	bne.n	859f8 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   859d2:	f3ef 8310 	mrs	r3, PRIMASK
   859d6:	607b      	str	r3, [r7, #4]
  return(result);
   859d8:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   859da:	2b00      	cmp	r3, #0
   859dc:	d109      	bne.n	859f2 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i");
   859de:	b672      	cpsid	i
  __ASM volatile ("dmb");
   859e0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   859e4:	4b0a      	ldr	r3, [pc, #40]	; (85a10 <cpu_irq_enter_critical+0x4c>)
   859e6:	2200      	movs	r2, #0
   859e8:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   859ea:	4b0a      	ldr	r3, [pc, #40]	; (85a14 <cpu_irq_enter_critical+0x50>)
   859ec:	2201      	movs	r2, #1
   859ee:	701a      	strb	r2, [r3, #0]
   859f0:	e002      	b.n	859f8 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   859f2:	4b08      	ldr	r3, [pc, #32]	; (85a14 <cpu_irq_enter_critical+0x50>)
   859f4:	2200      	movs	r2, #0
   859f6:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   859f8:	4b04      	ldr	r3, [pc, #16]	; (85a0c <cpu_irq_enter_critical+0x48>)
   859fa:	681b      	ldr	r3, [r3, #0]
   859fc:	3301      	adds	r3, #1
   859fe:	4a03      	ldr	r2, [pc, #12]	; (85a0c <cpu_irq_enter_critical+0x48>)
   85a00:	6013      	str	r3, [r2, #0]
}
   85a02:	bf00      	nop
   85a04:	370c      	adds	r7, #12
   85a06:	46bd      	mov	sp, r7
   85a08:	bc80      	pop	{r7}
   85a0a:	4770      	bx	lr
   85a0c:	200012d0 	.word	0x200012d0
   85a10:	2000031a 	.word	0x2000031a
   85a14:	200012d4 	.word	0x200012d4

00085a18 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   85a18:	b480      	push	{r7}
   85a1a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   85a1c:	4b0b      	ldr	r3, [pc, #44]	; (85a4c <cpu_irq_leave_critical+0x34>)
   85a1e:	681b      	ldr	r3, [r3, #0]
   85a20:	3b01      	subs	r3, #1
   85a22:	4a0a      	ldr	r2, [pc, #40]	; (85a4c <cpu_irq_leave_critical+0x34>)
   85a24:	6013      	str	r3, [r2, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   85a26:	4b09      	ldr	r3, [pc, #36]	; (85a4c <cpu_irq_leave_critical+0x34>)
   85a28:	681b      	ldr	r3, [r3, #0]
   85a2a:	2b00      	cmp	r3, #0
   85a2c:	d10a      	bne.n	85a44 <cpu_irq_leave_critical+0x2c>
   85a2e:	4b08      	ldr	r3, [pc, #32]	; (85a50 <cpu_irq_leave_critical+0x38>)
   85a30:	781b      	ldrb	r3, [r3, #0]
   85a32:	b2db      	uxtb	r3, r3
   85a34:	2b00      	cmp	r3, #0
   85a36:	d005      	beq.n	85a44 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   85a38:	4b06      	ldr	r3, [pc, #24]	; (85a54 <cpu_irq_leave_critical+0x3c>)
   85a3a:	2201      	movs	r2, #1
   85a3c:	701a      	strb	r2, [r3, #0]
   85a3e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   85a42:	b662      	cpsie	i
	}
}
   85a44:	bf00      	nop
   85a46:	46bd      	mov	sp, r7
   85a48:	bc80      	pop	{r7}
   85a4a:	4770      	bx	lr
   85a4c:	200012d0 	.word	0x200012d0
   85a50:	200012d4 	.word	0x200012d4
   85a54:	2000031a 	.word	0x2000031a

00085a58 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   85a58:	b480      	push	{r7}
   85a5a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   85a5c:	4b55      	ldr	r3, [pc, #340]	; (85bb4 <SystemCoreClockUpdate+0x15c>)
   85a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85a60:	f003 0303 	and.w	r3, r3, #3
   85a64:	2b03      	cmp	r3, #3
   85a66:	f200 8086 	bhi.w	85b76 <SystemCoreClockUpdate+0x11e>
   85a6a:	a201      	add	r2, pc, #4	; (adr r2, 85a70 <SystemCoreClockUpdate+0x18>)
   85a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85a70:	00085a81 	.word	0x00085a81
   85a74:	00085aa1 	.word	0x00085aa1
   85a78:	00085aed 	.word	0x00085aed
   85a7c:	00085aed 	.word	0x00085aed
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   85a80:	4b4d      	ldr	r3, [pc, #308]	; (85bb8 <SystemCoreClockUpdate+0x160>)
   85a82:	695b      	ldr	r3, [r3, #20]
   85a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
   85a88:	2b00      	cmp	r3, #0
   85a8a:	d004      	beq.n	85a96 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   85a8c:	4b4b      	ldr	r3, [pc, #300]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85a8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85a92:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   85a94:	e06f      	b.n	85b76 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   85a96:	4b49      	ldr	r3, [pc, #292]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85a98:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   85a9c:	601a      	str	r2, [r3, #0]
		break;
   85a9e:	e06a      	b.n	85b76 <SystemCoreClockUpdate+0x11e>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   85aa0:	4b44      	ldr	r3, [pc, #272]	; (85bb4 <SystemCoreClockUpdate+0x15c>)
   85aa2:	6a1b      	ldr	r3, [r3, #32]
   85aa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   85aa8:	2b00      	cmp	r3, #0
   85aaa:	d003      	beq.n	85ab4 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   85aac:	4b43      	ldr	r3, [pc, #268]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85aae:	4a44      	ldr	r2, [pc, #272]	; (85bc0 <SystemCoreClockUpdate+0x168>)
   85ab0:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   85ab2:	e060      	b.n	85b76 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   85ab4:	4b41      	ldr	r3, [pc, #260]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85ab6:	4a43      	ldr	r2, [pc, #268]	; (85bc4 <SystemCoreClockUpdate+0x16c>)
   85ab8:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   85aba:	4b3e      	ldr	r3, [pc, #248]	; (85bb4 <SystemCoreClockUpdate+0x15c>)
   85abc:	6a1b      	ldr	r3, [r3, #32]
   85abe:	f003 0370 	and.w	r3, r3, #112	; 0x70
   85ac2:	2b10      	cmp	r3, #16
   85ac4:	d003      	beq.n	85ace <SystemCoreClockUpdate+0x76>
   85ac6:	2b20      	cmp	r3, #32
   85ac8:	d007      	beq.n	85ada <SystemCoreClockUpdate+0x82>
   85aca:	2b00      	cmp	r3, #0
				break;
   85acc:	e00d      	b.n	85aea <SystemCoreClockUpdate+0x92>
				SystemCoreClock *= 2U;
   85ace:	4b3b      	ldr	r3, [pc, #236]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85ad0:	681b      	ldr	r3, [r3, #0]
   85ad2:	005b      	lsls	r3, r3, #1
   85ad4:	4a39      	ldr	r2, [pc, #228]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85ad6:	6013      	str	r3, [r2, #0]
				break;
   85ad8:	e007      	b.n	85aea <SystemCoreClockUpdate+0x92>
				SystemCoreClock *= 3U;
   85ada:	4b38      	ldr	r3, [pc, #224]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85adc:	681a      	ldr	r2, [r3, #0]
   85ade:	4613      	mov	r3, r2
   85ae0:	005b      	lsls	r3, r3, #1
   85ae2:	4413      	add	r3, r2
   85ae4:	4a35      	ldr	r2, [pc, #212]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85ae6:	6013      	str	r3, [r2, #0]
				break;
   85ae8:	bf00      	nop
		break;
   85aea:	e044      	b.n	85b76 <SystemCoreClockUpdate+0x11e>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   85aec:	4b31      	ldr	r3, [pc, #196]	; (85bb4 <SystemCoreClockUpdate+0x15c>)
   85aee:	6a1b      	ldr	r3, [r3, #32]
   85af0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   85af4:	2b00      	cmp	r3, #0
   85af6:	d003      	beq.n	85b00 <SystemCoreClockUpdate+0xa8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   85af8:	4b30      	ldr	r3, [pc, #192]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85afa:	4a31      	ldr	r2, [pc, #196]	; (85bc0 <SystemCoreClockUpdate+0x168>)
   85afc:	601a      	str	r2, [r3, #0]
   85afe:	e01a      	b.n	85b36 <SystemCoreClockUpdate+0xde>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   85b00:	4b2e      	ldr	r3, [pc, #184]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85b02:	4a30      	ldr	r2, [pc, #192]	; (85bc4 <SystemCoreClockUpdate+0x16c>)
   85b04:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   85b06:	4b2b      	ldr	r3, [pc, #172]	; (85bb4 <SystemCoreClockUpdate+0x15c>)
   85b08:	6a1b      	ldr	r3, [r3, #32]
   85b0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   85b0e:	2b10      	cmp	r3, #16
   85b10:	d003      	beq.n	85b1a <SystemCoreClockUpdate+0xc2>
   85b12:	2b20      	cmp	r3, #32
   85b14:	d007      	beq.n	85b26 <SystemCoreClockUpdate+0xce>
   85b16:	2b00      	cmp	r3, #0
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   85b18:	e00d      	b.n	85b36 <SystemCoreClockUpdate+0xde>
				SystemCoreClock *= 2U;
   85b1a:	4b28      	ldr	r3, [pc, #160]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85b1c:	681b      	ldr	r3, [r3, #0]
   85b1e:	005b      	lsls	r3, r3, #1
   85b20:	4a26      	ldr	r2, [pc, #152]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85b22:	6013      	str	r3, [r2, #0]
				break;
   85b24:	e007      	b.n	85b36 <SystemCoreClockUpdate+0xde>
				SystemCoreClock *= 3U;
   85b26:	4b25      	ldr	r3, [pc, #148]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85b28:	681a      	ldr	r2, [r3, #0]
   85b2a:	4613      	mov	r3, r2
   85b2c:	005b      	lsls	r3, r3, #1
   85b2e:	4413      	add	r3, r2
   85b30:	4a22      	ldr	r2, [pc, #136]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85b32:	6013      	str	r3, [r2, #0]
				break;
   85b34:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   85b36:	4b1f      	ldr	r3, [pc, #124]	; (85bb4 <SystemCoreClockUpdate+0x15c>)
   85b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85b3a:	f003 0303 	and.w	r3, r3, #3
   85b3e:	2b02      	cmp	r3, #2
   85b40:	d115      	bne.n	85b6e <SystemCoreClockUpdate+0x116>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   85b42:	4b1c      	ldr	r3, [pc, #112]	; (85bb4 <SystemCoreClockUpdate+0x15c>)
   85b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   85b46:	0c1b      	lsrs	r3, r3, #16
   85b48:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                          CKGR_PLLAR_MULA_Pos) + 1U);
   85b4c:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   85b4e:	4a1b      	ldr	r2, [pc, #108]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85b50:	6812      	ldr	r2, [r2, #0]
   85b52:	fb02 f303 	mul.w	r3, r2, r3
   85b56:	4a19      	ldr	r2, [pc, #100]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85b58:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   85b5a:	4b16      	ldr	r3, [pc, #88]	; (85bb4 <SystemCoreClockUpdate+0x15c>)
   85b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   85b5e:	b2db      	uxtb	r3, r3
   85b60:	4a16      	ldr	r2, [pc, #88]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85b62:	6812      	ldr	r2, [r2, #0]
   85b64:	fbb2 f3f3 	udiv	r3, r2, r3
   85b68:	4a14      	ldr	r2, [pc, #80]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85b6a:	6013      	str	r3, [r2, #0]
				                           CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   85b6c:	e002      	b.n	85b74 <SystemCoreClockUpdate+0x11c>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   85b6e:	4b13      	ldr	r3, [pc, #76]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85b70:	4a15      	ldr	r2, [pc, #84]	; (85bc8 <SystemCoreClockUpdate+0x170>)
   85b72:	601a      	str	r2, [r3, #0]
		break;
   85b74:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   85b76:	4b0f      	ldr	r3, [pc, #60]	; (85bb4 <SystemCoreClockUpdate+0x15c>)
   85b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85b7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   85b7e:	2b70      	cmp	r3, #112	; 0x70
   85b80:	d108      	bne.n	85b94 <SystemCoreClockUpdate+0x13c>
		SystemCoreClock /= 3U;
   85b82:	4b0e      	ldr	r3, [pc, #56]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85b84:	681b      	ldr	r3, [r3, #0]
   85b86:	4a11      	ldr	r2, [pc, #68]	; (85bcc <SystemCoreClockUpdate+0x174>)
   85b88:	fba2 2303 	umull	r2, r3, r2, r3
   85b8c:	085b      	lsrs	r3, r3, #1
   85b8e:	4a0b      	ldr	r2, [pc, #44]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85b90:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                           PMC_MCKR_PRES_Pos);
	}
}
   85b92:	e00a      	b.n	85baa <SystemCoreClockUpdate+0x152>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   85b94:	4b07      	ldr	r3, [pc, #28]	; (85bb4 <SystemCoreClockUpdate+0x15c>)
   85b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85b98:	091b      	lsrs	r3, r3, #4
   85b9a:	f003 0307 	and.w	r3, r3, #7
   85b9e:	4a07      	ldr	r2, [pc, #28]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85ba0:	6812      	ldr	r2, [r2, #0]
   85ba2:	fa22 f303 	lsr.w	r3, r2, r3
   85ba6:	4a05      	ldr	r2, [pc, #20]	; (85bbc <SystemCoreClockUpdate+0x164>)
   85ba8:	6013      	str	r3, [r2, #0]
}
   85baa:	bf00      	nop
   85bac:	46bd      	mov	sp, r7
   85bae:	bc80      	pop	{r7}
   85bb0:	4770      	bx	lr
   85bb2:	bf00      	nop
   85bb4:	400e0400 	.word	0x400e0400
   85bb8:	400e1210 	.word	0x400e1210
   85bbc:	200003a8 	.word	0x200003a8
   85bc0:	00b71b00 	.word	0x00b71b00
   85bc4:	003d0900 	.word	0x003d0900
   85bc8:	0e4e1c00 	.word	0x0e4e1c00
   85bcc:	aaaaaaab 	.word	0xaaaaaaab

00085bd0 <__libc_init_array>:
   85bd0:	b570      	push	{r4, r5, r6, lr}
   85bd2:	4e0d      	ldr	r6, [pc, #52]	; (85c08 <__libc_init_array+0x38>)
   85bd4:	4d0d      	ldr	r5, [pc, #52]	; (85c0c <__libc_init_array+0x3c>)
   85bd6:	1b76      	subs	r6, r6, r5
   85bd8:	10b6      	asrs	r6, r6, #2
   85bda:	d006      	beq.n	85bea <__libc_init_array+0x1a>
   85bdc:	2400      	movs	r4, #0
   85bde:	3401      	adds	r4, #1
   85be0:	f855 3b04 	ldr.w	r3, [r5], #4
   85be4:	4798      	blx	r3
   85be6:	42a6      	cmp	r6, r4
   85be8:	d1f9      	bne.n	85bde <__libc_init_array+0xe>
   85bea:	4e09      	ldr	r6, [pc, #36]	; (85c10 <__libc_init_array+0x40>)
   85bec:	4d09      	ldr	r5, [pc, #36]	; (85c14 <__libc_init_array+0x44>)
   85bee:	f005 f8d3 	bl	8ad98 <_init>
   85bf2:	1b76      	subs	r6, r6, r5
   85bf4:	10b6      	asrs	r6, r6, #2
   85bf6:	d006      	beq.n	85c06 <__libc_init_array+0x36>
   85bf8:	2400      	movs	r4, #0
   85bfa:	3401      	adds	r4, #1
   85bfc:	f855 3b04 	ldr.w	r3, [r5], #4
   85c00:	4798      	blx	r3
   85c02:	42a6      	cmp	r6, r4
   85c04:	d1f9      	bne.n	85bfa <__libc_init_array+0x2a>
   85c06:	bd70      	pop	{r4, r5, r6, pc}
   85c08:	0008ada4 	.word	0x0008ada4
   85c0c:	0008ada4 	.word	0x0008ada4
   85c10:	0008adac 	.word	0x0008adac
   85c14:	0008ada4 	.word	0x0008ada4

00085c18 <memcpy>:
   85c18:	4684      	mov	ip, r0
   85c1a:	ea41 0300 	orr.w	r3, r1, r0
   85c1e:	f013 0303 	ands.w	r3, r3, #3
   85c22:	d149      	bne.n	85cb8 <memcpy+0xa0>
   85c24:	3a40      	subs	r2, #64	; 0x40
   85c26:	d323      	bcc.n	85c70 <memcpy+0x58>
   85c28:	680b      	ldr	r3, [r1, #0]
   85c2a:	6003      	str	r3, [r0, #0]
   85c2c:	684b      	ldr	r3, [r1, #4]
   85c2e:	6043      	str	r3, [r0, #4]
   85c30:	688b      	ldr	r3, [r1, #8]
   85c32:	6083      	str	r3, [r0, #8]
   85c34:	68cb      	ldr	r3, [r1, #12]
   85c36:	60c3      	str	r3, [r0, #12]
   85c38:	690b      	ldr	r3, [r1, #16]
   85c3a:	6103      	str	r3, [r0, #16]
   85c3c:	694b      	ldr	r3, [r1, #20]
   85c3e:	6143      	str	r3, [r0, #20]
   85c40:	698b      	ldr	r3, [r1, #24]
   85c42:	6183      	str	r3, [r0, #24]
   85c44:	69cb      	ldr	r3, [r1, #28]
   85c46:	61c3      	str	r3, [r0, #28]
   85c48:	6a0b      	ldr	r3, [r1, #32]
   85c4a:	6203      	str	r3, [r0, #32]
   85c4c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   85c4e:	6243      	str	r3, [r0, #36]	; 0x24
   85c50:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   85c52:	6283      	str	r3, [r0, #40]	; 0x28
   85c54:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   85c56:	62c3      	str	r3, [r0, #44]	; 0x2c
   85c58:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85c5a:	6303      	str	r3, [r0, #48]	; 0x30
   85c5c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   85c5e:	6343      	str	r3, [r0, #52]	; 0x34
   85c60:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   85c62:	6383      	str	r3, [r0, #56]	; 0x38
   85c64:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   85c66:	63c3      	str	r3, [r0, #60]	; 0x3c
   85c68:	3040      	adds	r0, #64	; 0x40
   85c6a:	3140      	adds	r1, #64	; 0x40
   85c6c:	3a40      	subs	r2, #64	; 0x40
   85c6e:	d2db      	bcs.n	85c28 <memcpy+0x10>
   85c70:	3230      	adds	r2, #48	; 0x30
   85c72:	d30b      	bcc.n	85c8c <memcpy+0x74>
   85c74:	680b      	ldr	r3, [r1, #0]
   85c76:	6003      	str	r3, [r0, #0]
   85c78:	684b      	ldr	r3, [r1, #4]
   85c7a:	6043      	str	r3, [r0, #4]
   85c7c:	688b      	ldr	r3, [r1, #8]
   85c7e:	6083      	str	r3, [r0, #8]
   85c80:	68cb      	ldr	r3, [r1, #12]
   85c82:	60c3      	str	r3, [r0, #12]
   85c84:	3010      	adds	r0, #16
   85c86:	3110      	adds	r1, #16
   85c88:	3a10      	subs	r2, #16
   85c8a:	d2f3      	bcs.n	85c74 <memcpy+0x5c>
   85c8c:	320c      	adds	r2, #12
   85c8e:	d305      	bcc.n	85c9c <memcpy+0x84>
   85c90:	f851 3b04 	ldr.w	r3, [r1], #4
   85c94:	f840 3b04 	str.w	r3, [r0], #4
   85c98:	3a04      	subs	r2, #4
   85c9a:	d2f9      	bcs.n	85c90 <memcpy+0x78>
   85c9c:	3204      	adds	r2, #4
   85c9e:	d008      	beq.n	85cb2 <memcpy+0x9a>
   85ca0:	07d2      	lsls	r2, r2, #31
   85ca2:	bf1c      	itt	ne
   85ca4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85ca8:	f800 3b01 	strbne.w	r3, [r0], #1
   85cac:	d301      	bcc.n	85cb2 <memcpy+0x9a>
   85cae:	880b      	ldrh	r3, [r1, #0]
   85cb0:	8003      	strh	r3, [r0, #0]
   85cb2:	4660      	mov	r0, ip
   85cb4:	4770      	bx	lr
   85cb6:	bf00      	nop
   85cb8:	2a08      	cmp	r2, #8
   85cba:	d313      	bcc.n	85ce4 <memcpy+0xcc>
   85cbc:	078b      	lsls	r3, r1, #30
   85cbe:	d0b1      	beq.n	85c24 <memcpy+0xc>
   85cc0:	f010 0303 	ands.w	r3, r0, #3
   85cc4:	d0ae      	beq.n	85c24 <memcpy+0xc>
   85cc6:	f1c3 0304 	rsb	r3, r3, #4
   85cca:	1ad2      	subs	r2, r2, r3
   85ccc:	07db      	lsls	r3, r3, #31
   85cce:	bf1c      	itt	ne
   85cd0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85cd4:	f800 3b01 	strbne.w	r3, [r0], #1
   85cd8:	d3a4      	bcc.n	85c24 <memcpy+0xc>
   85cda:	f831 3b02 	ldrh.w	r3, [r1], #2
   85cde:	f820 3b02 	strh.w	r3, [r0], #2
   85ce2:	e79f      	b.n	85c24 <memcpy+0xc>
   85ce4:	3a04      	subs	r2, #4
   85ce6:	d3d9      	bcc.n	85c9c <memcpy+0x84>
   85ce8:	3a01      	subs	r2, #1
   85cea:	f811 3b01 	ldrb.w	r3, [r1], #1
   85cee:	f800 3b01 	strb.w	r3, [r0], #1
   85cf2:	d2f9      	bcs.n	85ce8 <memcpy+0xd0>
   85cf4:	780b      	ldrb	r3, [r1, #0]
   85cf6:	7003      	strb	r3, [r0, #0]
   85cf8:	784b      	ldrb	r3, [r1, #1]
   85cfa:	7043      	strb	r3, [r0, #1]
   85cfc:	788b      	ldrb	r3, [r1, #2]
   85cfe:	7083      	strb	r3, [r0, #2]
   85d00:	4660      	mov	r0, ip
   85d02:	4770      	bx	lr

00085d04 <memset>:
   85d04:	b4f0      	push	{r4, r5, r6, r7}
   85d06:	0786      	lsls	r6, r0, #30
   85d08:	d046      	beq.n	85d98 <memset+0x94>
   85d0a:	1e54      	subs	r4, r2, #1
   85d0c:	2a00      	cmp	r2, #0
   85d0e:	d03c      	beq.n	85d8a <memset+0x86>
   85d10:	b2ca      	uxtb	r2, r1
   85d12:	4603      	mov	r3, r0
   85d14:	e002      	b.n	85d1c <memset+0x18>
   85d16:	f114 34ff 	adds.w	r4, r4, #4294967295
   85d1a:	d336      	bcc.n	85d8a <memset+0x86>
   85d1c:	f803 2b01 	strb.w	r2, [r3], #1
   85d20:	079d      	lsls	r5, r3, #30
   85d22:	d1f8      	bne.n	85d16 <memset+0x12>
   85d24:	2c03      	cmp	r4, #3
   85d26:	d929      	bls.n	85d7c <memset+0x78>
   85d28:	b2cd      	uxtb	r5, r1
   85d2a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   85d2e:	2c0f      	cmp	r4, #15
   85d30:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   85d34:	d933      	bls.n	85d9e <memset+0x9a>
   85d36:	f1a4 0610 	sub.w	r6, r4, #16
   85d3a:	0936      	lsrs	r6, r6, #4
   85d3c:	f103 0720 	add.w	r7, r3, #32
   85d40:	eb07 1706 	add.w	r7, r7, r6, lsl #4
   85d44:	f103 0210 	add.w	r2, r3, #16
   85d48:	e942 5504 	strd	r5, r5, [r2, #-16]
   85d4c:	e942 5502 	strd	r5, r5, [r2, #-8]
   85d50:	3210      	adds	r2, #16
   85d52:	42ba      	cmp	r2, r7
   85d54:	d1f8      	bne.n	85d48 <memset+0x44>
   85d56:	1c72      	adds	r2, r6, #1
   85d58:	f014 0f0c 	tst.w	r4, #12
   85d5c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   85d60:	f004 060f 	and.w	r6, r4, #15
   85d64:	d013      	beq.n	85d8e <memset+0x8a>
   85d66:	1f33      	subs	r3, r6, #4
   85d68:	f023 0303 	bic.w	r3, r3, #3
   85d6c:	3304      	adds	r3, #4
   85d6e:	4413      	add	r3, r2
   85d70:	f842 5b04 	str.w	r5, [r2], #4
   85d74:	4293      	cmp	r3, r2
   85d76:	d1fb      	bne.n	85d70 <memset+0x6c>
   85d78:	f006 0403 	and.w	r4, r6, #3
   85d7c:	b12c      	cbz	r4, 85d8a <memset+0x86>
   85d7e:	b2c9      	uxtb	r1, r1
   85d80:	441c      	add	r4, r3
   85d82:	f803 1b01 	strb.w	r1, [r3], #1
   85d86:	429c      	cmp	r4, r3
   85d88:	d1fb      	bne.n	85d82 <memset+0x7e>
   85d8a:	bcf0      	pop	{r4, r5, r6, r7}
   85d8c:	4770      	bx	lr
   85d8e:	4634      	mov	r4, r6
   85d90:	4613      	mov	r3, r2
   85d92:	2c00      	cmp	r4, #0
   85d94:	d1f3      	bne.n	85d7e <memset+0x7a>
   85d96:	e7f8      	b.n	85d8a <memset+0x86>
   85d98:	4614      	mov	r4, r2
   85d9a:	4603      	mov	r3, r0
   85d9c:	e7c2      	b.n	85d24 <memset+0x20>
   85d9e:	461a      	mov	r2, r3
   85da0:	4626      	mov	r6, r4
   85da2:	e7e0      	b.n	85d66 <memset+0x62>

00085da4 <sprintf>:
   85da4:	b40e      	push	{r1, r2, r3}
   85da6:	4603      	mov	r3, r0
   85da8:	b530      	push	{r4, r5, lr}
   85daa:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   85dae:	b09c      	sub	sp, #112	; 0x70
   85db0:	a91f      	add	r1, sp, #124	; 0x7c
   85db2:	f851 2b04 	ldr.w	r2, [r1], #4
   85db6:	480a      	ldr	r0, [pc, #40]	; (85de0 <sprintf+0x3c>)
   85db8:	4d0a      	ldr	r5, [pc, #40]	; (85de4 <sprintf+0x40>)
   85dba:	9302      	str	r3, [sp, #8]
   85dbc:	9306      	str	r3, [sp, #24]
   85dbe:	9101      	str	r1, [sp, #4]
   85dc0:	460b      	mov	r3, r1
   85dc2:	6800      	ldr	r0, [r0, #0]
   85dc4:	a902      	add	r1, sp, #8
   85dc6:	9407      	str	r4, [sp, #28]
   85dc8:	e9cd 4504 	strd	r4, r5, [sp, #16]
   85dcc:	f000 f80c 	bl	85de8 <_svfprintf_r>
   85dd0:	2200      	movs	r2, #0
   85dd2:	9b02      	ldr	r3, [sp, #8]
   85dd4:	701a      	strb	r2, [r3, #0]
   85dd6:	b01c      	add	sp, #112	; 0x70
   85dd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   85ddc:	b003      	add	sp, #12
   85dde:	4770      	bx	lr
   85de0:	200003ac 	.word	0x200003ac
   85de4:	ffff0208 	.word	0xffff0208

00085de8 <_svfprintf_r>:
   85de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85dec:	b0d5      	sub	sp, #340	; 0x154
   85dee:	460c      	mov	r4, r1
   85df0:	910c      	str	r1, [sp, #48]	; 0x30
   85df2:	4693      	mov	fp, r2
   85df4:	930e      	str	r3, [sp, #56]	; 0x38
   85df6:	900b      	str	r0, [sp, #44]	; 0x2c
   85df8:	f002 fe60 	bl	88abc <_localeconv_r>
   85dfc:	6803      	ldr	r3, [r0, #0]
   85dfe:	4618      	mov	r0, r3
   85e00:	9319      	str	r3, [sp, #100]	; 0x64
   85e02:	f003 fee9 	bl	89bd8 <strlen>
   85e06:	89a3      	ldrh	r3, [r4, #12]
   85e08:	9017      	str	r0, [sp, #92]	; 0x5c
   85e0a:	061e      	lsls	r6, r3, #24
   85e0c:	d503      	bpl.n	85e16 <_svfprintf_r+0x2e>
   85e0e:	6923      	ldr	r3, [r4, #16]
   85e10:	2b00      	cmp	r3, #0
   85e12:	f001 8015 	beq.w	86e40 <_svfprintf_r+0x1058>
   85e16:	2300      	movs	r3, #0
   85e18:	465e      	mov	r6, fp
   85e1a:	2100      	movs	r1, #0
   85e1c:	2200      	movs	r2, #0
   85e1e:	9316      	str	r3, [sp, #88]	; 0x58
   85e20:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
   85e24:	9318      	str	r3, [sp, #96]	; 0x60
   85e26:	931a      	str	r3, [sp, #104]	; 0x68
   85e28:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
   85e2c:	931b      	str	r3, [sp, #108]	; 0x6c
   85e2e:	9309      	str	r3, [sp, #36]	; 0x24
   85e30:	ab2b      	add	r3, sp, #172	; 0xac
   85e32:	9328      	str	r3, [sp, #160]	; 0xa0
   85e34:	4699      	mov	r9, r3
   85e36:	7833      	ldrb	r3, [r6, #0]
   85e38:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   85e3c:	2b00      	cmp	r3, #0
   85e3e:	f000 816c 	beq.w	8611a <_svfprintf_r+0x332>
   85e42:	2b25      	cmp	r3, #37	; 0x25
   85e44:	f000 86c4 	beq.w	86bd0 <_svfprintf_r+0xde8>
   85e48:	4635      	mov	r5, r6
   85e4a:	e003      	b.n	85e54 <_svfprintf_r+0x6c>
   85e4c:	2b25      	cmp	r3, #37	; 0x25
   85e4e:	f000 8094 	beq.w	85f7a <_svfprintf_r+0x192>
   85e52:	4625      	mov	r5, r4
   85e54:	786b      	ldrb	r3, [r5, #1]
   85e56:	1c6c      	adds	r4, r5, #1
   85e58:	2b00      	cmp	r3, #0
   85e5a:	d1f7      	bne.n	85e4c <_svfprintf_r+0x64>
   85e5c:	1ba7      	subs	r7, r4, r6
   85e5e:	f000 815c 	beq.w	8611a <_svfprintf_r+0x332>
   85e62:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   85e66:	3301      	adds	r3, #1
   85e68:	443a      	add	r2, r7
   85e6a:	2b07      	cmp	r3, #7
   85e6c:	e9c9 6700 	strd	r6, r7, [r9]
   85e70:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   85e74:	f300 8084 	bgt.w	85f80 <_svfprintf_r+0x198>
   85e78:	f109 0908 	add.w	r9, r9, #8
   85e7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   85e7e:	786b      	ldrb	r3, [r5, #1]
   85e80:	443a      	add	r2, r7
   85e82:	9209      	str	r2, [sp, #36]	; 0x24
   85e84:	2b00      	cmp	r3, #0
   85e86:	f000 8148 	beq.w	8611a <_svfprintf_r+0x332>
   85e8a:	2300      	movs	r3, #0
   85e8c:	f04f 3aff 	mov.w	sl, #4294967295
   85e90:	272b      	movs	r7, #43	; 0x2b
   85e92:	2120      	movs	r1, #32
   85e94:	f894 8001 	ldrb.w	r8, [r4, #1]
   85e98:	930a      	str	r3, [sp, #40]	; 0x28
   85e9a:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   85e9e:	9307      	str	r3, [sp, #28]
   85ea0:	f104 0b01 	add.w	fp, r4, #1
   85ea4:	f10b 0b01 	add.w	fp, fp, #1
   85ea8:	f1a8 0320 	sub.w	r3, r8, #32
   85eac:	2b5a      	cmp	r3, #90	; 0x5a
   85eae:	f200 8362 	bhi.w	86576 <_svfprintf_r+0x78e>
   85eb2:	e8df f013 	tbh	[pc, r3, lsl #1]
   85eb6:	0341      	.short	0x0341
   85eb8:	03600360 	.word	0x03600360
   85ebc:	0360033a 	.word	0x0360033a
   85ec0:	03600360 	.word	0x03600360
   85ec4:	03600317 	.word	0x03600317
   85ec8:	02100360 	.word	0x02100360
   85ecc:	0360020b 	.word	0x0360020b
   85ed0:	01f100cb 	.word	0x01f100cb
   85ed4:	01e50360 	.word	0x01e50360
   85ed8:	00a800a8 	.word	0x00a800a8
   85edc:	00a800a8 	.word	0x00a800a8
   85ee0:	00a800a8 	.word	0x00a800a8
   85ee4:	00a800a8 	.word	0x00a800a8
   85ee8:	036000a8 	.word	0x036000a8
   85eec:	03600360 	.word	0x03600360
   85ef0:	03600360 	.word	0x03600360
   85ef4:	03600360 	.word	0x03600360
   85ef8:	036002d7 	.word	0x036002d7
   85efc:	018d021d 	.word	0x018d021d
   85f00:	02d702d7 	.word	0x02d702d7
   85f04:	036002d7 	.word	0x036002d7
   85f08:	03600360 	.word	0x03600360
   85f0c:	01860360 	.word	0x01860360
   85f10:	03600360 	.word	0x03600360
   85f14:	03600175 	.word	0x03600175
   85f18:	03600360 	.word	0x03600360
   85f1c:	03600149 	.word	0x03600149
   85f20:	036001c1 	.word	0x036001c1
   85f24:	00b70360 	.word	0x00b70360
   85f28:	03600360 	.word	0x03600360
   85f2c:	03600360 	.word	0x03600360
   85f30:	03600360 	.word	0x03600360
   85f34:	03600360 	.word	0x03600360
   85f38:	036002d7 	.word	0x036002d7
   85f3c:	01d0021d 	.word	0x01d0021d
   85f40:	02d702d7 	.word	0x02d702d7
   85f44:	01b602d7 	.word	0x01b602d7
   85f48:	005b01d0 	.word	0x005b01d0
   85f4c:	013e0360 	.word	0x013e0360
   85f50:	01150360 	.word	0x01150360
   85f54:	00d20103 	.word	0x00d20103
   85f58:	0360005b 	.word	0x0360005b
   85f5c:	005f0149 	.word	0x005f0149
   85f60:	0360034b 	.word	0x0360034b
   85f64:	00890360 	.word	0x00890360
   85f68:	005f0360 	.word	0x005f0360
   85f6c:	9b07      	ldr	r3, [sp, #28]
   85f6e:	f043 0320 	orr.w	r3, r3, #32
   85f72:	9307      	str	r3, [sp, #28]
   85f74:	f89b 8000 	ldrb.w	r8, [fp]
   85f78:	e794      	b.n	85ea4 <_svfprintf_r+0xbc>
   85f7a:	1ba7      	subs	r7, r4, r6
   85f7c:	d085      	beq.n	85e8a <_svfprintf_r+0xa2>
   85f7e:	e770      	b.n	85e62 <_svfprintf_r+0x7a>
   85f80:	aa28      	add	r2, sp, #160	; 0xa0
   85f82:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   85f86:	f003 fe8f 	bl	89ca8 <__ssprint_r>
   85f8a:	b980      	cbnz	r0, 85fae <_svfprintf_r+0x1c6>
   85f8c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   85f90:	e774      	b.n	85e7c <_svfprintf_r+0x94>
   85f92:	aa28      	add	r2, sp, #160	; 0xa0
   85f94:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   85f98:	f003 fe86 	bl	89ca8 <__ssprint_r>
   85f9c:	2800      	cmp	r0, #0
   85f9e:	f000 8219 	beq.w	863d4 <_svfprintf_r+0x5ec>
   85fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85fa4:	b11b      	cbz	r3, 85fae <_svfprintf_r+0x1c6>
   85fa6:	990d      	ldr	r1, [sp, #52]	; 0x34
   85fa8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   85faa:	f002 fc91 	bl	888d0 <_free_r>
   85fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85fb0:	899b      	ldrh	r3, [r3, #12]
   85fb2:	f013 0f40 	tst.w	r3, #64	; 0x40
   85fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85fb8:	bf18      	it	ne
   85fba:	f04f 33ff 	movne.w	r3, #4294967295
   85fbe:	9309      	str	r3, [sp, #36]	; 0x24
   85fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
   85fc2:	b055      	add	sp, #340	; 0x154
   85fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85fc8:	4bb1      	ldr	r3, [pc, #708]	; (86290 <_svfprintf_r+0x4a8>)
   85fca:	9318      	str	r3, [sp, #96]	; 0x60
   85fcc:	9b07      	ldr	r3, [sp, #28]
   85fce:	0699      	lsls	r1, r3, #26
   85fd0:	d52d      	bpl.n	8602e <_svfprintf_r+0x246>
   85fd2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   85fd4:	3407      	adds	r4, #7
   85fd6:	f024 0307 	bic.w	r3, r4, #7
   85fda:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   85fde:	930e      	str	r3, [sp, #56]	; 0x38
   85fe0:	9a07      	ldr	r2, [sp, #28]
   85fe2:	07d6      	lsls	r6, r2, #31
   85fe4:	d50a      	bpl.n	85ffc <_svfprintf_r+0x214>
   85fe6:	ea54 0305 	orrs.w	r3, r4, r5
   85fea:	d007      	beq.n	85ffc <_svfprintf_r+0x214>
   85fec:	2330      	movs	r3, #48	; 0x30
   85fee:	f042 0202 	orr.w	r2, r2, #2
   85ff2:	f88d 8085 	strb.w	r8, [sp, #133]	; 0x85
   85ff6:	9207      	str	r2, [sp, #28]
   85ff8:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   85ffc:	9a07      	ldr	r2, [sp, #28]
   85ffe:	2302      	movs	r3, #2
   86000:	f422 6780 	bic.w	r7, r2, #1024	; 0x400
   86004:	e03b      	b.n	8607e <_svfprintf_r+0x296>
   86006:	2200      	movs	r2, #0
   86008:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   8600c:	f81b 8b01 	ldrb.w	r8, [fp], #1
   86010:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   86014:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   86018:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   8601c:	2b09      	cmp	r3, #9
   8601e:	d9f5      	bls.n	8600c <_svfprintf_r+0x224>
   86020:	920a      	str	r2, [sp, #40]	; 0x28
   86022:	e741      	b.n	85ea8 <_svfprintf_r+0xc0>
   86024:	4b9b      	ldr	r3, [pc, #620]	; (86294 <_svfprintf_r+0x4ac>)
   86026:	9318      	str	r3, [sp, #96]	; 0x60
   86028:	9b07      	ldr	r3, [sp, #28]
   8602a:	0699      	lsls	r1, r3, #26
   8602c:	d4d1      	bmi.n	85fd2 <_svfprintf_r+0x1ea>
   8602e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86030:	f853 4b04 	ldr.w	r4, [r3], #4
   86034:	930e      	str	r3, [sp, #56]	; 0x38
   86036:	9b07      	ldr	r3, [sp, #28]
   86038:	06da      	lsls	r2, r3, #27
   8603a:	f100 85f1 	bmi.w	86c20 <_svfprintf_r+0xe38>
   8603e:	9b07      	ldr	r3, [sp, #28]
   86040:	065b      	lsls	r3, r3, #25
   86042:	f140 85e9 	bpl.w	86c18 <_svfprintf_r+0xe30>
   86046:	b2a4      	uxth	r4, r4
   86048:	2500      	movs	r5, #0
   8604a:	e7c9      	b.n	85fe0 <_svfprintf_r+0x1f8>
   8604c:	f89b 8000 	ldrb.w	r8, [fp]
   86050:	9b07      	ldr	r3, [sp, #28]
   86052:	f043 0304 	orr.w	r3, r3, #4
   86056:	9307      	str	r3, [sp, #28]
   86058:	e724      	b.n	85ea4 <_svfprintf_r+0xbc>
   8605a:	f647 0330 	movw	r3, #30768	; 0x7830
   8605e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   86060:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
   86064:	f854 2b04 	ldr.w	r2, [r4], #4
   86068:	4b89      	ldr	r3, [pc, #548]	; (86290 <_svfprintf_r+0x4a8>)
   8606a:	940e      	str	r4, [sp, #56]	; 0x38
   8606c:	9318      	str	r3, [sp, #96]	; 0x60
   8606e:	4614      	mov	r4, r2
   86070:	2500      	movs	r5, #0
   86072:	2302      	movs	r3, #2
   86074:	f04f 0878 	mov.w	r8, #120	; 0x78
   86078:	9907      	ldr	r1, [sp, #28]
   8607a:	f041 0702 	orr.w	r7, r1, #2
   8607e:	2200      	movs	r2, #0
   86080:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   86084:	f1ba 3fff 	cmp.w	sl, #4294967295
   86088:	f000 829c 	beq.w	865c4 <_svfprintf_r+0x7dc>
   8608c:	f027 0280 	bic.w	r2, r7, #128	; 0x80
   86090:	9207      	str	r2, [sp, #28]
   86092:	ea54 0205 	orrs.w	r2, r4, r5
   86096:	f040 8294 	bne.w	865c2 <_svfprintf_r+0x7da>
   8609a:	f1ba 0f00 	cmp.w	sl, #0
   8609e:	f040 84a2 	bne.w	869e6 <_svfprintf_r+0xbfe>
   860a2:	2b00      	cmp	r3, #0
   860a4:	f040 80b8 	bne.w	86218 <_svfprintf_r+0x430>
   860a8:	f017 0701 	ands.w	r7, r7, #1
   860ac:	f000 85b2 	beq.w	86c14 <_svfprintf_r+0xe2c>
   860b0:	2330      	movs	r3, #48	; 0x30
   860b2:	f20d 164f 	addw	r6, sp, #335	; 0x14f
   860b6:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
   860ba:	e275      	b.n	865a8 <_svfprintf_r+0x7c0>
   860bc:	9f07      	ldr	r7, [sp, #28]
   860be:	06be      	lsls	r6, r7, #26
   860c0:	d474      	bmi.n	861ac <_svfprintf_r+0x3c4>
   860c2:	9b07      	ldr	r3, [sp, #28]
   860c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   860c6:	06dd      	lsls	r5, r3, #27
   860c8:	f852 4b04 	ldr.w	r4, [r2], #4
   860cc:	f101 83af 	bmi.w	8782e <_svfprintf_r+0x1a46>
   860d0:	9f07      	ldr	r7, [sp, #28]
   860d2:	0678      	lsls	r0, r7, #25
   860d4:	f141 805a 	bpl.w	8718c <_svfprintf_r+0x13a4>
   860d8:	920e      	str	r2, [sp, #56]	; 0x38
   860da:	b2a4      	uxth	r4, r4
   860dc:	2500      	movs	r5, #0
   860de:	e06c      	b.n	861ba <_svfprintf_r+0x3d2>
   860e0:	9907      	ldr	r1, [sp, #28]
   860e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   860e4:	068c      	lsls	r4, r1, #26
   860e6:	f102 0304 	add.w	r3, r2, #4
   860ea:	f100 859c 	bmi.w	86c26 <_svfprintf_r+0xe3e>
   860ee:	9a07      	ldr	r2, [sp, #28]
   860f0:	06d0      	lsls	r0, r2, #27
   860f2:	f100 87e6 	bmi.w	870c2 <_svfprintf_r+0x12da>
   860f6:	9a07      	ldr	r2, [sp, #28]
   860f8:	0651      	lsls	r1, r2, #25
   860fa:	f101 80ae 	bmi.w	8725a <_svfprintf_r+0x1472>
   860fe:	9a07      	ldr	r2, [sp, #28]
   86100:	0592      	lsls	r2, r2, #22
   86102:	f140 87de 	bpl.w	870c2 <_svfprintf_r+0x12da>
   86106:	465e      	mov	r6, fp
   86108:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8610a:	930e      	str	r3, [sp, #56]	; 0x38
   8610c:	6812      	ldr	r2, [r2, #0]
   8610e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86110:	7013      	strb	r3, [r2, #0]
   86112:	7833      	ldrb	r3, [r6, #0]
   86114:	2b00      	cmp	r3, #0
   86116:	f47f ae94 	bne.w	85e42 <_svfprintf_r+0x5a>
   8611a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   8611c:	2b00      	cmp	r3, #0
   8611e:	f43f af46 	beq.w	85fae <_svfprintf_r+0x1c6>
   86122:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86124:	980b      	ldr	r0, [sp, #44]	; 0x2c
   86126:	aa28      	add	r2, sp, #160	; 0xa0
   86128:	4621      	mov	r1, r4
   8612a:	f003 fdbd 	bl	89ca8 <__ssprint_r>
   8612e:	89a3      	ldrh	r3, [r4, #12]
   86130:	e73f      	b.n	85fb2 <_svfprintf_r+0x1ca>
   86132:	f89b 8000 	ldrb.w	r8, [fp]
   86136:	9b07      	ldr	r3, [sp, #28]
   86138:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   8613c:	f000 8677 	beq.w	86e2e <_svfprintf_r+0x1046>
   86140:	f043 0310 	orr.w	r3, r3, #16
   86144:	9307      	str	r3, [sp, #28]
   86146:	e6ad      	b.n	85ea4 <_svfprintf_r+0xbc>
   86148:	2500      	movs	r5, #0
   8614a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   8614c:	f88d 5083 	strb.w	r5, [sp, #131]	; 0x83
   86150:	f854 6b04 	ldr.w	r6, [r4], #4
   86154:	2e00      	cmp	r6, #0
   86156:	f000 8682 	beq.w	86e5e <_svfprintf_r+0x1076>
   8615a:	f1ba 3fff 	cmp.w	sl, #4294967295
   8615e:	f000 87ef 	beq.w	87140 <_svfprintf_r+0x1358>
   86162:	4652      	mov	r2, sl
   86164:	4629      	mov	r1, r5
   86166:	4630      	mov	r0, r6
   86168:	f002 ff72 	bl	89050 <memchr>
   8616c:	900d      	str	r0, [sp, #52]	; 0x34
   8616e:	2800      	cmp	r0, #0
   86170:	f001 8144 	beq.w	873fc <_svfprintf_r+0x1614>
   86174:	46aa      	mov	sl, r5
   86176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86178:	1b9f      	subs	r7, r3, r6
   8617a:	e9cd aa12 	strd	sl, sl, [sp, #72]	; 0x48
   8617e:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
   86182:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   86186:	940e      	str	r4, [sp, #56]	; 0x38
   86188:	9308      	str	r3, [sp, #32]
   8618a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   8618e:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
   86192:	2a00      	cmp	r2, #0
   86194:	f000 80be 	beq.w	86314 <_svfprintf_r+0x52c>
   86198:	9b08      	ldr	r3, [sp, #32]
   8619a:	3301      	adds	r3, #1
   8619c:	9308      	str	r3, [sp, #32]
   8619e:	e0b9      	b.n	86314 <_svfprintf_r+0x52c>
   861a0:	9b07      	ldr	r3, [sp, #28]
   861a2:	f043 0710 	orr.w	r7, r3, #16
   861a6:	069b      	lsls	r3, r3, #26
   861a8:	f140 861f 	bpl.w	86dea <_svfprintf_r+0x1002>
   861ac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   861ae:	3407      	adds	r4, #7
   861b0:	f024 0307 	bic.w	r3, r4, #7
   861b4:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   861b8:	930e      	str	r3, [sp, #56]	; 0x38
   861ba:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
   861be:	2300      	movs	r3, #0
   861c0:	e75d      	b.n	8607e <_svfprintf_r+0x296>
   861c2:	9b07      	ldr	r3, [sp, #28]
   861c4:	f89b 8000 	ldrb.w	r8, [fp]
   861c8:	f043 0308 	orr.w	r3, r3, #8
   861cc:	9307      	str	r3, [sp, #28]
   861ce:	e669      	b.n	85ea4 <_svfprintf_r+0xbc>
   861d0:	9b07      	ldr	r3, [sp, #28]
   861d2:	069d      	lsls	r5, r3, #26
   861d4:	f043 0710 	orr.w	r7, r3, #16
   861d8:	f140 8530 	bpl.w	86c3c <_svfprintf_r+0xe54>
   861dc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   861de:	3407      	adds	r4, #7
   861e0:	f024 0307 	bic.w	r3, r4, #7
   861e4:	4619      	mov	r1, r3
   861e6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   861ea:	4614      	mov	r4, r2
   861ec:	461d      	mov	r5, r3
   861ee:	910e      	str	r1, [sp, #56]	; 0x38
   861f0:	2a00      	cmp	r2, #0
   861f2:	f173 0300 	sbcs.w	r3, r3, #0
   861f6:	f2c0 84e2 	blt.w	86bbe <_svfprintf_r+0xdd6>
   861fa:	f1ba 3fff 	cmp.w	sl, #4294967295
   861fe:	f000 81c8 	beq.w	86592 <_svfprintf_r+0x7aa>
   86202:	f027 0380 	bic.w	r3, r7, #128	; 0x80
   86206:	9307      	str	r3, [sp, #28]
   86208:	ea54 0305 	orrs.w	r3, r4, r5
   8620c:	f040 81c0 	bne.w	86590 <_svfprintf_r+0x7a8>
   86210:	f1ba 0f00 	cmp.w	sl, #0
   86214:	f041 8047 	bne.w	872a6 <_svfprintf_r+0x14be>
   86218:	f04f 0a00 	mov.w	sl, #0
   8621c:	ae54      	add	r6, sp, #336	; 0x150
   8621e:	4657      	mov	r7, sl
   86220:	e1c2      	b.n	865a8 <_svfprintf_r+0x7c0>
   86222:	f89b 8000 	ldrb.w	r8, [fp]
   86226:	9b07      	ldr	r3, [sp, #28]
   86228:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
   8622c:	f000 85f6 	beq.w	86e1c <_svfprintf_r+0x1034>
   86230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   86234:	9307      	str	r3, [sp, #28]
   86236:	e635      	b.n	85ea4 <_svfprintf_r+0xbc>
   86238:	9b07      	ldr	r3, [sp, #28]
   8623a:	069a      	lsls	r2, r3, #26
   8623c:	f043 0710 	orr.w	r7, r3, #16
   86240:	f140 8506 	bpl.w	86c50 <_svfprintf_r+0xe68>
   86244:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   86246:	3407      	adds	r4, #7
   86248:	f024 0307 	bic.w	r3, r4, #7
   8624c:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   86250:	930e      	str	r3, [sp, #56]	; 0x38
   86252:	2301      	movs	r3, #1
   86254:	e713      	b.n	8607e <_svfprintf_r+0x296>
   86256:	9f07      	ldr	r7, [sp, #28]
   86258:	06bc      	lsls	r4, r7, #26
   8625a:	d4bf      	bmi.n	861dc <_svfprintf_r+0x3f4>
   8625c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8625e:	1d1a      	adds	r2, r3, #4
   86260:	9b07      	ldr	r3, [sp, #28]
   86262:	06d8      	lsls	r0, r3, #27
   86264:	f101 82e6 	bmi.w	87834 <_svfprintf_r+0x1a4c>
   86268:	9f07      	ldr	r7, [sp, #28]
   8626a:	0679      	lsls	r1, r7, #25
   8626c:	f140 87a2 	bpl.w	871b4 <_svfprintf_r+0x13cc>
   86270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86272:	920e      	str	r2, [sp, #56]	; 0x38
   86274:	f9b3 4000 	ldrsh.w	r4, [r3]
   86278:	17e5      	asrs	r5, r4, #31
   8627a:	4622      	mov	r2, r4
   8627c:	462b      	mov	r3, r5
   8627e:	e7b7      	b.n	861f0 <_svfprintf_r+0x408>
   86280:	9b07      	ldr	r3, [sp, #28]
   86282:	f89b 8000 	ldrb.w	r8, [fp]
   86286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8628a:	9307      	str	r3, [sp, #28]
   8628c:	e60a      	b.n	85ea4 <_svfprintf_r+0xbc>
   8628e:	bf00      	nop
   86290:	0008ab20 	.word	0x0008ab20
   86294:	0008ab34 	.word	0x0008ab34
   86298:	465a      	mov	r2, fp
   8629a:	f812 8b01 	ldrb.w	r8, [r2], #1
   8629e:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
   862a2:	f001 8290 	beq.w	877c6 <_svfprintf_r+0x19de>
   862a6:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   862aa:	2b09      	cmp	r3, #9
   862ac:	4693      	mov	fp, r2
   862ae:	f04f 0a00 	mov.w	sl, #0
   862b2:	f63f adf9 	bhi.w	85ea8 <_svfprintf_r+0xc0>
   862b6:	f81b 8b01 	ldrb.w	r8, [fp], #1
   862ba:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
   862be:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
   862c2:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   862c6:	2b09      	cmp	r3, #9
   862c8:	d9f5      	bls.n	862b6 <_svfprintf_r+0x4ce>
   862ca:	e5ed      	b.n	85ea8 <_svfprintf_r+0xc0>
   862cc:	f88d 7083 	strb.w	r7, [sp, #131]	; 0x83
   862d0:	f89b 8000 	ldrb.w	r8, [fp]
   862d4:	e5e6      	b.n	85ea4 <_svfprintf_r+0xbc>
   862d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   862d8:	f89b 8000 	ldrb.w	r8, [fp]
   862dc:	f853 2b04 	ldr.w	r2, [r3], #4
   862e0:	2a00      	cmp	r2, #0
   862e2:	920a      	str	r2, [sp, #40]	; 0x28
   862e4:	930e      	str	r3, [sp, #56]	; 0x38
   862e6:	f6bf addd 	bge.w	85ea4 <_svfprintf_r+0xbc>
   862ea:	4253      	negs	r3, r2
   862ec:	930a      	str	r3, [sp, #40]	; 0x28
   862ee:	e6af      	b.n	86050 <_svfprintf_r+0x268>
   862f0:	2300      	movs	r3, #0
   862f2:	2701      	movs	r7, #1
   862f4:	461a      	mov	r2, r3
   862f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   862f8:	9708      	str	r7, [sp, #32]
   862fa:	f854 1b04 	ldr.w	r1, [r4], #4
   862fe:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   86302:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
   86306:	940e      	str	r4, [sp, #56]	; 0x38
   86308:	4692      	mov	sl, r2
   8630a:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
   8630e:	920d      	str	r2, [sp, #52]	; 0x34
   86310:	9211      	str	r2, [sp, #68]	; 0x44
   86312:	ae3b      	add	r6, sp, #236	; 0xec
   86314:	9b07      	ldr	r3, [sp, #28]
   86316:	f013 0302 	ands.w	r3, r3, #2
   8631a:	930f      	str	r3, [sp, #60]	; 0x3c
   8631c:	d002      	beq.n	86324 <_svfprintf_r+0x53c>
   8631e:	9b08      	ldr	r3, [sp, #32]
   86320:	3302      	adds	r3, #2
   86322:	9308      	str	r3, [sp, #32]
   86324:	9b07      	ldr	r3, [sp, #28]
   86326:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86328:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   8632c:	9310      	str	r3, [sp, #64]	; 0x40
   8632e:	d104      	bne.n	8633a <_svfprintf_r+0x552>
   86330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86332:	9908      	ldr	r1, [sp, #32]
   86334:	1a5d      	subs	r5, r3, r1
   86336:	2d00      	cmp	r5, #0
   86338:	dc58      	bgt.n	863ec <_svfprintf_r+0x604>
   8633a:	b172      	cbz	r2, 8635a <_svfprintf_r+0x572>
   8633c:	2001      	movs	r0, #1
   8633e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   86340:	4404      	add	r4, r0
   86342:	4402      	add	r2, r0
   86344:	f10d 0183 	add.w	r1, sp, #131	; 0x83
   86348:	2a07      	cmp	r2, #7
   8634a:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   8634e:	e9c9 1000 	strd	r1, r0, [r9]
   86352:	f300 82f8 	bgt.w	86946 <_svfprintf_r+0xb5e>
   86356:	f109 0908 	add.w	r9, r9, #8
   8635a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8635c:	b16b      	cbz	r3, 8637a <_svfprintf_r+0x592>
   8635e:	2102      	movs	r1, #2
   86360:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86362:	440c      	add	r4, r1
   86364:	3301      	adds	r3, #1
   86366:	aa21      	add	r2, sp, #132	; 0x84
   86368:	2b07      	cmp	r3, #7
   8636a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   8636e:	e9c9 2100 	strd	r2, r1, [r9]
   86372:	f300 82f4 	bgt.w	8695e <_svfprintf_r+0xb76>
   86376:	f109 0908 	add.w	r9, r9, #8
   8637a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8637c:	2b80      	cmp	r3, #128	; 0x80
   8637e:	f000 81f0 	beq.w	86762 <_svfprintf_r+0x97a>
   86382:	ebaa 0507 	sub.w	r5, sl, r7
   86386:	2d00      	cmp	r5, #0
   86388:	f300 822e 	bgt.w	867e8 <_svfprintf_r+0xa00>
   8638c:	9b07      	ldr	r3, [sp, #28]
   8638e:	05da      	lsls	r2, r3, #23
   86390:	f100 8182 	bmi.w	86698 <_svfprintf_r+0x8b0>
   86394:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86396:	443c      	add	r4, r7
   86398:	3301      	adds	r3, #1
   8639a:	2b07      	cmp	r3, #7
   8639c:	942a      	str	r4, [sp, #168]	; 0xa8
   8639e:	e9c9 6700 	strd	r6, r7, [r9]
   863a2:	9329      	str	r3, [sp, #164]	; 0xa4
   863a4:	f300 82c3 	bgt.w	8692e <_svfprintf_r+0xb46>
   863a8:	f109 0908 	add.w	r9, r9, #8
   863ac:	9b07      	ldr	r3, [sp, #28]
   863ae:	0759      	lsls	r1, r3, #29
   863b0:	d505      	bpl.n	863be <_svfprintf_r+0x5d6>
   863b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   863b4:	9a08      	ldr	r2, [sp, #32]
   863b6:	1a9d      	subs	r5, r3, r2
   863b8:	2d00      	cmp	r5, #0
   863ba:	f300 82dc 	bgt.w	86976 <_svfprintf_r+0xb8e>
   863be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   863c2:	9908      	ldr	r1, [sp, #32]
   863c4:	428a      	cmp	r2, r1
   863c6:	bfac      	ite	ge
   863c8:	189b      	addge	r3, r3, r2
   863ca:	185b      	addlt	r3, r3, r1
   863cc:	9309      	str	r3, [sp, #36]	; 0x24
   863ce:	2c00      	cmp	r4, #0
   863d0:	f47f addf 	bne.w	85f92 <_svfprintf_r+0x1aa>
   863d4:	2300      	movs	r3, #0
   863d6:	9329      	str	r3, [sp, #164]	; 0xa4
   863d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   863da:	b11b      	cbz	r3, 863e4 <_svfprintf_r+0x5fc>
   863dc:	990d      	ldr	r1, [sp, #52]	; 0x34
   863de:	980b      	ldr	r0, [sp, #44]	; 0x2c
   863e0:	f002 fa76 	bl	888d0 <_free_r>
   863e4:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   863e8:	465e      	mov	r6, fp
   863ea:	e692      	b.n	86112 <_svfprintf_r+0x32a>
   863ec:	2d10      	cmp	r5, #16
   863ee:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   863f0:	dd29      	ble.n	86446 <_svfprintf_r+0x65e>
   863f2:	4620      	mov	r0, r4
   863f4:	4649      	mov	r1, r9
   863f6:	2310      	movs	r3, #16
   863f8:	46b1      	mov	r9, r6
   863fa:	971e      	str	r7, [sp, #120]	; 0x78
   863fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   863fe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   86400:	e004      	b.n	8640c <_svfprintf_r+0x624>
   86402:	3d10      	subs	r5, #16
   86404:	2d10      	cmp	r5, #16
   86406:	f101 0108 	add.w	r1, r1, #8
   8640a:	dd18      	ble.n	8643e <_svfprintf_r+0x656>
   8640c:	3201      	adds	r2, #1
   8640e:	4fc1      	ldr	r7, [pc, #772]	; (86714 <_svfprintf_r+0x92c>)
   86410:	3010      	adds	r0, #16
   86412:	2a07      	cmp	r2, #7
   86414:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   86418:	e9c1 7300 	strd	r7, r3, [r1]
   8641c:	ddf1      	ble.n	86402 <_svfprintf_r+0x61a>
   8641e:	aa28      	add	r2, sp, #160	; 0xa0
   86420:	4631      	mov	r1, r6
   86422:	4620      	mov	r0, r4
   86424:	f003 fc40 	bl	89ca8 <__ssprint_r>
   86428:	2800      	cmp	r0, #0
   8642a:	f47f adba 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   8642e:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   86432:	3d10      	subs	r5, #16
   86434:	2d10      	cmp	r5, #16
   86436:	a92b      	add	r1, sp, #172	; 0xac
   86438:	f04f 0310 	mov.w	r3, #16
   8643c:	dce6      	bgt.n	8640c <_svfprintf_r+0x624>
   8643e:	464e      	mov	r6, r9
   86440:	4604      	mov	r4, r0
   86442:	4689      	mov	r9, r1
   86444:	9f1e      	ldr	r7, [sp, #120]	; 0x78
   86446:	3201      	adds	r2, #1
   86448:	4bb2      	ldr	r3, [pc, #712]	; (86714 <_svfprintf_r+0x92c>)
   8644a:	442c      	add	r4, r5
   8644c:	2a07      	cmp	r2, #7
   8644e:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   86452:	e9c9 3500 	strd	r3, r5, [r9]
   86456:	f300 85bf 	bgt.w	86fd8 <_svfprintf_r+0x11f0>
   8645a:	f109 0908 	add.w	r9, r9, #8
   8645e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   86462:	e76a      	b.n	8633a <_svfprintf_r+0x552>
   86464:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   86466:	3407      	adds	r4, #7
   86468:	f024 0307 	bic.w	r3, r4, #7
   8646c:	e8f3 1202 	ldrd	r1, r2, [r3], #8
   86470:	4614      	mov	r4, r2
   86472:	930e      	str	r3, [sp, #56]	; 0x38
   86474:	460b      	mov	r3, r1
   86476:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
   8647a:	f022 4400 	bic.w	r4, r2, #2147483648	; 0x80000000
   8647e:	460d      	mov	r5, r1
   86480:	4608      	mov	r0, r1
   86482:	f04f 32ff 	mov.w	r2, #4294967295
   86486:	4621      	mov	r1, r4
   86488:	4ba3      	ldr	r3, [pc, #652]	; (86718 <_svfprintf_r+0x930>)
   8648a:	f004 f95f 	bl	8a74c <__aeabi_dcmpun>
   8648e:	2800      	cmp	r0, #0
   86490:	f040 83e7 	bne.w	86c62 <_svfprintf_r+0xe7a>
   86494:	4628      	mov	r0, r5
   86496:	4621      	mov	r1, r4
   86498:	f04f 32ff 	mov.w	r2, #4294967295
   8649c:	4b9e      	ldr	r3, [pc, #632]	; (86718 <_svfprintf_r+0x930>)
   8649e:	f004 f937 	bl	8a710 <__aeabi_dcmple>
   864a2:	2800      	cmp	r0, #0
   864a4:	f040 83dd 	bne.w	86c62 <_svfprintf_r+0xe7a>
   864a8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   864ac:	2200      	movs	r2, #0
   864ae:	2300      	movs	r3, #0
   864b0:	f004 f924 	bl	8a6fc <__aeabi_dcmplt>
   864b4:	2800      	cmp	r0, #0
   864b6:	f040 869f 	bne.w	871f8 <_svfprintf_r+0x1410>
   864ba:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   864be:	2703      	movs	r7, #3
   864c0:	2100      	movs	r1, #0
   864c2:	4e96      	ldr	r6, [pc, #600]	; (8671c <_svfprintf_r+0x934>)
   864c4:	4b96      	ldr	r3, [pc, #600]	; (86720 <_svfprintf_r+0x938>)
   864c6:	9708      	str	r7, [sp, #32]
   864c8:	910d      	str	r1, [sp, #52]	; 0x34
   864ca:	9807      	ldr	r0, [sp, #28]
   864cc:	468a      	mov	sl, r1
   864ce:	f020 0080 	bic.w	r0, r0, #128	; 0x80
   864d2:	9007      	str	r0, [sp, #28]
   864d4:	9111      	str	r1, [sp, #68]	; 0x44
   864d6:	e9cd 1112 	strd	r1, r1, [sp, #72]	; 0x48
   864da:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   864de:	bfc8      	it	gt
   864e0:	461e      	movgt	r6, r3
   864e2:	e656      	b.n	86192 <_svfprintf_r+0x3aa>
   864e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   864e6:	4628      	mov	r0, r5
   864e8:	f002 fae8 	bl	88abc <_localeconv_r>
   864ec:	6843      	ldr	r3, [r0, #4]
   864ee:	4618      	mov	r0, r3
   864f0:	931b      	str	r3, [sp, #108]	; 0x6c
   864f2:	f003 fb71 	bl	89bd8 <strlen>
   864f6:	901d      	str	r0, [sp, #116]	; 0x74
   864f8:	4604      	mov	r4, r0
   864fa:	4628      	mov	r0, r5
   864fc:	f002 fade 	bl	88abc <_localeconv_r>
   86500:	6883      	ldr	r3, [r0, #8]
   86502:	2120      	movs	r1, #32
   86504:	931c      	str	r3, [sp, #112]	; 0x70
   86506:	2c00      	cmp	r4, #0
   86508:	f43f ad34 	beq.w	85f74 <_svfprintf_r+0x18c>
   8650c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   8650e:	f89b 8000 	ldrb.w	r8, [fp]
   86512:	2b00      	cmp	r3, #0
   86514:	f43f acc6 	beq.w	85ea4 <_svfprintf_r+0xbc>
   86518:	781b      	ldrb	r3, [r3, #0]
   8651a:	2b00      	cmp	r3, #0
   8651c:	f43f acc2 	beq.w	85ea4 <_svfprintf_r+0xbc>
   86520:	9b07      	ldr	r3, [sp, #28]
   86522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   86526:	9307      	str	r3, [sp, #28]
   86528:	e4bc      	b.n	85ea4 <_svfprintf_r+0xbc>
   8652a:	9b07      	ldr	r3, [sp, #28]
   8652c:	f89b 8000 	ldrb.w	r8, [fp]
   86530:	f043 0301 	orr.w	r3, r3, #1
   86534:	9307      	str	r3, [sp, #28]
   86536:	e4b5      	b.n	85ea4 <_svfprintf_r+0xbc>
   86538:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
   8653c:	f89b 8000 	ldrb.w	r8, [fp]
   86540:	2b00      	cmp	r3, #0
   86542:	f47f acaf 	bne.w	85ea4 <_svfprintf_r+0xbc>
   86546:	f88d 1083 	strb.w	r1, [sp, #131]	; 0x83
   8654a:	e4ab      	b.n	85ea4 <_svfprintf_r+0xbc>
   8654c:	9f07      	ldr	r7, [sp, #28]
   8654e:	463b      	mov	r3, r7
   86550:	069b      	lsls	r3, r3, #26
   86552:	f53f ae77 	bmi.w	86244 <_svfprintf_r+0x45c>
   86556:	9b07      	ldr	r3, [sp, #28]
   86558:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8655a:	06de      	lsls	r6, r3, #27
   8655c:	f852 4b04 	ldr.w	r4, [r2], #4
   86560:	f101 815c 	bmi.w	8781c <_svfprintf_r+0x1a34>
   86564:	9f07      	ldr	r7, [sp, #28]
   86566:	067d      	lsls	r5, r7, #25
   86568:	f140 861a 	bpl.w	871a0 <_svfprintf_r+0x13b8>
   8656c:	920e      	str	r2, [sp, #56]	; 0x38
   8656e:	b2a4      	uxth	r4, r4
   86570:	2500      	movs	r5, #0
   86572:	2301      	movs	r3, #1
   86574:	e583      	b.n	8607e <_svfprintf_r+0x296>
   86576:	f1b8 0f00 	cmp.w	r8, #0
   8657a:	f43f adce 	beq.w	8611a <_svfprintf_r+0x332>
   8657e:	2300      	movs	r3, #0
   86580:	2701      	movs	r7, #1
   86582:	461a      	mov	r2, r3
   86584:	9708      	str	r7, [sp, #32]
   86586:	f88d 80ec 	strb.w	r8, [sp, #236]	; 0xec
   8658a:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   8658e:	e6bb      	b.n	86308 <_svfprintf_r+0x520>
   86590:	9f07      	ldr	r7, [sp, #28]
   86592:	2d00      	cmp	r5, #0
   86594:	bf08      	it	eq
   86596:	2c0a      	cmpeq	r4, #10
   86598:	d239      	bcs.n	8660e <_svfprintf_r+0x826>
   8659a:	9707      	str	r7, [sp, #28]
   8659c:	2701      	movs	r7, #1
   8659e:	3430      	adds	r4, #48	; 0x30
   865a0:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
   865a4:	f20d 164f 	addw	r6, sp, #335	; 0x14f
   865a8:	2300      	movs	r3, #0
   865aa:	4557      	cmp	r7, sl
   865ac:	930d      	str	r3, [sp, #52]	; 0x34
   865ae:	9311      	str	r3, [sp, #68]	; 0x44
   865b0:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
   865b4:	463b      	mov	r3, r7
   865b6:	bfb8      	it	lt
   865b8:	4653      	movlt	r3, sl
   865ba:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   865be:	9308      	str	r3, [sp, #32]
   865c0:	e5e7      	b.n	86192 <_svfprintf_r+0x3aa>
   865c2:	9f07      	ldr	r7, [sp, #28]
   865c4:	2b01      	cmp	r3, #1
   865c6:	d0e4      	beq.n	86592 <_svfprintf_r+0x7aa>
   865c8:	2b02      	cmp	r3, #2
   865ca:	f000 8213 	beq.w	869f4 <_svfprintf_r+0xc0c>
   865ce:	a954      	add	r1, sp, #336	; 0x150
   865d0:	e000      	b.n	865d4 <_svfprintf_r+0x7ec>
   865d2:	4631      	mov	r1, r6
   865d4:	08e2      	lsrs	r2, r4, #3
   865d6:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   865da:	08e8      	lsrs	r0, r5, #3
   865dc:	f004 0307 	and.w	r3, r4, #7
   865e0:	4605      	mov	r5, r0
   865e2:	4614      	mov	r4, r2
   865e4:	3330      	adds	r3, #48	; 0x30
   865e6:	ea54 0205 	orrs.w	r2, r4, r5
   865ea:	f801 3c01 	strb.w	r3, [r1, #-1]
   865ee:	f101 36ff 	add.w	r6, r1, #4294967295
   865f2:	d1ee      	bne.n	865d2 <_svfprintf_r+0x7ea>
   865f4:	07f8      	lsls	r0, r7, #31
   865f6:	d54b      	bpl.n	86690 <_svfprintf_r+0x8a8>
   865f8:	2b30      	cmp	r3, #48	; 0x30
   865fa:	d049      	beq.n	86690 <_svfprintf_r+0x8a8>
   865fc:	2330      	movs	r3, #48	; 0x30
   865fe:	3902      	subs	r1, #2
   86600:	f806 3c01 	strb.w	r3, [r6, #-1]
   86604:	ab54      	add	r3, sp, #336	; 0x150
   86606:	9707      	str	r7, [sp, #28]
   86608:	460e      	mov	r6, r1
   8660a:	1a5f      	subs	r7, r3, r1
   8660c:	e7cc      	b.n	865a8 <_svfprintf_r+0x7c0>
   8660e:	2200      	movs	r2, #0
   86610:	f407 6380 	and.w	r3, r7, #1024	; 0x400
   86614:	f8cd b01c 	str.w	fp, [sp, #28]
   86618:	f8cd 8020 	str.w	r8, [sp, #32]
   8661c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   86620:	ae54      	add	r6, sp, #336	; 0x150
   86622:	46b9      	mov	r9, r7
   86624:	4693      	mov	fp, r2
   86626:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
   8662a:	461f      	mov	r7, r3
   8662c:	e00b      	b.n	86646 <_svfprintf_r+0x85e>
   8662e:	220a      	movs	r2, #10
   86630:	2300      	movs	r3, #0
   86632:	4620      	mov	r0, r4
   86634:	4629      	mov	r1, r5
   86636:	f004 f8c7 	bl	8a7c8 <__aeabi_uldivmod>
   8663a:	2d00      	cmp	r5, #0
   8663c:	bf08      	it	eq
   8663e:	2c0a      	cmpeq	r4, #10
   86640:	d31b      	bcc.n	8667a <_svfprintf_r+0x892>
   86642:	4604      	mov	r4, r0
   86644:	460d      	mov	r5, r1
   86646:	220a      	movs	r2, #10
   86648:	2300      	movs	r3, #0
   8664a:	4620      	mov	r0, r4
   8664c:	4629      	mov	r1, r5
   8664e:	f004 f8bb 	bl	8a7c8 <__aeabi_uldivmod>
   86652:	3230      	adds	r2, #48	; 0x30
   86654:	f806 2c01 	strb.w	r2, [r6, #-1]
   86658:	f10b 0b01 	add.w	fp, fp, #1
   8665c:	3e01      	subs	r6, #1
   8665e:	2f00      	cmp	r7, #0
   86660:	d0e5      	beq.n	8662e <_svfprintf_r+0x846>
   86662:	f898 3000 	ldrb.w	r3, [r8]
   86666:	459b      	cmp	fp, r3
   86668:	d1e1      	bne.n	8662e <_svfprintf_r+0x846>
   8666a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   8666e:	d0de      	beq.n	8662e <_svfprintf_r+0x846>
   86670:	2d00      	cmp	r5, #0
   86672:	bf08      	it	eq
   86674:	2c0a      	cmpeq	r4, #10
   86676:	f080 8672 	bcs.w	8735e <_svfprintf_r+0x1576>
   8667a:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
   8667e:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
   86682:	464f      	mov	r7, r9
   86684:	f8dd b01c 	ldr.w	fp, [sp, #28]
   86688:	f8dd 8020 	ldr.w	r8, [sp, #32]
   8668c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   86690:	ab54      	add	r3, sp, #336	; 0x150
   86692:	9707      	str	r7, [sp, #28]
   86694:	1b9f      	subs	r7, r3, r6
   86696:	e787      	b.n	865a8 <_svfprintf_r+0x7c0>
   86698:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
   8669c:	f340 80df 	ble.w	8685e <_svfprintf_r+0xa76>
   866a0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   866a4:	2200      	movs	r2, #0
   866a6:	2300      	movs	r3, #0
   866a8:	f004 f81e 	bl	8a6e8 <__aeabi_dcmpeq>
   866ac:	2800      	cmp	r0, #0
   866ae:	f000 81b9 	beq.w	86a24 <_svfprintf_r+0xc3c>
   866b2:	2101      	movs	r1, #1
   866b4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   866b6:	4a1b      	ldr	r2, [pc, #108]	; (86724 <_svfprintf_r+0x93c>)
   866b8:	440b      	add	r3, r1
   866ba:	440c      	add	r4, r1
   866bc:	2b07      	cmp	r3, #7
   866be:	942a      	str	r4, [sp, #168]	; 0xa8
   866c0:	9329      	str	r3, [sp, #164]	; 0xa4
   866c2:	e9c9 2100 	strd	r2, r1, [r9]
   866c6:	f300 84c6 	bgt.w	87056 <_svfprintf_r+0x126e>
   866ca:	f109 0908 	add.w	r9, r9, #8
   866ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
   866d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   866d2:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   866d4:	4293      	cmp	r3, r2
   866d6:	f280 8297 	bge.w	86c08 <_svfprintf_r+0xe20>
   866da:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   866dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   866de:	3301      	adds	r3, #1
   866e0:	9919      	ldr	r1, [sp, #100]	; 0x64
   866e2:	4414      	add	r4, r2
   866e4:	2b07      	cmp	r3, #7
   866e6:	e9c9 1200 	strd	r1, r2, [r9]
   866ea:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   866ee:	f300 8389 	bgt.w	86e04 <_svfprintf_r+0x101c>
   866f2:	f109 0908 	add.w	r9, r9, #8
   866f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
   866f8:	1e5d      	subs	r5, r3, #1
   866fa:	2d00      	cmp	r5, #0
   866fc:	f77f ae56 	ble.w	863ac <_svfprintf_r+0x5c4>
   86700:	2d10      	cmp	r5, #16
   86702:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   86704:	f341 8059 	ble.w	877ba <_svfprintf_r+0x19d2>
   86708:	e9dd 780b 	ldrd	r7, r8, [sp, #44]	; 0x2c
   8670c:	4b06      	ldr	r3, [pc, #24]	; (86728 <_svfprintf_r+0x940>)
   8670e:	2610      	movs	r6, #16
   86710:	469a      	mov	sl, r3
   86712:	e011      	b.n	86738 <_svfprintf_r+0x950>
   86714:	0008ab54 	.word	0x0008ab54
   86718:	7fefffff 	.word	0x7fefffff
   8671c:	0008ab10 	.word	0x0008ab10
   86720:	0008ab14 	.word	0x0008ab14
   86724:	0008ab50 	.word	0x0008ab50
   86728:	0008ab64 	.word	0x0008ab64
   8672c:	f109 0908 	add.w	r9, r9, #8
   86730:	3d10      	subs	r5, #16
   86732:	2d10      	cmp	r5, #16
   86734:	f340 80f1 	ble.w	8691a <_svfprintf_r+0xb32>
   86738:	3201      	adds	r2, #1
   8673a:	3410      	adds	r4, #16
   8673c:	2a07      	cmp	r2, #7
   8673e:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   86742:	e9c9 a600 	strd	sl, r6, [r9]
   86746:	ddf1      	ble.n	8672c <_svfprintf_r+0x944>
   86748:	aa28      	add	r2, sp, #160	; 0xa0
   8674a:	4641      	mov	r1, r8
   8674c:	4638      	mov	r0, r7
   8674e:	f003 faab 	bl	89ca8 <__ssprint_r>
   86752:	2800      	cmp	r0, #0
   86754:	f47f ac25 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   86758:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
   8675c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   86760:	e7e6      	b.n	86730 <_svfprintf_r+0x948>
   86762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86764:	9a08      	ldr	r2, [sp, #32]
   86766:	1a9d      	subs	r5, r3, r2
   86768:	2d00      	cmp	r5, #0
   8676a:	f77f ae0a 	ble.w	86382 <_svfprintf_r+0x59a>
   8676e:	2d10      	cmp	r5, #16
   86770:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   86772:	4baa      	ldr	r3, [pc, #680]	; (86a1c <_svfprintf_r+0xc34>)
   86774:	dd28      	ble.n	867c8 <_svfprintf_r+0x9e0>
   86776:	4620      	mov	r0, r4
   86778:	970f      	str	r7, [sp, #60]	; 0x3c
   8677a:	4649      	mov	r1, r9
   8677c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8677e:	46b1      	mov	r9, r6
   86780:	461f      	mov	r7, r3
   86782:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   86784:	e004      	b.n	86790 <_svfprintf_r+0x9a8>
   86786:	3d10      	subs	r5, #16
   86788:	2d10      	cmp	r5, #16
   8678a:	f101 0108 	add.w	r1, r1, #8
   8678e:	dd16      	ble.n	867be <_svfprintf_r+0x9d6>
   86790:	2310      	movs	r3, #16
   86792:	3201      	adds	r2, #1
   86794:	3010      	adds	r0, #16
   86796:	2a07      	cmp	r2, #7
   86798:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   8679c:	600f      	str	r7, [r1, #0]
   8679e:	604b      	str	r3, [r1, #4]
   867a0:	ddf1      	ble.n	86786 <_svfprintf_r+0x99e>
   867a2:	aa28      	add	r2, sp, #160	; 0xa0
   867a4:	4631      	mov	r1, r6
   867a6:	4620      	mov	r0, r4
   867a8:	f003 fa7e 	bl	89ca8 <__ssprint_r>
   867ac:	2800      	cmp	r0, #0
   867ae:	f47f abf8 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   867b2:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   867b6:	3d10      	subs	r5, #16
   867b8:	2d10      	cmp	r5, #16
   867ba:	a92b      	add	r1, sp, #172	; 0xac
   867bc:	dce8      	bgt.n	86790 <_svfprintf_r+0x9a8>
   867be:	464e      	mov	r6, r9
   867c0:	4604      	mov	r4, r0
   867c2:	4689      	mov	r9, r1
   867c4:	463b      	mov	r3, r7
   867c6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   867c8:	3201      	adds	r2, #1
   867ca:	442c      	add	r4, r5
   867cc:	2a07      	cmp	r2, #7
   867ce:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   867d2:	e9c9 3500 	strd	r3, r5, [r9]
   867d6:	f300 8467 	bgt.w	870a8 <_svfprintf_r+0x12c0>
   867da:	ebaa 0507 	sub.w	r5, sl, r7
   867de:	2d00      	cmp	r5, #0
   867e0:	f109 0908 	add.w	r9, r9, #8
   867e4:	f77f add2 	ble.w	8638c <_svfprintf_r+0x5a4>
   867e8:	2d10      	cmp	r5, #16
   867ea:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   867ec:	f340 84f3 	ble.w	871d6 <_svfprintf_r+0x13ee>
   867f0:	4b8a      	ldr	r3, [pc, #552]	; (86a1c <_svfprintf_r+0xc34>)
   867f2:	4620      	mov	r0, r4
   867f4:	970f      	str	r7, [sp, #60]	; 0x3c
   867f6:	4649      	mov	r1, r9
   867f8:	f04f 0a10 	mov.w	sl, #16
   867fc:	46b1      	mov	r9, r6
   867fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   86800:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   86802:	461f      	mov	r7, r3
   86804:	e004      	b.n	86810 <_svfprintf_r+0xa28>
   86806:	3d10      	subs	r5, #16
   86808:	2d10      	cmp	r5, #16
   8680a:	f101 0108 	add.w	r1, r1, #8
   8680e:	dd15      	ble.n	8683c <_svfprintf_r+0xa54>
   86810:	3201      	adds	r2, #1
   86812:	3010      	adds	r0, #16
   86814:	2a07      	cmp	r2, #7
   86816:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   8681a:	e9c1 7a00 	strd	r7, sl, [r1]
   8681e:	ddf2      	ble.n	86806 <_svfprintf_r+0xa1e>
   86820:	aa28      	add	r2, sp, #160	; 0xa0
   86822:	4631      	mov	r1, r6
   86824:	4620      	mov	r0, r4
   86826:	f003 fa3f 	bl	89ca8 <__ssprint_r>
   8682a:	2800      	cmp	r0, #0
   8682c:	f47f abb9 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   86830:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   86834:	3d10      	subs	r5, #16
   86836:	2d10      	cmp	r5, #16
   86838:	a92b      	add	r1, sp, #172	; 0xac
   8683a:	dce9      	bgt.n	86810 <_svfprintf_r+0xa28>
   8683c:	464e      	mov	r6, r9
   8683e:	4604      	mov	r4, r0
   86840:	4689      	mov	r9, r1
   86842:	463b      	mov	r3, r7
   86844:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   86846:	3201      	adds	r2, #1
   86848:	442c      	add	r4, r5
   8684a:	2a07      	cmp	r2, #7
   8684c:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   86850:	e9c9 3500 	strd	r3, r5, [r9]
   86854:	f300 81a6 	bgt.w	86ba4 <_svfprintf_r+0xdbc>
   86858:	f109 0908 	add.w	r9, r9, #8
   8685c:	e596      	b.n	8638c <_svfprintf_r+0x5a4>
   8685e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86860:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86862:	2a01      	cmp	r2, #1
   86864:	f104 0401 	add.w	r4, r4, #1
   86868:	f103 0501 	add.w	r5, r3, #1
   8686c:	f109 0708 	add.w	r7, r9, #8
   86870:	f340 8157 	ble.w	86b22 <_svfprintf_r+0xd3a>
   86874:	2301      	movs	r3, #1
   86876:	2d07      	cmp	r5, #7
   86878:	f8c9 6000 	str.w	r6, [r9]
   8687c:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
   86880:	f8c9 3004 	str.w	r3, [r9, #4]
   86884:	f300 81a7 	bgt.w	86bd6 <_svfprintf_r+0xdee>
   86888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   8688a:	1c69      	adds	r1, r5, #1
   8688c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8688e:	441c      	add	r4, r3
   86890:	2907      	cmp	r1, #7
   86892:	9110      	str	r1, [sp, #64]	; 0x40
   86894:	e9cd 1429 	strd	r1, r4, [sp, #164]	; 0xa4
   86898:	e9c7 2300 	strd	r2, r3, [r7]
   8689c:	f300 81a7 	bgt.w	86bee <_svfprintf_r+0xe06>
   868a0:	3708      	adds	r7, #8
   868a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   868a4:	9d16      	ldr	r5, [sp, #88]	; 0x58
   868a6:	f102 0a01 	add.w	sl, r2, #1
   868aa:	2300      	movs	r3, #0
   868ac:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   868b0:	2200      	movs	r2, #0
   868b2:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   868b6:	f107 0908 	add.w	r9, r7, #8
   868ba:	f105 38ff 	add.w	r8, r5, #4294967295
   868be:	f003 ff13 	bl	8a6e8 <__aeabi_dcmpeq>
   868c2:	2800      	cmp	r0, #0
   868c4:	f040 8140 	bne.w	86b48 <_svfprintf_r+0xd60>
   868c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   868ca:	3601      	adds	r6, #1
   868cc:	4444      	add	r4, r8
   868ce:	2b07      	cmp	r3, #7
   868d0:	603e      	str	r6, [r7, #0]
   868d2:	942a      	str	r4, [sp, #168]	; 0xa8
   868d4:	f8c7 8004 	str.w	r8, [r7, #4]
   868d8:	9329      	str	r3, [sp, #164]	; 0xa4
   868da:	f300 83c8 	bgt.w	8706e <_svfprintf_r+0x1286>
   868de:	f107 0310 	add.w	r3, r7, #16
   868e2:	464f      	mov	r7, r9
   868e4:	4699      	mov	r9, r3
   868e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   868e8:	3202      	adds	r2, #2
   868ea:	920f      	str	r2, [sp, #60]	; 0x3c
   868ec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   868ee:	ab24      	add	r3, sp, #144	; 0x90
   868f0:	4414      	add	r4, r2
   868f2:	607a      	str	r2, [r7, #4]
   868f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   868f6:	942a      	str	r4, [sp, #168]	; 0xa8
   868f8:	2a07      	cmp	r2, #7
   868fa:	9229      	str	r2, [sp, #164]	; 0xa4
   868fc:	603b      	str	r3, [r7, #0]
   868fe:	f77f ad55 	ble.w	863ac <_svfprintf_r+0x5c4>
   86902:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   86906:	aa28      	add	r2, sp, #160	; 0xa0
   86908:	f003 f9ce 	bl	89ca8 <__ssprint_r>
   8690c:	2800      	cmp	r0, #0
   8690e:	f47f ab48 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   86912:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   86916:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86918:	e548      	b.n	863ac <_svfprintf_r+0x5c4>
   8691a:	4653      	mov	r3, sl
   8691c:	3201      	adds	r2, #1
   8691e:	442c      	add	r4, r5
   86920:	2a07      	cmp	r2, #7
   86922:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   86926:	e9c9 3500 	strd	r3, r5, [r9]
   8692a:	f77f ad3d 	ble.w	863a8 <_svfprintf_r+0x5c0>
   8692e:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   86932:	aa28      	add	r2, sp, #160	; 0xa0
   86934:	f003 f9b8 	bl	89ca8 <__ssprint_r>
   86938:	2800      	cmp	r0, #0
   8693a:	f47f ab32 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   8693e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86940:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   86944:	e532      	b.n	863ac <_svfprintf_r+0x5c4>
   86946:	aa28      	add	r2, sp, #160	; 0xa0
   86948:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   8694c:	f003 f9ac 	bl	89ca8 <__ssprint_r>
   86950:	2800      	cmp	r0, #0
   86952:	f47f ab26 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   86956:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   8695a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8695c:	e4fd      	b.n	8635a <_svfprintf_r+0x572>
   8695e:	aa28      	add	r2, sp, #160	; 0xa0
   86960:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   86964:	f003 f9a0 	bl	89ca8 <__ssprint_r>
   86968:	2800      	cmp	r0, #0
   8696a:	f47f ab1a 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   8696e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   86972:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86974:	e501      	b.n	8637a <_svfprintf_r+0x592>
   86976:	2d10      	cmp	r5, #16
   86978:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8697a:	dd20      	ble.n	869be <_svfprintf_r+0xbd6>
   8697c:	e9dd 780b 	ldrd	r7, r8, [sp, #44]	; 0x2c
   86980:	2610      	movs	r6, #16
   86982:	e004      	b.n	8698e <_svfprintf_r+0xba6>
   86984:	3d10      	subs	r5, #16
   86986:	2d10      	cmp	r5, #16
   86988:	f109 0908 	add.w	r9, r9, #8
   8698c:	dd17      	ble.n	869be <_svfprintf_r+0xbd6>
   8698e:	3301      	adds	r3, #1
   86990:	4a23      	ldr	r2, [pc, #140]	; (86a20 <_svfprintf_r+0xc38>)
   86992:	3410      	adds	r4, #16
   86994:	2b07      	cmp	r3, #7
   86996:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   8699a:	e9c9 2600 	strd	r2, r6, [r9]
   8699e:	ddf1      	ble.n	86984 <_svfprintf_r+0xb9c>
   869a0:	aa28      	add	r2, sp, #160	; 0xa0
   869a2:	4641      	mov	r1, r8
   869a4:	4638      	mov	r0, r7
   869a6:	f003 f97f 	bl	89ca8 <__ssprint_r>
   869aa:	2800      	cmp	r0, #0
   869ac:	f47f aaf9 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   869b0:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
   869b4:	3d10      	subs	r5, #16
   869b6:	2d10      	cmp	r5, #16
   869b8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   869bc:	dce7      	bgt.n	8698e <_svfprintf_r+0xba6>
   869be:	3301      	adds	r3, #1
   869c0:	4a17      	ldr	r2, [pc, #92]	; (86a20 <_svfprintf_r+0xc38>)
   869c2:	442c      	add	r4, r5
   869c4:	2b07      	cmp	r3, #7
   869c6:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   869ca:	e9c9 2500 	strd	r2, r5, [r9]
   869ce:	f77f acf6 	ble.w	863be <_svfprintf_r+0x5d6>
   869d2:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   869d6:	aa28      	add	r2, sp, #160	; 0xa0
   869d8:	f003 f966 	bl	89ca8 <__ssprint_r>
   869dc:	2800      	cmp	r0, #0
   869de:	f47f aae0 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   869e2:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   869e4:	e4eb      	b.n	863be <_svfprintf_r+0x5d6>
   869e6:	2b01      	cmp	r3, #1
   869e8:	f000 845d 	beq.w	872a6 <_svfprintf_r+0x14be>
   869ec:	2b02      	cmp	r3, #2
   869ee:	9f07      	ldr	r7, [sp, #28]
   869f0:	f47f aded 	bne.w	865ce <_svfprintf_r+0x7e6>
   869f4:	9818      	ldr	r0, [sp, #96]	; 0x60
   869f6:	ae54      	add	r6, sp, #336	; 0x150
   869f8:	0923      	lsrs	r3, r4, #4
   869fa:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   869fe:	0929      	lsrs	r1, r5, #4
   86a00:	f004 020f 	and.w	r2, r4, #15
   86a04:	460d      	mov	r5, r1
   86a06:	461c      	mov	r4, r3
   86a08:	5c83      	ldrb	r3, [r0, r2]
   86a0a:	f806 3d01 	strb.w	r3, [r6, #-1]!
   86a0e:	ea54 0305 	orrs.w	r3, r4, r5
   86a12:	d1f1      	bne.n	869f8 <_svfprintf_r+0xc10>
   86a14:	ab54      	add	r3, sp, #336	; 0x150
   86a16:	9707      	str	r7, [sp, #28]
   86a18:	1b9f      	subs	r7, r3, r6
   86a1a:	e5c5      	b.n	865a8 <_svfprintf_r+0x7c0>
   86a1c:	0008ab64 	.word	0x0008ab64
   86a20:	0008ab54 	.word	0x0008ab54
   86a24:	9b22      	ldr	r3, [sp, #136]	; 0x88
   86a26:	2b00      	cmp	r3, #0
   86a28:	f340 82e5 	ble.w	86ff6 <_svfprintf_r+0x120e>
   86a2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86a2e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86a30:	4293      	cmp	r3, r2
   86a32:	bfa8      	it	ge
   86a34:	4613      	movge	r3, r2
   86a36:	2b00      	cmp	r3, #0
   86a38:	461d      	mov	r5, r3
   86a3a:	dd0b      	ble.n	86a54 <_svfprintf_r+0xc6c>
   86a3c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86a3e:	442c      	add	r4, r5
   86a40:	3301      	adds	r3, #1
   86a42:	2b07      	cmp	r3, #7
   86a44:	942a      	str	r4, [sp, #168]	; 0xa8
   86a46:	e9c9 6500 	strd	r6, r5, [r9]
   86a4a:	9329      	str	r3, [sp, #164]	; 0xa4
   86a4c:	f300 847a 	bgt.w	87344 <_svfprintf_r+0x155c>
   86a50:	f109 0908 	add.w	r9, r9, #8
   86a54:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86a56:	2d00      	cmp	r5, #0
   86a58:	bfa8      	it	ge
   86a5a:	1b5b      	subge	r3, r3, r5
   86a5c:	2b00      	cmp	r3, #0
   86a5e:	461d      	mov	r5, r3
   86a60:	f300 820c 	bgt.w	86e7c <_svfprintf_r+0x1094>
   86a64:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86a66:	4433      	add	r3, r6
   86a68:	469a      	mov	sl, r3
   86a6a:	9b07      	ldr	r3, [sp, #28]
   86a6c:	055f      	lsls	r7, r3, #21
   86a6e:	f100 822c 	bmi.w	86eca <_svfprintf_r+0x10e2>
   86a72:	9b22      	ldr	r3, [sp, #136]	; 0x88
   86a74:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86a76:	4293      	cmp	r3, r2
   86a78:	db03      	blt.n	86a82 <_svfprintf_r+0xc9a>
   86a7a:	9a07      	ldr	r2, [sp, #28]
   86a7c:	07d5      	lsls	r5, r2, #31
   86a7e:	f140 83df 	bpl.w	87240 <_svfprintf_r+0x1458>
   86a82:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   86a84:	9917      	ldr	r1, [sp, #92]	; 0x5c
   86a86:	3201      	adds	r2, #1
   86a88:	9819      	ldr	r0, [sp, #100]	; 0x64
   86a8a:	440c      	add	r4, r1
   86a8c:	2a07      	cmp	r2, #7
   86a8e:	942a      	str	r4, [sp, #168]	; 0xa8
   86a90:	e9c9 0100 	strd	r0, r1, [r9]
   86a94:	9229      	str	r2, [sp, #164]	; 0xa4
   86a96:	f300 84a3 	bgt.w	873e0 <_svfprintf_r+0x15f8>
   86a9a:	f109 0908 	add.w	r9, r9, #8
   86a9e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86aa0:	18b5      	adds	r5, r6, r2
   86aa2:	eba5 050a 	sub.w	r5, r5, sl
   86aa6:	1ad3      	subs	r3, r2, r3
   86aa8:	429d      	cmp	r5, r3
   86aaa:	bfa8      	it	ge
   86aac:	461d      	movge	r5, r3
   86aae:	2d00      	cmp	r5, #0
   86ab0:	dd0b      	ble.n	86aca <_svfprintf_r+0xce2>
   86ab2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   86ab4:	442c      	add	r4, r5
   86ab6:	3201      	adds	r2, #1
   86ab8:	2a07      	cmp	r2, #7
   86aba:	942a      	str	r4, [sp, #168]	; 0xa8
   86abc:	e9c9 a500 	strd	sl, r5, [r9]
   86ac0:	9229      	str	r2, [sp, #164]	; 0xa4
   86ac2:	f300 8578 	bgt.w	875b6 <_svfprintf_r+0x17ce>
   86ac6:	f109 0908 	add.w	r9, r9, #8
   86aca:	2d00      	cmp	r5, #0
   86acc:	bfb4      	ite	lt
   86ace:	461d      	movlt	r5, r3
   86ad0:	1b5d      	subge	r5, r3, r5
   86ad2:	2d00      	cmp	r5, #0
   86ad4:	f77f ac6a 	ble.w	863ac <_svfprintf_r+0x5c4>
   86ad8:	2d10      	cmp	r5, #16
   86ada:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   86adc:	f340 866d 	ble.w	877ba <_svfprintf_r+0x19d2>
   86ae0:	e9dd 780b 	ldrd	r7, r8, [sp, #44]	; 0x2c
   86ae4:	4bc5      	ldr	r3, [pc, #788]	; (86dfc <_svfprintf_r+0x1014>)
   86ae6:	2610      	movs	r6, #16
   86ae8:	469a      	mov	sl, r3
   86aea:	e005      	b.n	86af8 <_svfprintf_r+0xd10>
   86aec:	f109 0908 	add.w	r9, r9, #8
   86af0:	3d10      	subs	r5, #16
   86af2:	2d10      	cmp	r5, #16
   86af4:	f77f af11 	ble.w	8691a <_svfprintf_r+0xb32>
   86af8:	3201      	adds	r2, #1
   86afa:	3410      	adds	r4, #16
   86afc:	2a07      	cmp	r2, #7
   86afe:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   86b02:	e9c9 a600 	strd	sl, r6, [r9]
   86b06:	ddf1      	ble.n	86aec <_svfprintf_r+0xd04>
   86b08:	aa28      	add	r2, sp, #160	; 0xa0
   86b0a:	4641      	mov	r1, r8
   86b0c:	4638      	mov	r0, r7
   86b0e:	f003 f8cb 	bl	89ca8 <__ssprint_r>
   86b12:	2800      	cmp	r0, #0
   86b14:	f47f aa45 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   86b18:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
   86b1c:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   86b20:	e7e6      	b.n	86af0 <_svfprintf_r+0xd08>
   86b22:	9a07      	ldr	r2, [sp, #28]
   86b24:	07d0      	lsls	r0, r2, #31
   86b26:	f53f aea5 	bmi.w	86874 <_svfprintf_r+0xa8c>
   86b2a:	2201      	movs	r2, #1
   86b2c:	2d07      	cmp	r5, #7
   86b2e:	f8c9 6000 	str.w	r6, [r9]
   86b32:	e9cd 5429 	strd	r5, r4, [sp, #164]	; 0xa4
   86b36:	f8c9 2004 	str.w	r2, [r9, #4]
   86b3a:	f300 8363 	bgt.w	87204 <_svfprintf_r+0x141c>
   86b3e:	3302      	adds	r3, #2
   86b40:	930f      	str	r3, [sp, #60]	; 0x3c
   86b42:	f109 0910 	add.w	r9, r9, #16
   86b46:	e6d1      	b.n	868ec <_svfprintf_r+0xb04>
   86b48:	f1b8 0f00 	cmp.w	r8, #0
   86b4c:	f77f aece 	ble.w	868ec <_svfprintf_r+0xb04>
   86b50:	f1b8 0f10 	cmp.w	r8, #16
   86b54:	f340 861e 	ble.w	87794 <_svfprintf_r+0x19ac>
   86b58:	4ba8      	ldr	r3, [pc, #672]	; (86dfc <_svfprintf_r+0x1014>)
   86b5a:	4655      	mov	r5, sl
   86b5c:	461a      	mov	r2, r3
   86b5e:	2610      	movs	r6, #16
   86b60:	4623      	mov	r3, r4
   86b62:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   86b66:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   86b6a:	4614      	mov	r4, r2
   86b6c:	e007      	b.n	86b7e <_svfprintf_r+0xd96>
   86b6e:	3708      	adds	r7, #8
   86b70:	f1a8 0810 	sub.w	r8, r8, #16
   86b74:	f1b8 0f10 	cmp.w	r8, #16
   86b78:	f340 82e9 	ble.w	8714e <_svfprintf_r+0x1366>
   86b7c:	3501      	adds	r5, #1
   86b7e:	3310      	adds	r3, #16
   86b80:	2d07      	cmp	r5, #7
   86b82:	e9cd 5329 	strd	r5, r3, [sp, #164]	; 0xa4
   86b86:	e9c7 4600 	strd	r4, r6, [r7]
   86b8a:	ddf0      	ble.n	86b6e <_svfprintf_r+0xd86>
   86b8c:	aa28      	add	r2, sp, #160	; 0xa0
   86b8e:	4651      	mov	r1, sl
   86b90:	4648      	mov	r0, r9
   86b92:	f003 f889 	bl	89ca8 <__ssprint_r>
   86b96:	2800      	cmp	r0, #0
   86b98:	f47f aa03 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   86b9c:	e9dd 5329 	ldrd	r5, r3, [sp, #164]	; 0xa4
   86ba0:	af2b      	add	r7, sp, #172	; 0xac
   86ba2:	e7e5      	b.n	86b70 <_svfprintf_r+0xd88>
   86ba4:	aa28      	add	r2, sp, #160	; 0xa0
   86ba6:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   86baa:	f003 f87d 	bl	89ca8 <__ssprint_r>
   86bae:	2800      	cmp	r0, #0
   86bb0:	f47f a9f7 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   86bb4:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   86bb8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86bba:	f7ff bbe7 	b.w	8638c <_svfprintf_r+0x5a4>
   86bbe:	232d      	movs	r3, #45	; 0x2d
   86bc0:	4264      	negs	r4, r4
   86bc2:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   86bc6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   86bca:	2301      	movs	r3, #1
   86bcc:	f7ff ba5a 	b.w	86084 <_svfprintf_r+0x29c>
   86bd0:	4634      	mov	r4, r6
   86bd2:	f7ff b95a 	b.w	85e8a <_svfprintf_r+0xa2>
   86bd6:	aa28      	add	r2, sp, #160	; 0xa0
   86bd8:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   86bdc:	f003 f864 	bl	89ca8 <__ssprint_r>
   86be0:	2800      	cmp	r0, #0
   86be2:	f47f a9de 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   86be6:	e9dd 5429 	ldrd	r5, r4, [sp, #164]	; 0xa4
   86bea:	af2b      	add	r7, sp, #172	; 0xac
   86bec:	e64c      	b.n	86888 <_svfprintf_r+0xaa0>
   86bee:	aa28      	add	r2, sp, #160	; 0xa0
   86bf0:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   86bf4:	f003 f858 	bl	89ca8 <__ssprint_r>
   86bf8:	2800      	cmp	r0, #0
   86bfa:	f47f a9d2 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   86bfe:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
   86c02:	af2b      	add	r7, sp, #172	; 0xac
   86c04:	9310      	str	r3, [sp, #64]	; 0x40
   86c06:	e64c      	b.n	868a2 <_svfprintf_r+0xaba>
   86c08:	9b07      	ldr	r3, [sp, #28]
   86c0a:	07db      	lsls	r3, r3, #31
   86c0c:	f53f ad65 	bmi.w	866da <_svfprintf_r+0x8f2>
   86c10:	f7ff bbcc 	b.w	863ac <_svfprintf_r+0x5c4>
   86c14:	ae54      	add	r6, sp, #336	; 0x150
   86c16:	e4c7      	b.n	865a8 <_svfprintf_r+0x7c0>
   86c18:	9b07      	ldr	r3, [sp, #28]
   86c1a:	059f      	lsls	r7, r3, #22
   86c1c:	f100 8319 	bmi.w	87252 <_svfprintf_r+0x146a>
   86c20:	2500      	movs	r5, #0
   86c22:	f7ff b9dd 	b.w	85fe0 <_svfprintf_r+0x1f8>
   86c26:	930e      	str	r3, [sp, #56]	; 0x38
   86c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86c2a:	6811      	ldr	r1, [r2, #0]
   86c2c:	17dd      	asrs	r5, r3, #31
   86c2e:	461a      	mov	r2, r3
   86c30:	462b      	mov	r3, r5
   86c32:	465e      	mov	r6, fp
   86c34:	e9c1 2300 	strd	r2, r3, [r1]
   86c38:	f7ff ba6b 	b.w	86112 <_svfprintf_r+0x32a>
   86c3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86c3e:	1d1a      	adds	r2, r3, #4
   86c40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86c42:	920e      	str	r2, [sp, #56]	; 0x38
   86c44:	681c      	ldr	r4, [r3, #0]
   86c46:	17e5      	asrs	r5, r4, #31
   86c48:	4622      	mov	r2, r4
   86c4a:	462b      	mov	r3, r5
   86c4c:	f7ff bad0 	b.w	861f0 <_svfprintf_r+0x408>
   86c50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86c52:	1d1a      	adds	r2, r3, #4
   86c54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86c56:	2500      	movs	r5, #0
   86c58:	681c      	ldr	r4, [r3, #0]
   86c5a:	920e      	str	r2, [sp, #56]	; 0x38
   86c5c:	2301      	movs	r3, #1
   86c5e:	f7ff ba0e 	b.w	8607e <_svfprintf_r+0x296>
   86c62:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86c66:	4602      	mov	r2, r0
   86c68:	460b      	mov	r3, r1
   86c6a:	f003 fd6f 	bl	8a74c <__aeabi_dcmpun>
   86c6e:	2800      	cmp	r0, #0
   86c70:	f040 8561 	bne.w	87736 <_svfprintf_r+0x194e>
   86c74:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
   86c78:	f000 84d8 	beq.w	8762c <_svfprintf_r+0x1844>
   86c7c:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
   86c80:	f000 83e9 	beq.w	87456 <_svfprintf_r+0x166e>
   86c84:	f028 0320 	bic.w	r3, r8, #32
   86c88:	f1ba 3fff 	cmp.w	sl, #4294967295
   86c8c:	9308      	str	r3, [sp, #32]
   86c8e:	f000 8307 	beq.w	872a0 <_svfprintf_r+0x14b8>
   86c92:	2b47      	cmp	r3, #71	; 0x47
   86c94:	d104      	bne.n	86ca0 <_svfprintf_r+0xeb8>
   86c96:	f1ba 0f00 	cmp.w	sl, #0
   86c9a:	bf08      	it	eq
   86c9c:	f04f 0a01 	moveq.w	sl, #1
   86ca0:	9915      	ldr	r1, [sp, #84]	; 0x54
   86ca2:	9a07      	ldr	r2, [sp, #28]
   86ca4:	1e0d      	subs	r5, r1, #0
   86ca6:	f442 7380 	orr.w	r3, r2, #256	; 0x100
   86caa:	f2c0 8477 	blt.w	8759c <_svfprintf_r+0x17b4>
   86cae:	2100      	movs	r1, #0
   86cb0:	9f14      	ldr	r7, [sp, #80]	; 0x50
   86cb2:	911e      	str	r1, [sp, #120]	; 0x78
   86cb4:	920f      	str	r2, [sp, #60]	; 0x3c
   86cb6:	9307      	str	r3, [sp, #28]
   86cb8:	910d      	str	r1, [sp, #52]	; 0x34
   86cba:	9b08      	ldr	r3, [sp, #32]
   86cbc:	2b46      	cmp	r3, #70	; 0x46
   86cbe:	f000 8364 	beq.w	8738a <_svfprintf_r+0x15a2>
   86cc2:	2b45      	cmp	r3, #69	; 0x45
   86cc4:	463a      	mov	r2, r7
   86cc6:	f04f 0002 	mov.w	r0, #2
   86cca:	462b      	mov	r3, r5
   86ccc:	f000 84b3 	beq.w	87636 <_svfprintf_r+0x184e>
   86cd0:	a926      	add	r1, sp, #152	; 0x98
   86cd2:	e9cd 0a00 	strd	r0, sl, [sp]
   86cd6:	9104      	str	r1, [sp, #16]
   86cd8:	a823      	add	r0, sp, #140	; 0x8c
   86cda:	a922      	add	r1, sp, #136	; 0x88
   86cdc:	e9cd 1002 	strd	r1, r0, [sp, #8]
   86ce0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   86ce2:	f000 fe55 	bl	87990 <_dtoa_r>
   86ce6:	9b08      	ldr	r3, [sp, #32]
   86ce8:	4606      	mov	r6, r0
   86cea:	2b47      	cmp	r3, #71	; 0x47
   86cec:	f040 8593 	bne.w	87816 <_svfprintf_r+0x1a2e>
   86cf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86cf2:	07db      	lsls	r3, r3, #31
   86cf4:	f100 846f 	bmi.w	875d6 <_svfprintf_r+0x17ee>
   86cf8:	9f26      	ldr	r7, [sp, #152]	; 0x98
   86cfa:	1bbb      	subs	r3, r7, r6
   86cfc:	9316      	str	r3, [sp, #88]	; 0x58
   86cfe:	9b22      	ldr	r3, [sp, #136]	; 0x88
   86d00:	9312      	str	r3, [sp, #72]	; 0x48
   86d02:	9b08      	ldr	r3, [sp, #32]
   86d04:	2b47      	cmp	r3, #71	; 0x47
   86d06:	f000 82e0 	beq.w	872ca <_svfprintf_r+0x14e2>
   86d0a:	9b08      	ldr	r3, [sp, #32]
   86d0c:	2b46      	cmp	r3, #70	; 0x46
   86d0e:	f000 8381 	beq.w	87414 <_svfprintf_r+0x162c>
   86d12:	9908      	ldr	r1, [sp, #32]
   86d14:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86d16:	2941      	cmp	r1, #65	; 0x41
   86d18:	f103 32ff 	add.w	r2, r3, #4294967295
   86d1c:	fa5f f388 	uxtb.w	r3, r8
   86d20:	bf03      	ittte	eq
   86d22:	330f      	addeq	r3, #15
   86d24:	b2db      	uxtbeq	r3, r3
   86d26:	2101      	moveq	r1, #1
   86d28:	2100      	movne	r1, #0
   86d2a:	2a00      	cmp	r2, #0
   86d2c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
   86d30:	bfb4      	ite	lt
   86d32:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   86d34:	232b      	movge	r3, #43	; 0x2b
   86d36:	9222      	str	r2, [sp, #136]	; 0x88
   86d38:	bfbc      	itt	lt
   86d3a:	f1c3 0201 	rsblt	r2, r3, #1
   86d3e:	232d      	movlt	r3, #45	; 0x2d
   86d40:	2a09      	cmp	r2, #9
   86d42:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
   86d46:	f340 84e4 	ble.w	87712 <_svfprintf_r+0x192a>
   86d4a:	f10d 049f 	add.w	r4, sp, #159	; 0x9f
   86d4e:	4620      	mov	r0, r4
   86d50:	4d2b      	ldr	r5, [pc, #172]	; (86e00 <_svfprintf_r+0x1018>)
   86d52:	e001      	b.n	86d58 <_svfprintf_r+0xf70>
   86d54:	4608      	mov	r0, r1
   86d56:	461a      	mov	r2, r3
   86d58:	fb85 3102 	smull	r3, r1, r5, r2
   86d5c:	17d3      	asrs	r3, r2, #31
   86d5e:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   86d62:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   86d66:	eba2 0141 	sub.w	r1, r2, r1, lsl #1
   86d6a:	3130      	adds	r1, #48	; 0x30
   86d6c:	2a63      	cmp	r2, #99	; 0x63
   86d6e:	f800 1c01 	strb.w	r1, [r0, #-1]
   86d72:	f100 31ff 	add.w	r1, r0, #4294967295
   86d76:	dced      	bgt.n	86d54 <_svfprintf_r+0xf6c>
   86d78:	3330      	adds	r3, #48	; 0x30
   86d7a:	1e82      	subs	r2, r0, #2
   86d7c:	b2db      	uxtb	r3, r3
   86d7e:	4294      	cmp	r4, r2
   86d80:	f801 3c01 	strb.w	r3, [r1, #-1]
   86d84:	f240 854d 	bls.w	87822 <_svfprintf_r+0x1a3a>
   86d88:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   86d8c:	e001      	b.n	86d92 <_svfprintf_r+0xfaa>
   86d8e:	f811 3b01 	ldrb.w	r3, [r1], #1
   86d92:	428c      	cmp	r4, r1
   86d94:	f802 3b01 	strb.w	r3, [r2], #1
   86d98:	d1f9      	bne.n	86d8e <_svfprintf_r+0xfa6>
   86d9a:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
   86d9e:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   86da2:	1a1b      	subs	r3, r3, r0
   86da4:	4413      	add	r3, r2
   86da6:	aa24      	add	r2, sp, #144	; 0x90
   86da8:	1a9b      	subs	r3, r3, r2
   86daa:	931a      	str	r3, [sp, #104]	; 0x68
   86dac:	9b16      	ldr	r3, [sp, #88]	; 0x58
   86dae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   86db0:	2b01      	cmp	r3, #1
   86db2:	eb03 0702 	add.w	r7, r3, r2
   86db6:	f340 84da 	ble.w	8776e <_svfprintf_r+0x1986>
   86dba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   86dbc:	441f      	add	r7, r3
   86dbe:	2200      	movs	r2, #0
   86dc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86dc2:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
   86dc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   86dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   86dce:	9307      	str	r3, [sp, #28]
   86dd0:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
   86dd4:	9211      	str	r2, [sp, #68]	; 0x44
   86dd6:	9308      	str	r3, [sp, #32]
   86dd8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   86dda:	2b00      	cmp	r3, #0
   86ddc:	f040 829d 	bne.w	8731a <_svfprintf_r+0x1532>
   86de0:	469a      	mov	sl, r3
   86de2:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   86de6:	f7ff b9d4 	b.w	86192 <_svfprintf_r+0x3aa>
   86dea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86dec:	1d1a      	adds	r2, r3, #4
   86dee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86df0:	2500      	movs	r5, #0
   86df2:	681c      	ldr	r4, [r3, #0]
   86df4:	920e      	str	r2, [sp, #56]	; 0x38
   86df6:	f7ff b9e0 	b.w	861ba <_svfprintf_r+0x3d2>
   86dfa:	bf00      	nop
   86dfc:	0008ab64 	.word	0x0008ab64
   86e00:	66666667 	.word	0x66666667
   86e04:	aa28      	add	r2, sp, #160	; 0xa0
   86e06:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   86e0a:	f002 ff4d 	bl	89ca8 <__ssprint_r>
   86e0e:	2800      	cmp	r0, #0
   86e10:	f47f a8c7 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   86e14:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   86e18:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86e1a:	e46c      	b.n	866f6 <_svfprintf_r+0x90e>
   86e1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   86e20:	f89b 8001 	ldrb.w	r8, [fp, #1]
   86e24:	9307      	str	r3, [sp, #28]
   86e26:	f10b 0b01 	add.w	fp, fp, #1
   86e2a:	f7ff b83b 	b.w	85ea4 <_svfprintf_r+0xbc>
   86e2e:	f043 0320 	orr.w	r3, r3, #32
   86e32:	f89b 8001 	ldrb.w	r8, [fp, #1]
   86e36:	9307      	str	r3, [sp, #28]
   86e38:	f10b 0b01 	add.w	fp, fp, #1
   86e3c:	f7ff b832 	b.w	85ea4 <_svfprintf_r+0xbc>
   86e40:	2140      	movs	r1, #64	; 0x40
   86e42:	980b      	ldr	r0, [sp, #44]	; 0x2c
   86e44:	f001 fe42 	bl	88acc <_malloc_r>
   86e48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86e4a:	6018      	str	r0, [r3, #0]
   86e4c:	6118      	str	r0, [r3, #16]
   86e4e:	2800      	cmp	r0, #0
   86e50:	f000 84d2 	beq.w	877f8 <_svfprintf_r+0x1a10>
   86e54:	2340      	movs	r3, #64	; 0x40
   86e56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86e58:	6153      	str	r3, [r2, #20]
   86e5a:	f7fe bfdc 	b.w	85e16 <_svfprintf_r+0x2e>
   86e5e:	4657      	mov	r7, sl
   86e60:	2f06      	cmp	r7, #6
   86e62:	bf28      	it	cs
   86e64:	2706      	movcs	r7, #6
   86e66:	46b2      	mov	sl, r6
   86e68:	9611      	str	r6, [sp, #68]	; 0x44
   86e6a:	e9cd 6612 	strd	r6, r6, [sp, #72]	; 0x48
   86e6e:	960d      	str	r6, [sp, #52]	; 0x34
   86e70:	4632      	mov	r2, r6
   86e72:	9708      	str	r7, [sp, #32]
   86e74:	940e      	str	r4, [sp, #56]	; 0x38
   86e76:	4ec2      	ldr	r6, [pc, #776]	; (87180 <_svfprintf_r+0x1398>)
   86e78:	f7ff b98b 	b.w	86192 <_svfprintf_r+0x3aa>
   86e7c:	2b10      	cmp	r3, #16
   86e7e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   86e80:	f340 84ac 	ble.w	877dc <_svfprintf_r+0x19f4>
   86e84:	e9dd 8a0b 	ldrd	r8, sl, [sp, #44]	; 0x2c
   86e88:	4bbe      	ldr	r3, [pc, #760]	; (87184 <_svfprintf_r+0x139c>)
   86e8a:	2710      	movs	r7, #16
   86e8c:	4619      	mov	r1, r3
   86e8e:	4623      	mov	r3, r4
   86e90:	460c      	mov	r4, r1
   86e92:	e005      	b.n	86ea0 <_svfprintf_r+0x10b8>
   86e94:	f109 0908 	add.w	r9, r9, #8
   86e98:	3d10      	subs	r5, #16
   86e9a:	2d10      	cmp	r5, #16
   86e9c:	f340 819e 	ble.w	871dc <_svfprintf_r+0x13f4>
   86ea0:	3201      	adds	r2, #1
   86ea2:	3310      	adds	r3, #16
   86ea4:	2a07      	cmp	r2, #7
   86ea6:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
   86eaa:	e9c9 4700 	strd	r4, r7, [r9]
   86eae:	ddf1      	ble.n	86e94 <_svfprintf_r+0x10ac>
   86eb0:	aa28      	add	r2, sp, #160	; 0xa0
   86eb2:	4651      	mov	r1, sl
   86eb4:	4640      	mov	r0, r8
   86eb6:	f002 fef7 	bl	89ca8 <__ssprint_r>
   86eba:	2800      	cmp	r0, #0
   86ebc:	f47f a871 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   86ec0:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
   86ec4:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   86ec8:	e7e6      	b.n	86e98 <_svfprintf_r+0x10b0>
   86eca:	9b16      	ldr	r3, [sp, #88]	; 0x58
   86ecc:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
   86ed0:	18f3      	adds	r3, r6, r3
   86ed2:	930f      	str	r3, [sp, #60]	; 0x3c
   86ed4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86ed6:	464a      	mov	r2, r9
   86ed8:	e9dd b90b 	ldrd	fp, r9, [sp, #44]	; 0x2c
   86edc:	9612      	str	r6, [sp, #72]	; 0x48
   86ede:	4fa9      	ldr	r7, [pc, #676]	; (87184 <_svfprintf_r+0x139c>)
   86ee0:	4656      	mov	r6, sl
   86ee2:	4621      	mov	r1, r4
   86ee4:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
   86ee8:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
   86eec:	2b00      	cmp	r3, #0
   86eee:	d032      	beq.n	86f56 <_svfprintf_r+0x116e>
   86ef0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86ef2:	2b00      	cmp	r3, #0
   86ef4:	d133      	bne.n	86f5e <_svfprintf_r+0x1176>
   86ef6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86ef8:	f108 38ff 	add.w	r8, r8, #4294967295
   86efc:	3b01      	subs	r3, #1
   86efe:	9313      	str	r3, [sp, #76]	; 0x4c
   86f00:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86f02:	981b      	ldr	r0, [sp, #108]	; 0x6c
   86f04:	3301      	adds	r3, #1
   86f06:	4451      	add	r1, sl
   86f08:	2b07      	cmp	r3, #7
   86f0a:	912a      	str	r1, [sp, #168]	; 0xa8
   86f0c:	e9c2 0a00 	strd	r0, sl, [r2]
   86f10:	9329      	str	r3, [sp, #164]	; 0xa4
   86f12:	dc56      	bgt.n	86fc2 <_svfprintf_r+0x11da>
   86f14:	3208      	adds	r2, #8
   86f16:	980f      	ldr	r0, [sp, #60]	; 0x3c
   86f18:	f898 3000 	ldrb.w	r3, [r8]
   86f1c:	1b85      	subs	r5, r0, r6
   86f1e:	429d      	cmp	r5, r3
   86f20:	bfa8      	it	ge
   86f22:	461d      	movge	r5, r3
   86f24:	2d00      	cmp	r5, #0
   86f26:	dd0c      	ble.n	86f42 <_svfprintf_r+0x115a>
   86f28:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86f2a:	4429      	add	r1, r5
   86f2c:	3301      	adds	r3, #1
   86f2e:	2b07      	cmp	r3, #7
   86f30:	912a      	str	r1, [sp, #168]	; 0xa8
   86f32:	e9c2 6500 	strd	r6, r5, [r2]
   86f36:	9329      	str	r3, [sp, #164]	; 0xa4
   86f38:	f300 80a9 	bgt.w	8708e <_svfprintf_r+0x12a6>
   86f3c:	f898 3000 	ldrb.w	r3, [r8]
   86f40:	3208      	adds	r2, #8
   86f42:	2d00      	cmp	r5, #0
   86f44:	bfb4      	ite	lt
   86f46:	461d      	movlt	r5, r3
   86f48:	1b5d      	subge	r5, r3, r5
   86f4a:	2d00      	cmp	r5, #0
   86f4c:	dc0b      	bgt.n	86f66 <_svfprintf_r+0x117e>
   86f4e:	441e      	add	r6, r3
   86f50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   86f52:	2b00      	cmp	r3, #0
   86f54:	d1cc      	bne.n	86ef0 <_svfprintf_r+0x1108>
   86f56:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86f58:	2b00      	cmp	r3, #0
   86f5a:	f000 81a7 	beq.w	872ac <_svfprintf_r+0x14c4>
   86f5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   86f60:	3b01      	subs	r3, #1
   86f62:	9311      	str	r3, [sp, #68]	; 0x44
   86f64:	e7cc      	b.n	86f00 <_svfprintf_r+0x1118>
   86f66:	2d10      	cmp	r5, #16
   86f68:	9829      	ldr	r0, [sp, #164]	; 0xa4
   86f6a:	dd1c      	ble.n	86fa6 <_svfprintf_r+0x11be>
   86f6c:	2410      	movs	r4, #16
   86f6e:	e004      	b.n	86f7a <_svfprintf_r+0x1192>
   86f70:	3d10      	subs	r5, #16
   86f72:	2d10      	cmp	r5, #16
   86f74:	f102 0208 	add.w	r2, r2, #8
   86f78:	dd15      	ble.n	86fa6 <_svfprintf_r+0x11be>
   86f7a:	3001      	adds	r0, #1
   86f7c:	3110      	adds	r1, #16
   86f7e:	2807      	cmp	r0, #7
   86f80:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
   86f84:	e9c2 7400 	strd	r7, r4, [r2]
   86f88:	ddf2      	ble.n	86f70 <_svfprintf_r+0x1188>
   86f8a:	aa28      	add	r2, sp, #160	; 0xa0
   86f8c:	4649      	mov	r1, r9
   86f8e:	4658      	mov	r0, fp
   86f90:	f002 fe8a 	bl	89ca8 <__ssprint_r>
   86f94:	2800      	cmp	r0, #0
   86f96:	f47f a804 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   86f9a:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
   86f9e:	3d10      	subs	r5, #16
   86fa0:	2d10      	cmp	r5, #16
   86fa2:	aa2b      	add	r2, sp, #172	; 0xac
   86fa4:	dce9      	bgt.n	86f7a <_svfprintf_r+0x1192>
   86fa6:	3001      	adds	r0, #1
   86fa8:	4429      	add	r1, r5
   86faa:	2807      	cmp	r0, #7
   86fac:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
   86fb0:	e9c2 7500 	strd	r7, r5, [r2]
   86fb4:	f300 81b8 	bgt.w	87328 <_svfprintf_r+0x1540>
   86fb8:	f898 3000 	ldrb.w	r3, [r8]
   86fbc:	3208      	adds	r2, #8
   86fbe:	441e      	add	r6, r3
   86fc0:	e7c6      	b.n	86f50 <_svfprintf_r+0x1168>
   86fc2:	aa28      	add	r2, sp, #160	; 0xa0
   86fc4:	4649      	mov	r1, r9
   86fc6:	4658      	mov	r0, fp
   86fc8:	f002 fe6e 	bl	89ca8 <__ssprint_r>
   86fcc:	2800      	cmp	r0, #0
   86fce:	f47e afe8 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   86fd2:	aa2b      	add	r2, sp, #172	; 0xac
   86fd4:	992a      	ldr	r1, [sp, #168]	; 0xa8
   86fd6:	e79e      	b.n	86f16 <_svfprintf_r+0x112e>
   86fd8:	aa28      	add	r2, sp, #160	; 0xa0
   86fda:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   86fde:	f002 fe63 	bl	89ca8 <__ssprint_r>
   86fe2:	2800      	cmp	r0, #0
   86fe4:	f47e afdd 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   86fe8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   86fec:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   86ff0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86ff2:	f7ff b9a2 	b.w	8633a <_svfprintf_r+0x552>
   86ff6:	2001      	movs	r0, #1
   86ff8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   86ffa:	4963      	ldr	r1, [pc, #396]	; (87188 <_svfprintf_r+0x13a0>)
   86ffc:	4402      	add	r2, r0
   86ffe:	4404      	add	r4, r0
   87000:	2a07      	cmp	r2, #7
   87002:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   87006:	e9c9 1000 	strd	r1, r0, [r9]
   8700a:	f300 810c 	bgt.w	87226 <_svfprintf_r+0x143e>
   8700e:	f109 0908 	add.w	r9, r9, #8
   87012:	2b00      	cmp	r3, #0
   87014:	d15d      	bne.n	870d2 <_svfprintf_r+0x12ea>
   87016:	9b07      	ldr	r3, [sp, #28]
   87018:	9a16      	ldr	r2, [sp, #88]	; 0x58
   8701a:	f003 0301 	and.w	r3, r3, #1
   8701e:	4313      	orrs	r3, r2
   87020:	f43f a9c4 	beq.w	863ac <_svfprintf_r+0x5c4>
   87024:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   87026:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   87028:	3201      	adds	r2, #1
   8702a:	9919      	ldr	r1, [sp, #100]	; 0x64
   8702c:	441c      	add	r4, r3
   8702e:	2a07      	cmp	r2, #7
   87030:	942a      	str	r4, [sp, #168]	; 0xa8
   87032:	e9c9 1300 	strd	r1, r3, [r9]
   87036:	9229      	str	r2, [sp, #164]	; 0xa4
   87038:	f300 8117 	bgt.w	8726a <_svfprintf_r+0x1482>
   8703c:	f109 0908 	add.w	r9, r9, #8
   87040:	9b16      	ldr	r3, [sp, #88]	; 0x58
   87042:	3201      	adds	r2, #1
   87044:	441c      	add	r4, r3
   87046:	2a07      	cmp	r2, #7
   87048:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   8704c:	e9c9 6300 	strd	r6, r3, [r9]
   87050:	f77f a9aa 	ble.w	863a8 <_svfprintf_r+0x5c0>
   87054:	e46b      	b.n	8692e <_svfprintf_r+0xb46>
   87056:	aa28      	add	r2, sp, #160	; 0xa0
   87058:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   8705c:	f002 fe24 	bl	89ca8 <__ssprint_r>
   87060:	2800      	cmp	r0, #0
   87062:	f47e af9e 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   87066:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   8706a:	f7ff bb30 	b.w	866ce <_svfprintf_r+0x8e6>
   8706e:	aa28      	add	r2, sp, #160	; 0xa0
   87070:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   87074:	f002 fe18 	bl	89ca8 <__ssprint_r>
   87078:	2800      	cmp	r0, #0
   8707a:	f47e af92 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   8707e:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
   87082:	3301      	adds	r3, #1
   87084:	930f      	str	r3, [sp, #60]	; 0x3c
   87086:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
   8708a:	af2b      	add	r7, sp, #172	; 0xac
   8708c:	e42e      	b.n	868ec <_svfprintf_r+0xb04>
   8708e:	aa28      	add	r2, sp, #160	; 0xa0
   87090:	4649      	mov	r1, r9
   87092:	4658      	mov	r0, fp
   87094:	f002 fe08 	bl	89ca8 <__ssprint_r>
   87098:	2800      	cmp	r0, #0
   8709a:	f47e af82 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   8709e:	aa2b      	add	r2, sp, #172	; 0xac
   870a0:	f898 3000 	ldrb.w	r3, [r8]
   870a4:	992a      	ldr	r1, [sp, #168]	; 0xa8
   870a6:	e74c      	b.n	86f42 <_svfprintf_r+0x115a>
   870a8:	aa28      	add	r2, sp, #160	; 0xa0
   870aa:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   870ae:	f002 fdfb 	bl	89ca8 <__ssprint_r>
   870b2:	2800      	cmp	r0, #0
   870b4:	f47e af75 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   870b8:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   870bc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   870be:	f7ff b960 	b.w	86382 <_svfprintf_r+0x59a>
   870c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   870c4:	465e      	mov	r6, fp
   870c6:	6812      	ldr	r2, [r2, #0]
   870c8:	930e      	str	r3, [sp, #56]	; 0x38
   870ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   870cc:	6013      	str	r3, [r2, #0]
   870ce:	f7ff b820 	b.w	86112 <_svfprintf_r+0x32a>
   870d2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   870d4:	9917      	ldr	r1, [sp, #92]	; 0x5c
   870d6:	3201      	adds	r2, #1
   870d8:	9819      	ldr	r0, [sp, #100]	; 0x64
   870da:	440c      	add	r4, r1
   870dc:	2a07      	cmp	r2, #7
   870de:	942a      	str	r4, [sp, #168]	; 0xa8
   870e0:	e9c9 0100 	strd	r0, r1, [r9]
   870e4:	9229      	str	r2, [sp, #164]	; 0xa4
   870e6:	f300 80c0 	bgt.w	8726a <_svfprintf_r+0x1482>
   870ea:	f109 0908 	add.w	r9, r9, #8
   870ee:	2b00      	cmp	r3, #0
   870f0:	daa6      	bge.n	87040 <_svfprintf_r+0x1258>
   870f2:	425d      	negs	r5, r3
   870f4:	3310      	adds	r3, #16
   870f6:	f280 8398 	bge.w	8782a <_svfprintf_r+0x1a42>
   870fa:	e9dd 8a0b 	ldrd	r8, sl, [sp, #44]	; 0x2c
   870fe:	4b21      	ldr	r3, [pc, #132]	; (87184 <_svfprintf_r+0x139c>)
   87100:	2710      	movs	r7, #16
   87102:	4619      	mov	r1, r3
   87104:	4623      	mov	r3, r4
   87106:	460c      	mov	r4, r1
   87108:	e005      	b.n	87116 <_svfprintf_r+0x132e>
   8710a:	f109 0908 	add.w	r9, r9, #8
   8710e:	3d10      	subs	r5, #16
   87110:	2d10      	cmp	r5, #16
   87112:	f340 82a0 	ble.w	87656 <_svfprintf_r+0x186e>
   87116:	3201      	adds	r2, #1
   87118:	3310      	adds	r3, #16
   8711a:	2a07      	cmp	r2, #7
   8711c:	e9cd 2329 	strd	r2, r3, [sp, #164]	; 0xa4
   87120:	e9c9 4700 	strd	r4, r7, [r9]
   87124:	ddf1      	ble.n	8710a <_svfprintf_r+0x1322>
   87126:	aa28      	add	r2, sp, #160	; 0xa0
   87128:	4651      	mov	r1, sl
   8712a:	4640      	mov	r0, r8
   8712c:	f002 fdbc 	bl	89ca8 <__ssprint_r>
   87130:	2800      	cmp	r0, #0
   87132:	f47e af36 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   87136:	e9dd 2329 	ldrd	r2, r3, [sp, #164]	; 0xa4
   8713a:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   8713e:	e7e6      	b.n	8710e <_svfprintf_r+0x1326>
   87140:	4630      	mov	r0, r6
   87142:	f002 fd49 	bl	89bd8 <strlen>
   87146:	46aa      	mov	sl, r5
   87148:	4607      	mov	r7, r0
   8714a:	f7ff b816 	b.w	8617a <_svfprintf_r+0x392>
   8714e:	4622      	mov	r2, r4
   87150:	461c      	mov	r4, r3
   87152:	4613      	mov	r3, r2
   87154:	462a      	mov	r2, r5
   87156:	3201      	adds	r2, #1
   87158:	920f      	str	r2, [sp, #60]	; 0x3c
   8715a:	f107 0208 	add.w	r2, r7, #8
   8715e:	e9c7 3800 	strd	r3, r8, [r7]
   87162:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87164:	4444      	add	r4, r8
   87166:	2b07      	cmp	r3, #7
   87168:	942a      	str	r4, [sp, #168]	; 0xa8
   8716a:	9329      	str	r3, [sp, #164]	; 0xa4
   8716c:	f73f af7f 	bgt.w	8706e <_svfprintf_r+0x1286>
   87170:	3301      	adds	r3, #1
   87172:	930f      	str	r3, [sp, #60]	; 0x3c
   87174:	f102 0908 	add.w	r9, r2, #8
   87178:	4617      	mov	r7, r2
   8717a:	f7ff bbb7 	b.w	868ec <_svfprintf_r+0xb04>
   8717e:	bf00      	nop
   87180:	0008ab48 	.word	0x0008ab48
   87184:	0008ab64 	.word	0x0008ab64
   87188:	0008ab50 	.word	0x0008ab50
   8718c:	9f07      	ldr	r7, [sp, #28]
   8718e:	2500      	movs	r5, #0
   87190:	05b9      	lsls	r1, r7, #22
   87192:	bf47      	ittee	mi
   87194:	920e      	strmi	r2, [sp, #56]	; 0x38
   87196:	b2e4      	uxtbmi	r4, r4
   87198:	9f07      	ldrpl	r7, [sp, #28]
   8719a:	920e      	strpl	r2, [sp, #56]	; 0x38
   8719c:	f7ff b80d 	b.w	861ba <_svfprintf_r+0x3d2>
   871a0:	9f07      	ldr	r7, [sp, #28]
   871a2:	920e      	str	r2, [sp, #56]	; 0x38
   871a4:	05b8      	lsls	r0, r7, #22
   871a6:	bf4c      	ite	mi
   871a8:	b2e4      	uxtbmi	r4, r4
   871aa:	9f07      	ldrpl	r7, [sp, #28]
   871ac:	2500      	movs	r5, #0
   871ae:	2301      	movs	r3, #1
   871b0:	f7fe bf65 	b.w	8607e <_svfprintf_r+0x296>
   871b4:	9f07      	ldr	r7, [sp, #28]
   871b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   871b8:	f417 7f00 	tst.w	r7, #512	; 0x200
   871bc:	bf14      	ite	ne
   871be:	f993 4000 	ldrsbne.w	r4, [r3]
   871c2:	681c      	ldreq	r4, [r3, #0]
   871c4:	920e      	str	r2, [sp, #56]	; 0x38
   871c6:	ea4f 75e4 	mov.w	r5, r4, asr #31
   871ca:	bf08      	it	eq
   871cc:	9f07      	ldreq	r7, [sp, #28]
   871ce:	4622      	mov	r2, r4
   871d0:	462b      	mov	r3, r5
   871d2:	f7ff b80d 	b.w	861f0 <_svfprintf_r+0x408>
   871d6:	4bc5      	ldr	r3, [pc, #788]	; (874ec <_svfprintf_r+0x1704>)
   871d8:	f7ff bb35 	b.w	86846 <_svfprintf_r+0xa5e>
   871dc:	4621      	mov	r1, r4
   871de:	461c      	mov	r4, r3
   871e0:	460b      	mov	r3, r1
   871e2:	3201      	adds	r2, #1
   871e4:	442c      	add	r4, r5
   871e6:	2a07      	cmp	r2, #7
   871e8:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   871ec:	e9c9 3500 	strd	r3, r5, [r9]
   871f0:	dc49      	bgt.n	87286 <_svfprintf_r+0x149e>
   871f2:	f109 0908 	add.w	r9, r9, #8
   871f6:	e435      	b.n	86a64 <_svfprintf_r+0xc7c>
   871f8:	232d      	movs	r3, #45	; 0x2d
   871fa:	461a      	mov	r2, r3
   871fc:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   87200:	f7ff b95d 	b.w	864be <_svfprintf_r+0x6d6>
   87204:	aa28      	add	r2, sp, #160	; 0xa0
   87206:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   8720a:	f002 fd4d 	bl	89ca8 <__ssprint_r>
   8720e:	2800      	cmp	r0, #0
   87210:	f47e aec7 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   87214:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
   87218:	3301      	adds	r3, #1
   8721a:	af2b      	add	r7, sp, #172	; 0xac
   8721c:	930f      	str	r3, [sp, #60]	; 0x3c
   8721e:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
   87222:	f7ff bb63 	b.w	868ec <_svfprintf_r+0xb04>
   87226:	aa28      	add	r2, sp, #160	; 0xa0
   87228:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   8722c:	f002 fd3c 	bl	89ca8 <__ssprint_r>
   87230:	2800      	cmp	r0, #0
   87232:	f47e aeb6 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   87236:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   8723a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8723c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8723e:	e6e8      	b.n	87012 <_svfprintf_r+0x122a>
   87240:	9a16      	ldr	r2, [sp, #88]	; 0x58
   87242:	18b5      	adds	r5, r6, r2
   87244:	eba5 050a 	sub.w	r5, r5, sl
   87248:	1ad3      	subs	r3, r2, r3
   8724a:	429d      	cmp	r5, r3
   8724c:	bfa8      	it	ge
   8724e:	461d      	movge	r5, r3
   87250:	e43b      	b.n	86aca <_svfprintf_r+0xce2>
   87252:	b2e4      	uxtb	r4, r4
   87254:	2500      	movs	r5, #0
   87256:	f7fe bec3 	b.w	85fe0 <_svfprintf_r+0x1f8>
   8725a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8725c:	930e      	str	r3, [sp, #56]	; 0x38
   8725e:	6812      	ldr	r2, [r2, #0]
   87260:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87262:	465e      	mov	r6, fp
   87264:	8013      	strh	r3, [r2, #0]
   87266:	f7fe bf54 	b.w	86112 <_svfprintf_r+0x32a>
   8726a:	aa28      	add	r2, sp, #160	; 0xa0
   8726c:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   87270:	f002 fd1a 	bl	89ca8 <__ssprint_r>
   87274:	2800      	cmp	r0, #0
   87276:	f47e ae94 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   8727a:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
   8727e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   87282:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87284:	e733      	b.n	870ee <_svfprintf_r+0x1306>
   87286:	aa28      	add	r2, sp, #160	; 0xa0
   87288:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   8728c:	f002 fd0c 	bl	89ca8 <__ssprint_r>
   87290:	2800      	cmp	r0, #0
   87292:	f47e ae86 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   87296:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   8729a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8729c:	f7ff bbe2 	b.w	86a64 <_svfprintf_r+0xc7c>
   872a0:	f04f 0a06 	mov.w	sl, #6
   872a4:	e4fc      	b.n	86ca0 <_svfprintf_r+0xeb8>
   872a6:	9f07      	ldr	r7, [sp, #28]
   872a8:	f7ff b977 	b.w	8659a <_svfprintf_r+0x7b2>
   872ac:	46b2      	mov	sl, r6
   872ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
   872b0:	9e12      	ldr	r6, [sp, #72]	; 0x48
   872b2:	460c      	mov	r4, r1
   872b4:	18f3      	adds	r3, r6, r3
   872b6:	459a      	cmp	sl, r3
   872b8:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
   872bc:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
   872c0:	4691      	mov	r9, r2
   872c2:	bf28      	it	cs
   872c4:	469a      	movcs	sl, r3
   872c6:	f7ff bbd4 	b.w	86a72 <_svfprintf_r+0xc8a>
   872ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
   872cc:	1cda      	adds	r2, r3, #3
   872ce:	db01      	blt.n	872d4 <_svfprintf_r+0x14ec>
   872d0:	459a      	cmp	sl, r3
   872d2:	da05      	bge.n	872e0 <_svfprintf_r+0x14f8>
   872d4:	f1a8 0802 	sub.w	r8, r8, #2
   872d8:	f028 0320 	bic.w	r3, r8, #32
   872dc:	9308      	str	r3, [sp, #32]
   872de:	e518      	b.n	86d12 <_svfprintf_r+0xf2a>
   872e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   872e2:	4619      	mov	r1, r3
   872e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   872e6:	4299      	cmp	r1, r3
   872e8:	f300 80ab 	bgt.w	87442 <_svfprintf_r+0x165a>
   872ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   872ee:	07d7      	lsls	r7, r2, #31
   872f0:	f140 81ca 	bpl.w	87688 <_svfprintf_r+0x18a0>
   872f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   872f6:	189f      	adds	r7, r3, r2
   872f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   872fa:	055d      	lsls	r5, r3, #21
   872fc:	f140 8218 	bpl.w	87730 <_svfprintf_r+0x1948>
   87300:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87302:	2b00      	cmp	r3, #0
   87304:	f300 81c2 	bgt.w	8768c <_svfprintf_r+0x18a4>
   87308:	f04f 0867 	mov.w	r8, #103	; 0x67
   8730c:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
   87310:	9308      	str	r3, [sp, #32]
   87312:	2300      	movs	r3, #0
   87314:	9311      	str	r3, [sp, #68]	; 0x44
   87316:	9313      	str	r3, [sp, #76]	; 0x4c
   87318:	e55e      	b.n	86dd8 <_svfprintf_r+0xff0>
   8731a:	222d      	movs	r2, #45	; 0x2d
   8731c:	f04f 0a00 	mov.w	sl, #0
   87320:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   87324:	f7fe bf38 	b.w	86198 <_svfprintf_r+0x3b0>
   87328:	aa28      	add	r2, sp, #160	; 0xa0
   8732a:	4649      	mov	r1, r9
   8732c:	4658      	mov	r0, fp
   8732e:	f002 fcbb 	bl	89ca8 <__ssprint_r>
   87332:	2800      	cmp	r0, #0
   87334:	f47e ae35 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   87338:	f898 3000 	ldrb.w	r3, [r8]
   8733c:	aa2b      	add	r2, sp, #172	; 0xac
   8733e:	992a      	ldr	r1, [sp, #168]	; 0xa8
   87340:	441e      	add	r6, r3
   87342:	e605      	b.n	86f50 <_svfprintf_r+0x1168>
   87344:	aa28      	add	r2, sp, #160	; 0xa0
   87346:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   8734a:	f002 fcad 	bl	89ca8 <__ssprint_r>
   8734e:	2800      	cmp	r0, #0
   87350:	f47e ae27 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   87354:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   87358:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8735a:	f7ff bb7b 	b.w	86a54 <_svfprintf_r+0xc6c>
   8735e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   87360:	991b      	ldr	r1, [sp, #108]	; 0x6c
   87362:	1af6      	subs	r6, r6, r3
   87364:	461a      	mov	r2, r3
   87366:	4630      	mov	r0, r6
   87368:	f002 fc64 	bl	89c34 <strncpy>
   8736c:	f898 3001 	ldrb.w	r3, [r8, #1]
   87370:	b10b      	cbz	r3, 87376 <_svfprintf_r+0x158e>
   87372:	f108 0801 	add.w	r8, r8, #1
   87376:	220a      	movs	r2, #10
   87378:	2300      	movs	r3, #0
   8737a:	4620      	mov	r0, r4
   8737c:	4629      	mov	r1, r5
   8737e:	f003 fa23 	bl	8a7c8 <__aeabi_uldivmod>
   87382:	f04f 0b00 	mov.w	fp, #0
   87386:	f7ff b95c 	b.w	86642 <_svfprintf_r+0x85a>
   8738a:	2003      	movs	r0, #3
   8738c:	a926      	add	r1, sp, #152	; 0x98
   8738e:	e9cd 0a00 	strd	r0, sl, [sp]
   87392:	9104      	str	r1, [sp, #16]
   87394:	a823      	add	r0, sp, #140	; 0x8c
   87396:	a922      	add	r1, sp, #136	; 0x88
   87398:	462b      	mov	r3, r5
   8739a:	e9cd 1002 	strd	r1, r0, [sp, #8]
   8739e:	463a      	mov	r2, r7
   873a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   873a2:	f000 faf5 	bl	87990 <_dtoa_r>
   873a6:	7803      	ldrb	r3, [r0, #0]
   873a8:	4606      	mov	r6, r0
   873aa:	2b30      	cmp	r3, #48	; 0x30
   873ac:	f000 81e5 	beq.w	8777a <_svfprintf_r+0x1992>
   873b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   873b2:	4453      	add	r3, sl
   873b4:	18f4      	adds	r4, r6, r3
   873b6:	4638      	mov	r0, r7
   873b8:	4629      	mov	r1, r5
   873ba:	2200      	movs	r2, #0
   873bc:	2300      	movs	r3, #0
   873be:	f003 f993 	bl	8a6e8 <__aeabi_dcmpeq>
   873c2:	b108      	cbz	r0, 873c8 <_svfprintf_r+0x15e0>
   873c4:	4627      	mov	r7, r4
   873c6:	e498      	b.n	86cfa <_svfprintf_r+0xf12>
   873c8:	9f26      	ldr	r7, [sp, #152]	; 0x98
   873ca:	42a7      	cmp	r7, r4
   873cc:	f4bf ac95 	bcs.w	86cfa <_svfprintf_r+0xf12>
   873d0:	2230      	movs	r2, #48	; 0x30
   873d2:	1c7b      	adds	r3, r7, #1
   873d4:	9326      	str	r3, [sp, #152]	; 0x98
   873d6:	703a      	strb	r2, [r7, #0]
   873d8:	9f26      	ldr	r7, [sp, #152]	; 0x98
   873da:	42bc      	cmp	r4, r7
   873dc:	d8f9      	bhi.n	873d2 <_svfprintf_r+0x15ea>
   873de:	e48c      	b.n	86cfa <_svfprintf_r+0xf12>
   873e0:	aa28      	add	r2, sp, #160	; 0xa0
   873e2:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   873e6:	f002 fc5f 	bl	89ca8 <__ssprint_r>
   873ea:	2800      	cmp	r0, #0
   873ec:	f47e add9 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   873f0:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   873f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   873f6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   873f8:	f7ff bb51 	b.w	86a9e <_svfprintf_r+0xcb6>
   873fc:	4657      	mov	r7, sl
   873fe:	f8cd a020 	str.w	sl, [sp, #32]
   87402:	940e      	str	r4, [sp, #56]	; 0x38
   87404:	4682      	mov	sl, r0
   87406:	9011      	str	r0, [sp, #68]	; 0x44
   87408:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
   8740c:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   87410:	f7fe bebf 	b.w	86192 <_svfprintf_r+0x3aa>
   87414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87416:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87418:	f003 0301 	and.w	r3, r3, #1
   8741c:	2a00      	cmp	r2, #0
   8741e:	ea43 030a 	orr.w	r3, r3, sl
   87422:	f340 81ba 	ble.w	8779a <_svfprintf_r+0x19b2>
   87426:	2b00      	cmp	r3, #0
   87428:	f040 8157 	bne.w	876da <_svfprintf_r+0x18f2>
   8742c:	f04f 0866 	mov.w	r8, #102	; 0x66
   87430:	9f12      	ldr	r7, [sp, #72]	; 0x48
   87432:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87434:	055a      	lsls	r2, r3, #21
   87436:	f100 812b 	bmi.w	87690 <_svfprintf_r+0x18a8>
   8743a:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
   8743e:	9308      	str	r3, [sp, #32]
   87440:	e767      	b.n	87312 <_svfprintf_r+0x152a>
   87442:	e9dd 3216 	ldrd	r3, r2, [sp, #88]	; 0x58
   87446:	189f      	adds	r7, r3, r2
   87448:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8744a:	2b00      	cmp	r3, #0
   8744c:	f340 8186 	ble.w	8775c <_svfprintf_r+0x1974>
   87450:	f04f 0867 	mov.w	r8, #103	; 0x67
   87454:	e7ed      	b.n	87432 <_svfprintf_r+0x164a>
   87456:	2330      	movs	r3, #48	; 0x30
   87458:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   8745c:	2358      	movs	r3, #88	; 0x58
   8745e:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
   87462:	9b07      	ldr	r3, [sp, #28]
   87464:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
   87468:	f043 0302 	orr.w	r3, r3, #2
   8746c:	930f      	str	r3, [sp, #60]	; 0x3c
   8746e:	f300 80d2 	bgt.w	87616 <_svfprintf_r+0x182e>
   87472:	2300      	movs	r3, #0
   87474:	ae3b      	add	r6, sp, #236	; 0xec
   87476:	930d      	str	r3, [sp, #52]	; 0x34
   87478:	9b07      	ldr	r3, [sp, #28]
   8747a:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   8747e:	9307      	str	r3, [sp, #28]
   87480:	f028 0320 	bic.w	r3, r8, #32
   87484:	9308      	str	r3, [sp, #32]
   87486:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87488:	1e1d      	subs	r5, r3, #0
   8748a:	f2c0 808c 	blt.w	875a6 <_svfprintf_r+0x17be>
   8748e:	2300      	movs	r3, #0
   87490:	9f14      	ldr	r7, [sp, #80]	; 0x50
   87492:	931e      	str	r3, [sp, #120]	; 0x78
   87494:	f1b8 0f61 	cmp.w	r8, #97	; 0x61
   87498:	f000 8125 	beq.w	876e6 <_svfprintf_r+0x18fe>
   8749c:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
   874a0:	f47f ac0b 	bne.w	86cba <_svfprintf_r+0xed2>
   874a4:	4629      	mov	r1, r5
   874a6:	aa22      	add	r2, sp, #136	; 0x88
   874a8:	4638      	mov	r0, r7
   874aa:	f002 fb4b 	bl	89b44 <frexp>
   874ae:	2200      	movs	r2, #0
   874b0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   874b4:	f002 feb0 	bl	8a218 <__aeabi_dmul>
   874b8:	2200      	movs	r2, #0
   874ba:	2300      	movs	r3, #0
   874bc:	4604      	mov	r4, r0
   874be:	460d      	mov	r5, r1
   874c0:	f003 f912 	bl	8a6e8 <__aeabi_dcmpeq>
   874c4:	b108      	cbz	r0, 874ca <_svfprintf_r+0x16e2>
   874c6:	2301      	movs	r3, #1
   874c8:	9322      	str	r3, [sp, #136]	; 0x88
   874ca:	4b09      	ldr	r3, [pc, #36]	; (874f0 <_svfprintf_r+0x1708>)
   874cc:	9310      	str	r3, [sp, #64]	; 0x40
   874ce:	f10a 33ff 	add.w	r3, sl, #4294967295
   874d2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
   874d6:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
   874da:	961f      	str	r6, [sp, #124]	; 0x7c
   874dc:	46b1      	mov	r9, r6
   874de:	e9cd b812 	strd	fp, r8, [sp, #72]	; 0x48
   874e2:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
   874e6:	461e      	mov	r6, r3
   874e8:	e00a      	b.n	87500 <_svfprintf_r+0x1718>
   874ea:	bf00      	nop
   874ec:	0008ab64 	.word	0x0008ab64
   874f0:	0008ab34 	.word	0x0008ab34
   874f4:	2200      	movs	r2, #0
   874f6:	2300      	movs	r3, #0
   874f8:	f003 f8f6 	bl	8a6e8 <__aeabi_dcmpeq>
   874fc:	b9f8      	cbnz	r0, 8753e <_svfprintf_r+0x1756>
   874fe:	46b9      	mov	r9, r7
   87500:	2200      	movs	r2, #0
   87502:	4bb7      	ldr	r3, [pc, #732]	; (877e0 <_svfprintf_r+0x19f8>)
   87504:	4620      	mov	r0, r4
   87506:	4629      	mov	r1, r5
   87508:	f002 fe86 	bl	8a218 <__aeabi_dmul>
   8750c:	460d      	mov	r5, r1
   8750e:	4604      	mov	r4, r0
   87510:	f003 f932 	bl	8a778 <__aeabi_d2iz>
   87514:	4680      	mov	r8, r0
   87516:	f002 fe15 	bl	8a144 <__aeabi_i2d>
   8751a:	464f      	mov	r7, r9
   8751c:	460b      	mov	r3, r1
   8751e:	4602      	mov	r2, r0
   87520:	4629      	mov	r1, r5
   87522:	4620      	mov	r0, r4
   87524:	f002 fcc0 	bl	89ea8 <__aeabi_dsub>
   87528:	f81a 3008 	ldrb.w	r3, [sl, r8]
   8752c:	46b3      	mov	fp, r6
   8752e:	f807 3b01 	strb.w	r3, [r7], #1
   87532:	1c73      	adds	r3, r6, #1
   87534:	4604      	mov	r4, r0
   87536:	460d      	mov	r5, r1
   87538:	f106 36ff 	add.w	r6, r6, #4294967295
   8753c:	d1da      	bne.n	874f4 <_svfprintf_r+0x170c>
   8753e:	2200      	movs	r2, #0
   87540:	4ba8      	ldr	r3, [pc, #672]	; (877e4 <_svfprintf_r+0x19fc>)
   87542:	4620      	mov	r0, r4
   87544:	4629      	mov	r1, r5
   87546:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   8754a:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
   8754c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   87550:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   87554:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   87558:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   8755c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   87560:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
   87564:	f003 f8e8 	bl	8a738 <__aeabi_dcmpgt>
   87568:	2800      	cmp	r0, #0
   8756a:	d137      	bne.n	875dc <_svfprintf_r+0x17f4>
   8756c:	4620      	mov	r0, r4
   8756e:	4629      	mov	r1, r5
   87570:	2200      	movs	r2, #0
   87572:	4b9c      	ldr	r3, [pc, #624]	; (877e4 <_svfprintf_r+0x19fc>)
   87574:	f003 f8b8 	bl	8a6e8 <__aeabi_dcmpeq>
   87578:	b110      	cbz	r0, 87580 <_svfprintf_r+0x1798>
   8757a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8757c:	07d9      	lsls	r1, r3, #31
   8757e:	d42d      	bmi.n	875dc <_svfprintf_r+0x17f4>
   87580:	9b11      	ldr	r3, [sp, #68]	; 0x44
   87582:	2b00      	cmp	r3, #0
   87584:	f6ff abb9 	blt.w	86cfa <_svfprintf_r+0xf12>
   87588:	2230      	movs	r2, #48	; 0x30
   8758a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8758c:	3301      	adds	r3, #1
   8758e:	443b      	add	r3, r7
   87590:	f807 2b01 	strb.w	r2, [r7], #1
   87594:	42bb      	cmp	r3, r7
   87596:	d1fb      	bne.n	87590 <_svfprintf_r+0x17a8>
   87598:	f7ff bbaf 	b.w	86cfa <_svfprintf_r+0xf12>
   8759c:	9a07      	ldr	r2, [sp, #28]
   8759e:	9307      	str	r3, [sp, #28]
   875a0:	920f      	str	r2, [sp, #60]	; 0x3c
   875a2:	2200      	movs	r2, #0
   875a4:	920d      	str	r2, [sp, #52]	; 0x34
   875a6:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   875aa:	461f      	mov	r7, r3
   875ac:	232d      	movs	r3, #45	; 0x2d
   875ae:	f104 4500 	add.w	r5, r4, #2147483648	; 0x80000000
   875b2:	931e      	str	r3, [sp, #120]	; 0x78
   875b4:	e76e      	b.n	87494 <_svfprintf_r+0x16ac>
   875b6:	aa28      	add	r2, sp, #160	; 0xa0
   875b8:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   875bc:	f002 fb74 	bl	89ca8 <__ssprint_r>
   875c0:	2800      	cmp	r0, #0
   875c2:	f47e acee 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   875c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   875c8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   875ca:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   875ce:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   875d0:	1ad3      	subs	r3, r2, r3
   875d2:	f7ff ba7a 	b.w	86aca <_svfprintf_r+0xce2>
   875d6:	eb06 040a 	add.w	r4, r6, sl
   875da:	e6ec      	b.n	873b6 <_svfprintf_r+0x15ce>
   875dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   875de:	9326      	str	r3, [sp, #152]	; 0x98
   875e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   875e2:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   875e6:	7bd9      	ldrb	r1, [r3, #15]
   875e8:	463b      	mov	r3, r7
   875ea:	4291      	cmp	r1, r2
   875ec:	d109      	bne.n	87602 <_svfprintf_r+0x181a>
   875ee:	2030      	movs	r0, #48	; 0x30
   875f0:	f803 0c01 	strb.w	r0, [r3, #-1]
   875f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   875f6:	1e5a      	subs	r2, r3, #1
   875f8:	9226      	str	r2, [sp, #152]	; 0x98
   875fa:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   875fe:	4291      	cmp	r1, r2
   87600:	d0f6      	beq.n	875f0 <_svfprintf_r+0x1808>
   87602:	2a39      	cmp	r2, #57	; 0x39
   87604:	bf0b      	itete	eq
   87606:	9a10      	ldreq	r2, [sp, #64]	; 0x40
   87608:	3201      	addne	r2, #1
   8760a:	7a92      	ldrbeq	r2, [r2, #10]
   8760c:	b2d2      	uxtbne	r2, r2
   8760e:	f803 2c01 	strb.w	r2, [r3, #-1]
   87612:	f7ff bb72 	b.w	86cfa <_svfprintf_r+0xf12>
   87616:	f10a 0101 	add.w	r1, sl, #1
   8761a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   8761c:	f001 fa56 	bl	88acc <_malloc_r>
   87620:	4606      	mov	r6, r0
   87622:	2800      	cmp	r0, #0
   87624:	f000 80f0 	beq.w	87808 <_svfprintf_r+0x1a20>
   87628:	900d      	str	r0, [sp, #52]	; 0x34
   8762a:	e725      	b.n	87478 <_svfprintf_r+0x1690>
   8762c:	2330      	movs	r3, #48	; 0x30
   8762e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   87632:	2378      	movs	r3, #120	; 0x78
   87634:	e713      	b.n	8745e <_svfprintf_r+0x1676>
   87636:	a926      	add	r1, sp, #152	; 0x98
   87638:	f10a 0401 	add.w	r4, sl, #1
   8763c:	9000      	str	r0, [sp, #0]
   8763e:	9104      	str	r1, [sp, #16]
   87640:	a823      	add	r0, sp, #140	; 0x8c
   87642:	a922      	add	r1, sp, #136	; 0x88
   87644:	9401      	str	r4, [sp, #4]
   87646:	e9cd 1002 	strd	r1, r0, [sp, #8]
   8764a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   8764c:	f000 f9a0 	bl	87990 <_dtoa_r>
   87650:	4606      	mov	r6, r0
   87652:	4434      	add	r4, r6
   87654:	e6af      	b.n	873b6 <_svfprintf_r+0x15ce>
   87656:	4621      	mov	r1, r4
   87658:	461c      	mov	r4, r3
   8765a:	460b      	mov	r3, r1
   8765c:	3201      	adds	r2, #1
   8765e:	442c      	add	r4, r5
   87660:	2a07      	cmp	r2, #7
   87662:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   87666:	e9c9 3500 	strd	r3, r5, [r9]
   8766a:	f77f ace7 	ble.w	8703c <_svfprintf_r+0x1254>
   8766e:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
   87672:	aa28      	add	r2, sp, #160	; 0xa0
   87674:	f002 fb18 	bl	89ca8 <__ssprint_r>
   87678:	2800      	cmp	r0, #0
   8767a:	f47e ac92 	bne.w	85fa2 <_svfprintf_r+0x1ba>
   8767e:	e9dd 2429 	ldrd	r2, r4, [sp, #164]	; 0xa4
   87682:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
   87686:	e4db      	b.n	87040 <_svfprintf_r+0x1258>
   87688:	9f12      	ldr	r7, [sp, #72]	; 0x48
   8768a:	e635      	b.n	872f8 <_svfprintf_r+0x1510>
   8768c:	f04f 0867 	mov.w	r8, #103	; 0x67
   87690:	2300      	movs	r3, #0
   87692:	981c      	ldr	r0, [sp, #112]	; 0x70
   87694:	9311      	str	r3, [sp, #68]	; 0x44
   87696:	9313      	str	r3, [sp, #76]	; 0x4c
   87698:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8769a:	7803      	ldrb	r3, [r0, #0]
   8769c:	2bff      	cmp	r3, #255	; 0xff
   8769e:	d00b      	beq.n	876b8 <_svfprintf_r+0x18d0>
   876a0:	4293      	cmp	r3, r2
   876a2:	da09      	bge.n	876b8 <_svfprintf_r+0x18d0>
   876a4:	7841      	ldrb	r1, [r0, #1]
   876a6:	1ad2      	subs	r2, r2, r3
   876a8:	b199      	cbz	r1, 876d2 <_svfprintf_r+0x18ea>
   876aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   876ac:	3001      	adds	r0, #1
   876ae:	3301      	adds	r3, #1
   876b0:	9313      	str	r3, [sp, #76]	; 0x4c
   876b2:	460b      	mov	r3, r1
   876b4:	2bff      	cmp	r3, #255	; 0xff
   876b6:	d1f3      	bne.n	876a0 <_svfprintf_r+0x18b8>
   876b8:	9212      	str	r2, [sp, #72]	; 0x48
   876ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   876bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   876be:	901c      	str	r0, [sp, #112]	; 0x70
   876c0:	4413      	add	r3, r2
   876c2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   876c4:	fb02 7703 	mla	r7, r2, r3, r7
   876c8:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
   876cc:	9308      	str	r3, [sp, #32]
   876ce:	f7ff bb83 	b.w	86dd8 <_svfprintf_r+0xff0>
   876d2:	9911      	ldr	r1, [sp, #68]	; 0x44
   876d4:	3101      	adds	r1, #1
   876d6:	9111      	str	r1, [sp, #68]	; 0x44
   876d8:	e7e0      	b.n	8769c <_svfprintf_r+0x18b4>
   876da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   876dc:	f04f 0866 	mov.w	r8, #102	; 0x66
   876e0:	18d7      	adds	r7, r2, r3
   876e2:	4457      	add	r7, sl
   876e4:	e6a5      	b.n	87432 <_svfprintf_r+0x164a>
   876e6:	4629      	mov	r1, r5
   876e8:	aa22      	add	r2, sp, #136	; 0x88
   876ea:	4638      	mov	r0, r7
   876ec:	f002 fa2a 	bl	89b44 <frexp>
   876f0:	2200      	movs	r2, #0
   876f2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   876f6:	f002 fd8f 	bl	8a218 <__aeabi_dmul>
   876fa:	2200      	movs	r2, #0
   876fc:	2300      	movs	r3, #0
   876fe:	4604      	mov	r4, r0
   87700:	460d      	mov	r5, r1
   87702:	f002 fff1 	bl	8a6e8 <__aeabi_dcmpeq>
   87706:	b108      	cbz	r0, 8770c <_svfprintf_r+0x1924>
   87708:	2301      	movs	r3, #1
   8770a:	9322      	str	r3, [sp, #136]	; 0x88
   8770c:	4b36      	ldr	r3, [pc, #216]	; (877e8 <_svfprintf_r+0x1a00>)
   8770e:	9310      	str	r3, [sp, #64]	; 0x40
   87710:	e6dd      	b.n	874ce <_svfprintf_r+0x16e6>
   87712:	2900      	cmp	r1, #0
   87714:	d154      	bne.n	877c0 <_svfprintf_r+0x19d8>
   87716:	2330      	movs	r3, #48	; 0x30
   87718:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
   8771c:	f10d 0393 	add.w	r3, sp, #147	; 0x93
   87720:	3230      	adds	r2, #48	; 0x30
   87722:	f803 2b01 	strb.w	r2, [r3], #1
   87726:	aa24      	add	r2, sp, #144	; 0x90
   87728:	1a9b      	subs	r3, r3, r2
   8772a:	931a      	str	r3, [sp, #104]	; 0x68
   8772c:	f7ff bb3e 	b.w	86dac <_svfprintf_r+0xfc4>
   87730:	f04f 0867 	mov.w	r8, #103	; 0x67
   87734:	e681      	b.n	8743a <_svfprintf_r+0x1652>
   87736:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87738:	2703      	movs	r7, #3
   8773a:	2b00      	cmp	r3, #0
   8773c:	bfb8      	it	lt
   8773e:	232d      	movlt	r3, #45	; 0x2d
   87740:	f04f 0100 	mov.w	r1, #0
   87744:	bfba      	itte	lt
   87746:	461a      	movlt	r2, r3
   87748:	f88d 3083 	strblt.w	r3, [sp, #131]	; 0x83
   8774c:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
   87750:	9708      	str	r7, [sp, #32]
   87752:	910d      	str	r1, [sp, #52]	; 0x34
   87754:	4e25      	ldr	r6, [pc, #148]	; (877ec <_svfprintf_r+0x1a04>)
   87756:	4b26      	ldr	r3, [pc, #152]	; (877f0 <_svfprintf_r+0x1a08>)
   87758:	f7fe beb7 	b.w	864ca <_svfprintf_r+0x6e2>
   8775c:	f1c3 0301 	rsb	r3, r3, #1
   87760:	441f      	add	r7, r3
   87762:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
   87766:	9308      	str	r3, [sp, #32]
   87768:	f04f 0867 	mov.w	r8, #103	; 0x67
   8776c:	e5d1      	b.n	87312 <_svfprintf_r+0x152a>
   8776e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87770:	07db      	lsls	r3, r3, #31
   87772:	f57f ab24 	bpl.w	86dbe <_svfprintf_r+0xfd6>
   87776:	f7ff bb20 	b.w	86dba <_svfprintf_r+0xfd2>
   8777a:	4638      	mov	r0, r7
   8777c:	4629      	mov	r1, r5
   8777e:	2200      	movs	r2, #0
   87780:	2300      	movs	r3, #0
   87782:	f002 ffb1 	bl	8a6e8 <__aeabi_dcmpeq>
   87786:	2800      	cmp	r0, #0
   87788:	f47f ae12 	bne.w	873b0 <_svfprintf_r+0x15c8>
   8778c:	f1ca 0301 	rsb	r3, sl, #1
   87790:	9322      	str	r3, [sp, #136]	; 0x88
   87792:	e60e      	b.n	873b2 <_svfprintf_r+0x15ca>
   87794:	464a      	mov	r2, r9
   87796:	4b17      	ldr	r3, [pc, #92]	; (877f4 <_svfprintf_r+0x1a0c>)
   87798:	e4e1      	b.n	8715e <_svfprintf_r+0x1376>
   8779a:	b92b      	cbnz	r3, 877a8 <_svfprintf_r+0x19c0>
   8779c:	2301      	movs	r3, #1
   8779e:	f04f 0866 	mov.w	r8, #102	; 0x66
   877a2:	9308      	str	r3, [sp, #32]
   877a4:	461f      	mov	r7, r3
   877a6:	e5b4      	b.n	87312 <_svfprintf_r+0x152a>
   877a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   877aa:	f04f 0866 	mov.w	r8, #102	; 0x66
   877ae:	1c5f      	adds	r7, r3, #1
   877b0:	4457      	add	r7, sl
   877b2:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
   877b6:	9308      	str	r3, [sp, #32]
   877b8:	e5ab      	b.n	87312 <_svfprintf_r+0x152a>
   877ba:	4b0e      	ldr	r3, [pc, #56]	; (877f4 <_svfprintf_r+0x1a0c>)
   877bc:	f7ff b8ae 	b.w	8691c <_svfprintf_r+0xb34>
   877c0:	f10d 0392 	add.w	r3, sp, #146	; 0x92
   877c4:	e7ac      	b.n	87720 <_svfprintf_r+0x1938>
   877c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   877c8:	f89b 8001 	ldrb.w	r8, [fp, #1]
   877cc:	f853 0b04 	ldr.w	r0, [r3], #4
   877d0:	4693      	mov	fp, r2
   877d2:	ea40 7ae0 	orr.w	sl, r0, r0, asr #31
   877d6:	930e      	str	r3, [sp, #56]	; 0x38
   877d8:	f7fe bb64 	b.w	85ea4 <_svfprintf_r+0xbc>
   877dc:	4b05      	ldr	r3, [pc, #20]	; (877f4 <_svfprintf_r+0x1a0c>)
   877de:	e500      	b.n	871e2 <_svfprintf_r+0x13fa>
   877e0:	40300000 	.word	0x40300000
   877e4:	3fe00000 	.word	0x3fe00000
   877e8:	0008ab20 	.word	0x0008ab20
   877ec:	0008ab18 	.word	0x0008ab18
   877f0:	0008ab1c 	.word	0x0008ab1c
   877f4:	0008ab64 	.word	0x0008ab64
   877f8:	f04f 32ff 	mov.w	r2, #4294967295
   877fc:	230c      	movs	r3, #12
   877fe:	9209      	str	r2, [sp, #36]	; 0x24
   87800:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   87802:	6013      	str	r3, [r2, #0]
   87804:	f7fe bbdc 	b.w	85fc0 <_svfprintf_r+0x1d8>
   87808:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8780a:	8993      	ldrh	r3, [r2, #12]
   8780c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   87810:	8193      	strh	r3, [r2, #12]
   87812:	f7fe bbce 	b.w	85fb2 <_svfprintf_r+0x1ca>
   87816:	4654      	mov	r4, sl
   87818:	4434      	add	r4, r6
   8781a:	e5cc      	b.n	873b6 <_svfprintf_r+0x15ce>
   8781c:	461f      	mov	r7, r3
   8781e:	f7ff ba19 	b.w	86c54 <_svfprintf_r+0xe6c>
   87822:	2302      	movs	r3, #2
   87824:	931a      	str	r3, [sp, #104]	; 0x68
   87826:	f7ff bac1 	b.w	86dac <_svfprintf_r+0xfc4>
   8782a:	4b04      	ldr	r3, [pc, #16]	; (8783c <_svfprintf_r+0x1a54>)
   8782c:	e716      	b.n	8765c <_svfprintf_r+0x1874>
   8782e:	461f      	mov	r7, r3
   87830:	f7ff badd 	b.w	86dee <_svfprintf_r+0x1006>
   87834:	461f      	mov	r7, r3
   87836:	f7ff ba03 	b.w	86c40 <_svfprintf_r+0xe58>
   8783a:	bf00      	nop
   8783c:	0008ab64 	.word	0x0008ab64

00087840 <register_fini>:
   87840:	4b02      	ldr	r3, [pc, #8]	; (8784c <register_fini+0xc>)
   87842:	b113      	cbz	r3, 8784a <register_fini+0xa>
   87844:	4802      	ldr	r0, [pc, #8]	; (87850 <register_fini+0x10>)
   87846:	f000 b805 	b.w	87854 <atexit>
   8784a:	4770      	bx	lr
   8784c:	00000000 	.word	0x00000000
   87850:	000887fd 	.word	0x000887fd

00087854 <atexit>:
   87854:	2300      	movs	r3, #0
   87856:	4601      	mov	r1, r0
   87858:	461a      	mov	r2, r3
   8785a:	4618      	mov	r0, r3
   8785c:	f002 baae 	b.w	89dbc <__register_exitproc>

00087860 <quorem>:
   87860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87864:	6903      	ldr	r3, [r0, #16]
   87866:	690e      	ldr	r6, [r1, #16]
   87868:	b083      	sub	sp, #12
   8786a:	42b3      	cmp	r3, r6
   8786c:	f2c0 8089 	blt.w	87982 <quorem+0x122>
   87870:	3e01      	subs	r6, #1
   87872:	f101 0514 	add.w	r5, r1, #20
   87876:	f100 0914 	add.w	r9, r0, #20
   8787a:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   8787e:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
   87882:	3301      	adds	r3, #1
   87884:	4682      	mov	sl, r0
   87886:	00b0      	lsls	r0, r6, #2
   87888:	9000      	str	r0, [sp, #0]
   8788a:	eb05 0800 	add.w	r8, r5, r0
   8788e:	429a      	cmp	r2, r3
   87890:	4448      	add	r0, r9
   87892:	fbb2 f7f3 	udiv	r7, r2, r3
   87896:	9001      	str	r0, [sp, #4]
   87898:	d33c      	bcc.n	87914 <quorem+0xb4>
   8789a:	2200      	movs	r2, #0
   8789c:	46ae      	mov	lr, r5
   8789e:	4614      	mov	r4, r2
   878a0:	46cc      	mov	ip, r9
   878a2:	f85e 3b04 	ldr.w	r3, [lr], #4
   878a6:	f8dc 0000 	ldr.w	r0, [ip]
   878aa:	fa1f fb83 	uxth.w	fp, r3
   878ae:	fb07 220b 	mla	r2, r7, fp, r2
   878b2:	0c1b      	lsrs	r3, r3, #16
   878b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   878b8:	fb07 bb03 	mla	fp, r7, r3, fp
   878bc:	b293      	uxth	r3, r2
   878be:	1ae3      	subs	r3, r4, r3
   878c0:	b282      	uxth	r2, r0
   878c2:	fa1f f48b 	uxth.w	r4, fp
   878c6:	4413      	add	r3, r2
   878c8:	ebc4 4410 	rsb	r4, r4, r0, lsr #16
   878cc:	eb04 4423 	add.w	r4, r4, r3, asr #16
   878d0:	b29b      	uxth	r3, r3
   878d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   878d6:	45f0      	cmp	r8, lr
   878d8:	f84c 3b04 	str.w	r3, [ip], #4
   878dc:	ea4f 4424 	mov.w	r4, r4, asr #16
   878e0:	ea4f 421b 	mov.w	r2, fp, lsr #16
   878e4:	d2dd      	bcs.n	878a2 <quorem+0x42>
   878e6:	9b00      	ldr	r3, [sp, #0]
   878e8:	f859 3003 	ldr.w	r3, [r9, r3]
   878ec:	b993      	cbnz	r3, 87914 <quorem+0xb4>
   878ee:	9a01      	ldr	r2, [sp, #4]
   878f0:	1f13      	subs	r3, r2, #4
   878f2:	4599      	cmp	r9, r3
   878f4:	d20c      	bcs.n	87910 <quorem+0xb0>
   878f6:	f852 3c04 	ldr.w	r3, [r2, #-4]
   878fa:	b94b      	cbnz	r3, 87910 <quorem+0xb0>
   878fc:	f1a2 0308 	sub.w	r3, r2, #8
   87900:	e002      	b.n	87908 <quorem+0xa8>
   87902:	681a      	ldr	r2, [r3, #0]
   87904:	3b04      	subs	r3, #4
   87906:	b91a      	cbnz	r2, 87910 <quorem+0xb0>
   87908:	4599      	cmp	r9, r3
   8790a:	f106 36ff 	add.w	r6, r6, #4294967295
   8790e:	d3f8      	bcc.n	87902 <quorem+0xa2>
   87910:	f8ca 6010 	str.w	r6, [sl, #16]
   87914:	4650      	mov	r0, sl
   87916:	f001 fe65 	bl	895e4 <__mcmp>
   8791a:	2800      	cmp	r0, #0
   8791c:	db2d      	blt.n	8797a <quorem+0x11a>
   8791e:	4648      	mov	r0, r9
   87920:	2300      	movs	r3, #0
   87922:	3701      	adds	r7, #1
   87924:	f855 1b04 	ldr.w	r1, [r5], #4
   87928:	6804      	ldr	r4, [r0, #0]
   8792a:	b28a      	uxth	r2, r1
   8792c:	1a9a      	subs	r2, r3, r2
   8792e:	0c0b      	lsrs	r3, r1, #16
   87930:	b2a1      	uxth	r1, r4
   87932:	440a      	add	r2, r1
   87934:	ebc3 4314 	rsb	r3, r3, r4, lsr #16
   87938:	eb03 4322 	add.w	r3, r3, r2, asr #16
   8793c:	b292      	uxth	r2, r2
   8793e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   87942:	45a8      	cmp	r8, r5
   87944:	f840 2b04 	str.w	r2, [r0], #4
   87948:	ea4f 4323 	mov.w	r3, r3, asr #16
   8794c:	d2ea      	bcs.n	87924 <quorem+0xc4>
   8794e:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
   87952:	eb09 0386 	add.w	r3, r9, r6, lsl #2
   87956:	b982      	cbnz	r2, 8797a <quorem+0x11a>
   87958:	1f1a      	subs	r2, r3, #4
   8795a:	4591      	cmp	r9, r2
   8795c:	d20b      	bcs.n	87976 <quorem+0x116>
   8795e:	f853 2c04 	ldr.w	r2, [r3, #-4]
   87962:	b942      	cbnz	r2, 87976 <quorem+0x116>
   87964:	3b08      	subs	r3, #8
   87966:	e002      	b.n	8796e <quorem+0x10e>
   87968:	681a      	ldr	r2, [r3, #0]
   8796a:	3b04      	subs	r3, #4
   8796c:	b91a      	cbnz	r2, 87976 <quorem+0x116>
   8796e:	4599      	cmp	r9, r3
   87970:	f106 36ff 	add.w	r6, r6, #4294967295
   87974:	d3f8      	bcc.n	87968 <quorem+0x108>
   87976:	f8ca 6010 	str.w	r6, [sl, #16]
   8797a:	4638      	mov	r0, r7
   8797c:	b003      	add	sp, #12
   8797e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87982:	2000      	movs	r0, #0
   87984:	b003      	add	sp, #12
   87986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8798a:	bf00      	nop
   8798c:	0000      	movs	r0, r0
   8798e:	0000      	movs	r0, r0

00087990 <_dtoa_r>:
   87990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87994:	461f      	mov	r7, r3
   87996:	4616      	mov	r6, r2
   87998:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8799a:	b097      	sub	sp, #92	; 0x5c
   8799c:	4604      	mov	r4, r0
   8799e:	e9cd 6702 	strd	r6, r7, [sp, #8]
   879a2:	b14b      	cbz	r3, 879b8 <_dtoa_r+0x28>
   879a4:	2201      	movs	r2, #1
   879a6:	6c45      	ldr	r5, [r0, #68]	; 0x44
   879a8:	4619      	mov	r1, r3
   879aa:	40aa      	lsls	r2, r5
   879ac:	e9c3 5201 	strd	r5, r2, [r3, #4]
   879b0:	f001 fc2c 	bl	8920c <_Bfree>
   879b4:	2300      	movs	r3, #0
   879b6:	6423      	str	r3, [r4, #64]	; 0x40
   879b8:	1e3e      	subs	r6, r7, #0
   879ba:	bfb4      	ite	lt
   879bc:	2301      	movlt	r3, #1
   879be:	2300      	movge	r3, #0
   879c0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   879c2:	bfb8      	it	lt
   879c4:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
   879c8:	6013      	str	r3, [r2, #0]
   879ca:	4b75      	ldr	r3, [pc, #468]	; (87ba0 <_dtoa_r+0x210>)
   879cc:	bfb8      	it	lt
   879ce:	9603      	strlt	r6, [sp, #12]
   879d0:	43b3      	bics	r3, r6
   879d2:	f000 80af 	beq.w	87b34 <_dtoa_r+0x1a4>
   879d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   879da:	4610      	mov	r0, r2
   879dc:	4619      	mov	r1, r3
   879de:	2200      	movs	r2, #0
   879e0:	2300      	movs	r3, #0
   879e2:	e9cd 0108 	strd	r0, r1, [sp, #32]
   879e6:	f002 fe7f 	bl	8a6e8 <__aeabi_dcmpeq>
   879ea:	4607      	mov	r7, r0
   879ec:	b178      	cbz	r0, 87a0e <_dtoa_r+0x7e>
   879ee:	2301      	movs	r3, #1
   879f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
   879f2:	6013      	str	r3, [r2, #0]
   879f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   879f6:	2b00      	cmp	r3, #0
   879f8:	f000 8339 	beq.w	8806e <_dtoa_r+0x6de>
   879fc:	4b69      	ldr	r3, [pc, #420]	; (87ba4 <_dtoa_r+0x214>)
   879fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87a00:	6013      	str	r3, [r2, #0]
   87a02:	3b01      	subs	r3, #1
   87a04:	9304      	str	r3, [sp, #16]
   87a06:	9804      	ldr	r0, [sp, #16]
   87a08:	b017      	add	sp, #92	; 0x5c
   87a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87a0e:	aa14      	add	r2, sp, #80	; 0x50
   87a10:	ab15      	add	r3, sp, #84	; 0x54
   87a12:	e9cd 3200 	strd	r3, r2, [sp]
   87a16:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   87a1a:	4620      	mov	r0, r4
   87a1c:	4642      	mov	r2, r8
   87a1e:	464b      	mov	r3, r9
   87a20:	f001 fe7c 	bl	8971c <__d2b>
   87a24:	0d35      	lsrs	r5, r6, #20
   87a26:	4683      	mov	fp, r0
   87a28:	f040 809a 	bne.w	87b60 <_dtoa_r+0x1d0>
   87a2c:	e9dd 8514 	ldrd	r8, r5, [sp, #80]	; 0x50
   87a30:	4445      	add	r5, r8
   87a32:	f205 4332 	addw	r3, r5, #1074	; 0x432
   87a36:	2b20      	cmp	r3, #32
   87a38:	f340 83e9 	ble.w	8820e <_dtoa_r+0x87e>
   87a3c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   87a40:	409e      	lsls	r6, r3
   87a42:	9b02      	ldr	r3, [sp, #8]
   87a44:	f205 4012 	addw	r0, r5, #1042	; 0x412
   87a48:	fa23 f000 	lsr.w	r0, r3, r0
   87a4c:	4330      	orrs	r0, r6
   87a4e:	f002 fb69 	bl	8a124 <__aeabi_ui2d>
   87a52:	4602      	mov	r2, r0
   87a54:	2001      	movs	r0, #1
   87a56:	3d01      	subs	r5, #1
   87a58:	900d      	str	r0, [sp, #52]	; 0x34
   87a5a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
   87a5e:	4610      	mov	r0, r2
   87a60:	4619      	mov	r1, r3
   87a62:	2200      	movs	r2, #0
   87a64:	4b50      	ldr	r3, [pc, #320]	; (87ba8 <_dtoa_r+0x218>)
   87a66:	f002 fa1f 	bl	89ea8 <__aeabi_dsub>
   87a6a:	a347      	add	r3, pc, #284	; (adr r3, 87b88 <_dtoa_r+0x1f8>)
   87a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   87a70:	f002 fbd2 	bl	8a218 <__aeabi_dmul>
   87a74:	a346      	add	r3, pc, #280	; (adr r3, 87b90 <_dtoa_r+0x200>)
   87a76:	e9d3 2300 	ldrd	r2, r3, [r3]
   87a7a:	f002 fa17 	bl	89eac <__adddf3>
   87a7e:	4606      	mov	r6, r0
   87a80:	4628      	mov	r0, r5
   87a82:	460f      	mov	r7, r1
   87a84:	f002 fb5e 	bl	8a144 <__aeabi_i2d>
   87a88:	a343      	add	r3, pc, #268	; (adr r3, 87b98 <_dtoa_r+0x208>)
   87a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   87a8e:	f002 fbc3 	bl	8a218 <__aeabi_dmul>
   87a92:	4602      	mov	r2, r0
   87a94:	460b      	mov	r3, r1
   87a96:	4630      	mov	r0, r6
   87a98:	4639      	mov	r1, r7
   87a9a:	f002 fa07 	bl	89eac <__adddf3>
   87a9e:	4606      	mov	r6, r0
   87aa0:	460f      	mov	r7, r1
   87aa2:	f002 fe69 	bl	8a778 <__aeabi_d2iz>
   87aa6:	2200      	movs	r2, #0
   87aa8:	4682      	mov	sl, r0
   87aaa:	2300      	movs	r3, #0
   87aac:	4630      	mov	r0, r6
   87aae:	4639      	mov	r1, r7
   87ab0:	f002 fe24 	bl	8a6fc <__aeabi_dcmplt>
   87ab4:	2800      	cmp	r0, #0
   87ab6:	f040 82cd 	bne.w	88054 <_dtoa_r+0x6c4>
   87aba:	eba8 0505 	sub.w	r5, r8, r5
   87abe:	1e6b      	subs	r3, r5, #1
   87ac0:	f1ba 0f16 	cmp.w	sl, #22
   87ac4:	9305      	str	r3, [sp, #20]
   87ac6:	f200 82ba 	bhi.w	8803e <_dtoa_r+0x6ae>
   87aca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   87ace:	4b37      	ldr	r3, [pc, #220]	; (87bac <_dtoa_r+0x21c>)
   87ad0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   87ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
   87ad8:	f002 fe10 	bl	8a6fc <__aeabi_dcmplt>
   87adc:	2800      	cmp	r0, #0
   87ade:	d06b      	beq.n	87bb8 <_dtoa_r+0x228>
   87ae0:	2300      	movs	r3, #0
   87ae2:	930c      	str	r3, [sp, #48]	; 0x30
   87ae4:	9b05      	ldr	r3, [sp, #20]
   87ae6:	f10a 3aff 	add.w	sl, sl, #4294967295
   87aea:	2b00      	cmp	r3, #0
   87aec:	f2c0 82ad 	blt.w	8804a <_dtoa_r+0x6ba>
   87af0:	f04f 0900 	mov.w	r9, #0
   87af4:	f1ba 0f00 	cmp.w	sl, #0
   87af8:	da64      	bge.n	87bc4 <_dtoa_r+0x234>
   87afa:	f1ca 0300 	rsb	r3, sl, #0
   87afe:	930b      	str	r3, [sp, #44]	; 0x2c
   87b00:	9b20      	ldr	r3, [sp, #128]	; 0x80
   87b02:	eba9 090a 	sub.w	r9, r9, sl
   87b06:	2b09      	cmp	r3, #9
   87b08:	f8cd a018 	str.w	sl, [sp, #24]
   87b0c:	f04f 0a00 	mov.w	sl, #0
   87b10:	d861      	bhi.n	87bd6 <_dtoa_r+0x246>
   87b12:	2b05      	cmp	r3, #5
   87b14:	f340 8379 	ble.w	8820a <_dtoa_r+0x87a>
   87b18:	2500      	movs	r5, #0
   87b1a:	3b04      	subs	r3, #4
   87b1c:	9320      	str	r3, [sp, #128]	; 0x80
   87b1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   87b20:	3b02      	subs	r3, #2
   87b22:	2b03      	cmp	r3, #3
   87b24:	f200 8652 	bhi.w	887cc <_dtoa_r+0xe3c>
   87b28:	e8df f013 	tbh	[pc, r3, lsl #1]
   87b2c:	04a204a5 	.word	0x04a204a5
   87b30:	0495047a 	.word	0x0495047a
   87b34:	f242 730f 	movw	r3, #9999	; 0x270f
   87b38:	9a22      	ldr	r2, [sp, #136]	; 0x88
   87b3a:	f3c6 0613 	ubfx	r6, r6, #0, #20
   87b3e:	6013      	str	r3, [r2, #0]
   87b40:	9b02      	ldr	r3, [sp, #8]
   87b42:	4333      	orrs	r3, r6
   87b44:	d119      	bne.n	87b7a <_dtoa_r+0x1ea>
   87b46:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87b48:	2b00      	cmp	r3, #0
   87b4a:	f000 8636 	beq.w	887ba <_dtoa_r+0xe2a>
   87b4e:	4b18      	ldr	r3, [pc, #96]	; (87bb0 <_dtoa_r+0x220>)
   87b50:	9304      	str	r3, [sp, #16]
   87b52:	3308      	adds	r3, #8
   87b54:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87b56:	9804      	ldr	r0, [sp, #16]
   87b58:	6013      	str	r3, [r2, #0]
   87b5a:	b017      	add	sp, #92	; 0x5c
   87b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87b60:	f3c9 0113 	ubfx	r1, r9, #0, #20
   87b64:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   87b68:	4642      	mov	r2, r8
   87b6a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   87b6e:	970d      	str	r7, [sp, #52]	; 0x34
   87b70:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   87b74:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
   87b78:	e771      	b.n	87a5e <_dtoa_r+0xce>
   87b7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87b7c:	2b00      	cmp	r3, #0
   87b7e:	f040 8433 	bne.w	883e8 <_dtoa_r+0xa58>
   87b82:	4b0c      	ldr	r3, [pc, #48]	; (87bb4 <_dtoa_r+0x224>)
   87b84:	9304      	str	r3, [sp, #16]
   87b86:	e73e      	b.n	87a06 <_dtoa_r+0x76>
   87b88:	636f4361 	.word	0x636f4361
   87b8c:	3fd287a7 	.word	0x3fd287a7
   87b90:	8b60c8b3 	.word	0x8b60c8b3
   87b94:	3fc68a28 	.word	0x3fc68a28
   87b98:	509f79fb 	.word	0x509f79fb
   87b9c:	3fd34413 	.word	0x3fd34413
   87ba0:	7ff00000 	.word	0x7ff00000
   87ba4:	0008ab51 	.word	0x0008ab51
   87ba8:	3ff80000 	.word	0x3ff80000
   87bac:	0008abc0 	.word	0x0008abc0
   87bb0:	0008ab78 	.word	0x0008ab78
   87bb4:	0008ab74 	.word	0x0008ab74
   87bb8:	9b05      	ldr	r3, [sp, #20]
   87bba:	900c      	str	r0, [sp, #48]	; 0x30
   87bbc:	2b00      	cmp	r3, #0
   87bbe:	f2c0 8244 	blt.w	8804a <_dtoa_r+0x6ba>
   87bc2:	4681      	mov	r9, r0
   87bc4:	9b05      	ldr	r3, [sp, #20]
   87bc6:	4453      	add	r3, sl
   87bc8:	e9cd 3a05 	strd	r3, sl, [sp, #20]
   87bcc:	2300      	movs	r3, #0
   87bce:	930b      	str	r3, [sp, #44]	; 0x2c
   87bd0:	9b20      	ldr	r3, [sp, #128]	; 0x80
   87bd2:	2b09      	cmp	r3, #9
   87bd4:	d99d      	bls.n	87b12 <_dtoa_r+0x182>
   87bd6:	2300      	movs	r3, #0
   87bd8:	f04f 36ff 	mov.w	r6, #4294967295
   87bdc:	2501      	movs	r5, #1
   87bde:	9320      	str	r3, [sp, #128]	; 0x80
   87be0:	9607      	str	r6, [sp, #28]
   87be2:	950a      	str	r5, [sp, #40]	; 0x28
   87be4:	9321      	str	r3, [sp, #132]	; 0x84
   87be6:	2100      	movs	r1, #0
   87be8:	9610      	str	r6, [sp, #64]	; 0x40
   87bea:	6461      	str	r1, [r4, #68]	; 0x44
   87bec:	4620      	mov	r0, r4
   87bee:	f001 fae7 	bl	891c0 <_Balloc>
   87bf2:	2e0e      	cmp	r6, #14
   87bf4:	9004      	str	r0, [sp, #16]
   87bf6:	6420      	str	r0, [r4, #64]	; 0x40
   87bf8:	f200 8134 	bhi.w	87e64 <_dtoa_r+0x4d4>
   87bfc:	2d00      	cmp	r5, #0
   87bfe:	f000 8131 	beq.w	87e64 <_dtoa_r+0x4d4>
   87c02:	9906      	ldr	r1, [sp, #24]
   87c04:	2900      	cmp	r1, #0
   87c06:	f340 847f 	ble.w	88508 <_dtoa_r+0xb78>
   87c0a:	4baa      	ldr	r3, [pc, #680]	; (87eb4 <_dtoa_r+0x524>)
   87c0c:	f001 020f 	and.w	r2, r1, #15
   87c10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87c14:	110d      	asrs	r5, r1, #4
   87c16:	e9d3 2300 	ldrd	r2, r3, [r3]
   87c1a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   87c1e:	06ea      	lsls	r2, r5, #27
   87c20:	f140 8448 	bpl.w	884b4 <_dtoa_r+0xb24>
   87c24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   87c28:	4ba3      	ldr	r3, [pc, #652]	; (87eb8 <_dtoa_r+0x528>)
   87c2a:	2703      	movs	r7, #3
   87c2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   87c30:	f002 fc1c 	bl	8a46c <__aeabi_ddiv>
   87c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
   87c38:	f005 050f 	and.w	r5, r5, #15
   87c3c:	b17d      	cbz	r5, 87c5e <_dtoa_r+0x2ce>
   87c3e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   87c42:	4e9d      	ldr	r6, [pc, #628]	; (87eb8 <_dtoa_r+0x528>)
   87c44:	07eb      	lsls	r3, r5, #31
   87c46:	d504      	bpl.n	87c52 <_dtoa_r+0x2c2>
   87c48:	e9d6 2300 	ldrd	r2, r3, [r6]
   87c4c:	f002 fae4 	bl	8a218 <__aeabi_dmul>
   87c50:	3701      	adds	r7, #1
   87c52:	106d      	asrs	r5, r5, #1
   87c54:	f106 0608 	add.w	r6, r6, #8
   87c58:	d1f4      	bne.n	87c44 <_dtoa_r+0x2b4>
   87c5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   87c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   87c62:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   87c66:	f002 fc01 	bl	8a46c <__aeabi_ddiv>
   87c6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   87c6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87c70:	b143      	cbz	r3, 87c84 <_dtoa_r+0x2f4>
   87c72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   87c76:	2200      	movs	r2, #0
   87c78:	4b90      	ldr	r3, [pc, #576]	; (87ebc <_dtoa_r+0x52c>)
   87c7a:	f002 fd3f 	bl	8a6fc <__aeabi_dcmplt>
   87c7e:	2800      	cmp	r0, #0
   87c80:	f040 852a 	bne.w	886d8 <_dtoa_r+0xd48>
   87c84:	4638      	mov	r0, r7
   87c86:	f002 fa5d 	bl	8a144 <__aeabi_i2d>
   87c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   87c8e:	f002 fac3 	bl	8a218 <__aeabi_dmul>
   87c92:	4b8b      	ldr	r3, [pc, #556]	; (87ec0 <_dtoa_r+0x530>)
   87c94:	2200      	movs	r2, #0
   87c96:	f002 f909 	bl	89eac <__adddf3>
   87c9a:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   87c9e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   87ca2:	930f      	str	r3, [sp, #60]	; 0x3c
   87ca4:	9b07      	ldr	r3, [sp, #28]
   87ca6:	2b00      	cmp	r3, #0
   87ca8:	f000 80bc 	beq.w	87e24 <_dtoa_r+0x494>
   87cac:	9b06      	ldr	r3, [sp, #24]
   87cae:	9312      	str	r3, [sp, #72]	; 0x48
   87cb0:	9b07      	ldr	r3, [sp, #28]
   87cb2:	9311      	str	r3, [sp, #68]	; 0x44
   87cb4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   87cb8:	4639      	mov	r1, r7
   87cba:	4630      	mov	r0, r6
   87cbc:	f002 fd5c 	bl	8a778 <__aeabi_d2iz>
   87cc0:	4605      	mov	r5, r0
   87cc2:	f002 fa3f 	bl	8a144 <__aeabi_i2d>
   87cc6:	4602      	mov	r2, r0
   87cc8:	460b      	mov	r3, r1
   87cca:	4630      	mov	r0, r6
   87ccc:	4639      	mov	r1, r7
   87cce:	f002 f8eb 	bl	89ea8 <__aeabi_dsub>
   87cd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   87cd4:	4b77      	ldr	r3, [pc, #476]	; (87eb4 <_dtoa_r+0x524>)
   87cd6:	4606      	mov	r6, r0
   87cd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87cdc:	460f      	mov	r7, r1
   87cde:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
   87ce2:	980a      	ldr	r0, [sp, #40]	; 0x28
   87ce4:	e9cd 1202 	strd	r1, r2, [sp, #8]
   87ce8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   87cec:	9904      	ldr	r1, [sp, #16]
   87cee:	3530      	adds	r5, #48	; 0x30
   87cf0:	fa5f f885 	uxtb.w	r8, r5
   87cf4:	1c4d      	adds	r5, r1, #1
   87cf6:	2800      	cmp	r0, #0
   87cf8:	f000 8480 	beq.w	885fc <_dtoa_r+0xc6c>
   87cfc:	2000      	movs	r0, #0
   87cfe:	4971      	ldr	r1, [pc, #452]	; (87ec4 <_dtoa_r+0x534>)
   87d00:	f002 fbb4 	bl	8a46c <__aeabi_ddiv>
   87d04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   87d08:	f002 f8ce 	bl	89ea8 <__aeabi_dsub>
   87d0c:	9b04      	ldr	r3, [sp, #16]
   87d0e:	4632      	mov	r2, r6
   87d10:	f883 8000 	strb.w	r8, [r3]
   87d14:	463b      	mov	r3, r7
   87d16:	e9cd 0102 	strd	r0, r1, [sp, #8]
   87d1a:	f002 fd0d 	bl	8a738 <__aeabi_dcmpgt>
   87d1e:	2800      	cmp	r0, #0
   87d20:	f040 84bb 	bne.w	8869a <_dtoa_r+0xd0a>
   87d24:	4632      	mov	r2, r6
   87d26:	463b      	mov	r3, r7
   87d28:	2000      	movs	r0, #0
   87d2a:	4964      	ldr	r1, [pc, #400]	; (87ebc <_dtoa_r+0x52c>)
   87d2c:	f002 f8bc 	bl	89ea8 <__aeabi_dsub>
   87d30:	4602      	mov	r2, r0
   87d32:	460b      	mov	r3, r1
   87d34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   87d38:	f002 fcfe 	bl	8a738 <__aeabi_dcmpgt>
   87d3c:	2800      	cmp	r0, #0
   87d3e:	f040 8538 	bne.w	887b2 <_dtoa_r+0xe22>
   87d42:	9b11      	ldr	r3, [sp, #68]	; 0x44
   87d44:	2b01      	cmp	r3, #1
   87d46:	f000 8089 	beq.w	87e5c <_dtoa_r+0x4cc>
   87d4a:	9a04      	ldr	r2, [sp, #16]
   87d4c:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
   87d50:	4413      	add	r3, r2
   87d52:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
   87d56:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   87d5a:	4699      	mov	r9, r3
   87d5c:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   87d60:	46a0      	mov	r8, r4
   87d62:	e00f      	b.n	87d84 <_dtoa_r+0x3f4>
   87d64:	4632      	mov	r2, r6
   87d66:	463b      	mov	r3, r7
   87d68:	2000      	movs	r0, #0
   87d6a:	4954      	ldr	r1, [pc, #336]	; (87ebc <_dtoa_r+0x52c>)
   87d6c:	f002 f89c 	bl	89ea8 <__aeabi_dsub>
   87d70:	4652      	mov	r2, sl
   87d72:	465b      	mov	r3, fp
   87d74:	f002 fcc2 	bl	8a6fc <__aeabi_dcmplt>
   87d78:	2800      	cmp	r0, #0
   87d7a:	f040 84f2 	bne.w	88762 <_dtoa_r+0xdd2>
   87d7e:	45a9      	cmp	r9, r5
   87d80:	f000 84f8 	beq.w	88774 <_dtoa_r+0xde4>
   87d84:	4650      	mov	r0, sl
   87d86:	4659      	mov	r1, fp
   87d88:	2200      	movs	r2, #0
   87d8a:	4b4f      	ldr	r3, [pc, #316]	; (87ec8 <_dtoa_r+0x538>)
   87d8c:	f002 fa44 	bl	8a218 <__aeabi_dmul>
   87d90:	2200      	movs	r2, #0
   87d92:	4b4d      	ldr	r3, [pc, #308]	; (87ec8 <_dtoa_r+0x538>)
   87d94:	4682      	mov	sl, r0
   87d96:	468b      	mov	fp, r1
   87d98:	4630      	mov	r0, r6
   87d9a:	4639      	mov	r1, r7
   87d9c:	f002 fa3c 	bl	8a218 <__aeabi_dmul>
   87da0:	460f      	mov	r7, r1
   87da2:	4606      	mov	r6, r0
   87da4:	f002 fce8 	bl	8a778 <__aeabi_d2iz>
   87da8:	4604      	mov	r4, r0
   87daa:	f002 f9cb 	bl	8a144 <__aeabi_i2d>
   87dae:	4602      	mov	r2, r0
   87db0:	460b      	mov	r3, r1
   87db2:	4630      	mov	r0, r6
   87db4:	4639      	mov	r1, r7
   87db6:	f002 f877 	bl	89ea8 <__aeabi_dsub>
   87dba:	3430      	adds	r4, #48	; 0x30
   87dbc:	b2e4      	uxtb	r4, r4
   87dbe:	f805 4b01 	strb.w	r4, [r5], #1
   87dc2:	4652      	mov	r2, sl
   87dc4:	465b      	mov	r3, fp
   87dc6:	4606      	mov	r6, r0
   87dc8:	460f      	mov	r7, r1
   87dca:	f002 fc97 	bl	8a6fc <__aeabi_dcmplt>
   87dce:	2800      	cmp	r0, #0
   87dd0:	d0c8      	beq.n	87d64 <_dtoa_r+0x3d4>
   87dd2:	4644      	mov	r4, r8
   87dd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87dd6:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   87dda:	3301      	adds	r3, #1
   87ddc:	9306      	str	r3, [sp, #24]
   87dde:	4659      	mov	r1, fp
   87de0:	4620      	mov	r0, r4
   87de2:	f001 fa13 	bl	8920c <_Bfree>
   87de6:	2300      	movs	r3, #0
   87de8:	702b      	strb	r3, [r5, #0]
   87dea:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87dec:	461a      	mov	r2, r3
   87dee:	9b06      	ldr	r3, [sp, #24]
   87df0:	6013      	str	r3, [r2, #0]
   87df2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87df4:	2b00      	cmp	r3, #0
   87df6:	f43f ae06 	beq.w	87a06 <_dtoa_r+0x76>
   87dfa:	9804      	ldr	r0, [sp, #16]
   87dfc:	601d      	str	r5, [r3, #0]
   87dfe:	b017      	add	sp, #92	; 0x5c
   87e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87e04:	4638      	mov	r0, r7
   87e06:	f002 f99d 	bl	8a144 <__aeabi_i2d>
   87e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   87e0e:	f002 fa03 	bl	8a218 <__aeabi_dmul>
   87e12:	4b2b      	ldr	r3, [pc, #172]	; (87ec0 <_dtoa_r+0x530>)
   87e14:	2200      	movs	r2, #0
   87e16:	f002 f849 	bl	89eac <__adddf3>
   87e1a:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   87e1e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   87e22:	930f      	str	r3, [sp, #60]	; 0x3c
   87e24:	2200      	movs	r2, #0
   87e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   87e2a:	4b28      	ldr	r3, [pc, #160]	; (87ecc <_dtoa_r+0x53c>)
   87e2c:	f002 f83c 	bl	89ea8 <__aeabi_dsub>
   87e30:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
   87e34:	463a      	mov	r2, r7
   87e36:	4643      	mov	r3, r8
   87e38:	4605      	mov	r5, r0
   87e3a:	460e      	mov	r6, r1
   87e3c:	f002 fc7c 	bl	8a738 <__aeabi_dcmpgt>
   87e40:	4607      	mov	r7, r0
   87e42:	2800      	cmp	r0, #0
   87e44:	f040 83cb 	bne.w	885de <_dtoa_r+0xc4e>
   87e48:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   87e4c:	4602      	mov	r2, r0
   87e4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   87e52:	4628      	mov	r0, r5
   87e54:	4631      	mov	r1, r6
   87e56:	f002 fc51 	bl	8a6fc <__aeabi_dcmplt>
   87e5a:	bb30      	cbnz	r0, 87eaa <_dtoa_r+0x51a>
   87e5c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   87e60:	e9cd 2302 	strd	r2, r3, [sp, #8]
   87e64:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87e66:	2b00      	cmp	r3, #0
   87e68:	f2c0 80c7 	blt.w	87ffa <_dtoa_r+0x66a>
   87e6c:	9a06      	ldr	r2, [sp, #24]
   87e6e:	2a0e      	cmp	r2, #14
   87e70:	f300 80c3 	bgt.w	87ffa <_dtoa_r+0x66a>
   87e74:	4b0f      	ldr	r3, [pc, #60]	; (87eb4 <_dtoa_r+0x524>)
   87e76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87e7a:	e9d3 9a00 	ldrd	r9, sl, [r3]
   87e7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
   87e80:	2b00      	cmp	r3, #0
   87e82:	da25      	bge.n	87ed0 <_dtoa_r+0x540>
   87e84:	9f07      	ldr	r7, [sp, #28]
   87e86:	2f00      	cmp	r7, #0
   87e88:	dc22      	bgt.n	87ed0 <_dtoa_r+0x540>
   87e8a:	f040 845a 	bne.w	88742 <_dtoa_r+0xdb2>
   87e8e:	2200      	movs	r2, #0
   87e90:	4b0e      	ldr	r3, [pc, #56]	; (87ecc <_dtoa_r+0x53c>)
   87e92:	4648      	mov	r0, r9
   87e94:	4651      	mov	r1, sl
   87e96:	f002 f9bf 	bl	8a218 <__aeabi_dmul>
   87e9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   87e9e:	f002 fc41 	bl	8a724 <__aeabi_dcmpge>
   87ea2:	2800      	cmp	r0, #0
   87ea4:	f000 839c 	beq.w	885e0 <_dtoa_r+0xc50>
   87ea8:	9f07      	ldr	r7, [sp, #28]
   87eaa:	463e      	mov	r6, r7
   87eac:	9b21      	ldr	r3, [sp, #132]	; 0x84
   87eae:	9d04      	ldr	r5, [sp, #16]
   87eb0:	43db      	mvns	r3, r3
   87eb2:	e26d      	b.n	88390 <_dtoa_r+0xa00>
   87eb4:	0008abc0 	.word	0x0008abc0
   87eb8:	0008ab98 	.word	0x0008ab98
   87ebc:	3ff00000 	.word	0x3ff00000
   87ec0:	401c0000 	.word	0x401c0000
   87ec4:	3fe00000 	.word	0x3fe00000
   87ec8:	40240000 	.word	0x40240000
   87ecc:	40140000 	.word	0x40140000
   87ed0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   87ed4:	464a      	mov	r2, r9
   87ed6:	4653      	mov	r3, sl
   87ed8:	4630      	mov	r0, r6
   87eda:	4639      	mov	r1, r7
   87edc:	f002 fac6 	bl	8a46c <__aeabi_ddiv>
   87ee0:	f002 fc4a 	bl	8a778 <__aeabi_d2iz>
   87ee4:	4680      	mov	r8, r0
   87ee6:	f002 f92d 	bl	8a144 <__aeabi_i2d>
   87eea:	464a      	mov	r2, r9
   87eec:	4653      	mov	r3, sl
   87eee:	f002 f993 	bl	8a218 <__aeabi_dmul>
   87ef2:	4602      	mov	r2, r0
   87ef4:	4630      	mov	r0, r6
   87ef6:	4646      	mov	r6, r8
   87ef8:	460b      	mov	r3, r1
   87efa:	4639      	mov	r1, r7
   87efc:	f001 ffd4 	bl	89ea8 <__aeabi_dsub>
   87f00:	9d04      	ldr	r5, [sp, #16]
   87f02:	3630      	adds	r6, #48	; 0x30
   87f04:	9f06      	ldr	r7, [sp, #24]
   87f06:	f805 6b01 	strb.w	r6, [r5], #1
   87f0a:	9e07      	ldr	r6, [sp, #28]
   87f0c:	3701      	adds	r7, #1
   87f0e:	2e01      	cmp	r6, #1
   87f10:	4602      	mov	r2, r0
   87f12:	460b      	mov	r3, r1
   87f14:	9706      	str	r7, [sp, #24]
   87f16:	d044      	beq.n	87fa2 <_dtoa_r+0x612>
   87f18:	2200      	movs	r2, #0
   87f1a:	4bca      	ldr	r3, [pc, #808]	; (88244 <_dtoa_r+0x8b4>)
   87f1c:	f002 f97c 	bl	8a218 <__aeabi_dmul>
   87f20:	2200      	movs	r2, #0
   87f22:	2300      	movs	r3, #0
   87f24:	4606      	mov	r6, r0
   87f26:	460f      	mov	r7, r1
   87f28:	f002 fbde 	bl	8a6e8 <__aeabi_dcmpeq>
   87f2c:	2800      	cmp	r0, #0
   87f2e:	f47f af56 	bne.w	87dde <_dtoa_r+0x44e>
   87f32:	f8cd b008 	str.w	fp, [sp, #8]
   87f36:	f04f 0801 	mov.w	r8, #1
   87f3a:	f8dd b01c 	ldr.w	fp, [sp, #28]
   87f3e:	9405      	str	r4, [sp, #20]
   87f40:	e00c      	b.n	87f5c <_dtoa_r+0x5cc>
   87f42:	2200      	movs	r2, #0
   87f44:	4bbf      	ldr	r3, [pc, #764]	; (88244 <_dtoa_r+0x8b4>)
   87f46:	f002 f967 	bl	8a218 <__aeabi_dmul>
   87f4a:	2200      	movs	r2, #0
   87f4c:	2300      	movs	r3, #0
   87f4e:	4606      	mov	r6, r0
   87f50:	460f      	mov	r7, r1
   87f52:	f002 fbc9 	bl	8a6e8 <__aeabi_dcmpeq>
   87f56:	2800      	cmp	r0, #0
   87f58:	f040 8339 	bne.w	885ce <_dtoa_r+0xc3e>
   87f5c:	464a      	mov	r2, r9
   87f5e:	4653      	mov	r3, sl
   87f60:	4630      	mov	r0, r6
   87f62:	4639      	mov	r1, r7
   87f64:	f002 fa82 	bl	8a46c <__aeabi_ddiv>
   87f68:	f002 fc06 	bl	8a778 <__aeabi_d2iz>
   87f6c:	4604      	mov	r4, r0
   87f6e:	f002 f8e9 	bl	8a144 <__aeabi_i2d>
   87f72:	464a      	mov	r2, r9
   87f74:	4653      	mov	r3, sl
   87f76:	f002 f94f 	bl	8a218 <__aeabi_dmul>
   87f7a:	4602      	mov	r2, r0
   87f7c:	460b      	mov	r3, r1
   87f7e:	4630      	mov	r0, r6
   87f80:	4639      	mov	r1, r7
   87f82:	f001 ff91 	bl	89ea8 <__aeabi_dsub>
   87f86:	f108 0801 	add.w	r8, r8, #1
   87f8a:	f104 0630 	add.w	r6, r4, #48	; 0x30
   87f8e:	45c3      	cmp	fp, r8
   87f90:	4602      	mov	r2, r0
   87f92:	460b      	mov	r3, r1
   87f94:	f805 6b01 	strb.w	r6, [r5], #1
   87f98:	d1d3      	bne.n	87f42 <_dtoa_r+0x5b2>
   87f9a:	46a0      	mov	r8, r4
   87f9c:	f8dd b008 	ldr.w	fp, [sp, #8]
   87fa0:	9c05      	ldr	r4, [sp, #20]
   87fa2:	4610      	mov	r0, r2
   87fa4:	4619      	mov	r1, r3
   87fa6:	f001 ff81 	bl	89eac <__adddf3>
   87faa:	464a      	mov	r2, r9
   87fac:	4653      	mov	r3, sl
   87fae:	4606      	mov	r6, r0
   87fb0:	460f      	mov	r7, r1
   87fb2:	f002 fbc1 	bl	8a738 <__aeabi_dcmpgt>
   87fb6:	b960      	cbnz	r0, 87fd2 <_dtoa_r+0x642>
   87fb8:	464a      	mov	r2, r9
   87fba:	4653      	mov	r3, sl
   87fbc:	4630      	mov	r0, r6
   87fbe:	4639      	mov	r1, r7
   87fc0:	f002 fb92 	bl	8a6e8 <__aeabi_dcmpeq>
   87fc4:	2800      	cmp	r0, #0
   87fc6:	f43f af0a 	beq.w	87dde <_dtoa_r+0x44e>
   87fca:	ea5f 71c8 	movs.w	r1, r8, lsl #31
   87fce:	f57f af06 	bpl.w	87dde <_dtoa_r+0x44e>
   87fd2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   87fd6:	1e6b      	subs	r3, r5, #1
   87fd8:	9a04      	ldr	r2, [sp, #16]
   87fda:	e004      	b.n	87fe6 <_dtoa_r+0x656>
   87fdc:	429a      	cmp	r2, r3
   87fde:	f000 83a1 	beq.w	88724 <_dtoa_r+0xd94>
   87fe2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   87fe6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   87fea:	f103 0501 	add.w	r5, r3, #1
   87fee:	d0f5      	beq.n	87fdc <_dtoa_r+0x64c>
   87ff0:	f108 0201 	add.w	r2, r8, #1
   87ff4:	b2d2      	uxtb	r2, r2
   87ff6:	701a      	strb	r2, [r3, #0]
   87ff8:	e6f1      	b.n	87dde <_dtoa_r+0x44e>
   87ffa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87ffc:	2a00      	cmp	r2, #0
   87ffe:	d03c      	beq.n	8807a <_dtoa_r+0x6ea>
   88000:	9a20      	ldr	r2, [sp, #128]	; 0x80
   88002:	2a01      	cmp	r2, #1
   88004:	f340 826c 	ble.w	884e0 <_dtoa_r+0xb50>
   88008:	9b07      	ldr	r3, [sp, #28]
   8800a:	1e5f      	subs	r7, r3, #1
   8800c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8800e:	42bb      	cmp	r3, r7
   88010:	f280 824e 	bge.w	884b0 <_dtoa_r+0xb20>
   88014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88016:	970b      	str	r7, [sp, #44]	; 0x2c
   88018:	1afb      	subs	r3, r7, r3
   8801a:	2700      	movs	r7, #0
   8801c:	449a      	add	sl, r3
   8801e:	9b07      	ldr	r3, [sp, #28]
   88020:	2b00      	cmp	r3, #0
   88022:	f2c0 82d8 	blt.w	885d6 <_dtoa_r+0xc46>
   88026:	9a05      	ldr	r2, [sp, #20]
   88028:	464d      	mov	r5, r9
   8802a:	4611      	mov	r1, r2
   8802c:	4419      	add	r1, r3
   8802e:	9105      	str	r1, [sp, #20]
   88030:	4499      	add	r9, r3
   88032:	2101      	movs	r1, #1
   88034:	4620      	mov	r0, r4
   88036:	f001 f989 	bl	8934c <__i2b>
   8803a:	4606      	mov	r6, r0
   8803c:	e020      	b.n	88080 <_dtoa_r+0x6f0>
   8803e:	2301      	movs	r3, #1
   88040:	930c      	str	r3, [sp, #48]	; 0x30
   88042:	9b05      	ldr	r3, [sp, #20]
   88044:	2b00      	cmp	r3, #0
   88046:	f6bf ad53 	bge.w	87af0 <_dtoa_r+0x160>
   8804a:	2300      	movs	r3, #0
   8804c:	f1c5 0901 	rsb	r9, r5, #1
   88050:	9305      	str	r3, [sp, #20]
   88052:	e54f      	b.n	87af4 <_dtoa_r+0x164>
   88054:	4650      	mov	r0, sl
   88056:	f002 f875 	bl	8a144 <__aeabi_i2d>
   8805a:	4632      	mov	r2, r6
   8805c:	463b      	mov	r3, r7
   8805e:	f002 fb43 	bl	8a6e8 <__aeabi_dcmpeq>
   88062:	2800      	cmp	r0, #0
   88064:	f47f ad29 	bne.w	87aba <_dtoa_r+0x12a>
   88068:	f10a 3aff 	add.w	sl, sl, #4294967295
   8806c:	e525      	b.n	87aba <_dtoa_r+0x12a>
   8806e:	4b76      	ldr	r3, [pc, #472]	; (88248 <_dtoa_r+0x8b8>)
   88070:	9304      	str	r3, [sp, #16]
   88072:	9804      	ldr	r0, [sp, #16]
   88074:	b017      	add	sp, #92	; 0x5c
   88076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8807a:	464d      	mov	r5, r9
   8807c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   8807e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   88080:	2d00      	cmp	r5, #0
   88082:	dd0b      	ble.n	8809c <_dtoa_r+0x70c>
   88084:	9a05      	ldr	r2, [sp, #20]
   88086:	2a00      	cmp	r2, #0
   88088:	dd08      	ble.n	8809c <_dtoa_r+0x70c>
   8808a:	42aa      	cmp	r2, r5
   8808c:	4613      	mov	r3, r2
   8808e:	bfa8      	it	ge
   88090:	462b      	movge	r3, r5
   88092:	eba9 0903 	sub.w	r9, r9, r3
   88096:	1aed      	subs	r5, r5, r3
   88098:	1ad3      	subs	r3, r2, r3
   8809a:	9305      	str	r3, [sp, #20]
   8809c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8809e:	b1d3      	cbz	r3, 880d6 <_dtoa_r+0x746>
   880a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   880a2:	2b00      	cmp	r3, #0
   880a4:	f000 8199 	beq.w	883da <_dtoa_r+0xa4a>
   880a8:	2f00      	cmp	r7, #0
   880aa:	dd10      	ble.n	880ce <_dtoa_r+0x73e>
   880ac:	4631      	mov	r1, r6
   880ae:	463a      	mov	r2, r7
   880b0:	4620      	mov	r0, r4
   880b2:	f001 f9ed 	bl	89490 <__pow5mult>
   880b6:	465a      	mov	r2, fp
   880b8:	4601      	mov	r1, r0
   880ba:	4606      	mov	r6, r0
   880bc:	4620      	mov	r0, r4
   880be:	f001 f94f 	bl	89360 <__multiply>
   880c2:	4603      	mov	r3, r0
   880c4:	4659      	mov	r1, fp
   880c6:	4620      	mov	r0, r4
   880c8:	469b      	mov	fp, r3
   880ca:	f001 f89f 	bl	8920c <_Bfree>
   880ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   880d0:	1bda      	subs	r2, r3, r7
   880d2:	f040 8183 	bne.w	883dc <_dtoa_r+0xa4c>
   880d6:	2101      	movs	r1, #1
   880d8:	4620      	mov	r0, r4
   880da:	f001 f937 	bl	8934c <__i2b>
   880de:	f1ba 0f00 	cmp.w	sl, #0
   880e2:	4607      	mov	r7, r0
   880e4:	f300 8099 	bgt.w	8821a <_dtoa_r+0x88a>
   880e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   880ea:	2b01      	cmp	r3, #1
   880ec:	f340 8181 	ble.w	883f2 <_dtoa_r+0xa62>
   880f0:	f04f 0800 	mov.w	r8, #0
   880f4:	2001      	movs	r0, #1
   880f6:	f1ba 0f00 	cmp.w	sl, #0
   880fa:	f040 809a 	bne.w	88232 <_dtoa_r+0x8a2>
   880fe:	9a05      	ldr	r2, [sp, #20]
   88100:	4410      	add	r0, r2
   88102:	f010 001f 	ands.w	r0, r0, #31
   88106:	d079      	beq.n	881fc <_dtoa_r+0x86c>
   88108:	f1c0 0320 	rsb	r3, r0, #32
   8810c:	2b04      	cmp	r3, #4
   8810e:	f340 8358 	ble.w	887c2 <_dtoa_r+0xe32>
   88112:	f1c0 001c 	rsb	r0, r0, #28
   88116:	4402      	add	r2, r0
   88118:	4481      	add	r9, r0
   8811a:	4405      	add	r5, r0
   8811c:	9205      	str	r2, [sp, #20]
   8811e:	f1b9 0f00 	cmp.w	r9, #0
   88122:	dd05      	ble.n	88130 <_dtoa_r+0x7a0>
   88124:	4659      	mov	r1, fp
   88126:	464a      	mov	r2, r9
   88128:	4620      	mov	r0, r4
   8812a:	f001 fa01 	bl	89530 <__lshift>
   8812e:	4683      	mov	fp, r0
   88130:	9b05      	ldr	r3, [sp, #20]
   88132:	2b00      	cmp	r3, #0
   88134:	dd05      	ble.n	88142 <_dtoa_r+0x7b2>
   88136:	4639      	mov	r1, r7
   88138:	461a      	mov	r2, r3
   8813a:	4620      	mov	r0, r4
   8813c:	f001 f9f8 	bl	89530 <__lshift>
   88140:	4607      	mov	r7, r0
   88142:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88144:	2b00      	cmp	r3, #0
   88146:	f040 812d 	bne.w	883a4 <_dtoa_r+0xa14>
   8814a:	9b07      	ldr	r3, [sp, #28]
   8814c:	2b00      	cmp	r3, #0
   8814e:	f340 8104 	ble.w	8835a <_dtoa_r+0x9ca>
   88152:	9b06      	ldr	r3, [sp, #24]
   88154:	3301      	adds	r3, #1
   88156:	9306      	str	r3, [sp, #24]
   88158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8815a:	2b00      	cmp	r3, #0
   8815c:	f040 8082 	bne.w	88264 <_dtoa_r+0x8d4>
   88160:	9d04      	ldr	r5, [sp, #16]
   88162:	f04f 0801 	mov.w	r8, #1
   88166:	f8dd 901c 	ldr.w	r9, [sp, #28]
   8816a:	e008      	b.n	8817e <_dtoa_r+0x7ee>
   8816c:	4659      	mov	r1, fp
   8816e:	2300      	movs	r3, #0
   88170:	220a      	movs	r2, #10
   88172:	4620      	mov	r0, r4
   88174:	f001 f854 	bl	89220 <__multadd>
   88178:	4683      	mov	fp, r0
   8817a:	f108 0801 	add.w	r8, r8, #1
   8817e:	4639      	mov	r1, r7
   88180:	4658      	mov	r0, fp
   88182:	f7ff fb6d 	bl	87860 <quorem>
   88186:	45c8      	cmp	r8, r9
   88188:	f100 0030 	add.w	r0, r0, #48	; 0x30
   8818c:	f805 0b01 	strb.w	r0, [r5], #1
   88190:	dbec      	blt.n	8816c <_dtoa_r+0x7dc>
   88192:	4603      	mov	r3, r0
   88194:	f04f 0a00 	mov.w	sl, #0
   88198:	4659      	mov	r1, fp
   8819a:	2201      	movs	r2, #1
   8819c:	4620      	mov	r0, r4
   8819e:	9302      	str	r3, [sp, #8]
   881a0:	f001 f9c6 	bl	89530 <__lshift>
   881a4:	4639      	mov	r1, r7
   881a6:	4683      	mov	fp, r0
   881a8:	f001 fa1c 	bl	895e4 <__mcmp>
   881ac:	2800      	cmp	r0, #0
   881ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   881b2:	f340 8187 	ble.w	884c4 <_dtoa_r+0xb34>
   881b6:	1e6b      	subs	r3, r5, #1
   881b8:	9904      	ldr	r1, [sp, #16]
   881ba:	e004      	b.n	881c6 <_dtoa_r+0x836>
   881bc:	4299      	cmp	r1, r3
   881be:	f000 819c 	beq.w	884fa <_dtoa_r+0xb6a>
   881c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   881c6:	2a39      	cmp	r2, #57	; 0x39
   881c8:	f103 0501 	add.w	r5, r3, #1
   881cc:	d0f6      	beq.n	881bc <_dtoa_r+0x82c>
   881ce:	3201      	adds	r2, #1
   881d0:	701a      	strb	r2, [r3, #0]
   881d2:	4639      	mov	r1, r7
   881d4:	4620      	mov	r0, r4
   881d6:	f001 f819 	bl	8920c <_Bfree>
   881da:	2e00      	cmp	r6, #0
   881dc:	f43f adff 	beq.w	87dde <_dtoa_r+0x44e>
   881e0:	f1ba 0f00 	cmp.w	sl, #0
   881e4:	d005      	beq.n	881f2 <_dtoa_r+0x862>
   881e6:	45b2      	cmp	sl, r6
   881e8:	d003      	beq.n	881f2 <_dtoa_r+0x862>
   881ea:	4651      	mov	r1, sl
   881ec:	4620      	mov	r0, r4
   881ee:	f001 f80d 	bl	8920c <_Bfree>
   881f2:	4631      	mov	r1, r6
   881f4:	4620      	mov	r0, r4
   881f6:	f001 f809 	bl	8920c <_Bfree>
   881fa:	e5f0      	b.n	87dde <_dtoa_r+0x44e>
   881fc:	201c      	movs	r0, #28
   881fe:	9b05      	ldr	r3, [sp, #20]
   88200:	4481      	add	r9, r0
   88202:	4403      	add	r3, r0
   88204:	4405      	add	r5, r0
   88206:	9305      	str	r3, [sp, #20]
   88208:	e789      	b.n	8811e <_dtoa_r+0x78e>
   8820a:	2501      	movs	r5, #1
   8820c:	e487      	b.n	87b1e <_dtoa_r+0x18e>
   8820e:	f1c3 0620 	rsb	r6, r3, #32
   88212:	9b02      	ldr	r3, [sp, #8]
   88214:	fa03 f006 	lsl.w	r0, r3, r6
   88218:	e419      	b.n	87a4e <_dtoa_r+0xbe>
   8821a:	4601      	mov	r1, r0
   8821c:	4652      	mov	r2, sl
   8821e:	4620      	mov	r0, r4
   88220:	f001 f936 	bl	89490 <__pow5mult>
   88224:	9b20      	ldr	r3, [sp, #128]	; 0x80
   88226:	4607      	mov	r7, r0
   88228:	2b01      	cmp	r3, #1
   8822a:	f340 8197 	ble.w	8855c <_dtoa_r+0xbcc>
   8822e:	f04f 0800 	mov.w	r8, #0
   88232:	693b      	ldr	r3, [r7, #16]
   88234:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   88238:	6918      	ldr	r0, [r3, #16]
   8823a:	f001 f837 	bl	892ac <__hi0bits>
   8823e:	f1c0 0020 	rsb	r0, r0, #32
   88242:	e75c      	b.n	880fe <_dtoa_r+0x76e>
   88244:	40240000 	.word	0x40240000
   88248:	0008ab50 	.word	0x0008ab50
   8824c:	4631      	mov	r1, r6
   8824e:	2300      	movs	r3, #0
   88250:	220a      	movs	r2, #10
   88252:	4620      	mov	r0, r4
   88254:	f000 ffe4 	bl	89220 <__multadd>
   88258:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8825a:	4606      	mov	r6, r0
   8825c:	2b00      	cmp	r3, #0
   8825e:	f340 82a3 	ble.w	887a8 <_dtoa_r+0xe18>
   88262:	9307      	str	r3, [sp, #28]
   88264:	2d00      	cmp	r5, #0
   88266:	f300 811c 	bgt.w	884a2 <_dtoa_r+0xb12>
   8826a:	f1b8 0f00 	cmp.w	r8, #0
   8826e:	f040 819a 	bne.w	885a6 <_dtoa_r+0xc16>
   88272:	46b1      	mov	r9, r6
   88274:	9904      	ldr	r1, [sp, #16]
   88276:	9b02      	ldr	r3, [sp, #8]
   88278:	4688      	mov	r8, r1
   8827a:	f003 0201 	and.w	r2, r3, #1
   8827e:	1e4b      	subs	r3, r1, #1
   88280:	9920      	ldr	r1, [sp, #128]	; 0x80
   88282:	920b      	str	r2, [sp, #44]	; 0x2c
   88284:	430a      	orrs	r2, r1
   88286:	920a      	str	r2, [sp, #40]	; 0x28
   88288:	9a07      	ldr	r2, [sp, #28]
   8828a:	441a      	add	r2, r3
   8828c:	9208      	str	r2, [sp, #32]
   8828e:	4639      	mov	r1, r7
   88290:	4658      	mov	r0, fp
   88292:	f7ff fae5 	bl	87860 <quorem>
   88296:	4631      	mov	r1, r6
   88298:	9002      	str	r0, [sp, #8]
   8829a:	4658      	mov	r0, fp
   8829c:	f001 f9a2 	bl	895e4 <__mcmp>
   882a0:	464a      	mov	r2, r9
   882a2:	4682      	mov	sl, r0
   882a4:	4639      	mov	r1, r7
   882a6:	4620      	mov	r0, r4
   882a8:	f001 f9b8 	bl	8961c <__mdiff>
   882ac:	9b02      	ldr	r3, [sp, #8]
   882ae:	68c2      	ldr	r2, [r0, #12]
   882b0:	4605      	mov	r5, r0
   882b2:	3330      	adds	r3, #48	; 0x30
   882b4:	2a00      	cmp	r2, #0
   882b6:	d142      	bne.n	8833e <_dtoa_r+0x9ae>
   882b8:	4601      	mov	r1, r0
   882ba:	4658      	mov	r0, fp
   882bc:	9307      	str	r3, [sp, #28]
   882be:	f001 f991 	bl	895e4 <__mcmp>
   882c2:	4629      	mov	r1, r5
   882c4:	9005      	str	r0, [sp, #20]
   882c6:	4620      	mov	r0, r4
   882c8:	f000 ffa0 	bl	8920c <_Bfree>
   882cc:	9a05      	ldr	r2, [sp, #20]
   882ce:	9b07      	ldr	r3, [sp, #28]
   882d0:	b91a      	cbnz	r2, 882da <_dtoa_r+0x94a>
   882d2:	990a      	ldr	r1, [sp, #40]	; 0x28
   882d4:	2900      	cmp	r1, #0
   882d6:	f000 8256 	beq.w	88786 <_dtoa_r+0xdf6>
   882da:	f1ba 0f00 	cmp.w	sl, #0
   882de:	f108 0501 	add.w	r5, r8, #1
   882e2:	f2c0 8146 	blt.w	88572 <_dtoa_r+0xbe2>
   882e6:	9920      	ldr	r1, [sp, #128]	; 0x80
   882e8:	ea4a 0a01 	orr.w	sl, sl, r1
   882ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
   882ee:	ea51 010a 	orrs.w	r1, r1, sl
   882f2:	f000 813e 	beq.w	88572 <_dtoa_r+0xbe2>
   882f6:	2a00      	cmp	r2, #0
   882f8:	f300 8174 	bgt.w	885e4 <_dtoa_r+0xc54>
   882fc:	9a08      	ldr	r2, [sp, #32]
   882fe:	f888 3000 	strb.w	r3, [r8]
   88302:	4542      	cmp	r2, r8
   88304:	f000 8177 	beq.w	885f6 <_dtoa_r+0xc66>
   88308:	4659      	mov	r1, fp
   8830a:	2300      	movs	r3, #0
   8830c:	220a      	movs	r2, #10
   8830e:	4620      	mov	r0, r4
   88310:	f000 ff86 	bl	89220 <__multadd>
   88314:	454e      	cmp	r6, r9
   88316:	4683      	mov	fp, r0
   88318:	4631      	mov	r1, r6
   8831a:	f04f 0300 	mov.w	r3, #0
   8831e:	f04f 020a 	mov.w	r2, #10
   88322:	4620      	mov	r0, r4
   88324:	d013      	beq.n	8834e <_dtoa_r+0x9be>
   88326:	f000 ff7b 	bl	89220 <__multadd>
   8832a:	4649      	mov	r1, r9
   8832c:	4606      	mov	r6, r0
   8832e:	2300      	movs	r3, #0
   88330:	220a      	movs	r2, #10
   88332:	4620      	mov	r0, r4
   88334:	f000 ff74 	bl	89220 <__multadd>
   88338:	46a8      	mov	r8, r5
   8833a:	4681      	mov	r9, r0
   8833c:	e7a7      	b.n	8828e <_dtoa_r+0x8fe>
   8833e:	4601      	mov	r1, r0
   88340:	4620      	mov	r0, r4
   88342:	9305      	str	r3, [sp, #20]
   88344:	f000 ff62 	bl	8920c <_Bfree>
   88348:	2201      	movs	r2, #1
   8834a:	9b05      	ldr	r3, [sp, #20]
   8834c:	e7c5      	b.n	882da <_dtoa_r+0x94a>
   8834e:	f000 ff67 	bl	89220 <__multadd>
   88352:	46a8      	mov	r8, r5
   88354:	4606      	mov	r6, r0
   88356:	4681      	mov	r9, r0
   88358:	e799      	b.n	8828e <_dtoa_r+0x8fe>
   8835a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   8835c:	2b02      	cmp	r3, #2
   8835e:	f340 808d 	ble.w	8847c <_dtoa_r+0xaec>
   88362:	9b07      	ldr	r3, [sp, #28]
   88364:	2b00      	cmp	r3, #0
   88366:	f47f ada1 	bne.w	87eac <_dtoa_r+0x51c>
   8836a:	4639      	mov	r1, r7
   8836c:	2205      	movs	r2, #5
   8836e:	4620      	mov	r0, r4
   88370:	f000 ff56 	bl	89220 <__multadd>
   88374:	4601      	mov	r1, r0
   88376:	4607      	mov	r7, r0
   88378:	4658      	mov	r0, fp
   8837a:	f001 f933 	bl	895e4 <__mcmp>
   8837e:	2800      	cmp	r0, #0
   88380:	f77f ad94 	ble.w	87eac <_dtoa_r+0x51c>
   88384:	2231      	movs	r2, #49	; 0x31
   88386:	9d04      	ldr	r5, [sp, #16]
   88388:	9b06      	ldr	r3, [sp, #24]
   8838a:	f805 2b01 	strb.w	r2, [r5], #1
   8838e:	3301      	adds	r3, #1
   88390:	3301      	adds	r3, #1
   88392:	4639      	mov	r1, r7
   88394:	4620      	mov	r0, r4
   88396:	9306      	str	r3, [sp, #24]
   88398:	f000 ff38 	bl	8920c <_Bfree>
   8839c:	2e00      	cmp	r6, #0
   8839e:	f47f af28 	bne.w	881f2 <_dtoa_r+0x862>
   883a2:	e51c      	b.n	87dde <_dtoa_r+0x44e>
   883a4:	4639      	mov	r1, r7
   883a6:	4658      	mov	r0, fp
   883a8:	f001 f91c 	bl	895e4 <__mcmp>
   883ac:	2800      	cmp	r0, #0
   883ae:	f6bf aecc 	bge.w	8814a <_dtoa_r+0x7ba>
   883b2:	4659      	mov	r1, fp
   883b4:	2300      	movs	r3, #0
   883b6:	220a      	movs	r2, #10
   883b8:	4620      	mov	r0, r4
   883ba:	f000 ff31 	bl	89220 <__multadd>
   883be:	9b06      	ldr	r3, [sp, #24]
   883c0:	4683      	mov	fp, r0
   883c2:	f103 39ff 	add.w	r9, r3, #4294967295
   883c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   883c8:	2b00      	cmp	r3, #0
   883ca:	f47f af3f 	bne.w	8824c <_dtoa_r+0x8bc>
   883ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
   883d0:	2b00      	cmp	r3, #0
   883d2:	f340 81e1 	ble.w	88798 <_dtoa_r+0xe08>
   883d6:	9307      	str	r3, [sp, #28]
   883d8:	e6c2      	b.n	88160 <_dtoa_r+0x7d0>
   883da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   883dc:	4659      	mov	r1, fp
   883de:	4620      	mov	r0, r4
   883e0:	f001 f856 	bl	89490 <__pow5mult>
   883e4:	4683      	mov	fp, r0
   883e6:	e676      	b.n	880d6 <_dtoa_r+0x746>
   883e8:	4bb5      	ldr	r3, [pc, #724]	; (886c0 <_dtoa_r+0xd30>)
   883ea:	9304      	str	r3, [sp, #16]
   883ec:	3303      	adds	r3, #3
   883ee:	f7ff bbb1 	b.w	87b54 <_dtoa_r+0x1c4>
   883f2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   883f6:	2900      	cmp	r1, #0
   883f8:	f47f ae7a 	bne.w	880f0 <_dtoa_r+0x760>
   883fc:	f3c2 0313 	ubfx	r3, r2, #0, #20
   88400:	2b00      	cmp	r3, #0
   88402:	f47f ae75 	bne.w	880f0 <_dtoa_r+0x760>
   88406:	4baf      	ldr	r3, [pc, #700]	; (886c4 <_dtoa_r+0xd34>)
   88408:	4013      	ands	r3, r2
   8840a:	2b00      	cmp	r3, #0
   8840c:	f000 8197 	beq.w	8873e <_dtoa_r+0xdae>
   88410:	9b05      	ldr	r3, [sp, #20]
   88412:	f109 0901 	add.w	r9, r9, #1
   88416:	3301      	adds	r3, #1
   88418:	9305      	str	r3, [sp, #20]
   8841a:	f04f 0801 	mov.w	r8, #1
   8841e:	e669      	b.n	880f4 <_dtoa_r+0x764>
   88420:	2301      	movs	r3, #1
   88422:	930a      	str	r3, [sp, #40]	; 0x28
   88424:	9b21      	ldr	r3, [sp, #132]	; 0x84
   88426:	2b00      	cmp	r3, #0
   88428:	dd47      	ble.n	884ba <_dtoa_r+0xb2a>
   8842a:	4618      	mov	r0, r3
   8842c:	9310      	str	r3, [sp, #64]	; 0x40
   8842e:	9307      	str	r3, [sp, #28]
   88430:	2100      	movs	r1, #0
   88432:	2817      	cmp	r0, #23
   88434:	9e07      	ldr	r6, [sp, #28]
   88436:	6461      	str	r1, [r4, #68]	; 0x44
   88438:	f77f abd8 	ble.w	87bec <_dtoa_r+0x25c>
   8843c:	2201      	movs	r2, #1
   8843e:	2304      	movs	r3, #4
   88440:	005b      	lsls	r3, r3, #1
   88442:	f103 0714 	add.w	r7, r3, #20
   88446:	42b8      	cmp	r0, r7
   88448:	4611      	mov	r1, r2
   8844a:	f102 0201 	add.w	r2, r2, #1
   8844e:	d2f7      	bcs.n	88440 <_dtoa_r+0xab0>
   88450:	6461      	str	r1, [r4, #68]	; 0x44
   88452:	f7ff bbcb 	b.w	87bec <_dtoa_r+0x25c>
   88456:	2301      	movs	r3, #1
   88458:	930a      	str	r3, [sp, #40]	; 0x28
   8845a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   8845c:	9a06      	ldr	r2, [sp, #24]
   8845e:	4413      	add	r3, r2
   88460:	9310      	str	r3, [sp, #64]	; 0x40
   88462:	3301      	adds	r3, #1
   88464:	2b01      	cmp	r3, #1
   88466:	4618      	mov	r0, r3
   88468:	9307      	str	r3, [sp, #28]
   8846a:	bfb8      	it	lt
   8846c:	2001      	movlt	r0, #1
   8846e:	e7df      	b.n	88430 <_dtoa_r+0xaa0>
   88470:	2300      	movs	r3, #0
   88472:	930a      	str	r3, [sp, #40]	; 0x28
   88474:	e7f1      	b.n	8845a <_dtoa_r+0xaca>
   88476:	2300      	movs	r3, #0
   88478:	930a      	str	r3, [sp, #40]	; 0x28
   8847a:	e7d3      	b.n	88424 <_dtoa_r+0xa94>
   8847c:	9b06      	ldr	r3, [sp, #24]
   8847e:	3301      	adds	r3, #1
   88480:	9306      	str	r3, [sp, #24]
   88482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88484:	2b00      	cmp	r3, #0
   88486:	f47f aeed 	bne.w	88264 <_dtoa_r+0x8d4>
   8848a:	4639      	mov	r1, r7
   8848c:	4658      	mov	r0, fp
   8848e:	f7ff f9e7 	bl	87860 <quorem>
   88492:	9d04      	ldr	r5, [sp, #16]
   88494:	f100 0330 	add.w	r3, r0, #48	; 0x30
   88498:	f805 3b01 	strb.w	r3, [r5], #1
   8849c:	f04f 0a00 	mov.w	sl, #0
   884a0:	e67a      	b.n	88198 <_dtoa_r+0x808>
   884a2:	4631      	mov	r1, r6
   884a4:	462a      	mov	r2, r5
   884a6:	4620      	mov	r0, r4
   884a8:	f001 f842 	bl	89530 <__lshift>
   884ac:	4606      	mov	r6, r0
   884ae:	e6dc      	b.n	8826a <_dtoa_r+0x8da>
   884b0:	1bdf      	subs	r7, r3, r7
   884b2:	e5b4      	b.n	8801e <_dtoa_r+0x68e>
   884b4:	2702      	movs	r7, #2
   884b6:	f7ff bbc1 	b.w	87c3c <_dtoa_r+0x2ac>
   884ba:	2601      	movs	r6, #1
   884bc:	9621      	str	r6, [sp, #132]	; 0x84
   884be:	9607      	str	r6, [sp, #28]
   884c0:	f7ff bb91 	b.w	87be6 <_dtoa_r+0x256>
   884c4:	d103      	bne.n	884ce <_dtoa_r+0xb3e>
   884c6:	9b02      	ldr	r3, [sp, #8]
   884c8:	07db      	lsls	r3, r3, #31
   884ca:	f53f ae74 	bmi.w	881b6 <_dtoa_r+0x826>
   884ce:	1e6b      	subs	r3, r5, #1
   884d0:	e001      	b.n	884d6 <_dtoa_r+0xb46>
   884d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   884d6:	2a30      	cmp	r2, #48	; 0x30
   884d8:	f103 0501 	add.w	r5, r3, #1
   884dc:	d0f9      	beq.n	884d2 <_dtoa_r+0xb42>
   884de:	e678      	b.n	881d2 <_dtoa_r+0x842>
   884e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   884e2:	2a00      	cmp	r2, #0
   884e4:	f000 80de 	beq.w	886a4 <_dtoa_r+0xd14>
   884e8:	9a05      	ldr	r2, [sp, #20]
   884ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
   884ee:	441a      	add	r2, r3
   884f0:	464d      	mov	r5, r9
   884f2:	9205      	str	r2, [sp, #20]
   884f4:	4499      	add	r9, r3
   884f6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   884f8:	e59b      	b.n	88032 <_dtoa_r+0x6a2>
   884fa:	2331      	movs	r3, #49	; 0x31
   884fc:	9a06      	ldr	r2, [sp, #24]
   884fe:	3201      	adds	r2, #1
   88500:	9206      	str	r2, [sp, #24]
   88502:	9a04      	ldr	r2, [sp, #16]
   88504:	7013      	strb	r3, [r2, #0]
   88506:	e664      	b.n	881d2 <_dtoa_r+0x842>
   88508:	f000 80d6 	beq.w	886b8 <_dtoa_r+0xd28>
   8850c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   88510:	9b06      	ldr	r3, [sp, #24]
   88512:	425d      	negs	r5, r3
   88514:	4b6c      	ldr	r3, [pc, #432]	; (886c8 <_dtoa_r+0xd38>)
   88516:	f005 020f 	and.w	r2, r5, #15
   8851a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8851e:	e9d3 2300 	ldrd	r2, r3, [r3]
   88522:	f001 fe79 	bl	8a218 <__aeabi_dmul>
   88526:	112d      	asrs	r5, r5, #4
   88528:	e9cd 0102 	strd	r0, r1, [sp, #8]
   8852c:	f000 80c4 	beq.w	886b8 <_dtoa_r+0xd28>
   88530:	2300      	movs	r3, #0
   88532:	2702      	movs	r7, #2
   88534:	4e65      	ldr	r6, [pc, #404]	; (886cc <_dtoa_r+0xd3c>)
   88536:	07ea      	lsls	r2, r5, #31
   88538:	d505      	bpl.n	88546 <_dtoa_r+0xbb6>
   8853a:	e9d6 2300 	ldrd	r2, r3, [r6]
   8853e:	f001 fe6b 	bl	8a218 <__aeabi_dmul>
   88542:	2301      	movs	r3, #1
   88544:	441f      	add	r7, r3
   88546:	106d      	asrs	r5, r5, #1
   88548:	f106 0608 	add.w	r6, r6, #8
   8854c:	d1f3      	bne.n	88536 <_dtoa_r+0xba6>
   8854e:	2b00      	cmp	r3, #0
   88550:	f43f ab8d 	beq.w	87c6e <_dtoa_r+0x2de>
   88554:	e9cd 0102 	strd	r0, r1, [sp, #8]
   88558:	f7ff bb89 	b.w	87c6e <_dtoa_r+0x2de>
   8855c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   88560:	2900      	cmp	r1, #0
   88562:	f47f ae64 	bne.w	8822e <_dtoa_r+0x89e>
   88566:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8856a:	2b00      	cmp	r3, #0
   8856c:	f43f af4b 	beq.w	88406 <_dtoa_r+0xa76>
   88570:	e65d      	b.n	8822e <_dtoa_r+0x89e>
   88572:	2a00      	cmp	r2, #0
   88574:	dd12      	ble.n	8859c <_dtoa_r+0xc0c>
   88576:	4659      	mov	r1, fp
   88578:	2201      	movs	r2, #1
   8857a:	4620      	mov	r0, r4
   8857c:	9305      	str	r3, [sp, #20]
   8857e:	f000 ffd7 	bl	89530 <__lshift>
   88582:	4639      	mov	r1, r7
   88584:	4683      	mov	fp, r0
   88586:	f001 f82d 	bl	895e4 <__mcmp>
   8858a:	2800      	cmp	r0, #0
   8858c:	9b05      	ldr	r3, [sp, #20]
   8858e:	f340 80e2 	ble.w	88756 <_dtoa_r+0xdc6>
   88592:	2b39      	cmp	r3, #57	; 0x39
   88594:	f000 80cd 	beq.w	88732 <_dtoa_r+0xda2>
   88598:	9b02      	ldr	r3, [sp, #8]
   8859a:	3331      	adds	r3, #49	; 0x31
   8859c:	46b2      	mov	sl, r6
   8859e:	f888 3000 	strb.w	r3, [r8]
   885a2:	464e      	mov	r6, r9
   885a4:	e615      	b.n	881d2 <_dtoa_r+0x842>
   885a6:	6871      	ldr	r1, [r6, #4]
   885a8:	4620      	mov	r0, r4
   885aa:	f000 fe09 	bl	891c0 <_Balloc>
   885ae:	4605      	mov	r5, r0
   885b0:	6933      	ldr	r3, [r6, #16]
   885b2:	f106 010c 	add.w	r1, r6, #12
   885b6:	3302      	adds	r3, #2
   885b8:	009a      	lsls	r2, r3, #2
   885ba:	300c      	adds	r0, #12
   885bc:	f7fd fb2c 	bl	85c18 <memcpy>
   885c0:	4629      	mov	r1, r5
   885c2:	2201      	movs	r2, #1
   885c4:	4620      	mov	r0, r4
   885c6:	f000 ffb3 	bl	89530 <__lshift>
   885ca:	4681      	mov	r9, r0
   885cc:	e652      	b.n	88274 <_dtoa_r+0x8e4>
   885ce:	f8dd b008 	ldr.w	fp, [sp, #8]
   885d2:	9c05      	ldr	r4, [sp, #20]
   885d4:	e403      	b.n	87dde <_dtoa_r+0x44e>
   885d6:	9b07      	ldr	r3, [sp, #28]
   885d8:	eba9 0503 	sub.w	r5, r9, r3
   885dc:	e529      	b.n	88032 <_dtoa_r+0x6a2>
   885de:	2700      	movs	r7, #0
   885e0:	463e      	mov	r6, r7
   885e2:	e6cf      	b.n	88384 <_dtoa_r+0x9f4>
   885e4:	2b39      	cmp	r3, #57	; 0x39
   885e6:	f000 80a4 	beq.w	88732 <_dtoa_r+0xda2>
   885ea:	3301      	adds	r3, #1
   885ec:	46b2      	mov	sl, r6
   885ee:	f888 3000 	strb.w	r3, [r8]
   885f2:	464e      	mov	r6, r9
   885f4:	e5ed      	b.n	881d2 <_dtoa_r+0x842>
   885f6:	46b2      	mov	sl, r6
   885f8:	464e      	mov	r6, r9
   885fa:	e5cd      	b.n	88198 <_dtoa_r+0x808>
   885fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   88600:	f001 fe0a 	bl	8a218 <__aeabi_dmul>
   88604:	9b04      	ldr	r3, [sp, #16]
   88606:	e9cd 0102 	strd	r0, r1, [sp, #8]
   8860a:	f883 8000 	strb.w	r8, [r3]
   8860e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88610:	2b01      	cmp	r3, #1
   88612:	d022      	beq.n	8865a <_dtoa_r+0xcca>
   88614:	9b11      	ldr	r3, [sp, #68]	; 0x44
   88616:	9a04      	ldr	r2, [sp, #16]
   88618:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   8861c:	4413      	add	r3, r2
   8861e:	4699      	mov	r9, r3
   88620:	2200      	movs	r2, #0
   88622:	4b2b      	ldr	r3, [pc, #172]	; (886d0 <_dtoa_r+0xd40>)
   88624:	4630      	mov	r0, r6
   88626:	4639      	mov	r1, r7
   88628:	f001 fdf6 	bl	8a218 <__aeabi_dmul>
   8862c:	460f      	mov	r7, r1
   8862e:	4606      	mov	r6, r0
   88630:	f002 f8a2 	bl	8a778 <__aeabi_d2iz>
   88634:	4680      	mov	r8, r0
   88636:	f001 fd85 	bl	8a144 <__aeabi_i2d>
   8863a:	4602      	mov	r2, r0
   8863c:	460b      	mov	r3, r1
   8863e:	4630      	mov	r0, r6
   88640:	4639      	mov	r1, r7
   88642:	f001 fc31 	bl	89ea8 <__aeabi_dsub>
   88646:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8864a:	f805 8b01 	strb.w	r8, [r5], #1
   8864e:	45a9      	cmp	r9, r5
   88650:	4606      	mov	r6, r0
   88652:	460f      	mov	r7, r1
   88654:	d1e4      	bne.n	88620 <_dtoa_r+0xc90>
   88656:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
   8865a:	2200      	movs	r2, #0
   8865c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   88660:	4b1c      	ldr	r3, [pc, #112]	; (886d4 <_dtoa_r+0xd44>)
   88662:	f001 fc23 	bl	89eac <__adddf3>
   88666:	4632      	mov	r2, r6
   88668:	463b      	mov	r3, r7
   8866a:	f002 f847 	bl	8a6fc <__aeabi_dcmplt>
   8866e:	2800      	cmp	r0, #0
   88670:	d16b      	bne.n	8874a <_dtoa_r+0xdba>
   88672:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   88676:	2000      	movs	r0, #0
   88678:	4916      	ldr	r1, [pc, #88]	; (886d4 <_dtoa_r+0xd44>)
   8867a:	f001 fc15 	bl	89ea8 <__aeabi_dsub>
   8867e:	4632      	mov	r2, r6
   88680:	463b      	mov	r3, r7
   88682:	f002 f859 	bl	8a738 <__aeabi_dcmpgt>
   88686:	2800      	cmp	r0, #0
   88688:	f43f abe8 	beq.w	87e5c <_dtoa_r+0x4cc>
   8868c:	e000      	b.n	88690 <_dtoa_r+0xd00>
   8868e:	4615      	mov	r5, r2
   88690:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   88694:	1e6a      	subs	r2, r5, #1
   88696:	2b30      	cmp	r3, #48	; 0x30
   88698:	d0f9      	beq.n	8868e <_dtoa_r+0xcfe>
   8869a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8869c:	3301      	adds	r3, #1
   8869e:	9306      	str	r3, [sp, #24]
   886a0:	f7ff bb9d 	b.w	87dde <_dtoa_r+0x44e>
   886a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   886a6:	9a05      	ldr	r2, [sp, #20]
   886a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   886ac:	441a      	add	r2, r3
   886ae:	464d      	mov	r5, r9
   886b0:	9205      	str	r2, [sp, #20]
   886b2:	4499      	add	r9, r3
   886b4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   886b6:	e4bc      	b.n	88032 <_dtoa_r+0x6a2>
   886b8:	2702      	movs	r7, #2
   886ba:	f7ff bad8 	b.w	87c6e <_dtoa_r+0x2de>
   886be:	bf00      	nop
   886c0:	0008ab74 	.word	0x0008ab74
   886c4:	7ff00000 	.word	0x7ff00000
   886c8:	0008abc0 	.word	0x0008abc0
   886cc:	0008ab98 	.word	0x0008ab98
   886d0:	40240000 	.word	0x40240000
   886d4:	3fe00000 	.word	0x3fe00000
   886d8:	9b07      	ldr	r3, [sp, #28]
   886da:	2b00      	cmp	r3, #0
   886dc:	f43f ab92 	beq.w	87e04 <_dtoa_r+0x474>
   886e0:	9d10      	ldr	r5, [sp, #64]	; 0x40
   886e2:	2d00      	cmp	r5, #0
   886e4:	f77f abba 	ble.w	87e5c <_dtoa_r+0x4cc>
   886e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   886ec:	2200      	movs	r2, #0
   886ee:	4b40      	ldr	r3, [pc, #256]	; (887f0 <_dtoa_r+0xe60>)
   886f0:	f001 fd92 	bl	8a218 <__aeabi_dmul>
   886f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   886f8:	1c78      	adds	r0, r7, #1
   886fa:	f001 fd23 	bl	8a144 <__aeabi_i2d>
   886fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   88702:	f001 fd89 	bl	8a218 <__aeabi_dmul>
   88706:	2200      	movs	r2, #0
   88708:	4b3a      	ldr	r3, [pc, #232]	; (887f4 <_dtoa_r+0xe64>)
   8870a:	f001 fbcf 	bl	89eac <__adddf3>
   8870e:	9a06      	ldr	r2, [sp, #24]
   88710:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   88714:	3a01      	subs	r2, #1
   88716:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   8871a:	9212      	str	r2, [sp, #72]	; 0x48
   8871c:	930f      	str	r3, [sp, #60]	; 0x3c
   8871e:	9511      	str	r5, [sp, #68]	; 0x44
   88720:	f7ff bac8 	b.w	87cb4 <_dtoa_r+0x324>
   88724:	9a06      	ldr	r2, [sp, #24]
   88726:	3201      	adds	r2, #1
   88728:	9206      	str	r2, [sp, #24]
   8872a:	2231      	movs	r2, #49	; 0x31
   8872c:	701a      	strb	r2, [r3, #0]
   8872e:	f7ff bb56 	b.w	87dde <_dtoa_r+0x44e>
   88732:	2239      	movs	r2, #57	; 0x39
   88734:	46b2      	mov	sl, r6
   88736:	f888 2000 	strb.w	r2, [r8]
   8873a:	464e      	mov	r6, r9
   8873c:	e53b      	b.n	881b6 <_dtoa_r+0x826>
   8873e:	4698      	mov	r8, r3
   88740:	e4d8      	b.n	880f4 <_dtoa_r+0x764>
   88742:	2700      	movs	r7, #0
   88744:	463e      	mov	r6, r7
   88746:	f7ff bbb1 	b.w	87eac <_dtoa_r+0x51c>
   8874a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8874c:	3301      	adds	r3, #1
   8874e:	9306      	str	r3, [sp, #24]
   88750:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   88754:	e43f      	b.n	87fd6 <_dtoa_r+0x646>
   88756:	f47f af21 	bne.w	8859c <_dtoa_r+0xc0c>
   8875a:	07da      	lsls	r2, r3, #31
   8875c:	f57f af1e 	bpl.w	8859c <_dtoa_r+0xc0c>
   88760:	e717      	b.n	88592 <_dtoa_r+0xc02>
   88762:	4643      	mov	r3, r8
   88764:	46a0      	mov	r8, r4
   88766:	461c      	mov	r4, r3
   88768:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8876a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   8876e:	3301      	adds	r3, #1
   88770:	9306      	str	r3, [sp, #24]
   88772:	e430      	b.n	87fd6 <_dtoa_r+0x646>
   88774:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
   88778:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   8877c:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   88780:	4644      	mov	r4, r8
   88782:	f7ff bb6b 	b.w	87e5c <_dtoa_r+0x4cc>
   88786:	2b39      	cmp	r3, #57	; 0x39
   88788:	f108 0501 	add.w	r5, r8, #1
   8878c:	d0d1      	beq.n	88732 <_dtoa_r+0xda2>
   8878e:	f1ba 0f00 	cmp.w	sl, #0
   88792:	f73f af01 	bgt.w	88598 <_dtoa_r+0xc08>
   88796:	e701      	b.n	8859c <_dtoa_r+0xc0c>
   88798:	9b20      	ldr	r3, [sp, #128]	; 0x80
   8879a:	2b02      	cmp	r3, #2
   8879c:	f77f ae75 	ble.w	8848a <_dtoa_r+0xafa>
   887a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   887a2:	e9cd 9306 	strd	r9, r3, [sp, #24]
   887a6:	e5dc      	b.n	88362 <_dtoa_r+0x9d2>
   887a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   887aa:	2b02      	cmp	r3, #2
   887ac:	dcf8      	bgt.n	887a0 <_dtoa_r+0xe10>
   887ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   887b0:	e557      	b.n	88262 <_dtoa_r+0x8d2>
   887b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   887b4:	3301      	adds	r3, #1
   887b6:	9306      	str	r3, [sp, #24]
   887b8:	e40d      	b.n	87fd6 <_dtoa_r+0x646>
   887ba:	4b0f      	ldr	r3, [pc, #60]	; (887f8 <_dtoa_r+0xe68>)
   887bc:	9304      	str	r3, [sp, #16]
   887be:	f7ff b922 	b.w	87a06 <_dtoa_r+0x76>
   887c2:	f43f acac 	beq.w	8811e <_dtoa_r+0x78e>
   887c6:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   887ca:	e518      	b.n	881fe <_dtoa_r+0x86e>
   887cc:	2500      	movs	r5, #0
   887ce:	4620      	mov	r0, r4
   887d0:	6465      	str	r5, [r4, #68]	; 0x44
   887d2:	4629      	mov	r1, r5
   887d4:	f000 fcf4 	bl	891c0 <_Balloc>
   887d8:	f04f 33ff 	mov.w	r3, #4294967295
   887dc:	9307      	str	r3, [sp, #28]
   887de:	9310      	str	r3, [sp, #64]	; 0x40
   887e0:	2301      	movs	r3, #1
   887e2:	9004      	str	r0, [sp, #16]
   887e4:	9521      	str	r5, [sp, #132]	; 0x84
   887e6:	6420      	str	r0, [r4, #64]	; 0x40
   887e8:	930a      	str	r3, [sp, #40]	; 0x28
   887ea:	f7ff bb3b 	b.w	87e64 <_dtoa_r+0x4d4>
   887ee:	bf00      	nop
   887f0:	40240000 	.word	0x40240000
   887f4:	401c0000 	.word	0x401c0000
   887f8:	0008ab78 	.word	0x0008ab78

000887fc <__libc_fini_array>:
   887fc:	b538      	push	{r3, r4, r5, lr}
   887fe:	4c0a      	ldr	r4, [pc, #40]	; (88828 <__libc_fini_array+0x2c>)
   88800:	4d0a      	ldr	r5, [pc, #40]	; (8882c <__libc_fini_array+0x30>)
   88802:	1b64      	subs	r4, r4, r5
   88804:	10a4      	asrs	r4, r4, #2
   88806:	d00a      	beq.n	8881e <__libc_fini_array+0x22>
   88808:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   8880c:	3b01      	subs	r3, #1
   8880e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   88812:	3c01      	subs	r4, #1
   88814:	f855 3904 	ldr.w	r3, [r5], #-4
   88818:	4798      	blx	r3
   8881a:	2c00      	cmp	r4, #0
   8881c:	d1f9      	bne.n	88812 <__libc_fini_array+0x16>
   8881e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   88822:	f002 bac3 	b.w	8adac <_fini>
   88826:	bf00      	nop
   88828:	0008adbc 	.word	0x0008adbc
   8882c:	0008adb8 	.word	0x0008adb8

00088830 <_malloc_trim_r>:
   88830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88832:	460c      	mov	r4, r1
   88834:	4f23      	ldr	r7, [pc, #140]	; (888c4 <_malloc_trim_r+0x94>)
   88836:	4606      	mov	r6, r0
   88838:	f000 fcb6 	bl	891a8 <__malloc_lock>
   8883c:	68bb      	ldr	r3, [r7, #8]
   8883e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   88842:	685d      	ldr	r5, [r3, #4]
   88844:	310f      	adds	r1, #15
   88846:	f025 0503 	bic.w	r5, r5, #3
   8884a:	4429      	add	r1, r5
   8884c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   88850:	f021 010f 	bic.w	r1, r1, #15
   88854:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   88858:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8885c:	db07      	blt.n	8886e <_malloc_trim_r+0x3e>
   8885e:	2100      	movs	r1, #0
   88860:	4630      	mov	r0, r6
   88862:	f001 f9a7 	bl	89bb4 <_sbrk_r>
   88866:	68bb      	ldr	r3, [r7, #8]
   88868:	442b      	add	r3, r5
   8886a:	4298      	cmp	r0, r3
   8886c:	d004      	beq.n	88878 <_malloc_trim_r+0x48>
   8886e:	4630      	mov	r0, r6
   88870:	f000 fca0 	bl	891b4 <__malloc_unlock>
   88874:	2000      	movs	r0, #0
   88876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88878:	4261      	negs	r1, r4
   8887a:	4630      	mov	r0, r6
   8887c:	f001 f99a 	bl	89bb4 <_sbrk_r>
   88880:	3001      	adds	r0, #1
   88882:	d00d      	beq.n	888a0 <_malloc_trim_r+0x70>
   88884:	4b10      	ldr	r3, [pc, #64]	; (888c8 <_malloc_trim_r+0x98>)
   88886:	68ba      	ldr	r2, [r7, #8]
   88888:	6819      	ldr	r1, [r3, #0]
   8888a:	1b2d      	subs	r5, r5, r4
   8888c:	f045 0501 	orr.w	r5, r5, #1
   88890:	4630      	mov	r0, r6
   88892:	1b09      	subs	r1, r1, r4
   88894:	6055      	str	r5, [r2, #4]
   88896:	6019      	str	r1, [r3, #0]
   88898:	f000 fc8c 	bl	891b4 <__malloc_unlock>
   8889c:	2001      	movs	r0, #1
   8889e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   888a0:	2100      	movs	r1, #0
   888a2:	4630      	mov	r0, r6
   888a4:	f001 f986 	bl	89bb4 <_sbrk_r>
   888a8:	68ba      	ldr	r2, [r7, #8]
   888aa:	1a83      	subs	r3, r0, r2
   888ac:	2b0f      	cmp	r3, #15
   888ae:	ddde      	ble.n	8886e <_malloc_trim_r+0x3e>
   888b0:	4906      	ldr	r1, [pc, #24]	; (888cc <_malloc_trim_r+0x9c>)
   888b2:	f043 0301 	orr.w	r3, r3, #1
   888b6:	680c      	ldr	r4, [r1, #0]
   888b8:	4903      	ldr	r1, [pc, #12]	; (888c8 <_malloc_trim_r+0x98>)
   888ba:	1b00      	subs	r0, r0, r4
   888bc:	6053      	str	r3, [r2, #4]
   888be:	6008      	str	r0, [r1, #0]
   888c0:	e7d5      	b.n	8886e <_malloc_trim_r+0x3e>
   888c2:	bf00      	nop
   888c4:	20000948 	.word	0x20000948
   888c8:	200012d8 	.word	0x200012d8
   888cc:	20000d50 	.word	0x20000d50

000888d0 <_free_r>:
   888d0:	2900      	cmp	r1, #0
   888d2:	d05d      	beq.n	88990 <_free_r+0xc0>
   888d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   888d6:	460f      	mov	r7, r1
   888d8:	4606      	mov	r6, r0
   888da:	f000 fc65 	bl	891a8 <__malloc_lock>
   888de:	f857 cc04 	ldr.w	ip, [r7, #-4]
   888e2:	4c73      	ldr	r4, [pc, #460]	; (88ab0 <_free_r+0x1e0>)
   888e4:	f1a7 0008 	sub.w	r0, r7, #8
   888e8:	f02c 0301 	bic.w	r3, ip, #1
   888ec:	18c2      	adds	r2, r0, r3
   888ee:	68a1      	ldr	r1, [r4, #8]
   888f0:	6855      	ldr	r5, [r2, #4]
   888f2:	4291      	cmp	r1, r2
   888f4:	f025 0503 	bic.w	r5, r5, #3
   888f8:	d07f      	beq.n	889fa <_free_r+0x12a>
   888fa:	f01c 0f01 	tst.w	ip, #1
   888fe:	6055      	str	r5, [r2, #4]
   88900:	eb02 0105 	add.w	r1, r2, r5
   88904:	d133      	bne.n	8896e <_free_r+0x9e>
   88906:	f857 ec08 	ldr.w	lr, [r7, #-8]
   8890a:	6849      	ldr	r1, [r1, #4]
   8890c:	eba0 000e 	sub.w	r0, r0, lr
   88910:	6887      	ldr	r7, [r0, #8]
   88912:	f104 0c08 	add.w	ip, r4, #8
   88916:	4567      	cmp	r7, ip
   88918:	4473      	add	r3, lr
   8891a:	f001 0101 	and.w	r1, r1, #1
   8891e:	d060      	beq.n	889e2 <_free_r+0x112>
   88920:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   88924:	f8c7 e00c 	str.w	lr, [r7, #12]
   88928:	f8ce 7008 	str.w	r7, [lr, #8]
   8892c:	2900      	cmp	r1, #0
   8892e:	f000 8089 	beq.w	88a44 <_free_r+0x174>
   88932:	f043 0101 	orr.w	r1, r3, #1
   88936:	6041      	str	r1, [r0, #4]
   88938:	6013      	str	r3, [r2, #0]
   8893a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8893e:	d230      	bcs.n	889a2 <_free_r+0xd2>
   88940:	2201      	movs	r2, #1
   88942:	08db      	lsrs	r3, r3, #3
   88944:	6865      	ldr	r5, [r4, #4]
   88946:	1099      	asrs	r1, r3, #2
   88948:	4413      	add	r3, r2
   8894a:	408a      	lsls	r2, r1
   8894c:	432a      	orrs	r2, r5
   8894e:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
   88952:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
   88956:	3908      	subs	r1, #8
   88958:	e9c0 5102 	strd	r5, r1, [r0, #8]
   8895c:	6062      	str	r2, [r4, #4]
   8895e:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
   88962:	60e8      	str	r0, [r5, #12]
   88964:	4630      	mov	r0, r6
   88966:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8896a:	f000 bc23 	b.w	891b4 <__malloc_unlock>
   8896e:	6849      	ldr	r1, [r1, #4]
   88970:	07c9      	lsls	r1, r1, #31
   88972:	d40e      	bmi.n	88992 <_free_r+0xc2>
   88974:	442b      	add	r3, r5
   88976:	f104 0c08 	add.w	ip, r4, #8
   8897a:	6891      	ldr	r1, [r2, #8]
   8897c:	f043 0501 	orr.w	r5, r3, #1
   88980:	4561      	cmp	r1, ip
   88982:	d067      	beq.n	88a54 <_free_r+0x184>
   88984:	68d2      	ldr	r2, [r2, #12]
   88986:	60ca      	str	r2, [r1, #12]
   88988:	6091      	str	r1, [r2, #8]
   8898a:	6045      	str	r5, [r0, #4]
   8898c:	50c3      	str	r3, [r0, r3]
   8898e:	e7d4      	b.n	8893a <_free_r+0x6a>
   88990:	4770      	bx	lr
   88992:	f043 0101 	orr.w	r1, r3, #1
   88996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8899a:	f847 1c04 	str.w	r1, [r7, #-4]
   8899e:	6013      	str	r3, [r2, #0]
   889a0:	d3ce      	bcc.n	88940 <_free_r+0x70>
   889a2:	0a5a      	lsrs	r2, r3, #9
   889a4:	2a04      	cmp	r2, #4
   889a6:	d842      	bhi.n	88a2e <_free_r+0x15e>
   889a8:	099a      	lsrs	r2, r3, #6
   889aa:	f102 0739 	add.w	r7, r2, #57	; 0x39
   889ae:	00ff      	lsls	r7, r7, #3
   889b0:	f102 0138 	add.w	r1, r2, #56	; 0x38
   889b4:	19e5      	adds	r5, r4, r7
   889b6:	59e2      	ldr	r2, [r4, r7]
   889b8:	3d08      	subs	r5, #8
   889ba:	4295      	cmp	r5, r2
   889bc:	d051      	beq.n	88a62 <_free_r+0x192>
   889be:	6851      	ldr	r1, [r2, #4]
   889c0:	f021 0103 	bic.w	r1, r1, #3
   889c4:	4299      	cmp	r1, r3
   889c6:	d902      	bls.n	889ce <_free_r+0xfe>
   889c8:	6892      	ldr	r2, [r2, #8]
   889ca:	4295      	cmp	r5, r2
   889cc:	d1f7      	bne.n	889be <_free_r+0xee>
   889ce:	68d5      	ldr	r5, [r2, #12]
   889d0:	e9c0 2502 	strd	r2, r5, [r0, #8]
   889d4:	60a8      	str	r0, [r5, #8]
   889d6:	60d0      	str	r0, [r2, #12]
   889d8:	4630      	mov	r0, r6
   889da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   889de:	f000 bbe9 	b.w	891b4 <__malloc_unlock>
   889e2:	2900      	cmp	r1, #0
   889e4:	d15e      	bne.n	88aa4 <_free_r+0x1d4>
   889e6:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   889ea:	442b      	add	r3, r5
   889ec:	f043 0401 	orr.w	r4, r3, #1
   889f0:	60ca      	str	r2, [r1, #12]
   889f2:	6091      	str	r1, [r2, #8]
   889f4:	6044      	str	r4, [r0, #4]
   889f6:	50c3      	str	r3, [r0, r3]
   889f8:	e7b4      	b.n	88964 <_free_r+0x94>
   889fa:	f01c 0f01 	tst.w	ip, #1
   889fe:	442b      	add	r3, r5
   88a00:	d107      	bne.n	88a12 <_free_r+0x142>
   88a02:	f857 5c08 	ldr.w	r5, [r7, #-8]
   88a06:	1b40      	subs	r0, r0, r5
   88a08:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   88a0c:	442b      	add	r3, r5
   88a0e:	60ca      	str	r2, [r1, #12]
   88a10:	6091      	str	r1, [r2, #8]
   88a12:	4a28      	ldr	r2, [pc, #160]	; (88ab4 <_free_r+0x1e4>)
   88a14:	f043 0101 	orr.w	r1, r3, #1
   88a18:	6812      	ldr	r2, [r2, #0]
   88a1a:	6041      	str	r1, [r0, #4]
   88a1c:	429a      	cmp	r2, r3
   88a1e:	60a0      	str	r0, [r4, #8]
   88a20:	d8a0      	bhi.n	88964 <_free_r+0x94>
   88a22:	4b25      	ldr	r3, [pc, #148]	; (88ab8 <_free_r+0x1e8>)
   88a24:	4630      	mov	r0, r6
   88a26:	6819      	ldr	r1, [r3, #0]
   88a28:	f7ff ff02 	bl	88830 <_malloc_trim_r>
   88a2c:	e79a      	b.n	88964 <_free_r+0x94>
   88a2e:	2a14      	cmp	r2, #20
   88a30:	d90a      	bls.n	88a48 <_free_r+0x178>
   88a32:	2a54      	cmp	r2, #84	; 0x54
   88a34:	d81d      	bhi.n	88a72 <_free_r+0x1a2>
   88a36:	0b1a      	lsrs	r2, r3, #12
   88a38:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   88a3c:	00ff      	lsls	r7, r7, #3
   88a3e:	f102 016e 	add.w	r1, r2, #110	; 0x6e
   88a42:	e7b7      	b.n	889b4 <_free_r+0xe4>
   88a44:	442b      	add	r3, r5
   88a46:	e798      	b.n	8897a <_free_r+0xaa>
   88a48:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   88a4c:	00ff      	lsls	r7, r7, #3
   88a4e:	f102 015b 	add.w	r1, r2, #91	; 0x5b
   88a52:	e7af      	b.n	889b4 <_free_r+0xe4>
   88a54:	e9c4 0004 	strd	r0, r0, [r4, #16]
   88a58:	e9c0 cc02 	strd	ip, ip, [r0, #8]
   88a5c:	6045      	str	r5, [r0, #4]
   88a5e:	50c3      	str	r3, [r0, r3]
   88a60:	e780      	b.n	88964 <_free_r+0x94>
   88a62:	2701      	movs	r7, #1
   88a64:	6863      	ldr	r3, [r4, #4]
   88a66:	1089      	asrs	r1, r1, #2
   88a68:	fa07 f101 	lsl.w	r1, r7, r1
   88a6c:	4319      	orrs	r1, r3
   88a6e:	6061      	str	r1, [r4, #4]
   88a70:	e7ae      	b.n	889d0 <_free_r+0x100>
   88a72:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   88a76:	d806      	bhi.n	88a86 <_free_r+0x1b6>
   88a78:	0bda      	lsrs	r2, r3, #15
   88a7a:	f102 0778 	add.w	r7, r2, #120	; 0x78
   88a7e:	00ff      	lsls	r7, r7, #3
   88a80:	f102 0177 	add.w	r1, r2, #119	; 0x77
   88a84:	e796      	b.n	889b4 <_free_r+0xe4>
   88a86:	f240 5154 	movw	r1, #1364	; 0x554
   88a8a:	428a      	cmp	r2, r1
   88a8c:	d806      	bhi.n	88a9c <_free_r+0x1cc>
   88a8e:	0c9a      	lsrs	r2, r3, #18
   88a90:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   88a94:	00ff      	lsls	r7, r7, #3
   88a96:	f102 017c 	add.w	r1, r2, #124	; 0x7c
   88a9a:	e78b      	b.n	889b4 <_free_r+0xe4>
   88a9c:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   88aa0:	217e      	movs	r1, #126	; 0x7e
   88aa2:	e787      	b.n	889b4 <_free_r+0xe4>
   88aa4:	f043 0101 	orr.w	r1, r3, #1
   88aa8:	6041      	str	r1, [r0, #4]
   88aaa:	6013      	str	r3, [r2, #0]
   88aac:	e75a      	b.n	88964 <_free_r+0x94>
   88aae:	bf00      	nop
   88ab0:	20000948 	.word	0x20000948
   88ab4:	20000d54 	.word	0x20000d54
   88ab8:	20001308 	.word	0x20001308

00088abc <_localeconv_r>:
   88abc:	4800      	ldr	r0, [pc, #0]	; (88ac0 <_localeconv_r+0x4>)
   88abe:	4770      	bx	lr
   88ac0:	200008cc 	.word	0x200008cc

00088ac4 <__retarget_lock_acquire_recursive>:
   88ac4:	4770      	bx	lr
   88ac6:	bf00      	nop

00088ac8 <__retarget_lock_release_recursive>:
   88ac8:	4770      	bx	lr
   88aca:	bf00      	nop

00088acc <_malloc_r>:
   88acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88ad0:	f101 050b 	add.w	r5, r1, #11
   88ad4:	2d16      	cmp	r5, #22
   88ad6:	b083      	sub	sp, #12
   88ad8:	4606      	mov	r6, r0
   88ada:	d823      	bhi.n	88b24 <_malloc_r+0x58>
   88adc:	2910      	cmp	r1, #16
   88ade:	f200 80b6 	bhi.w	88c4e <_malloc_r+0x182>
   88ae2:	f000 fb61 	bl	891a8 <__malloc_lock>
   88ae6:	2510      	movs	r5, #16
   88ae8:	2318      	movs	r3, #24
   88aea:	2002      	movs	r0, #2
   88aec:	4fcb      	ldr	r7, [pc, #812]	; (88e1c <_malloc_r+0x350>)
   88aee:	443b      	add	r3, r7
   88af0:	685c      	ldr	r4, [r3, #4]
   88af2:	f1a3 0208 	sub.w	r2, r3, #8
   88af6:	4294      	cmp	r4, r2
   88af8:	f000 80b6 	beq.w	88c68 <_malloc_r+0x19c>
   88afc:	6863      	ldr	r3, [r4, #4]
   88afe:	68e1      	ldr	r1, [r4, #12]
   88b00:	f023 0303 	bic.w	r3, r3, #3
   88b04:	4423      	add	r3, r4
   88b06:	685a      	ldr	r2, [r3, #4]
   88b08:	68a5      	ldr	r5, [r4, #8]
   88b0a:	f042 0201 	orr.w	r2, r2, #1
   88b0e:	60e9      	str	r1, [r5, #12]
   88b10:	4630      	mov	r0, r6
   88b12:	608d      	str	r5, [r1, #8]
   88b14:	3408      	adds	r4, #8
   88b16:	605a      	str	r2, [r3, #4]
   88b18:	f000 fb4c 	bl	891b4 <__malloc_unlock>
   88b1c:	4620      	mov	r0, r4
   88b1e:	b003      	add	sp, #12
   88b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88b24:	f035 0507 	bics.w	r5, r5, #7
   88b28:	f100 8091 	bmi.w	88c4e <_malloc_r+0x182>
   88b2c:	42a9      	cmp	r1, r5
   88b2e:	f200 808e 	bhi.w	88c4e <_malloc_r+0x182>
   88b32:	f000 fb39 	bl	891a8 <__malloc_lock>
   88b36:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   88b3a:	f0c0 8195 	bcc.w	88e68 <_malloc_r+0x39c>
   88b3e:	0a6b      	lsrs	r3, r5, #9
   88b40:	f000 808c 	beq.w	88c5c <_malloc_r+0x190>
   88b44:	2b04      	cmp	r3, #4
   88b46:	f200 815c 	bhi.w	88e02 <_malloc_r+0x336>
   88b4a:	09ab      	lsrs	r3, r5, #6
   88b4c:	f103 0039 	add.w	r0, r3, #57	; 0x39
   88b50:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   88b54:	00c1      	lsls	r1, r0, #3
   88b56:	4fb1      	ldr	r7, [pc, #708]	; (88e1c <_malloc_r+0x350>)
   88b58:	4439      	add	r1, r7
   88b5a:	684c      	ldr	r4, [r1, #4]
   88b5c:	3908      	subs	r1, #8
   88b5e:	42a1      	cmp	r1, r4
   88b60:	d106      	bne.n	88b70 <_malloc_r+0xa4>
   88b62:	e00c      	b.n	88b7e <_malloc_r+0xb2>
   88b64:	2a00      	cmp	r2, #0
   88b66:	f280 8125 	bge.w	88db4 <_malloc_r+0x2e8>
   88b6a:	68e4      	ldr	r4, [r4, #12]
   88b6c:	42a1      	cmp	r1, r4
   88b6e:	d006      	beq.n	88b7e <_malloc_r+0xb2>
   88b70:	6863      	ldr	r3, [r4, #4]
   88b72:	f023 0303 	bic.w	r3, r3, #3
   88b76:	1b5a      	subs	r2, r3, r5
   88b78:	2a0f      	cmp	r2, #15
   88b7a:	ddf3      	ble.n	88b64 <_malloc_r+0x98>
   88b7c:	4660      	mov	r0, ip
   88b7e:	693c      	ldr	r4, [r7, #16]
   88b80:	f8df c2ac 	ldr.w	ip, [pc, #684]	; 88e30 <_malloc_r+0x364>
   88b84:	4564      	cmp	r4, ip
   88b86:	d07a      	beq.n	88c7e <_malloc_r+0x1b2>
   88b88:	6863      	ldr	r3, [r4, #4]
   88b8a:	f023 0303 	bic.w	r3, r3, #3
   88b8e:	1b5a      	subs	r2, r3, r5
   88b90:	2a0f      	cmp	r2, #15
   88b92:	f300 8177 	bgt.w	88e84 <_malloc_r+0x3b8>
   88b96:	2a00      	cmp	r2, #0
   88b98:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   88b9c:	f280 8168 	bge.w	88e70 <_malloc_r+0x3a4>
   88ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   88ba4:	f080 810a 	bcs.w	88dbc <_malloc_r+0x2f0>
   88ba8:	2201      	movs	r2, #1
   88baa:	08db      	lsrs	r3, r3, #3
   88bac:	1099      	asrs	r1, r3, #2
   88bae:	4413      	add	r3, r2
   88bb0:	408a      	lsls	r2, r1
   88bb2:	6879      	ldr	r1, [r7, #4]
   88bb4:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
   88bb8:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
   88bbc:	430a      	orrs	r2, r1
   88bbe:	f1a8 0108 	sub.w	r1, r8, #8
   88bc2:	e9c4 e102 	strd	lr, r1, [r4, #8]
   88bc6:	607a      	str	r2, [r7, #4]
   88bc8:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   88bcc:	f8ce 400c 	str.w	r4, [lr, #12]
   88bd0:	2401      	movs	r4, #1
   88bd2:	1083      	asrs	r3, r0, #2
   88bd4:	409c      	lsls	r4, r3
   88bd6:	4294      	cmp	r4, r2
   88bd8:	d857      	bhi.n	88c8a <_malloc_r+0x1be>
   88bda:	4214      	tst	r4, r2
   88bdc:	d106      	bne.n	88bec <_malloc_r+0x120>
   88bde:	f020 0003 	bic.w	r0, r0, #3
   88be2:	0064      	lsls	r4, r4, #1
   88be4:	4214      	tst	r4, r2
   88be6:	f100 0004 	add.w	r0, r0, #4
   88bea:	d0fa      	beq.n	88be2 <_malloc_r+0x116>
   88bec:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   88bf0:	46ce      	mov	lr, r9
   88bf2:	4680      	mov	r8, r0
   88bf4:	f8de 300c 	ldr.w	r3, [lr, #12]
   88bf8:	459e      	cmp	lr, r3
   88bfa:	d107      	bne.n	88c0c <_malloc_r+0x140>
   88bfc:	e11c      	b.n	88e38 <_malloc_r+0x36c>
   88bfe:	2a00      	cmp	r2, #0
   88c00:	f280 8123 	bge.w	88e4a <_malloc_r+0x37e>
   88c04:	68db      	ldr	r3, [r3, #12]
   88c06:	459e      	cmp	lr, r3
   88c08:	f000 8116 	beq.w	88e38 <_malloc_r+0x36c>
   88c0c:	6859      	ldr	r1, [r3, #4]
   88c0e:	f021 0103 	bic.w	r1, r1, #3
   88c12:	1b4a      	subs	r2, r1, r5
   88c14:	2a0f      	cmp	r2, #15
   88c16:	ddf2      	ble.n	88bfe <_malloc_r+0x132>
   88c18:	f045 0801 	orr.w	r8, r5, #1
   88c1c:	4630      	mov	r0, r6
   88c1e:	e9d3 e402 	ldrd	lr, r4, [r3, #8]
   88c22:	441d      	add	r5, r3
   88c24:	f042 0601 	orr.w	r6, r2, #1
   88c28:	f8c3 8004 	str.w	r8, [r3, #4]
   88c2c:	f8ce 400c 	str.w	r4, [lr, #12]
   88c30:	f8c4 e008 	str.w	lr, [r4, #8]
   88c34:	e9c7 5504 	strd	r5, r5, [r7, #16]
   88c38:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   88c3c:	606e      	str	r6, [r5, #4]
   88c3e:	505a      	str	r2, [r3, r1]
   88c40:	9300      	str	r3, [sp, #0]
   88c42:	f000 fab7 	bl	891b4 <__malloc_unlock>
   88c46:	9b00      	ldr	r3, [sp, #0]
   88c48:	f103 0408 	add.w	r4, r3, #8
   88c4c:	e002      	b.n	88c54 <_malloc_r+0x188>
   88c4e:	230c      	movs	r3, #12
   88c50:	2400      	movs	r4, #0
   88c52:	6033      	str	r3, [r6, #0]
   88c54:	4620      	mov	r0, r4
   88c56:	b003      	add	sp, #12
   88c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88c5c:	f44f 7100 	mov.w	r1, #512	; 0x200
   88c60:	2040      	movs	r0, #64	; 0x40
   88c62:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   88c66:	e776      	b.n	88b56 <_malloc_r+0x8a>
   88c68:	68dc      	ldr	r4, [r3, #12]
   88c6a:	42a3      	cmp	r3, r4
   88c6c:	bf08      	it	eq
   88c6e:	3002      	addeq	r0, #2
   88c70:	f47f af44 	bne.w	88afc <_malloc_r+0x30>
   88c74:	693c      	ldr	r4, [r7, #16]
   88c76:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 88e30 <_malloc_r+0x364>
   88c7a:	4564      	cmp	r4, ip
   88c7c:	d184      	bne.n	88b88 <_malloc_r+0xbc>
   88c7e:	2401      	movs	r4, #1
   88c80:	687a      	ldr	r2, [r7, #4]
   88c82:	1083      	asrs	r3, r0, #2
   88c84:	409c      	lsls	r4, r3
   88c86:	4294      	cmp	r4, r2
   88c88:	d9a7      	bls.n	88bda <_malloc_r+0x10e>
   88c8a:	68bc      	ldr	r4, [r7, #8]
   88c8c:	6863      	ldr	r3, [r4, #4]
   88c8e:	f023 0803 	bic.w	r8, r3, #3
   88c92:	45a8      	cmp	r8, r5
   88c94:	d303      	bcc.n	88c9e <_malloc_r+0x1d2>
   88c96:	eba8 0305 	sub.w	r3, r8, r5
   88c9a:	2b0f      	cmp	r3, #15
   88c9c:	dc7a      	bgt.n	88d94 <_malloc_r+0x2c8>
   88c9e:	f8df 9194 	ldr.w	r9, [pc, #404]	; 88e34 <_malloc_r+0x368>
   88ca2:	4b5f      	ldr	r3, [pc, #380]	; (88e20 <_malloc_r+0x354>)
   88ca4:	f8d9 2000 	ldr.w	r2, [r9]
   88ca8:	681b      	ldr	r3, [r3, #0]
   88caa:	3201      	adds	r2, #1
   88cac:	442b      	add	r3, r5
   88cae:	eb04 0a08 	add.w	sl, r4, r8
   88cb2:	f000 8132 	beq.w	88f1a <_malloc_r+0x44e>
   88cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   88cba:	330f      	adds	r3, #15
   88cbc:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   88cc0:	f02b 0b0f 	bic.w	fp, fp, #15
   88cc4:	4659      	mov	r1, fp
   88cc6:	4630      	mov	r0, r6
   88cc8:	f000 ff74 	bl	89bb4 <_sbrk_r>
   88ccc:	1c41      	adds	r1, r0, #1
   88cce:	4602      	mov	r2, r0
   88cd0:	f000 80f2 	beq.w	88eb8 <_malloc_r+0x3ec>
   88cd4:	4582      	cmp	sl, r0
   88cd6:	f200 80ed 	bhi.w	88eb4 <_malloc_r+0x3e8>
   88cda:	4b52      	ldr	r3, [pc, #328]	; (88e24 <_malloc_r+0x358>)
   88cdc:	6818      	ldr	r0, [r3, #0]
   88cde:	4458      	add	r0, fp
   88ce0:	6018      	str	r0, [r3, #0]
   88ce2:	4601      	mov	r1, r0
   88ce4:	f000 814d 	beq.w	88f82 <_malloc_r+0x4b6>
   88ce8:	f8d9 0000 	ldr.w	r0, [r9]
   88cec:	9301      	str	r3, [sp, #4]
   88cee:	3001      	adds	r0, #1
   88cf0:	bf1b      	ittet	ne
   88cf2:	eba2 0a0a 	subne.w	sl, r2, sl
   88cf6:	4451      	addne	r1, sl
   88cf8:	f8c9 2000 	streq.w	r2, [r9]
   88cfc:	6019      	strne	r1, [r3, #0]
   88cfe:	f012 0a07 	ands.w	sl, r2, #7
   88d02:	f000 8116 	beq.w	88f32 <_malloc_r+0x466>
   88d06:	f1ca 0108 	rsb	r1, sl, #8
   88d0a:	440a      	add	r2, r1
   88d0c:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
   88d10:	4493      	add	fp, r2
   88d12:	3108      	adds	r1, #8
   88d14:	eba1 010b 	sub.w	r1, r1, fp
   88d18:	f3c1 090b 	ubfx	r9, r1, #0, #12
   88d1c:	4649      	mov	r1, r9
   88d1e:	4630      	mov	r0, r6
   88d20:	9200      	str	r2, [sp, #0]
   88d22:	f000 ff47 	bl	89bb4 <_sbrk_r>
   88d26:	1c42      	adds	r2, r0, #1
   88d28:	e9dd 2300 	ldrd	r2, r3, [sp]
   88d2c:	f000 814e 	beq.w	88fcc <_malloc_r+0x500>
   88d30:	1a80      	subs	r0, r0, r2
   88d32:	eb00 0b09 	add.w	fp, r0, r9
   88d36:	6818      	ldr	r0, [r3, #0]
   88d38:	f04b 0101 	orr.w	r1, fp, #1
   88d3c:	4448      	add	r0, r9
   88d3e:	42bc      	cmp	r4, r7
   88d40:	60ba      	str	r2, [r7, #8]
   88d42:	6018      	str	r0, [r3, #0]
   88d44:	6051      	str	r1, [r2, #4]
   88d46:	f000 8128 	beq.w	88f9a <_malloc_r+0x4ce>
   88d4a:	f1b8 0f0f 	cmp.w	r8, #15
   88d4e:	f240 8126 	bls.w	88f9e <_malloc_r+0x4d2>
   88d52:	f04f 0e05 	mov.w	lr, #5
   88d56:	6861      	ldr	r1, [r4, #4]
   88d58:	f1a8 0c0c 	sub.w	ip, r8, #12
   88d5c:	f02c 0c07 	bic.w	ip, ip, #7
   88d60:	f001 0101 	and.w	r1, r1, #1
   88d64:	ea41 010c 	orr.w	r1, r1, ip
   88d68:	eb04 080c 	add.w	r8, r4, ip
   88d6c:	f1bc 0f0f 	cmp.w	ip, #15
   88d70:	6061      	str	r1, [r4, #4]
   88d72:	e9c8 ee01 	strd	lr, lr, [r8, #4]
   88d76:	f200 8131 	bhi.w	88fdc <_malloc_r+0x510>
   88d7a:	4614      	mov	r4, r2
   88d7c:	6851      	ldr	r1, [r2, #4]
   88d7e:	4b2a      	ldr	r3, [pc, #168]	; (88e28 <_malloc_r+0x35c>)
   88d80:	681a      	ldr	r2, [r3, #0]
   88d82:	4282      	cmp	r2, r0
   88d84:	bf38      	it	cc
   88d86:	6018      	strcc	r0, [r3, #0]
   88d88:	4b28      	ldr	r3, [pc, #160]	; (88e2c <_malloc_r+0x360>)
   88d8a:	681a      	ldr	r2, [r3, #0]
   88d8c:	4282      	cmp	r2, r0
   88d8e:	bf38      	it	cc
   88d90:	6018      	strcc	r0, [r3, #0]
   88d92:	e093      	b.n	88ebc <_malloc_r+0x3f0>
   88d94:	f045 0201 	orr.w	r2, r5, #1
   88d98:	f043 0301 	orr.w	r3, r3, #1
   88d9c:	4425      	add	r5, r4
   88d9e:	6062      	str	r2, [r4, #4]
   88da0:	4630      	mov	r0, r6
   88da2:	60bd      	str	r5, [r7, #8]
   88da4:	3408      	adds	r4, #8
   88da6:	606b      	str	r3, [r5, #4]
   88da8:	f000 fa04 	bl	891b4 <__malloc_unlock>
   88dac:	4620      	mov	r0, r4
   88dae:	b003      	add	sp, #12
   88db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88db4:	4423      	add	r3, r4
   88db6:	685a      	ldr	r2, [r3, #4]
   88db8:	68e1      	ldr	r1, [r4, #12]
   88dba:	e6a5      	b.n	88b08 <_malloc_r+0x3c>
   88dbc:	0a5a      	lsrs	r2, r3, #9
   88dbe:	2a04      	cmp	r2, #4
   88dc0:	d972      	bls.n	88ea8 <_malloc_r+0x3dc>
   88dc2:	2a14      	cmp	r2, #20
   88dc4:	f200 80c6 	bhi.w	88f54 <_malloc_r+0x488>
   88dc8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   88dcc:	00c9      	lsls	r1, r1, #3
   88dce:	325b      	adds	r2, #91	; 0x5b
   88dd0:	eb07 0e01 	add.w	lr, r7, r1
   88dd4:	5879      	ldr	r1, [r7, r1]
   88dd6:	f1ae 0e08 	sub.w	lr, lr, #8
   88dda:	458e      	cmp	lr, r1
   88ddc:	f000 80a0 	beq.w	88f20 <_malloc_r+0x454>
   88de0:	684a      	ldr	r2, [r1, #4]
   88de2:	f022 0203 	bic.w	r2, r2, #3
   88de6:	429a      	cmp	r2, r3
   88de8:	d902      	bls.n	88df0 <_malloc_r+0x324>
   88dea:	6889      	ldr	r1, [r1, #8]
   88dec:	458e      	cmp	lr, r1
   88dee:	d1f7      	bne.n	88de0 <_malloc_r+0x314>
   88df0:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   88df4:	687a      	ldr	r2, [r7, #4]
   88df6:	e9c4 1e02 	strd	r1, lr, [r4, #8]
   88dfa:	f8ce 4008 	str.w	r4, [lr, #8]
   88dfe:	60cc      	str	r4, [r1, #12]
   88e00:	e6e6      	b.n	88bd0 <_malloc_r+0x104>
   88e02:	2b14      	cmp	r3, #20
   88e04:	d968      	bls.n	88ed8 <_malloc_r+0x40c>
   88e06:	2b54      	cmp	r3, #84	; 0x54
   88e08:	f200 80ac 	bhi.w	88f64 <_malloc_r+0x498>
   88e0c:	0b2b      	lsrs	r3, r5, #12
   88e0e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   88e12:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   88e16:	00c1      	lsls	r1, r0, #3
   88e18:	e69d      	b.n	88b56 <_malloc_r+0x8a>
   88e1a:	bf00      	nop
   88e1c:	20000948 	.word	0x20000948
   88e20:	20001308 	.word	0x20001308
   88e24:	200012d8 	.word	0x200012d8
   88e28:	20001300 	.word	0x20001300
   88e2c:	20001304 	.word	0x20001304
   88e30:	20000950 	.word	0x20000950
   88e34:	20000d50 	.word	0x20000d50
   88e38:	f108 0801 	add.w	r8, r8, #1
   88e3c:	f018 0f03 	tst.w	r8, #3
   88e40:	f10e 0e08 	add.w	lr, lr, #8
   88e44:	f47f aed6 	bne.w	88bf4 <_malloc_r+0x128>
   88e48:	e051      	b.n	88eee <_malloc_r+0x422>
   88e4a:	461c      	mov	r4, r3
   88e4c:	4419      	add	r1, r3
   88e4e:	684a      	ldr	r2, [r1, #4]
   88e50:	68db      	ldr	r3, [r3, #12]
   88e52:	f854 5f08 	ldr.w	r5, [r4, #8]!
   88e56:	f042 0201 	orr.w	r2, r2, #1
   88e5a:	604a      	str	r2, [r1, #4]
   88e5c:	4630      	mov	r0, r6
   88e5e:	60eb      	str	r3, [r5, #12]
   88e60:	609d      	str	r5, [r3, #8]
   88e62:	f000 f9a7 	bl	891b4 <__malloc_unlock>
   88e66:	e6f5      	b.n	88c54 <_malloc_r+0x188>
   88e68:	08e8      	lsrs	r0, r5, #3
   88e6a:	f105 0308 	add.w	r3, r5, #8
   88e6e:	e63d      	b.n	88aec <_malloc_r+0x20>
   88e70:	4423      	add	r3, r4
   88e72:	685a      	ldr	r2, [r3, #4]
   88e74:	4630      	mov	r0, r6
   88e76:	f042 0201 	orr.w	r2, r2, #1
   88e7a:	605a      	str	r2, [r3, #4]
   88e7c:	3408      	adds	r4, #8
   88e7e:	f000 f999 	bl	891b4 <__malloc_unlock>
   88e82:	e6e7      	b.n	88c54 <_malloc_r+0x188>
   88e84:	f045 0e01 	orr.w	lr, r5, #1
   88e88:	f042 0101 	orr.w	r1, r2, #1
   88e8c:	4425      	add	r5, r4
   88e8e:	f8c4 e004 	str.w	lr, [r4, #4]
   88e92:	4630      	mov	r0, r6
   88e94:	e9c7 5504 	strd	r5, r5, [r7, #16]
   88e98:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   88e9c:	6069      	str	r1, [r5, #4]
   88e9e:	50e2      	str	r2, [r4, r3]
   88ea0:	f000 f988 	bl	891b4 <__malloc_unlock>
   88ea4:	3408      	adds	r4, #8
   88ea6:	e6d5      	b.n	88c54 <_malloc_r+0x188>
   88ea8:	099a      	lsrs	r2, r3, #6
   88eaa:	f102 0139 	add.w	r1, r2, #57	; 0x39
   88eae:	00c9      	lsls	r1, r1, #3
   88eb0:	3238      	adds	r2, #56	; 0x38
   88eb2:	e78d      	b.n	88dd0 <_malloc_r+0x304>
   88eb4:	42bc      	cmp	r4, r7
   88eb6:	d05f      	beq.n	88f78 <_malloc_r+0x4ac>
   88eb8:	68bc      	ldr	r4, [r7, #8]
   88eba:	6861      	ldr	r1, [r4, #4]
   88ebc:	f021 0b03 	bic.w	fp, r1, #3
   88ec0:	45ab      	cmp	fp, r5
   88ec2:	ebab 0305 	sub.w	r3, fp, r5
   88ec6:	d302      	bcc.n	88ece <_malloc_r+0x402>
   88ec8:	2b0f      	cmp	r3, #15
   88eca:	f73f af63 	bgt.w	88d94 <_malloc_r+0x2c8>
   88ece:	4630      	mov	r0, r6
   88ed0:	f000 f970 	bl	891b4 <__malloc_unlock>
   88ed4:	2400      	movs	r4, #0
   88ed6:	e6bd      	b.n	88c54 <_malloc_r+0x188>
   88ed8:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   88edc:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   88ee0:	00c1      	lsls	r1, r0, #3
   88ee2:	e638      	b.n	88b56 <_malloc_r+0x8a>
   88ee4:	f859 3908 	ldr.w	r3, [r9], #-8
   88ee8:	454b      	cmp	r3, r9
   88eea:	f040 8096 	bne.w	8901a <_malloc_r+0x54e>
   88eee:	f010 0f03 	tst.w	r0, #3
   88ef2:	f100 30ff 	add.w	r0, r0, #4294967295
   88ef6:	d1f5      	bne.n	88ee4 <_malloc_r+0x418>
   88ef8:	687b      	ldr	r3, [r7, #4]
   88efa:	ea23 0304 	bic.w	r3, r3, r4
   88efe:	607b      	str	r3, [r7, #4]
   88f00:	0064      	lsls	r4, r4, #1
   88f02:	429c      	cmp	r4, r3
   88f04:	f63f aec1 	bhi.w	88c8a <_malloc_r+0x1be>
   88f08:	b91c      	cbnz	r4, 88f12 <_malloc_r+0x446>
   88f0a:	e6be      	b.n	88c8a <_malloc_r+0x1be>
   88f0c:	0064      	lsls	r4, r4, #1
   88f0e:	f108 0804 	add.w	r8, r8, #4
   88f12:	421c      	tst	r4, r3
   88f14:	d0fa      	beq.n	88f0c <_malloc_r+0x440>
   88f16:	4640      	mov	r0, r8
   88f18:	e668      	b.n	88bec <_malloc_r+0x120>
   88f1a:	f103 0b10 	add.w	fp, r3, #16
   88f1e:	e6d1      	b.n	88cc4 <_malloc_r+0x1f8>
   88f20:	f04f 0801 	mov.w	r8, #1
   88f24:	687b      	ldr	r3, [r7, #4]
   88f26:	1092      	asrs	r2, r2, #2
   88f28:	fa08 f202 	lsl.w	r2, r8, r2
   88f2c:	431a      	orrs	r2, r3
   88f2e:	607a      	str	r2, [r7, #4]
   88f30:	e761      	b.n	88df6 <_malloc_r+0x32a>
   88f32:	eb02 000b 	add.w	r0, r2, fp
   88f36:	4240      	negs	r0, r0
   88f38:	f3c0 090b 	ubfx	r9, r0, #0, #12
   88f3c:	4649      	mov	r1, r9
   88f3e:	4630      	mov	r0, r6
   88f40:	9200      	str	r2, [sp, #0]
   88f42:	f000 fe37 	bl	89bb4 <_sbrk_r>
   88f46:	1c43      	adds	r3, r0, #1
   88f48:	e9dd 2300 	ldrd	r2, r3, [sp]
   88f4c:	f47f aef0 	bne.w	88d30 <_malloc_r+0x264>
   88f50:	46d1      	mov	r9, sl
   88f52:	e6f0      	b.n	88d36 <_malloc_r+0x26a>
   88f54:	2a54      	cmp	r2, #84	; 0x54
   88f56:	d825      	bhi.n	88fa4 <_malloc_r+0x4d8>
   88f58:	0b1a      	lsrs	r2, r3, #12
   88f5a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   88f5e:	00c9      	lsls	r1, r1, #3
   88f60:	326e      	adds	r2, #110	; 0x6e
   88f62:	e735      	b.n	88dd0 <_malloc_r+0x304>
   88f64:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   88f68:	d825      	bhi.n	88fb6 <_malloc_r+0x4ea>
   88f6a:	0beb      	lsrs	r3, r5, #15
   88f6c:	f103 0078 	add.w	r0, r3, #120	; 0x78
   88f70:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   88f74:	00c1      	lsls	r1, r0, #3
   88f76:	e5ee      	b.n	88b56 <_malloc_r+0x8a>
   88f78:	4b29      	ldr	r3, [pc, #164]	; (89020 <_malloc_r+0x554>)
   88f7a:	6819      	ldr	r1, [r3, #0]
   88f7c:	4459      	add	r1, fp
   88f7e:	6019      	str	r1, [r3, #0]
   88f80:	e6b2      	b.n	88ce8 <_malloc_r+0x21c>
   88f82:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   88f86:	f1bc 0f00 	cmp.w	ip, #0
   88f8a:	f47f aead 	bne.w	88ce8 <_malloc_r+0x21c>
   88f8e:	44c3      	add	fp, r8
   88f90:	68bc      	ldr	r4, [r7, #8]
   88f92:	f04b 0101 	orr.w	r1, fp, #1
   88f96:	6061      	str	r1, [r4, #4]
   88f98:	e6f1      	b.n	88d7e <_malloc_r+0x2b2>
   88f9a:	4614      	mov	r4, r2
   88f9c:	e6ef      	b.n	88d7e <_malloc_r+0x2b2>
   88f9e:	2301      	movs	r3, #1
   88fa0:	6053      	str	r3, [r2, #4]
   88fa2:	e794      	b.n	88ece <_malloc_r+0x402>
   88fa4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   88fa8:	d823      	bhi.n	88ff2 <_malloc_r+0x526>
   88faa:	0bda      	lsrs	r2, r3, #15
   88fac:	f102 0178 	add.w	r1, r2, #120	; 0x78
   88fb0:	00c9      	lsls	r1, r1, #3
   88fb2:	3277      	adds	r2, #119	; 0x77
   88fb4:	e70c      	b.n	88dd0 <_malloc_r+0x304>
   88fb6:	f240 5254 	movw	r2, #1364	; 0x554
   88fba:	4293      	cmp	r3, r2
   88fbc:	d823      	bhi.n	89006 <_malloc_r+0x53a>
   88fbe:	0cab      	lsrs	r3, r5, #18
   88fc0:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   88fc4:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   88fc8:	00c1      	lsls	r1, r0, #3
   88fca:	e5c4      	b.n	88b56 <_malloc_r+0x8a>
   88fcc:	f1aa 0a08 	sub.w	sl, sl, #8
   88fd0:	44d3      	add	fp, sl
   88fd2:	ebab 0b02 	sub.w	fp, fp, r2
   88fd6:	f04f 0900 	mov.w	r9, #0
   88fda:	e6ac      	b.n	88d36 <_malloc_r+0x26a>
   88fdc:	f104 0108 	add.w	r1, r4, #8
   88fe0:	4630      	mov	r0, r6
   88fe2:	9300      	str	r3, [sp, #0]
   88fe4:	f7ff fc74 	bl	888d0 <_free_r>
   88fe8:	68bc      	ldr	r4, [r7, #8]
   88fea:	9b00      	ldr	r3, [sp, #0]
   88fec:	6861      	ldr	r1, [r4, #4]
   88fee:	6818      	ldr	r0, [r3, #0]
   88ff0:	e6c5      	b.n	88d7e <_malloc_r+0x2b2>
   88ff2:	f240 5154 	movw	r1, #1364	; 0x554
   88ff6:	428a      	cmp	r2, r1
   88ff8:	d80b      	bhi.n	89012 <_malloc_r+0x546>
   88ffa:	0c9a      	lsrs	r2, r3, #18
   88ffc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   89000:	00c9      	lsls	r1, r1, #3
   89002:	327c      	adds	r2, #124	; 0x7c
   89004:	e6e4      	b.n	88dd0 <_malloc_r+0x304>
   89006:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8900a:	207f      	movs	r0, #127	; 0x7f
   8900c:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   89010:	e5a1      	b.n	88b56 <_malloc_r+0x8a>
   89012:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   89016:	227e      	movs	r2, #126	; 0x7e
   89018:	e6da      	b.n	88dd0 <_malloc_r+0x304>
   8901a:	687b      	ldr	r3, [r7, #4]
   8901c:	e770      	b.n	88f00 <_malloc_r+0x434>
   8901e:	bf00      	nop
   89020:	200012d8 	.word	0x200012d8

00089024 <__ascii_mbtowc>:
   89024:	b082      	sub	sp, #8
   89026:	b149      	cbz	r1, 8903c <__ascii_mbtowc+0x18>
   89028:	b15a      	cbz	r2, 89042 <__ascii_mbtowc+0x1e>
   8902a:	b16b      	cbz	r3, 89048 <__ascii_mbtowc+0x24>
   8902c:	7813      	ldrb	r3, [r2, #0]
   8902e:	600b      	str	r3, [r1, #0]
   89030:	7812      	ldrb	r2, [r2, #0]
   89032:	1c10      	adds	r0, r2, #0
   89034:	bf18      	it	ne
   89036:	2001      	movne	r0, #1
   89038:	b002      	add	sp, #8
   8903a:	4770      	bx	lr
   8903c:	a901      	add	r1, sp, #4
   8903e:	2a00      	cmp	r2, #0
   89040:	d1f3      	bne.n	8902a <__ascii_mbtowc+0x6>
   89042:	4610      	mov	r0, r2
   89044:	b002      	add	sp, #8
   89046:	4770      	bx	lr
   89048:	f06f 0001 	mvn.w	r0, #1
   8904c:	e7f4      	b.n	89038 <__ascii_mbtowc+0x14>
   8904e:	bf00      	nop

00089050 <memchr>:
   89050:	0783      	lsls	r3, r0, #30
   89052:	b470      	push	{r4, r5, r6}
   89054:	b2cd      	uxtb	r5, r1
   89056:	d03d      	beq.n	890d4 <memchr+0x84>
   89058:	1e54      	subs	r4, r2, #1
   8905a:	b30a      	cbz	r2, 890a0 <memchr+0x50>
   8905c:	7803      	ldrb	r3, [r0, #0]
   8905e:	42ab      	cmp	r3, r5
   89060:	d01f      	beq.n	890a2 <memchr+0x52>
   89062:	1c43      	adds	r3, r0, #1
   89064:	e005      	b.n	89072 <memchr+0x22>
   89066:	f114 34ff 	adds.w	r4, r4, #4294967295
   8906a:	d319      	bcc.n	890a0 <memchr+0x50>
   8906c:	7802      	ldrb	r2, [r0, #0]
   8906e:	42aa      	cmp	r2, r5
   89070:	d017      	beq.n	890a2 <memchr+0x52>
   89072:	f013 0f03 	tst.w	r3, #3
   89076:	4618      	mov	r0, r3
   89078:	f103 0301 	add.w	r3, r3, #1
   8907c:	d1f3      	bne.n	89066 <memchr+0x16>
   8907e:	2c03      	cmp	r4, #3
   89080:	d811      	bhi.n	890a6 <memchr+0x56>
   89082:	b34c      	cbz	r4, 890d8 <memchr+0x88>
   89084:	7803      	ldrb	r3, [r0, #0]
   89086:	42ab      	cmp	r3, r5
   89088:	d00b      	beq.n	890a2 <memchr+0x52>
   8908a:	4404      	add	r4, r0
   8908c:	1c43      	adds	r3, r0, #1
   8908e:	e002      	b.n	89096 <memchr+0x46>
   89090:	7802      	ldrb	r2, [r0, #0]
   89092:	42aa      	cmp	r2, r5
   89094:	d005      	beq.n	890a2 <memchr+0x52>
   89096:	429c      	cmp	r4, r3
   89098:	4618      	mov	r0, r3
   8909a:	f103 0301 	add.w	r3, r3, #1
   8909e:	d1f7      	bne.n	89090 <memchr+0x40>
   890a0:	2000      	movs	r0, #0
   890a2:	bc70      	pop	{r4, r5, r6}
   890a4:	4770      	bx	lr
   890a6:	4602      	mov	r2, r0
   890a8:	020e      	lsls	r6, r1, #8
   890aa:	b2b6      	uxth	r6, r6
   890ac:	432e      	orrs	r6, r5
   890ae:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   890b2:	6813      	ldr	r3, [r2, #0]
   890b4:	4610      	mov	r0, r2
   890b6:	4073      	eors	r3, r6
   890b8:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   890bc:	ea21 0303 	bic.w	r3, r1, r3
   890c0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   890c4:	f102 0204 	add.w	r2, r2, #4
   890c8:	d1dc      	bne.n	89084 <memchr+0x34>
   890ca:	3c04      	subs	r4, #4
   890cc:	2c03      	cmp	r4, #3
   890ce:	4610      	mov	r0, r2
   890d0:	d8ef      	bhi.n	890b2 <memchr+0x62>
   890d2:	e7d6      	b.n	89082 <memchr+0x32>
   890d4:	4614      	mov	r4, r2
   890d6:	e7d2      	b.n	8907e <memchr+0x2e>
   890d8:	4620      	mov	r0, r4
   890da:	e7e2      	b.n	890a2 <memchr+0x52>

000890dc <memmove>:
   890dc:	4288      	cmp	r0, r1
   890de:	b4f0      	push	{r4, r5, r6, r7}
   890e0:	d90d      	bls.n	890fe <memmove+0x22>
   890e2:	188b      	adds	r3, r1, r2
   890e4:	4283      	cmp	r3, r0
   890e6:	d90a      	bls.n	890fe <memmove+0x22>
   890e8:	1884      	adds	r4, r0, r2
   890ea:	b132      	cbz	r2, 890fa <memmove+0x1e>
   890ec:	4622      	mov	r2, r4
   890ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   890f2:	4299      	cmp	r1, r3
   890f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
   890f8:	d1f9      	bne.n	890ee <memmove+0x12>
   890fa:	bcf0      	pop	{r4, r5, r6, r7}
   890fc:	4770      	bx	lr
   890fe:	2a0f      	cmp	r2, #15
   89100:	d80e      	bhi.n	89120 <memmove+0x44>
   89102:	4603      	mov	r3, r0
   89104:	1e54      	subs	r4, r2, #1
   89106:	2a00      	cmp	r2, #0
   89108:	d0f7      	beq.n	890fa <memmove+0x1e>
   8910a:	3401      	adds	r4, #1
   8910c:	440c      	add	r4, r1
   8910e:	3b01      	subs	r3, #1
   89110:	f811 2b01 	ldrb.w	r2, [r1], #1
   89114:	42a1      	cmp	r1, r4
   89116:	f803 2f01 	strb.w	r2, [r3, #1]!
   8911a:	d1f9      	bne.n	89110 <memmove+0x34>
   8911c:	bcf0      	pop	{r4, r5, r6, r7}
   8911e:	4770      	bx	lr
   89120:	ea40 0301 	orr.w	r3, r0, r1
   89124:	079b      	lsls	r3, r3, #30
   89126:	d13a      	bne.n	8919e <memmove+0xc2>
   89128:	f1a2 0710 	sub.w	r7, r2, #16
   8912c:	093f      	lsrs	r7, r7, #4
   8912e:	f101 0620 	add.w	r6, r1, #32
   89132:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   89136:	f101 0310 	add.w	r3, r1, #16
   8913a:	f100 0410 	add.w	r4, r0, #16
   8913e:	f853 5c10 	ldr.w	r5, [r3, #-16]
   89142:	3310      	adds	r3, #16
   89144:	f844 5c10 	str.w	r5, [r4, #-16]
   89148:	f853 5c1c 	ldr.w	r5, [r3, #-28]
   8914c:	3410      	adds	r4, #16
   8914e:	f844 5c1c 	str.w	r5, [r4, #-28]
   89152:	f853 5c18 	ldr.w	r5, [r3, #-24]
   89156:	f844 5c18 	str.w	r5, [r4, #-24]
   8915a:	f853 5c14 	ldr.w	r5, [r3, #-20]
   8915e:	42b3      	cmp	r3, r6
   89160:	f844 5c14 	str.w	r5, [r4, #-20]
   89164:	d1eb      	bne.n	8913e <memmove+0x62>
   89166:	1c7b      	adds	r3, r7, #1
   89168:	011b      	lsls	r3, r3, #4
   8916a:	f012 0f0c 	tst.w	r2, #12
   8916e:	4419      	add	r1, r3
   89170:	f002 050f 	and.w	r5, r2, #15
   89174:	4403      	add	r3, r0
   89176:	d015      	beq.n	891a4 <memmove+0xc8>
   89178:	460e      	mov	r6, r1
   8917a:	3d04      	subs	r5, #4
   8917c:	08ad      	lsrs	r5, r5, #2
   8917e:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
   89182:	1f1c      	subs	r4, r3, #4
   89184:	f856 7b04 	ldr.w	r7, [r6], #4
   89188:	f844 7f04 	str.w	r7, [r4, #4]!
   8918c:	4564      	cmp	r4, ip
   8918e:	d1f9      	bne.n	89184 <memmove+0xa8>
   89190:	3501      	adds	r5, #1
   89192:	00ad      	lsls	r5, r5, #2
   89194:	442b      	add	r3, r5
   89196:	4429      	add	r1, r5
   89198:	f002 0203 	and.w	r2, r2, #3
   8919c:	e7b2      	b.n	89104 <memmove+0x28>
   8919e:	1e54      	subs	r4, r2, #1
   891a0:	4603      	mov	r3, r0
   891a2:	e7b2      	b.n	8910a <memmove+0x2e>
   891a4:	462a      	mov	r2, r5
   891a6:	e7ad      	b.n	89104 <memmove+0x28>

000891a8 <__malloc_lock>:
   891a8:	4801      	ldr	r0, [pc, #4]	; (891b0 <__malloc_lock+0x8>)
   891aa:	f7ff bc8b 	b.w	88ac4 <__retarget_lock_acquire_recursive>
   891ae:	bf00      	nop
   891b0:	2000133c 	.word	0x2000133c

000891b4 <__malloc_unlock>:
   891b4:	4801      	ldr	r0, [pc, #4]	; (891bc <__malloc_unlock+0x8>)
   891b6:	f7ff bc87 	b.w	88ac8 <__retarget_lock_release_recursive>
   891ba:	bf00      	nop
   891bc:	2000133c 	.word	0x2000133c

000891c0 <_Balloc>:
   891c0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   891c2:	b570      	push	{r4, r5, r6, lr}
   891c4:	4605      	mov	r5, r0
   891c6:	460c      	mov	r4, r1
   891c8:	b14b      	cbz	r3, 891de <_Balloc+0x1e>
   891ca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   891ce:	b180      	cbz	r0, 891f2 <_Balloc+0x32>
   891d0:	6802      	ldr	r2, [r0, #0]
   891d2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   891d6:	2300      	movs	r3, #0
   891d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
   891dc:	bd70      	pop	{r4, r5, r6, pc}
   891de:	2221      	movs	r2, #33	; 0x21
   891e0:	2104      	movs	r1, #4
   891e2:	f000 fe2d 	bl	89e40 <_calloc_r>
   891e6:	4603      	mov	r3, r0
   891e8:	64e8      	str	r0, [r5, #76]	; 0x4c
   891ea:	2800      	cmp	r0, #0
   891ec:	d1ed      	bne.n	891ca <_Balloc+0xa>
   891ee:	2000      	movs	r0, #0
   891f0:	bd70      	pop	{r4, r5, r6, pc}
   891f2:	2101      	movs	r1, #1
   891f4:	fa01 f604 	lsl.w	r6, r1, r4
   891f8:	1d72      	adds	r2, r6, #5
   891fa:	4628      	mov	r0, r5
   891fc:	0092      	lsls	r2, r2, #2
   891fe:	f000 fe1f 	bl	89e40 <_calloc_r>
   89202:	2800      	cmp	r0, #0
   89204:	d0f3      	beq.n	891ee <_Balloc+0x2e>
   89206:	e9c0 4601 	strd	r4, r6, [r0, #4]
   8920a:	e7e4      	b.n	891d6 <_Balloc+0x16>

0008920c <_Bfree>:
   8920c:	b131      	cbz	r1, 8921c <_Bfree+0x10>
   8920e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   89210:	684a      	ldr	r2, [r1, #4]
   89212:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   89216:	6008      	str	r0, [r1, #0]
   89218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8921c:	4770      	bx	lr
   8921e:	bf00      	nop

00089220 <__multadd>:
   89220:	b5f0      	push	{r4, r5, r6, r7, lr}
   89222:	f04f 0c00 	mov.w	ip, #0
   89226:	460c      	mov	r4, r1
   89228:	4605      	mov	r5, r0
   8922a:	690e      	ldr	r6, [r1, #16]
   8922c:	b083      	sub	sp, #12
   8922e:	f101 0714 	add.w	r7, r1, #20
   89232:	6838      	ldr	r0, [r7, #0]
   89234:	f10c 0c01 	add.w	ip, ip, #1
   89238:	b281      	uxth	r1, r0
   8923a:	fb02 3301 	mla	r3, r2, r1, r3
   8923e:	0c00      	lsrs	r0, r0, #16
   89240:	0c19      	lsrs	r1, r3, #16
   89242:	fb02 1000 	mla	r0, r2, r0, r1
   89246:	b29b      	uxth	r3, r3
   89248:	eb03 4300 	add.w	r3, r3, r0, lsl #16
   8924c:	4566      	cmp	r6, ip
   8924e:	f847 3b04 	str.w	r3, [r7], #4
   89252:	ea4f 4310 	mov.w	r3, r0, lsr #16
   89256:	dcec      	bgt.n	89232 <__multadd+0x12>
   89258:	b13b      	cbz	r3, 8926a <__multadd+0x4a>
   8925a:	68a2      	ldr	r2, [r4, #8]
   8925c:	42b2      	cmp	r2, r6
   8925e:	dd07      	ble.n	89270 <__multadd+0x50>
   89260:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   89264:	3601      	adds	r6, #1
   89266:	6153      	str	r3, [r2, #20]
   89268:	6126      	str	r6, [r4, #16]
   8926a:	4620      	mov	r0, r4
   8926c:	b003      	add	sp, #12
   8926e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   89270:	6861      	ldr	r1, [r4, #4]
   89272:	4628      	mov	r0, r5
   89274:	3101      	adds	r1, #1
   89276:	9301      	str	r3, [sp, #4]
   89278:	f7ff ffa2 	bl	891c0 <_Balloc>
   8927c:	4607      	mov	r7, r0
   8927e:	6922      	ldr	r2, [r4, #16]
   89280:	f104 010c 	add.w	r1, r4, #12
   89284:	3202      	adds	r2, #2
   89286:	0092      	lsls	r2, r2, #2
   89288:	300c      	adds	r0, #12
   8928a:	f7fc fcc5 	bl	85c18 <memcpy>
   8928e:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   89290:	6861      	ldr	r1, [r4, #4]
   89292:	9b01      	ldr	r3, [sp, #4]
   89294:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   89298:	6020      	str	r0, [r4, #0]
   8929a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   8929e:	463c      	mov	r4, r7
   892a0:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   892a4:	3601      	adds	r6, #1
   892a6:	6153      	str	r3, [r2, #20]
   892a8:	6126      	str	r6, [r4, #16]
   892aa:	e7de      	b.n	8926a <__multadd+0x4a>

000892ac <__hi0bits>:
   892ac:	0c02      	lsrs	r2, r0, #16
   892ae:	0412      	lsls	r2, r2, #16
   892b0:	4603      	mov	r3, r0
   892b2:	b9ca      	cbnz	r2, 892e8 <__hi0bits+0x3c>
   892b4:	0403      	lsls	r3, r0, #16
   892b6:	2010      	movs	r0, #16
   892b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   892bc:	bf04      	itt	eq
   892be:	021b      	lsleq	r3, r3, #8
   892c0:	3008      	addeq	r0, #8
   892c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   892c6:	bf04      	itt	eq
   892c8:	011b      	lsleq	r3, r3, #4
   892ca:	3004      	addeq	r0, #4
   892cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   892d0:	bf04      	itt	eq
   892d2:	009b      	lsleq	r3, r3, #2
   892d4:	3002      	addeq	r0, #2
   892d6:	2b00      	cmp	r3, #0
   892d8:	db05      	blt.n	892e6 <__hi0bits+0x3a>
   892da:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   892de:	f100 0001 	add.w	r0, r0, #1
   892e2:	bf08      	it	eq
   892e4:	2020      	moveq	r0, #32
   892e6:	4770      	bx	lr
   892e8:	2000      	movs	r0, #0
   892ea:	e7e5      	b.n	892b8 <__hi0bits+0xc>

000892ec <__lo0bits>:
   892ec:	6803      	ldr	r3, [r0, #0]
   892ee:	4601      	mov	r1, r0
   892f0:	f013 0207 	ands.w	r2, r3, #7
   892f4:	d007      	beq.n	89306 <__lo0bits+0x1a>
   892f6:	07da      	lsls	r2, r3, #31
   892f8:	d420      	bmi.n	8933c <__lo0bits+0x50>
   892fa:	0798      	lsls	r0, r3, #30
   892fc:	d522      	bpl.n	89344 <__lo0bits+0x58>
   892fe:	085b      	lsrs	r3, r3, #1
   89300:	600b      	str	r3, [r1, #0]
   89302:	2001      	movs	r0, #1
   89304:	4770      	bx	lr
   89306:	b298      	uxth	r0, r3
   89308:	b9b0      	cbnz	r0, 89338 <__lo0bits+0x4c>
   8930a:	2010      	movs	r0, #16
   8930c:	0c1b      	lsrs	r3, r3, #16
   8930e:	f013 0fff 	tst.w	r3, #255	; 0xff
   89312:	bf04      	itt	eq
   89314:	0a1b      	lsreq	r3, r3, #8
   89316:	3008      	addeq	r0, #8
   89318:	071a      	lsls	r2, r3, #28
   8931a:	bf04      	itt	eq
   8931c:	091b      	lsreq	r3, r3, #4
   8931e:	3004      	addeq	r0, #4
   89320:	079a      	lsls	r2, r3, #30
   89322:	bf04      	itt	eq
   89324:	089b      	lsreq	r3, r3, #2
   89326:	3002      	addeq	r0, #2
   89328:	07da      	lsls	r2, r3, #31
   8932a:	d403      	bmi.n	89334 <__lo0bits+0x48>
   8932c:	085b      	lsrs	r3, r3, #1
   8932e:	f100 0001 	add.w	r0, r0, #1
   89332:	d005      	beq.n	89340 <__lo0bits+0x54>
   89334:	600b      	str	r3, [r1, #0]
   89336:	4770      	bx	lr
   89338:	4610      	mov	r0, r2
   8933a:	e7e8      	b.n	8930e <__lo0bits+0x22>
   8933c:	2000      	movs	r0, #0
   8933e:	4770      	bx	lr
   89340:	2020      	movs	r0, #32
   89342:	4770      	bx	lr
   89344:	089b      	lsrs	r3, r3, #2
   89346:	600b      	str	r3, [r1, #0]
   89348:	2002      	movs	r0, #2
   8934a:	4770      	bx	lr

0008934c <__i2b>:
   8934c:	b510      	push	{r4, lr}
   8934e:	460c      	mov	r4, r1
   89350:	2101      	movs	r1, #1
   89352:	f7ff ff35 	bl	891c0 <_Balloc>
   89356:	2201      	movs	r2, #1
   89358:	e9c0 2404 	strd	r2, r4, [r0, #16]
   8935c:	bd10      	pop	{r4, pc}
   8935e:	bf00      	nop

00089360 <__multiply>:
   89360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89364:	690e      	ldr	r6, [r1, #16]
   89366:	6917      	ldr	r7, [r2, #16]
   89368:	b083      	sub	sp, #12
   8936a:	42be      	cmp	r6, r7
   8936c:	460c      	mov	r4, r1
   8936e:	4615      	mov	r5, r2
   89370:	db05      	blt.n	8937e <__multiply+0x1e>
   89372:	463a      	mov	r2, r7
   89374:	462b      	mov	r3, r5
   89376:	4637      	mov	r7, r6
   89378:	460d      	mov	r5, r1
   8937a:	4616      	mov	r6, r2
   8937c:	461c      	mov	r4, r3
   8937e:	68ab      	ldr	r3, [r5, #8]
   89380:	eb07 0806 	add.w	r8, r7, r6
   89384:	6869      	ldr	r1, [r5, #4]
   89386:	4543      	cmp	r3, r8
   89388:	bfb8      	it	lt
   8938a:	3101      	addlt	r1, #1
   8938c:	f7ff ff18 	bl	891c0 <_Balloc>
   89390:	f100 0a14 	add.w	sl, r0, #20
   89394:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
   89398:	45ca      	cmp	sl, r9
   8939a:	9000      	str	r0, [sp, #0]
   8939c:	d205      	bcs.n	893aa <__multiply+0x4a>
   8939e:	4653      	mov	r3, sl
   893a0:	2100      	movs	r1, #0
   893a2:	f843 1b04 	str.w	r1, [r3], #4
   893a6:	4599      	cmp	r9, r3
   893a8:	d8fb      	bhi.n	893a2 <__multiply+0x42>
   893aa:	f104 0e14 	add.w	lr, r4, #20
   893ae:	eb0e 0b86 	add.w	fp, lr, r6, lsl #2
   893b2:	f105 0314 	add.w	r3, r5, #20
   893b6:	45de      	cmp	lr, fp
   893b8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   893bc:	d253      	bcs.n	89466 <__multiply+0x106>
   893be:	f8cd 8004 	str.w	r8, [sp, #4]
   893c2:	4698      	mov	r8, r3
   893c4:	e005      	b.n	893d2 <__multiply+0x72>
   893c6:	0c09      	lsrs	r1, r1, #16
   893c8:	d128      	bne.n	8941c <__multiply+0xbc>
   893ca:	45f3      	cmp	fp, lr
   893cc:	f10a 0a04 	add.w	sl, sl, #4
   893d0:	d947      	bls.n	89462 <__multiply+0x102>
   893d2:	f85e 1b04 	ldr.w	r1, [lr], #4
   893d6:	b28e      	uxth	r6, r1
   893d8:	2e00      	cmp	r6, #0
   893da:	d0f4      	beq.n	893c6 <__multiply+0x66>
   893dc:	4645      	mov	r5, r8
   893de:	4654      	mov	r4, sl
   893e0:	2300      	movs	r3, #0
   893e2:	f855 1b04 	ldr.w	r1, [r5], #4
   893e6:	6820      	ldr	r0, [r4, #0]
   893e8:	b28a      	uxth	r2, r1
   893ea:	fa1f fc80 	uxth.w	ip, r0
   893ee:	fb06 c202 	mla	r2, r6, r2, ip
   893f2:	0c09      	lsrs	r1, r1, #16
   893f4:	0c00      	lsrs	r0, r0, #16
   893f6:	fb06 0101 	mla	r1, r6, r1, r0
   893fa:	4413      	add	r3, r2
   893fc:	eb01 4213 	add.w	r2, r1, r3, lsr #16
   89400:	b29b      	uxth	r3, r3
   89402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   89406:	42af      	cmp	r7, r5
   89408:	f844 3b04 	str.w	r3, [r4], #4
   8940c:	ea4f 4312 	mov.w	r3, r2, lsr #16
   89410:	d8e7      	bhi.n	893e2 <__multiply+0x82>
   89412:	6023      	str	r3, [r4, #0]
   89414:	f85e 1c04 	ldr.w	r1, [lr, #-4]
   89418:	0c09      	lsrs	r1, r1, #16
   8941a:	d0d6      	beq.n	893ca <__multiply+0x6a>
   8941c:	f8da 3000 	ldr.w	r3, [sl]
   89420:	4640      	mov	r0, r8
   89422:	461a      	mov	r2, r3
   89424:	4654      	mov	r4, sl
   89426:	f04f 0c00 	mov.w	ip, #0
   8942a:	8805      	ldrh	r5, [r0, #0]
   8942c:	0c12      	lsrs	r2, r2, #16
   8942e:	fb01 2205 	mla	r2, r1, r5, r2
   89432:	b29b      	uxth	r3, r3
   89434:	4494      	add	ip, r2
   89436:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   8943a:	f844 3b04 	str.w	r3, [r4], #4
   8943e:	f850 3b04 	ldr.w	r3, [r0], #4
   89442:	6822      	ldr	r2, [r4, #0]
   89444:	0c1b      	lsrs	r3, r3, #16
   89446:	b295      	uxth	r5, r2
   89448:	fb01 5303 	mla	r3, r1, r3, r5
   8944c:	4287      	cmp	r7, r0
   8944e:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   89452:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   89456:	d8e8      	bhi.n	8942a <__multiply+0xca>
   89458:	45f3      	cmp	fp, lr
   8945a:	6023      	str	r3, [r4, #0]
   8945c:	f10a 0a04 	add.w	sl, sl, #4
   89460:	d8b7      	bhi.n	893d2 <__multiply+0x72>
   89462:	f8dd 8004 	ldr.w	r8, [sp, #4]
   89466:	f1b8 0f00 	cmp.w	r8, #0
   8946a:	dd0b      	ble.n	89484 <__multiply+0x124>
   8946c:	f859 3c04 	ldr.w	r3, [r9, #-4]
   89470:	f1a9 0904 	sub.w	r9, r9, #4
   89474:	b11b      	cbz	r3, 8947e <__multiply+0x11e>
   89476:	e005      	b.n	89484 <__multiply+0x124>
   89478:	f859 3d04 	ldr.w	r3, [r9, #-4]!
   8947c:	b913      	cbnz	r3, 89484 <__multiply+0x124>
   8947e:	f1b8 0801 	subs.w	r8, r8, #1
   89482:	d1f9      	bne.n	89478 <__multiply+0x118>
   89484:	9800      	ldr	r0, [sp, #0]
   89486:	f8c0 8010 	str.w	r8, [r0, #16]
   8948a:	b003      	add	sp, #12
   8948c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00089490 <__pow5mult>:
   89490:	f012 0303 	ands.w	r3, r2, #3
   89494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89498:	4614      	mov	r4, r2
   8949a:	4607      	mov	r7, r0
   8949c:	d12e      	bne.n	894fc <__pow5mult+0x6c>
   8949e:	460d      	mov	r5, r1
   894a0:	10a4      	asrs	r4, r4, #2
   894a2:	d01c      	beq.n	894de <__pow5mult+0x4e>
   894a4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   894a6:	b396      	cbz	r6, 8950e <__pow5mult+0x7e>
   894a8:	07e3      	lsls	r3, r4, #31
   894aa:	f04f 0800 	mov.w	r8, #0
   894ae:	d406      	bmi.n	894be <__pow5mult+0x2e>
   894b0:	1064      	asrs	r4, r4, #1
   894b2:	d014      	beq.n	894de <__pow5mult+0x4e>
   894b4:	6830      	ldr	r0, [r6, #0]
   894b6:	b1a8      	cbz	r0, 894e4 <__pow5mult+0x54>
   894b8:	4606      	mov	r6, r0
   894ba:	07e3      	lsls	r3, r4, #31
   894bc:	d5f8      	bpl.n	894b0 <__pow5mult+0x20>
   894be:	4632      	mov	r2, r6
   894c0:	4629      	mov	r1, r5
   894c2:	4638      	mov	r0, r7
   894c4:	f7ff ff4c 	bl	89360 <__multiply>
   894c8:	b1b5      	cbz	r5, 894f8 <__pow5mult+0x68>
   894ca:	686a      	ldr	r2, [r5, #4]
   894cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   894ce:	1064      	asrs	r4, r4, #1
   894d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   894d4:	6029      	str	r1, [r5, #0]
   894d6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   894da:	4605      	mov	r5, r0
   894dc:	d1ea      	bne.n	894b4 <__pow5mult+0x24>
   894de:	4628      	mov	r0, r5
   894e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   894e4:	4632      	mov	r2, r6
   894e6:	4631      	mov	r1, r6
   894e8:	4638      	mov	r0, r7
   894ea:	f7ff ff39 	bl	89360 <__multiply>
   894ee:	6030      	str	r0, [r6, #0]
   894f0:	f8c0 8000 	str.w	r8, [r0]
   894f4:	4606      	mov	r6, r0
   894f6:	e7e0      	b.n	894ba <__pow5mult+0x2a>
   894f8:	4605      	mov	r5, r0
   894fa:	e7d9      	b.n	894b0 <__pow5mult+0x20>
   894fc:	4a0b      	ldr	r2, [pc, #44]	; (8952c <__pow5mult+0x9c>)
   894fe:	3b01      	subs	r3, #1
   89500:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   89504:	2300      	movs	r3, #0
   89506:	f7ff fe8b 	bl	89220 <__multadd>
   8950a:	4605      	mov	r5, r0
   8950c:	e7c8      	b.n	894a0 <__pow5mult+0x10>
   8950e:	2101      	movs	r1, #1
   89510:	4638      	mov	r0, r7
   89512:	f7ff fe55 	bl	891c0 <_Balloc>
   89516:	f240 2171 	movw	r1, #625	; 0x271
   8951a:	2201      	movs	r2, #1
   8951c:	2300      	movs	r3, #0
   8951e:	e9c0 2104 	strd	r2, r1, [r0, #16]
   89522:	4606      	mov	r6, r0
   89524:	64b8      	str	r0, [r7, #72]	; 0x48
   89526:	6003      	str	r3, [r0, #0]
   89528:	e7be      	b.n	894a8 <__pow5mult+0x18>
   8952a:	bf00      	nop
   8952c:	0008ac88 	.word	0x0008ac88

00089530 <__lshift>:
   89530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   89534:	690e      	ldr	r6, [r1, #16]
   89536:	ea4f 1962 	mov.w	r9, r2, asr #5
   8953a:	688b      	ldr	r3, [r1, #8]
   8953c:	444e      	add	r6, r9
   8953e:	1c74      	adds	r4, r6, #1
   89540:	429c      	cmp	r4, r3
   89542:	460d      	mov	r5, r1
   89544:	4690      	mov	r8, r2
   89546:	4607      	mov	r7, r0
   89548:	6849      	ldr	r1, [r1, #4]
   8954a:	dd04      	ble.n	89556 <__lshift+0x26>
   8954c:	005b      	lsls	r3, r3, #1
   8954e:	429c      	cmp	r4, r3
   89550:	f101 0101 	add.w	r1, r1, #1
   89554:	dcfa      	bgt.n	8954c <__lshift+0x1c>
   89556:	4638      	mov	r0, r7
   89558:	f7ff fe32 	bl	891c0 <_Balloc>
   8955c:	f1b9 0f00 	cmp.w	r9, #0
   89560:	f100 0c14 	add.w	ip, r0, #20
   89564:	dd0e      	ble.n	89584 <__lshift+0x54>
   89566:	4663      	mov	r3, ip
   89568:	2100      	movs	r1, #0
   8956a:	f109 0905 	add.w	r9, r9, #5
   8956e:	ea4f 0989 	mov.w	r9, r9, lsl #2
   89572:	eb00 0209 	add.w	r2, r0, r9
   89576:	f843 1b04 	str.w	r1, [r3], #4
   8957a:	4293      	cmp	r3, r2
   8957c:	d1fb      	bne.n	89576 <__lshift+0x46>
   8957e:	f1a9 0914 	sub.w	r9, r9, #20
   89582:	44cc      	add	ip, r9
   89584:	6929      	ldr	r1, [r5, #16]
   89586:	f105 0314 	add.w	r3, r5, #20
   8958a:	f018 081f 	ands.w	r8, r8, #31
   8958e:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
   89592:	d01d      	beq.n	895d0 <__lshift+0xa0>
   89594:	2200      	movs	r2, #0
   89596:	f1c8 0920 	rsb	r9, r8, #32
   8959a:	6819      	ldr	r1, [r3, #0]
   8959c:	fa01 f108 	lsl.w	r1, r1, r8
   895a0:	4311      	orrs	r1, r2
   895a2:	f84c 1b04 	str.w	r1, [ip], #4
   895a6:	f853 2b04 	ldr.w	r2, [r3], #4
   895aa:	4573      	cmp	r3, lr
   895ac:	fa22 f209 	lsr.w	r2, r2, r9
   895b0:	d3f3      	bcc.n	8959a <__lshift+0x6a>
   895b2:	2a00      	cmp	r2, #0
   895b4:	bf18      	it	ne
   895b6:	4626      	movne	r6, r4
   895b8:	f8cc 2000 	str.w	r2, [ip]
   895bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   895be:	686a      	ldr	r2, [r5, #4]
   895c0:	6106      	str	r6, [r0, #16]
   895c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   895c6:	6029      	str	r1, [r5, #0]
   895c8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   895cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   895d0:	f1ac 0c04 	sub.w	ip, ip, #4
   895d4:	f853 2b04 	ldr.w	r2, [r3], #4
   895d8:	459e      	cmp	lr, r3
   895da:	f84c 2f04 	str.w	r2, [ip, #4]!
   895de:	d8f9      	bhi.n	895d4 <__lshift+0xa4>
   895e0:	e7ec      	b.n	895bc <__lshift+0x8c>
   895e2:	bf00      	nop

000895e4 <__mcmp>:
   895e4:	b430      	push	{r4, r5}
   895e6:	690b      	ldr	r3, [r1, #16]
   895e8:	4605      	mov	r5, r0
   895ea:	6900      	ldr	r0, [r0, #16]
   895ec:	1ac0      	subs	r0, r0, r3
   895ee:	d110      	bne.n	89612 <__mcmp+0x2e>
   895f0:	009b      	lsls	r3, r3, #2
   895f2:	3514      	adds	r5, #20
   895f4:	3114      	adds	r1, #20
   895f6:	4419      	add	r1, r3
   895f8:	442b      	add	r3, r5
   895fa:	e001      	b.n	89600 <__mcmp+0x1c>
   895fc:	429d      	cmp	r5, r3
   895fe:	d208      	bcs.n	89612 <__mcmp+0x2e>
   89600:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   89604:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   89608:	4294      	cmp	r4, r2
   8960a:	d0f7      	beq.n	895fc <__mcmp+0x18>
   8960c:	d203      	bcs.n	89616 <__mcmp+0x32>
   8960e:	f04f 30ff 	mov.w	r0, #4294967295
   89612:	bc30      	pop	{r4, r5}
   89614:	4770      	bx	lr
   89616:	2001      	movs	r0, #1
   89618:	bc30      	pop	{r4, r5}
   8961a:	4770      	bx	lr

0008961c <__mdiff>:
   8961c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   89620:	460e      	mov	r6, r1
   89622:	690d      	ldr	r5, [r1, #16]
   89624:	6911      	ldr	r1, [r2, #16]
   89626:	4690      	mov	r8, r2
   89628:	1a6d      	subs	r5, r5, r1
   8962a:	2d00      	cmp	r5, #0
   8962c:	4684      	mov	ip, r0
   8962e:	f106 0414 	add.w	r4, r6, #20
   89632:	f102 0714 	add.w	r7, r2, #20
   89636:	d114      	bne.n	89662 <__mdiff+0x46>
   89638:	0089      	lsls	r1, r1, #2
   8963a:	1863      	adds	r3, r4, r1
   8963c:	4439      	add	r1, r7
   8963e:	e001      	b.n	89644 <__mdiff+0x28>
   89640:	42a3      	cmp	r3, r4
   89642:	d961      	bls.n	89708 <__mdiff+0xec>
   89644:	f853 0d04 	ldr.w	r0, [r3, #-4]!
   89648:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8964c:	4290      	cmp	r0, r2
   8964e:	d0f7      	beq.n	89640 <__mdiff+0x24>
   89650:	d209      	bcs.n	89666 <__mdiff+0x4a>
   89652:	4622      	mov	r2, r4
   89654:	4633      	mov	r3, r6
   89656:	463c      	mov	r4, r7
   89658:	4646      	mov	r6, r8
   8965a:	4617      	mov	r7, r2
   8965c:	4698      	mov	r8, r3
   8965e:	2501      	movs	r5, #1
   89660:	e001      	b.n	89666 <__mdiff+0x4a>
   89662:	dbf6      	blt.n	89652 <__mdiff+0x36>
   89664:	2500      	movs	r5, #0
   89666:	4660      	mov	r0, ip
   89668:	6871      	ldr	r1, [r6, #4]
   8966a:	f7ff fda9 	bl	891c0 <_Balloc>
   8966e:	f8d6 c010 	ldr.w	ip, [r6, #16]
   89672:	f8d8 3010 	ldr.w	r3, [r8, #16]
   89676:	eb04 0e8c 	add.w	lr, r4, ip, lsl #2
   8967a:	60c5      	str	r5, [r0, #12]
   8967c:	eb07 0883 	add.w	r8, r7, r3, lsl #2
   89680:	f100 0614 	add.w	r6, r0, #20
   89684:	2200      	movs	r2, #0
   89686:	e000      	b.n	8968a <__mdiff+0x6e>
   89688:	462e      	mov	r6, r5
   8968a:	4635      	mov	r5, r6
   8968c:	f854 9b04 	ldr.w	r9, [r4], #4
   89690:	f857 1b04 	ldr.w	r1, [r7], #4
   89694:	fa1f f389 	uxth.w	r3, r9
   89698:	4413      	add	r3, r2
   8969a:	fa1f fa81 	uxth.w	sl, r1
   8969e:	0c0a      	lsrs	r2, r1, #16
   896a0:	eba3 030a 	sub.w	r3, r3, sl
   896a4:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   896a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
   896ac:	b29b      	uxth	r3, r3
   896ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   896b2:	45b8      	cmp	r8, r7
   896b4:	ea4f 4222 	mov.w	r2, r2, asr #16
   896b8:	f845 3b04 	str.w	r3, [r5], #4
   896bc:	4621      	mov	r1, r4
   896be:	d8e3      	bhi.n	89688 <__mdiff+0x6c>
   896c0:	45a6      	cmp	lr, r4
   896c2:	d916      	bls.n	896f2 <__mdiff+0xd6>
   896c4:	462e      	mov	r6, r5
   896c6:	f851 7b04 	ldr.w	r7, [r1], #4
   896ca:	b2bb      	uxth	r3, r7
   896cc:	4413      	add	r3, r2
   896ce:	141a      	asrs	r2, r3, #16
   896d0:	eb02 4217 	add.w	r2, r2, r7, lsr #16
   896d4:	b29b      	uxth	r3, r3
   896d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   896da:	458e      	cmp	lr, r1
   896dc:	f846 3b04 	str.w	r3, [r6], #4
   896e0:	ea4f 4222 	mov.w	r2, r2, asr #16
   896e4:	d8ef      	bhi.n	896c6 <__mdiff+0xaa>
   896e6:	f10e 36ff 	add.w	r6, lr, #4294967295
   896ea:	1b36      	subs	r6, r6, r4
   896ec:	f026 0603 	bic.w	r6, r6, #3
   896f0:	442e      	add	r6, r5
   896f2:	b92b      	cbnz	r3, 89700 <__mdiff+0xe4>
   896f4:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   896f8:	f10c 3cff 	add.w	ip, ip, #4294967295
   896fc:	2b00      	cmp	r3, #0
   896fe:	d0f9      	beq.n	896f4 <__mdiff+0xd8>
   89700:	f8c0 c010 	str.w	ip, [r0, #16]
   89704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89708:	4660      	mov	r0, ip
   8970a:	2100      	movs	r1, #0
   8970c:	f7ff fd58 	bl	891c0 <_Balloc>
   89710:	2201      	movs	r2, #1
   89712:	2300      	movs	r3, #0
   89714:	e9c0 2304 	strd	r2, r3, [r0, #16]
   89718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0008971c <__d2b>:
   8971c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89720:	461c      	mov	r4, r3
   89722:	b082      	sub	sp, #8
   89724:	2101      	movs	r1, #1
   89726:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   8972a:	4690      	mov	r8, r2
   8972c:	f7ff fd48 	bl	891c0 <_Balloc>
   89730:	4623      	mov	r3, r4
   89732:	f3c4 540a 	ubfx	r4, r4, #20, #11
   89736:	4607      	mov	r7, r0
   89738:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8973c:	b10c      	cbz	r4, 89742 <__d2b+0x26>
   8973e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   89742:	f1b8 0200 	subs.w	r2, r8, #0
   89746:	9301      	str	r3, [sp, #4]
   89748:	d024      	beq.n	89794 <__d2b+0x78>
   8974a:	4668      	mov	r0, sp
   8974c:	9200      	str	r2, [sp, #0]
   8974e:	f7ff fdcd 	bl	892ec <__lo0bits>
   89752:	b9a0      	cbnz	r0, 8977e <__d2b+0x62>
   89754:	e9dd 2300 	ldrd	r2, r3, [sp]
   89758:	617a      	str	r2, [r7, #20]
   8975a:	2b00      	cmp	r3, #0
   8975c:	bf14      	ite	ne
   8975e:	2102      	movne	r1, #2
   89760:	2101      	moveq	r1, #1
   89762:	61bb      	str	r3, [r7, #24]
   89764:	6139      	str	r1, [r7, #16]
   89766:	b304      	cbz	r4, 897aa <__d2b+0x8e>
   89768:	f2a4 4333 	subw	r3, r4, #1075	; 0x433
   8976c:	4403      	add	r3, r0
   8976e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   89772:	6033      	str	r3, [r6, #0]
   89774:	6028      	str	r0, [r5, #0]
   89776:	4638      	mov	r0, r7
   89778:	b002      	add	sp, #8
   8977a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8977e:	9b01      	ldr	r3, [sp, #4]
   89780:	f1c0 0220 	rsb	r2, r0, #32
   89784:	9900      	ldr	r1, [sp, #0]
   89786:	fa03 f202 	lsl.w	r2, r3, r2
   8978a:	430a      	orrs	r2, r1
   8978c:	40c3      	lsrs	r3, r0
   8978e:	9301      	str	r3, [sp, #4]
   89790:	617a      	str	r2, [r7, #20]
   89792:	e7e2      	b.n	8975a <__d2b+0x3e>
   89794:	a801      	add	r0, sp, #4
   89796:	f7ff fda9 	bl	892ec <__lo0bits>
   8979a:	2201      	movs	r2, #1
   8979c:	9b01      	ldr	r3, [sp, #4]
   8979e:	4611      	mov	r1, r2
   897a0:	3020      	adds	r0, #32
   897a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
   897a6:	2c00      	cmp	r4, #0
   897a8:	d1de      	bne.n	89768 <__d2b+0x4c>
   897aa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   897ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   897b2:	6030      	str	r0, [r6, #0]
   897b4:	6918      	ldr	r0, [r3, #16]
   897b6:	f7ff fd79 	bl	892ac <__hi0bits>
   897ba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   897be:	6028      	str	r0, [r5, #0]
   897c0:	4638      	mov	r0, r7
   897c2:	b002      	add	sp, #8
   897c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000897c8 <_realloc_r>:
   897c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   897cc:	4617      	mov	r7, r2
   897ce:	2900      	cmp	r1, #0
   897d0:	f000 80bb 	beq.w	8994a <_realloc_r+0x182>
   897d4:	f107 040b 	add.w	r4, r7, #11
   897d8:	4681      	mov	r9, r0
   897da:	460d      	mov	r5, r1
   897dc:	f7ff fce4 	bl	891a8 <__malloc_lock>
   897e0:	2c16      	cmp	r4, #22
   897e2:	d85e      	bhi.n	898a2 <_realloc_r+0xda>
   897e4:	2410      	movs	r4, #16
   897e6:	4622      	mov	r2, r4
   897e8:	42a7      	cmp	r7, r4
   897ea:	d85f      	bhi.n	898ac <_realloc_r+0xe4>
   897ec:	f855 ec04 	ldr.w	lr, [r5, #-4]
   897f0:	f1a5 0808 	sub.w	r8, r5, #8
   897f4:	f02e 0603 	bic.w	r6, lr, #3
   897f8:	4296      	cmp	r6, r2
   897fa:	eb08 0a06 	add.w	sl, r8, r6
   897fe:	f280 8081 	bge.w	89904 <_realloc_r+0x13c>
   89802:	4bca      	ldr	r3, [pc, #808]	; (89b2c <_realloc_r+0x364>)
   89804:	f8da 0004 	ldr.w	r0, [sl, #4]
   89808:	6899      	ldr	r1, [r3, #8]
   8980a:	4551      	cmp	r1, sl
   8980c:	f000 80b5 	beq.w	8997a <_realloc_r+0x1b2>
   89810:	f020 0301 	bic.w	r3, r0, #1
   89814:	4453      	add	r3, sl
   89816:	685b      	ldr	r3, [r3, #4]
   89818:	07db      	lsls	r3, r3, #31
   8981a:	f100 808a 	bmi.w	89932 <_realloc_r+0x16a>
   8981e:	f020 0003 	bic.w	r0, r0, #3
   89822:	1833      	adds	r3, r6, r0
   89824:	4293      	cmp	r3, r2
   89826:	f280 8112 	bge.w	89a4e <_realloc_r+0x286>
   8982a:	f01e 0f01 	tst.w	lr, #1
   8982e:	d10f      	bne.n	89850 <_realloc_r+0x88>
   89830:	f855 3c08 	ldr.w	r3, [r5, #-8]
   89834:	eba8 0b03 	sub.w	fp, r8, r3
   89838:	f8db 1004 	ldr.w	r1, [fp, #4]
   8983c:	f021 0103 	bic.w	r1, r1, #3
   89840:	4408      	add	r0, r1
   89842:	1983      	adds	r3, r0, r6
   89844:	4293      	cmp	r3, r2
   89846:	f280 8116 	bge.w	89a76 <_realloc_r+0x2ae>
   8984a:	1873      	adds	r3, r6, r1
   8984c:	4293      	cmp	r3, r2
   8984e:	da34      	bge.n	898ba <_realloc_r+0xf2>
   89850:	4639      	mov	r1, r7
   89852:	4648      	mov	r0, r9
   89854:	f7ff f93a 	bl	88acc <_malloc_r>
   89858:	4607      	mov	r7, r0
   8985a:	b1e0      	cbz	r0, 89896 <_realloc_r+0xce>
   8985c:	f855 3c04 	ldr.w	r3, [r5, #-4]
   89860:	f1a0 0208 	sub.w	r2, r0, #8
   89864:	f023 0301 	bic.w	r3, r3, #1
   89868:	4443      	add	r3, r8
   8986a:	4293      	cmp	r3, r2
   8986c:	f000 80f7 	beq.w	89a5e <_realloc_r+0x296>
   89870:	1f32      	subs	r2, r6, #4
   89872:	2a24      	cmp	r2, #36	; 0x24
   89874:	f200 80fb 	bhi.w	89a6e <_realloc_r+0x2a6>
   89878:	2a13      	cmp	r2, #19
   8987a:	6829      	ldr	r1, [r5, #0]
   8987c:	f200 80c9 	bhi.w	89a12 <_realloc_r+0x24a>
   89880:	4603      	mov	r3, r0
   89882:	462a      	mov	r2, r5
   89884:	6019      	str	r1, [r3, #0]
   89886:	6851      	ldr	r1, [r2, #4]
   89888:	6059      	str	r1, [r3, #4]
   8988a:	6892      	ldr	r2, [r2, #8]
   8988c:	609a      	str	r2, [r3, #8]
   8988e:	4629      	mov	r1, r5
   89890:	4648      	mov	r0, r9
   89892:	f7ff f81d 	bl	888d0 <_free_r>
   89896:	4648      	mov	r0, r9
   89898:	f7ff fc8c 	bl	891b4 <__malloc_unlock>
   8989c:	4638      	mov	r0, r7
   8989e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   898a2:	f024 0407 	bic.w	r4, r4, #7
   898a6:	2c00      	cmp	r4, #0
   898a8:	4622      	mov	r2, r4
   898aa:	da9d      	bge.n	897e8 <_realloc_r+0x20>
   898ac:	230c      	movs	r3, #12
   898ae:	2700      	movs	r7, #0
   898b0:	f8c9 3000 	str.w	r3, [r9]
   898b4:	4638      	mov	r0, r7
   898b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   898ba:	465f      	mov	r7, fp
   898bc:	f8db 100c 	ldr.w	r1, [fp, #12]
   898c0:	f857 0f08 	ldr.w	r0, [r7, #8]!
   898c4:	1f32      	subs	r2, r6, #4
   898c6:	2a24      	cmp	r2, #36	; 0x24
   898c8:	60c1      	str	r1, [r0, #12]
   898ca:	eb0b 0a03 	add.w	sl, fp, r3
   898ce:	6088      	str	r0, [r1, #8]
   898d0:	f200 80e2 	bhi.w	89a98 <_realloc_r+0x2d0>
   898d4:	2a13      	cmp	r2, #19
   898d6:	6829      	ldr	r1, [r5, #0]
   898d8:	f240 80e6 	bls.w	89aa8 <_realloc_r+0x2e0>
   898dc:	f8cb 1008 	str.w	r1, [fp, #8]
   898e0:	6869      	ldr	r1, [r5, #4]
   898e2:	2a1b      	cmp	r2, #27
   898e4:	f8cb 100c 	str.w	r1, [fp, #12]
   898e8:	68a9      	ldr	r1, [r5, #8]
   898ea:	f200 80eb 	bhi.w	89ac4 <_realloc_r+0x2fc>
   898ee:	f10b 0210 	add.w	r2, fp, #16
   898f2:	3508      	adds	r5, #8
   898f4:	6011      	str	r1, [r2, #0]
   898f6:	6869      	ldr	r1, [r5, #4]
   898f8:	461e      	mov	r6, r3
   898fa:	6051      	str	r1, [r2, #4]
   898fc:	68ab      	ldr	r3, [r5, #8]
   898fe:	46d8      	mov	r8, fp
   89900:	463d      	mov	r5, r7
   89902:	6093      	str	r3, [r2, #8]
   89904:	f8d8 2004 	ldr.w	r2, [r8, #4]
   89908:	1b33      	subs	r3, r6, r4
   8990a:	2b0f      	cmp	r3, #15
   8990c:	f002 0201 	and.w	r2, r2, #1
   89910:	d820      	bhi.n	89954 <_realloc_r+0x18c>
   89912:	4332      	orrs	r2, r6
   89914:	f8c8 2004 	str.w	r2, [r8, #4]
   89918:	f8da 3004 	ldr.w	r3, [sl, #4]
   8991c:	f043 0301 	orr.w	r3, r3, #1
   89920:	f8ca 3004 	str.w	r3, [sl, #4]
   89924:	462f      	mov	r7, r5
   89926:	4648      	mov	r0, r9
   89928:	f7ff fc44 	bl	891b4 <__malloc_unlock>
   8992c:	4638      	mov	r0, r7
   8992e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89932:	f01e 0f01 	tst.w	lr, #1
   89936:	d18b      	bne.n	89850 <_realloc_r+0x88>
   89938:	f855 3c08 	ldr.w	r3, [r5, #-8]
   8993c:	eba8 0b03 	sub.w	fp, r8, r3
   89940:	f8db 1004 	ldr.w	r1, [fp, #4]
   89944:	f021 0103 	bic.w	r1, r1, #3
   89948:	e77f      	b.n	8984a <_realloc_r+0x82>
   8994a:	4611      	mov	r1, r2
   8994c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89950:	f7ff b8bc 	b.w	88acc <_malloc_r>
   89954:	eb08 0104 	add.w	r1, r8, r4
   89958:	4322      	orrs	r2, r4
   8995a:	f043 0301 	orr.w	r3, r3, #1
   8995e:	f8c8 2004 	str.w	r2, [r8, #4]
   89962:	604b      	str	r3, [r1, #4]
   89964:	f8da 3004 	ldr.w	r3, [sl, #4]
   89968:	3108      	adds	r1, #8
   8996a:	f043 0301 	orr.w	r3, r3, #1
   8996e:	f8ca 3004 	str.w	r3, [sl, #4]
   89972:	4648      	mov	r0, r9
   89974:	f7fe ffac 	bl	888d0 <_free_r>
   89978:	e7d4      	b.n	89924 <_realloc_r+0x15c>
   8997a:	f020 0003 	bic.w	r0, r0, #3
   8997e:	1831      	adds	r1, r6, r0
   89980:	f104 0c10 	add.w	ip, r4, #16
   89984:	4561      	cmp	r1, ip
   89986:	da4f      	bge.n	89a28 <_realloc_r+0x260>
   89988:	f01e 0f01 	tst.w	lr, #1
   8998c:	f47f af60 	bne.w	89850 <_realloc_r+0x88>
   89990:	f855 1c08 	ldr.w	r1, [r5, #-8]
   89994:	eba8 0b01 	sub.w	fp, r8, r1
   89998:	f8db 1004 	ldr.w	r1, [fp, #4]
   8999c:	f021 0103 	bic.w	r1, r1, #3
   899a0:	4408      	add	r0, r1
   899a2:	eb00 0a06 	add.w	sl, r0, r6
   899a6:	45d4      	cmp	ip, sl
   899a8:	f73f af4f 	bgt.w	8984a <_realloc_r+0x82>
   899ac:	465f      	mov	r7, fp
   899ae:	f8db 100c 	ldr.w	r1, [fp, #12]
   899b2:	f857 0f08 	ldr.w	r0, [r7, #8]!
   899b6:	1f32      	subs	r2, r6, #4
   899b8:	2a24      	cmp	r2, #36	; 0x24
   899ba:	60c1      	str	r1, [r0, #12]
   899bc:	6088      	str	r0, [r1, #8]
   899be:	f200 80a3 	bhi.w	89b08 <_realloc_r+0x340>
   899c2:	2a13      	cmp	r2, #19
   899c4:	6829      	ldr	r1, [r5, #0]
   899c6:	f240 809d 	bls.w	89b04 <_realloc_r+0x33c>
   899ca:	f8cb 1008 	str.w	r1, [fp, #8]
   899ce:	6869      	ldr	r1, [r5, #4]
   899d0:	2a1b      	cmp	r2, #27
   899d2:	f8cb 100c 	str.w	r1, [fp, #12]
   899d6:	68a9      	ldr	r1, [r5, #8]
   899d8:	f200 809c 	bhi.w	89b14 <_realloc_r+0x34c>
   899dc:	f10b 0210 	add.w	r2, fp, #16
   899e0:	3508      	adds	r5, #8
   899e2:	6011      	str	r1, [r2, #0]
   899e4:	6869      	ldr	r1, [r5, #4]
   899e6:	6051      	str	r1, [r2, #4]
   899e8:	68a9      	ldr	r1, [r5, #8]
   899ea:	6091      	str	r1, [r2, #8]
   899ec:	ebaa 0204 	sub.w	r2, sl, r4
   899f0:	eb0b 0104 	add.w	r1, fp, r4
   899f4:	f042 0201 	orr.w	r2, r2, #1
   899f8:	6099      	str	r1, [r3, #8]
   899fa:	604a      	str	r2, [r1, #4]
   899fc:	f8db 3004 	ldr.w	r3, [fp, #4]
   89a00:	4648      	mov	r0, r9
   89a02:	f003 0301 	and.w	r3, r3, #1
   89a06:	431c      	orrs	r4, r3
   89a08:	f8cb 4004 	str.w	r4, [fp, #4]
   89a0c:	f7ff fbd2 	bl	891b4 <__malloc_unlock>
   89a10:	e750      	b.n	898b4 <_realloc_r+0xec>
   89a12:	6001      	str	r1, [r0, #0]
   89a14:	686b      	ldr	r3, [r5, #4]
   89a16:	2a1b      	cmp	r2, #27
   89a18:	6043      	str	r3, [r0, #4]
   89a1a:	d847      	bhi.n	89aac <_realloc_r+0x2e4>
   89a1c:	f105 0208 	add.w	r2, r5, #8
   89a20:	f100 0308 	add.w	r3, r0, #8
   89a24:	68a9      	ldr	r1, [r5, #8]
   89a26:	e72d      	b.n	89884 <_realloc_r+0xbc>
   89a28:	1b0a      	subs	r2, r1, r4
   89a2a:	f042 0201 	orr.w	r2, r2, #1
   89a2e:	eb08 0104 	add.w	r1, r8, r4
   89a32:	6099      	str	r1, [r3, #8]
   89a34:	604a      	str	r2, [r1, #4]
   89a36:	f855 3c04 	ldr.w	r3, [r5, #-4]
   89a3a:	4648      	mov	r0, r9
   89a3c:	f003 0301 	and.w	r3, r3, #1
   89a40:	431c      	orrs	r4, r3
   89a42:	f845 4c04 	str.w	r4, [r5, #-4]
   89a46:	f7ff fbb5 	bl	891b4 <__malloc_unlock>
   89a4a:	462f      	mov	r7, r5
   89a4c:	e732      	b.n	898b4 <_realloc_r+0xec>
   89a4e:	e9da 1202 	ldrd	r1, r2, [sl, #8]
   89a52:	461e      	mov	r6, r3
   89a54:	60ca      	str	r2, [r1, #12]
   89a56:	eb08 0a03 	add.w	sl, r8, r3
   89a5a:	6091      	str	r1, [r2, #8]
   89a5c:	e752      	b.n	89904 <_realloc_r+0x13c>
   89a5e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   89a62:	f023 0303 	bic.w	r3, r3, #3
   89a66:	441e      	add	r6, r3
   89a68:	eb08 0a06 	add.w	sl, r8, r6
   89a6c:	e74a      	b.n	89904 <_realloc_r+0x13c>
   89a6e:	4629      	mov	r1, r5
   89a70:	f7ff fb34 	bl	890dc <memmove>
   89a74:	e70b      	b.n	8988e <_realloc_r+0xc6>
   89a76:	465f      	mov	r7, fp
   89a78:	e9da 0102 	ldrd	r0, r1, [sl, #8]
   89a7c:	60c1      	str	r1, [r0, #12]
   89a7e:	6088      	str	r0, [r1, #8]
   89a80:	f857 0f08 	ldr.w	r0, [r7, #8]!
   89a84:	f8db 100c 	ldr.w	r1, [fp, #12]
   89a88:	1f32      	subs	r2, r6, #4
   89a8a:	2a24      	cmp	r2, #36	; 0x24
   89a8c:	60c1      	str	r1, [r0, #12]
   89a8e:	eb0b 0a03 	add.w	sl, fp, r3
   89a92:	6088      	str	r0, [r1, #8]
   89a94:	f67f af1e 	bls.w	898d4 <_realloc_r+0x10c>
   89a98:	4629      	mov	r1, r5
   89a9a:	4638      	mov	r0, r7
   89a9c:	461e      	mov	r6, r3
   89a9e:	46d8      	mov	r8, fp
   89aa0:	f7ff fb1c 	bl	890dc <memmove>
   89aa4:	463d      	mov	r5, r7
   89aa6:	e72d      	b.n	89904 <_realloc_r+0x13c>
   89aa8:	463a      	mov	r2, r7
   89aaa:	e723      	b.n	898f4 <_realloc_r+0x12c>
   89aac:	68ab      	ldr	r3, [r5, #8]
   89aae:	2a24      	cmp	r2, #36	; 0x24
   89ab0:	6083      	str	r3, [r0, #8]
   89ab2:	68eb      	ldr	r3, [r5, #12]
   89ab4:	60c3      	str	r3, [r0, #12]
   89ab6:	d011      	beq.n	89adc <_realloc_r+0x314>
   89ab8:	f105 0210 	add.w	r2, r5, #16
   89abc:	f100 0310 	add.w	r3, r0, #16
   89ac0:	6929      	ldr	r1, [r5, #16]
   89ac2:	e6df      	b.n	89884 <_realloc_r+0xbc>
   89ac4:	f8cb 1010 	str.w	r1, [fp, #16]
   89ac8:	68e9      	ldr	r1, [r5, #12]
   89aca:	2a24      	cmp	r2, #36	; 0x24
   89acc:	f8cb 1014 	str.w	r1, [fp, #20]
   89ad0:	6929      	ldr	r1, [r5, #16]
   89ad2:	d00d      	beq.n	89af0 <_realloc_r+0x328>
   89ad4:	f10b 0218 	add.w	r2, fp, #24
   89ad8:	3510      	adds	r5, #16
   89ada:	e70b      	b.n	898f4 <_realloc_r+0x12c>
   89adc:	692b      	ldr	r3, [r5, #16]
   89ade:	f105 0218 	add.w	r2, r5, #24
   89ae2:	6103      	str	r3, [r0, #16]
   89ae4:	6969      	ldr	r1, [r5, #20]
   89ae6:	f100 0318 	add.w	r3, r0, #24
   89aea:	6141      	str	r1, [r0, #20]
   89aec:	69a9      	ldr	r1, [r5, #24]
   89aee:	e6c9      	b.n	89884 <_realloc_r+0xbc>
   89af0:	f8cb 1018 	str.w	r1, [fp, #24]
   89af4:	6969      	ldr	r1, [r5, #20]
   89af6:	f10b 0220 	add.w	r2, fp, #32
   89afa:	f8cb 101c 	str.w	r1, [fp, #28]
   89afe:	69a9      	ldr	r1, [r5, #24]
   89b00:	3518      	adds	r5, #24
   89b02:	e6f7      	b.n	898f4 <_realloc_r+0x12c>
   89b04:	463a      	mov	r2, r7
   89b06:	e76c      	b.n	899e2 <_realloc_r+0x21a>
   89b08:	4629      	mov	r1, r5
   89b0a:	4638      	mov	r0, r7
   89b0c:	f7ff fae6 	bl	890dc <memmove>
   89b10:	4b06      	ldr	r3, [pc, #24]	; (89b2c <_realloc_r+0x364>)
   89b12:	e76b      	b.n	899ec <_realloc_r+0x224>
   89b14:	f8cb 1010 	str.w	r1, [fp, #16]
   89b18:	68e9      	ldr	r1, [r5, #12]
   89b1a:	2a24      	cmp	r2, #36	; 0x24
   89b1c:	f8cb 1014 	str.w	r1, [fp, #20]
   89b20:	6929      	ldr	r1, [r5, #16]
   89b22:	d005      	beq.n	89b30 <_realloc_r+0x368>
   89b24:	f10b 0218 	add.w	r2, fp, #24
   89b28:	3510      	adds	r5, #16
   89b2a:	e75a      	b.n	899e2 <_realloc_r+0x21a>
   89b2c:	20000948 	.word	0x20000948
   89b30:	f8cb 1018 	str.w	r1, [fp, #24]
   89b34:	6969      	ldr	r1, [r5, #20]
   89b36:	f10b 0220 	add.w	r2, fp, #32
   89b3a:	f8cb 101c 	str.w	r1, [fp, #28]
   89b3e:	69a9      	ldr	r1, [r5, #24]
   89b40:	3518      	adds	r5, #24
   89b42:	e74e      	b.n	899e2 <_realloc_r+0x21a>

00089b44 <frexp>:
   89b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89b46:	4617      	mov	r7, r2
   89b48:	2200      	movs	r2, #0
   89b4a:	f8df c060 	ldr.w	ip, [pc, #96]	; 89bac <frexp+0x68>
   89b4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   89b52:	4563      	cmp	r3, ip
   89b54:	4604      	mov	r4, r0
   89b56:	460d      	mov	r5, r1
   89b58:	603a      	str	r2, [r7, #0]
   89b5a:	dc22      	bgt.n	89ba2 <frexp+0x5e>
   89b5c:	4684      	mov	ip, r0
   89b5e:	ea53 0c0c 	orrs.w	ip, r3, ip
   89b62:	d01e      	beq.n	89ba2 <frexp+0x5e>
   89b64:	f8df c048 	ldr.w	ip, [pc, #72]	; 89bb0 <frexp+0x6c>
   89b68:	460e      	mov	r6, r1
   89b6a:	ea01 0c0c 	and.w	ip, r1, ip
   89b6e:	f1bc 0f00 	cmp.w	ip, #0
   89b72:	d109      	bne.n	89b88 <frexp+0x44>
   89b74:	2200      	movs	r2, #0
   89b76:	4b0c      	ldr	r3, [pc, #48]	; (89ba8 <frexp+0x64>)
   89b78:	f000 fb4e 	bl	8a218 <__aeabi_dmul>
   89b7c:	f06f 0235 	mvn.w	r2, #53	; 0x35
   89b80:	4604      	mov	r4, r0
   89b82:	460e      	mov	r6, r1
   89b84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   89b88:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   89b8c:	151b      	asrs	r3, r3, #20
   89b8e:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   89b92:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   89b96:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   89b9a:	4413      	add	r3, r2
   89b9c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   89ba0:	603b      	str	r3, [r7, #0]
   89ba2:	4620      	mov	r0, r4
   89ba4:	4629      	mov	r1, r5
   89ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89ba8:	43500000 	.word	0x43500000
   89bac:	7fefffff 	.word	0x7fefffff
   89bb0:	7ff00000 	.word	0x7ff00000

00089bb4 <_sbrk_r>:
   89bb4:	b538      	push	{r3, r4, r5, lr}
   89bb6:	2300      	movs	r3, #0
   89bb8:	4c06      	ldr	r4, [pc, #24]	; (89bd4 <_sbrk_r+0x20>)
   89bba:	4605      	mov	r5, r0
   89bbc:	4608      	mov	r0, r1
   89bbe:	6023      	str	r3, [r4, #0]
   89bc0:	f7fb fe82 	bl	858c8 <_sbrk>
   89bc4:	1c43      	adds	r3, r0, #1
   89bc6:	d000      	beq.n	89bca <_sbrk_r+0x16>
   89bc8:	bd38      	pop	{r3, r4, r5, pc}
   89bca:	6823      	ldr	r3, [r4, #0]
   89bcc:	2b00      	cmp	r3, #0
   89bce:	d0fb      	beq.n	89bc8 <_sbrk_r+0x14>
   89bd0:	602b      	str	r3, [r5, #0]
   89bd2:	bd38      	pop	{r3, r4, r5, pc}
   89bd4:	20001350 	.word	0x20001350

00089bd8 <strlen>:
   89bd8:	f020 0103 	bic.w	r1, r0, #3
   89bdc:	f010 0003 	ands.w	r0, r0, #3
   89be0:	f1c0 0000 	rsb	r0, r0, #0
   89be4:	f851 3b04 	ldr.w	r3, [r1], #4
   89be8:	f100 0c04 	add.w	ip, r0, #4
   89bec:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   89bf0:	f06f 0200 	mvn.w	r2, #0
   89bf4:	bf1c      	itt	ne
   89bf6:	fa22 f20c 	lsrne.w	r2, r2, ip
   89bfa:	4313      	orrne	r3, r2
   89bfc:	f04f 0c01 	mov.w	ip, #1
   89c00:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   89c04:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   89c08:	eba3 020c 	sub.w	r2, r3, ip
   89c0c:	ea22 0203 	bic.w	r2, r2, r3
   89c10:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   89c14:	bf04      	itt	eq
   89c16:	f851 3b04 	ldreq.w	r3, [r1], #4
   89c1a:	3004      	addeq	r0, #4
   89c1c:	d0f4      	beq.n	89c08 <strlen+0x30>
   89c1e:	f1c2 0100 	rsb	r1, r2, #0
   89c22:	ea02 0201 	and.w	r2, r2, r1
   89c26:	fab2 f282 	clz	r2, r2
   89c2a:	f1c2 021f 	rsb	r2, r2, #31
   89c2e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   89c32:	4770      	bx	lr

00089c34 <strncpy>:
   89c34:	b470      	push	{r4, r5, r6}
   89c36:	ea40 0401 	orr.w	r4, r0, r1
   89c3a:	07a3      	lsls	r3, r4, #30
   89c3c:	d127      	bne.n	89c8e <strncpy+0x5a>
   89c3e:	2a03      	cmp	r2, #3
   89c40:	d925      	bls.n	89c8e <strncpy+0x5a>
   89c42:	460b      	mov	r3, r1
   89c44:	4606      	mov	r6, r0
   89c46:	4619      	mov	r1, r3
   89c48:	f853 5b04 	ldr.w	r5, [r3], #4
   89c4c:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   89c50:	ea24 0405 	bic.w	r4, r4, r5
   89c54:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   89c58:	d106      	bne.n	89c68 <strncpy+0x34>
   89c5a:	3a04      	subs	r2, #4
   89c5c:	2a03      	cmp	r2, #3
   89c5e:	f846 5b04 	str.w	r5, [r6], #4
   89c62:	4619      	mov	r1, r3
   89c64:	d8ef      	bhi.n	89c46 <strncpy+0x12>
   89c66:	b182      	cbz	r2, 89c8a <strncpy+0x56>
   89c68:	4633      	mov	r3, r6
   89c6a:	780c      	ldrb	r4, [r1, #0]
   89c6c:	1e55      	subs	r5, r2, #1
   89c6e:	f803 4b01 	strb.w	r4, [r3], #1
   89c72:	b174      	cbz	r4, 89c92 <strncpy+0x5e>
   89c74:	4432      	add	r2, r6
   89c76:	442e      	add	r6, r5
   89c78:	e005      	b.n	89c86 <strncpy+0x52>
   89c7a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   89c7e:	1af5      	subs	r5, r6, r3
   89c80:	f803 4b01 	strb.w	r4, [r3], #1
   89c84:	b12c      	cbz	r4, 89c92 <strncpy+0x5e>
   89c86:	429a      	cmp	r2, r3
   89c88:	d1f7      	bne.n	89c7a <strncpy+0x46>
   89c8a:	bc70      	pop	{r4, r5, r6}
   89c8c:	4770      	bx	lr
   89c8e:	4606      	mov	r6, r0
   89c90:	e7e9      	b.n	89c66 <strncpy+0x32>
   89c92:	2d00      	cmp	r5, #0
   89c94:	d0f9      	beq.n	89c8a <strncpy+0x56>
   89c96:	2200      	movs	r2, #0
   89c98:	441d      	add	r5, r3
   89c9a:	f803 2b01 	strb.w	r2, [r3], #1
   89c9e:	42ab      	cmp	r3, r5
   89ca0:	d1fb      	bne.n	89c9a <strncpy+0x66>
   89ca2:	bc70      	pop	{r4, r5, r6}
   89ca4:	4770      	bx	lr
   89ca6:	bf00      	nop

00089ca8 <__ssprint_r>:
   89ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89cac:	6893      	ldr	r3, [r2, #8]
   89cae:	b083      	sub	sp, #12
   89cb0:	4690      	mov	r8, r2
   89cb2:	2b00      	cmp	r3, #0
   89cb4:	d06d      	beq.n	89d92 <__ssprint_r+0xea>
   89cb6:	6817      	ldr	r7, [r2, #0]
   89cb8:	4682      	mov	sl, r0
   89cba:	460c      	mov	r4, r1
   89cbc:	6808      	ldr	r0, [r1, #0]
   89cbe:	3708      	adds	r7, #8
   89cc0:	688d      	ldr	r5, [r1, #8]
   89cc2:	e043      	b.n	89d4c <__ssprint_r+0xa4>
   89cc4:	89a3      	ldrh	r3, [r4, #12]
   89cc6:	f413 6f90 	tst.w	r3, #1152	; 0x480
   89cca:	d02e      	beq.n	89d2a <__ssprint_r+0x82>
   89ccc:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   89cd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   89cd4:	eba0 0b01 	sub.w	fp, r0, r1
   89cd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   89cdc:	eb0b 0006 	add.w	r0, fp, r6
   89ce0:	106d      	asrs	r5, r5, #1
   89ce2:	3001      	adds	r0, #1
   89ce4:	42a8      	cmp	r0, r5
   89ce6:	462a      	mov	r2, r5
   89ce8:	bf84      	itt	hi
   89cea:	4605      	movhi	r5, r0
   89cec:	462a      	movhi	r2, r5
   89cee:	055b      	lsls	r3, r3, #21
   89cf0:	d536      	bpl.n	89d60 <__ssprint_r+0xb8>
   89cf2:	4611      	mov	r1, r2
   89cf4:	4650      	mov	r0, sl
   89cf6:	f7fe fee9 	bl	88acc <_malloc_r>
   89cfa:	2800      	cmp	r0, #0
   89cfc:	d03a      	beq.n	89d74 <__ssprint_r+0xcc>
   89cfe:	465a      	mov	r2, fp
   89d00:	6921      	ldr	r1, [r4, #16]
   89d02:	9001      	str	r0, [sp, #4]
   89d04:	f7fb ff88 	bl	85c18 <memcpy>
   89d08:	89a2      	ldrh	r2, [r4, #12]
   89d0a:	9b01      	ldr	r3, [sp, #4]
   89d0c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   89d10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   89d14:	81a2      	strh	r2, [r4, #12]
   89d16:	eba5 020b 	sub.w	r2, r5, fp
   89d1a:	eb03 000b 	add.w	r0, r3, fp
   89d1e:	6165      	str	r5, [r4, #20]
   89d20:	46b3      	mov	fp, r6
   89d22:	4635      	mov	r5, r6
   89d24:	6123      	str	r3, [r4, #16]
   89d26:	6020      	str	r0, [r4, #0]
   89d28:	60a2      	str	r2, [r4, #8]
   89d2a:	465a      	mov	r2, fp
   89d2c:	4649      	mov	r1, r9
   89d2e:	f7ff f9d5 	bl	890dc <memmove>
   89d32:	f8d8 3008 	ldr.w	r3, [r8, #8]
   89d36:	68a2      	ldr	r2, [r4, #8]
   89d38:	6820      	ldr	r0, [r4, #0]
   89d3a:	1b55      	subs	r5, r2, r5
   89d3c:	4458      	add	r0, fp
   89d3e:	1b9e      	subs	r6, r3, r6
   89d40:	60a5      	str	r5, [r4, #8]
   89d42:	6020      	str	r0, [r4, #0]
   89d44:	f8c8 6008 	str.w	r6, [r8, #8]
   89d48:	b31e      	cbz	r6, 89d92 <__ssprint_r+0xea>
   89d4a:	3708      	adds	r7, #8
   89d4c:	e957 9602 	ldrd	r9, r6, [r7, #-8]
   89d50:	46ab      	mov	fp, r5
   89d52:	2e00      	cmp	r6, #0
   89d54:	d0f9      	beq.n	89d4a <__ssprint_r+0xa2>
   89d56:	42ae      	cmp	r6, r5
   89d58:	d2b4      	bcs.n	89cc4 <__ssprint_r+0x1c>
   89d5a:	4635      	mov	r5, r6
   89d5c:	46b3      	mov	fp, r6
   89d5e:	e7e4      	b.n	89d2a <__ssprint_r+0x82>
   89d60:	4650      	mov	r0, sl
   89d62:	f7ff fd31 	bl	897c8 <_realloc_r>
   89d66:	4603      	mov	r3, r0
   89d68:	2800      	cmp	r0, #0
   89d6a:	d1d4      	bne.n	89d16 <__ssprint_r+0x6e>
   89d6c:	6921      	ldr	r1, [r4, #16]
   89d6e:	4650      	mov	r0, sl
   89d70:	f7fe fdae 	bl	888d0 <_free_r>
   89d74:	230c      	movs	r3, #12
   89d76:	2200      	movs	r2, #0
   89d78:	f04f 30ff 	mov.w	r0, #4294967295
   89d7c:	f8ca 3000 	str.w	r3, [sl]
   89d80:	89a3      	ldrh	r3, [r4, #12]
   89d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89d86:	81a3      	strh	r3, [r4, #12]
   89d88:	e9c8 2201 	strd	r2, r2, [r8, #4]
   89d8c:	b003      	add	sp, #12
   89d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89d92:	2000      	movs	r0, #0
   89d94:	f8c8 0004 	str.w	r0, [r8, #4]
   89d98:	b003      	add	sp, #12
   89d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89d9e:	bf00      	nop

00089da0 <__ascii_wctomb>:
   89da0:	b119      	cbz	r1, 89daa <__ascii_wctomb+0xa>
   89da2:	2aff      	cmp	r2, #255	; 0xff
   89da4:	d803      	bhi.n	89dae <__ascii_wctomb+0xe>
   89da6:	700a      	strb	r2, [r1, #0]
   89da8:	2101      	movs	r1, #1
   89daa:	4608      	mov	r0, r1
   89dac:	4770      	bx	lr
   89dae:	238a      	movs	r3, #138	; 0x8a
   89db0:	f04f 31ff 	mov.w	r1, #4294967295
   89db4:	6003      	str	r3, [r0, #0]
   89db6:	4608      	mov	r0, r1
   89db8:	4770      	bx	lr
   89dba:	bf00      	nop

00089dbc <__register_exitproc>:
   89dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   89dc0:	4c1d      	ldr	r4, [pc, #116]	; (89e38 <__register_exitproc+0x7c>)
   89dc2:	4605      	mov	r5, r0
   89dc4:	6820      	ldr	r0, [r4, #0]
   89dc6:	4690      	mov	r8, r2
   89dc8:	461f      	mov	r7, r3
   89dca:	460e      	mov	r6, r1
   89dcc:	f7fe fe7a 	bl	88ac4 <__retarget_lock_acquire_recursive>
   89dd0:	4b1a      	ldr	r3, [pc, #104]	; (89e3c <__register_exitproc+0x80>)
   89dd2:	681a      	ldr	r2, [r3, #0]
   89dd4:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
   89dd8:	b31b      	cbz	r3, 89e22 <__register_exitproc+0x66>
   89dda:	685a      	ldr	r2, [r3, #4]
   89ddc:	6820      	ldr	r0, [r4, #0]
   89dde:	2a1f      	cmp	r2, #31
   89de0:	dc24      	bgt.n	89e2c <__register_exitproc+0x70>
   89de2:	b94d      	cbnz	r5, 89df8 <__register_exitproc+0x3c>
   89de4:	1c51      	adds	r1, r2, #1
   89de6:	3202      	adds	r2, #2
   89de8:	6059      	str	r1, [r3, #4]
   89dea:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   89dee:	f7fe fe6b 	bl	88ac8 <__retarget_lock_release_recursive>
   89df2:	2000      	movs	r0, #0
   89df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89df8:	2401      	movs	r4, #1
   89dfa:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   89dfe:	f8cc 8088 	str.w	r8, [ip, #136]	; 0x88
   89e02:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
   89e06:	4094      	lsls	r4, r2
   89e08:	4321      	orrs	r1, r4
   89e0a:	2d02      	cmp	r5, #2
   89e0c:	f8c3 1188 	str.w	r1, [r3, #392]	; 0x188
   89e10:	f8cc 7108 	str.w	r7, [ip, #264]	; 0x108
   89e14:	d1e6      	bne.n	89de4 <__register_exitproc+0x28>
   89e16:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   89e1a:	430c      	orrs	r4, r1
   89e1c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   89e20:	e7e0      	b.n	89de4 <__register_exitproc+0x28>
   89e22:	f502 73a6 	add.w	r3, r2, #332	; 0x14c
   89e26:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
   89e2a:	e7d6      	b.n	89dda <__register_exitproc+0x1e>
   89e2c:	f7fe fe4c 	bl	88ac8 <__retarget_lock_release_recursive>
   89e30:	f04f 30ff 	mov.w	r0, #4294967295
   89e34:	e7de      	b.n	89df4 <__register_exitproc+0x38>
   89e36:	bf00      	nop
   89e38:	200007d8 	.word	0x200007d8
   89e3c:	0008ab0c 	.word	0x0008ab0c

00089e40 <_calloc_r>:
   89e40:	b510      	push	{r4, lr}
   89e42:	fb02 f101 	mul.w	r1, r2, r1
   89e46:	f7fe fe41 	bl	88acc <_malloc_r>
   89e4a:	4604      	mov	r4, r0
   89e4c:	b168      	cbz	r0, 89e6a <_calloc_r+0x2a>
   89e4e:	f850 2c04 	ldr.w	r2, [r0, #-4]
   89e52:	f022 0203 	bic.w	r2, r2, #3
   89e56:	3a04      	subs	r2, #4
   89e58:	2a24      	cmp	r2, #36	; 0x24
   89e5a:	d818      	bhi.n	89e8e <_calloc_r+0x4e>
   89e5c:	2a13      	cmp	r2, #19
   89e5e:	d806      	bhi.n	89e6e <_calloc_r+0x2e>
   89e60:	4602      	mov	r2, r0
   89e62:	2300      	movs	r3, #0
   89e64:	e9c2 3300 	strd	r3, r3, [r2]
   89e68:	6093      	str	r3, [r2, #8]
   89e6a:	4620      	mov	r0, r4
   89e6c:	bd10      	pop	{r4, pc}
   89e6e:	2300      	movs	r3, #0
   89e70:	2a1b      	cmp	r2, #27
   89e72:	e9c0 3300 	strd	r3, r3, [r0]
   89e76:	d90f      	bls.n	89e98 <_calloc_r+0x58>
   89e78:	2a24      	cmp	r2, #36	; 0x24
   89e7a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   89e7e:	bf12      	itee	ne
   89e80:	f100 0210 	addne.w	r2, r0, #16
   89e84:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
   89e88:	f100 0218 	addeq.w	r2, r0, #24
   89e8c:	e7e9      	b.n	89e62 <_calloc_r+0x22>
   89e8e:	2100      	movs	r1, #0
   89e90:	f7fb ff38 	bl	85d04 <memset>
   89e94:	4620      	mov	r0, r4
   89e96:	bd10      	pop	{r4, pc}
   89e98:	f100 0208 	add.w	r2, r0, #8
   89e9c:	e7e1      	b.n	89e62 <_calloc_r+0x22>
   89e9e:	bf00      	nop

00089ea0 <__aeabi_drsub>:
   89ea0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   89ea4:	e002      	b.n	89eac <__adddf3>
   89ea6:	bf00      	nop

00089ea8 <__aeabi_dsub>:
   89ea8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00089eac <__adddf3>:
   89eac:	b530      	push	{r4, r5, lr}
   89eae:	ea4f 0441 	mov.w	r4, r1, lsl #1
   89eb2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   89eb6:	ea94 0f05 	teq	r4, r5
   89eba:	bf08      	it	eq
   89ebc:	ea90 0f02 	teqeq	r0, r2
   89ec0:	bf1f      	itttt	ne
   89ec2:	ea54 0c00 	orrsne.w	ip, r4, r0
   89ec6:	ea55 0c02 	orrsne.w	ip, r5, r2
   89eca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   89ece:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   89ed2:	f000 80e2 	beq.w	8a09a <__adddf3+0x1ee>
   89ed6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   89eda:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   89ede:	bfb8      	it	lt
   89ee0:	426d      	neglt	r5, r5
   89ee2:	dd0c      	ble.n	89efe <__adddf3+0x52>
   89ee4:	442c      	add	r4, r5
   89ee6:	ea80 0202 	eor.w	r2, r0, r2
   89eea:	ea81 0303 	eor.w	r3, r1, r3
   89eee:	ea82 0000 	eor.w	r0, r2, r0
   89ef2:	ea83 0101 	eor.w	r1, r3, r1
   89ef6:	ea80 0202 	eor.w	r2, r0, r2
   89efa:	ea81 0303 	eor.w	r3, r1, r3
   89efe:	2d36      	cmp	r5, #54	; 0x36
   89f00:	bf88      	it	hi
   89f02:	bd30      	pophi	{r4, r5, pc}
   89f04:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   89f08:	ea4f 3101 	mov.w	r1, r1, lsl #12
   89f0c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   89f10:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   89f14:	d002      	beq.n	89f1c <__adddf3+0x70>
   89f16:	4240      	negs	r0, r0
   89f18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   89f1c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   89f20:	ea4f 3303 	mov.w	r3, r3, lsl #12
   89f24:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   89f28:	d002      	beq.n	89f30 <__adddf3+0x84>
   89f2a:	4252      	negs	r2, r2
   89f2c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   89f30:	ea94 0f05 	teq	r4, r5
   89f34:	f000 80a7 	beq.w	8a086 <__adddf3+0x1da>
   89f38:	f1a4 0401 	sub.w	r4, r4, #1
   89f3c:	f1d5 0e20 	rsbs	lr, r5, #32
   89f40:	db0d      	blt.n	89f5e <__adddf3+0xb2>
   89f42:	fa02 fc0e 	lsl.w	ip, r2, lr
   89f46:	fa22 f205 	lsr.w	r2, r2, r5
   89f4a:	1880      	adds	r0, r0, r2
   89f4c:	f141 0100 	adc.w	r1, r1, #0
   89f50:	fa03 f20e 	lsl.w	r2, r3, lr
   89f54:	1880      	adds	r0, r0, r2
   89f56:	fa43 f305 	asr.w	r3, r3, r5
   89f5a:	4159      	adcs	r1, r3
   89f5c:	e00e      	b.n	89f7c <__adddf3+0xd0>
   89f5e:	f1a5 0520 	sub.w	r5, r5, #32
   89f62:	f10e 0e20 	add.w	lr, lr, #32
   89f66:	2a01      	cmp	r2, #1
   89f68:	fa03 fc0e 	lsl.w	ip, r3, lr
   89f6c:	bf28      	it	cs
   89f6e:	f04c 0c02 	orrcs.w	ip, ip, #2
   89f72:	fa43 f305 	asr.w	r3, r3, r5
   89f76:	18c0      	adds	r0, r0, r3
   89f78:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   89f7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   89f80:	d507      	bpl.n	89f92 <__adddf3+0xe6>
   89f82:	f04f 0e00 	mov.w	lr, #0
   89f86:	f1dc 0c00 	rsbs	ip, ip, #0
   89f8a:	eb7e 0000 	sbcs.w	r0, lr, r0
   89f8e:	eb6e 0101 	sbc.w	r1, lr, r1
   89f92:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   89f96:	d31b      	bcc.n	89fd0 <__adddf3+0x124>
   89f98:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   89f9c:	d30c      	bcc.n	89fb8 <__adddf3+0x10c>
   89f9e:	0849      	lsrs	r1, r1, #1
   89fa0:	ea5f 0030 	movs.w	r0, r0, rrx
   89fa4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   89fa8:	f104 0401 	add.w	r4, r4, #1
   89fac:	ea4f 5244 	mov.w	r2, r4, lsl #21
   89fb0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   89fb4:	f080 809a 	bcs.w	8a0ec <__adddf3+0x240>
   89fb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   89fbc:	bf08      	it	eq
   89fbe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   89fc2:	f150 0000 	adcs.w	r0, r0, #0
   89fc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   89fca:	ea41 0105 	orr.w	r1, r1, r5
   89fce:	bd30      	pop	{r4, r5, pc}
   89fd0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   89fd4:	4140      	adcs	r0, r0
   89fd6:	eb41 0101 	adc.w	r1, r1, r1
   89fda:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   89fde:	f1a4 0401 	sub.w	r4, r4, #1
   89fe2:	d1e9      	bne.n	89fb8 <__adddf3+0x10c>
   89fe4:	f091 0f00 	teq	r1, #0
   89fe8:	bf04      	itt	eq
   89fea:	4601      	moveq	r1, r0
   89fec:	2000      	moveq	r0, #0
   89fee:	fab1 f381 	clz	r3, r1
   89ff2:	bf08      	it	eq
   89ff4:	3320      	addeq	r3, #32
   89ff6:	f1a3 030b 	sub.w	r3, r3, #11
   89ffa:	f1b3 0220 	subs.w	r2, r3, #32
   89ffe:	da0c      	bge.n	8a01a <__adddf3+0x16e>
   8a000:	320c      	adds	r2, #12
   8a002:	dd08      	ble.n	8a016 <__adddf3+0x16a>
   8a004:	f102 0c14 	add.w	ip, r2, #20
   8a008:	f1c2 020c 	rsb	r2, r2, #12
   8a00c:	fa01 f00c 	lsl.w	r0, r1, ip
   8a010:	fa21 f102 	lsr.w	r1, r1, r2
   8a014:	e00c      	b.n	8a030 <__adddf3+0x184>
   8a016:	f102 0214 	add.w	r2, r2, #20
   8a01a:	bfd8      	it	le
   8a01c:	f1c2 0c20 	rsble	ip, r2, #32
   8a020:	fa01 f102 	lsl.w	r1, r1, r2
   8a024:	fa20 fc0c 	lsr.w	ip, r0, ip
   8a028:	bfdc      	itt	le
   8a02a:	ea41 010c 	orrle.w	r1, r1, ip
   8a02e:	4090      	lslle	r0, r2
   8a030:	1ae4      	subs	r4, r4, r3
   8a032:	bfa2      	ittt	ge
   8a034:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8a038:	4329      	orrge	r1, r5
   8a03a:	bd30      	popge	{r4, r5, pc}
   8a03c:	ea6f 0404 	mvn.w	r4, r4
   8a040:	3c1f      	subs	r4, #31
   8a042:	da1c      	bge.n	8a07e <__adddf3+0x1d2>
   8a044:	340c      	adds	r4, #12
   8a046:	dc0e      	bgt.n	8a066 <__adddf3+0x1ba>
   8a048:	f104 0414 	add.w	r4, r4, #20
   8a04c:	f1c4 0220 	rsb	r2, r4, #32
   8a050:	fa20 f004 	lsr.w	r0, r0, r4
   8a054:	fa01 f302 	lsl.w	r3, r1, r2
   8a058:	ea40 0003 	orr.w	r0, r0, r3
   8a05c:	fa21 f304 	lsr.w	r3, r1, r4
   8a060:	ea45 0103 	orr.w	r1, r5, r3
   8a064:	bd30      	pop	{r4, r5, pc}
   8a066:	f1c4 040c 	rsb	r4, r4, #12
   8a06a:	f1c4 0220 	rsb	r2, r4, #32
   8a06e:	fa20 f002 	lsr.w	r0, r0, r2
   8a072:	fa01 f304 	lsl.w	r3, r1, r4
   8a076:	ea40 0003 	orr.w	r0, r0, r3
   8a07a:	4629      	mov	r1, r5
   8a07c:	bd30      	pop	{r4, r5, pc}
   8a07e:	fa21 f004 	lsr.w	r0, r1, r4
   8a082:	4629      	mov	r1, r5
   8a084:	bd30      	pop	{r4, r5, pc}
   8a086:	f094 0f00 	teq	r4, #0
   8a08a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8a08e:	bf06      	itte	eq
   8a090:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8a094:	3401      	addeq	r4, #1
   8a096:	3d01      	subne	r5, #1
   8a098:	e74e      	b.n	89f38 <__adddf3+0x8c>
   8a09a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8a09e:	bf18      	it	ne
   8a0a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8a0a4:	d029      	beq.n	8a0fa <__adddf3+0x24e>
   8a0a6:	ea94 0f05 	teq	r4, r5
   8a0aa:	bf08      	it	eq
   8a0ac:	ea90 0f02 	teqeq	r0, r2
   8a0b0:	d005      	beq.n	8a0be <__adddf3+0x212>
   8a0b2:	ea54 0c00 	orrs.w	ip, r4, r0
   8a0b6:	bf04      	itt	eq
   8a0b8:	4619      	moveq	r1, r3
   8a0ba:	4610      	moveq	r0, r2
   8a0bc:	bd30      	pop	{r4, r5, pc}
   8a0be:	ea91 0f03 	teq	r1, r3
   8a0c2:	bf1e      	ittt	ne
   8a0c4:	2100      	movne	r1, #0
   8a0c6:	2000      	movne	r0, #0
   8a0c8:	bd30      	popne	{r4, r5, pc}
   8a0ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8a0ce:	d105      	bne.n	8a0dc <__adddf3+0x230>
   8a0d0:	0040      	lsls	r0, r0, #1
   8a0d2:	4149      	adcs	r1, r1
   8a0d4:	bf28      	it	cs
   8a0d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8a0da:	bd30      	pop	{r4, r5, pc}
   8a0dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8a0e0:	bf3c      	itt	cc
   8a0e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8a0e6:	bd30      	popcc	{r4, r5, pc}
   8a0e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a0ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8a0f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8a0f4:	f04f 0000 	mov.w	r0, #0
   8a0f8:	bd30      	pop	{r4, r5, pc}
   8a0fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8a0fe:	bf1a      	itte	ne
   8a100:	4619      	movne	r1, r3
   8a102:	4610      	movne	r0, r2
   8a104:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8a108:	bf1c      	itt	ne
   8a10a:	460b      	movne	r3, r1
   8a10c:	4602      	movne	r2, r0
   8a10e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8a112:	bf06      	itte	eq
   8a114:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8a118:	ea91 0f03 	teqeq	r1, r3
   8a11c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8a120:	bd30      	pop	{r4, r5, pc}
   8a122:	bf00      	nop

0008a124 <__aeabi_ui2d>:
   8a124:	f090 0f00 	teq	r0, #0
   8a128:	bf04      	itt	eq
   8a12a:	2100      	moveq	r1, #0
   8a12c:	4770      	bxeq	lr
   8a12e:	b530      	push	{r4, r5, lr}
   8a130:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8a134:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8a138:	f04f 0500 	mov.w	r5, #0
   8a13c:	f04f 0100 	mov.w	r1, #0
   8a140:	e750      	b.n	89fe4 <__adddf3+0x138>
   8a142:	bf00      	nop

0008a144 <__aeabi_i2d>:
   8a144:	f090 0f00 	teq	r0, #0
   8a148:	bf04      	itt	eq
   8a14a:	2100      	moveq	r1, #0
   8a14c:	4770      	bxeq	lr
   8a14e:	b530      	push	{r4, r5, lr}
   8a150:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8a154:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8a158:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8a15c:	bf48      	it	mi
   8a15e:	4240      	negmi	r0, r0
   8a160:	f04f 0100 	mov.w	r1, #0
   8a164:	e73e      	b.n	89fe4 <__adddf3+0x138>
   8a166:	bf00      	nop

0008a168 <__aeabi_f2d>:
   8a168:	0042      	lsls	r2, r0, #1
   8a16a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8a16e:	ea4f 0131 	mov.w	r1, r1, rrx
   8a172:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8a176:	bf1f      	itttt	ne
   8a178:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8a17c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8a180:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8a184:	4770      	bxne	lr
   8a186:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8a18a:	bf08      	it	eq
   8a18c:	4770      	bxeq	lr
   8a18e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8a192:	bf04      	itt	eq
   8a194:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8a198:	4770      	bxeq	lr
   8a19a:	b530      	push	{r4, r5, lr}
   8a19c:	f44f 7460 	mov.w	r4, #896	; 0x380
   8a1a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8a1a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8a1a8:	e71c      	b.n	89fe4 <__adddf3+0x138>
   8a1aa:	bf00      	nop

0008a1ac <__aeabi_ul2d>:
   8a1ac:	ea50 0201 	orrs.w	r2, r0, r1
   8a1b0:	bf08      	it	eq
   8a1b2:	4770      	bxeq	lr
   8a1b4:	b530      	push	{r4, r5, lr}
   8a1b6:	f04f 0500 	mov.w	r5, #0
   8a1ba:	e00a      	b.n	8a1d2 <__aeabi_l2d+0x16>

0008a1bc <__aeabi_l2d>:
   8a1bc:	ea50 0201 	orrs.w	r2, r0, r1
   8a1c0:	bf08      	it	eq
   8a1c2:	4770      	bxeq	lr
   8a1c4:	b530      	push	{r4, r5, lr}
   8a1c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8a1ca:	d502      	bpl.n	8a1d2 <__aeabi_l2d+0x16>
   8a1cc:	4240      	negs	r0, r0
   8a1ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8a1d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8a1d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8a1da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8a1de:	f43f aed8 	beq.w	89f92 <__adddf3+0xe6>
   8a1e2:	f04f 0203 	mov.w	r2, #3
   8a1e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8a1ea:	bf18      	it	ne
   8a1ec:	3203      	addne	r2, #3
   8a1ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8a1f2:	bf18      	it	ne
   8a1f4:	3203      	addne	r2, #3
   8a1f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8a1fa:	f1c2 0320 	rsb	r3, r2, #32
   8a1fe:	fa00 fc03 	lsl.w	ip, r0, r3
   8a202:	fa20 f002 	lsr.w	r0, r0, r2
   8a206:	fa01 fe03 	lsl.w	lr, r1, r3
   8a20a:	ea40 000e 	orr.w	r0, r0, lr
   8a20e:	fa21 f102 	lsr.w	r1, r1, r2
   8a212:	4414      	add	r4, r2
   8a214:	e6bd      	b.n	89f92 <__adddf3+0xe6>
   8a216:	bf00      	nop

0008a218 <__aeabi_dmul>:
   8a218:	b570      	push	{r4, r5, r6, lr}
   8a21a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8a21e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8a222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8a226:	bf1d      	ittte	ne
   8a228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8a22c:	ea94 0f0c 	teqne	r4, ip
   8a230:	ea95 0f0c 	teqne	r5, ip
   8a234:	f000 f8de 	bleq	8a3f4 <__aeabi_dmul+0x1dc>
   8a238:	442c      	add	r4, r5
   8a23a:	ea81 0603 	eor.w	r6, r1, r3
   8a23e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8a242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8a246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8a24a:	bf18      	it	ne
   8a24c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8a250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8a254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8a258:	d038      	beq.n	8a2cc <__aeabi_dmul+0xb4>
   8a25a:	fba0 ce02 	umull	ip, lr, r0, r2
   8a25e:	f04f 0500 	mov.w	r5, #0
   8a262:	fbe1 e502 	umlal	lr, r5, r1, r2
   8a266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8a26a:	fbe0 e503 	umlal	lr, r5, r0, r3
   8a26e:	f04f 0600 	mov.w	r6, #0
   8a272:	fbe1 5603 	umlal	r5, r6, r1, r3
   8a276:	f09c 0f00 	teq	ip, #0
   8a27a:	bf18      	it	ne
   8a27c:	f04e 0e01 	orrne.w	lr, lr, #1
   8a280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8a284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8a288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8a28c:	d204      	bcs.n	8a298 <__aeabi_dmul+0x80>
   8a28e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8a292:	416d      	adcs	r5, r5
   8a294:	eb46 0606 	adc.w	r6, r6, r6
   8a298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8a29c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8a2a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8a2a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8a2a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8a2ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8a2b0:	bf88      	it	hi
   8a2b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8a2b6:	d81e      	bhi.n	8a2f6 <__aeabi_dmul+0xde>
   8a2b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8a2bc:	bf08      	it	eq
   8a2be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8a2c2:	f150 0000 	adcs.w	r0, r0, #0
   8a2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8a2ca:	bd70      	pop	{r4, r5, r6, pc}
   8a2cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8a2d0:	ea46 0101 	orr.w	r1, r6, r1
   8a2d4:	ea40 0002 	orr.w	r0, r0, r2
   8a2d8:	ea81 0103 	eor.w	r1, r1, r3
   8a2dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8a2e0:	bfc2      	ittt	gt
   8a2e2:	ebd4 050c 	rsbsgt	r5, r4, ip
   8a2e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8a2ea:	bd70      	popgt	{r4, r5, r6, pc}
   8a2ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8a2f0:	f04f 0e00 	mov.w	lr, #0
   8a2f4:	3c01      	subs	r4, #1
   8a2f6:	f300 80ab 	bgt.w	8a450 <__aeabi_dmul+0x238>
   8a2fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8a2fe:	bfde      	ittt	le
   8a300:	2000      	movle	r0, #0
   8a302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8a306:	bd70      	pople	{r4, r5, r6, pc}
   8a308:	f1c4 0400 	rsb	r4, r4, #0
   8a30c:	3c20      	subs	r4, #32
   8a30e:	da35      	bge.n	8a37c <__aeabi_dmul+0x164>
   8a310:	340c      	adds	r4, #12
   8a312:	dc1b      	bgt.n	8a34c <__aeabi_dmul+0x134>
   8a314:	f104 0414 	add.w	r4, r4, #20
   8a318:	f1c4 0520 	rsb	r5, r4, #32
   8a31c:	fa00 f305 	lsl.w	r3, r0, r5
   8a320:	fa20 f004 	lsr.w	r0, r0, r4
   8a324:	fa01 f205 	lsl.w	r2, r1, r5
   8a328:	ea40 0002 	orr.w	r0, r0, r2
   8a32c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8a330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8a334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8a338:	fa21 f604 	lsr.w	r6, r1, r4
   8a33c:	eb42 0106 	adc.w	r1, r2, r6
   8a340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8a344:	bf08      	it	eq
   8a346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8a34a:	bd70      	pop	{r4, r5, r6, pc}
   8a34c:	f1c4 040c 	rsb	r4, r4, #12
   8a350:	f1c4 0520 	rsb	r5, r4, #32
   8a354:	fa00 f304 	lsl.w	r3, r0, r4
   8a358:	fa20 f005 	lsr.w	r0, r0, r5
   8a35c:	fa01 f204 	lsl.w	r2, r1, r4
   8a360:	ea40 0002 	orr.w	r0, r0, r2
   8a364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8a368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8a36c:	f141 0100 	adc.w	r1, r1, #0
   8a370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8a374:	bf08      	it	eq
   8a376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8a37a:	bd70      	pop	{r4, r5, r6, pc}
   8a37c:	f1c4 0520 	rsb	r5, r4, #32
   8a380:	fa00 f205 	lsl.w	r2, r0, r5
   8a384:	ea4e 0e02 	orr.w	lr, lr, r2
   8a388:	fa20 f304 	lsr.w	r3, r0, r4
   8a38c:	fa01 f205 	lsl.w	r2, r1, r5
   8a390:	ea43 0302 	orr.w	r3, r3, r2
   8a394:	fa21 f004 	lsr.w	r0, r1, r4
   8a398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8a39c:	fa21 f204 	lsr.w	r2, r1, r4
   8a3a0:	ea20 0002 	bic.w	r0, r0, r2
   8a3a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8a3a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8a3ac:	bf08      	it	eq
   8a3ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8a3b2:	bd70      	pop	{r4, r5, r6, pc}
   8a3b4:	f094 0f00 	teq	r4, #0
   8a3b8:	d10f      	bne.n	8a3da <__aeabi_dmul+0x1c2>
   8a3ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8a3be:	0040      	lsls	r0, r0, #1
   8a3c0:	eb41 0101 	adc.w	r1, r1, r1
   8a3c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8a3c8:	bf08      	it	eq
   8a3ca:	3c01      	subeq	r4, #1
   8a3cc:	d0f7      	beq.n	8a3be <__aeabi_dmul+0x1a6>
   8a3ce:	ea41 0106 	orr.w	r1, r1, r6
   8a3d2:	f095 0f00 	teq	r5, #0
   8a3d6:	bf18      	it	ne
   8a3d8:	4770      	bxne	lr
   8a3da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8a3de:	0052      	lsls	r2, r2, #1
   8a3e0:	eb43 0303 	adc.w	r3, r3, r3
   8a3e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8a3e8:	bf08      	it	eq
   8a3ea:	3d01      	subeq	r5, #1
   8a3ec:	d0f7      	beq.n	8a3de <__aeabi_dmul+0x1c6>
   8a3ee:	ea43 0306 	orr.w	r3, r3, r6
   8a3f2:	4770      	bx	lr
   8a3f4:	ea94 0f0c 	teq	r4, ip
   8a3f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8a3fc:	bf18      	it	ne
   8a3fe:	ea95 0f0c 	teqne	r5, ip
   8a402:	d00c      	beq.n	8a41e <__aeabi_dmul+0x206>
   8a404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8a408:	bf18      	it	ne
   8a40a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8a40e:	d1d1      	bne.n	8a3b4 <__aeabi_dmul+0x19c>
   8a410:	ea81 0103 	eor.w	r1, r1, r3
   8a414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8a418:	f04f 0000 	mov.w	r0, #0
   8a41c:	bd70      	pop	{r4, r5, r6, pc}
   8a41e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8a422:	bf06      	itte	eq
   8a424:	4610      	moveq	r0, r2
   8a426:	4619      	moveq	r1, r3
   8a428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8a42c:	d019      	beq.n	8a462 <__aeabi_dmul+0x24a>
   8a42e:	ea94 0f0c 	teq	r4, ip
   8a432:	d102      	bne.n	8a43a <__aeabi_dmul+0x222>
   8a434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8a438:	d113      	bne.n	8a462 <__aeabi_dmul+0x24a>
   8a43a:	ea95 0f0c 	teq	r5, ip
   8a43e:	d105      	bne.n	8a44c <__aeabi_dmul+0x234>
   8a440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8a444:	bf1c      	itt	ne
   8a446:	4610      	movne	r0, r2
   8a448:	4619      	movne	r1, r3
   8a44a:	d10a      	bne.n	8a462 <__aeabi_dmul+0x24a>
   8a44c:	ea81 0103 	eor.w	r1, r1, r3
   8a450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8a454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8a458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8a45c:	f04f 0000 	mov.w	r0, #0
   8a460:	bd70      	pop	{r4, r5, r6, pc}
   8a462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8a466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8a46a:	bd70      	pop	{r4, r5, r6, pc}

0008a46c <__aeabi_ddiv>:
   8a46c:	b570      	push	{r4, r5, r6, lr}
   8a46e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8a472:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8a476:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8a47a:	bf1d      	ittte	ne
   8a47c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8a480:	ea94 0f0c 	teqne	r4, ip
   8a484:	ea95 0f0c 	teqne	r5, ip
   8a488:	f000 f8a7 	bleq	8a5da <__aeabi_ddiv+0x16e>
   8a48c:	eba4 0405 	sub.w	r4, r4, r5
   8a490:	ea81 0e03 	eor.w	lr, r1, r3
   8a494:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8a498:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8a49c:	f000 8088 	beq.w	8a5b0 <__aeabi_ddiv+0x144>
   8a4a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8a4a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8a4a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8a4ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8a4b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8a4b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8a4b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8a4bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8a4c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8a4c4:	429d      	cmp	r5, r3
   8a4c6:	bf08      	it	eq
   8a4c8:	4296      	cmpeq	r6, r2
   8a4ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8a4ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8a4d2:	d202      	bcs.n	8a4da <__aeabi_ddiv+0x6e>
   8a4d4:	085b      	lsrs	r3, r3, #1
   8a4d6:	ea4f 0232 	mov.w	r2, r2, rrx
   8a4da:	1ab6      	subs	r6, r6, r2
   8a4dc:	eb65 0503 	sbc.w	r5, r5, r3
   8a4e0:	085b      	lsrs	r3, r3, #1
   8a4e2:	ea4f 0232 	mov.w	r2, r2, rrx
   8a4e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8a4ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8a4ee:	ebb6 0e02 	subs.w	lr, r6, r2
   8a4f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   8a4f6:	bf22      	ittt	cs
   8a4f8:	1ab6      	subcs	r6, r6, r2
   8a4fa:	4675      	movcs	r5, lr
   8a4fc:	ea40 000c 	orrcs.w	r0, r0, ip
   8a500:	085b      	lsrs	r3, r3, #1
   8a502:	ea4f 0232 	mov.w	r2, r2, rrx
   8a506:	ebb6 0e02 	subs.w	lr, r6, r2
   8a50a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8a50e:	bf22      	ittt	cs
   8a510:	1ab6      	subcs	r6, r6, r2
   8a512:	4675      	movcs	r5, lr
   8a514:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8a518:	085b      	lsrs	r3, r3, #1
   8a51a:	ea4f 0232 	mov.w	r2, r2, rrx
   8a51e:	ebb6 0e02 	subs.w	lr, r6, r2
   8a522:	eb75 0e03 	sbcs.w	lr, r5, r3
   8a526:	bf22      	ittt	cs
   8a528:	1ab6      	subcs	r6, r6, r2
   8a52a:	4675      	movcs	r5, lr
   8a52c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8a530:	085b      	lsrs	r3, r3, #1
   8a532:	ea4f 0232 	mov.w	r2, r2, rrx
   8a536:	ebb6 0e02 	subs.w	lr, r6, r2
   8a53a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8a53e:	bf22      	ittt	cs
   8a540:	1ab6      	subcs	r6, r6, r2
   8a542:	4675      	movcs	r5, lr
   8a544:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8a548:	ea55 0e06 	orrs.w	lr, r5, r6
   8a54c:	d018      	beq.n	8a580 <__aeabi_ddiv+0x114>
   8a54e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8a552:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8a556:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8a55a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8a55e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8a562:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8a566:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8a56a:	d1c0      	bne.n	8a4ee <__aeabi_ddiv+0x82>
   8a56c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8a570:	d10b      	bne.n	8a58a <__aeabi_ddiv+0x11e>
   8a572:	ea41 0100 	orr.w	r1, r1, r0
   8a576:	f04f 0000 	mov.w	r0, #0
   8a57a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8a57e:	e7b6      	b.n	8a4ee <__aeabi_ddiv+0x82>
   8a580:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8a584:	bf04      	itt	eq
   8a586:	4301      	orreq	r1, r0
   8a588:	2000      	moveq	r0, #0
   8a58a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8a58e:	bf88      	it	hi
   8a590:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8a594:	f63f aeaf 	bhi.w	8a2f6 <__aeabi_dmul+0xde>
   8a598:	ebb5 0c03 	subs.w	ip, r5, r3
   8a59c:	bf04      	itt	eq
   8a59e:	ebb6 0c02 	subseq.w	ip, r6, r2
   8a5a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8a5a6:	f150 0000 	adcs.w	r0, r0, #0
   8a5aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8a5ae:	bd70      	pop	{r4, r5, r6, pc}
   8a5b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8a5b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8a5b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8a5bc:	bfc2      	ittt	gt
   8a5be:	ebd4 050c 	rsbsgt	r5, r4, ip
   8a5c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8a5c6:	bd70      	popgt	{r4, r5, r6, pc}
   8a5c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8a5cc:	f04f 0e00 	mov.w	lr, #0
   8a5d0:	3c01      	subs	r4, #1
   8a5d2:	e690      	b.n	8a2f6 <__aeabi_dmul+0xde>
   8a5d4:	ea45 0e06 	orr.w	lr, r5, r6
   8a5d8:	e68d      	b.n	8a2f6 <__aeabi_dmul+0xde>
   8a5da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8a5de:	ea94 0f0c 	teq	r4, ip
   8a5e2:	bf08      	it	eq
   8a5e4:	ea95 0f0c 	teqeq	r5, ip
   8a5e8:	f43f af3b 	beq.w	8a462 <__aeabi_dmul+0x24a>
   8a5ec:	ea94 0f0c 	teq	r4, ip
   8a5f0:	d10a      	bne.n	8a608 <__aeabi_ddiv+0x19c>
   8a5f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8a5f6:	f47f af34 	bne.w	8a462 <__aeabi_dmul+0x24a>
   8a5fa:	ea95 0f0c 	teq	r5, ip
   8a5fe:	f47f af25 	bne.w	8a44c <__aeabi_dmul+0x234>
   8a602:	4610      	mov	r0, r2
   8a604:	4619      	mov	r1, r3
   8a606:	e72c      	b.n	8a462 <__aeabi_dmul+0x24a>
   8a608:	ea95 0f0c 	teq	r5, ip
   8a60c:	d106      	bne.n	8a61c <__aeabi_ddiv+0x1b0>
   8a60e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8a612:	f43f aefd 	beq.w	8a410 <__aeabi_dmul+0x1f8>
   8a616:	4610      	mov	r0, r2
   8a618:	4619      	mov	r1, r3
   8a61a:	e722      	b.n	8a462 <__aeabi_dmul+0x24a>
   8a61c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8a620:	bf18      	it	ne
   8a622:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8a626:	f47f aec5 	bne.w	8a3b4 <__aeabi_dmul+0x19c>
   8a62a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8a62e:	f47f af0d 	bne.w	8a44c <__aeabi_dmul+0x234>
   8a632:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8a636:	f47f aeeb 	bne.w	8a410 <__aeabi_dmul+0x1f8>
   8a63a:	e712      	b.n	8a462 <__aeabi_dmul+0x24a>

0008a63c <__gedf2>:
   8a63c:	f04f 3cff 	mov.w	ip, #4294967295
   8a640:	e006      	b.n	8a650 <__cmpdf2+0x4>
   8a642:	bf00      	nop

0008a644 <__ledf2>:
   8a644:	f04f 0c01 	mov.w	ip, #1
   8a648:	e002      	b.n	8a650 <__cmpdf2+0x4>
   8a64a:	bf00      	nop

0008a64c <__cmpdf2>:
   8a64c:	f04f 0c01 	mov.w	ip, #1
   8a650:	f84d cd04 	str.w	ip, [sp, #-4]!
   8a654:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8a658:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a65c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8a660:	bf18      	it	ne
   8a662:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8a666:	d01b      	beq.n	8a6a0 <__cmpdf2+0x54>
   8a668:	b001      	add	sp, #4
   8a66a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8a66e:	bf0c      	ite	eq
   8a670:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8a674:	ea91 0f03 	teqne	r1, r3
   8a678:	bf02      	ittt	eq
   8a67a:	ea90 0f02 	teqeq	r0, r2
   8a67e:	2000      	moveq	r0, #0
   8a680:	4770      	bxeq	lr
   8a682:	f110 0f00 	cmn.w	r0, #0
   8a686:	ea91 0f03 	teq	r1, r3
   8a68a:	bf58      	it	pl
   8a68c:	4299      	cmppl	r1, r3
   8a68e:	bf08      	it	eq
   8a690:	4290      	cmpeq	r0, r2
   8a692:	bf2c      	ite	cs
   8a694:	17d8      	asrcs	r0, r3, #31
   8a696:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8a69a:	f040 0001 	orr.w	r0, r0, #1
   8a69e:	4770      	bx	lr
   8a6a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8a6a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a6a8:	d102      	bne.n	8a6b0 <__cmpdf2+0x64>
   8a6aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8a6ae:	d107      	bne.n	8a6c0 <__cmpdf2+0x74>
   8a6b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8a6b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a6b8:	d1d6      	bne.n	8a668 <__cmpdf2+0x1c>
   8a6ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8a6be:	d0d3      	beq.n	8a668 <__cmpdf2+0x1c>
   8a6c0:	f85d 0b04 	ldr.w	r0, [sp], #4
   8a6c4:	4770      	bx	lr
   8a6c6:	bf00      	nop

0008a6c8 <__aeabi_cdrcmple>:
   8a6c8:	4684      	mov	ip, r0
   8a6ca:	4610      	mov	r0, r2
   8a6cc:	4662      	mov	r2, ip
   8a6ce:	468c      	mov	ip, r1
   8a6d0:	4619      	mov	r1, r3
   8a6d2:	4663      	mov	r3, ip
   8a6d4:	e000      	b.n	8a6d8 <__aeabi_cdcmpeq>
   8a6d6:	bf00      	nop

0008a6d8 <__aeabi_cdcmpeq>:
   8a6d8:	b501      	push	{r0, lr}
   8a6da:	f7ff ffb7 	bl	8a64c <__cmpdf2>
   8a6de:	2800      	cmp	r0, #0
   8a6e0:	bf48      	it	mi
   8a6e2:	f110 0f00 	cmnmi.w	r0, #0
   8a6e6:	bd01      	pop	{r0, pc}

0008a6e8 <__aeabi_dcmpeq>:
   8a6e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a6ec:	f7ff fff4 	bl	8a6d8 <__aeabi_cdcmpeq>
   8a6f0:	bf0c      	ite	eq
   8a6f2:	2001      	moveq	r0, #1
   8a6f4:	2000      	movne	r0, #0
   8a6f6:	f85d fb08 	ldr.w	pc, [sp], #8
   8a6fa:	bf00      	nop

0008a6fc <__aeabi_dcmplt>:
   8a6fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a700:	f7ff ffea 	bl	8a6d8 <__aeabi_cdcmpeq>
   8a704:	bf34      	ite	cc
   8a706:	2001      	movcc	r0, #1
   8a708:	2000      	movcs	r0, #0
   8a70a:	f85d fb08 	ldr.w	pc, [sp], #8
   8a70e:	bf00      	nop

0008a710 <__aeabi_dcmple>:
   8a710:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a714:	f7ff ffe0 	bl	8a6d8 <__aeabi_cdcmpeq>
   8a718:	bf94      	ite	ls
   8a71a:	2001      	movls	r0, #1
   8a71c:	2000      	movhi	r0, #0
   8a71e:	f85d fb08 	ldr.w	pc, [sp], #8
   8a722:	bf00      	nop

0008a724 <__aeabi_dcmpge>:
   8a724:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a728:	f7ff ffce 	bl	8a6c8 <__aeabi_cdrcmple>
   8a72c:	bf94      	ite	ls
   8a72e:	2001      	movls	r0, #1
   8a730:	2000      	movhi	r0, #0
   8a732:	f85d fb08 	ldr.w	pc, [sp], #8
   8a736:	bf00      	nop

0008a738 <__aeabi_dcmpgt>:
   8a738:	f84d ed08 	str.w	lr, [sp, #-8]!
   8a73c:	f7ff ffc4 	bl	8a6c8 <__aeabi_cdrcmple>
   8a740:	bf34      	ite	cc
   8a742:	2001      	movcc	r0, #1
   8a744:	2000      	movcs	r0, #0
   8a746:	f85d fb08 	ldr.w	pc, [sp], #8
   8a74a:	bf00      	nop

0008a74c <__aeabi_dcmpun>:
   8a74c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8a750:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a754:	d102      	bne.n	8a75c <__aeabi_dcmpun+0x10>
   8a756:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8a75a:	d10a      	bne.n	8a772 <__aeabi_dcmpun+0x26>
   8a75c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8a760:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8a764:	d102      	bne.n	8a76c <__aeabi_dcmpun+0x20>
   8a766:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8a76a:	d102      	bne.n	8a772 <__aeabi_dcmpun+0x26>
   8a76c:	f04f 0000 	mov.w	r0, #0
   8a770:	4770      	bx	lr
   8a772:	f04f 0001 	mov.w	r0, #1
   8a776:	4770      	bx	lr

0008a778 <__aeabi_d2iz>:
   8a778:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8a77c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8a780:	d215      	bcs.n	8a7ae <__aeabi_d2iz+0x36>
   8a782:	d511      	bpl.n	8a7a8 <__aeabi_d2iz+0x30>
   8a784:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8a788:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8a78c:	d912      	bls.n	8a7b4 <__aeabi_d2iz+0x3c>
   8a78e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8a792:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8a796:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8a79a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8a79e:	fa23 f002 	lsr.w	r0, r3, r2
   8a7a2:	bf18      	it	ne
   8a7a4:	4240      	negne	r0, r0
   8a7a6:	4770      	bx	lr
   8a7a8:	f04f 0000 	mov.w	r0, #0
   8a7ac:	4770      	bx	lr
   8a7ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8a7b2:	d105      	bne.n	8a7c0 <__aeabi_d2iz+0x48>
   8a7b4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8a7b8:	bf08      	it	eq
   8a7ba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8a7be:	4770      	bx	lr
   8a7c0:	f04f 0000 	mov.w	r0, #0
   8a7c4:	4770      	bx	lr
   8a7c6:	bf00      	nop

0008a7c8 <__aeabi_uldivmod>:
   8a7c8:	b953      	cbnz	r3, 8a7e0 <__aeabi_uldivmod+0x18>
   8a7ca:	b94a      	cbnz	r2, 8a7e0 <__aeabi_uldivmod+0x18>
   8a7cc:	2900      	cmp	r1, #0
   8a7ce:	bf08      	it	eq
   8a7d0:	2800      	cmpeq	r0, #0
   8a7d2:	bf1c      	itt	ne
   8a7d4:	f04f 31ff 	movne.w	r1, #4294967295
   8a7d8:	f04f 30ff 	movne.w	r0, #4294967295
   8a7dc:	f000 b974 	b.w	8aac8 <__aeabi_idiv0>
   8a7e0:	f1ad 0c08 	sub.w	ip, sp, #8
   8a7e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8a7e8:	f000 f806 	bl	8a7f8 <__udivmoddi4>
   8a7ec:	f8dd e004 	ldr.w	lr, [sp, #4]
   8a7f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8a7f4:	b004      	add	sp, #16
   8a7f6:	4770      	bx	lr

0008a7f8 <__udivmoddi4>:
   8a7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8a7fc:	468c      	mov	ip, r1
   8a7fe:	4604      	mov	r4, r0
   8a800:	9e08      	ldr	r6, [sp, #32]
   8a802:	2b00      	cmp	r3, #0
   8a804:	f040 8086 	bne.w	8a914 <__udivmoddi4+0x11c>
   8a808:	428a      	cmp	r2, r1
   8a80a:	4615      	mov	r5, r2
   8a80c:	d948      	bls.n	8a8a0 <__udivmoddi4+0xa8>
   8a80e:	fab2 f282 	clz	r2, r2
   8a812:	b14a      	cbz	r2, 8a828 <__udivmoddi4+0x30>
   8a814:	f1c2 0720 	rsb	r7, r2, #32
   8a818:	fa01 f302 	lsl.w	r3, r1, r2
   8a81c:	fa20 f707 	lsr.w	r7, r0, r7
   8a820:	4095      	lsls	r5, r2
   8a822:	ea47 0c03 	orr.w	ip, r7, r3
   8a826:	4094      	lsls	r4, r2
   8a828:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   8a82c:	fbbc f7fe 	udiv	r7, ip, lr
   8a830:	fa1f f885 	uxth.w	r8, r5
   8a834:	fb0e c317 	mls	r3, lr, r7, ip
   8a838:	fb07 f908 	mul.w	r9, r7, r8
   8a83c:	0c21      	lsrs	r1, r4, #16
   8a83e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   8a842:	4599      	cmp	r9, r3
   8a844:	d909      	bls.n	8a85a <__udivmoddi4+0x62>
   8a846:	18eb      	adds	r3, r5, r3
   8a848:	f107 31ff 	add.w	r1, r7, #4294967295
   8a84c:	f080 80e1 	bcs.w	8aa12 <__udivmoddi4+0x21a>
   8a850:	4599      	cmp	r9, r3
   8a852:	f240 80de 	bls.w	8aa12 <__udivmoddi4+0x21a>
   8a856:	3f02      	subs	r7, #2
   8a858:	442b      	add	r3, r5
   8a85a:	eba3 0309 	sub.w	r3, r3, r9
   8a85e:	fbb3 f0fe 	udiv	r0, r3, lr
   8a862:	fb0e 3310 	mls	r3, lr, r0, r3
   8a866:	fb00 f108 	mul.w	r1, r0, r8
   8a86a:	b2a4      	uxth	r4, r4
   8a86c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   8a870:	42a1      	cmp	r1, r4
   8a872:	d909      	bls.n	8a888 <__udivmoddi4+0x90>
   8a874:	192c      	adds	r4, r5, r4
   8a876:	f100 33ff 	add.w	r3, r0, #4294967295
   8a87a:	f080 80c8 	bcs.w	8aa0e <__udivmoddi4+0x216>
   8a87e:	42a1      	cmp	r1, r4
   8a880:	f240 80c5 	bls.w	8aa0e <__udivmoddi4+0x216>
   8a884:	3802      	subs	r0, #2
   8a886:	442c      	add	r4, r5
   8a888:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   8a88c:	2700      	movs	r7, #0
   8a88e:	1a64      	subs	r4, r4, r1
   8a890:	b11e      	cbz	r6, 8a89a <__udivmoddi4+0xa2>
   8a892:	2300      	movs	r3, #0
   8a894:	40d4      	lsrs	r4, r2
   8a896:	e9c6 4300 	strd	r4, r3, [r6]
   8a89a:	4639      	mov	r1, r7
   8a89c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8a8a0:	2a00      	cmp	r2, #0
   8a8a2:	d054      	beq.n	8a94e <__udivmoddi4+0x156>
   8a8a4:	fab2 f282 	clz	r2, r2
   8a8a8:	2a00      	cmp	r2, #0
   8a8aa:	f040 80b4 	bne.w	8aa16 <__udivmoddi4+0x21e>
   8a8ae:	2701      	movs	r7, #1
   8a8b0:	1b49      	subs	r1, r1, r5
   8a8b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
   8a8b6:	fa1f f985 	uxth.w	r9, r5
   8a8ba:	fbb1 fef8 	udiv	lr, r1, r8
   8a8be:	fb08 111e 	mls	r1, r8, lr, r1
   8a8c2:	fb09 f00e 	mul.w	r0, r9, lr
   8a8c6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   8a8ca:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
   8a8ce:	4298      	cmp	r0, r3
   8a8d0:	d907      	bls.n	8a8e2 <__udivmoddi4+0xea>
   8a8d2:	18eb      	adds	r3, r5, r3
   8a8d4:	f10e 31ff 	add.w	r1, lr, #4294967295
   8a8d8:	d202      	bcs.n	8a8e0 <__udivmoddi4+0xe8>
   8a8da:	4298      	cmp	r0, r3
   8a8dc:	f200 80eb 	bhi.w	8aab6 <__udivmoddi4+0x2be>
   8a8e0:	468e      	mov	lr, r1
   8a8e2:	1a1b      	subs	r3, r3, r0
   8a8e4:	fbb3 f0f8 	udiv	r0, r3, r8
   8a8e8:	fb08 3310 	mls	r3, r8, r0, r3
   8a8ec:	fb09 f900 	mul.w	r9, r9, r0
   8a8f0:	b2a4      	uxth	r4, r4
   8a8f2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   8a8f6:	45a1      	cmp	r9, r4
   8a8f8:	d907      	bls.n	8a90a <__udivmoddi4+0x112>
   8a8fa:	192c      	adds	r4, r5, r4
   8a8fc:	f100 33ff 	add.w	r3, r0, #4294967295
   8a900:	d202      	bcs.n	8a908 <__udivmoddi4+0x110>
   8a902:	45a1      	cmp	r9, r4
   8a904:	f200 80db 	bhi.w	8aabe <__udivmoddi4+0x2c6>
   8a908:	4618      	mov	r0, r3
   8a90a:	eba4 0409 	sub.w	r4, r4, r9
   8a90e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
   8a912:	e7bd      	b.n	8a890 <__udivmoddi4+0x98>
   8a914:	428b      	cmp	r3, r1
   8a916:	d908      	bls.n	8a92a <__udivmoddi4+0x132>
   8a918:	2e00      	cmp	r6, #0
   8a91a:	d075      	beq.n	8aa08 <__udivmoddi4+0x210>
   8a91c:	2700      	movs	r7, #0
   8a91e:	e9c6 0100 	strd	r0, r1, [r6]
   8a922:	4638      	mov	r0, r7
   8a924:	4639      	mov	r1, r7
   8a926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8a92a:	fab3 f783 	clz	r7, r3
   8a92e:	b97f      	cbnz	r7, 8a950 <__udivmoddi4+0x158>
   8a930:	428b      	cmp	r3, r1
   8a932:	d302      	bcc.n	8a93a <__udivmoddi4+0x142>
   8a934:	4282      	cmp	r2, r0
   8a936:	f200 80bc 	bhi.w	8aab2 <__udivmoddi4+0x2ba>
   8a93a:	1a84      	subs	r4, r0, r2
   8a93c:	eb61 0303 	sbc.w	r3, r1, r3
   8a940:	2001      	movs	r0, #1
   8a942:	469c      	mov	ip, r3
   8a944:	2e00      	cmp	r6, #0
   8a946:	d0a8      	beq.n	8a89a <__udivmoddi4+0xa2>
   8a948:	e9c6 4c00 	strd	r4, ip, [r6]
   8a94c:	e7a5      	b.n	8a89a <__udivmoddi4+0xa2>
   8a94e:	deff      	udf	#255	; 0xff
   8a950:	f1c7 0520 	rsb	r5, r7, #32
   8a954:	40bb      	lsls	r3, r7
   8a956:	fa22 fc05 	lsr.w	ip, r2, r5
   8a95a:	ea4c 0c03 	orr.w	ip, ip, r3
   8a95e:	fa21 f405 	lsr.w	r4, r1, r5
   8a962:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   8a966:	fbb4 f9fe 	udiv	r9, r4, lr
   8a96a:	fa1f f88c 	uxth.w	r8, ip
   8a96e:	fb0e 4419 	mls	r4, lr, r9, r4
   8a972:	fa20 f305 	lsr.w	r3, r0, r5
   8a976:	40b9      	lsls	r1, r7
   8a978:	fb09 fa08 	mul.w	sl, r9, r8
   8a97c:	4319      	orrs	r1, r3
   8a97e:	0c0b      	lsrs	r3, r1, #16
   8a980:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   8a984:	45a2      	cmp	sl, r4
   8a986:	fa02 f207 	lsl.w	r2, r2, r7
   8a98a:	fa00 f307 	lsl.w	r3, r0, r7
   8a98e:	d90b      	bls.n	8a9a8 <__udivmoddi4+0x1b0>
   8a990:	eb1c 0404 	adds.w	r4, ip, r4
   8a994:	f109 30ff 	add.w	r0, r9, #4294967295
   8a998:	f080 8089 	bcs.w	8aaae <__udivmoddi4+0x2b6>
   8a99c:	45a2      	cmp	sl, r4
   8a99e:	f240 8086 	bls.w	8aaae <__udivmoddi4+0x2b6>
   8a9a2:	f1a9 0902 	sub.w	r9, r9, #2
   8a9a6:	4464      	add	r4, ip
   8a9a8:	eba4 040a 	sub.w	r4, r4, sl
   8a9ac:	fbb4 f0fe 	udiv	r0, r4, lr
   8a9b0:	fb0e 4410 	mls	r4, lr, r0, r4
   8a9b4:	fb00 fa08 	mul.w	sl, r0, r8
   8a9b8:	b289      	uxth	r1, r1
   8a9ba:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
   8a9be:	45a2      	cmp	sl, r4
   8a9c0:	d908      	bls.n	8a9d4 <__udivmoddi4+0x1dc>
   8a9c2:	eb1c 0404 	adds.w	r4, ip, r4
   8a9c6:	f100 31ff 	add.w	r1, r0, #4294967295
   8a9ca:	d26c      	bcs.n	8aaa6 <__udivmoddi4+0x2ae>
   8a9cc:	45a2      	cmp	sl, r4
   8a9ce:	d96a      	bls.n	8aaa6 <__udivmoddi4+0x2ae>
   8a9d0:	3802      	subs	r0, #2
   8a9d2:	4464      	add	r4, ip
   8a9d4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8a9d8:	fba0 8902 	umull	r8, r9, r0, r2
   8a9dc:	eba4 040a 	sub.w	r4, r4, sl
   8a9e0:	454c      	cmp	r4, r9
   8a9e2:	4641      	mov	r1, r8
   8a9e4:	46ce      	mov	lr, r9
   8a9e6:	d355      	bcc.n	8aa94 <__udivmoddi4+0x29c>
   8a9e8:	d052      	beq.n	8aa90 <__udivmoddi4+0x298>
   8a9ea:	2e00      	cmp	r6, #0
   8a9ec:	d06a      	beq.n	8aac4 <__udivmoddi4+0x2cc>
   8a9ee:	1a5a      	subs	r2, r3, r1
   8a9f0:	eb64 040e 	sbc.w	r4, r4, lr
   8a9f4:	fa04 f505 	lsl.w	r5, r4, r5
   8a9f8:	fa22 f307 	lsr.w	r3, r2, r7
   8a9fc:	40fc      	lsrs	r4, r7
   8a9fe:	431d      	orrs	r5, r3
   8aa00:	e9c6 5400 	strd	r5, r4, [r6]
   8aa04:	2700      	movs	r7, #0
   8aa06:	e748      	b.n	8a89a <__udivmoddi4+0xa2>
   8aa08:	4637      	mov	r7, r6
   8aa0a:	4630      	mov	r0, r6
   8aa0c:	e745      	b.n	8a89a <__udivmoddi4+0xa2>
   8aa0e:	4618      	mov	r0, r3
   8aa10:	e73a      	b.n	8a888 <__udivmoddi4+0x90>
   8aa12:	460f      	mov	r7, r1
   8aa14:	e721      	b.n	8a85a <__udivmoddi4+0x62>
   8aa16:	4095      	lsls	r5, r2
   8aa18:	f1c2 0320 	rsb	r3, r2, #32
   8aa1c:	fa21 f003 	lsr.w	r0, r1, r3
   8aa20:	ea4f 4815 	mov.w	r8, r5, lsr #16
   8aa24:	fbb0 f7f8 	udiv	r7, r0, r8
   8aa28:	fa1f f985 	uxth.w	r9, r5
   8aa2c:	fb08 0e17 	mls	lr, r8, r7, r0
   8aa30:	fa24 fc03 	lsr.w	ip, r4, r3
   8aa34:	4091      	lsls	r1, r2
   8aa36:	fb07 fa09 	mul.w	sl, r7, r9
   8aa3a:	ea4c 0101 	orr.w	r1, ip, r1
   8aa3e:	0c08      	lsrs	r0, r1, #16
   8aa40:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
   8aa44:	4582      	cmp	sl, r0
   8aa46:	fa04 f402 	lsl.w	r4, r4, r2
   8aa4a:	d907      	bls.n	8aa5c <__udivmoddi4+0x264>
   8aa4c:	1828      	adds	r0, r5, r0
   8aa4e:	f107 33ff 	add.w	r3, r7, #4294967295
   8aa52:	d22a      	bcs.n	8aaaa <__udivmoddi4+0x2b2>
   8aa54:	4582      	cmp	sl, r0
   8aa56:	d928      	bls.n	8aaaa <__udivmoddi4+0x2b2>
   8aa58:	3f02      	subs	r7, #2
   8aa5a:	4428      	add	r0, r5
   8aa5c:	eba0 000a 	sub.w	r0, r0, sl
   8aa60:	fbb0 fcf8 	udiv	ip, r0, r8
   8aa64:	fb08 001c 	mls	r0, r8, ip, r0
   8aa68:	fb0c f309 	mul.w	r3, ip, r9
   8aa6c:	b289      	uxth	r1, r1
   8aa6e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   8aa72:	428b      	cmp	r3, r1
   8aa74:	d908      	bls.n	8aa88 <__udivmoddi4+0x290>
   8aa76:	1869      	adds	r1, r5, r1
   8aa78:	f10c 30ff 	add.w	r0, ip, #4294967295
   8aa7c:	d211      	bcs.n	8aaa2 <__udivmoddi4+0x2aa>
   8aa7e:	428b      	cmp	r3, r1
   8aa80:	d90f      	bls.n	8aaa2 <__udivmoddi4+0x2aa>
   8aa82:	f1ac 0c02 	sub.w	ip, ip, #2
   8aa86:	4429      	add	r1, r5
   8aa88:	1ac9      	subs	r1, r1, r3
   8aa8a:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   8aa8e:	e714      	b.n	8a8ba <__udivmoddi4+0xc2>
   8aa90:	4543      	cmp	r3, r8
   8aa92:	d2aa      	bcs.n	8a9ea <__udivmoddi4+0x1f2>
   8aa94:	ebb8 0102 	subs.w	r1, r8, r2
   8aa98:	eb69 020c 	sbc.w	r2, r9, ip
   8aa9c:	3801      	subs	r0, #1
   8aa9e:	4696      	mov	lr, r2
   8aaa0:	e7a3      	b.n	8a9ea <__udivmoddi4+0x1f2>
   8aaa2:	4684      	mov	ip, r0
   8aaa4:	e7f0      	b.n	8aa88 <__udivmoddi4+0x290>
   8aaa6:	4608      	mov	r0, r1
   8aaa8:	e794      	b.n	8a9d4 <__udivmoddi4+0x1dc>
   8aaaa:	461f      	mov	r7, r3
   8aaac:	e7d6      	b.n	8aa5c <__udivmoddi4+0x264>
   8aaae:	4681      	mov	r9, r0
   8aab0:	e77a      	b.n	8a9a8 <__udivmoddi4+0x1b0>
   8aab2:	4638      	mov	r0, r7
   8aab4:	e746      	b.n	8a944 <__udivmoddi4+0x14c>
   8aab6:	f1ae 0e02 	sub.w	lr, lr, #2
   8aaba:	442b      	add	r3, r5
   8aabc:	e711      	b.n	8a8e2 <__udivmoddi4+0xea>
   8aabe:	3802      	subs	r0, #2
   8aac0:	442c      	add	r4, r5
   8aac2:	e722      	b.n	8a90a <__udivmoddi4+0x112>
   8aac4:	4637      	mov	r7, r6
   8aac6:	e6e8      	b.n	8a89a <__udivmoddi4+0xa2>

0008aac8 <__aeabi_idiv0>:
   8aac8:	4770      	bx	lr
   8aaca:	bf00      	nop
   8aacc:	78383025 	.word	0x78383025
   8aad0:	00000000 	.word	0x00000000
   8aad4:	00000000 	.word	0x00000000
   8aad8:	00000000 	.word	0x00000000
   8aadc:	aaaaaa00 	.word	0xaaaaaa00
   8aae0:	aaaaaaaa 	.word	0xaaaaaaaa
   8aae4:	eeeeeeaa 	.word	0xeeeeeeaa
   8aae8:	eeeeeeee 	.word	0xeeeeeeee
   8aaec:	fffffeee 	.word	0xfffffeee
   8aaf0:	ffffffff 	.word	0xffffffff
   8aaf4:	ffffffff 	.word	0xffffffff
   8aaf8:	dfbf7fff 	.word	0xdfbf7fff
   8aafc:	fdfbf7ef 	.word	0xfdfbf7ef
   8ab00:	dfbf7efc 	.word	0xdfbf7efc
   8ab04:	fdfbf7ef 	.word	0xfdfbf7ef
   8ab08:	0000007e 	.word	0x0000007e

0008ab0c <_global_impure_ptr>:
   8ab0c:	200003b0 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   8ab1c:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8ab2c:	66656463 00000000 33323130 37363534     cdef....01234567
   8ab3c:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8ab4c:	0000296c 00000030                       l)..0...

0008ab54 <blanks.7365>:
   8ab54:	20202020 20202020 20202020 20202020                     

0008ab64 <zeroes.7366>:
   8ab64:	30303030 30303030 30303030 30303030     0000000000000000
   8ab74:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8ab84:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   8ab94:	00000000                                ....

0008ab98 <__mprec_bigtens>:
   8ab98:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8aba8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8abb8:	7f73bf3c 75154fdd                       <.s..O.u

0008abc0 <__mprec_tens>:
   8abc0:	00000000 3ff00000 00000000 40240000     .......?......$@
   8abd0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8abe0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8abf0:	00000000 412e8480 00000000 416312d0     .......A......cA
   8ac00:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8ac10:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8ac20:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8ac30:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8ac40:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8ac50:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8ac60:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8ac70:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8ac80:	79d99db4 44ea7843                       ...yCx.D

0008ac88 <p05.6135>:
   8ac88:	00000005 00000019 0000007d              ........}...

0008ac94 <_ctype_>:
   8ac94:	20202000 20202020 28282020 20282828     .         ((((( 
   8aca4:	20202020 20202020 20202020 20202020                     
   8acb4:	10108820 10101010 10101010 10101010      ...............
   8acc4:	04040410 04040404 10040404 10101010     ................
   8acd4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8ace4:	01010101 01010101 01010101 10101010     ................
   8acf4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8ad04:	02020202 02020202 02020202 10101010     ................
   8ad14:	00000020 00000000 00000000 00000000      ...............
   8ad24:	00000000 00000000 00000000 00000000     ................
   8ad34:	00000000 00000000 00000000 00000000     ................
   8ad44:	00000000 00000000 00000000 00000000     ................
   8ad54:	00000000 00000000 00000000 00000000     ................
   8ad64:	00000000 00000000 00000000 00000000     ................
   8ad74:	00000000 00000000 00000000 00000000     ................
   8ad84:	00000000 00000000 00000000 00000000     ................
   8ad94:	00000000                                ....

0008ad98 <_init>:
   8ad98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ad9a:	bf00      	nop
   8ad9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8ad9e:	bc08      	pop	{r3}
   8ada0:	469e      	mov	lr, r3
   8ada2:	4770      	bx	lr

0008ada4 <__init_array_start>:
   8ada4:	00087841 	.word	0x00087841

0008ada8 <__frame_dummy_init_array_entry>:
   8ada8:	000800e1                                ....

0008adac <_fini>:
   8adac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8adae:	bf00      	nop
   8adb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8adb2:	bc08      	pop	{r3}
   8adb4:	469e      	mov	lr, r3
   8adb6:	4770      	bx	lr

0008adb8 <__fini_array_start>:
   8adb8:	000800bd 	.word	0x000800bd

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b480      	push	{r7}
20000002:	b089      	sub	sp, #36	; 0x24
20000004:	af00      	add	r7, sp, #0
20000006:	60f8      	str	r0, [r7, #12]
20000008:	60b9      	str	r1, [r7, #8]
2000000a:	607a      	str	r2, [r7, #4]
2000000c:	603b      	str	r3, [r7, #0]
#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000000e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20000012:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000014:	683b      	ldr	r3, [r7, #0]
20000016:	2b00      	cmp	r3, #0
20000018:	d101      	bne.n	2000001e <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
2000001a:	2302      	movs	r3, #2
2000001c:	e03c      	b.n	20000098 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000001e:	68fb      	ldr	r3, [r7, #12]
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000026:	68fb      	ldr	r3, [r7, #12]
20000028:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000002a:	68bb      	ldr	r3, [r7, #8]
2000002c:	b2db      	uxtb	r3, r3
2000002e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000032:	68fb      	ldr	r3, [r7, #12]
20000034:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000036:	68fb      	ldr	r3, [r7, #12]
20000038:	689b      	ldr	r3, [r3, #8]
2000003a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000003c:	697b      	ldr	r3, [r7, #20]
2000003e:	f003 0301 	and.w	r3, r3, #1
20000042:	2b01      	cmp	r3, #1
20000044:	d0f7      	beq.n	20000036 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000046:	2300      	movs	r3, #0
20000048:	61fb      	str	r3, [r7, #28]
2000004a:	e00c      	b.n	20000066 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000004c:	69fb      	ldr	r3, [r7, #28]
2000004e:	009b      	lsls	r3, r3, #2
20000050:	69ba      	ldr	r2, [r7, #24]
20000052:	441a      	add	r2, r3
20000054:	69fb      	ldr	r3, [r7, #28]
20000056:	009b      	lsls	r3, r3, #2
20000058:	6839      	ldr	r1, [r7, #0]
2000005a:	440b      	add	r3, r1
2000005c:	6812      	ldr	r2, [r2, #0]
2000005e:	601a      	str	r2, [r3, #0]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000060:	69fb      	ldr	r3, [r7, #28]
20000062:	3301      	adds	r3, #1
20000064:	61fb      	str	r3, [r7, #28]
20000066:	69fa      	ldr	r2, [r7, #28]
20000068:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000006a:	429a      	cmp	r2, r3
2000006c:	d3ee      	bcc.n	2000004c <efc_perform_read_sequence+0x4c>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	b2db      	uxtb	r3, r3
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000072:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000007a:	68fb      	ldr	r3, [r7, #12]
2000007c:	689b      	ldr	r3, [r3, #8]
2000007e:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	697b      	ldr	r3, [r7, #20]
20000082:	f003 0301 	and.w	r3, r3, #1
20000086:	2b01      	cmp	r3, #1
20000088:	d1f7      	bne.n	2000007a <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	681b      	ldr	r3, [r3, #0]
2000008e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
20000096:	2300      	movs	r3, #0
}
20000098:	4618      	mov	r0, r3
2000009a:	3724      	adds	r7, #36	; 0x24
2000009c:	46bd      	mov	sp, r7
2000009e:	bc80      	pop	{r7}
200000a0:	4770      	bx	lr

200000a2 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000a2:	b480      	push	{r7}
200000a4:	b083      	sub	sp, #12
200000a6:	af00      	add	r7, sp, #0
200000a8:	6078      	str	r0, [r7, #4]
200000aa:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	683a      	ldr	r2, [r7, #0]
200000b0:	601a      	str	r2, [r3, #0]
}
200000b2:	bf00      	nop
200000b4:	370c      	adds	r7, #12
200000b6:	46bd      	mov	sp, r7
200000b8:	bc80      	pop	{r7}
200000ba:	4770      	bx	lr

200000bc <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000bc:	b480      	push	{r7}
200000be:	b085      	sub	sp, #20
200000c0:	af00      	add	r7, sp, #0
200000c2:	6078      	str	r0, [r7, #4]
200000c4:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000c6:	687b      	ldr	r3, [r7, #4]
200000c8:	683a      	ldr	r2, [r7, #0]
200000ca:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	689b      	ldr	r3, [r3, #8]
200000d0:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000d2:	68fb      	ldr	r3, [r7, #12]
200000d4:	f003 0301 	and.w	r3, r3, #1
200000d8:	2b01      	cmp	r3, #1
200000da:	d1f7      	bne.n	200000cc <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000dc:	68fb      	ldr	r3, [r7, #12]
200000de:	f003 0306 	and.w	r3, r3, #6
}
200000e2:	4618      	mov	r0, r3
200000e4:	3714      	adds	r7, #20
200000e6:	46bd      	mov	sp, r7
200000e8:	bc80      	pop	{r7}
200000ea:	4770      	bx	lr

200000ec <SystemInit>:
{
200000ec:	b480      	push	{r7}
200000ee:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000f0:	4b2a      	ldr	r3, [pc, #168]	; (2000019c <SystemInit+0xb0>)
200000f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000f6:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000f8:	4b29      	ldr	r3, [pc, #164]	; (200001a0 <SystemInit+0xb4>)
200000fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000fe:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000100:	4b28      	ldr	r3, [pc, #160]	; (200001a4 <SystemInit+0xb8>)
20000102:	6a1b      	ldr	r3, [r3, #32]
20000104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20000108:	2b00      	cmp	r3, #0
2000010a:	d109      	bne.n	20000120 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000010c:	4b25      	ldr	r3, [pc, #148]	; (200001a4 <SystemInit+0xb8>)
2000010e:	4a26      	ldr	r2, [pc, #152]	; (200001a8 <SystemInit+0xbc>)
20000110:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000112:	bf00      	nop
20000114:	4b23      	ldr	r3, [pc, #140]	; (200001a4 <SystemInit+0xb8>)
20000116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000118:	f003 0301 	and.w	r3, r3, #1
2000011c:	2b00      	cmp	r3, #0
2000011e:	d0f9      	beq.n	20000114 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000120:	4b20      	ldr	r3, [pc, #128]	; (200001a4 <SystemInit+0xb8>)
20000122:	4a22      	ldr	r2, [pc, #136]	; (200001ac <SystemInit+0xc0>)
20000124:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000126:	bf00      	nop
20000128:	4b1e      	ldr	r3, [pc, #120]	; (200001a4 <SystemInit+0xb8>)
2000012a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000012c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000130:	2b00      	cmp	r3, #0
20000132:	d0f9      	beq.n	20000128 <SystemInit+0x3c>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000134:	4b1b      	ldr	r3, [pc, #108]	; (200001a4 <SystemInit+0xb8>)
20000136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000138:	f023 0303 	bic.w	r3, r3, #3
2000013c:	4a19      	ldr	r2, [pc, #100]	; (200001a4 <SystemInit+0xb8>)
2000013e:	f043 0301 	orr.w	r3, r3, #1
20000142:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000144:	bf00      	nop
20000146:	4b17      	ldr	r3, [pc, #92]	; (200001a4 <SystemInit+0xb8>)
20000148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000014a:	f003 0308 	and.w	r3, r3, #8
2000014e:	2b00      	cmp	r3, #0
20000150:	d0f9      	beq.n	20000146 <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000152:	4b14      	ldr	r3, [pc, #80]	; (200001a4 <SystemInit+0xb8>)
20000154:	4a16      	ldr	r2, [pc, #88]	; (200001b0 <SystemInit+0xc4>)
20000156:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000158:	bf00      	nop
2000015a:	4b12      	ldr	r3, [pc, #72]	; (200001a4 <SystemInit+0xb8>)
2000015c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000015e:	f003 0302 	and.w	r3, r3, #2
20000162:	2b00      	cmp	r3, #0
20000164:	d0f9      	beq.n	2000015a <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000166:	4b0f      	ldr	r3, [pc, #60]	; (200001a4 <SystemInit+0xb8>)
20000168:	2211      	movs	r2, #17
2000016a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000016c:	bf00      	nop
2000016e:	4b0d      	ldr	r3, [pc, #52]	; (200001a4 <SystemInit+0xb8>)
20000170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000172:	f003 0308 	and.w	r3, r3, #8
20000176:	2b00      	cmp	r3, #0
20000178:	d0f9      	beq.n	2000016e <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000017a:	4b0a      	ldr	r3, [pc, #40]	; (200001a4 <SystemInit+0xb8>)
2000017c:	2212      	movs	r2, #18
2000017e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000180:	bf00      	nop
20000182:	4b08      	ldr	r3, [pc, #32]	; (200001a4 <SystemInit+0xb8>)
20000184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000186:	f003 0308 	and.w	r3, r3, #8
2000018a:	2b00      	cmp	r3, #0
2000018c:	d0f9      	beq.n	20000182 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2000018e:	4b09      	ldr	r3, [pc, #36]	; (200001b4 <SystemInit+0xc8>)
20000190:	4a09      	ldr	r2, [pc, #36]	; (200001b8 <SystemInit+0xcc>)
20000192:	601a      	str	r2, [r3, #0]
}
20000194:	bf00      	nop
20000196:	46bd      	mov	sp, r7
20000198:	bc80      	pop	{r7}
2000019a:	4770      	bx	lr
2000019c:	400e0800 	.word	0x400e0800
200001a0:	400e0a00 	.word	0x400e0a00
200001a4:	400e0400 	.word	0x400e0400
200001a8:	00370809 	.word	0x00370809
200001ac:	01370809 	.word	0x01370809
200001b0:	200f3f01 	.word	0x200f3f01
200001b4:	200003a8 	.word	0x200003a8
200001b8:	05b8d800 	.word	0x05b8d800

200001bc <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200001bc:	b480      	push	{r7}
200001be:	b083      	sub	sp, #12
200001c0:	af00      	add	r7, sp, #0
200001c2:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200001c4:	687b      	ldr	r3, [r7, #4]
200001c6:	4a1f      	ldr	r2, [pc, #124]	; (20000244 <system_init_flash+0x88>)
200001c8:	4293      	cmp	r3, r2
200001ca:	d806      	bhi.n	200001da <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200001cc:	4b1e      	ldr	r3, [pc, #120]	; (20000248 <system_init_flash+0x8c>)
200001ce:	2200      	movs	r2, #0
200001d0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200001d2:	4b1e      	ldr	r3, [pc, #120]	; (2000024c <system_init_flash+0x90>)
200001d4:	2200      	movs	r2, #0
200001d6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
	}
}
200001d8:	e02e      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200001da:	687b      	ldr	r3, [r7, #4]
200001dc:	4a1c      	ldr	r2, [pc, #112]	; (20000250 <system_init_flash+0x94>)
200001de:	4293      	cmp	r3, r2
200001e0:	d808      	bhi.n	200001f4 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200001e2:	4b19      	ldr	r3, [pc, #100]	; (20000248 <system_init_flash+0x8c>)
200001e4:	f44f 7280 	mov.w	r2, #256	; 0x100
200001e8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200001ea:	4b18      	ldr	r3, [pc, #96]	; (2000024c <system_init_flash+0x90>)
200001ec:	f44f 7280 	mov.w	r2, #256	; 0x100
200001f0:	601a      	str	r2, [r3, #0]
}
200001f2:	e021      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200001f4:	687b      	ldr	r3, [r7, #4]
200001f6:	4a17      	ldr	r2, [pc, #92]	; (20000254 <system_init_flash+0x98>)
200001f8:	4293      	cmp	r3, r2
200001fa:	d808      	bhi.n	2000020e <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200001fc:	4b12      	ldr	r3, [pc, #72]	; (20000248 <system_init_flash+0x8c>)
200001fe:	f44f 7200 	mov.w	r2, #512	; 0x200
20000202:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000204:	4b11      	ldr	r3, [pc, #68]	; (2000024c <system_init_flash+0x90>)
20000206:	f44f 7200 	mov.w	r2, #512	; 0x200
2000020a:	601a      	str	r2, [r3, #0]
}
2000020c:	e014      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000020e:	687b      	ldr	r3, [r7, #4]
20000210:	4a11      	ldr	r2, [pc, #68]	; (20000258 <system_init_flash+0x9c>)
20000212:	4293      	cmp	r3, r2
20000214:	d808      	bhi.n	20000228 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000216:	4b0c      	ldr	r3, [pc, #48]	; (20000248 <system_init_flash+0x8c>)
20000218:	f44f 7240 	mov.w	r2, #768	; 0x300
2000021c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <system_init_flash+0x90>)
20000220:	f44f 7240 	mov.w	r2, #768	; 0x300
20000224:	601a      	str	r2, [r3, #0]
}
20000226:	e007      	b.n	20000238 <system_init_flash+0x7c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000228:	4b07      	ldr	r3, [pc, #28]	; (20000248 <system_init_flash+0x8c>)
2000022a:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000022e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000230:	4b06      	ldr	r3, [pc, #24]	; (2000024c <system_init_flash+0x90>)
20000232:	f44f 6280 	mov.w	r2, #1024	; 0x400
20000236:	601a      	str	r2, [r3, #0]
}
20000238:	bf00      	nop
2000023a:	370c      	adds	r7, #12
2000023c:	46bd      	mov	sp, r7
2000023e:	bc80      	pop	{r7}
20000240:	4770      	bx	lr
20000242:	bf00      	nop
20000244:	016e35ff 	.word	0x016e35ff
20000248:	400e0800 	.word	0x400e0800
2000024c:	400e0a00 	.word	0x400e0a00
20000250:	026259ff 	.word	0x026259ff
20000254:	044aa1ff 	.word	0x044aa1ff
20000258:	0501bcff 	.word	0x0501bcff

2000025c <usb_serial_number>:
2000025c:	30303030 30303030 30303030 44414544     000000000000DEAD
2000026c:	46454542 00000000 00000000 00000000     BEEF............
2000027c:	00000000                                ....

20000280 <pwr_list>:
20000280:	000808ad 000808cd 000808ed              ............

2000028c <main_b_vendor_enable>:
2000028c:	00000001                                ....

20000290 <xram>:
20000290:	60000000                                ...`

20000294 <udi_api_vendor>:
20000294:	00084015 00084055 00084071 000840c5     .@..U@..q@...@..
200002a4:	00000000                                ....

200002a8 <udc_string_desc_languageid>:
200002a8:	04090304                                ....

200002ac <udc_string_manufacturer_name>:
200002ac:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
200002bc:	636e4920 0000002e                        Inc....

200002c4 <udc_string_product_name>:
200002c4:	57796850 70736968 72657265 4253552d     PhyWhisperer-USB
200002d4:	00000000                                ....

200002d8 <udc_string_desc>:
200002d8:	00000300 00000000 00000000 00000000     ................
200002e8:	00000000 00000000 00000000 00000000     ................
200002f8:	00000000 00000000 00000000 00000000     ................
20000308:	00000000 00000000 00000000 00000000     ................
20000318:	                                         ..

2000031a <g_interrupt_enabled>:
2000031a:	                                         ..

2000031c <udc_device_desc>:
2000031c:	02000112 40000000 c6102b3e 02010100     .......@>+......
2000032c:	00000103                                ....

20000330 <udc_device_qual>:
20000330:	0200060a 40000000 00000001              .......@....

2000033c <udc_desc_fs>:
2000033c:	00200209 80000101 000409fa ffff0200     .. .............
2000034c:	050700ff 00400281 02050700 00004002     ......@......@..

2000035c <udc_desc_hs>:
2000035c:	00200209 80000101 000409fa ffff0200     .. .............
2000036c:	050700ff 02000281 02050700 00020002     ................

2000037c <udi_apis>:
2000037c:	20000294                                ... 

20000380 <udc_config_lsfs>:
20000380:	2000033c 2000037c                       <.. |.. 

20000388 <udc_config_hs>:
20000388:	2000035c 2000037c                       \.. |.. 

20000390 <udc_config>:
20000390:	2000031c 20000380 2000031c 20000330     ... ... ... 0.. 
200003a0:	20000388 00000000                       ... ....

200003a8 <SystemCoreClock>:
200003a8:	003d0900                                ..=.

200003ac <_impure_ptr>:
200003ac:	200003b0                                ... 

200003b0 <impure_data>:
200003b0:	00000000 2000069c 20000704 2000076c     ....... ... l.. 
200003c0:	00000000 00000000 00000000 00000000     ................
200003d0:	00000000 00000000 00000000 00000000     ................
200003e0:	00000000 00000000 00000000 00000000     ................
200003f0:	00000000 00000000 00000000 00000000     ................
20000400:	00000000 00000000 00000000 00000000     ................
20000410:	00000000 00000000 00000000 00000000     ................
20000420:	00000000 00000000 00000000 00000000     ................
20000430:	00000000 00000000 00000000 00000000     ................
20000440:	00000000 00000000 00000000 00000000     ................
20000450:	00000000 00000000 00000001 00000000     ................
20000460:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
20000470:	00000000 00000000 00000000 00000000     ................
20000480:	00000000 00000000 00000000 00000000     ................
20000490:	00000000 00000000 00000000 00000000     ................
200004a0:	00000000 00000000 00000000 00000000     ................
200004b0:	00000000 00000000 00000000 00000000     ................
200004c0:	00000000 00000000 00000000 00000000     ................
200004d0:	00000000 00000000 00000000 00000000     ................
200004e0:	00000000 00000000 00000000 00000000     ................
200004f0:	00000000 00000000 00000000 00000000     ................
20000500:	00000000 00000000 00000000 00000000     ................
20000510:	00000000 00000000 00000000 00000000     ................
20000520:	00000000 00000000 00000000 00000000     ................
20000530:	00000000 00000000 00000000 00000000     ................
20000540:	00000000 00000000 00000000 00000000     ................
20000550:	00000000 00000000 00000000 00000000     ................
20000560:	00000000 00000000 00000000 00000000     ................
20000570:	00000000 00000000 00000000 00000000     ................
20000580:	00000000 00000000 00000000 00000000     ................
20000590:	00000000 00000000 00000000 00000000     ................
200005a0:	00000000 00000000 00000000 00000000     ................
200005b0:	00000000 00000000 00000000 00000000     ................
200005c0:	00000000 00000000 00000000 00000000     ................
200005d0:	00000000 00000000 00000000 00000000     ................
200005e0:	00000000 00000000 00000000 00000000     ................
200005f0:	00000000 00000000 00000000 00000000     ................
20000600:	00000000 00000000 00000000 00000000     ................
20000610:	00000000 00000000 00000000 00000000     ................
20000620:	00000000 00000000 00000000 00000000     ................
20000630:	00000000 00000000 00000000 00000000     ................
20000640:	00000000 00000000 00000000 00000000     ................
20000650:	00000000 00000000 00000000 00000000     ................
20000660:	00000000 00000000 00000000 00000000     ................
20000670:	00000000 00000000 00000000 00000000     ................
20000680:	00000000 00000000 00000000 00000000     ................
20000690:	00000000 00000000 00000000 00000000     ................
200006a0:	00000000 00000000 00000000 00000000     ................
200006b0:	00000000 00000000 00000000 00000000     ................
200006c0:	00000000 00000000 00000000 00000000     ................
200006d0:	00000000 00000000 00000000 00000000     ................
200006e0:	00000000 00000000 00000000 00000000     ................
200006f0:	00000000 00000000 00000000 00000000     ................
20000700:	00000000 00000000 00000000 00000000     ................
20000710:	00000000 00000000 00000000 00000000     ................
20000720:	00000000 00000000 00000000 00000000     ................
20000730:	00000000 00000000 00000000 00000000     ................
20000740:	00000000 00000000 00000000 00000000     ................
20000750:	00000000 00000000 00000000 00000000     ................
20000760:	00000000 00000000 00000000 00000000     ................
20000770:	00000000 00000000 00000000 00000000     ................
20000780:	00000000 00000000 00000000 00000000     ................
20000790:	00000000 00000000 00000000 00000000     ................
200007a0:	00000000 00000000 00000000 00000000     ................
200007b0:	00000000 00000000 00000000 00000000     ................
200007c0:	00000000 00000000 00000000 00000000     ................
200007d0:	00000000 00000000                       ........

200007d8 <__atexit_recursive_mutex>:
200007d8:	2000132c                                ,.. 

200007dc <__global_locale>:
200007dc:	00000043 00000000 00000000 00000000     C...............
200007ec:	00000000 00000000 00000000 00000000     ................
200007fc:	00000043 00000000 00000000 00000000     C...............
2000080c:	00000000 00000000 00000000 00000000     ................
2000081c:	00000043 00000000 00000000 00000000     C...............
2000082c:	00000000 00000000 00000000 00000000     ................
2000083c:	00000043 00000000 00000000 00000000     C...............
2000084c:	00000000 00000000 00000000 00000000     ................
2000085c:	00000043 00000000 00000000 00000000     C...............
2000086c:	00000000 00000000 00000000 00000000     ................
2000087c:	00000043 00000000 00000000 00000000     C...............
2000088c:	00000000 00000000 00000000 00000000     ................
2000089c:	00000043 00000000 00000000 00000000     C...............
200008ac:	00000000 00000000 00000000 00000000     ................
200008bc:	00089da1 00089025 00000000 0008ac94     ....%...........
200008cc:	0008ab90 0008ab44 0008ab44 0008ab44     ....D...D...D...
200008dc:	0008ab44 0008ab44 0008ab44 0008ab44     D...D...D...D...
200008ec:	0008ab44 0008ab44 ffffffff ffffffff     D...D...........
200008fc:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
2000090c:	00000000 00000000 00000000 00000000     ................
2000091c:	00000000 00000000 53410000 00494943     ..........ASCII.
2000092c:	00000000 00000000 00000000 00000000     ................
2000093c:	00000000 00000000 00000000              ............

20000948 <__malloc_av_>:
20000948:	00000000 00000000 20000948 20000948     ........H.. H.. 
20000958:	20000950 20000950 20000958 20000958     P.. P.. X.. X.. 
20000968:	20000960 20000960 20000968 20000968     `.. `.. h.. h.. 
20000978:	20000970 20000970 20000978 20000978     p.. p.. x.. x.. 
20000988:	20000980 20000980 20000988 20000988     ... ... ... ... 
20000998:	20000990 20000990 20000998 20000998     ... ... ... ... 
200009a8:	200009a0 200009a0 200009a8 200009a8     ... ... ... ... 
200009b8:	200009b0 200009b0 200009b8 200009b8     ... ... ... ... 
200009c8:	200009c0 200009c0 200009c8 200009c8     ... ... ... ... 
200009d8:	200009d0 200009d0 200009d8 200009d8     ... ... ... ... 
200009e8:	200009e0 200009e0 200009e8 200009e8     ... ... ... ... 
200009f8:	200009f0 200009f0 200009f8 200009f8     ... ... ... ... 
20000a08:	20000a00 20000a00 20000a08 20000a08     ... ... ... ... 
20000a18:	20000a10 20000a10 20000a18 20000a18     ... ... ... ... 
20000a28:	20000a20 20000a20 20000a28 20000a28      ..  .. (.. (.. 
20000a38:	20000a30 20000a30 20000a38 20000a38     0.. 0.. 8.. 8.. 
20000a48:	20000a40 20000a40 20000a48 20000a48     @.. @.. H.. H.. 
20000a58:	20000a50 20000a50 20000a58 20000a58     P.. P.. X.. X.. 
20000a68:	20000a60 20000a60 20000a68 20000a68     `.. `.. h.. h.. 
20000a78:	20000a70 20000a70 20000a78 20000a78     p.. p.. x.. x.. 
20000a88:	20000a80 20000a80 20000a88 20000a88     ... ... ... ... 
20000a98:	20000a90 20000a90 20000a98 20000a98     ... ... ... ... 
20000aa8:	20000aa0 20000aa0 20000aa8 20000aa8     ... ... ... ... 
20000ab8:	20000ab0 20000ab0 20000ab8 20000ab8     ... ... ... ... 
20000ac8:	20000ac0 20000ac0 20000ac8 20000ac8     ... ... ... ... 
20000ad8:	20000ad0 20000ad0 20000ad8 20000ad8     ... ... ... ... 
20000ae8:	20000ae0 20000ae0 20000ae8 20000ae8     ... ... ... ... 
20000af8:	20000af0 20000af0 20000af8 20000af8     ... ... ... ... 
20000b08:	20000b00 20000b00 20000b08 20000b08     ... ... ... ... 
20000b18:	20000b10 20000b10 20000b18 20000b18     ... ... ... ... 
20000b28:	20000b20 20000b20 20000b28 20000b28      ..  .. (.. (.. 
20000b38:	20000b30 20000b30 20000b38 20000b38     0.. 0.. 8.. 8.. 
20000b48:	20000b40 20000b40 20000b48 20000b48     @.. @.. H.. H.. 
20000b58:	20000b50 20000b50 20000b58 20000b58     P.. P.. X.. X.. 
20000b68:	20000b60 20000b60 20000b68 20000b68     `.. `.. h.. h.. 
20000b78:	20000b70 20000b70 20000b78 20000b78     p.. p.. x.. x.. 
20000b88:	20000b80 20000b80 20000b88 20000b88     ... ... ... ... 
20000b98:	20000b90 20000b90 20000b98 20000b98     ... ... ... ... 
20000ba8:	20000ba0 20000ba0 20000ba8 20000ba8     ... ... ... ... 
20000bb8:	20000bb0 20000bb0 20000bb8 20000bb8     ... ... ... ... 
20000bc8:	20000bc0 20000bc0 20000bc8 20000bc8     ... ... ... ... 
20000bd8:	20000bd0 20000bd0 20000bd8 20000bd8     ... ... ... ... 
20000be8:	20000be0 20000be0 20000be8 20000be8     ... ... ... ... 
20000bf8:	20000bf0 20000bf0 20000bf8 20000bf8     ... ... ... ... 
20000c08:	20000c00 20000c00 20000c08 20000c08     ... ... ... ... 
20000c18:	20000c10 20000c10 20000c18 20000c18     ... ... ... ... 
20000c28:	20000c20 20000c20 20000c28 20000c28      ..  .. (.. (.. 
20000c38:	20000c30 20000c30 20000c38 20000c38     0.. 0.. 8.. 8.. 
20000c48:	20000c40 20000c40 20000c48 20000c48     @.. @.. H.. H.. 
20000c58:	20000c50 20000c50 20000c58 20000c58     P.. P.. X.. X.. 
20000c68:	20000c60 20000c60 20000c68 20000c68     `.. `.. h.. h.. 
20000c78:	20000c70 20000c70 20000c78 20000c78     p.. p.. x.. x.. 
20000c88:	20000c80 20000c80 20000c88 20000c88     ... ... ... ... 
20000c98:	20000c90 20000c90 20000c98 20000c98     ... ... ... ... 
20000ca8:	20000ca0 20000ca0 20000ca8 20000ca8     ... ... ... ... 
20000cb8:	20000cb0 20000cb0 20000cb8 20000cb8     ... ... ... ... 
20000cc8:	20000cc0 20000cc0 20000cc8 20000cc8     ... ... ... ... 
20000cd8:	20000cd0 20000cd0 20000cd8 20000cd8     ... ... ... ... 
20000ce8:	20000ce0 20000ce0 20000ce8 20000ce8     ... ... ... ... 
20000cf8:	20000cf0 20000cf0 20000cf8 20000cf8     ... ... ... ... 
20000d08:	20000d00 20000d00 20000d08 20000d08     ... ... ... ... 
20000d18:	20000d10 20000d10 20000d18 20000d18     ... ... ... ... 
20000d28:	20000d20 20000d20 20000d28 20000d28      ..  .. (.. (.. 
20000d38:	20000d30 20000d30 20000d38 20000d38     0.. 0.. 8.. 8.. 
20000d48:	20000d40 20000d40                       @.. @.. 

20000d50 <__malloc_sbrk_base>:
20000d50:	ffffffff                                ....

20000d54 <__malloc_trim_threshold>:
20000d54:	00020000                                ....
