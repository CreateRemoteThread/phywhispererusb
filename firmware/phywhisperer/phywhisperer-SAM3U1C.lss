
phywhisperer-SAM3U1C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005c24  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000007dc  20000000  00085c24  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000005c4  200007dc  00086400  000207dc  2**2
                  ALLOC
  3 .stack        00000400  20080000  20080000  00030000  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000207dc  2**0
                  CONTENTS, READONLY
  5 .comment      0000007f  00000000  00000000  00020805  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001e945  00000000  00000000  00020884  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003bac  00000000  00000000  0003f1c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000859e  00000000  00000000  00042d75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f90  00000000  00000000  0004b313  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e40  00000000  00000000  0004c2a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017e5f  00000000  00000000  0004d0e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001154f  00000000  00000000  00064f42  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00058be5  00000000  00000000  00076491  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004344  00000000  00000000  000cf078  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 04 08 20 ad 26 08 00 41 16 08 00 41 16 08 00     ... .&..A...A...
   80010:	41 16 08 00 41 16 08 00 41 16 08 00 00 00 00 00     A...A...A.......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 41 16 08 00     ............A...
   80030:	41 16 08 00 00 00 00 00 41 16 08 00 41 16 08 00     A.......A...A...
   80040:	41 16 08 00 41 16 08 00 41 16 08 00 41 16 08 00     A...A...A...A...
   80050:	41 16 08 00 41 16 08 00 41 16 08 00 41 16 08 00     A...A...A...A...
   80060:	41 16 08 00 41 16 08 00 31 1d 08 00 49 1d 08 00     A...A...1...I...
   80070:	41 16 08 00 41 16 08 00 41 16 08 00 41 16 08 00     A...A...A...A...
   80080:	41 16 08 00 41 16 08 00 41 16 08 00 41 16 08 00     A...A...A...A...
   80090:	41 16 08 00 41 16 08 00 41 16 08 00 41 16 08 00     A...A...A...A...
   800a0:	41 16 08 00 41 16 08 00 41 16 08 00 41 16 08 00     A...A...A...A...
   800b0:	41 16 08 00 59 3d 08 00 41 16 08 00                 A...Y=..A...

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	200007dc 	.word	0x200007dc
   800d8:	00000000 	.word	0x00000000
   800dc:	00085c24 	.word	0x00085c24

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	200007e0 	.word	0x200007e0
   800f8:	00085c24 	.word	0x00085c24

000800fc <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   800fc:	b580      	push	{r7, lr}
   800fe:	b082      	sub	sp, #8
   80100:	af00      	add	r7, sp, #0
   80102:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80104:	687b      	ldr	r3, [r7, #4]
   80106:	2b07      	cmp	r3, #7
   80108:	d82e      	bhi.n	80168 <osc_enable+0x6c>
   8010a:	a201      	add	r2, pc, #4	; (adr r2, 80110 <osc_enable+0x14>)
   8010c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80110:	00080167 	.word	0x00080167
   80114:	00080131 	.word	0x00080131
   80118:	00080139 	.word	0x00080139
   8011c:	00080141 	.word	0x00080141
   80120:	00080149 	.word	0x00080149
   80124:	00080151 	.word	0x00080151
   80128:	00080159 	.word	0x00080159
   8012c:	00080161 	.word	0x00080161
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80130:	2000      	movs	r0, #0
   80132:	4b0f      	ldr	r3, [pc, #60]	; (80170 <osc_enable+0x74>)
   80134:	4798      	blx	r3
		break;
   80136:	e017      	b.n	80168 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80138:	2001      	movs	r0, #1
   8013a:	4b0d      	ldr	r3, [pc, #52]	; (80170 <osc_enable+0x74>)
   8013c:	4798      	blx	r3
		break;
   8013e:	e013      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80140:	2000      	movs	r0, #0
   80142:	4b0c      	ldr	r3, [pc, #48]	; (80174 <osc_enable+0x78>)
   80144:	4798      	blx	r3
		break;
   80146:	e00f      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80148:	2010      	movs	r0, #16
   8014a:	4b0a      	ldr	r3, [pc, #40]	; (80174 <osc_enable+0x78>)
   8014c:	4798      	blx	r3
		break;
   8014e:	e00b      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80150:	2020      	movs	r0, #32
   80152:	4b08      	ldr	r3, [pc, #32]	; (80174 <osc_enable+0x78>)
   80154:	4798      	blx	r3
		break;
   80156:	e007      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80158:	203e      	movs	r0, #62	; 0x3e
   8015a:	4b07      	ldr	r3, [pc, #28]	; (80178 <osc_enable+0x7c>)
   8015c:	4798      	blx	r3
				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
		break;
   8015e:	e003      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_osc_bypass_main_xtal();
   80160:	4b06      	ldr	r3, [pc, #24]	; (8017c <osc_enable+0x80>)
   80162:	4798      	blx	r3
		break;
   80164:	e000      	b.n	80168 <osc_enable+0x6c>
		break;
   80166:	bf00      	nop
	}
}
   80168:	bf00      	nop
   8016a:	3708      	adds	r7, #8
   8016c:	46bd      	mov	sp, r7
   8016e:	bd80      	pop	{r7, pc}
   80170:	00081e61 	.word	0x00081e61
   80174:	00081ecd 	.word	0x00081ecd
   80178:	00081f41 	.word	0x00081f41
   8017c:	00081f8d 	.word	0x00081f8d

00080180 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   80180:	b580      	push	{r7, lr}
   80182:	b082      	sub	sp, #8
   80184:	af00      	add	r7, sp, #0
   80186:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80188:	687b      	ldr	r3, [r7, #4]
   8018a:	2b07      	cmp	r3, #7
   8018c:	d82f      	bhi.n	801ee <osc_is_ready+0x6e>
   8018e:	a201      	add	r2, pc, #4	; (adr r2, 80194 <osc_is_ready+0x14>)
   80190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80194:	000801b5 	.word	0x000801b5
   80198:	000801b9 	.word	0x000801b9
   8019c:	000801b9 	.word	0x000801b9
   801a0:	000801cb 	.word	0x000801cb
   801a4:	000801cb 	.word	0x000801cb
   801a8:	000801cb 	.word	0x000801cb
   801ac:	000801dd 	.word	0x000801dd
   801b0:	000801dd 	.word	0x000801dd
	case OSC_SLCK_32K_RC:
		return 1;
   801b4:	2301      	movs	r3, #1
   801b6:	e01b      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   801b8:	4b0f      	ldr	r3, [pc, #60]	; (801f8 <osc_is_ready+0x78>)
   801ba:	4798      	blx	r3
   801bc:	4603      	mov	r3, r0
   801be:	2b00      	cmp	r3, #0
   801c0:	bf14      	ite	ne
   801c2:	2301      	movne	r3, #1
   801c4:	2300      	moveq	r3, #0
   801c6:	b2db      	uxtb	r3, r3
   801c8:	e012      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();
   801ca:	4b0c      	ldr	r3, [pc, #48]	; (801fc <osc_is_ready+0x7c>)
   801cc:	4798      	blx	r3
   801ce:	4603      	mov	r3, r0
   801d0:	2b00      	cmp	r3, #0
   801d2:	bf14      	ite	ne
   801d4:	2301      	movne	r3, #1
   801d6:	2300      	moveq	r3, #0
   801d8:	b2db      	uxtb	r3, r3
   801da:	e009      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   801dc:	4b08      	ldr	r3, [pc, #32]	; (80200 <osc_is_ready+0x80>)
   801de:	4798      	blx	r3
   801e0:	4603      	mov	r3, r0
   801e2:	2b00      	cmp	r3, #0
   801e4:	bf14      	ite	ne
   801e6:	2301      	movne	r3, #1
   801e8:	2300      	moveq	r3, #0
   801ea:	b2db      	uxtb	r3, r3
   801ec:	e000      	b.n	801f0 <osc_is_ready+0x70>
	}

	return 0;
   801ee:	2300      	movs	r3, #0
}
   801f0:	4618      	mov	r0, r3
   801f2:	3708      	adds	r7, #8
   801f4:	46bd      	mov	sp, r7
   801f6:	bd80      	pop	{r7, pc}
   801f8:	00081e99 	.word	0x00081e99
   801fc:	00081f29 	.word	0x00081f29
   80200:	00081fd9 	.word	0x00081fd9

00080204 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80204:	b480      	push	{r7}
   80206:	b083      	sub	sp, #12
   80208:	af00      	add	r7, sp, #0
   8020a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8020c:	687b      	ldr	r3, [r7, #4]
   8020e:	2b07      	cmp	r3, #7
   80210:	d823      	bhi.n	8025a <osc_get_rate+0x56>
   80212:	a201      	add	r2, pc, #4	; (adr r2, 80218 <osc_get_rate+0x14>)
   80214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80218:	00080239 	.word	0x00080239
   8021c:	0008023f 	.word	0x0008023f
   80220:	00080243 	.word	0x00080243
   80224:	00080247 	.word	0x00080247
   80228:	0008024b 	.word	0x0008024b
   8022c:	0008024f 	.word	0x0008024f
   80230:	00080253 	.word	0x00080253
   80234:	00080257 	.word	0x00080257
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80238:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8023c:	e00e      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8023e:	2300      	movs	r3, #0
   80240:	e00c      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80242:	2300      	movs	r3, #0
   80244:	e00a      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80246:	4b08      	ldr	r3, [pc, #32]	; (80268 <osc_get_rate+0x64>)
   80248:	e008      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8024a:	4b08      	ldr	r3, [pc, #32]	; (8026c <osc_get_rate+0x68>)
   8024c:	e006      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8024e:	4b08      	ldr	r3, [pc, #32]	; (80270 <osc_get_rate+0x6c>)
   80250:	e004      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80252:	4b07      	ldr	r3, [pc, #28]	; (80270 <osc_get_rate+0x6c>)
   80254:	e002      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80256:	4b06      	ldr	r3, [pc, #24]	; (80270 <osc_get_rate+0x6c>)
   80258:	e000      	b.n	8025c <osc_get_rate+0x58>
	}

	return 0;
   8025a:	2300      	movs	r3, #0
}
   8025c:	4618      	mov	r0, r3
   8025e:	370c      	adds	r7, #12
   80260:	46bd      	mov	sp, r7
   80262:	bc80      	pop	{r7}
   80264:	4770      	bx	lr
   80266:	bf00      	nop
   80268:	003d0900 	.word	0x003d0900
   8026c:	007a1200 	.word	0x007a1200
   80270:	00b71b00 	.word	0x00b71b00

00080274 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   80274:	b580      	push	{r7, lr}
   80276:	b082      	sub	sp, #8
   80278:	af00      	add	r7, sp, #0
   8027a:	4603      	mov	r3, r0
   8027c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8027e:	bf00      	nop
   80280:	79fb      	ldrb	r3, [r7, #7]
   80282:	4618      	mov	r0, r3
   80284:	4b05      	ldr	r3, [pc, #20]	; (8029c <osc_wait_ready+0x28>)
   80286:	4798      	blx	r3
   80288:	4603      	mov	r3, r0
   8028a:	f083 0301 	eor.w	r3, r3, #1
   8028e:	b2db      	uxtb	r3, r3
   80290:	2b00      	cmp	r3, #0
   80292:	d1f5      	bne.n	80280 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   80294:	bf00      	nop
   80296:	3708      	adds	r7, #8
   80298:	46bd      	mov	sp, r7
   8029a:	bd80      	pop	{r7, pc}
   8029c:	00080181 	.word	0x00080181

000802a0 <pll_config_init>:
 *       hardware mul+1 is hidden in this implementation. Use mul as mul
 *       effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802a0:	b580      	push	{r7, lr}
   802a2:	b086      	sub	sp, #24
   802a4:	af00      	add	r7, sp, #0
   802a6:	60f8      	str	r0, [r7, #12]
   802a8:	607a      	str	r2, [r7, #4]
   802aa:	603b      	str	r3, [r7, #0]
   802ac:	460b      	mov	r3, r1
   802ae:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802b0:	687b      	ldr	r3, [r7, #4]
   802b2:	2b00      	cmp	r3, #0
   802b4:	d107      	bne.n	802c6 <pll_config_init+0x26>
   802b6:	683b      	ldr	r3, [r7, #0]
   802b8:	2b00      	cmp	r3, #0
   802ba:	d104      	bne.n	802c6 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   802bc:	68fb      	ldr	r3, [r7, #12]
   802be:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   802c2:	601a      	str	r2, [r3, #0]
   802c4:	e019      	b.n	802fa <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   802c6:	7afb      	ldrb	r3, [r7, #11]
   802c8:	4618      	mov	r0, r3
   802ca:	4b0e      	ldr	r3, [pc, #56]	; (80304 <pll_config_init+0x64>)
   802cc:	4798      	blx	r3
   802ce:	4602      	mov	r2, r0
   802d0:	687b      	ldr	r3, [r7, #4]
   802d2:	fbb2 f3f3 	udiv	r3, r2, r3
   802d6:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   802d8:	697b      	ldr	r3, [r7, #20]
   802da:	683a      	ldr	r2, [r7, #0]
   802dc:	fb02 f303 	mul.w	r3, r2, r3
   802e0:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802e2:	683b      	ldr	r3, [r7, #0]
   802e4:	3b01      	subs	r3, #1
   802e6:	041a      	lsls	r2, r3, #16
   802e8:	4b07      	ldr	r3, [pc, #28]	; (80308 <pll_config_init+0x68>)
   802ea:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802ec:	687a      	ldr	r2, [r7, #4]
   802ee:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802f0:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802f2:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802f6:	68fb      	ldr	r3, [r7, #12]
   802f8:	601a      	str	r2, [r3, #0]
			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
   802fa:	bf00      	nop
   802fc:	3718      	adds	r7, #24
   802fe:	46bd      	mov	sp, r7
   80300:	bd80      	pop	{r7, pc}
   80302:	bf00      	nop
   80304:	00080205 	.word	0x00080205
   80308:	07ff0000 	.word	0x07ff0000

0008030c <pll_enable>:
	}
}

static inline void pll_enable(const struct pll_config *p_cfg,
		uint32_t ul_pll_id)
{
   8030c:	b580      	push	{r7, lr}
   8030e:	b082      	sub	sp, #8
   80310:	af00      	add	r7, sp, #0
   80312:	6078      	str	r0, [r7, #4]
   80314:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80316:	683b      	ldr	r3, [r7, #0]
   80318:	2b00      	cmp	r3, #0
   8031a:	d108      	bne.n	8032e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   8031c:	4b09      	ldr	r3, [pc, #36]	; (80344 <pll_enable+0x38>)
   8031e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80320:	687b      	ldr	r3, [r7, #4]
   80322:	681b      	ldr	r3, [r3, #0]
   80324:	4a08      	ldr	r2, [pc, #32]	; (80348 <pll_enable+0x3c>)
   80326:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8032a:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   8032c:	e005      	b.n	8033a <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8032e:	687b      	ldr	r3, [r7, #4]
   80330:	681b      	ldr	r3, [r3, #0]
   80332:	4a05      	ldr	r2, [pc, #20]	; (80348 <pll_enable+0x3c>)
   80334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80338:	61d3      	str	r3, [r2, #28]
}
   8033a:	bf00      	nop
   8033c:	3708      	adds	r7, #8
   8033e:	46bd      	mov	sp, r7
   80340:	bd80      	pop	{r7, pc}
   80342:	bf00      	nop
   80344:	00082049 	.word	0x00082049
   80348:	400e0400 	.word	0x400e0400

0008034c <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   8034c:	b580      	push	{r7, lr}
   8034e:	b082      	sub	sp, #8
   80350:	af00      	add	r7, sp, #0
   80352:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80354:	687b      	ldr	r3, [r7, #4]
   80356:	2b00      	cmp	r3, #0
   80358:	d103      	bne.n	80362 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8035a:	4b05      	ldr	r3, [pc, #20]	; (80370 <pll_is_locked+0x24>)
   8035c:	4798      	blx	r3
   8035e:	4603      	mov	r3, r0
   80360:	e002      	b.n	80368 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   80362:	4b04      	ldr	r3, [pc, #16]	; (80374 <pll_is_locked+0x28>)
   80364:	4798      	blx	r3
   80366:	4603      	mov	r3, r0
	}
}
   80368:	4618      	mov	r0, r3
   8036a:	3708      	adds	r7, #8
   8036c:	46bd      	mov	sp, r7
   8036e:	bd80      	pop	{r7, pc}
   80370:	00082061 	.word	0x00082061
   80374:	00082095 	.word	0x00082095

00080378 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   80378:	b580      	push	{r7, lr}
   8037a:	b082      	sub	sp, #8
   8037c:	af00      	add	r7, sp, #0
   8037e:	4603      	mov	r3, r0
   80380:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80382:	79fb      	ldrb	r3, [r7, #7]
   80384:	3b03      	subs	r3, #3
   80386:	2b04      	cmp	r3, #4
   80388:	d808      	bhi.n	8039c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8038a:	79fb      	ldrb	r3, [r7, #7]
   8038c:	4618      	mov	r0, r3
   8038e:	4b06      	ldr	r3, [pc, #24]	; (803a8 <pll_enable_source+0x30>)
   80390:	4798      	blx	r3
		osc_wait_ready(e_src);
   80392:	79fb      	ldrb	r3, [r7, #7]
   80394:	4618      	mov	r0, r3
   80396:	4b05      	ldr	r3, [pc, #20]	; (803ac <pll_enable_source+0x34>)
   80398:	4798      	blx	r3
		break;
   8039a:	e000      	b.n	8039e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   8039c:	bf00      	nop
	}
}
   8039e:	bf00      	nop
   803a0:	3708      	adds	r7, #8
   803a2:	46bd      	mov	sp, r7
   803a4:	bd80      	pop	{r7, pc}
   803a6:	bf00      	nop
   803a8:	000800fd 	.word	0x000800fd
   803ac:	00080275 	.word	0x00080275

000803b0 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int ul_pll_id)
{
   803b0:	b590      	push	{r4, r7, lr}
   803b2:	b085      	sub	sp, #20
   803b4:	af00      	add	r7, sp, #0
   803b6:	6078      	str	r0, [r7, #4]
	struct pll_config pllcfg;

	if (pll_is_locked(ul_pll_id)) {
   803b8:	6878      	ldr	r0, [r7, #4]
   803ba:	4b21      	ldr	r3, [pc, #132]	; (80440 <pll_enable_config_defaults+0x90>)
   803bc:	4798      	blx	r3
   803be:	4603      	mov	r3, r0
   803c0:	2b00      	cmp	r3, #0
   803c2:	d138      	bne.n	80436 <pll_enable_config_defaults+0x86>
		return; // Pll already running
	}
	switch (ul_pll_id) {
   803c4:	687b      	ldr	r3, [r7, #4]
   803c6:	2b00      	cmp	r3, #0
   803c8:	d002      	beq.n	803d0 <pll_enable_config_defaults+0x20>
   803ca:	2b01      	cmp	r3, #1
   803cc:	d015      	beq.n	803fa <pll_enable_config_defaults+0x4a>
				CONFIG_PLL1_MUL);
		break;
#endif
	default:
		Assert(false);
		break;
   803ce:	e024      	b.n	8041a <pll_enable_config_defaults+0x6a>
		pll_enable_source(CONFIG_PLL0_SOURCE);
   803d0:	2006      	movs	r0, #6
   803d2:	4b1c      	ldr	r3, [pc, #112]	; (80444 <pll_enable_config_defaults+0x94>)
   803d4:	4798      	blx	r3
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   803d6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   803da:	4b1b      	ldr	r3, [pc, #108]	; (80448 <pll_enable_config_defaults+0x98>)
   803dc:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   803de:	bf00      	nop
   803e0:	4b1a      	ldr	r3, [pc, #104]	; (8044c <pll_enable_config_defaults+0x9c>)
   803e2:	4798      	blx	r3
   803e4:	4603      	mov	r3, r0
   803e6:	2b00      	cmp	r3, #0
   803e8:	d0fa      	beq.n	803e0 <pll_enable_config_defaults+0x30>
		pll_config_init(&pllcfg,
   803ea:	f107 000c 	add.w	r0, r7, #12
   803ee:	2310      	movs	r3, #16
   803f0:	2201      	movs	r2, #1
   803f2:	2106      	movs	r1, #6
   803f4:	4c16      	ldr	r4, [pc, #88]	; (80450 <pll_enable_config_defaults+0xa0>)
   803f6:	47a0      	blx	r4
		break;
   803f8:	e00f      	b.n	8041a <pll_enable_config_defaults+0x6a>
		if (pmc_osc_is_bypassed_main_xtal()) {
   803fa:	4b16      	ldr	r3, [pc, #88]	; (80454 <pll_enable_config_defaults+0xa4>)
   803fc:	4798      	blx	r3
   803fe:	4603      	mov	r3, r0
   80400:	2b00      	cmp	r3, #0
   80402:	d102      	bne.n	8040a <pll_enable_config_defaults+0x5a>
			pll_enable_source(CONFIG_PLL1_SOURCE);
   80404:	2006      	movs	r0, #6
   80406:	4b0f      	ldr	r3, [pc, #60]	; (80444 <pll_enable_config_defaults+0x94>)
   80408:	4798      	blx	r3
		pll_config_init(&pllcfg,
   8040a:	f107 000c 	add.w	r0, r7, #12
   8040e:	2300      	movs	r3, #0
   80410:	2200      	movs	r2, #0
   80412:	2106      	movs	r1, #6
   80414:	4c0e      	ldr	r4, [pc, #56]	; (80450 <pll_enable_config_defaults+0xa0>)
   80416:	47a0      	blx	r4
		break;
   80418:	bf00      	nop
	}
	pll_enable(&pllcfg, ul_pll_id);
   8041a:	f107 030c 	add.w	r3, r7, #12
   8041e:	6879      	ldr	r1, [r7, #4]
   80420:	4618      	mov	r0, r3
   80422:	4b0d      	ldr	r3, [pc, #52]	; (80458 <pll_enable_config_defaults+0xa8>)
   80424:	4798      	blx	r3
	while (!pll_is_locked(ul_pll_id));
   80426:	bf00      	nop
   80428:	6878      	ldr	r0, [r7, #4]
   8042a:	4b05      	ldr	r3, [pc, #20]	; (80440 <pll_enable_config_defaults+0x90>)
   8042c:	4798      	blx	r3
   8042e:	4603      	mov	r3, r0
   80430:	2b00      	cmp	r3, #0
   80432:	d0f9      	beq.n	80428 <pll_enable_config_defaults+0x78>
   80434:	e000      	b.n	80438 <pll_enable_config_defaults+0x88>
		return; // Pll already running
   80436:	bf00      	nop
}
   80438:	3714      	adds	r7, #20
   8043a:	46bd      	mov	sp, r7
   8043c:	bd90      	pop	{r4, r7, pc}
   8043e:	bf00      	nop
   80440:	0008034d 	.word	0x0008034d
   80444:	00080379 	.word	0x00080379
   80448:	00082009 	.word	0x00082009
   8044c:	00081ff1 	.word	0x00081ff1
   80450:	000802a1 	.word	0x000802a1
   80454:	00081fc1 	.word	0x00081fc1
   80458:	0008030d 	.word	0x0008030d

0008045c <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
   8045c:	b480      	push	{r7}
   8045e:	b08d      	sub	sp, #52	; 0x34
   80460:	af00      	add	r7, sp, #0
   80462:	6078      	str	r0, [r7, #4]
   80464:	6039      	str	r1, [r7, #0]
   80466:	687b      	ldr	r3, [r7, #4]
   80468:	62fb      	str	r3, [r7, #44]	; 0x2c
   8046a:	683b      	ldr	r3, [r7, #0]
   8046c:	62bb      	str	r3, [r7, #40]	; 0x28
   8046e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80470:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   80472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80474:	095a      	lsrs	r2, r3, #5
   80476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80478:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   8047a:	6a3b      	ldr	r3, [r7, #32]
   8047c:	f003 031f 	and.w	r3, r3, #31
   80480:	2101      	movs	r1, #1
   80482:	fa01 f303 	lsl.w	r3, r1, r3
   80486:	61fa      	str	r2, [r7, #28]
   80488:	61bb      	str	r3, [r7, #24]
   8048a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8048c:	617b      	str	r3, [r7, #20]
   8048e:	69fb      	ldr	r3, [r7, #28]
   80490:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80492:	693b      	ldr	r3, [r7, #16]
   80494:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80498:	f203 7306 	addw	r3, r3, #1798	; 0x706
   8049c:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
   8049e:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
   804a0:	697b      	ldr	r3, [r7, #20]
   804a2:	f003 0308 	and.w	r3, r3, #8
   804a6:	2b00      	cmp	r3, #0
   804a8:	d003      	beq.n	804b2 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   804aa:	68fb      	ldr	r3, [r7, #12]
   804ac:	69ba      	ldr	r2, [r7, #24]
   804ae:	665a      	str	r2, [r3, #100]	; 0x64
   804b0:	e002      	b.n	804b8 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
   804b2:	68fb      	ldr	r3, [r7, #12]
   804b4:	69ba      	ldr	r2, [r7, #24]
   804b6:	661a      	str	r2, [r3, #96]	; 0x60
	} else {
		base->PIO_PPDDR = mask;
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   804b8:	697b      	ldr	r3, [r7, #20]
   804ba:	f003 0320 	and.w	r3, r3, #32
   804be:	2b00      	cmp	r3, #0
   804c0:	d003      	beq.n	804ca <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   804c2:	68fb      	ldr	r3, [r7, #12]
   804c4:	69ba      	ldr	r2, [r7, #24]
   804c6:	651a      	str	r2, [r3, #80]	; 0x50
   804c8:	e002      	b.n	804d0 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_MDDR = mask;
   804ca:	68fb      	ldr	r3, [r7, #12]
   804cc:	69ba      	ldr	r2, [r7, #24]
   804ce:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   804d0:	697b      	ldr	r3, [r7, #20]
   804d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   804d6:	2b00      	cmp	r3, #0
   804d8:	d003      	beq.n	804e2 <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   804da:	68fb      	ldr	r3, [r7, #12]
   804dc:	69ba      	ldr	r2, [r7, #24]
   804de:	621a      	str	r2, [r3, #32]
   804e0:	e002      	b.n	804e8 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_IFDR = mask;
   804e2:	68fb      	ldr	r3, [r7, #12]
   804e4:	69ba      	ldr	r2, [r7, #24]
   804e6:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
   804e8:	697b      	ldr	r3, [r7, #20]
   804ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
   804ee:	2b00      	cmp	r3, #0
   804f0:	d004      	beq.n	804fc <ioport_set_pin_mode+0xa0>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   804f2:	68fb      	ldr	r3, [r7, #12]
   804f4:	69ba      	ldr	r2, [r7, #24]
   804f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   804fa:	e003      	b.n	80504 <ioport_set_pin_mode+0xa8>
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   804fc:	68fb      	ldr	r3, [r7, #12]
   804fe:	69ba      	ldr	r2, [r7, #24]
   80500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_IFSCDR = mask;
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
   80504:	697b      	ldr	r3, [r7, #20]
   80506:	f003 0301 	and.w	r3, r3, #1
   8050a:	2b00      	cmp	r3, #0
   8050c:	d006      	beq.n	8051c <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   8050e:	68fb      	ldr	r3, [r7, #12]
   80510:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80512:	69bb      	ldr	r3, [r7, #24]
   80514:	431a      	orrs	r2, r3
   80516:	68fb      	ldr	r3, [r7, #12]
   80518:	671a      	str	r2, [r3, #112]	; 0x70
	arch_ioport_set_pin_mode(pin, mode);
}
   8051a:	e006      	b.n	8052a <ioport_set_pin_mode+0xce>
	} else {
		base->PIO_ABSR &= ~mask;
   8051c:	68fb      	ldr	r3, [r7, #12]
   8051e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80520:	69bb      	ldr	r3, [r7, #24]
   80522:	43db      	mvns	r3, r3
   80524:	401a      	ands	r2, r3
   80526:	68fb      	ldr	r3, [r7, #12]
   80528:	671a      	str	r2, [r3, #112]	; 0x70
   8052a:	bf00      	nop
   8052c:	3734      	adds	r7, #52	; 0x34
   8052e:	46bd      	mov	sp, r7
   80530:	bc80      	pop	{r7}
   80532:	4770      	bx	lr

00080534 <sleepmgr_sleep>:
#endif /* CONFIG_SLEEPMGR_ENABLE */
//! @}


static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
   80534:	b580      	push	{r7, lr}
   80536:	b082      	sub	sp, #8
   80538:	af00      	add	r7, sp, #0
   8053a:	4603      	mov	r3, r0
   8053c:	71fb      	strb	r3, [r7, #7]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8053e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80540:	f3bf 8f5f 	dmb	sy
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
   80544:	4b05      	ldr	r3, [pc, #20]	; (8055c <sleepmgr_sleep+0x28>)
   80546:	2200      	movs	r2, #0
   80548:	701a      	strb	r2, [r3, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
   8054a:	79fb      	ldrb	r3, [r7, #7]
   8054c:	4618      	mov	r0, r3
   8054e:	4b04      	ldr	r3, [pc, #16]	; (80560 <sleepmgr_sleep+0x2c>)
   80550:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
   80552:	bf00      	nop
   80554:	3708      	adds	r7, #8
   80556:	46bd      	mov	sp, r7
   80558:	bd80      	pop	{r7, pc}
   8055a:	bf00      	nop
   8055c:	20000294 	.word	0x20000294
   80560:	000821ed 	.word	0x000821ed

00080564 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
   80564:	b480      	push	{r7}
   80566:	b083      	sub	sp, #12
   80568:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   8056a:	2300      	movs	r3, #0
   8056c:	71fb      	strb	r3, [r7, #7]
   8056e:	e006      	b.n	8057e <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
   80570:	79fb      	ldrb	r3, [r7, #7]
   80572:	4a08      	ldr	r2, [pc, #32]	; (80594 <sleepmgr_init+0x30>)
   80574:	2100      	movs	r1, #0
   80576:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   80578:	79fb      	ldrb	r3, [r7, #7]
   8057a:	3301      	adds	r3, #1
   8057c:	71fb      	strb	r3, [r7, #7]
   8057e:	79fb      	ldrb	r3, [r7, #7]
   80580:	2b04      	cmp	r3, #4
   80582:	d9f5      	bls.n	80570 <sleepmgr_init+0xc>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   80584:	4b03      	ldr	r3, [pc, #12]	; (80594 <sleepmgr_init+0x30>)
   80586:	2201      	movs	r2, #1
   80588:	715a      	strb	r2, [r3, #5]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   8058a:	bf00      	nop
   8058c:	370c      	adds	r7, #12
   8058e:	46bd      	mov	sp, r7
   80590:	bc80      	pop	{r7}
   80592:	4770      	bx	lr
   80594:	20000d5c 	.word	0x20000d5c

00080598 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
   80598:	b480      	push	{r7}
   8059a:	b083      	sub	sp, #12
   8059c:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
   8059e:	2300      	movs	r3, #0
   805a0:	71fb      	strb	r3, [r7, #7]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
   805a2:	4b09      	ldr	r3, [pc, #36]	; (805c8 <sleepmgr_get_sleep_mode+0x30>)
   805a4:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
   805a6:	e005      	b.n	805b4 <sleepmgr_get_sleep_mode+0x1c>
		lock_ptr++;
   805a8:	683b      	ldr	r3, [r7, #0]
   805aa:	3301      	adds	r3, #1
   805ac:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
   805ae:	79fb      	ldrb	r3, [r7, #7]
   805b0:	3301      	adds	r3, #1
   805b2:	71fb      	strb	r3, [r7, #7]
	while (!(*lock_ptr)) {
   805b4:	683b      	ldr	r3, [r7, #0]
   805b6:	781b      	ldrb	r3, [r3, #0]
   805b8:	2b00      	cmp	r3, #0
   805ba:	d0f5      	beq.n	805a8 <sleepmgr_get_sleep_mode+0x10>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
   805bc:	79fb      	ldrb	r3, [r7, #7]
}
   805be:	4618      	mov	r0, r3
   805c0:	370c      	adds	r7, #12
   805c2:	46bd      	mov	sp, r7
   805c4:	bc80      	pop	{r7}
   805c6:	4770      	bx	lr
   805c8:	20000d5c 	.word	0x20000d5c

000805cc <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
   805cc:	b580      	push	{r7, lr}
   805ce:	b082      	sub	sp, #8
   805d0:	af00      	add	r7, sp, #0
   805d2:	b672      	cpsid	i
   805d4:	f3bf 8f5f 	dmb	sy
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
   805d8:	4b0b      	ldr	r3, [pc, #44]	; (80608 <sleepmgr_enter_sleep+0x3c>)
   805da:	2200      	movs	r2, #0
   805dc:	701a      	strb	r2, [r3, #0]

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
   805de:	4b0b      	ldr	r3, [pc, #44]	; (8060c <sleepmgr_enter_sleep+0x40>)
   805e0:	4798      	blx	r3
   805e2:	4603      	mov	r3, r0
   805e4:	71fb      	strb	r3, [r7, #7]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
   805e6:	79fb      	ldrb	r3, [r7, #7]
   805e8:	2b00      	cmp	r3, #0
   805ea:	d106      	bne.n	805fa <sleepmgr_enter_sleep+0x2e>
		cpu_irq_enable();
   805ec:	4b06      	ldr	r3, [pc, #24]	; (80608 <sleepmgr_enter_sleep+0x3c>)
   805ee:	2201      	movs	r2, #1
   805f0:	701a      	strb	r2, [r3, #0]
   805f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   805f6:	b662      	cpsie	i
		return;
   805f8:	e003      	b.n	80602 <sleepmgr_enter_sleep+0x36>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
   805fa:	79fb      	ldrb	r3, [r7, #7]
   805fc:	4618      	mov	r0, r3
   805fe:	4b04      	ldr	r3, [pc, #16]	; (80610 <sleepmgr_enter_sleep+0x44>)
   80600:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   80602:	3708      	adds	r7, #8
   80604:	46bd      	mov	sp, r7
   80606:	bd80      	pop	{r7, pc}
   80608:	20000294 	.word	0x20000294
   8060c:	00080599 	.word	0x00080599
   80610:	00080535 	.word	0x00080535

00080614 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   80614:	b480      	push	{r7}
   80616:	b083      	sub	sp, #12
   80618:	af00      	add	r7, sp, #0
   8061a:	6078      	str	r0, [r7, #4]
   8061c:	6039      	str	r1, [r7, #0]
	ul_id = ul_id;
	p_cfg->ctrl = 0;
   8061e:	687b      	ldr	r3, [r7, #4]
   80620:	2200      	movs	r2, #0
   80622:	601a      	str	r2, [r3, #0]
}
   80624:	bf00      	nop
   80626:	370c      	adds	r7, #12
   80628:	46bd      	mov	sp, r7
   8062a:	bc80      	pop	{r7}
   8062c:	4770      	bx	lr
   8062e:	0000      	movs	r0, r0

00080630 <genclk_config_set_source>:
//! \name Programmable Clock Source and Prescaler configuration
//@{

static inline void genclk_config_set_source(struct genclk_config *p_cfg,
		enum genclk_source e_src)
{
   80630:	b480      	push	{r7}
   80632:	b083      	sub	sp, #12
   80634:	af00      	add	r7, sp, #0
   80636:	6078      	str	r0, [r7, #4]
   80638:	460b      	mov	r3, r1
   8063a:	70fb      	strb	r3, [r7, #3]
	p_cfg->ctrl &= (~PMC_PCK_CSS_Msk);
   8063c:	687b      	ldr	r3, [r7, #4]
   8063e:	681b      	ldr	r3, [r3, #0]
   80640:	f023 0207 	bic.w	r2, r3, #7
   80644:	687b      	ldr	r3, [r7, #4]
   80646:	601a      	str	r2, [r3, #0]

	switch (e_src) {
   80648:	78fb      	ldrb	r3, [r7, #3]
   8064a:	2b0a      	cmp	r3, #10
   8064c:	d839      	bhi.n	806c2 <genclk_config_set_source+0x92>
   8064e:	a201      	add	r2, pc, #4	; (adr r2, 80654 <genclk_config_set_source+0x24>)
   80650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80654:	00080681 	.word	0x00080681
   80658:	00080681 	.word	0x00080681
   8065c:	00080681 	.word	0x00080681
   80660:	0008068b 	.word	0x0008068b
   80664:	0008068b 	.word	0x0008068b
   80668:	0008068b 	.word	0x0008068b
   8066c:	0008068b 	.word	0x0008068b
   80670:	0008068b 	.word	0x0008068b
   80674:	00080699 	.word	0x00080699
   80678:	000806a7 	.word	0x000806a7
   8067c:	000806b5 	.word	0x000806b5
	case GENCLK_PCK_SRC_SLCK_RC:
	case GENCLK_PCK_SRC_SLCK_XTAL:
	case GENCLK_PCK_SRC_SLCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_SLOW_CLK);
   80680:	687b      	ldr	r3, [r7, #4]
   80682:	681a      	ldr	r2, [r3, #0]
   80684:	687b      	ldr	r3, [r7, #4]
   80686:	601a      	str	r2, [r3, #0]
		break;
   80688:	e01b      	b.n	806c2 <genclk_config_set_source+0x92>
	case GENCLK_PCK_SRC_MAINCK_4M_RC:
	case GENCLK_PCK_SRC_MAINCK_8M_RC:
	case GENCLK_PCK_SRC_MAINCK_12M_RC:
	case GENCLK_PCK_SRC_MAINCK_XTAL:
	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_MAIN_CLK);
   8068a:	687b      	ldr	r3, [r7, #4]
   8068c:	681b      	ldr	r3, [r3, #0]
   8068e:	f043 0201 	orr.w	r2, r3, #1
   80692:	687b      	ldr	r3, [r7, #4]
   80694:	601a      	str	r2, [r3, #0]
		break;
   80696:	e014      	b.n	806c2 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLACK:
		p_cfg->ctrl |= (PMC_PCK_CSS_PLLA_CLK);
   80698:	687b      	ldr	r3, [r7, #4]
   8069a:	681b      	ldr	r3, [r3, #0]
   8069c:	f043 0202 	orr.w	r2, r3, #2
   806a0:	687b      	ldr	r3, [r7, #4]
   806a2:	601a      	str	r2, [r3, #0]
		break;
   806a4:	e00d      	b.n	806c2 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLBCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_UPLL_CLK);
   806a6:	687b      	ldr	r3, [r7, #4]
   806a8:	681b      	ldr	r3, [r3, #0]
   806aa:	f043 0203 	orr.w	r2, r3, #3
   806ae:	687b      	ldr	r3, [r7, #4]
   806b0:	601a      	str	r2, [r3, #0]
		break;
   806b2:	e006      	b.n	806c2 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_MCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_MCK);
   806b4:	687b      	ldr	r3, [r7, #4]
   806b6:	681b      	ldr	r3, [r3, #0]
   806b8:	f043 0204 	orr.w	r2, r3, #4
   806bc:	687b      	ldr	r3, [r7, #4]
   806be:	601a      	str	r2, [r3, #0]
		break;
   806c0:	bf00      	nop
	}
}
   806c2:	bf00      	nop
   806c4:	370c      	adds	r7, #12
   806c6:	46bd      	mov	sp, r7
   806c8:	bc80      	pop	{r7}
   806ca:	4770      	bx	lr

000806cc <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *p_cfg,
		uint32_t e_divider)
{
   806cc:	b480      	push	{r7}
   806ce:	b083      	sub	sp, #12
   806d0:	af00      	add	r7, sp, #0
   806d2:	6078      	str	r0, [r7, #4]
   806d4:	6039      	str	r1, [r7, #0]
	p_cfg->ctrl &= ~PMC_PCK_PRES_Msk;
   806d6:	687b      	ldr	r3, [r7, #4]
   806d8:	681b      	ldr	r3, [r3, #0]
   806da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   806de:	687b      	ldr	r3, [r7, #4]
   806e0:	601a      	str	r2, [r3, #0]
	p_cfg->ctrl |= e_divider;
   806e2:	687b      	ldr	r3, [r7, #4]
   806e4:	681a      	ldr	r2, [r3, #0]
   806e6:	683b      	ldr	r3, [r7, #0]
   806e8:	431a      	orrs	r2, r3
   806ea:	687b      	ldr	r3, [r7, #4]
   806ec:	601a      	str	r2, [r3, #0]
}
   806ee:	bf00      	nop
   806f0:	370c      	adds	r7, #12
   806f2:	46bd      	mov	sp, r7
   806f4:	bc80      	pop	{r7}
   806f6:	4770      	bx	lr

000806f8 <genclk_enable>:

//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   806f8:	b580      	push	{r7, lr}
   806fa:	b082      	sub	sp, #8
   806fc:	af00      	add	r7, sp, #0
   806fe:	6078      	str	r0, [r7, #4]
   80700:	6039      	str	r1, [r7, #0]
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   80702:	4907      	ldr	r1, [pc, #28]	; (80720 <genclk_enable+0x28>)
   80704:	687b      	ldr	r3, [r7, #4]
   80706:	681a      	ldr	r2, [r3, #0]
   80708:	683b      	ldr	r3, [r7, #0]
   8070a:	3310      	adds	r3, #16
   8070c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	pmc_enable_pck(ul_id);
   80710:	6838      	ldr	r0, [r7, #0]
   80712:	4b04      	ldr	r3, [pc, #16]	; (80724 <genclk_enable+0x2c>)
   80714:	4798      	blx	r3
}
   80716:	bf00      	nop
   80718:	3708      	adds	r7, #8
   8071a:	46bd      	mov	sp, r7
   8071c:	bd80      	pop	{r7, pc}
   8071e:	bf00      	nop
   80720:	400e0400 	.word	0x400e0400
   80724:	00082145 	.word	0x00082145

00080728 <genclk_enable_source>:
{
	pmc_disable_pck(ul_id);
}

static inline void genclk_enable_source(enum genclk_source e_src)
{
   80728:	b580      	push	{r7, lr}
   8072a:	b082      	sub	sp, #8
   8072c:	af00      	add	r7, sp, #0
   8072e:	4603      	mov	r3, r0
   80730:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80732:	79fb      	ldrb	r3, [r7, #7]
   80734:	2b0a      	cmp	r3, #10
   80736:	f200 80a2 	bhi.w	8087e <genclk_enable_source+0x156>
   8073a:	a201      	add	r2, pc, #4	; (adr r2, 80740 <genclk_enable_source+0x18>)
   8073c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80740:	0008076d 	.word	0x0008076d
   80744:	0008078f 	.word	0x0008078f
   80748:	000807af 	.word	0x000807af
   8074c:	000807cf 	.word	0x000807cf
   80750:	000807ef 	.word	0x000807ef
   80754:	0008080f 	.word	0x0008080f
   80758:	0008082f 	.word	0x0008082f
   8075c:	0008084f 	.word	0x0008084f
   80760:	0008086f 	.word	0x0008086f
   80764:	00080877 	.word	0x00080877
   80768:	0008087f 	.word	0x0008087f
	case GENCLK_PCK_SRC_SLCK_RC:
		if (!osc_is_ready(OSC_SLCK_32K_RC)) {
   8076c:	2000      	movs	r0, #0
   8076e:	4b4e      	ldr	r3, [pc, #312]	; (808a8 <genclk_enable_source+0x180>)
   80770:	4798      	blx	r3
   80772:	4603      	mov	r3, r0
   80774:	f083 0301 	eor.w	r3, r3, #1
   80778:	b2db      	uxtb	r3, r3
   8077a:	2b00      	cmp	r3, #0
   8077c:	f000 8081 	beq.w	80882 <genclk_enable_source+0x15a>
			osc_enable(OSC_SLCK_32K_RC);
   80780:	2000      	movs	r0, #0
   80782:	4b4a      	ldr	r3, [pc, #296]	; (808ac <genclk_enable_source+0x184>)
   80784:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_RC);
   80786:	2000      	movs	r0, #0
   80788:	4b49      	ldr	r3, [pc, #292]	; (808b0 <genclk_enable_source+0x188>)
   8078a:	4798      	blx	r3
		}
		break;
   8078c:	e079      	b.n	80882 <genclk_enable_source+0x15a>

	case GENCLK_PCK_SRC_SLCK_XTAL:
		if (!osc_is_ready(OSC_SLCK_32K_XTAL)) {
   8078e:	2001      	movs	r0, #1
   80790:	4b45      	ldr	r3, [pc, #276]	; (808a8 <genclk_enable_source+0x180>)
   80792:	4798      	blx	r3
   80794:	4603      	mov	r3, r0
   80796:	f083 0301 	eor.w	r3, r3, #1
   8079a:	b2db      	uxtb	r3, r3
   8079c:	2b00      	cmp	r3, #0
   8079e:	d072      	beq.n	80886 <genclk_enable_source+0x15e>
			osc_enable(OSC_SLCK_32K_XTAL);
   807a0:	2001      	movs	r0, #1
   807a2:	4b42      	ldr	r3, [pc, #264]	; (808ac <genclk_enable_source+0x184>)
   807a4:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_XTAL);
   807a6:	2001      	movs	r0, #1
   807a8:	4b41      	ldr	r3, [pc, #260]	; (808b0 <genclk_enable_source+0x188>)
   807aa:	4798      	blx	r3
		}
		break;
   807ac:	e06b      	b.n	80886 <genclk_enable_source+0x15e>

	case GENCLK_PCK_SRC_SLCK_BYPASS:
		if (!osc_is_ready(OSC_SLCK_32K_BYPASS)) {
   807ae:	2002      	movs	r0, #2
   807b0:	4b3d      	ldr	r3, [pc, #244]	; (808a8 <genclk_enable_source+0x180>)
   807b2:	4798      	blx	r3
   807b4:	4603      	mov	r3, r0
   807b6:	f083 0301 	eor.w	r3, r3, #1
   807ba:	b2db      	uxtb	r3, r3
   807bc:	2b00      	cmp	r3, #0
   807be:	d064      	beq.n	8088a <genclk_enable_source+0x162>
			osc_enable(OSC_SLCK_32K_BYPASS);
   807c0:	2002      	movs	r0, #2
   807c2:	4b3a      	ldr	r3, [pc, #232]	; (808ac <genclk_enable_source+0x184>)
   807c4:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_BYPASS);
   807c6:	2002      	movs	r0, #2
   807c8:	4b39      	ldr	r3, [pc, #228]	; (808b0 <genclk_enable_source+0x188>)
   807ca:	4798      	blx	r3
		}
		break;
   807cc:	e05d      	b.n	8088a <genclk_enable_source+0x162>

	case GENCLK_PCK_SRC_MAINCK_4M_RC:
		if (!osc_is_ready(OSC_MAINCK_4M_RC)) {
   807ce:	2003      	movs	r0, #3
   807d0:	4b35      	ldr	r3, [pc, #212]	; (808a8 <genclk_enable_source+0x180>)
   807d2:	4798      	blx	r3
   807d4:	4603      	mov	r3, r0
   807d6:	f083 0301 	eor.w	r3, r3, #1
   807da:	b2db      	uxtb	r3, r3
   807dc:	2b00      	cmp	r3, #0
   807de:	d056      	beq.n	8088e <genclk_enable_source+0x166>
			osc_enable(OSC_MAINCK_4M_RC);
   807e0:	2003      	movs	r0, #3
   807e2:	4b32      	ldr	r3, [pc, #200]	; (808ac <genclk_enable_source+0x184>)
   807e4:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_4M_RC);
   807e6:	2003      	movs	r0, #3
   807e8:	4b31      	ldr	r3, [pc, #196]	; (808b0 <genclk_enable_source+0x188>)
   807ea:	4798      	blx	r3
		}
		break;
   807ec:	e04f      	b.n	8088e <genclk_enable_source+0x166>

	case GENCLK_PCK_SRC_MAINCK_8M_RC:
		if (!osc_is_ready(OSC_MAINCK_8M_RC)) {
   807ee:	2004      	movs	r0, #4
   807f0:	4b2d      	ldr	r3, [pc, #180]	; (808a8 <genclk_enable_source+0x180>)
   807f2:	4798      	blx	r3
   807f4:	4603      	mov	r3, r0
   807f6:	f083 0301 	eor.w	r3, r3, #1
   807fa:	b2db      	uxtb	r3, r3
   807fc:	2b00      	cmp	r3, #0
   807fe:	d048      	beq.n	80892 <genclk_enable_source+0x16a>
			osc_enable(OSC_MAINCK_8M_RC);
   80800:	2004      	movs	r0, #4
   80802:	4b2a      	ldr	r3, [pc, #168]	; (808ac <genclk_enable_source+0x184>)
   80804:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_8M_RC);
   80806:	2004      	movs	r0, #4
   80808:	4b29      	ldr	r3, [pc, #164]	; (808b0 <genclk_enable_source+0x188>)
   8080a:	4798      	blx	r3
		}
		break;
   8080c:	e041      	b.n	80892 <genclk_enable_source+0x16a>

	case GENCLK_PCK_SRC_MAINCK_12M_RC:
		if (!osc_is_ready(OSC_MAINCK_12M_RC)) {
   8080e:	2005      	movs	r0, #5
   80810:	4b25      	ldr	r3, [pc, #148]	; (808a8 <genclk_enable_source+0x180>)
   80812:	4798      	blx	r3
   80814:	4603      	mov	r3, r0
   80816:	f083 0301 	eor.w	r3, r3, #1
   8081a:	b2db      	uxtb	r3, r3
   8081c:	2b00      	cmp	r3, #0
   8081e:	d03a      	beq.n	80896 <genclk_enable_source+0x16e>
			osc_enable(OSC_MAINCK_12M_RC);
   80820:	2005      	movs	r0, #5
   80822:	4b22      	ldr	r3, [pc, #136]	; (808ac <genclk_enable_source+0x184>)
   80824:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_12M_RC);
   80826:	2005      	movs	r0, #5
   80828:	4b21      	ldr	r3, [pc, #132]	; (808b0 <genclk_enable_source+0x188>)
   8082a:	4798      	blx	r3
		}
		break;
   8082c:	e033      	b.n	80896 <genclk_enable_source+0x16e>

	case GENCLK_PCK_SRC_MAINCK_XTAL:
		if (!osc_is_ready(OSC_MAINCK_XTAL)) {
   8082e:	2006      	movs	r0, #6
   80830:	4b1d      	ldr	r3, [pc, #116]	; (808a8 <genclk_enable_source+0x180>)
   80832:	4798      	blx	r3
   80834:	4603      	mov	r3, r0
   80836:	f083 0301 	eor.w	r3, r3, #1
   8083a:	b2db      	uxtb	r3, r3
   8083c:	2b00      	cmp	r3, #0
   8083e:	d02c      	beq.n	8089a <genclk_enable_source+0x172>
			osc_enable(OSC_MAINCK_XTAL);
   80840:	2006      	movs	r0, #6
   80842:	4b1a      	ldr	r3, [pc, #104]	; (808ac <genclk_enable_source+0x184>)
   80844:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_XTAL);
   80846:	2006      	movs	r0, #6
   80848:	4b19      	ldr	r3, [pc, #100]	; (808b0 <genclk_enable_source+0x188>)
   8084a:	4798      	blx	r3
		}
		break;
   8084c:	e025      	b.n	8089a <genclk_enable_source+0x172>

	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		if (!osc_is_ready(OSC_MAINCK_BYPASS)) {
   8084e:	2007      	movs	r0, #7
   80850:	4b15      	ldr	r3, [pc, #84]	; (808a8 <genclk_enable_source+0x180>)
   80852:	4798      	blx	r3
   80854:	4603      	mov	r3, r0
   80856:	f083 0301 	eor.w	r3, r3, #1
   8085a:	b2db      	uxtb	r3, r3
   8085c:	2b00      	cmp	r3, #0
   8085e:	d01e      	beq.n	8089e <genclk_enable_source+0x176>
			osc_enable(OSC_MAINCK_BYPASS);
   80860:	2007      	movs	r0, #7
   80862:	4b12      	ldr	r3, [pc, #72]	; (808ac <genclk_enable_source+0x184>)
   80864:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_BYPASS);
   80866:	2007      	movs	r0, #7
   80868:	4b11      	ldr	r3, [pc, #68]	; (808b0 <genclk_enable_source+0x188>)
   8086a:	4798      	blx	r3
		}
		break;
   8086c:	e017      	b.n	8089e <genclk_enable_source+0x176>

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_PCK_SRC_PLLACK:
		pll_enable_config_defaults(0);
   8086e:	2000      	movs	r0, #0
   80870:	4b10      	ldr	r3, [pc, #64]	; (808b4 <genclk_enable_source+0x18c>)
   80872:	4798      	blx	r3
		break;
   80874:	e014      	b.n	808a0 <genclk_enable_source+0x178>
#endif

#ifdef CONFIG_PLL1_SOURCE
	case GENCLK_PCK_SRC_PLLBCK:
		pll_enable_config_defaults(1);
   80876:	2001      	movs	r0, #1
   80878:	4b0e      	ldr	r3, [pc, #56]	; (808b4 <genclk_enable_source+0x18c>)
   8087a:	4798      	blx	r3
		break;
   8087c:	e010      	b.n	808a0 <genclk_enable_source+0x178>
	case GENCLK_PCK_SRC_MCK:
		break;

	default:
		Assert(false);
		break;
   8087e:	bf00      	nop
   80880:	e00e      	b.n	808a0 <genclk_enable_source+0x178>
		break;
   80882:	bf00      	nop
   80884:	e00c      	b.n	808a0 <genclk_enable_source+0x178>
		break;
   80886:	bf00      	nop
   80888:	e00a      	b.n	808a0 <genclk_enable_source+0x178>
		break;
   8088a:	bf00      	nop
   8088c:	e008      	b.n	808a0 <genclk_enable_source+0x178>
		break;
   8088e:	bf00      	nop
   80890:	e006      	b.n	808a0 <genclk_enable_source+0x178>
		break;
   80892:	bf00      	nop
   80894:	e004      	b.n	808a0 <genclk_enable_source+0x178>
		break;
   80896:	bf00      	nop
   80898:	e002      	b.n	808a0 <genclk_enable_source+0x178>
		break;
   8089a:	bf00      	nop
   8089c:	e000      	b.n	808a0 <genclk_enable_source+0x178>
		break;
   8089e:	bf00      	nop
	}
}
   808a0:	bf00      	nop
   808a2:	3708      	adds	r7, #8
   808a4:	46bd      	mov	sp, r7
   808a6:	bd80      	pop	{r7, pc}
   808a8:	00080181 	.word	0x00080181
   808ac:	000800fd 	.word	0x000800fd
   808b0:	00080275 	.word	0x00080275
   808b4:	000803b1 	.word	0x000803b1

000808b8 <phywhisperer_no_pwr>:

//Serial Number - will be read by device ID
char usb_serial_number[33] = "000000000000DEADBEEF";

void phywhisperer_no_pwr(void)
{
   808b8:	b480      	push	{r7}
   808ba:	af00      	add	r7, sp, #0
    PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   808bc:	4b05      	ldr	r3, [pc, #20]	; (808d4 <phywhisperer_no_pwr+0x1c>)
   808be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   808c2:	635a      	str	r2, [r3, #52]	; 0x34
    PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   808c4:	4b03      	ldr	r3, [pc, #12]	; (808d4 <phywhisperer_no_pwr+0x1c>)
   808c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   808ca:	635a      	str	r2, [r3, #52]	; 0x34
}
   808cc:	bf00      	nop
   808ce:	46bd      	mov	sp, r7
   808d0:	bc80      	pop	{r7}
   808d2:	4770      	bx	lr
   808d4:	400e0c00 	.word	0x400e0c00

000808d8 <phywhisperer_5V_pwr>:

void phywhisperer_5V_pwr(void)
{
   808d8:	b480      	push	{r7}
   808da:	af00      	add	r7, sp, #0
    PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   808dc:	4b05      	ldr	r3, [pc, #20]	; (808f4 <phywhisperer_5V_pwr+0x1c>)
   808de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   808e2:	635a      	str	r2, [r3, #52]	; 0x34
    PIOA->PIO_SODR = (1 << F_VB5V); //enable host power
   808e4:	4b03      	ldr	r3, [pc, #12]	; (808f4 <phywhisperer_5V_pwr+0x1c>)
   808e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   808ea:	631a      	str	r2, [r3, #48]	; 0x30
}
   808ec:	bf00      	nop
   808ee:	46bd      	mov	sp, r7
   808f0:	bc80      	pop	{r7}
   808f2:	4770      	bx	lr
   808f4:	400e0c00 	.word	0x400e0c00

000808f8 <phywhisperer_host_pwr>:

void phywhisperer_host_pwr(void)
{
   808f8:	b480      	push	{r7}
   808fa:	af00      	add	r7, sp, #0
    PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   808fc:	4b05      	ldr	r3, [pc, #20]	; (80914 <phywhisperer_host_pwr+0x1c>)
   808fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80902:	635a      	str	r2, [r3, #52]	; 0x34
    PIOA->PIO_SODR = (1 << F_VBHOST); //enable sniff power
   80904:	4b03      	ldr	r3, [pc, #12]	; (80914 <phywhisperer_host_pwr+0x1c>)
   80906:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8090a:	631a      	str	r2, [r3, #48]	; 0x30
}
   8090c:	bf00      	nop
   8090e:	46bd      	mov	sp, r7
   80910:	bc80      	pop	{r7}
   80912:	4770      	bx	lr
   80914:	400e0c00 	.word	0x400e0c00

00080918 <pwr_st_from_io>:
        phywhisperer_host_pwr();
    }
}

uint8_t pwr_st_from_io(void)
{
   80918:	b480      	push	{r7}
   8091a:	af00      	add	r7, sp, #0
    if (!(PIOA->PIO_ODSR & (1 << F_VBHOST)) && !(PIOA->PIO_ODSR & (1 << F_VB5V))) {
   8091c:	4b17      	ldr	r3, [pc, #92]	; (8097c <pwr_st_from_io+0x64>)
   8091e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   80924:	2b00      	cmp	r3, #0
   80926:	d107      	bne.n	80938 <pwr_st_from_io+0x20>
   80928:	4b14      	ldr	r3, [pc, #80]	; (8097c <pwr_st_from_io+0x64>)
   8092a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8092c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   80930:	2b00      	cmp	r3, #0
   80932:	d101      	bne.n	80938 <pwr_st_from_io+0x20>
        //USB off
        return 0;
   80934:	2300      	movs	r3, #0
   80936:	e01c      	b.n	80972 <pwr_st_from_io+0x5a>
    } else if (!(PIOA->PIO_ODSR & (1 << F_VBHOST)) && (PIOA->PIO_ODSR & (1 << F_VB5V))) {
   80938:	4b10      	ldr	r3, [pc, #64]	; (8097c <pwr_st_from_io+0x64>)
   8093a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8093c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   80940:	2b00      	cmp	r3, #0
   80942:	d107      	bne.n	80954 <pwr_st_from_io+0x3c>
   80944:	4b0d      	ldr	r3, [pc, #52]	; (8097c <pwr_st_from_io+0x64>)
   80946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80948:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   8094c:	2b00      	cmp	r3, #0
   8094e:	d001      	beq.n	80954 <pwr_st_from_io+0x3c>
        //Host power
        return 1;
   80950:	2301      	movs	r3, #1
   80952:	e00e      	b.n	80972 <pwr_st_from_io+0x5a>
    } else if ((PIOA->PIO_ODSR & (1 << F_VBHOST)) && !(PIOA->PIO_ODSR & (1 << F_VB5V))) {
   80954:	4b09      	ldr	r3, [pc, #36]	; (8097c <pwr_st_from_io+0x64>)
   80956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   8095c:	2b00      	cmp	r3, #0
   8095e:	d007      	beq.n	80970 <pwr_st_from_io+0x58>
   80960:	4b06      	ldr	r3, [pc, #24]	; (8097c <pwr_st_from_io+0x64>)
   80962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80964:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   80968:	2b00      	cmp	r3, #0
   8096a:	d101      	bne.n	80970 <pwr_st_from_io+0x58>
        //Sniffer power
        return 2;
   8096c:	2302      	movs	r3, #2
   8096e:	e000      	b.n	80972 <pwr_st_from_io+0x5a>
    } else {
        //Everything's on...
        return 0xFF;
   80970:	23ff      	movs	r3, #255	; 0xff
    }

}
   80972:	4618      	mov	r0, r3
   80974:	46bd      	mov	sp, r7
   80976:	bc80      	pop	{r7}
   80978:	4770      	bx	lr
   8097a:	bf00      	nop
   8097c:	400e0c00 	.word	0x400e0c00

00080980 <phywhisperer_setup_pins>:

void phywhisperer_setup_pins(void)
{
   80980:	b580      	push	{r7, lr}
   80982:	af00      	add	r7, sp, #0
    board_init();
   80984:	4b2e      	ldr	r3, [pc, #184]	; (80a40 <phywhisperer_setup_pins+0xc0>)
   80986:	4798      	blx	r3
    ioport_set_pin_mode(BUTTON_IN, IOPORT_MODE_PULLUP); //(1 << 2) = PULL UP
   80988:	2108      	movs	r1, #8
   8098a:	2018      	movs	r0, #24
   8098c:	4b2d      	ldr	r3, [pc, #180]	; (80a44 <phywhisperer_setup_pins+0xc4>)
   8098e:	4798      	blx	r3
    PIOA->PIO_ODR = (1 << BUTTON_IN);
   80990:	4b2d      	ldr	r3, [pc, #180]	; (80a48 <phywhisperer_setup_pins+0xc8>)
   80992:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   80996:	615a      	str	r2, [r3, #20]
    PIOA->PIO_PUER = (1 << BUTTON_IN); // enable pullup
   80998:	4b2b      	ldr	r3, [pc, #172]	; (80a48 <phywhisperer_setup_pins+0xc8>)
   8099a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   8099e:	665a      	str	r2, [r3, #100]	; 0x64
    PIOA->PIO_DIFSR = (1 << BUTTON_IN); //enable debounce
   809a0:	4b29      	ldr	r3, [pc, #164]	; (80a48 <phywhisperer_setup_pins+0xc8>)
   809a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   809a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    PIOA->PIO_OER = (1 << F_VB5V) | (1 << F_VBHOST); //enable output mode on VBHOST/VBSNIFF pins
   809aa:	4b27      	ldr	r3, [pc, #156]	; (80a48 <phywhisperer_setup_pins+0xc8>)
   809ac:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
   809b0:	611a      	str	r2, [r3, #16]

    phywhisperer_host_pwr();
   809b2:	4b26      	ldr	r3, [pc, #152]	; (80a4c <phywhisperer_setup_pins+0xcc>)
   809b4:	4798      	blx	r3

    /* Enable SMC */
    pmc_enable_periph_clk(ID_SMC);
   809b6:	2009      	movs	r0, #9
   809b8:	4b25      	ldr	r3, [pc, #148]	; (80a50 <phywhisperer_setup_pins+0xd0>)
   809ba:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   809bc:	4925      	ldr	r1, [pc, #148]	; (80a54 <phywhisperer_setup_pins+0xd4>)
   809be:	2029      	movs	r0, #41	; 0x29
   809c0:	4b25      	ldr	r3, [pc, #148]	; (80a58 <phywhisperer_setup_pins+0xd8>)
   809c2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   809c4:	4923      	ldr	r1, [pc, #140]	; (80a54 <phywhisperer_setup_pins+0xd4>)
   809c6:	202a      	movs	r0, #42	; 0x2a
   809c8:	4b23      	ldr	r3, [pc, #140]	; (80a58 <phywhisperer_setup_pins+0xd8>)
   809ca:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   809cc:	4921      	ldr	r1, [pc, #132]	; (80a54 <phywhisperer_setup_pins+0xd4>)
   809ce:	202b      	movs	r0, #43	; 0x2b
   809d0:	4b21      	ldr	r3, [pc, #132]	; (80a58 <phywhisperer_setup_pins+0xd8>)
   809d2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   809d4:	491f      	ldr	r1, [pc, #124]	; (80a54 <phywhisperer_setup_pins+0xd4>)
   809d6:	202c      	movs	r0, #44	; 0x2c
   809d8:	4b1f      	ldr	r3, [pc, #124]	; (80a58 <phywhisperer_setup_pins+0xd8>)
   809da:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   809dc:	491d      	ldr	r1, [pc, #116]	; (80a54 <phywhisperer_setup_pins+0xd4>)
   809de:	202d      	movs	r0, #45	; 0x2d
   809e0:	4b1d      	ldr	r3, [pc, #116]	; (80a58 <phywhisperer_setup_pins+0xd8>)
   809e2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   809e4:	491b      	ldr	r1, [pc, #108]	; (80a54 <phywhisperer_setup_pins+0xd4>)
   809e6:	202e      	movs	r0, #46	; 0x2e
   809e8:	4b1b      	ldr	r3, [pc, #108]	; (80a58 <phywhisperer_setup_pins+0xd8>)
   809ea:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   809ec:	4919      	ldr	r1, [pc, #100]	; (80a54 <phywhisperer_setup_pins+0xd4>)
   809ee:	202f      	movs	r0, #47	; 0x2f
   809f0:	4b19      	ldr	r3, [pc, #100]	; (80a58 <phywhisperer_setup_pins+0xd8>)
   809f2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   809f4:	4917      	ldr	r1, [pc, #92]	; (80a54 <phywhisperer_setup_pins+0xd4>)
   809f6:	2030      	movs	r0, #48	; 0x30
   809f8:	4b17      	ldr	r3, [pc, #92]	; (80a58 <phywhisperer_setup_pins+0xd8>)
   809fa:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   809fc:	4915      	ldr	r1, [pc, #84]	; (80a54 <phywhisperer_setup_pins+0xd4>)
   809fe:	2033      	movs	r0, #51	; 0x33
   80a00:	4b15      	ldr	r3, [pc, #84]	; (80a58 <phywhisperer_setup_pins+0xd8>)
   80a02:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   80a04:	4913      	ldr	r1, [pc, #76]	; (80a54 <phywhisperer_setup_pins+0xd4>)
   80a06:	2037      	movs	r0, #55	; 0x37
   80a08:	4b13      	ldr	r3, [pc, #76]	; (80a58 <phywhisperer_setup_pins+0xd8>)
   80a0a:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   80a0c:	4911      	ldr	r1, [pc, #68]	; (80a54 <phywhisperer_setup_pins+0xd4>)
   80a0e:	2034      	movs	r0, #52	; 0x34
   80a10:	4b11      	ldr	r3, [pc, #68]	; (80a58 <phywhisperer_setup_pins+0xd8>)
   80a12:	4798      	blx	r3

    smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   80a14:	4a11      	ldr	r2, [pc, #68]	; (80a5c <phywhisperer_setup_pins+0xdc>)
   80a16:	2100      	movs	r1, #0
   80a18:	4811      	ldr	r0, [pc, #68]	; (80a60 <phywhisperer_setup_pins+0xe0>)
   80a1a:	4b12      	ldr	r3, [pc, #72]	; (80a64 <phywhisperer_setup_pins+0xe4>)
   80a1c:	4798      	blx	r3
                         | SMC_SETUP_NCS_WR_SETUP(1)
                         | SMC_SETUP_NRD_SETUP(1)
                         | SMC_SETUP_NCS_RD_SETUP(1));
    smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   80a1e:	4a12      	ldr	r2, [pc, #72]	; (80a68 <phywhisperer_setup_pins+0xe8>)
   80a20:	2100      	movs	r1, #0
   80a22:	480f      	ldr	r0, [pc, #60]	; (80a60 <phywhisperer_setup_pins+0xe0>)
   80a24:	4b11      	ldr	r3, [pc, #68]	; (80a6c <phywhisperer_setup_pins+0xec>)
   80a26:	4798      	blx	r3
                         | SMC_PULSE_NCS_WR_PULSE(1)
                         | SMC_PULSE_NRD_PULSE(3)
                         | SMC_PULSE_NCS_RD_PULSE(1));
    smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   80a28:	4a11      	ldr	r2, [pc, #68]	; (80a70 <phywhisperer_setup_pins+0xf0>)
   80a2a:	2100      	movs	r1, #0
   80a2c:	480c      	ldr	r0, [pc, #48]	; (80a60 <phywhisperer_setup_pins+0xe0>)
   80a2e:	4b11      	ldr	r3, [pc, #68]	; (80a74 <phywhisperer_setup_pins+0xf4>)
   80a30:	4798      	blx	r3
                         | SMC_CYCLE_NRD_CYCLE(4));
    smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   80a32:	2203      	movs	r2, #3
   80a34:	2100      	movs	r1, #0
   80a36:	480a      	ldr	r0, [pc, #40]	; (80a60 <phywhisperer_setup_pins+0xe0>)
   80a38:	4b0f      	ldr	r3, [pc, #60]	; (80a78 <phywhisperer_setup_pins+0xf8>)
   80a3a:	4798      	blx	r3
                 | SMC_MODE_DBW_BIT_8);
}
   80a3c:	bf00      	nop
   80a3e:	bd80      	pop	{r7, pc}
   80a40:	0008172d 	.word	0x0008172d
   80a44:	0008045d 	.word	0x0008045d
   80a48:	400e0c00 	.word	0x400e0c00
   80a4c:	000808f9 	.word	0x000808f9
   80a50:	000820ad 	.word	0x000820ad
   80a54:	08000001 	.word	0x08000001
   80a58:	00081a61 	.word	0x00081a61
   80a5c:	01010100 	.word	0x01010100
   80a60:	400e0000 	.word	0x400e0000
   80a64:	00082605 	.word	0x00082605
   80a68:	01030101 	.word	0x01030101
   80a6c:	0008262f 	.word	0x0008262f
   80a70:	00040002 	.word	0x00040002
   80a74:	00082659 	.word	0x00082659
   80a78:	00082683 	.word	0x00082683

00080a7c <hacky_delay>:

void hacky_delay(void)
{
   80a7c:	b480      	push	{r7}
   80a7e:	b083      	sub	sp, #12
   80a80:	af00      	add	r7, sp, #0
    for (volatile uint32_t i = 0; i < 250000; i++);
   80a82:	2300      	movs	r3, #0
   80a84:	607b      	str	r3, [r7, #4]
   80a86:	e002      	b.n	80a8e <hacky_delay+0x12>
   80a88:	687b      	ldr	r3, [r7, #4]
   80a8a:	3301      	adds	r3, #1
   80a8c:	607b      	str	r3, [r7, #4]
   80a8e:	687b      	ldr	r3, [r7, #4]
   80a90:	4a03      	ldr	r2, [pc, #12]	; (80aa0 <hacky_delay+0x24>)
   80a92:	4293      	cmp	r3, r2
   80a94:	d9f8      	bls.n	80a88 <hacky_delay+0xc>
}
   80a96:	bf00      	nop
   80a98:	370c      	adds	r7, #12
   80a9a:	46bd      	mov	sp, r7
   80a9c:	bc80      	pop	{r7}
   80a9e:	4770      	bx	lr
   80aa0:	0003d08f 	.word	0x0003d08f

00080aa4 <genclk_enable_config>:

static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
   80aa4:	b580      	push	{r7, lr}
   80aa6:	b086      	sub	sp, #24
   80aa8:	af00      	add	r7, sp, #0
   80aaa:	60f8      	str	r0, [r7, #12]
   80aac:	460b      	mov	r3, r1
   80aae:	607a      	str	r2, [r7, #4]
   80ab0:	72fb      	strb	r3, [r7, #11]
    struct genclk_config gcfg;

    genclk_config_defaults(&gcfg, id);
   80ab2:	f107 0314 	add.w	r3, r7, #20
   80ab6:	68f9      	ldr	r1, [r7, #12]
   80ab8:	4618      	mov	r0, r3
   80aba:	4b0e      	ldr	r3, [pc, #56]	; (80af4 <genclk_enable_config+0x50>)
   80abc:	4798      	blx	r3
    genclk_enable_source(src);
   80abe:	7afb      	ldrb	r3, [r7, #11]
   80ac0:	4618      	mov	r0, r3
   80ac2:	4b0d      	ldr	r3, [pc, #52]	; (80af8 <genclk_enable_config+0x54>)
   80ac4:	4798      	blx	r3
    genclk_config_set_source(&gcfg, src);
   80ac6:	7afa      	ldrb	r2, [r7, #11]
   80ac8:	f107 0314 	add.w	r3, r7, #20
   80acc:	4611      	mov	r1, r2
   80ace:	4618      	mov	r0, r3
   80ad0:	4b0a      	ldr	r3, [pc, #40]	; (80afc <genclk_enable_config+0x58>)
   80ad2:	4798      	blx	r3
    genclk_config_set_divider(&gcfg, divider);
   80ad4:	f107 0314 	add.w	r3, r7, #20
   80ad8:	6879      	ldr	r1, [r7, #4]
   80ada:	4618      	mov	r0, r3
   80adc:	4b08      	ldr	r3, [pc, #32]	; (80b00 <genclk_enable_config+0x5c>)
   80ade:	4798      	blx	r3
    genclk_enable(&gcfg, id);
   80ae0:	f107 0314 	add.w	r3, r7, #20
   80ae4:	68f9      	ldr	r1, [r7, #12]
   80ae6:	4618      	mov	r0, r3
   80ae8:	4b06      	ldr	r3, [pc, #24]	; (80b04 <genclk_enable_config+0x60>)
   80aea:	4798      	blx	r3
}
   80aec:	bf00      	nop
   80aee:	3718      	adds	r7, #24
   80af0:	46bd      	mov	sp, r7
   80af2:	bd80      	pop	{r7, pc}
   80af4:	00080615 	.word	0x00080615
   80af8:	00080729 	.word	0x00080729
   80afc:	00080631 	.word	0x00080631
   80b00:	000806cd 	.word	0x000806cd
   80b04:	000806f9 	.word	0x000806f9

00080b08 <main>:

void (*pwr_list[])(void) = {phywhisperer_no_pwr, phywhisperer_5V_pwr, phywhisperer_host_pwr};

int main(void)
{
   80b08:	b580      	push	{r7, lr}
   80b0a:	b086      	sub	sp, #24
   80b0c:	af00      	add	r7, sp, #0
    uint32_t serial_number[4];

    // Read Device-ID from SAM3U. Do this before enabling interrupts etc.
    flash_read_unique_id(serial_number, sizeof(serial_number));
   80b0e:	1d3b      	adds	r3, r7, #4
   80b10:	2110      	movs	r1, #16
   80b12:	4618      	mov	r0, r3
   80b14:	4b29      	ldr	r3, [pc, #164]	; (80bbc <main+0xb4>)
   80b16:	4798      	blx	r3

    irq_initialize_vectors();
    cpu_irq_enable();
   80b18:	4b29      	ldr	r3, [pc, #164]	; (80bc0 <main+0xb8>)
   80b1a:	2201      	movs	r2, #1
   80b1c:	701a      	strb	r2, [r3, #0]
   80b1e:	f3bf 8f5f 	dmb	sy
   80b22:	b662      	cpsie	i

    // Initialize the sleep manager
    sleepmgr_init();
   80b24:	4b27      	ldr	r3, [pc, #156]	; (80bc4 <main+0xbc>)
   80b26:	4798      	blx	r3
#if !SAMD21 && !SAMR21
    sysclk_init();
   80b28:	4b27      	ldr	r3, [pc, #156]	; (80bc8 <main+0xc0>)
   80b2a:	4798      	blx	r3
    phywhisperer_setup_pins();
   80b2c:	4b27      	ldr	r3, [pc, #156]	; (80bcc <main+0xc4>)
   80b2e:	4798      	blx	r3
#else
    system_init();
#endif
    genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
   80b30:	2200      	movs	r2, #0
   80b32:	210a      	movs	r1, #10
   80b34:	2000      	movs	r0, #0
   80b36:	4b26      	ldr	r3, [pc, #152]	; (80bd0 <main+0xc8>)
   80b38:	4798      	blx	r3
    udc_start();
   80b3a:	4b26      	ldr	r3, [pc, #152]	; (80bd4 <main+0xcc>)
   80b3c:	4798      	blx	r3
    gpio_set_pin_high(LED0_GPIO);
   80b3e:	201d      	movs	r0, #29
   80b40:	4b25      	ldr	r3, [pc, #148]	; (80bd8 <main+0xd0>)
   80b42:	4798      	blx	r3
    gpio_set_pin_low(LED1_GPIO);
   80b44:	201f      	movs	r0, #31
   80b46:	4b25      	ldr	r3, [pc, #148]	; (80bdc <main+0xd4>)
   80b48:	4798      	blx	r3

    phywhisperer_no_pwr();
   80b4a:	4b25      	ldr	r3, [pc, #148]	; (80be0 <main+0xd8>)
   80b4c:	4798      	blx	r3
    USB_PWR_STATE = 0;
   80b4e:	4b25      	ldr	r3, [pc, #148]	; (80be4 <main+0xdc>)
   80b50:	2200      	movs	r2, #0
   80b52:	701a      	strb	r2, [r3, #0]

    uint8_t curr_pwr_setting = 0;
   80b54:	2300      	movs	r3, #0
   80b56:	75fb      	strb	r3, [r7, #23]
    while(1) {
        sleepmgr_enter_sleep();
   80b58:	4b23      	ldr	r3, [pc, #140]	; (80be8 <main+0xe0>)
   80b5a:	4798      	blx	r3
        uint8_t button_status = !(PIOA->PIO_PDSR & (1 << BUTTON_IN));
   80b5c:	4b23      	ldr	r3, [pc, #140]	; (80bec <main+0xe4>)
   80b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80b60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80b64:	2b00      	cmp	r3, #0
   80b66:	bf0c      	ite	eq
   80b68:	2301      	moveq	r3, #1
   80b6a:	2300      	movne	r3, #0
   80b6c:	b2db      	uxtb	r3, r3
   80b6e:	75bb      	strb	r3, [r7, #22]
        if (button_status){
   80b70:	7dbb      	ldrb	r3, [r7, #22]
   80b72:	2b00      	cmp	r3, #0
   80b74:	d0f0      	beq.n	80b58 <main+0x50>
            hacky_delay(); //delay to try to debounce
   80b76:	4b1e      	ldr	r3, [pc, #120]	; (80bf0 <main+0xe8>)
   80b78:	4798      	blx	r3
            while (!(PIOA->PIO_PDSR & (1 << BUTTON_IN))); //wait for trigger to be unpressed
   80b7a:	bf00      	nop
   80b7c:	4b1b      	ldr	r3, [pc, #108]	; (80bec <main+0xe4>)
   80b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80b80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80b84:	2b00      	cmp	r3, #0
   80b86:	d0f9      	beq.n	80b7c <main+0x74>

            if (USB_PWR_STATE && USB_PWR_STATE <= 2) {
   80b88:	4b16      	ldr	r3, [pc, #88]	; (80be4 <main+0xdc>)
   80b8a:	781b      	ldrb	r3, [r3, #0]
   80b8c:	2b00      	cmp	r3, #0
   80b8e:	d012      	beq.n	80bb6 <main+0xae>
   80b90:	4b14      	ldr	r3, [pc, #80]	; (80be4 <main+0xdc>)
   80b92:	781b      	ldrb	r3, [r3, #0]
   80b94:	2b02      	cmp	r3, #2
   80b96:	d80e      	bhi.n	80bb6 <main+0xae>
                if (pwr_st_from_io()) { //currently on
   80b98:	4b16      	ldr	r3, [pc, #88]	; (80bf4 <main+0xec>)
   80b9a:	4798      	blx	r3
   80b9c:	4603      	mov	r3, r0
   80b9e:	2b00      	cmp	r3, #0
   80ba0:	d002      	beq.n	80ba8 <main+0xa0>
                    phywhisperer_no_pwr();
   80ba2:	4b0f      	ldr	r3, [pc, #60]	; (80be0 <main+0xd8>)
   80ba4:	4798      	blx	r3
   80ba6:	e006      	b.n	80bb6 <main+0xae>
                } else {
                    pwr_list[USB_PWR_STATE]();
   80ba8:	4b0e      	ldr	r3, [pc, #56]	; (80be4 <main+0xdc>)
   80baa:	781b      	ldrb	r3, [r3, #0]
   80bac:	461a      	mov	r2, r3
   80bae:	4b12      	ldr	r3, [pc, #72]	; (80bf8 <main+0xf0>)
   80bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80bb4:	4798      	blx	r3
                }
            }
            hacky_delay();
   80bb6:	4b0e      	ldr	r3, [pc, #56]	; (80bf0 <main+0xe8>)
   80bb8:	4798      	blx	r3
    while(1) {
   80bba:	e7cd      	b.n	80b58 <main+0x50>
   80bbc:	00081649 	.word	0x00081649
   80bc0:	20000294 	.word	0x20000294
   80bc4:	00080565 	.word	0x00080565
   80bc8:	00082a99 	.word	0x00082a99
   80bcc:	00080981 	.word	0x00080981
   80bd0:	00080aa5 	.word	0x00080aa5
   80bd4:	00082f21 	.word	0x00082f21
   80bd8:	00081a01 	.word	0x00081a01
   80bdc:	00081a31 	.word	0x00081a31
   80be0:	000808b9 	.word	0x000808b9
   80be4:	200007f8 	.word	0x200007f8
   80be8:	000805cd 	.word	0x000805cd
   80bec:	400e0c00 	.word	0x400e0c00
   80bf0:	00080a7d 	.word	0x00080a7d
   80bf4:	00080919 	.word	0x00080919
   80bf8:	20000280 	.word	0x20000280

00080bfc <osc_enable>:
{
   80bfc:	b580      	push	{r7, lr}
   80bfe:	b082      	sub	sp, #8
   80c00:	af00      	add	r7, sp, #0
   80c02:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80c04:	687b      	ldr	r3, [r7, #4]
   80c06:	2b07      	cmp	r3, #7
   80c08:	d82e      	bhi.n	80c68 <osc_enable+0x6c>
   80c0a:	a201      	add	r2, pc, #4	; (adr r2, 80c10 <osc_enable+0x14>)
   80c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80c10:	00080c67 	.word	0x00080c67
   80c14:	00080c31 	.word	0x00080c31
   80c18:	00080c39 	.word	0x00080c39
   80c1c:	00080c41 	.word	0x00080c41
   80c20:	00080c49 	.word	0x00080c49
   80c24:	00080c51 	.word	0x00080c51
   80c28:	00080c59 	.word	0x00080c59
   80c2c:	00080c61 	.word	0x00080c61
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80c30:	2000      	movs	r0, #0
   80c32:	4b0f      	ldr	r3, [pc, #60]	; (80c70 <osc_enable+0x74>)
   80c34:	4798      	blx	r3
		break;
   80c36:	e017      	b.n	80c68 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80c38:	2001      	movs	r0, #1
   80c3a:	4b0d      	ldr	r3, [pc, #52]	; (80c70 <osc_enable+0x74>)
   80c3c:	4798      	blx	r3
		break;
   80c3e:	e013      	b.n	80c68 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80c40:	2000      	movs	r0, #0
   80c42:	4b0c      	ldr	r3, [pc, #48]	; (80c74 <osc_enable+0x78>)
   80c44:	4798      	blx	r3
		break;
   80c46:	e00f      	b.n	80c68 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80c48:	2010      	movs	r0, #16
   80c4a:	4b0a      	ldr	r3, [pc, #40]	; (80c74 <osc_enable+0x78>)
   80c4c:	4798      	blx	r3
		break;
   80c4e:	e00b      	b.n	80c68 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80c50:	2020      	movs	r0, #32
   80c52:	4b08      	ldr	r3, [pc, #32]	; (80c74 <osc_enable+0x78>)
   80c54:	4798      	blx	r3
		break;
   80c56:	e007      	b.n	80c68 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80c58:	203e      	movs	r0, #62	; 0x3e
   80c5a:	4b07      	ldr	r3, [pc, #28]	; (80c78 <osc_enable+0x7c>)
   80c5c:	4798      	blx	r3
		break;
   80c5e:	e003      	b.n	80c68 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   80c60:	4b06      	ldr	r3, [pc, #24]	; (80c7c <osc_enable+0x80>)
   80c62:	4798      	blx	r3
		break;
   80c64:	e000      	b.n	80c68 <osc_enable+0x6c>
		break;
   80c66:	bf00      	nop
}
   80c68:	bf00      	nop
   80c6a:	3708      	adds	r7, #8
   80c6c:	46bd      	mov	sp, r7
   80c6e:	bd80      	pop	{r7, pc}
   80c70:	00081e61 	.word	0x00081e61
   80c74:	00081ecd 	.word	0x00081ecd
   80c78:	00081f41 	.word	0x00081f41
   80c7c:	00081f8d 	.word	0x00081f8d

00080c80 <osc_is_ready>:
{
   80c80:	b580      	push	{r7, lr}
   80c82:	b082      	sub	sp, #8
   80c84:	af00      	add	r7, sp, #0
   80c86:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80c88:	687b      	ldr	r3, [r7, #4]
   80c8a:	2b07      	cmp	r3, #7
   80c8c:	d82f      	bhi.n	80cee <osc_is_ready+0x6e>
   80c8e:	a201      	add	r2, pc, #4	; (adr r2, 80c94 <osc_is_ready+0x14>)
   80c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80c94:	00080cb5 	.word	0x00080cb5
   80c98:	00080cb9 	.word	0x00080cb9
   80c9c:	00080cb9 	.word	0x00080cb9
   80ca0:	00080ccb 	.word	0x00080ccb
   80ca4:	00080ccb 	.word	0x00080ccb
   80ca8:	00080ccb 	.word	0x00080ccb
   80cac:	00080cdd 	.word	0x00080cdd
   80cb0:	00080cdd 	.word	0x00080cdd
		return 1;
   80cb4:	2301      	movs	r3, #1
   80cb6:	e01b      	b.n	80cf0 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   80cb8:	4b0f      	ldr	r3, [pc, #60]	; (80cf8 <osc_is_ready+0x78>)
   80cba:	4798      	blx	r3
   80cbc:	4603      	mov	r3, r0
   80cbe:	2b00      	cmp	r3, #0
   80cc0:	bf14      	ite	ne
   80cc2:	2301      	movne	r3, #1
   80cc4:	2300      	moveq	r3, #0
   80cc6:	b2db      	uxtb	r3, r3
   80cc8:	e012      	b.n	80cf0 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   80cca:	4b0c      	ldr	r3, [pc, #48]	; (80cfc <osc_is_ready+0x7c>)
   80ccc:	4798      	blx	r3
   80cce:	4603      	mov	r3, r0
   80cd0:	2b00      	cmp	r3, #0
   80cd2:	bf14      	ite	ne
   80cd4:	2301      	movne	r3, #1
   80cd6:	2300      	moveq	r3, #0
   80cd8:	b2db      	uxtb	r3, r3
   80cda:	e009      	b.n	80cf0 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   80cdc:	4b08      	ldr	r3, [pc, #32]	; (80d00 <osc_is_ready+0x80>)
   80cde:	4798      	blx	r3
   80ce0:	4603      	mov	r3, r0
   80ce2:	2b00      	cmp	r3, #0
   80ce4:	bf14      	ite	ne
   80ce6:	2301      	movne	r3, #1
   80ce8:	2300      	moveq	r3, #0
   80cea:	b2db      	uxtb	r3, r3
   80cec:	e000      	b.n	80cf0 <osc_is_ready+0x70>
	return 0;
   80cee:	2300      	movs	r3, #0
}
   80cf0:	4618      	mov	r0, r3
   80cf2:	3708      	adds	r7, #8
   80cf4:	46bd      	mov	sp, r7
   80cf6:	bd80      	pop	{r7, pc}
   80cf8:	00081e99 	.word	0x00081e99
   80cfc:	00081f29 	.word	0x00081f29
   80d00:	00081fd9 	.word	0x00081fd9

00080d04 <osc_wait_ready>:
{
   80d04:	b580      	push	{r7, lr}
   80d06:	b082      	sub	sp, #8
   80d08:	af00      	add	r7, sp, #0
   80d0a:	4603      	mov	r3, r0
   80d0c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   80d0e:	bf00      	nop
   80d10:	79fb      	ldrb	r3, [r7, #7]
   80d12:	4618      	mov	r0, r3
   80d14:	4b05      	ldr	r3, [pc, #20]	; (80d2c <osc_wait_ready+0x28>)
   80d16:	4798      	blx	r3
   80d18:	4603      	mov	r3, r0
   80d1a:	f083 0301 	eor.w	r3, r3, #1
   80d1e:	b2db      	uxtb	r3, r3
   80d20:	2b00      	cmp	r3, #0
   80d22:	d1f5      	bne.n	80d10 <osc_wait_ready+0xc>
}
   80d24:	bf00      	nop
   80d26:	3708      	adds	r7, #8
   80d28:	46bd      	mov	sp, r7
   80d2a:	bd80      	pop	{r7, pc}
   80d2c:	00080c81 	.word	0x00080c81

00080d30 <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
   80d30:	b580      	push	{r7, lr}
   80d32:	af00      	add	r7, sp, #0
	udd_detach();
   80d34:	4b01      	ldr	r3, [pc, #4]	; (80d3c <udc_detach+0xc>)
   80d36:	4798      	blx	r3
}
   80d38:	bf00      	nop
   80d3a:	bd80      	pop	{r7, pc}
   80d3c:	00084071 	.word	0x00084071

00080d40 <main_suspend_action>:
void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   80d40:	b480      	push	{r7}
   80d42:	af00      	add	r7, sp, #0
}
   80d44:	bf00      	nop
   80d46:	46bd      	mov	sp, r7
   80d48:	bc80      	pop	{r7}
   80d4a:	4770      	bx	lr

00080d4c <main_resume_action>:

void main_resume_action(void)
{
   80d4c:	b480      	push	{r7}
   80d4e:	af00      	add	r7, sp, #0
}
   80d50:	bf00      	nop
   80d52:	46bd      	mov	sp, r7
   80d54:	bc80      	pop	{r7}
   80d56:	4770      	bx	lr

00080d58 <main_sof_action>:

void main_sof_action(void)
{
   80d58:	b480      	push	{r7}
   80d5a:	af00      	add	r7, sp, #0
    if (!main_b_vendor_enable)
   80d5c:	4b04      	ldr	r3, [pc, #16]	; (80d70 <main_sof_action+0x18>)
   80d5e:	781b      	ldrb	r3, [r3, #0]
   80d60:	b2db      	uxtb	r3, r3
   80d62:	f083 0301 	eor.w	r3, r3, #1
   80d66:	b2db      	uxtb	r3, r3
   80d68:	2b00      	cmp	r3, #0
        return;
}
   80d6a:	46bd      	mov	sp, r7
   80d6c:	bc80      	pop	{r7}
   80d6e:	4770      	bx	lr
   80d70:	2000028c 	.word	0x2000028c

00080d74 <main_vendor_enable>:

bool main_vendor_enable(void)
{
   80d74:	b580      	push	{r7, lr}
   80d76:	af00      	add	r7, sp, #0
    main_b_vendor_enable = true;
   80d78:	4b05      	ldr	r3, [pc, #20]	; (80d90 <main_vendor_enable+0x1c>)
   80d7a:	2201      	movs	r2, #1
   80d7c:	701a      	strb	r2, [r3, #0]
    // Start data reception on OUT endpoints
#if UDI_VENDOR_EPS_SIZE_BULK_FS
    //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   80d7e:	4a05      	ldr	r2, [pc, #20]	; (80d94 <main_vendor_enable+0x20>)
   80d80:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80d84:	4804      	ldr	r0, [pc, #16]	; (80d98 <main_vendor_enable+0x24>)
   80d86:	4b05      	ldr	r3, [pc, #20]	; (80d9c <main_vendor_enable+0x28>)
   80d88:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
#endif
    return true;
   80d8a:	2301      	movs	r3, #1
}
   80d8c:	4618      	mov	r0, r3
   80d8e:	bd80      	pop	{r7, pc}
   80d90:	2000028c 	.word	0x2000028c
   80d94:	00081299 	.word	0x00081299
   80d98:	200007fc 	.word	0x200007fc
   80d9c:	00083b59 	.word	0x00083b59

00080da0 <main_vendor_disable>:

void main_vendor_disable(void)
{
   80da0:	b480      	push	{r7}
   80da2:	af00      	add	r7, sp, #0
    main_b_vendor_enable = false;
   80da4:	4b03      	ldr	r3, [pc, #12]	; (80db4 <main_vendor_disable+0x14>)
   80da6:	2200      	movs	r2, #0
   80da8:	701a      	strb	r2, [r3, #0]
}
   80daa:	bf00      	nop
   80dac:	46bd      	mov	sp, r7
   80dae:	bc80      	pop	{r7}
   80db0:	4770      	bx	lr
   80db2:	bf00      	nop
   80db4:	2000028c 	.word	0x2000028c

00080db8 <ctrl_readmem_bulk>:
void ctrl_writemem_bulk(void);
void ctrl_writemem_ctrl(void);
void ctrl_progfpga_bulk(void);


void ctrl_readmem_bulk(void){
   80db8:	b580      	push	{r7, lr}
   80dba:	b082      	sub	sp, #8
   80dbc:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80dbe:	4b0e      	ldr	r3, [pc, #56]	; (80df8 <ctrl_readmem_bulk+0x40>)
   80dc0:	681b      	ldr	r3, [r3, #0]
   80dc2:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80dc4:	4b0c      	ldr	r3, [pc, #48]	; (80df8 <ctrl_readmem_bulk+0x40>)
   80dc6:	685b      	ldr	r3, [r3, #4]
   80dc8:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80dca:	4b0c      	ldr	r3, [pc, #48]	; (80dfc <ctrl_readmem_bulk+0x44>)
   80dcc:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   80dce:	bf00      	nop
   80dd0:	2002      	movs	r0, #2
   80dd2:	4b0b      	ldr	r3, [pc, #44]	; (80e00 <ctrl_readmem_bulk+0x48>)
   80dd4:	4798      	blx	r3
   80dd6:	4603      	mov	r3, r0
   80dd8:	2b00      	cmp	r3, #0
   80dda:	d0f9      	beq.n	80dd0 <ctrl_readmem_bulk+0x18>

    FPGA_setaddr(address);
   80ddc:	6838      	ldr	r0, [r7, #0]
   80dde:	4b09      	ldr	r3, [pc, #36]	; (80e04 <ctrl_readmem_bulk+0x4c>)
   80de0:	4798      	blx	r3

    /* Do memory read */
    udi_vendor_bulk_in_run(
   80de2:	4a09      	ldr	r2, [pc, #36]	; (80e08 <ctrl_readmem_bulk+0x50>)
   80de4:	6879      	ldr	r1, [r7, #4]
   80de6:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   80dea:	4b08      	ldr	r3, [pc, #32]	; (80e0c <ctrl_readmem_bulk+0x54>)
   80dec:	4798      	blx	r3
        (uint8_t *) PSRAM_BASE_ADDRESS,
        buflen,
        main_vendor_bulk_in_received
        );
}
   80dee:	bf00      	nop
   80df0:	3708      	adds	r7, #8
   80df2:	46bd      	mov	sp, r7
   80df4:	bd80      	pop	{r7, pc}
   80df6:	bf00      	nop
   80df8:	20000bfc 	.word	0x20000bfc
   80dfc:	00081399 	.word	0x00081399
   80e00:	00081359 	.word	0x00081359
   80e04:	000813c9 	.word	0x000813c9
   80e08:	00081261 	.word	0x00081261
   80e0c:	00083b2d 	.word	0x00083b2d

00080e10 <ctrl_readmem_ctrl>:

void ctrl_readmem_ctrl(void){
   80e10:	b580      	push	{r7, lr}
   80e12:	b082      	sub	sp, #8
   80e14:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80e16:	4b0e      	ldr	r3, [pc, #56]	; (80e50 <ctrl_readmem_ctrl+0x40>)
   80e18:	681b      	ldr	r3, [r3, #0]
   80e1a:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80e1c:	4b0c      	ldr	r3, [pc, #48]	; (80e50 <ctrl_readmem_ctrl+0x40>)
   80e1e:	685b      	ldr	r3, [r3, #4]
   80e20:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80e22:	4b0c      	ldr	r3, [pc, #48]	; (80e54 <ctrl_readmem_ctrl+0x44>)
   80e24:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   80e26:	bf00      	nop
   80e28:	2005      	movs	r0, #5
   80e2a:	4b0b      	ldr	r3, [pc, #44]	; (80e58 <ctrl_readmem_ctrl+0x48>)
   80e2c:	4798      	blx	r3
   80e2e:	4603      	mov	r3, r0
   80e30:	2b00      	cmp	r3, #0
   80e32:	d0f9      	beq.n	80e28 <ctrl_readmem_ctrl+0x18>

    /* Set address */
    FPGA_setaddr(address);
   80e34:	6838      	ldr	r0, [r7, #0]
   80e36:	4b09      	ldr	r3, [pc, #36]	; (80e5c <ctrl_readmem_ctrl+0x4c>)
   80e38:	4798      	blx	r3

    /* Do memory read */
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   80e3a:	4b09      	ldr	r3, [pc, #36]	; (80e60 <ctrl_readmem_ctrl+0x50>)
   80e3c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   80e40:	601a      	str	r2, [r3, #0]

    /* Set size to read */
    ctrlmemread_size = buflen;
   80e42:	4a08      	ldr	r2, [pc, #32]	; (80e64 <ctrl_readmem_ctrl+0x54>)
   80e44:	687b      	ldr	r3, [r7, #4]
   80e46:	6013      	str	r3, [r2, #0]

    /* Start Transaction */
}
   80e48:	bf00      	nop
   80e4a:	3708      	adds	r7, #8
   80e4c:	46bd      	mov	sp, r7
   80e4e:	bd80      	pop	{r7, pc}
   80e50:	20000bfc 	.word	0x20000bfc
   80e54:	00081399 	.word	0x00081399
   80e58:	00081359 	.word	0x00081359
   80e5c:	000813c9 	.word	0x000813c9
   80e60:	20000c40 	.word	0x20000c40
   80e64:	20000c44 	.word	0x20000c44

00080e68 <ctrl_writemem_ctrl>:


void ctrl_writemem_ctrl(void){
   80e68:	b580      	push	{r7, lr}
   80e6a:	b084      	sub	sp, #16
   80e6c:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80e6e:	4b16      	ldr	r3, [pc, #88]	; (80ec8 <ctrl_writemem_ctrl+0x60>)
   80e70:	681b      	ldr	r3, [r3, #0]
   80e72:	60bb      	str	r3, [r7, #8]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80e74:	4b14      	ldr	r3, [pc, #80]	; (80ec8 <ctrl_writemem_ctrl+0x60>)
   80e76:	685b      	ldr	r3, [r3, #4]
   80e78:	607b      	str	r3, [r7, #4]

    uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
   80e7a:	4b14      	ldr	r3, [pc, #80]	; (80ecc <ctrl_writemem_ctrl+0x64>)
   80e7c:	603b      	str	r3, [r7, #0]

    //printf("Writing to %x, %d\n", address, buflen);

    FPGA_releaselock();
   80e7e:	4b14      	ldr	r3, [pc, #80]	; (80ed0 <ctrl_writemem_ctrl+0x68>)
   80e80:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   80e82:	bf00      	nop
   80e84:	2001      	movs	r0, #1
   80e86:	4b13      	ldr	r3, [pc, #76]	; (80ed4 <ctrl_writemem_ctrl+0x6c>)
   80e88:	4798      	blx	r3
   80e8a:	4603      	mov	r3, r0
   80e8c:	2b00      	cmp	r3, #0
   80e8e:	d0f9      	beq.n	80e84 <ctrl_writemem_ctrl+0x1c>

    /* Set address */
    FPGA_setaddr(address);
   80e90:	6878      	ldr	r0, [r7, #4]
   80e92:	4b11      	ldr	r3, [pc, #68]	; (80ed8 <ctrl_writemem_ctrl+0x70>)
   80e94:	4798      	blx	r3

    /* Start Transaction */

    /* Do memory write */
    for(unsigned int i = 0; i < buflen; i++){
   80e96:	2300      	movs	r3, #0
   80e98:	60fb      	str	r3, [r7, #12]
   80e9a:	e00b      	b.n	80eb4 <ctrl_writemem_ctrl+0x4c>
        xram[i] = ctrlbuf_payload[i];
   80e9c:	683a      	ldr	r2, [r7, #0]
   80e9e:	68fb      	ldr	r3, [r7, #12]
   80ea0:	441a      	add	r2, r3
   80ea2:	4b0e      	ldr	r3, [pc, #56]	; (80edc <ctrl_writemem_ctrl+0x74>)
   80ea4:	6819      	ldr	r1, [r3, #0]
   80ea6:	68fb      	ldr	r3, [r7, #12]
   80ea8:	440b      	add	r3, r1
   80eaa:	7812      	ldrb	r2, [r2, #0]
   80eac:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < buflen; i++){
   80eae:	68fb      	ldr	r3, [r7, #12]
   80eb0:	3301      	adds	r3, #1
   80eb2:	60fb      	str	r3, [r7, #12]
   80eb4:	68fa      	ldr	r2, [r7, #12]
   80eb6:	68bb      	ldr	r3, [r7, #8]
   80eb8:	429a      	cmp	r2, r3
   80eba:	d3ef      	bcc.n	80e9c <ctrl_writemem_ctrl+0x34>
    }

    FPGA_releaselock();
   80ebc:	4b04      	ldr	r3, [pc, #16]	; (80ed0 <ctrl_writemem_ctrl+0x68>)
   80ebe:	4798      	blx	r3
}
   80ec0:	bf00      	nop
   80ec2:	3710      	adds	r7, #16
   80ec4:	46bd      	mov	sp, r7
   80ec6:	bd80      	pop	{r7, pc}
   80ec8:	20000bfc 	.word	0x20000bfc
   80ecc:	20000c04 	.word	0x20000c04
   80ed0:	00081399 	.word	0x00081399
   80ed4:	00081359 	.word	0x00081359
   80ed8:	000813c9 	.word	0x000813c9
   80edc:	20000290 	.word	0x20000290

00080ee0 <ctrl_writemem_bulk>:

static uint32_t bulkread_address = 0;
static uint32_t bulkread_len = 0;

void ctrl_writemem_bulk(void){
   80ee0:	b580      	push	{r7, lr}
   80ee2:	b082      	sub	sp, #8
   80ee4:	af00      	add	r7, sp, #0
//uint32_t buflen = *(CTRLBUFFER_WORDPTR);
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80ee6:	4b09      	ldr	r3, [pc, #36]	; (80f0c <ctrl_writemem_bulk+0x2c>)
   80ee8:	685b      	ldr	r3, [r3, #4]
   80eea:	607b      	str	r3, [r7, #4]

    // TODO: see block in
    FPGA_releaselock();
   80eec:	4b08      	ldr	r3, [pc, #32]	; (80f10 <ctrl_writemem_bulk+0x30>)
   80eee:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   80ef0:	bf00      	nop
   80ef2:	2004      	movs	r0, #4
   80ef4:	4b07      	ldr	r3, [pc, #28]	; (80f14 <ctrl_writemem_bulk+0x34>)
   80ef6:	4798      	blx	r3
   80ef8:	4603      	mov	r3, r0
   80efa:	2b00      	cmp	r3, #0
   80efc:	d0f9      	beq.n	80ef2 <ctrl_writemem_bulk+0x12>

    /* Set address */
    FPGA_setaddr(address);
   80efe:	6878      	ldr	r0, [r7, #4]
   80f00:	4b05      	ldr	r3, [pc, #20]	; (80f18 <ctrl_writemem_bulk+0x38>)
   80f02:	4798      	blx	r3

    /* Transaction done in generic callback */
}
   80f04:	bf00      	nop
   80f06:	3708      	adds	r7, #8
   80f08:	46bd      	mov	sp, r7
   80f0a:	bd80      	pop	{r7, pc}
   80f0c:	20000bfc 	.word	0x20000bfc
   80f10:	00081399 	.word	0x00081399
   80f14:	00081359 	.word	0x00081359
   80f18:	000813c9 	.word	0x000813c9

00080f1c <ctrl_sam3ucfg_cb>:

static void ctrl_sam3ucfg_cb(void)
{
   80f1c:	b580      	push	{r7, lr}
   80f1e:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   80f20:	4b18      	ldr	r3, [pc, #96]	; (80f84 <ctrl_sam3ucfg_cb+0x68>)
   80f22:	885b      	ldrh	r3, [r3, #2]
   80f24:	b2db      	uxtb	r3, r3
   80f26:	2b02      	cmp	r3, #2
   80f28:	d00e      	beq.n	80f48 <ctrl_sam3ucfg_cb+0x2c>
   80f2a:	2b03      	cmp	r3, #3
   80f2c:	d010      	beq.n	80f50 <ctrl_sam3ucfg_cb+0x34>
   80f2e:	2b01      	cmp	r3, #1
   80f30:	d000      	beq.n	80f34 <ctrl_sam3ucfg_cb+0x18>
        /* Make the jump */
        break;

        /* Oh well, sucks to be you */
    default:
        break;
   80f32:	e024      	b.n	80f7e <ctrl_sam3ucfg_cb+0x62>
        osc_enable(OSC_MAINCK_XTAL);
   80f34:	2006      	movs	r0, #6
   80f36:	4b14      	ldr	r3, [pc, #80]	; (80f88 <ctrl_sam3ucfg_cb+0x6c>)
   80f38:	4798      	blx	r3
        osc_wait_ready(OSC_MAINCK_XTAL);
   80f3a:	2006      	movs	r0, #6
   80f3c:	4b13      	ldr	r3, [pc, #76]	; (80f8c <ctrl_sam3ucfg_cb+0x70>)
   80f3e:	4798      	blx	r3
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   80f40:	2010      	movs	r0, #16
   80f42:	4b13      	ldr	r3, [pc, #76]	; (80f90 <ctrl_sam3ucfg_cb+0x74>)
   80f44:	4798      	blx	r3
        break;
   80f46:	e01a      	b.n	80f7e <ctrl_sam3ucfg_cb+0x62>
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80f48:	2010      	movs	r0, #16
   80f4a:	4b12      	ldr	r3, [pc, #72]	; (80f94 <ctrl_sam3ucfg_cb+0x78>)
   80f4c:	4798      	blx	r3
        break;
   80f4e:	e016      	b.n	80f7e <ctrl_sam3ucfg_cb+0x62>
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   80f50:	2201      	movs	r2, #1
   80f52:	210c      	movs	r1, #12
   80f54:	4810      	ldr	r0, [pc, #64]	; (80f98 <ctrl_sam3ucfg_cb+0x7c>)
   80f56:	4b11      	ldr	r3, [pc, #68]	; (80f9c <ctrl_sam3ucfg_cb+0x80>)
   80f58:	4798      	blx	r3
        udc_detach();
   80f5a:	4b11      	ldr	r3, [pc, #68]	; (80fa0 <ctrl_sam3ucfg_cb+0x84>)
   80f5c:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   80f5e:	bf00      	nop
   80f60:	4b10      	ldr	r3, [pc, #64]	; (80fa4 <ctrl_sam3ucfg_cb+0x88>)
   80f62:	685b      	ldr	r3, [r3, #4]
   80f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80f68:	2b00      	cmp	r3, #0
   80f6a:	d1f9      	bne.n	80f60 <ctrl_sam3ucfg_cb+0x44>
        RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   80f6c:	4b0d      	ldr	r3, [pc, #52]	; (80fa4 <ctrl_sam3ucfg_cb+0x88>)
   80f6e:	681b      	ldr	r3, [r3, #0]
   80f70:	4a0c      	ldr	r2, [pc, #48]	; (80fa4 <ctrl_sam3ucfg_cb+0x88>)
   80f72:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80f76:	f043 0305 	orr.w	r3, r3, #5
   80f7a:	6013      	str	r3, [r2, #0]
        while(1);
   80f7c:	e7fe      	b.n	80f7c <ctrl_sam3ucfg_cb+0x60>
    }
}
   80f7e:	bf00      	nop
   80f80:	bd80      	pop	{r7, pc}
   80f82:	bf00      	nop
   80f84:	20000d64 	.word	0x20000d64
   80f88:	00080bfd 	.word	0x00080bfd
   80f8c:	00080d05 	.word	0x00080d05
   80f90:	00081d61 	.word	0x00081d61
   80f94:	00081de1 	.word	0x00081de1
   80f98:	400e0800 	.word	0x400e0800
   80f9c:	000815e1 	.word	0x000815e1
   80fa0:	00080d31 	.word	0x00080d31
   80fa4:	400e1200 	.word	0x400e1200

00080fa8 <ctrl_progfpga_bulk>:

void ctrl_progfpga_bulk(void){
   80fa8:	b580      	push	{r7, lr}
   80faa:	af00      	add	r7, sp, #0

    switch(udd_g_ctrlreq.req.wValue){
   80fac:	4b0b      	ldr	r3, [pc, #44]	; (80fdc <ctrl_progfpga_bulk+0x34>)
   80fae:	885b      	ldrh	r3, [r3, #2]
   80fb0:	2ba1      	cmp	r3, #161	; 0xa1
   80fb2:	d007      	beq.n	80fc4 <ctrl_progfpga_bulk+0x1c>
   80fb4:	2ba2      	cmp	r3, #162	; 0xa2
   80fb6:	d00b      	beq.n	80fd0 <ctrl_progfpga_bulk+0x28>
   80fb8:	2ba0      	cmp	r3, #160	; 0xa0
   80fba:	d000      	beq.n	80fbe <ctrl_progfpga_bulk+0x16>
        /* Done */
        blockendpoint_usage = bep_emem;
        break;

    default:
        break;
   80fbc:	e00c      	b.n	80fd8 <ctrl_progfpga_bulk+0x30>
        fpga_program_setup1();
   80fbe:	4b08      	ldr	r3, [pc, #32]	; (80fe0 <ctrl_progfpga_bulk+0x38>)
   80fc0:	4798      	blx	r3
        break;
   80fc2:	e009      	b.n	80fd8 <ctrl_progfpga_bulk+0x30>
        fpga_program_setup2();
   80fc4:	4b07      	ldr	r3, [pc, #28]	; (80fe4 <ctrl_progfpga_bulk+0x3c>)
   80fc6:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   80fc8:	4b07      	ldr	r3, [pc, #28]	; (80fe8 <ctrl_progfpga_bulk+0x40>)
   80fca:	220a      	movs	r2, #10
   80fcc:	701a      	strb	r2, [r3, #0]
        break;
   80fce:	e003      	b.n	80fd8 <ctrl_progfpga_bulk+0x30>
        blockendpoint_usage = bep_emem;
   80fd0:	4b05      	ldr	r3, [pc, #20]	; (80fe8 <ctrl_progfpga_bulk+0x40>)
   80fd2:	2200      	movs	r2, #0
   80fd4:	701a      	strb	r2, [r3, #0]
        break;
   80fd6:	bf00      	nop
    }
}
   80fd8:	bf00      	nop
   80fda:	bd80      	pop	{r7, pc}
   80fdc:	20000d64 	.word	0x20000d64
   80fe0:	000814a1 	.word	0x000814a1
   80fe4:	00081521 	.word	0x00081521
   80fe8:	20000c3c 	.word	0x20000c3c

00080fec <ctrl_change_pwr>:

void ctrl_change_pwr(void) {
   80fec:	b480      	push	{r7}
   80fee:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.wValue) {
   80ff0:	4b18      	ldr	r3, [pc, #96]	; (81054 <ctrl_change_pwr+0x68>)
   80ff2:	885b      	ldrh	r3, [r3, #2]
   80ff4:	2b01      	cmp	r3, #1
   80ff6:	d010      	beq.n	8101a <ctrl_change_pwr+0x2e>
   80ff8:	2b02      	cmp	r3, #2
   80ffa:	d01a      	beq.n	81032 <ctrl_change_pwr+0x46>
   80ffc:	2b00      	cmp	r3, #0
   80ffe:	d000      	beq.n	81002 <ctrl_change_pwr+0x16>
        PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
        PIOA->PIO_SODR = (1 << F_VBHOST); //enable sniff power
        USB_PWR_STATE = 2;
        break;
    }
}
   81000:	e023      	b.n	8104a <ctrl_change_pwr+0x5e>
        PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   81002:	4b15      	ldr	r3, [pc, #84]	; (81058 <ctrl_change_pwr+0x6c>)
   81004:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   81008:	635a      	str	r2, [r3, #52]	; 0x34
        PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   8100a:	4b13      	ldr	r3, [pc, #76]	; (81058 <ctrl_change_pwr+0x6c>)
   8100c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   81010:	635a      	str	r2, [r3, #52]	; 0x34
        USB_PWR_STATE = 0;
   81012:	4b12      	ldr	r3, [pc, #72]	; (8105c <ctrl_change_pwr+0x70>)
   81014:	2200      	movs	r2, #0
   81016:	701a      	strb	r2, [r3, #0]
        break;
   81018:	e017      	b.n	8104a <ctrl_change_pwr+0x5e>
        PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   8101a:	4b0f      	ldr	r3, [pc, #60]	; (81058 <ctrl_change_pwr+0x6c>)
   8101c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   81020:	635a      	str	r2, [r3, #52]	; 0x34
        PIOA->PIO_SODR = (1 << F_VB5V); //enable host power
   81022:	4b0d      	ldr	r3, [pc, #52]	; (81058 <ctrl_change_pwr+0x6c>)
   81024:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   81028:	631a      	str	r2, [r3, #48]	; 0x30
        USB_PWR_STATE = 1;
   8102a:	4b0c      	ldr	r3, [pc, #48]	; (8105c <ctrl_change_pwr+0x70>)
   8102c:	2201      	movs	r2, #1
   8102e:	701a      	strb	r2, [r3, #0]
        break;
   81030:	e00b      	b.n	8104a <ctrl_change_pwr+0x5e>
        PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   81032:	4b09      	ldr	r3, [pc, #36]	; (81058 <ctrl_change_pwr+0x6c>)
   81034:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   81038:	635a      	str	r2, [r3, #52]	; 0x34
        PIOA->PIO_SODR = (1 << F_VBHOST); //enable sniff power
   8103a:	4b07      	ldr	r3, [pc, #28]	; (81058 <ctrl_change_pwr+0x6c>)
   8103c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   81040:	631a      	str	r2, [r3, #48]	; 0x30
        USB_PWR_STATE = 2;
   81042:	4b06      	ldr	r3, [pc, #24]	; (8105c <ctrl_change_pwr+0x70>)
   81044:	2202      	movs	r2, #2
   81046:	701a      	strb	r2, [r3, #0]
        break;
   81048:	bf00      	nop
}
   8104a:	bf00      	nop
   8104c:	46bd      	mov	sp, r7
   8104e:	bc80      	pop	{r7}
   81050:	4770      	bx	lr
   81052:	bf00      	nop
   81054:	20000d64 	.word	0x20000d64
   81058:	400e0c00 	.word	0x400e0c00
   8105c:	200007f8 	.word	0x200007f8

00081060 <main_setup_out_received>:

bool main_setup_out_received(void)
{
   81060:	b580      	push	{r7, lr}
   81062:	af00      	add	r7, sp, #0
    //Add buffer if used
    udd_g_ctrlreq.payload = ctrlbuffer;
   81064:	4b43      	ldr	r3, [pc, #268]	; (81174 <main_setup_out_received+0x114>)
   81066:	4a44      	ldr	r2, [pc, #272]	; (81178 <main_setup_out_received+0x118>)
   81068:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   8106a:	4b42      	ldr	r3, [pc, #264]	; (81174 <main_setup_out_received+0x114>)
   8106c:	88db      	ldrh	r3, [r3, #6]
   8106e:	2b40      	cmp	r3, #64	; 0x40
   81070:	bf28      	it	cs
   81072:	2340      	movcs	r3, #64	; 0x40
   81074:	b29a      	uxth	r2, r3
   81076:	4b3f      	ldr	r3, [pc, #252]	; (81174 <main_setup_out_received+0x114>)
   81078:	819a      	strh	r2, [r3, #12]

    blockendpoint_usage = bep_emem;
   8107a:	4b40      	ldr	r3, [pc, #256]	; (8117c <main_setup_out_received+0x11c>)
   8107c:	2200      	movs	r2, #0
   8107e:	701a      	strb	r2, [r3, #0]
    static uint8_t  respbuf[128];
    switch(udd_g_ctrlreq.req.bRequest){
   81080:	4b3c      	ldr	r3, [pc, #240]	; (81174 <main_setup_out_received+0x114>)
   81082:	785b      	ldrb	r3, [r3, #1]
   81084:	3b10      	subs	r3, #16
   81086:	2b14      	cmp	r3, #20
   81088:	d867      	bhi.n	8115a <main_setup_out_received+0xfa>
   8108a:	a201      	add	r2, pc, #4	; (adr r2, 81090 <main_setup_out_received+0x30>)
   8108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81090:	000810e5 	.word	0x000810e5
   81094:	00081111 	.word	0x00081111
   81098:	000810fb 	.word	0x000810fb
   8109c:	00081127 	.word	0x00081127
   810a0:	0008115b 	.word	0x0008115b
   810a4:	0008115b 	.word	0x0008115b
   810a8:	0008113d 	.word	0x0008113d
   810ac:	0008115b 	.word	0x0008115b
   810b0:	0008115b 	.word	0x0008115b
   810b4:	0008115b 	.word	0x0008115b
   810b8:	0008115b 	.word	0x0008115b
   810bc:	0008115b 	.word	0x0008115b
   810c0:	0008115b 	.word	0x0008115b
   810c4:	0008115b 	.word	0x0008115b
   810c8:	0008115b 	.word	0x0008115b
   810cc:	0008115b 	.word	0x0008115b
   810d0:	0008115b 	.word	0x0008115b
   810d4:	0008115b 	.word	0x0008115b
   810d8:	00081147 	.word	0x00081147
   810dc:	0008115b 	.word	0x0008115b
   810e0:	00081151 	.word	0x00081151
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   810e4:	2006      	movs	r0, #6
   810e6:	4b26      	ldr	r3, [pc, #152]	; (81180 <main_setup_out_received+0x120>)
   810e8:	4798      	blx	r3
   810ea:	4603      	mov	r3, r0
   810ec:	2b00      	cmp	r3, #0
   810ee:	d036      	beq.n	8115e <main_setup_out_received+0xfe>
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   810f0:	4b20      	ldr	r3, [pc, #128]	; (81174 <main_setup_out_received+0x114>)
   810f2:	4a24      	ldr	r2, [pc, #144]	; (81184 <main_setup_out_received+0x124>)
   810f4:	611a      	str	r2, [r3, #16]
            return true;
   810f6:	2301      	movs	r3, #1
   810f8:	e039      	b.n	8116e <main_setup_out_received+0x10e>
        }
        break;
    case REQ_MEMREAD_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   810fa:	2006      	movs	r0, #6
   810fc:	4b20      	ldr	r3, [pc, #128]	; (81180 <main_setup_out_received+0x120>)
   810fe:	4798      	blx	r3
   81100:	4603      	mov	r3, r0
   81102:	2b00      	cmp	r3, #0
   81104:	d02d      	beq.n	81162 <main_setup_out_received+0x102>
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   81106:	4b1b      	ldr	r3, [pc, #108]	; (81174 <main_setup_out_received+0x114>)
   81108:	4a1f      	ldr	r2, [pc, #124]	; (81188 <main_setup_out_received+0x128>)
   8110a:	611a      	str	r2, [r3, #16]
            return true;
   8110c:	2301      	movs	r3, #1
   8110e:	e02e      	b.n	8116e <main_setup_out_received+0x10e>
        break;


        /* Memory Write */
    case REQ_MEMWRITE_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   81110:	2006      	movs	r0, #6
   81112:	4b1b      	ldr	r3, [pc, #108]	; (81180 <main_setup_out_received+0x120>)
   81114:	4798      	blx	r3
   81116:	4603      	mov	r3, r0
   81118:	2b00      	cmp	r3, #0
   8111a:	d024      	beq.n	81166 <main_setup_out_received+0x106>
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   8111c:	4b15      	ldr	r3, [pc, #84]	; (81174 <main_setup_out_received+0x114>)
   8111e:	4a1b      	ldr	r2, [pc, #108]	; (8118c <main_setup_out_received+0x12c>)
   81120:	611a      	str	r2, [r3, #16]
            return true;
   81122:	2301      	movs	r3, #1
   81124:	e023      	b.n	8116e <main_setup_out_received+0x10e>
        }
        break;


    case REQ_MEMWRITE_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   81126:	2006      	movs	r0, #6
   81128:	4b15      	ldr	r3, [pc, #84]	; (81180 <main_setup_out_received+0x120>)
   8112a:	4798      	blx	r3
   8112c:	4603      	mov	r3, r0
   8112e:	2b00      	cmp	r3, #0
   81130:	d01b      	beq.n	8116a <main_setup_out_received+0x10a>
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   81132:	4b10      	ldr	r3, [pc, #64]	; (81174 <main_setup_out_received+0x114>)
   81134:	4a16      	ldr	r2, [pc, #88]	; (81190 <main_setup_out_received+0x130>)
   81136:	611a      	str	r2, [r3, #16]
            return true;
   81138:	2301      	movs	r3, #1
   8113a:	e018      	b.n	8116e <main_setup_out_received+0x10e>
        }
        break;

    case REQ_FPGA_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   8113c:	4b0d      	ldr	r3, [pc, #52]	; (81174 <main_setup_out_received+0x114>)
   8113e:	4a15      	ldr	r2, [pc, #84]	; (81194 <main_setup_out_received+0x134>)
   81140:	611a      	str	r2, [r3, #16]
        return true;
   81142:	2301      	movs	r3, #1
   81144:	e013      	b.n	8116e <main_setup_out_received+0x10e>

    case REQ_SAM3U_CFG:
        udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
   81146:	4b0b      	ldr	r3, [pc, #44]	; (81174 <main_setup_out_received+0x114>)
   81148:	4a13      	ldr	r2, [pc, #76]	; (81198 <main_setup_out_received+0x138>)
   8114a:	611a      	str	r2, [r3, #16]
        return true;
   8114c:	2301      	movs	r3, #1
   8114e:	e00e      	b.n	8116e <main_setup_out_received+0x10e>

    case REQ_CHANGE_PWR:
        //TODO
        udd_g_ctrlreq.callback = ctrl_change_pwr;
   81150:	4b08      	ldr	r3, [pc, #32]	; (81174 <main_setup_out_received+0x114>)
   81152:	4a12      	ldr	r2, [pc, #72]	; (8119c <main_setup_out_received+0x13c>)
   81154:	611a      	str	r2, [r3, #16]
        return true;
   81156:	2301      	movs	r3, #1
   81158:	e009      	b.n	8116e <main_setup_out_received+0x10e>
    default:
        return false;
   8115a:	2300      	movs	r3, #0
   8115c:	e007      	b.n	8116e <main_setup_out_received+0x10e>
        break;
   8115e:	bf00      	nop
   81160:	e004      	b.n	8116c <main_setup_out_received+0x10c>
        break;
   81162:	bf00      	nop
   81164:	e002      	b.n	8116c <main_setup_out_received+0x10c>
        break;
   81166:	bf00      	nop
   81168:	e000      	b.n	8116c <main_setup_out_received+0x10c>
        break;
   8116a:	bf00      	nop
    }

    return false;
   8116c:	2300      	movs	r3, #0
}
   8116e:	4618      	mov	r0, r3
   81170:	bd80      	pop	{r7, pc}
   81172:	bf00      	nop
   81174:	20000d64 	.word	0x20000d64
   81178:	20000bfc 	.word	0x20000bfc
   8117c:	20000c3c 	.word	0x20000c3c
   81180:	00081359 	.word	0x00081359
   81184:	00080db9 	.word	0x00080db9
   81188:	00080e11 	.word	0x00080e11
   8118c:	00080ee1 	.word	0x00080ee1
   81190:	00080e69 	.word	0x00080e69
   81194:	00080fa9 	.word	0x00080fa9
   81198:	00080f1d 	.word	0x00080f1d
   8119c:	00080fed 	.word	0x00080fed

000811a0 <main_setup_in_received>:
  && (udd_g_ctrlreq.req.bRequest == 0)
  && (0 != udd_g_ctrlreq.req.wLength)
*/

bool main_setup_in_received(void)
{
   811a0:	b580      	push	{r7, lr}
   811a2:	af00      	add	r7, sp, #0
    */

    static uint8_t  respbuf[64];
    unsigned int cnt;

    switch(udd_g_ctrlreq.req.bRequest){
   811a4:	4b27      	ldr	r3, [pc, #156]	; (81244 <main_setup_in_received+0xa4>)
   811a6:	785b      	ldrb	r3, [r3, #1]
   811a8:	2b15      	cmp	r3, #21
   811aa:	d02a      	beq.n	81202 <main_setup_in_received+0x62>
   811ac:	2b17      	cmp	r3, #23
   811ae:	d017      	beq.n	811e0 <main_setup_in_received+0x40>
   811b0:	2b12      	cmp	r3, #18
   811b2:	d143      	bne.n	8123c <main_setup_in_received+0x9c>
    case REQ_MEMREAD_CTRL:
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   811b4:	4b24      	ldr	r3, [pc, #144]	; (81248 <main_setup_in_received+0xa8>)
   811b6:	681b      	ldr	r3, [r3, #0]
   811b8:	4a22      	ldr	r2, [pc, #136]	; (81244 <main_setup_in_received+0xa4>)
   811ba:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   811bc:	4b23      	ldr	r3, [pc, #140]	; (8124c <main_setup_in_received+0xac>)
   811be:	681b      	ldr	r3, [r3, #0]
   811c0:	b29a      	uxth	r2, r3
   811c2:	4b20      	ldr	r3, [pc, #128]	; (81244 <main_setup_in_received+0xa4>)
   811c4:	819a      	strh	r2, [r3, #12]
        ctrlmemread_size = 0;
   811c6:	4b21      	ldr	r3, [pc, #132]	; (8124c <main_setup_in_received+0xac>)
   811c8:	2200      	movs	r2, #0
   811ca:	601a      	str	r2, [r3, #0]

        if (FPGA_lockstatus() == fpga_ctrlmem){
   811cc:	4b20      	ldr	r3, [pc, #128]	; (81250 <main_setup_in_received+0xb0>)
   811ce:	4798      	blx	r3
   811d0:	4603      	mov	r3, r0
   811d2:	2b05      	cmp	r3, #5
   811d4:	d102      	bne.n	811dc <main_setup_in_received+0x3c>
            FPGA_setlock(fpga_unlocked);
   811d6:	2000      	movs	r0, #0
   811d8:	4b1e      	ldr	r3, [pc, #120]	; (81254 <main_setup_in_received+0xb4>)
   811da:	4798      	blx	r3
        }

        return true;
   811dc:	2301      	movs	r3, #1
   811de:	e02e      	b.n	8123e <main_setup_in_received+0x9e>
        break;

    case REQ_FW_VERSION:
        respbuf[0] = FW_VER_MAJOR;
   811e0:	4b1d      	ldr	r3, [pc, #116]	; (81258 <main_setup_in_received+0xb8>)
   811e2:	2200      	movs	r2, #0
   811e4:	701a      	strb	r2, [r3, #0]
        respbuf[1] = FW_VER_MINOR;
   811e6:	4b1c      	ldr	r3, [pc, #112]	; (81258 <main_setup_in_received+0xb8>)
   811e8:	220a      	movs	r2, #10
   811ea:	705a      	strb	r2, [r3, #1]
        respbuf[2] = FW_VER_DEBUG;
   811ec:	4b1a      	ldr	r3, [pc, #104]	; (81258 <main_setup_in_received+0xb8>)
   811ee:	2200      	movs	r2, #0
   811f0:	709a      	strb	r2, [r3, #2]
        udd_g_ctrlreq.payload = respbuf;
   811f2:	4b14      	ldr	r3, [pc, #80]	; (81244 <main_setup_in_received+0xa4>)
   811f4:	4a18      	ldr	r2, [pc, #96]	; (81258 <main_setup_in_received+0xb8>)
   811f6:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 3;
   811f8:	4b12      	ldr	r3, [pc, #72]	; (81244 <main_setup_in_received+0xa4>)
   811fa:	2203      	movs	r2, #3
   811fc:	819a      	strh	r2, [r3, #12]
        return true;
   811fe:	2301      	movs	r3, #1
   81200:	e01d      	b.n	8123e <main_setup_in_received+0x9e>
        break;

    case REQ_FPGA_STATUS:
        respbuf[0] = FPGA_ISDONE();
   81202:	2013      	movs	r0, #19
   81204:	4b15      	ldr	r3, [pc, #84]	; (8125c <main_setup_in_received+0xbc>)
   81206:	4798      	blx	r3
   81208:	4603      	mov	r3, r0
   8120a:	2b00      	cmp	r3, #0
   8120c:	bf14      	ite	ne
   8120e:	2301      	movne	r3, #1
   81210:	2300      	moveq	r3, #0
   81212:	b2db      	uxtb	r3, r3
   81214:	461a      	mov	r2, r3
   81216:	4b10      	ldr	r3, [pc, #64]	; (81258 <main_setup_in_received+0xb8>)
   81218:	701a      	strb	r2, [r3, #0]
        respbuf[1] = 0;
   8121a:	4b0f      	ldr	r3, [pc, #60]	; (81258 <main_setup_in_received+0xb8>)
   8121c:	2200      	movs	r2, #0
   8121e:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   81220:	4b0d      	ldr	r3, [pc, #52]	; (81258 <main_setup_in_received+0xb8>)
   81222:	2200      	movs	r2, #0
   81224:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   81226:	4b0c      	ldr	r3, [pc, #48]	; (81258 <main_setup_in_received+0xb8>)
   81228:	2200      	movs	r2, #0
   8122a:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   8122c:	4b05      	ldr	r3, [pc, #20]	; (81244 <main_setup_in_received+0xa4>)
   8122e:	4a0a      	ldr	r2, [pc, #40]	; (81258 <main_setup_in_received+0xb8>)
   81230:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 4;
   81232:	4b04      	ldr	r3, [pc, #16]	; (81244 <main_setup_in_received+0xa4>)
   81234:	2204      	movs	r2, #4
   81236:	819a      	strh	r2, [r3, #12]
        return true;
   81238:	2301      	movs	r3, #1
   8123a:	e000      	b.n	8123e <main_setup_in_received+0x9e>
        break;
    default:
        return false;
   8123c:	2300      	movs	r3, #0
    }
    return false;
}
   8123e:	4618      	mov	r0, r3
   81240:	bd80      	pop	{r7, pc}
   81242:	bf00      	nop
   81244:	20000d64 	.word	0x20000d64
   81248:	20000c40 	.word	0x20000c40
   8124c:	20000c44 	.word	0x20000c44
   81250:	000813b1 	.word	0x000813b1
   81254:	00081359 	.word	0x00081359
   81258:	20000c48 	.word	0x20000c48
   8125c:	000819d1 	.word	0x000819d1

00081260 <main_vendor_bulk_in_received>:

void main_vendor_bulk_in_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
   81260:	b580      	push	{r7, lr}
   81262:	b082      	sub	sp, #8
   81264:	af00      	add	r7, sp, #0
   81266:	4603      	mov	r3, r0
   81268:	6039      	str	r1, [r7, #0]
   8126a:	71fb      	strb	r3, [r7, #7]
   8126c:	4613      	mov	r3, r2
   8126e:	71bb      	strb	r3, [r7, #6]
    UNUSED(nb_transfered);
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   81270:	79fb      	ldrb	r3, [r7, #7]
   81272:	2b00      	cmp	r3, #0
   81274:	d108      	bne.n	81288 <main_vendor_bulk_in_received+0x28>
        return; // Transfer aborted/error
    }

    if (FPGA_lockstatus() == fpga_blockin){
   81276:	4b06      	ldr	r3, [pc, #24]	; (81290 <main_vendor_bulk_in_received+0x30>)
   81278:	4798      	blx	r3
   8127a:	4603      	mov	r3, r0
   8127c:	2b02      	cmp	r3, #2
   8127e:	d104      	bne.n	8128a <main_vendor_bulk_in_received+0x2a>
        FPGA_setlock(fpga_unlocked);
   81280:	2000      	movs	r0, #0
   81282:	4b04      	ldr	r3, [pc, #16]	; (81294 <main_vendor_bulk_in_received+0x34>)
   81284:	4798      	blx	r3
   81286:	e000      	b.n	8128a <main_vendor_bulk_in_received+0x2a>
        return; // Transfer aborted/error
   81288:	bf00      	nop
    }
}
   8128a:	3708      	adds	r7, #8
   8128c:	46bd      	mov	sp, r7
   8128e:	bd80      	pop	{r7, pc}
   81290:	000813b1 	.word	0x000813b1
   81294:	00081359 	.word	0x00081359

00081298 <main_vendor_bulk_out_received>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep)
{
   81298:	b580      	push	{r7, lr}
   8129a:	b084      	sub	sp, #16
   8129c:	af00      	add	r7, sp, #0
   8129e:	4603      	mov	r3, r0
   812a0:	6039      	str	r1, [r7, #0]
   812a2:	71fb      	strb	r3, [r7, #7]
   812a4:	4613      	mov	r3, r2
   812a6:	71bb      	strb	r3, [r7, #6]
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   812a8:	79fb      	ldrb	r3, [r7, #7]
   812aa:	2b00      	cmp	r3, #0
   812ac:	d006      	beq.n	812bc <main_vendor_bulk_out_received+0x24>
        // Transfer aborted

        //restart
        udi_vendor_bulk_out_run(
   812ae:	4a22      	ldr	r2, [pc, #136]	; (81338 <main_vendor_bulk_out_received+0xa0>)
   812b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
   812b4:	4821      	ldr	r0, [pc, #132]	; (8133c <main_vendor_bulk_out_received+0xa4>)
   812b6:	4b22      	ldr	r3, [pc, #136]	; (81340 <main_vendor_bulk_out_received+0xa8>)
   812b8:	4798      	blx	r3
            main_buf_loopback,
            sizeof(main_buf_loopback),
            main_vendor_bulk_out_received);

        return;
   812ba:	e039      	b.n	81330 <main_vendor_bulk_out_received+0x98>
    }

    if (blockendpoint_usage == bep_emem){
   812bc:	4b21      	ldr	r3, [pc, #132]	; (81344 <main_vendor_bulk_out_received+0xac>)
   812be:	781b      	ldrb	r3, [r3, #0]
   812c0:	2b00      	cmp	r3, #0
   812c2:	d11a      	bne.n	812fa <main_vendor_bulk_out_received+0x62>
        for(unsigned int i = 0; i < nb_transfered; i++){
   812c4:	2300      	movs	r3, #0
   812c6:	60fb      	str	r3, [r7, #12]
   812c8:	e00b      	b.n	812e2 <main_vendor_bulk_out_received+0x4a>
            xram[i] = main_buf_loopback[i];
   812ca:	4b1f      	ldr	r3, [pc, #124]	; (81348 <main_vendor_bulk_out_received+0xb0>)
   812cc:	681a      	ldr	r2, [r3, #0]
   812ce:	68fb      	ldr	r3, [r7, #12]
   812d0:	4413      	add	r3, r2
   812d2:	491a      	ldr	r1, [pc, #104]	; (8133c <main_vendor_bulk_out_received+0xa4>)
   812d4:	68fa      	ldr	r2, [r7, #12]
   812d6:	440a      	add	r2, r1
   812d8:	7812      	ldrb	r2, [r2, #0]
   812da:	701a      	strb	r2, [r3, #0]
        for(unsigned int i = 0; i < nb_transfered; i++){
   812dc:	68fb      	ldr	r3, [r7, #12]
   812de:	3301      	adds	r3, #1
   812e0:	60fb      	str	r3, [r7, #12]
   812e2:	68fa      	ldr	r2, [r7, #12]
   812e4:	683b      	ldr	r3, [r7, #0]
   812e6:	429a      	cmp	r2, r3
   812e8:	d3ef      	bcc.n	812ca <main_vendor_bulk_out_received+0x32>
        }

        if (FPGA_lockstatus() == fpga_blockout){
   812ea:	4b18      	ldr	r3, [pc, #96]	; (8134c <main_vendor_bulk_out_received+0xb4>)
   812ec:	4798      	blx	r3
   812ee:	4603      	mov	r3, r0
   812f0:	2b04      	cmp	r3, #4
   812f2:	d117      	bne.n	81324 <main_vendor_bulk_out_received+0x8c>
            FPGA_releaselock();
   812f4:	4b16      	ldr	r3, [pc, #88]	; (81350 <main_vendor_bulk_out_received+0xb8>)
   812f6:	4798      	blx	r3
   812f8:	e014      	b.n	81324 <main_vendor_bulk_out_received+0x8c>
        }
    } else if (blockendpoint_usage == bep_fpgabitstream){
   812fa:	4b12      	ldr	r3, [pc, #72]	; (81344 <main_vendor_bulk_out_received+0xac>)
   812fc:	781b      	ldrb	r3, [r3, #0]
   812fe:	2b0a      	cmp	r3, #10
   81300:	d110      	bne.n	81324 <main_vendor_bulk_out_received+0x8c>

        /* Send byte to FPGA - this could eventually be done via SPI */
        // TODO: is this dangerous?
        for(unsigned int i = 0; i < nb_transfered; i++){
   81302:	2300      	movs	r3, #0
   81304:	60bb      	str	r3, [r7, #8]
   81306:	e009      	b.n	8131c <main_vendor_bulk_out_received+0x84>
            fpga_program_sendbyte(main_buf_loopback[i]);
   81308:	4a0c      	ldr	r2, [pc, #48]	; (8133c <main_vendor_bulk_out_received+0xa4>)
   8130a:	68bb      	ldr	r3, [r7, #8]
   8130c:	4413      	add	r3, r2
   8130e:	781b      	ldrb	r3, [r3, #0]
   81310:	4618      	mov	r0, r3
   81312:	4b10      	ldr	r3, [pc, #64]	; (81354 <main_vendor_bulk_out_received+0xbc>)
   81314:	4798      	blx	r3
        for(unsigned int i = 0; i < nb_transfered; i++){
   81316:	68bb      	ldr	r3, [r7, #8]
   81318:	3301      	adds	r3, #1
   8131a:	60bb      	str	r3, [r7, #8]
   8131c:	68ba      	ldr	r2, [r7, #8]
   8131e:	683b      	ldr	r3, [r7, #0]
   81320:	429a      	cmp	r2, r3
   81322:	d3f1      	bcc.n	81308 <main_vendor_bulk_out_received+0x70>
#endif
    }

    //printf("BULKOUT: %d bytes\n", (int)nb_transfered);

    udi_vendor_bulk_out_run(
   81324:	4a04      	ldr	r2, [pc, #16]	; (81338 <main_vendor_bulk_out_received+0xa0>)
   81326:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8132a:	4804      	ldr	r0, [pc, #16]	; (8133c <main_vendor_bulk_out_received+0xa4>)
   8132c:	4b04      	ldr	r3, [pc, #16]	; (81340 <main_vendor_bulk_out_received+0xa8>)
   8132e:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
}
   81330:	3710      	adds	r7, #16
   81332:	46bd      	mov	sp, r7
   81334:	bd80      	pop	{r7, pc}
   81336:	bf00      	nop
   81338:	00081299 	.word	0x00081299
   8133c:	200007fc 	.word	0x200007fc
   81340:	00083b59 	.word	0x00083b59
   81344:	20000c3c 	.word	0x20000c3c
   81348:	20000290 	.word	0x20000290
   8134c:	000813b1 	.word	0x000813b1
   81350:	00081399 	.word	0x00081399
   81354:	00081535 	.word	0x00081535

00081358 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   81358:	b580      	push	{r7, lr}
   8135a:	b084      	sub	sp, #16
   8135c:	af00      	add	r7, sp, #0
   8135e:	4603      	mov	r3, r0
   81360:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
   81362:	2300      	movs	r3, #0
   81364:	60fb      	str	r3, [r7, #12]
  cpu_irq_enter_critical();
   81366:	4b09      	ldr	r3, [pc, #36]	; (8138c <FPGA_setlock+0x34>)
   81368:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   8136a:	4b09      	ldr	r3, [pc, #36]	; (81390 <FPGA_setlock+0x38>)
   8136c:	781b      	ldrb	r3, [r3, #0]
   8136e:	b2db      	uxtb	r3, r3
   81370:	2b00      	cmp	r3, #0
   81372:	d104      	bne.n	8137e <FPGA_setlock+0x26>
  {
    ret = 1;
   81374:	2301      	movs	r3, #1
   81376:	60fb      	str	r3, [r7, #12]
    _fpga_locked = lockstatus;
   81378:	4a05      	ldr	r2, [pc, #20]	; (81390 <FPGA_setlock+0x38>)
   8137a:	79fb      	ldrb	r3, [r7, #7]
   8137c:	7013      	strb	r3, [r2, #0]
  }
  cpu_irq_leave_critical();
   8137e:	4b05      	ldr	r3, [pc, #20]	; (81394 <FPGA_setlock+0x3c>)
   81380:	4798      	blx	r3
  return ret;
   81382:	68fb      	ldr	r3, [r7, #12]
}
   81384:	4618      	mov	r0, r3
   81386:	3710      	adds	r7, #16
   81388:	46bd      	mov	sp, r7
   8138a:	bd80      	pop	{r7, pc}
   8138c:	00081751 	.word	0x00081751
   81390:	20000c88 	.word	0x20000c88
   81394:	000817a5 	.word	0x000817a5

00081398 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
   81398:	b480      	push	{r7}
   8139a:	af00      	add	r7, sp, #0
  _fpga_locked = fpga_unlocked;
   8139c:	4b03      	ldr	r3, [pc, #12]	; (813ac <FPGA_releaselock+0x14>)
   8139e:	2200      	movs	r2, #0
   813a0:	701a      	strb	r2, [r3, #0]
}
   813a2:	bf00      	nop
   813a4:	46bd      	mov	sp, r7
   813a6:	bc80      	pop	{r7}
   813a8:	4770      	bx	lr
   813aa:	bf00      	nop
   813ac:	20000c88 	.word	0x20000c88

000813b0 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
   813b0:	b480      	push	{r7}
   813b2:	af00      	add	r7, sp, #0
  return _fpga_locked;
   813b4:	4b03      	ldr	r3, [pc, #12]	; (813c4 <FPGA_lockstatus+0x14>)
   813b6:	781b      	ldrb	r3, [r3, #0]
   813b8:	b2db      	uxtb	r3, r3
}
   813ba:	4618      	mov	r0, r3
   813bc:	46bd      	mov	sp, r7
   813be:	bc80      	pop	{r7}
   813c0:	4770      	bx	lr
   813c2:	bf00      	nop
   813c4:	20000c88 	.word	0x20000c88

000813c8 <FPGA_setaddr>:
  FPGA_releaselock();
  cpu_irq_leave_critical();
}

void FPGA_setaddr(uint32_t addr)
{
   813c8:	b580      	push	{r7, lr}
   813ca:	b082      	sub	sp, #8
   813cc:	af00      	add	r7, sp, #0
   813ce:	6078      	str	r0, [r7, #4]
  pio_sync_output_write(FPGA_ADDR_PORT, addr);
   813d0:	6879      	ldr	r1, [r7, #4]
   813d2:	4803      	ldr	r0, [pc, #12]	; (813e0 <FPGA_setaddr+0x18>)
   813d4:	4b03      	ldr	r3, [pc, #12]	; (813e4 <FPGA_setaddr+0x1c>)
   813d6:	4798      	blx	r3
  //maybe needed?
  /* gpio_set_pin_low(FPGA_ALE_GPIO); */
  /* gpio_set_pin_high(FPGA_ALE_GPIO); */
}
   813d8:	bf00      	nop
   813da:	3708      	adds	r7, #8
   813dc:	46bd      	mov	sp, r7
   813de:	bd80      	pop	{r7, pc}
   813e0:	400e0e00 	.word	0x400e0e00
   813e4:	00081971 	.word	0x00081971

000813e8 <osc_get_rate>:
{
   813e8:	b480      	push	{r7}
   813ea:	b083      	sub	sp, #12
   813ec:	af00      	add	r7, sp, #0
   813ee:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   813f0:	687b      	ldr	r3, [r7, #4]
   813f2:	2b07      	cmp	r3, #7
   813f4:	d823      	bhi.n	8143e <osc_get_rate+0x56>
   813f6:	a201      	add	r2, pc, #4	; (adr r2, 813fc <osc_get_rate+0x14>)
   813f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   813fc:	0008141d 	.word	0x0008141d
   81400:	00081423 	.word	0x00081423
   81404:	00081427 	.word	0x00081427
   81408:	0008142b 	.word	0x0008142b
   8140c:	0008142f 	.word	0x0008142f
   81410:	00081433 	.word	0x00081433
   81414:	00081437 	.word	0x00081437
   81418:	0008143b 	.word	0x0008143b
		return OSC_SLCK_32K_RC_HZ;
   8141c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81420:	e00e      	b.n	81440 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   81422:	2300      	movs	r3, #0
   81424:	e00c      	b.n	81440 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   81426:	2300      	movs	r3, #0
   81428:	e00a      	b.n	81440 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   8142a:	4b08      	ldr	r3, [pc, #32]	; (8144c <osc_get_rate+0x64>)
   8142c:	e008      	b.n	81440 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   8142e:	4b08      	ldr	r3, [pc, #32]	; (81450 <osc_get_rate+0x68>)
   81430:	e006      	b.n	81440 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   81432:	4b08      	ldr	r3, [pc, #32]	; (81454 <osc_get_rate+0x6c>)
   81434:	e004      	b.n	81440 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   81436:	4b07      	ldr	r3, [pc, #28]	; (81454 <osc_get_rate+0x6c>)
   81438:	e002      	b.n	81440 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   8143a:	4b06      	ldr	r3, [pc, #24]	; (81454 <osc_get_rate+0x6c>)
   8143c:	e000      	b.n	81440 <osc_get_rate+0x58>
	return 0;
   8143e:	2300      	movs	r3, #0
}
   81440:	4618      	mov	r0, r3
   81442:	370c      	adds	r7, #12
   81444:	46bd      	mov	sp, r7
   81446:	bc80      	pop	{r7}
   81448:	4770      	bx	lr
   8144a:	bf00      	nop
   8144c:	003d0900 	.word	0x003d0900
   81450:	007a1200 	.word	0x007a1200
   81454:	00b71b00 	.word	0x00b71b00

00081458 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   81458:	b580      	push	{r7, lr}
   8145a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   8145c:	2006      	movs	r0, #6
   8145e:	4b03      	ldr	r3, [pc, #12]	; (8146c <sysclk_get_main_hz+0x14>)
   81460:	4798      	blx	r3
   81462:	4603      	mov	r3, r0
   81464:	011b      	lsls	r3, r3, #4
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   81466:	4618      	mov	r0, r3
   81468:	bd80      	pop	{r7, pc}
   8146a:	bf00      	nop
   8146c:	000813e9 	.word	0x000813e9

00081470 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   81470:	b580      	push	{r7, lr}
   81472:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   81474:	4b02      	ldr	r3, [pc, #8]	; (81480 <sysclk_get_cpu_hz+0x10>)
   81476:	4798      	blx	r3
   81478:	4603      	mov	r3, r0
   8147a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   8147c:	4618      	mov	r0, r3
   8147e:	bd80      	pop	{r7, pc}
   81480:	00081459 	.word	0x00081459

00081484 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   81484:	b580      	push	{r7, lr}
   81486:	b082      	sub	sp, #8
   81488:	af00      	add	r7, sp, #0
   8148a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   8148c:	6878      	ldr	r0, [r7, #4]
   8148e:	4b03      	ldr	r3, [pc, #12]	; (8149c <sysclk_enable_peripheral_clock+0x18>)
   81490:	4798      	blx	r3
}
   81492:	bf00      	nop
   81494:	3708      	adds	r7, #8
   81496:	46bd      	mov	sp, r7
   81498:	bd80      	pop	{r7, pc}
   8149a:	bf00      	nop
   8149c:	000820ad 	.word	0x000820ad

000814a0 <fpga_program_setup1>:
    FPGA_NPROG_HIGH();
}

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   814a0:	b580      	push	{r7, lr}
   814a2:	b084      	sub	sp, #16
   814a4:	af00      	add	r7, sp, #0
    /* Init - set program low to erase FPGA */
    FPGA_NPROG_LOW();
   814a6:	2014      	movs	r0, #20
   814a8:	4b14      	ldr	r3, [pc, #80]	; (814fc <fpga_program_setup1+0x5c>)
   814aa:	4798      	blx	r3

    usart_spi_opt_t spiopts;
    spiopts.baudrate = 10000000UL;
   814ac:	4b14      	ldr	r3, [pc, #80]	; (81500 <fpga_program_setup1+0x60>)
   814ae:	603b      	str	r3, [r7, #0]
    spiopts.char_length = US_MR_CHRL_8_BIT;
   814b0:	23c0      	movs	r3, #192	; 0xc0
   814b2:	607b      	str	r3, [r7, #4]
    spiopts.channel_mode = US_MR_CHMODE_NORMAL;
   814b4:	2300      	movs	r3, #0
   814b6:	60fb      	str	r3, [r7, #12]
    spiopts.spi_mode = SPI_MODE_0;
   814b8:	2300      	movs	r3, #0
   814ba:	60bb      	str	r3, [r7, #8]

    sysclk_enable_peripheral_clock(FPGA_PROG_USART_ID);
   814bc:	200d      	movs	r0, #13
   814be:	4b11      	ldr	r3, [pc, #68]	; (81504 <fpga_program_setup1+0x64>)
   814c0:	4798      	blx	r3
    usart_init_spi_master(FPGA_PROG_USART, &spiopts, sysclk_get_cpu_hz());
   814c2:	4b11      	ldr	r3, [pc, #68]	; (81508 <fpga_program_setup1+0x68>)
   814c4:	4798      	blx	r3
   814c6:	4602      	mov	r2, r0
   814c8:	463b      	mov	r3, r7
   814ca:	4619      	mov	r1, r3
   814cc:	480f      	ldr	r0, [pc, #60]	; (8150c <fpga_program_setup1+0x6c>)
   814ce:	4b10      	ldr	r3, [pc, #64]	; (81510 <fpga_program_setup1+0x70>)
   814d0:	4798      	blx	r3
    FPGA_DO_SETUP();
   814d2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   814d6:	2012      	movs	r0, #18
   814d8:	4b0e      	ldr	r3, [pc, #56]	; (81514 <fpga_program_setup1+0x74>)
   814da:	4798      	blx	r3
    FPGA_CCLK_SETUP();
   814dc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   814e0:	2011      	movs	r0, #17
   814e2:	4b0c      	ldr	r3, [pc, #48]	; (81514 <fpga_program_setup1+0x74>)
   814e4:	4798      	blx	r3

    //pin setup doesn't transfer control over to USART, so have to do it manually
    PIOA->PIO_PDR = (1 << PIN_FPGA_DO_GPIO) | (1 << PIN_FPGA_CCLK_GPIO);
   814e6:	4b0c      	ldr	r3, [pc, #48]	; (81518 <fpga_program_setup1+0x78>)
   814e8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   814ec:	605a      	str	r2, [r3, #4]
    usart_enable_tx(FPGA_PROG_USART);
   814ee:	4807      	ldr	r0, [pc, #28]	; (8150c <fpga_program_setup1+0x6c>)
   814f0:	4b0a      	ldr	r3, [pc, #40]	; (8151c <fpga_program_setup1+0x7c>)
   814f2:	4798      	blx	r3
}
   814f4:	bf00      	nop
   814f6:	3710      	adds	r7, #16
   814f8:	46bd      	mov	sp, r7
   814fa:	bd80      	pop	{r7, pc}
   814fc:	00081a31 	.word	0x00081a31
   81500:	00989680 	.word	0x00989680
   81504:	00081485 	.word	0x00081485
   81508:	00081471 	.word	0x00081471
   8150c:	40090000 	.word	0x40090000
   81510:	0008586d 	.word	0x0008586d
   81514:	00081a61 	.word	0x00081a61
   81518:	400e0c00 	.word	0x400e0c00
   8151c:	0008597d 	.word	0x0008597d

00081520 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   81520:	b580      	push	{r7, lr}
   81522:	af00      	add	r7, sp, #0
    FPGA_NPROG_HIGH();
   81524:	2014      	movs	r0, #20
   81526:	4b02      	ldr	r3, [pc, #8]	; (81530 <fpga_program_setup2+0x10>)
   81528:	4798      	blx	r3
}
   8152a:	bf00      	nop
   8152c:	bd80      	pop	{r7, pc}
   8152e:	bf00      	nop
   81530:	00081a01 	.word	0x00081a01

00081534 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   81534:	b580      	push	{r7, lr}
   81536:	b082      	sub	sp, #8
   81538:	af00      	add	r7, sp, #0
   8153a:	4603      	mov	r3, r0
   8153c:	71fb      	strb	r3, [r7, #7]
    //For debug only
    //fpga_total_bs_len++;
    usart_putchar(FPGA_PROG_USART, databyte);
   8153e:	79fb      	ldrb	r3, [r7, #7]
   81540:	4619      	mov	r1, r3
   81542:	4803      	ldr	r0, [pc, #12]	; (81550 <fpga_program_sendbyte+0x1c>)
   81544:	4b03      	ldr	r3, [pc, #12]	; (81554 <fpga_program_sendbyte+0x20>)
   81546:	4798      	blx	r3
}
   81548:	bf00      	nop
   8154a:	3708      	adds	r7, #8
   8154c:	46bd      	mov	sp, r7
   8154e:	bd80      	pop	{r7, pc}
   81550:	40090000 	.word	0x40090000
   81554:	00085a13 	.word	0x00085a13

00081558 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   81558:	b480      	push	{r7}
   8155a:	b083      	sub	sp, #12
   8155c:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8155e:	f3ef 8310 	mrs	r3, PRIMASK
   81562:	603b      	str	r3, [r7, #0]
  return(result);
   81564:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   81566:	2b00      	cmp	r3, #0
   81568:	bf0c      	ite	eq
   8156a:	2301      	moveq	r3, #1
   8156c:	2300      	movne	r3, #0
   8156e:	b2db      	uxtb	r3, r3
   81570:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   81572:	b672      	cpsid	i
   81574:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81578:	4b04      	ldr	r3, [pc, #16]	; (8158c <cpu_irq_save+0x34>)
   8157a:	2200      	movs	r2, #0
   8157c:	701a      	strb	r2, [r3, #0]
	return flags;
   8157e:	687b      	ldr	r3, [r7, #4]
}
   81580:	4618      	mov	r0, r3
   81582:	370c      	adds	r7, #12
   81584:	46bd      	mov	sp, r7
   81586:	bc80      	pop	{r7}
   81588:	4770      	bx	lr
   8158a:	bf00      	nop
   8158c:	20000294 	.word	0x20000294

00081590 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   81590:	b480      	push	{r7}
   81592:	b083      	sub	sp, #12
   81594:	af00      	add	r7, sp, #0
   81596:	6078      	str	r0, [r7, #4]
	return (flags);
   81598:	687b      	ldr	r3, [r7, #4]
   8159a:	2b00      	cmp	r3, #0
   8159c:	bf14      	ite	ne
   8159e:	2301      	movne	r3, #1
   815a0:	2300      	moveq	r3, #0
   815a2:	b2db      	uxtb	r3, r3
}
   815a4:	4618      	mov	r0, r3
   815a6:	370c      	adds	r7, #12
   815a8:	46bd      	mov	sp, r7
   815aa:	bc80      	pop	{r7}
   815ac:	4770      	bx	lr
   815ae:	0000      	movs	r0, r0

000815b0 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   815b0:	b580      	push	{r7, lr}
   815b2:	b082      	sub	sp, #8
   815b4:	af00      	add	r7, sp, #0
   815b6:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   815b8:	6878      	ldr	r0, [r7, #4]
   815ba:	4b07      	ldr	r3, [pc, #28]	; (815d8 <cpu_irq_restore+0x28>)
   815bc:	4798      	blx	r3
   815be:	4603      	mov	r3, r0
   815c0:	2b00      	cmp	r3, #0
   815c2:	d005      	beq.n	815d0 <cpu_irq_restore+0x20>
		cpu_irq_enable();
   815c4:	4b05      	ldr	r3, [pc, #20]	; (815dc <cpu_irq_restore+0x2c>)
   815c6:	2201      	movs	r2, #1
   815c8:	701a      	strb	r2, [r3, #0]
   815ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   815ce:	b662      	cpsie	i
}
   815d0:	bf00      	nop
   815d2:	3708      	adds	r7, #8
   815d4:	46bd      	mov	sp, r7
   815d6:	bd80      	pop	{r7, pc}
   815d8:	00081591 	.word	0x00081591
   815dc:	20000294 	.word	0x20000294

000815e0 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   815e0:	b580      	push	{r7, lr}
   815e2:	b086      	sub	sp, #24
   815e4:	af00      	add	r7, sp, #0
   815e6:	60f8      	str	r0, [r7, #12]
   815e8:	60b9      	str	r1, [r7, #8]
   815ea:	607a      	str	r2, [r7, #4]
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   815ec:	68bb      	ldr	r3, [r7, #8]
   815ee:	2b0e      	cmp	r3, #14
   815f0:	d002      	beq.n	815f8 <efc_perform_command+0x18>
   815f2:	68bb      	ldr	r3, [r7, #8]
   815f4:	2b0f      	cmp	r3, #15
   815f6:	d102      	bne.n	815fe <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   815f8:	f04f 33ff 	mov.w	r3, #4294967295
   815fc:	e016      	b.n	8162c <efc_perform_command+0x4c>
	}

	flags = cpu_irq_save();
   815fe:	4b0d      	ldr	r3, [pc, #52]	; (81634 <efc_perform_command+0x54>)
   81600:	4798      	blx	r3
   81602:	6178      	str	r0, [r7, #20]
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   81604:	687b      	ldr	r3, [r7, #4]
   81606:	021b      	lsls	r3, r3, #8
   81608:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   8160c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   81610:	68ba      	ldr	r2, [r7, #8]
   81612:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   81614:	4313      	orrs	r3, r2
	result = efc_perform_fcr(p_efc,
   81616:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   8161a:	4619      	mov	r1, r3
   8161c:	68f8      	ldr	r0, [r7, #12]
   8161e:	4b06      	ldr	r3, [pc, #24]	; (81638 <efc_perform_command+0x58>)
   81620:	4798      	blx	r3
   81622:	6138      	str	r0, [r7, #16]
	cpu_irq_restore(flags);
   81624:	6978      	ldr	r0, [r7, #20]
   81626:	4b05      	ldr	r3, [pc, #20]	; (8163c <efc_perform_command+0x5c>)
   81628:	4798      	blx	r3
	return result;
   8162a:	693b      	ldr	r3, [r7, #16]
}
   8162c:	4618      	mov	r0, r3
   8162e:	3718      	adds	r7, #24
   81630:	46bd      	mov	sp, r7
   81632:	bd80      	pop	{r7, pc}
   81634:	00081559 	.word	0x00081559
   81638:	200000bd 	.word	0x200000bd
   8163c:	000815b1 	.word	0x000815b1

00081640 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81640:	b480      	push	{r7}
   81642:	af00      	add	r7, sp, #0
	while (1) {
   81644:	e7fe      	b.n	81644 <Dummy_Handler+0x4>
   81646:	0000      	movs	r0, r0

00081648 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   81648:	b590      	push	{r4, r7, lr}
   8164a:	b08b      	sub	sp, #44	; 0x2c
   8164c:	af02      	add	r7, sp, #8
   8164e:	6078      	str	r0, [r7, #4]
   81650:	6039      	str	r1, [r7, #0]
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   81652:	f107 020c 	add.w	r2, r7, #12
   81656:	2304      	movs	r3, #4
   81658:	9300      	str	r3, [sp, #0]
   8165a:	4613      	mov	r3, r2
   8165c:	220f      	movs	r2, #15
   8165e:	210e      	movs	r1, #14
   81660:	4813      	ldr	r0, [pc, #76]	; (816b0 <flash_read_unique_id+0x68>)
   81662:	4c14      	ldr	r4, [pc, #80]	; (816b4 <flash_read_unique_id+0x6c>)
   81664:	47a0      	blx	r4
   81666:	4603      	mov	r3, r0
   81668:	2b00      	cmp	r3, #0
   8166a:	d001      	beq.n	81670 <flash_read_unique_id+0x28>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   8166c:	2310      	movs	r3, #16
   8166e:	e01b      	b.n	816a8 <flash_read_unique_id+0x60>
	}

	if (ul_size > 4) {
   81670:	683b      	ldr	r3, [r7, #0]
   81672:	2b04      	cmp	r3, #4
   81674:	d901      	bls.n	8167a <flash_read_unique_id+0x32>
		/* Only 4 dword to store unique ID */
		ul_size = 4;
   81676:	2304      	movs	r3, #4
   81678:	603b      	str	r3, [r7, #0]
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   8167a:	2300      	movs	r3, #0
   8167c:	61fb      	str	r3, [r7, #28]
   8167e:	e00e      	b.n	8169e <flash_read_unique_id+0x56>
		pul_data[ul_idx] = uid_buf[ul_idx];
   81680:	69fb      	ldr	r3, [r7, #28]
   81682:	009b      	lsls	r3, r3, #2
   81684:	687a      	ldr	r2, [r7, #4]
   81686:	441a      	add	r2, r3
   81688:	69fb      	ldr	r3, [r7, #28]
   8168a:	009b      	lsls	r3, r3, #2
   8168c:	f107 0120 	add.w	r1, r7, #32
   81690:	440b      	add	r3, r1
   81692:	f853 3c14 	ldr.w	r3, [r3, #-20]
   81696:	6013      	str	r3, [r2, #0]
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81698:	69fb      	ldr	r3, [r7, #28]
   8169a:	3301      	adds	r3, #1
   8169c:	61fb      	str	r3, [r7, #28]
   8169e:	69fa      	ldr	r2, [r7, #28]
   816a0:	683b      	ldr	r3, [r7, #0]
   816a2:	429a      	cmp	r2, r3
   816a4:	d3ec      	bcc.n	81680 <flash_read_unique_id+0x38>
	}

	return FLASH_RC_OK;
   816a6:	2300      	movs	r3, #0
}
   816a8:	4618      	mov	r0, r3
   816aa:	3724      	adds	r7, #36	; 0x24
   816ac:	46bd      	mov	sp, r7
   816ae:	bd90      	pop	{r4, r7, pc}
   816b0:	400e0800 	.word	0x400e0800
   816b4:	20000001 	.word	0x20000001

000816b8 <sysclk_enable_peripheral_clock>:
{
   816b8:	b580      	push	{r7, lr}
   816ba:	b082      	sub	sp, #8
   816bc:	af00      	add	r7, sp, #0
   816be:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   816c0:	6878      	ldr	r0, [r7, #4]
   816c2:	4b03      	ldr	r3, [pc, #12]	; (816d0 <sysclk_enable_peripheral_clock+0x18>)
   816c4:	4798      	blx	r3
}
   816c6:	bf00      	nop
   816c8:	3708      	adds	r7, #8
   816ca:	46bd      	mov	sp, r7
   816cc:	bd80      	pop	{r7, pc}
   816ce:	bf00      	nop
   816d0:	000820ad 	.word	0x000820ad

000816d4 <ioport_init>:
{
   816d4:	b580      	push	{r7, lr}
   816d6:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   816d8:	200a      	movs	r0, #10
   816da:	4b03      	ldr	r3, [pc, #12]	; (816e8 <ioport_init+0x14>)
   816dc:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   816de:	200b      	movs	r0, #11
   816e0:	4b01      	ldr	r3, [pc, #4]	; (816e8 <ioport_init+0x14>)
   816e2:	4798      	blx	r3
}
   816e4:	bf00      	nop
   816e6:	bd80      	pop	{r7, pc}
   816e8:	000816b9 	.word	0x000816b9

000816ec <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   816ec:	b580      	push	{r7, lr}
   816ee:	af00      	add	r7, sp, #0
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   816f0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   816f4:	201d      	movs	r0, #29
   816f6:	4b0a      	ldr	r3, [pc, #40]	; (81720 <iopins_normal+0x34>)
   816f8:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   816fa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   816fe:	201f      	movs	r0, #31
   81700:	4b07      	ldr	r3, [pc, #28]	; (81720 <iopins_normal+0x34>)
   81702:	4798      	blx	r3
	//gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   81704:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81708:	2018      	movs	r0, #24
   8170a:	4b05      	ldr	r3, [pc, #20]	; (81720 <iopins_normal+0x34>)
   8170c:	4798      	blx	r3
	//board_sram_pwron();

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8170e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81712:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   81716:	4803      	ldr	r0, [pc, #12]	; (81724 <iopins_normal+0x38>)
   81718:	4b03      	ldr	r3, [pc, #12]	; (81728 <iopins_normal+0x3c>)
   8171a:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   8171c:	bf00      	nop
   8171e:	bd80      	pop	{r7, pc}
   81720:	00081a61 	.word	0x00081a61
   81724:	400e0c00 	.word	0x400e0c00
   81728:	00081b85 	.word	0x00081b85

0008172c <board_init>:

void board_init(void)
{
   8172c:	b580      	push	{r7, lr}
   8172e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81730:	4b04      	ldr	r3, [pc, #16]	; (81744 <board_init+0x18>)
   81732:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81736:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   81738:	4b03      	ldr	r3, [pc, #12]	; (81748 <board_init+0x1c>)
   8173a:	4798      	blx	r3

	iopins_normal();
   8173c:	4b03      	ldr	r3, [pc, #12]	; (8174c <board_init+0x20>)
   8173e:	4798      	blx	r3

}
   81740:	bf00      	nop
   81742:	bd80      	pop	{r7, pc}
   81744:	400e1250 	.word	0x400e1250
   81748:	000816d5 	.word	0x000816d5
   8174c:	000816ed 	.word	0x000816ed

00081750 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   81750:	b480      	push	{r7}
   81752:	b083      	sub	sp, #12
   81754:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   81756:	4b10      	ldr	r3, [pc, #64]	; (81798 <cpu_irq_enter_critical+0x48>)
   81758:	681b      	ldr	r3, [r3, #0]
   8175a:	2b00      	cmp	r3, #0
   8175c:	d112      	bne.n	81784 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8175e:	f3ef 8310 	mrs	r3, PRIMASK
   81762:	607b      	str	r3, [r7, #4]
  return(result);
   81764:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   81766:	2b00      	cmp	r3, #0
   81768:	d109      	bne.n	8177e <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i");
   8176a:	b672      	cpsid	i
   8176c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   81770:	4b0a      	ldr	r3, [pc, #40]	; (8179c <cpu_irq_enter_critical+0x4c>)
   81772:	2200      	movs	r2, #0
   81774:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   81776:	4b0a      	ldr	r3, [pc, #40]	; (817a0 <cpu_irq_enter_critical+0x50>)
   81778:	2201      	movs	r2, #1
   8177a:	701a      	strb	r2, [r3, #0]
   8177c:	e002      	b.n	81784 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   8177e:	4b08      	ldr	r3, [pc, #32]	; (817a0 <cpu_irq_enter_critical+0x50>)
   81780:	2200      	movs	r2, #0
   81782:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   81784:	4b04      	ldr	r3, [pc, #16]	; (81798 <cpu_irq_enter_critical+0x48>)
   81786:	681b      	ldr	r3, [r3, #0]
   81788:	3301      	adds	r3, #1
   8178a:	4a03      	ldr	r2, [pc, #12]	; (81798 <cpu_irq_enter_critical+0x48>)
   8178c:	6013      	str	r3, [r2, #0]
}
   8178e:	bf00      	nop
   81790:	370c      	adds	r7, #12
   81792:	46bd      	mov	sp, r7
   81794:	bc80      	pop	{r7}
   81796:	4770      	bx	lr
   81798:	20000c8c 	.word	0x20000c8c
   8179c:	20000294 	.word	0x20000294
   817a0:	20000c90 	.word	0x20000c90

000817a4 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   817a4:	b480      	push	{r7}
   817a6:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   817a8:	4b0b      	ldr	r3, [pc, #44]	; (817d8 <cpu_irq_leave_critical+0x34>)
   817aa:	681b      	ldr	r3, [r3, #0]
   817ac:	3b01      	subs	r3, #1
   817ae:	4a0a      	ldr	r2, [pc, #40]	; (817d8 <cpu_irq_leave_critical+0x34>)
   817b0:	6013      	str	r3, [r2, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   817b2:	4b09      	ldr	r3, [pc, #36]	; (817d8 <cpu_irq_leave_critical+0x34>)
   817b4:	681b      	ldr	r3, [r3, #0]
   817b6:	2b00      	cmp	r3, #0
   817b8:	d10a      	bne.n	817d0 <cpu_irq_leave_critical+0x2c>
   817ba:	4b08      	ldr	r3, [pc, #32]	; (817dc <cpu_irq_leave_critical+0x38>)
   817bc:	781b      	ldrb	r3, [r3, #0]
   817be:	b2db      	uxtb	r3, r3
   817c0:	2b00      	cmp	r3, #0
   817c2:	d005      	beq.n	817d0 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   817c4:	4b06      	ldr	r3, [pc, #24]	; (817e0 <cpu_irq_leave_critical+0x3c>)
   817c6:	2201      	movs	r2, #1
   817c8:	701a      	strb	r2, [r3, #0]
   817ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   817ce:	b662      	cpsie	i
	}
}
   817d0:	bf00      	nop
   817d2:	46bd      	mov	sp, r7
   817d4:	bc80      	pop	{r7}
   817d6:	4770      	bx	lr
   817d8:	20000c8c 	.word	0x20000c8c
   817dc:	20000c90 	.word	0x20000c90
   817e0:	20000294 	.word	0x20000294

000817e4 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   817e4:	b480      	push	{r7}
   817e6:	b085      	sub	sp, #20
   817e8:	af00      	add	r7, sp, #0
   817ea:	60f8      	str	r0, [r7, #12]
   817ec:	60b9      	str	r1, [r7, #8]
   817ee:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   817f0:	687b      	ldr	r3, [r7, #4]
   817f2:	2b00      	cmp	r3, #0
   817f4:	d003      	beq.n	817fe <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   817f6:	68fb      	ldr	r3, [r7, #12]
   817f8:	68ba      	ldr	r2, [r7, #8]
   817fa:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   817fc:	e002      	b.n	81804 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
   817fe:	68fb      	ldr	r3, [r7, #12]
   81800:	68ba      	ldr	r2, [r7, #8]
   81802:	661a      	str	r2, [r3, #96]	; 0x60
}
   81804:	bf00      	nop
   81806:	3714      	adds	r7, #20
   81808:	46bd      	mov	sp, r7
   8180a:	bc80      	pop	{r7}
   8180c:	4770      	bx	lr

0008180e <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   8180e:	b480      	push	{r7}
   81810:	b087      	sub	sp, #28
   81812:	af00      	add	r7, sp, #0
   81814:	60f8      	str	r0, [r7, #12]
   81816:	60b9      	str	r1, [r7, #8]
   81818:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8181a:	68fb      	ldr	r3, [r7, #12]
   8181c:	687a      	ldr	r2, [r7, #4]
   8181e:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81820:	68bb      	ldr	r3, [r7, #8]
   81822:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81826:	d01f      	beq.n	81868 <pio_set_peripheral+0x5a>
   81828:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8182c:	d805      	bhi.n	8183a <pio_set_peripheral+0x2c>
   8182e:	2b00      	cmp	r3, #0
   81830:	d027      	beq.n	81882 <pio_set_peripheral+0x74>
   81832:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81836:	d00a      	beq.n	8184e <pio_set_peripheral+0x40>
   81838:	e01f      	b.n	8187a <pio_set_peripheral+0x6c>
   8183a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8183e:	d020      	beq.n	81882 <pio_set_peripheral+0x74>
   81840:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81844:	d01d      	beq.n	81882 <pio_set_peripheral+0x74>
   81846:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8184a:	d01a      	beq.n	81882 <pio_set_peripheral+0x74>
   8184c:	e015      	b.n	8187a <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8184e:	68fb      	ldr	r3, [r7, #12]
   81850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   81852:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81854:	68fb      	ldr	r3, [r7, #12]
   81856:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   81858:	687b      	ldr	r3, [r7, #4]
   8185a:	43d9      	mvns	r1, r3
   8185c:	697b      	ldr	r3, [r7, #20]
   8185e:	400b      	ands	r3, r1
   81860:	401a      	ands	r2, r3
   81862:	68fb      	ldr	r3, [r7, #12]
   81864:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   81866:	e008      	b.n	8187a <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   81868:	68fb      	ldr	r3, [r7, #12]
   8186a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   8186c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8186e:	687a      	ldr	r2, [r7, #4]
   81870:	697b      	ldr	r3, [r7, #20]
   81872:	431a      	orrs	r2, r3
   81874:	68fb      	ldr	r3, [r7, #12]
   81876:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   81878:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8187a:	68fb      	ldr	r3, [r7, #12]
   8187c:	687a      	ldr	r2, [r7, #4]
   8187e:	605a      	str	r2, [r3, #4]
   81880:	e000      	b.n	81884 <pio_set_peripheral+0x76>
		return;
   81882:	bf00      	nop
}
   81884:	371c      	adds	r7, #28
   81886:	46bd      	mov	sp, r7
   81888:	bc80      	pop	{r7}
   8188a:	4770      	bx	lr

0008188c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   8188c:	b580      	push	{r7, lr}
   8188e:	b084      	sub	sp, #16
   81890:	af00      	add	r7, sp, #0
   81892:	60f8      	str	r0, [r7, #12]
   81894:	60b9      	str	r1, [r7, #8]
   81896:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   81898:	68b9      	ldr	r1, [r7, #8]
   8189a:	68f8      	ldr	r0, [r7, #12]
   8189c:	4b19      	ldr	r3, [pc, #100]	; (81904 <pio_set_input+0x78>)
   8189e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   818a0:	687b      	ldr	r3, [r7, #4]
   818a2:	f003 0301 	and.w	r3, r3, #1
   818a6:	461a      	mov	r2, r3
   818a8:	68b9      	ldr	r1, [r7, #8]
   818aa:	68f8      	ldr	r0, [r7, #12]
   818ac:	4b16      	ldr	r3, [pc, #88]	; (81908 <pio_set_input+0x7c>)
   818ae:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   818b0:	687b      	ldr	r3, [r7, #4]
   818b2:	f003 030a 	and.w	r3, r3, #10
   818b6:	2b00      	cmp	r3, #0
   818b8:	d003      	beq.n	818c2 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   818ba:	68fb      	ldr	r3, [r7, #12]
   818bc:	68ba      	ldr	r2, [r7, #8]
   818be:	621a      	str	r2, [r3, #32]
   818c0:	e002      	b.n	818c8 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   818c2:	68fb      	ldr	r3, [r7, #12]
   818c4:	68ba      	ldr	r2, [r7, #8]
   818c6:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   818c8:	687b      	ldr	r3, [r7, #4]
   818ca:	f003 0302 	and.w	r3, r3, #2
   818ce:	2b00      	cmp	r3, #0
   818d0:	d004      	beq.n	818dc <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   818d2:	68fb      	ldr	r3, [r7, #12]
   818d4:	68ba      	ldr	r2, [r7, #8]
   818d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   818da:	e008      	b.n	818ee <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   818dc:	687b      	ldr	r3, [r7, #4]
   818de:	f003 0308 	and.w	r3, r3, #8
   818e2:	2b00      	cmp	r3, #0
   818e4:	d003      	beq.n	818ee <pio_set_input+0x62>
			p_pio->PIO_DIFSR = ul_mask;
   818e6:	68fb      	ldr	r3, [r7, #12]
   818e8:	68ba      	ldr	r2, [r7, #8]
   818ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   818ee:	68fb      	ldr	r3, [r7, #12]
   818f0:	68ba      	ldr	r2, [r7, #8]
   818f2:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   818f4:	68fb      	ldr	r3, [r7, #12]
   818f6:	68ba      	ldr	r2, [r7, #8]
   818f8:	601a      	str	r2, [r3, #0]
}
   818fa:	bf00      	nop
   818fc:	3710      	adds	r7, #16
   818fe:	46bd      	mov	sp, r7
   81900:	bd80      	pop	{r7, pc}
   81902:	bf00      	nop
   81904:	0008198b 	.word	0x0008198b
   81908:	000817e5 	.word	0x000817e5

0008190c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8190c:	b580      	push	{r7, lr}
   8190e:	b084      	sub	sp, #16
   81910:	af00      	add	r7, sp, #0
   81912:	60f8      	str	r0, [r7, #12]
   81914:	60b9      	str	r1, [r7, #8]
   81916:	607a      	str	r2, [r7, #4]
   81918:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   8191a:	68b9      	ldr	r1, [r7, #8]
   8191c:	68f8      	ldr	r0, [r7, #12]
   8191e:	4b12      	ldr	r3, [pc, #72]	; (81968 <pio_set_output+0x5c>)
   81920:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   81922:	69ba      	ldr	r2, [r7, #24]
   81924:	68b9      	ldr	r1, [r7, #8]
   81926:	68f8      	ldr	r0, [r7, #12]
   81928:	4b10      	ldr	r3, [pc, #64]	; (8196c <pio_set_output+0x60>)
   8192a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8192c:	683b      	ldr	r3, [r7, #0]
   8192e:	2b00      	cmp	r3, #0
   81930:	d003      	beq.n	8193a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   81932:	68fb      	ldr	r3, [r7, #12]
   81934:	68ba      	ldr	r2, [r7, #8]
   81936:	651a      	str	r2, [r3, #80]	; 0x50
   81938:	e002      	b.n	81940 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8193a:	68fb      	ldr	r3, [r7, #12]
   8193c:	68ba      	ldr	r2, [r7, #8]
   8193e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81940:	687b      	ldr	r3, [r7, #4]
   81942:	2b00      	cmp	r3, #0
   81944:	d003      	beq.n	8194e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   81946:	68fb      	ldr	r3, [r7, #12]
   81948:	68ba      	ldr	r2, [r7, #8]
   8194a:	631a      	str	r2, [r3, #48]	; 0x30
   8194c:	e002      	b.n	81954 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8194e:	68fb      	ldr	r3, [r7, #12]
   81950:	68ba      	ldr	r2, [r7, #8]
   81952:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   81954:	68fb      	ldr	r3, [r7, #12]
   81956:	68ba      	ldr	r2, [r7, #8]
   81958:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   8195a:	68fb      	ldr	r3, [r7, #12]
   8195c:	68ba      	ldr	r2, [r7, #8]
   8195e:	601a      	str	r2, [r3, #0]
}
   81960:	bf00      	nop
   81962:	3710      	adds	r7, #16
   81964:	46bd      	mov	sp, r7
   81966:	bd80      	pop	{r7, pc}
   81968:	0008198b 	.word	0x0008198b
   8196c:	000817e5 	.word	0x000817e5

00081970 <pio_sync_output_write>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_sync_output_write(Pio *p_pio, const uint32_t ul_mask)
{
   81970:	b480      	push	{r7}
   81972:	b083      	sub	sp, #12
   81974:	af00      	add	r7, sp, #0
   81976:	6078      	str	r0, [r7, #4]
   81978:	6039      	str	r1, [r7, #0]
	p_pio->PIO_ODSR = ul_mask;
   8197a:	687b      	ldr	r3, [r7, #4]
   8197c:	683a      	ldr	r2, [r7, #0]
   8197e:	639a      	str	r2, [r3, #56]	; 0x38
}
   81980:	bf00      	nop
   81982:	370c      	adds	r7, #12
   81984:	46bd      	mov	sp, r7
   81986:	bc80      	pop	{r7}
   81988:	4770      	bx	lr

0008198a <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   8198a:	b480      	push	{r7}
   8198c:	b083      	sub	sp, #12
   8198e:	af00      	add	r7, sp, #0
   81990:	6078      	str	r0, [r7, #4]
   81992:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   81994:	687b      	ldr	r3, [r7, #4]
   81996:	683a      	ldr	r2, [r7, #0]
   81998:	645a      	str	r2, [r3, #68]	; 0x44
}
   8199a:	bf00      	nop
   8199c:	370c      	adds	r7, #12
   8199e:	46bd      	mov	sp, r7
   819a0:	bc80      	pop	{r7}
   819a2:	4770      	bx	lr

000819a4 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   819a4:	b480      	push	{r7}
   819a6:	b083      	sub	sp, #12
   819a8:	af00      	add	r7, sp, #0
   819aa:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   819ac:	687b      	ldr	r3, [r7, #4]
   819ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   819b0:	4618      	mov	r0, r3
   819b2:	370c      	adds	r7, #12
   819b4:	46bd      	mov	sp, r7
   819b6:	bc80      	pop	{r7}
   819b8:	4770      	bx	lr

000819ba <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   819ba:	b480      	push	{r7}
   819bc:	b083      	sub	sp, #12
   819be:	af00      	add	r7, sp, #0
   819c0:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   819c2:	687b      	ldr	r3, [r7, #4]
   819c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   819c6:	4618      	mov	r0, r3
   819c8:	370c      	adds	r7, #12
   819ca:	46bd      	mov	sp, r7
   819cc:	bc80      	pop	{r7}
   819ce:	4770      	bx	lr

000819d0 <pio_get_pin_value>:
 *       level.
 * \note If pin is input: PIOx must be clocked to sample the signal.
 *       See PMC driver.
 */
uint32_t pio_get_pin_value(uint32_t ul_pin)
{
   819d0:	b580      	push	{r7, lr}
   819d2:	b084      	sub	sp, #16
   819d4:	af00      	add	r7, sp, #0
   819d6:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   819d8:	6878      	ldr	r0, [r7, #4]
   819da:	4b08      	ldr	r3, [pc, #32]	; (819fc <pio_get_pin_value+0x2c>)
   819dc:	4798      	blx	r3
   819de:	60f8      	str	r0, [r7, #12]

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   819e0:	68fb      	ldr	r3, [r7, #12]
   819e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   819e4:	687b      	ldr	r3, [r7, #4]
   819e6:	f003 031f 	and.w	r3, r3, #31
   819ea:	fa22 f303 	lsr.w	r3, r2, r3
   819ee:	f003 0301 	and.w	r3, r3, #1
}
   819f2:	4618      	mov	r0, r3
   819f4:	3710      	adds	r7, #16
   819f6:	46bd      	mov	sp, r7
   819f8:	bd80      	pop	{r7, pc}
   819fa:	bf00      	nop
   819fc:	00081c59 	.word	0x00081c59

00081a00 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   81a00:	b580      	push	{r7, lr}
   81a02:	b084      	sub	sp, #16
   81a04:	af00      	add	r7, sp, #0
   81a06:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   81a08:	6878      	ldr	r0, [r7, #4]
   81a0a:	4b08      	ldr	r3, [pc, #32]	; (81a2c <pio_set_pin_high+0x2c>)
   81a0c:	4798      	blx	r3
   81a0e:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   81a10:	687b      	ldr	r3, [r7, #4]
   81a12:	f003 031f 	and.w	r3, r3, #31
   81a16:	2201      	movs	r2, #1
   81a18:	fa02 f303 	lsl.w	r3, r2, r3
   81a1c:	461a      	mov	r2, r3
   81a1e:	68fb      	ldr	r3, [r7, #12]
   81a20:	631a      	str	r2, [r3, #48]	; 0x30
}
   81a22:	bf00      	nop
   81a24:	3710      	adds	r7, #16
   81a26:	46bd      	mov	sp, r7
   81a28:	bd80      	pop	{r7, pc}
   81a2a:	bf00      	nop
   81a2c:	00081c59 	.word	0x00081c59

00081a30 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   81a30:	b580      	push	{r7, lr}
   81a32:	b084      	sub	sp, #16
   81a34:	af00      	add	r7, sp, #0
   81a36:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   81a38:	6878      	ldr	r0, [r7, #4]
   81a3a:	4b08      	ldr	r3, [pc, #32]	; (81a5c <pio_set_pin_low+0x2c>)
   81a3c:	4798      	blx	r3
   81a3e:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81a40:	687b      	ldr	r3, [r7, #4]
   81a42:	f003 031f 	and.w	r3, r3, #31
   81a46:	2201      	movs	r2, #1
   81a48:	fa02 f303 	lsl.w	r3, r2, r3
   81a4c:	461a      	mov	r2, r3
   81a4e:	68fb      	ldr	r3, [r7, #12]
   81a50:	635a      	str	r2, [r3, #52]	; 0x34
}
   81a52:	bf00      	nop
   81a54:	3710      	adds	r7, #16
   81a56:	46bd      	mov	sp, r7
   81a58:	bd80      	pop	{r7, pc}
   81a5a:	bf00      	nop
   81a5c:	00081c59 	.word	0x00081c59

00081a60 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81a60:	b590      	push	{r4, r7, lr}
   81a62:	b087      	sub	sp, #28
   81a64:	af02      	add	r7, sp, #8
   81a66:	6078      	str	r0, [r7, #4]
   81a68:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   81a6a:	6878      	ldr	r0, [r7, #4]
   81a6c:	4b40      	ldr	r3, [pc, #256]	; (81b70 <pio_configure_pin+0x110>)
   81a6e:	4798      	blx	r3
   81a70:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81a72:	683b      	ldr	r3, [r7, #0]
   81a74:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   81a78:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81a7c:	d046      	beq.n	81b0c <pio_configure_pin+0xac>
   81a7e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81a82:	d806      	bhi.n	81a92 <pio_configure_pin+0x32>
   81a84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81a88:	d00a      	beq.n	81aa0 <pio_configure_pin+0x40>
   81a8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81a8e:	d022      	beq.n	81ad6 <pio_configure_pin+0x76>
   81a90:	e067      	b.n	81b62 <pio_configure_pin+0x102>
   81a92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81a96:	d045      	beq.n	81b24 <pio_configure_pin+0xc4>
   81a98:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81a9c:	d042      	beq.n	81b24 <pio_configure_pin+0xc4>
   81a9e:	e060      	b.n	81b62 <pio_configure_pin+0x102>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81aa0:	687b      	ldr	r3, [r7, #4]
   81aa2:	f003 031f 	and.w	r3, r3, #31
   81aa6:	2201      	movs	r2, #1
   81aa8:	fa02 f303 	lsl.w	r3, r2, r3
   81aac:	461a      	mov	r2, r3
   81aae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81ab2:	68f8      	ldr	r0, [r7, #12]
   81ab4:	4b2f      	ldr	r3, [pc, #188]	; (81b74 <pio_configure_pin+0x114>)
   81ab6:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   81ab8:	687b      	ldr	r3, [r7, #4]
   81aba:	f003 031f 	and.w	r3, r3, #31
   81abe:	2201      	movs	r2, #1
   81ac0:	fa02 f303 	lsl.w	r3, r2, r3
   81ac4:	4619      	mov	r1, r3
   81ac6:	683b      	ldr	r3, [r7, #0]
   81ac8:	f003 0301 	and.w	r3, r3, #1
   81acc:	461a      	mov	r2, r3
   81ace:	68f8      	ldr	r0, [r7, #12]
   81ad0:	4b29      	ldr	r3, [pc, #164]	; (81b78 <pio_configure_pin+0x118>)
   81ad2:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   81ad4:	e047      	b.n	81b66 <pio_configure_pin+0x106>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81ad6:	687b      	ldr	r3, [r7, #4]
   81ad8:	f003 031f 	and.w	r3, r3, #31
   81adc:	2201      	movs	r2, #1
   81ade:	fa02 f303 	lsl.w	r3, r2, r3
   81ae2:	461a      	mov	r2, r3
   81ae4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81ae8:	68f8      	ldr	r0, [r7, #12]
   81aea:	4b22      	ldr	r3, [pc, #136]	; (81b74 <pio_configure_pin+0x114>)
   81aec:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   81aee:	687b      	ldr	r3, [r7, #4]
   81af0:	f003 031f 	and.w	r3, r3, #31
   81af4:	2201      	movs	r2, #1
   81af6:	fa02 f303 	lsl.w	r3, r2, r3
   81afa:	4619      	mov	r1, r3
   81afc:	683b      	ldr	r3, [r7, #0]
   81afe:	f003 0301 	and.w	r3, r3, #1
   81b02:	461a      	mov	r2, r3
   81b04:	68f8      	ldr	r0, [r7, #12]
   81b06:	4b1c      	ldr	r3, [pc, #112]	; (81b78 <pio_configure_pin+0x118>)
   81b08:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   81b0a:	e02c      	b.n	81b66 <pio_configure_pin+0x106>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81b0c:	687b      	ldr	r3, [r7, #4]
   81b0e:	f003 031f 	and.w	r3, r3, #31
   81b12:	2201      	movs	r2, #1
   81b14:	fa02 f303 	lsl.w	r3, r2, r3
   81b18:	683a      	ldr	r2, [r7, #0]
   81b1a:	4619      	mov	r1, r3
   81b1c:	68f8      	ldr	r0, [r7, #12]
   81b1e:	4b17      	ldr	r3, [pc, #92]	; (81b7c <pio_configure_pin+0x11c>)
   81b20:	4798      	blx	r3
		break;
   81b22:	e020      	b.n	81b66 <pio_configure_pin+0x106>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81b24:	687b      	ldr	r3, [r7, #4]
   81b26:	f003 031f 	and.w	r3, r3, #31
   81b2a:	2201      	movs	r2, #1
   81b2c:	fa02 f303 	lsl.w	r3, r2, r3
   81b30:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81b32:	683b      	ldr	r3, [r7, #0]
   81b34:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81b38:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81b3c:	bf0c      	ite	eq
   81b3e:	2301      	moveq	r3, #1
   81b40:	2300      	movne	r3, #0
   81b42:	b2db      	uxtb	r3, r3
   81b44:	4618      	mov	r0, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   81b46:	683b      	ldr	r3, [r7, #0]
   81b48:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81b4a:	f003 0201 	and.w	r2, r3, #1
   81b4e:	683b      	ldr	r3, [r7, #0]
   81b50:	f003 0301 	and.w	r3, r3, #1
   81b54:	9300      	str	r3, [sp, #0]
   81b56:	4613      	mov	r3, r2
   81b58:	4602      	mov	r2, r0
   81b5a:	68f8      	ldr	r0, [r7, #12]
   81b5c:	4c08      	ldr	r4, [pc, #32]	; (81b80 <pio_configure_pin+0x120>)
   81b5e:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81b60:	e001      	b.n	81b66 <pio_configure_pin+0x106>

	default:
		return 0;
   81b62:	2300      	movs	r3, #0
   81b64:	e000      	b.n	81b68 <pio_configure_pin+0x108>
	}

	return 1;
   81b66:	2301      	movs	r3, #1
}
   81b68:	4618      	mov	r0, r3
   81b6a:	3714      	adds	r7, #20
   81b6c:	46bd      	mov	sp, r7
   81b6e:	bd90      	pop	{r4, r7, pc}
   81b70:	00081c59 	.word	0x00081c59
   81b74:	0008180f 	.word	0x0008180f
   81b78:	000817e5 	.word	0x000817e5
   81b7c:	0008188d 	.word	0x0008188d
   81b80:	0008190d 	.word	0x0008190d

00081b84 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   81b84:	b590      	push	{r4, r7, lr}
   81b86:	b087      	sub	sp, #28
   81b88:	af02      	add	r7, sp, #8
   81b8a:	60f8      	str	r0, [r7, #12]
   81b8c:	60b9      	str	r1, [r7, #8]
   81b8e:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81b90:	687b      	ldr	r3, [r7, #4]
   81b92:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   81b96:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81b9a:	d02e      	beq.n	81bfa <pio_configure_pin_group+0x76>
   81b9c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81ba0:	d806      	bhi.n	81bb0 <pio_configure_pin_group+0x2c>
   81ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81ba6:	d00a      	beq.n	81bbe <pio_configure_pin_group+0x3a>
   81ba8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81bac:	d016      	beq.n	81bdc <pio_configure_pin_group+0x58>
   81bae:	e043      	b.n	81c38 <pio_configure_pin_group+0xb4>
   81bb0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81bb4:	d027      	beq.n	81c06 <pio_configure_pin_group+0x82>
   81bb6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81bba:	d024      	beq.n	81c06 <pio_configure_pin_group+0x82>
   81bbc:	e03c      	b.n	81c38 <pio_configure_pin_group+0xb4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81bbe:	68ba      	ldr	r2, [r7, #8]
   81bc0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81bc4:	68f8      	ldr	r0, [r7, #12]
   81bc6:	4b20      	ldr	r3, [pc, #128]	; (81c48 <pio_configure_pin_group+0xc4>)
   81bc8:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   81bca:	687b      	ldr	r3, [r7, #4]
   81bcc:	f003 0301 	and.w	r3, r3, #1
   81bd0:	461a      	mov	r2, r3
   81bd2:	68b9      	ldr	r1, [r7, #8]
   81bd4:	68f8      	ldr	r0, [r7, #12]
   81bd6:	4b1d      	ldr	r3, [pc, #116]	; (81c4c <pio_configure_pin_group+0xc8>)
   81bd8:	4798      	blx	r3
		break;
   81bda:	e02f      	b.n	81c3c <pio_configure_pin_group+0xb8>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81bdc:	68ba      	ldr	r2, [r7, #8]
   81bde:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81be2:	68f8      	ldr	r0, [r7, #12]
   81be4:	4b18      	ldr	r3, [pc, #96]	; (81c48 <pio_configure_pin_group+0xc4>)
   81be6:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   81be8:	687b      	ldr	r3, [r7, #4]
   81bea:	f003 0301 	and.w	r3, r3, #1
   81bee:	461a      	mov	r2, r3
   81bf0:	68b9      	ldr	r1, [r7, #8]
   81bf2:	68f8      	ldr	r0, [r7, #12]
   81bf4:	4b15      	ldr	r3, [pc, #84]	; (81c4c <pio_configure_pin_group+0xc8>)
   81bf6:	4798      	blx	r3
		break;
   81bf8:	e020      	b.n	81c3c <pio_configure_pin_group+0xb8>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   81bfa:	687a      	ldr	r2, [r7, #4]
   81bfc:	68b9      	ldr	r1, [r7, #8]
   81bfe:	68f8      	ldr	r0, [r7, #12]
   81c00:	4b13      	ldr	r3, [pc, #76]	; (81c50 <pio_configure_pin_group+0xcc>)
   81c02:	4798      	blx	r3
		break;
   81c04:	e01a      	b.n	81c3c <pio_configure_pin_group+0xb8>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81c06:	687b      	ldr	r3, [r7, #4]
   81c08:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   81c0c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81c10:	bf0c      	ite	eq
   81c12:	2301      	moveq	r3, #1
   81c14:	2300      	movne	r3, #0
   81c16:	b2db      	uxtb	r3, r3
   81c18:	4619      	mov	r1, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   81c1a:	687b      	ldr	r3, [r7, #4]
   81c1c:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, ul_mask,
   81c1e:	f003 0201 	and.w	r2, r3, #1
   81c22:	687b      	ldr	r3, [r7, #4]
   81c24:	f003 0301 	and.w	r3, r3, #1
   81c28:	9300      	str	r3, [sp, #0]
   81c2a:	4613      	mov	r3, r2
   81c2c:	460a      	mov	r2, r1
   81c2e:	68b9      	ldr	r1, [r7, #8]
   81c30:	68f8      	ldr	r0, [r7, #12]
   81c32:	4c08      	ldr	r4, [pc, #32]	; (81c54 <pio_configure_pin_group+0xd0>)
   81c34:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81c36:	e001      	b.n	81c3c <pio_configure_pin_group+0xb8>

	default:
		return 0;
   81c38:	2300      	movs	r3, #0
   81c3a:	e000      	b.n	81c3e <pio_configure_pin_group+0xba>
	}

	return 1;
   81c3c:	2301      	movs	r3, #1
}
   81c3e:	4618      	mov	r0, r3
   81c40:	3714      	adds	r7, #20
   81c42:	46bd      	mov	sp, r7
   81c44:	bd90      	pop	{r4, r7, pc}
   81c46:	bf00      	nop
   81c48:	0008180f 	.word	0x0008180f
   81c4c:	000817e5 	.word	0x000817e5
   81c50:	0008188d 	.word	0x0008188d
   81c54:	0008190d 	.word	0x0008190d

00081c58 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
   81c58:	b480      	push	{r7}
   81c5a:	b085      	sub	sp, #20
   81c5c:	af00      	add	r7, sp, #0
   81c5e:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81c60:	687b      	ldr	r3, [r7, #4]
   81c62:	095b      	lsrs	r3, r3, #5
   81c64:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81c68:	f203 7306 	addw	r3, r3, #1798	; 0x706
   81c6c:	025b      	lsls	r3, r3, #9
   81c6e:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
   81c70:	68fb      	ldr	r3, [r7, #12]
}
   81c72:	4618      	mov	r0, r3
   81c74:	3714      	adds	r7, #20
   81c76:	46bd      	mov	sp, r7
   81c78:	bc80      	pop	{r7}
   81c7a:	4770      	bx	lr

00081c7c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81c7c:	b580      	push	{r7, lr}
   81c7e:	b084      	sub	sp, #16
   81c80:	af00      	add	r7, sp, #0
   81c82:	6078      	str	r0, [r7, #4]
   81c84:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81c86:	6878      	ldr	r0, [r7, #4]
   81c88:	4b26      	ldr	r3, [pc, #152]	; (81d24 <pio_handler_process+0xa8>)
   81c8a:	4798      	blx	r3
   81c8c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   81c8e:	6878      	ldr	r0, [r7, #4]
   81c90:	4b25      	ldr	r3, [pc, #148]	; (81d28 <pio_handler_process+0xac>)
   81c92:	4798      	blx	r3
   81c94:	4602      	mov	r2, r0
   81c96:	68fb      	ldr	r3, [r7, #12]
   81c98:	4013      	ands	r3, r2
   81c9a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   81c9c:	68fb      	ldr	r3, [r7, #12]
   81c9e:	2b00      	cmp	r3, #0
   81ca0:	d03c      	beq.n	81d1c <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
   81ca2:	2300      	movs	r3, #0
   81ca4:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   81ca6:	e034      	b.n	81d12 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   81ca8:	4a20      	ldr	r2, [pc, #128]	; (81d2c <pio_handler_process+0xb0>)
   81caa:	68bb      	ldr	r3, [r7, #8]
   81cac:	011b      	lsls	r3, r3, #4
   81cae:	4413      	add	r3, r2
   81cb0:	681b      	ldr	r3, [r3, #0]
   81cb2:	683a      	ldr	r2, [r7, #0]
   81cb4:	429a      	cmp	r2, r3
   81cb6:	d126      	bne.n	81d06 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81cb8:	4a1c      	ldr	r2, [pc, #112]	; (81d2c <pio_handler_process+0xb0>)
   81cba:	68bb      	ldr	r3, [r7, #8]
   81cbc:	011b      	lsls	r3, r3, #4
   81cbe:	4413      	add	r3, r2
   81cc0:	3304      	adds	r3, #4
   81cc2:	681a      	ldr	r2, [r3, #0]
   81cc4:	68fb      	ldr	r3, [r7, #12]
   81cc6:	4013      	ands	r3, r2
   81cc8:	2b00      	cmp	r3, #0
   81cca:	d01c      	beq.n	81d06 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81ccc:	4a17      	ldr	r2, [pc, #92]	; (81d2c <pio_handler_process+0xb0>)
   81cce:	68bb      	ldr	r3, [r7, #8]
   81cd0:	011b      	lsls	r3, r3, #4
   81cd2:	4413      	add	r3, r2
   81cd4:	330c      	adds	r3, #12
   81cd6:	681b      	ldr	r3, [r3, #0]
   81cd8:	4914      	ldr	r1, [pc, #80]	; (81d2c <pio_handler_process+0xb0>)
   81cda:	68ba      	ldr	r2, [r7, #8]
   81cdc:	0112      	lsls	r2, r2, #4
   81cde:	440a      	add	r2, r1
   81ce0:	6810      	ldr	r0, [r2, #0]
   81ce2:	4912      	ldr	r1, [pc, #72]	; (81d2c <pio_handler_process+0xb0>)
   81ce4:	68ba      	ldr	r2, [r7, #8]
   81ce6:	0112      	lsls	r2, r2, #4
   81ce8:	440a      	add	r2, r1
   81cea:	3204      	adds	r2, #4
   81cec:	6812      	ldr	r2, [r2, #0]
   81cee:	4611      	mov	r1, r2
   81cf0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   81cf2:	4a0e      	ldr	r2, [pc, #56]	; (81d2c <pio_handler_process+0xb0>)
   81cf4:	68bb      	ldr	r3, [r7, #8]
   81cf6:	011b      	lsls	r3, r3, #4
   81cf8:	4413      	add	r3, r2
   81cfa:	3304      	adds	r3, #4
   81cfc:	681b      	ldr	r3, [r3, #0]
   81cfe:	43db      	mvns	r3, r3
   81d00:	68fa      	ldr	r2, [r7, #12]
   81d02:	4013      	ands	r3, r2
   81d04:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   81d06:	68bb      	ldr	r3, [r7, #8]
   81d08:	3301      	adds	r3, #1
   81d0a:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
   81d0c:	68bb      	ldr	r3, [r7, #8]
   81d0e:	2b06      	cmp	r3, #6
   81d10:	d803      	bhi.n	81d1a <pio_handler_process+0x9e>
		while (status != 0) {
   81d12:	68fb      	ldr	r3, [r7, #12]
   81d14:	2b00      	cmp	r3, #0
   81d16:	d1c7      	bne.n	81ca8 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   81d18:	e000      	b.n	81d1c <pio_handler_process+0xa0>
				break;
   81d1a:	bf00      	nop
}
   81d1c:	bf00      	nop
   81d1e:	3710      	adds	r7, #16
   81d20:	46bd      	mov	sp, r7
   81d22:	bd80      	pop	{r7, pc}
   81d24:	000819a5 	.word	0x000819a5
   81d28:	000819bb 	.word	0x000819bb
   81d2c:	20000c94 	.word	0x20000c94

00081d30 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81d30:	b580      	push	{r7, lr}
   81d32:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   81d34:	210a      	movs	r1, #10
   81d36:	4802      	ldr	r0, [pc, #8]	; (81d40 <PIOA_Handler+0x10>)
   81d38:	4b02      	ldr	r3, [pc, #8]	; (81d44 <PIOA_Handler+0x14>)
   81d3a:	4798      	blx	r3
}
   81d3c:	bf00      	nop
   81d3e:	bd80      	pop	{r7, pc}
   81d40:	400e0c00 	.word	0x400e0c00
   81d44:	00081c7d 	.word	0x00081c7d

00081d48 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81d48:	b580      	push	{r7, lr}
   81d4a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   81d4c:	210b      	movs	r1, #11
   81d4e:	4802      	ldr	r0, [pc, #8]	; (81d58 <PIOB_Handler+0x10>)
   81d50:	4b02      	ldr	r3, [pc, #8]	; (81d5c <PIOB_Handler+0x14>)
   81d52:	4798      	blx	r3
}
   81d54:	bf00      	nop
   81d56:	bd80      	pop	{r7, pc}
   81d58:	400e0e00 	.word	0x400e0e00
   81d5c:	00081c7d 	.word	0x00081c7d

00081d60 <pmc_switch_mck_to_mainck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
   81d60:	b480      	push	{r7}
   81d62:	b085      	sub	sp, #20
   81d64:	af00      	add	r7, sp, #0
   81d66:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81d68:	4b1c      	ldr	r3, [pc, #112]	; (81ddc <pmc_switch_mck_to_mainck+0x7c>)
   81d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81d6c:	f023 0303 	bic.w	r3, r3, #3
   81d70:	4a1a      	ldr	r2, [pc, #104]	; (81ddc <pmc_switch_mck_to_mainck+0x7c>)
   81d72:	f043 0301 	orr.w	r3, r3, #1
   81d76:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81d78:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81d7c:	60fb      	str	r3, [r7, #12]
   81d7e:	e007      	b.n	81d90 <pmc_switch_mck_to_mainck+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81d80:	68fb      	ldr	r3, [r7, #12]
   81d82:	2b00      	cmp	r3, #0
   81d84:	d101      	bne.n	81d8a <pmc_switch_mck_to_mainck+0x2a>
			return 1;
   81d86:	2301      	movs	r3, #1
   81d88:	e023      	b.n	81dd2 <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   81d8a:	68fb      	ldr	r3, [r7, #12]
   81d8c:	3b01      	subs	r3, #1
   81d8e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81d90:	4b12      	ldr	r3, [pc, #72]	; (81ddc <pmc_switch_mck_to_mainck+0x7c>)
   81d92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81d94:	f003 0308 	and.w	r3, r3, #8
   81d98:	2b00      	cmp	r3, #0
   81d9a:	d0f1      	beq.n	81d80 <pmc_switch_mck_to_mainck+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81d9c:	4b0f      	ldr	r3, [pc, #60]	; (81ddc <pmc_switch_mck_to_mainck+0x7c>)
   81d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81da0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   81da4:	490d      	ldr	r1, [pc, #52]	; (81ddc <pmc_switch_mck_to_mainck+0x7c>)
   81da6:	687b      	ldr	r3, [r7, #4]
   81da8:	4313      	orrs	r3, r2
   81daa:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81dac:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81db0:	60fb      	str	r3, [r7, #12]
   81db2:	e007      	b.n	81dc4 <pmc_switch_mck_to_mainck+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81db4:	68fb      	ldr	r3, [r7, #12]
   81db6:	2b00      	cmp	r3, #0
   81db8:	d101      	bne.n	81dbe <pmc_switch_mck_to_mainck+0x5e>
			return 1;
   81dba:	2301      	movs	r3, #1
   81dbc:	e009      	b.n	81dd2 <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   81dbe:	68fb      	ldr	r3, [r7, #12]
   81dc0:	3b01      	subs	r3, #1
   81dc2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81dc4:	4b05      	ldr	r3, [pc, #20]	; (81ddc <pmc_switch_mck_to_mainck+0x7c>)
   81dc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81dc8:	f003 0308 	and.w	r3, r3, #8
   81dcc:	2b00      	cmp	r3, #0
   81dce:	d0f1      	beq.n	81db4 <pmc_switch_mck_to_mainck+0x54>
		}
	}

	return 0;
   81dd0:	2300      	movs	r3, #0
}
   81dd2:	4618      	mov	r0, r3
   81dd4:	3714      	adds	r7, #20
   81dd6:	46bd      	mov	sp, r7
   81dd8:	bc80      	pop	{r7}
   81dda:	4770      	bx	lr
   81ddc:	400e0400 	.word	0x400e0400

00081de0 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   81de0:	b480      	push	{r7}
   81de2:	b085      	sub	sp, #20
   81de4:	af00      	add	r7, sp, #0
   81de6:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81de8:	4b1c      	ldr	r3, [pc, #112]	; (81e5c <pmc_switch_mck_to_pllack+0x7c>)
   81dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81dec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   81df0:	491a      	ldr	r1, [pc, #104]	; (81e5c <pmc_switch_mck_to_pllack+0x7c>)
   81df2:	687b      	ldr	r3, [r7, #4]
   81df4:	4313      	orrs	r3, r2
   81df6:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81df8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81dfc:	60fb      	str	r3, [r7, #12]
   81dfe:	e007      	b.n	81e10 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81e00:	68fb      	ldr	r3, [r7, #12]
   81e02:	2b00      	cmp	r3, #0
   81e04:	d101      	bne.n	81e0a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   81e06:	2301      	movs	r3, #1
   81e08:	e023      	b.n	81e52 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   81e0a:	68fb      	ldr	r3, [r7, #12]
   81e0c:	3b01      	subs	r3, #1
   81e0e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81e10:	4b12      	ldr	r3, [pc, #72]	; (81e5c <pmc_switch_mck_to_pllack+0x7c>)
   81e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81e14:	f003 0308 	and.w	r3, r3, #8
   81e18:	2b00      	cmp	r3, #0
   81e1a:	d0f1      	beq.n	81e00 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81e1c:	4b0f      	ldr	r3, [pc, #60]	; (81e5c <pmc_switch_mck_to_pllack+0x7c>)
   81e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81e20:	f023 0303 	bic.w	r3, r3, #3
   81e24:	4a0d      	ldr	r2, [pc, #52]	; (81e5c <pmc_switch_mck_to_pllack+0x7c>)
   81e26:	f043 0302 	orr.w	r3, r3, #2
   81e2a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81e2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81e30:	60fb      	str	r3, [r7, #12]
   81e32:	e007      	b.n	81e44 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81e34:	68fb      	ldr	r3, [r7, #12]
   81e36:	2b00      	cmp	r3, #0
   81e38:	d101      	bne.n	81e3e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   81e3a:	2301      	movs	r3, #1
   81e3c:	e009      	b.n	81e52 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   81e3e:	68fb      	ldr	r3, [r7, #12]
   81e40:	3b01      	subs	r3, #1
   81e42:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81e44:	4b05      	ldr	r3, [pc, #20]	; (81e5c <pmc_switch_mck_to_pllack+0x7c>)
   81e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81e48:	f003 0308 	and.w	r3, r3, #8
   81e4c:	2b00      	cmp	r3, #0
   81e4e:	d0f1      	beq.n	81e34 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   81e50:	2300      	movs	r3, #0
}
   81e52:	4618      	mov	r0, r3
   81e54:	3714      	adds	r7, #20
   81e56:	46bd      	mov	sp, r7
   81e58:	bc80      	pop	{r7}
   81e5a:	4770      	bx	lr
   81e5c:	400e0400 	.word	0x400e0400

00081e60 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   81e60:	b480      	push	{r7}
   81e62:	b083      	sub	sp, #12
   81e64:	af00      	add	r7, sp, #0
   81e66:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   81e68:	687b      	ldr	r3, [r7, #4]
   81e6a:	2b01      	cmp	r3, #1
   81e6c:	d107      	bne.n	81e7e <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   81e6e:	4b08      	ldr	r3, [pc, #32]	; (81e90 <pmc_switch_sclk_to_32kxtal+0x30>)
   81e70:	689b      	ldr	r3, [r3, #8]
   81e72:	4a07      	ldr	r2, [pc, #28]	; (81e90 <pmc_switch_sclk_to_32kxtal+0x30>)
   81e74:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81e78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81e7c:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   81e7e:	4b04      	ldr	r3, [pc, #16]	; (81e90 <pmc_switch_sclk_to_32kxtal+0x30>)
   81e80:	4a04      	ldr	r2, [pc, #16]	; (81e94 <pmc_switch_sclk_to_32kxtal+0x34>)
   81e82:	601a      	str	r2, [r3, #0]
}
   81e84:	bf00      	nop
   81e86:	370c      	adds	r7, #12
   81e88:	46bd      	mov	sp, r7
   81e8a:	bc80      	pop	{r7}
   81e8c:	4770      	bx	lr
   81e8e:	bf00      	nop
   81e90:	400e1210 	.word	0x400e1210
   81e94:	a5000008 	.word	0xa5000008

00081e98 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   81e98:	b480      	push	{r7}
   81e9a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   81e9c:	4b09      	ldr	r3, [pc, #36]	; (81ec4 <pmc_osc_is_ready_32kxtal+0x2c>)
   81e9e:	695b      	ldr	r3, [r3, #20]
   81ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   81ea4:	2b00      	cmp	r3, #0
   81ea6:	d007      	beq.n	81eb8 <pmc_osc_is_ready_32kxtal+0x20>
   81ea8:	4b07      	ldr	r3, [pc, #28]	; (81ec8 <pmc_osc_is_ready_32kxtal+0x30>)
   81eaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
   81eb0:	2b00      	cmp	r3, #0
   81eb2:	d001      	beq.n	81eb8 <pmc_osc_is_ready_32kxtal+0x20>
   81eb4:	2301      	movs	r3, #1
   81eb6:	e000      	b.n	81eba <pmc_osc_is_ready_32kxtal+0x22>
   81eb8:	2300      	movs	r3, #0
}
   81eba:	4618      	mov	r0, r3
   81ebc:	46bd      	mov	sp, r7
   81ebe:	bc80      	pop	{r7}
   81ec0:	4770      	bx	lr
   81ec2:	bf00      	nop
   81ec4:	400e1210 	.word	0x400e1210
   81ec8:	400e0400 	.word	0x400e0400

00081ecc <pmc_osc_enable_fastrc>:
 * \brief Enable fast RC oscillator.
 *
 * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 */
void pmc_osc_enable_fastrc(uint32_t ul_rc)
{
   81ecc:	b480      	push	{r7}
   81ece:	b083      	sub	sp, #12
   81ed0:	af00      	add	r7, sp, #0
   81ed2:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   81ed4:	4b13      	ldr	r3, [pc, #76]	; (81f24 <pmc_osc_enable_fastrc+0x58>)
   81ed6:	6a1b      	ldr	r3, [r3, #32]
   81ed8:	4a12      	ldr	r2, [pc, #72]	; (81f24 <pmc_osc_enable_fastrc+0x58>)
   81eda:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81ede:	f043 0308 	orr.w	r3, r3, #8
   81ee2:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   81ee4:	bf00      	nop
   81ee6:	4b0f      	ldr	r3, [pc, #60]	; (81f24 <pmc_osc_enable_fastrc+0x58>)
   81ee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   81eee:	2b00      	cmp	r3, #0
   81ef0:	d0f9      	beq.n	81ee6 <pmc_osc_enable_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   81ef2:	4b0c      	ldr	r3, [pc, #48]	; (81f24 <pmc_osc_enable_fastrc+0x58>)
   81ef4:	6a1b      	ldr	r3, [r3, #32]
   81ef6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_rc;
   81efe:	687a      	ldr	r2, [r7, #4]
   81f00:	4313      	orrs	r3, r2
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   81f02:	4a08      	ldr	r2, [pc, #32]	; (81f24 <pmc_osc_enable_fastrc+0x58>)
			CKGR_MOR_KEY_PASSWD | ul_rc;
   81f04:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   81f08:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   81f0a:	bf00      	nop
   81f0c:	4b05      	ldr	r3, [pc, #20]	; (81f24 <pmc_osc_enable_fastrc+0x58>)
   81f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   81f14:	2b00      	cmp	r3, #0
   81f16:	d0f9      	beq.n	81f0c <pmc_osc_enable_fastrc+0x40>
}
   81f18:	bf00      	nop
   81f1a:	370c      	adds	r7, #12
   81f1c:	46bd      	mov	sp, r7
   81f1e:	bc80      	pop	{r7}
   81f20:	4770      	bx	lr
   81f22:	bf00      	nop
   81f24:	400e0400 	.word	0x400e0400

00081f28 <pmc_osc_is_ready_fastrc>:
 * \brief Check if the main fastrc is ready.
 *
 * \retval 0 Xtal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_fastrc(void)
{
   81f28:	b480      	push	{r7}
   81f2a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
   81f2c:	4b03      	ldr	r3, [pc, #12]	; (81f3c <pmc_osc_is_ready_fastrc+0x14>)
   81f2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
}
   81f34:	4618      	mov	r0, r3
   81f36:	46bd      	mov	sp, r7
   81f38:	bc80      	pop	{r7}
   81f3a:	4770      	bx	lr
   81f3c:	400e0400 	.word	0x400e0400

00081f40 <pmc_osc_enable_main_xtal>:
 * \brief Enable main XTAL oscillator.
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
   81f40:	b480      	push	{r7}
   81f42:	b085      	sub	sp, #20
   81f44:	af00      	add	r7, sp, #0
   81f46:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   81f48:	4b0f      	ldr	r3, [pc, #60]	; (81f88 <pmc_osc_enable_main_xtal+0x48>)
   81f4a:	6a1b      	ldr	r3, [r3, #32]
   81f4c:	60fb      	str	r3, [r7, #12]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   81f4e:	68fb      	ldr	r3, [r7, #12]
   81f50:	f023 0303 	bic.w	r3, r3, #3
   81f54:	60fb      	str	r3, [r7, #12]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   81f56:	687b      	ldr	r3, [r7, #4]
   81f58:	021b      	lsls	r3, r3, #8
   81f5a:	b29a      	uxth	r2, r3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81f5c:	68fb      	ldr	r3, [r7, #12]
   81f5e:	4313      	orrs	r3, r2
   81f60:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81f64:	f043 0301 	orr.w	r3, r3, #1
   81f68:	60fb      	str	r3, [r7, #12]
	PMC->CKGR_MOR = mor;
   81f6a:	4a07      	ldr	r2, [pc, #28]	; (81f88 <pmc_osc_enable_main_xtal+0x48>)
   81f6c:	68fb      	ldr	r3, [r7, #12]
   81f6e:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81f70:	bf00      	nop
   81f72:	4b05      	ldr	r3, [pc, #20]	; (81f88 <pmc_osc_enable_main_xtal+0x48>)
   81f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81f76:	f003 0301 	and.w	r3, r3, #1
   81f7a:	2b00      	cmp	r3, #0
   81f7c:	d0f9      	beq.n	81f72 <pmc_osc_enable_main_xtal+0x32>
}
   81f7e:	bf00      	nop
   81f80:	3714      	adds	r7, #20
   81f82:	46bd      	mov	sp, r7
   81f84:	bc80      	pop	{r7}
   81f86:	4770      	bx	lr
   81f88:	400e0400 	.word	0x400e0400

00081f8c <pmc_osc_bypass_main_xtal>:

/**
 * \brief Bypass main XTAL.
 */
void pmc_osc_bypass_main_xtal(void)
{
   81f8c:	b480      	push	{r7}
   81f8e:	b083      	sub	sp, #12
   81f90:	af00      	add	r7, sp, #0
	uint32_t mor = PMC->CKGR_MOR;
   81f92:	4b0a      	ldr	r3, [pc, #40]	; (81fbc <pmc_osc_bypass_main_xtal+0x30>)
   81f94:	6a1b      	ldr	r3, [r3, #32]
   81f96:	607b      	str	r3, [r7, #4]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   81f98:	687b      	ldr	r3, [r7, #4]
   81f9a:	f023 0303 	bic.w	r3, r3, #3
   81f9e:	607b      	str	r3, [r7, #4]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
   81fa0:	687b      	ldr	r3, [r7, #4]
   81fa2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81fa6:	f043 0302 	orr.w	r3, r3, #2
   81faa:	607b      	str	r3, [r7, #4]
	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
	PMC->CKGR_MOR = mor;
   81fac:	4a03      	ldr	r2, [pc, #12]	; (81fbc <pmc_osc_bypass_main_xtal+0x30>)
   81fae:	687b      	ldr	r3, [r7, #4]
   81fb0:	6213      	str	r3, [r2, #32]
	/* The MOSCXTS in PMC_SR is automatically set */
}
   81fb2:	bf00      	nop
   81fb4:	370c      	adds	r7, #12
   81fb6:	46bd      	mov	sp, r7
   81fb8:	bc80      	pop	{r7}
   81fba:	4770      	bx	lr
   81fbc:	400e0400 	.word	0x400e0400

00081fc0 <pmc_osc_is_bypassed_main_xtal>:
 * \brief Check if the main crystal is bypassed.
 *
 * \retval 0 Xtal is bypassed, otherwise not.
 */
uint32_t pmc_osc_is_bypassed_main_xtal(void)
{
   81fc0:	b480      	push	{r7}
   81fc2:	af00      	add	r7, sp, #0
	return (PMC->CKGR_MOR & CKGR_MOR_MOSCXTBY);
   81fc4:	4b03      	ldr	r3, [pc, #12]	; (81fd4 <pmc_osc_is_bypassed_main_xtal+0x14>)
   81fc6:	6a1b      	ldr	r3, [r3, #32]
   81fc8:	f003 0302 	and.w	r3, r3, #2
}
   81fcc:	4618      	mov	r0, r3
   81fce:	46bd      	mov	sp, r7
   81fd0:	bc80      	pop	{r7}
   81fd2:	4770      	bx	lr
   81fd4:	400e0400 	.word	0x400e0400

00081fd8 <pmc_osc_is_ready_main_xtal>:
 * \note If main crystal is bypassed, it's always ready.
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
   81fd8:	b480      	push	{r7}
   81fda:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   81fdc:	4b03      	ldr	r3, [pc, #12]	; (81fec <pmc_osc_is_ready_main_xtal+0x14>)
   81fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81fe0:	f003 0301 	and.w	r3, r3, #1
}
   81fe4:	4618      	mov	r0, r3
   81fe6:	46bd      	mov	sp, r7
   81fe8:	bc80      	pop	{r7}
   81fea:	4770      	bx	lr
   81fec:	400e0400 	.word	0x400e0400

00081ff0 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   81ff0:	b480      	push	{r7}
   81ff2:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81ff4:	4b03      	ldr	r3, [pc, #12]	; (82004 <pmc_osc_is_ready_mainck+0x14>)
   81ff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   81ffc:	4618      	mov	r0, r3
   81ffe:	46bd      	mov	sp, r7
   82000:	bc80      	pop	{r7}
   82002:	4770      	bx	lr
   82004:	400e0400 	.word	0x400e0400

00082008 <pmc_mainck_osc_select>:
 * \note This function will not enable/disable RC or Main Crystal.
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
   82008:	b480      	push	{r7}
   8200a:	b085      	sub	sp, #20
   8200c:	af00      	add	r7, sp, #0
   8200e:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   82010:	4b0c      	ldr	r3, [pc, #48]	; (82044 <pmc_mainck_osc_select+0x3c>)
   82012:	6a1b      	ldr	r3, [r3, #32]
   82014:	60fb      	str	r3, [r7, #12]
	if (ul_xtal_rc) {
   82016:	687b      	ldr	r3, [r7, #4]
   82018:	2b00      	cmp	r3, #0
   8201a:	d004      	beq.n	82026 <pmc_mainck_osc_select+0x1e>
		mor |=  CKGR_MOR_MOSCSEL;
   8201c:	68fb      	ldr	r3, [r7, #12]
   8201e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   82022:	60fb      	str	r3, [r7, #12]
   82024:	e003      	b.n	8202e <pmc_mainck_osc_select+0x26>
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   82026:	68fb      	ldr	r3, [r7, #12]
   82028:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   8202c:	60fb      	str	r3, [r7, #12]
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   8202e:	4a05      	ldr	r2, [pc, #20]	; (82044 <pmc_mainck_osc_select+0x3c>)
   82030:	68fb      	ldr	r3, [r7, #12]
   82032:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82036:	6213      	str	r3, [r2, #32]
}
   82038:	bf00      	nop
   8203a:	3714      	adds	r7, #20
   8203c:	46bd      	mov	sp, r7
   8203e:	bc80      	pop	{r7}
   82040:	4770      	bx	lr
   82042:	bf00      	nop
   82044:	400e0400 	.word	0x400e0400

00082048 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   82048:	b480      	push	{r7}
   8204a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8204c:	4b03      	ldr	r3, [pc, #12]	; (8205c <pmc_disable_pllack+0x14>)
   8204e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82052:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   82054:	bf00      	nop
   82056:	46bd      	mov	sp, r7
   82058:	bc80      	pop	{r7}
   8205a:	4770      	bx	lr
   8205c:	400e0400 	.word	0x400e0400

00082060 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   82060:	b480      	push	{r7}
   82062:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82064:	4b03      	ldr	r3, [pc, #12]	; (82074 <pmc_is_locked_pllack+0x14>)
   82066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82068:	f003 0302 	and.w	r3, r3, #2
}
   8206c:	4618      	mov	r0, r3
   8206e:	46bd      	mov	sp, r7
   82070:	bc80      	pop	{r7}
   82072:	4770      	bx	lr
   82074:	400e0400 	.word	0x400e0400

00082078 <pmc_disable_upll_clock>:

/**
 * \brief Disable UPLL clock.
 */
void pmc_disable_upll_clock(void)
{
   82078:	b480      	push	{r7}
   8207a:	af00      	add	r7, sp, #0
	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   8207c:	4b04      	ldr	r3, [pc, #16]	; (82090 <pmc_disable_upll_clock+0x18>)
   8207e:	69db      	ldr	r3, [r3, #28]
   82080:	4a03      	ldr	r2, [pc, #12]	; (82090 <pmc_disable_upll_clock+0x18>)
   82082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   82086:	61d3      	str	r3, [r2, #28]
}
   82088:	bf00      	nop
   8208a:	46bd      	mov	sp, r7
   8208c:	bc80      	pop	{r7}
   8208e:	4770      	bx	lr
   82090:	400e0400 	.word	0x400e0400

00082094 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   82094:	b480      	push	{r7}
   82096:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   82098:	4b03      	ldr	r3, [pc, #12]	; (820a8 <pmc_is_locked_upll+0x14>)
   8209a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8209c:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   820a0:	4618      	mov	r0, r3
   820a2:	46bd      	mov	sp, r7
   820a4:	bc80      	pop	{r7}
   820a6:	4770      	bx	lr
   820a8:	400e0400 	.word	0x400e0400

000820ac <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   820ac:	b480      	push	{r7}
   820ae:	b083      	sub	sp, #12
   820b0:	af00      	add	r7, sp, #0
   820b2:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   820b4:	687b      	ldr	r3, [r7, #4]
   820b6:	2b1d      	cmp	r3, #29
   820b8:	d901      	bls.n	820be <pmc_enable_periph_clk+0x12>
		return 1;
   820ba:	2301      	movs	r3, #1
   820bc:	e015      	b.n	820ea <pmc_enable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   820be:	687b      	ldr	r3, [r7, #4]
   820c0:	2b1f      	cmp	r3, #31
   820c2:	d811      	bhi.n	820e8 <pmc_enable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   820c4:	4b0b      	ldr	r3, [pc, #44]	; (820f4 <pmc_enable_periph_clk+0x48>)
   820c6:	699a      	ldr	r2, [r3, #24]
   820c8:	2101      	movs	r1, #1
   820ca:	687b      	ldr	r3, [r7, #4]
   820cc:	fa01 f303 	lsl.w	r3, r1, r3
   820d0:	401a      	ands	r2, r3
   820d2:	2101      	movs	r1, #1
   820d4:	687b      	ldr	r3, [r7, #4]
   820d6:	fa01 f303 	lsl.w	r3, r1, r3
   820da:	429a      	cmp	r2, r3
   820dc:	d004      	beq.n	820e8 <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER0 = 1 << ul_id;
   820de:	2201      	movs	r2, #1
   820e0:	687b      	ldr	r3, [r7, #4]
   820e2:	409a      	lsls	r2, r3
   820e4:	4b03      	ldr	r3, [pc, #12]	; (820f4 <pmc_enable_periph_clk+0x48>)
   820e6:	611a      	str	r2, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   820e8:	2300      	movs	r3, #0
}
   820ea:	4618      	mov	r0, r3
   820ec:	370c      	adds	r7, #12
   820ee:	46bd      	mov	sp, r7
   820f0:	bc80      	pop	{r7}
   820f2:	4770      	bx	lr
   820f4:	400e0400 	.word	0x400e0400

000820f8 <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
   820f8:	b480      	push	{r7}
   820fa:	b083      	sub	sp, #12
   820fc:	af00      	add	r7, sp, #0
   820fe:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   82100:	687b      	ldr	r3, [r7, #4]
   82102:	2b1d      	cmp	r3, #29
   82104:	d901      	bls.n	8210a <pmc_disable_periph_clk+0x12>
		return 1;
   82106:	2301      	movs	r3, #1
   82108:	e015      	b.n	82136 <pmc_disable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   8210a:	687b      	ldr	r3, [r7, #4]
   8210c:	2b1f      	cmp	r3, #31
   8210e:	d811      	bhi.n	82134 <pmc_disable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   82110:	4b0b      	ldr	r3, [pc, #44]	; (82140 <pmc_disable_periph_clk+0x48>)
   82112:	699a      	ldr	r2, [r3, #24]
   82114:	2101      	movs	r1, #1
   82116:	687b      	ldr	r3, [r7, #4]
   82118:	fa01 f303 	lsl.w	r3, r1, r3
   8211c:	401a      	ands	r2, r3
   8211e:	2101      	movs	r1, #1
   82120:	687b      	ldr	r3, [r7, #4]
   82122:	fa01 f303 	lsl.w	r3, r1, r3
   82126:	429a      	cmp	r2, r3
   82128:	d104      	bne.n	82134 <pmc_disable_periph_clk+0x3c>
			PMC->PMC_PCDR0 = 1 << ul_id;
   8212a:	2201      	movs	r2, #1
   8212c:	687b      	ldr	r3, [r7, #4]
   8212e:	409a      	lsls	r2, r3
   82130:	4b03      	ldr	r3, [pc, #12]	; (82140 <pmc_disable_periph_clk+0x48>)
   82132:	615a      	str	r2, [r3, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   82134:	2300      	movs	r3, #0
}
   82136:	4618      	mov	r0, r3
   82138:	370c      	adds	r7, #12
   8213a:	46bd      	mov	sp, r7
   8213c:	bc80      	pop	{r7}
   8213e:	4770      	bx	lr
   82140:	400e0400 	.word	0x400e0400

00082144 <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
   82144:	b480      	push	{r7}
   82146:	b083      	sub	sp, #12
   82148:	af00      	add	r7, sp, #0
   8214a:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   8214c:	4a05      	ldr	r2, [pc, #20]	; (82164 <pmc_enable_pck+0x20>)
   8214e:	f44f 7180 	mov.w	r1, #256	; 0x100
   82152:	687b      	ldr	r3, [r7, #4]
   82154:	fa01 f303 	lsl.w	r3, r1, r3
   82158:	6013      	str	r3, [r2, #0]
}
   8215a:	bf00      	nop
   8215c:	370c      	adds	r7, #12
   8215e:	46bd      	mov	sp, r7
   82160:	bc80      	pop	{r7}
   82162:	4770      	bx	lr
   82164:	400e0400 	.word	0x400e0400

00082168 <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
   82168:	b480      	push	{r7}
   8216a:	b083      	sub	sp, #12
   8216c:	af00      	add	r7, sp, #0
   8216e:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   82170:	687b      	ldr	r3, [r7, #4]
   82172:	f3c3 0312 	ubfx	r3, r3, #0, #19
   82176:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
   82178:	4b05      	ldr	r3, [pc, #20]	; (82190 <pmc_set_fast_startup_input+0x28>)
   8217a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8217c:	4904      	ldr	r1, [pc, #16]	; (82190 <pmc_set_fast_startup_input+0x28>)
   8217e:	687b      	ldr	r3, [r7, #4]
   82180:	4313      	orrs	r3, r2
   82182:	670b      	str	r3, [r1, #112]	; 0x70
}
   82184:	bf00      	nop
   82186:	370c      	adds	r7, #12
   82188:	46bd      	mov	sp, r7
   8218a:	bc80      	pop	{r7}
   8218c:	4770      	bx	lr
   8218e:	bf00      	nop
   82190:	400e0400 	.word	0x400e0400

00082194 <pmc_enable_waitmode>:
/**
 * \brief Enable Wait Mode. Enter condition: WFE + (SLEEPDEEP bit = 0) +
 * (LPM bit = 1)
 */
void pmc_enable_waitmode(void)
{
   82194:	b480      	push	{r7}
   82196:	b083      	sub	sp, #12
   82198:	af00      	add	r7, sp, #0
	uint32_t i;

	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
   8219a:	4b12      	ldr	r3, [pc, #72]	; (821e4 <pmc_enable_waitmode+0x50>)
   8219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   8219e:	4a11      	ldr	r2, [pc, #68]	; (821e4 <pmc_enable_waitmode+0x50>)
   821a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   821a4:	6713      	str	r3, [r2, #112]	; 0x70
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
   821a6:	4b10      	ldr	r3, [pc, #64]	; (821e8 <pmc_enable_waitmode+0x54>)
   821a8:	691b      	ldr	r3, [r3, #16]
   821aa:	4a0f      	ldr	r2, [pc, #60]	; (821e8 <pmc_enable_waitmode+0x54>)
   821ac:	f023 0304 	bic.w	r3, r3, #4
   821b0:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfe");
   821b2:	bf20      	wfe
	__WFE();

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
   821b4:	2300      	movs	r3, #0
   821b6:	607b      	str	r3, [r7, #4]
   821b8:	e003      	b.n	821c2 <pmc_enable_waitmode+0x2e>
  __ASM volatile ("nop");
   821ba:	bf00      	nop
   821bc:	687b      	ldr	r3, [r7, #4]
   821be:	3301      	adds	r3, #1
   821c0:	607b      	str	r3, [r7, #4]
   821c2:	687b      	ldr	r3, [r7, #4]
   821c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   821c8:	d3f7      	bcc.n	821ba <pmc_enable_waitmode+0x26>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
   821ca:	bf00      	nop
   821cc:	4b05      	ldr	r3, [pc, #20]	; (821e4 <pmc_enable_waitmode+0x50>)
   821ce:	6a1b      	ldr	r3, [r3, #32]
   821d0:	f003 0308 	and.w	r3, r3, #8
   821d4:	2b00      	cmp	r3, #0
   821d6:	d0f9      	beq.n	821cc <pmc_enable_waitmode+0x38>

}
   821d8:	bf00      	nop
   821da:	370c      	adds	r7, #12
   821dc:	46bd      	mov	sp, r7
   821de:	bc80      	pop	{r7}
   821e0:	4770      	bx	lr
   821e2:	bf00      	nop
   821e4:	400e0400 	.word	0x400e0400
   821e8:	e000ed00 	.word	0xe000ed00

000821ec <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
   821ec:	b5b0      	push	{r4, r5, r7, lr}
   821ee:	b09c      	sub	sp, #112	; 0x70
   821f0:	af00      	add	r7, sp, #0
   821f2:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
   821f4:	687b      	ldr	r3, [r7, #4]
   821f6:	3b01      	subs	r3, #1
   821f8:	2b04      	cmp	r3, #4
   821fa:	f200 81d9 	bhi.w	825b0 <pmc_sleep+0x3c4>
   821fe:	a201      	add	r2, pc, #4	; (adr r2, 82204 <pmc_sleep+0x18>)
   82200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82204:	00082219 	.word	0x00082219
   82208:	00082219 	.word	0x00082219
   8220c:	0008224b 	.word	0x0008224b
   82210:	0008224b 	.word	0x0008224b
   82214:	00082595 	.word	0x00082595
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
		cpu_irq_enable();
		__WFI();
		break;
#else
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
   82218:	4b80      	ldr	r3, [pc, #512]	; (8241c <pmc_sleep+0x230>)
   8221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   8221c:	4a7f      	ldr	r2, [pc, #508]	; (8241c <pmc_sleep+0x230>)
   8221e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   82222:	6713      	str	r3, [r2, #112]	; 0x70
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
   82224:	4b7e      	ldr	r3, [pc, #504]	; (82420 <pmc_sleep+0x234>)
   82226:	691b      	ldr	r3, [r3, #16]
   82228:	4a7d      	ldr	r2, [pc, #500]	; (82420 <pmc_sleep+0x234>)
   8222a:	f023 0304 	bic.w	r3, r3, #4
   8222e:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   82230:	4b7c      	ldr	r3, [pc, #496]	; (82424 <pmc_sleep+0x238>)
   82232:	2201      	movs	r2, #1
   82234:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   82236:	f3bf 8f5f 	dmb	sy
   8223a:	b662      	cpsie	i
		if (sleep_mode == SAM_PM_SMODE_SLEEP_WFI)
   8223c:	687b      	ldr	r3, [r7, #4]
   8223e:	2b02      	cmp	r3, #2
   82240:	d101      	bne.n	82246 <pmc_sleep+0x5a>
  __ASM volatile ("wfi");
   82242:	bf30      	wfi
			__WFI();
		else
			__WFE();
		break;
   82244:	e1b4      	b.n	825b0 <pmc_sleep+0x3c4>
  __ASM volatile ("wfe");
   82246:	bf20      	wfe
   82248:	e1b2      	b.n	825b0 <pmc_sleep+0x3c4>
  __ASM volatile ("cpsid i");
   8224a:	b672      	cpsid	i
  __ASM volatile ("dmb");
   8224c:	f3bf 8f5f 	dmb	sy
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
#endif
		cpu_irq_disable();
   82250:	4b74      	ldr	r3, [pc, #464]	; (82424 <pmc_sleep+0x238>)
   82252:	2200      	movs	r2, #0
   82254:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
   82256:	4b74      	ldr	r3, [pc, #464]	; (82428 <pmc_sleep+0x23c>)
   82258:	2201      	movs	r2, #1
   8225a:	701a      	strb	r2, [r3, #0]
		/* Backup the sub-system 1 status and stop sub-system 1 */
		uint32_t cpclk_backup = PMC->PMC_SCSR &
				(PMC_SCSR_CPCK | PMC_SCSR_CPBMCK);
		PMC->PMC_SCDR = cpclk_backup | PMC_SCDR_CPKEY_PASSWD;
#endif
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
   8225c:	687b      	ldr	r3, [r7, #4]
   8225e:	2b04      	cmp	r3, #4
   82260:	bf0c      	ite	eq
   82262:	2301      	moveq	r3, #1
   82264:	2300      	movne	r3, #0
   82266:	b2da      	uxtb	r2, r3
   82268:	f107 0320 	add.w	r3, r7, #32
   8226c:	64fb      	str	r3, [r7, #76]	; 0x4c
   8226e:	f107 031c 	add.w	r3, r7, #28
   82272:	64bb      	str	r3, [r7, #72]	; 0x48
   82274:	f107 0318 	add.w	r3, r7, #24
   82278:	647b      	str	r3, [r7, #68]	; 0x44
   8227a:	f107 0314 	add.w	r3, r7, #20
   8227e:	643b      	str	r3, [r7, #64]	; 0x40
   82280:	f107 0310 	add.w	r3, r7, #16
   82284:	63fb      	str	r3, [r7, #60]	; 0x3c
   82286:	f107 030c 	add.w	r3, r7, #12
   8228a:	63bb      	str	r3, [r7, #56]	; 0x38
   8228c:	4613      	mov	r3, r2
   8228e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t mor  = PMC->CKGR_MOR;
   82292:	4b62      	ldr	r3, [pc, #392]	; (8241c <pmc_sleep+0x230>)
   82294:	6a1b      	ldr	r3, [r3, #32]
   82296:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t mckr = PMC->PMC_MCKR;
   82298:	4b60      	ldr	r3, [pc, #384]	; (8241c <pmc_sleep+0x230>)
   8229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8229c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fmr  = EFC0->EEFC_FMR;
   8229e:	4b63      	ldr	r3, [pc, #396]	; (8242c <pmc_sleep+0x240>)
   822a0:	681b      	ldr	r3, [r3, #0]
   822a2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fmr1 = EFC1->EEFC_FMR;
   822a4:	4b62      	ldr	r3, [pc, #392]	; (82430 <pmc_sleep+0x244>)
   822a6:	681b      	ldr	r3, [r3, #0]
   822a8:	627b      	str	r3, [r7, #36]	; 0x24
	if (p_osc_setting) {
   822aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   822ac:	2b00      	cmp	r3, #0
   822ae:	d002      	beq.n	822b6 <pmc_sleep+0xca>
		*p_osc_setting = mor;
   822b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   822b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   822b4:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
   822b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   822b8:	2b00      	cmp	r3, #0
   822ba:	d003      	beq.n	822c4 <pmc_sleep+0xd8>
		*p_pll0_setting = PMC->CKGR_PLLAR;
   822bc:	4b57      	ldr	r3, [pc, #348]	; (8241c <pmc_sleep+0x230>)
   822be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   822c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   822c2:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
   822c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   822c6:	2b00      	cmp	r3, #0
   822c8:	d003      	beq.n	822d2 <pmc_sleep+0xe6>
		*p_pll1_setting = PMC->CKGR_UCKR;
   822ca:	4b54      	ldr	r3, [pc, #336]	; (8241c <pmc_sleep+0x230>)
   822cc:	69da      	ldr	r2, [r3, #28]
   822ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   822d0:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
   822d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   822d4:	2b00      	cmp	r3, #0
   822d6:	d002      	beq.n	822de <pmc_sleep+0xf2>
		*p_mck_setting  = mckr;
   822d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   822da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   822dc:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
   822de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   822e0:	2b00      	cmp	r3, #0
   822e2:	d002      	beq.n	822ea <pmc_sleep+0xfe>
		*p_fmr_setting  = fmr;
   822e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   822e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   822e8:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting1) {
   822ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   822ec:	2b00      	cmp	r3, #0
   822ee:	d002      	beq.n	822f6 <pmc_sleep+0x10a>
		*p_fmr_setting1 = fmr1;
   822f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   822f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   822f4:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
   822f6:	4a49      	ldr	r2, [pc, #292]	; (8241c <pmc_sleep+0x230>)
   822f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   822fa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   822fe:	f043 0308 	orr.w	r3, r3, #8
   82302:	6213      	str	r3, [r2, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
   82304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82306:	f003 0303 	and.w	r3, r3, #3
   8230a:	2b01      	cmp	r3, #1
   8230c:	d90e      	bls.n	8232c <pmc_sleep+0x140>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
   8230e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82310:	f023 0303 	bic.w	r3, r3, #3
   82314:	f043 0301 	orr.w	r3, r3, #1
   82318:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   8231a:	4a40      	ldr	r2, [pc, #256]	; (8241c <pmc_sleep+0x230>)
   8231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8231e:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   82320:	4b3e      	ldr	r3, [pc, #248]	; (8241c <pmc_sleep+0x230>)
   82322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82324:	f003 0308 	and.w	r3, r3, #8
   82328:	2b00      	cmp	r3, #0
   8232a:	d0f9      	beq.n	82320 <pmc_sleep+0x134>
	if (mckr & PMC_MCKR_PRES_Msk) {
   8232c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8232e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82332:	2b00      	cmp	r3, #0
   82334:	d00c      	beq.n	82350 <pmc_sleep+0x164>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
   82336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   8233c:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   8233e:	4a37      	ldr	r2, [pc, #220]	; (8241c <pmc_sleep+0x230>)
   82340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82342:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   82344:	4b35      	ldr	r3, [pc, #212]	; (8241c <pmc_sleep+0x230>)
   82346:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82348:	f003 0308 	and.w	r3, r3, #8
   8234c:	2b00      	cmp	r3, #0
   8234e:	d0f9      	beq.n	82344 <pmc_sleep+0x158>
	pmc_disable_pllack();
   82350:	4b38      	ldr	r3, [pc, #224]	; (82434 <pmc_sleep+0x248>)
   82352:	4798      	blx	r3
	pmc_disable_upll_clock();
   82354:	4b38      	ldr	r3, [pc, #224]	; (82438 <pmc_sleep+0x24c>)
   82356:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82358:	4b30      	ldr	r3, [pc, #192]	; (8241c <pmc_sleep+0x230>)
   8235a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8235c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82360:	2b00      	cmp	r3, #0
   82362:	d0f9      	beq.n	82358 <pmc_sleep+0x16c>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   82364:	4b2d      	ldr	r3, [pc, #180]	; (8241c <pmc_sleep+0x230>)
   82366:	6a1b      	ldr	r3, [r3, #32]
   82368:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   8236c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   82370:	4a2a      	ldr	r2, [pc, #168]	; (8241c <pmc_sleep+0x230>)
   82372:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82376:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   82378:	4b28      	ldr	r3, [pc, #160]	; (8241c <pmc_sleep+0x230>)
   8237a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8237c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   82380:	2b00      	cmp	r3, #0
   82382:	d0f9      	beq.n	82378 <pmc_sleep+0x18c>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
   82384:	4a29      	ldr	r2, [pc, #164]	; (8242c <pmc_sleep+0x240>)
   82386:	6abb      	ldr	r3, [r7, #40]	; 0x28
   82388:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   8238c:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
   8238e:	4a28      	ldr	r2, [pc, #160]	; (82430 <pmc_sleep+0x244>)
   82390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82392:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   82396:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
   82398:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   8239c:	2b00      	cmp	r3, #0
   8239e:	d009      	beq.n	823b4 <pmc_sleep+0x1c8>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   823a0:	4b1e      	ldr	r3, [pc, #120]	; (8241c <pmc_sleep+0x230>)
   823a2:	6a1b      	ldr	r3, [r3, #32]
   823a4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   823a8:	f023 0301 	bic.w	r3, r3, #1
   823ac:	4a1b      	ldr	r2, [pc, #108]	; (8241c <pmc_sleep+0x230>)
   823ae:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   823b2:	6213      	str	r3, [r2, #32]
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
   823b4:	4b1b      	ldr	r3, [pc, #108]	; (82424 <pmc_sleep+0x238>)
   823b6:	2201      	movs	r2, #1
   823b8:	701a      	strb	r2, [r3, #0]
   823ba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   823be:	b662      	cpsie	i

		pmc_enable_waitmode();
   823c0:	4b1e      	ldr	r3, [pc, #120]	; (8243c <pmc_sleep+0x250>)
   823c2:	4798      	blx	r3
  __ASM volatile ("cpsid i");
   823c4:	b672      	cpsid	i
   823c6:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
   823ca:	4b16      	ldr	r3, [pc, #88]	; (82424 <pmc_sleep+0x238>)
   823cc:	2200      	movs	r2, #0
   823ce:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
   823d0:	6a3d      	ldr	r5, [r7, #32]
   823d2:	69fc      	ldr	r4, [r7, #28]
   823d4:	69b8      	ldr	r0, [r7, #24]
   823d6:	6979      	ldr	r1, [r7, #20]
   823d8:	693a      	ldr	r2, [r7, #16]
   823da:	68fb      	ldr	r3, [r7, #12]
   823dc:	66fd      	str	r5, [r7, #108]	; 0x6c
   823de:	66bc      	str	r4, [r7, #104]	; 0x68
   823e0:	6678      	str	r0, [r7, #100]	; 0x64
   823e2:	6639      	str	r1, [r7, #96]	; 0x60
   823e4:	65fa      	str	r2, [r7, #92]	; 0x5c
   823e6:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t pll_sr = 0;
   823e8:	2300      	movs	r3, #0
   823ea:	657b      	str	r3, [r7, #84]	; 0x54
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
   823ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   823ee:	f003 0302 	and.w	r3, r3, #2
   823f2:	2b00      	cmp	r3, #0
   823f4:	d028      	beq.n	82448 <pmc_sleep+0x25c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   823f6:	4b09      	ldr	r3, [pc, #36]	; (8241c <pmc_sleep+0x230>)
   823f8:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   823fa:	4a11      	ldr	r2, [pc, #68]	; (82440 <pmc_sleep+0x254>)
   823fc:	401a      	ands	r2, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   823fe:	4907      	ldr	r1, [pc, #28]	; (8241c <pmc_sleep+0x230>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82400:	4b10      	ldr	r3, [pc, #64]	; (82444 <pmc_sleep+0x258>)
   82402:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82404:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   82406:	4b05      	ldr	r3, [pc, #20]	; (8241c <pmc_sleep+0x230>)
   82408:	6a1b      	ldr	r3, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
   8240a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8240e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   82412:	4a02      	ldr	r2, [pc, #8]	; (8241c <pmc_sleep+0x230>)
				| CKGR_MOR_KEY_PASSWD;
   82414:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   82418:	6213      	str	r3, [r2, #32]
   8241a:	e050      	b.n	824be <pmc_sleep+0x2d2>
   8241c:	400e0400 	.word	0x400e0400
   82420:	e000ed00 	.word	0xe000ed00
   82424:	20000294 	.word	0x20000294
   82428:	20000d04 	.word	0x20000d04
   8242c:	400e0800 	.word	0x400e0800
   82430:	400e0a00 	.word	0x400e0a00
   82434:	00082049 	.word	0x00082049
   82438:	00082079 	.word	0x00082079
   8243c:	00082195 	.word	0x00082195
   82440:	fec8fffc 	.word	0xfec8fffc
   82444:	01370002 	.word	0x01370002
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
   82448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   8244a:	f003 0301 	and.w	r3, r3, #1
   8244e:	2b00      	cmp	r3, #0
   82450:	d035      	beq.n	824be <pmc_sleep+0x2d2>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
   82452:	4b59      	ldr	r3, [pc, #356]	; (825b8 <pmc_sleep+0x3cc>)
   82454:	6a1b      	ldr	r3, [r3, #32]
   82456:	f003 0301 	and.w	r3, r3, #1
   8245a:	2b00      	cmp	r3, #0
   8245c:	d111      	bne.n	82482 <pmc_sleep+0x296>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8245e:	4b56      	ldr	r3, [pc, #344]	; (825b8 <pmc_sleep+0x3cc>)
   82460:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   82462:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82466:	f023 0303 	bic.w	r3, r3, #3
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8246a:	4a53      	ldr	r2, [pc, #332]	; (825b8 <pmc_sleep+0x3cc>)
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   8246c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82470:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82474:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82476:	4b50      	ldr	r3, [pc, #320]	; (825b8 <pmc_sleep+0x3cc>)
   82478:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8247a:	f003 0301 	and.w	r3, r3, #1
   8247e:	2b00      	cmp	r3, #0
   82480:	d0f9      	beq.n	82476 <pmc_sleep+0x28a>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
   82482:	4b4d      	ldr	r3, [pc, #308]	; (825b8 <pmc_sleep+0x3cc>)
   82484:	6a1b      	ldr	r3, [r3, #32]
   82486:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8248a:	2b00      	cmp	r3, #0
   8248c:	d10d      	bne.n	824aa <pmc_sleep+0x2be>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8248e:	4b4a      	ldr	r3, [pc, #296]	; (825b8 <pmc_sleep+0x3cc>)
   82490:	6a1b      	ldr	r3, [r3, #32]
   82492:	4a49      	ldr	r2, [pc, #292]	; (825b8 <pmc_sleep+0x3cc>)
   82494:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8249c:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   8249e:	4b46      	ldr	r3, [pc, #280]	; (825b8 <pmc_sleep+0x3cc>)
   824a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   824a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   824a6:	2b00      	cmp	r3, #0
   824a8:	d0f9      	beq.n	8249e <pmc_sleep+0x2b2>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   824aa:	4b43      	ldr	r3, [pc, #268]	; (825b8 <pmc_sleep+0x3cc>)
   824ac:	6a1b      	ldr	r3, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
   824ae:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   824b2:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   824b6:	4a40      	ldr	r2, [pc, #256]	; (825b8 <pmc_sleep+0x3cc>)
					| CKGR_MOR_KEY_PASSWD;
   824b8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   824bc:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
   824be:	6eba      	ldr	r2, [r7, #104]	; 0x68
   824c0:	4b3e      	ldr	r3, [pc, #248]	; (825bc <pmc_sleep+0x3d0>)
   824c2:	4013      	ands	r3, r2
   824c4:	2b00      	cmp	r3, #0
   824c6:	d008      	beq.n	824da <pmc_sleep+0x2ee>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
   824c8:	4a3b      	ldr	r2, [pc, #236]	; (825b8 <pmc_sleep+0x3cc>)
   824ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   824cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   824d0:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
   824d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   824d4:	f043 0302 	orr.w	r3, r3, #2
   824d8:	657b      	str	r3, [r7, #84]	; 0x54
	if (pll1_setting & CKGR_UCKR_UPLLEN) {
   824da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   824dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   824e0:	2b00      	cmp	r3, #0
   824e2:	d006      	beq.n	824f2 <pmc_sleep+0x306>
		PMC->CKGR_UCKR = pll1_setting;
   824e4:	4a34      	ldr	r2, [pc, #208]	; (825b8 <pmc_sleep+0x3cc>)
   824e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   824e8:	61d3      	str	r3, [r2, #28]
		pll_sr |= PMC_SR_LOCKU;
   824ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   824ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   824f0:	657b      	str	r3, [r7, #84]	; 0x54
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
   824f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   824f4:	f003 0303 	and.w	r3, r3, #3
   824f8:	2b02      	cmp	r3, #2
   824fa:	d002      	beq.n	82502 <pmc_sleep+0x316>
   824fc:	2b03      	cmp	r3, #3
   824fe:	d007      	beq.n	82510 <pmc_sleep+0x324>
   82500:	e00c      	b.n	8251c <pmc_sleep+0x330>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
   82502:	4b2d      	ldr	r3, [pc, #180]	; (825b8 <pmc_sleep+0x3cc>)
   82504:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82506:	f003 0302 	and.w	r3, r3, #2
   8250a:	2b00      	cmp	r3, #0
   8250c:	d0f9      	beq.n	82502 <pmc_sleep+0x316>
   8250e:	e005      	b.n	8251c <pmc_sleep+0x330>
		while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   82510:	4b29      	ldr	r3, [pc, #164]	; (825b8 <pmc_sleep+0x3cc>)
   82512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82514:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82518:	2b00      	cmp	r3, #0
   8251a:	d0f9      	beq.n	82510 <pmc_sleep+0x324>
	mckr = PMC->PMC_MCKR;
   8251c:	4b26      	ldr	r3, [pc, #152]	; (825b8 <pmc_sleep+0x3cc>)
   8251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82520:	653b      	str	r3, [r7, #80]	; 0x50
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   82522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   82524:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
   82528:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   8252a:	f003 0370 	and.w	r3, r3, #112	; 0x70
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   8252e:	4922      	ldr	r1, [pc, #136]	; (825b8 <pmc_sleep+0x3cc>)
		| (mck_setting & PMC_MCKR_PRES_Msk);
   82530:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   82532:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   82534:	4b20      	ldr	r3, [pc, #128]	; (825b8 <pmc_sleep+0x3cc>)
   82536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82538:	f003 0308 	and.w	r3, r3, #8
   8253c:	2b00      	cmp	r3, #0
   8253e:	d0f9      	beq.n	82534 <pmc_sleep+0x348>
	EFC0->EEFC_FMR = fmr_setting;
   82540:	4a1f      	ldr	r2, [pc, #124]	; (825c0 <pmc_sleep+0x3d4>)
   82542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   82544:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr_setting1;
   82546:	4a1f      	ldr	r2, [pc, #124]	; (825c4 <pmc_sleep+0x3d8>)
   82548:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   8254a:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
   8254c:	4a1a      	ldr	r2, [pc, #104]	; (825b8 <pmc_sleep+0x3cc>)
   8254e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   82550:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   82552:	4b19      	ldr	r3, [pc, #100]	; (825b8 <pmc_sleep+0x3cc>)
   82554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82556:	f003 0308 	and.w	r3, r3, #8
   8255a:	2b00      	cmp	r3, #0
   8255c:	d0f9      	beq.n	82552 <pmc_sleep+0x366>
	while (!(PMC->PMC_SR & pll_sr));
   8255e:	4b16      	ldr	r3, [pc, #88]	; (825b8 <pmc_sleep+0x3cc>)
   82560:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   82562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   82564:	4013      	ands	r3, r2
   82566:	2b00      	cmp	r3, #0
   82568:	d0f9      	beq.n	8255e <pmc_sleep+0x372>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
   8256a:	4b17      	ldr	r3, [pc, #92]	; (825c8 <pmc_sleep+0x3dc>)
   8256c:	2200      	movs	r2, #0
   8256e:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
   82570:	4b16      	ldr	r3, [pc, #88]	; (825cc <pmc_sleep+0x3e0>)
   82572:	681b      	ldr	r3, [r3, #0]
   82574:	2b00      	cmp	r3, #0
   82576:	d005      	beq.n	82584 <pmc_sleep+0x398>
			callback_clocks_restored();
   82578:	4b14      	ldr	r3, [pc, #80]	; (825cc <pmc_sleep+0x3e0>)
   8257a:	681b      	ldr	r3, [r3, #0]
   8257c:	4798      	blx	r3
			callback_clocks_restored = NULL;
   8257e:	4b13      	ldr	r3, [pc, #76]	; (825cc <pmc_sleep+0x3e0>)
   82580:	2200      	movs	r2, #0
   82582:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
   82584:	4b12      	ldr	r3, [pc, #72]	; (825d0 <pmc_sleep+0x3e4>)
   82586:	2201      	movs	r2, #1
   82588:	701a      	strb	r2, [r3, #0]
   8258a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8258e:	b662      	cpsie	i

		break;
   82590:	bf00      	nop
   82592:	e00d      	b.n	825b0 <pmc_sleep+0x3c4>
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
   82594:	4b0f      	ldr	r3, [pc, #60]	; (825d4 <pmc_sleep+0x3e8>)
   82596:	691b      	ldr	r3, [r3, #16]
   82598:	4a0e      	ldr	r2, [pc, #56]	; (825d4 <pmc_sleep+0x3e8>)
   8259a:	f043 0304 	orr.w	r3, r3, #4
   8259e:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
		cpu_irq_enable();
		__WFI() ;
#else
		cpu_irq_enable();
   825a0:	4b0b      	ldr	r3, [pc, #44]	; (825d0 <pmc_sleep+0x3e4>)
   825a2:	2201      	movs	r2, #1
   825a4:	701a      	strb	r2, [r3, #0]
   825a6:	f3bf 8f5f 	dmb	sy
   825aa:	b662      	cpsie	i
  __ASM volatile ("wfe");
   825ac:	bf20      	wfe
		__WFE() ;
#endif
		break;
   825ae:	bf00      	nop
#endif
	}
}
   825b0:	bf00      	nop
   825b2:	3770      	adds	r7, #112	; 0x70
   825b4:	46bd      	mov	sp, r7
   825b6:	bdb0      	pop	{r4, r5, r7, pc}
   825b8:	400e0400 	.word	0x400e0400
   825bc:	07ff0000 	.word	0x07ff0000
   825c0:	400e0800 	.word	0x400e0800
   825c4:	400e0a00 	.word	0x400e0a00
   825c8:	20000d04 	.word	0x20000d04
   825cc:	20000d08 	.word	0x20000d08
   825d0:	20000294 	.word	0x20000294
   825d4:	e000ed00 	.word	0xe000ed00

000825d8 <pmc_is_wakeup_clocks_restored>:

bool pmc_is_wakeup_clocks_restored(void)
{
   825d8:	b480      	push	{r7}
   825da:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
   825dc:	4b08      	ldr	r3, [pc, #32]	; (82600 <pmc_is_wakeup_clocks_restored+0x28>)
   825de:	781b      	ldrb	r3, [r3, #0]
   825e0:	b2db      	uxtb	r3, r3
   825e2:	2b00      	cmp	r3, #0
   825e4:	bf14      	ite	ne
   825e6:	2301      	movne	r3, #1
   825e8:	2300      	moveq	r3, #0
   825ea:	b2db      	uxtb	r3, r3
   825ec:	f083 0301 	eor.w	r3, r3, #1
   825f0:	b2db      	uxtb	r3, r3
   825f2:	f003 0301 	and.w	r3, r3, #1
   825f6:	b2db      	uxtb	r3, r3
}
   825f8:	4618      	mov	r0, r3
   825fa:	46bd      	mov	sp, r7
   825fc:	bc80      	pop	{r7}
   825fe:	4770      	bx	lr
   82600:	20000d04 	.word	0x20000d04

00082604 <smc_set_setup_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
   82604:	b480      	push	{r7}
   82606:	b085      	sub	sp, #20
   82608:	af00      	add	r7, sp, #0
   8260a:	60f8      	str	r0, [r7, #12]
   8260c:	60b9      	str	r1, [r7, #8]
   8260e:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   82610:	68f9      	ldr	r1, [r7, #12]
   82612:	68ba      	ldr	r2, [r7, #8]
   82614:	4613      	mov	r3, r2
   82616:	009b      	lsls	r3, r3, #2
   82618:	4413      	add	r3, r2
   8261a:	009b      	lsls	r3, r3, #2
   8261c:	440b      	add	r3, r1
   8261e:	3370      	adds	r3, #112	; 0x70
   82620:	687a      	ldr	r2, [r7, #4]
   82622:	601a      	str	r2, [r3, #0]
}
   82624:	bf00      	nop
   82626:	3714      	adds	r7, #20
   82628:	46bd      	mov	sp, r7
   8262a:	bc80      	pop	{r7}
   8262c:	4770      	bx	lr

0008262e <smc_set_pulse_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
   8262e:	b480      	push	{r7}
   82630:	b085      	sub	sp, #20
   82632:	af00      	add	r7, sp, #0
   82634:	60f8      	str	r0, [r7, #12]
   82636:	60b9      	str	r1, [r7, #8]
   82638:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   8263a:	68f9      	ldr	r1, [r7, #12]
   8263c:	68ba      	ldr	r2, [r7, #8]
   8263e:	4613      	mov	r3, r2
   82640:	009b      	lsls	r3, r3, #2
   82642:	4413      	add	r3, r2
   82644:	009b      	lsls	r3, r3, #2
   82646:	440b      	add	r3, r1
   82648:	3374      	adds	r3, #116	; 0x74
   8264a:	687a      	ldr	r2, [r7, #4]
   8264c:	601a      	str	r2, [r3, #0]
}
   8264e:	bf00      	nop
   82650:	3714      	adds	r7, #20
   82652:	46bd      	mov	sp, r7
   82654:	bc80      	pop	{r7}
   82656:	4770      	bx	lr

00082658 <smc_set_cycle_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
   82658:	b480      	push	{r7}
   8265a:	b085      	sub	sp, #20
   8265c:	af00      	add	r7, sp, #0
   8265e:	60f8      	str	r0, [r7, #12]
   82660:	60b9      	str	r1, [r7, #8]
   82662:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   82664:	68f9      	ldr	r1, [r7, #12]
   82666:	68ba      	ldr	r2, [r7, #8]
   82668:	4613      	mov	r3, r2
   8266a:	009b      	lsls	r3, r3, #2
   8266c:	4413      	add	r3, r2
   8266e:	009b      	lsls	r3, r3, #2
   82670:	440b      	add	r3, r1
   82672:	3378      	adds	r3, #120	; 0x78
   82674:	687a      	ldr	r2, [r7, #4]
   82676:	601a      	str	r2, [r3, #0]
}
   82678:	bf00      	nop
   8267a:	3714      	adds	r7, #20
   8267c:	46bd      	mov	sp, r7
   8267e:	bc80      	pop	{r7}
   82680:	4770      	bx	lr

00082682 <smc_set_mode>:
 * \param p_smc Pointer to an SMC instance.
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
   82682:	b480      	push	{r7}
   82684:	b085      	sub	sp, #20
   82686:	af00      	add	r7, sp, #0
   82688:	60f8      	str	r0, [r7, #12]
   8268a:	60b9      	str	r1, [r7, #8]
   8268c:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   8268e:	68f9      	ldr	r1, [r7, #12]
   82690:	68ba      	ldr	r2, [r7, #8]
   82692:	4613      	mov	r3, r2
   82694:	009b      	lsls	r3, r3, #2
   82696:	4413      	add	r3, r2
   82698:	009b      	lsls	r3, r3, #2
   8269a:	440b      	add	r3, r1
   8269c:	3380      	adds	r3, #128	; 0x80
   8269e:	687a      	ldr	r2, [r7, #4]
   826a0:	601a      	str	r2, [r3, #0]
}
   826a2:	bf00      	nop
   826a4:	3714      	adds	r7, #20
   826a6:	46bd      	mov	sp, r7
   826a8:	bc80      	pop	{r7}
   826aa:	4770      	bx	lr

000826ac <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   826ac:	b580      	push	{r7, lr}
   826ae:	b082      	sub	sp, #8
   826b0:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   826b2:	4b1e      	ldr	r3, [pc, #120]	; (8272c <Reset_Handler+0x80>)
   826b4:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   826b6:	4b1e      	ldr	r3, [pc, #120]	; (82730 <Reset_Handler+0x84>)
   826b8:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   826ba:	687a      	ldr	r2, [r7, #4]
   826bc:	683b      	ldr	r3, [r7, #0]
   826be:	429a      	cmp	r2, r3
   826c0:	d00c      	beq.n	826dc <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   826c2:	e007      	b.n	826d4 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   826c4:	687a      	ldr	r2, [r7, #4]
   826c6:	1d13      	adds	r3, r2, #4
   826c8:	607b      	str	r3, [r7, #4]
   826ca:	683b      	ldr	r3, [r7, #0]
   826cc:	1d19      	adds	r1, r3, #4
   826ce:	6039      	str	r1, [r7, #0]
   826d0:	6812      	ldr	r2, [r2, #0]
   826d2:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   826d4:	683b      	ldr	r3, [r7, #0]
   826d6:	4a17      	ldr	r2, [pc, #92]	; (82734 <Reset_Handler+0x88>)
   826d8:	4293      	cmp	r3, r2
   826da:	d3f3      	bcc.n	826c4 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   826dc:	4b16      	ldr	r3, [pc, #88]	; (82738 <Reset_Handler+0x8c>)
   826de:	603b      	str	r3, [r7, #0]
   826e0:	e004      	b.n	826ec <Reset_Handler+0x40>
		*pDest++ = 0;
   826e2:	683b      	ldr	r3, [r7, #0]
   826e4:	1d1a      	adds	r2, r3, #4
   826e6:	603a      	str	r2, [r7, #0]
   826e8:	2200      	movs	r2, #0
   826ea:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   826ec:	683b      	ldr	r3, [r7, #0]
   826ee:	4a13      	ldr	r2, [pc, #76]	; (8273c <Reset_Handler+0x90>)
   826f0:	4293      	cmp	r3, r2
   826f2:	d3f6      	bcc.n	826e2 <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   826f4:	4b12      	ldr	r3, [pc, #72]	; (82740 <Reset_Handler+0x94>)
   826f6:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   826f8:	687b      	ldr	r3, [r7, #4]
   826fa:	4a12      	ldr	r2, [pc, #72]	; (82744 <Reset_Handler+0x98>)
   826fc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   82700:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82704:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   82706:	687b      	ldr	r3, [r7, #4]
   82708:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   8270c:	d309      	bcc.n	82722 <Reset_Handler+0x76>
   8270e:	687b      	ldr	r3, [r7, #4]
   82710:	4a0d      	ldr	r2, [pc, #52]	; (82748 <Reset_Handler+0x9c>)
   82712:	4293      	cmp	r3, r2
   82714:	d805      	bhi.n	82722 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82716:	4b0b      	ldr	r3, [pc, #44]	; (82744 <Reset_Handler+0x98>)
   82718:	689b      	ldr	r3, [r3, #8]
   8271a:	4a0a      	ldr	r2, [pc, #40]	; (82744 <Reset_Handler+0x98>)
   8271c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82720:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82722:	4b0a      	ldr	r3, [pc, #40]	; (8274c <Reset_Handler+0xa0>)
   82724:	4798      	blx	r3

	/* Branch to main function */
	main();
   82726:	4b0a      	ldr	r3, [pc, #40]	; (82750 <Reset_Handler+0xa4>)
   82728:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   8272a:	e7fe      	b.n	8272a <Reset_Handler+0x7e>
   8272c:	00085c24 	.word	0x00085c24
   82730:	20000000 	.word	0x20000000
   82734:	200007dc 	.word	0x200007dc
   82738:	200007dc 	.word	0x200007dc
   8273c:	20000da0 	.word	0x20000da0
   82740:	00080000 	.word	0x00080000
   82744:	e000ed00 	.word	0xe000ed00
   82748:	20003fff 	.word	0x20003fff
   8274c:	00085a61 	.word	0x00085a61
   82750:	00080b09 	.word	0x00080b09

00082754 <osc_enable>:
{
   82754:	b580      	push	{r7, lr}
   82756:	b082      	sub	sp, #8
   82758:	af00      	add	r7, sp, #0
   8275a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8275c:	687b      	ldr	r3, [r7, #4]
   8275e:	2b07      	cmp	r3, #7
   82760:	d82e      	bhi.n	827c0 <osc_enable+0x6c>
   82762:	a201      	add	r2, pc, #4	; (adr r2, 82768 <osc_enable+0x14>)
   82764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82768:	000827bf 	.word	0x000827bf
   8276c:	00082789 	.word	0x00082789
   82770:	00082791 	.word	0x00082791
   82774:	00082799 	.word	0x00082799
   82778:	000827a1 	.word	0x000827a1
   8277c:	000827a9 	.word	0x000827a9
   82780:	000827b1 	.word	0x000827b1
   82784:	000827b9 	.word	0x000827b9
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   82788:	2000      	movs	r0, #0
   8278a:	4b0f      	ldr	r3, [pc, #60]	; (827c8 <osc_enable+0x74>)
   8278c:	4798      	blx	r3
		break;
   8278e:	e017      	b.n	827c0 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   82790:	2001      	movs	r0, #1
   82792:	4b0d      	ldr	r3, [pc, #52]	; (827c8 <osc_enable+0x74>)
   82794:	4798      	blx	r3
		break;
   82796:	e013      	b.n	827c0 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   82798:	2000      	movs	r0, #0
   8279a:	4b0c      	ldr	r3, [pc, #48]	; (827cc <osc_enable+0x78>)
   8279c:	4798      	blx	r3
		break;
   8279e:	e00f      	b.n	827c0 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   827a0:	2010      	movs	r0, #16
   827a2:	4b0a      	ldr	r3, [pc, #40]	; (827cc <osc_enable+0x78>)
   827a4:	4798      	blx	r3
		break;
   827a6:	e00b      	b.n	827c0 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   827a8:	2020      	movs	r0, #32
   827aa:	4b08      	ldr	r3, [pc, #32]	; (827cc <osc_enable+0x78>)
   827ac:	4798      	blx	r3
		break;
   827ae:	e007      	b.n	827c0 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   827b0:	203e      	movs	r0, #62	; 0x3e
   827b2:	4b07      	ldr	r3, [pc, #28]	; (827d0 <osc_enable+0x7c>)
   827b4:	4798      	blx	r3
		break;
   827b6:	e003      	b.n	827c0 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   827b8:	4b06      	ldr	r3, [pc, #24]	; (827d4 <osc_enable+0x80>)
   827ba:	4798      	blx	r3
		break;
   827bc:	e000      	b.n	827c0 <osc_enable+0x6c>
		break;
   827be:	bf00      	nop
}
   827c0:	bf00      	nop
   827c2:	3708      	adds	r7, #8
   827c4:	46bd      	mov	sp, r7
   827c6:	bd80      	pop	{r7, pc}
   827c8:	00081e61 	.word	0x00081e61
   827cc:	00081ecd 	.word	0x00081ecd
   827d0:	00081f41 	.word	0x00081f41
   827d4:	00081f8d 	.word	0x00081f8d

000827d8 <osc_is_ready>:
{
   827d8:	b580      	push	{r7, lr}
   827da:	b082      	sub	sp, #8
   827dc:	af00      	add	r7, sp, #0
   827de:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   827e0:	687b      	ldr	r3, [r7, #4]
   827e2:	2b07      	cmp	r3, #7
   827e4:	d82f      	bhi.n	82846 <osc_is_ready+0x6e>
   827e6:	a201      	add	r2, pc, #4	; (adr r2, 827ec <osc_is_ready+0x14>)
   827e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   827ec:	0008280d 	.word	0x0008280d
   827f0:	00082811 	.word	0x00082811
   827f4:	00082811 	.word	0x00082811
   827f8:	00082823 	.word	0x00082823
   827fc:	00082823 	.word	0x00082823
   82800:	00082823 	.word	0x00082823
   82804:	00082835 	.word	0x00082835
   82808:	00082835 	.word	0x00082835
		return 1;
   8280c:	2301      	movs	r3, #1
   8280e:	e01b      	b.n	82848 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   82810:	4b0f      	ldr	r3, [pc, #60]	; (82850 <osc_is_ready+0x78>)
   82812:	4798      	blx	r3
   82814:	4603      	mov	r3, r0
   82816:	2b00      	cmp	r3, #0
   82818:	bf14      	ite	ne
   8281a:	2301      	movne	r3, #1
   8281c:	2300      	moveq	r3, #0
   8281e:	b2db      	uxtb	r3, r3
   82820:	e012      	b.n	82848 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   82822:	4b0c      	ldr	r3, [pc, #48]	; (82854 <osc_is_ready+0x7c>)
   82824:	4798      	blx	r3
   82826:	4603      	mov	r3, r0
   82828:	2b00      	cmp	r3, #0
   8282a:	bf14      	ite	ne
   8282c:	2301      	movne	r3, #1
   8282e:	2300      	moveq	r3, #0
   82830:	b2db      	uxtb	r3, r3
   82832:	e009      	b.n	82848 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   82834:	4b08      	ldr	r3, [pc, #32]	; (82858 <osc_is_ready+0x80>)
   82836:	4798      	blx	r3
   82838:	4603      	mov	r3, r0
   8283a:	2b00      	cmp	r3, #0
   8283c:	bf14      	ite	ne
   8283e:	2301      	movne	r3, #1
   82840:	2300      	moveq	r3, #0
   82842:	b2db      	uxtb	r3, r3
   82844:	e000      	b.n	82848 <osc_is_ready+0x70>
	return 0;
   82846:	2300      	movs	r3, #0
}
   82848:	4618      	mov	r0, r3
   8284a:	3708      	adds	r7, #8
   8284c:	46bd      	mov	sp, r7
   8284e:	bd80      	pop	{r7, pc}
   82850:	00081e99 	.word	0x00081e99
   82854:	00081f29 	.word	0x00081f29
   82858:	00081fd9 	.word	0x00081fd9

0008285c <osc_get_rate>:
{
   8285c:	b480      	push	{r7}
   8285e:	b083      	sub	sp, #12
   82860:	af00      	add	r7, sp, #0
   82862:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82864:	687b      	ldr	r3, [r7, #4]
   82866:	2b07      	cmp	r3, #7
   82868:	d823      	bhi.n	828b2 <osc_get_rate+0x56>
   8286a:	a201      	add	r2, pc, #4	; (adr r2, 82870 <osc_get_rate+0x14>)
   8286c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82870:	00082891 	.word	0x00082891
   82874:	00082897 	.word	0x00082897
   82878:	0008289b 	.word	0x0008289b
   8287c:	0008289f 	.word	0x0008289f
   82880:	000828a3 	.word	0x000828a3
   82884:	000828a7 	.word	0x000828a7
   82888:	000828ab 	.word	0x000828ab
   8288c:	000828af 	.word	0x000828af
		return OSC_SLCK_32K_RC_HZ;
   82890:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   82894:	e00e      	b.n	828b4 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   82896:	2300      	movs	r3, #0
   82898:	e00c      	b.n	828b4 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   8289a:	2300      	movs	r3, #0
   8289c:	e00a      	b.n	828b4 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   8289e:	4b08      	ldr	r3, [pc, #32]	; (828c0 <osc_get_rate+0x64>)
   828a0:	e008      	b.n	828b4 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   828a2:	4b08      	ldr	r3, [pc, #32]	; (828c4 <osc_get_rate+0x68>)
   828a4:	e006      	b.n	828b4 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   828a6:	4b08      	ldr	r3, [pc, #32]	; (828c8 <osc_get_rate+0x6c>)
   828a8:	e004      	b.n	828b4 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   828aa:	4b07      	ldr	r3, [pc, #28]	; (828c8 <osc_get_rate+0x6c>)
   828ac:	e002      	b.n	828b4 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   828ae:	4b06      	ldr	r3, [pc, #24]	; (828c8 <osc_get_rate+0x6c>)
   828b0:	e000      	b.n	828b4 <osc_get_rate+0x58>
	return 0;
   828b2:	2300      	movs	r3, #0
}
   828b4:	4618      	mov	r0, r3
   828b6:	370c      	adds	r7, #12
   828b8:	46bd      	mov	sp, r7
   828ba:	bc80      	pop	{r7}
   828bc:	4770      	bx	lr
   828be:	bf00      	nop
   828c0:	003d0900 	.word	0x003d0900
   828c4:	007a1200 	.word	0x007a1200
   828c8:	00b71b00 	.word	0x00b71b00

000828cc <osc_wait_ready>:
{
   828cc:	b580      	push	{r7, lr}
   828ce:	b082      	sub	sp, #8
   828d0:	af00      	add	r7, sp, #0
   828d2:	4603      	mov	r3, r0
   828d4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   828d6:	bf00      	nop
   828d8:	79fb      	ldrb	r3, [r7, #7]
   828da:	4618      	mov	r0, r3
   828dc:	4b05      	ldr	r3, [pc, #20]	; (828f4 <osc_wait_ready+0x28>)
   828de:	4798      	blx	r3
   828e0:	4603      	mov	r3, r0
   828e2:	f083 0301 	eor.w	r3, r3, #1
   828e6:	b2db      	uxtb	r3, r3
   828e8:	2b00      	cmp	r3, #0
   828ea:	d1f5      	bne.n	828d8 <osc_wait_ready+0xc>
}
   828ec:	bf00      	nop
   828ee:	3708      	adds	r7, #8
   828f0:	46bd      	mov	sp, r7
   828f2:	bd80      	pop	{r7, pc}
   828f4:	000827d9 	.word	0x000827d9

000828f8 <pll_config_init>:
{
   828f8:	b580      	push	{r7, lr}
   828fa:	b086      	sub	sp, #24
   828fc:	af00      	add	r7, sp, #0
   828fe:	60f8      	str	r0, [r7, #12]
   82900:	607a      	str	r2, [r7, #4]
   82902:	603b      	str	r3, [r7, #0]
   82904:	460b      	mov	r3, r1
   82906:	72fb      	strb	r3, [r7, #11]
	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   82908:	687b      	ldr	r3, [r7, #4]
   8290a:	2b00      	cmp	r3, #0
   8290c:	d107      	bne.n	8291e <pll_config_init+0x26>
   8290e:	683b      	ldr	r3, [r7, #0]
   82910:	2b00      	cmp	r3, #0
   82912:	d104      	bne.n	8291e <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   82914:	68fb      	ldr	r3, [r7, #12]
   82916:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8291a:	601a      	str	r2, [r3, #0]
   8291c:	e019      	b.n	82952 <pll_config_init+0x5a>
		vco_hz = osc_get_rate(e_src) / ul_div;
   8291e:	7afb      	ldrb	r3, [r7, #11]
   82920:	4618      	mov	r0, r3
   82922:	4b0e      	ldr	r3, [pc, #56]	; (8295c <pll_config_init+0x64>)
   82924:	4798      	blx	r3
   82926:	4602      	mov	r2, r0
   82928:	687b      	ldr	r3, [r7, #4]
   8292a:	fbb2 f3f3 	udiv	r3, r2, r3
   8292e:	617b      	str	r3, [r7, #20]
		vco_hz *= ul_mul;
   82930:	697b      	ldr	r3, [r7, #20]
   82932:	683a      	ldr	r2, [r7, #0]
   82934:	fb02 f303 	mul.w	r3, r2, r3
   82938:	617b      	str	r3, [r7, #20]
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   8293a:	683b      	ldr	r3, [r7, #0]
   8293c:	3b01      	subs	r3, #1
   8293e:	041a      	lsls	r2, r3, #16
   82940:	4b07      	ldr	r3, [pc, #28]	; (82960 <pll_config_init+0x68>)
   82942:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   82944:	687a      	ldr	r2, [r7, #4]
   82946:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   82948:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   8294a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   8294e:	68fb      	ldr	r3, [r7, #12]
   82950:	601a      	str	r2, [r3, #0]
}
   82952:	bf00      	nop
   82954:	3718      	adds	r7, #24
   82956:	46bd      	mov	sp, r7
   82958:	bd80      	pop	{r7, pc}
   8295a:	bf00      	nop
   8295c:	0008285d 	.word	0x0008285d
   82960:	07ff0000 	.word	0x07ff0000

00082964 <pll_enable>:
{
   82964:	b580      	push	{r7, lr}
   82966:	b082      	sub	sp, #8
   82968:	af00      	add	r7, sp, #0
   8296a:	6078      	str	r0, [r7, #4]
   8296c:	6039      	str	r1, [r7, #0]
	if (ul_pll_id == PLLA_ID) {
   8296e:	683b      	ldr	r3, [r7, #0]
   82970:	2b00      	cmp	r3, #0
   82972:	d108      	bne.n	82986 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   82974:	4b09      	ldr	r3, [pc, #36]	; (8299c <pll_enable+0x38>)
   82976:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82978:	687b      	ldr	r3, [r7, #4]
   8297a:	681b      	ldr	r3, [r3, #0]
   8297c:	4a08      	ldr	r2, [pc, #32]	; (829a0 <pll_enable+0x3c>)
   8297e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82982:	6293      	str	r3, [r2, #40]	; 0x28
}
   82984:	e005      	b.n	82992 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   82986:	687b      	ldr	r3, [r7, #4]
   82988:	681b      	ldr	r3, [r3, #0]
   8298a:	4a05      	ldr	r2, [pc, #20]	; (829a0 <pll_enable+0x3c>)
   8298c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82990:	61d3      	str	r3, [r2, #28]
}
   82992:	bf00      	nop
   82994:	3708      	adds	r7, #8
   82996:	46bd      	mov	sp, r7
   82998:	bd80      	pop	{r7, pc}
   8299a:	bf00      	nop
   8299c:	00082049 	.word	0x00082049
   829a0:	400e0400 	.word	0x400e0400

000829a4 <pll_is_locked>:
{
   829a4:	b580      	push	{r7, lr}
   829a6:	b082      	sub	sp, #8
   829a8:	af00      	add	r7, sp, #0
   829aa:	6078      	str	r0, [r7, #4]
	if (ul_pll_id == PLLA_ID) {
   829ac:	687b      	ldr	r3, [r7, #4]
   829ae:	2b00      	cmp	r3, #0
   829b0:	d103      	bne.n	829ba <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   829b2:	4b05      	ldr	r3, [pc, #20]	; (829c8 <pll_is_locked+0x24>)
   829b4:	4798      	blx	r3
   829b6:	4603      	mov	r3, r0
   829b8:	e002      	b.n	829c0 <pll_is_locked+0x1c>
		return pmc_is_locked_upll();
   829ba:	4b04      	ldr	r3, [pc, #16]	; (829cc <pll_is_locked+0x28>)
   829bc:	4798      	blx	r3
   829be:	4603      	mov	r3, r0
}
   829c0:	4618      	mov	r0, r3
   829c2:	3708      	adds	r7, #8
   829c4:	46bd      	mov	sp, r7
   829c6:	bd80      	pop	{r7, pc}
   829c8:	00082061 	.word	0x00082061
   829cc:	00082095 	.word	0x00082095

000829d0 <pll_enable_source>:
{
   829d0:	b580      	push	{r7, lr}
   829d2:	b082      	sub	sp, #8
   829d4:	af00      	add	r7, sp, #0
   829d6:	4603      	mov	r3, r0
   829d8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   829da:	79fb      	ldrb	r3, [r7, #7]
   829dc:	3b03      	subs	r3, #3
   829de:	2b04      	cmp	r3, #4
   829e0:	d808      	bhi.n	829f4 <pll_enable_source+0x24>
		osc_enable(e_src);
   829e2:	79fb      	ldrb	r3, [r7, #7]
   829e4:	4618      	mov	r0, r3
   829e6:	4b06      	ldr	r3, [pc, #24]	; (82a00 <pll_enable_source+0x30>)
   829e8:	4798      	blx	r3
		osc_wait_ready(e_src);
   829ea:	79fb      	ldrb	r3, [r7, #7]
   829ec:	4618      	mov	r0, r3
   829ee:	4b05      	ldr	r3, [pc, #20]	; (82a04 <pll_enable_source+0x34>)
   829f0:	4798      	blx	r3
		break;
   829f2:	e000      	b.n	829f6 <pll_enable_source+0x26>
		break;
   829f4:	bf00      	nop
}
   829f6:	bf00      	nop
   829f8:	3708      	adds	r7, #8
   829fa:	46bd      	mov	sp, r7
   829fc:	bd80      	pop	{r7, pc}
   829fe:	bf00      	nop
   82a00:	00082755 	.word	0x00082755
   82a04:	000828cd 	.word	0x000828cd

00082a08 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   82a08:	b580      	push	{r7, lr}
   82a0a:	b082      	sub	sp, #8
   82a0c:	af00      	add	r7, sp, #0
   82a0e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82a10:	bf00      	nop
   82a12:	6878      	ldr	r0, [r7, #4]
   82a14:	4b04      	ldr	r3, [pc, #16]	; (82a28 <pll_wait_for_lock+0x20>)
   82a16:	4798      	blx	r3
   82a18:	4603      	mov	r3, r0
   82a1a:	2b00      	cmp	r3, #0
   82a1c:	d0f9      	beq.n	82a12 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   82a1e:	2300      	movs	r3, #0
}
   82a20:	4618      	mov	r0, r3
   82a22:	3708      	adds	r7, #8
   82a24:	46bd      	mov	sp, r7
   82a26:	bd80      	pop	{r7, pc}
   82a28:	000829a5 	.word	0x000829a5

00082a2c <sysclk_get_main_hz>:
{
   82a2c:	b580      	push	{r7, lr}
   82a2e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   82a30:	2006      	movs	r0, #6
   82a32:	4b03      	ldr	r3, [pc, #12]	; (82a40 <sysclk_get_main_hz+0x14>)
   82a34:	4798      	blx	r3
   82a36:	4603      	mov	r3, r0
   82a38:	011b      	lsls	r3, r3, #4
}
   82a3a:	4618      	mov	r0, r3
   82a3c:	bd80      	pop	{r7, pc}
   82a3e:	bf00      	nop
   82a40:	0008285d 	.word	0x0008285d

00082a44 <sysclk_get_cpu_hz>:
{
   82a44:	b580      	push	{r7, lr}
   82a46:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   82a48:	4b02      	ldr	r3, [pc, #8]	; (82a54 <sysclk_get_cpu_hz+0x10>)
   82a4a:	4798      	blx	r3
   82a4c:	4603      	mov	r3, r0
   82a4e:	085b      	lsrs	r3, r3, #1
}
   82a50:	4618      	mov	r0, r3
   82a52:	bd80      	pop	{r7, pc}
   82a54:	00082a2d 	.word	0x00082a2d

00082a58 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   82a58:	b590      	push	{r4, r7, lr}
   82a5a:	b083      	sub	sp, #12
   82a5c:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	pll_enable_source(CONFIG_PLL1_SOURCE);
   82a5e:	2006      	movs	r0, #6
   82a60:	4b09      	ldr	r3, [pc, #36]	; (82a88 <sysclk_enable_usb+0x30>)
   82a62:	4798      	blx	r3
	pll_config_defaults(&pllcfg, 1);
   82a64:	1d38      	adds	r0, r7, #4
   82a66:	2300      	movs	r3, #0
   82a68:	2200      	movs	r2, #0
   82a6a:	2106      	movs	r1, #6
   82a6c:	4c07      	ldr	r4, [pc, #28]	; (82a8c <sysclk_enable_usb+0x34>)
   82a6e:	47a0      	blx	r4
	pll_enable(&pllcfg, 1);
   82a70:	1d3b      	adds	r3, r7, #4
   82a72:	2101      	movs	r1, #1
   82a74:	4618      	mov	r0, r3
   82a76:	4b06      	ldr	r3, [pc, #24]	; (82a90 <sysclk_enable_usb+0x38>)
   82a78:	4798      	blx	r3
	pll_wait_for_lock(1);
   82a7a:	2001      	movs	r0, #1
   82a7c:	4b05      	ldr	r3, [pc, #20]	; (82a94 <sysclk_enable_usb+0x3c>)
   82a7e:	4798      	blx	r3
}
   82a80:	bf00      	nop
   82a82:	370c      	adds	r7, #12
   82a84:	46bd      	mov	sp, r7
   82a86:	bd90      	pop	{r4, r7, pc}
   82a88:	000829d1 	.word	0x000829d1
   82a8c:	000828f9 	.word	0x000828f9
   82a90:	00082965 	.word	0x00082965
   82a94:	00082a09 	.word	0x00082a09

00082a98 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   82a98:	b590      	push	{r4, r7, lr}
   82a9a:	b083      	sub	sp, #12
   82a9c:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82a9e:	4816      	ldr	r0, [pc, #88]	; (82af8 <sysclk_init+0x60>)
   82aa0:	4b16      	ldr	r3, [pc, #88]	; (82afc <sysclk_init+0x64>)
   82aa2:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   82aa4:	2006      	movs	r0, #6
   82aa6:	4b16      	ldr	r3, [pc, #88]	; (82b00 <sysclk_init+0x68>)
   82aa8:	4798      	blx	r3
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   82aaa:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   82aae:	4b15      	ldr	r3, [pc, #84]	; (82b04 <sysclk_init+0x6c>)
   82ab0:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   82ab2:	bf00      	nop
   82ab4:	4b14      	ldr	r3, [pc, #80]	; (82b08 <sysclk_init+0x70>)
   82ab6:	4798      	blx	r3
   82ab8:	4603      	mov	r3, r0
   82aba:	2b00      	cmp	r3, #0
   82abc:	d0fa      	beq.n	82ab4 <sysclk_init+0x1c>
		}
		pll_config_defaults(&pllcfg, 0);
   82abe:	1d38      	adds	r0, r7, #4
   82ac0:	2310      	movs	r3, #16
   82ac2:	2201      	movs	r2, #1
   82ac4:	2106      	movs	r1, #6
   82ac6:	4c11      	ldr	r4, [pc, #68]	; (82b0c <sysclk_init+0x74>)
   82ac8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   82aca:	1d3b      	adds	r3, r7, #4
   82acc:	2100      	movs	r1, #0
   82ace:	4618      	mov	r0, r3
   82ad0:	4b0f      	ldr	r3, [pc, #60]	; (82b10 <sysclk_init+0x78>)
   82ad2:	4798      	blx	r3
		pll_wait_for_lock(0);
   82ad4:	2000      	movs	r0, #0
   82ad6:	4b0f      	ldr	r3, [pc, #60]	; (82b14 <sysclk_init+0x7c>)
   82ad8:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82ada:	2010      	movs	r0, #16
   82adc:	4b0e      	ldr	r3, [pc, #56]	; (82b18 <sysclk_init+0x80>)
   82ade:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82ae0:	4b0e      	ldr	r3, [pc, #56]	; (82b1c <sysclk_init+0x84>)
   82ae2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82ae4:	4b0e      	ldr	r3, [pc, #56]	; (82b20 <sysclk_init+0x88>)
   82ae6:	4798      	blx	r3
   82ae8:	4603      	mov	r3, r0
   82aea:	4618      	mov	r0, r3
   82aec:	4b03      	ldr	r3, [pc, #12]	; (82afc <sysclk_init+0x64>)
   82aee:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   82af0:	bf00      	nop
   82af2:	370c      	adds	r7, #12
   82af4:	46bd      	mov	sp, r7
   82af6:	bd90      	pop	{r4, r7, pc}
   82af8:	05b8d800 	.word	0x05b8d800
   82afc:	200001bd 	.word	0x200001bd
   82b00:	000829d1 	.word	0x000829d1
   82b04:	00082009 	.word	0x00082009
   82b08:	00081ff1 	.word	0x00081ff1
   82b0c:	000828f9 	.word	0x000828f9
   82b10:	00082965 	.word	0x00082965
   82b14:	00082a09 	.word	0x00082a09
   82b18:	00081de1 	.word	0x00081de1
   82b1c:	00082b25 	.word	0x00082b25
   82b20:	00082a45 	.word	0x00082a45

00082b24 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   82b24:	b480      	push	{r7}
   82b26:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82b28:	4b57      	ldr	r3, [pc, #348]	; (82c88 <SystemCoreClockUpdate+0x164>)
   82b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82b2c:	f003 0303 	and.w	r3, r3, #3
   82b30:	2b03      	cmp	r3, #3
   82b32:	f200 808a 	bhi.w	82c4a <SystemCoreClockUpdate+0x126>
   82b36:	a201      	add	r2, pc, #4	; (adr r2, 82b3c <SystemCoreClockUpdate+0x18>)
   82b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82b3c:	00082b4d 	.word	0x00082b4d
   82b40:	00082b6d 	.word	0x00082b6d
   82b44:	00082bbd 	.word	0x00082bbd
   82b48:	00082bbd 	.word	0x00082bbd
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82b4c:	4b4f      	ldr	r3, [pc, #316]	; (82c8c <SystemCoreClockUpdate+0x168>)
   82b4e:	695b      	ldr	r3, [r3, #20]
   82b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82b54:	2b00      	cmp	r3, #0
   82b56:	d004      	beq.n	82b62 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82b58:	4b4d      	ldr	r3, [pc, #308]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82b5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82b5e:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   82b60:	e073      	b.n	82c4a <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82b62:	4b4b      	ldr	r3, [pc, #300]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82b64:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   82b68:	601a      	str	r2, [r3, #0]
		break;
   82b6a:	e06e      	b.n	82c4a <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82b6c:	4b46      	ldr	r3, [pc, #280]	; (82c88 <SystemCoreClockUpdate+0x164>)
   82b6e:	6a1b      	ldr	r3, [r3, #32]
   82b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82b74:	2b00      	cmp	r3, #0
   82b76:	d003      	beq.n	82b80 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82b78:	4b45      	ldr	r3, [pc, #276]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82b7a:	4a46      	ldr	r2, [pc, #280]	; (82c94 <SystemCoreClockUpdate+0x170>)
   82b7c:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   82b7e:	e064      	b.n	82c4a <SystemCoreClockUpdate+0x126>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82b80:	4b43      	ldr	r3, [pc, #268]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82b82:	4a45      	ldr	r2, [pc, #276]	; (82c98 <SystemCoreClockUpdate+0x174>)
   82b84:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82b86:	4b40      	ldr	r3, [pc, #256]	; (82c88 <SystemCoreClockUpdate+0x164>)
   82b88:	6a1b      	ldr	r3, [r3, #32]
   82b8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82b8e:	2b10      	cmp	r3, #16
   82b90:	d004      	beq.n	82b9c <SystemCoreClockUpdate+0x78>
   82b92:	2b20      	cmp	r3, #32
   82b94:	d008      	beq.n	82ba8 <SystemCoreClockUpdate+0x84>
   82b96:	2b00      	cmp	r3, #0
   82b98:	d00e      	beq.n	82bb8 <SystemCoreClockUpdate+0x94>
				break;
   82b9a:	e00e      	b.n	82bba <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 2U;
   82b9c:	4b3c      	ldr	r3, [pc, #240]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82b9e:	681b      	ldr	r3, [r3, #0]
   82ba0:	005b      	lsls	r3, r3, #1
   82ba2:	4a3b      	ldr	r2, [pc, #236]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82ba4:	6013      	str	r3, [r2, #0]
				break;
   82ba6:	e008      	b.n	82bba <SystemCoreClockUpdate+0x96>
				SystemCoreClock *= 3U;
   82ba8:	4b39      	ldr	r3, [pc, #228]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82baa:	681a      	ldr	r2, [r3, #0]
   82bac:	4613      	mov	r3, r2
   82bae:	005b      	lsls	r3, r3, #1
   82bb0:	4413      	add	r3, r2
   82bb2:	4a37      	ldr	r2, [pc, #220]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82bb4:	6013      	str	r3, [r2, #0]
				break;
   82bb6:	e000      	b.n	82bba <SystemCoreClockUpdate+0x96>
				break;
   82bb8:	bf00      	nop
		break;
   82bba:	e046      	b.n	82c4a <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82bbc:	4b32      	ldr	r3, [pc, #200]	; (82c88 <SystemCoreClockUpdate+0x164>)
   82bbe:	6a1b      	ldr	r3, [r3, #32]
   82bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82bc4:	2b00      	cmp	r3, #0
   82bc6:	d003      	beq.n	82bd0 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82bc8:	4b31      	ldr	r3, [pc, #196]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82bca:	4a32      	ldr	r2, [pc, #200]	; (82c94 <SystemCoreClockUpdate+0x170>)
   82bcc:	601a      	str	r2, [r3, #0]
   82bce:	e01c      	b.n	82c0a <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82bd0:	4b2f      	ldr	r3, [pc, #188]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82bd2:	4a31      	ldr	r2, [pc, #196]	; (82c98 <SystemCoreClockUpdate+0x174>)
   82bd4:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82bd6:	4b2c      	ldr	r3, [pc, #176]	; (82c88 <SystemCoreClockUpdate+0x164>)
   82bd8:	6a1b      	ldr	r3, [r3, #32]
   82bda:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82bde:	2b10      	cmp	r3, #16
   82be0:	d004      	beq.n	82bec <SystemCoreClockUpdate+0xc8>
   82be2:	2b20      	cmp	r3, #32
   82be4:	d008      	beq.n	82bf8 <SystemCoreClockUpdate+0xd4>
   82be6:	2b00      	cmp	r3, #0
   82be8:	d00e      	beq.n	82c08 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   82bea:	e00e      	b.n	82c0a <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 2U;
   82bec:	4b28      	ldr	r3, [pc, #160]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82bee:	681b      	ldr	r3, [r3, #0]
   82bf0:	005b      	lsls	r3, r3, #1
   82bf2:	4a27      	ldr	r2, [pc, #156]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82bf4:	6013      	str	r3, [r2, #0]
				break;
   82bf6:	e008      	b.n	82c0a <SystemCoreClockUpdate+0xe6>
				SystemCoreClock *= 3U;
   82bf8:	4b25      	ldr	r3, [pc, #148]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82bfa:	681a      	ldr	r2, [r3, #0]
   82bfc:	4613      	mov	r3, r2
   82bfe:	005b      	lsls	r3, r3, #1
   82c00:	4413      	add	r3, r2
   82c02:	4a23      	ldr	r2, [pc, #140]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82c04:	6013      	str	r3, [r2, #0]
				break;
   82c06:	e000      	b.n	82c0a <SystemCoreClockUpdate+0xe6>
				break;
   82c08:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82c0a:	4b1f      	ldr	r3, [pc, #124]	; (82c88 <SystemCoreClockUpdate+0x164>)
   82c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82c0e:	f003 0303 	and.w	r3, r3, #3
   82c12:	2b02      	cmp	r3, #2
   82c14:	d115      	bne.n	82c42 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82c16:	4b1c      	ldr	r3, [pc, #112]	; (82c88 <SystemCoreClockUpdate+0x164>)
   82c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82c1a:	0c1b      	lsrs	r3, r3, #16
   82c1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                          CKGR_PLLAR_MULA_Pos) + 1U);
   82c20:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82c22:	4a1b      	ldr	r2, [pc, #108]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82c24:	6812      	ldr	r2, [r2, #0]
   82c26:	fb02 f303 	mul.w	r3, r2, r3
   82c2a:	4a19      	ldr	r2, [pc, #100]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82c2c:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   82c2e:	4b16      	ldr	r3, [pc, #88]	; (82c88 <SystemCoreClockUpdate+0x164>)
   82c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82c32:	b2db      	uxtb	r3, r3
   82c34:	4a16      	ldr	r2, [pc, #88]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82c36:	6812      	ldr	r2, [r2, #0]
   82c38:	fbb2 f3f3 	udiv	r3, r2, r3
   82c3c:	4a14      	ldr	r2, [pc, #80]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82c3e:	6013      	str	r3, [r2, #0]
				                           CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   82c40:	e002      	b.n	82c48 <SystemCoreClockUpdate+0x124>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82c42:	4b13      	ldr	r3, [pc, #76]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82c44:	4a15      	ldr	r2, [pc, #84]	; (82c9c <SystemCoreClockUpdate+0x178>)
   82c46:	601a      	str	r2, [r3, #0]
		break;
   82c48:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82c4a:	4b0f      	ldr	r3, [pc, #60]	; (82c88 <SystemCoreClockUpdate+0x164>)
   82c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82c4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82c52:	2b70      	cmp	r3, #112	; 0x70
   82c54:	d108      	bne.n	82c68 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   82c56:	4b0e      	ldr	r3, [pc, #56]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82c58:	681b      	ldr	r3, [r3, #0]
   82c5a:	4a11      	ldr	r2, [pc, #68]	; (82ca0 <SystemCoreClockUpdate+0x17c>)
   82c5c:	fba2 2303 	umull	r2, r3, r2, r3
   82c60:	085b      	lsrs	r3, r3, #1
   82c62:	4a0b      	ldr	r2, [pc, #44]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82c64:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                           PMC_MCKR_PRES_Pos);
	}
}
   82c66:	e00a      	b.n	82c7e <SystemCoreClockUpdate+0x15a>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82c68:	4b07      	ldr	r3, [pc, #28]	; (82c88 <SystemCoreClockUpdate+0x164>)
   82c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82c6c:	091b      	lsrs	r3, r3, #4
   82c6e:	f003 0307 	and.w	r3, r3, #7
   82c72:	4a07      	ldr	r2, [pc, #28]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82c74:	6812      	ldr	r2, [r2, #0]
   82c76:	fa22 f303 	lsr.w	r3, r2, r3
   82c7a:	4a05      	ldr	r2, [pc, #20]	; (82c90 <SystemCoreClockUpdate+0x16c>)
   82c7c:	6013      	str	r3, [r2, #0]
}
   82c7e:	bf00      	nop
   82c80:	46bd      	mov	sp, r7
   82c82:	bc80      	pop	{r7}
   82c84:	4770      	bx	lr
   82c86:	bf00      	nop
   82c88:	400e0400 	.word	0x400e0400
   82c8c:	400e1210 	.word	0x400e1210
   82c90:	20000298 	.word	0x20000298
   82c94:	00b71b00 	.word	0x00b71b00
   82c98:	003d0900 	.word	0x003d0900
   82c9c:	0e4e1c00 	.word	0x0e4e1c00
   82ca0:	aaaaaaab 	.word	0xaaaaaaab

00082ca4 <udc_get_string_serial_name>:
 * to a suitable pointer. This will also require the serial number length
 * define USB_DEVICE_GET_SERIAL_NAME_LENGTH.
 */
#if defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	static const uint8_t *udc_get_string_serial_name(void)
	{
   82ca4:	b480      	push	{r7}
   82ca6:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_GET_SERIAL_NAME_POINTER;
   82ca8:	4b02      	ldr	r3, [pc, #8]	; (82cb4 <udc_get_string_serial_name+0x10>)
	}
   82caa:	4618      	mov	r0, r3
   82cac:	46bd      	mov	sp, r7
   82cae:	bc80      	pop	{r7}
   82cb0:	4770      	bx	lr
   82cb2:	bf00      	nop
   82cb4:	2000025c 	.word	0x2000025c

00082cb8 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
   82cb8:	b480      	push	{r7}
   82cba:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
   82cbc:	4b02      	ldr	r3, [pc, #8]	; (82cc8 <udc_get_interface_desc+0x10>)
   82cbe:	681b      	ldr	r3, [r3, #0]
}
   82cc0:	4618      	mov	r0, r3
   82cc2:	46bd      	mov	sp, r7
   82cc4:	bc80      	pop	{r7}
   82cc6:	4770      	bx	lr
   82cc8:	20000d14 	.word	0x20000d14

00082ccc <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
   82ccc:	b480      	push	{r7}
   82cce:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   82cd0:	4b06      	ldr	r3, [pc, #24]	; (82cec <udc_get_eof_conf+0x20>)
   82cd2:	681b      	ldr	r3, [r3, #0]
   82cd4:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   82cd6:	4a05      	ldr	r2, [pc, #20]	; (82cec <udc_get_eof_conf+0x20>)
   82cd8:	6812      	ldr	r2, [r2, #0]
   82cda:	6812      	ldr	r2, [r2, #0]
   82cdc:	8852      	ldrh	r2, [r2, #2]
   82cde:	b292      	uxth	r2, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   82ce0:	4413      	add	r3, r2
}
   82ce2:	4618      	mov	r0, r3
   82ce4:	46bd      	mov	sp, r7
   82ce6:	bc80      	pop	{r7}
   82ce8:	4770      	bx	lr
   82cea:	bf00      	nop
   82cec:	20000d10 	.word	0x20000d10

00082cf0 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   82cf0:	b580      	push	{r7, lr}
   82cf2:	b084      	sub	sp, #16
   82cf4:	af00      	add	r7, sp, #0
   82cf6:	6078      	str	r0, [r7, #4]
   82cf8:	460b      	mov	r3, r1
   82cfa:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   82cfc:	4b12      	ldr	r3, [pc, #72]	; (82d48 <udc_next_desc_in_iface+0x58>)
   82cfe:	4798      	blx	r3
   82d00:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   82d02:	687b      	ldr	r3, [r7, #4]
   82d04:	781b      	ldrb	r3, [r3, #0]
   82d06:	461a      	mov	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   82d08:	687b      	ldr	r3, [r7, #4]
   82d0a:	4413      	add	r3, r2
   82d0c:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   82d0e:	e010      	b.n	82d32 <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   82d10:	687b      	ldr	r3, [r7, #4]
   82d12:	785b      	ldrb	r3, [r3, #1]
   82d14:	2b04      	cmp	r3, #4
   82d16:	d011      	beq.n	82d3c <udc_next_desc_in_iface+0x4c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   82d18:	687b      	ldr	r3, [r7, #4]
   82d1a:	785b      	ldrb	r3, [r3, #1]
   82d1c:	78fa      	ldrb	r2, [r7, #3]
   82d1e:	429a      	cmp	r2, r3
   82d20:	d101      	bne.n	82d26 <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
   82d22:	687b      	ldr	r3, [r7, #4]
   82d24:	e00c      	b.n	82d40 <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   82d26:	687b      	ldr	r3, [r7, #4]
   82d28:	781b      	ldrb	r3, [r3, #0]
   82d2a:	461a      	mov	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   82d2c:	687b      	ldr	r3, [r7, #4]
   82d2e:	4413      	add	r3, r2
   82d30:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
   82d32:	68fa      	ldr	r2, [r7, #12]
   82d34:	687b      	ldr	r3, [r7, #4]
   82d36:	429a      	cmp	r2, r3
   82d38:	d8ea      	bhi.n	82d10 <udc_next_desc_in_iface+0x20>
   82d3a:	e000      	b.n	82d3e <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
   82d3c:	bf00      	nop
	}
	return NULL; // No specific descriptor found
   82d3e:	2300      	movs	r3, #0
}
   82d40:	4618      	mov	r0, r3
   82d42:	3710      	adds	r7, #16
   82d44:	46bd      	mov	sp, r7
   82d46:	bd80      	pop	{r7, pc}
   82d48:	00082ccd 	.word	0x00082ccd

00082d4c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   82d4c:	b580      	push	{r7, lr}
   82d4e:	b084      	sub	sp, #16
   82d50:	af00      	add	r7, sp, #0
   82d52:	4603      	mov	r3, r0
   82d54:	460a      	mov	r2, r1
   82d56:	71fb      	strb	r3, [r7, #7]
   82d58:	4613      	mov	r3, r2
   82d5a:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   82d5c:	4b1e      	ldr	r3, [pc, #120]	; (82dd8 <udc_update_iface_desc+0x8c>)
   82d5e:	781b      	ldrb	r3, [r3, #0]
   82d60:	2b00      	cmp	r3, #0
   82d62:	d101      	bne.n	82d68 <udc_update_iface_desc+0x1c>
		return false;
   82d64:	2300      	movs	r3, #0
   82d66:	e032      	b.n	82dce <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   82d68:	4b1c      	ldr	r3, [pc, #112]	; (82ddc <udc_update_iface_desc+0x90>)
   82d6a:	681b      	ldr	r3, [r3, #0]
   82d6c:	681b      	ldr	r3, [r3, #0]
   82d6e:	791b      	ldrb	r3, [r3, #4]
   82d70:	79fa      	ldrb	r2, [r7, #7]
   82d72:	429a      	cmp	r2, r3
   82d74:	d301      	bcc.n	82d7a <udc_update_iface_desc+0x2e>
		return false;
   82d76:	2300      	movs	r3, #0
   82d78:	e029      	b.n	82dce <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
   82d7a:	4b18      	ldr	r3, [pc, #96]	; (82ddc <udc_update_iface_desc+0x90>)
   82d7c:	681b      	ldr	r3, [r3, #0]
   82d7e:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   82d80:	4a17      	ldr	r2, [pc, #92]	; (82de0 <udc_update_iface_desc+0x94>)
   82d82:	6013      	str	r3, [r2, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   82d84:	4b17      	ldr	r3, [pc, #92]	; (82de4 <udc_update_iface_desc+0x98>)
   82d86:	4798      	blx	r3
   82d88:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
   82d8a:	e01a      	b.n	82dc2 <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   82d8c:	4b14      	ldr	r3, [pc, #80]	; (82de0 <udc_update_iface_desc+0x94>)
   82d8e:	681b      	ldr	r3, [r3, #0]
   82d90:	785b      	ldrb	r3, [r3, #1]
   82d92:	2b04      	cmp	r3, #4
   82d94:	d10d      	bne.n	82db2 <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   82d96:	4b12      	ldr	r3, [pc, #72]	; (82de0 <udc_update_iface_desc+0x94>)
   82d98:	681b      	ldr	r3, [r3, #0]
   82d9a:	789b      	ldrb	r3, [r3, #2]
   82d9c:	79fa      	ldrb	r2, [r7, #7]
   82d9e:	429a      	cmp	r2, r3
   82da0:	d107      	bne.n	82db2 <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
   82da2:	4b0f      	ldr	r3, [pc, #60]	; (82de0 <udc_update_iface_desc+0x94>)
   82da4:	681b      	ldr	r3, [r3, #0]
   82da6:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   82da8:	79ba      	ldrb	r2, [r7, #6]
   82daa:	429a      	cmp	r2, r3
   82dac:	d101      	bne.n	82db2 <udc_update_iface_desc+0x66>
				return true; // Interface found
   82dae:	2301      	movs	r3, #1
   82db0:	e00d      	b.n	82dce <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   82db2:	4b0b      	ldr	r3, [pc, #44]	; (82de0 <udc_update_iface_desc+0x94>)
   82db4:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   82db6:	4a0a      	ldr	r2, [pc, #40]	; (82de0 <udc_update_iface_desc+0x94>)
   82db8:	6812      	ldr	r2, [r2, #0]
   82dba:	7812      	ldrb	r2, [r2, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   82dbc:	4413      	add	r3, r2
   82dbe:	4a08      	ldr	r2, [pc, #32]	; (82de0 <udc_update_iface_desc+0x94>)
   82dc0:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   82dc2:	4b07      	ldr	r3, [pc, #28]	; (82de0 <udc_update_iface_desc+0x94>)
   82dc4:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
   82dc6:	68fa      	ldr	r2, [r7, #12]
   82dc8:	429a      	cmp	r2, r3
   82dca:	d8df      	bhi.n	82d8c <udc_update_iface_desc+0x40>
	}
	return false; // Interface not found
   82dcc:	2300      	movs	r3, #0
}
   82dce:	4618      	mov	r0, r3
   82dd0:	3710      	adds	r7, #16
   82dd2:	46bd      	mov	sp, r7
   82dd4:	bd80      	pop	{r7, pc}
   82dd6:	bf00      	nop
   82dd8:	20000d0e 	.word	0x20000d0e
   82ddc:	20000d10 	.word	0x20000d10
   82de0:	20000d14 	.word	0x20000d14
   82de4:	00082ccd 	.word	0x00082ccd

00082de8 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   82de8:	b580      	push	{r7, lr}
   82dea:	b084      	sub	sp, #16
   82dec:	af00      	add	r7, sp, #0
   82dee:	4603      	mov	r3, r0
   82df0:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   82df2:	79fb      	ldrb	r3, [r7, #7]
   82df4:	2100      	movs	r1, #0
   82df6:	4618      	mov	r0, r3
   82df8:	4b1e      	ldr	r3, [pc, #120]	; (82e74 <udc_iface_disable+0x8c>)
   82dfa:	4798      	blx	r3
   82dfc:	4603      	mov	r3, r0
   82dfe:	f083 0301 	eor.w	r3, r3, #1
   82e02:	b2db      	uxtb	r3, r3
   82e04:	2b00      	cmp	r3, #0
   82e06:	d001      	beq.n	82e0c <udc_iface_disable+0x24>
		return false;
   82e08:	2300      	movs	r3, #0
   82e0a:	e02f      	b.n	82e6c <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   82e0c:	4b1a      	ldr	r3, [pc, #104]	; (82e78 <udc_iface_disable+0x90>)
   82e0e:	681b      	ldr	r3, [r3, #0]
   82e10:	685a      	ldr	r2, [r3, #4]
   82e12:	79fb      	ldrb	r3, [r7, #7]
   82e14:	009b      	lsls	r3, r3, #2
   82e16:	4413      	add	r3, r2
   82e18:	681b      	ldr	r3, [r3, #0]
   82e1a:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   82e1c:	68bb      	ldr	r3, [r7, #8]
   82e1e:	68db      	ldr	r3, [r3, #12]
   82e20:	4798      	blx	r3
   82e22:	4603      	mov	r3, r0
   82e24:	461a      	mov	r2, r3
   82e26:	79fb      	ldrb	r3, [r7, #7]
   82e28:	4611      	mov	r1, r2
   82e2a:	4618      	mov	r0, r3
   82e2c:	4b11      	ldr	r3, [pc, #68]	; (82e74 <udc_iface_disable+0x8c>)
   82e2e:	4798      	blx	r3
   82e30:	4603      	mov	r3, r0
   82e32:	f083 0301 	eor.w	r3, r3, #1
   82e36:	b2db      	uxtb	r3, r3
   82e38:	2b00      	cmp	r3, #0
   82e3a:	d001      	beq.n	82e40 <udc_iface_disable+0x58>
		return false;
   82e3c:	2300      	movs	r3, #0
   82e3e:	e015      	b.n	82e6c <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   82e40:	4b0e      	ldr	r3, [pc, #56]	; (82e7c <udc_iface_disable+0x94>)
   82e42:	681b      	ldr	r3, [r3, #0]
   82e44:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   82e46:	2105      	movs	r1, #5
   82e48:	68f8      	ldr	r0, [r7, #12]
   82e4a:	4b0d      	ldr	r3, [pc, #52]	; (82e80 <udc_iface_disable+0x98>)
   82e4c:	4798      	blx	r3
   82e4e:	60f8      	str	r0, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   82e50:	68fb      	ldr	r3, [r7, #12]
   82e52:	2b00      	cmp	r3, #0
   82e54:	d005      	beq.n	82e62 <udc_iface_disable+0x7a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   82e56:	68fb      	ldr	r3, [r7, #12]
   82e58:	789b      	ldrb	r3, [r3, #2]
   82e5a:	4618      	mov	r0, r3
   82e5c:	4b09      	ldr	r3, [pc, #36]	; (82e84 <udc_iface_disable+0x9c>)
   82e5e:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   82e60:	e7f1      	b.n	82e46 <udc_iface_disable+0x5e>
				break;
   82e62:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
   82e64:	68bb      	ldr	r3, [r7, #8]
   82e66:	685b      	ldr	r3, [r3, #4]
   82e68:	4798      	blx	r3
	return true;
   82e6a:	2301      	movs	r3, #1
}
   82e6c:	4618      	mov	r0, r3
   82e6e:	3710      	adds	r7, #16
   82e70:	46bd      	mov	sp, r7
   82e72:	bd80      	pop	{r7, pc}
   82e74:	00082d4d 	.word	0x00082d4d
   82e78:	20000d10 	.word	0x20000d10
   82e7c:	20000d14 	.word	0x20000d14
   82e80:	00082cf1 	.word	0x00082cf1
   82e84:	0008450d 	.word	0x0008450d

00082e88 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   82e88:	b580      	push	{r7, lr}
   82e8a:	b084      	sub	sp, #16
   82e8c:	af00      	add	r7, sp, #0
   82e8e:	4603      	mov	r3, r0
   82e90:	460a      	mov	r2, r1
   82e92:	71fb      	strb	r3, [r7, #7]
   82e94:	4613      	mov	r3, r2
   82e96:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   82e98:	79ba      	ldrb	r2, [r7, #6]
   82e9a:	79fb      	ldrb	r3, [r7, #7]
   82e9c:	4611      	mov	r1, r2
   82e9e:	4618      	mov	r0, r3
   82ea0:	4b1a      	ldr	r3, [pc, #104]	; (82f0c <udc_iface_enable+0x84>)
   82ea2:	4798      	blx	r3
   82ea4:	4603      	mov	r3, r0
   82ea6:	f083 0301 	eor.w	r3, r3, #1
   82eaa:	b2db      	uxtb	r3, r3
   82eac:	2b00      	cmp	r3, #0
   82eae:	d001      	beq.n	82eb4 <udc_iface_enable+0x2c>
		return false;
   82eb0:	2300      	movs	r3, #0
   82eb2:	e027      	b.n	82f04 <udc_iface_enable+0x7c>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   82eb4:	4b16      	ldr	r3, [pc, #88]	; (82f10 <udc_iface_enable+0x88>)
   82eb6:	681b      	ldr	r3, [r3, #0]
   82eb8:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   82eba:	2105      	movs	r1, #5
   82ebc:	68f8      	ldr	r0, [r7, #12]
   82ebe:	4b15      	ldr	r3, [pc, #84]	; (82f14 <udc_iface_enable+0x8c>)
   82ec0:	4798      	blx	r3
   82ec2:	60f8      	str	r0, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   82ec4:	68fb      	ldr	r3, [r7, #12]
   82ec6:	2b00      	cmp	r3, #0
   82ec8:	d011      	beq.n	82eee <udc_iface_enable+0x66>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   82eca:	68fb      	ldr	r3, [r7, #12]
   82ecc:	7898      	ldrb	r0, [r3, #2]
   82ece:	68fb      	ldr	r3, [r7, #12]
   82ed0:	78d9      	ldrb	r1, [r3, #3]
   82ed2:	68fb      	ldr	r3, [r7, #12]
   82ed4:	889b      	ldrh	r3, [r3, #4]
   82ed6:	b29b      	uxth	r3, r3
   82ed8:	461a      	mov	r2, r3
   82eda:	4b0f      	ldr	r3, [pc, #60]	; (82f18 <udc_iface_enable+0x90>)
   82edc:	4798      	blx	r3
   82ede:	4603      	mov	r3, r0
   82ee0:	f083 0301 	eor.w	r3, r3, #1
   82ee4:	b2db      	uxtb	r3, r3
   82ee6:	2b00      	cmp	r3, #0
   82ee8:	d0e7      	beq.n	82eba <udc_iface_enable+0x32>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
   82eea:	2300      	movs	r3, #0
   82eec:	e00a      	b.n	82f04 <udc_iface_enable+0x7c>
			break;
   82eee:	bf00      	nop
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   82ef0:	4b0a      	ldr	r3, [pc, #40]	; (82f1c <udc_iface_enable+0x94>)
   82ef2:	681b      	ldr	r3, [r3, #0]
   82ef4:	685a      	ldr	r2, [r3, #4]
   82ef6:	79fb      	ldrb	r3, [r7, #7]
   82ef8:	009b      	lsls	r3, r3, #2
   82efa:	4413      	add	r3, r2
   82efc:	681b      	ldr	r3, [r3, #0]
   82efe:	681b      	ldr	r3, [r3, #0]
   82f00:	4798      	blx	r3
   82f02:	4603      	mov	r3, r0
}
   82f04:	4618      	mov	r0, r3
   82f06:	3710      	adds	r7, #16
   82f08:	46bd      	mov	sp, r7
   82f0a:	bd80      	pop	{r7, pc}
   82f0c:	00082d4d 	.word	0x00082d4d
   82f10:	20000d14 	.word	0x20000d14
   82f14:	00082cf1 	.word	0x00082cf1
   82f18:	00084161 	.word	0x00084161
   82f1c:	20000d10 	.word	0x20000d10

00082f20 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   82f20:	b580      	push	{r7, lr}
   82f22:	af00      	add	r7, sp, #0
	udd_enable();
   82f24:	4b01      	ldr	r3, [pc, #4]	; (82f2c <udc_start+0xc>)
   82f26:	4798      	blx	r3
}
   82f28:	bf00      	nop
   82f2a:	bd80      	pop	{r7, pc}
   82f2c:	00083f1d 	.word	0x00083f1d

00082f30 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   82f30:	b580      	push	{r7, lr}
   82f32:	b082      	sub	sp, #8
   82f34:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   82f36:	4b0f      	ldr	r3, [pc, #60]	; (82f74 <udc_reset+0x44>)
   82f38:	781b      	ldrb	r3, [r3, #0]
   82f3a:	2b00      	cmp	r3, #0
   82f3c:	d010      	beq.n	82f60 <udc_reset+0x30>
		for (iface_num = 0;
   82f3e:	2300      	movs	r3, #0
   82f40:	71fb      	strb	r3, [r7, #7]
   82f42:	e006      	b.n	82f52 <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   82f44:	79fb      	ldrb	r3, [r7, #7]
   82f46:	4618      	mov	r0, r3
   82f48:	4b0b      	ldr	r3, [pc, #44]	; (82f78 <udc_reset+0x48>)
   82f4a:	4798      	blx	r3
				iface_num++) {
   82f4c:	79fb      	ldrb	r3, [r7, #7]
   82f4e:	3301      	adds	r3, #1
   82f50:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82f52:	4b0a      	ldr	r3, [pc, #40]	; (82f7c <udc_reset+0x4c>)
   82f54:	681b      	ldr	r3, [r3, #0]
   82f56:	681b      	ldr	r3, [r3, #0]
   82f58:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   82f5a:	79fa      	ldrb	r2, [r7, #7]
   82f5c:	429a      	cmp	r2, r3
   82f5e:	d3f1      	bcc.n	82f44 <udc_reset+0x14>
		}
	}
	udc_num_configuration = 0;
   82f60:	4b04      	ldr	r3, [pc, #16]	; (82f74 <udc_reset+0x44>)
   82f62:	2200      	movs	r2, #0
   82f64:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   82f66:	4b06      	ldr	r3, [pc, #24]	; (82f80 <udc_reset+0x50>)
   82f68:	2200      	movs	r2, #0
   82f6a:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
   82f6c:	bf00      	nop
   82f6e:	3708      	adds	r7, #8
   82f70:	46bd      	mov	sp, r7
   82f72:	bd80      	pop	{r7, pc}
   82f74:	20000d0e 	.word	0x20000d0e
   82f78:	00082de9 	.word	0x00082de9
   82f7c:	20000d10 	.word	0x20000d10
   82f80:	20000d0c 	.word	0x20000d0c

00082f84 <udc_sof_notify>:

void udc_sof_notify(void)
{
   82f84:	b580      	push	{r7, lr}
   82f86:	b082      	sub	sp, #8
   82f88:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   82f8a:	4b14      	ldr	r3, [pc, #80]	; (82fdc <udc_sof_notify+0x58>)
   82f8c:	781b      	ldrb	r3, [r3, #0]
   82f8e:	2b00      	cmp	r3, #0
   82f90:	d01f      	beq.n	82fd2 <udc_sof_notify+0x4e>
		for (iface_num = 0;
   82f92:	2300      	movs	r3, #0
   82f94:	71fb      	strb	r3, [r7, #7]
   82f96:	e015      	b.n	82fc4 <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   82f98:	4b11      	ldr	r3, [pc, #68]	; (82fe0 <udc_sof_notify+0x5c>)
   82f9a:	681b      	ldr	r3, [r3, #0]
   82f9c:	685a      	ldr	r2, [r3, #4]
   82f9e:	79fb      	ldrb	r3, [r7, #7]
   82fa0:	009b      	lsls	r3, r3, #2
   82fa2:	4413      	add	r3, r2
   82fa4:	681b      	ldr	r3, [r3, #0]
   82fa6:	691b      	ldr	r3, [r3, #16]
   82fa8:	2b00      	cmp	r3, #0
   82faa:	d008      	beq.n	82fbe <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   82fac:	4b0c      	ldr	r3, [pc, #48]	; (82fe0 <udc_sof_notify+0x5c>)
   82fae:	681b      	ldr	r3, [r3, #0]
   82fb0:	685a      	ldr	r2, [r3, #4]
   82fb2:	79fb      	ldrb	r3, [r7, #7]
   82fb4:	009b      	lsls	r3, r3, #2
   82fb6:	4413      	add	r3, r2
   82fb8:	681b      	ldr	r3, [r3, #0]
   82fba:	691b      	ldr	r3, [r3, #16]
   82fbc:	4798      	blx	r3
				iface_num++) {
   82fbe:	79fb      	ldrb	r3, [r7, #7]
   82fc0:	3301      	adds	r3, #1
   82fc2:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82fc4:	4b06      	ldr	r3, [pc, #24]	; (82fe0 <udc_sof_notify+0x5c>)
   82fc6:	681b      	ldr	r3, [r3, #0]
   82fc8:	681b      	ldr	r3, [r3, #0]
   82fca:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   82fcc:	79fa      	ldrb	r2, [r7, #7]
   82fce:	429a      	cmp	r2, r3
   82fd0:	d3e2      	bcc.n	82f98 <udc_sof_notify+0x14>
			}
		}
	}
}
   82fd2:	bf00      	nop
   82fd4:	3708      	adds	r7, #8
   82fd6:	46bd      	mov	sp, r7
   82fd8:	bd80      	pop	{r7, pc}
   82fda:	bf00      	nop
   82fdc:	20000d0e 	.word	0x20000d0e
   82fe0:	20000d10 	.word	0x20000d10

00082fe4 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
   82fe4:	b580      	push	{r7, lr}
   82fe6:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   82fe8:	4b06      	ldr	r3, [pc, #24]	; (83004 <udc_req_std_dev_get_status+0x20>)
   82fea:	88db      	ldrh	r3, [r3, #6]
   82fec:	2b02      	cmp	r3, #2
   82fee:	d001      	beq.n	82ff4 <udc_req_std_dev_get_status+0x10>
		return false;
   82ff0:	2300      	movs	r3, #0
   82ff2:	e004      	b.n	82ffe <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   82ff4:	2102      	movs	r1, #2
   82ff6:	4804      	ldr	r0, [pc, #16]	; (83008 <udc_req_std_dev_get_status+0x24>)
   82ff8:	4b04      	ldr	r3, [pc, #16]	; (8300c <udc_req_std_dev_get_status+0x28>)
   82ffa:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   82ffc:	2301      	movs	r3, #1
}
   82ffe:	4618      	mov	r0, r3
   83000:	bd80      	pop	{r7, pc}
   83002:	bf00      	nop
   83004:	20000d64 	.word	0x20000d64
   83008:	20000d0c 	.word	0x20000d0c
   8300c:	00084139 	.word	0x00084139

00083010 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
   83010:	b580      	push	{r7, lr}
   83012:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   83014:	4b0b      	ldr	r3, [pc, #44]	; (83044 <udc_req_std_ep_get_status+0x34>)
   83016:	88db      	ldrh	r3, [r3, #6]
   83018:	2b02      	cmp	r3, #2
   8301a:	d001      	beq.n	83020 <udc_req_std_ep_get_status+0x10>
		return false;
   8301c:	2300      	movs	r3, #0
   8301e:	e00e      	b.n	8303e <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   83020:	4b08      	ldr	r3, [pc, #32]	; (83044 <udc_req_std_ep_get_status+0x34>)
   83022:	889b      	ldrh	r3, [r3, #4]
   83024:	b2db      	uxtb	r3, r3
   83026:	4618      	mov	r0, r3
   83028:	4b07      	ldr	r3, [pc, #28]	; (83048 <udc_req_std_ep_get_status+0x38>)
   8302a:	4798      	blx	r3
   8302c:	4603      	mov	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   8302e:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   83030:	4b06      	ldr	r3, [pc, #24]	; (8304c <udc_req_std_ep_get_status+0x3c>)
   83032:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   83034:	2102      	movs	r1, #2
   83036:	4805      	ldr	r0, [pc, #20]	; (8304c <udc_req_std_ep_get_status+0x3c>)
   83038:	4b05      	ldr	r3, [pc, #20]	; (83050 <udc_req_std_ep_get_status+0x40>)
   8303a:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
   8303c:	2301      	movs	r3, #1
}
   8303e:	4618      	mov	r0, r3
   83040:	bd80      	pop	{r7, pc}
   83042:	bf00      	nop
   83044:	20000d64 	.word	0x20000d64
   83048:	0008458d 	.word	0x0008458d
   8304c:	20000d18 	.word	0x20000d18
   83050:	00084139 	.word	0x00084139

00083054 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
   83054:	b480      	push	{r7}
   83056:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83058:	4b0b      	ldr	r3, [pc, #44]	; (83088 <udc_req_std_dev_clear_feature+0x34>)
   8305a:	88db      	ldrh	r3, [r3, #6]
   8305c:	2b00      	cmp	r3, #0
   8305e:	d001      	beq.n	83064 <udc_req_std_dev_clear_feature+0x10>
		return false;
   83060:	2300      	movs	r3, #0
   83062:	e00d      	b.n	83080 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   83064:	4b08      	ldr	r3, [pc, #32]	; (83088 <udc_req_std_dev_clear_feature+0x34>)
   83066:	885b      	ldrh	r3, [r3, #2]
   83068:	2b01      	cmp	r3, #1
   8306a:	d108      	bne.n	8307e <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   8306c:	4b07      	ldr	r3, [pc, #28]	; (8308c <udc_req_std_dev_clear_feature+0x38>)
   8306e:	881b      	ldrh	r3, [r3, #0]
   83070:	f023 0302 	bic.w	r3, r3, #2
   83074:	b29a      	uxth	r2, r3
   83076:	4b05      	ldr	r3, [pc, #20]	; (8308c <udc_req_std_dev_clear_feature+0x38>)
   83078:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   8307a:	2301      	movs	r3, #1
   8307c:	e000      	b.n	83080 <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
   8307e:	2300      	movs	r3, #0
}
   83080:	4618      	mov	r0, r3
   83082:	46bd      	mov	sp, r7
   83084:	bc80      	pop	{r7}
   83086:	4770      	bx	lr
   83088:	20000d64 	.word	0x20000d64
   8308c:	20000d0c 	.word	0x20000d0c

00083090 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
   83090:	b580      	push	{r7, lr}
   83092:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83094:	4b0a      	ldr	r3, [pc, #40]	; (830c0 <udc_req_std_ep_clear_feature+0x30>)
   83096:	88db      	ldrh	r3, [r3, #6]
   83098:	2b00      	cmp	r3, #0
   8309a:	d001      	beq.n	830a0 <udc_req_std_ep_clear_feature+0x10>
		return false;
   8309c:	2300      	movs	r3, #0
   8309e:	e00c      	b.n	830ba <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   830a0:	4b07      	ldr	r3, [pc, #28]	; (830c0 <udc_req_std_ep_clear_feature+0x30>)
   830a2:	885b      	ldrh	r3, [r3, #2]
   830a4:	2b00      	cmp	r3, #0
   830a6:	d107      	bne.n	830b8 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   830a8:	4b05      	ldr	r3, [pc, #20]	; (830c0 <udc_req_std_ep_clear_feature+0x30>)
   830aa:	889b      	ldrh	r3, [r3, #4]
   830ac:	b2db      	uxtb	r3, r3
   830ae:	4618      	mov	r0, r3
   830b0:	4b04      	ldr	r3, [pc, #16]	; (830c4 <udc_req_std_ep_clear_feature+0x34>)
   830b2:	4798      	blx	r3
   830b4:	4603      	mov	r3, r0
   830b6:	e000      	b.n	830ba <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
   830b8:	2300      	movs	r3, #0
}
   830ba:	4618      	mov	r0, r3
   830bc:	bd80      	pop	{r7, pc}
   830be:	bf00      	nop
   830c0:	20000d64 	.word	0x20000d64
   830c4:	00084709 	.word	0x00084709

000830c8 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
   830c8:	b580      	push	{r7, lr}
   830ca:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   830cc:	4b26      	ldr	r3, [pc, #152]	; (83168 <udc_req_std_dev_set_feature+0xa0>)
   830ce:	88db      	ldrh	r3, [r3, #6]
   830d0:	2b00      	cmp	r3, #0
   830d2:	d001      	beq.n	830d8 <udc_req_std_dev_set_feature+0x10>
		return false;
   830d4:	2300      	movs	r3, #0
   830d6:	e045      	b.n	83164 <udc_req_std_dev_set_feature+0x9c>
	}

	switch (udd_g_ctrlreq.req.wValue) {
   830d8:	4b23      	ldr	r3, [pc, #140]	; (83168 <udc_req_std_dev_set_feature+0xa0>)
   830da:	885b      	ldrh	r3, [r3, #2]
   830dc:	2b01      	cmp	r3, #1
   830de:	d002      	beq.n	830e6 <udc_req_std_dev_set_feature+0x1e>
   830e0:	2b02      	cmp	r3, #2
   830e2:	d002      	beq.n	830ea <udc_req_std_dev_set_feature+0x22>
			break;
		}
		break;
#endif
	default:
		break;
   830e4:	e03d      	b.n	83162 <udc_req_std_dev_set_feature+0x9a>
		return false;
   830e6:	2300      	movs	r3, #0
   830e8:	e03c      	b.n	83164 <udc_req_std_dev_set_feature+0x9c>
		if (!udd_is_high_speed()) {
   830ea:	4b20      	ldr	r3, [pc, #128]	; (8316c <udc_req_std_dev_set_feature+0xa4>)
   830ec:	4798      	blx	r3
   830ee:	4603      	mov	r3, r0
   830f0:	f083 0301 	eor.w	r3, r3, #1
   830f4:	b2db      	uxtb	r3, r3
   830f6:	2b00      	cmp	r3, #0
   830f8:	d130      	bne.n	8315c <udc_req_std_dev_set_feature+0x94>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   830fa:	4b1b      	ldr	r3, [pc, #108]	; (83168 <udc_req_std_dev_set_feature+0xa0>)
   830fc:	889b      	ldrh	r3, [r3, #4]
   830fe:	b2db      	uxtb	r3, r3
   83100:	2b00      	cmp	r3, #0
   83102:	d12d      	bne.n	83160 <udc_req_std_dev_set_feature+0x98>
		udc_reset();
   83104:	4b1a      	ldr	r3, [pc, #104]	; (83170 <udc_req_std_dev_set_feature+0xa8>)
   83106:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   83108:	4b17      	ldr	r3, [pc, #92]	; (83168 <udc_req_std_dev_set_feature+0xa0>)
   8310a:	889b      	ldrh	r3, [r3, #4]
   8310c:	0a1b      	lsrs	r3, r3, #8
   8310e:	b29b      	uxth	r3, r3
   83110:	b2db      	uxtb	r3, r3
   83112:	3b01      	subs	r3, #1
   83114:	2b03      	cmp	r3, #3
   83116:	d81f      	bhi.n	83158 <udc_req_std_dev_set_feature+0x90>
   83118:	a201      	add	r2, pc, #4	; (adr r2, 83120 <udc_req_std_dev_set_feature+0x58>)
   8311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8311e:	bf00      	nop
   83120:	00083131 	.word	0x00083131
   83124:	0008313b 	.word	0x0008313b
   83128:	00083145 	.word	0x00083145
   8312c:	0008314f 	.word	0x0008314f
			udd_g_ctrlreq.callback = udd_test_mode_j;
   83130:	4b0d      	ldr	r3, [pc, #52]	; (83168 <udc_req_std_dev_set_feature+0xa0>)
   83132:	4a10      	ldr	r2, [pc, #64]	; (83174 <udc_req_std_dev_set_feature+0xac>)
   83134:	611a      	str	r2, [r3, #16]
			return true;
   83136:	2301      	movs	r3, #1
   83138:	e014      	b.n	83164 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   8313a:	4b0b      	ldr	r3, [pc, #44]	; (83168 <udc_req_std_dev_set_feature+0xa0>)
   8313c:	4a0e      	ldr	r2, [pc, #56]	; (83178 <udc_req_std_dev_set_feature+0xb0>)
   8313e:	611a      	str	r2, [r3, #16]
			return true;
   83140:	2301      	movs	r3, #1
   83142:	e00f      	b.n	83164 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   83144:	4b08      	ldr	r3, [pc, #32]	; (83168 <udc_req_std_dev_set_feature+0xa0>)
   83146:	4a0d      	ldr	r2, [pc, #52]	; (8317c <udc_req_std_dev_set_feature+0xb4>)
   83148:	611a      	str	r2, [r3, #16]
			return true;
   8314a:	2301      	movs	r3, #1
   8314c:	e00a      	b.n	83164 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   8314e:	4b06      	ldr	r3, [pc, #24]	; (83168 <udc_req_std_dev_set_feature+0xa0>)
   83150:	4a0b      	ldr	r2, [pc, #44]	; (83180 <udc_req_std_dev_set_feature+0xb8>)
   83152:	611a      	str	r2, [r3, #16]
			return true;
   83154:	2301      	movs	r3, #1
   83156:	e005      	b.n	83164 <udc_req_std_dev_set_feature+0x9c>
			break;
   83158:	bf00      	nop
		break;
   8315a:	e002      	b.n	83162 <udc_req_std_dev_set_feature+0x9a>
			break;
   8315c:	bf00      	nop
   8315e:	e000      	b.n	83162 <udc_req_std_dev_set_feature+0x9a>
			break;
   83160:	bf00      	nop
	}
	return false;
   83162:	2300      	movs	r3, #0
}
   83164:	4618      	mov	r0, r3
   83166:	bd80      	pop	{r7, pc}
   83168:	20000d64 	.word	0x20000d64
   8316c:	000840b5 	.word	0x000840b5
   83170:	00082f31 	.word	0x00082f31
   83174:	000849c9 	.word	0x000849c9
   83178:	000849fd 	.word	0x000849fd
   8317c:	00084a31 	.word	0x00084a31
   83180:	00084a55 	.word	0x00084a55

00083184 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
   83184:	b580      	push	{r7, lr}
   83186:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83188:	4b0d      	ldr	r3, [pc, #52]	; (831c0 <udc_req_std_ep_set_feature+0x3c>)
   8318a:	88db      	ldrh	r3, [r3, #6]
   8318c:	2b00      	cmp	r3, #0
   8318e:	d001      	beq.n	83194 <udc_req_std_ep_set_feature+0x10>
		return false;
   83190:	2300      	movs	r3, #0
   83192:	e012      	b.n	831ba <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   83194:	4b0a      	ldr	r3, [pc, #40]	; (831c0 <udc_req_std_ep_set_feature+0x3c>)
   83196:	885b      	ldrh	r3, [r3, #2]
   83198:	2b00      	cmp	r3, #0
   8319a:	d10d      	bne.n	831b8 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   8319c:	4b08      	ldr	r3, [pc, #32]	; (831c0 <udc_req_std_ep_set_feature+0x3c>)
   8319e:	889b      	ldrh	r3, [r3, #4]
   831a0:	b2db      	uxtb	r3, r3
   831a2:	4618      	mov	r0, r3
   831a4:	4b07      	ldr	r3, [pc, #28]	; (831c4 <udc_req_std_ep_set_feature+0x40>)
   831a6:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   831a8:	4b05      	ldr	r3, [pc, #20]	; (831c0 <udc_req_std_ep_set_feature+0x3c>)
   831aa:	889b      	ldrh	r3, [r3, #4]
   831ac:	b2db      	uxtb	r3, r3
   831ae:	4618      	mov	r0, r3
   831b0:	4b05      	ldr	r3, [pc, #20]	; (831c8 <udc_req_std_ep_set_feature+0x44>)
   831b2:	4798      	blx	r3
   831b4:	4603      	mov	r3, r0
   831b6:	e000      	b.n	831ba <udc_req_std_ep_set_feature+0x36>
	}
	return false;
   831b8:	2300      	movs	r3, #0
}
   831ba:	4618      	mov	r0, r3
   831bc:	bd80      	pop	{r7, pc}
   831be:	bf00      	nop
   831c0:	20000d64 	.word	0x20000d64
   831c4:	00084941 	.word	0x00084941
   831c8:	000845f5 	.word	0x000845f5

000831cc <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   831cc:	b580      	push	{r7, lr}
   831ce:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   831d0:	4b05      	ldr	r3, [pc, #20]	; (831e8 <udc_valid_address+0x1c>)
   831d2:	885b      	ldrh	r3, [r3, #2]
   831d4:	b2db      	uxtb	r3, r3
   831d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   831da:	b2db      	uxtb	r3, r3
   831dc:	4618      	mov	r0, r3
   831de:	4b03      	ldr	r3, [pc, #12]	; (831ec <udc_valid_address+0x20>)
   831e0:	4798      	blx	r3
}
   831e2:	bf00      	nop
   831e4:	bd80      	pop	{r7, pc}
   831e6:	bf00      	nop
   831e8:	20000d64 	.word	0x20000d64
   831ec:	000840d9 	.word	0x000840d9

000831f0 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
   831f0:	b480      	push	{r7}
   831f2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   831f4:	4b06      	ldr	r3, [pc, #24]	; (83210 <udc_req_std_dev_set_address+0x20>)
   831f6:	88db      	ldrh	r3, [r3, #6]
   831f8:	2b00      	cmp	r3, #0
   831fa:	d001      	beq.n	83200 <udc_req_std_dev_set_address+0x10>
		return false;
   831fc:	2300      	movs	r3, #0
   831fe:	e003      	b.n	83208 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   83200:	4b03      	ldr	r3, [pc, #12]	; (83210 <udc_req_std_dev_set_address+0x20>)
   83202:	4a04      	ldr	r2, [pc, #16]	; (83214 <udc_req_std_dev_set_address+0x24>)
   83204:	611a      	str	r2, [r3, #16]
	return true;
   83206:	2301      	movs	r3, #1
}
   83208:	4618      	mov	r0, r3
   8320a:	46bd      	mov	sp, r7
   8320c:	bc80      	pop	{r7}
   8320e:	4770      	bx	lr
   83210:	20000d64 	.word	0x20000d64
   83214:	000831cd 	.word	0x000831cd

00083218 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
   83218:	b580      	push	{r7, lr}
   8321a:	b084      	sub	sp, #16
   8321c:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
   8321e:	2300      	movs	r3, #0
   83220:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   83222:	4b29      	ldr	r3, [pc, #164]	; (832c8 <udc_req_std_dev_get_str_desc+0xb0>)
   83224:	885b      	ldrh	r3, [r3, #2]
   83226:	b2db      	uxtb	r3, r3
   83228:	2b03      	cmp	r3, #3
   8322a:	d820      	bhi.n	8326e <udc_req_std_dev_get_str_desc+0x56>
   8322c:	a201      	add	r2, pc, #4	; (adr r2, 83234 <udc_req_std_dev_get_str_desc+0x1c>)
   8322e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83232:	bf00      	nop
   83234:	00083245 	.word	0x00083245
   83238:	0008324f 	.word	0x0008324f
   8323c:	00083259 	.word	0x00083259
   83240:	00083263 	.word	0x00083263
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   83244:	2104      	movs	r1, #4
   83246:	4821      	ldr	r0, [pc, #132]	; (832cc <udc_req_std_dev_get_str_desc+0xb4>)
   83248:	4b21      	ldr	r3, [pc, #132]	; (832d0 <udc_req_std_dev_get_str_desc+0xb8>)
   8324a:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
   8324c:	e011      	b.n	83272 <udc_req_std_dev_get_str_desc+0x5a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   8324e:	2315      	movs	r3, #21
   83250:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
   83252:	4b20      	ldr	r3, [pc, #128]	; (832d4 <udc_req_std_dev_get_str_desc+0xbc>)
   83254:	60bb      	str	r3, [r7, #8]
		break;
   83256:	e00c      	b.n	83272 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   83258:	2313      	movs	r3, #19
   8325a:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
   8325c:	4b1e      	ldr	r3, [pc, #120]	; (832d8 <udc_req_std_dev_get_str_desc+0xc0>)
   8325e:	60bb      	str	r3, [r7, #8]
		break;
   83260:	e007      	b.n	83272 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   83262:	2320      	movs	r3, #32
   83264:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
   83266:	4b1d      	ldr	r3, [pc, #116]	; (832dc <udc_req_std_dev_get_str_desc+0xc4>)
   83268:	4798      	blx	r3
   8326a:	60b8      	str	r0, [r7, #8]
		break;
   8326c:	e001      	b.n	83272 <udc_req_std_dev_get_str_desc+0x5a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
   8326e:	2300      	movs	r3, #0
   83270:	e026      	b.n	832c0 <udc_req_std_dev_get_str_desc+0xa8>
	}

	if (str_length) {
   83272:	79fb      	ldrb	r3, [r7, #7]
   83274:	2b00      	cmp	r3, #0
   83276:	d022      	beq.n	832be <udc_req_std_dev_get_str_desc+0xa6>
		for(i = 0; i < str_length; i++) {
   83278:	2300      	movs	r3, #0
   8327a:	73fb      	strb	r3, [r7, #15]
   8327c:	e00d      	b.n	8329a <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   8327e:	7bfb      	ldrb	r3, [r7, #15]
   83280:	68ba      	ldr	r2, [r7, #8]
   83282:	4413      	add	r3, r2
   83284:	781a      	ldrb	r2, [r3, #0]
   83286:	7bfb      	ldrb	r3, [r7, #15]
   83288:	b291      	uxth	r1, r2
   8328a:	4a15      	ldr	r2, [pc, #84]	; (832e0 <udc_req_std_dev_get_str_desc+0xc8>)
   8328c:	005b      	lsls	r3, r3, #1
   8328e:	4413      	add	r3, r2
   83290:	460a      	mov	r2, r1
   83292:	805a      	strh	r2, [r3, #2]
		for(i = 0; i < str_length; i++) {
   83294:	7bfb      	ldrb	r3, [r7, #15]
   83296:	3301      	adds	r3, #1
   83298:	73fb      	strb	r3, [r7, #15]
   8329a:	7bfa      	ldrb	r2, [r7, #15]
   8329c:	79fb      	ldrb	r3, [r7, #7]
   8329e:	429a      	cmp	r2, r3
   832a0:	d3ed      	bcc.n	8327e <udc_req_std_dev_get_str_desc+0x66>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   832a2:	79fb      	ldrb	r3, [r7, #7]
   832a4:	3301      	adds	r3, #1
   832a6:	b2db      	uxtb	r3, r3
   832a8:	005b      	lsls	r3, r3, #1
   832aa:	b2da      	uxtb	r2, r3
   832ac:	4b0c      	ldr	r3, [pc, #48]	; (832e0 <udc_req_std_dev_get_str_desc+0xc8>)
   832ae:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
   832b0:	4b0b      	ldr	r3, [pc, #44]	; (832e0 <udc_req_std_dev_get_str_desc+0xc8>)
   832b2:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
   832b4:	b29b      	uxth	r3, r3
   832b6:	4619      	mov	r1, r3
   832b8:	4809      	ldr	r0, [pc, #36]	; (832e0 <udc_req_std_dev_get_str_desc+0xc8>)
   832ba:	4b05      	ldr	r3, [pc, #20]	; (832d0 <udc_req_std_dev_get_str_desc+0xb8>)
   832bc:	4798      	blx	r3
	}

	return true;
   832be:	2301      	movs	r3, #1
}
   832c0:	4618      	mov	r0, r3
   832c2:	3710      	adds	r7, #16
   832c4:	46bd      	mov	sp, r7
   832c6:	bd80      	pop	{r7, pc}
   832c8:	20000d64 	.word	0x20000d64
   832cc:	2000029c 	.word	0x2000029c
   832d0:	00084139 	.word	0x00084139
   832d4:	200002a0 	.word	0x200002a0
   832d8:	200002b8 	.word	0x200002b8
   832dc:	00082ca5 	.word	0x00082ca5
   832e0:	200002cc 	.word	0x200002cc

000832e4 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
   832e4:	b580      	push	{r7, lr}
   832e6:	b082      	sub	sp, #8
   832e8:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   832ea:	4b80      	ldr	r3, [pc, #512]	; (834ec <udc_req_std_dev_get_descriptor+0x208>)
   832ec:	885b      	ldrh	r3, [r3, #2]
   832ee:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   832f0:	4b7e      	ldr	r3, [pc, #504]	; (834ec <udc_req_std_dev_get_descriptor+0x208>)
   832f2:	885b      	ldrh	r3, [r3, #2]
   832f4:	0a1b      	lsrs	r3, r3, #8
   832f6:	b29b      	uxth	r3, r3
   832f8:	b2db      	uxtb	r3, r3
   832fa:	3b01      	subs	r3, #1
   832fc:	2b0e      	cmp	r3, #14
   832fe:	f200 80e2 	bhi.w	834c6 <udc_req_std_dev_get_descriptor+0x1e2>
   83302:	a201      	add	r2, pc, #4	; (adr r2, 83308 <udc_req_std_dev_get_descriptor+0x24>)
   83304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83308:	00083345 	.word	0x00083345
   8330c:	00083381 	.word	0x00083381
   83310:	000834b3 	.word	0x000834b3
   83314:	000834c7 	.word	0x000834c7
   83318:	000834c7 	.word	0x000834c7
   8331c:	000833fb 	.word	0x000833fb
   83320:	00083411 	.word	0x00083411
   83324:	000834c7 	.word	0x000834c7
   83328:	000834c7 	.word	0x000834c7
   8332c:	000834c7 	.word	0x000834c7
   83330:	000834c7 	.word	0x000834c7
   83334:	000834c7 	.word	0x000834c7
   83338:	000834c7 	.word	0x000834c7
   8333c:	000834c7 	.word	0x000834c7
   83340:	00083491 	.word	0x00083491
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   83344:	4b6a      	ldr	r3, [pc, #424]	; (834f0 <udc_req_std_dev_get_descriptor+0x20c>)
   83346:	4798      	blx	r3
   83348:	4603      	mov	r3, r0
   8334a:	f083 0301 	eor.w	r3, r3, #1
   8334e:	b2db      	uxtb	r3, r3
   83350:	2b00      	cmp	r3, #0
   83352:	d00a      	beq.n	8336a <udc_req_std_dev_get_descriptor+0x86>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
   83354:	4b67      	ldr	r3, [pc, #412]	; (834f4 <udc_req_std_dev_get_descriptor+0x210>)
   83356:	689a      	ldr	r2, [r3, #8]
				udc_config.confdev_hs->bLength);
   83358:	4b66      	ldr	r3, [pc, #408]	; (834f4 <udc_req_std_dev_get_descriptor+0x210>)
   8335a:	689b      	ldr	r3, [r3, #8]
   8335c:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   8335e:	b29b      	uxth	r3, r3
   83360:	4619      	mov	r1, r3
   83362:	4610      	mov	r0, r2
   83364:	4b64      	ldr	r3, [pc, #400]	; (834f8 <udc_req_std_dev_get_descriptor+0x214>)
   83366:	4798      	blx	r3
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
   83368:	e0b0      	b.n	834cc <udc_req_std_dev_get_descriptor+0x1e8>
				(uint8_t *) udc_config.confdev_lsfs,
   8336a:	4b62      	ldr	r3, [pc, #392]	; (834f4 <udc_req_std_dev_get_descriptor+0x210>)
   8336c:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
   8336e:	4b61      	ldr	r3, [pc, #388]	; (834f4 <udc_req_std_dev_get_descriptor+0x210>)
   83370:	681b      	ldr	r3, [r3, #0]
   83372:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   83374:	b29b      	uxth	r3, r3
   83376:	4619      	mov	r1, r3
   83378:	4610      	mov	r0, r2
   8337a:	4b5f      	ldr	r3, [pc, #380]	; (834f8 <udc_req_std_dev_get_descriptor+0x214>)
   8337c:	4798      	blx	r3
		break;
   8337e:	e0a5      	b.n	834cc <udc_req_std_dev_get_descriptor+0x1e8>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   83380:	4b5b      	ldr	r3, [pc, #364]	; (834f0 <udc_req_std_dev_get_descriptor+0x20c>)
   83382:	4798      	blx	r3
   83384:	4603      	mov	r3, r0
   83386:	2b00      	cmp	r3, #0
   83388:	d019      	beq.n	833be <udc_req_std_dev_get_descriptor+0xda>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   8338a:	4b5a      	ldr	r3, [pc, #360]	; (834f4 <udc_req_std_dev_get_descriptor+0x210>)
   8338c:	689b      	ldr	r3, [r3, #8]
   8338e:	7c5b      	ldrb	r3, [r3, #17]
   83390:	79fa      	ldrb	r2, [r7, #7]
   83392:	429a      	cmp	r2, r3
   83394:	d301      	bcc.n	8339a <udc_req_std_dev_get_descriptor+0xb6>
					bNumConfigurations) {
				return false;
   83396:	2300      	movs	r3, #0
   83398:	e0a3      	b.n	834e2 <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   8339a:	4b56      	ldr	r3, [pc, #344]	; (834f4 <udc_req_std_dev_get_descriptor+0x210>)
   8339c:	691a      	ldr	r2, [r3, #16]
   8339e:	79fb      	ldrb	r3, [r7, #7]
   833a0:	00db      	lsls	r3, r3, #3
   833a2:	4413      	add	r3, r2
   833a4:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   833a6:	4b53      	ldr	r3, [pc, #332]	; (834f4 <udc_req_std_dev_get_descriptor+0x210>)
   833a8:	691a      	ldr	r2, [r3, #16]
   833aa:	79fb      	ldrb	r3, [r7, #7]
   833ac:	00db      	lsls	r3, r3, #3
   833ae:	4413      	add	r3, r2
   833b0:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   833b2:	885b      	ldrh	r3, [r3, #2]
   833b4:	b29b      	uxth	r3, r3
   833b6:	4619      	mov	r1, r3
   833b8:	4b4f      	ldr	r3, [pc, #316]	; (834f8 <udc_req_std_dev_get_descriptor+0x214>)
   833ba:	4798      	blx	r3
   833bc:	e018      	b.n	833f0 <udc_req_std_dev_get_descriptor+0x10c>
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   833be:	4b4d      	ldr	r3, [pc, #308]	; (834f4 <udc_req_std_dev_get_descriptor+0x210>)
   833c0:	681b      	ldr	r3, [r3, #0]
   833c2:	7c5b      	ldrb	r3, [r3, #17]
   833c4:	79fa      	ldrb	r2, [r7, #7]
   833c6:	429a      	cmp	r2, r3
   833c8:	d301      	bcc.n	833ce <udc_req_std_dev_get_descriptor+0xea>
					bNumConfigurations) {
				return false;
   833ca:	2300      	movs	r3, #0
   833cc:	e089      	b.n	834e2 <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   833ce:	4b49      	ldr	r3, [pc, #292]	; (834f4 <udc_req_std_dev_get_descriptor+0x210>)
   833d0:	685a      	ldr	r2, [r3, #4]
   833d2:	79fb      	ldrb	r3, [r7, #7]
   833d4:	00db      	lsls	r3, r3, #3
   833d6:	4413      	add	r3, r2
   833d8:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   833da:	4b46      	ldr	r3, [pc, #280]	; (834f4 <udc_req_std_dev_get_descriptor+0x210>)
   833dc:	685a      	ldr	r2, [r3, #4]
   833de:	79fb      	ldrb	r3, [r7, #7]
   833e0:	00db      	lsls	r3, r3, #3
   833e2:	4413      	add	r3, r2
   833e4:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   833e6:	885b      	ldrh	r3, [r3, #2]
   833e8:	b29b      	uxth	r3, r3
   833ea:	4619      	mov	r1, r3
   833ec:	4b42      	ldr	r3, [pc, #264]	; (834f8 <udc_req_std_dev_get_descriptor+0x214>)
   833ee:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   833f0:	4b3e      	ldr	r3, [pc, #248]	; (834ec <udc_req_std_dev_get_descriptor+0x208>)
   833f2:	689b      	ldr	r3, [r3, #8]
   833f4:	2202      	movs	r2, #2
   833f6:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
   833f8:	e068      	b.n	834cc <udc_req_std_dev_get_descriptor+0x1e8>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   833fa:	4b3e      	ldr	r3, [pc, #248]	; (834f4 <udc_req_std_dev_get_descriptor+0x210>)
   833fc:	68da      	ldr	r2, [r3, #12]
				udc_config.qualifier->bLength);
   833fe:	4b3d      	ldr	r3, [pc, #244]	; (834f4 <udc_req_std_dev_get_descriptor+0x210>)
   83400:	68db      	ldr	r3, [r3, #12]
   83402:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   83404:	b29b      	uxth	r3, r3
   83406:	4619      	mov	r1, r3
   83408:	4610      	mov	r0, r2
   8340a:	4b3b      	ldr	r3, [pc, #236]	; (834f8 <udc_req_std_dev_get_descriptor+0x214>)
   8340c:	4798      	blx	r3
		break;
   8340e:	e05d      	b.n	834cc <udc_req_std_dev_get_descriptor+0x1e8>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   83410:	4b37      	ldr	r3, [pc, #220]	; (834f0 <udc_req_std_dev_get_descriptor+0x20c>)
   83412:	4798      	blx	r3
   83414:	4603      	mov	r3, r0
   83416:	f083 0301 	eor.w	r3, r3, #1
   8341a:	b2db      	uxtb	r3, r3
   8341c:	2b00      	cmp	r3, #0
   8341e:	d019      	beq.n	83454 <udc_req_std_dev_get_descriptor+0x170>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   83420:	4b34      	ldr	r3, [pc, #208]	; (834f4 <udc_req_std_dev_get_descriptor+0x210>)
   83422:	689b      	ldr	r3, [r3, #8]
   83424:	7c5b      	ldrb	r3, [r3, #17]
   83426:	79fa      	ldrb	r2, [r7, #7]
   83428:	429a      	cmp	r2, r3
   8342a:	d301      	bcc.n	83430 <udc_req_std_dev_get_descriptor+0x14c>
					bNumConfigurations) {
				return false;
   8342c:	2300      	movs	r3, #0
   8342e:	e058      	b.n	834e2 <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   83430:	4b30      	ldr	r3, [pc, #192]	; (834f4 <udc_req_std_dev_get_descriptor+0x210>)
   83432:	691a      	ldr	r2, [r3, #16]
   83434:	79fb      	ldrb	r3, [r7, #7]
   83436:	00db      	lsls	r3, r3, #3
   83438:	4413      	add	r3, r2
   8343a:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   8343c:	4b2d      	ldr	r3, [pc, #180]	; (834f4 <udc_req_std_dev_get_descriptor+0x210>)
   8343e:	691a      	ldr	r2, [r3, #16]
   83440:	79fb      	ldrb	r3, [r7, #7]
   83442:	00db      	lsls	r3, r3, #3
   83444:	4413      	add	r3, r2
   83446:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   83448:	885b      	ldrh	r3, [r3, #2]
   8344a:	b29b      	uxth	r3, r3
   8344c:	4619      	mov	r1, r3
   8344e:	4b2a      	ldr	r3, [pc, #168]	; (834f8 <udc_req_std_dev_get_descriptor+0x214>)
   83450:	4798      	blx	r3
   83452:	e018      	b.n	83486 <udc_req_std_dev_get_descriptor+0x1a2>
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   83454:	4b27      	ldr	r3, [pc, #156]	; (834f4 <udc_req_std_dev_get_descriptor+0x210>)
   83456:	681b      	ldr	r3, [r3, #0]
   83458:	7c5b      	ldrb	r3, [r3, #17]
   8345a:	79fa      	ldrb	r2, [r7, #7]
   8345c:	429a      	cmp	r2, r3
   8345e:	d301      	bcc.n	83464 <udc_req_std_dev_get_descriptor+0x180>
					bNumConfigurations) {
				return false;
   83460:	2300      	movs	r3, #0
   83462:	e03e      	b.n	834e2 <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   83464:	4b23      	ldr	r3, [pc, #140]	; (834f4 <udc_req_std_dev_get_descriptor+0x210>)
   83466:	685a      	ldr	r2, [r3, #4]
   83468:	79fb      	ldrb	r3, [r7, #7]
   8346a:	00db      	lsls	r3, r3, #3
   8346c:	4413      	add	r3, r2
   8346e:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   83470:	4b20      	ldr	r3, [pc, #128]	; (834f4 <udc_req_std_dev_get_descriptor+0x210>)
   83472:	685a      	ldr	r2, [r3, #4]
   83474:	79fb      	ldrb	r3, [r7, #7]
   83476:	00db      	lsls	r3, r3, #3
   83478:	4413      	add	r3, r2
   8347a:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   8347c:	885b      	ldrh	r3, [r3, #2]
   8347e:	b29b      	uxth	r3, r3
   83480:	4619      	mov	r1, r3
   83482:	4b1d      	ldr	r3, [pc, #116]	; (834f8 <udc_req_std_dev_get_descriptor+0x214>)
   83484:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   83486:	4b19      	ldr	r3, [pc, #100]	; (834ec <udc_req_std_dev_get_descriptor+0x208>)
   83488:	689b      	ldr	r3, [r3, #8]
   8348a:	2207      	movs	r2, #7
   8348c:	705a      	strb	r2, [r3, #1]
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
   8348e:	e01d      	b.n	834cc <udc_req_std_dev_get_descriptor+0x1e8>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
   83490:	4b18      	ldr	r3, [pc, #96]	; (834f4 <udc_req_std_dev_get_descriptor+0x210>)
   83492:	695b      	ldr	r3, [r3, #20]
   83494:	2b00      	cmp	r3, #0
   83496:	d101      	bne.n	8349c <udc_req_std_dev_get_descriptor+0x1b8>
			return false;
   83498:	2300      	movs	r3, #0
   8349a:	e022      	b.n	834e2 <udc_req_std_dev_get_descriptor+0x1fe>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   8349c:	4b15      	ldr	r3, [pc, #84]	; (834f4 <udc_req_std_dev_get_descriptor+0x210>)
   8349e:	695a      	ldr	r2, [r3, #20]
				udc_config.conf_bos->wTotalLength);
   834a0:	4b14      	ldr	r3, [pc, #80]	; (834f4 <udc_req_std_dev_get_descriptor+0x210>)
   834a2:	695b      	ldr	r3, [r3, #20]
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   834a4:	885b      	ldrh	r3, [r3, #2]
   834a6:	b29b      	uxth	r3, r3
   834a8:	4619      	mov	r1, r3
   834aa:	4610      	mov	r0, r2
   834ac:	4b12      	ldr	r3, [pc, #72]	; (834f8 <udc_req_std_dev_get_descriptor+0x214>)
   834ae:	4798      	blx	r3
		break;
   834b0:	e00c      	b.n	834cc <udc_req_std_dev_get_descriptor+0x1e8>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
   834b2:	4b12      	ldr	r3, [pc, #72]	; (834fc <udc_req_std_dev_get_descriptor+0x218>)
   834b4:	4798      	blx	r3
   834b6:	4603      	mov	r3, r0
   834b8:	f083 0301 	eor.w	r3, r3, #1
   834bc:	b2db      	uxtb	r3, r3
   834be:	2b00      	cmp	r3, #0
   834c0:	d003      	beq.n	834ca <udc_req_std_dev_get_descriptor+0x1e6>
			return false;
   834c2:	2300      	movs	r3, #0
   834c4:	e00d      	b.n	834e2 <udc_req_std_dev_get_descriptor+0x1fe>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   834c6:	2300      	movs	r3, #0
   834c8:	e00b      	b.n	834e2 <udc_req_std_dev_get_descriptor+0x1fe>
		break;
   834ca:	bf00      	nop
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   834cc:	4b07      	ldr	r3, [pc, #28]	; (834ec <udc_req_std_dev_get_descriptor+0x208>)
   834ce:	88da      	ldrh	r2, [r3, #6]
   834d0:	4b06      	ldr	r3, [pc, #24]	; (834ec <udc_req_std_dev_get_descriptor+0x208>)
   834d2:	899b      	ldrh	r3, [r3, #12]
   834d4:	429a      	cmp	r2, r3
   834d6:	d203      	bcs.n	834e0 <udc_req_std_dev_get_descriptor+0x1fc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   834d8:	4b04      	ldr	r3, [pc, #16]	; (834ec <udc_req_std_dev_get_descriptor+0x208>)
   834da:	88da      	ldrh	r2, [r3, #6]
   834dc:	4b03      	ldr	r3, [pc, #12]	; (834ec <udc_req_std_dev_get_descriptor+0x208>)
   834de:	819a      	strh	r2, [r3, #12]
	}
	return true;
   834e0:	2301      	movs	r3, #1
}
   834e2:	4618      	mov	r0, r3
   834e4:	3708      	adds	r7, #8
   834e6:	46bd      	mov	sp, r7
   834e8:	bd80      	pop	{r7, pc}
   834ea:	bf00      	nop
   834ec:	20000d64 	.word	0x20000d64
   834f0:	000840b5 	.word	0x000840b5
   834f4:	20000398 	.word	0x20000398
   834f8:	00084139 	.word	0x00084139
   834fc:	00083219 	.word	0x00083219

00083500 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
   83500:	b580      	push	{r7, lr}
   83502:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
   83504:	4b06      	ldr	r3, [pc, #24]	; (83520 <udc_req_std_dev_get_configuration+0x20>)
   83506:	88db      	ldrh	r3, [r3, #6]
   83508:	2b01      	cmp	r3, #1
   8350a:	d001      	beq.n	83510 <udc_req_std_dev_get_configuration+0x10>
		return false;
   8350c:	2300      	movs	r3, #0
   8350e:	e004      	b.n	8351a <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   83510:	2101      	movs	r1, #1
   83512:	4804      	ldr	r0, [pc, #16]	; (83524 <udc_req_std_dev_get_configuration+0x24>)
   83514:	4b04      	ldr	r3, [pc, #16]	; (83528 <udc_req_std_dev_get_configuration+0x28>)
   83516:	4798      	blx	r3
	return true;
   83518:	2301      	movs	r3, #1
}
   8351a:	4618      	mov	r0, r3
   8351c:	bd80      	pop	{r7, pc}
   8351e:	bf00      	nop
   83520:	20000d64 	.word	0x20000d64
   83524:	20000d0e 	.word	0x20000d0e
   83528:	00084139 	.word	0x00084139

0008352c <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
   8352c:	b580      	push	{r7, lr}
   8352e:	b082      	sub	sp, #8
   83530:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   83532:	4b37      	ldr	r3, [pc, #220]	; (83610 <udc_req_std_dev_set_configuration+0xe4>)
   83534:	88db      	ldrh	r3, [r3, #6]
   83536:	2b00      	cmp	r3, #0
   83538:	d001      	beq.n	8353e <udc_req_std_dev_set_configuration+0x12>
		return false;
   8353a:	2300      	movs	r3, #0
   8353c:	e063      	b.n	83606 <udc_req_std_dev_set_configuration+0xda>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   8353e:	4b35      	ldr	r3, [pc, #212]	; (83614 <udc_req_std_dev_set_configuration+0xe8>)
   83540:	4798      	blx	r3
   83542:	4603      	mov	r3, r0
   83544:	2b00      	cmp	r3, #0
   83546:	d101      	bne.n	8354c <udc_req_std_dev_set_configuration+0x20>
		return false;
   83548:	2300      	movs	r3, #0
   8354a:	e05c      	b.n	83606 <udc_req_std_dev_set_configuration+0xda>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   8354c:	4b32      	ldr	r3, [pc, #200]	; (83618 <udc_req_std_dev_set_configuration+0xec>)
   8354e:	4798      	blx	r3
   83550:	4603      	mov	r3, r0
   83552:	2b00      	cmp	r3, #0
   83554:	d009      	beq.n	8356a <udc_req_std_dev_set_configuration+0x3e>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   83556:	4b2e      	ldr	r3, [pc, #184]	; (83610 <udc_req_std_dev_set_configuration+0xe4>)
   83558:	885b      	ldrh	r3, [r3, #2]
   8355a:	b2db      	uxtb	r3, r3
				udc_config.confdev_hs->bNumConfigurations) {
   8355c:	4a2f      	ldr	r2, [pc, #188]	; (8361c <udc_req_std_dev_set_configuration+0xf0>)
   8355e:	6892      	ldr	r2, [r2, #8]
   83560:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   83562:	4293      	cmp	r3, r2
   83564:	dd0b      	ble.n	8357e <udc_req_std_dev_set_configuration+0x52>
			return false;
   83566:	2300      	movs	r3, #0
   83568:	e04d      	b.n	83606 <udc_req_std_dev_set_configuration+0xda>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8356a:	4b29      	ldr	r3, [pc, #164]	; (83610 <udc_req_std_dev_set_configuration+0xe4>)
   8356c:	885b      	ldrh	r3, [r3, #2]
   8356e:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
   83570:	4a2a      	ldr	r2, [pc, #168]	; (8361c <udc_req_std_dev_set_configuration+0xf0>)
   83572:	6812      	ldr	r2, [r2, #0]
   83574:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   83576:	4293      	cmp	r3, r2
   83578:	dd01      	ble.n	8357e <udc_req_std_dev_set_configuration+0x52>
			return false;
   8357a:	2300      	movs	r3, #0
   8357c:	e043      	b.n	83606 <udc_req_std_dev_set_configuration+0xda>
		}
	}

	// Reset current configuration
	udc_reset();
   8357e:	4b28      	ldr	r3, [pc, #160]	; (83620 <udc_req_std_dev_set_configuration+0xf4>)
   83580:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   83582:	4b23      	ldr	r3, [pc, #140]	; (83610 <udc_req_std_dev_set_configuration+0xe4>)
   83584:	885b      	ldrh	r3, [r3, #2]
   83586:	b2da      	uxtb	r2, r3
   83588:	4b26      	ldr	r3, [pc, #152]	; (83624 <udc_req_std_dev_set_configuration+0xf8>)
   8358a:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
   8358c:	4b25      	ldr	r3, [pc, #148]	; (83624 <udc_req_std_dev_set_configuration+0xf8>)
   8358e:	781b      	ldrb	r3, [r3, #0]
   83590:	2b00      	cmp	r3, #0
   83592:	d101      	bne.n	83598 <udc_req_std_dev_set_configuration+0x6c>
		return true; // Default empty configuration requested
   83594:	2301      	movs	r3, #1
   83596:	e036      	b.n	83606 <udc_req_std_dev_set_configuration+0xda>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   83598:	4b1f      	ldr	r3, [pc, #124]	; (83618 <udc_req_std_dev_set_configuration+0xec>)
   8359a:	4798      	blx	r3
   8359c:	4603      	mov	r3, r0
   8359e:	2b00      	cmp	r3, #0
   835a0:	d00b      	beq.n	835ba <udc_req_std_dev_set_configuration+0x8e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   835a2:	4b1e      	ldr	r3, [pc, #120]	; (8361c <udc_req_std_dev_set_configuration+0xf0>)
   835a4:	691a      	ldr	r2, [r3, #16]
   835a6:	4b1f      	ldr	r3, [pc, #124]	; (83624 <udc_req_std_dev_set_configuration+0xf8>)
   835a8:	781b      	ldrb	r3, [r3, #0]
   835aa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   835ae:	3b01      	subs	r3, #1
   835b0:	00db      	lsls	r3, r3, #3
   835b2:	4413      	add	r3, r2
   835b4:	4a1c      	ldr	r2, [pc, #112]	; (83628 <udc_req_std_dev_set_configuration+0xfc>)
   835b6:	6013      	str	r3, [r2, #0]
   835b8:	e00a      	b.n	835d0 <udc_req_std_dev_set_configuration+0xa4>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   835ba:	4b18      	ldr	r3, [pc, #96]	; (8361c <udc_req_std_dev_set_configuration+0xf0>)
   835bc:	685a      	ldr	r2, [r3, #4]
   835be:	4b19      	ldr	r3, [pc, #100]	; (83624 <udc_req_std_dev_set_configuration+0xf8>)
   835c0:	781b      	ldrb	r3, [r3, #0]
   835c2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   835c6:	3b01      	subs	r3, #1
   835c8:	00db      	lsls	r3, r3, #3
   835ca:	4413      	add	r3, r2
   835cc:	4a16      	ldr	r2, [pc, #88]	; (83628 <udc_req_std_dev_set_configuration+0xfc>)
   835ce:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   835d0:	2300      	movs	r3, #0
   835d2:	71fb      	strb	r3, [r7, #7]
   835d4:	e00f      	b.n	835f6 <udc_req_std_dev_set_configuration+0xca>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   835d6:	79fb      	ldrb	r3, [r7, #7]
   835d8:	2100      	movs	r1, #0
   835da:	4618      	mov	r0, r3
   835dc:	4b13      	ldr	r3, [pc, #76]	; (8362c <udc_req_std_dev_set_configuration+0x100>)
   835de:	4798      	blx	r3
   835e0:	4603      	mov	r3, r0
   835e2:	f083 0301 	eor.w	r3, r3, #1
   835e6:	b2db      	uxtb	r3, r3
   835e8:	2b00      	cmp	r3, #0
   835ea:	d001      	beq.n	835f0 <udc_req_std_dev_set_configuration+0xc4>
			return false;
   835ec:	2300      	movs	r3, #0
   835ee:	e00a      	b.n	83606 <udc_req_std_dev_set_configuration+0xda>
			iface_num++) {
   835f0:	79fb      	ldrb	r3, [r7, #7]
   835f2:	3301      	adds	r3, #1
   835f4:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   835f6:	4b0c      	ldr	r3, [pc, #48]	; (83628 <udc_req_std_dev_set_configuration+0xfc>)
   835f8:	681b      	ldr	r3, [r3, #0]
   835fa:	681b      	ldr	r3, [r3, #0]
   835fc:	791b      	ldrb	r3, [r3, #4]
   835fe:	79fa      	ldrb	r2, [r7, #7]
   83600:	429a      	cmp	r2, r3
   83602:	d3e8      	bcc.n	835d6 <udc_req_std_dev_set_configuration+0xaa>
		}
	}
	return true;
   83604:	2301      	movs	r3, #1
}
   83606:	4618      	mov	r0, r3
   83608:	3708      	adds	r7, #8
   8360a:	46bd      	mov	sp, r7
   8360c:	bd80      	pop	{r7, pc}
   8360e:	bf00      	nop
   83610:	20000d64 	.word	0x20000d64
   83614:	0008411d 	.word	0x0008411d
   83618:	000840b5 	.word	0x000840b5
   8361c:	20000398 	.word	0x20000398
   83620:	00082f31 	.word	0x00082f31
   83624:	20000d0e 	.word	0x20000d0e
   83628:	20000d10 	.word	0x20000d10
   8362c:	00082e89 	.word	0x00082e89

00083630 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
   83630:	b580      	push	{r7, lr}
   83632:	b082      	sub	sp, #8
   83634:	af00      	add	r7, sp, #0
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   83636:	4b1e      	ldr	r3, [pc, #120]	; (836b0 <udc_req_std_iface_get_setting+0x80>)
   83638:	88db      	ldrh	r3, [r3, #6]
   8363a:	2b01      	cmp	r3, #1
   8363c:	d001      	beq.n	83642 <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
   8363e:	2300      	movs	r3, #0
   83640:	e032      	b.n	836a8 <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
   83642:	4b1c      	ldr	r3, [pc, #112]	; (836b4 <udc_req_std_iface_get_setting+0x84>)
   83644:	781b      	ldrb	r3, [r3, #0]
   83646:	2b00      	cmp	r3, #0
   83648:	d101      	bne.n	8364e <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
   8364a:	2300      	movs	r3, #0
   8364c:	e02c      	b.n	836a8 <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8364e:	4b18      	ldr	r3, [pc, #96]	; (836b0 <udc_req_std_iface_get_setting+0x80>)
   83650:	889b      	ldrh	r3, [r3, #4]
   83652:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   83654:	4b18      	ldr	r3, [pc, #96]	; (836b8 <udc_req_std_iface_get_setting+0x88>)
   83656:	681b      	ldr	r3, [r3, #0]
   83658:	681b      	ldr	r3, [r3, #0]
   8365a:	791b      	ldrb	r3, [r3, #4]
   8365c:	79fa      	ldrb	r2, [r7, #7]
   8365e:	429a      	cmp	r2, r3
   83660:	d301      	bcc.n	83666 <udc_req_std_iface_get_setting+0x36>
		return false;
   83662:	2300      	movs	r3, #0
   83664:	e020      	b.n	836a8 <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   83666:	79fb      	ldrb	r3, [r7, #7]
   83668:	2100      	movs	r1, #0
   8366a:	4618      	mov	r0, r3
   8366c:	4b13      	ldr	r3, [pc, #76]	; (836bc <udc_req_std_iface_get_setting+0x8c>)
   8366e:	4798      	blx	r3
   83670:	4603      	mov	r3, r0
   83672:	f083 0301 	eor.w	r3, r3, #1
   83676:	b2db      	uxtb	r3, r3
   83678:	2b00      	cmp	r3, #0
   8367a:	d001      	beq.n	83680 <udc_req_std_iface_get_setting+0x50>
		return false;
   8367c:	2300      	movs	r3, #0
   8367e:	e013      	b.n	836a8 <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   83680:	4b0d      	ldr	r3, [pc, #52]	; (836b8 <udc_req_std_iface_get_setting+0x88>)
   83682:	681b      	ldr	r3, [r3, #0]
   83684:	685a      	ldr	r2, [r3, #4]
   83686:	79fb      	ldrb	r3, [r7, #7]
   83688:	009b      	lsls	r3, r3, #2
   8368a:	4413      	add	r3, r2
   8368c:	681b      	ldr	r3, [r3, #0]
   8368e:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
   83690:	683b      	ldr	r3, [r7, #0]
   83692:	68db      	ldr	r3, [r3, #12]
   83694:	4798      	blx	r3
   83696:	4603      	mov	r3, r0
   83698:	461a      	mov	r2, r3
   8369a:	4b09      	ldr	r3, [pc, #36]	; (836c0 <udc_req_std_iface_get_setting+0x90>)
   8369c:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   8369e:	2101      	movs	r1, #1
   836a0:	4807      	ldr	r0, [pc, #28]	; (836c0 <udc_req_std_iface_get_setting+0x90>)
   836a2:	4b08      	ldr	r3, [pc, #32]	; (836c4 <udc_req_std_iface_get_setting+0x94>)
   836a4:	4798      	blx	r3
	return true;
   836a6:	2301      	movs	r3, #1
}
   836a8:	4618      	mov	r0, r3
   836aa:	3708      	adds	r7, #8
   836ac:	46bd      	mov	sp, r7
   836ae:	bd80      	pop	{r7, pc}
   836b0:	20000d64 	.word	0x20000d64
   836b4:	20000d0e 	.word	0x20000d0e
   836b8:	20000d10 	.word	0x20000d10
   836bc:	00082d4d 	.word	0x00082d4d
   836c0:	20000d1a 	.word	0x20000d1a
   836c4:	00084139 	.word	0x00084139

000836c8 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
   836c8:	b580      	push	{r7, lr}
   836ca:	b082      	sub	sp, #8
   836cc:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   836ce:	4b14      	ldr	r3, [pc, #80]	; (83720 <udc_req_std_iface_set_setting+0x58>)
   836d0:	88db      	ldrh	r3, [r3, #6]
   836d2:	2b00      	cmp	r3, #0
   836d4:	d001      	beq.n	836da <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
   836d6:	2300      	movs	r3, #0
   836d8:	e01e      	b.n	83718 <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
   836da:	4b12      	ldr	r3, [pc, #72]	; (83724 <udc_req_std_iface_set_setting+0x5c>)
   836dc:	781b      	ldrb	r3, [r3, #0]
   836de:	2b00      	cmp	r3, #0
   836e0:	d101      	bne.n	836e6 <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
   836e2:	2300      	movs	r3, #0
   836e4:	e018      	b.n	83718 <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   836e6:	4b0e      	ldr	r3, [pc, #56]	; (83720 <udc_req_std_iface_set_setting+0x58>)
   836e8:	889b      	ldrh	r3, [r3, #4]
   836ea:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   836ec:	4b0c      	ldr	r3, [pc, #48]	; (83720 <udc_req_std_iface_set_setting+0x58>)
   836ee:	885b      	ldrh	r3, [r3, #2]
   836f0:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   836f2:	79fb      	ldrb	r3, [r7, #7]
   836f4:	4618      	mov	r0, r3
   836f6:	4b0c      	ldr	r3, [pc, #48]	; (83728 <udc_req_std_iface_set_setting+0x60>)
   836f8:	4798      	blx	r3
   836fa:	4603      	mov	r3, r0
   836fc:	f083 0301 	eor.w	r3, r3, #1
   83700:	b2db      	uxtb	r3, r3
   83702:	2b00      	cmp	r3, #0
   83704:	d001      	beq.n	8370a <udc_req_std_iface_set_setting+0x42>
		return false;
   83706:	2300      	movs	r3, #0
   83708:	e006      	b.n	83718 <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   8370a:	79ba      	ldrb	r2, [r7, #6]
   8370c:	79fb      	ldrb	r3, [r7, #7]
   8370e:	4611      	mov	r1, r2
   83710:	4618      	mov	r0, r3
   83712:	4b06      	ldr	r3, [pc, #24]	; (8372c <udc_req_std_iface_set_setting+0x64>)
   83714:	4798      	blx	r3
   83716:	4603      	mov	r3, r0
}
   83718:	4618      	mov	r0, r3
   8371a:	3708      	adds	r7, #8
   8371c:	46bd      	mov	sp, r7
   8371e:	bd80      	pop	{r7, pc}
   83720:	20000d64 	.word	0x20000d64
   83724:	20000d0e 	.word	0x20000d0e
   83728:	00082de9 	.word	0x00082de9
   8372c:	00082e89 	.word	0x00082e89

00083730 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
   83730:	b580      	push	{r7, lr}
   83732:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   83734:	4b51      	ldr	r3, [pc, #324]	; (8387c <udc_reqstd+0x14c>)
   83736:	781b      	ldrb	r3, [r3, #0]
   83738:	b25b      	sxtb	r3, r3
   8373a:	2b00      	cmp	r3, #0
   8373c:	da40      	bge.n	837c0 <udc_reqstd+0x90>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
   8373e:	4b4f      	ldr	r3, [pc, #316]	; (8387c <udc_reqstd+0x14c>)
   83740:	88db      	ldrh	r3, [r3, #6]
   83742:	2b00      	cmp	r3, #0
   83744:	d101      	bne.n	8374a <udc_reqstd+0x1a>
			return false; // Error for USB host
   83746:	2300      	movs	r3, #0
   83748:	e096      	b.n	83878 <udc_reqstd+0x148>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   8374a:	4b4c      	ldr	r3, [pc, #304]	; (8387c <udc_reqstd+0x14c>)
   8374c:	781b      	ldrb	r3, [r3, #0]
   8374e:	f003 031f 	and.w	r3, r3, #31
   83752:	2b00      	cmp	r3, #0
   83754:	d114      	bne.n	83780 <udc_reqstd+0x50>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   83756:	4b49      	ldr	r3, [pc, #292]	; (8387c <udc_reqstd+0x14c>)
   83758:	785b      	ldrb	r3, [r3, #1]
   8375a:	2b06      	cmp	r3, #6
   8375c:	d008      	beq.n	83770 <udc_reqstd+0x40>
   8375e:	2b08      	cmp	r3, #8
   83760:	d00a      	beq.n	83778 <udc_reqstd+0x48>
   83762:	2b00      	cmp	r3, #0
   83764:	d000      	beq.n	83768 <udc_reqstd+0x38>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
   83766:	e00c      	b.n	83782 <udc_reqstd+0x52>
				return udc_req_std_dev_get_status();
   83768:	4b45      	ldr	r3, [pc, #276]	; (83880 <udc_reqstd+0x150>)
   8376a:	4798      	blx	r3
   8376c:	4603      	mov	r3, r0
   8376e:	e083      	b.n	83878 <udc_reqstd+0x148>
				return udc_req_std_dev_get_descriptor();
   83770:	4b44      	ldr	r3, [pc, #272]	; (83884 <udc_reqstd+0x154>)
   83772:	4798      	blx	r3
   83774:	4603      	mov	r3, r0
   83776:	e07f      	b.n	83878 <udc_reqstd+0x148>
				return udc_req_std_dev_get_configuration();
   83778:	4b43      	ldr	r3, [pc, #268]	; (83888 <udc_reqstd+0x158>)
   8377a:	4798      	blx	r3
   8377c:	4603      	mov	r3, r0
   8377e:	e07b      	b.n	83878 <udc_reqstd+0x148>
			}
		}
   83780:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   83782:	4b3e      	ldr	r3, [pc, #248]	; (8387c <udc_reqstd+0x14c>)
   83784:	781b      	ldrb	r3, [r3, #0]
   83786:	f003 031f 	and.w	r3, r3, #31
   8378a:	2b01      	cmp	r3, #1
   8378c:	d108      	bne.n	837a0 <udc_reqstd+0x70>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   8378e:	4b3b      	ldr	r3, [pc, #236]	; (8387c <udc_reqstd+0x14c>)
   83790:	785b      	ldrb	r3, [r3, #1]
   83792:	2b0a      	cmp	r3, #10
   83794:	d000      	beq.n	83798 <udc_reqstd+0x68>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
   83796:	e004      	b.n	837a2 <udc_reqstd+0x72>
				return udc_req_std_iface_get_setting();
   83798:	4b3c      	ldr	r3, [pc, #240]	; (8388c <udc_reqstd+0x15c>)
   8379a:	4798      	blx	r3
   8379c:	4603      	mov	r3, r0
   8379e:	e06b      	b.n	83878 <udc_reqstd+0x148>
			}
		}
   837a0:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   837a2:	4b36      	ldr	r3, [pc, #216]	; (8387c <udc_reqstd+0x14c>)
   837a4:	781b      	ldrb	r3, [r3, #0]
   837a6:	f003 031f 	and.w	r3, r3, #31
   837aa:	2b02      	cmp	r3, #2
   837ac:	d160      	bne.n	83870 <udc_reqstd+0x140>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   837ae:	4b33      	ldr	r3, [pc, #204]	; (8387c <udc_reqstd+0x14c>)
   837b0:	785b      	ldrb	r3, [r3, #1]
   837b2:	2b00      	cmp	r3, #0
   837b4:	d000      	beq.n	837b8 <udc_reqstd+0x88>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
   837b6:	e05e      	b.n	83876 <udc_reqstd+0x146>
				return udc_req_std_ep_get_status();
   837b8:	4b35      	ldr	r3, [pc, #212]	; (83890 <udc_reqstd+0x160>)
   837ba:	4798      	blx	r3
   837bc:	4603      	mov	r3, r0
   837be:	e05b      	b.n	83878 <udc_reqstd+0x148>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   837c0:	4b2e      	ldr	r3, [pc, #184]	; (8387c <udc_reqstd+0x14c>)
   837c2:	781b      	ldrb	r3, [r3, #0]
   837c4:	f003 031f 	and.w	r3, r3, #31
   837c8:	2b00      	cmp	r3, #0
   837ca:	d129      	bne.n	83820 <udc_reqstd+0xf0>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   837cc:	4b2b      	ldr	r3, [pc, #172]	; (8387c <udc_reqstd+0x14c>)
   837ce:	785b      	ldrb	r3, [r3, #1]
   837d0:	3b01      	subs	r3, #1
   837d2:	2b08      	cmp	r3, #8
   837d4:	d826      	bhi.n	83824 <udc_reqstd+0xf4>
   837d6:	a201      	add	r2, pc, #4	; (adr r2, 837dc <udc_reqstd+0xac>)
   837d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   837dc:	00083809 	.word	0x00083809
   837e0:	00083825 	.word	0x00083825
   837e4:	00083811 	.word	0x00083811
   837e8:	00083825 	.word	0x00083825
   837ec:	00083801 	.word	0x00083801
   837f0:	00083825 	.word	0x00083825
   837f4:	00083825 	.word	0x00083825
   837f8:	00083825 	.word	0x00083825
   837fc:	00083819 	.word	0x00083819
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
   83800:	4b24      	ldr	r3, [pc, #144]	; (83894 <udc_reqstd+0x164>)
   83802:	4798      	blx	r3
   83804:	4603      	mov	r3, r0
   83806:	e037      	b.n	83878 <udc_reqstd+0x148>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
   83808:	4b23      	ldr	r3, [pc, #140]	; (83898 <udc_reqstd+0x168>)
   8380a:	4798      	blx	r3
   8380c:	4603      	mov	r3, r0
   8380e:	e033      	b.n	83878 <udc_reqstd+0x148>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   83810:	4b22      	ldr	r3, [pc, #136]	; (8389c <udc_reqstd+0x16c>)
   83812:	4798      	blx	r3
   83814:	4603      	mov	r3, r0
   83816:	e02f      	b.n	83878 <udc_reqstd+0x148>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
   83818:	4b21      	ldr	r3, [pc, #132]	; (838a0 <udc_reqstd+0x170>)
   8381a:	4798      	blx	r3
   8381c:	4603      	mov	r3, r0
   8381e:	e02b      	b.n	83878 <udc_reqstd+0x148>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
			}
		}
   83820:	bf00      	nop
   83822:	e000      	b.n	83826 <udc_reqstd+0xf6>
				break;
   83824:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   83826:	4b15      	ldr	r3, [pc, #84]	; (8387c <udc_reqstd+0x14c>)
   83828:	781b      	ldrb	r3, [r3, #0]
   8382a:	f003 031f 	and.w	r3, r3, #31
   8382e:	2b01      	cmp	r3, #1
   83830:	d108      	bne.n	83844 <udc_reqstd+0x114>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   83832:	4b12      	ldr	r3, [pc, #72]	; (8387c <udc_reqstd+0x14c>)
   83834:	785b      	ldrb	r3, [r3, #1]
   83836:	2b0b      	cmp	r3, #11
   83838:	d000      	beq.n	8383c <udc_reqstd+0x10c>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
   8383a:	e004      	b.n	83846 <udc_reqstd+0x116>
				return udc_req_std_iface_set_setting();
   8383c:	4b19      	ldr	r3, [pc, #100]	; (838a4 <udc_reqstd+0x174>)
   8383e:	4798      	blx	r3
   83840:	4603      	mov	r3, r0
   83842:	e019      	b.n	83878 <udc_reqstd+0x148>
			}
		}
   83844:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   83846:	4b0d      	ldr	r3, [pc, #52]	; (8387c <udc_reqstd+0x14c>)
   83848:	781b      	ldrb	r3, [r3, #0]
   8384a:	f003 031f 	and.w	r3, r3, #31
   8384e:	2b02      	cmp	r3, #2
   83850:	d110      	bne.n	83874 <udc_reqstd+0x144>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   83852:	4b0a      	ldr	r3, [pc, #40]	; (8387c <udc_reqstd+0x14c>)
   83854:	785b      	ldrb	r3, [r3, #1]
   83856:	2b01      	cmp	r3, #1
   83858:	d002      	beq.n	83860 <udc_reqstd+0x130>
   8385a:	2b03      	cmp	r3, #3
   8385c:	d004      	beq.n	83868 <udc_reqstd+0x138>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
   8385e:	e00a      	b.n	83876 <udc_reqstd+0x146>
				return udc_req_std_ep_clear_feature();
   83860:	4b11      	ldr	r3, [pc, #68]	; (838a8 <udc_reqstd+0x178>)
   83862:	4798      	blx	r3
   83864:	4603      	mov	r3, r0
   83866:	e007      	b.n	83878 <udc_reqstd+0x148>
				return udc_req_std_ep_set_feature();
   83868:	4b10      	ldr	r3, [pc, #64]	; (838ac <udc_reqstd+0x17c>)
   8386a:	4798      	blx	r3
   8386c:	4603      	mov	r3, r0
   8386e:	e003      	b.n	83878 <udc_reqstd+0x148>
		}
   83870:	bf00      	nop
   83872:	e000      	b.n	83876 <udc_reqstd+0x146>
			}
		}
   83874:	bf00      	nop
#endif
	}
	return false;
   83876:	2300      	movs	r3, #0
}
   83878:	4618      	mov	r0, r3
   8387a:	bd80      	pop	{r7, pc}
   8387c:	20000d64 	.word	0x20000d64
   83880:	00082fe5 	.word	0x00082fe5
   83884:	000832e5 	.word	0x000832e5
   83888:	00083501 	.word	0x00083501
   8388c:	00083631 	.word	0x00083631
   83890:	00083011 	.word	0x00083011
   83894:	000831f1 	.word	0x000831f1
   83898:	00083055 	.word	0x00083055
   8389c:	000830c9 	.word	0x000830c9
   838a0:	0008352d 	.word	0x0008352d
   838a4:	000836c9 	.word	0x000836c9
   838a8:	00083091 	.word	0x00083091
   838ac:	00083185 	.word	0x00083185

000838b0 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   838b0:	b580      	push	{r7, lr}
   838b2:	b082      	sub	sp, #8
   838b4:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   838b6:	4b20      	ldr	r3, [pc, #128]	; (83938 <udc_req_iface+0x88>)
   838b8:	781b      	ldrb	r3, [r3, #0]
   838ba:	2b00      	cmp	r3, #0
   838bc:	d101      	bne.n	838c2 <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
   838be:	2300      	movs	r3, #0
   838c0:	e036      	b.n	83930 <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   838c2:	4b1e      	ldr	r3, [pc, #120]	; (8393c <udc_req_iface+0x8c>)
   838c4:	889b      	ldrh	r3, [r3, #4]
   838c6:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   838c8:	4b1d      	ldr	r3, [pc, #116]	; (83940 <udc_req_iface+0x90>)
   838ca:	681b      	ldr	r3, [r3, #0]
   838cc:	681b      	ldr	r3, [r3, #0]
   838ce:	791b      	ldrb	r3, [r3, #4]
   838d0:	79fa      	ldrb	r2, [r7, #7]
   838d2:	429a      	cmp	r2, r3
   838d4:	d301      	bcc.n	838da <udc_req_iface+0x2a>
		return false;
   838d6:	2300      	movs	r3, #0
   838d8:	e02a      	b.n	83930 <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   838da:	79fb      	ldrb	r3, [r7, #7]
   838dc:	2100      	movs	r1, #0
   838de:	4618      	mov	r0, r3
   838e0:	4b18      	ldr	r3, [pc, #96]	; (83944 <udc_req_iface+0x94>)
   838e2:	4798      	blx	r3
   838e4:	4603      	mov	r3, r0
   838e6:	f083 0301 	eor.w	r3, r3, #1
   838ea:	b2db      	uxtb	r3, r3
   838ec:	2b00      	cmp	r3, #0
   838ee:	d001      	beq.n	838f4 <udc_req_iface+0x44>
		return false;
   838f0:	2300      	movs	r3, #0
   838f2:	e01d      	b.n	83930 <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   838f4:	4b12      	ldr	r3, [pc, #72]	; (83940 <udc_req_iface+0x90>)
   838f6:	681b      	ldr	r3, [r3, #0]
   838f8:	685a      	ldr	r2, [r3, #4]
   838fa:	79fb      	ldrb	r3, [r7, #7]
   838fc:	009b      	lsls	r3, r3, #2
   838fe:	4413      	add	r3, r2
   83900:	681b      	ldr	r3, [r3, #0]
   83902:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   83904:	683b      	ldr	r3, [r7, #0]
   83906:	68db      	ldr	r3, [r3, #12]
   83908:	4798      	blx	r3
   8390a:	4603      	mov	r3, r0
   8390c:	461a      	mov	r2, r3
   8390e:	79fb      	ldrb	r3, [r7, #7]
   83910:	4611      	mov	r1, r2
   83912:	4618      	mov	r0, r3
   83914:	4b0b      	ldr	r3, [pc, #44]	; (83944 <udc_req_iface+0x94>)
   83916:	4798      	blx	r3
   83918:	4603      	mov	r3, r0
   8391a:	f083 0301 	eor.w	r3, r3, #1
   8391e:	b2db      	uxtb	r3, r3
   83920:	2b00      	cmp	r3, #0
   83922:	d001      	beq.n	83928 <udc_req_iface+0x78>
		return false;
   83924:	2300      	movs	r3, #0
   83926:	e003      	b.n	83930 <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   83928:	683b      	ldr	r3, [r7, #0]
   8392a:	689b      	ldr	r3, [r3, #8]
   8392c:	4798      	blx	r3
   8392e:	4603      	mov	r3, r0
}
   83930:	4618      	mov	r0, r3
   83932:	3708      	adds	r7, #8
   83934:	46bd      	mov	sp, r7
   83936:	bd80      	pop	{r7, pc}
   83938:	20000d0e 	.word	0x20000d0e
   8393c:	20000d64 	.word	0x20000d64
   83940:	20000d10 	.word	0x20000d10
   83944:	00082d4d 	.word	0x00082d4d

00083948 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   83948:	b580      	push	{r7, lr}
   8394a:	b082      	sub	sp, #8
   8394c:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   8394e:	4b1e      	ldr	r3, [pc, #120]	; (839c8 <udc_req_ep+0x80>)
   83950:	781b      	ldrb	r3, [r3, #0]
   83952:	2b00      	cmp	r3, #0
   83954:	d101      	bne.n	8395a <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
   83956:	2300      	movs	r3, #0
   83958:	e032      	b.n	839c0 <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8395a:	4b1c      	ldr	r3, [pc, #112]	; (839cc <udc_req_ep+0x84>)
   8395c:	889b      	ldrh	r3, [r3, #4]
   8395e:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83960:	2300      	movs	r3, #0
   83962:	71fb      	strb	r3, [r7, #7]
   83964:	e024      	b.n	839b0 <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   83966:	4b1a      	ldr	r3, [pc, #104]	; (839d0 <udc_req_ep+0x88>)
   83968:	681b      	ldr	r3, [r3, #0]
   8396a:	685a      	ldr	r2, [r3, #4]
   8396c:	79fb      	ldrb	r3, [r7, #7]
   8396e:	009b      	lsls	r3, r3, #2
   83970:	4413      	add	r3, r2
   83972:	681b      	ldr	r3, [r3, #0]
   83974:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   83976:	683b      	ldr	r3, [r7, #0]
   83978:	68db      	ldr	r3, [r3, #12]
   8397a:	4798      	blx	r3
   8397c:	4603      	mov	r3, r0
   8397e:	461a      	mov	r2, r3
   83980:	79fb      	ldrb	r3, [r7, #7]
   83982:	4611      	mov	r1, r2
   83984:	4618      	mov	r0, r3
   83986:	4b13      	ldr	r3, [pc, #76]	; (839d4 <udc_req_ep+0x8c>)
   83988:	4798      	blx	r3
   8398a:	4603      	mov	r3, r0
   8398c:	f083 0301 	eor.w	r3, r3, #1
   83990:	b2db      	uxtb	r3, r3
   83992:	2b00      	cmp	r3, #0
   83994:	d001      	beq.n	8399a <udc_req_ep+0x52>
			return false;
   83996:	2300      	movs	r3, #0
   83998:	e012      	b.n	839c0 <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   8399a:	683b      	ldr	r3, [r7, #0]
   8399c:	689b      	ldr	r3, [r3, #8]
   8399e:	4798      	blx	r3
   839a0:	4603      	mov	r3, r0
   839a2:	2b00      	cmp	r3, #0
   839a4:	d001      	beq.n	839aa <udc_req_ep+0x62>
			return true;
   839a6:	2301      	movs	r3, #1
   839a8:	e00a      	b.n	839c0 <udc_req_ep+0x78>
			iface_num++) {
   839aa:	79fb      	ldrb	r3, [r7, #7]
   839ac:	3301      	adds	r3, #1
   839ae:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   839b0:	4b07      	ldr	r3, [pc, #28]	; (839d0 <udc_req_ep+0x88>)
   839b2:	681b      	ldr	r3, [r3, #0]
   839b4:	681b      	ldr	r3, [r3, #0]
   839b6:	791b      	ldrb	r3, [r3, #4]
   839b8:	79fa      	ldrb	r2, [r7, #7]
   839ba:	429a      	cmp	r2, r3
   839bc:	d3d3      	bcc.n	83966 <udc_req_ep+0x1e>
		}
	}
	return false;
   839be:	2300      	movs	r3, #0
}
   839c0:	4618      	mov	r0, r3
   839c2:	3708      	adds	r7, #8
   839c4:	46bd      	mov	sp, r7
   839c6:	bd80      	pop	{r7, pc}
   839c8:	20000d0e 	.word	0x20000d0e
   839cc:	20000d64 	.word	0x20000d64
   839d0:	20000d10 	.word	0x20000d10
   839d4:	00082d4d 	.word	0x00082d4d

000839d8 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   839d8:	b580      	push	{r7, lr}
   839da:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   839dc:	4b1e      	ldr	r3, [pc, #120]	; (83a58 <udc_process_setup+0x80>)
   839de:	2200      	movs	r2, #0
   839e0:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   839e2:	4b1d      	ldr	r3, [pc, #116]	; (83a58 <udc_process_setup+0x80>)
   839e4:	2200      	movs	r2, #0
   839e6:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   839e8:	4b1b      	ldr	r3, [pc, #108]	; (83a58 <udc_process_setup+0x80>)
   839ea:	2200      	movs	r2, #0
   839ec:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   839ee:	4b1a      	ldr	r3, [pc, #104]	; (83a58 <udc_process_setup+0x80>)
   839f0:	781b      	ldrb	r3, [r3, #0]
   839f2:	b25b      	sxtb	r3, r3
   839f4:	2b00      	cmp	r3, #0
   839f6:	da05      	bge.n	83a04 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
   839f8:	4b17      	ldr	r3, [pc, #92]	; (83a58 <udc_process_setup+0x80>)
   839fa:	88db      	ldrh	r3, [r3, #6]
   839fc:	2b00      	cmp	r3, #0
   839fe:	d101      	bne.n	83a04 <udc_process_setup+0x2c>
			return false; // Error from USB host
   83a00:	2300      	movs	r3, #0
   83a02:	e027      	b.n	83a54 <udc_process_setup+0x7c>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   83a04:	4b14      	ldr	r3, [pc, #80]	; (83a58 <udc_process_setup+0x80>)
   83a06:	781b      	ldrb	r3, [r3, #0]
   83a08:	f003 0360 	and.w	r3, r3, #96	; 0x60
   83a0c:	2b00      	cmp	r3, #0
   83a0e:	d106      	bne.n	83a1e <udc_process_setup+0x46>
		if (udc_reqstd()) {
   83a10:	4b12      	ldr	r3, [pc, #72]	; (83a5c <udc_process_setup+0x84>)
   83a12:	4798      	blx	r3
   83a14:	4603      	mov	r3, r0
   83a16:	2b00      	cmp	r3, #0
   83a18:	d001      	beq.n	83a1e <udc_process_setup+0x46>
			return true;
   83a1a:	2301      	movs	r3, #1
   83a1c:	e01a      	b.n	83a54 <udc_process_setup+0x7c>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   83a1e:	4b0e      	ldr	r3, [pc, #56]	; (83a58 <udc_process_setup+0x80>)
   83a20:	781b      	ldrb	r3, [r3, #0]
   83a22:	f003 031f 	and.w	r3, r3, #31
   83a26:	2b01      	cmp	r3, #1
   83a28:	d106      	bne.n	83a38 <udc_process_setup+0x60>
		if (udc_req_iface()) {
   83a2a:	4b0d      	ldr	r3, [pc, #52]	; (83a60 <udc_process_setup+0x88>)
   83a2c:	4798      	blx	r3
   83a2e:	4603      	mov	r3, r0
   83a30:	2b00      	cmp	r3, #0
   83a32:	d001      	beq.n	83a38 <udc_process_setup+0x60>
			return true;
   83a34:	2301      	movs	r3, #1
   83a36:	e00d      	b.n	83a54 <udc_process_setup+0x7c>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   83a38:	4b07      	ldr	r3, [pc, #28]	; (83a58 <udc_process_setup+0x80>)
   83a3a:	781b      	ldrb	r3, [r3, #0]
   83a3c:	f003 031f 	and.w	r3, r3, #31
   83a40:	2b02      	cmp	r3, #2
   83a42:	d106      	bne.n	83a52 <udc_process_setup+0x7a>
		if (udc_req_ep()) {
   83a44:	4b07      	ldr	r3, [pc, #28]	; (83a64 <udc_process_setup+0x8c>)
   83a46:	4798      	blx	r3
   83a48:	4603      	mov	r3, r0
   83a4a:	2b00      	cmp	r3, #0
   83a4c:	d001      	beq.n	83a52 <udc_process_setup+0x7a>
			return true;
   83a4e:	2301      	movs	r3, #1
   83a50:	e000      	b.n	83a54 <udc_process_setup+0x7c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   83a52:	2300      	movs	r3, #0
#endif
}
   83a54:	4618      	mov	r0, r3
   83a56:	bd80      	pop	{r7, pc}
   83a58:	20000d64 	.word	0x20000d64
   83a5c:	00083731 	.word	0x00083731
   83a60:	000838b1 	.word	0x000838b1
   83a64:	00083949 	.word	0x00083949

00083a68 <udi_vendor_enable>:
/**
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
   83a68:	b580      	push	{r7, lr}
   83a6a:	af00      	add	r7, sp, #0
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   83a6c:	4b0b      	ldr	r3, [pc, #44]	; (83a9c <udi_vendor_enable+0x34>)
   83a6e:	4798      	blx	r3
   83a70:	4603      	mov	r3, r0
   83a72:	78da      	ldrb	r2, [r3, #3]
   83a74:	4b0a      	ldr	r3, [pc, #40]	; (83aa0 <udi_vendor_enable+0x38>)
   83a76:	701a      	strb	r2, [r3, #0]
	if (0 == udi_vendor_alternate_setting) {
   83a78:	4b09      	ldr	r3, [pc, #36]	; (83aa0 <udi_vendor_enable+0x38>)
   83a7a:	781b      	ldrb	r3, [r3, #0]
   83a7c:	2b00      	cmp	r3, #0
   83a7e:	d109      	bne.n	83a94 <udi_vendor_enable+0x2c>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
   83a80:	4b08      	ldr	r3, [pc, #32]	; (83aa4 <udi_vendor_enable+0x3c>)
   83a82:	4798      	blx	r3
   83a84:	4603      	mov	r3, r0
   83a86:	f083 0301 	eor.w	r3, r3, #1
   83a8a:	b2db      	uxtb	r3, r3
   83a8c:	2b00      	cmp	r3, #0
   83a8e:	d001      	beq.n	83a94 <udi_vendor_enable+0x2c>
			return false;
   83a90:	2300      	movs	r3, #0
   83a92:	e000      	b.n	83a96 <udi_vendor_enable+0x2e>
		}
	}
	return true;
   83a94:	2301      	movs	r3, #1
}
   83a96:	4618      	mov	r0, r3
   83a98:	bd80      	pop	{r7, pc}
   83a9a:	bf00      	nop
   83a9c:	00082cb9 	.word	0x00082cb9
   83aa0:	20000d1b 	.word	0x20000d1b
   83aa4:	00080d75 	.word	0x00080d75

00083aa8 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
   83aa8:	b580      	push	{r7, lr}
   83aaa:	af00      	add	r7, sp, #0
	if (0 == udi_vendor_alternate_setting) {
   83aac:	4b03      	ldr	r3, [pc, #12]	; (83abc <udi_vendor_disable+0x14>)
   83aae:	781b      	ldrb	r3, [r3, #0]
   83ab0:	2b00      	cmp	r3, #0
   83ab2:	d101      	bne.n	83ab8 <udi_vendor_disable+0x10>
		UDI_VENDOR_DISABLE_EXT();
   83ab4:	4b02      	ldr	r3, [pc, #8]	; (83ac0 <udi_vendor_disable+0x18>)
   83ab6:	4798      	blx	r3
	}
}
   83ab8:	bf00      	nop
   83aba:	bd80      	pop	{r7, pc}
   83abc:	20000d1b 	.word	0x20000d1b
   83ac0:	00080da1 	.word	0x00080da1

00083ac4 <udi_vendor_setup>:

bool udi_vendor_setup(void)
{
   83ac4:	b580      	push	{r7, lr}
   83ac6:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   83ac8:	4b10      	ldr	r3, [pc, #64]	; (83b0c <udi_vendor_setup+0x48>)
   83aca:	781b      	ldrb	r3, [r3, #0]
   83acc:	b25b      	sxtb	r3, r3
   83ace:	2b00      	cmp	r3, #0
   83ad0:	da09      	bge.n	83ae6 <udi_vendor_setup+0x22>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83ad2:	4b0e      	ldr	r3, [pc, #56]	; (83b0c <udi_vendor_setup+0x48>)
   83ad4:	781b      	ldrb	r3, [r3, #0]
   83ad6:	f003 0360 	and.w	r3, r3, #96	; 0x60
   83ada:	2b40      	cmp	r3, #64	; 0x40
   83adc:	d103      	bne.n	83ae6 <udi_vendor_setup+0x22>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   83ade:	4b0c      	ldr	r3, [pc, #48]	; (83b10 <udi_vendor_setup+0x4c>)
   83ae0:	4798      	blx	r3
   83ae2:	4603      	mov	r3, r0
   83ae4:	e00f      	b.n	83b06 <udi_vendor_setup+0x42>
		}
	}
	if (Udd_setup_is_out()) {
   83ae6:	4b09      	ldr	r3, [pc, #36]	; (83b0c <udi_vendor_setup+0x48>)
   83ae8:	781b      	ldrb	r3, [r3, #0]
   83aea:	b25b      	sxtb	r3, r3
   83aec:	2b00      	cmp	r3, #0
   83aee:	db09      	blt.n	83b04 <udi_vendor_setup+0x40>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83af0:	4b06      	ldr	r3, [pc, #24]	; (83b0c <udi_vendor_setup+0x48>)
   83af2:	781b      	ldrb	r3, [r3, #0]
   83af4:	f003 0360 	and.w	r3, r3, #96	; 0x60
   83af8:	2b40      	cmp	r3, #64	; 0x40
   83afa:	d103      	bne.n	83b04 <udi_vendor_setup+0x40>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   83afc:	4b05      	ldr	r3, [pc, #20]	; (83b14 <udi_vendor_setup+0x50>)
   83afe:	4798      	blx	r3
   83b00:	4603      	mov	r3, r0
   83b02:	e000      	b.n	83b06 <udi_vendor_setup+0x42>
		}
	}
	return false; // Not supported request
   83b04:	2300      	movs	r3, #0
}
   83b06:	4618      	mov	r0, r3
   83b08:	bd80      	pop	{r7, pc}
   83b0a:	bf00      	nop
   83b0c:	20000d64 	.word	0x20000d64
   83b10:	000811a1 	.word	0x000811a1
   83b14:	00081061 	.word	0x00081061

00083b18 <udi_vendor_getsetting>:

uint8_t udi_vendor_getsetting(void)
{
   83b18:	b480      	push	{r7}
   83b1a:	af00      	add	r7, sp, #0
	return udi_vendor_alternate_setting;
   83b1c:	4b02      	ldr	r3, [pc, #8]	; (83b28 <udi_vendor_getsetting+0x10>)
   83b1e:	781b      	ldrb	r3, [r3, #0]
}
   83b20:	4618      	mov	r0, r3
   83b22:	46bd      	mov	sp, r7
   83b24:	bc80      	pop	{r7}
   83b26:	4770      	bx	lr
   83b28:	20000d1b 	.word	0x20000d1b

00083b2c <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   83b2c:	b590      	push	{r4, r7, lr}
   83b2e:	b087      	sub	sp, #28
   83b30:	af02      	add	r7, sp, #8
   83b32:	60f8      	str	r0, [r7, #12]
   83b34:	60b9      	str	r1, [r7, #8]
   83b36:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   83b38:	687b      	ldr	r3, [r7, #4]
   83b3a:	9300      	str	r3, [sp, #0]
   83b3c:	68bb      	ldr	r3, [r7, #8]
   83b3e:	68fa      	ldr	r2, [r7, #12]
   83b40:	2100      	movs	r1, #0
   83b42:	2081      	movs	r0, #129	; 0x81
   83b44:	4c03      	ldr	r4, [pc, #12]	; (83b54 <udi_vendor_bulk_in_run+0x28>)
   83b46:	47a0      	blx	r4
   83b48:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   83b4a:	4618      	mov	r0, r3
   83b4c:	3714      	adds	r7, #20
   83b4e:	46bd      	mov	sp, r7
   83b50:	bd90      	pop	{r4, r7, pc}
   83b52:	bf00      	nop
   83b54:	00084839 	.word	0x00084839

00083b58 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   83b58:	b590      	push	{r4, r7, lr}
   83b5a:	b087      	sub	sp, #28
   83b5c:	af02      	add	r7, sp, #8
   83b5e:	60f8      	str	r0, [r7, #12]
   83b60:	60b9      	str	r1, [r7, #8]
   83b62:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   83b64:	687b      	ldr	r3, [r7, #4]
   83b66:	9300      	str	r3, [sp, #0]
   83b68:	68bb      	ldr	r3, [r7, #8]
   83b6a:	68fa      	ldr	r2, [r7, #12]
   83b6c:	2100      	movs	r1, #0
   83b6e:	2002      	movs	r0, #2
   83b70:	4c03      	ldr	r4, [pc, #12]	; (83b80 <udi_vendor_bulk_out_run+0x28>)
   83b72:	47a0      	blx	r4
   83b74:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   83b76:	4618      	mov	r0, r3
   83b78:	3714      	adds	r7, #20
   83b7a:	46bd      	mov	sp, r7
   83b7c:	bd90      	pop	{r4, r7, pc}
   83b7e:	bf00      	nop
   83b80:	00084839 	.word	0x00084839

00083b84 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   83b84:	b480      	push	{r7}
   83b86:	b083      	sub	sp, #12
   83b88:	af00      	add	r7, sp, #0
   83b8a:	4603      	mov	r3, r0
   83b8c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83b8e:	79fb      	ldrb	r3, [r7, #7]
   83b90:	f003 031f 	and.w	r3, r3, #31
   83b94:	2201      	movs	r2, #1
   83b96:	fa02 f103 	lsl.w	r1, r2, r3
   83b9a:	4a05      	ldr	r2, [pc, #20]	; (83bb0 <NVIC_EnableIRQ+0x2c>)
   83b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   83ba0:	095b      	lsrs	r3, r3, #5
   83ba2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   83ba6:	bf00      	nop
   83ba8:	370c      	adds	r7, #12
   83baa:	46bd      	mov	sp, r7
   83bac:	bc80      	pop	{r7}
   83bae:	4770      	bx	lr
   83bb0:	e000e100 	.word	0xe000e100

00083bb4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   83bb4:	b480      	push	{r7}
   83bb6:	b083      	sub	sp, #12
   83bb8:	af00      	add	r7, sp, #0
   83bba:	4603      	mov	r3, r0
   83bbc:	6039      	str	r1, [r7, #0]
   83bbe:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   83bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   83bc4:	2b00      	cmp	r3, #0
   83bc6:	da0b      	bge.n	83be0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   83bc8:	683b      	ldr	r3, [r7, #0]
   83bca:	b2da      	uxtb	r2, r3
   83bcc:	490c      	ldr	r1, [pc, #48]	; (83c00 <NVIC_SetPriority+0x4c>)
   83bce:	79fb      	ldrb	r3, [r7, #7]
   83bd0:	f003 030f 	and.w	r3, r3, #15
   83bd4:	3b04      	subs	r3, #4
   83bd6:	0112      	lsls	r2, r2, #4
   83bd8:	b2d2      	uxtb	r2, r2
   83bda:	440b      	add	r3, r1
   83bdc:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   83bde:	e009      	b.n	83bf4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   83be0:	683b      	ldr	r3, [r7, #0]
   83be2:	b2da      	uxtb	r2, r3
   83be4:	4907      	ldr	r1, [pc, #28]	; (83c04 <NVIC_SetPriority+0x50>)
   83be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   83bea:	0112      	lsls	r2, r2, #4
   83bec:	b2d2      	uxtb	r2, r2
   83bee:	440b      	add	r3, r1
   83bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   83bf4:	bf00      	nop
   83bf6:	370c      	adds	r7, #12
   83bf8:	46bd      	mov	sp, r7
   83bfa:	bc80      	pop	{r7}
   83bfc:	4770      	bx	lr
   83bfe:	bf00      	nop
   83c00:	e000ed00 	.word	0xe000ed00
   83c04:	e000e100 	.word	0xe000e100

00083c08 <cpu_irq_save>:
{
   83c08:	b480      	push	{r7}
   83c0a:	b083      	sub	sp, #12
   83c0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83c0e:	f3ef 8310 	mrs	r3, PRIMASK
   83c12:	603b      	str	r3, [r7, #0]
  return(result);
   83c14:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   83c16:	2b00      	cmp	r3, #0
   83c18:	bf0c      	ite	eq
   83c1a:	2301      	moveq	r3, #1
   83c1c:	2300      	movne	r3, #0
   83c1e:	b2db      	uxtb	r3, r3
   83c20:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   83c22:	b672      	cpsid	i
  __ASM volatile ("dmb");
   83c24:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83c28:	4b04      	ldr	r3, [pc, #16]	; (83c3c <cpu_irq_save+0x34>)
   83c2a:	2200      	movs	r2, #0
   83c2c:	701a      	strb	r2, [r3, #0]
	return flags;
   83c2e:	687b      	ldr	r3, [r7, #4]
}
   83c30:	4618      	mov	r0, r3
   83c32:	370c      	adds	r7, #12
   83c34:	46bd      	mov	sp, r7
   83c36:	bc80      	pop	{r7}
   83c38:	4770      	bx	lr
   83c3a:	bf00      	nop
   83c3c:	20000294 	.word	0x20000294

00083c40 <cpu_irq_is_enabled_flags>:
{
   83c40:	b480      	push	{r7}
   83c42:	b083      	sub	sp, #12
   83c44:	af00      	add	r7, sp, #0
   83c46:	6078      	str	r0, [r7, #4]
	return (flags);
   83c48:	687b      	ldr	r3, [r7, #4]
   83c4a:	2b00      	cmp	r3, #0
   83c4c:	bf14      	ite	ne
   83c4e:	2301      	movne	r3, #1
   83c50:	2300      	moveq	r3, #0
   83c52:	b2db      	uxtb	r3, r3
}
   83c54:	4618      	mov	r0, r3
   83c56:	370c      	adds	r7, #12
   83c58:	46bd      	mov	sp, r7
   83c5a:	bc80      	pop	{r7}
   83c5c:	4770      	bx	lr
   83c5e:	0000      	movs	r0, r0

00083c60 <cpu_irq_restore>:
{
   83c60:	b580      	push	{r7, lr}
   83c62:	b082      	sub	sp, #8
   83c64:	af00      	add	r7, sp, #0
   83c66:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   83c68:	6878      	ldr	r0, [r7, #4]
   83c6a:	4b07      	ldr	r3, [pc, #28]	; (83c88 <cpu_irq_restore+0x28>)
   83c6c:	4798      	blx	r3
   83c6e:	4603      	mov	r3, r0
   83c70:	2b00      	cmp	r3, #0
   83c72:	d005      	beq.n	83c80 <cpu_irq_restore+0x20>
		cpu_irq_enable();
   83c74:	4b05      	ldr	r3, [pc, #20]	; (83c8c <cpu_irq_restore+0x2c>)
   83c76:	2201      	movs	r2, #1
   83c78:	701a      	strb	r2, [r3, #0]
   83c7a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   83c7e:	b662      	cpsie	i
}
   83c80:	bf00      	nop
   83c82:	3708      	adds	r7, #8
   83c84:	46bd      	mov	sp, r7
   83c86:	bd80      	pop	{r7, pc}
   83c88:	00083c41 	.word	0x00083c41
   83c8c:	20000294 	.word	0x20000294

00083c90 <sleepmgr_lock_mode>:
{
   83c90:	b580      	push	{r7, lr}
   83c92:	b084      	sub	sp, #16
   83c94:	af00      	add	r7, sp, #0
   83c96:	4603      	mov	r3, r0
   83c98:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   83c9a:	4b08      	ldr	r3, [pc, #32]	; (83cbc <sleepmgr_lock_mode+0x2c>)
   83c9c:	4798      	blx	r3
   83c9e:	60f8      	str	r0, [r7, #12]
	++sleepmgr_locks[mode];
   83ca0:	79fb      	ldrb	r3, [r7, #7]
   83ca2:	4a07      	ldr	r2, [pc, #28]	; (83cc0 <sleepmgr_lock_mode+0x30>)
   83ca4:	5cd2      	ldrb	r2, [r2, r3]
   83ca6:	3201      	adds	r2, #1
   83ca8:	b2d1      	uxtb	r1, r2
   83caa:	4a05      	ldr	r2, [pc, #20]	; (83cc0 <sleepmgr_lock_mode+0x30>)
   83cac:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   83cae:	68f8      	ldr	r0, [r7, #12]
   83cb0:	4b04      	ldr	r3, [pc, #16]	; (83cc4 <sleepmgr_lock_mode+0x34>)
   83cb2:	4798      	blx	r3
}
   83cb4:	bf00      	nop
   83cb6:	3710      	adds	r7, #16
   83cb8:	46bd      	mov	sp, r7
   83cba:	bd80      	pop	{r7, pc}
   83cbc:	00083c09 	.word	0x00083c09
   83cc0:	20000d5c 	.word	0x20000d5c
   83cc4:	00083c61 	.word	0x00083c61

00083cc8 <sleepmgr_unlock_mode>:
{
   83cc8:	b580      	push	{r7, lr}
   83cca:	b084      	sub	sp, #16
   83ccc:	af00      	add	r7, sp, #0
   83cce:	4603      	mov	r3, r0
   83cd0:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   83cd2:	4b08      	ldr	r3, [pc, #32]	; (83cf4 <sleepmgr_unlock_mode+0x2c>)
   83cd4:	4798      	blx	r3
   83cd6:	60f8      	str	r0, [r7, #12]
	--sleepmgr_locks[mode];
   83cd8:	79fb      	ldrb	r3, [r7, #7]
   83cda:	4a07      	ldr	r2, [pc, #28]	; (83cf8 <sleepmgr_unlock_mode+0x30>)
   83cdc:	5cd2      	ldrb	r2, [r2, r3]
   83cde:	3a01      	subs	r2, #1
   83ce0:	b2d1      	uxtb	r1, r2
   83ce2:	4a05      	ldr	r2, [pc, #20]	; (83cf8 <sleepmgr_unlock_mode+0x30>)
   83ce4:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   83ce6:	68f8      	ldr	r0, [r7, #12]
   83ce8:	4b04      	ldr	r3, [pc, #16]	; (83cfc <sleepmgr_unlock_mode+0x34>)
   83cea:	4798      	blx	r3
}
   83cec:	bf00      	nop
   83cee:	3710      	adds	r7, #16
   83cf0:	46bd      	mov	sp, r7
   83cf2:	bd80      	pop	{r7, pc}
   83cf4:	00083c09 	.word	0x00083c09
   83cf8:	20000d5c 	.word	0x20000d5c
   83cfc:	00083c61 	.word	0x00083c61

00083d00 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
   83d00:	b580      	push	{r7, lr}
   83d02:	b082      	sub	sp, #8
   83d04:	af00      	add	r7, sp, #0
   83d06:	4603      	mov	r3, r0
   83d08:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
   83d0a:	79fb      	ldrb	r3, [r7, #7]
   83d0c:	f083 0301 	eor.w	r3, r3, #1
   83d10:	b2db      	uxtb	r3, r3
   83d12:	2b00      	cmp	r3, #0
   83d14:	d006      	beq.n	83d24 <udd_sleep_mode+0x24>
   83d16:	4b0d      	ldr	r3, [pc, #52]	; (83d4c <udd_sleep_mode+0x4c>)
   83d18:	781b      	ldrb	r3, [r3, #0]
   83d1a:	2b00      	cmp	r3, #0
   83d1c:	d002      	beq.n	83d24 <udd_sleep_mode+0x24>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   83d1e:	2002      	movs	r0, #2
   83d20:	4b0b      	ldr	r3, [pc, #44]	; (83d50 <udd_sleep_mode+0x50>)
   83d22:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
   83d24:	79fb      	ldrb	r3, [r7, #7]
   83d26:	2b00      	cmp	r3, #0
   83d28:	d009      	beq.n	83d3e <udd_sleep_mode+0x3e>
   83d2a:	4b08      	ldr	r3, [pc, #32]	; (83d4c <udd_sleep_mode+0x4c>)
   83d2c:	781b      	ldrb	r3, [r3, #0]
   83d2e:	f083 0301 	eor.w	r3, r3, #1
   83d32:	b2db      	uxtb	r3, r3
   83d34:	2b00      	cmp	r3, #0
   83d36:	d002      	beq.n	83d3e <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   83d38:	2002      	movs	r0, #2
   83d3a:	4b06      	ldr	r3, [pc, #24]	; (83d54 <udd_sleep_mode+0x54>)
   83d3c:	4798      	blx	r3
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   83d3e:	4a03      	ldr	r2, [pc, #12]	; (83d4c <udd_sleep_mode+0x4c>)
   83d40:	79fb      	ldrb	r3, [r7, #7]
   83d42:	7013      	strb	r3, [r2, #0]
}
   83d44:	bf00      	nop
   83d46:	3708      	adds	r7, #8
   83d48:	46bd      	mov	sp, r7
   83d4a:	bd80      	pop	{r7, pc}
   83d4c:	20000d1c 	.word	0x20000d1c
   83d50:	00083cc9 	.word	0x00083cc9
   83d54:	00083c91 	.word	0x00083c91

00083d58 <UDPHS_Handler>:
 * Here, the global interrupt mask is not clear when an USB interrupt is enabled
 * because this one can not be occurred during the USB ISR (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests in peripheral modules.
 */
ISR(UDD_USB_INT_FUN)
{
   83d58:	b580      	push	{r7, lr}
   83d5a:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   83d5c:	201d      	movs	r0, #29
   83d5e:	4b5f      	ldr	r3, [pc, #380]	; (83edc <UDPHS_Handler+0x184>)
   83d60:	4798      	blx	r3
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   83d62:	4b5f      	ldr	r3, [pc, #380]	; (83ee0 <UDPHS_Handler+0x188>)
   83d64:	4798      	blx	r3
   83d66:	4603      	mov	r3, r0
   83d68:	f083 0301 	eor.w	r3, r3, #1
   83d6c:	b2db      	uxtb	r3, r3
   83d6e:	2b00      	cmp	r3, #0
   83d70:	d00c      	beq.n	83d8c <UDPHS_Handler+0x34>
   83d72:	4b5c      	ldr	r3, [pc, #368]	; (83ee4 <UDPHS_Handler+0x18c>)
   83d74:	695b      	ldr	r3, [r3, #20]
   83d76:	f003 0302 	and.w	r3, r3, #2
   83d7a:	2b00      	cmp	r3, #0
   83d7c:	d106      	bne.n	83d8c <UDPHS_Handler+0x34>
  __ASM volatile ("cpsid i");
   83d7e:	b672      	cpsid	i
   83d80:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   83d84:	4b58      	ldr	r3, [pc, #352]	; (83ee8 <UDPHS_Handler+0x190>)
   83d86:	2200      	movs	r2, #0
   83d88:	701a      	strb	r2, [r3, #0]
		return;
   83d8a:	e0a5      	b.n	83ed8 <UDPHS_Handler+0x180>
	}

	if (Is_udd_sof()) {
   83d8c:	4b55      	ldr	r3, [pc, #340]	; (83ee4 <UDPHS_Handler+0x18c>)
   83d8e:	695b      	ldr	r3, [r3, #20]
   83d90:	f003 0308 	and.w	r3, r3, #8
   83d94:	2b00      	cmp	r3, #0
   83d96:	d00d      	beq.n	83db4 <UDPHS_Handler+0x5c>
		udd_ack_sof();
   83d98:	4b52      	ldr	r3, [pc, #328]	; (83ee4 <UDPHS_Handler+0x18c>)
   83d9a:	2208      	movs	r2, #8
   83d9c:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   83d9e:	4b51      	ldr	r3, [pc, #324]	; (83ee4 <UDPHS_Handler+0x18c>)
   83da0:	695b      	ldr	r3, [r3, #20]
   83da2:	f003 0301 	and.w	r3, r3, #1
   83da6:	2b00      	cmp	r3, #0
   83da8:	d101      	bne.n	83dae <UDPHS_Handler+0x56>
			udc_sof_notify();
   83daa:	4b50      	ldr	r3, [pc, #320]	; (83eec <UDPHS_Handler+0x194>)
   83dac:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   83dae:	4b50      	ldr	r3, [pc, #320]	; (83ef0 <UDPHS_Handler+0x198>)
   83db0:	4798      	blx	r3
#endif
		goto udd_interrupt_sof_end;
   83db2:	e090      	b.n	83ed6 <UDPHS_Handler+0x17e>
	}

	if (Is_udd_msof()) {
   83db4:	4b4b      	ldr	r3, [pc, #300]	; (83ee4 <UDPHS_Handler+0x18c>)
   83db6:	695b      	ldr	r3, [r3, #20]
   83db8:	f003 0304 	and.w	r3, r3, #4
   83dbc:	2b00      	cmp	r3, #0
   83dbe:	d005      	beq.n	83dcc <UDPHS_Handler+0x74>
		udd_ack_msof();
   83dc0:	4b48      	ldr	r3, [pc, #288]	; (83ee4 <UDPHS_Handler+0x18c>)
   83dc2:	2204      	movs	r2, #4
   83dc4:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   83dc6:	4b49      	ldr	r3, [pc, #292]	; (83eec <UDPHS_Handler+0x194>)
   83dc8:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   83dca:	e084      	b.n	83ed6 <UDPHS_Handler+0x17e>
	}
	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');

	if (udd_ctrl_interrupt()) {
   83dcc:	4b49      	ldr	r3, [pc, #292]	; (83ef4 <UDPHS_Handler+0x19c>)
   83dce:	4798      	blx	r3
   83dd0:	4603      	mov	r3, r0
   83dd2:	2b00      	cmp	r3, #0
   83dd4:	d17a      	bne.n	83ecc <UDPHS_Handler+0x174>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
   83dd6:	4b48      	ldr	r3, [pc, #288]	; (83ef8 <UDPHS_Handler+0x1a0>)
   83dd8:	4798      	blx	r3
   83dda:	4603      	mov	r3, r0
   83ddc:	2b00      	cmp	r3, #0
   83dde:	d177      	bne.n	83ed0 <UDPHS_Handler+0x178>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   83de0:	4b40      	ldr	r3, [pc, #256]	; (83ee4 <UDPHS_Handler+0x18c>)
   83de2:	695b      	ldr	r3, [r3, #20]
   83de4:	f003 0310 	and.w	r3, r3, #16
   83de8:	2b00      	cmp	r3, #0
   83dea:	d01d      	beq.n	83e28 <UDPHS_Handler+0xd0>
		dbg_print("EoR ");
		udd_ack_reset();
   83dec:	4b3d      	ldr	r3, [pc, #244]	; (83ee4 <UDPHS_Handler+0x18c>)
   83dee:	2210      	movs	r2, #16
   83df0:	619a      	str	r2, [r3, #24]
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
   83df2:	4b42      	ldr	r3, [pc, #264]	; (83efc <UDPHS_Handler+0x1a4>)
   83df4:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
   83df6:	4b42      	ldr	r3, [pc, #264]	; (83f00 <UDPHS_Handler+0x1a8>)
   83df8:	4798      	blx	r3
		// Reset endpoint control
		udd_reset_ep_ctrl();
   83dfa:	4b42      	ldr	r3, [pc, #264]	; (83f04 <UDPHS_Handler+0x1ac>)
   83dfc:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
   83dfe:	4b42      	ldr	r3, [pc, #264]	; (83f08 <UDPHS_Handler+0x1b0>)
   83e00:	4798      	blx	r3
		// Enable SOF interrupts cleared by USB reset event
		udd_enable_sof_interrupt();
   83e02:	4b38      	ldr	r3, [pc, #224]	; (83ee4 <UDPHS_Handler+0x18c>)
   83e04:	691b      	ldr	r3, [r3, #16]
   83e06:	4a37      	ldr	r2, [pc, #220]	; (83ee4 <UDPHS_Handler+0x18c>)
   83e08:	f043 0308 	orr.w	r3, r3, #8
   83e0c:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   83e0e:	4b35      	ldr	r3, [pc, #212]	; (83ee4 <UDPHS_Handler+0x18c>)
   83e10:	691b      	ldr	r3, [r3, #16]
   83e12:	4a34      	ldr	r2, [pc, #208]	; (83ee4 <UDPHS_Handler+0x18c>)
   83e14:	f043 0304 	orr.w	r3, r3, #4
   83e18:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   83e1a:	4b32      	ldr	r3, [pc, #200]	; (83ee4 <UDPHS_Handler+0x18c>)
   83e1c:	691b      	ldr	r3, [r3, #16]
   83e1e:	4a31      	ldr	r2, [pc, #196]	; (83ee4 <UDPHS_Handler+0x18c>)
   83e20:	f043 0302 	orr.w	r3, r3, #2
   83e24:	6113      	str	r3, [r2, #16]
		goto udd_interrupt_end;
   83e26:	e056      	b.n	83ed6 <UDPHS_Handler+0x17e>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   83e28:	4b2e      	ldr	r3, [pc, #184]	; (83ee4 <UDPHS_Handler+0x18c>)
   83e2a:	691b      	ldr	r3, [r3, #16]
   83e2c:	f003 0302 	and.w	r3, r3, #2
   83e30:	2b00      	cmp	r3, #0
   83e32:	d020      	beq.n	83e76 <UDPHS_Handler+0x11e>
   83e34:	4b2b      	ldr	r3, [pc, #172]	; (83ee4 <UDPHS_Handler+0x18c>)
   83e36:	695b      	ldr	r3, [r3, #20]
   83e38:	f003 0302 	and.w	r3, r3, #2
   83e3c:	2b00      	cmp	r3, #0
   83e3e:	d01a      	beq.n	83e76 <UDPHS_Handler+0x11e>
		dbg_print("Susp ");
		// Remove old wakeup status
		udd_ack_wake_up();
   83e40:	4b28      	ldr	r3, [pc, #160]	; (83ee4 <UDPHS_Handler+0x18c>)
   83e42:	2220      	movs	r2, #32
   83e44:	619a      	str	r2, [r3, #24]
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   83e46:	4b27      	ldr	r3, [pc, #156]	; (83ee4 <UDPHS_Handler+0x18c>)
   83e48:	691b      	ldr	r3, [r3, #16]
   83e4a:	4a26      	ldr	r2, [pc, #152]	; (83ee4 <UDPHS_Handler+0x18c>)
   83e4c:	f023 0302 	bic.w	r3, r3, #2
   83e50:	6113      	str	r3, [r2, #16]
		udd_enable_wake_up_interrupt();
   83e52:	4b24      	ldr	r3, [pc, #144]	; (83ee4 <UDPHS_Handler+0x18c>)
   83e54:	691b      	ldr	r3, [r3, #16]
   83e56:	4a23      	ldr	r2, [pc, #140]	; (83ee4 <UDPHS_Handler+0x18c>)
   83e58:	f043 0320 	orr.w	r3, r3, #32
   83e5c:	6113      	str	r3, [r2, #16]

		// The wakeup interrupt is generated even if the device controller clock is disabled.
		udd_ack_suspend();
   83e5e:	4b21      	ldr	r3, [pc, #132]	; (83ee4 <UDPHS_Handler+0x18c>)
   83e60:	2202      	movs	r2, #2
   83e62:	619a      	str	r2, [r3, #24]

		udd_disable_periph_ck();
   83e64:	201d      	movs	r0, #29
   83e66:	4b29      	ldr	r3, [pc, #164]	; (83f0c <UDPHS_Handler+0x1b4>)
   83e68:	4798      	blx	r3

#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   83e6a:	4b29      	ldr	r3, [pc, #164]	; (83f10 <UDPHS_Handler+0x1b8>)
   83e6c:	4798      	blx	r3
#endif
		udd_sleep_mode(false); // Enter in SUSPEND mode
   83e6e:	2000      	movs	r0, #0
   83e70:	4b28      	ldr	r3, [pc, #160]	; (83f14 <UDPHS_Handler+0x1bc>)
   83e72:	4798      	blx	r3
		goto udd_interrupt_end;
   83e74:	e02f      	b.n	83ed6 <UDPHS_Handler+0x17e>
	}

	// On wakeup, _IEN is reseted only with EoR enabled
	if (Is_udd_wake_up()) {
   83e76:	4b1b      	ldr	r3, [pc, #108]	; (83ee4 <UDPHS_Handler+0x18c>)
   83e78:	695b      	ldr	r3, [r3, #20]
   83e7a:	f003 0320 	and.w	r3, r3, #32
   83e7e:	2b00      	cmp	r3, #0
   83e80:	d028      	beq.n	83ed4 <UDPHS_Handler+0x17c>
		udd_sleep_mode(true); // Enter in IDLE mode
   83e82:	2001      	movs	r0, #1
   83e84:	4b23      	ldr	r3, [pc, #140]	; (83f14 <UDPHS_Handler+0x1bc>)
   83e86:	4798      	blx	r3
		// Remove old suspend status
		udd_ack_suspend();
   83e88:	4b16      	ldr	r3, [pc, #88]	; (83ee4 <UDPHS_Handler+0x18c>)
   83e8a:	2202      	movs	r2, #2
   83e8c:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wake_up();
   83e8e:	4b15      	ldr	r3, [pc, #84]	; (83ee4 <UDPHS_Handler+0x18c>)
   83e90:	2220      	movs	r2, #32
   83e92:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_disable_wake_up_interrupt();
   83e94:	4b13      	ldr	r3, [pc, #76]	; (83ee4 <UDPHS_Handler+0x18c>)
   83e96:	691b      	ldr	r3, [r3, #16]
   83e98:	4a12      	ldr	r2, [pc, #72]	; (83ee4 <UDPHS_Handler+0x18c>)
   83e9a:	f023 0320 	bic.w	r3, r3, #32
   83e9e:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   83ea0:	4b10      	ldr	r3, [pc, #64]	; (83ee4 <UDPHS_Handler+0x18c>)
   83ea2:	691b      	ldr	r3, [r3, #16]
   83ea4:	4a0f      	ldr	r2, [pc, #60]	; (83ee4 <UDPHS_Handler+0x18c>)
   83ea6:	f043 0302 	orr.w	r3, r3, #2
   83eaa:	6113      	str	r3, [r2, #16]
		udd_enable_sof_interrupt();
   83eac:	4b0d      	ldr	r3, [pc, #52]	; (83ee4 <UDPHS_Handler+0x18c>)
   83eae:	691b      	ldr	r3, [r3, #16]
   83eb0:	4a0c      	ldr	r2, [pc, #48]	; (83ee4 <UDPHS_Handler+0x18c>)
   83eb2:	f043 0308 	orr.w	r3, r3, #8
   83eb6:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   83eb8:	4b0a      	ldr	r3, [pc, #40]	; (83ee4 <UDPHS_Handler+0x18c>)
   83eba:	691b      	ldr	r3, [r3, #16]
   83ebc:	4a09      	ldr	r2, [pc, #36]	; (83ee4 <UDPHS_Handler+0x18c>)
   83ebe:	f043 0304 	orr.w	r3, r3, #4
   83ec2:	6113      	str	r3, [r2, #16]

#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   83ec4:	4b14      	ldr	r3, [pc, #80]	; (83f18 <UDPHS_Handler+0x1c0>)
   83ec6:	4798      	blx	r3
#endif
		dbg_print("Wkup ");
		goto udd_interrupt_end;
   83ec8:	bf00      	nop
   83eca:	e004      	b.n	83ed6 <UDPHS_Handler+0x17e>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
   83ecc:	bf00      	nop
   83ece:	e002      	b.n	83ed6 <UDPHS_Handler+0x17e>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
   83ed0:	bf00      	nop
   83ed2:	e000      	b.n	83ed6 <UDPHS_Handler+0x17e>
	}
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);

udd_interrupt_end:
   83ed4:	bf00      	nop
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
	//dbg_print("m%08x", UDPHS->UDPHS_IEN);
	dbg_print("\n\r");
udd_interrupt_sof_end:
	return;
   83ed6:	bf00      	nop
}
   83ed8:	bd80      	pop	{r7, pc}
   83eda:	bf00      	nop
   83edc:	000820ad 	.word	0x000820ad
   83ee0:	000825d9 	.word	0x000825d9
   83ee4:	400a4000 	.word	0x400a4000
   83ee8:	20000294 	.word	0x20000294
   83eec:	00082f85 	.word	0x00082f85
   83ef0:	00080d59 	.word	0x00080d59
   83ef4:	000851c1 	.word	0x000851c1
   83ef8:	000855d9 	.word	0x000855d9
   83efc:	00085301 	.word	0x00085301
   83f00:	00082f31 	.word	0x00082f31
   83f04:	00084b21 	.word	0x00084b21
   83f08:	00084ba1 	.word	0x00084ba1
   83f0c:	000820f9 	.word	0x000820f9
   83f10:	00080d41 	.word	0x00080d41
   83f14:	00083d01 	.word	0x00083d01
   83f18:	00080d4d 	.word	0x00080d4d

00083f1c <udd_enable>:
#endif
}


void udd_enable(void)
{
   83f1c:	b580      	push	{r7, lr}
   83f1e:	b082      	sub	sp, #8
   83f20:	af00      	add	r7, sp, #0
	irqflags_t flags;
	sysclk_enable_usb();
   83f22:	4b19      	ldr	r3, [pc, #100]	; (83f88 <udd_enable+0x6c>)
   83f24:	4798      	blx	r3

	udd_enable_periph_ck();
   83f26:	201d      	movs	r0, #29
   83f28:	4b18      	ldr	r3, [pc, #96]	; (83f8c <udd_enable+0x70>)
   83f2a:	4798      	blx	r3

	flags = cpu_irq_save();
   83f2c:	4b18      	ldr	r3, [pc, #96]	; (83f90 <udd_enable+0x74>)
   83f2e:	4798      	blx	r3
   83f30:	6078      	str	r0, [r7, #4]

	//** Enable USB hardware
	udd_enable_periph();
   83f32:	4b18      	ldr	r3, [pc, #96]	; (83f94 <udd_enable+0x78>)
   83f34:	681b      	ldr	r3, [r3, #0]
   83f36:	4a17      	ldr	r2, [pc, #92]	; (83f94 <udd_enable+0x78>)
   83f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   83f3c:	6013      	str	r3, [r2, #0]

	// Cortex-M3, uses NVIC, no need to register IRQ handler
	// Here, only the Device mode is possible,
	// UDPHS interrupt is UDD interrupt
	NVIC_SetPriority((IRQn_Type) ID_UDPHS, UDD_USB_INT_LEVEL);
   83f3e:	2105      	movs	r1, #5
   83f40:	201d      	movs	r0, #29
   83f42:	4b15      	ldr	r3, [pc, #84]	; (83f98 <udd_enable+0x7c>)
   83f44:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDPHS);
   83f46:	201d      	movs	r0, #29
   83f48:	4b14      	ldr	r3, [pc, #80]	; (83f9c <udd_enable+0x80>)
   83f4a:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
   83f4c:	4b14      	ldr	r3, [pc, #80]	; (83fa0 <udd_enable+0x84>)
   83f4e:	4798      	blx	r3
#endif

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   83f50:	4b10      	ldr	r3, [pc, #64]	; (83f94 <udd_enable+0x78>)
   83f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   83f56:	4a0f      	ldr	r2, [pc, #60]	; (83f94 <udd_enable+0x78>)
   83f58:	f023 0303 	bic.w	r3, r3, #3
   83f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
#else
	udd_high_speed_disable();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   83f60:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   83f64:	4b0f      	ldr	r3, [pc, #60]	; (83fa4 <udd_enable+0x88>)
   83f66:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
   83f68:	4b0f      	ldr	r3, [pc, #60]	; (83fa8 <udd_enable+0x8c>)
   83f6a:	2200      	movs	r2, #0
   83f6c:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
   83f6e:	2003      	movs	r0, #3
   83f70:	4b0e      	ldr	r3, [pc, #56]	; (83fac <udd_enable+0x90>)
   83f72:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
   83f74:	4b0e      	ldr	r3, [pc, #56]	; (83fb0 <udd_enable+0x94>)
   83f76:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
   83f78:	6878      	ldr	r0, [r7, #4]
   83f7a:	4b0e      	ldr	r3, [pc, #56]	; (83fb4 <udd_enable+0x98>)
   83f7c:	4798      	blx	r3
}
   83f7e:	bf00      	nop
   83f80:	3708      	adds	r7, #8
   83f82:	46bd      	mov	sp, r7
   83f84:	bd80      	pop	{r7, pc}
   83f86:	bf00      	nop
   83f88:	00082a59 	.word	0x00082a59
   83f8c:	000820ad 	.word	0x000820ad
   83f90:	00083c09 	.word	0x00083c09
   83f94:	400a4000 	.word	0x400a4000
   83f98:	00083bb5 	.word	0x00083bb5
   83f9c:	00083b85 	.word	0x00083b85
   83fa0:	000852a5 	.word	0x000852a5
   83fa4:	00082169 	.word	0x00082169
   83fa8:	20000d1c 	.word	0x20000d1c
   83fac:	00083c91 	.word	0x00083c91
   83fb0:	00083fb9 	.word	0x00083fb9
   83fb4:	00083c61 	.word	0x00083c61

00083fb8 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   83fb8:	b580      	push	{r7, lr}
   83fba:	b082      	sub	sp, #8
   83fbc:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
   83fbe:	4b26      	ldr	r3, [pc, #152]	; (84058 <udd_attach+0xa0>)
   83fc0:	4798      	blx	r3
   83fc2:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   83fc4:	2001      	movs	r0, #1
   83fc6:	4b25      	ldr	r3, [pc, #148]	; (8405c <udd_attach+0xa4>)
   83fc8:	4798      	blx	r3
	udd_enable_periph_ck();
   83fca:	201d      	movs	r0, #29
   83fcc:	4b24      	ldr	r3, [pc, #144]	; (84060 <udd_attach+0xa8>)
   83fce:	4798      	blx	r3

	// Authorize attach if Vbus is present
	udd_attach_device();
   83fd0:	4b24      	ldr	r3, [pc, #144]	; (84064 <udd_attach+0xac>)
   83fd2:	681b      	ldr	r3, [r3, #0]
   83fd4:	4a23      	ldr	r2, [pc, #140]	; (84064 <udd_attach+0xac>)
   83fd6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83fda:	6013      	str	r3, [r2, #0]
   83fdc:	4b21      	ldr	r3, [pc, #132]	; (84064 <udd_attach+0xac>)
   83fde:	681b      	ldr	r3, [r3, #0]
   83fe0:	4a20      	ldr	r2, [pc, #128]	; (84064 <udd_attach+0xac>)
   83fe2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   83fe6:	6013      	str	r3, [r2, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   83fe8:	4b1e      	ldr	r3, [pc, #120]	; (84064 <udd_attach+0xac>)
   83fea:	691b      	ldr	r3, [r3, #16]
   83fec:	4a1d      	ldr	r2, [pc, #116]	; (84064 <udd_attach+0xac>)
   83fee:	f043 0310 	orr.w	r3, r3, #16
   83ff2:	6113      	str	r3, [r2, #16]
	udd_enable_suspend_interrupt();
   83ff4:	4b1b      	ldr	r3, [pc, #108]	; (84064 <udd_attach+0xac>)
   83ff6:	691b      	ldr	r3, [r3, #16]
   83ff8:	4a1a      	ldr	r2, [pc, #104]	; (84064 <udd_attach+0xac>)
   83ffa:	f043 0302 	orr.w	r3, r3, #2
   83ffe:	6113      	str	r3, [r2, #16]
	udd_enable_wake_up_interrupt();
   84000:	4b18      	ldr	r3, [pc, #96]	; (84064 <udd_attach+0xac>)
   84002:	691b      	ldr	r3, [r3, #16]
   84004:	4a17      	ldr	r2, [pc, #92]	; (84064 <udd_attach+0xac>)
   84006:	f043 0320 	orr.w	r3, r3, #32
   8400a:	6113      	str	r3, [r2, #16]
	udd_enable_sof_interrupt();
   8400c:	4b15      	ldr	r3, [pc, #84]	; (84064 <udd_attach+0xac>)
   8400e:	691b      	ldr	r3, [r3, #16]
   84010:	4a14      	ldr	r2, [pc, #80]	; (84064 <udd_attach+0xac>)
   84012:	f043 0308 	orr.w	r3, r3, #8
   84016:	6113      	str	r3, [r2, #16]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   84018:	4b12      	ldr	r3, [pc, #72]	; (84064 <udd_attach+0xac>)
   8401a:	691b      	ldr	r3, [r3, #16]
   8401c:	4a11      	ldr	r2, [pc, #68]	; (84064 <udd_attach+0xac>)
   8401e:	f043 0304 	orr.w	r3, r3, #4
   84022:	6113      	str	r3, [r2, #16]
#endif
	// Reset following interrupts flag
	udd_ack_sof();
   84024:	4b0f      	ldr	r3, [pc, #60]	; (84064 <udd_attach+0xac>)
   84026:	2208      	movs	r2, #8
   84028:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   8402a:	4b0e      	ldr	r3, [pc, #56]	; (84064 <udd_attach+0xac>)
   8402c:	2204      	movs	r2, #4
   8402e:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   84030:	4b0c      	ldr	r3, [pc, #48]	; (84064 <udd_attach+0xac>)
   84032:	2210      	movs	r2, #16
   84034:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   84036:	4b0b      	ldr	r3, [pc, #44]	; (84064 <udd_attach+0xac>)
   84038:	2202      	movs	r2, #2
   8403a:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   8403c:	4b09      	ldr	r3, [pc, #36]	; (84064 <udd_attach+0xac>)
   8403e:	2220      	movs	r2, #32
   84040:	619a      	str	r2, [r3, #24]

	udd_disable_periph_ck();
   84042:	201d      	movs	r0, #29
   84044:	4b08      	ldr	r3, [pc, #32]	; (84068 <udd_attach+0xb0>)
   84046:	4798      	blx	r3
	cpu_irq_restore(flags);
   84048:	6878      	ldr	r0, [r7, #4]
   8404a:	4b08      	ldr	r3, [pc, #32]	; (8406c <udd_attach+0xb4>)
   8404c:	4798      	blx	r3
}
   8404e:	bf00      	nop
   84050:	3708      	adds	r7, #8
   84052:	46bd      	mov	sp, r7
   84054:	bd80      	pop	{r7, pc}
   84056:	bf00      	nop
   84058:	00083c09 	.word	0x00083c09
   8405c:	00083d01 	.word	0x00083d01
   84060:	000820ad 	.word	0x000820ad
   84064:	400a4000 	.word	0x400a4000
   84068:	000820f9 	.word	0x000820f9
   8406c:	00083c61 	.word	0x00083c61

00084070 <udd_detach>:


void udd_detach(void)
{
   84070:	b580      	push	{r7, lr}
   84072:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   84074:	201d      	movs	r0, #29
   84076:	4b0b      	ldr	r3, [pc, #44]	; (840a4 <udd_detach+0x34>)
   84078:	4798      	blx	r3
	// Detach device from the bus
	udd_detach_device();
   8407a:	4b0b      	ldr	r3, [pc, #44]	; (840a8 <udd_detach+0x38>)
   8407c:	681b      	ldr	r3, [r3, #0]
   8407e:	4a0a      	ldr	r2, [pc, #40]	; (840a8 <udd_detach+0x38>)
   84080:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   84084:	6013      	str	r3, [r2, #0]
   84086:	4b08      	ldr	r3, [pc, #32]	; (840a8 <udd_detach+0x38>)
   84088:	681b      	ldr	r3, [r3, #0]
   8408a:	4a07      	ldr	r2, [pc, #28]	; (840a8 <udd_detach+0x38>)
   8408c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84090:	6013      	str	r3, [r2, #0]
	udd_disable_periph_ck();
   84092:	201d      	movs	r0, #29
   84094:	4b05      	ldr	r3, [pc, #20]	; (840ac <udd_detach+0x3c>)
   84096:	4798      	blx	r3
	udd_sleep_mode(false);
   84098:	2000      	movs	r0, #0
   8409a:	4b05      	ldr	r3, [pc, #20]	; (840b0 <udd_detach+0x40>)
   8409c:	4798      	blx	r3
}
   8409e:	bf00      	nop
   840a0:	bd80      	pop	{r7, pc}
   840a2:	bf00      	nop
   840a4:	000820ad 	.word	0x000820ad
   840a8:	400a4000 	.word	0x400a4000
   840ac:	000820f9 	.word	0x000820f9
   840b0:	00083d01 	.word	0x00083d01

000840b4 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
   840b4:	b480      	push	{r7}
   840b6:	af00      	add	r7, sp, #0
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   840b8:	4b06      	ldr	r3, [pc, #24]	; (840d4 <udd_is_high_speed+0x20>)
   840ba:	695b      	ldr	r3, [r3, #20]
   840bc:	f003 0301 	and.w	r3, r3, #1
   840c0:	2b00      	cmp	r3, #0
   840c2:	bf14      	ite	ne
   840c4:	2301      	movne	r3, #1
   840c6:	2300      	moveq	r3, #0
   840c8:	b2db      	uxtb	r3, r3
#else
	return false;
#endif
}
   840ca:	4618      	mov	r0, r3
   840cc:	46bd      	mov	sp, r7
   840ce:	bc80      	pop	{r7}
   840d0:	4770      	bx	lr
   840d2:	bf00      	nop
   840d4:	400a4000 	.word	0x400a4000

000840d8 <udd_set_address>:


void udd_set_address(uint8_t address)
{
   840d8:	b480      	push	{r7}
   840da:	b083      	sub	sp, #12
   840dc:	af00      	add	r7, sp, #0
   840de:	4603      	mov	r3, r0
   840e0:	71fb      	strb	r3, [r7, #7]
	dbg_print("Addr%d ", address);
	udd_disable_address();
   840e2:	4b0d      	ldr	r3, [pc, #52]	; (84118 <udd_set_address+0x40>)
   840e4:	681b      	ldr	r3, [r3, #0]
   840e6:	4a0c      	ldr	r2, [pc, #48]	; (84118 <udd_set_address+0x40>)
   840e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   840ec:	6013      	str	r3, [r2, #0]
	udd_configure_address(address);
   840ee:	4b0a      	ldr	r3, [pc, #40]	; (84118 <udd_set_address+0x40>)
   840f0:	681b      	ldr	r3, [r3, #0]
   840f2:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   840f6:	79fb      	ldrb	r3, [r7, #7]
   840f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   840fc:	4906      	ldr	r1, [pc, #24]	; (84118 <udd_set_address+0x40>)
   840fe:	4313      	orrs	r3, r2
   84100:	600b      	str	r3, [r1, #0]
	udd_enable_address();
   84102:	4b05      	ldr	r3, [pc, #20]	; (84118 <udd_set_address+0x40>)
   84104:	681b      	ldr	r3, [r3, #0]
   84106:	4a04      	ldr	r2, [pc, #16]	; (84118 <udd_set_address+0x40>)
   84108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8410c:	6013      	str	r3, [r2, #0]
}
   8410e:	bf00      	nop
   84110:	370c      	adds	r7, #12
   84112:	46bd      	mov	sp, r7
   84114:	bc80      	pop	{r7}
   84116:	4770      	bx	lr
   84118:	400a4000 	.word	0x400a4000

0008411c <udd_getaddress>:


uint8_t udd_getaddress(void)
{
   8411c:	b480      	push	{r7}
   8411e:	af00      	add	r7, sp, #0
	return udd_get_configured_address();
   84120:	4b04      	ldr	r3, [pc, #16]	; (84134 <udd_getaddress+0x18>)
   84122:	681b      	ldr	r3, [r3, #0]
   84124:	b2db      	uxtb	r3, r3
   84126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   8412a:	b2db      	uxtb	r3, r3
}
   8412c:	4618      	mov	r0, r3
   8412e:	46bd      	mov	sp, r7
   84130:	bc80      	pop	{r7}
   84132:	4770      	bx	lr
   84134:	400a4000 	.word	0x400a4000

00084138 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
   84138:	b480      	push	{r7}
   8413a:	b083      	sub	sp, #12
   8413c:	af00      	add	r7, sp, #0
   8413e:	6078      	str	r0, [r7, #4]
   84140:	460b      	mov	r3, r1
   84142:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
   84144:	4a05      	ldr	r2, [pc, #20]	; (8415c <udd_set_setup_payload+0x24>)
   84146:	687b      	ldr	r3, [r7, #4]
   84148:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   8414a:	4a04      	ldr	r2, [pc, #16]	; (8415c <udd_set_setup_payload+0x24>)
   8414c:	887b      	ldrh	r3, [r7, #2]
   8414e:	8193      	strh	r3, [r2, #12]
}
   84150:	bf00      	nop
   84152:	370c      	adds	r7, #12
   84154:	46bd      	mov	sp, r7
   84156:	bc80      	pop	{r7}
   84158:	4770      	bx	lr
   8415a:	bf00      	nop
   8415c:	20000d64 	.word	0x20000d64

00084160 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   84160:	b590      	push	{r4, r7, lr}
   84162:	b089      	sub	sp, #36	; 0x24
   84164:	af02      	add	r7, sp, #8
   84166:	4603      	mov	r3, r0
   84168:	71fb      	strb	r3, [r7, #7]
   8416a:	460b      	mov	r3, r1
   8416c:	71bb      	strb	r3, [r7, #6]
   8416e:	4613      	mov	r3, r2
   84170:	80bb      	strh	r3, [r7, #4]
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, nb_tran = 0, i;
   84172:	2300      	movs	r3, #0
   84174:	74fb      	strb	r3, [r7, #19]
	bool b_iso_hbw = false;
   84176:	2300      	movs	r3, #0
   84178:	747b      	strb	r3, [r7, #17]

	b_dir_in = ep & USB_EP_DIR_IN;
   8417a:	79fb      	ldrb	r3, [r7, #7]
   8417c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   84180:	2b00      	cmp	r3, #0
   84182:	bf14      	ite	ne
   84184:	2301      	movne	r3, #1
   84186:	2300      	moveq	r3, #0
   84188:	743b      	strb	r3, [r7, #16]
	ep = ep & USB_EP_ADDR_MASK;
   8418a:	79fb      	ldrb	r3, [r7, #7]
   8418c:	f003 030f 	and.w	r3, r3, #15
   84190:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
   84192:	79fb      	ldrb	r3, [r7, #7]
   84194:	2b02      	cmp	r3, #2
   84196:	d901      	bls.n	8419c <udd_ep_alloc+0x3c>
		return false;
   84198:	2300      	movs	r3, #0
   8419a:	e1ae      	b.n	844fa <udd_ep_alloc+0x39a>
	}
	if (Is_udd_endpoint_enabled(ep)) {
   8419c:	4ab0      	ldr	r2, [pc, #704]	; (84460 <udd_ep_alloc+0x300>)
   8419e:	79fb      	ldrb	r3, [r7, #7]
   841a0:	015b      	lsls	r3, r3, #5
   841a2:	4413      	add	r3, r2
   841a4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   841a8:	681b      	ldr	r3, [r3, #0]
   841aa:	f003 0301 	and.w	r3, r3, #1
   841ae:	2b00      	cmp	r3, #0
   841b0:	d001      	beq.n	841b6 <udd_ep_alloc+0x56>
		return false;
   841b2:	2300      	movs	r3, #0
   841b4:	e1a1      	b.n	844fa <udd_ep_alloc+0x39a>
	}

	// Bank choice
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   841b6:	79bb      	ldrb	r3, [r7, #6]
   841b8:	f003 0303 	and.w	r3, r3, #3
   841bc:	2b02      	cmp	r3, #2
   841be:	d01a      	beq.n	841f6 <udd_ep_alloc+0x96>
   841c0:	2b03      	cmp	r3, #3
   841c2:	d015      	beq.n	841f0 <udd_ep_alloc+0x90>
   841c4:	2b01      	cmp	r3, #1
   841c6:	d119      	bne.n	841fc <udd_ep_alloc+0x9c>
	case USB_EP_TYPE_ISOCHRONOUS:
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   841c8:	79fb      	ldrb	r3, [r7, #7]
   841ca:	2b00      	cmp	r3, #0
   841cc:	d007      	beq.n	841de <udd_ep_alloc+0x7e>
   841ce:	79fb      	ldrb	r3, [r7, #7]
   841d0:	2b03      	cmp	r3, #3
   841d2:	d004      	beq.n	841de <udd_ep_alloc+0x7e>
   841d4:	79fb      	ldrb	r3, [r7, #7]
   841d6:	2b04      	cmp	r3, #4
   841d8:	d001      	beq.n	841de <udd_ep_alloc+0x7e>
   841da:	2301      	movs	r3, #1
   841dc:	e000      	b.n	841e0 <udd_ep_alloc+0x80>
   841de:	2300      	movs	r3, #0
   841e0:	747b      	strb	r3, [r7, #17]
   841e2:	7c7b      	ldrb	r3, [r7, #17]
   841e4:	f003 0301 	and.w	r3, r3, #1
   841e8:	747b      	strb	r3, [r7, #17]
		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
   841ea:	2301      	movs	r3, #1
   841ec:	757b      	strb	r3, [r7, #21]
		break;
   841ee:	e007      	b.n	84200 <udd_ep_alloc+0xa0>
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
   841f0:	2301      	movs	r3, #1
   841f2:	757b      	strb	r3, [r7, #21]
		break;
   841f4:	e004      	b.n	84200 <udd_ep_alloc+0xa0>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   841f6:	2302      	movs	r3, #2
   841f8:	757b      	strb	r3, [r7, #21]
		break;
   841fa:	e001      	b.n	84200 <udd_ep_alloc+0xa0>
	default:
		Assert(false);
		return false;
   841fc:	2300      	movs	r3, #0
   841fe:	e17c      	b.n	844fa <udd_ep_alloc+0x39a>
	}
	switch (nb_bank) {
   84200:	7d7b      	ldrb	r3, [r7, #21]
   84202:	2b02      	cmp	r3, #2
   84204:	d006      	beq.n	84214 <udd_ep_alloc+0xb4>
   84206:	2b03      	cmp	r3, #3
   84208:	d007      	beq.n	8421a <udd_ep_alloc+0xba>
   8420a:	2b01      	cmp	r3, #1
   8420c:	d108      	bne.n	84220 <udd_ep_alloc+0xc0>
	case 1:
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   8420e:	2301      	movs	r3, #1
   84210:	753b      	strb	r3, [r7, #20]
		break;
   84212:	e007      	b.n	84224 <udd_ep_alloc+0xc4>
	case 2:
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   84214:	2302      	movs	r3, #2
   84216:	753b      	strb	r3, [r7, #20]
		break;
   84218:	e004      	b.n	84224 <udd_ep_alloc+0xc4>
	case 3:
		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   8421a:	2303      	movs	r3, #3
   8421c:	753b      	strb	r3, [r7, #20]
		break;
   8421e:	e001      	b.n	84224 <udd_ep_alloc+0xc4>
	default:
		Assert(false);
		return false;
   84220:	2300      	movs	r3, #0
   84222:	e16a      	b.n	844fa <udd_ep_alloc+0x39a>
	}
	if (b_iso_hbw) {
   84224:	7c7b      	ldrb	r3, [r7, #17]
   84226:	2b00      	cmp	r3, #0
   84228:	d017      	beq.n	8425a <udd_ep_alloc+0xfa>
		switch(MaxEndpointSize & (0x3u << 11)) {
   8422a:	88bb      	ldrh	r3, [r7, #4]
   8422c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   84230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   84234:	d003      	beq.n	8423e <udd_ep_alloc+0xde>
   84236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   8423a:	d003      	beq.n	84244 <udd_ep_alloc+0xe4>
   8423c:	e005      	b.n	8424a <udd_ep_alloc+0xea>
		case (0x1u << 11):
			nb_tran = 2;
   8423e:	2302      	movs	r3, #2
   84240:	74fb      	strb	r3, [r7, #19]
			break;
   84242:	e005      	b.n	84250 <udd_ep_alloc+0xf0>
		case (0x2u << 11):
			nb_tran = 3;
   84244:	2303      	movs	r3, #3
   84246:	74fb      	strb	r3, [r7, #19]
			break;
   84248:	e002      	b.n	84250 <udd_ep_alloc+0xf0>
		default:
			nb_tran = 1;
   8424a:	2301      	movs	r3, #1
   8424c:	74fb      	strb	r3, [r7, #19]
			break;
   8424e:	bf00      	nop
		}
		MaxEndpointSize &= ~(0x3u << 11);
   84250:	88bb      	ldrh	r3, [r7, #4]
   84252:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
   84256:	80bb      	strh	r3, [r7, #4]
   84258:	e006      	b.n	84268 <udd_ep_alloc+0x108>
	} else if (MaxEndpointSize & (0x3u << 11)) {
   8425a:	88bb      	ldrh	r3, [r7, #4]
   8425c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   84260:	2b00      	cmp	r3, #0
   84262:	d001      	beq.n	84268 <udd_ep_alloc+0x108>
		// High BW not supported
		return false;
   84264:	2300      	movs	r3, #0
   84266:	e148      	b.n	844fa <udd_ep_alloc+0x39a>
	Assert(MaxEndpointSize <= udd_get_endpoint_size_max(ep));
	Assert(nb_bank <= udd_get_endpoint_bank_max_nbr(ep));

	// Set configuration of new endpoint
	// Note: NB_TRANS is at maximum for isochronous endpoint, else 0 (ignored).
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   84268:	4a7d      	ldr	r2, [pc, #500]	; (84460 <udd_ep_alloc+0x300>)
   8426a:	79fb      	ldrb	r3, [r7, #7]
   8426c:	3308      	adds	r3, #8
   8426e:	015b      	lsls	r3, r3, #5
   84270:	4413      	add	r3, r2
   84272:	681b      	ldr	r3, [r3, #0]
   84274:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   84278:	f023 0303 	bic.w	r3, r3, #3
   8427c:	79ba      	ldrb	r2, [r7, #6]
   8427e:	0112      	lsls	r2, r2, #4
   84280:	f002 0230 	and.w	r2, r2, #48	; 0x30
   84284:	7c39      	ldrb	r1, [r7, #16]
   84286:	2900      	cmp	r1, #0
   84288:	d001      	beq.n	8428e <udd_ep_alloc+0x12e>
   8428a:	2108      	movs	r1, #8
   8428c:	e000      	b.n	84290 <udd_ep_alloc+0x130>
   8428e:	2100      	movs	r1, #0
   84290:	4311      	orrs	r1, r2
   84292:	88ba      	ldrh	r2, [r7, #4]
   84294:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   84298:	d207      	bcs.n	842aa <udd_ep_alloc+0x14a>
   8429a:	88ba      	ldrh	r2, [r7, #4]
   8429c:	2a08      	cmp	r2, #8
   8429e:	bf38      	it	cc
   842a0:	2208      	movcc	r2, #8
   842a2:	b292      	uxth	r2, r2
   842a4:	0052      	lsls	r2, r2, #1
   842a6:	3a01      	subs	r2, #1
   842a8:	e001      	b.n	842ae <udd_ep_alloc+0x14e>
   842aa:	f240 72ff 	movw	r2, #2047	; 0x7ff
   842ae:	fab2 f282 	clz	r2, r2
   842b2:	f1c2 021c 	rsb	r2, r2, #28
   842b6:	4311      	orrs	r1, r2
   842b8:	7d3a      	ldrb	r2, [r7, #20]
   842ba:	0192      	lsls	r2, r2, #6
   842bc:	b2d2      	uxtb	r2, r2
   842be:	4311      	orrs	r1, r2
   842c0:	7c7a      	ldrb	r2, [r7, #17]
   842c2:	2a00      	cmp	r2, #0
   842c4:	d004      	beq.n	842d0 <udd_ep_alloc+0x170>
   842c6:	7cfa      	ldrb	r2, [r7, #19]
   842c8:	0212      	lsls	r2, r2, #8
   842ca:	f402 7240 	and.w	r2, r2, #768	; 0x300
   842ce:	e000      	b.n	842d2 <udd_ep_alloc+0x172>
   842d0:	2200      	movs	r2, #0
   842d2:	430a      	orrs	r2, r1
   842d4:	f3c2 0209 	ubfx	r2, r2, #0, #10
   842d8:	4861      	ldr	r0, [pc, #388]	; (84460 <udd_ep_alloc+0x300>)
   842da:	79f9      	ldrb	r1, [r7, #7]
   842dc:	431a      	orrs	r2, r3
   842de:	f101 0308 	add.w	r3, r1, #8
   842e2:	015b      	lsls	r3, r3, #5
   842e4:	4403      	add	r3, r0
   842e6:	601a      	str	r2, [r3, #0]
			MaxEndpointSize, bank, (b_iso_hbw)?nb_tran:0);
	if (!Is_udd_endpoint_mapped(ep)) {
   842e8:	4a5d      	ldr	r2, [pc, #372]	; (84460 <udd_ep_alloc+0x300>)
   842ea:	79fb      	ldrb	r3, [r7, #7]
   842ec:	3308      	adds	r3, #8
   842ee:	015b      	lsls	r3, r3, #5
   842f0:	4413      	add	r3, r2
   842f2:	681b      	ldr	r3, [r3, #0]
   842f4:	2b00      	cmp	r3, #0
   842f6:	db01      	blt.n	842fc <udd_ep_alloc+0x19c>
		return false;
   842f8:	2300      	movs	r3, #0
   842fa:	e0fe      	b.n	844fa <udd_ep_alloc+0x39a>
	}
	udd_enable_endpoint(ep);
   842fc:	4a58      	ldr	r2, [pc, #352]	; (84460 <udd_ep_alloc+0x300>)
   842fe:	79fb      	ldrb	r3, [r7, #7]
   84300:	3308      	adds	r3, #8
   84302:	015b      	lsls	r3, r3, #5
   84304:	4413      	add	r3, r2
   84306:	3304      	adds	r3, #4
   84308:	2201      	movs	r2, #1
   8430a:	601a      	str	r2, [r3, #0]

	// To avoid conflict during reorganization of the DPRAM
	// the superior endpoint must be unallocated and reallocated
	ep_allocated = 0;
   8430c:	2300      	movs	r3, #0
   8430e:	82fb      	strh	r3, [r7, #22]

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   84310:	2302      	movs	r3, #2
   84312:	74bb      	strb	r3, [r7, #18]
   84314:	e039      	b.n	8438a <udd_ep_alloc+0x22a>
		if (Is_udd_endpoint_enabled(i)) {
   84316:	4a52      	ldr	r2, [pc, #328]	; (84460 <udd_ep_alloc+0x300>)
   84318:	7cbb      	ldrb	r3, [r7, #18]
   8431a:	015b      	lsls	r3, r3, #5
   8431c:	4413      	add	r3, r2
   8431e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   84322:	681b      	ldr	r3, [r3, #0]
   84324:	f003 0301 	and.w	r3, r3, #1
   84328:	2b00      	cmp	r3, #0
   8432a:	d02b      	beq.n	84384 <udd_ep_alloc+0x224>
			// Save number of bank value
			bank = udd_get_endpoint_bank(i);
   8432c:	4a4c      	ldr	r2, [pc, #304]	; (84460 <udd_ep_alloc+0x300>)
   8432e:	7cbb      	ldrb	r3, [r7, #18]
   84330:	3308      	adds	r3, #8
   84332:	015b      	lsls	r3, r3, #5
   84334:	4413      	add	r3, r2
   84336:	681b      	ldr	r3, [r3, #0]
   84338:	099b      	lsrs	r3, r3, #6
   8433a:	b2db      	uxtb	r3, r3
   8433c:	f003 0303 	and.w	r3, r3, #3
   84340:	753b      	strb	r3, [r7, #20]
			ep_allocated |=  bank << (i * 2);
   84342:	7d3a      	ldrb	r2, [r7, #20]
   84344:	7cbb      	ldrb	r3, [r7, #18]
   84346:	005b      	lsls	r3, r3, #1
   84348:	fa02 f303 	lsl.w	r3, r2, r3
   8434c:	b21a      	sxth	r2, r3
   8434e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   84352:	4313      	orrs	r3, r2
   84354:	b21b      	sxth	r3, r3
   84356:	82fb      	strh	r3, [r7, #22]
			// Disable and unallocate endpoint
			udd_disable_endpoint(i);
   84358:	4a41      	ldr	r2, [pc, #260]	; (84460 <udd_ep_alloc+0x300>)
   8435a:	7cbb      	ldrb	r3, [r7, #18]
   8435c:	015b      	lsls	r3, r3, #5
   8435e:	4413      	add	r3, r2
   84360:	f503 7384 	add.w	r3, r3, #264	; 0x108
   84364:	2201      	movs	r2, #1
   84366:	601a      	str	r2, [r3, #0]
			udd_configure_endpoint_bank(i, 0);
   84368:	4a3d      	ldr	r2, [pc, #244]	; (84460 <udd_ep_alloc+0x300>)
   8436a:	7cbb      	ldrb	r3, [r7, #18]
   8436c:	3308      	adds	r3, #8
   8436e:	015b      	lsls	r3, r3, #5
   84370:	4413      	add	r3, r2
   84372:	681a      	ldr	r2, [r3, #0]
   84374:	493a      	ldr	r1, [pc, #232]	; (84460 <udd_ep_alloc+0x300>)
   84376:	7cbb      	ldrb	r3, [r7, #18]
   84378:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   8437c:	3308      	adds	r3, #8
   8437e:	015b      	lsls	r3, r3, #5
   84380:	440b      	add	r3, r1
   84382:	601a      	str	r2, [r3, #0]
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   84384:	7cbb      	ldrb	r3, [r7, #18]
   84386:	3b01      	subs	r3, #1
   84388:	74bb      	strb	r3, [r7, #18]
   8438a:	7cba      	ldrb	r2, [r7, #18]
   8438c:	79fb      	ldrb	r3, [r7, #7]
   8438e:	429a      	cmp	r2, r3
   84390:	d2c1      	bcs.n	84316 <udd_ep_alloc+0x1b6>

		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   84392:	79fb      	ldrb	r3, [r7, #7]
   84394:	74bb      	strb	r3, [r7, #18]
   84396:	e0ab      	b.n	844f0 <udd_ep_alloc+0x390>
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   84398:	7cbb      	ldrb	r3, [r7, #18]
   8439a:	1e5a      	subs	r2, r3, #1
   8439c:	4613      	mov	r3, r2
   8439e:	005b      	lsls	r3, r3, #1
   843a0:	4413      	add	r3, r2
   843a2:	00db      	lsls	r3, r3, #3
   843a4:	4a2f      	ldr	r2, [pc, #188]	; (84464 <udd_ep_alloc+0x304>)
   843a6:	4413      	add	r3, r2
   843a8:	60fb      	str	r3, [r7, #12]
		bool b_restart = ptr_job->busy;
   843aa:	68fb      	ldr	r3, [r7, #12]
   843ac:	7d1b      	ldrb	r3, [r3, #20]
   843ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
   843b2:	b2db      	uxtb	r3, r3
   843b4:	2b00      	cmp	r3, #0
   843b6:	bf14      	ite	ne
   843b8:	2301      	movne	r3, #1
   843ba:	2300      	moveq	r3, #0
   843bc:	72fb      	strb	r3, [r7, #11]
		// Unallocated banks?
		bank = (ep_allocated >> (i * 2)) & 0x03;
   843be:	8afa      	ldrh	r2, [r7, #22]
   843c0:	7cbb      	ldrb	r3, [r7, #18]
   843c2:	005b      	lsls	r3, r3, #1
   843c4:	fa42 f303 	asr.w	r3, r2, r3
   843c8:	b2db      	uxtb	r3, r3
   843ca:	f003 0303 	and.w	r3, r3, #3
   843ce:	753b      	strb	r3, [r7, #20]
		if (bank == 0) {
   843d0:	7d3b      	ldrb	r3, [r7, #20]
   843d2:	2b00      	cmp	r3, #0
   843d4:	f000 8088 	beq.w	844e8 <udd_ep_alloc+0x388>
			continue;
		}
		// Restart running job because
		// memory window slides up and its data is lost
		ptr_job->busy = false;
   843d8:	68fa      	ldr	r2, [r7, #12]
   843da:	7d13      	ldrb	r3, [r2, #20]
   843dc:	f36f 0300 	bfc	r3, #0, #1
   843e0:	7513      	strb	r3, [r2, #20]
		// Re-allocate memory
		udd_configure_endpoint_bank(i, bank);
   843e2:	4a1f      	ldr	r2, [pc, #124]	; (84460 <udd_ep_alloc+0x300>)
   843e4:	7cbb      	ldrb	r3, [r7, #18]
   843e6:	3308      	adds	r3, #8
   843e8:	015b      	lsls	r3, r3, #5
   843ea:	4413      	add	r3, r2
   843ec:	681b      	ldr	r3, [r3, #0]
   843ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
   843f2:	7d3b      	ldrb	r3, [r7, #20]
   843f4:	019b      	lsls	r3, r3, #6
   843f6:	b2da      	uxtb	r2, r3
   843f8:	4819      	ldr	r0, [pc, #100]	; (84460 <udd_ep_alloc+0x300>)
   843fa:	7cbb      	ldrb	r3, [r7, #18]
   843fc:	430a      	orrs	r2, r1
   843fe:	3308      	adds	r3, #8
   84400:	015b      	lsls	r3, r3, #5
   84402:	4403      	add	r3, r0
   84404:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint(i);
   84406:	4a16      	ldr	r2, [pc, #88]	; (84460 <udd_ep_alloc+0x300>)
   84408:	7cbb      	ldrb	r3, [r7, #18]
   8440a:	3308      	adds	r3, #8
   8440c:	015b      	lsls	r3, r3, #5
   8440e:	4413      	add	r3, r2
   84410:	3304      	adds	r3, #4
   84412:	2201      	movs	r2, #1
   84414:	601a      	str	r2, [r3, #0]
		if (!Is_udd_endpoint_mapped(i)) {
   84416:	4a12      	ldr	r2, [pc, #72]	; (84460 <udd_ep_alloc+0x300>)
   84418:	7cbb      	ldrb	r3, [r7, #18]
   8441a:	3308      	adds	r3, #8
   8441c:	015b      	lsls	r3, r3, #5
   8441e:	4413      	add	r3, r2
   84420:	681b      	ldr	r3, [r3, #0]
   84422:	2b00      	cmp	r3, #0
   84424:	db20      	blt.n	84468 <udd_ep_alloc+0x308>
			dbg_print("ErrRealloc%d-JobE ", i);
			if (NULL == ptr_job->call_trans) {
   84426:	68fb      	ldr	r3, [r7, #12]
   84428:	681b      	ldr	r3, [r3, #0]
   8442a:	2b00      	cmp	r3, #0
   8442c:	d101      	bne.n	84432 <udd_ep_alloc+0x2d2>
				return false;
   8442e:	2300      	movs	r3, #0
   84430:	e063      	b.n	844fa <udd_ep_alloc+0x39a>
			}
			if (Is_udd_endpoint_in(i)) {
   84432:	4a0b      	ldr	r2, [pc, #44]	; (84460 <udd_ep_alloc+0x300>)
   84434:	7cbb      	ldrb	r3, [r7, #18]
   84436:	3308      	adds	r3, #8
   84438:	015b      	lsls	r3, r3, #5
   8443a:	4413      	add	r3, r2
   8443c:	681b      	ldr	r3, [r3, #0]
   8443e:	f003 0308 	and.w	r3, r3, #8
   84442:	2b00      	cmp	r3, #0
   84444:	d003      	beq.n	8444e <udd_ep_alloc+0x2ee>
				i |= USB_EP_DIR_IN;
   84446:	7cbb      	ldrb	r3, [r7, #18]
   84448:	f063 037f 	orn	r3, r3, #127	; 0x7f
   8444c:	74bb      	strb	r3, [r7, #18]
			}
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   8444e:	68fb      	ldr	r3, [r7, #12]
   84450:	681b      	ldr	r3, [r3, #0]
   84452:	68fa      	ldr	r2, [r7, #12]
   84454:	68d1      	ldr	r1, [r2, #12]
   84456:	7cba      	ldrb	r2, [r7, #18]
   84458:	2001      	movs	r0, #1
   8445a:	4798      	blx	r3
					ptr_job->buf_cnt, i);
			return false;
   8445c:	2300      	movs	r3, #0
   8445e:	e04c      	b.n	844fa <udd_ep_alloc+0x39a>
   84460:	400a4000 	.word	0x400a4000
   84464:	20000d24 	.word	0x20000d24
		}
		udd_enable_endpoint_bank_autoswitch(i);
   84468:	4a26      	ldr	r2, [pc, #152]	; (84504 <udd_ep_alloc+0x3a4>)
   8446a:	7cbb      	ldrb	r3, [r7, #18]
   8446c:	3308      	adds	r3, #8
   8446e:	015b      	lsls	r3, r3, #5
   84470:	4413      	add	r3, r2
   84472:	3304      	adds	r3, #4
   84474:	681a      	ldr	r2, [r3, #0]
   84476:	4923      	ldr	r1, [pc, #140]	; (84504 <udd_ep_alloc+0x3a4>)
   84478:	7cbb      	ldrb	r3, [r7, #18]
   8447a:	f042 0202 	orr.w	r2, r2, #2
   8447e:	3308      	adds	r3, #8
   84480:	015b      	lsls	r3, r3, #5
   84482:	440b      	add	r3, r1
   84484:	3304      	adds	r3, #4
   84486:	601a      	str	r2, [r3, #0]
		if (b_restart) {
   84488:	7afb      	ldrb	r3, [r7, #11]
   8448a:	2b00      	cmp	r3, #0
   8448c:	d02d      	beq.n	844ea <udd_ep_alloc+0x38a>
			// Re-run the job remaining part
			ptr_job->buf_cnt -= ptr_job->buf_load;
   8448e:	68fb      	ldr	r3, [r7, #12]
   84490:	68da      	ldr	r2, [r3, #12]
   84492:	68fb      	ldr	r3, [r7, #12]
   84494:	691b      	ldr	r3, [r3, #16]
   84496:	1ad2      	subs	r2, r2, r3
   84498:	68fb      	ldr	r3, [r7, #12]
   8449a:	60da      	str	r2, [r3, #12]
			b_restart = udd_ep_run(i,
					ptr_job->b_shortpacket,
   8449c:	68fb      	ldr	r3, [r7, #12]
   8449e:	7d1b      	ldrb	r3, [r3, #20]
   844a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
   844a4:	b2db      	uxtb	r3, r3
			b_restart = udd_ep_run(i,
   844a6:	2b00      	cmp	r3, #0
   844a8:	bf14      	ite	ne
   844aa:	2301      	movne	r3, #1
   844ac:	2300      	moveq	r3, #0
   844ae:	b2d9      	uxtb	r1, r3
					&ptr_job->buf[ptr_job->buf_cnt],
   844b0:	68fb      	ldr	r3, [r7, #12]
   844b2:	685a      	ldr	r2, [r3, #4]
   844b4:	68fb      	ldr	r3, [r7, #12]
   844b6:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   844b8:	18d4      	adds	r4, r2, r3
					ptr_job->buf_size
   844ba:	68fb      	ldr	r3, [r7, #12]
   844bc:	689a      	ldr	r2, [r3, #8]
						- ptr_job->buf_cnt,
   844be:	68fb      	ldr	r3, [r7, #12]
   844c0:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   844c2:	1ad2      	subs	r2, r2, r3
   844c4:	68fb      	ldr	r3, [r7, #12]
   844c6:	681b      	ldr	r3, [r3, #0]
   844c8:	7cb8      	ldrb	r0, [r7, #18]
   844ca:	9300      	str	r3, [sp, #0]
   844cc:	4613      	mov	r3, r2
   844ce:	4622      	mov	r2, r4
   844d0:	4c0d      	ldr	r4, [pc, #52]	; (84508 <udd_ep_alloc+0x3a8>)
   844d2:	47a0      	blx	r4
   844d4:	4603      	mov	r3, r0
   844d6:	72fb      	strb	r3, [r7, #11]
					ptr_job->call_trans);
			if (!b_restart) {
   844d8:	7afb      	ldrb	r3, [r7, #11]
   844da:	f083 0301 	eor.w	r3, r3, #1
   844de:	b2db      	uxtb	r3, r3
   844e0:	2b00      	cmp	r3, #0
   844e2:	d002      	beq.n	844ea <udd_ep_alloc+0x38a>
				dbg_print("ErrReRun%d ", i);
				return false;
   844e4:	2300      	movs	r3, #0
   844e6:	e008      	b.n	844fa <udd_ep_alloc+0x39a>
			continue;
   844e8:	bf00      	nop
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   844ea:	7cbb      	ldrb	r3, [r7, #18]
   844ec:	3301      	adds	r3, #1
   844ee:	74bb      	strb	r3, [r7, #18]
   844f0:	7cbb      	ldrb	r3, [r7, #18]
   844f2:	2b02      	cmp	r3, #2
   844f4:	f67f af50 	bls.w	84398 <udd_ep_alloc+0x238>
			}
		}
	}
	dbg_print("ep_alloc(%d:%08x) ", ep, UDPHS->UDPHS_EPT[ep].UDPHS_EPTCFG);
	return true;
   844f8:	2301      	movs	r3, #1
}
   844fa:	4618      	mov	r0, r3
   844fc:	371c      	adds	r7, #28
   844fe:	46bd      	mov	sp, r7
   84500:	bd90      	pop	{r4, r7, pc}
   84502:	bf00      	nop
   84504:	400a4000 	.word	0x400a4000
   84508:	00084839 	.word	0x00084839

0008450c <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
   8450c:	b580      	push	{r7, lr}
   8450e:	b084      	sub	sp, #16
   84510:	af00      	add	r7, sp, #0
   84512:	4603      	mov	r3, r0
   84514:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84516:	79fb      	ldrb	r3, [r7, #7]
   84518:	f003 030f 	and.w	r3, r3, #15
   8451c:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   8451e:	7bfb      	ldrb	r3, [r7, #15]
   84520:	2b02      	cmp	r3, #2
   84522:	d828      	bhi.n	84576 <udd_ep_free+0x6a>
		return;
	}
	udd_disable_endpoint(ep_index);
   84524:	4a16      	ldr	r2, [pc, #88]	; (84580 <udd_ep_free+0x74>)
   84526:	7bfb      	ldrb	r3, [r7, #15]
   84528:	015b      	lsls	r3, r3, #5
   8452a:	4413      	add	r3, r2
   8452c:	f503 7384 	add.w	r3, r3, #264	; 0x108
   84530:	2201      	movs	r2, #1
   84532:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint_bank(ep_index, 0);
   84534:	4a12      	ldr	r2, [pc, #72]	; (84580 <udd_ep_free+0x74>)
   84536:	7bfb      	ldrb	r3, [r7, #15]
   84538:	3308      	adds	r3, #8
   8453a:	015b      	lsls	r3, r3, #5
   8453c:	4413      	add	r3, r2
   8453e:	681a      	ldr	r2, [r3, #0]
   84540:	490f      	ldr	r1, [pc, #60]	; (84580 <udd_ep_free+0x74>)
   84542:	7bfb      	ldrb	r3, [r7, #15]
   84544:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   84548:	3308      	adds	r3, #8
   8454a:	015b      	lsls	r3, r3, #5
   8454c:	440b      	add	r3, r1
   8454e:	601a      	str	r2, [r3, #0]
	udd_ep_abort_job(ep);
   84550:	79fb      	ldrb	r3, [r7, #7]
   84552:	4618      	mov	r0, r3
   84554:	4b0b      	ldr	r3, [pc, #44]	; (84584 <udd_ep_free+0x78>)
   84556:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   84558:	7bfb      	ldrb	r3, [r7, #15]
   8455a:	1e5a      	subs	r2, r3, #1
   8455c:	490a      	ldr	r1, [pc, #40]	; (84588 <udd_ep_free+0x7c>)
   8455e:	4613      	mov	r3, r2
   84560:	005b      	lsls	r3, r3, #1
   84562:	4413      	add	r3, r2
   84564:	00db      	lsls	r3, r3, #3
   84566:	440b      	add	r3, r1
   84568:	f103 0210 	add.w	r2, r3, #16
   8456c:	7913      	ldrb	r3, [r2, #4]
   8456e:	f36f 0382 	bfc	r3, #2, #1
   84572:	7113      	strb	r3, [r2, #4]
   84574:	e000      	b.n	84578 <udd_ep_free+0x6c>
		return;
   84576:	bf00      	nop
}
   84578:	3710      	adds	r7, #16
   8457a:	46bd      	mov	sp, r7
   8457c:	bd80      	pop	{r7, pc}
   8457e:	bf00      	nop
   84580:	400a4000 	.word	0x400a4000
   84584:	00085345 	.word	0x00085345
   84588:	20000d24 	.word	0x20000d24

0008458c <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
   8458c:	b480      	push	{r7}
   8458e:	b085      	sub	sp, #20
   84590:	af00      	add	r7, sp, #0
   84592:	4603      	mov	r3, r0
   84594:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84596:	79fb      	ldrb	r3, [r7, #7]
   84598:	f003 030f 	and.w	r3, r3, #15
   8459c:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   8459e:	7bfb      	ldrb	r3, [r7, #15]
   845a0:	1e5a      	subs	r2, r3, #1
   845a2:	4613      	mov	r3, r2
   845a4:	005b      	lsls	r3, r3, #1
   845a6:	4413      	add	r3, r2
   845a8:	00db      	lsls	r3, r3, #3
   845aa:	4a10      	ldr	r2, [pc, #64]	; (845ec <udd_ep_is_halted+0x60>)
   845ac:	4413      	add	r3, r2
   845ae:	60bb      	str	r3, [r7, #8]
	return (Is_udd_endpoint_stall_requested(ep_index)
   845b0:	4a0f      	ldr	r2, [pc, #60]	; (845f0 <udd_ep_is_halted+0x64>)
   845b2:	7bfb      	ldrb	r3, [r7, #15]
   845b4:	015b      	lsls	r3, r3, #5
   845b6:	4413      	add	r3, r2
   845b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   845bc:	681b      	ldr	r3, [r3, #0]
   845be:	f003 0320 	and.w	r3, r3, #32
			|| ptr_job->stall_requested);
   845c2:	2b00      	cmp	r3, #0
   845c4:	d106      	bne.n	845d4 <udd_ep_is_halted+0x48>
   845c6:	68bb      	ldr	r3, [r7, #8]
   845c8:	7d1b      	ldrb	r3, [r3, #20]
   845ca:	f003 0304 	and.w	r3, r3, #4
   845ce:	b2db      	uxtb	r3, r3
   845d0:	2b00      	cmp	r3, #0
   845d2:	d001      	beq.n	845d8 <udd_ep_is_halted+0x4c>
   845d4:	2301      	movs	r3, #1
   845d6:	e000      	b.n	845da <udd_ep_is_halted+0x4e>
   845d8:	2300      	movs	r3, #0
   845da:	f003 0301 	and.w	r3, r3, #1
   845de:	b2db      	uxtb	r3, r3
}
   845e0:	4618      	mov	r0, r3
   845e2:	3714      	adds	r7, #20
   845e4:	46bd      	mov	sp, r7
   845e6:	bc80      	pop	{r7}
   845e8:	4770      	bx	lr
   845ea:	bf00      	nop
   845ec:	20000d24 	.word	0x20000d24
   845f0:	400a4000 	.word	0x400a4000

000845f4 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   845f4:	b480      	push	{r7}
   845f6:	b085      	sub	sp, #20
   845f8:	af00      	add	r7, sp, #0
   845fa:	4603      	mov	r3, r0
   845fc:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   845fe:	79fb      	ldrb	r3, [r7, #7]
   84600:	f003 030f 	and.w	r3, r3, #15
   84604:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   84606:	7bfb      	ldrb	r3, [r7, #15]
   84608:	2b02      	cmp	r3, #2
   8460a:	d901      	bls.n	84610 <udd_ep_set_halt+0x1c>
		return false;
   8460c:	2300      	movs	r3, #0
   8460e:	e071      	b.n	846f4 <udd_ep_set_halt+0x100>
	}

	ptr_job = &udd_ep_job[ep_index - 1];
   84610:	7bfb      	ldrb	r3, [r7, #15]
   84612:	1e5a      	subs	r2, r3, #1
   84614:	4613      	mov	r3, r2
   84616:	005b      	lsls	r3, r3, #1
   84618:	4413      	add	r3, r2
   8461a:	00db      	lsls	r3, r3, #3
   8461c:	4a38      	ldr	r2, [pc, #224]	; (84700 <udd_ep_set_halt+0x10c>)
   8461e:	4413      	add	r3, r2
   84620:	60bb      	str	r3, [r7, #8]

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   84622:	4a38      	ldr	r2, [pc, #224]	; (84704 <udd_ep_set_halt+0x110>)
   84624:	7bfb      	ldrb	r3, [r7, #15]
   84626:	015b      	lsls	r3, r3, #5
   84628:	4413      	add	r3, r2
   8462a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8462e:	681b      	ldr	r3, [r3, #0]
   84630:	f003 0320 	and.w	r3, r3, #32
   84634:	2b00      	cmp	r3, #0
   84636:	d106      	bne.n	84646 <udd_ep_set_halt+0x52>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   84638:	68bb      	ldr	r3, [r7, #8]
   8463a:	7d1b      	ldrb	r3, [r3, #20]
   8463c:	f003 0304 	and.w	r3, r3, #4
   84640:	b2db      	uxtb	r3, r3
   84642:	2b00      	cmp	r3, #0
   84644:	d001      	beq.n	8464a <udd_ep_set_halt+0x56>
		return true; // Already STALL
   84646:	2301      	movs	r3, #1
   84648:	e054      	b.n	846f4 <udd_ep_set_halt+0x100>
	}

	if (ptr_job->busy == true) {
   8464a:	68bb      	ldr	r3, [r7, #8]
   8464c:	7d1b      	ldrb	r3, [r3, #20]
   8464e:	f003 0301 	and.w	r3, r3, #1
   84652:	b2db      	uxtb	r3, r3
   84654:	2b00      	cmp	r3, #0
   84656:	d001      	beq.n	8465c <udd_ep_set_halt+0x68>
		return false; // Job on going, stall impossible
   84658:	2300      	movs	r3, #0
   8465a:	e04b      	b.n	846f4 <udd_ep_set_halt+0x100>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   8465c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   84660:	2b00      	cmp	r3, #0
   84662:	da25      	bge.n	846b0 <udd_ep_set_halt+0xbc>
   84664:	4a27      	ldr	r2, [pc, #156]	; (84704 <udd_ep_set_halt+0x110>)
   84666:	7bfb      	ldrb	r3, [r7, #15]
   84668:	015b      	lsls	r3, r3, #5
   8466a:	4413      	add	r3, r2
   8466c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   84670:	681b      	ldr	r3, [r3, #0]
   84672:	0c9b      	lsrs	r3, r3, #18
   84674:	f003 0303 	and.w	r3, r3, #3
   84678:	2b00      	cmp	r3, #0
   8467a:	d019      	beq.n	846b0 <udd_ep_set_halt+0xbc>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
   8467c:	68ba      	ldr	r2, [r7, #8]
   8467e:	7d13      	ldrb	r3, [r2, #20]
   84680:	f043 0304 	orr.w	r3, r3, #4
   84684:	7513      	strb	r3, [r2, #20]
			udd_enable_bank_interrupt(ep_index);
   84686:	4a1f      	ldr	r2, [pc, #124]	; (84704 <udd_ep_set_halt+0x110>)
   84688:	7bfb      	ldrb	r3, [r7, #15]
   8468a:	3308      	adds	r3, #8
   8468c:	015b      	lsls	r3, r3, #5
   8468e:	4413      	add	r3, r2
   84690:	3304      	adds	r3, #4
   84692:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   84696:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep_index);
   84698:	4b1a      	ldr	r3, [pc, #104]	; (84704 <udd_ep_set_halt+0x110>)
   8469a:	691a      	ldr	r2, [r3, #16]
   8469c:	7bfb      	ldrb	r3, [r7, #15]
   8469e:	f44f 7180 	mov.w	r1, #256	; 0x100
   846a2:	fa01 f303 	lsl.w	r3, r1, r3
   846a6:	4917      	ldr	r1, [pc, #92]	; (84704 <udd_ep_set_halt+0x110>)
   846a8:	4313      	orrs	r3, r2
   846aa:	610b      	str	r3, [r1, #16]
			dbg_print("<reqHalt%x> ", ep);
			return true;
   846ac:	2301      	movs	r3, #1
   846ae:	e021      	b.n	846f4 <udd_ep_set_halt+0x100>
	}

	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   846b0:	4a14      	ldr	r2, [pc, #80]	; (84704 <udd_ep_set_halt+0x110>)
   846b2:	7bfb      	ldrb	r3, [r7, #15]
   846b4:	015b      	lsls	r3, r3, #5
   846b6:	4413      	add	r3, r2
   846b8:	f503 7384 	add.w	r3, r3, #264	; 0x108
   846bc:	681a      	ldr	r2, [r3, #0]
   846be:	4911      	ldr	r1, [pc, #68]	; (84704 <udd_ep_set_halt+0x110>)
   846c0:	7bfb      	ldrb	r3, [r7, #15]
   846c2:	f022 0202 	bic.w	r2, r2, #2
   846c6:	015b      	lsls	r3, r3, #5
   846c8:	440b      	add	r3, r1
   846ca:	f503 7384 	add.w	r3, r3, #264	; 0x108
   846ce:	601a      	str	r2, [r3, #0]
	udd_ack_stall(ep_index);
   846d0:	4a0c      	ldr	r2, [pc, #48]	; (84704 <udd_ep_set_halt+0x110>)
   846d2:	7bfb      	ldrb	r3, [r7, #15]
   846d4:	015b      	lsls	r3, r3, #5
   846d6:	4413      	add	r3, r2
   846d8:	f503 738c 	add.w	r3, r3, #280	; 0x118
   846dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   846e0:	601a      	str	r2, [r3, #0]
	udd_enable_stall_handshake(ep_index);
   846e2:	4a08      	ldr	r2, [pc, #32]	; (84704 <udd_ep_set_halt+0x110>)
   846e4:	7bfb      	ldrb	r3, [r7, #15]
   846e6:	015b      	lsls	r3, r3, #5
   846e8:	4413      	add	r3, r2
   846ea:	f503 738a 	add.w	r3, r3, #276	; 0x114
   846ee:	2220      	movs	r2, #32
   846f0:	601a      	str	r2, [r3, #0]
	dbg_print("<Halt%x> ", ep);
	return true;
   846f2:	2301      	movs	r3, #1
}
   846f4:	4618      	mov	r0, r3
   846f6:	3714      	adds	r7, #20
   846f8:	46bd      	mov	sp, r7
   846fa:	bc80      	pop	{r7}
   846fc:	4770      	bx	lr
   846fe:	bf00      	nop
   84700:	20000d24 	.word	0x20000d24
   84704:	400a4000 	.word	0x400a4000

00084708 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   84708:	b580      	push	{r7, lr}
   8470a:	b084      	sub	sp, #16
   8470c:	af00      	add	r7, sp, #0
   8470e:	4603      	mov	r3, r0
   84710:	71fb      	strb	r3, [r7, #7]
	bool b_stall_cleared = false;
   84712:	2300      	movs	r3, #0
   84714:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   84716:	79fb      	ldrb	r3, [r7, #7]
   84718:	f003 030f 	and.w	r3, r3, #15
   8471c:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
   8471e:	79fb      	ldrb	r3, [r7, #7]
   84720:	2b02      	cmp	r3, #2
   84722:	d901      	bls.n	84728 <udd_ep_clear_halt+0x20>
		return false;
   84724:	2300      	movs	r3, #0
   84726:	e07e      	b.n	84826 <udd_ep_clear_halt+0x11e>
	ptr_job = &udd_ep_job[ep - 1];
   84728:	79fb      	ldrb	r3, [r7, #7]
   8472a:	1e5a      	subs	r2, r3, #1
   8472c:	4613      	mov	r3, r2
   8472e:	005b      	lsls	r3, r3, #1
   84730:	4413      	add	r3, r2
   84732:	00db      	lsls	r3, r3, #3
   84734:	4a3e      	ldr	r2, [pc, #248]	; (84830 <udd_ep_clear_halt+0x128>)
   84736:	4413      	add	r3, r2
   84738:	60bb      	str	r3, [r7, #8]

	if (ptr_job->stall_requested) {
   8473a:	68bb      	ldr	r3, [r7, #8]
   8473c:	7d1b      	ldrb	r3, [r3, #20]
   8473e:	f003 0304 	and.w	r3, r3, #4
   84742:	b2db      	uxtb	r3, r3
   84744:	2b00      	cmp	r3, #0
   84746:	d01a      	beq.n	8477e <udd_ep_clear_halt+0x76>
		// Endpoint stall has been requested but not done
		// Remove stall request
		dbg_print("<unWHalt%x> ", ep);
		ptr_job->stall_requested = false;
   84748:	68ba      	ldr	r2, [r7, #8]
   8474a:	7d13      	ldrb	r3, [r2, #20]
   8474c:	f36f 0382 	bfc	r3, #2, #1
   84750:	7513      	strb	r3, [r2, #20]
		udd_disable_bank_interrupt(ep);
   84752:	4a38      	ldr	r2, [pc, #224]	; (84834 <udd_ep_clear_halt+0x12c>)
   84754:	79fb      	ldrb	r3, [r7, #7]
   84756:	015b      	lsls	r3, r3, #5
   84758:	4413      	add	r3, r2
   8475a:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8475e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   84762:	601a      	str	r2, [r3, #0]
		udd_disable_endpoint_interrupt(ep);
   84764:	4b33      	ldr	r3, [pc, #204]	; (84834 <udd_ep_clear_halt+0x12c>)
   84766:	691a      	ldr	r2, [r3, #16]
   84768:	79fb      	ldrb	r3, [r7, #7]
   8476a:	f44f 7180 	mov.w	r1, #256	; 0x100
   8476e:	fa01 f303 	lsl.w	r3, r1, r3
   84772:	43db      	mvns	r3, r3
   84774:	492f      	ldr	r1, [pc, #188]	; (84834 <udd_ep_clear_halt+0x12c>)
   84776:	4013      	ands	r3, r2
   84778:	610b      	str	r3, [r1, #16]
		b_stall_cleared = true;
   8477a:	2301      	movs	r3, #1
   8477c:	73fb      	strb	r3, [r7, #15]
	}
	if (Is_udd_endpoint_stall_requested(ep)) {
   8477e:	4a2d      	ldr	r2, [pc, #180]	; (84834 <udd_ep_clear_halt+0x12c>)
   84780:	79fb      	ldrb	r3, [r7, #7]
   84782:	015b      	lsls	r3, r3, #5
   84784:	4413      	add	r3, r2
   84786:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8478a:	681b      	ldr	r3, [r3, #0]
   8478c:	f003 0320 	and.w	r3, r3, #32
   84790:	2b00      	cmp	r3, #0
   84792:	d035      	beq.n	84800 <udd_ep_clear_halt+0xf8>
		dbg_print("<unHalt%x> ", ep);
		if (Is_udd_stall(ep)) {
   84794:	4a27      	ldr	r2, [pc, #156]	; (84834 <udd_ep_clear_halt+0x12c>)
   84796:	79fb      	ldrb	r3, [r7, #7]
   84798:	015b      	lsls	r3, r3, #5
   8479a:	4413      	add	r3, r2
   8479c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   847a0:	681b      	ldr	r3, [r3, #0]
   847a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   847a6:	2b00      	cmp	r3, #0
   847a8:	d010      	beq.n	847cc <udd_ep_clear_halt+0xc4>
			udd_ack_stall(ep);
   847aa:	4a22      	ldr	r2, [pc, #136]	; (84834 <udd_ep_clear_halt+0x12c>)
   847ac:	79fb      	ldrb	r3, [r7, #7]
   847ae:	015b      	lsls	r3, r3, #5
   847b0:	4413      	add	r3, r2
   847b2:	f503 738c 	add.w	r3, r3, #280	; 0x118
   847b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   847ba:	601a      	str	r2, [r3, #0]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
   847bc:	4a1d      	ldr	r2, [pc, #116]	; (84834 <udd_ep_clear_halt+0x12c>)
   847be:	79fb      	ldrb	r3, [r7, #7]
   847c0:	015b      	lsls	r3, r3, #5
   847c2:	4413      	add	r3, r2
   847c4:	f503 738c 	add.w	r3, r3, #280	; 0x118
   847c8:	2240      	movs	r2, #64	; 0x40
   847ca:	601a      	str	r2, [r3, #0]
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
   847cc:	4a19      	ldr	r2, [pc, #100]	; (84834 <udd_ep_clear_halt+0x12c>)
   847ce:	79fb      	ldrb	r3, [r7, #7]
   847d0:	015b      	lsls	r3, r3, #5
   847d2:	4413      	add	r3, r2
   847d4:	f503 738c 	add.w	r3, r3, #280	; 0x118
   847d8:	2220      	movs	r2, #32
   847da:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_bank_autoswitch(ep);
   847dc:	4a15      	ldr	r2, [pc, #84]	; (84834 <udd_ep_clear_halt+0x12c>)
   847de:	79fb      	ldrb	r3, [r7, #7]
   847e0:	3308      	adds	r3, #8
   847e2:	015b      	lsls	r3, r3, #5
   847e4:	4413      	add	r3, r2
   847e6:	3304      	adds	r3, #4
   847e8:	681a      	ldr	r2, [r3, #0]
   847ea:	4912      	ldr	r1, [pc, #72]	; (84834 <udd_ep_clear_halt+0x12c>)
   847ec:	79fb      	ldrb	r3, [r7, #7]
   847ee:	f042 0202 	orr.w	r2, r2, #2
   847f2:	3308      	adds	r3, #8
   847f4:	015b      	lsls	r3, r3, #5
   847f6:	440b      	add	r3, r1
   847f8:	3304      	adds	r3, #4
   847fa:	601a      	str	r2, [r3, #0]
		b_stall_cleared = true;
   847fc:	2301      	movs	r3, #1
   847fe:	73fb      	strb	r3, [r7, #15]
	}
	if (b_stall_cleared) {
   84800:	7bfb      	ldrb	r3, [r7, #15]
   84802:	2b00      	cmp	r3, #0
   84804:	d00e      	beq.n	84824 <udd_ep_clear_halt+0x11c>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   84806:	68bb      	ldr	r3, [r7, #8]
   84808:	7d1b      	ldrb	r3, [r3, #20]
   8480a:	f003 0301 	and.w	r3, r3, #1
   8480e:	b2db      	uxtb	r3, r3
   84810:	2b00      	cmp	r3, #0
   84812:	d007      	beq.n	84824 <udd_ep_clear_halt+0x11c>
			ptr_job->busy = false;
   84814:	68ba      	ldr	r2, [r7, #8]
   84816:	7d13      	ldrb	r3, [r2, #20]
   84818:	f36f 0300 	bfc	r3, #0, #1
   8481c:	7513      	strb	r3, [r2, #20]
			ptr_job->call_nohalt();
   8481e:	68bb      	ldr	r3, [r7, #8]
   84820:	681b      	ldr	r3, [r3, #0]
   84822:	4798      	blx	r3
		}
	}
	return true;
   84824:	2301      	movs	r3, #1
}
   84826:	4618      	mov	r0, r3
   84828:	3710      	adds	r7, #16
   8482a:	46bd      	mov	sp, r7
   8482c:	bd80      	pop	{r7, pc}
   8482e:	bf00      	nop
   84830:	20000d24 	.word	0x20000d24
   84834:	400a4000 	.word	0x400a4000

00084838 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84838:	b580      	push	{r7, lr}
   8483a:	b086      	sub	sp, #24
   8483c:	af00      	add	r7, sp, #0
   8483e:	60ba      	str	r2, [r7, #8]
   84840:	607b      	str	r3, [r7, #4]
   84842:	4603      	mov	r3, r0
   84844:	73fb      	strb	r3, [r7, #15]
   84846:	460b      	mov	r3, r1
   84848:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   8484a:	7bfb      	ldrb	r3, [r7, #15]
   8484c:	f003 030f 	and.w	r3, r3, #15
   84850:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
   84852:	7bfb      	ldrb	r3, [r7, #15]
   84854:	2b02      	cmp	r3, #2
   84856:	d901      	bls.n	8485c <udd_ep_run+0x24>
		return false;
   84858:	2300      	movs	r3, #0
   8485a:	e063      	b.n	84924 <udd_ep_run+0xec>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   8485c:	7bfb      	ldrb	r3, [r7, #15]
   8485e:	1e5a      	subs	r2, r3, #1
   84860:	4613      	mov	r3, r2
   84862:	005b      	lsls	r3, r3, #1
   84864:	4413      	add	r3, r2
   84866:	00db      	lsls	r3, r3, #3
   84868:	4a30      	ldr	r2, [pc, #192]	; (8492c <udd_ep_run+0xf4>)
   8486a:	4413      	add	r3, r2
   8486c:	617b      	str	r3, [r7, #20]

	if ((!Is_udd_endpoint_enabled(ep))
   8486e:	4a30      	ldr	r2, [pc, #192]	; (84930 <udd_ep_run+0xf8>)
   84870:	7bfb      	ldrb	r3, [r7, #15]
   84872:	015b      	lsls	r3, r3, #5
   84874:	4413      	add	r3, r2
   84876:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   8487a:	681b      	ldr	r3, [r3, #0]
   8487c:	f003 0301 	and.w	r3, r3, #1
   84880:	2b00      	cmp	r3, #0
   84882:	d011      	beq.n	848a8 <udd_ep_run+0x70>
			|| Is_udd_endpoint_stall_requested(ep)
   84884:	4a2a      	ldr	r2, [pc, #168]	; (84930 <udd_ep_run+0xf8>)
   84886:	7bfb      	ldrb	r3, [r7, #15]
   84888:	015b      	lsls	r3, r3, #5
   8488a:	4413      	add	r3, r2
   8488c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   84890:	681b      	ldr	r3, [r3, #0]
   84892:	f003 0320 	and.w	r3, r3, #32
   84896:	2b00      	cmp	r3, #0
   84898:	d106      	bne.n	848a8 <udd_ep_run+0x70>
			|| ptr_job->stall_requested) {
   8489a:	697b      	ldr	r3, [r7, #20]
   8489c:	7d1b      	ldrb	r3, [r3, #20]
   8489e:	f003 0304 	and.w	r3, r3, #4
   848a2:	b2db      	uxtb	r3, r3
   848a4:	2b00      	cmp	r3, #0
   848a6:	d001      	beq.n	848ac <udd_ep_run+0x74>
		return false; // Endpoint is halted
   848a8:	2300      	movs	r3, #0
   848aa:	e03b      	b.n	84924 <udd_ep_run+0xec>
	}

	flags = cpu_irq_save();
   848ac:	4b21      	ldr	r3, [pc, #132]	; (84934 <udd_ep_run+0xfc>)
   848ae:	4798      	blx	r3
   848b0:	6138      	str	r0, [r7, #16]
	if (ptr_job->busy == true) {
   848b2:	697b      	ldr	r3, [r7, #20]
   848b4:	7d1b      	ldrb	r3, [r3, #20]
   848b6:	f003 0301 	and.w	r3, r3, #1
   848ba:	b2db      	uxtb	r3, r3
   848bc:	2b00      	cmp	r3, #0
   848be:	d004      	beq.n	848ca <udd_ep_run+0x92>
		cpu_irq_restore(flags);
   848c0:	6938      	ldr	r0, [r7, #16]
   848c2:	4b1d      	ldr	r3, [pc, #116]	; (84938 <udd_ep_run+0x100>)
   848c4:	4798      	blx	r3
		return false; // Job already on going
   848c6:	2300      	movs	r3, #0
   848c8:	e02c      	b.n	84924 <udd_ep_run+0xec>
	}
	ptr_job->busy = true;
   848ca:	697a      	ldr	r2, [r7, #20]
   848cc:	7d13      	ldrb	r3, [r2, #20]
   848ce:	f043 0301 	orr.w	r3, r3, #1
   848d2:	7513      	strb	r3, [r2, #20]
	cpu_irq_restore(flags);
   848d4:	6938      	ldr	r0, [r7, #16]
   848d6:	4b18      	ldr	r3, [pc, #96]	; (84938 <udd_ep_run+0x100>)
   848d8:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   848da:	697b      	ldr	r3, [r7, #20]
   848dc:	68ba      	ldr	r2, [r7, #8]
   848de:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
   848e0:	697b      	ldr	r3, [r7, #20]
   848e2:	687a      	ldr	r2, [r7, #4]
   848e4:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
   848e6:	697b      	ldr	r3, [r7, #20]
   848e8:	2200      	movs	r2, #0
   848ea:	60da      	str	r2, [r3, #12]
	ptr_job->buf_load = 0;
   848ec:	697b      	ldr	r3, [r7, #20]
   848ee:	2200      	movs	r2, #0
   848f0:	611a      	str	r2, [r3, #16]
	ptr_job->call_trans = callback;
   848f2:	697b      	ldr	r3, [r7, #20]
   848f4:	6a3a      	ldr	r2, [r7, #32]
   848f6:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   848f8:	7bbb      	ldrb	r3, [r7, #14]
   848fa:	2b00      	cmp	r3, #0
   848fc:	d102      	bne.n	84904 <udd_ep_run+0xcc>
   848fe:	687b      	ldr	r3, [r7, #4]
   84900:	2b00      	cmp	r3, #0
   84902:	d101      	bne.n	84908 <udd_ep_run+0xd0>
   84904:	2301      	movs	r3, #1
   84906:	e000      	b.n	8490a <udd_ep_run+0xd2>
   84908:	2300      	movs	r3, #0
   8490a:	f003 0301 	and.w	r3, r3, #1
   8490e:	b2d9      	uxtb	r1, r3
   84910:	697a      	ldr	r2, [r7, #20]
   84912:	7d13      	ldrb	r3, [r2, #20]
   84914:	f361 0341 	bfi	r3, r1, #1, #1
   84918:	7513      	strb	r3, [r2, #20]

	// Request first DMA transfer
	//dbg_print("runDMA%d\n\r", ep);
	udd_ep_trans_done(ep);
   8491a:	7bfb      	ldrb	r3, [r7, #15]
   8491c:	4618      	mov	r0, r3
   8491e:	4b07      	ldr	r3, [pc, #28]	; (8493c <udd_ep_run+0x104>)
   84920:	4798      	blx	r3
	return true;
   84922:	2301      	movs	r3, #1
}
   84924:	4618      	mov	r0, r3
   84926:	3718      	adds	r7, #24
   84928:	46bd      	mov	sp, r7
   8492a:	bd80      	pop	{r7, pc}
   8492c:	20000d24 	.word	0x20000d24
   84930:	400a4000 	.word	0x400a4000
   84934:	00083c09 	.word	0x00083c09
   84938:	00083c61 	.word	0x00083c61
   8493c:	000853f1 	.word	0x000853f1

00084940 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
   84940:	b580      	push	{r7, lr}
   84942:	b084      	sub	sp, #16
   84944:	af00      	add	r7, sp, #0
   84946:	4603      	mov	r3, r0
   84948:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8494a:	79fb      	ldrb	r3, [r7, #7]
   8494c:	f003 030f 	and.w	r3, r3, #15
   84950:	73fb      	strb	r3, [r7, #15]
	// Stop DMA transfer
	udd_endpoint_dma_set_control(ep_index, 0);
   84952:	7bfb      	ldrb	r3, [r7, #15]
   84954:	011a      	lsls	r2, r3, #4
   84956:	4b19      	ldr	r3, [pc, #100]	; (849bc <udd_ep_abort+0x7c>)
   84958:	4413      	add	r3, r2
   8495a:	2200      	movs	r2, #0
   8495c:	609a      	str	r2, [r3, #8]
	// Kill banks for IN
	if (ep & USB_EP_DIR_IN) {
   8495e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   84962:	2b00      	cmp	r3, #0
   84964:	da21      	bge.n	849aa <udd_ep_abort+0x6a>
		for(;udd_nb_busy_bank(ep_index);) {
   84966:	e014      	b.n	84992 <udd_ep_abort+0x52>
			udd_kill_last_in_bank(ep_index);
   84968:	4a15      	ldr	r2, [pc, #84]	; (849c0 <udd_ep_abort+0x80>)
   8496a:	7bfb      	ldrb	r3, [r7, #15]
   8496c:	015b      	lsls	r3, r3, #5
   8496e:	4413      	add	r3, r2
   84970:	f503 738a 	add.w	r3, r3, #276	; 0x114
   84974:	f44f 7200 	mov.w	r2, #512	; 0x200
   84978:	601a      	str	r2, [r3, #0]
			while(Is_udd_kill_last(ep_index));
   8497a:	bf00      	nop
   8497c:	4a10      	ldr	r2, [pc, #64]	; (849c0 <udd_ep_abort+0x80>)
   8497e:	7bfb      	ldrb	r3, [r7, #15]
   84980:	015b      	lsls	r3, r3, #5
   84982:	4413      	add	r3, r2
   84984:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   84988:	681b      	ldr	r3, [r3, #0]
   8498a:	f403 7300 	and.w	r3, r3, #512	; 0x200
   8498e:	2b00      	cmp	r3, #0
   84990:	d1f4      	bne.n	8497c <udd_ep_abort+0x3c>
		for(;udd_nb_busy_bank(ep_index);) {
   84992:	4a0b      	ldr	r2, [pc, #44]	; (849c0 <udd_ep_abort+0x80>)
   84994:	7bfb      	ldrb	r3, [r7, #15]
   84996:	015b      	lsls	r3, r3, #5
   84998:	4413      	add	r3, r2
   8499a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8499e:	681b      	ldr	r3, [r3, #0]
   849a0:	0c9b      	lsrs	r3, r3, #18
   849a2:	f003 0303 	and.w	r3, r3, #3
   849a6:	2b00      	cmp	r3, #0
   849a8:	d1de      	bne.n	84968 <udd_ep_abort+0x28>
		}
	}
	udd_ep_abort_job(ep);
   849aa:	79fb      	ldrb	r3, [r7, #7]
   849ac:	4618      	mov	r0, r3
   849ae:	4b05      	ldr	r3, [pc, #20]	; (849c4 <udd_ep_abort+0x84>)
   849b0:	4798      	blx	r3
}
   849b2:	bf00      	nop
   849b4:	3710      	adds	r7, #16
   849b6:	46bd      	mov	sp, r7
   849b8:	bd80      	pop	{r7, pc}
   849ba:	bf00      	nop
   849bc:	400a4300 	.word	0x400a4300
   849c0:	400a4000 	.word	0x400a4000
   849c4:	00085345 	.word	0x00085345

000849c8 <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
   849c8:	b480      	push	{r7}
   849ca:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   849cc:	4b0a      	ldr	r3, [pc, #40]	; (849f8 <udd_test_mode_j+0x30>)
   849ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   849d2:	f023 0303 	bic.w	r3, r3, #3
   849d6:	4a08      	ldr	r2, [pc, #32]	; (849f8 <udd_test_mode_j+0x30>)
   849d8:	f043 0302 	orr.w	r3, r3, #2
   849dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   849e0:	4b05      	ldr	r3, [pc, #20]	; (849f8 <udd_test_mode_j+0x30>)
   849e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   849e6:	4a04      	ldr	r2, [pc, #16]	; (849f8 <udd_test_mode_j+0x30>)
   849e8:	f043 0304 	orr.w	r3, r3, #4
   849ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   849f0:	bf00      	nop
   849f2:	46bd      	mov	sp, r7
   849f4:	bc80      	pop	{r7}
   849f6:	4770      	bx	lr
   849f8:	400a4000 	.word	0x400a4000

000849fc <udd_test_mode_k>:


void udd_test_mode_k(void)
{
   849fc:	b480      	push	{r7}
   849fe:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   84a00:	4b0a      	ldr	r3, [pc, #40]	; (84a2c <udd_test_mode_k+0x30>)
   84a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   84a06:	f023 0303 	bic.w	r3, r3, #3
   84a0a:	4a08      	ldr	r2, [pc, #32]	; (84a2c <udd_test_mode_k+0x30>)
   84a0c:	f043 0302 	orr.w	r3, r3, #2
   84a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   84a14:	4b05      	ldr	r3, [pc, #20]	; (84a2c <udd_test_mode_k+0x30>)
   84a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   84a1a:	4a04      	ldr	r2, [pc, #16]	; (84a2c <udd_test_mode_k+0x30>)
   84a1c:	f043 0308 	orr.w	r3, r3, #8
   84a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   84a24:	bf00      	nop
   84a26:	46bd      	mov	sp, r7
   84a28:	bc80      	pop	{r7}
   84a2a:	4770      	bx	lr
   84a2c:	400a4000 	.word	0x400a4000

00084a30 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
   84a30:	b480      	push	{r7}
   84a32:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   84a34:	4b06      	ldr	r3, [pc, #24]	; (84a50 <udd_test_mode_se0_nak+0x20>)
   84a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   84a3a:	f023 0303 	bic.w	r3, r3, #3
   84a3e:	4a04      	ldr	r2, [pc, #16]	; (84a50 <udd_test_mode_se0_nak+0x20>)
   84a40:	f043 0302 	orr.w	r3, r3, #2
   84a44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   84a48:	bf00      	nop
   84a4a:	46bd      	mov	sp, r7
   84a4c:	bc80      	pop	{r7}
   84a4e:	4770      	bx	lr
   84a50:	400a4000 	.word	0x400a4000

00084a54 <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
   84a54:	b4b0      	push	{r4, r5, r7}
   84a56:	b093      	sub	sp, #76	; 0x4c
   84a58:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   84a5a:	4b2e      	ldr	r3, [pc, #184]	; (84b14 <udd_test_mode_packet+0xc0>)
   84a5c:	1d3c      	adds	r4, r7, #4
   84a5e:	461d      	mov	r5, r3
   84a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   84a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   84a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   84a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   84a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   84a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   84a6c:	e895 0003 	ldmia.w	r5, {r0, r1}
   84a70:	6020      	str	r0, [r4, #0]
   84a72:	3404      	adds	r4, #4
   84a74:	7021      	strb	r1, [r4, #0]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   84a76:	4b28      	ldr	r3, [pc, #160]	; (84b18 <udd_test_mode_packet+0xc4>)
   84a78:	2201      	movs	r2, #1
   84a7a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   84a7e:	4b26      	ldr	r3, [pc, #152]	; (84b18 <udd_test_mode_packet+0xc4>)
   84a80:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   84a84:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   84a88:	f023 0303 	bic.w	r3, r3, #3
   84a8c:	4a22      	ldr	r2, [pc, #136]	; (84b18 <udd_test_mode_packet+0xc4>)
   84a8e:	f043 036b 	orr.w	r3, r3, #107	; 0x6b
   84a92:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_EP_TYPE_BULK, // Type: bulk
			1, // dir: IN
			64, //Size
			1, // Bank Number
			0); // NB Trans (not used for bulk ept)
	udd_enable_endpoint(0);
   84a96:	4b20      	ldr	r3, [pc, #128]	; (84b18 <udd_test_mode_packet+0xc4>)
   84a98:	2201      	movs	r2, #1
   84a9a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	udd_enable_hs_test_mode();
   84a9e:	4b1e      	ldr	r3, [pc, #120]	; (84b18 <udd_test_mode_packet+0xc4>)
   84aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   84aa4:	f023 0303 	bic.w	r3, r3, #3
   84aa8:	4a1b      	ldr	r2, [pc, #108]	; (84b18 <udd_test_mode_packet+0xc4>)
   84aaa:	f043 0302 	orr.w	r3, r3, #2
   84aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   84ab2:	4b19      	ldr	r3, [pc, #100]	; (84b18 <udd_test_mode_packet+0xc4>)
   84ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   84ab8:	4a17      	ldr	r2, [pc, #92]	; (84b18 <udd_test_mode_packet+0xc4>)
   84aba:	f043 0310 	orr.w	r3, r3, #16
   84abe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   84ac2:	4b16      	ldr	r3, [pc, #88]	; (84b1c <udd_test_mode_packet+0xc8>)
   84ac4:	643b      	str	r3, [r7, #64]	; 0x40
	ptr_src = test_packet;
   84ac6:	1d3b      	adds	r3, r7, #4
   84ac8:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (i = 0; i < sizeof(test_packet); i++) {
   84aca:	2300      	movs	r3, #0
   84acc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   84ad0:	e00c      	b.n	84aec <udd_test_mode_packet+0x98>
		*ptr_dest++ = *ptr_src++;
   84ad2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   84ad4:	1c53      	adds	r3, r2, #1
   84ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
   84ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   84ada:	1c59      	adds	r1, r3, #1
   84adc:	6439      	str	r1, [r7, #64]	; 0x40
   84ade:	7812      	ldrb	r2, [r2, #0]
   84ae0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   84ae2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   84ae6:	3301      	adds	r3, #1
   84ae8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   84aec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   84af0:	2b34      	cmp	r3, #52	; 0x34
   84af2:	d9ee      	bls.n	84ad2 <udd_test_mode_packet+0x7e>
	}
	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   84af4:	4b08      	ldr	r3, [pc, #32]	; (84b18 <udd_test_mode_packet+0xc4>)
   84af6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84afa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   84afe:	4b06      	ldr	r3, [pc, #24]	; (84b18 <udd_test_mode_packet+0xc4>)
   84b00:	f44f 6200 	mov.w	r2, #2048	; 0x800
   84b04:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   84b08:	bf00      	nop
   84b0a:	374c      	adds	r7, #76	; 0x4c
   84b0c:	46bd      	mov	sp, r7
   84b0e:	bcb0      	pop	{r4, r5, r7}
   84b10:	4770      	bx	lr
   84b12:	bf00      	nop
   84b14:	00085bc4 	.word	0x00085bc4
   84b18:	400a4000 	.word	0x400a4000
   84b1c:	20180000 	.word	0x20180000

00084b20 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
   84b20:	b580      	push	{r7, lr}
   84b22:	b082      	sub	sp, #8
   84b24:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   84b26:	4b1b      	ldr	r3, [pc, #108]	; (84b94 <udd_reset_ep_ctrl+0x74>)
   84b28:	681b      	ldr	r3, [r3, #0]
   84b2a:	4a1a      	ldr	r2, [pc, #104]	; (84b94 <udd_reset_ep_ctrl+0x74>)
   84b2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   84b30:	6013      	str	r3, [r2, #0]
	udd_enable_address();
   84b32:	4b18      	ldr	r3, [pc, #96]	; (84b94 <udd_reset_ep_ctrl+0x74>)
   84b34:	681b      	ldr	r3, [r3, #0]
   84b36:	4a17      	ldr	r2, [pc, #92]	; (84b94 <udd_reset_ep_ctrl+0x74>)
   84b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84b3c:	6013      	str	r3, [r2, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   84b3e:	4b15      	ldr	r3, [pc, #84]	; (84b94 <udd_reset_ep_ctrl+0x74>)
   84b40:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   84b44:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   84b48:	f023 0303 	bic.w	r3, r3, #3
   84b4c:	4a11      	ldr	r2, [pc, #68]	; (84b94 <udd_reset_ep_ctrl+0x74>)
   84b4e:	f043 0343 	orr.w	r3, r3, #67	; 0x43
   84b52:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_DEVICE_EP_CTRL_SIZE,
			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
			0);

	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
	udd_enable_endpoint(0);
   84b56:	4b0f      	ldr	r3, [pc, #60]	; (84b94 <udd_reset_ep_ctrl+0x74>)
   84b58:	2201      	movs	r2, #1
   84b5a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	flags = cpu_irq_save();
   84b5e:	4b0e      	ldr	r3, [pc, #56]	; (84b98 <udd_reset_ep_ctrl+0x78>)
   84b60:	4798      	blx	r3
   84b62:	6078      	str	r0, [r7, #4]
	udd_enable_setup_received_interrupt(0);
   84b64:	4b0b      	ldr	r3, [pc, #44]	; (84b94 <udd_reset_ep_ctrl+0x74>)
   84b66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84b6a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   84b6e:	4b09      	ldr	r3, [pc, #36]	; (84b94 <udd_reset_ep_ctrl+0x74>)
   84b70:	f44f 7200 	mov.w	r2, #512	; 0x200
   84b74:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   84b78:	4b06      	ldr	r3, [pc, #24]	; (84b94 <udd_reset_ep_ctrl+0x74>)
   84b7a:	691b      	ldr	r3, [r3, #16]
   84b7c:	4a05      	ldr	r2, [pc, #20]	; (84b94 <udd_reset_ep_ctrl+0x74>)
   84b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   84b82:	6113      	str	r3, [r2, #16]
	cpu_irq_restore(flags);
   84b84:	6878      	ldr	r0, [r7, #4]
   84b86:	4b05      	ldr	r3, [pc, #20]	; (84b9c <udd_reset_ep_ctrl+0x7c>)
   84b88:	4798      	blx	r3
}
   84b8a:	bf00      	nop
   84b8c:	3708      	adds	r7, #8
   84b8e:	46bd      	mov	sp, r7
   84b90:	bd80      	pop	{r7, pc}
   84b92:	bf00      	nop
   84b94:	400a4000 	.word	0x400a4000
   84b98:	00083c09 	.word	0x00083c09
   84b9c:	00083c61 	.word	0x00083c61

00084ba0 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
   84ba0:	b580      	push	{r7, lr}
   84ba2:	b082      	sub	sp, #8
   84ba4:	af00      	add	r7, sp, #0
	irqflags_t flags;

	dbg_print("ctlInit ");

	flags = cpu_irq_save();
   84ba6:	4b10      	ldr	r3, [pc, #64]	; (84be8 <udd_ctrl_init+0x48>)
   84ba8:	4798      	blx	r3
   84baa:	6078      	str	r0, [r7, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   84bac:	4b0f      	ldr	r3, [pc, #60]	; (84bec <udd_ctrl_init+0x4c>)
   84bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84bb2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   84bb6:	6878      	ldr	r0, [r7, #4]
   84bb8:	4b0d      	ldr	r3, [pc, #52]	; (84bf0 <udd_ctrl_init+0x50>)
   84bba:	4798      	blx	r3

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   84bbc:	4b0b      	ldr	r3, [pc, #44]	; (84bec <udd_ctrl_init+0x4c>)
   84bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
   84bc2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   84bc6:	4b0b      	ldr	r3, [pc, #44]	; (84bf4 <udd_ctrl_init+0x54>)
   84bc8:	2200      	movs	r2, #0
   84bca:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   84bcc:	4b09      	ldr	r3, [pc, #36]	; (84bf4 <udd_ctrl_init+0x54>)
   84bce:	2200      	movs	r2, #0
   84bd0:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
   84bd2:	4b08      	ldr	r3, [pc, #32]	; (84bf4 <udd_ctrl_init+0x54>)
   84bd4:	2200      	movs	r2, #0
   84bd6:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   84bd8:	4b07      	ldr	r3, [pc, #28]	; (84bf8 <udd_ctrl_init+0x58>)
   84bda:	2200      	movs	r2, #0
   84bdc:	701a      	strb	r2, [r3, #0]
}
   84bde:	bf00      	nop
   84be0:	3708      	adds	r7, #8
   84be2:	46bd      	mov	sp, r7
   84be4:	bd80      	pop	{r7, pc}
   84be6:	bf00      	nop
   84be8:	00083c09 	.word	0x00083c09
   84bec:	400a4000 	.word	0x400a4000
   84bf0:	00083c61 	.word	0x00083c61
   84bf4:	20000d64 	.word	0x20000d64
   84bf8:	20000d1d 	.word	0x20000d1d

00084bfc <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
   84bfc:	b580      	push	{r7, lr}
   84bfe:	b084      	sub	sp, #16
   84c00:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   84c02:	4b40      	ldr	r3, [pc, #256]	; (84d04 <udd_ctrl_setup_received+0x108>)
   84c04:	781b      	ldrb	r3, [r3, #0]
   84c06:	2b00      	cmp	r3, #0
   84c08:	d003      	beq.n	84c12 <udd_ctrl_setup_received+0x16>
		dbg_print("sErr ");
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
   84c0a:	4b3f      	ldr	r3, [pc, #252]	; (84d08 <udd_ctrl_setup_received+0x10c>)
   84c0c:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   84c0e:	4b3f      	ldr	r3, [pc, #252]	; (84d0c <udd_ctrl_setup_received+0x110>)
   84c10:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   84c12:	4b3f      	ldr	r3, [pc, #252]	; (84d10 <udd_ctrl_setup_received+0x114>)
   84c14:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84c18:	0d1b      	lsrs	r3, r3, #20
   84c1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
   84c1e:	2b08      	cmp	r3, #8
   84c20:	d007      	beq.n	84c32 <udd_ctrl_setup_received+0x36>
		dbg_print("cntErr ");
		udd_ctrl_stall_data();
   84c22:	4b3c      	ldr	r3, [pc, #240]	; (84d14 <udd_ctrl_setup_received+0x118>)
   84c24:	4798      	blx	r3
		udd_ack_setup_received(0);
   84c26:	4b3a      	ldr	r3, [pc, #232]	; (84d10 <udd_ctrl_setup_received+0x114>)
   84c28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84c2c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   84c30:	e064      	b.n	84cfc <udd_ctrl_setup_received+0x100>
	}

	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   84c32:	4b39      	ldr	r3, [pc, #228]	; (84d18 <udd_ctrl_setup_received+0x11c>)
   84c34:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
   84c36:	2300      	movs	r3, #0
   84c38:	73fb      	strb	r3, [r7, #15]
   84c3a:	e00a      	b.n	84c52 <udd_ctrl_setup_received+0x56>
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   84c3c:	68bb      	ldr	r3, [r7, #8]
   84c3e:	1c5a      	adds	r2, r3, #1
   84c40:	60ba      	str	r2, [r7, #8]
   84c42:	7bfa      	ldrb	r2, [r7, #15]
   84c44:	4935      	ldr	r1, [pc, #212]	; (84d1c <udd_ctrl_setup_received+0x120>)
   84c46:	440a      	add	r2, r1
   84c48:	781b      	ldrb	r3, [r3, #0]
   84c4a:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < 8; i++) {
   84c4c:	7bfb      	ldrb	r3, [r7, #15]
   84c4e:	3301      	adds	r3, #1
   84c50:	73fb      	strb	r3, [r7, #15]
   84c52:	7bfb      	ldrb	r3, [r7, #15]
   84c54:	2b07      	cmp	r3, #7
   84c56:	d9f1      	bls.n	84c3c <udd_ctrl_setup_received+0x40>
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
   84c58:	4b30      	ldr	r3, [pc, #192]	; (84d1c <udd_ctrl_setup_received+0x120>)
   84c5a:	885a      	ldrh	r2, [r3, #2]
   84c5c:	4b2f      	ldr	r3, [pc, #188]	; (84d1c <udd_ctrl_setup_received+0x120>)
   84c5e:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
   84c60:	4b2e      	ldr	r3, [pc, #184]	; (84d1c <udd_ctrl_setup_received+0x120>)
   84c62:	889a      	ldrh	r2, [r3, #4]
   84c64:	4b2d      	ldr	r3, [pc, #180]	; (84d1c <udd_ctrl_setup_received+0x120>)
   84c66:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
   84c68:	4b2c      	ldr	r3, [pc, #176]	; (84d1c <udd_ctrl_setup_received+0x120>)
   84c6a:	88da      	ldrh	r2, [r3, #6]
   84c6c:	4b2b      	ldr	r3, [pc, #172]	; (84d1c <udd_ctrl_setup_received+0x120>)
   84c6e:	80da      	strh	r2, [r3, #6]
			udd_g_ctrlreq.req.bRequest, udd_g_ctrlreq.req.bmRequestType,
			udd_g_ctrlreq.req.wValue, udd_g_ctrlreq.req.wIndex,
			udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   84c70:	4b2b      	ldr	r3, [pc, #172]	; (84d20 <udd_ctrl_setup_received+0x124>)
   84c72:	4798      	blx	r3
   84c74:	4603      	mov	r3, r0
   84c76:	f083 0301 	eor.w	r3, r3, #1
   84c7a:	b2db      	uxtb	r3, r3
   84c7c:	2b00      	cmp	r3, #0
   84c7e:	d007      	beq.n	84c90 <udd_ctrl_setup_received+0x94>
		// Setup request unknown then stall it
		dbg_print("ProcErr ");
		udd_ctrl_stall_data();
   84c80:	4b24      	ldr	r3, [pc, #144]	; (84d14 <udd_ctrl_setup_received+0x118>)
   84c82:	4798      	blx	r3
		udd_ack_setup_received(0);
   84c84:	4b22      	ldr	r3, [pc, #136]	; (84d10 <udd_ctrl_setup_received+0x114>)
   84c86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84c8a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   84c8e:	e035      	b.n	84cfc <udd_ctrl_setup_received+0x100>
	}
	udd_ack_setup_received(0);
   84c90:	4b1f      	ldr	r3, [pc, #124]	; (84d10 <udd_ctrl_setup_received+0x114>)
   84c92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84c96:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	if (Udd_setup_is_in()) {
   84c9a:	4b20      	ldr	r3, [pc, #128]	; (84d1c <udd_ctrl_setup_received+0x120>)
   84c9c:	781b      	ldrb	r3, [r3, #0]
   84c9e:	b25b      	sxtb	r3, r3
   84ca0:	2b00      	cmp	r3, #0
   84ca2:	da0b      	bge.n	84cbc <udd_ctrl_setup_received+0xc0>
		dbg_print("_I ");
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   84ca4:	4b1f      	ldr	r3, [pc, #124]	; (84d24 <udd_ctrl_setup_received+0x128>)
   84ca6:	2200      	movs	r2, #0
   84ca8:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   84caa:	4b1f      	ldr	r3, [pc, #124]	; (84d28 <udd_ctrl_setup_received+0x12c>)
   84cac:	2200      	movs	r2, #0
   84cae:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   84cb0:	4b14      	ldr	r3, [pc, #80]	; (84d04 <udd_ctrl_setup_received+0x108>)
   84cb2:	2202      	movs	r2, #2
   84cb4:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   84cb6:	4b1d      	ldr	r3, [pc, #116]	; (84d2c <udd_ctrl_setup_received+0x130>)
   84cb8:	4798      	blx	r3
   84cba:	e01f      	b.n	84cfc <udd_ctrl_setup_received+0x100>
	} else {
		dbg_print("_O ");
		if (0 == udd_g_ctrlreq.req.wLength) {
   84cbc:	4b17      	ldr	r3, [pc, #92]	; (84d1c <udd_ctrl_setup_received+0x120>)
   84cbe:	88db      	ldrh	r3, [r3, #6]
   84cc0:	2b00      	cmp	r3, #0
   84cc2:	d102      	bne.n	84cca <udd_ctrl_setup_received+0xce>
			// No data phase requested
			dbg_print("Zl ");
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   84cc4:	4b1a      	ldr	r3, [pc, #104]	; (84d30 <udd_ctrl_setup_received+0x134>)
   84cc6:	4798      	blx	r3
			return;
   84cc8:	e018      	b.n	84cfc <udd_ctrl_setup_received+0x100>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   84cca:	4b16      	ldr	r3, [pc, #88]	; (84d24 <udd_ctrl_setup_received+0x128>)
   84ccc:	2200      	movs	r2, #0
   84cce:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   84cd0:	4b15      	ldr	r3, [pc, #84]	; (84d28 <udd_ctrl_setup_received+0x12c>)
   84cd2:	2200      	movs	r2, #0
   84cd4:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   84cd6:	4b0b      	ldr	r3, [pc, #44]	; (84d04 <udd_ctrl_setup_received+0x108>)
   84cd8:	2201      	movs	r2, #1
   84cda:	701a      	strb	r2, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   84cdc:	4b0c      	ldr	r3, [pc, #48]	; (84d10 <udd_ctrl_setup_received+0x114>)
   84cde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   84ce2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		flags = cpu_irq_save();
   84ce6:	4b13      	ldr	r3, [pc, #76]	; (84d34 <udd_ctrl_setup_received+0x138>)
   84ce8:	4798      	blx	r3
   84cea:	6078      	str	r0, [r7, #4]
		udd_enable_nak_in_interrupt(0);
   84cec:	4b08      	ldr	r3, [pc, #32]	; (84d10 <udd_ctrl_setup_received+0x114>)
   84cee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   84cf2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		cpu_irq_restore(flags);
   84cf6:	6878      	ldr	r0, [r7, #4]
   84cf8:	4b0f      	ldr	r3, [pc, #60]	; (84d38 <udd_ctrl_setup_received+0x13c>)
   84cfa:	4798      	blx	r3
	}
}
   84cfc:	3710      	adds	r7, #16
   84cfe:	46bd      	mov	sp, r7
   84d00:	bd80      	pop	{r7, pc}
   84d02:	bf00      	nop
   84d04:	20000d1d 	.word	0x20000d1d
   84d08:	000851a5 	.word	0x000851a5
   84d0c:	00084ba1 	.word	0x00084ba1
   84d10:	400a4000 	.word	0x400a4000
   84d14:	000850d9 	.word	0x000850d9
   84d18:	20180000 	.word	0x20180000
   84d1c:	20000d64 	.word	0x20000d64
   84d20:	000839d9 	.word	0x000839d9
   84d24:	20000d1e 	.word	0x20000d1e
   84d28:	20000d20 	.word	0x20000d20
   84d2c:	00084d3d 	.word	0x00084d3d
   84d30:	000850fd 	.word	0x000850fd
   84d34:	00083c09 	.word	0x00083c09
   84d38:	00083c61 	.word	0x00083c61

00084d3c <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
   84d3c:	b580      	push	{r7, lr}
   84d3e:	b084      	sub	sp, #16
   84d40:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
   84d42:	4b4c      	ldr	r3, [pc, #304]	; (84e74 <udd_ctrl_in_sent+0x138>)
   84d44:	4798      	blx	r3
   84d46:	6038      	str	r0, [r7, #0]
	udd_disable_in_send_interrupt(0);
   84d48:	4b4b      	ldr	r3, [pc, #300]	; (84e78 <udd_ctrl_in_sent+0x13c>)
   84d4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84d4e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   84d52:	6838      	ldr	r0, [r7, #0]
   84d54:	4b49      	ldr	r3, [pc, #292]	; (84e7c <udd_ctrl_in_sent+0x140>)
   84d56:	4798      	blx	r3

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   84d58:	4b49      	ldr	r3, [pc, #292]	; (84e80 <udd_ctrl_in_sent+0x144>)
   84d5a:	781b      	ldrb	r3, [r3, #0]
   84d5c:	2b03      	cmp	r3, #3
   84d5e:	d104      	bne.n	84d6a <udd_ctrl_in_sent+0x2e>
		dbg_print("ZlpE\n\r");
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   84d60:	4b48      	ldr	r3, [pc, #288]	; (84e84 <udd_ctrl_in_sent+0x148>)
   84d62:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   84d64:	4b48      	ldr	r3, [pc, #288]	; (84e88 <udd_ctrl_in_sent+0x14c>)
   84d66:	4798      	blx	r3
		return;
   84d68:	e081      	b.n	84e6e <udd_ctrl_in_sent+0x132>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   84d6a:	4b48      	ldr	r3, [pc, #288]	; (84e8c <udd_ctrl_in_sent+0x150>)
   84d6c:	899a      	ldrh	r2, [r3, #12]
   84d6e:	4b48      	ldr	r3, [pc, #288]	; (84e90 <udd_ctrl_in_sent+0x154>)
   84d70:	881b      	ldrh	r3, [r3, #0]
   84d72:	1ad3      	subs	r3, r2, r3
   84d74:	81fb      	strh	r3, [r7, #14]
	if (0 == nb_remain) {
   84d76:	89fb      	ldrh	r3, [r7, #14]
   84d78:	2b00      	cmp	r3, #0
   84d7a:	d127      	bne.n	84dcc <udd_ctrl_in_sent+0x90>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   84d7c:	4b45      	ldr	r3, [pc, #276]	; (84e94 <udd_ctrl_in_sent+0x158>)
   84d7e:	881a      	ldrh	r2, [r3, #0]
   84d80:	4b43      	ldr	r3, [pc, #268]	; (84e90 <udd_ctrl_in_sent+0x154>)
   84d82:	881b      	ldrh	r3, [r3, #0]
   84d84:	4413      	add	r3, r2
   84d86:	b29a      	uxth	r2, r3
   84d88:	4b42      	ldr	r3, [pc, #264]	; (84e94 <udd_ctrl_in_sent+0x158>)
   84d8a:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   84d8c:	4b3f      	ldr	r3, [pc, #252]	; (84e8c <udd_ctrl_in_sent+0x150>)
   84d8e:	88da      	ldrh	r2, [r3, #6]
   84d90:	4b40      	ldr	r3, [pc, #256]	; (84e94 <udd_ctrl_in_sent+0x158>)
   84d92:	881b      	ldrh	r3, [r3, #0]
   84d94:	429a      	cmp	r2, r3
   84d96:	d003      	beq.n	84da0 <udd_ctrl_in_sent+0x64>
				|| b_shortpacket) {
   84d98:	4b3f      	ldr	r3, [pc, #252]	; (84e98 <udd_ctrl_in_sent+0x15c>)
   84d9a:	781b      	ldrb	r3, [r3, #0]
   84d9c:	2b00      	cmp	r3, #0
   84d9e:	d002      	beq.n	84da6 <udd_ctrl_in_sent+0x6a>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			dbg_print("_zO ");
			udd_ctrl_send_zlp_out();
   84da0:	4b3e      	ldr	r3, [pc, #248]	; (84e9c <udd_ctrl_in_sent+0x160>)
   84da2:	4798      	blx	r3
			return;
   84da4:	e063      	b.n	84e6e <udd_ctrl_in_sent+0x132>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   84da6:	4b39      	ldr	r3, [pc, #228]	; (84e8c <udd_ctrl_in_sent+0x150>)
   84da8:	695b      	ldr	r3, [r3, #20]
   84daa:	2b00      	cmp	r3, #0
   84dac:	d00e      	beq.n	84dcc <udd_ctrl_in_sent+0x90>
				|| (!udd_g_ctrlreq.over_under_run())) {
   84dae:	4b37      	ldr	r3, [pc, #220]	; (84e8c <udd_ctrl_in_sent+0x150>)
   84db0:	695b      	ldr	r3, [r3, #20]
   84db2:	4798      	blx	r3
   84db4:	4603      	mov	r3, r0
   84db6:	f083 0301 	eor.w	r3, r3, #1
   84dba:	b2db      	uxtb	r3, r3
   84dbc:	2b00      	cmp	r3, #0
   84dbe:	d105      	bne.n	84dcc <udd_ctrl_in_sent+0x90>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   84dc0:	4b33      	ldr	r3, [pc, #204]	; (84e90 <udd_ctrl_in_sent+0x154>)
   84dc2:	2200      	movs	r2, #0
   84dc4:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   84dc6:	4b31      	ldr	r3, [pc, #196]	; (84e8c <udd_ctrl_in_sent+0x150>)
   84dc8:	899b      	ldrh	r3, [r3, #12]
   84dca:	81fb      	strh	r3, [r7, #14]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   84dcc:	89fb      	ldrh	r3, [r7, #14]
   84dce:	2b3f      	cmp	r3, #63	; 0x3f
   84dd0:	d905      	bls.n	84dde <udd_ctrl_in_sent+0xa2>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   84dd2:	2340      	movs	r3, #64	; 0x40
   84dd4:	81fb      	strh	r3, [r7, #14]
		b_shortpacket = false;
   84dd6:	4b30      	ldr	r3, [pc, #192]	; (84e98 <udd_ctrl_in_sent+0x15c>)
   84dd8:	2200      	movs	r2, #0
   84dda:	701a      	strb	r2, [r3, #0]
   84ddc:	e002      	b.n	84de4 <udd_ctrl_in_sent+0xa8>
	} else {
		b_shortpacket = true;
   84dde:	4b2e      	ldr	r3, [pc, #184]	; (84e98 <udd_ctrl_in_sent+0x15c>)
   84de0:	2201      	movs	r2, #1
   84de2:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   84de4:	4b2e      	ldr	r3, [pc, #184]	; (84ea0 <udd_ctrl_in_sent+0x164>)
   84de6:	60bb      	str	r3, [r7, #8]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84de8:	4b28      	ldr	r3, [pc, #160]	; (84e8c <udd_ctrl_in_sent+0x150>)
   84dea:	689b      	ldr	r3, [r3, #8]
   84dec:	4a28      	ldr	r2, [pc, #160]	; (84e90 <udd_ctrl_in_sent+0x154>)
   84dee:	8812      	ldrh	r2, [r2, #0]
   84df0:	4413      	add	r3, r2
   84df2:	607b      	str	r3, [r7, #4]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
   84df4:	4b1f      	ldr	r3, [pc, #124]	; (84e74 <udd_ctrl_in_sent+0x138>)
   84df6:	4798      	blx	r3
   84df8:	6038      	str	r0, [r7, #0]
	if (Is_udd_out_received(0)) {
   84dfa:	4b1f      	ldr	r3, [pc, #124]	; (84e78 <udd_ctrl_in_sent+0x13c>)
   84dfc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
   84e04:	2b00      	cmp	r3, #0
   84e06:	d006      	beq.n	84e16 <udd_ctrl_in_sent+0xda>
		dbg_print("Abort ");
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
   84e08:	6838      	ldr	r0, [r7, #0]
   84e0a:	4b1c      	ldr	r3, [pc, #112]	; (84e7c <udd_ctrl_in_sent+0x140>)
   84e0c:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   84e0e:	4b1c      	ldr	r3, [pc, #112]	; (84e80 <udd_ctrl_in_sent+0x144>)
   84e10:	2204      	movs	r2, #4
   84e12:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   84e14:	e02b      	b.n	84e6e <udd_ctrl_in_sent+0x132>
	}
	// dbg_print("t%d ", nb_remain);
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   84e16:	2300      	movs	r3, #0
   84e18:	737b      	strb	r3, [r7, #13]
   84e1a:	e00a      	b.n	84e32 <udd_ctrl_in_sent+0xf6>
		*ptr_dest++ = *ptr_src++;
   84e1c:	687a      	ldr	r2, [r7, #4]
   84e1e:	1c53      	adds	r3, r2, #1
   84e20:	607b      	str	r3, [r7, #4]
   84e22:	68bb      	ldr	r3, [r7, #8]
   84e24:	1c59      	adds	r1, r3, #1
   84e26:	60b9      	str	r1, [r7, #8]
   84e28:	7812      	ldrb	r2, [r2, #0]
   84e2a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_remain; i++) {
   84e2c:	7b7b      	ldrb	r3, [r7, #13]
   84e2e:	3301      	adds	r3, #1
   84e30:	737b      	strb	r3, [r7, #13]
   84e32:	7b7b      	ldrb	r3, [r7, #13]
   84e34:	b29b      	uxth	r3, r3
   84e36:	89fa      	ldrh	r2, [r7, #14]
   84e38:	429a      	cmp	r2, r3
   84e3a:	d8ef      	bhi.n	84e1c <udd_ctrl_in_sent+0xe0>
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   84e3c:	4b14      	ldr	r3, [pc, #80]	; (84e90 <udd_ctrl_in_sent+0x154>)
   84e3e:	881a      	ldrh	r2, [r3, #0]
   84e40:	89fb      	ldrh	r3, [r7, #14]
   84e42:	4413      	add	r3, r2
   84e44:	b29a      	uxth	r2, r3
   84e46:	4b12      	ldr	r3, [pc, #72]	; (84e90 <udd_ctrl_in_sent+0x154>)
   84e48:	801a      	strh	r2, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   84e4a:	4b0b      	ldr	r3, [pc, #44]	; (84e78 <udd_ctrl_in_sent+0x13c>)
   84e4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84e50:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   84e54:	4b08      	ldr	r3, [pc, #32]	; (84e78 <udd_ctrl_in_sent+0x13c>)
   84e56:	f44f 6200 	mov.w	r2, #2048	; 0x800
   84e5a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   84e5e:	4b06      	ldr	r3, [pc, #24]	; (84e78 <udd_ctrl_in_sent+0x13c>)
   84e60:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84e64:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
   84e68:	6838      	ldr	r0, [r7, #0]
   84e6a:	4b04      	ldr	r3, [pc, #16]	; (84e7c <udd_ctrl_in_sent+0x140>)
   84e6c:	4798      	blx	r3
}
   84e6e:	3710      	adds	r7, #16
   84e70:	46bd      	mov	sp, r7
   84e72:	bd80      	pop	{r7, pc}
   84e74:	00083c09 	.word	0x00083c09
   84e78:	400a4000 	.word	0x400a4000
   84e7c:	00083c61 	.word	0x00083c61
   84e80:	20000d1d 	.word	0x20000d1d
   84e84:	000851a5 	.word	0x000851a5
   84e88:	00084ba1 	.word	0x00084ba1
   84e8c:	20000d64 	.word	0x20000d64
   84e90:	20000d20 	.word	0x20000d20
   84e94:	20000d1e 	.word	0x20000d1e
   84e98:	20000d54 	.word	0x20000d54
   84e9c:	00085161 	.word	0x00085161
   84ea0:	20180000 	.word	0x20180000

00084ea4 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
   84ea4:	b580      	push	{r7, lr}
   84ea6:	b084      	sub	sp, #16
   84ea8:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   84eaa:	4b61      	ldr	r3, [pc, #388]	; (85030 <udd_ctrl_out_received+0x18c>)
   84eac:	781b      	ldrb	r3, [r3, #0]
   84eae:	2b01      	cmp	r3, #1
   84eb0:	d00f      	beq.n	84ed2 <udd_ctrl_out_received+0x2e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   84eb2:	4b5f      	ldr	r3, [pc, #380]	; (85030 <udd_ctrl_out_received+0x18c>)
   84eb4:	781b      	ldrb	r3, [r3, #0]
   84eb6:	2b02      	cmp	r3, #2
   84eb8:	d003      	beq.n	84ec2 <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   84eba:	4b5d      	ldr	r3, [pc, #372]	; (85030 <udd_ctrl_out_received+0x18c>)
   84ebc:	781b      	ldrb	r3, [r3, #0]
   84ebe:	2b04      	cmp	r3, #4
   84ec0:	d102      	bne.n	84ec8 <udd_ctrl_out_received+0x24>
			dbg_print("EoStp\n\r");
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
   84ec2:	4b5c      	ldr	r3, [pc, #368]	; (85034 <udd_ctrl_out_received+0x190>)
   84ec4:	4798      	blx	r3
   84ec6:	e001      	b.n	84ecc <udd_ctrl_out_received+0x28>
		} else {
			dbg_print("ErrStp\n\r");
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   84ec8:	4b5b      	ldr	r3, [pc, #364]	; (85038 <udd_ctrl_out_received+0x194>)
   84eca:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   84ecc:	4b5b      	ldr	r3, [pc, #364]	; (8503c <udd_ctrl_out_received+0x198>)
   84ece:	4798      	blx	r3
		return;
   84ed0:	e0ab      	b.n	8502a <udd_ctrl_out_received+0x186>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   84ed2:	4b5b      	ldr	r3, [pc, #364]	; (85040 <udd_ctrl_out_received+0x19c>)
   84ed4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84ed8:	0d1b      	lsrs	r3, r3, #20
   84eda:	b29b      	uxth	r3, r3
   84edc:	f3c3 030a 	ubfx	r3, r3, #0, #11
   84ee0:	81bb      	strh	r3, [r7, #12]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   84ee2:	4b58      	ldr	r3, [pc, #352]	; (85044 <udd_ctrl_out_received+0x1a0>)
   84ee4:	899b      	ldrh	r3, [r3, #12]
   84ee6:	461a      	mov	r2, r3
   84ee8:	4b57      	ldr	r3, [pc, #348]	; (85048 <udd_ctrl_out_received+0x1a4>)
   84eea:	881b      	ldrh	r3, [r3, #0]
   84eec:	4619      	mov	r1, r3
   84eee:	89bb      	ldrh	r3, [r7, #12]
   84ef0:	440b      	add	r3, r1
   84ef2:	429a      	cmp	r2, r3
   84ef4:	da05      	bge.n	84f02 <udd_ctrl_out_received+0x5e>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   84ef6:	4b53      	ldr	r3, [pc, #332]	; (85044 <udd_ctrl_out_received+0x1a0>)
   84ef8:	899a      	ldrh	r2, [r3, #12]
   84efa:	4b53      	ldr	r3, [pc, #332]	; (85048 <udd_ctrl_out_received+0x1a4>)
   84efc:	881b      	ldrh	r3, [r3, #0]
   84efe:	1ad3      	subs	r3, r2, r3
   84f00:	81bb      	strh	r3, [r7, #12]
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   84f02:	4b52      	ldr	r3, [pc, #328]	; (8504c <udd_ctrl_out_received+0x1a8>)
   84f04:	60bb      	str	r3, [r7, #8]
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84f06:	4b4f      	ldr	r3, [pc, #316]	; (85044 <udd_ctrl_out_received+0x1a0>)
   84f08:	689b      	ldr	r3, [r3, #8]
   84f0a:	4a4f      	ldr	r2, [pc, #316]	; (85048 <udd_ctrl_out_received+0x1a4>)
   84f0c:	8812      	ldrh	r2, [r2, #0]
   84f0e:	4413      	add	r3, r2
   84f10:	607b      	str	r3, [r7, #4]
	for (i = 0; i < nb_data; i++) {
   84f12:	2300      	movs	r3, #0
   84f14:	73fb      	strb	r3, [r7, #15]
   84f16:	e00a      	b.n	84f2e <udd_ctrl_out_received+0x8a>
		*ptr_dest++ = *ptr_src++;
   84f18:	68ba      	ldr	r2, [r7, #8]
   84f1a:	1c53      	adds	r3, r2, #1
   84f1c:	60bb      	str	r3, [r7, #8]
   84f1e:	687b      	ldr	r3, [r7, #4]
   84f20:	1c59      	adds	r1, r3, #1
   84f22:	6079      	str	r1, [r7, #4]
   84f24:	7812      	ldrb	r2, [r2, #0]
   84f26:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_data; i++) {
   84f28:	7bfb      	ldrb	r3, [r7, #15]
   84f2a:	3301      	adds	r3, #1
   84f2c:	73fb      	strb	r3, [r7, #15]
   84f2e:	7bfb      	ldrb	r3, [r7, #15]
   84f30:	b29b      	uxth	r3, r3
   84f32:	89ba      	ldrh	r2, [r7, #12]
   84f34:	429a      	cmp	r2, r3
   84f36:	d8ef      	bhi.n	84f18 <udd_ctrl_out_received+0x74>
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   84f38:	4b43      	ldr	r3, [pc, #268]	; (85048 <udd_ctrl_out_received+0x1a4>)
   84f3a:	881a      	ldrh	r2, [r3, #0]
   84f3c:	89bb      	ldrh	r3, [r7, #12]
   84f3e:	4413      	add	r3, r2
   84f40:	b29a      	uxth	r2, r3
   84f42:	4b41      	ldr	r3, [pc, #260]	; (85048 <udd_ctrl_out_received+0x1a4>)
   84f44:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   84f46:	89bb      	ldrh	r3, [r7, #12]
   84f48:	2b40      	cmp	r3, #64	; 0x40
   84f4a:	d10a      	bne.n	84f62 <udd_ctrl_out_received+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   84f4c:	4b3d      	ldr	r3, [pc, #244]	; (85044 <udd_ctrl_out_received+0x1a0>)
   84f4e:	88db      	ldrh	r3, [r3, #6]
   84f50:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_buf_cnt +
   84f52:	4b3f      	ldr	r3, [pc, #252]	; (85050 <udd_ctrl_out_received+0x1ac>)
   84f54:	881b      	ldrh	r3, [r3, #0]
   84f56:	4619      	mov	r1, r3
   84f58:	4b3b      	ldr	r3, [pc, #236]	; (85048 <udd_ctrl_out_received+0x1a4>)
   84f5a:	881b      	ldrh	r3, [r3, #0]
   84f5c:	440b      	add	r3, r1
			|| (udd_g_ctrlreq.req.wLength <=
   84f5e:	429a      	cmp	r2, r3
   84f60:	dc20      	bgt.n	84fa4 <udd_ctrl_out_received+0x100>
			udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   84f62:	4b39      	ldr	r3, [pc, #228]	; (85048 <udd_ctrl_out_received+0x1a4>)
   84f64:	881a      	ldrh	r2, [r3, #0]
   84f66:	4b37      	ldr	r3, [pc, #220]	; (85044 <udd_ctrl_out_received+0x1a0>)
   84f68:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   84f6a:	4b36      	ldr	r3, [pc, #216]	; (85044 <udd_ctrl_out_received+0x1a0>)
   84f6c:	695b      	ldr	r3, [r3, #20]
   84f6e:	2b00      	cmp	r3, #0
   84f70:	d010      	beq.n	84f94 <udd_ctrl_out_received+0xf0>
			if (!udd_g_ctrlreq.over_under_run()) {
   84f72:	4b34      	ldr	r3, [pc, #208]	; (85044 <udd_ctrl_out_received+0x1a0>)
   84f74:	695b      	ldr	r3, [r3, #20]
   84f76:	4798      	blx	r3
   84f78:	4603      	mov	r3, r0
   84f7a:	f083 0301 	eor.w	r3, r3, #1
   84f7e:	b2db      	uxtb	r3, r3
   84f80:	2b00      	cmp	r3, #0
   84f82:	d007      	beq.n	84f94 <udd_ctrl_out_received+0xf0>
				// Stall ZLP
				udd_ctrl_stall_data();
   84f84:	4b2c      	ldr	r3, [pc, #176]	; (85038 <udd_ctrl_out_received+0x194>)
   84f86:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   84f88:	4b2d      	ldr	r3, [pc, #180]	; (85040 <udd_ctrl_out_received+0x19c>)
   84f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
   84f8e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   84f92:	e04a      	b.n	8502a <udd_ctrl_out_received+0x186>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   84f94:	4b2a      	ldr	r3, [pc, #168]	; (85040 <udd_ctrl_out_received+0x19c>)
   84f96:	f44f 7200 	mov.w	r2, #512	; 0x200
   84f9a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   84f9e:	4b2d      	ldr	r3, [pc, #180]	; (85054 <udd_ctrl_out_received+0x1b0>)
   84fa0:	4798      	blx	r3
		return;
   84fa2:	e042      	b.n	8502a <udd_ctrl_out_received+0x186>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   84fa4:	4b27      	ldr	r3, [pc, #156]	; (85044 <udd_ctrl_out_received+0x1a0>)
   84fa6:	899a      	ldrh	r2, [r3, #12]
   84fa8:	4b27      	ldr	r3, [pc, #156]	; (85048 <udd_ctrl_out_received+0x1a4>)
   84faa:	881b      	ldrh	r3, [r3, #0]
   84fac:	429a      	cmp	r2, r3
   84fae:	d127      	bne.n	85000 <udd_ctrl_out_received+0x15c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   84fb0:	4b24      	ldr	r3, [pc, #144]	; (85044 <udd_ctrl_out_received+0x1a0>)
   84fb2:	695b      	ldr	r3, [r3, #20]
   84fb4:	2b00      	cmp	r3, #0
   84fb6:	d107      	bne.n	84fc8 <udd_ctrl_out_received+0x124>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
   84fb8:	4b1f      	ldr	r3, [pc, #124]	; (85038 <udd_ctrl_out_received+0x194>)
   84fba:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   84fbc:	4b20      	ldr	r3, [pc, #128]	; (85040 <udd_ctrl_out_received+0x19c>)
   84fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
   84fc2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   84fc6:	e030      	b.n	8502a <udd_ctrl_out_received+0x186>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   84fc8:	4b1e      	ldr	r3, [pc, #120]	; (85044 <udd_ctrl_out_received+0x1a0>)
   84fca:	695b      	ldr	r3, [r3, #20]
   84fcc:	4798      	blx	r3
   84fce:	4603      	mov	r3, r0
   84fd0:	f083 0301 	eor.w	r3, r3, #1
   84fd4:	b2db      	uxtb	r3, r3
   84fd6:	2b00      	cmp	r3, #0
   84fd8:	d007      	beq.n	84fea <udd_ctrl_out_received+0x146>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   84fda:	4b17      	ldr	r3, [pc, #92]	; (85038 <udd_ctrl_out_received+0x194>)
   84fdc:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   84fde:	4b18      	ldr	r3, [pc, #96]	; (85040 <udd_ctrl_out_received+0x19c>)
   84fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
   84fe4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   84fe8:	e01f      	b.n	8502a <udd_ctrl_out_received+0x186>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   84fea:	4b19      	ldr	r3, [pc, #100]	; (85050 <udd_ctrl_out_received+0x1ac>)
   84fec:	881a      	ldrh	r2, [r3, #0]
   84fee:	4b16      	ldr	r3, [pc, #88]	; (85048 <udd_ctrl_out_received+0x1a4>)
   84ff0:	881b      	ldrh	r3, [r3, #0]
   84ff2:	4413      	add	r3, r2
   84ff4:	b29a      	uxth	r2, r3
   84ff6:	4b16      	ldr	r3, [pc, #88]	; (85050 <udd_ctrl_out_received+0x1ac>)
   84ff8:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   84ffa:	4b13      	ldr	r3, [pc, #76]	; (85048 <udd_ctrl_out_received+0x1a4>)
   84ffc:	2200      	movs	r2, #0
   84ffe:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   85000:	4b0f      	ldr	r3, [pc, #60]	; (85040 <udd_ctrl_out_received+0x19c>)
   85002:	f44f 7200 	mov.w	r2, #512	; 0x200
   85006:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   8500a:	4b0d      	ldr	r3, [pc, #52]	; (85040 <udd_ctrl_out_received+0x19c>)
   8500c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85010:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	flags = cpu_irq_save();
   85014:	4b10      	ldr	r3, [pc, #64]	; (85058 <udd_ctrl_out_received+0x1b4>)
   85016:	4798      	blx	r3
   85018:	6038      	str	r0, [r7, #0]
	udd_enable_nak_in_interrupt(0);
   8501a:	4b09      	ldr	r3, [pc, #36]	; (85040 <udd_ctrl_out_received+0x19c>)
   8501c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85020:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   85024:	6838      	ldr	r0, [r7, #0]
   85026:	4b0d      	ldr	r3, [pc, #52]	; (8505c <udd_ctrl_out_received+0x1b8>)
   85028:	4798      	blx	r3
}
   8502a:	3710      	adds	r7, #16
   8502c:	46bd      	mov	sp, r7
   8502e:	bd80      	pop	{r7, pc}
   85030:	20000d1d 	.word	0x20000d1d
   85034:	000851a5 	.word	0x000851a5
   85038:	000850d9 	.word	0x000850d9
   8503c:	00084ba1 	.word	0x00084ba1
   85040:	400a4000 	.word	0x400a4000
   85044:	20000d64 	.word	0x20000d64
   85048:	20000d20 	.word	0x20000d20
   8504c:	20180000 	.word	0x20180000
   85050:	20000d1e 	.word	0x20000d1e
   85054:	000850fd 	.word	0x000850fd
   85058:	00083c09 	.word	0x00083c09
   8505c:	00083c61 	.word	0x00083c61

00085060 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
   85060:	b580      	push	{r7, lr}
   85062:	af00      	add	r7, sp, #0
	if (Is_udd_out_received(0))
   85064:	4b0c      	ldr	r3, [pc, #48]	; (85098 <udd_ctrl_underflow+0x38>)
   85066:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8506a:	f403 7300 	and.w	r3, r3, #512	; 0x200
   8506e:	2b00      	cmp	r3, #0
   85070:	d10f      	bne.n	85092 <udd_ctrl_underflow+0x32>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   85072:	4b0a      	ldr	r3, [pc, #40]	; (8509c <udd_ctrl_underflow+0x3c>)
   85074:	781b      	ldrb	r3, [r3, #0]
   85076:	2b01      	cmp	r3, #1
   85078:	d102      	bne.n	85080 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   8507a:	4b09      	ldr	r3, [pc, #36]	; (850a0 <udd_ctrl_underflow+0x40>)
   8507c:	4798      	blx	r3
   8507e:	e009      	b.n	85094 <udd_ctrl_underflow+0x34>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   85080:	4b06      	ldr	r3, [pc, #24]	; (8509c <udd_ctrl_underflow+0x3c>)
   85082:	781b      	ldrb	r3, [r3, #0]
   85084:	2b04      	cmp	r3, #4
   85086:	d105      	bne.n	85094 <udd_ctrl_underflow+0x34>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   85088:	4b03      	ldr	r3, [pc, #12]	; (85098 <udd_ctrl_underflow+0x38>)
   8508a:	2220      	movs	r2, #32
   8508c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   85090:	e000      	b.n	85094 <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received
   85092:	bf00      	nop
	}
}
   85094:	bd80      	pop	{r7, pc}
   85096:	bf00      	nop
   85098:	400a4000 	.word	0x400a4000
   8509c:	20000d1d 	.word	0x20000d1d
   850a0:	000850fd 	.word	0x000850fd

000850a4 <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
   850a4:	b480      	push	{r7}
   850a6:	af00      	add	r7, sp, #0
	if (Is_udd_in_send(0))
   850a8:	4b09      	ldr	r3, [pc, #36]	; (850d0 <udd_ctrl_overflow+0x2c>)
   850aa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   850ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   850b2:	2b00      	cmp	r3, #0
   850b4:	d108      	bne.n	850c8 <udd_ctrl_overflow+0x24>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   850b6:	4b07      	ldr	r3, [pc, #28]	; (850d4 <udd_ctrl_overflow+0x30>)
   850b8:	781b      	ldrb	r3, [r3, #0]
   850ba:	2b03      	cmp	r3, #3
   850bc:	d105      	bne.n	850ca <udd_ctrl_overflow+0x26>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   850be:	4b04      	ldr	r3, [pc, #16]	; (850d0 <udd_ctrl_overflow+0x2c>)
   850c0:	2220      	movs	r2, #32
   850c2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   850c6:	e000      	b.n	850ca <udd_ctrl_overflow+0x26>
		return; // overflow ignored if IN data is received
   850c8:	bf00      	nop
	}
}
   850ca:	46bd      	mov	sp, r7
   850cc:	bc80      	pop	{r7}
   850ce:	4770      	bx	lr
   850d0:	400a4000 	.word	0x400a4000
   850d4:	20000d1d 	.word	0x20000d1d

000850d8 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
   850d8:	b480      	push	{r7}
   850da:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   850dc:	4b05      	ldr	r3, [pc, #20]	; (850f4 <udd_ctrl_stall_data+0x1c>)
   850de:	2205      	movs	r2, #5
   850e0:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   850e2:	4b05      	ldr	r3, [pc, #20]	; (850f8 <udd_ctrl_stall_data+0x20>)
   850e4:	2220      	movs	r2, #32
   850e6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   850ea:	bf00      	nop
   850ec:	46bd      	mov	sp, r7
   850ee:	bc80      	pop	{r7}
   850f0:	4770      	bx	lr
   850f2:	bf00      	nop
   850f4:	20000d1d 	.word	0x20000d1d
   850f8:	400a4000 	.word	0x400a4000

000850fc <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
   850fc:	b580      	push	{r7, lr}
   850fe:	b082      	sub	sp, #8
   85100:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   85102:	4b13      	ldr	r3, [pc, #76]	; (85150 <udd_ctrl_send_zlp_in+0x54>)
   85104:	2203      	movs	r2, #3
   85106:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
   85108:	4b12      	ldr	r3, [pc, #72]	; (85154 <udd_ctrl_send_zlp_in+0x58>)
   8510a:	4798      	blx	r3
   8510c:	6078      	str	r0, [r7, #4]
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   8510e:	4b12      	ldr	r3, [pc, #72]	; (85158 <udd_ctrl_send_zlp_in+0x5c>)
   85110:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85114:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   85118:	4b0f      	ldr	r3, [pc, #60]	; (85158 <udd_ctrl_send_zlp_in+0x5c>)
   8511a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8511e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   85122:	4b0d      	ldr	r3, [pc, #52]	; (85158 <udd_ctrl_send_zlp_in+0x5c>)
   85124:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85128:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   8512c:	4b0a      	ldr	r3, [pc, #40]	; (85158 <udd_ctrl_send_zlp_in+0x5c>)
   8512e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85132:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   85136:	4b08      	ldr	r3, [pc, #32]	; (85158 <udd_ctrl_send_zlp_in+0x5c>)
   85138:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8513c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   85140:	6878      	ldr	r0, [r7, #4]
   85142:	4b06      	ldr	r3, [pc, #24]	; (8515c <udd_ctrl_send_zlp_in+0x60>)
   85144:	4798      	blx	r3
}
   85146:	bf00      	nop
   85148:	3708      	adds	r7, #8
   8514a:	46bd      	mov	sp, r7
   8514c:	bd80      	pop	{r7, pc}
   8514e:	bf00      	nop
   85150:	20000d1d 	.word	0x20000d1d
   85154:	00083c09 	.word	0x00083c09
   85158:	400a4000 	.word	0x400a4000
   8515c:	00083c61 	.word	0x00083c61

00085160 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
   85160:	b580      	push	{r7, lr}
   85162:	b082      	sub	sp, #8
   85164:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   85166:	4b0b      	ldr	r3, [pc, #44]	; (85194 <udd_ctrl_send_zlp_out+0x34>)
   85168:	2204      	movs	r2, #4
   8516a:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
   8516c:	4b0a      	ldr	r3, [pc, #40]	; (85198 <udd_ctrl_send_zlp_out+0x38>)
   8516e:	4798      	blx	r3
   85170:	6078      	str	r0, [r7, #4]
	udd_ack_nak_in(0);
   85172:	4b0a      	ldr	r3, [pc, #40]	; (8519c <udd_ctrl_send_zlp_out+0x3c>)
   85174:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85178:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   8517c:	4b07      	ldr	r3, [pc, #28]	; (8519c <udd_ctrl_send_zlp_out+0x3c>)
   8517e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85182:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   85186:	6878      	ldr	r0, [r7, #4]
   85188:	4b05      	ldr	r3, [pc, #20]	; (851a0 <udd_ctrl_send_zlp_out+0x40>)
   8518a:	4798      	blx	r3
}
   8518c:	bf00      	nop
   8518e:	3708      	adds	r7, #8
   85190:	46bd      	mov	sp, r7
   85192:	bd80      	pop	{r7, pc}
   85194:	20000d1d 	.word	0x20000d1d
   85198:	00083c09 	.word	0x00083c09
   8519c:	400a4000 	.word	0x400a4000
   851a0:	00083c61 	.word	0x00083c61

000851a4 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   851a4:	b580      	push	{r7, lr}
   851a6:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   851a8:	4b04      	ldr	r3, [pc, #16]	; (851bc <udd_ctrl_endofrequest+0x18>)
   851aa:	691b      	ldr	r3, [r3, #16]
   851ac:	2b00      	cmp	r3, #0
   851ae:	d002      	beq.n	851b6 <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
   851b0:	4b02      	ldr	r3, [pc, #8]	; (851bc <udd_ctrl_endofrequest+0x18>)
   851b2:	691b      	ldr	r3, [r3, #16]
   851b4:	4798      	blx	r3
	}
}
   851b6:	bf00      	nop
   851b8:	bd80      	pop	{r7, pc}
   851ba:	bf00      	nop
   851bc:	20000d64 	.word	0x20000d64

000851c0 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
   851c0:	b580      	push	{r7, lr}
   851c2:	b082      	sub	sp, #8
   851c4:	af00      	add	r7, sp, #0
	uint32_t status = udd_get_endpoint_status(0);
   851c6:	4b31      	ldr	r3, [pc, #196]	; (8528c <udd_ctrl_interrupt+0xcc>)
   851c8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   851cc:	607b      	str	r3, [r7, #4]

	if (!Is_udd_endpoint_interrupt(0)) {
   851ce:	4b2f      	ldr	r3, [pc, #188]	; (8528c <udd_ctrl_interrupt+0xcc>)
   851d0:	695b      	ldr	r3, [r3, #20]
   851d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
   851d6:	2b00      	cmp	r3, #0
   851d8:	d101      	bne.n	851de <udd_ctrl_interrupt+0x1e>
		return false; // No interrupt events on control endpoint
   851da:	2300      	movs	r3, #0
   851dc:	e052      	b.n	85284 <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   851de:	4b2b      	ldr	r3, [pc, #172]	; (8528c <udd_ctrl_interrupt+0xcc>)
   851e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   851e4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   851e8:	4b28      	ldr	r3, [pc, #160]	; (8528c <udd_ctrl_interrupt+0xcc>)
   851ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   851ee:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	// Search event on control endpoint
	if (Is_udd_endpoint_status_setup_received(status)) {
   851f2:	687b      	ldr	r3, [r7, #4]
   851f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   851f8:	2b00      	cmp	r3, #0
   851fa:	d003      	beq.n	85204 <udd_ctrl_interrupt+0x44>
		// SETUP packet received
		dbg_print("Stp ");
		udd_ctrl_setup_received();
   851fc:	4b24      	ldr	r3, [pc, #144]	; (85290 <udd_ctrl_interrupt+0xd0>)
   851fe:	4798      	blx	r3
		return true;
   85200:	2301      	movs	r3, #1
   85202:	e03f      	b.n	85284 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_in_sent(status)
   85204:	687b      	ldr	r3, [r7, #4]
   85206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   8520a:	2b00      	cmp	r3, #0
   8520c:	d00a      	beq.n	85224 <udd_ctrl_interrupt+0x64>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   8520e:	4b1f      	ldr	r3, [pc, #124]	; (8528c <udd_ctrl_interrupt+0xcc>)
   85210:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   85214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   85218:	2b00      	cmp	r3, #0
   8521a:	d003      	beq.n	85224 <udd_ctrl_interrupt+0x64>
		// IN packet sent
		dbg_print("In ");
		udd_ctrl_in_sent();
   8521c:	4b1d      	ldr	r3, [pc, #116]	; (85294 <udd_ctrl_interrupt+0xd4>)
   8521e:	4798      	blx	r3
		return true;
   85220:	2301      	movs	r3, #1
   85222:	e02f      	b.n	85284 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_out_received(status)) {
   85224:	687b      	ldr	r3, [r7, #4]
   85226:	f403 7300 	and.w	r3, r3, #512	; 0x200
   8522a:	2b00      	cmp	r3, #0
   8522c:	d003      	beq.n	85236 <udd_ctrl_interrupt+0x76>
		// OUT packet received
		dbg_print("Out ");
		udd_ctrl_out_received();
   8522e:	4b1a      	ldr	r3, [pc, #104]	; (85298 <udd_ctrl_interrupt+0xd8>)
   85230:	4798      	blx	r3
		return true;
   85232:	2301      	movs	r3, #1
   85234:	e026      	b.n	85284 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_stall(status)) {
   85236:	687b      	ldr	r3, [r7, #4]
   85238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   8523c:	2b00      	cmp	r3, #0
   8523e:	d004      	beq.n	8524a <udd_ctrl_interrupt+0x8a>
		dbg_print("Stall\n\r");
		// STALLed
		udd_ack_stall(0);
   85240:	4b12      	ldr	r3, [pc, #72]	; (8528c <udd_ctrl_interrupt+0xcc>)
   85242:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   85246:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	if (Is_udd_endpoint_status_nak_out(status)) {
   8524a:	687b      	ldr	r3, [r7, #4]
   8524c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   85250:	2b00      	cmp	r3, #0
   85252:	d008      	beq.n	85266 <udd_ctrl_interrupt+0xa6>
		// Overflow on OUT packet
		dbg_print("NakO ");
		udd_ack_nak_out(0);
   85254:	4b0d      	ldr	r3, [pc, #52]	; (8528c <udd_ctrl_interrupt+0xcc>)
   85256:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8525a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_overflow();
   8525e:	4b0f      	ldr	r3, [pc, #60]	; (8529c <udd_ctrl_interrupt+0xdc>)
   85260:	4798      	blx	r3
		return true;
   85262:	2301      	movs	r3, #1
   85264:	e00e      	b.n	85284 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_nak_in(status)) {
   85266:	687b      	ldr	r3, [r7, #4]
   85268:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   8526c:	2b00      	cmp	r3, #0
   8526e:	d008      	beq.n	85282 <udd_ctrl_interrupt+0xc2>
		// Underflow on IN packet
		dbg_print("NakI ");
		udd_ack_nak_in(0);
   85270:	4b06      	ldr	r3, [pc, #24]	; (8528c <udd_ctrl_interrupt+0xcc>)
   85272:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85276:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_underflow();
   8527a:	4b09      	ldr	r3, [pc, #36]	; (852a0 <udd_ctrl_interrupt+0xe0>)
   8527c:	4798      	blx	r3
		return true;
   8527e:	2301      	movs	r3, #1
   85280:	e000      	b.n	85284 <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("UnH ");
	return false;
   85282:	2300      	movs	r3, #0
}
   85284:	4618      	mov	r0, r3
   85286:	3708      	adds	r7, #8
   85288:	46bd      	mov	sp, r7
   8528a:	bd80      	pop	{r7, pc}
   8528c:	400a4000 	.word	0x400a4000
   85290:	00084bfd 	.word	0x00084bfd
   85294:	00084d3d 	.word	0x00084d3d
   85298:	00084ea5 	.word	0x00084ea5
   8529c:	000850a5 	.word	0x000850a5
   852a0:	00085061 	.word	0x00085061

000852a4 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
   852a4:	b480      	push	{r7}
   852a6:	b083      	sub	sp, #12
   852a8:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   852aa:	2300      	movs	r3, #0
   852ac:	71fb      	strb	r3, [r7, #7]
   852ae:	e01c      	b.n	852ea <udd_ep_job_table_reset+0x46>
		udd_ep_job[i].busy = false;
   852b0:	79fa      	ldrb	r2, [r7, #7]
   852b2:	4912      	ldr	r1, [pc, #72]	; (852fc <udd_ep_job_table_reset+0x58>)
   852b4:	4613      	mov	r3, r2
   852b6:	005b      	lsls	r3, r3, #1
   852b8:	4413      	add	r3, r2
   852ba:	00db      	lsls	r3, r3, #3
   852bc:	440b      	add	r3, r1
   852be:	f103 0210 	add.w	r2, r3, #16
   852c2:	7913      	ldrb	r3, [r2, #4]
   852c4:	f36f 0300 	bfc	r3, #0, #1
   852c8:	7113      	strb	r3, [r2, #4]
		udd_ep_job[i].stall_requested = false;
   852ca:	79fa      	ldrb	r2, [r7, #7]
   852cc:	490b      	ldr	r1, [pc, #44]	; (852fc <udd_ep_job_table_reset+0x58>)
   852ce:	4613      	mov	r3, r2
   852d0:	005b      	lsls	r3, r3, #1
   852d2:	4413      	add	r3, r2
   852d4:	00db      	lsls	r3, r3, #3
   852d6:	440b      	add	r3, r1
   852d8:	f103 0210 	add.w	r2, r3, #16
   852dc:	7913      	ldrb	r3, [r2, #4]
   852de:	f36f 0382 	bfc	r3, #2, #1
   852e2:	7113      	strb	r3, [r2, #4]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   852e4:	79fb      	ldrb	r3, [r7, #7]
   852e6:	3301      	adds	r3, #1
   852e8:	71fb      	strb	r3, [r7, #7]
   852ea:	79fb      	ldrb	r3, [r7, #7]
   852ec:	2b01      	cmp	r3, #1
   852ee:	d9df      	bls.n	852b0 <udd_ep_job_table_reset+0xc>
	}
}
   852f0:	bf00      	nop
   852f2:	370c      	adds	r7, #12
   852f4:	46bd      	mov	sp, r7
   852f6:	bc80      	pop	{r7}
   852f8:	4770      	bx	lr
   852fa:	bf00      	nop
   852fc:	20000d24 	.word	0x20000d24

00085300 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
   85300:	b580      	push	{r7, lr}
   85302:	b082      	sub	sp, #8
   85304:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85306:	2300      	movs	r3, #0
   85308:	71fb      	strb	r3, [r7, #7]
   8530a:	e010      	b.n	8532e <udd_ep_job_table_kill+0x2e>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   8530c:	79fa      	ldrb	r2, [r7, #7]
   8530e:	4613      	mov	r3, r2
   85310:	005b      	lsls	r3, r3, #1
   85312:	4413      	add	r3, r2
   85314:	00db      	lsls	r3, r3, #3
   85316:	4a09      	ldr	r2, [pc, #36]	; (8533c <udd_ep_job_table_kill+0x3c>)
   85318:	1898      	adds	r0, r3, r2
   8531a:	79fb      	ldrb	r3, [r7, #7]
   8531c:	3301      	adds	r3, #1
   8531e:	b2db      	uxtb	r3, r3
   85320:	461a      	mov	r2, r3
   85322:	2101      	movs	r1, #1
   85324:	4b06      	ldr	r3, [pc, #24]	; (85340 <udd_ep_job_table_kill+0x40>)
   85326:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85328:	79fb      	ldrb	r3, [r7, #7]
   8532a:	3301      	adds	r3, #1
   8532c:	71fb      	strb	r3, [r7, #7]
   8532e:	79fb      	ldrb	r3, [r7, #7]
   85330:	2b01      	cmp	r3, #1
   85332:	d9eb      	bls.n	8530c <udd_ep_job_table_kill+0xc>
	}
}
   85334:	bf00      	nop
   85336:	3708      	adds	r7, #8
   85338:	46bd      	mov	sp, r7
   8533a:	bd80      	pop	{r7, pc}
   8533c:	20000d24 	.word	0x20000d24
   85340:	00085381 	.word	0x00085381

00085344 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   85344:	b580      	push	{r7, lr}
   85346:	b082      	sub	sp, #8
   85348:	af00      	add	r7, sp, #0
   8534a:	4603      	mov	r3, r0
   8534c:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
   8534e:	79fb      	ldrb	r3, [r7, #7]
   85350:	f003 030f 	and.w	r3, r3, #15
   85354:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   85356:	79fb      	ldrb	r3, [r7, #7]
   85358:	1e5a      	subs	r2, r3, #1
   8535a:	4613      	mov	r3, r2
   8535c:	005b      	lsls	r3, r3, #1
   8535e:	4413      	add	r3, r2
   85360:	00db      	lsls	r3, r3, #3
   85362:	4a05      	ldr	r2, [pc, #20]	; (85378 <udd_ep_abort_job+0x34>)
   85364:	4413      	add	r3, r2
   85366:	79fa      	ldrb	r2, [r7, #7]
   85368:	2101      	movs	r1, #1
   8536a:	4618      	mov	r0, r3
   8536c:	4b03      	ldr	r3, [pc, #12]	; (8537c <udd_ep_abort_job+0x38>)
   8536e:	4798      	blx	r3
}
   85370:	bf00      	nop
   85372:	3708      	adds	r7, #8
   85374:	46bd      	mov	sp, r7
   85376:	bd80      	pop	{r7, pc}
   85378:	20000d24 	.word	0x20000d24
   8537c:	00085381 	.word	0x00085381

00085380 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   85380:	b580      	push	{r7, lr}
   85382:	b082      	sub	sp, #8
   85384:	af00      	add	r7, sp, #0
   85386:	6078      	str	r0, [r7, #4]
   85388:	460b      	mov	r3, r1
   8538a:	70fb      	strb	r3, [r7, #3]
   8538c:	4613      	mov	r3, r2
   8538e:	70bb      	strb	r3, [r7, #2]
	if (ptr_job->busy == false) {
   85390:	687b      	ldr	r3, [r7, #4]
   85392:	7d1b      	ldrb	r3, [r3, #20]
   85394:	f003 0301 	and.w	r3, r3, #1
   85398:	b2db      	uxtb	r3, r3
   8539a:	2b00      	cmp	r3, #0
   8539c:	d01f      	beq.n	853de <udd_ep_finish_job+0x5e>
		return; // No on-going job
	}
	ptr_job->busy = false;
   8539e:	687a      	ldr	r2, [r7, #4]
   853a0:	7d13      	ldrb	r3, [r2, #20]
   853a2:	f36f 0300 	bfc	r3, #0, #1
   853a6:	7513      	strb	r3, [r2, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   853a8:	687b      	ldr	r3, [r7, #4]
   853aa:	681b      	ldr	r3, [r3, #0]
   853ac:	2b00      	cmp	r3, #0
   853ae:	d018      	beq.n	853e2 <udd_ep_finish_job+0x62>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   853b0:	4a0e      	ldr	r2, [pc, #56]	; (853ec <udd_ep_finish_job+0x6c>)
   853b2:	78bb      	ldrb	r3, [r7, #2]
   853b4:	3308      	adds	r3, #8
   853b6:	015b      	lsls	r3, r3, #5
   853b8:	4413      	add	r3, r2
   853ba:	681b      	ldr	r3, [r3, #0]
   853bc:	f003 0308 	and.w	r3, r3, #8
   853c0:	2b00      	cmp	r3, #0
   853c2:	d003      	beq.n	853cc <udd_ep_finish_job+0x4c>
		ep_num |= USB_EP_DIR_IN;
   853c4:	78bb      	ldrb	r3, [r7, #2]
   853c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   853ca:	70bb      	strb	r3, [r7, #2]
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   853cc:	687b      	ldr	r3, [r7, #4]
   853ce:	681b      	ldr	r3, [r3, #0]
   853d0:	78fa      	ldrb	r2, [r7, #3]
   853d2:	4610      	mov	r0, r2
   853d4:	687a      	ldr	r2, [r7, #4]
   853d6:	6891      	ldr	r1, [r2, #8]
   853d8:	78ba      	ldrb	r2, [r7, #2]
   853da:	4798      	blx	r3
   853dc:	e002      	b.n	853e4 <udd_ep_finish_job+0x64>
		return; // No on-going job
   853de:	bf00      	nop
   853e0:	e000      	b.n	853e4 <udd_ep_finish_job+0x64>
		return; // No callback linked to job
   853e2:	bf00      	nop
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   853e4:	3708      	adds	r7, #8
   853e6:	46bd      	mov	sp, r7
   853e8:	bd80      	pop	{r7, pc}
   853ea:	bf00      	nop
   853ec:	400a4000 	.word	0x400a4000

000853f0 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   853f0:	b580      	push	{r7, lr}
   853f2:	b086      	sub	sp, #24
   853f4:	af00      	add	r7, sp, #0
   853f6:	4603      	mov	r3, r0
   853f8:	71fb      	strb	r3, [r7, #7]
	uint32_t udd_dma_ctrl = 0;
   853fa:	2300      	movs	r3, #0
   853fc:	617b      	str	r3, [r7, #20]
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   853fe:	79fb      	ldrb	r3, [r7, #7]
   85400:	1e5a      	subs	r2, r3, #1
   85402:	4613      	mov	r3, r2
   85404:	005b      	lsls	r3, r3, #1
   85406:	4413      	add	r3, r2
   85408:	00db      	lsls	r3, r3, #3
   8540a:	4a6d      	ldr	r2, [pc, #436]	; (855c0 <udd_ep_trans_done+0x1d0>)
   8540c:	4413      	add	r3, r2
   8540e:	60fb      	str	r3, [r7, #12]

	if (!ptr_job->busy) {
   85410:	68fb      	ldr	r3, [r7, #12]
   85412:	7d1b      	ldrb	r3, [r3, #20]
   85414:	f003 0301 	and.w	r3, r3, #1
   85418:	b2db      	uxtb	r3, r3
   8541a:	2b00      	cmp	r3, #0
   8541c:	f000 80cc 	beq.w	855b8 <udd_ep_trans_done+0x1c8>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   85420:	68fb      	ldr	r3, [r7, #12]
   85422:	68da      	ldr	r2, [r3, #12]
   85424:	68fb      	ldr	r3, [r7, #12]
   85426:	689b      	ldr	r3, [r3, #8]
   85428:	429a      	cmp	r2, r3
   8542a:	f000 8099 	beq.w	85560 <udd_ep_trans_done+0x170>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   8542e:	68fb      	ldr	r3, [r7, #12]
   85430:	689a      	ldr	r2, [r3, #8]
   85432:	68fb      	ldr	r3, [r7, #12]
   85434:	68db      	ldr	r3, [r3, #12]
   85436:	1ad3      	subs	r3, r2, r3
   85438:	613b      	str	r3, [r7, #16]

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   8543a:	693b      	ldr	r3, [r7, #16]
   8543c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   85440:	d905      	bls.n	8544e <udd_ep_trans_done+0x5e>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   85442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   85446:	613b      	str	r3, [r7, #16]

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   85448:	2300      	movs	r3, #0
   8544a:	617b      	str	r3, [r7, #20]
   8544c:	e002      	b.n	85454 <udd_ep_trans_done+0x64>
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   8544e:	693b      	ldr	r3, [r7, #16]
   85450:	041b      	lsls	r3, r3, #16
   85452:	617b      	str	r3, [r7, #20]
		}
		if (Is_udd_endpoint_in(ep)) {
   85454:	4a5b      	ldr	r2, [pc, #364]	; (855c4 <udd_ep_trans_done+0x1d4>)
   85456:	79fb      	ldrb	r3, [r7, #7]
   85458:	3308      	adds	r3, #8
   8545a:	015b      	lsls	r3, r3, #5
   8545c:	4413      	add	r3, r2
   8545e:	681b      	ldr	r3, [r3, #0]
   85460:	f003 0308 	and.w	r3, r3, #8
   85464:	2b00      	cmp	r3, #0
   85466:	d01d      	beq.n	854a4 <udd_ep_trans_done+0xb4>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   85468:	4a56      	ldr	r2, [pc, #344]	; (855c4 <udd_ep_trans_done+0x1d4>)
   8546a:	79fb      	ldrb	r3, [r7, #7]
   8546c:	3308      	adds	r3, #8
   8546e:	015b      	lsls	r3, r3, #5
   85470:	4413      	add	r3, r2
   85472:	681b      	ldr	r3, [r3, #0]
   85474:	f003 0307 	and.w	r3, r3, #7
   85478:	2208      	movs	r2, #8
   8547a:	fa02 f303 	lsl.w	r3, r2, r3
   8547e:	461a      	mov	r2, r3
   85480:	693b      	ldr	r3, [r7, #16]
   85482:	fbb3 f1f2 	udiv	r1, r3, r2
   85486:	fb02 f201 	mul.w	r2, r2, r1
   8548a:	1a9b      	subs	r3, r3, r2
   8548c:	2b00      	cmp	r3, #0
   8548e:	d027      	beq.n	854e0 <udd_ep_trans_done+0xf0>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   85490:	697b      	ldr	r3, [r7, #20]
   85492:	f043 0308 	orr.w	r3, r3, #8
   85496:	617b      	str	r3, [r7, #20]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   85498:	68fa      	ldr	r2, [r7, #12]
   8549a:	7d13      	ldrb	r3, [r2, #20]
   8549c:	f36f 0341 	bfc	r3, #1, #1
   854a0:	7513      	strb	r3, [r2, #20]
   854a2:	e01d      	b.n	854e0 <udd_ep_trans_done+0xf0>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   854a4:	4a47      	ldr	r2, [pc, #284]	; (855c4 <udd_ep_trans_done+0x1d4>)
   854a6:	79fb      	ldrb	r3, [r7, #7]
   854a8:	3308      	adds	r3, #8
   854aa:	015b      	lsls	r3, r3, #5
   854ac:	4413      	add	r3, r2
   854ae:	681b      	ldr	r3, [r3, #0]
   854b0:	091b      	lsrs	r3, r3, #4
   854b2:	f003 0303 	and.w	r3, r3, #3
   854b6:	2b01      	cmp	r3, #1
   854b8:	d10e      	bne.n	854d8 <udd_ep_trans_done+0xe8>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   854ba:	4a42      	ldr	r2, [pc, #264]	; (855c4 <udd_ep_trans_done+0x1d4>)
   854bc:	79fb      	ldrb	r3, [r7, #7]
   854be:	3308      	adds	r3, #8
   854c0:	015b      	lsls	r3, r3, #5
   854c2:	4413      	add	r3, r2
   854c4:	681b      	ldr	r3, [r3, #0]
   854c6:	f003 0307 	and.w	r3, r3, #7
   854ca:	2208      	movs	r2, #8
   854cc:	fa02 f303 	lsl.w	r3, r2, r3
   854d0:	461a      	mov	r2, r3
   854d2:	693b      	ldr	r3, [r7, #16]
   854d4:	4293      	cmp	r3, r2
   854d6:	d803      	bhi.n	854e0 <udd_ep_trans_done+0xf0>

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   854d8:	697b      	ldr	r3, [r7, #20]
   854da:	f043 0314 	orr.w	r3, r3, #20
   854de:	617b      	str	r3, [r7, #20]
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   854e0:	68fb      	ldr	r3, [r7, #12]
   854e2:	685a      	ldr	r2, [r3, #4]
   854e4:	68fb      	ldr	r3, [r7, #12]
   854e6:	68db      	ldr	r3, [r3, #12]
   854e8:	18d1      	adds	r1, r2, r3
   854ea:	79fb      	ldrb	r3, [r7, #7]
   854ec:	011a      	lsls	r2, r3, #4
   854ee:	4b36      	ldr	r3, [pc, #216]	; (855c8 <udd_ep_trans_done+0x1d8>)
   854f0:	4413      	add	r3, r2
   854f2:	460a      	mov	r2, r1
   854f4:	605a      	str	r2, [r3, #4]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   854f6:	697b      	ldr	r3, [r7, #20]
   854f8:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   854fc:	617b      	str	r3, [r7, #20]

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
   854fe:	4b33      	ldr	r3, [pc, #204]	; (855cc <udd_ep_trans_done+0x1dc>)
   85500:	4798      	blx	r3
   85502:	60b8      	str	r0, [r7, #8]
		if (!(udd_endpoint_dma_get_status(ep)
   85504:	79fb      	ldrb	r3, [r7, #7]
   85506:	011a      	lsls	r2, r3, #4
   85508:	4b2f      	ldr	r3, [pc, #188]	; (855c8 <udd_ep_trans_done+0x1d8>)
   8550a:	4413      	add	r3, r2
   8550c:	68db      	ldr	r3, [r3, #12]
				& UDPHS_DMASTATUS_END_TR_ST)) {
   8550e:	f003 0310 	and.w	r3, r3, #16
		if (!(udd_endpoint_dma_get_status(ep)
   85512:	2b00      	cmp	r3, #0
   85514:	d11d      	bne.n	85552 <udd_ep_trans_done+0x162>
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   85516:	79fb      	ldrb	r3, [r7, #7]
   85518:	011a      	lsls	r2, r3, #4
   8551a:	4b2b      	ldr	r3, [pc, #172]	; (855c8 <udd_ep_trans_done+0x1d8>)
   8551c:	4413      	add	r3, r2
   8551e:	697a      	ldr	r2, [r7, #20]
   85520:	609a      	str	r2, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   85522:	68fb      	ldr	r3, [r7, #12]
   85524:	68da      	ldr	r2, [r3, #12]
   85526:	693b      	ldr	r3, [r7, #16]
   85528:	441a      	add	r2, r3
   8552a:	68fb      	ldr	r3, [r7, #12]
   8552c:	60da      	str	r2, [r3, #12]
			ptr_job->buf_load = next_trans;
   8552e:	68fb      	ldr	r3, [r7, #12]
   85530:	693a      	ldr	r2, [r7, #16]
   85532:	611a      	str	r2, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   85534:	4b23      	ldr	r3, [pc, #140]	; (855c4 <udd_ep_trans_done+0x1d4>)
   85536:	691a      	ldr	r2, [r3, #16]
   85538:	79fb      	ldrb	r3, [r7, #7]
   8553a:	3b01      	subs	r3, #1
   8553c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   85540:	fa01 f303 	lsl.w	r3, r1, r3
   85544:	491f      	ldr	r1, [pc, #124]	; (855c4 <udd_ep_trans_done+0x1d4>)
   85546:	4313      	orrs	r3, r2
   85548:	610b      	str	r3, [r1, #16]
			cpu_irq_restore(flags);
   8554a:	68b8      	ldr	r0, [r7, #8]
   8554c:	4b20      	ldr	r3, [pc, #128]	; (855d0 <udd_ep_trans_done+0x1e0>)
   8554e:	4798      	blx	r3
			return;
   85550:	e033      	b.n	855ba <udd_ep_trans_done+0x1ca>
		}
		cpu_irq_restore(flags);
   85552:	68b8      	ldr	r0, [r7, #8]
   85554:	4b1e      	ldr	r3, [pc, #120]	; (855d0 <udd_ep_trans_done+0x1e0>)
   85556:	4798      	blx	r3

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   85558:	68fb      	ldr	r3, [r7, #12]
   8555a:	68da      	ldr	r2, [r3, #12]
   8555c:	68fb      	ldr	r3, [r7, #12]
   8555e:	609a      	str	r2, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   85560:	4a18      	ldr	r2, [pc, #96]	; (855c4 <udd_ep_trans_done+0x1d4>)
   85562:	79fb      	ldrb	r3, [r7, #7]
   85564:	3308      	adds	r3, #8
   85566:	015b      	lsls	r3, r3, #5
   85568:	4413      	add	r3, r2
   8556a:	681b      	ldr	r3, [r3, #0]
   8556c:	f003 0308 	and.w	r3, r3, #8
   85570:	2b00      	cmp	r3, #0
   85572:	d01a      	beq.n	855aa <udd_ep_trans_done+0x1ba>
		if (ptr_job->b_shortpacket) {
   85574:	68fb      	ldr	r3, [r7, #12]
   85576:	7d1b      	ldrb	r3, [r3, #20]
   85578:	f003 0302 	and.w	r3, r3, #2
   8557c:	b2db      	uxtb	r3, r3
   8557e:	2b00      	cmp	r3, #0
   85580:	d013      	beq.n	855aa <udd_ep_trans_done+0x1ba>
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   85582:	4a10      	ldr	r2, [pc, #64]	; (855c4 <udd_ep_trans_done+0x1d4>)
   85584:	79fb      	ldrb	r3, [r7, #7]
   85586:	3308      	adds	r3, #8
   85588:	015b      	lsls	r3, r3, #5
   8558a:	4413      	add	r3, r2
   8558c:	3304      	adds	r3, #4
   8558e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85592:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep);
   85594:	4b0b      	ldr	r3, [pc, #44]	; (855c4 <udd_ep_trans_done+0x1d4>)
   85596:	691a      	ldr	r2, [r3, #16]
   85598:	79fb      	ldrb	r3, [r7, #7]
   8559a:	f44f 7180 	mov.w	r1, #256	; 0x100
   8559e:	fa01 f303 	lsl.w	r3, r1, r3
   855a2:	4908      	ldr	r1, [pc, #32]	; (855c4 <udd_ep_trans_done+0x1d4>)
   855a4:	4313      	orrs	r3, r2
   855a6:	610b      	str	r3, [r1, #16]
			return;
   855a8:	e007      	b.n	855ba <udd_ep_trans_done+0x1ca>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   855aa:	79fb      	ldrb	r3, [r7, #7]
   855ac:	461a      	mov	r2, r3
   855ae:	2100      	movs	r1, #0
   855b0:	68f8      	ldr	r0, [r7, #12]
   855b2:	4b08      	ldr	r3, [pc, #32]	; (855d4 <udd_ep_trans_done+0x1e4>)
   855b4:	4798      	blx	r3
   855b6:	e000      	b.n	855ba <udd_ep_trans_done+0x1ca>
		return; // No job is running, then ignore it (system error)
   855b8:	bf00      	nop
}
   855ba:	3718      	adds	r7, #24
   855bc:	46bd      	mov	sp, r7
   855be:	bd80      	pop	{r7, pc}
   855c0:	20000d24 	.word	0x20000d24
   855c4:	400a4000 	.word	0x400a4000
   855c8:	400a4300 	.word	0x400a4300
   855cc:	00083c09 	.word	0x00083c09
   855d0:	00083c61 	.word	0x00083c61
   855d4:	00085381 	.word	0x00085381

000855d8 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
   855d8:	b580      	push	{r7, lr}
   855da:	b084      	sub	sp, #16
   855dc:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   855de:	2301      	movs	r3, #1
   855e0:	73fb      	strb	r3, [r7, #15]
   855e2:	e0e0      	b.n	857a6 <udd_ep_interrupt+0x1ce>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   855e4:	7bfb      	ldrb	r3, [r7, #15]
   855e6:	1e5a      	subs	r2, r3, #1
   855e8:	4613      	mov	r3, r2
   855ea:	005b      	lsls	r3, r3, #1
   855ec:	4413      	add	r3, r2
   855ee:	00db      	lsls	r3, r3, #3
   855f0:	4a71      	ldr	r2, [pc, #452]	; (857b8 <udd_ep_interrupt+0x1e0>)
   855f2:	4413      	add	r3, r2
   855f4:	60bb      	str	r3, [r7, #8]

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   855f6:	4b71      	ldr	r3, [pc, #452]	; (857bc <udd_ep_interrupt+0x1e4>)
   855f8:	691a      	ldr	r2, [r3, #16]
   855fa:	7bfb      	ldrb	r3, [r7, #15]
   855fc:	3b01      	subs	r3, #1
   855fe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   85602:	fa01 f303 	lsl.w	r3, r1, r3
   85606:	4013      	ands	r3, r2
   85608:	2b00      	cmp	r3, #0
   8560a:	d03c      	beq.n	85686 <udd_ep_interrupt+0xae>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   8560c:	4b6b      	ldr	r3, [pc, #428]	; (857bc <udd_ep_interrupt+0x1e4>)
   8560e:	695a      	ldr	r2, [r3, #20]
   85610:	7bfb      	ldrb	r3, [r7, #15]
   85612:	3b01      	subs	r3, #1
   85614:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   85618:	fa01 f303 	lsl.w	r3, r1, r3
   8561c:	4013      	ands	r3, r2
   8561e:	2b00      	cmp	r3, #0
   85620:	d031      	beq.n	85686 <udd_ep_interrupt+0xae>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   85622:	7bfb      	ldrb	r3, [r7, #15]
   85624:	011a      	lsls	r2, r3, #4
   85626:	4b66      	ldr	r3, [pc, #408]	; (857c0 <udd_ep_interrupt+0x1e8>)
   85628:	4413      	add	r3, r2
   8562a:	68db      	ldr	r3, [r3, #12]
					& UDPHS_DMASTATUS_CHANN_ENB) {
   8562c:	f003 0301 	and.w	r3, r3, #1
			if (udd_endpoint_dma_get_status(ep)
   85630:	2b00      	cmp	r3, #0
   85632:	d001      	beq.n	85638 <udd_ep_interrupt+0x60>
				return true; // Ignore EOT_STA interrupt
   85634:	2301      	movs	r3, #1
   85636:	e0bb      	b.n	857b0 <udd_ep_interrupt+0x1d8>
			}
			dbg_print("dma%d: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   85638:	4b60      	ldr	r3, [pc, #384]	; (857bc <udd_ep_interrupt+0x1e4>)
   8563a:	691a      	ldr	r2, [r3, #16]
   8563c:	7bfb      	ldrb	r3, [r7, #15]
   8563e:	3b01      	subs	r3, #1
   85640:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   85644:	fa01 f303 	lsl.w	r3, r1, r3
   85648:	43db      	mvns	r3, r3
   8564a:	495c      	ldr	r1, [pc, #368]	; (857bc <udd_ep_interrupt+0x1e4>)
   8564c:	4013      	ands	r3, r2
   8564e:	610b      	str	r3, [r1, #16]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   85650:	7bfb      	ldrb	r3, [r7, #15]
   85652:	011a      	lsls	r2, r3, #4
   85654:	4b5a      	ldr	r3, [pc, #360]	; (857c0 <udd_ep_interrupt+0x1e8>)
   85656:	4413      	add	r3, r2
   85658:	68db      	ldr	r3, [r3, #12]
					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
   8565a:	0c1b      	lsrs	r3, r3, #16
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   8565c:	b29b      	uxth	r3, r3
   8565e:	607b      	str	r3, [r7, #4]
			if (nb_remaining) {
   85660:	687b      	ldr	r3, [r7, #4]
   85662:	2b00      	cmp	r3, #0
   85664:	d009      	beq.n	8567a <udd_ep_interrupt+0xa2>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   85666:	68bb      	ldr	r3, [r7, #8]
   85668:	68da      	ldr	r2, [r3, #12]
   8566a:	687b      	ldr	r3, [r7, #4]
   8566c:	1ad2      	subs	r2, r2, r3
   8566e:	68bb      	ldr	r3, [r7, #8]
   85670:	60da      	str	r2, [r3, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   85672:	68bb      	ldr	r3, [r7, #8]
   85674:	68da      	ldr	r2, [r3, #12]
   85676:	68bb      	ldr	r3, [r7, #8]
   85678:	609a      	str	r2, [r3, #8]
			}
			udd_ep_trans_done(ep);
   8567a:	7bfb      	ldrb	r3, [r7, #15]
   8567c:	4618      	mov	r0, r3
   8567e:	4b51      	ldr	r3, [pc, #324]	; (857c4 <udd_ep_interrupt+0x1ec>)
   85680:	4798      	blx	r3
			return true;
   85682:	2301      	movs	r3, #1
   85684:	e094      	b.n	857b0 <udd_ep_interrupt+0x1d8>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   85686:	4b4d      	ldr	r3, [pc, #308]	; (857bc <udd_ep_interrupt+0x1e4>)
   85688:	691a      	ldr	r2, [r3, #16]
   8568a:	7bfb      	ldrb	r3, [r7, #15]
   8568c:	f44f 7180 	mov.w	r1, #256	; 0x100
   85690:	fa01 f303 	lsl.w	r3, r1, r3
   85694:	4013      	ands	r3, r2
   85696:	2b00      	cmp	r3, #0
   85698:	f000 8082 	beq.w	857a0 <udd_ep_interrupt+0x1c8>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   8569c:	4a47      	ldr	r2, [pc, #284]	; (857bc <udd_ep_interrupt+0x1e4>)
   8569e:	7bfb      	ldrb	r3, [r7, #15]
   856a0:	015b      	lsls	r3, r3, #5
   856a2:	4413      	add	r3, r2
   856a4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   856a8:	681b      	ldr	r3, [r3, #0]
   856aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   856ae:	2b00      	cmp	r3, #0
   856b0:	d024      	beq.n	856fc <udd_ep_interrupt+0x124>
					&& !Is_udd_tx_pkt_ready(ep)) {
   856b2:	4a42      	ldr	r2, [pc, #264]	; (857bc <udd_ep_interrupt+0x1e4>)
   856b4:	7bfb      	ldrb	r3, [r7, #15]
   856b6:	015b      	lsls	r3, r3, #5
   856b8:	4413      	add	r3, r2
   856ba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   856be:	681b      	ldr	r3, [r3, #0]
   856c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   856c4:	2b00      	cmp	r3, #0
   856c6:	d119      	bne.n	856fc <udd_ep_interrupt+0x124>
				udd_disable_tx_pkt_ready_interrupt(ep);
   856c8:	4a3c      	ldr	r2, [pc, #240]	; (857bc <udd_ep_interrupt+0x1e4>)
   856ca:	7bfb      	ldrb	r3, [r7, #15]
   856cc:	015b      	lsls	r3, r3, #5
   856ce:	4413      	add	r3, r2
   856d0:	f503 7384 	add.w	r3, r3, #264	; 0x108
   856d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   856d8:	601a      	str	r2, [r3, #0]
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   856da:	4a38      	ldr	r2, [pc, #224]	; (857bc <udd_ep_interrupt+0x1e4>)
   856dc:	7bfb      	ldrb	r3, [r7, #15]
   856de:	015b      	lsls	r3, r3, #5
   856e0:	4413      	add	r3, r2
   856e2:	f503 738a 	add.w	r3, r3, #276	; 0x114
   856e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   856ea:	601a      	str	r2, [r3, #0]
				udd_ep_finish_job(ptr_job, false, ep);
   856ec:	7bfb      	ldrb	r3, [r7, #15]
   856ee:	461a      	mov	r2, r3
   856f0:	2100      	movs	r1, #0
   856f2:	68b8      	ldr	r0, [r7, #8]
   856f4:	4b34      	ldr	r3, [pc, #208]	; (857c8 <udd_ep_interrupt+0x1f0>)
   856f6:	4798      	blx	r3
				return true;
   856f8:	2301      	movs	r3, #1
   856fa:	e059      	b.n	857b0 <udd_ep_interrupt+0x1d8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   856fc:	4a2f      	ldr	r2, [pc, #188]	; (857bc <udd_ep_interrupt+0x1e4>)
   856fe:	7bfb      	ldrb	r3, [r7, #15]
   85700:	015b      	lsls	r3, r3, #5
   85702:	4413      	add	r3, r2
   85704:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   85708:	681b      	ldr	r3, [r3, #0]
   8570a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   8570e:	2b00      	cmp	r3, #0
   85710:	d046      	beq.n	857a0 <udd_ep_interrupt+0x1c8>
					&& (0 == udd_nb_busy_bank(ep))) {
   85712:	4a2a      	ldr	r2, [pc, #168]	; (857bc <udd_ep_interrupt+0x1e4>)
   85714:	7bfb      	ldrb	r3, [r7, #15]
   85716:	015b      	lsls	r3, r3, #5
   85718:	4413      	add	r3, r2
   8571a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8571e:	681b      	ldr	r3, [r3, #0]
   85720:	0c9b      	lsrs	r3, r3, #18
   85722:	f003 0303 	and.w	r3, r3, #3
   85726:	2b00      	cmp	r3, #0
   85728:	d13a      	bne.n	857a0 <udd_ep_interrupt+0x1c8>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   8572a:	4a24      	ldr	r2, [pc, #144]	; (857bc <udd_ep_interrupt+0x1e4>)
   8572c:	7bfb      	ldrb	r3, [r7, #15]
   8572e:	015b      	lsls	r3, r3, #5
   85730:	4413      	add	r3, r2
   85732:	f503 7384 	add.w	r3, r3, #264	; 0x108
   85736:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   8573a:	601a      	str	r2, [r3, #0]
				udd_disable_endpoint_interrupt(ep);
   8573c:	4b1f      	ldr	r3, [pc, #124]	; (857bc <udd_ep_interrupt+0x1e4>)
   8573e:	691a      	ldr	r2, [r3, #16]
   85740:	7bfb      	ldrb	r3, [r7, #15]
   85742:	f44f 7180 	mov.w	r1, #256	; 0x100
   85746:	fa01 f303 	lsl.w	r3, r1, r3
   8574a:	43db      	mvns	r3, r3
   8574c:	491b      	ldr	r1, [pc, #108]	; (857bc <udd_ep_interrupt+0x1e4>)
   8574e:	4013      	ands	r3, r2
   85750:	610b      	str	r3, [r1, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   85752:	68ba      	ldr	r2, [r7, #8]
   85754:	7d13      	ldrb	r3, [r2, #20]
   85756:	f36f 0382 	bfc	r3, #2, #1
   8575a:	7513      	strb	r3, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   8575c:	4a17      	ldr	r2, [pc, #92]	; (857bc <udd_ep_interrupt+0x1e4>)
   8575e:	7bfb      	ldrb	r3, [r7, #15]
   85760:	015b      	lsls	r3, r3, #5
   85762:	4413      	add	r3, r2
   85764:	f503 7384 	add.w	r3, r3, #264	; 0x108
   85768:	681a      	ldr	r2, [r3, #0]
   8576a:	4914      	ldr	r1, [pc, #80]	; (857bc <udd_ep_interrupt+0x1e4>)
   8576c:	7bfb      	ldrb	r3, [r7, #15]
   8576e:	f022 0202 	bic.w	r2, r2, #2
   85772:	015b      	lsls	r3, r3, #5
   85774:	440b      	add	r3, r1
   85776:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8577a:	601a      	str	r2, [r3, #0]
				udd_enable_stall_handshake(ep);
   8577c:	4a0f      	ldr	r2, [pc, #60]	; (857bc <udd_ep_interrupt+0x1e4>)
   8577e:	7bfb      	ldrb	r3, [r7, #15]
   85780:	015b      	lsls	r3, r3, #5
   85782:	4413      	add	r3, r2
   85784:	f503 738a 	add.w	r3, r3, #276	; 0x114
   85788:	2220      	movs	r2, #32
   8578a:	601a      	str	r2, [r3, #0]
				udd_reset_data_toggle(ep);
   8578c:	4a0b      	ldr	r2, [pc, #44]	; (857bc <udd_ep_interrupt+0x1e4>)
   8578e:	7bfb      	ldrb	r3, [r7, #15]
   85790:	015b      	lsls	r3, r3, #5
   85792:	4413      	add	r3, r2
   85794:	f503 738c 	add.w	r3, r3, #280	; 0x118
   85798:	2240      	movs	r2, #64	; 0x40
   8579a:	601a      	str	r2, [r3, #0]
				//dbg_print("exHalt%x ", ep);
				return true;
   8579c:	2301      	movs	r3, #1
   8579e:	e007      	b.n	857b0 <udd_ep_interrupt+0x1d8>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   857a0:	7bfb      	ldrb	r3, [r7, #15]
   857a2:	3301      	adds	r3, #1
   857a4:	73fb      	strb	r3, [r7, #15]
   857a6:	7bfb      	ldrb	r3, [r7, #15]
   857a8:	2b02      	cmp	r3, #2
   857aa:	f67f af1b 	bls.w	855e4 <udd_ep_interrupt+0xc>
			}
		}
	}
	return false;
   857ae:	2300      	movs	r3, #0
}
   857b0:	4618      	mov	r0, r3
   857b2:	3710      	adds	r7, #16
   857b4:	46bd      	mov	sp, r7
   857b6:	bd80      	pop	{r7, pc}
   857b8:	20000d24 	.word	0x20000d24
   857bc:	400a4000 	.word	0x400a4000
   857c0:	400a4300 	.word	0x400a4300
   857c4:	000853f1 	.word	0x000853f1
   857c8:	00085381 	.word	0x00085381

000857cc <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   857cc:	b480      	push	{r7}
   857ce:	b087      	sub	sp, #28
   857d0:	af00      	add	r7, sp, #0
   857d2:	60f8      	str	r0, [r7, #12]
   857d4:	60b9      	str	r1, [r7, #8]
   857d6:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   857d8:	68bb      	ldr	r3, [r7, #8]
   857da:	085a      	lsrs	r2, r3, #1
   857dc:	687b      	ldr	r3, [r7, #4]
   857de:	441a      	add	r2, r3
   857e0:	68bb      	ldr	r3, [r7, #8]
   857e2:	fbb2 f3f3 	udiv	r3, r2, r3
   857e6:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   857e8:	697b      	ldr	r3, [r7, #20]
   857ea:	2b03      	cmp	r3, #3
   857ec:	d903      	bls.n	857f6 <usart_set_spi_master_baudrate+0x2a>
   857ee:	697b      	ldr	r3, [r7, #20]
   857f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   857f4:	d301      	bcc.n	857fa <usart_set_spi_master_baudrate+0x2e>
		return 1;
   857f6:	2301      	movs	r3, #1
   857f8:	e003      	b.n	85802 <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   857fa:	68fb      	ldr	r3, [r7, #12]
   857fc:	697a      	ldr	r2, [r7, #20]
   857fe:	621a      	str	r2, [r3, #32]

	return 0;
   85800:	2300      	movs	r3, #0
}
   85802:	4618      	mov	r0, r3
   85804:	371c      	adds	r7, #28
   85806:	46bd      	mov	sp, r7
   85808:	bc80      	pop	{r7}
   8580a:	4770      	bx	lr

0008580c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   8580c:	b580      	push	{r7, lr}
   8580e:	b082      	sub	sp, #8
   85810:	af00      	add	r7, sp, #0
   85812:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   85814:	6878      	ldr	r0, [r7, #4]
   85816:	4b0f      	ldr	r3, [pc, #60]	; (85854 <usart_reset+0x48>)
   85818:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8581a:	687b      	ldr	r3, [r7, #4]
   8581c:	2200      	movs	r2, #0
   8581e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   85820:	687b      	ldr	r3, [r7, #4]
   85822:	2200      	movs	r2, #0
   85824:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   85826:	687b      	ldr	r3, [r7, #4]
   85828:	2200      	movs	r2, #0
   8582a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   8582c:	6878      	ldr	r0, [r7, #4]
   8582e:	4b0a      	ldr	r3, [pc, #40]	; (85858 <usart_reset+0x4c>)
   85830:	4798      	blx	r3
	usart_reset_rx(p_usart);
   85832:	6878      	ldr	r0, [r7, #4]
   85834:	4b09      	ldr	r3, [pc, #36]	; (8585c <usart_reset+0x50>)
   85836:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   85838:	6878      	ldr	r0, [r7, #4]
   8583a:	4b09      	ldr	r3, [pc, #36]	; (85860 <usart_reset+0x54>)
   8583c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   8583e:	6878      	ldr	r0, [r7, #4]
   85840:	4b08      	ldr	r3, [pc, #32]	; (85864 <usart_reset+0x58>)
   85842:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
   85844:	6878      	ldr	r0, [r7, #4]
   85846:	4b08      	ldr	r3, [pc, #32]	; (85868 <usart_reset+0x5c>)
   85848:	4798      	blx	r3
#endif
}
   8584a:	bf00      	nop
   8584c:	3708      	adds	r7, #8
   8584e:	46bd      	mov	sp, r7
   85850:	bd80      	pop	{r7, pc}
   85852:	bf00      	nop
   85854:	00085a41 	.word	0x00085a41
   85858:	00085995 	.word	0x00085995
   8585c:	000859ad 	.word	0x000859ad
   85860:	000859c5 	.word	0x000859c5
   85864:	000859f9 	.word	0x000859f9
   85868:	000859df 	.word	0x000859df

0008586c <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   8586c:	b580      	push	{r7, lr}
   8586e:	b084      	sub	sp, #16
   85870:	af00      	add	r7, sp, #0
   85872:	60f8      	str	r0, [r7, #12]
   85874:	60b9      	str	r1, [r7, #8]
   85876:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   85878:	68f8      	ldr	r0, [r7, #12]
   8587a:	4b3d      	ldr	r3, [pc, #244]	; (85970 <usart_init_spi_master+0x104>)
   8587c:	4798      	blx	r3

	ul_reg_val = 0;
   8587e:	4b3d      	ldr	r3, [pc, #244]	; (85974 <usart_init_spi_master+0x108>)
   85880:	2200      	movs	r2, #0
   85882:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   85884:	68bb      	ldr	r3, [r7, #8]
   85886:	2b00      	cmp	r3, #0
   85888:	d00d      	beq.n	858a6 <usart_init_spi_master+0x3a>
   8588a:	68bb      	ldr	r3, [r7, #8]
   8588c:	689b      	ldr	r3, [r3, #8]
   8588e:	2b03      	cmp	r3, #3
   85890:	d809      	bhi.n	858a6 <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   85892:	68bb      	ldr	r3, [r7, #8]
   85894:	681b      	ldr	r3, [r3, #0]
   85896:	687a      	ldr	r2, [r7, #4]
   85898:	4619      	mov	r1, r3
   8589a:	68f8      	ldr	r0, [r7, #12]
   8589c:	4b36      	ldr	r3, [pc, #216]	; (85978 <usart_init_spi_master+0x10c>)
   8589e:	4798      	blx	r3
   858a0:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   858a2:	2b00      	cmp	r3, #0
   858a4:	d001      	beq.n	858aa <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   858a6:	2301      	movs	r3, #1
   858a8:	e05d      	b.n	85966 <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   858aa:	68bb      	ldr	r3, [r7, #8]
   858ac:	685a      	ldr	r2, [r3, #4]
   858ae:	4b31      	ldr	r3, [pc, #196]	; (85974 <usart_init_spi_master+0x108>)
   858b0:	681b      	ldr	r3, [r3, #0]
   858b2:	4313      	orrs	r3, r2
   858b4:	4a2f      	ldr	r2, [pc, #188]	; (85974 <usart_init_spi_master+0x108>)
   858b6:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   858b8:	68bb      	ldr	r3, [r7, #8]
   858ba:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   858bc:	4b2d      	ldr	r3, [pc, #180]	; (85974 <usart_init_spi_master+0x108>)
   858be:	681b      	ldr	r3, [r3, #0]
   858c0:	4313      	orrs	r3, r2
   858c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   858c6:	f043 030e 	orr.w	r3, r3, #14
   858ca:	4a2a      	ldr	r2, [pc, #168]	; (85974 <usart_init_spi_master+0x108>)
   858cc:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   858ce:	68bb      	ldr	r3, [r7, #8]
   858d0:	689b      	ldr	r3, [r3, #8]
   858d2:	2b03      	cmp	r3, #3
   858d4:	d83e      	bhi.n	85954 <usart_init_spi_master+0xe8>
   858d6:	a201      	add	r2, pc, #4	; (adr r2, 858dc <usart_init_spi_master+0x70>)
   858d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   858dc:	000858ed 	.word	0x000858ed
   858e0:	00085907 	.word	0x00085907
   858e4:	00085921 	.word	0x00085921
   858e8:	0008593b 	.word	0x0008593b
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   858ec:	4b21      	ldr	r3, [pc, #132]	; (85974 <usart_init_spi_master+0x108>)
   858ee:	681b      	ldr	r3, [r3, #0]
   858f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   858f4:	4a1f      	ldr	r2, [pc, #124]	; (85974 <usart_init_spi_master+0x108>)
   858f6:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   858f8:	4b1e      	ldr	r3, [pc, #120]	; (85974 <usart_init_spi_master+0x108>)
   858fa:	681b      	ldr	r3, [r3, #0]
   858fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   85900:	4a1c      	ldr	r2, [pc, #112]	; (85974 <usart_init_spi_master+0x108>)
   85902:	6013      	str	r3, [r2, #0]
		break;
   85904:	e027      	b.n	85956 <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   85906:	4b1b      	ldr	r3, [pc, #108]	; (85974 <usart_init_spi_master+0x108>)
   85908:	681b      	ldr	r3, [r3, #0]
   8590a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   8590e:	4a19      	ldr	r2, [pc, #100]	; (85974 <usart_init_spi_master+0x108>)
   85910:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   85912:	4b18      	ldr	r3, [pc, #96]	; (85974 <usart_init_spi_master+0x108>)
   85914:	681b      	ldr	r3, [r3, #0]
   85916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8591a:	4a16      	ldr	r2, [pc, #88]	; (85974 <usart_init_spi_master+0x108>)
   8591c:	6013      	str	r3, [r2, #0]
		break;
   8591e:	e01a      	b.n	85956 <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   85920:	4b14      	ldr	r3, [pc, #80]	; (85974 <usart_init_spi_master+0x108>)
   85922:	681b      	ldr	r3, [r3, #0]
   85924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   85928:	4a12      	ldr	r2, [pc, #72]	; (85974 <usart_init_spi_master+0x108>)
   8592a:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   8592c:	4b11      	ldr	r3, [pc, #68]	; (85974 <usart_init_spi_master+0x108>)
   8592e:	681b      	ldr	r3, [r3, #0]
   85930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   85934:	4a0f      	ldr	r2, [pc, #60]	; (85974 <usart_init_spi_master+0x108>)
   85936:	6013      	str	r3, [r2, #0]
		break;
   85938:	e00d      	b.n	85956 <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   8593a:	4b0e      	ldr	r3, [pc, #56]	; (85974 <usart_init_spi_master+0x108>)
   8593c:	681b      	ldr	r3, [r3, #0]
   8593e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   85942:	4a0c      	ldr	r2, [pc, #48]	; (85974 <usart_init_spi_master+0x108>)
   85944:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   85946:	4b0b      	ldr	r3, [pc, #44]	; (85974 <usart_init_spi_master+0x108>)
   85948:	681b      	ldr	r3, [r3, #0]
   8594a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8594e:	4a09      	ldr	r2, [pc, #36]	; (85974 <usart_init_spi_master+0x108>)
   85950:	6013      	str	r3, [r2, #0]
		break;
   85952:	e000      	b.n	85956 <usart_init_spi_master+0xea>

	default:
		break;
   85954:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   85956:	68fb      	ldr	r3, [r7, #12]
   85958:	685a      	ldr	r2, [r3, #4]
   8595a:	4b06      	ldr	r3, [pc, #24]	; (85974 <usart_init_spi_master+0x108>)
   8595c:	681b      	ldr	r3, [r3, #0]
   8595e:	431a      	orrs	r2, r3
   85960:	68fb      	ldr	r3, [r7, #12]
   85962:	605a      	str	r2, [r3, #4]

	return 0;
   85964:	2300      	movs	r3, #0
}
   85966:	4618      	mov	r0, r3
   85968:	3710      	adds	r7, #16
   8596a:	46bd      	mov	sp, r7
   8596c:	bd80      	pop	{r7, pc}
   8596e:	bf00      	nop
   85970:	0008580d 	.word	0x0008580d
   85974:	20000d58 	.word	0x20000d58
   85978:	000857cd 	.word	0x000857cd

0008597c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   8597c:	b480      	push	{r7}
   8597e:	b083      	sub	sp, #12
   85980:	af00      	add	r7, sp, #0
   85982:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   85984:	687b      	ldr	r3, [r7, #4]
   85986:	2240      	movs	r2, #64	; 0x40
   85988:	601a      	str	r2, [r3, #0]
}
   8598a:	bf00      	nop
   8598c:	370c      	adds	r7, #12
   8598e:	46bd      	mov	sp, r7
   85990:	bc80      	pop	{r7}
   85992:	4770      	bx	lr

00085994 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   85994:	b480      	push	{r7}
   85996:	b083      	sub	sp, #12
   85998:	af00      	add	r7, sp, #0
   8599a:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   8599c:	687b      	ldr	r3, [r7, #4]
   8599e:	2288      	movs	r2, #136	; 0x88
   859a0:	601a      	str	r2, [r3, #0]
}
   859a2:	bf00      	nop
   859a4:	370c      	adds	r7, #12
   859a6:	46bd      	mov	sp, r7
   859a8:	bc80      	pop	{r7}
   859aa:	4770      	bx	lr

000859ac <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   859ac:	b480      	push	{r7}
   859ae:	b083      	sub	sp, #12
   859b0:	af00      	add	r7, sp, #0
   859b2:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   859b4:	687b      	ldr	r3, [r7, #4]
   859b6:	2224      	movs	r2, #36	; 0x24
   859b8:	601a      	str	r2, [r3, #0]
}
   859ba:	bf00      	nop
   859bc:	370c      	adds	r7, #12
   859be:	46bd      	mov	sp, r7
   859c0:	bc80      	pop	{r7}
   859c2:	4770      	bx	lr

000859c4 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   859c4:	b480      	push	{r7}
   859c6:	b083      	sub	sp, #12
   859c8:	af00      	add	r7, sp, #0
   859ca:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   859cc:	687b      	ldr	r3, [r7, #4]
   859ce:	f44f 7280 	mov.w	r2, #256	; 0x100
   859d2:	601a      	str	r2, [r3, #0]
}
   859d4:	bf00      	nop
   859d6:	370c      	adds	r7, #12
   859d8:	46bd      	mov	sp, r7
   859da:	bc80      	pop	{r7}
   859dc:	4770      	bx	lr

000859de <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
   859de:	b480      	push	{r7}
   859e0:	b083      	sub	sp, #12
   859e2:	af00      	add	r7, sp, #0
   859e4:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
   859e6:	687b      	ldr	r3, [r7, #4]
   859e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   859ec:	601a      	str	r2, [r3, #0]
}
   859ee:	bf00      	nop
   859f0:	370c      	adds	r7, #12
   859f2:	46bd      	mov	sp, r7
   859f4:	bc80      	pop	{r7}
   859f6:	4770      	bx	lr

000859f8 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   859f8:	b480      	push	{r7}
   859fa:	b083      	sub	sp, #12
   859fc:	af00      	add	r7, sp, #0
   859fe:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   85a00:	687b      	ldr	r3, [r7, #4]
   85a02:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   85a06:	601a      	str	r2, [r3, #0]
}
   85a08:	bf00      	nop
   85a0a:	370c      	adds	r7, #12
   85a0c:	46bd      	mov	sp, r7
   85a0e:	bc80      	pop	{r7}
   85a10:	4770      	bx	lr

00085a12 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
   85a12:	b480      	push	{r7}
   85a14:	b083      	sub	sp, #12
   85a16:	af00      	add	r7, sp, #0
   85a18:	6078      	str	r0, [r7, #4]
   85a1a:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   85a1c:	bf00      	nop
   85a1e:	687b      	ldr	r3, [r7, #4]
   85a20:	695b      	ldr	r3, [r3, #20]
   85a22:	f003 0302 	and.w	r3, r3, #2
   85a26:	2b00      	cmp	r3, #0
   85a28:	d0f9      	beq.n	85a1e <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   85a2a:	683b      	ldr	r3, [r7, #0]
   85a2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   85a30:	687b      	ldr	r3, [r7, #4]
   85a32:	61da      	str	r2, [r3, #28]

	return 0;
   85a34:	2300      	movs	r3, #0
}
   85a36:	4618      	mov	r0, r3
   85a38:	370c      	adds	r7, #12
   85a3a:	46bd      	mov	sp, r7
   85a3c:	bc80      	pop	{r7}
   85a3e:	4770      	bx	lr

00085a40 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   85a40:	b480      	push	{r7}
   85a42:	b083      	sub	sp, #12
   85a44:	af00      	add	r7, sp, #0
   85a46:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   85a48:	687b      	ldr	r3, [r7, #4]
   85a4a:	4a04      	ldr	r2, [pc, #16]	; (85a5c <usart_disable_writeprotect+0x1c>)
   85a4c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   85a50:	bf00      	nop
   85a52:	370c      	adds	r7, #12
   85a54:	46bd      	mov	sp, r7
   85a56:	bc80      	pop	{r7}
   85a58:	4770      	bx	lr
   85a5a:	bf00      	nop
   85a5c:	55534100 	.word	0x55534100

00085a60 <__libc_init_array>:
   85a60:	b570      	push	{r4, r5, r6, lr}
   85a62:	4e0d      	ldr	r6, [pc, #52]	; (85a98 <__libc_init_array+0x38>)
   85a64:	4d0d      	ldr	r5, [pc, #52]	; (85a9c <__libc_init_array+0x3c>)
   85a66:	1b76      	subs	r6, r6, r5
   85a68:	10b6      	asrs	r6, r6, #2
   85a6a:	d006      	beq.n	85a7a <__libc_init_array+0x1a>
   85a6c:	2400      	movs	r4, #0
   85a6e:	3401      	adds	r4, #1
   85a70:	f855 3b04 	ldr.w	r3, [r5], #4
   85a74:	4798      	blx	r3
   85a76:	42a6      	cmp	r6, r4
   85a78:	d1f9      	bne.n	85a6e <__libc_init_array+0xe>
   85a7a:	4e09      	ldr	r6, [pc, #36]	; (85aa0 <__libc_init_array+0x40>)
   85a7c:	4d09      	ldr	r5, [pc, #36]	; (85aa4 <__libc_init_array+0x44>)
   85a7e:	f000 f8bf 	bl	85c00 <_init>
   85a82:	1b76      	subs	r6, r6, r5
   85a84:	10b6      	asrs	r6, r6, #2
   85a86:	d006      	beq.n	85a96 <__libc_init_array+0x36>
   85a88:	2400      	movs	r4, #0
   85a8a:	3401      	adds	r4, #1
   85a8c:	f855 3b04 	ldr.w	r3, [r5], #4
   85a90:	4798      	blx	r3
   85a92:	42a6      	cmp	r6, r4
   85a94:	d1f9      	bne.n	85a8a <__libc_init_array+0x2a>
   85a96:	bd70      	pop	{r4, r5, r6, pc}
   85a98:	00085c0c 	.word	0x00085c0c
   85a9c:	00085c0c 	.word	0x00085c0c
   85aa0:	00085c14 	.word	0x00085c14
   85aa4:	00085c0c 	.word	0x00085c0c

00085aa8 <register_fini>:
   85aa8:	4b02      	ldr	r3, [pc, #8]	; (85ab4 <register_fini+0xc>)
   85aaa:	b113      	cbz	r3, 85ab2 <register_fini+0xa>
   85aac:	4802      	ldr	r0, [pc, #8]	; (85ab8 <register_fini+0x10>)
   85aae:	f000 b805 	b.w	85abc <atexit>
   85ab2:	4770      	bx	lr
   85ab4:	00000000 	.word	0x00000000
   85ab8:	00085ac9 	.word	0x00085ac9

00085abc <atexit>:
   85abc:	2300      	movs	r3, #0
   85abe:	4601      	mov	r1, r0
   85ac0:	461a      	mov	r2, r3
   85ac2:	4618      	mov	r0, r3
   85ac4:	f000 b81e 	b.w	85b04 <__register_exitproc>

00085ac8 <__libc_fini_array>:
   85ac8:	b538      	push	{r3, r4, r5, lr}
   85aca:	4c0a      	ldr	r4, [pc, #40]	; (85af4 <__libc_fini_array+0x2c>)
   85acc:	4d0a      	ldr	r5, [pc, #40]	; (85af8 <__libc_fini_array+0x30>)
   85ace:	1b64      	subs	r4, r4, r5
   85ad0:	10a4      	asrs	r4, r4, #2
   85ad2:	d00a      	beq.n	85aea <__libc_fini_array+0x22>
   85ad4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   85ad8:	3b01      	subs	r3, #1
   85ada:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   85ade:	3c01      	subs	r4, #1
   85ae0:	f855 3904 	ldr.w	r3, [r5], #-4
   85ae4:	4798      	blx	r3
   85ae6:	2c00      	cmp	r4, #0
   85ae8:	d1f9      	bne.n	85ade <__libc_fini_array+0x16>
   85aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   85aee:	f000 b891 	b.w	85c14 <_fini>
   85af2:	bf00      	nop
   85af4:	00085c24 	.word	0x00085c24
   85af8:	00085c20 	.word	0x00085c20

00085afc <__retarget_lock_acquire_recursive>:
   85afc:	4770      	bx	lr
   85afe:	bf00      	nop

00085b00 <__retarget_lock_release_recursive>:
   85b00:	4770      	bx	lr
   85b02:	bf00      	nop

00085b04 <__register_exitproc>:
   85b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85b08:	4d2b      	ldr	r5, [pc, #172]	; (85bb8 <__register_exitproc+0xb4>)
   85b0a:	4606      	mov	r6, r0
   85b0c:	6828      	ldr	r0, [r5, #0]
   85b0e:	4698      	mov	r8, r3
   85b10:	460f      	mov	r7, r1
   85b12:	4691      	mov	r9, r2
   85b14:	f7ff fff2 	bl	85afc <__retarget_lock_acquire_recursive>
   85b18:	4b28      	ldr	r3, [pc, #160]	; (85bbc <__register_exitproc+0xb8>)
   85b1a:	681c      	ldr	r4, [r3, #0]
   85b1c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   85b20:	2b00      	cmp	r3, #0
   85b22:	d03d      	beq.n	85ba0 <__register_exitproc+0x9c>
   85b24:	685a      	ldr	r2, [r3, #4]
   85b26:	2a1f      	cmp	r2, #31
   85b28:	dc0d      	bgt.n	85b46 <__register_exitproc+0x42>
   85b2a:	f102 0c01 	add.w	ip, r2, #1
   85b2e:	bb16      	cbnz	r6, 85b76 <__register_exitproc+0x72>
   85b30:	3202      	adds	r2, #2
   85b32:	f8c3 c004 	str.w	ip, [r3, #4]
   85b36:	6828      	ldr	r0, [r5, #0]
   85b38:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   85b3c:	f7ff ffe0 	bl	85b00 <__retarget_lock_release_recursive>
   85b40:	2000      	movs	r0, #0
   85b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85b46:	4b1e      	ldr	r3, [pc, #120]	; (85bc0 <__register_exitproc+0xbc>)
   85b48:	b37b      	cbz	r3, 85baa <__register_exitproc+0xa6>
   85b4a:	f44f 70c8 	mov.w	r0, #400	; 0x190
   85b4e:	f3af 8000 	nop.w
   85b52:	4603      	mov	r3, r0
   85b54:	b348      	cbz	r0, 85baa <__register_exitproc+0xa6>
   85b56:	2000      	movs	r0, #0
   85b58:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   85b5c:	f04f 0c01 	mov.w	ip, #1
   85b60:	e9c3 1000 	strd	r1, r0, [r3]
   85b64:	4602      	mov	r2, r0
   85b66:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   85b6a:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   85b6e:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   85b72:	2e00      	cmp	r6, #0
   85b74:	d0dc      	beq.n	85b30 <__register_exitproc+0x2c>
   85b76:	2101      	movs	r1, #1
   85b78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   85b7c:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   85b80:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   85b84:	4091      	lsls	r1, r2
   85b86:	4308      	orrs	r0, r1
   85b88:	2e02      	cmp	r6, #2
   85b8a:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   85b8e:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   85b92:	d1cd      	bne.n	85b30 <__register_exitproc+0x2c>
   85b94:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   85b98:	4301      	orrs	r1, r0
   85b9a:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   85b9e:	e7c7      	b.n	85b30 <__register_exitproc+0x2c>
   85ba0:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   85ba4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   85ba8:	e7bc      	b.n	85b24 <__register_exitproc+0x20>
   85baa:	6828      	ldr	r0, [r5, #0]
   85bac:	f7ff ffa8 	bl	85b00 <__retarget_lock_release_recursive>
   85bb0:	f04f 30ff 	mov.w	r0, #4294967295
   85bb4:	e7c5      	b.n	85b42 <__register_exitproc+0x3e>
   85bb6:	bf00      	nop
   85bb8:	200007d8 	.word	0x200007d8
   85bbc:	00085bfc 	.word	0x00085bfc
   85bc0:	00000000 	.word	0x00000000
   85bc4:	00000000 	.word	0x00000000
   85bc8:	00000000 	.word	0x00000000
   85bcc:	aaaaaa00 	.word	0xaaaaaa00
   85bd0:	aaaaaaaa 	.word	0xaaaaaaaa
   85bd4:	eeeeeeaa 	.word	0xeeeeeeaa
   85bd8:	eeeeeeee 	.word	0xeeeeeeee
   85bdc:	fffffeee 	.word	0xfffffeee
   85be0:	ffffffff 	.word	0xffffffff
   85be4:	ffffffff 	.word	0xffffffff
   85be8:	dfbf7fff 	.word	0xdfbf7fff
   85bec:	fdfbf7ef 	.word	0xfdfbf7ef
   85bf0:	dfbf7efc 	.word	0xdfbf7efc
   85bf4:	fdfbf7ef 	.word	0xfdfbf7ef
   85bf8:	0000007e 	.word	0x0000007e

00085bfc <_global_impure_ptr>:
   85bfc:	200003b0                                ... 

00085c00 <_init>:
   85c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85c02:	bf00      	nop
   85c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85c06:	bc08      	pop	{r3}
   85c08:	469e      	mov	lr, r3
   85c0a:	4770      	bx	lr

00085c0c <__init_array_start>:
   85c0c:	00085aa9 	.word	0x00085aa9

00085c10 <__frame_dummy_init_array_entry>:
   85c10:	000800e1                                ....

00085c14 <_fini>:
   85c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85c16:	bf00      	nop
   85c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85c1a:	bc08      	pop	{r3}
   85c1c:	469e      	mov	lr, r3
   85c1e:	4770      	bx	lr

00085c20 <__fini_array_start>:
   85c20:	000800bd 	.word	0x000800bd

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b480      	push	{r7}
20000002:	b089      	sub	sp, #36	; 0x24
20000004:	af00      	add	r7, sp, #0
20000006:	60f8      	str	r0, [r7, #12]
20000008:	60b9      	str	r1, [r7, #8]
2000000a:	607a      	str	r2, [r7, #4]
2000000c:	603b      	str	r3, [r7, #0]
#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000000e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20000012:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000014:	683b      	ldr	r3, [r7, #0]
20000016:	2b00      	cmp	r3, #0
20000018:	d101      	bne.n	2000001e <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
2000001a:	2302      	movs	r3, #2
2000001c:	e03c      	b.n	20000098 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000001e:	68fb      	ldr	r3, [r7, #12]
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000026:	68fb      	ldr	r3, [r7, #12]
20000028:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000002a:	68bb      	ldr	r3, [r7, #8]
2000002c:	b2db      	uxtb	r3, r3
2000002e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000032:	68fb      	ldr	r3, [r7, #12]
20000034:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000036:	68fb      	ldr	r3, [r7, #12]
20000038:	689b      	ldr	r3, [r3, #8]
2000003a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000003c:	697b      	ldr	r3, [r7, #20]
2000003e:	f003 0301 	and.w	r3, r3, #1
20000042:	2b01      	cmp	r3, #1
20000044:	d0f7      	beq.n	20000036 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000046:	2300      	movs	r3, #0
20000048:	61fb      	str	r3, [r7, #28]
2000004a:	e00c      	b.n	20000066 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000004c:	69fb      	ldr	r3, [r7, #28]
2000004e:	009b      	lsls	r3, r3, #2
20000050:	69ba      	ldr	r2, [r7, #24]
20000052:	441a      	add	r2, r3
20000054:	69fb      	ldr	r3, [r7, #28]
20000056:	009b      	lsls	r3, r3, #2
20000058:	6839      	ldr	r1, [r7, #0]
2000005a:	440b      	add	r3, r1
2000005c:	6812      	ldr	r2, [r2, #0]
2000005e:	601a      	str	r2, [r3, #0]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000060:	69fb      	ldr	r3, [r7, #28]
20000062:	3301      	adds	r3, #1
20000064:	61fb      	str	r3, [r7, #28]
20000066:	69fa      	ldr	r2, [r7, #28]
20000068:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000006a:	429a      	cmp	r2, r3
2000006c:	d3ee      	bcc.n	2000004c <efc_perform_read_sequence+0x4c>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	b2db      	uxtb	r3, r3
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000072:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000007a:	68fb      	ldr	r3, [r7, #12]
2000007c:	689b      	ldr	r3, [r3, #8]
2000007e:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	697b      	ldr	r3, [r7, #20]
20000082:	f003 0301 	and.w	r3, r3, #1
20000086:	2b01      	cmp	r3, #1
20000088:	d1f7      	bne.n	2000007a <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	681b      	ldr	r3, [r3, #0]
2000008e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
20000096:	2300      	movs	r3, #0
}
20000098:	4618      	mov	r0, r3
2000009a:	3724      	adds	r7, #36	; 0x24
2000009c:	46bd      	mov	sp, r7
2000009e:	bc80      	pop	{r7}
200000a0:	4770      	bx	lr

200000a2 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000a2:	b480      	push	{r7}
200000a4:	b083      	sub	sp, #12
200000a6:	af00      	add	r7, sp, #0
200000a8:	6078      	str	r0, [r7, #4]
200000aa:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	683a      	ldr	r2, [r7, #0]
200000b0:	601a      	str	r2, [r3, #0]
}
200000b2:	bf00      	nop
200000b4:	370c      	adds	r7, #12
200000b6:	46bd      	mov	sp, r7
200000b8:	bc80      	pop	{r7}
200000ba:	4770      	bx	lr

200000bc <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000bc:	b480      	push	{r7}
200000be:	b085      	sub	sp, #20
200000c0:	af00      	add	r7, sp, #0
200000c2:	6078      	str	r0, [r7, #4]
200000c4:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000c6:	687b      	ldr	r3, [r7, #4]
200000c8:	683a      	ldr	r2, [r7, #0]
200000ca:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	689b      	ldr	r3, [r3, #8]
200000d0:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000d2:	68fb      	ldr	r3, [r7, #12]
200000d4:	f003 0301 	and.w	r3, r3, #1
200000d8:	2b01      	cmp	r3, #1
200000da:	d1f7      	bne.n	200000cc <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000dc:	68fb      	ldr	r3, [r7, #12]
200000de:	f003 0306 	and.w	r3, r3, #6
}
200000e2:	4618      	mov	r0, r3
200000e4:	3714      	adds	r7, #20
200000e6:	46bd      	mov	sp, r7
200000e8:	bc80      	pop	{r7}
200000ea:	4770      	bx	lr

200000ec <SystemInit>:
{
200000ec:	b480      	push	{r7}
200000ee:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000f0:	4b2a      	ldr	r3, [pc, #168]	; (2000019c <SystemInit+0xb0>)
200000f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000f6:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000f8:	4b29      	ldr	r3, [pc, #164]	; (200001a0 <SystemInit+0xb4>)
200000fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000fe:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000100:	4b28      	ldr	r3, [pc, #160]	; (200001a4 <SystemInit+0xb8>)
20000102:	6a1b      	ldr	r3, [r3, #32]
20000104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20000108:	2b00      	cmp	r3, #0
2000010a:	d109      	bne.n	20000120 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000010c:	4b25      	ldr	r3, [pc, #148]	; (200001a4 <SystemInit+0xb8>)
2000010e:	4a26      	ldr	r2, [pc, #152]	; (200001a8 <SystemInit+0xbc>)
20000110:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000112:	bf00      	nop
20000114:	4b23      	ldr	r3, [pc, #140]	; (200001a4 <SystemInit+0xb8>)
20000116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000118:	f003 0301 	and.w	r3, r3, #1
2000011c:	2b00      	cmp	r3, #0
2000011e:	d0f9      	beq.n	20000114 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000120:	4b20      	ldr	r3, [pc, #128]	; (200001a4 <SystemInit+0xb8>)
20000122:	4a22      	ldr	r2, [pc, #136]	; (200001ac <SystemInit+0xc0>)
20000124:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000126:	bf00      	nop
20000128:	4b1e      	ldr	r3, [pc, #120]	; (200001a4 <SystemInit+0xb8>)
2000012a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000012c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000130:	2b00      	cmp	r3, #0
20000132:	d0f9      	beq.n	20000128 <SystemInit+0x3c>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000134:	4b1b      	ldr	r3, [pc, #108]	; (200001a4 <SystemInit+0xb8>)
20000136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000138:	f023 0303 	bic.w	r3, r3, #3
2000013c:	4a19      	ldr	r2, [pc, #100]	; (200001a4 <SystemInit+0xb8>)
2000013e:	f043 0301 	orr.w	r3, r3, #1
20000142:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000144:	bf00      	nop
20000146:	4b17      	ldr	r3, [pc, #92]	; (200001a4 <SystemInit+0xb8>)
20000148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000014a:	f003 0308 	and.w	r3, r3, #8
2000014e:	2b00      	cmp	r3, #0
20000150:	d0f9      	beq.n	20000146 <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000152:	4b14      	ldr	r3, [pc, #80]	; (200001a4 <SystemInit+0xb8>)
20000154:	4a16      	ldr	r2, [pc, #88]	; (200001b0 <SystemInit+0xc4>)
20000156:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000158:	bf00      	nop
2000015a:	4b12      	ldr	r3, [pc, #72]	; (200001a4 <SystemInit+0xb8>)
2000015c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000015e:	f003 0302 	and.w	r3, r3, #2
20000162:	2b00      	cmp	r3, #0
20000164:	d0f9      	beq.n	2000015a <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000166:	4b0f      	ldr	r3, [pc, #60]	; (200001a4 <SystemInit+0xb8>)
20000168:	2211      	movs	r2, #17
2000016a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000016c:	bf00      	nop
2000016e:	4b0d      	ldr	r3, [pc, #52]	; (200001a4 <SystemInit+0xb8>)
20000170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000172:	f003 0308 	and.w	r3, r3, #8
20000176:	2b00      	cmp	r3, #0
20000178:	d0f9      	beq.n	2000016e <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000017a:	4b0a      	ldr	r3, [pc, #40]	; (200001a4 <SystemInit+0xb8>)
2000017c:	2212      	movs	r2, #18
2000017e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000180:	bf00      	nop
20000182:	4b08      	ldr	r3, [pc, #32]	; (200001a4 <SystemInit+0xb8>)
20000184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000186:	f003 0308 	and.w	r3, r3, #8
2000018a:	2b00      	cmp	r3, #0
2000018c:	d0f9      	beq.n	20000182 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2000018e:	4b09      	ldr	r3, [pc, #36]	; (200001b4 <SystemInit+0xc8>)
20000190:	4a09      	ldr	r2, [pc, #36]	; (200001b8 <SystemInit+0xcc>)
20000192:	601a      	str	r2, [r3, #0]
}
20000194:	bf00      	nop
20000196:	46bd      	mov	sp, r7
20000198:	bc80      	pop	{r7}
2000019a:	4770      	bx	lr
2000019c:	400e0800 	.word	0x400e0800
200001a0:	400e0a00 	.word	0x400e0a00
200001a4:	400e0400 	.word	0x400e0400
200001a8:	00370809 	.word	0x00370809
200001ac:	01370809 	.word	0x01370809
200001b0:	200f3f01 	.word	0x200f3f01
200001b4:	20000298 	.word	0x20000298
200001b8:	05b8d800 	.word	0x05b8d800

200001bc <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200001bc:	b480      	push	{r7}
200001be:	b083      	sub	sp, #12
200001c0:	af00      	add	r7, sp, #0
200001c2:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200001c4:	687b      	ldr	r3, [r7, #4]
200001c6:	4a1f      	ldr	r2, [pc, #124]	; (20000244 <system_init_flash+0x88>)
200001c8:	4293      	cmp	r3, r2
200001ca:	d806      	bhi.n	200001da <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200001cc:	4b1e      	ldr	r3, [pc, #120]	; (20000248 <system_init_flash+0x8c>)
200001ce:	2200      	movs	r2, #0
200001d0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200001d2:	4b1e      	ldr	r3, [pc, #120]	; (2000024c <system_init_flash+0x90>)
200001d4:	2200      	movs	r2, #0
200001d6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
	}
}
200001d8:	e02e      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200001da:	687b      	ldr	r3, [r7, #4]
200001dc:	4a1c      	ldr	r2, [pc, #112]	; (20000250 <system_init_flash+0x94>)
200001de:	4293      	cmp	r3, r2
200001e0:	d808      	bhi.n	200001f4 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200001e2:	4b19      	ldr	r3, [pc, #100]	; (20000248 <system_init_flash+0x8c>)
200001e4:	f44f 7280 	mov.w	r2, #256	; 0x100
200001e8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200001ea:	4b18      	ldr	r3, [pc, #96]	; (2000024c <system_init_flash+0x90>)
200001ec:	f44f 7280 	mov.w	r2, #256	; 0x100
200001f0:	601a      	str	r2, [r3, #0]
}
200001f2:	e021      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200001f4:	687b      	ldr	r3, [r7, #4]
200001f6:	4a17      	ldr	r2, [pc, #92]	; (20000254 <system_init_flash+0x98>)
200001f8:	4293      	cmp	r3, r2
200001fa:	d808      	bhi.n	2000020e <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200001fc:	4b12      	ldr	r3, [pc, #72]	; (20000248 <system_init_flash+0x8c>)
200001fe:	f44f 7200 	mov.w	r2, #512	; 0x200
20000202:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000204:	4b11      	ldr	r3, [pc, #68]	; (2000024c <system_init_flash+0x90>)
20000206:	f44f 7200 	mov.w	r2, #512	; 0x200
2000020a:	601a      	str	r2, [r3, #0]
}
2000020c:	e014      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000020e:	687b      	ldr	r3, [r7, #4]
20000210:	4a11      	ldr	r2, [pc, #68]	; (20000258 <system_init_flash+0x9c>)
20000212:	4293      	cmp	r3, r2
20000214:	d808      	bhi.n	20000228 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000216:	4b0c      	ldr	r3, [pc, #48]	; (20000248 <system_init_flash+0x8c>)
20000218:	f44f 7240 	mov.w	r2, #768	; 0x300
2000021c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <system_init_flash+0x90>)
20000220:	f44f 7240 	mov.w	r2, #768	; 0x300
20000224:	601a      	str	r2, [r3, #0]
}
20000226:	e007      	b.n	20000238 <system_init_flash+0x7c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000228:	4b07      	ldr	r3, [pc, #28]	; (20000248 <system_init_flash+0x8c>)
2000022a:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000022e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000230:	4b06      	ldr	r3, [pc, #24]	; (2000024c <system_init_flash+0x90>)
20000232:	f44f 6280 	mov.w	r2, #1024	; 0x400
20000236:	601a      	str	r2, [r3, #0]
}
20000238:	bf00      	nop
2000023a:	370c      	adds	r7, #12
2000023c:	46bd      	mov	sp, r7
2000023e:	bc80      	pop	{r7}
20000240:	4770      	bx	lr
20000242:	bf00      	nop
20000244:	016e35ff 	.word	0x016e35ff
20000248:	400e0800 	.word	0x400e0800
2000024c:	400e0a00 	.word	0x400e0a00
20000250:	026259ff 	.word	0x026259ff
20000254:	044aa1ff 	.word	0x044aa1ff
20000258:	0501bcff 	.word	0x0501bcff

2000025c <usb_serial_number>:
2000025c:	30303030 30303030 30303030 44414544     000000000000DEAD
2000026c:	46454542 00000000 00000000 00000000     BEEF............
2000027c:	00000000                                ....

20000280 <pwr_list>:
20000280:	000808b9 000808d9 000808f9              ............

2000028c <main_b_vendor_enable>:
2000028c:	00000001                                ....

20000290 <xram>:
20000290:	60000000                                ...`

20000294 <g_interrupt_enabled>:
20000294:	00000001                                ....

20000298 <SystemCoreClock>:
20000298:	003d0900                                ..=.

2000029c <udc_string_desc_languageid>:
2000029c:	04090304                                ....

200002a0 <udc_string_manufacturer_name>:
200002a0:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
200002b0:	636e4920 0000002e                        Inc....

200002b8 <udc_string_product_name>:
200002b8:	6c6c6142 69747369 65472063 5743206c     Ballistic Gel CW
200002c8:	00313235                                521.

200002cc <udc_string_desc>:
200002cc:	00000300 00000000 00000000 00000000     ................
200002dc:	00000000 00000000 00000000 00000000     ................
200002ec:	00000000 00000000 00000000 00000000     ................
200002fc:	00000000 00000000 00000000 00000000     ................
2000030c:	00000000                                ....

20000310 <udi_api_vendor>:
20000310:	00083a69 00083aa9 00083ac5 00083b19     i:...:...:...;..
20000320:	00000000                                ....

20000324 <udc_device_desc>:
20000324:	02000112 40000000 c5212b3e 02010100     .......@>+!.....
20000334:	00000103                                ....

20000338 <udc_device_qual>:
20000338:	0200060a 40000000 00000001              .......@....

20000344 <udc_desc_fs>:
20000344:	00200209 80000101 000409fa ffff0200     .. .............
20000354:	050700ff 00400281 02050700 00004002     ......@......@..

20000364 <udc_desc_hs>:
20000364:	00200209 80000101 000409fa ffff0200     .. .............
20000374:	050700ff 02000281 02050700 00020002     ................

20000384 <udi_apis>:
20000384:	20000310                                ... 

20000388 <udc_config_lsfs>:
20000388:	20000344 20000384                       D.. ... 

20000390 <udc_config_hs>:
20000390:	20000364 20000384                       d.. ... 

20000398 <udc_config>:
20000398:	20000324 20000388 20000324 20000338     $.. ... $.. 8.. 
200003a8:	20000390 00000000                       ... ....

200003b0 <impure_data>:
200003b0:	00000000 2000069c 20000704 2000076c     ....... ... l.. 
200003c0:	00000000 00000000 00000000 00000000     ................
200003d0:	00000000 00000000 00000000 00000000     ................
200003e0:	00000000 00000000 00000000 00000000     ................
200003f0:	00000000 00000000 00000000 00000000     ................
20000400:	00000000 00000000 00000000 00000000     ................
20000410:	00000000 00000000 00000000 00000000     ................
20000420:	00000000 00000000 00000000 00000000     ................
20000430:	00000000 00000000 00000000 00000000     ................
20000440:	00000000 00000000 00000000 00000000     ................
20000450:	00000000 00000000 00000001 00000000     ................
20000460:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
20000470:	00000000 00000000 00000000 00000000     ................
20000480:	00000000 00000000 00000000 00000000     ................
20000490:	00000000 00000000 00000000 00000000     ................
200004a0:	00000000 00000000 00000000 00000000     ................
200004b0:	00000000 00000000 00000000 00000000     ................
200004c0:	00000000 00000000 00000000 00000000     ................
200004d0:	00000000 00000000 00000000 00000000     ................
200004e0:	00000000 00000000 00000000 00000000     ................
200004f0:	00000000 00000000 00000000 00000000     ................
20000500:	00000000 00000000 00000000 00000000     ................
20000510:	00000000 00000000 00000000 00000000     ................
20000520:	00000000 00000000 00000000 00000000     ................
20000530:	00000000 00000000 00000000 00000000     ................
20000540:	00000000 00000000 00000000 00000000     ................
20000550:	00000000 00000000 00000000 00000000     ................
20000560:	00000000 00000000 00000000 00000000     ................
20000570:	00000000 00000000 00000000 00000000     ................
20000580:	00000000 00000000 00000000 00000000     ................
20000590:	00000000 00000000 00000000 00000000     ................
200005a0:	00000000 00000000 00000000 00000000     ................
200005b0:	00000000 00000000 00000000 00000000     ................
200005c0:	00000000 00000000 00000000 00000000     ................
200005d0:	00000000 00000000 00000000 00000000     ................
200005e0:	00000000 00000000 00000000 00000000     ................
200005f0:	00000000 00000000 00000000 00000000     ................
20000600:	00000000 00000000 00000000 00000000     ................
20000610:	00000000 00000000 00000000 00000000     ................
20000620:	00000000 00000000 00000000 00000000     ................
20000630:	00000000 00000000 00000000 00000000     ................
20000640:	00000000 00000000 00000000 00000000     ................
20000650:	00000000 00000000 00000000 00000000     ................
20000660:	00000000 00000000 00000000 00000000     ................
20000670:	00000000 00000000 00000000 00000000     ................
20000680:	00000000 00000000 00000000 00000000     ................
20000690:	00000000 00000000 00000000 00000000     ................
200006a0:	00000000 00000000 00000000 00000000     ................
200006b0:	00000000 00000000 00000000 00000000     ................
200006c0:	00000000 00000000 00000000 00000000     ................
200006d0:	00000000 00000000 00000000 00000000     ................
200006e0:	00000000 00000000 00000000 00000000     ................
200006f0:	00000000 00000000 00000000 00000000     ................
20000700:	00000000 00000000 00000000 00000000     ................
20000710:	00000000 00000000 00000000 00000000     ................
20000720:	00000000 00000000 00000000 00000000     ................
20000730:	00000000 00000000 00000000 00000000     ................
20000740:	00000000 00000000 00000000 00000000     ................
20000750:	00000000 00000000 00000000 00000000     ................
20000760:	00000000 00000000 00000000 00000000     ................
20000770:	00000000 00000000 00000000 00000000     ................
20000780:	00000000 00000000 00000000 00000000     ................
20000790:	00000000 00000000 00000000 00000000     ................
200007a0:	00000000 00000000 00000000 00000000     ................
200007b0:	00000000 00000000 00000000 00000000     ................
200007c0:	00000000 00000000 00000000 00000000     ................
200007d0:	00000000 00000000                       ........

200007d8 <__atexit_recursive_mutex>:
200007d8:	20000d7c                                |.. 
