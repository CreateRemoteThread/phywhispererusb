
phywhisperer-SAM3U1C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005cbc  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000007dc  20000000  00085cbc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000005c0  200007dc  00086498  000207dc  2**2
                  ALLOC
  3 .stack        00000400  20080000  20080000  00030000  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000207dc  2**0
                  CONTENTS, READONLY
  5 .comment      00000075  00000000  00000000  00020805  2**0
                  CONTENTS, READONLY
  6 .debug_info   000203df  00000000  00000000  0002087a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000411d  00000000  00000000  00040c59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000085ca  00000000  00000000  00044d76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f98  00000000  00000000  0004d340  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e48  00000000  00000000  0004e2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017ec7  00000000  00000000  0004f120  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013e4d  00000000  00000000  00066fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00058e5b  00000000  00000000  0007ae34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000435c  00000000  00000000  000d3c90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 04 08 20 cd 36 08 00 95 46 08 00 95 46 08 00     ... .6...F...F..
   80010:	95 46 08 00 95 46 08 00 95 46 08 00 00 00 00 00     .F...F...F......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 95 46 08 00     .............F..
   80030:	95 46 08 00 00 00 00 00 95 46 08 00 95 46 08 00     .F.......F...F..
   80040:	95 46 08 00 95 46 08 00 95 46 08 00 95 46 08 00     .F...F...F...F..
   80050:	95 46 08 00 95 46 08 00 95 46 08 00 95 46 08 00     .F...F...F...F..
   80060:	95 46 08 00 95 46 08 00 55 1a 08 00 6d 1a 08 00     .F...F..U...m...
   80070:	95 46 08 00 95 46 08 00 95 46 08 00 95 46 08 00     .F...F...F...F..
   80080:	95 46 08 00 95 46 08 00 95 46 08 00 95 46 08 00     .F...F...F...F..
   80090:	95 46 08 00 95 46 08 00 95 46 08 00 95 46 08 00     .F...F...F...F..
   800a0:	95 46 08 00 95 46 08 00 95 46 08 00 95 46 08 00     .F...F...F...F..
   800b0:	95 46 08 00 59 1c 08 00 95 46 08 00                 .F..Y....F..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	200007dc 	.word	0x200007dc
   800d8:	00000000 	.word	0x00000000
   800dc:	00085cbc 	.word	0x00085cbc

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	200007e0 	.word	0x200007e0
   800f8:	00085cbc 	.word	0x00085cbc

000800fc <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   800fc:	b580      	push	{r7, lr}
   800fe:	b082      	sub	sp, #8
   80100:	af00      	add	r7, sp, #0
   80102:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80104:	687b      	ldr	r3, [r7, #4]
   80106:	2b07      	cmp	r3, #7
   80108:	d82e      	bhi.n	80168 <osc_enable+0x6c>
   8010a:	a201      	add	r2, pc, #4	; (adr r2, 80110 <osc_enable+0x14>)
   8010c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80110:	00080167 	.word	0x00080167
   80114:	00080131 	.word	0x00080131
   80118:	00080139 	.word	0x00080139
   8011c:	00080141 	.word	0x00080141
   80120:	00080149 	.word	0x00080149
   80124:	00080151 	.word	0x00080151
   80128:	00080159 	.word	0x00080159
   8012c:	00080161 	.word	0x00080161
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80130:	2000      	movs	r0, #0
   80132:	4b0f      	ldr	r3, [pc, #60]	; (80170 <osc_enable+0x74>)
   80134:	4798      	blx	r3
		break;
   80136:	e017      	b.n	80168 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80138:	2001      	movs	r0, #1
   8013a:	4b0d      	ldr	r3, [pc, #52]	; (80170 <osc_enable+0x74>)
   8013c:	4798      	blx	r3
		break;
   8013e:	e013      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80140:	2000      	movs	r0, #0
   80142:	4b0c      	ldr	r3, [pc, #48]	; (80174 <osc_enable+0x78>)
   80144:	4798      	blx	r3
		break;
   80146:	e00f      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80148:	2010      	movs	r0, #16
   8014a:	4b0a      	ldr	r3, [pc, #40]	; (80174 <osc_enable+0x78>)
   8014c:	4798      	blx	r3
		break;
   8014e:	e00b      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80150:	2020      	movs	r0, #32
   80152:	4b08      	ldr	r3, [pc, #32]	; (80174 <osc_enable+0x78>)
   80154:	4798      	blx	r3
		break;
   80156:	e007      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80158:	203e      	movs	r0, #62	; 0x3e
   8015a:	4b07      	ldr	r3, [pc, #28]	; (80178 <osc_enable+0x7c>)
   8015c:	4798      	blx	r3
				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
		break;
   8015e:	e003      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_osc_bypass_main_xtal();
   80160:	4b06      	ldr	r3, [pc, #24]	; (8017c <osc_enable+0x80>)
   80162:	4798      	blx	r3
		break;
   80164:	e000      	b.n	80168 <osc_enable+0x6c>
		break;
   80166:	bf00      	nop
	}
}
   80168:	bf00      	nop
   8016a:	3708      	adds	r7, #8
   8016c:	46bd      	mov	sp, r7
   8016e:	bd80      	pop	{r7, pc}
   80170:	00083c45 	.word	0x00083c45
   80174:	00083cb1 	.word	0x00083cb1
   80178:	00083d25 	.word	0x00083d25
   8017c:	00083d71 	.word	0x00083d71

00080180 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   80180:	b580      	push	{r7, lr}
   80182:	b082      	sub	sp, #8
   80184:	af00      	add	r7, sp, #0
   80186:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80188:	687b      	ldr	r3, [r7, #4]
   8018a:	2b07      	cmp	r3, #7
   8018c:	d82f      	bhi.n	801ee <osc_is_ready+0x6e>
   8018e:	a201      	add	r2, pc, #4	; (adr r2, 80194 <osc_is_ready+0x14>)
   80190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80194:	000801b5 	.word	0x000801b5
   80198:	000801b9 	.word	0x000801b9
   8019c:	000801b9 	.word	0x000801b9
   801a0:	000801cb 	.word	0x000801cb
   801a4:	000801cb 	.word	0x000801cb
   801a8:	000801cb 	.word	0x000801cb
   801ac:	000801dd 	.word	0x000801dd
   801b0:	000801dd 	.word	0x000801dd
	case OSC_SLCK_32K_RC:
		return 1;
   801b4:	2301      	movs	r3, #1
   801b6:	e01b      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   801b8:	4b0f      	ldr	r3, [pc, #60]	; (801f8 <osc_is_ready+0x78>)
   801ba:	4798      	blx	r3
   801bc:	4603      	mov	r3, r0
   801be:	2b00      	cmp	r3, #0
   801c0:	bf14      	ite	ne
   801c2:	2301      	movne	r3, #1
   801c4:	2300      	moveq	r3, #0
   801c6:	b2db      	uxtb	r3, r3
   801c8:	e012      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();
   801ca:	4b0c      	ldr	r3, [pc, #48]	; (801fc <osc_is_ready+0x7c>)
   801cc:	4798      	blx	r3
   801ce:	4603      	mov	r3, r0
   801d0:	2b00      	cmp	r3, #0
   801d2:	bf14      	ite	ne
   801d4:	2301      	movne	r3, #1
   801d6:	2300      	moveq	r3, #0
   801d8:	b2db      	uxtb	r3, r3
   801da:	e009      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   801dc:	4b08      	ldr	r3, [pc, #32]	; (80200 <osc_is_ready+0x80>)
   801de:	4798      	blx	r3
   801e0:	4603      	mov	r3, r0
   801e2:	2b00      	cmp	r3, #0
   801e4:	bf14      	ite	ne
   801e6:	2301      	movne	r3, #1
   801e8:	2300      	moveq	r3, #0
   801ea:	b2db      	uxtb	r3, r3
   801ec:	e000      	b.n	801f0 <osc_is_ready+0x70>
	}

	return 0;
   801ee:	2300      	movs	r3, #0
}
   801f0:	4618      	mov	r0, r3
   801f2:	3708      	adds	r7, #8
   801f4:	46bd      	mov	sp, r7
   801f6:	bd80      	pop	{r7, pc}
   801f8:	00083c7d 	.word	0x00083c7d
   801fc:	00083d0d 	.word	0x00083d0d
   80200:	00083dbd 	.word	0x00083dbd

00080204 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80204:	b480      	push	{r7}
   80206:	b083      	sub	sp, #12
   80208:	af00      	add	r7, sp, #0
   8020a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8020c:	687b      	ldr	r3, [r7, #4]
   8020e:	2b07      	cmp	r3, #7
   80210:	d823      	bhi.n	8025a <osc_get_rate+0x56>
   80212:	a201      	add	r2, pc, #4	; (adr r2, 80218 <osc_get_rate+0x14>)
   80214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80218:	00080239 	.word	0x00080239
   8021c:	0008023f 	.word	0x0008023f
   80220:	00080243 	.word	0x00080243
   80224:	00080247 	.word	0x00080247
   80228:	0008024b 	.word	0x0008024b
   8022c:	0008024f 	.word	0x0008024f
   80230:	00080253 	.word	0x00080253
   80234:	00080257 	.word	0x00080257
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80238:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8023c:	e00e      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8023e:	2300      	movs	r3, #0
   80240:	e00c      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80242:	2300      	movs	r3, #0
   80244:	e00a      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80246:	4b08      	ldr	r3, [pc, #32]	; (80268 <osc_get_rate+0x64>)
   80248:	e008      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8024a:	4b08      	ldr	r3, [pc, #32]	; (8026c <osc_get_rate+0x68>)
   8024c:	e006      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8024e:	4b08      	ldr	r3, [pc, #32]	; (80270 <osc_get_rate+0x6c>)
   80250:	e004      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80252:	4b07      	ldr	r3, [pc, #28]	; (80270 <osc_get_rate+0x6c>)
   80254:	e002      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80256:	4b06      	ldr	r3, [pc, #24]	; (80270 <osc_get_rate+0x6c>)
   80258:	e000      	b.n	8025c <osc_get_rate+0x58>
	}

	return 0;
   8025a:	2300      	movs	r3, #0
}
   8025c:	4618      	mov	r0, r3
   8025e:	370c      	adds	r7, #12
   80260:	46bd      	mov	sp, r7
   80262:	bc80      	pop	{r7}
   80264:	4770      	bx	lr
   80266:	bf00      	nop
   80268:	003d0900 	.word	0x003d0900
   8026c:	007a1200 	.word	0x007a1200
   80270:	00b71b00 	.word	0x00b71b00

00080274 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   80274:	b580      	push	{r7, lr}
   80276:	b082      	sub	sp, #8
   80278:	af00      	add	r7, sp, #0
   8027a:	4603      	mov	r3, r0
   8027c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8027e:	bf00      	nop
   80280:	79fb      	ldrb	r3, [r7, #7]
   80282:	4618      	mov	r0, r3
   80284:	4b05      	ldr	r3, [pc, #20]	; (8029c <osc_wait_ready+0x28>)
   80286:	4798      	blx	r3
   80288:	4603      	mov	r3, r0
   8028a:	f083 0301 	eor.w	r3, r3, #1
   8028e:	b2db      	uxtb	r3, r3
   80290:	2b00      	cmp	r3, #0
   80292:	d1f5      	bne.n	80280 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   80294:	bf00      	nop
   80296:	3708      	adds	r7, #8
   80298:	46bd      	mov	sp, r7
   8029a:	bd80      	pop	{r7, pc}
   8029c:	00080181 	.word	0x00080181

000802a0 <pll_config_init>:
 *       hardware mul+1 is hidden in this implementation. Use mul as mul
 *       effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802a0:	b580      	push	{r7, lr}
   802a2:	b086      	sub	sp, #24
   802a4:	af00      	add	r7, sp, #0
   802a6:	60f8      	str	r0, [r7, #12]
   802a8:	607a      	str	r2, [r7, #4]
   802aa:	603b      	str	r3, [r7, #0]
   802ac:	460b      	mov	r3, r1
   802ae:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802b0:	687b      	ldr	r3, [r7, #4]
   802b2:	2b00      	cmp	r3, #0
   802b4:	d107      	bne.n	802c6 <pll_config_init+0x26>
   802b6:	683b      	ldr	r3, [r7, #0]
   802b8:	2b00      	cmp	r3, #0
   802ba:	d104      	bne.n	802c6 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   802bc:	68fb      	ldr	r3, [r7, #12]
   802be:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   802c2:	601a      	str	r2, [r3, #0]
   802c4:	e019      	b.n	802fa <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   802c6:	7afb      	ldrb	r3, [r7, #11]
   802c8:	4618      	mov	r0, r3
   802ca:	4b0e      	ldr	r3, [pc, #56]	; (80304 <pll_config_init+0x64>)
   802cc:	4798      	blx	r3
   802ce:	4602      	mov	r2, r0
   802d0:	687b      	ldr	r3, [r7, #4]
   802d2:	fbb2 f3f3 	udiv	r3, r2, r3
   802d6:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   802d8:	697b      	ldr	r3, [r7, #20]
   802da:	683a      	ldr	r2, [r7, #0]
   802dc:	fb02 f303 	mul.w	r3, r2, r3
   802e0:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802e2:	683b      	ldr	r3, [r7, #0]
   802e4:	3b01      	subs	r3, #1
   802e6:	041a      	lsls	r2, r3, #16
   802e8:	4b07      	ldr	r3, [pc, #28]	; (80308 <pll_config_init+0x68>)
   802ea:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802ec:	687a      	ldr	r2, [r7, #4]
   802ee:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802f0:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802f2:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802f6:	68fb      	ldr	r3, [r7, #12]
   802f8:	601a      	str	r2, [r3, #0]
			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
   802fa:	bf00      	nop
   802fc:	3718      	adds	r7, #24
   802fe:	46bd      	mov	sp, r7
   80300:	bd80      	pop	{r7, pc}
   80302:	bf00      	nop
   80304:	00080205 	.word	0x00080205
   80308:	07ff0000 	.word	0x07ff0000

0008030c <pll_enable>:
	}
}

static inline void pll_enable(const struct pll_config *p_cfg,
		uint32_t ul_pll_id)
{
   8030c:	b580      	push	{r7, lr}
   8030e:	b082      	sub	sp, #8
   80310:	af00      	add	r7, sp, #0
   80312:	6078      	str	r0, [r7, #4]
   80314:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80316:	683b      	ldr	r3, [r7, #0]
   80318:	2b00      	cmp	r3, #0
   8031a:	d108      	bne.n	8032e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   8031c:	4b09      	ldr	r3, [pc, #36]	; (80344 <pll_enable+0x38>)
   8031e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80320:	687b      	ldr	r3, [r7, #4]
   80322:	681b      	ldr	r3, [r3, #0]
   80324:	4a08      	ldr	r2, [pc, #32]	; (80348 <pll_enable+0x3c>)
   80326:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8032a:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   8032c:	e005      	b.n	8033a <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8032e:	687b      	ldr	r3, [r7, #4]
   80330:	681b      	ldr	r3, [r3, #0]
   80332:	4a05      	ldr	r2, [pc, #20]	; (80348 <pll_enable+0x3c>)
   80334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80338:	61d3      	str	r3, [r2, #28]
}
   8033a:	bf00      	nop
   8033c:	3708      	adds	r7, #8
   8033e:	46bd      	mov	sp, r7
   80340:	bd80      	pop	{r7, pc}
   80342:	bf00      	nop
   80344:	00083e2d 	.word	0x00083e2d
   80348:	400e0400 	.word	0x400e0400

0008034c <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   8034c:	b580      	push	{r7, lr}
   8034e:	b082      	sub	sp, #8
   80350:	af00      	add	r7, sp, #0
   80352:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80354:	687b      	ldr	r3, [r7, #4]
   80356:	2b00      	cmp	r3, #0
   80358:	d103      	bne.n	80362 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8035a:	4b05      	ldr	r3, [pc, #20]	; (80370 <pll_is_locked+0x24>)
   8035c:	4798      	blx	r3
   8035e:	4603      	mov	r3, r0
   80360:	e002      	b.n	80368 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   80362:	4b04      	ldr	r3, [pc, #16]	; (80374 <pll_is_locked+0x28>)
   80364:	4798      	blx	r3
   80366:	4603      	mov	r3, r0
	}
}
   80368:	4618      	mov	r0, r3
   8036a:	3708      	adds	r7, #8
   8036c:	46bd      	mov	sp, r7
   8036e:	bd80      	pop	{r7, pc}
   80370:	00083e45 	.word	0x00083e45
   80374:	00083e79 	.word	0x00083e79

00080378 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   80378:	b580      	push	{r7, lr}
   8037a:	b082      	sub	sp, #8
   8037c:	af00      	add	r7, sp, #0
   8037e:	4603      	mov	r3, r0
   80380:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80382:	79fb      	ldrb	r3, [r7, #7]
   80384:	3b03      	subs	r3, #3
   80386:	2b04      	cmp	r3, #4
   80388:	d808      	bhi.n	8039c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8038a:	79fb      	ldrb	r3, [r7, #7]
   8038c:	4618      	mov	r0, r3
   8038e:	4b06      	ldr	r3, [pc, #24]	; (803a8 <pll_enable_source+0x30>)
   80390:	4798      	blx	r3
		osc_wait_ready(e_src);
   80392:	79fb      	ldrb	r3, [r7, #7]
   80394:	4618      	mov	r0, r3
   80396:	4b05      	ldr	r3, [pc, #20]	; (803ac <pll_enable_source+0x34>)
   80398:	4798      	blx	r3
		break;
   8039a:	e000      	b.n	8039e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   8039c:	bf00      	nop
	}
}
   8039e:	bf00      	nop
   803a0:	3708      	adds	r7, #8
   803a2:	46bd      	mov	sp, r7
   803a4:	bd80      	pop	{r7, pc}
   803a6:	bf00      	nop
   803a8:	000800fd 	.word	0x000800fd
   803ac:	00080275 	.word	0x00080275

000803b0 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int ul_pll_id)
{
   803b0:	b590      	push	{r4, r7, lr}
   803b2:	b085      	sub	sp, #20
   803b4:	af00      	add	r7, sp, #0
   803b6:	6078      	str	r0, [r7, #4]
	struct pll_config pllcfg;

	if (pll_is_locked(ul_pll_id)) {
   803b8:	6878      	ldr	r0, [r7, #4]
   803ba:	4b21      	ldr	r3, [pc, #132]	; (80440 <pll_enable_config_defaults+0x90>)
   803bc:	4798      	blx	r3
   803be:	4603      	mov	r3, r0
   803c0:	2b00      	cmp	r3, #0
   803c2:	d139      	bne.n	80438 <pll_enable_config_defaults+0x88>
		return; // Pll already running
	}
	switch (ul_pll_id) {
   803c4:	687b      	ldr	r3, [r7, #4]
   803c6:	2b00      	cmp	r3, #0
   803c8:	d003      	beq.n	803d2 <pll_enable_config_defaults+0x22>
   803ca:	687b      	ldr	r3, [r7, #4]
   803cc:	2b01      	cmp	r3, #1
   803ce:	d015      	beq.n	803fc <pll_enable_config_defaults+0x4c>
				CONFIG_PLL1_MUL);
		break;
#endif
	default:
		Assert(false);
		break;
   803d0:	e024      	b.n	8041c <pll_enable_config_defaults+0x6c>
		pll_enable_source(CONFIG_PLL0_SOURCE);
   803d2:	2006      	movs	r0, #6
   803d4:	4b1b      	ldr	r3, [pc, #108]	; (80444 <pll_enable_config_defaults+0x94>)
   803d6:	4798      	blx	r3
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   803d8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   803dc:	4b1a      	ldr	r3, [pc, #104]	; (80448 <pll_enable_config_defaults+0x98>)
   803de:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   803e0:	bf00      	nop
   803e2:	4b1a      	ldr	r3, [pc, #104]	; (8044c <pll_enable_config_defaults+0x9c>)
   803e4:	4798      	blx	r3
   803e6:	4603      	mov	r3, r0
   803e8:	2b00      	cmp	r3, #0
   803ea:	d0fa      	beq.n	803e2 <pll_enable_config_defaults+0x32>
		pll_config_init(&pllcfg,
   803ec:	f107 000c 	add.w	r0, r7, #12
   803f0:	2310      	movs	r3, #16
   803f2:	2201      	movs	r2, #1
   803f4:	2106      	movs	r1, #6
   803f6:	4c16      	ldr	r4, [pc, #88]	; (80450 <pll_enable_config_defaults+0xa0>)
   803f8:	47a0      	blx	r4
		break;
   803fa:	e00f      	b.n	8041c <pll_enable_config_defaults+0x6c>
		if (pmc_osc_is_bypassed_main_xtal()) {
   803fc:	4b15      	ldr	r3, [pc, #84]	; (80454 <pll_enable_config_defaults+0xa4>)
   803fe:	4798      	blx	r3
   80400:	4603      	mov	r3, r0
   80402:	2b00      	cmp	r3, #0
   80404:	d102      	bne.n	8040c <pll_enable_config_defaults+0x5c>
			pll_enable_source(CONFIG_PLL1_SOURCE);
   80406:	2006      	movs	r0, #6
   80408:	4b0e      	ldr	r3, [pc, #56]	; (80444 <pll_enable_config_defaults+0x94>)
   8040a:	4798      	blx	r3
		pll_config_init(&pllcfg,
   8040c:	f107 000c 	add.w	r0, r7, #12
   80410:	2300      	movs	r3, #0
   80412:	2200      	movs	r2, #0
   80414:	2106      	movs	r1, #6
   80416:	4c0e      	ldr	r4, [pc, #56]	; (80450 <pll_enable_config_defaults+0xa0>)
   80418:	47a0      	blx	r4
		break;
   8041a:	bf00      	nop
	}
	pll_enable(&pllcfg, ul_pll_id);
   8041c:	f107 030c 	add.w	r3, r7, #12
   80420:	6879      	ldr	r1, [r7, #4]
   80422:	4618      	mov	r0, r3
   80424:	4b0c      	ldr	r3, [pc, #48]	; (80458 <pll_enable_config_defaults+0xa8>)
   80426:	4798      	blx	r3
	while (!pll_is_locked(ul_pll_id));
   80428:	bf00      	nop
   8042a:	6878      	ldr	r0, [r7, #4]
   8042c:	4b04      	ldr	r3, [pc, #16]	; (80440 <pll_enable_config_defaults+0x90>)
   8042e:	4798      	blx	r3
   80430:	4603      	mov	r3, r0
   80432:	2b00      	cmp	r3, #0
   80434:	d0f9      	beq.n	8042a <pll_enable_config_defaults+0x7a>
   80436:	e000      	b.n	8043a <pll_enable_config_defaults+0x8a>
		return; // Pll already running
   80438:	bf00      	nop
}
   8043a:	3714      	adds	r7, #20
   8043c:	46bd      	mov	sp, r7
   8043e:	bd90      	pop	{r4, r7, pc}
   80440:	0008034d 	.word	0x0008034d
   80444:	00080379 	.word	0x00080379
   80448:	00083ded 	.word	0x00083ded
   8044c:	00083dd5 	.word	0x00083dd5
   80450:	000802a1 	.word	0x000802a1
   80454:	00083da5 	.word	0x00083da5
   80458:	0008030d 	.word	0x0008030d

0008045c <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
   8045c:	b480      	push	{r7}
   8045e:	b08d      	sub	sp, #52	; 0x34
   80460:	af00      	add	r7, sp, #0
   80462:	6078      	str	r0, [r7, #4]
   80464:	6039      	str	r1, [r7, #0]
   80466:	687b      	ldr	r3, [r7, #4]
   80468:	62fb      	str	r3, [r7, #44]	; 0x2c
   8046a:	683b      	ldr	r3, [r7, #0]
   8046c:	62bb      	str	r3, [r7, #40]	; 0x28
   8046e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80470:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   80472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80474:	095a      	lsrs	r2, r3, #5
   80476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80478:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   8047a:	6a3b      	ldr	r3, [r7, #32]
   8047c:	f003 031f 	and.w	r3, r3, #31
   80480:	2101      	movs	r1, #1
   80482:	fa01 f303 	lsl.w	r3, r1, r3
   80486:	61fa      	str	r2, [r7, #28]
   80488:	61bb      	str	r3, [r7, #24]
   8048a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8048c:	617b      	str	r3, [r7, #20]
   8048e:	69fb      	ldr	r3, [r7, #28]
   80490:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80492:	693b      	ldr	r3, [r7, #16]
   80494:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80498:	f203 7306 	addw	r3, r3, #1798	; 0x706
   8049c:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
   8049e:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
   804a0:	697b      	ldr	r3, [r7, #20]
   804a2:	f003 0308 	and.w	r3, r3, #8
   804a6:	2b00      	cmp	r3, #0
   804a8:	d003      	beq.n	804b2 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   804aa:	68fb      	ldr	r3, [r7, #12]
   804ac:	69ba      	ldr	r2, [r7, #24]
   804ae:	665a      	str	r2, [r3, #100]	; 0x64
   804b0:	e002      	b.n	804b8 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
   804b2:	68fb      	ldr	r3, [r7, #12]
   804b4:	69ba      	ldr	r2, [r7, #24]
   804b6:	661a      	str	r2, [r3, #96]	; 0x60
	} else {
		base->PIO_PPDDR = mask;
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   804b8:	697b      	ldr	r3, [r7, #20]
   804ba:	f003 0320 	and.w	r3, r3, #32
   804be:	2b00      	cmp	r3, #0
   804c0:	d003      	beq.n	804ca <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   804c2:	68fb      	ldr	r3, [r7, #12]
   804c4:	69ba      	ldr	r2, [r7, #24]
   804c6:	651a      	str	r2, [r3, #80]	; 0x50
   804c8:	e002      	b.n	804d0 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_MDDR = mask;
   804ca:	68fb      	ldr	r3, [r7, #12]
   804cc:	69ba      	ldr	r2, [r7, #24]
   804ce:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   804d0:	697b      	ldr	r3, [r7, #20]
   804d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   804d6:	2b00      	cmp	r3, #0
   804d8:	d003      	beq.n	804e2 <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   804da:	68fb      	ldr	r3, [r7, #12]
   804dc:	69ba      	ldr	r2, [r7, #24]
   804de:	621a      	str	r2, [r3, #32]
   804e0:	e002      	b.n	804e8 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_IFDR = mask;
   804e2:	68fb      	ldr	r3, [r7, #12]
   804e4:	69ba      	ldr	r2, [r7, #24]
   804e6:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
   804e8:	697b      	ldr	r3, [r7, #20]
   804ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
   804ee:	2b00      	cmp	r3, #0
   804f0:	d004      	beq.n	804fc <ioport_set_pin_mode+0xa0>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   804f2:	68fb      	ldr	r3, [r7, #12]
   804f4:	69ba      	ldr	r2, [r7, #24]
   804f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   804fa:	e003      	b.n	80504 <ioport_set_pin_mode+0xa8>
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   804fc:	68fb      	ldr	r3, [r7, #12]
   804fe:	69ba      	ldr	r2, [r7, #24]
   80500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_IFSCDR = mask;
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
   80504:	697b      	ldr	r3, [r7, #20]
   80506:	f003 0301 	and.w	r3, r3, #1
   8050a:	2b00      	cmp	r3, #0
   8050c:	d006      	beq.n	8051c <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   8050e:	68fb      	ldr	r3, [r7, #12]
   80510:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80512:	69bb      	ldr	r3, [r7, #24]
   80514:	431a      	orrs	r2, r3
   80516:	68fb      	ldr	r3, [r7, #12]
   80518:	671a      	str	r2, [r3, #112]	; 0x70
	arch_ioport_set_pin_mode(pin, mode);
}
   8051a:	e006      	b.n	8052a <ioport_set_pin_mode+0xce>
	} else {
		base->PIO_ABSR &= ~mask;
   8051c:	68fb      	ldr	r3, [r7, #12]
   8051e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80520:	69bb      	ldr	r3, [r7, #24]
   80522:	43db      	mvns	r3, r3
   80524:	401a      	ands	r2, r3
   80526:	68fb      	ldr	r3, [r7, #12]
   80528:	671a      	str	r2, [r3, #112]	; 0x70
   8052a:	bf00      	nop
   8052c:	3734      	adds	r7, #52	; 0x34
   8052e:	46bd      	mov	sp, r7
   80530:	bc80      	pop	{r7}
   80532:	4770      	bx	lr

00080534 <sleepmgr_sleep>:
#endif /* CONFIG_SLEEPMGR_ENABLE */
//! @}


static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
   80534:	b580      	push	{r7, lr}
   80536:	b082      	sub	sp, #8
   80538:	af00      	add	r7, sp, #0
   8053a:	4603      	mov	r3, r0
   8053c:	71fb      	strb	r3, [r7, #7]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8053e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80540:	f3bf 8f5f 	dmb	sy
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
   80544:	4b05      	ldr	r3, [pc, #20]	; (8055c <sleepmgr_sleep+0x28>)
   80546:	2200      	movs	r2, #0
   80548:	701a      	strb	r2, [r3, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
   8054a:	79fb      	ldrb	r3, [r7, #7]
   8054c:	4618      	mov	r0, r3
   8054e:	4b04      	ldr	r3, [pc, #16]	; (80560 <sleepmgr_sleep+0x2c>)
   80550:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
   80552:	bf00      	nop
   80554:	3708      	adds	r7, #8
   80556:	46bd      	mov	sp, r7
   80558:	bd80      	pop	{r7, pc}
   8055a:	bf00      	nop
   8055c:	2000031a 	.word	0x2000031a
   80560:	0008546d 	.word	0x0008546d

00080564 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
   80564:	b480      	push	{r7}
   80566:	b083      	sub	sp, #12
   80568:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   8056a:	2300      	movs	r3, #0
   8056c:	71fb      	strb	r3, [r7, #7]
   8056e:	e006      	b.n	8057e <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
   80570:	79fb      	ldrb	r3, [r7, #7]
   80572:	4a08      	ldr	r2, [pc, #32]	; (80594 <sleepmgr_init+0x30>)
   80574:	2100      	movs	r1, #0
   80576:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   80578:	79fb      	ldrb	r3, [r7, #7]
   8057a:	3301      	adds	r3, #1
   8057c:	71fb      	strb	r3, [r7, #7]
   8057e:	79fb      	ldrb	r3, [r7, #7]
   80580:	2b04      	cmp	r3, #4
   80582:	d9f5      	bls.n	80570 <sleepmgr_init+0xc>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   80584:	4b03      	ldr	r3, [pc, #12]	; (80594 <sleepmgr_init+0x30>)
   80586:	2201      	movs	r2, #1
   80588:	715a      	strb	r2, [r3, #5]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   8058a:	bf00      	nop
   8058c:	370c      	adds	r7, #12
   8058e:	46bd      	mov	sp, r7
   80590:	bc80      	pop	{r7}
   80592:	4770      	bx	lr
   80594:	20000d70 	.word	0x20000d70

00080598 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
   80598:	b480      	push	{r7}
   8059a:	b083      	sub	sp, #12
   8059c:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
   8059e:	2300      	movs	r3, #0
   805a0:	71fb      	strb	r3, [r7, #7]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
   805a2:	4b09      	ldr	r3, [pc, #36]	; (805c8 <sleepmgr_get_sleep_mode+0x30>)
   805a4:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
   805a6:	e005      	b.n	805b4 <sleepmgr_get_sleep_mode+0x1c>
		lock_ptr++;
   805a8:	683b      	ldr	r3, [r7, #0]
   805aa:	3301      	adds	r3, #1
   805ac:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
   805ae:	79fb      	ldrb	r3, [r7, #7]
   805b0:	3301      	adds	r3, #1
   805b2:	71fb      	strb	r3, [r7, #7]
	while (!(*lock_ptr)) {
   805b4:	683b      	ldr	r3, [r7, #0]
   805b6:	781b      	ldrb	r3, [r3, #0]
   805b8:	2b00      	cmp	r3, #0
   805ba:	d0f5      	beq.n	805a8 <sleepmgr_get_sleep_mode+0x10>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
   805bc:	79fb      	ldrb	r3, [r7, #7]
}
   805be:	4618      	mov	r0, r3
   805c0:	370c      	adds	r7, #12
   805c2:	46bd      	mov	sp, r7
   805c4:	bc80      	pop	{r7}
   805c6:	4770      	bx	lr
   805c8:	20000d70 	.word	0x20000d70

000805cc <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
   805cc:	b580      	push	{r7, lr}
   805ce:	b082      	sub	sp, #8
   805d0:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode;

	//cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
   805d2:	4b0a      	ldr	r3, [pc, #40]	; (805fc <sleepmgr_enter_sleep+0x30>)
   805d4:	4798      	blx	r3
   805d6:	4603      	mov	r3, r0
   805d8:	71fb      	strb	r3, [r7, #7]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
   805da:	79fb      	ldrb	r3, [r7, #7]
   805dc:	2b00      	cmp	r3, #0
   805de:	d106      	bne.n	805ee <sleepmgr_enter_sleep+0x22>
		cpu_irq_enable();
   805e0:	4b07      	ldr	r3, [pc, #28]	; (80600 <sleepmgr_enter_sleep+0x34>)
   805e2:	2201      	movs	r2, #1
   805e4:	701a      	strb	r2, [r3, #0]
   805e6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   805ea:	b662      	cpsie	i
		return;
   805ec:	e003      	b.n	805f6 <sleepmgr_enter_sleep+0x2a>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
   805ee:	79fb      	ldrb	r3, [r7, #7]
   805f0:	4618      	mov	r0, r3
   805f2:	4b04      	ldr	r3, [pc, #16]	; (80604 <sleepmgr_enter_sleep+0x38>)
   805f4:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   805f6:	3708      	adds	r7, #8
   805f8:	46bd      	mov	sp, r7
   805fa:	bd80      	pop	{r7, pc}
   805fc:	00080599 	.word	0x00080599
   80600:	2000031a 	.word	0x2000031a
   80604:	00080535 	.word	0x00080535

00080608 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   80608:	b480      	push	{r7}
   8060a:	b083      	sub	sp, #12
   8060c:	af00      	add	r7, sp, #0
   8060e:	6078      	str	r0, [r7, #4]
   80610:	6039      	str	r1, [r7, #0]
	ul_id = ul_id;
	p_cfg->ctrl = 0;
   80612:	687b      	ldr	r3, [r7, #4]
   80614:	2200      	movs	r2, #0
   80616:	601a      	str	r2, [r3, #0]
}
   80618:	bf00      	nop
   8061a:	370c      	adds	r7, #12
   8061c:	46bd      	mov	sp, r7
   8061e:	bc80      	pop	{r7}
   80620:	4770      	bx	lr
   80622:	0000      	movs	r0, r0

00080624 <genclk_config_set_source>:
//! \name Programmable Clock Source and Prescaler configuration
//@{

static inline void genclk_config_set_source(struct genclk_config *p_cfg,
		enum genclk_source e_src)
{
   80624:	b480      	push	{r7}
   80626:	b083      	sub	sp, #12
   80628:	af00      	add	r7, sp, #0
   8062a:	6078      	str	r0, [r7, #4]
   8062c:	460b      	mov	r3, r1
   8062e:	70fb      	strb	r3, [r7, #3]
	p_cfg->ctrl &= (~PMC_PCK_CSS_Msk);
   80630:	687b      	ldr	r3, [r7, #4]
   80632:	681b      	ldr	r3, [r3, #0]
   80634:	f023 0207 	bic.w	r2, r3, #7
   80638:	687b      	ldr	r3, [r7, #4]
   8063a:	601a      	str	r2, [r3, #0]

	switch (e_src) {
   8063c:	78fb      	ldrb	r3, [r7, #3]
   8063e:	2b0a      	cmp	r3, #10
   80640:	d839      	bhi.n	806b6 <genclk_config_set_source+0x92>
   80642:	a201      	add	r2, pc, #4	; (adr r2, 80648 <genclk_config_set_source+0x24>)
   80644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80648:	00080675 	.word	0x00080675
   8064c:	00080675 	.word	0x00080675
   80650:	00080675 	.word	0x00080675
   80654:	0008067f 	.word	0x0008067f
   80658:	0008067f 	.word	0x0008067f
   8065c:	0008067f 	.word	0x0008067f
   80660:	0008067f 	.word	0x0008067f
   80664:	0008067f 	.word	0x0008067f
   80668:	0008068d 	.word	0x0008068d
   8066c:	0008069b 	.word	0x0008069b
   80670:	000806a9 	.word	0x000806a9
	case GENCLK_PCK_SRC_SLCK_RC:
	case GENCLK_PCK_SRC_SLCK_XTAL:
	case GENCLK_PCK_SRC_SLCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_SLOW_CLK);
   80674:	687b      	ldr	r3, [r7, #4]
   80676:	681a      	ldr	r2, [r3, #0]
   80678:	687b      	ldr	r3, [r7, #4]
   8067a:	601a      	str	r2, [r3, #0]
		break;
   8067c:	e01b      	b.n	806b6 <genclk_config_set_source+0x92>
	case GENCLK_PCK_SRC_MAINCK_4M_RC:
	case GENCLK_PCK_SRC_MAINCK_8M_RC:
	case GENCLK_PCK_SRC_MAINCK_12M_RC:
	case GENCLK_PCK_SRC_MAINCK_XTAL:
	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_MAIN_CLK);
   8067e:	687b      	ldr	r3, [r7, #4]
   80680:	681b      	ldr	r3, [r3, #0]
   80682:	f043 0201 	orr.w	r2, r3, #1
   80686:	687b      	ldr	r3, [r7, #4]
   80688:	601a      	str	r2, [r3, #0]
		break;
   8068a:	e014      	b.n	806b6 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLACK:
		p_cfg->ctrl |= (PMC_PCK_CSS_PLLA_CLK);
   8068c:	687b      	ldr	r3, [r7, #4]
   8068e:	681b      	ldr	r3, [r3, #0]
   80690:	f043 0202 	orr.w	r2, r3, #2
   80694:	687b      	ldr	r3, [r7, #4]
   80696:	601a      	str	r2, [r3, #0]
		break;
   80698:	e00d      	b.n	806b6 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLBCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_UPLL_CLK);
   8069a:	687b      	ldr	r3, [r7, #4]
   8069c:	681b      	ldr	r3, [r3, #0]
   8069e:	f043 0203 	orr.w	r2, r3, #3
   806a2:	687b      	ldr	r3, [r7, #4]
   806a4:	601a      	str	r2, [r3, #0]
		break;
   806a6:	e006      	b.n	806b6 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_MCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_MCK);
   806a8:	687b      	ldr	r3, [r7, #4]
   806aa:	681b      	ldr	r3, [r3, #0]
   806ac:	f043 0204 	orr.w	r2, r3, #4
   806b0:	687b      	ldr	r3, [r7, #4]
   806b2:	601a      	str	r2, [r3, #0]
		break;
   806b4:	bf00      	nop
	}
}
   806b6:	bf00      	nop
   806b8:	370c      	adds	r7, #12
   806ba:	46bd      	mov	sp, r7
   806bc:	bc80      	pop	{r7}
   806be:	4770      	bx	lr

000806c0 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *p_cfg,
		uint32_t e_divider)
{
   806c0:	b480      	push	{r7}
   806c2:	b083      	sub	sp, #12
   806c4:	af00      	add	r7, sp, #0
   806c6:	6078      	str	r0, [r7, #4]
   806c8:	6039      	str	r1, [r7, #0]
	p_cfg->ctrl &= ~PMC_PCK_PRES_Msk;
   806ca:	687b      	ldr	r3, [r7, #4]
   806cc:	681b      	ldr	r3, [r3, #0]
   806ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   806d2:	687b      	ldr	r3, [r7, #4]
   806d4:	601a      	str	r2, [r3, #0]
	p_cfg->ctrl |= e_divider;
   806d6:	687b      	ldr	r3, [r7, #4]
   806d8:	681a      	ldr	r2, [r3, #0]
   806da:	683b      	ldr	r3, [r7, #0]
   806dc:	431a      	orrs	r2, r3
   806de:	687b      	ldr	r3, [r7, #4]
   806e0:	601a      	str	r2, [r3, #0]
}
   806e2:	bf00      	nop
   806e4:	370c      	adds	r7, #12
   806e6:	46bd      	mov	sp, r7
   806e8:	bc80      	pop	{r7}
   806ea:	4770      	bx	lr

000806ec <genclk_enable>:

//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   806ec:	b580      	push	{r7, lr}
   806ee:	b082      	sub	sp, #8
   806f0:	af00      	add	r7, sp, #0
   806f2:	6078      	str	r0, [r7, #4]
   806f4:	6039      	str	r1, [r7, #0]
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   806f6:	4907      	ldr	r1, [pc, #28]	; (80714 <genclk_enable+0x28>)
   806f8:	687b      	ldr	r3, [r7, #4]
   806fa:	681a      	ldr	r2, [r3, #0]
   806fc:	683b      	ldr	r3, [r7, #0]
   806fe:	3310      	adds	r3, #16
   80700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	pmc_enable_pck(ul_id);
   80704:	6838      	ldr	r0, [r7, #0]
   80706:	4b04      	ldr	r3, [pc, #16]	; (80718 <genclk_enable+0x2c>)
   80708:	4798      	blx	r3
}
   8070a:	bf00      	nop
   8070c:	3708      	adds	r7, #8
   8070e:	46bd      	mov	sp, r7
   80710:	bd80      	pop	{r7, pc}
   80712:	bf00      	nop
   80714:	400e0400 	.word	0x400e0400
   80718:	00083f29 	.word	0x00083f29

0008071c <genclk_enable_source>:
{
	pmc_disable_pck(ul_id);
}

static inline void genclk_enable_source(enum genclk_source e_src)
{
   8071c:	b580      	push	{r7, lr}
   8071e:	b082      	sub	sp, #8
   80720:	af00      	add	r7, sp, #0
   80722:	4603      	mov	r3, r0
   80724:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80726:	79fb      	ldrb	r3, [r7, #7]
   80728:	2b0a      	cmp	r3, #10
   8072a:	f200 80a2 	bhi.w	80872 <genclk_enable_source+0x156>
   8072e:	a201      	add	r2, pc, #4	; (adr r2, 80734 <genclk_enable_source+0x18>)
   80730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80734:	00080761 	.word	0x00080761
   80738:	00080783 	.word	0x00080783
   8073c:	000807a3 	.word	0x000807a3
   80740:	000807c3 	.word	0x000807c3
   80744:	000807e3 	.word	0x000807e3
   80748:	00080803 	.word	0x00080803
   8074c:	00080823 	.word	0x00080823
   80750:	00080843 	.word	0x00080843
   80754:	00080863 	.word	0x00080863
   80758:	0008086b 	.word	0x0008086b
   8075c:	00080873 	.word	0x00080873
	case GENCLK_PCK_SRC_SLCK_RC:
		if (!osc_is_ready(OSC_SLCK_32K_RC)) {
   80760:	2000      	movs	r0, #0
   80762:	4b4e      	ldr	r3, [pc, #312]	; (8089c <genclk_enable_source+0x180>)
   80764:	4798      	blx	r3
   80766:	4603      	mov	r3, r0
   80768:	f083 0301 	eor.w	r3, r3, #1
   8076c:	b2db      	uxtb	r3, r3
   8076e:	2b00      	cmp	r3, #0
   80770:	f000 8081 	beq.w	80876 <genclk_enable_source+0x15a>
			osc_enable(OSC_SLCK_32K_RC);
   80774:	2000      	movs	r0, #0
   80776:	4b4a      	ldr	r3, [pc, #296]	; (808a0 <genclk_enable_source+0x184>)
   80778:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_RC);
   8077a:	2000      	movs	r0, #0
   8077c:	4b49      	ldr	r3, [pc, #292]	; (808a4 <genclk_enable_source+0x188>)
   8077e:	4798      	blx	r3
		}
		break;
   80780:	e079      	b.n	80876 <genclk_enable_source+0x15a>

	case GENCLK_PCK_SRC_SLCK_XTAL:
		if (!osc_is_ready(OSC_SLCK_32K_XTAL)) {
   80782:	2001      	movs	r0, #1
   80784:	4b45      	ldr	r3, [pc, #276]	; (8089c <genclk_enable_source+0x180>)
   80786:	4798      	blx	r3
   80788:	4603      	mov	r3, r0
   8078a:	f083 0301 	eor.w	r3, r3, #1
   8078e:	b2db      	uxtb	r3, r3
   80790:	2b00      	cmp	r3, #0
   80792:	d072      	beq.n	8087a <genclk_enable_source+0x15e>
			osc_enable(OSC_SLCK_32K_XTAL);
   80794:	2001      	movs	r0, #1
   80796:	4b42      	ldr	r3, [pc, #264]	; (808a0 <genclk_enable_source+0x184>)
   80798:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_XTAL);
   8079a:	2001      	movs	r0, #1
   8079c:	4b41      	ldr	r3, [pc, #260]	; (808a4 <genclk_enable_source+0x188>)
   8079e:	4798      	blx	r3
		}
		break;
   807a0:	e06b      	b.n	8087a <genclk_enable_source+0x15e>

	case GENCLK_PCK_SRC_SLCK_BYPASS:
		if (!osc_is_ready(OSC_SLCK_32K_BYPASS)) {
   807a2:	2002      	movs	r0, #2
   807a4:	4b3d      	ldr	r3, [pc, #244]	; (8089c <genclk_enable_source+0x180>)
   807a6:	4798      	blx	r3
   807a8:	4603      	mov	r3, r0
   807aa:	f083 0301 	eor.w	r3, r3, #1
   807ae:	b2db      	uxtb	r3, r3
   807b0:	2b00      	cmp	r3, #0
   807b2:	d064      	beq.n	8087e <genclk_enable_source+0x162>
			osc_enable(OSC_SLCK_32K_BYPASS);
   807b4:	2002      	movs	r0, #2
   807b6:	4b3a      	ldr	r3, [pc, #232]	; (808a0 <genclk_enable_source+0x184>)
   807b8:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_BYPASS);
   807ba:	2002      	movs	r0, #2
   807bc:	4b39      	ldr	r3, [pc, #228]	; (808a4 <genclk_enable_source+0x188>)
   807be:	4798      	blx	r3
		}
		break;
   807c0:	e05d      	b.n	8087e <genclk_enable_source+0x162>

	case GENCLK_PCK_SRC_MAINCK_4M_RC:
		if (!osc_is_ready(OSC_MAINCK_4M_RC)) {
   807c2:	2003      	movs	r0, #3
   807c4:	4b35      	ldr	r3, [pc, #212]	; (8089c <genclk_enable_source+0x180>)
   807c6:	4798      	blx	r3
   807c8:	4603      	mov	r3, r0
   807ca:	f083 0301 	eor.w	r3, r3, #1
   807ce:	b2db      	uxtb	r3, r3
   807d0:	2b00      	cmp	r3, #0
   807d2:	d056      	beq.n	80882 <genclk_enable_source+0x166>
			osc_enable(OSC_MAINCK_4M_RC);
   807d4:	2003      	movs	r0, #3
   807d6:	4b32      	ldr	r3, [pc, #200]	; (808a0 <genclk_enable_source+0x184>)
   807d8:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_4M_RC);
   807da:	2003      	movs	r0, #3
   807dc:	4b31      	ldr	r3, [pc, #196]	; (808a4 <genclk_enable_source+0x188>)
   807de:	4798      	blx	r3
		}
		break;
   807e0:	e04f      	b.n	80882 <genclk_enable_source+0x166>

	case GENCLK_PCK_SRC_MAINCK_8M_RC:
		if (!osc_is_ready(OSC_MAINCK_8M_RC)) {
   807e2:	2004      	movs	r0, #4
   807e4:	4b2d      	ldr	r3, [pc, #180]	; (8089c <genclk_enable_source+0x180>)
   807e6:	4798      	blx	r3
   807e8:	4603      	mov	r3, r0
   807ea:	f083 0301 	eor.w	r3, r3, #1
   807ee:	b2db      	uxtb	r3, r3
   807f0:	2b00      	cmp	r3, #0
   807f2:	d048      	beq.n	80886 <genclk_enable_source+0x16a>
			osc_enable(OSC_MAINCK_8M_RC);
   807f4:	2004      	movs	r0, #4
   807f6:	4b2a      	ldr	r3, [pc, #168]	; (808a0 <genclk_enable_source+0x184>)
   807f8:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_8M_RC);
   807fa:	2004      	movs	r0, #4
   807fc:	4b29      	ldr	r3, [pc, #164]	; (808a4 <genclk_enable_source+0x188>)
   807fe:	4798      	blx	r3
		}
		break;
   80800:	e041      	b.n	80886 <genclk_enable_source+0x16a>

	case GENCLK_PCK_SRC_MAINCK_12M_RC:
		if (!osc_is_ready(OSC_MAINCK_12M_RC)) {
   80802:	2005      	movs	r0, #5
   80804:	4b25      	ldr	r3, [pc, #148]	; (8089c <genclk_enable_source+0x180>)
   80806:	4798      	blx	r3
   80808:	4603      	mov	r3, r0
   8080a:	f083 0301 	eor.w	r3, r3, #1
   8080e:	b2db      	uxtb	r3, r3
   80810:	2b00      	cmp	r3, #0
   80812:	d03a      	beq.n	8088a <genclk_enable_source+0x16e>
			osc_enable(OSC_MAINCK_12M_RC);
   80814:	2005      	movs	r0, #5
   80816:	4b22      	ldr	r3, [pc, #136]	; (808a0 <genclk_enable_source+0x184>)
   80818:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_12M_RC);
   8081a:	2005      	movs	r0, #5
   8081c:	4b21      	ldr	r3, [pc, #132]	; (808a4 <genclk_enable_source+0x188>)
   8081e:	4798      	blx	r3
		}
		break;
   80820:	e033      	b.n	8088a <genclk_enable_source+0x16e>

	case GENCLK_PCK_SRC_MAINCK_XTAL:
		if (!osc_is_ready(OSC_MAINCK_XTAL)) {
   80822:	2006      	movs	r0, #6
   80824:	4b1d      	ldr	r3, [pc, #116]	; (8089c <genclk_enable_source+0x180>)
   80826:	4798      	blx	r3
   80828:	4603      	mov	r3, r0
   8082a:	f083 0301 	eor.w	r3, r3, #1
   8082e:	b2db      	uxtb	r3, r3
   80830:	2b00      	cmp	r3, #0
   80832:	d02c      	beq.n	8088e <genclk_enable_source+0x172>
			osc_enable(OSC_MAINCK_XTAL);
   80834:	2006      	movs	r0, #6
   80836:	4b1a      	ldr	r3, [pc, #104]	; (808a0 <genclk_enable_source+0x184>)
   80838:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_XTAL);
   8083a:	2006      	movs	r0, #6
   8083c:	4b19      	ldr	r3, [pc, #100]	; (808a4 <genclk_enable_source+0x188>)
   8083e:	4798      	blx	r3
		}
		break;
   80840:	e025      	b.n	8088e <genclk_enable_source+0x172>

	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		if (!osc_is_ready(OSC_MAINCK_BYPASS)) {
   80842:	2007      	movs	r0, #7
   80844:	4b15      	ldr	r3, [pc, #84]	; (8089c <genclk_enable_source+0x180>)
   80846:	4798      	blx	r3
   80848:	4603      	mov	r3, r0
   8084a:	f083 0301 	eor.w	r3, r3, #1
   8084e:	b2db      	uxtb	r3, r3
   80850:	2b00      	cmp	r3, #0
   80852:	d01e      	beq.n	80892 <genclk_enable_source+0x176>
			osc_enable(OSC_MAINCK_BYPASS);
   80854:	2007      	movs	r0, #7
   80856:	4b12      	ldr	r3, [pc, #72]	; (808a0 <genclk_enable_source+0x184>)
   80858:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_BYPASS);
   8085a:	2007      	movs	r0, #7
   8085c:	4b11      	ldr	r3, [pc, #68]	; (808a4 <genclk_enable_source+0x188>)
   8085e:	4798      	blx	r3
		}
		break;
   80860:	e017      	b.n	80892 <genclk_enable_source+0x176>

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_PCK_SRC_PLLACK:
		pll_enable_config_defaults(0);
   80862:	2000      	movs	r0, #0
   80864:	4b10      	ldr	r3, [pc, #64]	; (808a8 <genclk_enable_source+0x18c>)
   80866:	4798      	blx	r3
		break;
   80868:	e014      	b.n	80894 <genclk_enable_source+0x178>
#endif

#ifdef CONFIG_PLL1_SOURCE
	case GENCLK_PCK_SRC_PLLBCK:
		pll_enable_config_defaults(1);
   8086a:	2001      	movs	r0, #1
   8086c:	4b0e      	ldr	r3, [pc, #56]	; (808a8 <genclk_enable_source+0x18c>)
   8086e:	4798      	blx	r3
		break;
   80870:	e010      	b.n	80894 <genclk_enable_source+0x178>
	case GENCLK_PCK_SRC_MCK:
		break;

	default:
		Assert(false);
		break;
   80872:	bf00      	nop
   80874:	e00e      	b.n	80894 <genclk_enable_source+0x178>
		break;
   80876:	bf00      	nop
   80878:	e00c      	b.n	80894 <genclk_enable_source+0x178>
		break;
   8087a:	bf00      	nop
   8087c:	e00a      	b.n	80894 <genclk_enable_source+0x178>
		break;
   8087e:	bf00      	nop
   80880:	e008      	b.n	80894 <genclk_enable_source+0x178>
		break;
   80882:	bf00      	nop
   80884:	e006      	b.n	80894 <genclk_enable_source+0x178>
		break;
   80886:	bf00      	nop
   80888:	e004      	b.n	80894 <genclk_enable_source+0x178>
		break;
   8088a:	bf00      	nop
   8088c:	e002      	b.n	80894 <genclk_enable_source+0x178>
		break;
   8088e:	bf00      	nop
   80890:	e000      	b.n	80894 <genclk_enable_source+0x178>
		break;
   80892:	bf00      	nop
	}
}
   80894:	bf00      	nop
   80896:	3708      	adds	r7, #8
   80898:	46bd      	mov	sp, r7
   8089a:	bd80      	pop	{r7, pc}
   8089c:	00080181 	.word	0x00080181
   808a0:	000800fd 	.word	0x000800fd
   808a4:	00080275 	.word	0x00080275
   808a8:	000803b1 	.word	0x000803b1

000808ac <phywhisperer_no_pwr>:

//Serial Number - will be read by device ID
char usb_serial_number[33] = "000000000000DEADBEEF";

void phywhisperer_no_pwr(void)
{
   808ac:	b480      	push	{r7}
   808ae:	af00      	add	r7, sp, #0
    PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   808b0:	4b05      	ldr	r3, [pc, #20]	; (808c8 <phywhisperer_no_pwr+0x1c>)
   808b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   808b6:	635a      	str	r2, [r3, #52]	; 0x34
    PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   808b8:	4b03      	ldr	r3, [pc, #12]	; (808c8 <phywhisperer_no_pwr+0x1c>)
   808ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   808be:	635a      	str	r2, [r3, #52]	; 0x34
}
   808c0:	bf00      	nop
   808c2:	46bd      	mov	sp, r7
   808c4:	bc80      	pop	{r7}
   808c6:	4770      	bx	lr
   808c8:	400e0c00 	.word	0x400e0c00

000808cc <phywhisperer_5V_pwr>:

void phywhisperer_5V_pwr(void)
{
   808cc:	b480      	push	{r7}
   808ce:	af00      	add	r7, sp, #0
    PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   808d0:	4b05      	ldr	r3, [pc, #20]	; (808e8 <phywhisperer_5V_pwr+0x1c>)
   808d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   808d6:	635a      	str	r2, [r3, #52]	; 0x34
    PIOA->PIO_SODR = (1 << F_VB5V); //enable host power
   808d8:	4b03      	ldr	r3, [pc, #12]	; (808e8 <phywhisperer_5V_pwr+0x1c>)
   808da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   808de:	631a      	str	r2, [r3, #48]	; 0x30
}
   808e0:	bf00      	nop
   808e2:	46bd      	mov	sp, r7
   808e4:	bc80      	pop	{r7}
   808e6:	4770      	bx	lr
   808e8:	400e0c00 	.word	0x400e0c00

000808ec <phywhisperer_host_pwr>:

void phywhisperer_host_pwr(void)
{
   808ec:	b480      	push	{r7}
   808ee:	af00      	add	r7, sp, #0
    PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   808f0:	4b05      	ldr	r3, [pc, #20]	; (80908 <phywhisperer_host_pwr+0x1c>)
   808f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   808f6:	635a      	str	r2, [r3, #52]	; 0x34
    PIOA->PIO_SODR = (1 << F_VBHOST); //enable sniff power
   808f8:	4b03      	ldr	r3, [pc, #12]	; (80908 <phywhisperer_host_pwr+0x1c>)
   808fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   808fe:	631a      	str	r2, [r3, #48]	; 0x30
}
   80900:	bf00      	nop
   80902:	46bd      	mov	sp, r7
   80904:	bc80      	pop	{r7}
   80906:	4770      	bx	lr
   80908:	400e0c00 	.word	0x400e0c00

0008090c <pwr_st_from_io>:
        phywhisperer_host_pwr();
    }
}

uint8_t pwr_st_from_io(void)
{
   8090c:	b480      	push	{r7}
   8090e:	af00      	add	r7, sp, #0
    if (!(PIOA->PIO_ODSR & (1 << F_VBHOST)) && !(PIOA->PIO_ODSR & (1 << F_VB5V))) {
   80910:	4b17      	ldr	r3, [pc, #92]	; (80970 <pwr_st_from_io+0x64>)
   80912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   80918:	2b00      	cmp	r3, #0
   8091a:	d107      	bne.n	8092c <pwr_st_from_io+0x20>
   8091c:	4b14      	ldr	r3, [pc, #80]	; (80970 <pwr_st_from_io+0x64>)
   8091e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80920:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   80924:	2b00      	cmp	r3, #0
   80926:	d101      	bne.n	8092c <pwr_st_from_io+0x20>
        //USB off
        return 0;
   80928:	2300      	movs	r3, #0
   8092a:	e01c      	b.n	80966 <pwr_st_from_io+0x5a>
    } else if (!(PIOA->PIO_ODSR & (1 << F_VBHOST)) && (PIOA->PIO_ODSR & (1 << F_VB5V))) {
   8092c:	4b10      	ldr	r3, [pc, #64]	; (80970 <pwr_st_from_io+0x64>)
   8092e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   80934:	2b00      	cmp	r3, #0
   80936:	d107      	bne.n	80948 <pwr_st_from_io+0x3c>
   80938:	4b0d      	ldr	r3, [pc, #52]	; (80970 <pwr_st_from_io+0x64>)
   8093a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8093c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   80940:	2b00      	cmp	r3, #0
   80942:	d001      	beq.n	80948 <pwr_st_from_io+0x3c>
        //Host power
        return 1;
   80944:	2301      	movs	r3, #1
   80946:	e00e      	b.n	80966 <pwr_st_from_io+0x5a>
    } else if ((PIOA->PIO_ODSR & (1 << F_VBHOST)) && !(PIOA->PIO_ODSR & (1 << F_VB5V))) {
   80948:	4b09      	ldr	r3, [pc, #36]	; (80970 <pwr_st_from_io+0x64>)
   8094a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8094c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   80950:	2b00      	cmp	r3, #0
   80952:	d007      	beq.n	80964 <pwr_st_from_io+0x58>
   80954:	4b06      	ldr	r3, [pc, #24]	; (80970 <pwr_st_from_io+0x64>)
   80956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80958:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   8095c:	2b00      	cmp	r3, #0
   8095e:	d101      	bne.n	80964 <pwr_st_from_io+0x58>
        //Sniffer power
        return 2;
   80960:	2302      	movs	r3, #2
   80962:	e000      	b.n	80966 <pwr_st_from_io+0x5a>
    } else {
        //Everything's on...
        return 0xFF;
   80964:	23ff      	movs	r3, #255	; 0xff
    }

}
   80966:	4618      	mov	r0, r3
   80968:	46bd      	mov	sp, r7
   8096a:	bc80      	pop	{r7}
   8096c:	4770      	bx	lr
   8096e:	bf00      	nop
   80970:	400e0c00 	.word	0x400e0c00

00080974 <phywhisperer_setup_pins>:

void phywhisperer_setup_pins(void)
{
   80974:	b580      	push	{r7, lr}
   80976:	af00      	add	r7, sp, #0
    board_init();
   80978:	4b3a      	ldr	r3, [pc, #232]	; (80a64 <phywhisperer_setup_pins+0xf0>)
   8097a:	4798      	blx	r3
    ioport_set_pin_mode(BUTTON_IN, IOPORT_MODE_PULLUP); //(1 << 2) = PULL UP
   8097c:	2108      	movs	r1, #8
   8097e:	2018      	movs	r0, #24
   80980:	4b39      	ldr	r3, [pc, #228]	; (80a68 <phywhisperer_setup_pins+0xf4>)
   80982:	4798      	blx	r3
    PIOA->PIO_ODR = (1 << BUTTON_IN);
   80984:	4b39      	ldr	r3, [pc, #228]	; (80a6c <phywhisperer_setup_pins+0xf8>)
   80986:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   8098a:	615a      	str	r2, [r3, #20]
    PIOA->PIO_PUER = (1 << BUTTON_IN); // enable pullup
   8098c:	4b37      	ldr	r3, [pc, #220]	; (80a6c <phywhisperer_setup_pins+0xf8>)
   8098e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   80992:	665a      	str	r2, [r3, #100]	; 0x64
    PIOA->PIO_DIFSR = (1 << BUTTON_IN); //enable debounce
   80994:	4b35      	ldr	r3, [pc, #212]	; (80a6c <phywhisperer_setup_pins+0xf8>)
   80996:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   8099a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    PIOA->PIO_OER = (1 << F_VB5V) | (1 << F_VBHOST); //enable output mode on VBHOST/VBSNIFF pins
   8099e:	4b33      	ldr	r3, [pc, #204]	; (80a6c <phywhisperer_setup_pins+0xf8>)
   809a0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
   809a4:	611a      	str	r2, [r3, #16]

    phywhisperer_host_pwr();
   809a6:	4b32      	ldr	r3, [pc, #200]	; (80a70 <phywhisperer_setup_pins+0xfc>)
   809a8:	4798      	blx	r3
    
    //Configure FPGA to allow programming via USB
    fpga_program_init();
   809aa:	4b32      	ldr	r3, [pc, #200]	; (80a74 <phywhisperer_setup_pins+0x100>)
   809ac:	4798      	blx	r3

    /* Enable SMC */
    pmc_enable_periph_clk(ID_SMC);
   809ae:	2009      	movs	r0, #9
   809b0:	4b31      	ldr	r3, [pc, #196]	; (80a78 <phywhisperer_setup_pins+0x104>)
   809b2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   809b4:	4931      	ldr	r1, [pc, #196]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809b6:	2029      	movs	r0, #41	; 0x29
   809b8:	4b31      	ldr	r3, [pc, #196]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809ba:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   809bc:	492f      	ldr	r1, [pc, #188]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809be:	202a      	movs	r0, #42	; 0x2a
   809c0:	4b2f      	ldr	r3, [pc, #188]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809c2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   809c4:	492d      	ldr	r1, [pc, #180]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809c6:	202b      	movs	r0, #43	; 0x2b
   809c8:	4b2d      	ldr	r3, [pc, #180]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809ca:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   809cc:	492b      	ldr	r1, [pc, #172]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809ce:	202c      	movs	r0, #44	; 0x2c
   809d0:	4b2b      	ldr	r3, [pc, #172]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809d2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   809d4:	4929      	ldr	r1, [pc, #164]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809d6:	202d      	movs	r0, #45	; 0x2d
   809d8:	4b29      	ldr	r3, [pc, #164]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809da:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   809dc:	4927      	ldr	r1, [pc, #156]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809de:	202e      	movs	r0, #46	; 0x2e
   809e0:	4b27      	ldr	r3, [pc, #156]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809e2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   809e4:	4925      	ldr	r1, [pc, #148]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809e6:	202f      	movs	r0, #47	; 0x2f
   809e8:	4b25      	ldr	r3, [pc, #148]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809ea:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   809ec:	4923      	ldr	r1, [pc, #140]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809ee:	2030      	movs	r0, #48	; 0x30
   809f0:	4b23      	ldr	r3, [pc, #140]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809f2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   809f4:	4921      	ldr	r1, [pc, #132]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809f6:	2033      	movs	r0, #51	; 0x33
   809f8:	4b21      	ldr	r3, [pc, #132]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   809fa:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   809fc:	491f      	ldr	r1, [pc, #124]	; (80a7c <phywhisperer_setup_pins+0x108>)
   809fe:	2037      	movs	r0, #55	; 0x37
   80a00:	4b1f      	ldr	r3, [pc, #124]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   80a02:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   80a04:	491d      	ldr	r1, [pc, #116]	; (80a7c <phywhisperer_setup_pins+0x108>)
   80a06:	2034      	movs	r0, #52	; 0x34
   80a08:	4b1d      	ldr	r3, [pc, #116]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   80a0a:	4798      	blx	r3

    gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80a0c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   80a10:	f240 11bf 	movw	r1, #447	; 0x1bf
   80a14:	481b      	ldr	r0, [pc, #108]	; (80a84 <phywhisperer_setup_pins+0x110>)
   80a16:	4b1c      	ldr	r3, [pc, #112]	; (80a88 <phywhisperer_setup_pins+0x114>)
   80a18:	4798      	blx	r3
    pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   80a1a:	f240 11bf 	movw	r1, #447	; 0x1bf
   80a1e:	4819      	ldr	r0, [pc, #100]	; (80a84 <phywhisperer_setup_pins+0x110>)
   80a20:	4b1a      	ldr	r3, [pc, #104]	; (80a8c <phywhisperer_setup_pins+0x118>)
   80a22:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG1);
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG1);
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG1);
    */

    gpio_configure_pin(PIN_EBI_USB_SPARE0, PIN_EBI_USB_SPARE0_FLAGS);
   80a24:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80a28:	2026      	movs	r0, #38	; 0x26
   80a2a:	4b15      	ldr	r3, [pc, #84]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   80a2c:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_USB_SPARE1, PIN_EBI_USB_SPARE1_FLAGS);
   80a2e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80a32:	2031      	movs	r0, #49	; 0x31
   80a34:	4b12      	ldr	r3, [pc, #72]	; (80a80 <phywhisperer_setup_pins+0x10c>)
   80a36:	4798      	blx	r3

    smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   80a38:	4a15      	ldr	r2, [pc, #84]	; (80a90 <phywhisperer_setup_pins+0x11c>)
   80a3a:	2100      	movs	r1, #0
   80a3c:	4815      	ldr	r0, [pc, #84]	; (80a94 <phywhisperer_setup_pins+0x120>)
   80a3e:	4b16      	ldr	r3, [pc, #88]	; (80a98 <phywhisperer_setup_pins+0x124>)
   80a40:	4798      	blx	r3
                         | SMC_SETUP_NCS_WR_SETUP(1)
                         | SMC_SETUP_NRD_SETUP(1)
                         | SMC_SETUP_NCS_RD_SETUP(1));
    smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   80a42:	4a16      	ldr	r2, [pc, #88]	; (80a9c <phywhisperer_setup_pins+0x128>)
   80a44:	2100      	movs	r1, #0
   80a46:	4813      	ldr	r0, [pc, #76]	; (80a94 <phywhisperer_setup_pins+0x120>)
   80a48:	4b15      	ldr	r3, [pc, #84]	; (80aa0 <phywhisperer_setup_pins+0x12c>)
   80a4a:	4798      	blx	r3
                         | SMC_PULSE_NCS_WR_PULSE(1)
                         | SMC_PULSE_NRD_PULSE(3)
                         | SMC_PULSE_NCS_RD_PULSE(1));
    smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   80a4c:	4a15      	ldr	r2, [pc, #84]	; (80aa4 <phywhisperer_setup_pins+0x130>)
   80a4e:	2100      	movs	r1, #0
   80a50:	4810      	ldr	r0, [pc, #64]	; (80a94 <phywhisperer_setup_pins+0x120>)
   80a52:	4b15      	ldr	r3, [pc, #84]	; (80aa8 <phywhisperer_setup_pins+0x134>)
   80a54:	4798      	blx	r3
                         | SMC_CYCLE_NRD_CYCLE(4));
    smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   80a56:	2203      	movs	r2, #3
   80a58:	2100      	movs	r1, #0
   80a5a:	480e      	ldr	r0, [pc, #56]	; (80a94 <phywhisperer_setup_pins+0x120>)
   80a5c:	4b13      	ldr	r3, [pc, #76]	; (80aac <phywhisperer_setup_pins+0x138>)
   80a5e:	4798      	blx	r3
                 | SMC_MODE_DBW_BIT_8);
}
   80a60:	bf00      	nop
   80a62:	bd80      	pop	{r7, pc}
   80a64:	00085905 	.word	0x00085905
   80a68:	0008045d 	.word	0x0008045d
   80a6c:	400e0c00 	.word	0x400e0c00
   80a70:	000808ed 	.word	0x000808ed
   80a74:	0008151d 	.word	0x0008151d
   80a78:	00083e91 	.word	0x00083e91
   80a7c:	08000001 	.word	0x08000001
   80a80:	00084479 	.word	0x00084479
   80a84:	400e0e00 	.word	0x400e0e00
   80a88:	0008459d 	.word	0x0008459d
   80a8c:	0008436d 	.word	0x0008436d
   80a90:	01010100 	.word	0x01010100
   80a94:	400e0000 	.word	0x400e0000
   80a98:	000818f9 	.word	0x000818f9
   80a9c:	01030101 	.word	0x01030101
   80aa0:	00081923 	.word	0x00081923
   80aa4:	00040002 	.word	0x00040002
   80aa8:	0008194d 	.word	0x0008194d
   80aac:	00081977 	.word	0x00081977

00080ab0 <hacky_delay>:

void hacky_delay(void)
{
   80ab0:	b480      	push	{r7}
   80ab2:	b083      	sub	sp, #12
   80ab4:	af00      	add	r7, sp, #0
    for (volatile uint32_t i = 0; i < 250000; i++);
   80ab6:	2300      	movs	r3, #0
   80ab8:	607b      	str	r3, [r7, #4]
   80aba:	e002      	b.n	80ac2 <hacky_delay+0x12>
   80abc:	687b      	ldr	r3, [r7, #4]
   80abe:	3301      	adds	r3, #1
   80ac0:	607b      	str	r3, [r7, #4]
   80ac2:	687b      	ldr	r3, [r7, #4]
   80ac4:	4a03      	ldr	r2, [pc, #12]	; (80ad4 <hacky_delay+0x24>)
   80ac6:	4293      	cmp	r3, r2
   80ac8:	d9f8      	bls.n	80abc <hacky_delay+0xc>
}
   80aca:	bf00      	nop
   80acc:	370c      	adds	r7, #12
   80ace:	46bd      	mov	sp, r7
   80ad0:	bc80      	pop	{r7}
   80ad2:	4770      	bx	lr
   80ad4:	0003d08f 	.word	0x0003d08f

00080ad8 <genclk_enable_config>:

static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
   80ad8:	b580      	push	{r7, lr}
   80ada:	b086      	sub	sp, #24
   80adc:	af00      	add	r7, sp, #0
   80ade:	60f8      	str	r0, [r7, #12]
   80ae0:	460b      	mov	r3, r1
   80ae2:	607a      	str	r2, [r7, #4]
   80ae4:	72fb      	strb	r3, [r7, #11]
    struct genclk_config gcfg;

    genclk_config_defaults(&gcfg, id);
   80ae6:	f107 0314 	add.w	r3, r7, #20
   80aea:	68f9      	ldr	r1, [r7, #12]
   80aec:	4618      	mov	r0, r3
   80aee:	4b0e      	ldr	r3, [pc, #56]	; (80b28 <genclk_enable_config+0x50>)
   80af0:	4798      	blx	r3
    genclk_enable_source(src);
   80af2:	7afb      	ldrb	r3, [r7, #11]
   80af4:	4618      	mov	r0, r3
   80af6:	4b0d      	ldr	r3, [pc, #52]	; (80b2c <genclk_enable_config+0x54>)
   80af8:	4798      	blx	r3
    genclk_config_set_source(&gcfg, src);
   80afa:	7afa      	ldrb	r2, [r7, #11]
   80afc:	f107 0314 	add.w	r3, r7, #20
   80b00:	4611      	mov	r1, r2
   80b02:	4618      	mov	r0, r3
   80b04:	4b0a      	ldr	r3, [pc, #40]	; (80b30 <genclk_enable_config+0x58>)
   80b06:	4798      	blx	r3
    genclk_config_set_divider(&gcfg, divider);
   80b08:	f107 0314 	add.w	r3, r7, #20
   80b0c:	6879      	ldr	r1, [r7, #4]
   80b0e:	4618      	mov	r0, r3
   80b10:	4b08      	ldr	r3, [pc, #32]	; (80b34 <genclk_enable_config+0x5c>)
   80b12:	4798      	blx	r3
    genclk_enable(&gcfg, id);
   80b14:	f107 0314 	add.w	r3, r7, #20
   80b18:	68f9      	ldr	r1, [r7, #12]
   80b1a:	4618      	mov	r0, r3
   80b1c:	4b06      	ldr	r3, [pc, #24]	; (80b38 <genclk_enable_config+0x60>)
   80b1e:	4798      	blx	r3
}
   80b20:	bf00      	nop
   80b22:	3718      	adds	r7, #24
   80b24:	46bd      	mov	sp, r7
   80b26:	bd80      	pop	{r7, pc}
   80b28:	00080609 	.word	0x00080609
   80b2c:	0008071d 	.word	0x0008071d
   80b30:	00080625 	.word	0x00080625
   80b34:	000806c1 	.word	0x000806c1
   80b38:	000806ed 	.word	0x000806ed

00080b3c <main>:

void (*pwr_list[])(void) = {phywhisperer_no_pwr, phywhisperer_5V_pwr, phywhisperer_host_pwr};

int main(void)
{
   80b3c:	b580      	push	{r7, lr}
   80b3e:	b086      	sub	sp, #24
   80b40:	af00      	add	r7, sp, #0
    uint32_t serial_number[4];

    // Read Device-ID from SAM3U. Do this before enabling interrupts etc.
    flash_read_unique_id(serial_number, sizeof(serial_number));
   80b42:	1d3b      	adds	r3, r7, #4
   80b44:	2110      	movs	r1, #16
   80b46:	4618      	mov	r0, r3
   80b48:	4b29      	ldr	r3, [pc, #164]	; (80bf0 <main+0xb4>)
   80b4a:	4798      	blx	r3

    irq_initialize_vectors();
    cpu_irq_enable();
   80b4c:	4b29      	ldr	r3, [pc, #164]	; (80bf4 <main+0xb8>)
   80b4e:	2201      	movs	r2, #1
   80b50:	701a      	strb	r2, [r3, #0]
   80b52:	f3bf 8f5f 	dmb	sy
   80b56:	b662      	cpsie	i

    // Initialize the sleep manager
    sleepmgr_init();
   80b58:	4b27      	ldr	r3, [pc, #156]	; (80bf8 <main+0xbc>)
   80b5a:	4798      	blx	r3
#if !SAMD21 && !SAMR21
    sysclk_init();
   80b5c:	4b27      	ldr	r3, [pc, #156]	; (80bfc <main+0xc0>)
   80b5e:	4798      	blx	r3
    phywhisperer_setup_pins();
   80b60:	4b27      	ldr	r3, [pc, #156]	; (80c00 <main+0xc4>)
   80b62:	4798      	blx	r3
#else
    system_init();
#endif
    genclk_enable_config(GENCLK_PCK_1, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
   80b64:	2200      	movs	r2, #0
   80b66:	210a      	movs	r1, #10
   80b68:	2001      	movs	r0, #1
   80b6a:	4b26      	ldr	r3, [pc, #152]	; (80c04 <main+0xc8>)
   80b6c:	4798      	blx	r3
    udc_start();
   80b6e:	4b26      	ldr	r3, [pc, #152]	; (80c08 <main+0xcc>)
   80b70:	4798      	blx	r3
    gpio_set_pin_high(LED0_GPIO);
   80b72:	201d      	movs	r0, #29
   80b74:	4b25      	ldr	r3, [pc, #148]	; (80c0c <main+0xd0>)
   80b76:	4798      	blx	r3
    gpio_set_pin_low(LED1_GPIO);
   80b78:	201f      	movs	r0, #31
   80b7a:	4b25      	ldr	r3, [pc, #148]	; (80c10 <main+0xd4>)
   80b7c:	4798      	blx	r3

    phywhisperer_no_pwr();
   80b7e:	4b25      	ldr	r3, [pc, #148]	; (80c14 <main+0xd8>)
   80b80:	4798      	blx	r3
    USB_PWR_STATE = 0;
   80b82:	4b25      	ldr	r3, [pc, #148]	; (80c18 <main+0xdc>)
   80b84:	2200      	movs	r2, #0
   80b86:	701a      	strb	r2, [r3, #0]

    uint8_t curr_pwr_setting = 0;
   80b88:	2300      	movs	r3, #0
   80b8a:	75fb      	strb	r3, [r7, #23]
    while(1) {
        sleepmgr_enter_sleep();
   80b8c:	4b23      	ldr	r3, [pc, #140]	; (80c1c <main+0xe0>)
   80b8e:	4798      	blx	r3
        uint8_t button_status = !(PIOA->PIO_PDSR & (1 << BUTTON_IN));
   80b90:	4b23      	ldr	r3, [pc, #140]	; (80c20 <main+0xe4>)
   80b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80b98:	2b00      	cmp	r3, #0
   80b9a:	bf0c      	ite	eq
   80b9c:	2301      	moveq	r3, #1
   80b9e:	2300      	movne	r3, #0
   80ba0:	b2db      	uxtb	r3, r3
   80ba2:	75bb      	strb	r3, [r7, #22]
        if (button_status){
   80ba4:	7dbb      	ldrb	r3, [r7, #22]
   80ba6:	2b00      	cmp	r3, #0
   80ba8:	d0f0      	beq.n	80b8c <main+0x50>
            hacky_delay(); //delay to try to debounce
   80baa:	4b1e      	ldr	r3, [pc, #120]	; (80c24 <main+0xe8>)
   80bac:	4798      	blx	r3
            while (!(PIOA->PIO_PDSR & (1 << BUTTON_IN))); //wait for trigger to be unpressed
   80bae:	bf00      	nop
   80bb0:	4b1b      	ldr	r3, [pc, #108]	; (80c20 <main+0xe4>)
   80bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80bb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80bb8:	2b00      	cmp	r3, #0
   80bba:	d0f9      	beq.n	80bb0 <main+0x74>

            if (USB_PWR_STATE && USB_PWR_STATE <= 2) {
   80bbc:	4b16      	ldr	r3, [pc, #88]	; (80c18 <main+0xdc>)
   80bbe:	781b      	ldrb	r3, [r3, #0]
   80bc0:	2b00      	cmp	r3, #0
   80bc2:	d012      	beq.n	80bea <main+0xae>
   80bc4:	4b14      	ldr	r3, [pc, #80]	; (80c18 <main+0xdc>)
   80bc6:	781b      	ldrb	r3, [r3, #0]
   80bc8:	2b02      	cmp	r3, #2
   80bca:	d80e      	bhi.n	80bea <main+0xae>
                if (pwr_st_from_io()) { //currently on
   80bcc:	4b16      	ldr	r3, [pc, #88]	; (80c28 <main+0xec>)
   80bce:	4798      	blx	r3
   80bd0:	4603      	mov	r3, r0
   80bd2:	2b00      	cmp	r3, #0
   80bd4:	d002      	beq.n	80bdc <main+0xa0>
                    phywhisperer_no_pwr();
   80bd6:	4b0f      	ldr	r3, [pc, #60]	; (80c14 <main+0xd8>)
   80bd8:	4798      	blx	r3
   80bda:	e006      	b.n	80bea <main+0xae>
                } else {
                    pwr_list[USB_PWR_STATE]();
   80bdc:	4b0e      	ldr	r3, [pc, #56]	; (80c18 <main+0xdc>)
   80bde:	781b      	ldrb	r3, [r3, #0]
   80be0:	461a      	mov	r2, r3
   80be2:	4b12      	ldr	r3, [pc, #72]	; (80c2c <main+0xf0>)
   80be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80be8:	4798      	blx	r3
                }
            }
            hacky_delay();
   80bea:	4b0e      	ldr	r3, [pc, #56]	; (80c24 <main+0xe8>)
   80bec:	4798      	blx	r3
    while(1) {
   80bee:	e7cd      	b.n	80b8c <main+0x50>
   80bf0:	000815f5 	.word	0x000815f5
   80bf4:	2000031a 	.word	0x2000031a
   80bf8:	00080565 	.word	0x00080565
   80bfc:	00083ab9 	.word	0x00083ab9
   80c00:	00080975 	.word	0x00080975
   80c04:	00080ad9 	.word	0x00080ad9
   80c08:	00084919 	.word	0x00084919
   80c0c:	00084419 	.word	0x00084419
   80c10:	00084449 	.word	0x00084449
   80c14:	000808ad 	.word	0x000808ad
   80c18:	200007f8 	.word	0x200007f8
   80c1c:	000805cd 	.word	0x000805cd
   80c20:	400e0c00 	.word	0x400e0c00
   80c24:	00080ab1 	.word	0x00080ab1
   80c28:	0008090d 	.word	0x0008090d
   80c2c:	20000280 	.word	0x20000280

00080c30 <osc_enable>:
{
   80c30:	b580      	push	{r7, lr}
   80c32:	b082      	sub	sp, #8
   80c34:	af00      	add	r7, sp, #0
   80c36:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80c38:	687b      	ldr	r3, [r7, #4]
   80c3a:	2b07      	cmp	r3, #7
   80c3c:	d82e      	bhi.n	80c9c <osc_enable+0x6c>
   80c3e:	a201      	add	r2, pc, #4	; (adr r2, 80c44 <osc_enable+0x14>)
   80c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80c44:	00080c9b 	.word	0x00080c9b
   80c48:	00080c65 	.word	0x00080c65
   80c4c:	00080c6d 	.word	0x00080c6d
   80c50:	00080c75 	.word	0x00080c75
   80c54:	00080c7d 	.word	0x00080c7d
   80c58:	00080c85 	.word	0x00080c85
   80c5c:	00080c8d 	.word	0x00080c8d
   80c60:	00080c95 	.word	0x00080c95
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80c64:	2000      	movs	r0, #0
   80c66:	4b0f      	ldr	r3, [pc, #60]	; (80ca4 <osc_enable+0x74>)
   80c68:	4798      	blx	r3
		break;
   80c6a:	e017      	b.n	80c9c <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80c6c:	2001      	movs	r0, #1
   80c6e:	4b0d      	ldr	r3, [pc, #52]	; (80ca4 <osc_enable+0x74>)
   80c70:	4798      	blx	r3
		break;
   80c72:	e013      	b.n	80c9c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80c74:	2000      	movs	r0, #0
   80c76:	4b0c      	ldr	r3, [pc, #48]	; (80ca8 <osc_enable+0x78>)
   80c78:	4798      	blx	r3
		break;
   80c7a:	e00f      	b.n	80c9c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80c7c:	2010      	movs	r0, #16
   80c7e:	4b0a      	ldr	r3, [pc, #40]	; (80ca8 <osc_enable+0x78>)
   80c80:	4798      	blx	r3
		break;
   80c82:	e00b      	b.n	80c9c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80c84:	2020      	movs	r0, #32
   80c86:	4b08      	ldr	r3, [pc, #32]	; (80ca8 <osc_enable+0x78>)
   80c88:	4798      	blx	r3
		break;
   80c8a:	e007      	b.n	80c9c <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80c8c:	203e      	movs	r0, #62	; 0x3e
   80c8e:	4b07      	ldr	r3, [pc, #28]	; (80cac <osc_enable+0x7c>)
   80c90:	4798      	blx	r3
		break;
   80c92:	e003      	b.n	80c9c <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   80c94:	4b06      	ldr	r3, [pc, #24]	; (80cb0 <osc_enable+0x80>)
   80c96:	4798      	blx	r3
		break;
   80c98:	e000      	b.n	80c9c <osc_enable+0x6c>
		break;
   80c9a:	bf00      	nop
}
   80c9c:	bf00      	nop
   80c9e:	3708      	adds	r7, #8
   80ca0:	46bd      	mov	sp, r7
   80ca2:	bd80      	pop	{r7, pc}
   80ca4:	00083c45 	.word	0x00083c45
   80ca8:	00083cb1 	.word	0x00083cb1
   80cac:	00083d25 	.word	0x00083d25
   80cb0:	00083d71 	.word	0x00083d71

00080cb4 <osc_is_ready>:
{
   80cb4:	b580      	push	{r7, lr}
   80cb6:	b082      	sub	sp, #8
   80cb8:	af00      	add	r7, sp, #0
   80cba:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80cbc:	687b      	ldr	r3, [r7, #4]
   80cbe:	2b07      	cmp	r3, #7
   80cc0:	d82f      	bhi.n	80d22 <osc_is_ready+0x6e>
   80cc2:	a201      	add	r2, pc, #4	; (adr r2, 80cc8 <osc_is_ready+0x14>)
   80cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80cc8:	00080ce9 	.word	0x00080ce9
   80ccc:	00080ced 	.word	0x00080ced
   80cd0:	00080ced 	.word	0x00080ced
   80cd4:	00080cff 	.word	0x00080cff
   80cd8:	00080cff 	.word	0x00080cff
   80cdc:	00080cff 	.word	0x00080cff
   80ce0:	00080d11 	.word	0x00080d11
   80ce4:	00080d11 	.word	0x00080d11
		return 1;
   80ce8:	2301      	movs	r3, #1
   80cea:	e01b      	b.n	80d24 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   80cec:	4b0f      	ldr	r3, [pc, #60]	; (80d2c <osc_is_ready+0x78>)
   80cee:	4798      	blx	r3
   80cf0:	4603      	mov	r3, r0
   80cf2:	2b00      	cmp	r3, #0
   80cf4:	bf14      	ite	ne
   80cf6:	2301      	movne	r3, #1
   80cf8:	2300      	moveq	r3, #0
   80cfa:	b2db      	uxtb	r3, r3
   80cfc:	e012      	b.n	80d24 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   80cfe:	4b0c      	ldr	r3, [pc, #48]	; (80d30 <osc_is_ready+0x7c>)
   80d00:	4798      	blx	r3
   80d02:	4603      	mov	r3, r0
   80d04:	2b00      	cmp	r3, #0
   80d06:	bf14      	ite	ne
   80d08:	2301      	movne	r3, #1
   80d0a:	2300      	moveq	r3, #0
   80d0c:	b2db      	uxtb	r3, r3
   80d0e:	e009      	b.n	80d24 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   80d10:	4b08      	ldr	r3, [pc, #32]	; (80d34 <osc_is_ready+0x80>)
   80d12:	4798      	blx	r3
   80d14:	4603      	mov	r3, r0
   80d16:	2b00      	cmp	r3, #0
   80d18:	bf14      	ite	ne
   80d1a:	2301      	movne	r3, #1
   80d1c:	2300      	moveq	r3, #0
   80d1e:	b2db      	uxtb	r3, r3
   80d20:	e000      	b.n	80d24 <osc_is_ready+0x70>
	return 0;
   80d22:	2300      	movs	r3, #0
}
   80d24:	4618      	mov	r0, r3
   80d26:	3708      	adds	r7, #8
   80d28:	46bd      	mov	sp, r7
   80d2a:	bd80      	pop	{r7, pc}
   80d2c:	00083c7d 	.word	0x00083c7d
   80d30:	00083d0d 	.word	0x00083d0d
   80d34:	00083dbd 	.word	0x00083dbd

00080d38 <osc_wait_ready>:
{
   80d38:	b580      	push	{r7, lr}
   80d3a:	b082      	sub	sp, #8
   80d3c:	af00      	add	r7, sp, #0
   80d3e:	4603      	mov	r3, r0
   80d40:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   80d42:	bf00      	nop
   80d44:	79fb      	ldrb	r3, [r7, #7]
   80d46:	4618      	mov	r0, r3
   80d48:	4b05      	ldr	r3, [pc, #20]	; (80d60 <osc_wait_ready+0x28>)
   80d4a:	4798      	blx	r3
   80d4c:	4603      	mov	r3, r0
   80d4e:	f083 0301 	eor.w	r3, r3, #1
   80d52:	b2db      	uxtb	r3, r3
   80d54:	2b00      	cmp	r3, #0
   80d56:	d1f5      	bne.n	80d44 <osc_wait_ready+0xc>
}
   80d58:	bf00      	nop
   80d5a:	3708      	adds	r7, #8
   80d5c:	46bd      	mov	sp, r7
   80d5e:	bd80      	pop	{r7, pc}
   80d60:	00080cb5 	.word	0x00080cb5

00080d64 <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
   80d64:	b580      	push	{r7, lr}
   80d66:	af00      	add	r7, sp, #0
	udd_detach();
   80d68:	4b01      	ldr	r3, [pc, #4]	; (80d70 <udc_detach+0xc>)
   80d6a:	4798      	blx	r3
}
   80d6c:	bf00      	nop
   80d6e:	bd80      	pop	{r7, pc}
   80d70:	00081f71 	.word	0x00081f71

00080d74 <main_suspend_action>:
void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   80d74:	b480      	push	{r7}
   80d76:	af00      	add	r7, sp, #0
}
   80d78:	bf00      	nop
   80d7a:	46bd      	mov	sp, r7
   80d7c:	bc80      	pop	{r7}
   80d7e:	4770      	bx	lr

00080d80 <main_resume_action>:

void main_resume_action(void)
{
   80d80:	b480      	push	{r7}
   80d82:	af00      	add	r7, sp, #0
}
   80d84:	bf00      	nop
   80d86:	46bd      	mov	sp, r7
   80d88:	bc80      	pop	{r7}
   80d8a:	4770      	bx	lr

00080d8c <main_sof_action>:

void main_sof_action(void)
{
   80d8c:	b480      	push	{r7}
   80d8e:	af00      	add	r7, sp, #0
    if (!main_b_vendor_enable)
   80d90:	4b04      	ldr	r3, [pc, #16]	; (80da4 <main_sof_action+0x18>)
   80d92:	781b      	ldrb	r3, [r3, #0]
   80d94:	b2db      	uxtb	r3, r3
   80d96:	f083 0301 	eor.w	r3, r3, #1
   80d9a:	b2db      	uxtb	r3, r3
   80d9c:	2b00      	cmp	r3, #0
        return;
}
   80d9e:	46bd      	mov	sp, r7
   80da0:	bc80      	pop	{r7}
   80da2:	4770      	bx	lr
   80da4:	2000028c 	.word	0x2000028c

00080da8 <main_vendor_enable>:

bool main_vendor_enable(void)
{
   80da8:	b580      	push	{r7, lr}
   80daa:	af00      	add	r7, sp, #0
    main_b_vendor_enable = true;
   80dac:	4b05      	ldr	r3, [pc, #20]	; (80dc4 <main_vendor_enable+0x1c>)
   80dae:	2201      	movs	r2, #1
   80db0:	701a      	strb	r2, [r3, #0]
    // Start data reception on OUT endpoints
#if UDI_VENDOR_EPS_SIZE_BULK_FS
    //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   80db2:	4a05      	ldr	r2, [pc, #20]	; (80dc8 <main_vendor_enable+0x20>)
   80db4:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80db8:	4804      	ldr	r0, [pc, #16]	; (80dcc <main_vendor_enable+0x24>)
   80dba:	4b05      	ldr	r3, [pc, #20]	; (80dd0 <main_vendor_enable+0x28>)
   80dbc:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
#endif
    return true;
   80dbe:	2301      	movs	r3, #1
}
   80dc0:	4618      	mov	r0, r3
   80dc2:	bd80      	pop	{r7, pc}
   80dc4:	2000028c 	.word	0x2000028c
   80dc8:	00081301 	.word	0x00081301
   80dcc:	200007fc 	.word	0x200007fc
   80dd0:	000840c1 	.word	0x000840c1

00080dd4 <main_vendor_disable>:

void main_vendor_disable(void)
{
   80dd4:	b480      	push	{r7}
   80dd6:	af00      	add	r7, sp, #0
    main_b_vendor_enable = false;
   80dd8:	4b03      	ldr	r3, [pc, #12]	; (80de8 <main_vendor_disable+0x14>)
   80dda:	2200      	movs	r2, #0
   80ddc:	701a      	strb	r2, [r3, #0]
}
   80dde:	bf00      	nop
   80de0:	46bd      	mov	sp, r7
   80de2:	bc80      	pop	{r7}
   80de4:	4770      	bx	lr
   80de6:	bf00      	nop
   80de8:	2000028c 	.word	0x2000028c

00080dec <ctrl_readmem_bulk>:
void ctrl_writemem_bulk(void);
void ctrl_writemem_ctrl(void);
void ctrl_progfpga_bulk(void);


void ctrl_readmem_bulk(void){
   80dec:	b580      	push	{r7, lr}
   80dee:	b082      	sub	sp, #8
   80df0:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80df2:	4b0f      	ldr	r3, [pc, #60]	; (80e30 <ctrl_readmem_bulk+0x44>)
   80df4:	681b      	ldr	r3, [r3, #0]
   80df6:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80df8:	4b0d      	ldr	r3, [pc, #52]	; (80e30 <ctrl_readmem_bulk+0x44>)
   80dfa:	685b      	ldr	r3, [r3, #4]
   80dfc:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80dfe:	4b0d      	ldr	r3, [pc, #52]	; (80e34 <ctrl_readmem_bulk+0x48>)
   80e00:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   80e02:	bf00      	nop
   80e04:	2002      	movs	r0, #2
   80e06:	4b0c      	ldr	r3, [pc, #48]	; (80e38 <ctrl_readmem_bulk+0x4c>)
   80e08:	4798      	blx	r3
   80e0a:	4603      	mov	r3, r0
   80e0c:	2b00      	cmp	r3, #0
   80e0e:	d0f9      	beq.n	80e04 <ctrl_readmem_bulk+0x18>

    FPGA_setaddr(address);
   80e10:	6838      	ldr	r0, [r7, #0]
   80e12:	4b0a      	ldr	r3, [pc, #40]	; (80e3c <ctrl_readmem_bulk+0x50>)
   80e14:	4798      	blx	r3

    /* Do memory read */
    udi_vendor_bulk_in_run(
   80e16:	4a0a      	ldr	r2, [pc, #40]	; (80e40 <ctrl_readmem_bulk+0x54>)
   80e18:	6879      	ldr	r1, [r7, #4]
   80e1a:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   80e1e:	4b09      	ldr	r3, [pc, #36]	; (80e44 <ctrl_readmem_bulk+0x58>)
   80e20:	4798      	blx	r3
        (uint8_t *) PSRAM_BASE_ADDRESS,
        buflen,
        main_vendor_bulk_in_received
        );
    FPGA_releaselock();
   80e22:	4b04      	ldr	r3, [pc, #16]	; (80e34 <ctrl_readmem_bulk+0x48>)
   80e24:	4798      	blx	r3
}
   80e26:	bf00      	nop
   80e28:	3708      	adds	r7, #8
   80e2a:	46bd      	mov	sp, r7
   80e2c:	bd80      	pop	{r7, pc}
   80e2e:	bf00      	nop
   80e30:	20000bfc 	.word	0x20000bfc
   80e34:	00081401 	.word	0x00081401
   80e38:	000813c1 	.word	0x000813c1
   80e3c:	00081431 	.word	0x00081431
   80e40:	000812c9 	.word	0x000812c9
   80e44:	00084095 	.word	0x00084095

00080e48 <ctrl_readmem_ctrl>:

void ctrl_readmem_ctrl(void){
   80e48:	b580      	push	{r7, lr}
   80e4a:	b082      	sub	sp, #8
   80e4c:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80e4e:	4b0f      	ldr	r3, [pc, #60]	; (80e8c <ctrl_readmem_ctrl+0x44>)
   80e50:	681b      	ldr	r3, [r3, #0]
   80e52:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80e54:	4b0d      	ldr	r3, [pc, #52]	; (80e8c <ctrl_readmem_ctrl+0x44>)
   80e56:	685b      	ldr	r3, [r3, #4]
   80e58:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80e5a:	4b0d      	ldr	r3, [pc, #52]	; (80e90 <ctrl_readmem_ctrl+0x48>)
   80e5c:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   80e5e:	bf00      	nop
   80e60:	2005      	movs	r0, #5
   80e62:	4b0c      	ldr	r3, [pc, #48]	; (80e94 <ctrl_readmem_ctrl+0x4c>)
   80e64:	4798      	blx	r3
   80e66:	4603      	mov	r3, r0
   80e68:	2b00      	cmp	r3, #0
   80e6a:	d0f9      	beq.n	80e60 <ctrl_readmem_ctrl+0x18>

    /* Set address */
    FPGA_setaddr(address);
   80e6c:	6838      	ldr	r0, [r7, #0]
   80e6e:	4b0a      	ldr	r3, [pc, #40]	; (80e98 <ctrl_readmem_ctrl+0x50>)
   80e70:	4798      	blx	r3

    /* Do memory read */
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   80e72:	4b0a      	ldr	r3, [pc, #40]	; (80e9c <ctrl_readmem_ctrl+0x54>)
   80e74:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   80e78:	601a      	str	r2, [r3, #0]

    /* Set size to read */
    ctrlmemread_size = buflen;
   80e7a:	4a09      	ldr	r2, [pc, #36]	; (80ea0 <ctrl_readmem_ctrl+0x58>)
   80e7c:	687b      	ldr	r3, [r7, #4]
   80e7e:	6013      	str	r3, [r2, #0]

    /* Start Transaction */
    FPGA_releaselock();
   80e80:	4b03      	ldr	r3, [pc, #12]	; (80e90 <ctrl_readmem_ctrl+0x48>)
   80e82:	4798      	blx	r3
}
   80e84:	bf00      	nop
   80e86:	3708      	adds	r7, #8
   80e88:	46bd      	mov	sp, r7
   80e8a:	bd80      	pop	{r7, pc}
   80e8c:	20000bfc 	.word	0x20000bfc
   80e90:	00081401 	.word	0x00081401
   80e94:	000813c1 	.word	0x000813c1
   80e98:	00081431 	.word	0x00081431
   80e9c:	20000c40 	.word	0x20000c40
   80ea0:	20000c44 	.word	0x20000c44

00080ea4 <ctrl_writemem_ctrl>:


void ctrl_writemem_ctrl(void){
   80ea4:	b580      	push	{r7, lr}
   80ea6:	b084      	sub	sp, #16
   80ea8:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80eaa:	4b16      	ldr	r3, [pc, #88]	; (80f04 <ctrl_writemem_ctrl+0x60>)
   80eac:	681b      	ldr	r3, [r3, #0]
   80eae:	60bb      	str	r3, [r7, #8]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80eb0:	4b14      	ldr	r3, [pc, #80]	; (80f04 <ctrl_writemem_ctrl+0x60>)
   80eb2:	685b      	ldr	r3, [r3, #4]
   80eb4:	607b      	str	r3, [r7, #4]

    uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
   80eb6:	4b14      	ldr	r3, [pc, #80]	; (80f08 <ctrl_writemem_ctrl+0x64>)
   80eb8:	603b      	str	r3, [r7, #0]

    //printf("Writing to %x, %d\n", address, buflen);

    FPGA_releaselock();
   80eba:	4b14      	ldr	r3, [pc, #80]	; (80f0c <ctrl_writemem_ctrl+0x68>)
   80ebc:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   80ebe:	bf00      	nop
   80ec0:	2001      	movs	r0, #1
   80ec2:	4b13      	ldr	r3, [pc, #76]	; (80f10 <ctrl_writemem_ctrl+0x6c>)
   80ec4:	4798      	blx	r3
   80ec6:	4603      	mov	r3, r0
   80ec8:	2b00      	cmp	r3, #0
   80eca:	d0f9      	beq.n	80ec0 <ctrl_writemem_ctrl+0x1c>

    /* Set address */
    FPGA_setaddr(address);
   80ecc:	6878      	ldr	r0, [r7, #4]
   80ece:	4b11      	ldr	r3, [pc, #68]	; (80f14 <ctrl_writemem_ctrl+0x70>)
   80ed0:	4798      	blx	r3

    /* Start Transaction */

    /* Do memory write */
    for(unsigned int i = 0; i < buflen; i++){
   80ed2:	2300      	movs	r3, #0
   80ed4:	60fb      	str	r3, [r7, #12]
   80ed6:	e00b      	b.n	80ef0 <ctrl_writemem_ctrl+0x4c>
        xram[i] = ctrlbuf_payload[i];
   80ed8:	683a      	ldr	r2, [r7, #0]
   80eda:	68fb      	ldr	r3, [r7, #12]
   80edc:	441a      	add	r2, r3
   80ede:	4b0e      	ldr	r3, [pc, #56]	; (80f18 <ctrl_writemem_ctrl+0x74>)
   80ee0:	6819      	ldr	r1, [r3, #0]
   80ee2:	68fb      	ldr	r3, [r7, #12]
   80ee4:	440b      	add	r3, r1
   80ee6:	7812      	ldrb	r2, [r2, #0]
   80ee8:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < buflen; i++){
   80eea:	68fb      	ldr	r3, [r7, #12]
   80eec:	3301      	adds	r3, #1
   80eee:	60fb      	str	r3, [r7, #12]
   80ef0:	68fa      	ldr	r2, [r7, #12]
   80ef2:	68bb      	ldr	r3, [r7, #8]
   80ef4:	429a      	cmp	r2, r3
   80ef6:	d3ef      	bcc.n	80ed8 <ctrl_writemem_ctrl+0x34>
    }

    FPGA_releaselock();
   80ef8:	4b04      	ldr	r3, [pc, #16]	; (80f0c <ctrl_writemem_ctrl+0x68>)
   80efa:	4798      	blx	r3
}
   80efc:	bf00      	nop
   80efe:	3710      	adds	r7, #16
   80f00:	46bd      	mov	sp, r7
   80f02:	bd80      	pop	{r7, pc}
   80f04:	20000bfc 	.word	0x20000bfc
   80f08:	20000c04 	.word	0x20000c04
   80f0c:	00081401 	.word	0x00081401
   80f10:	000813c1 	.word	0x000813c1
   80f14:	00081431 	.word	0x00081431
   80f18:	20000290 	.word	0x20000290

00080f1c <ctrl_writemem_bulk>:

static uint32_t bulkread_address = 0;
static uint32_t bulkread_len = 0;

void ctrl_writemem_bulk(void){
   80f1c:	b580      	push	{r7, lr}
   80f1e:	b082      	sub	sp, #8
   80f20:	af00      	add	r7, sp, #0
//uint32_t buflen = *(CTRLBUFFER_WORDPTR);
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80f22:	4b0a      	ldr	r3, [pc, #40]	; (80f4c <ctrl_writemem_bulk+0x30>)
   80f24:	685b      	ldr	r3, [r3, #4]
   80f26:	607b      	str	r3, [r7, #4]

    // TODO: see block in
    FPGA_releaselock();
   80f28:	4b09      	ldr	r3, [pc, #36]	; (80f50 <ctrl_writemem_bulk+0x34>)
   80f2a:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   80f2c:	bf00      	nop
   80f2e:	2004      	movs	r0, #4
   80f30:	4b08      	ldr	r3, [pc, #32]	; (80f54 <ctrl_writemem_bulk+0x38>)
   80f32:	4798      	blx	r3
   80f34:	4603      	mov	r3, r0
   80f36:	2b00      	cmp	r3, #0
   80f38:	d0f9      	beq.n	80f2e <ctrl_writemem_bulk+0x12>

    /* Set address */
    FPGA_setaddr(address);
   80f3a:	6878      	ldr	r0, [r7, #4]
   80f3c:	4b06      	ldr	r3, [pc, #24]	; (80f58 <ctrl_writemem_bulk+0x3c>)
   80f3e:	4798      	blx	r3

    /* Transaction done in generic callback */
    FPGA_releaselock();
   80f40:	4b03      	ldr	r3, [pc, #12]	; (80f50 <ctrl_writemem_bulk+0x34>)
   80f42:	4798      	blx	r3
}
   80f44:	bf00      	nop
   80f46:	3708      	adds	r7, #8
   80f48:	46bd      	mov	sp, r7
   80f4a:	bd80      	pop	{r7, pc}
   80f4c:	20000bfc 	.word	0x20000bfc
   80f50:	00081401 	.word	0x00081401
   80f54:	000813c1 	.word	0x000813c1
   80f58:	00081431 	.word	0x00081431

00080f5c <ctrl_sam3ucfg_cb>:

static void ctrl_sam3ucfg_cb(void)
{
   80f5c:	b580      	push	{r7, lr}
   80f5e:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   80f60:	4b18      	ldr	r3, [pc, #96]	; (80fc4 <ctrl_sam3ucfg_cb+0x68>)
   80f62:	885b      	ldrh	r3, [r3, #2]
   80f64:	b2db      	uxtb	r3, r3
   80f66:	2b02      	cmp	r3, #2
   80f68:	d00d      	beq.n	80f86 <ctrl_sam3ucfg_cb+0x2a>
   80f6a:	2b03      	cmp	r3, #3
   80f6c:	d00f      	beq.n	80f8e <ctrl_sam3ucfg_cb+0x32>
   80f6e:	2b01      	cmp	r3, #1
   80f70:	d124      	bne.n	80fbc <ctrl_sam3ucfg_cb+0x60>
    {
        /* Turn on slow clock */
    case 0x01:
        osc_enable(OSC_MAINCK_XTAL);
   80f72:	2006      	movs	r0, #6
   80f74:	4b14      	ldr	r3, [pc, #80]	; (80fc8 <ctrl_sam3ucfg_cb+0x6c>)
   80f76:	4798      	blx	r3
        osc_wait_ready(OSC_MAINCK_XTAL);
   80f78:	2006      	movs	r0, #6
   80f7a:	4b14      	ldr	r3, [pc, #80]	; (80fcc <ctrl_sam3ucfg_cb+0x70>)
   80f7c:	4798      	blx	r3
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   80f7e:	2010      	movs	r0, #16
   80f80:	4b13      	ldr	r3, [pc, #76]	; (80fd0 <ctrl_sam3ucfg_cb+0x74>)
   80f82:	4798      	blx	r3
        break;
   80f84:	e01b      	b.n	80fbe <ctrl_sam3ucfg_cb+0x62>

        /* Turn off slow clock */
    case 0x02:
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80f86:	2010      	movs	r0, #16
   80f88:	4b12      	ldr	r3, [pc, #72]	; (80fd4 <ctrl_sam3ucfg_cb+0x78>)
   80f8a:	4798      	blx	r3
        break;
   80f8c:	e017      	b.n	80fbe <ctrl_sam3ucfg_cb+0x62>
    case 0x03:
        /* Turn off connected stuff */
        //board_power(0);

        /* Clear ROM-mapping bit. */
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   80f8e:	2201      	movs	r2, #1
   80f90:	210c      	movs	r1, #12
   80f92:	4811      	ldr	r0, [pc, #68]	; (80fd8 <ctrl_sam3ucfg_cb+0x7c>)
   80f94:	4b11      	ldr	r3, [pc, #68]	; (80fdc <ctrl_sam3ucfg_cb+0x80>)
   80f96:	4798      	blx	r3

        /* Disconnect USB (will kill connection) */
        udc_detach();
   80f98:	4b11      	ldr	r3, [pc, #68]	; (80fe0 <ctrl_sam3ucfg_cb+0x84>)
   80f9a:	4798      	blx	r3

        /* With knowledge that I will rise again, I lay down my life. */
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   80f9c:	bf00      	nop
   80f9e:	4b11      	ldr	r3, [pc, #68]	; (80fe4 <ctrl_sam3ucfg_cb+0x88>)
   80fa0:	685b      	ldr	r3, [r3, #4]
   80fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80fa6:	2b00      	cmp	r3, #0
   80fa8:	d1f9      	bne.n	80f9e <ctrl_sam3ucfg_cb+0x42>
        RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   80faa:	4b0e      	ldr	r3, [pc, #56]	; (80fe4 <ctrl_sam3ucfg_cb+0x88>)
   80fac:	681b      	ldr	r3, [r3, #0]
   80fae:	4a0d      	ldr	r2, [pc, #52]	; (80fe4 <ctrl_sam3ucfg_cb+0x88>)
   80fb0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80fb4:	f043 0305 	orr.w	r3, r3, #5
   80fb8:	6013      	str	r3, [r2, #0]
        while(1);
   80fba:	e7fe      	b.n	80fba <ctrl_sam3ucfg_cb+0x5e>
        /* Make the jump */
        break;

        /* Oh well, sucks to be you */
    default:
        break;
   80fbc:	bf00      	nop
    }
}
   80fbe:	bf00      	nop
   80fc0:	bd80      	pop	{r7, pc}
   80fc2:	bf00      	nop
   80fc4:	20000d58 	.word	0x20000d58
   80fc8:	00080c31 	.word	0x00080c31
   80fcc:	00080d39 	.word	0x00080d39
   80fd0:	00083b45 	.word	0x00083b45
   80fd4:	00083bc5 	.word	0x00083bc5
   80fd8:	400e0800 	.word	0x400e0800
   80fdc:	00084175 	.word	0x00084175
   80fe0:	00080d65 	.word	0x00080d65
   80fe4:	400e1200 	.word	0x400e1200

00080fe8 <ctrl_progfpga_bulk>:

void ctrl_progfpga_bulk(void){
   80fe8:	b580      	push	{r7, lr}
   80fea:	af00      	add	r7, sp, #0

    switch(udd_g_ctrlreq.req.wValue){
   80fec:	4b0b      	ldr	r3, [pc, #44]	; (8101c <ctrl_progfpga_bulk+0x34>)
   80fee:	885b      	ldrh	r3, [r3, #2]
   80ff0:	2ba1      	cmp	r3, #161	; 0xa1
   80ff2:	d006      	beq.n	81002 <ctrl_progfpga_bulk+0x1a>
   80ff4:	2ba2      	cmp	r3, #162	; 0xa2
   80ff6:	d00a      	beq.n	8100e <ctrl_progfpga_bulk+0x26>
   80ff8:	2ba0      	cmp	r3, #160	; 0xa0
   80ffa:	d10c      	bne.n	81016 <ctrl_progfpga_bulk+0x2e>
    case 0xA0:
        fpga_program_setup1();
   80ffc:	4b08      	ldr	r3, [pc, #32]	; (81020 <ctrl_progfpga_bulk+0x38>)
   80ffe:	4798      	blx	r3
        break;
   81000:	e00a      	b.n	81018 <ctrl_progfpga_bulk+0x30>

    case 0xA1:
        /* Waiting on data... */
        fpga_program_setup2();
   81002:	4b08      	ldr	r3, [pc, #32]	; (81024 <ctrl_progfpga_bulk+0x3c>)
   81004:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   81006:	4b08      	ldr	r3, [pc, #32]	; (81028 <ctrl_progfpga_bulk+0x40>)
   81008:	220a      	movs	r2, #10
   8100a:	701a      	strb	r2, [r3, #0]
        break;
   8100c:	e004      	b.n	81018 <ctrl_progfpga_bulk+0x30>

    case 0xA2:
        /* Done */
        blockendpoint_usage = bep_emem;
   8100e:	4b06      	ldr	r3, [pc, #24]	; (81028 <ctrl_progfpga_bulk+0x40>)
   81010:	2200      	movs	r2, #0
   81012:	701a      	strb	r2, [r3, #0]
        break;
   81014:	e000      	b.n	81018 <ctrl_progfpga_bulk+0x30>

    default:
        break;
   81016:	bf00      	nop
    }
}
   81018:	bf00      	nop
   8101a:	bd80      	pop	{r7, pc}
   8101c:	20000d58 	.word	0x20000d58
   81020:	0008153d 	.word	0x0008153d
   81024:	000815bd 	.word	0x000815bd
   81028:	20000c3c 	.word	0x20000c3c

0008102c <ctrl_change_pwr>:

void ctrl_change_pwr(void) {
   8102c:	b480      	push	{r7}
   8102e:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.wValue) {
   81030:	4b17      	ldr	r3, [pc, #92]	; (81090 <ctrl_change_pwr+0x64>)
   81032:	885b      	ldrh	r3, [r3, #2]
   81034:	2b01      	cmp	r3, #1
   81036:	d00f      	beq.n	81058 <ctrl_change_pwr+0x2c>
   81038:	2b02      	cmp	r3, #2
   8103a:	d019      	beq.n	81070 <ctrl_change_pwr+0x44>
   8103c:	2b00      	cmp	r3, #0
   8103e:	d123      	bne.n	81088 <ctrl_change_pwr+0x5c>
    case 0x00: //USB power off
        PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   81040:	4b14      	ldr	r3, [pc, #80]	; (81094 <ctrl_change_pwr+0x68>)
   81042:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   81046:	635a      	str	r2, [r3, #52]	; 0x34
        PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   81048:	4b12      	ldr	r3, [pc, #72]	; (81094 <ctrl_change_pwr+0x68>)
   8104a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8104e:	635a      	str	r2, [r3, #52]	; 0x34
        USB_PWR_STATE = 0;
   81050:	4b11      	ldr	r3, [pc, #68]	; (81098 <ctrl_change_pwr+0x6c>)
   81052:	2200      	movs	r2, #0
   81054:	701a      	strb	r2, [r3, #0]
        break;
   81056:	e017      	b.n	81088 <ctrl_change_pwr+0x5c>
    case 0x01: //Use 5V power
        PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   81058:	4b0e      	ldr	r3, [pc, #56]	; (81094 <ctrl_change_pwr+0x68>)
   8105a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8105e:	635a      	str	r2, [r3, #52]	; 0x34
        PIOA->PIO_SODR = (1 << F_VB5V); //enable host power
   81060:	4b0c      	ldr	r3, [pc, #48]	; (81094 <ctrl_change_pwr+0x68>)
   81062:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   81066:	631a      	str	r2, [r3, #48]	; 0x30
        USB_PWR_STATE = 1;
   81068:	4b0b      	ldr	r3, [pc, #44]	; (81098 <ctrl_change_pwr+0x6c>)
   8106a:	2201      	movs	r2, #1
   8106c:	701a      	strb	r2, [r3, #0]
        break;
   8106e:	e00b      	b.n	81088 <ctrl_change_pwr+0x5c>
    case 0x02: //Use host power
        PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   81070:	4b08      	ldr	r3, [pc, #32]	; (81094 <ctrl_change_pwr+0x68>)
   81072:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   81076:	635a      	str	r2, [r3, #52]	; 0x34
        PIOA->PIO_SODR = (1 << F_VBHOST); //enable sniff power
   81078:	4b06      	ldr	r3, [pc, #24]	; (81094 <ctrl_change_pwr+0x68>)
   8107a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8107e:	631a      	str	r2, [r3, #48]	; 0x30
        USB_PWR_STATE = 2;
   81080:	4b05      	ldr	r3, [pc, #20]	; (81098 <ctrl_change_pwr+0x6c>)
   81082:	2202      	movs	r2, #2
   81084:	701a      	strb	r2, [r3, #0]
        break;
   81086:	bf00      	nop
    }
}
   81088:	bf00      	nop
   8108a:	46bd      	mov	sp, r7
   8108c:	bc80      	pop	{r7}
   8108e:	4770      	bx	lr
   81090:	20000d58 	.word	0x20000d58
   81094:	400e0c00 	.word	0x400e0c00
   81098:	200007f8 	.word	0x200007f8

0008109c <ctrl_fpga_reset>:

void ctrl_fpga_reset(void) {
   8109c:	b580      	push	{r7, lr}
   8109e:	af00      	add	r7, sp, #0
  gpio_set_pin_high(PIN_EBI_USB_SPARE0);
   810a0:	2026      	movs	r0, #38	; 0x26
   810a2:	4b03      	ldr	r3, [pc, #12]	; (810b0 <ctrl_fpga_reset+0x14>)
   810a4:	4798      	blx	r3
  gpio_set_pin_low(PIN_EBI_USB_SPARE0);
   810a6:	2026      	movs	r0, #38	; 0x26
   810a8:	4b02      	ldr	r3, [pc, #8]	; (810b4 <ctrl_fpga_reset+0x18>)
   810aa:	4798      	blx	r3
}
   810ac:	bf00      	nop
   810ae:	bd80      	pop	{r7, pc}
   810b0:	00084419 	.word	0x00084419
   810b4:	00084449 	.word	0x00084449

000810b8 <main_setup_out_received>:


bool main_setup_out_received(void)
{
   810b8:	b580      	push	{r7, lr}
   810ba:	af00      	add	r7, sp, #0
    //Add buffer if used
    udd_g_ctrlreq.payload = ctrlbuffer;
   810bc:	4b46      	ldr	r3, [pc, #280]	; (811d8 <main_setup_out_received+0x120>)
   810be:	4a47      	ldr	r2, [pc, #284]	; (811dc <main_setup_out_received+0x124>)
   810c0:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   810c2:	4b45      	ldr	r3, [pc, #276]	; (811d8 <main_setup_out_received+0x120>)
   810c4:	88db      	ldrh	r3, [r3, #6]
   810c6:	2b40      	cmp	r3, #64	; 0x40
   810c8:	bf28      	it	cs
   810ca:	2340      	movcs	r3, #64	; 0x40
   810cc:	b29a      	uxth	r2, r3
   810ce:	4b42      	ldr	r3, [pc, #264]	; (811d8 <main_setup_out_received+0x120>)
   810d0:	819a      	strh	r2, [r3, #12]

    blockendpoint_usage = bep_emem;
   810d2:	4b43      	ldr	r3, [pc, #268]	; (811e0 <main_setup_out_received+0x128>)
   810d4:	2200      	movs	r2, #0
   810d6:	701a      	strb	r2, [r3, #0]
    static uint8_t  respbuf[128];
    switch(udd_g_ctrlreq.req.bRequest){
   810d8:	4b3f      	ldr	r3, [pc, #252]	; (811d8 <main_setup_out_received+0x120>)
   810da:	785b      	ldrb	r3, [r3, #1]
   810dc:	3b10      	subs	r3, #16
   810de:	2b15      	cmp	r3, #21
   810e0:	d86e      	bhi.n	811c0 <main_setup_out_received+0x108>
   810e2:	a201      	add	r2, pc, #4	; (adr r2, 810e8 <main_setup_out_received+0x30>)
   810e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   810e8:	00081141 	.word	0x00081141
   810ec:	0008116d 	.word	0x0008116d
   810f0:	00081157 	.word	0x00081157
   810f4:	00081183 	.word	0x00081183
   810f8:	000811c1 	.word	0x000811c1
   810fc:	000811c1 	.word	0x000811c1
   81100:	00081199 	.word	0x00081199
   81104:	000811c1 	.word	0x000811c1
   81108:	000811c1 	.word	0x000811c1
   8110c:	000811c1 	.word	0x000811c1
   81110:	000811c1 	.word	0x000811c1
   81114:	000811c1 	.word	0x000811c1
   81118:	000811c1 	.word	0x000811c1
   8111c:	000811c1 	.word	0x000811c1
   81120:	000811c1 	.word	0x000811c1
   81124:	000811c1 	.word	0x000811c1
   81128:	000811c1 	.word	0x000811c1
   8112c:	000811c1 	.word	0x000811c1
   81130:	000811a3 	.word	0x000811a3
   81134:	000811c1 	.word	0x000811c1
   81138:	000811ad 	.word	0x000811ad
   8113c:	000811b7 	.word	0x000811b7
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   81140:	2006      	movs	r0, #6
   81142:	4b28      	ldr	r3, [pc, #160]	; (811e4 <main_setup_out_received+0x12c>)
   81144:	4798      	blx	r3
   81146:	4603      	mov	r3, r0
   81148:	2b00      	cmp	r3, #0
   8114a:	d03b      	beq.n	811c4 <main_setup_out_received+0x10c>
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   8114c:	4b22      	ldr	r3, [pc, #136]	; (811d8 <main_setup_out_received+0x120>)
   8114e:	4a26      	ldr	r2, [pc, #152]	; (811e8 <main_setup_out_received+0x130>)
   81150:	611a      	str	r2, [r3, #16]
            return true;
   81152:	2301      	movs	r3, #1
   81154:	e03e      	b.n	811d4 <main_setup_out_received+0x11c>
        }
        break;
    case REQ_MEMREAD_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   81156:	2006      	movs	r0, #6
   81158:	4b22      	ldr	r3, [pc, #136]	; (811e4 <main_setup_out_received+0x12c>)
   8115a:	4798      	blx	r3
   8115c:	4603      	mov	r3, r0
   8115e:	2b00      	cmp	r3, #0
   81160:	d032      	beq.n	811c8 <main_setup_out_received+0x110>
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   81162:	4b1d      	ldr	r3, [pc, #116]	; (811d8 <main_setup_out_received+0x120>)
   81164:	4a21      	ldr	r2, [pc, #132]	; (811ec <main_setup_out_received+0x134>)
   81166:	611a      	str	r2, [r3, #16]
            return true;
   81168:	2301      	movs	r3, #1
   8116a:	e033      	b.n	811d4 <main_setup_out_received+0x11c>
        break;


        /* Memory Write */
    case REQ_MEMWRITE_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   8116c:	2006      	movs	r0, #6
   8116e:	4b1d      	ldr	r3, [pc, #116]	; (811e4 <main_setup_out_received+0x12c>)
   81170:	4798      	blx	r3
   81172:	4603      	mov	r3, r0
   81174:	2b00      	cmp	r3, #0
   81176:	d029      	beq.n	811cc <main_setup_out_received+0x114>
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   81178:	4b17      	ldr	r3, [pc, #92]	; (811d8 <main_setup_out_received+0x120>)
   8117a:	4a1d      	ldr	r2, [pc, #116]	; (811f0 <main_setup_out_received+0x138>)
   8117c:	611a      	str	r2, [r3, #16]
            return true;
   8117e:	2301      	movs	r3, #1
   81180:	e028      	b.n	811d4 <main_setup_out_received+0x11c>
        }
        break;


    case REQ_MEMWRITE_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   81182:	2006      	movs	r0, #6
   81184:	4b17      	ldr	r3, [pc, #92]	; (811e4 <main_setup_out_received+0x12c>)
   81186:	4798      	blx	r3
   81188:	4603      	mov	r3, r0
   8118a:	2b00      	cmp	r3, #0
   8118c:	d020      	beq.n	811d0 <main_setup_out_received+0x118>
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   8118e:	4b12      	ldr	r3, [pc, #72]	; (811d8 <main_setup_out_received+0x120>)
   81190:	4a18      	ldr	r2, [pc, #96]	; (811f4 <main_setup_out_received+0x13c>)
   81192:	611a      	str	r2, [r3, #16]
            return true;
   81194:	2301      	movs	r3, #1
   81196:	e01d      	b.n	811d4 <main_setup_out_received+0x11c>
        }
        break;

    case REQ_FPGA_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   81198:	4b0f      	ldr	r3, [pc, #60]	; (811d8 <main_setup_out_received+0x120>)
   8119a:	4a17      	ldr	r2, [pc, #92]	; (811f8 <main_setup_out_received+0x140>)
   8119c:	611a      	str	r2, [r3, #16]
        return true;
   8119e:	2301      	movs	r3, #1
   811a0:	e018      	b.n	811d4 <main_setup_out_received+0x11c>

    case REQ_SAM3U_CFG:
        udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
   811a2:	4b0d      	ldr	r3, [pc, #52]	; (811d8 <main_setup_out_received+0x120>)
   811a4:	4a15      	ldr	r2, [pc, #84]	; (811fc <main_setup_out_received+0x144>)
   811a6:	611a      	str	r2, [r3, #16]
        return true;
   811a8:	2301      	movs	r3, #1
   811aa:	e013      	b.n	811d4 <main_setup_out_received+0x11c>

    case REQ_CHANGE_PWR:
        //TODO
        udd_g_ctrlreq.callback = ctrl_change_pwr;
   811ac:	4b0a      	ldr	r3, [pc, #40]	; (811d8 <main_setup_out_received+0x120>)
   811ae:	4a14      	ldr	r2, [pc, #80]	; (81200 <main_setup_out_received+0x148>)
   811b0:	611a      	str	r2, [r3, #16]
        return true;
   811b2:	2301      	movs	r3, #1
   811b4:	e00e      	b.n	811d4 <main_setup_out_received+0x11c>

    case REQ_FPGA_RESET:
        udd_g_ctrlreq.callback = ctrl_fpga_reset;
   811b6:	4b08      	ldr	r3, [pc, #32]	; (811d8 <main_setup_out_received+0x120>)
   811b8:	4a12      	ldr	r2, [pc, #72]	; (81204 <main_setup_out_received+0x14c>)
   811ba:	611a      	str	r2, [r3, #16]
        return true;
   811bc:	2301      	movs	r3, #1
   811be:	e009      	b.n	811d4 <main_setup_out_received+0x11c>

    default:
        return false;
   811c0:	2300      	movs	r3, #0
   811c2:	e007      	b.n	811d4 <main_setup_out_received+0x11c>
        break;
   811c4:	bf00      	nop
   811c6:	e004      	b.n	811d2 <main_setup_out_received+0x11a>
        break;
   811c8:	bf00      	nop
   811ca:	e002      	b.n	811d2 <main_setup_out_received+0x11a>
        break;
   811cc:	bf00      	nop
   811ce:	e000      	b.n	811d2 <main_setup_out_received+0x11a>
        break;
   811d0:	bf00      	nop
    }

    return false;
   811d2:	2300      	movs	r3, #0
}
   811d4:	4618      	mov	r0, r3
   811d6:	bd80      	pop	{r7, pc}
   811d8:	20000d58 	.word	0x20000d58
   811dc:	20000bfc 	.word	0x20000bfc
   811e0:	20000c3c 	.word	0x20000c3c
   811e4:	000813c1 	.word	0x000813c1
   811e8:	00080ded 	.word	0x00080ded
   811ec:	00080e49 	.word	0x00080e49
   811f0:	00080f1d 	.word	0x00080f1d
   811f4:	00080ea5 	.word	0x00080ea5
   811f8:	00080fe9 	.word	0x00080fe9
   811fc:	00080f5d 	.word	0x00080f5d
   81200:	0008102d 	.word	0x0008102d
   81204:	0008109d 	.word	0x0008109d

00081208 <main_setup_in_received>:
  && (udd_g_ctrlreq.req.bRequest == 0)
  && (0 != udd_g_ctrlreq.req.wLength)
*/

bool main_setup_in_received(void)
{
   81208:	b580      	push	{r7, lr}
   8120a:	af00      	add	r7, sp, #0
    */

    static uint8_t  respbuf[64];
    unsigned int cnt;

    switch(udd_g_ctrlreq.req.bRequest){
   8120c:	4b27      	ldr	r3, [pc, #156]	; (812ac <main_setup_in_received+0xa4>)
   8120e:	785b      	ldrb	r3, [r3, #1]
   81210:	2b15      	cmp	r3, #21
   81212:	d02a      	beq.n	8126a <main_setup_in_received+0x62>
   81214:	2b17      	cmp	r3, #23
   81216:	d017      	beq.n	81248 <main_setup_in_received+0x40>
   81218:	2b12      	cmp	r3, #18
   8121a:	d143      	bne.n	812a4 <main_setup_in_received+0x9c>
    case REQ_MEMREAD_CTRL:
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   8121c:	4b24      	ldr	r3, [pc, #144]	; (812b0 <main_setup_in_received+0xa8>)
   8121e:	681b      	ldr	r3, [r3, #0]
   81220:	4a22      	ldr	r2, [pc, #136]	; (812ac <main_setup_in_received+0xa4>)
   81222:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   81224:	4b23      	ldr	r3, [pc, #140]	; (812b4 <main_setup_in_received+0xac>)
   81226:	681b      	ldr	r3, [r3, #0]
   81228:	b29a      	uxth	r2, r3
   8122a:	4b20      	ldr	r3, [pc, #128]	; (812ac <main_setup_in_received+0xa4>)
   8122c:	819a      	strh	r2, [r3, #12]
        ctrlmemread_size = 0;
   8122e:	4b21      	ldr	r3, [pc, #132]	; (812b4 <main_setup_in_received+0xac>)
   81230:	2200      	movs	r2, #0
   81232:	601a      	str	r2, [r3, #0]

        if (FPGA_lockstatus() == fpga_ctrlmem){
   81234:	4b20      	ldr	r3, [pc, #128]	; (812b8 <main_setup_in_received+0xb0>)
   81236:	4798      	blx	r3
   81238:	4603      	mov	r3, r0
   8123a:	2b05      	cmp	r3, #5
   8123c:	d102      	bne.n	81244 <main_setup_in_received+0x3c>
            FPGA_setlock(fpga_unlocked);
   8123e:	2000      	movs	r0, #0
   81240:	4b1e      	ldr	r3, [pc, #120]	; (812bc <main_setup_in_received+0xb4>)
   81242:	4798      	blx	r3
        }

        return true;
   81244:	2301      	movs	r3, #1
   81246:	e02e      	b.n	812a6 <main_setup_in_received+0x9e>
        break;

    case REQ_FW_VERSION:
        respbuf[0] = FW_VER_MAJOR;
   81248:	4b1d      	ldr	r3, [pc, #116]	; (812c0 <main_setup_in_received+0xb8>)
   8124a:	2200      	movs	r2, #0
   8124c:	701a      	strb	r2, [r3, #0]
        respbuf[1] = FW_VER_MINOR;
   8124e:	4b1c      	ldr	r3, [pc, #112]	; (812c0 <main_setup_in_received+0xb8>)
   81250:	220a      	movs	r2, #10
   81252:	705a      	strb	r2, [r3, #1]
        respbuf[2] = FW_VER_DEBUG;
   81254:	4b1a      	ldr	r3, [pc, #104]	; (812c0 <main_setup_in_received+0xb8>)
   81256:	2200      	movs	r2, #0
   81258:	709a      	strb	r2, [r3, #2]
        udd_g_ctrlreq.payload = respbuf;
   8125a:	4b14      	ldr	r3, [pc, #80]	; (812ac <main_setup_in_received+0xa4>)
   8125c:	4a18      	ldr	r2, [pc, #96]	; (812c0 <main_setup_in_received+0xb8>)
   8125e:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 3;
   81260:	4b12      	ldr	r3, [pc, #72]	; (812ac <main_setup_in_received+0xa4>)
   81262:	2203      	movs	r2, #3
   81264:	819a      	strh	r2, [r3, #12]
        return true;
   81266:	2301      	movs	r3, #1
   81268:	e01d      	b.n	812a6 <main_setup_in_received+0x9e>
        break;

    case REQ_FPGA_STATUS:
        respbuf[0] = FPGA_ISDONE();
   8126a:	2013      	movs	r0, #19
   8126c:	4b15      	ldr	r3, [pc, #84]	; (812c4 <main_setup_in_received+0xbc>)
   8126e:	4798      	blx	r3
   81270:	4603      	mov	r3, r0
   81272:	2b00      	cmp	r3, #0
   81274:	bf14      	ite	ne
   81276:	2301      	movne	r3, #1
   81278:	2300      	moveq	r3, #0
   8127a:	b2db      	uxtb	r3, r3
   8127c:	461a      	mov	r2, r3
   8127e:	4b10      	ldr	r3, [pc, #64]	; (812c0 <main_setup_in_received+0xb8>)
   81280:	701a      	strb	r2, [r3, #0]
        respbuf[1] = 0;
   81282:	4b0f      	ldr	r3, [pc, #60]	; (812c0 <main_setup_in_received+0xb8>)
   81284:	2200      	movs	r2, #0
   81286:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   81288:	4b0d      	ldr	r3, [pc, #52]	; (812c0 <main_setup_in_received+0xb8>)
   8128a:	2200      	movs	r2, #0
   8128c:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   8128e:	4b0c      	ldr	r3, [pc, #48]	; (812c0 <main_setup_in_received+0xb8>)
   81290:	2200      	movs	r2, #0
   81292:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   81294:	4b05      	ldr	r3, [pc, #20]	; (812ac <main_setup_in_received+0xa4>)
   81296:	4a0a      	ldr	r2, [pc, #40]	; (812c0 <main_setup_in_received+0xb8>)
   81298:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 4;
   8129a:	4b04      	ldr	r3, [pc, #16]	; (812ac <main_setup_in_received+0xa4>)
   8129c:	2204      	movs	r2, #4
   8129e:	819a      	strh	r2, [r3, #12]
        return true;
   812a0:	2301      	movs	r3, #1
   812a2:	e000      	b.n	812a6 <main_setup_in_received+0x9e>
        break;
    default:
        return false;
   812a4:	2300      	movs	r3, #0
    }
    return false;
}
   812a6:	4618      	mov	r0, r3
   812a8:	bd80      	pop	{r7, pc}
   812aa:	bf00      	nop
   812ac:	20000d58 	.word	0x20000d58
   812b0:	20000c40 	.word	0x20000c40
   812b4:	20000c44 	.word	0x20000c44
   812b8:	00081419 	.word	0x00081419
   812bc:	000813c1 	.word	0x000813c1
   812c0:	20000c48 	.word	0x20000c48
   812c4:	000843e9 	.word	0x000843e9

000812c8 <main_vendor_bulk_in_received>:

void main_vendor_bulk_in_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
   812c8:	b580      	push	{r7, lr}
   812ca:	b082      	sub	sp, #8
   812cc:	af00      	add	r7, sp, #0
   812ce:	4603      	mov	r3, r0
   812d0:	6039      	str	r1, [r7, #0]
   812d2:	71fb      	strb	r3, [r7, #7]
   812d4:	4613      	mov	r3, r2
   812d6:	71bb      	strb	r3, [r7, #6]
    UNUSED(nb_transfered);
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   812d8:	79fb      	ldrb	r3, [r7, #7]
   812da:	2b00      	cmp	r3, #0
   812dc:	d108      	bne.n	812f0 <main_vendor_bulk_in_received+0x28>
        return; // Transfer aborted/error
    }

    if (FPGA_lockstatus() == fpga_blockin){
   812de:	4b06      	ldr	r3, [pc, #24]	; (812f8 <main_vendor_bulk_in_received+0x30>)
   812e0:	4798      	blx	r3
   812e2:	4603      	mov	r3, r0
   812e4:	2b02      	cmp	r3, #2
   812e6:	d104      	bne.n	812f2 <main_vendor_bulk_in_received+0x2a>
        FPGA_setlock(fpga_unlocked);
   812e8:	2000      	movs	r0, #0
   812ea:	4b04      	ldr	r3, [pc, #16]	; (812fc <main_vendor_bulk_in_received+0x34>)
   812ec:	4798      	blx	r3
   812ee:	e000      	b.n	812f2 <main_vendor_bulk_in_received+0x2a>
        return; // Transfer aborted/error
   812f0:	bf00      	nop
    }
}
   812f2:	3708      	adds	r7, #8
   812f4:	46bd      	mov	sp, r7
   812f6:	bd80      	pop	{r7, pc}
   812f8:	00081419 	.word	0x00081419
   812fc:	000813c1 	.word	0x000813c1

00081300 <main_vendor_bulk_out_received>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep)
{
   81300:	b580      	push	{r7, lr}
   81302:	b084      	sub	sp, #16
   81304:	af00      	add	r7, sp, #0
   81306:	4603      	mov	r3, r0
   81308:	6039      	str	r1, [r7, #0]
   8130a:	71fb      	strb	r3, [r7, #7]
   8130c:	4613      	mov	r3, r2
   8130e:	71bb      	strb	r3, [r7, #6]
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   81310:	79fb      	ldrb	r3, [r7, #7]
   81312:	2b00      	cmp	r3, #0
   81314:	d006      	beq.n	81324 <main_vendor_bulk_out_received+0x24>
        // Transfer aborted

        //restart
        udi_vendor_bulk_out_run(
   81316:	4a22      	ldr	r2, [pc, #136]	; (813a0 <main_vendor_bulk_out_received+0xa0>)
   81318:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8131c:	4821      	ldr	r0, [pc, #132]	; (813a4 <main_vendor_bulk_out_received+0xa4>)
   8131e:	4b22      	ldr	r3, [pc, #136]	; (813a8 <main_vendor_bulk_out_received+0xa8>)
   81320:	4798      	blx	r3
            main_buf_loopback,
            sizeof(main_buf_loopback),
            main_vendor_bulk_out_received);

        return;
   81322:	e039      	b.n	81398 <main_vendor_bulk_out_received+0x98>
    }

    if (blockendpoint_usage == bep_emem){
   81324:	4b21      	ldr	r3, [pc, #132]	; (813ac <main_vendor_bulk_out_received+0xac>)
   81326:	781b      	ldrb	r3, [r3, #0]
   81328:	2b00      	cmp	r3, #0
   8132a:	d11a      	bne.n	81362 <main_vendor_bulk_out_received+0x62>
        for(unsigned int i = 0; i < nb_transfered; i++){
   8132c:	2300      	movs	r3, #0
   8132e:	60fb      	str	r3, [r7, #12]
   81330:	e00b      	b.n	8134a <main_vendor_bulk_out_received+0x4a>
            xram[i] = main_buf_loopback[i];
   81332:	4b1f      	ldr	r3, [pc, #124]	; (813b0 <main_vendor_bulk_out_received+0xb0>)
   81334:	681a      	ldr	r2, [r3, #0]
   81336:	68fb      	ldr	r3, [r7, #12]
   81338:	4413      	add	r3, r2
   8133a:	491a      	ldr	r1, [pc, #104]	; (813a4 <main_vendor_bulk_out_received+0xa4>)
   8133c:	68fa      	ldr	r2, [r7, #12]
   8133e:	440a      	add	r2, r1
   81340:	7812      	ldrb	r2, [r2, #0]
   81342:	701a      	strb	r2, [r3, #0]
        for(unsigned int i = 0; i < nb_transfered; i++){
   81344:	68fb      	ldr	r3, [r7, #12]
   81346:	3301      	adds	r3, #1
   81348:	60fb      	str	r3, [r7, #12]
   8134a:	68fa      	ldr	r2, [r7, #12]
   8134c:	683b      	ldr	r3, [r7, #0]
   8134e:	429a      	cmp	r2, r3
   81350:	d3ef      	bcc.n	81332 <main_vendor_bulk_out_received+0x32>
        }

        if (FPGA_lockstatus() == fpga_blockout){
   81352:	4b18      	ldr	r3, [pc, #96]	; (813b4 <main_vendor_bulk_out_received+0xb4>)
   81354:	4798      	blx	r3
   81356:	4603      	mov	r3, r0
   81358:	2b04      	cmp	r3, #4
   8135a:	d117      	bne.n	8138c <main_vendor_bulk_out_received+0x8c>
            FPGA_releaselock();
   8135c:	4b16      	ldr	r3, [pc, #88]	; (813b8 <main_vendor_bulk_out_received+0xb8>)
   8135e:	4798      	blx	r3
   81360:	e014      	b.n	8138c <main_vendor_bulk_out_received+0x8c>
        }
    } else if (blockendpoint_usage == bep_fpgabitstream){
   81362:	4b12      	ldr	r3, [pc, #72]	; (813ac <main_vendor_bulk_out_received+0xac>)
   81364:	781b      	ldrb	r3, [r3, #0]
   81366:	2b0a      	cmp	r3, #10
   81368:	d110      	bne.n	8138c <main_vendor_bulk_out_received+0x8c>

        /* Send byte to FPGA - this could eventually be done via SPI */
        // TODO: is this dangerous?
        for(unsigned int i = 0; i < nb_transfered; i++){
   8136a:	2300      	movs	r3, #0
   8136c:	60bb      	str	r3, [r7, #8]
   8136e:	e009      	b.n	81384 <main_vendor_bulk_out_received+0x84>
            fpga_program_sendbyte(main_buf_loopback[i]);
   81370:	4a0c      	ldr	r2, [pc, #48]	; (813a4 <main_vendor_bulk_out_received+0xa4>)
   81372:	68bb      	ldr	r3, [r7, #8]
   81374:	4413      	add	r3, r2
   81376:	781b      	ldrb	r3, [r3, #0]
   81378:	4618      	mov	r0, r3
   8137a:	4b10      	ldr	r3, [pc, #64]	; (813bc <main_vendor_bulk_out_received+0xbc>)
   8137c:	4798      	blx	r3
        for(unsigned int i = 0; i < nb_transfered; i++){
   8137e:	68bb      	ldr	r3, [r7, #8]
   81380:	3301      	adds	r3, #1
   81382:	60bb      	str	r3, [r7, #8]
   81384:	68ba      	ldr	r2, [r7, #8]
   81386:	683b      	ldr	r3, [r7, #0]
   81388:	429a      	cmp	r2, r3
   8138a:	d3f1      	bcc.n	81370 <main_vendor_bulk_out_received+0x70>
#endif
    }

    //printf("BULKOUT: %d bytes\n", (int)nb_transfered);

    udi_vendor_bulk_out_run(
   8138c:	4a04      	ldr	r2, [pc, #16]	; (813a0 <main_vendor_bulk_out_received+0xa0>)
   8138e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81392:	4804      	ldr	r0, [pc, #16]	; (813a4 <main_vendor_bulk_out_received+0xa4>)
   81394:	4b04      	ldr	r3, [pc, #16]	; (813a8 <main_vendor_bulk_out_received+0xa8>)
   81396:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
}
   81398:	3710      	adds	r7, #16
   8139a:	46bd      	mov	sp, r7
   8139c:	bd80      	pop	{r7, pc}
   8139e:	bf00      	nop
   813a0:	00081301 	.word	0x00081301
   813a4:	200007fc 	.word	0x200007fc
   813a8:	000840c1 	.word	0x000840c1
   813ac:	20000c3c 	.word	0x20000c3c
   813b0:	20000290 	.word	0x20000290
   813b4:	00081419 	.word	0x00081419
   813b8:	00081401 	.word	0x00081401
   813bc:	000815d1 	.word	0x000815d1

000813c0 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   813c0:	b580      	push	{r7, lr}
   813c2:	b084      	sub	sp, #16
   813c4:	af00      	add	r7, sp, #0
   813c6:	4603      	mov	r3, r0
   813c8:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
   813ca:	2300      	movs	r3, #0
   813cc:	60fb      	str	r3, [r7, #12]
  cpu_irq_enter_critical();
   813ce:	4b09      	ldr	r3, [pc, #36]	; (813f4 <FPGA_setlock+0x34>)
   813d0:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   813d2:	4b09      	ldr	r3, [pc, #36]	; (813f8 <FPGA_setlock+0x38>)
   813d4:	781b      	ldrb	r3, [r3, #0]
   813d6:	b2db      	uxtb	r3, r3
   813d8:	2b00      	cmp	r3, #0
   813da:	d104      	bne.n	813e6 <FPGA_setlock+0x26>
  {
    ret = 1;
   813dc:	2301      	movs	r3, #1
   813de:	60fb      	str	r3, [r7, #12]
    _fpga_locked = lockstatus;
   813e0:	4a05      	ldr	r2, [pc, #20]	; (813f8 <FPGA_setlock+0x38>)
   813e2:	79fb      	ldrb	r3, [r7, #7]
   813e4:	7013      	strb	r3, [r2, #0]
  }
  cpu_irq_leave_critical();
   813e6:	4b05      	ldr	r3, [pc, #20]	; (813fc <FPGA_setlock+0x3c>)
   813e8:	4798      	blx	r3
  return ret;
   813ea:	68fb      	ldr	r3, [r7, #12]
}
   813ec:	4618      	mov	r0, r3
   813ee:	3710      	adds	r7, #16
   813f0:	46bd      	mov	sp, r7
   813f2:	bd80      	pop	{r7, pc}
   813f4:	00085929 	.word	0x00085929
   813f8:	20000c88 	.word	0x20000c88
   813fc:	0008597d 	.word	0x0008597d

00081400 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
   81400:	b480      	push	{r7}
   81402:	af00      	add	r7, sp, #0
  _fpga_locked = fpga_unlocked;
   81404:	4b03      	ldr	r3, [pc, #12]	; (81414 <FPGA_releaselock+0x14>)
   81406:	2200      	movs	r2, #0
   81408:	701a      	strb	r2, [r3, #0]
}
   8140a:	bf00      	nop
   8140c:	46bd      	mov	sp, r7
   8140e:	bc80      	pop	{r7}
   81410:	4770      	bx	lr
   81412:	bf00      	nop
   81414:	20000c88 	.word	0x20000c88

00081418 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
   81418:	b480      	push	{r7}
   8141a:	af00      	add	r7, sp, #0
  return _fpga_locked;
   8141c:	4b03      	ldr	r3, [pc, #12]	; (8142c <FPGA_lockstatus+0x14>)
   8141e:	781b      	ldrb	r3, [r3, #0]
   81420:	b2db      	uxtb	r3, r3
}
   81422:	4618      	mov	r0, r3
   81424:	46bd      	mov	sp, r7
   81426:	bc80      	pop	{r7}
   81428:	4770      	bx	lr
   8142a:	bf00      	nop
   8142c:	20000c88 	.word	0x20000c88

00081430 <FPGA_setaddr>:
  FPGA_releaselock();
  cpu_irq_leave_critical();
}

void FPGA_setaddr(uint32_t addr)
{
   81430:	b580      	push	{r7, lr}
   81432:	b082      	sub	sp, #8
   81434:	af00      	add	r7, sp, #0
   81436:	6078      	str	r0, [r7, #4]
  pio_sync_output_write(FPGA_ADDR_PORT, addr);
   81438:	6879      	ldr	r1, [r7, #4]
   8143a:	4806      	ldr	r0, [pc, #24]	; (81454 <FPGA_setaddr+0x24>)
   8143c:	4b06      	ldr	r3, [pc, #24]	; (81458 <FPGA_setaddr+0x28>)
   8143e:	4798      	blx	r3
  gpio_set_pin_low(PIN_EBI_USB_SPARE1);
   81440:	2031      	movs	r0, #49	; 0x31
   81442:	4b06      	ldr	r3, [pc, #24]	; (8145c <FPGA_setaddr+0x2c>)
   81444:	4798      	blx	r3
  gpio_set_pin_high(PIN_EBI_USB_SPARE1);
   81446:	2031      	movs	r0, #49	; 0x31
   81448:	4b05      	ldr	r3, [pc, #20]	; (81460 <FPGA_setaddr+0x30>)
   8144a:	4798      	blx	r3
}
   8144c:	bf00      	nop
   8144e:	3708      	adds	r7, #8
   81450:	46bd      	mov	sp, r7
   81452:	bd80      	pop	{r7, pc}
   81454:	400e0e00 	.word	0x400e0e00
   81458:	00084389 	.word	0x00084389
   8145c:	00084449 	.word	0x00084449
   81460:	00084419 	.word	0x00084419

00081464 <osc_get_rate>:
{
   81464:	b480      	push	{r7}
   81466:	b083      	sub	sp, #12
   81468:	af00      	add	r7, sp, #0
   8146a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8146c:	687b      	ldr	r3, [r7, #4]
   8146e:	2b07      	cmp	r3, #7
   81470:	d823      	bhi.n	814ba <osc_get_rate+0x56>
   81472:	a201      	add	r2, pc, #4	; (adr r2, 81478 <osc_get_rate+0x14>)
   81474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81478:	00081499 	.word	0x00081499
   8147c:	0008149f 	.word	0x0008149f
   81480:	000814a3 	.word	0x000814a3
   81484:	000814a7 	.word	0x000814a7
   81488:	000814ab 	.word	0x000814ab
   8148c:	000814af 	.word	0x000814af
   81490:	000814b3 	.word	0x000814b3
   81494:	000814b7 	.word	0x000814b7
		return OSC_SLCK_32K_RC_HZ;
   81498:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8149c:	e00e      	b.n	814bc <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   8149e:	2300      	movs	r3, #0
   814a0:	e00c      	b.n	814bc <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   814a2:	2300      	movs	r3, #0
   814a4:	e00a      	b.n	814bc <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   814a6:	4b08      	ldr	r3, [pc, #32]	; (814c8 <osc_get_rate+0x64>)
   814a8:	e008      	b.n	814bc <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   814aa:	4b08      	ldr	r3, [pc, #32]	; (814cc <osc_get_rate+0x68>)
   814ac:	e006      	b.n	814bc <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   814ae:	4b08      	ldr	r3, [pc, #32]	; (814d0 <osc_get_rate+0x6c>)
   814b0:	e004      	b.n	814bc <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   814b2:	4b07      	ldr	r3, [pc, #28]	; (814d0 <osc_get_rate+0x6c>)
   814b4:	e002      	b.n	814bc <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   814b6:	4b06      	ldr	r3, [pc, #24]	; (814d0 <osc_get_rate+0x6c>)
   814b8:	e000      	b.n	814bc <osc_get_rate+0x58>
	return 0;
   814ba:	2300      	movs	r3, #0
}
   814bc:	4618      	mov	r0, r3
   814be:	370c      	adds	r7, #12
   814c0:	46bd      	mov	sp, r7
   814c2:	bc80      	pop	{r7}
   814c4:	4770      	bx	lr
   814c6:	bf00      	nop
   814c8:	003d0900 	.word	0x003d0900
   814cc:	007a1200 	.word	0x007a1200
   814d0:	00b71b00 	.word	0x00b71b00

000814d4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   814d4:	b580      	push	{r7, lr}
   814d6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   814d8:	2006      	movs	r0, #6
   814da:	4b03      	ldr	r3, [pc, #12]	; (814e8 <sysclk_get_main_hz+0x14>)
   814dc:	4798      	blx	r3
   814de:	4603      	mov	r3, r0
   814e0:	011b      	lsls	r3, r3, #4
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   814e2:	4618      	mov	r0, r3
   814e4:	bd80      	pop	{r7, pc}
   814e6:	bf00      	nop
   814e8:	00081465 	.word	0x00081465

000814ec <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   814ec:	b580      	push	{r7, lr}
   814ee:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   814f0:	4b02      	ldr	r3, [pc, #8]	; (814fc <sysclk_get_cpu_hz+0x10>)
   814f2:	4798      	blx	r3
   814f4:	4603      	mov	r3, r0
   814f6:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   814f8:	4618      	mov	r0, r3
   814fa:	bd80      	pop	{r7, pc}
   814fc:	000814d5 	.word	0x000814d5

00081500 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   81500:	b580      	push	{r7, lr}
   81502:	b082      	sub	sp, #8
   81504:	af00      	add	r7, sp, #0
   81506:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81508:	6878      	ldr	r0, [r7, #4]
   8150a:	4b03      	ldr	r3, [pc, #12]	; (81518 <sysclk_enable_peripheral_clock+0x18>)
   8150c:	4798      	blx	r3
}
   8150e:	bf00      	nop
   81510:	3708      	adds	r7, #8
   81512:	46bd      	mov	sp, r7
   81514:	bd80      	pop	{r7, pc}
   81516:	bf00      	nop
   81518:	00083e91 	.word	0x00083e91

0008151c <fpga_program_init>:
#include "fpga_program.h"
#include "spi.h"

/* FPGA Programming: Init pins, set to standby state */
void fpga_program_init(void)
{
   8151c:	b580      	push	{r7, lr}
   8151e:	af00      	add	r7, sp, #0
    FPGA_NPROG_SETUP();
   81520:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81524:	2014      	movs	r0, #20
   81526:	4b03      	ldr	r3, [pc, #12]	; (81534 <fpga_program_init+0x18>)
   81528:	4798      	blx	r3
    FPGA_NPROG_HIGH();
   8152a:	2014      	movs	r0, #20
   8152c:	4b02      	ldr	r3, [pc, #8]	; (81538 <fpga_program_init+0x1c>)
   8152e:	4798      	blx	r3
}
   81530:	bf00      	nop
   81532:	bd80      	pop	{r7, pc}
   81534:	00084479 	.word	0x00084479
   81538:	00084419 	.word	0x00084419

0008153c <fpga_program_setup1>:

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   8153c:	b580      	push	{r7, lr}
   8153e:	b084      	sub	sp, #16
   81540:	af00      	add	r7, sp, #0
    /* Init - set program low to erase FPGA */
    FPGA_NPROG_LOW();
   81542:	2014      	movs	r0, #20
   81544:	4b14      	ldr	r3, [pc, #80]	; (81598 <fpga_program_setup1+0x5c>)
   81546:	4798      	blx	r3

    usart_spi_opt_t spiopts;
    spiopts.baudrate = 10000000UL;
   81548:	4b14      	ldr	r3, [pc, #80]	; (8159c <fpga_program_setup1+0x60>)
   8154a:	603b      	str	r3, [r7, #0]
    spiopts.char_length = US_MR_CHRL_8_BIT;
   8154c:	23c0      	movs	r3, #192	; 0xc0
   8154e:	607b      	str	r3, [r7, #4]
    spiopts.channel_mode = US_MR_CHMODE_NORMAL;
   81550:	2300      	movs	r3, #0
   81552:	60fb      	str	r3, [r7, #12]
    spiopts.spi_mode = SPI_MODE_0;
   81554:	2300      	movs	r3, #0
   81556:	60bb      	str	r3, [r7, #8]

    sysclk_enable_peripheral_clock(FPGA_PROG_USART_ID);
   81558:	200d      	movs	r0, #13
   8155a:	4b11      	ldr	r3, [pc, #68]	; (815a0 <fpga_program_setup1+0x64>)
   8155c:	4798      	blx	r3
    usart_init_spi_master(FPGA_PROG_USART, &spiopts, sysclk_get_cpu_hz());
   8155e:	4b11      	ldr	r3, [pc, #68]	; (815a4 <fpga_program_setup1+0x68>)
   81560:	4798      	blx	r3
   81562:	4602      	mov	r2, r0
   81564:	463b      	mov	r3, r7
   81566:	4619      	mov	r1, r3
   81568:	480f      	ldr	r0, [pc, #60]	; (815a8 <fpga_program_setup1+0x6c>)
   8156a:	4b10      	ldr	r3, [pc, #64]	; (815ac <fpga_program_setup1+0x70>)
   8156c:	4798      	blx	r3
    FPGA_DO_SETUP();
   8156e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81572:	2012      	movs	r0, #18
   81574:	4b0e      	ldr	r3, [pc, #56]	; (815b0 <fpga_program_setup1+0x74>)
   81576:	4798      	blx	r3
    FPGA_CCLK_SETUP();
   81578:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8157c:	2011      	movs	r0, #17
   8157e:	4b0c      	ldr	r3, [pc, #48]	; (815b0 <fpga_program_setup1+0x74>)
   81580:	4798      	blx	r3

    //pin setup doesn't transfer control over to USART, so have to do it manually
    PIOA->PIO_PDR = (1 << PIN_FPGA_DO_GPIO) | (1 << PIN_FPGA_CCLK_GPIO);
   81582:	4b0c      	ldr	r3, [pc, #48]	; (815b4 <fpga_program_setup1+0x78>)
   81584:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   81588:	605a      	str	r2, [r3, #4]
    usart_enable_tx(FPGA_PROG_USART);
   8158a:	4807      	ldr	r0, [pc, #28]	; (815a8 <fpga_program_setup1+0x6c>)
   8158c:	4b0a      	ldr	r3, [pc, #40]	; (815b8 <fpga_program_setup1+0x7c>)
   8158e:	4798      	blx	r3
}
   81590:	bf00      	nop
   81592:	3710      	adds	r7, #16
   81594:	46bd      	mov	sp, r7
   81596:	bd80      	pop	{r7, pc}
   81598:	00084449 	.word	0x00084449
   8159c:	00989680 	.word	0x00989680
   815a0:	00081501 	.word	0x00081501
   815a4:	000814ed 	.word	0x000814ed
   815a8:	40090000 	.word	0x40090000
   815ac:	00081705 	.word	0x00081705
   815b0:	00084479 	.word	0x00084479
   815b4:	400e0c00 	.word	0x400e0c00
   815b8:	00081815 	.word	0x00081815

000815bc <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   815bc:	b580      	push	{r7, lr}
   815be:	af00      	add	r7, sp, #0
    FPGA_NPROG_HIGH();
   815c0:	2014      	movs	r0, #20
   815c2:	4b02      	ldr	r3, [pc, #8]	; (815cc <fpga_program_setup2+0x10>)
   815c4:	4798      	blx	r3
}
   815c6:	bf00      	nop
   815c8:	bd80      	pop	{r7, pc}
   815ca:	bf00      	nop
   815cc:	00084419 	.word	0x00084419

000815d0 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   815d0:	b580      	push	{r7, lr}
   815d2:	b082      	sub	sp, #8
   815d4:	af00      	add	r7, sp, #0
   815d6:	4603      	mov	r3, r0
   815d8:	71fb      	strb	r3, [r7, #7]
    //For debug only
    //fpga_total_bs_len++;
    usart_putchar(FPGA_PROG_USART, databyte);
   815da:	79fb      	ldrb	r3, [r7, #7]
   815dc:	4619      	mov	r1, r3
   815de:	4803      	ldr	r0, [pc, #12]	; (815ec <fpga_program_sendbyte+0x1c>)
   815e0:	4b03      	ldr	r3, [pc, #12]	; (815f0 <fpga_program_sendbyte+0x20>)
   815e2:	4798      	blx	r3
}
   815e4:	bf00      	nop
   815e6:	3708      	adds	r7, #8
   815e8:	46bd      	mov	sp, r7
   815ea:	bd80      	pop	{r7, pc}
   815ec:	40090000 	.word	0x40090000
   815f0:	000818ab 	.word	0x000818ab

000815f4 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   815f4:	b590      	push	{r4, r7, lr}
   815f6:	b08b      	sub	sp, #44	; 0x2c
   815f8:	af02      	add	r7, sp, #8
   815fa:	6078      	str	r0, [r7, #4]
   815fc:	6039      	str	r1, [r7, #0]
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   815fe:	f107 020c 	add.w	r2, r7, #12
   81602:	2304      	movs	r3, #4
   81604:	9300      	str	r3, [sp, #0]
   81606:	4613      	mov	r3, r2
   81608:	220f      	movs	r2, #15
   8160a:	210e      	movs	r1, #14
   8160c:	4813      	ldr	r0, [pc, #76]	; (8165c <flash_read_unique_id+0x68>)
   8160e:	4c14      	ldr	r4, [pc, #80]	; (81660 <flash_read_unique_id+0x6c>)
   81610:	47a0      	blx	r4
   81612:	4603      	mov	r3, r0
   81614:	2b00      	cmp	r3, #0
   81616:	d001      	beq.n	8161c <flash_read_unique_id+0x28>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   81618:	2310      	movs	r3, #16
   8161a:	e01b      	b.n	81654 <flash_read_unique_id+0x60>
	}

	if (ul_size > 4) {
   8161c:	683b      	ldr	r3, [r7, #0]
   8161e:	2b04      	cmp	r3, #4
   81620:	d901      	bls.n	81626 <flash_read_unique_id+0x32>
		/* Only 4 dword to store unique ID */
		ul_size = 4;
   81622:	2304      	movs	r3, #4
   81624:	603b      	str	r3, [r7, #0]
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81626:	2300      	movs	r3, #0
   81628:	61fb      	str	r3, [r7, #28]
   8162a:	e00e      	b.n	8164a <flash_read_unique_id+0x56>
		pul_data[ul_idx] = uid_buf[ul_idx];
   8162c:	69fb      	ldr	r3, [r7, #28]
   8162e:	009b      	lsls	r3, r3, #2
   81630:	687a      	ldr	r2, [r7, #4]
   81632:	441a      	add	r2, r3
   81634:	69fb      	ldr	r3, [r7, #28]
   81636:	009b      	lsls	r3, r3, #2
   81638:	f107 0120 	add.w	r1, r7, #32
   8163c:	440b      	add	r3, r1
   8163e:	f853 3c14 	ldr.w	r3, [r3, #-20]
   81642:	6013      	str	r3, [r2, #0]
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81644:	69fb      	ldr	r3, [r7, #28]
   81646:	3301      	adds	r3, #1
   81648:	61fb      	str	r3, [r7, #28]
   8164a:	69fa      	ldr	r2, [r7, #28]
   8164c:	683b      	ldr	r3, [r7, #0]
   8164e:	429a      	cmp	r2, r3
   81650:	d3ec      	bcc.n	8162c <flash_read_unique_id+0x38>
	}

	return FLASH_RC_OK;
   81652:	2300      	movs	r3, #0
}
   81654:	4618      	mov	r0, r3
   81656:	3724      	adds	r7, #36	; 0x24
   81658:	46bd      	mov	sp, r7
   8165a:	bd90      	pop	{r4, r7, pc}
   8165c:	400e0800 	.word	0x400e0800
   81660:	20000001 	.word	0x20000001

00081664 <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   81664:	b480      	push	{r7}
   81666:	b087      	sub	sp, #28
   81668:	af00      	add	r7, sp, #0
   8166a:	60f8      	str	r0, [r7, #12]
   8166c:	60b9      	str	r1, [r7, #8]
   8166e:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   81670:	68bb      	ldr	r3, [r7, #8]
   81672:	085a      	lsrs	r2, r3, #1
   81674:	687b      	ldr	r3, [r7, #4]
   81676:	441a      	add	r2, r3
   81678:	68bb      	ldr	r3, [r7, #8]
   8167a:	fbb2 f3f3 	udiv	r3, r2, r3
   8167e:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   81680:	697b      	ldr	r3, [r7, #20]
   81682:	2b03      	cmp	r3, #3
   81684:	d903      	bls.n	8168e <usart_set_spi_master_baudrate+0x2a>
   81686:	697b      	ldr	r3, [r7, #20]
   81688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   8168c:	d301      	bcc.n	81692 <usart_set_spi_master_baudrate+0x2e>
		return 1;
   8168e:	2301      	movs	r3, #1
   81690:	e003      	b.n	8169a <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   81692:	68fb      	ldr	r3, [r7, #12]
   81694:	697a      	ldr	r2, [r7, #20]
   81696:	621a      	str	r2, [r3, #32]

	return 0;
   81698:	2300      	movs	r3, #0
}
   8169a:	4618      	mov	r0, r3
   8169c:	371c      	adds	r7, #28
   8169e:	46bd      	mov	sp, r7
   816a0:	bc80      	pop	{r7}
   816a2:	4770      	bx	lr

000816a4 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   816a4:	b580      	push	{r7, lr}
   816a6:	b082      	sub	sp, #8
   816a8:	af00      	add	r7, sp, #0
   816aa:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   816ac:	6878      	ldr	r0, [r7, #4]
   816ae:	4b0f      	ldr	r3, [pc, #60]	; (816ec <usart_reset+0x48>)
   816b0:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   816b2:	687b      	ldr	r3, [r7, #4]
   816b4:	2200      	movs	r2, #0
   816b6:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   816b8:	687b      	ldr	r3, [r7, #4]
   816ba:	2200      	movs	r2, #0
   816bc:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   816be:	687b      	ldr	r3, [r7, #4]
   816c0:	2200      	movs	r2, #0
   816c2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   816c4:	6878      	ldr	r0, [r7, #4]
   816c6:	4b0a      	ldr	r3, [pc, #40]	; (816f0 <usart_reset+0x4c>)
   816c8:	4798      	blx	r3
	usart_reset_rx(p_usart);
   816ca:	6878      	ldr	r0, [r7, #4]
   816cc:	4b09      	ldr	r3, [pc, #36]	; (816f4 <usart_reset+0x50>)
   816ce:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   816d0:	6878      	ldr	r0, [r7, #4]
   816d2:	4b09      	ldr	r3, [pc, #36]	; (816f8 <usart_reset+0x54>)
   816d4:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   816d6:	6878      	ldr	r0, [r7, #4]
   816d8:	4b08      	ldr	r3, [pc, #32]	; (816fc <usart_reset+0x58>)
   816da:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
   816dc:	6878      	ldr	r0, [r7, #4]
   816de:	4b08      	ldr	r3, [pc, #32]	; (81700 <usart_reset+0x5c>)
   816e0:	4798      	blx	r3
#endif
}
   816e2:	bf00      	nop
   816e4:	3708      	adds	r7, #8
   816e6:	46bd      	mov	sp, r7
   816e8:	bd80      	pop	{r7, pc}
   816ea:	bf00      	nop
   816ec:	000818d9 	.word	0x000818d9
   816f0:	0008182d 	.word	0x0008182d
   816f4:	00081845 	.word	0x00081845
   816f8:	0008185d 	.word	0x0008185d
   816fc:	00081891 	.word	0x00081891
   81700:	00081877 	.word	0x00081877

00081704 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   81704:	b580      	push	{r7, lr}
   81706:	b084      	sub	sp, #16
   81708:	af00      	add	r7, sp, #0
   8170a:	60f8      	str	r0, [r7, #12]
   8170c:	60b9      	str	r1, [r7, #8]
   8170e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   81710:	68f8      	ldr	r0, [r7, #12]
   81712:	4b3d      	ldr	r3, [pc, #244]	; (81808 <usart_init_spi_master+0x104>)
   81714:	4798      	blx	r3

	ul_reg_val = 0;
   81716:	4b3d      	ldr	r3, [pc, #244]	; (8180c <usart_init_spi_master+0x108>)
   81718:	2200      	movs	r2, #0
   8171a:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   8171c:	68bb      	ldr	r3, [r7, #8]
   8171e:	2b00      	cmp	r3, #0
   81720:	d00d      	beq.n	8173e <usart_init_spi_master+0x3a>
   81722:	68bb      	ldr	r3, [r7, #8]
   81724:	689b      	ldr	r3, [r3, #8]
   81726:	2b03      	cmp	r3, #3
   81728:	d809      	bhi.n	8173e <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   8172a:	68bb      	ldr	r3, [r7, #8]
   8172c:	681b      	ldr	r3, [r3, #0]
   8172e:	687a      	ldr	r2, [r7, #4]
   81730:	4619      	mov	r1, r3
   81732:	68f8      	ldr	r0, [r7, #12]
   81734:	4b36      	ldr	r3, [pc, #216]	; (81810 <usart_init_spi_master+0x10c>)
   81736:	4798      	blx	r3
   81738:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   8173a:	2b00      	cmp	r3, #0
   8173c:	d001      	beq.n	81742 <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   8173e:	2301      	movs	r3, #1
   81740:	e05d      	b.n	817fe <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   81742:	68bb      	ldr	r3, [r7, #8]
   81744:	685a      	ldr	r2, [r3, #4]
   81746:	4b31      	ldr	r3, [pc, #196]	; (8180c <usart_init_spi_master+0x108>)
   81748:	681b      	ldr	r3, [r3, #0]
   8174a:	4313      	orrs	r3, r2
   8174c:	4a2f      	ldr	r2, [pc, #188]	; (8180c <usart_init_spi_master+0x108>)
   8174e:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   81750:	68bb      	ldr	r3, [r7, #8]
   81752:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   81754:	4b2d      	ldr	r3, [pc, #180]	; (8180c <usart_init_spi_master+0x108>)
   81756:	681b      	ldr	r3, [r3, #0]
   81758:	4313      	orrs	r3, r2
   8175a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   8175e:	f043 030e 	orr.w	r3, r3, #14
   81762:	4a2a      	ldr	r2, [pc, #168]	; (8180c <usart_init_spi_master+0x108>)
   81764:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   81766:	68bb      	ldr	r3, [r7, #8]
   81768:	689b      	ldr	r3, [r3, #8]
   8176a:	2b03      	cmp	r3, #3
   8176c:	d83e      	bhi.n	817ec <usart_init_spi_master+0xe8>
   8176e:	a201      	add	r2, pc, #4	; (adr r2, 81774 <usart_init_spi_master+0x70>)
   81770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81774:	00081785 	.word	0x00081785
   81778:	0008179f 	.word	0x0008179f
   8177c:	000817b9 	.word	0x000817b9
   81780:	000817d3 	.word	0x000817d3
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   81784:	4b21      	ldr	r3, [pc, #132]	; (8180c <usart_init_spi_master+0x108>)
   81786:	681b      	ldr	r3, [r3, #0]
   81788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8178c:	4a1f      	ldr	r2, [pc, #124]	; (8180c <usart_init_spi_master+0x108>)
   8178e:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   81790:	4b1e      	ldr	r3, [pc, #120]	; (8180c <usart_init_spi_master+0x108>)
   81792:	681b      	ldr	r3, [r3, #0]
   81794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   81798:	4a1c      	ldr	r2, [pc, #112]	; (8180c <usart_init_spi_master+0x108>)
   8179a:	6013      	str	r3, [r2, #0]
		break;
   8179c:	e027      	b.n	817ee <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   8179e:	4b1b      	ldr	r3, [pc, #108]	; (8180c <usart_init_spi_master+0x108>)
   817a0:	681b      	ldr	r3, [r3, #0]
   817a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   817a6:	4a19      	ldr	r2, [pc, #100]	; (8180c <usart_init_spi_master+0x108>)
   817a8:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   817aa:	4b18      	ldr	r3, [pc, #96]	; (8180c <usart_init_spi_master+0x108>)
   817ac:	681b      	ldr	r3, [r3, #0]
   817ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   817b2:	4a16      	ldr	r2, [pc, #88]	; (8180c <usart_init_spi_master+0x108>)
   817b4:	6013      	str	r3, [r2, #0]
		break;
   817b6:	e01a      	b.n	817ee <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   817b8:	4b14      	ldr	r3, [pc, #80]	; (8180c <usart_init_spi_master+0x108>)
   817ba:	681b      	ldr	r3, [r3, #0]
   817bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   817c0:	4a12      	ldr	r2, [pc, #72]	; (8180c <usart_init_spi_master+0x108>)
   817c2:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   817c4:	4b11      	ldr	r3, [pc, #68]	; (8180c <usart_init_spi_master+0x108>)
   817c6:	681b      	ldr	r3, [r3, #0]
   817c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   817cc:	4a0f      	ldr	r2, [pc, #60]	; (8180c <usart_init_spi_master+0x108>)
   817ce:	6013      	str	r3, [r2, #0]
		break;
   817d0:	e00d      	b.n	817ee <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   817d2:	4b0e      	ldr	r3, [pc, #56]	; (8180c <usart_init_spi_master+0x108>)
   817d4:	681b      	ldr	r3, [r3, #0]
   817d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   817da:	4a0c      	ldr	r2, [pc, #48]	; (8180c <usart_init_spi_master+0x108>)
   817dc:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   817de:	4b0b      	ldr	r3, [pc, #44]	; (8180c <usart_init_spi_master+0x108>)
   817e0:	681b      	ldr	r3, [r3, #0]
   817e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   817e6:	4a09      	ldr	r2, [pc, #36]	; (8180c <usart_init_spi_master+0x108>)
   817e8:	6013      	str	r3, [r2, #0]
		break;
   817ea:	e000      	b.n	817ee <usart_init_spi_master+0xea>

	default:
		break;
   817ec:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   817ee:	68fb      	ldr	r3, [r7, #12]
   817f0:	685a      	ldr	r2, [r3, #4]
   817f2:	4b06      	ldr	r3, [pc, #24]	; (8180c <usart_init_spi_master+0x108>)
   817f4:	681b      	ldr	r3, [r3, #0]
   817f6:	431a      	orrs	r2, r3
   817f8:	68fb      	ldr	r3, [r7, #12]
   817fa:	605a      	str	r2, [r3, #4]

	return 0;
   817fc:	2300      	movs	r3, #0
}
   817fe:	4618      	mov	r0, r3
   81800:	3710      	adds	r7, #16
   81802:	46bd      	mov	sp, r7
   81804:	bd80      	pop	{r7, pc}
   81806:	bf00      	nop
   81808:	000816a5 	.word	0x000816a5
   8180c:	20000c8c 	.word	0x20000c8c
   81810:	00081665 	.word	0x00081665

00081814 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   81814:	b480      	push	{r7}
   81816:	b083      	sub	sp, #12
   81818:	af00      	add	r7, sp, #0
   8181a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   8181c:	687b      	ldr	r3, [r7, #4]
   8181e:	2240      	movs	r2, #64	; 0x40
   81820:	601a      	str	r2, [r3, #0]
}
   81822:	bf00      	nop
   81824:	370c      	adds	r7, #12
   81826:	46bd      	mov	sp, r7
   81828:	bc80      	pop	{r7}
   8182a:	4770      	bx	lr

0008182c <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   8182c:	b480      	push	{r7}
   8182e:	b083      	sub	sp, #12
   81830:	af00      	add	r7, sp, #0
   81832:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   81834:	687b      	ldr	r3, [r7, #4]
   81836:	2288      	movs	r2, #136	; 0x88
   81838:	601a      	str	r2, [r3, #0]
}
   8183a:	bf00      	nop
   8183c:	370c      	adds	r7, #12
   8183e:	46bd      	mov	sp, r7
   81840:	bc80      	pop	{r7}
   81842:	4770      	bx	lr

00081844 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   81844:	b480      	push	{r7}
   81846:	b083      	sub	sp, #12
   81848:	af00      	add	r7, sp, #0
   8184a:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   8184c:	687b      	ldr	r3, [r7, #4]
   8184e:	2224      	movs	r2, #36	; 0x24
   81850:	601a      	str	r2, [r3, #0]
}
   81852:	bf00      	nop
   81854:	370c      	adds	r7, #12
   81856:	46bd      	mov	sp, r7
   81858:	bc80      	pop	{r7}
   8185a:	4770      	bx	lr

0008185c <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   8185c:	b480      	push	{r7}
   8185e:	b083      	sub	sp, #12
   81860:	af00      	add	r7, sp, #0
   81862:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   81864:	687b      	ldr	r3, [r7, #4]
   81866:	f44f 7280 	mov.w	r2, #256	; 0x100
   8186a:	601a      	str	r2, [r3, #0]
}
   8186c:	bf00      	nop
   8186e:	370c      	adds	r7, #12
   81870:	46bd      	mov	sp, r7
   81872:	bc80      	pop	{r7}
   81874:	4770      	bx	lr

00081876 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
   81876:	b480      	push	{r7}
   81878:	b083      	sub	sp, #12
   8187a:	af00      	add	r7, sp, #0
   8187c:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
   8187e:	687b      	ldr	r3, [r7, #4]
   81880:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   81884:	601a      	str	r2, [r3, #0]
}
   81886:	bf00      	nop
   81888:	370c      	adds	r7, #12
   8188a:	46bd      	mov	sp, r7
   8188c:	bc80      	pop	{r7}
   8188e:	4770      	bx	lr

00081890 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   81890:	b480      	push	{r7}
   81892:	b083      	sub	sp, #12
   81894:	af00      	add	r7, sp, #0
   81896:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   81898:	687b      	ldr	r3, [r7, #4]
   8189a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8189e:	601a      	str	r2, [r3, #0]
}
   818a0:	bf00      	nop
   818a2:	370c      	adds	r7, #12
   818a4:	46bd      	mov	sp, r7
   818a6:	bc80      	pop	{r7}
   818a8:	4770      	bx	lr

000818aa <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
   818aa:	b480      	push	{r7}
   818ac:	b083      	sub	sp, #12
   818ae:	af00      	add	r7, sp, #0
   818b0:	6078      	str	r0, [r7, #4]
   818b2:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   818b4:	bf00      	nop
   818b6:	687b      	ldr	r3, [r7, #4]
   818b8:	695b      	ldr	r3, [r3, #20]
   818ba:	f003 0302 	and.w	r3, r3, #2
   818be:	2b00      	cmp	r3, #0
   818c0:	d0f9      	beq.n	818b6 <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   818c2:	683b      	ldr	r3, [r7, #0]
   818c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   818c8:	687b      	ldr	r3, [r7, #4]
   818ca:	61da      	str	r2, [r3, #28]

	return 0;
   818cc:	2300      	movs	r3, #0
}
   818ce:	4618      	mov	r0, r3
   818d0:	370c      	adds	r7, #12
   818d2:	46bd      	mov	sp, r7
   818d4:	bc80      	pop	{r7}
   818d6:	4770      	bx	lr

000818d8 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   818d8:	b480      	push	{r7}
   818da:	b083      	sub	sp, #12
   818dc:	af00      	add	r7, sp, #0
   818de:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   818e0:	687b      	ldr	r3, [r7, #4]
   818e2:	4a04      	ldr	r2, [pc, #16]	; (818f4 <usart_disable_writeprotect+0x1c>)
   818e4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   818e8:	bf00      	nop
   818ea:	370c      	adds	r7, #12
   818ec:	46bd      	mov	sp, r7
   818ee:	bc80      	pop	{r7}
   818f0:	4770      	bx	lr
   818f2:	bf00      	nop
   818f4:	55534100 	.word	0x55534100

000818f8 <smc_set_setup_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
   818f8:	b480      	push	{r7}
   818fa:	b085      	sub	sp, #20
   818fc:	af00      	add	r7, sp, #0
   818fe:	60f8      	str	r0, [r7, #12]
   81900:	60b9      	str	r1, [r7, #8]
   81902:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   81904:	68f9      	ldr	r1, [r7, #12]
   81906:	68ba      	ldr	r2, [r7, #8]
   81908:	4613      	mov	r3, r2
   8190a:	009b      	lsls	r3, r3, #2
   8190c:	4413      	add	r3, r2
   8190e:	009b      	lsls	r3, r3, #2
   81910:	440b      	add	r3, r1
   81912:	3370      	adds	r3, #112	; 0x70
   81914:	687a      	ldr	r2, [r7, #4]
   81916:	601a      	str	r2, [r3, #0]
}
   81918:	bf00      	nop
   8191a:	3714      	adds	r7, #20
   8191c:	46bd      	mov	sp, r7
   8191e:	bc80      	pop	{r7}
   81920:	4770      	bx	lr

00081922 <smc_set_pulse_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
   81922:	b480      	push	{r7}
   81924:	b085      	sub	sp, #20
   81926:	af00      	add	r7, sp, #0
   81928:	60f8      	str	r0, [r7, #12]
   8192a:	60b9      	str	r1, [r7, #8]
   8192c:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   8192e:	68f9      	ldr	r1, [r7, #12]
   81930:	68ba      	ldr	r2, [r7, #8]
   81932:	4613      	mov	r3, r2
   81934:	009b      	lsls	r3, r3, #2
   81936:	4413      	add	r3, r2
   81938:	009b      	lsls	r3, r3, #2
   8193a:	440b      	add	r3, r1
   8193c:	3374      	adds	r3, #116	; 0x74
   8193e:	687a      	ldr	r2, [r7, #4]
   81940:	601a      	str	r2, [r3, #0]
}
   81942:	bf00      	nop
   81944:	3714      	adds	r7, #20
   81946:	46bd      	mov	sp, r7
   81948:	bc80      	pop	{r7}
   8194a:	4770      	bx	lr

0008194c <smc_set_cycle_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
   8194c:	b480      	push	{r7}
   8194e:	b085      	sub	sp, #20
   81950:	af00      	add	r7, sp, #0
   81952:	60f8      	str	r0, [r7, #12]
   81954:	60b9      	str	r1, [r7, #8]
   81956:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   81958:	68f9      	ldr	r1, [r7, #12]
   8195a:	68ba      	ldr	r2, [r7, #8]
   8195c:	4613      	mov	r3, r2
   8195e:	009b      	lsls	r3, r3, #2
   81960:	4413      	add	r3, r2
   81962:	009b      	lsls	r3, r3, #2
   81964:	440b      	add	r3, r1
   81966:	3378      	adds	r3, #120	; 0x78
   81968:	687a      	ldr	r2, [r7, #4]
   8196a:	601a      	str	r2, [r3, #0]
}
   8196c:	bf00      	nop
   8196e:	3714      	adds	r7, #20
   81970:	46bd      	mov	sp, r7
   81972:	bc80      	pop	{r7}
   81974:	4770      	bx	lr

00081976 <smc_set_mode>:
 * \param p_smc Pointer to an SMC instance.
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
   81976:	b480      	push	{r7}
   81978:	b085      	sub	sp, #20
   8197a:	af00      	add	r7, sp, #0
   8197c:	60f8      	str	r0, [r7, #12]
   8197e:	60b9      	str	r1, [r7, #8]
   81980:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   81982:	68f9      	ldr	r1, [r7, #12]
   81984:	68ba      	ldr	r2, [r7, #8]
   81986:	4613      	mov	r3, r2
   81988:	009b      	lsls	r3, r3, #2
   8198a:	4413      	add	r3, r2
   8198c:	009b      	lsls	r3, r3, #2
   8198e:	440b      	add	r3, r1
   81990:	3380      	adds	r3, #128	; 0x80
   81992:	687a      	ldr	r2, [r7, #4]
   81994:	601a      	str	r2, [r3, #0]
}
   81996:	bf00      	nop
   81998:	3714      	adds	r7, #20
   8199a:	46bd      	mov	sp, r7
   8199c:	bc80      	pop	{r7}
   8199e:	4770      	bx	lr

000819a0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   819a0:	b580      	push	{r7, lr}
   819a2:	b084      	sub	sp, #16
   819a4:	af00      	add	r7, sp, #0
   819a6:	6078      	str	r0, [r7, #4]
   819a8:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   819aa:	6878      	ldr	r0, [r7, #4]
   819ac:	4b26      	ldr	r3, [pc, #152]	; (81a48 <pio_handler_process+0xa8>)
   819ae:	4798      	blx	r3
   819b0:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   819b2:	6878      	ldr	r0, [r7, #4]
   819b4:	4b25      	ldr	r3, [pc, #148]	; (81a4c <pio_handler_process+0xac>)
   819b6:	4798      	blx	r3
   819b8:	4602      	mov	r2, r0
   819ba:	68fb      	ldr	r3, [r7, #12]
   819bc:	4013      	ands	r3, r2
   819be:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   819c0:	68fb      	ldr	r3, [r7, #12]
   819c2:	2b00      	cmp	r3, #0
   819c4:	d03c      	beq.n	81a40 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
   819c6:	2300      	movs	r3, #0
   819c8:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   819ca:	e034      	b.n	81a36 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   819cc:	4a20      	ldr	r2, [pc, #128]	; (81a50 <pio_handler_process+0xb0>)
   819ce:	68bb      	ldr	r3, [r7, #8]
   819d0:	011b      	lsls	r3, r3, #4
   819d2:	4413      	add	r3, r2
   819d4:	681b      	ldr	r3, [r3, #0]
   819d6:	683a      	ldr	r2, [r7, #0]
   819d8:	429a      	cmp	r2, r3
   819da:	d126      	bne.n	81a2a <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   819dc:	4a1c      	ldr	r2, [pc, #112]	; (81a50 <pio_handler_process+0xb0>)
   819de:	68bb      	ldr	r3, [r7, #8]
   819e0:	011b      	lsls	r3, r3, #4
   819e2:	4413      	add	r3, r2
   819e4:	3304      	adds	r3, #4
   819e6:	681a      	ldr	r2, [r3, #0]
   819e8:	68fb      	ldr	r3, [r7, #12]
   819ea:	4013      	ands	r3, r2
   819ec:	2b00      	cmp	r3, #0
   819ee:	d01c      	beq.n	81a2a <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   819f0:	4a17      	ldr	r2, [pc, #92]	; (81a50 <pio_handler_process+0xb0>)
   819f2:	68bb      	ldr	r3, [r7, #8]
   819f4:	011b      	lsls	r3, r3, #4
   819f6:	4413      	add	r3, r2
   819f8:	330c      	adds	r3, #12
   819fa:	681b      	ldr	r3, [r3, #0]
   819fc:	4914      	ldr	r1, [pc, #80]	; (81a50 <pio_handler_process+0xb0>)
   819fe:	68ba      	ldr	r2, [r7, #8]
   81a00:	0112      	lsls	r2, r2, #4
   81a02:	440a      	add	r2, r1
   81a04:	6810      	ldr	r0, [r2, #0]
   81a06:	4912      	ldr	r1, [pc, #72]	; (81a50 <pio_handler_process+0xb0>)
   81a08:	68ba      	ldr	r2, [r7, #8]
   81a0a:	0112      	lsls	r2, r2, #4
   81a0c:	440a      	add	r2, r1
   81a0e:	3204      	adds	r2, #4
   81a10:	6812      	ldr	r2, [r2, #0]
   81a12:	4611      	mov	r1, r2
   81a14:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   81a16:	4a0e      	ldr	r2, [pc, #56]	; (81a50 <pio_handler_process+0xb0>)
   81a18:	68bb      	ldr	r3, [r7, #8]
   81a1a:	011b      	lsls	r3, r3, #4
   81a1c:	4413      	add	r3, r2
   81a1e:	3304      	adds	r3, #4
   81a20:	681b      	ldr	r3, [r3, #0]
   81a22:	43db      	mvns	r3, r3
   81a24:	68fa      	ldr	r2, [r7, #12]
   81a26:	4013      	ands	r3, r2
   81a28:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   81a2a:	68bb      	ldr	r3, [r7, #8]
   81a2c:	3301      	adds	r3, #1
   81a2e:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
   81a30:	68bb      	ldr	r3, [r7, #8]
   81a32:	2b06      	cmp	r3, #6
   81a34:	d803      	bhi.n	81a3e <pio_handler_process+0x9e>
		while (status != 0) {
   81a36:	68fb      	ldr	r3, [r7, #12]
   81a38:	2b00      	cmp	r3, #0
   81a3a:	d1c7      	bne.n	819cc <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   81a3c:	e000      	b.n	81a40 <pio_handler_process+0xa0>
				break;
   81a3e:	bf00      	nop
}
   81a40:	bf00      	nop
   81a42:	3710      	adds	r7, #16
   81a44:	46bd      	mov	sp, r7
   81a46:	bd80      	pop	{r7, pc}
   81a48:	000843bd 	.word	0x000843bd
   81a4c:	000843d3 	.word	0x000843d3
   81a50:	20000c90 	.word	0x20000c90

00081a54 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81a54:	b580      	push	{r7, lr}
   81a56:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   81a58:	210a      	movs	r1, #10
   81a5a:	4802      	ldr	r0, [pc, #8]	; (81a64 <PIOA_Handler+0x10>)
   81a5c:	4b02      	ldr	r3, [pc, #8]	; (81a68 <PIOA_Handler+0x14>)
   81a5e:	4798      	blx	r3
}
   81a60:	bf00      	nop
   81a62:	bd80      	pop	{r7, pc}
   81a64:	400e0c00 	.word	0x400e0c00
   81a68:	000819a1 	.word	0x000819a1

00081a6c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81a6c:	b580      	push	{r7, lr}
   81a6e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   81a70:	210b      	movs	r1, #11
   81a72:	4802      	ldr	r0, [pc, #8]	; (81a7c <PIOB_Handler+0x10>)
   81a74:	4b02      	ldr	r3, [pc, #8]	; (81a80 <PIOB_Handler+0x14>)
   81a76:	4798      	blx	r3
}
   81a78:	bf00      	nop
   81a7a:	bd80      	pop	{r7, pc}
   81a7c:	400e0e00 	.word	0x400e0e00
   81a80:	000819a1 	.word	0x000819a1

00081a84 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   81a84:	b480      	push	{r7}
   81a86:	b083      	sub	sp, #12
   81a88:	af00      	add	r7, sp, #0
   81a8a:	4603      	mov	r3, r0
   81a8c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81a8e:	79fb      	ldrb	r3, [r7, #7]
   81a90:	f003 031f 	and.w	r3, r3, #31
   81a94:	2201      	movs	r2, #1
   81a96:	fa02 f103 	lsl.w	r1, r2, r3
   81a9a:	4a05      	ldr	r2, [pc, #20]	; (81ab0 <NVIC_EnableIRQ+0x2c>)
   81a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81aa0:	095b      	lsrs	r3, r3, #5
   81aa2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   81aa6:	bf00      	nop
   81aa8:	370c      	adds	r7, #12
   81aaa:	46bd      	mov	sp, r7
   81aac:	bc80      	pop	{r7}
   81aae:	4770      	bx	lr
   81ab0:	e000e100 	.word	0xe000e100

00081ab4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   81ab4:	b480      	push	{r7}
   81ab6:	b083      	sub	sp, #12
   81ab8:	af00      	add	r7, sp, #0
   81aba:	4603      	mov	r3, r0
   81abc:	6039      	str	r1, [r7, #0]
   81abe:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   81ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81ac4:	2b00      	cmp	r3, #0
   81ac6:	da0b      	bge.n	81ae0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81ac8:	683b      	ldr	r3, [r7, #0]
   81aca:	b2da      	uxtb	r2, r3
   81acc:	490c      	ldr	r1, [pc, #48]	; (81b00 <NVIC_SetPriority+0x4c>)
   81ace:	79fb      	ldrb	r3, [r7, #7]
   81ad0:	f003 030f 	and.w	r3, r3, #15
   81ad4:	3b04      	subs	r3, #4
   81ad6:	0112      	lsls	r2, r2, #4
   81ad8:	b2d2      	uxtb	r2, r2
   81ada:	440b      	add	r3, r1
   81adc:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   81ade:	e009      	b.n	81af4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81ae0:	683b      	ldr	r3, [r7, #0]
   81ae2:	b2da      	uxtb	r2, r3
   81ae4:	4907      	ldr	r1, [pc, #28]	; (81b04 <NVIC_SetPriority+0x50>)
   81ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81aea:	0112      	lsls	r2, r2, #4
   81aec:	b2d2      	uxtb	r2, r2
   81aee:	440b      	add	r3, r1
   81af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   81af4:	bf00      	nop
   81af6:	370c      	adds	r7, #12
   81af8:	46bd      	mov	sp, r7
   81afa:	bc80      	pop	{r7}
   81afc:	4770      	bx	lr
   81afe:	bf00      	nop
   81b00:	e000ed00 	.word	0xe000ed00
   81b04:	e000e100 	.word	0xe000e100

00081b08 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   81b08:	b480      	push	{r7}
   81b0a:	b083      	sub	sp, #12
   81b0c:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81b0e:	f3ef 8310 	mrs	r3, PRIMASK
   81b12:	603b      	str	r3, [r7, #0]
  return(result);
   81b14:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   81b16:	2b00      	cmp	r3, #0
   81b18:	bf0c      	ite	eq
   81b1a:	2301      	moveq	r3, #1
   81b1c:	2300      	movne	r3, #0
   81b1e:	b2db      	uxtb	r3, r3
   81b20:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   81b22:	b672      	cpsid	i
   81b24:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81b28:	4b04      	ldr	r3, [pc, #16]	; (81b3c <cpu_irq_save+0x34>)
   81b2a:	2200      	movs	r2, #0
   81b2c:	701a      	strb	r2, [r3, #0]
	return flags;
   81b2e:	687b      	ldr	r3, [r7, #4]
}
   81b30:	4618      	mov	r0, r3
   81b32:	370c      	adds	r7, #12
   81b34:	46bd      	mov	sp, r7
   81b36:	bc80      	pop	{r7}
   81b38:	4770      	bx	lr
   81b3a:	bf00      	nop
   81b3c:	2000031a 	.word	0x2000031a

00081b40 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   81b40:	b480      	push	{r7}
   81b42:	b083      	sub	sp, #12
   81b44:	af00      	add	r7, sp, #0
   81b46:	6078      	str	r0, [r7, #4]
	return (flags);
   81b48:	687b      	ldr	r3, [r7, #4]
   81b4a:	2b00      	cmp	r3, #0
   81b4c:	bf14      	ite	ne
   81b4e:	2301      	movne	r3, #1
   81b50:	2300      	moveq	r3, #0
   81b52:	b2db      	uxtb	r3, r3
}
   81b54:	4618      	mov	r0, r3
   81b56:	370c      	adds	r7, #12
   81b58:	46bd      	mov	sp, r7
   81b5a:	bc80      	pop	{r7}
   81b5c:	4770      	bx	lr
   81b5e:	0000      	movs	r0, r0

00081b60 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   81b60:	b580      	push	{r7, lr}
   81b62:	b082      	sub	sp, #8
   81b64:	af00      	add	r7, sp, #0
   81b66:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   81b68:	6878      	ldr	r0, [r7, #4]
   81b6a:	4b07      	ldr	r3, [pc, #28]	; (81b88 <cpu_irq_restore+0x28>)
   81b6c:	4798      	blx	r3
   81b6e:	4603      	mov	r3, r0
   81b70:	2b00      	cmp	r3, #0
   81b72:	d005      	beq.n	81b80 <cpu_irq_restore+0x20>
		cpu_irq_enable();
   81b74:	4b05      	ldr	r3, [pc, #20]	; (81b8c <cpu_irq_restore+0x2c>)
   81b76:	2201      	movs	r2, #1
   81b78:	701a      	strb	r2, [r3, #0]
   81b7a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   81b7e:	b662      	cpsie	i
}
   81b80:	bf00      	nop
   81b82:	3708      	adds	r7, #8
   81b84:	46bd      	mov	sp, r7
   81b86:	bd80      	pop	{r7, pc}
   81b88:	00081b41 	.word	0x00081b41
   81b8c:	2000031a 	.word	0x2000031a

00081b90 <sleepmgr_lock_mode>:
{
   81b90:	b580      	push	{r7, lr}
   81b92:	b084      	sub	sp, #16
   81b94:	af00      	add	r7, sp, #0
   81b96:	4603      	mov	r3, r0
   81b98:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   81b9a:	4b08      	ldr	r3, [pc, #32]	; (81bbc <sleepmgr_lock_mode+0x2c>)
   81b9c:	4798      	blx	r3
   81b9e:	60f8      	str	r0, [r7, #12]
	++sleepmgr_locks[mode];
   81ba0:	79fb      	ldrb	r3, [r7, #7]
   81ba2:	4a07      	ldr	r2, [pc, #28]	; (81bc0 <sleepmgr_lock_mode+0x30>)
   81ba4:	5cd2      	ldrb	r2, [r2, r3]
   81ba6:	3201      	adds	r2, #1
   81ba8:	b2d1      	uxtb	r1, r2
   81baa:	4a05      	ldr	r2, [pc, #20]	; (81bc0 <sleepmgr_lock_mode+0x30>)
   81bac:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   81bae:	68f8      	ldr	r0, [r7, #12]
   81bb0:	4b04      	ldr	r3, [pc, #16]	; (81bc4 <sleepmgr_lock_mode+0x34>)
   81bb2:	4798      	blx	r3
}
   81bb4:	bf00      	nop
   81bb6:	3710      	adds	r7, #16
   81bb8:	46bd      	mov	sp, r7
   81bba:	bd80      	pop	{r7, pc}
   81bbc:	00081b09 	.word	0x00081b09
   81bc0:	20000d70 	.word	0x20000d70
   81bc4:	00081b61 	.word	0x00081b61

00081bc8 <sleepmgr_unlock_mode>:
{
   81bc8:	b580      	push	{r7, lr}
   81bca:	b084      	sub	sp, #16
   81bcc:	af00      	add	r7, sp, #0
   81bce:	4603      	mov	r3, r0
   81bd0:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   81bd2:	4b08      	ldr	r3, [pc, #32]	; (81bf4 <sleepmgr_unlock_mode+0x2c>)
   81bd4:	4798      	blx	r3
   81bd6:	60f8      	str	r0, [r7, #12]
	--sleepmgr_locks[mode];
   81bd8:	79fb      	ldrb	r3, [r7, #7]
   81bda:	4a07      	ldr	r2, [pc, #28]	; (81bf8 <sleepmgr_unlock_mode+0x30>)
   81bdc:	5cd2      	ldrb	r2, [r2, r3]
   81bde:	3a01      	subs	r2, #1
   81be0:	b2d1      	uxtb	r1, r2
   81be2:	4a05      	ldr	r2, [pc, #20]	; (81bf8 <sleepmgr_unlock_mode+0x30>)
   81be4:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   81be6:	68f8      	ldr	r0, [r7, #12]
   81be8:	4b04      	ldr	r3, [pc, #16]	; (81bfc <sleepmgr_unlock_mode+0x34>)
   81bea:	4798      	blx	r3
}
   81bec:	bf00      	nop
   81bee:	3710      	adds	r7, #16
   81bf0:	46bd      	mov	sp, r7
   81bf2:	bd80      	pop	{r7, pc}
   81bf4:	00081b09 	.word	0x00081b09
   81bf8:	20000d70 	.word	0x20000d70
   81bfc:	00081b61 	.word	0x00081b61

00081c00 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
   81c00:	b580      	push	{r7, lr}
   81c02:	b082      	sub	sp, #8
   81c04:	af00      	add	r7, sp, #0
   81c06:	4603      	mov	r3, r0
   81c08:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
   81c0a:	79fb      	ldrb	r3, [r7, #7]
   81c0c:	f083 0301 	eor.w	r3, r3, #1
   81c10:	b2db      	uxtb	r3, r3
   81c12:	2b00      	cmp	r3, #0
   81c14:	d006      	beq.n	81c24 <udd_sleep_mode+0x24>
   81c16:	4b0d      	ldr	r3, [pc, #52]	; (81c4c <udd_sleep_mode+0x4c>)
   81c18:	781b      	ldrb	r3, [r3, #0]
   81c1a:	2b00      	cmp	r3, #0
   81c1c:	d002      	beq.n	81c24 <udd_sleep_mode+0x24>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   81c1e:	2002      	movs	r0, #2
   81c20:	4b0b      	ldr	r3, [pc, #44]	; (81c50 <udd_sleep_mode+0x50>)
   81c22:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
   81c24:	79fb      	ldrb	r3, [r7, #7]
   81c26:	2b00      	cmp	r3, #0
   81c28:	d009      	beq.n	81c3e <udd_sleep_mode+0x3e>
   81c2a:	4b08      	ldr	r3, [pc, #32]	; (81c4c <udd_sleep_mode+0x4c>)
   81c2c:	781b      	ldrb	r3, [r3, #0]
   81c2e:	f083 0301 	eor.w	r3, r3, #1
   81c32:	b2db      	uxtb	r3, r3
   81c34:	2b00      	cmp	r3, #0
   81c36:	d002      	beq.n	81c3e <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   81c38:	2002      	movs	r0, #2
   81c3a:	4b06      	ldr	r3, [pc, #24]	; (81c54 <udd_sleep_mode+0x54>)
   81c3c:	4798      	blx	r3
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   81c3e:	4a03      	ldr	r2, [pc, #12]	; (81c4c <udd_sleep_mode+0x4c>)
   81c40:	79fb      	ldrb	r3, [r7, #7]
   81c42:	7013      	strb	r3, [r2, #0]
}
   81c44:	bf00      	nop
   81c46:	3708      	adds	r7, #8
   81c48:	46bd      	mov	sp, r7
   81c4a:	bd80      	pop	{r7, pc}
   81c4c:	20000d00 	.word	0x20000d00
   81c50:	00081bc9 	.word	0x00081bc9
   81c54:	00081b91 	.word	0x00081b91

00081c58 <UDPHS_Handler>:
 * Here, the global interrupt mask is not clear when an USB interrupt is enabled
 * because this one can not be occurred during the USB ISR (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests in peripheral modules.
 */
ISR(UDD_USB_INT_FUN)
{
   81c58:	b580      	push	{r7, lr}
   81c5a:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   81c5c:	201d      	movs	r0, #29
   81c5e:	4b5f      	ldr	r3, [pc, #380]	; (81ddc <UDPHS_Handler+0x184>)
   81c60:	4798      	blx	r3
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   81c62:	4b5f      	ldr	r3, [pc, #380]	; (81de0 <UDPHS_Handler+0x188>)
   81c64:	4798      	blx	r3
   81c66:	4603      	mov	r3, r0
   81c68:	f083 0301 	eor.w	r3, r3, #1
   81c6c:	b2db      	uxtb	r3, r3
   81c6e:	2b00      	cmp	r3, #0
   81c70:	d00c      	beq.n	81c8c <UDPHS_Handler+0x34>
   81c72:	4b5c      	ldr	r3, [pc, #368]	; (81de4 <UDPHS_Handler+0x18c>)
   81c74:	695b      	ldr	r3, [r3, #20]
   81c76:	f003 0302 	and.w	r3, r3, #2
   81c7a:	2b00      	cmp	r3, #0
   81c7c:	d106      	bne.n	81c8c <UDPHS_Handler+0x34>
  __ASM volatile ("cpsid i");
   81c7e:	b672      	cpsid	i
   81c80:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   81c84:	4b58      	ldr	r3, [pc, #352]	; (81de8 <UDPHS_Handler+0x190>)
   81c86:	2200      	movs	r2, #0
   81c88:	701a      	strb	r2, [r3, #0]
		return;
   81c8a:	e0a5      	b.n	81dd8 <UDPHS_Handler+0x180>
	}

	if (Is_udd_sof()) {
   81c8c:	4b55      	ldr	r3, [pc, #340]	; (81de4 <UDPHS_Handler+0x18c>)
   81c8e:	695b      	ldr	r3, [r3, #20]
   81c90:	f003 0308 	and.w	r3, r3, #8
   81c94:	2b00      	cmp	r3, #0
   81c96:	d00d      	beq.n	81cb4 <UDPHS_Handler+0x5c>
		udd_ack_sof();
   81c98:	4b52      	ldr	r3, [pc, #328]	; (81de4 <UDPHS_Handler+0x18c>)
   81c9a:	2208      	movs	r2, #8
   81c9c:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   81c9e:	4b51      	ldr	r3, [pc, #324]	; (81de4 <UDPHS_Handler+0x18c>)
   81ca0:	695b      	ldr	r3, [r3, #20]
   81ca2:	f003 0301 	and.w	r3, r3, #1
   81ca6:	2b00      	cmp	r3, #0
   81ca8:	d101      	bne.n	81cae <UDPHS_Handler+0x56>
			udc_sof_notify();
   81caa:	4b50      	ldr	r3, [pc, #320]	; (81dec <UDPHS_Handler+0x194>)
   81cac:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   81cae:	4b50      	ldr	r3, [pc, #320]	; (81df0 <UDPHS_Handler+0x198>)
   81cb0:	4798      	blx	r3
#endif
		goto udd_interrupt_sof_end;
   81cb2:	e090      	b.n	81dd6 <UDPHS_Handler+0x17e>
	}

	if (Is_udd_msof()) {
   81cb4:	4b4b      	ldr	r3, [pc, #300]	; (81de4 <UDPHS_Handler+0x18c>)
   81cb6:	695b      	ldr	r3, [r3, #20]
   81cb8:	f003 0304 	and.w	r3, r3, #4
   81cbc:	2b00      	cmp	r3, #0
   81cbe:	d005      	beq.n	81ccc <UDPHS_Handler+0x74>
		udd_ack_msof();
   81cc0:	4b48      	ldr	r3, [pc, #288]	; (81de4 <UDPHS_Handler+0x18c>)
   81cc2:	2204      	movs	r2, #4
   81cc4:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   81cc6:	4b49      	ldr	r3, [pc, #292]	; (81dec <UDPHS_Handler+0x194>)
   81cc8:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   81cca:	e084      	b.n	81dd6 <UDPHS_Handler+0x17e>
	}
	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');

	if (udd_ctrl_interrupt()) {
   81ccc:	4b49      	ldr	r3, [pc, #292]	; (81df4 <UDPHS_Handler+0x19c>)
   81cce:	4798      	blx	r3
   81cd0:	4603      	mov	r3, r0
   81cd2:	2b00      	cmp	r3, #0
   81cd4:	d17a      	bne.n	81dcc <UDPHS_Handler+0x174>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
   81cd6:	4b48      	ldr	r3, [pc, #288]	; (81df8 <UDPHS_Handler+0x1a0>)
   81cd8:	4798      	blx	r3
   81cda:	4603      	mov	r3, r0
   81cdc:	2b00      	cmp	r3, #0
   81cde:	d177      	bne.n	81dd0 <UDPHS_Handler+0x178>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   81ce0:	4b40      	ldr	r3, [pc, #256]	; (81de4 <UDPHS_Handler+0x18c>)
   81ce2:	695b      	ldr	r3, [r3, #20]
   81ce4:	f003 0310 	and.w	r3, r3, #16
   81ce8:	2b00      	cmp	r3, #0
   81cea:	d01d      	beq.n	81d28 <UDPHS_Handler+0xd0>
		dbg_print("EoR ");
		udd_ack_reset();
   81cec:	4b3d      	ldr	r3, [pc, #244]	; (81de4 <UDPHS_Handler+0x18c>)
   81cee:	2210      	movs	r2, #16
   81cf0:	619a      	str	r2, [r3, #24]
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
   81cf2:	4b42      	ldr	r3, [pc, #264]	; (81dfc <UDPHS_Handler+0x1a4>)
   81cf4:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
   81cf6:	4b42      	ldr	r3, [pc, #264]	; (81e00 <UDPHS_Handler+0x1a8>)
   81cf8:	4798      	blx	r3
		// Reset endpoint control
		udd_reset_ep_ctrl();
   81cfa:	4b42      	ldr	r3, [pc, #264]	; (81e04 <UDPHS_Handler+0x1ac>)
   81cfc:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
   81cfe:	4b42      	ldr	r3, [pc, #264]	; (81e08 <UDPHS_Handler+0x1b0>)
   81d00:	4798      	blx	r3
		// Enable SOF interrupts cleared by USB reset event
		udd_enable_sof_interrupt();
   81d02:	4b38      	ldr	r3, [pc, #224]	; (81de4 <UDPHS_Handler+0x18c>)
   81d04:	691b      	ldr	r3, [r3, #16]
   81d06:	4a37      	ldr	r2, [pc, #220]	; (81de4 <UDPHS_Handler+0x18c>)
   81d08:	f043 0308 	orr.w	r3, r3, #8
   81d0c:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   81d0e:	4b35      	ldr	r3, [pc, #212]	; (81de4 <UDPHS_Handler+0x18c>)
   81d10:	691b      	ldr	r3, [r3, #16]
   81d12:	4a34      	ldr	r2, [pc, #208]	; (81de4 <UDPHS_Handler+0x18c>)
   81d14:	f043 0304 	orr.w	r3, r3, #4
   81d18:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   81d1a:	4b32      	ldr	r3, [pc, #200]	; (81de4 <UDPHS_Handler+0x18c>)
   81d1c:	691b      	ldr	r3, [r3, #16]
   81d1e:	4a31      	ldr	r2, [pc, #196]	; (81de4 <UDPHS_Handler+0x18c>)
   81d20:	f043 0302 	orr.w	r3, r3, #2
   81d24:	6113      	str	r3, [r2, #16]
		goto udd_interrupt_end;
   81d26:	e056      	b.n	81dd6 <UDPHS_Handler+0x17e>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   81d28:	4b2e      	ldr	r3, [pc, #184]	; (81de4 <UDPHS_Handler+0x18c>)
   81d2a:	691b      	ldr	r3, [r3, #16]
   81d2c:	f003 0302 	and.w	r3, r3, #2
   81d30:	2b00      	cmp	r3, #0
   81d32:	d020      	beq.n	81d76 <UDPHS_Handler+0x11e>
   81d34:	4b2b      	ldr	r3, [pc, #172]	; (81de4 <UDPHS_Handler+0x18c>)
   81d36:	695b      	ldr	r3, [r3, #20]
   81d38:	f003 0302 	and.w	r3, r3, #2
   81d3c:	2b00      	cmp	r3, #0
   81d3e:	d01a      	beq.n	81d76 <UDPHS_Handler+0x11e>
		dbg_print("Susp ");
		// Remove old wakeup status
		udd_ack_wake_up();
   81d40:	4b28      	ldr	r3, [pc, #160]	; (81de4 <UDPHS_Handler+0x18c>)
   81d42:	2220      	movs	r2, #32
   81d44:	619a      	str	r2, [r3, #24]
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   81d46:	4b27      	ldr	r3, [pc, #156]	; (81de4 <UDPHS_Handler+0x18c>)
   81d48:	691b      	ldr	r3, [r3, #16]
   81d4a:	4a26      	ldr	r2, [pc, #152]	; (81de4 <UDPHS_Handler+0x18c>)
   81d4c:	f023 0302 	bic.w	r3, r3, #2
   81d50:	6113      	str	r3, [r2, #16]
		udd_enable_wake_up_interrupt();
   81d52:	4b24      	ldr	r3, [pc, #144]	; (81de4 <UDPHS_Handler+0x18c>)
   81d54:	691b      	ldr	r3, [r3, #16]
   81d56:	4a23      	ldr	r2, [pc, #140]	; (81de4 <UDPHS_Handler+0x18c>)
   81d58:	f043 0320 	orr.w	r3, r3, #32
   81d5c:	6113      	str	r3, [r2, #16]

		// The wakeup interrupt is generated even if the device controller clock is disabled.
		udd_ack_suspend();
   81d5e:	4b21      	ldr	r3, [pc, #132]	; (81de4 <UDPHS_Handler+0x18c>)
   81d60:	2202      	movs	r2, #2
   81d62:	619a      	str	r2, [r3, #24]

		udd_disable_periph_ck();
   81d64:	201d      	movs	r0, #29
   81d66:	4b29      	ldr	r3, [pc, #164]	; (81e0c <UDPHS_Handler+0x1b4>)
   81d68:	4798      	blx	r3

#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   81d6a:	4b29      	ldr	r3, [pc, #164]	; (81e10 <UDPHS_Handler+0x1b8>)
   81d6c:	4798      	blx	r3
#endif
		udd_sleep_mode(false); // Enter in SUSPEND mode
   81d6e:	2000      	movs	r0, #0
   81d70:	4b28      	ldr	r3, [pc, #160]	; (81e14 <UDPHS_Handler+0x1bc>)
   81d72:	4798      	blx	r3
		goto udd_interrupt_end;
   81d74:	e02f      	b.n	81dd6 <UDPHS_Handler+0x17e>
	}

	// On wakeup, _IEN is reseted only with EoR enabled
	if (Is_udd_wake_up()) {
   81d76:	4b1b      	ldr	r3, [pc, #108]	; (81de4 <UDPHS_Handler+0x18c>)
   81d78:	695b      	ldr	r3, [r3, #20]
   81d7a:	f003 0320 	and.w	r3, r3, #32
   81d7e:	2b00      	cmp	r3, #0
   81d80:	d028      	beq.n	81dd4 <UDPHS_Handler+0x17c>
		udd_sleep_mode(true); // Enter in IDLE mode
   81d82:	2001      	movs	r0, #1
   81d84:	4b23      	ldr	r3, [pc, #140]	; (81e14 <UDPHS_Handler+0x1bc>)
   81d86:	4798      	blx	r3
		// Remove old suspend status
		udd_ack_suspend();
   81d88:	4b16      	ldr	r3, [pc, #88]	; (81de4 <UDPHS_Handler+0x18c>)
   81d8a:	2202      	movs	r2, #2
   81d8c:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wake_up();
   81d8e:	4b15      	ldr	r3, [pc, #84]	; (81de4 <UDPHS_Handler+0x18c>)
   81d90:	2220      	movs	r2, #32
   81d92:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_disable_wake_up_interrupt();
   81d94:	4b13      	ldr	r3, [pc, #76]	; (81de4 <UDPHS_Handler+0x18c>)
   81d96:	691b      	ldr	r3, [r3, #16]
   81d98:	4a12      	ldr	r2, [pc, #72]	; (81de4 <UDPHS_Handler+0x18c>)
   81d9a:	f023 0320 	bic.w	r3, r3, #32
   81d9e:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   81da0:	4b10      	ldr	r3, [pc, #64]	; (81de4 <UDPHS_Handler+0x18c>)
   81da2:	691b      	ldr	r3, [r3, #16]
   81da4:	4a0f      	ldr	r2, [pc, #60]	; (81de4 <UDPHS_Handler+0x18c>)
   81da6:	f043 0302 	orr.w	r3, r3, #2
   81daa:	6113      	str	r3, [r2, #16]
		udd_enable_sof_interrupt();
   81dac:	4b0d      	ldr	r3, [pc, #52]	; (81de4 <UDPHS_Handler+0x18c>)
   81dae:	691b      	ldr	r3, [r3, #16]
   81db0:	4a0c      	ldr	r2, [pc, #48]	; (81de4 <UDPHS_Handler+0x18c>)
   81db2:	f043 0308 	orr.w	r3, r3, #8
   81db6:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   81db8:	4b0a      	ldr	r3, [pc, #40]	; (81de4 <UDPHS_Handler+0x18c>)
   81dba:	691b      	ldr	r3, [r3, #16]
   81dbc:	4a09      	ldr	r2, [pc, #36]	; (81de4 <UDPHS_Handler+0x18c>)
   81dbe:	f043 0304 	orr.w	r3, r3, #4
   81dc2:	6113      	str	r3, [r2, #16]

#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   81dc4:	4b14      	ldr	r3, [pc, #80]	; (81e18 <UDPHS_Handler+0x1c0>)
   81dc6:	4798      	blx	r3
#endif
		dbg_print("Wkup ");
		goto udd_interrupt_end;
   81dc8:	bf00      	nop
   81dca:	e004      	b.n	81dd6 <UDPHS_Handler+0x17e>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
   81dcc:	bf00      	nop
   81dce:	e002      	b.n	81dd6 <UDPHS_Handler+0x17e>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
   81dd0:	bf00      	nop
   81dd2:	e000      	b.n	81dd6 <UDPHS_Handler+0x17e>
	}
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);

udd_interrupt_end:
   81dd4:	bf00      	nop
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
	//dbg_print("m%08x", UDPHS->UDPHS_IEN);
	dbg_print("\n\r");
udd_interrupt_sof_end:
	return;
   81dd6:	bf00      	nop
}
   81dd8:	bd80      	pop	{r7, pc}
   81dda:	bf00      	nop
   81ddc:	00083e91 	.word	0x00083e91
   81de0:	00085859 	.word	0x00085859
   81de4:	400a4000 	.word	0x400a4000
   81de8:	2000031a 	.word	0x2000031a
   81dec:	0008497d 	.word	0x0008497d
   81df0:	00080d8d 	.word	0x00080d8d
   81df4:	000830c1 	.word	0x000830c1
   81df8:	000834d9 	.word	0x000834d9
   81dfc:	00083201 	.word	0x00083201
   81e00:	00084929 	.word	0x00084929
   81e04:	00082a21 	.word	0x00082a21
   81e08:	00082aa1 	.word	0x00082aa1
   81e0c:	00083edd 	.word	0x00083edd
   81e10:	00080d75 	.word	0x00080d75
   81e14:	00081c01 	.word	0x00081c01
   81e18:	00080d81 	.word	0x00080d81

00081e1c <udd_enable>:
#endif
}


void udd_enable(void)
{
   81e1c:	b580      	push	{r7, lr}
   81e1e:	b082      	sub	sp, #8
   81e20:	af00      	add	r7, sp, #0
	irqflags_t flags;
	sysclk_enable_usb();
   81e22:	4b19      	ldr	r3, [pc, #100]	; (81e88 <udd_enable+0x6c>)
   81e24:	4798      	blx	r3

	udd_enable_periph_ck();
   81e26:	201d      	movs	r0, #29
   81e28:	4b18      	ldr	r3, [pc, #96]	; (81e8c <udd_enable+0x70>)
   81e2a:	4798      	blx	r3

	flags = cpu_irq_save();
   81e2c:	4b18      	ldr	r3, [pc, #96]	; (81e90 <udd_enable+0x74>)
   81e2e:	4798      	blx	r3
   81e30:	6078      	str	r0, [r7, #4]

	//** Enable USB hardware
	udd_enable_periph();
   81e32:	4b18      	ldr	r3, [pc, #96]	; (81e94 <udd_enable+0x78>)
   81e34:	681b      	ldr	r3, [r3, #0]
   81e36:	4a17      	ldr	r2, [pc, #92]	; (81e94 <udd_enable+0x78>)
   81e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   81e3c:	6013      	str	r3, [r2, #0]

	// Cortex-M3, uses NVIC, no need to register IRQ handler
	// Here, only the Device mode is possible,
	// UDPHS interrupt is UDD interrupt
	NVIC_SetPriority((IRQn_Type) ID_UDPHS, UDD_USB_INT_LEVEL);
   81e3e:	2105      	movs	r1, #5
   81e40:	201d      	movs	r0, #29
   81e42:	4b15      	ldr	r3, [pc, #84]	; (81e98 <udd_enable+0x7c>)
   81e44:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDPHS);
   81e46:	201d      	movs	r0, #29
   81e48:	4b14      	ldr	r3, [pc, #80]	; (81e9c <udd_enable+0x80>)
   81e4a:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
   81e4c:	4b14      	ldr	r3, [pc, #80]	; (81ea0 <udd_enable+0x84>)
   81e4e:	4798      	blx	r3
#endif

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   81e50:	4b10      	ldr	r3, [pc, #64]	; (81e94 <udd_enable+0x78>)
   81e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   81e56:	4a0f      	ldr	r2, [pc, #60]	; (81e94 <udd_enable+0x78>)
   81e58:	f023 0303 	bic.w	r3, r3, #3
   81e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
#else
	udd_high_speed_disable();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   81e60:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   81e64:	4b0f      	ldr	r3, [pc, #60]	; (81ea4 <udd_enable+0x88>)
   81e66:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
   81e68:	4b0f      	ldr	r3, [pc, #60]	; (81ea8 <udd_enable+0x8c>)
   81e6a:	2200      	movs	r2, #0
   81e6c:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
   81e6e:	2003      	movs	r0, #3
   81e70:	4b0e      	ldr	r3, [pc, #56]	; (81eac <udd_enable+0x90>)
   81e72:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
   81e74:	4b0e      	ldr	r3, [pc, #56]	; (81eb0 <udd_enable+0x94>)
   81e76:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
   81e78:	6878      	ldr	r0, [r7, #4]
   81e7a:	4b0e      	ldr	r3, [pc, #56]	; (81eb4 <udd_enable+0x98>)
   81e7c:	4798      	blx	r3
}
   81e7e:	bf00      	nop
   81e80:	3708      	adds	r7, #8
   81e82:	46bd      	mov	sp, r7
   81e84:	bd80      	pop	{r7, pc}
   81e86:	bf00      	nop
   81e88:	00083a79 	.word	0x00083a79
   81e8c:	00083e91 	.word	0x00083e91
   81e90:	00081b09 	.word	0x00081b09
   81e94:	400a4000 	.word	0x400a4000
   81e98:	00081ab5 	.word	0x00081ab5
   81e9c:	00081a85 	.word	0x00081a85
   81ea0:	000831a5 	.word	0x000831a5
   81ea4:	00083f4d 	.word	0x00083f4d
   81ea8:	20000d00 	.word	0x20000d00
   81eac:	00081b91 	.word	0x00081b91
   81eb0:	00081eb9 	.word	0x00081eb9
   81eb4:	00081b61 	.word	0x00081b61

00081eb8 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   81eb8:	b580      	push	{r7, lr}
   81eba:	b082      	sub	sp, #8
   81ebc:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
   81ebe:	4b26      	ldr	r3, [pc, #152]	; (81f58 <udd_attach+0xa0>)
   81ec0:	4798      	blx	r3
   81ec2:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   81ec4:	2001      	movs	r0, #1
   81ec6:	4b25      	ldr	r3, [pc, #148]	; (81f5c <udd_attach+0xa4>)
   81ec8:	4798      	blx	r3
	udd_enable_periph_ck();
   81eca:	201d      	movs	r0, #29
   81ecc:	4b24      	ldr	r3, [pc, #144]	; (81f60 <udd_attach+0xa8>)
   81ece:	4798      	blx	r3

	// Authorize attach if Vbus is present
	udd_attach_device();
   81ed0:	4b24      	ldr	r3, [pc, #144]	; (81f64 <udd_attach+0xac>)
   81ed2:	681b      	ldr	r3, [r3, #0]
   81ed4:	4a23      	ldr	r2, [pc, #140]	; (81f64 <udd_attach+0xac>)
   81ed6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81eda:	6013      	str	r3, [r2, #0]
   81edc:	4b21      	ldr	r3, [pc, #132]	; (81f64 <udd_attach+0xac>)
   81ede:	681b      	ldr	r3, [r3, #0]
   81ee0:	4a20      	ldr	r2, [pc, #128]	; (81f64 <udd_attach+0xac>)
   81ee2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   81ee6:	6013      	str	r3, [r2, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   81ee8:	4b1e      	ldr	r3, [pc, #120]	; (81f64 <udd_attach+0xac>)
   81eea:	691b      	ldr	r3, [r3, #16]
   81eec:	4a1d      	ldr	r2, [pc, #116]	; (81f64 <udd_attach+0xac>)
   81eee:	f043 0310 	orr.w	r3, r3, #16
   81ef2:	6113      	str	r3, [r2, #16]
	udd_enable_suspend_interrupt();
   81ef4:	4b1b      	ldr	r3, [pc, #108]	; (81f64 <udd_attach+0xac>)
   81ef6:	691b      	ldr	r3, [r3, #16]
   81ef8:	4a1a      	ldr	r2, [pc, #104]	; (81f64 <udd_attach+0xac>)
   81efa:	f043 0302 	orr.w	r3, r3, #2
   81efe:	6113      	str	r3, [r2, #16]
	udd_enable_wake_up_interrupt();
   81f00:	4b18      	ldr	r3, [pc, #96]	; (81f64 <udd_attach+0xac>)
   81f02:	691b      	ldr	r3, [r3, #16]
   81f04:	4a17      	ldr	r2, [pc, #92]	; (81f64 <udd_attach+0xac>)
   81f06:	f043 0320 	orr.w	r3, r3, #32
   81f0a:	6113      	str	r3, [r2, #16]
	udd_enable_sof_interrupt();
   81f0c:	4b15      	ldr	r3, [pc, #84]	; (81f64 <udd_attach+0xac>)
   81f0e:	691b      	ldr	r3, [r3, #16]
   81f10:	4a14      	ldr	r2, [pc, #80]	; (81f64 <udd_attach+0xac>)
   81f12:	f043 0308 	orr.w	r3, r3, #8
   81f16:	6113      	str	r3, [r2, #16]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   81f18:	4b12      	ldr	r3, [pc, #72]	; (81f64 <udd_attach+0xac>)
   81f1a:	691b      	ldr	r3, [r3, #16]
   81f1c:	4a11      	ldr	r2, [pc, #68]	; (81f64 <udd_attach+0xac>)
   81f1e:	f043 0304 	orr.w	r3, r3, #4
   81f22:	6113      	str	r3, [r2, #16]
#endif
	// Reset following interrupts flag
	udd_ack_sof();
   81f24:	4b0f      	ldr	r3, [pc, #60]	; (81f64 <udd_attach+0xac>)
   81f26:	2208      	movs	r2, #8
   81f28:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   81f2a:	4b0e      	ldr	r3, [pc, #56]	; (81f64 <udd_attach+0xac>)
   81f2c:	2204      	movs	r2, #4
   81f2e:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   81f30:	4b0c      	ldr	r3, [pc, #48]	; (81f64 <udd_attach+0xac>)
   81f32:	2210      	movs	r2, #16
   81f34:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   81f36:	4b0b      	ldr	r3, [pc, #44]	; (81f64 <udd_attach+0xac>)
   81f38:	2202      	movs	r2, #2
   81f3a:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   81f3c:	4b09      	ldr	r3, [pc, #36]	; (81f64 <udd_attach+0xac>)
   81f3e:	2220      	movs	r2, #32
   81f40:	619a      	str	r2, [r3, #24]

	udd_disable_periph_ck();
   81f42:	201d      	movs	r0, #29
   81f44:	4b08      	ldr	r3, [pc, #32]	; (81f68 <udd_attach+0xb0>)
   81f46:	4798      	blx	r3
	cpu_irq_restore(flags);
   81f48:	6878      	ldr	r0, [r7, #4]
   81f4a:	4b08      	ldr	r3, [pc, #32]	; (81f6c <udd_attach+0xb4>)
   81f4c:	4798      	blx	r3
}
   81f4e:	bf00      	nop
   81f50:	3708      	adds	r7, #8
   81f52:	46bd      	mov	sp, r7
   81f54:	bd80      	pop	{r7, pc}
   81f56:	bf00      	nop
   81f58:	00081b09 	.word	0x00081b09
   81f5c:	00081c01 	.word	0x00081c01
   81f60:	00083e91 	.word	0x00083e91
   81f64:	400a4000 	.word	0x400a4000
   81f68:	00083edd 	.word	0x00083edd
   81f6c:	00081b61 	.word	0x00081b61

00081f70 <udd_detach>:


void udd_detach(void)
{
   81f70:	b580      	push	{r7, lr}
   81f72:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   81f74:	201d      	movs	r0, #29
   81f76:	4b0b      	ldr	r3, [pc, #44]	; (81fa4 <udd_detach+0x34>)
   81f78:	4798      	blx	r3
	// Detach device from the bus
	udd_detach_device();
   81f7a:	4b0b      	ldr	r3, [pc, #44]	; (81fa8 <udd_detach+0x38>)
   81f7c:	681b      	ldr	r3, [r3, #0]
   81f7e:	4a0a      	ldr	r2, [pc, #40]	; (81fa8 <udd_detach+0x38>)
   81f80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   81f84:	6013      	str	r3, [r2, #0]
   81f86:	4b08      	ldr	r3, [pc, #32]	; (81fa8 <udd_detach+0x38>)
   81f88:	681b      	ldr	r3, [r3, #0]
   81f8a:	4a07      	ldr	r2, [pc, #28]	; (81fa8 <udd_detach+0x38>)
   81f8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81f90:	6013      	str	r3, [r2, #0]
	udd_disable_periph_ck();
   81f92:	201d      	movs	r0, #29
   81f94:	4b05      	ldr	r3, [pc, #20]	; (81fac <udd_detach+0x3c>)
   81f96:	4798      	blx	r3
	udd_sleep_mode(false);
   81f98:	2000      	movs	r0, #0
   81f9a:	4b05      	ldr	r3, [pc, #20]	; (81fb0 <udd_detach+0x40>)
   81f9c:	4798      	blx	r3
}
   81f9e:	bf00      	nop
   81fa0:	bd80      	pop	{r7, pc}
   81fa2:	bf00      	nop
   81fa4:	00083e91 	.word	0x00083e91
   81fa8:	400a4000 	.word	0x400a4000
   81fac:	00083edd 	.word	0x00083edd
   81fb0:	00081c01 	.word	0x00081c01

00081fb4 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
   81fb4:	b480      	push	{r7}
   81fb6:	af00      	add	r7, sp, #0
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   81fb8:	4b06      	ldr	r3, [pc, #24]	; (81fd4 <udd_is_high_speed+0x20>)
   81fba:	695b      	ldr	r3, [r3, #20]
   81fbc:	f003 0301 	and.w	r3, r3, #1
   81fc0:	2b00      	cmp	r3, #0
   81fc2:	bf14      	ite	ne
   81fc4:	2301      	movne	r3, #1
   81fc6:	2300      	moveq	r3, #0
   81fc8:	b2db      	uxtb	r3, r3
#else
	return false;
#endif
}
   81fca:	4618      	mov	r0, r3
   81fcc:	46bd      	mov	sp, r7
   81fce:	bc80      	pop	{r7}
   81fd0:	4770      	bx	lr
   81fd2:	bf00      	nop
   81fd4:	400a4000 	.word	0x400a4000

00081fd8 <udd_set_address>:


void udd_set_address(uint8_t address)
{
   81fd8:	b480      	push	{r7}
   81fda:	b083      	sub	sp, #12
   81fdc:	af00      	add	r7, sp, #0
   81fde:	4603      	mov	r3, r0
   81fe0:	71fb      	strb	r3, [r7, #7]
	dbg_print("Addr%d ", address);
	udd_disable_address();
   81fe2:	4b0d      	ldr	r3, [pc, #52]	; (82018 <udd_set_address+0x40>)
   81fe4:	681b      	ldr	r3, [r3, #0]
   81fe6:	4a0c      	ldr	r2, [pc, #48]	; (82018 <udd_set_address+0x40>)
   81fe8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   81fec:	6013      	str	r3, [r2, #0]
	udd_configure_address(address);
   81fee:	4b0a      	ldr	r3, [pc, #40]	; (82018 <udd_set_address+0x40>)
   81ff0:	681b      	ldr	r3, [r3, #0]
   81ff2:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   81ff6:	79fb      	ldrb	r3, [r7, #7]
   81ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   81ffc:	4906      	ldr	r1, [pc, #24]	; (82018 <udd_set_address+0x40>)
   81ffe:	4313      	orrs	r3, r2
   82000:	600b      	str	r3, [r1, #0]
	udd_enable_address();
   82002:	4b05      	ldr	r3, [pc, #20]	; (82018 <udd_set_address+0x40>)
   82004:	681b      	ldr	r3, [r3, #0]
   82006:	4a04      	ldr	r2, [pc, #16]	; (82018 <udd_set_address+0x40>)
   82008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8200c:	6013      	str	r3, [r2, #0]
}
   8200e:	bf00      	nop
   82010:	370c      	adds	r7, #12
   82012:	46bd      	mov	sp, r7
   82014:	bc80      	pop	{r7}
   82016:	4770      	bx	lr
   82018:	400a4000 	.word	0x400a4000

0008201c <udd_getaddress>:


uint8_t udd_getaddress(void)
{
   8201c:	b480      	push	{r7}
   8201e:	af00      	add	r7, sp, #0
	return udd_get_configured_address();
   82020:	4b04      	ldr	r3, [pc, #16]	; (82034 <udd_getaddress+0x18>)
   82022:	681b      	ldr	r3, [r3, #0]
   82024:	b2db      	uxtb	r3, r3
   82026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   8202a:	b2db      	uxtb	r3, r3
}
   8202c:	4618      	mov	r0, r3
   8202e:	46bd      	mov	sp, r7
   82030:	bc80      	pop	{r7}
   82032:	4770      	bx	lr
   82034:	400a4000 	.word	0x400a4000

00082038 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
   82038:	b480      	push	{r7}
   8203a:	b083      	sub	sp, #12
   8203c:	af00      	add	r7, sp, #0
   8203e:	6078      	str	r0, [r7, #4]
   82040:	460b      	mov	r3, r1
   82042:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
   82044:	4a05      	ldr	r2, [pc, #20]	; (8205c <udd_set_setup_payload+0x24>)
   82046:	687b      	ldr	r3, [r7, #4]
   82048:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   8204a:	4a04      	ldr	r2, [pc, #16]	; (8205c <udd_set_setup_payload+0x24>)
   8204c:	887b      	ldrh	r3, [r7, #2]
   8204e:	8193      	strh	r3, [r2, #12]
}
   82050:	bf00      	nop
   82052:	370c      	adds	r7, #12
   82054:	46bd      	mov	sp, r7
   82056:	bc80      	pop	{r7}
   82058:	4770      	bx	lr
   8205a:	bf00      	nop
   8205c:	20000d58 	.word	0x20000d58

00082060 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   82060:	b590      	push	{r4, r7, lr}
   82062:	b089      	sub	sp, #36	; 0x24
   82064:	af02      	add	r7, sp, #8
   82066:	4603      	mov	r3, r0
   82068:	71fb      	strb	r3, [r7, #7]
   8206a:	460b      	mov	r3, r1
   8206c:	71bb      	strb	r3, [r7, #6]
   8206e:	4613      	mov	r3, r2
   82070:	80bb      	strh	r3, [r7, #4]
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, nb_tran = 0, i;
   82072:	2300      	movs	r3, #0
   82074:	74fb      	strb	r3, [r7, #19]
	bool b_iso_hbw = false;
   82076:	2300      	movs	r3, #0
   82078:	747b      	strb	r3, [r7, #17]

	b_dir_in = ep & USB_EP_DIR_IN;
   8207a:	79fb      	ldrb	r3, [r7, #7]
   8207c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82080:	2b00      	cmp	r3, #0
   82082:	bf14      	ite	ne
   82084:	2301      	movne	r3, #1
   82086:	2300      	moveq	r3, #0
   82088:	743b      	strb	r3, [r7, #16]
	ep = ep & USB_EP_ADDR_MASK;
   8208a:	79fb      	ldrb	r3, [r7, #7]
   8208c:	f003 030f 	and.w	r3, r3, #15
   82090:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
   82092:	79fb      	ldrb	r3, [r7, #7]
   82094:	2b02      	cmp	r3, #2
   82096:	d901      	bls.n	8209c <udd_ep_alloc+0x3c>
		return false;
   82098:	2300      	movs	r3, #0
   8209a:	e1ae      	b.n	823fa <udd_ep_alloc+0x39a>
	}
	if (Is_udd_endpoint_enabled(ep)) {
   8209c:	4ab0      	ldr	r2, [pc, #704]	; (82360 <udd_ep_alloc+0x300>)
   8209e:	79fb      	ldrb	r3, [r7, #7]
   820a0:	015b      	lsls	r3, r3, #5
   820a2:	4413      	add	r3, r2
   820a4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   820a8:	681b      	ldr	r3, [r3, #0]
   820aa:	f003 0301 	and.w	r3, r3, #1
   820ae:	2b00      	cmp	r3, #0
   820b0:	d001      	beq.n	820b6 <udd_ep_alloc+0x56>
		return false;
   820b2:	2300      	movs	r3, #0
   820b4:	e1a1      	b.n	823fa <udd_ep_alloc+0x39a>
	}

	// Bank choice
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   820b6:	79bb      	ldrb	r3, [r7, #6]
   820b8:	f003 0303 	and.w	r3, r3, #3
   820bc:	2b02      	cmp	r3, #2
   820be:	d01a      	beq.n	820f6 <udd_ep_alloc+0x96>
   820c0:	2b03      	cmp	r3, #3
   820c2:	d015      	beq.n	820f0 <udd_ep_alloc+0x90>
   820c4:	2b01      	cmp	r3, #1
   820c6:	d119      	bne.n	820fc <udd_ep_alloc+0x9c>
	case USB_EP_TYPE_ISOCHRONOUS:
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   820c8:	79fb      	ldrb	r3, [r7, #7]
   820ca:	2b00      	cmp	r3, #0
   820cc:	d007      	beq.n	820de <udd_ep_alloc+0x7e>
   820ce:	79fb      	ldrb	r3, [r7, #7]
   820d0:	2b03      	cmp	r3, #3
   820d2:	d004      	beq.n	820de <udd_ep_alloc+0x7e>
   820d4:	79fb      	ldrb	r3, [r7, #7]
   820d6:	2b04      	cmp	r3, #4
   820d8:	d001      	beq.n	820de <udd_ep_alloc+0x7e>
   820da:	2301      	movs	r3, #1
   820dc:	e000      	b.n	820e0 <udd_ep_alloc+0x80>
   820de:	2300      	movs	r3, #0
   820e0:	747b      	strb	r3, [r7, #17]
   820e2:	7c7b      	ldrb	r3, [r7, #17]
   820e4:	f003 0301 	and.w	r3, r3, #1
   820e8:	747b      	strb	r3, [r7, #17]
		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
   820ea:	2301      	movs	r3, #1
   820ec:	757b      	strb	r3, [r7, #21]
		break;
   820ee:	e007      	b.n	82100 <udd_ep_alloc+0xa0>
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
   820f0:	2301      	movs	r3, #1
   820f2:	757b      	strb	r3, [r7, #21]
		break;
   820f4:	e004      	b.n	82100 <udd_ep_alloc+0xa0>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   820f6:	2302      	movs	r3, #2
   820f8:	757b      	strb	r3, [r7, #21]
		break;
   820fa:	e001      	b.n	82100 <udd_ep_alloc+0xa0>
	default:
		Assert(false);
		return false;
   820fc:	2300      	movs	r3, #0
   820fe:	e17c      	b.n	823fa <udd_ep_alloc+0x39a>
	}
	switch (nb_bank) {
   82100:	7d7b      	ldrb	r3, [r7, #21]
   82102:	2b02      	cmp	r3, #2
   82104:	d006      	beq.n	82114 <udd_ep_alloc+0xb4>
   82106:	2b03      	cmp	r3, #3
   82108:	d007      	beq.n	8211a <udd_ep_alloc+0xba>
   8210a:	2b01      	cmp	r3, #1
   8210c:	d108      	bne.n	82120 <udd_ep_alloc+0xc0>
	case 1:
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   8210e:	2301      	movs	r3, #1
   82110:	753b      	strb	r3, [r7, #20]
		break;
   82112:	e007      	b.n	82124 <udd_ep_alloc+0xc4>
	case 2:
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   82114:	2302      	movs	r3, #2
   82116:	753b      	strb	r3, [r7, #20]
		break;
   82118:	e004      	b.n	82124 <udd_ep_alloc+0xc4>
	case 3:
		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   8211a:	2303      	movs	r3, #3
   8211c:	753b      	strb	r3, [r7, #20]
		break;
   8211e:	e001      	b.n	82124 <udd_ep_alloc+0xc4>
	default:
		Assert(false);
		return false;
   82120:	2300      	movs	r3, #0
   82122:	e16a      	b.n	823fa <udd_ep_alloc+0x39a>
	}
	if (b_iso_hbw) {
   82124:	7c7b      	ldrb	r3, [r7, #17]
   82126:	2b00      	cmp	r3, #0
   82128:	d017      	beq.n	8215a <udd_ep_alloc+0xfa>
		switch(MaxEndpointSize & (0x3u << 11)) {
   8212a:	88bb      	ldrh	r3, [r7, #4]
   8212c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   82130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   82134:	d003      	beq.n	8213e <udd_ep_alloc+0xde>
   82136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   8213a:	d003      	beq.n	82144 <udd_ep_alloc+0xe4>
   8213c:	e005      	b.n	8214a <udd_ep_alloc+0xea>
		case (0x1u << 11):
			nb_tran = 2;
   8213e:	2302      	movs	r3, #2
   82140:	74fb      	strb	r3, [r7, #19]
			break;
   82142:	e005      	b.n	82150 <udd_ep_alloc+0xf0>
		case (0x2u << 11):
			nb_tran = 3;
   82144:	2303      	movs	r3, #3
   82146:	74fb      	strb	r3, [r7, #19]
			break;
   82148:	e002      	b.n	82150 <udd_ep_alloc+0xf0>
		default:
			nb_tran = 1;
   8214a:	2301      	movs	r3, #1
   8214c:	74fb      	strb	r3, [r7, #19]
			break;
   8214e:	bf00      	nop
		}
		MaxEndpointSize &= ~(0x3u << 11);
   82150:	88bb      	ldrh	r3, [r7, #4]
   82152:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
   82156:	80bb      	strh	r3, [r7, #4]
   82158:	e006      	b.n	82168 <udd_ep_alloc+0x108>
	} else if (MaxEndpointSize & (0x3u << 11)) {
   8215a:	88bb      	ldrh	r3, [r7, #4]
   8215c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   82160:	2b00      	cmp	r3, #0
   82162:	d001      	beq.n	82168 <udd_ep_alloc+0x108>
		// High BW not supported
		return false;
   82164:	2300      	movs	r3, #0
   82166:	e148      	b.n	823fa <udd_ep_alloc+0x39a>
	Assert(MaxEndpointSize <= udd_get_endpoint_size_max(ep));
	Assert(nb_bank <= udd_get_endpoint_bank_max_nbr(ep));

	// Set configuration of new endpoint
	// Note: NB_TRANS is at maximum for isochronous endpoint, else 0 (ignored).
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   82168:	4a7d      	ldr	r2, [pc, #500]	; (82360 <udd_ep_alloc+0x300>)
   8216a:	79fb      	ldrb	r3, [r7, #7]
   8216c:	3308      	adds	r3, #8
   8216e:	015b      	lsls	r3, r3, #5
   82170:	4413      	add	r3, r2
   82172:	681b      	ldr	r3, [r3, #0]
   82174:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   82178:	f023 0303 	bic.w	r3, r3, #3
   8217c:	79ba      	ldrb	r2, [r7, #6]
   8217e:	0112      	lsls	r2, r2, #4
   82180:	f002 0230 	and.w	r2, r2, #48	; 0x30
   82184:	7c39      	ldrb	r1, [r7, #16]
   82186:	2900      	cmp	r1, #0
   82188:	d001      	beq.n	8218e <udd_ep_alloc+0x12e>
   8218a:	2108      	movs	r1, #8
   8218c:	e000      	b.n	82190 <udd_ep_alloc+0x130>
   8218e:	2100      	movs	r1, #0
   82190:	4311      	orrs	r1, r2
   82192:	88ba      	ldrh	r2, [r7, #4]
   82194:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   82198:	d207      	bcs.n	821aa <udd_ep_alloc+0x14a>
   8219a:	88ba      	ldrh	r2, [r7, #4]
   8219c:	2a08      	cmp	r2, #8
   8219e:	bf38      	it	cc
   821a0:	2208      	movcc	r2, #8
   821a2:	b292      	uxth	r2, r2
   821a4:	0052      	lsls	r2, r2, #1
   821a6:	3a01      	subs	r2, #1
   821a8:	e001      	b.n	821ae <udd_ep_alloc+0x14e>
   821aa:	f240 72ff 	movw	r2, #2047	; 0x7ff
   821ae:	fab2 f282 	clz	r2, r2
   821b2:	f1c2 021c 	rsb	r2, r2, #28
   821b6:	4311      	orrs	r1, r2
   821b8:	7d3a      	ldrb	r2, [r7, #20]
   821ba:	0192      	lsls	r2, r2, #6
   821bc:	b2d2      	uxtb	r2, r2
   821be:	4311      	orrs	r1, r2
   821c0:	7c7a      	ldrb	r2, [r7, #17]
   821c2:	2a00      	cmp	r2, #0
   821c4:	d004      	beq.n	821d0 <udd_ep_alloc+0x170>
   821c6:	7cfa      	ldrb	r2, [r7, #19]
   821c8:	0212      	lsls	r2, r2, #8
   821ca:	f402 7240 	and.w	r2, r2, #768	; 0x300
   821ce:	e000      	b.n	821d2 <udd_ep_alloc+0x172>
   821d0:	2200      	movs	r2, #0
   821d2:	430a      	orrs	r2, r1
   821d4:	f3c2 0209 	ubfx	r2, r2, #0, #10
   821d8:	4861      	ldr	r0, [pc, #388]	; (82360 <udd_ep_alloc+0x300>)
   821da:	79f9      	ldrb	r1, [r7, #7]
   821dc:	431a      	orrs	r2, r3
   821de:	f101 0308 	add.w	r3, r1, #8
   821e2:	015b      	lsls	r3, r3, #5
   821e4:	4403      	add	r3, r0
   821e6:	601a      	str	r2, [r3, #0]
			MaxEndpointSize, bank, (b_iso_hbw)?nb_tran:0);
	if (!Is_udd_endpoint_mapped(ep)) {
   821e8:	4a5d      	ldr	r2, [pc, #372]	; (82360 <udd_ep_alloc+0x300>)
   821ea:	79fb      	ldrb	r3, [r7, #7]
   821ec:	3308      	adds	r3, #8
   821ee:	015b      	lsls	r3, r3, #5
   821f0:	4413      	add	r3, r2
   821f2:	681b      	ldr	r3, [r3, #0]
   821f4:	2b00      	cmp	r3, #0
   821f6:	db01      	blt.n	821fc <udd_ep_alloc+0x19c>
		return false;
   821f8:	2300      	movs	r3, #0
   821fa:	e0fe      	b.n	823fa <udd_ep_alloc+0x39a>
	}
	udd_enable_endpoint(ep);
   821fc:	4a58      	ldr	r2, [pc, #352]	; (82360 <udd_ep_alloc+0x300>)
   821fe:	79fb      	ldrb	r3, [r7, #7]
   82200:	3308      	adds	r3, #8
   82202:	015b      	lsls	r3, r3, #5
   82204:	4413      	add	r3, r2
   82206:	3304      	adds	r3, #4
   82208:	2201      	movs	r2, #1
   8220a:	601a      	str	r2, [r3, #0]

	// To avoid conflict during reorganization of the DPRAM
	// the superior endpoint must be unallocated and reallocated
	ep_allocated = 0;
   8220c:	2300      	movs	r3, #0
   8220e:	82fb      	strh	r3, [r7, #22]

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   82210:	2302      	movs	r3, #2
   82212:	74bb      	strb	r3, [r7, #18]
   82214:	e039      	b.n	8228a <udd_ep_alloc+0x22a>
		if (Is_udd_endpoint_enabled(i)) {
   82216:	4a52      	ldr	r2, [pc, #328]	; (82360 <udd_ep_alloc+0x300>)
   82218:	7cbb      	ldrb	r3, [r7, #18]
   8221a:	015b      	lsls	r3, r3, #5
   8221c:	4413      	add	r3, r2
   8221e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   82222:	681b      	ldr	r3, [r3, #0]
   82224:	f003 0301 	and.w	r3, r3, #1
   82228:	2b00      	cmp	r3, #0
   8222a:	d02b      	beq.n	82284 <udd_ep_alloc+0x224>
			// Save number of bank value
			bank = udd_get_endpoint_bank(i);
   8222c:	4a4c      	ldr	r2, [pc, #304]	; (82360 <udd_ep_alloc+0x300>)
   8222e:	7cbb      	ldrb	r3, [r7, #18]
   82230:	3308      	adds	r3, #8
   82232:	015b      	lsls	r3, r3, #5
   82234:	4413      	add	r3, r2
   82236:	681b      	ldr	r3, [r3, #0]
   82238:	099b      	lsrs	r3, r3, #6
   8223a:	b2db      	uxtb	r3, r3
   8223c:	f003 0303 	and.w	r3, r3, #3
   82240:	753b      	strb	r3, [r7, #20]
			ep_allocated |=  bank << (i * 2);
   82242:	7d3a      	ldrb	r2, [r7, #20]
   82244:	7cbb      	ldrb	r3, [r7, #18]
   82246:	005b      	lsls	r3, r3, #1
   82248:	fa02 f303 	lsl.w	r3, r2, r3
   8224c:	b21a      	sxth	r2, r3
   8224e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   82252:	4313      	orrs	r3, r2
   82254:	b21b      	sxth	r3, r3
   82256:	82fb      	strh	r3, [r7, #22]
			// Disable and unallocate endpoint
			udd_disable_endpoint(i);
   82258:	4a41      	ldr	r2, [pc, #260]	; (82360 <udd_ep_alloc+0x300>)
   8225a:	7cbb      	ldrb	r3, [r7, #18]
   8225c:	015b      	lsls	r3, r3, #5
   8225e:	4413      	add	r3, r2
   82260:	f503 7384 	add.w	r3, r3, #264	; 0x108
   82264:	2201      	movs	r2, #1
   82266:	601a      	str	r2, [r3, #0]
			udd_configure_endpoint_bank(i, 0);
   82268:	4a3d      	ldr	r2, [pc, #244]	; (82360 <udd_ep_alloc+0x300>)
   8226a:	7cbb      	ldrb	r3, [r7, #18]
   8226c:	3308      	adds	r3, #8
   8226e:	015b      	lsls	r3, r3, #5
   82270:	4413      	add	r3, r2
   82272:	681a      	ldr	r2, [r3, #0]
   82274:	493a      	ldr	r1, [pc, #232]	; (82360 <udd_ep_alloc+0x300>)
   82276:	7cbb      	ldrb	r3, [r7, #18]
   82278:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   8227c:	3308      	adds	r3, #8
   8227e:	015b      	lsls	r3, r3, #5
   82280:	440b      	add	r3, r1
   82282:	601a      	str	r2, [r3, #0]
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   82284:	7cbb      	ldrb	r3, [r7, #18]
   82286:	3b01      	subs	r3, #1
   82288:	74bb      	strb	r3, [r7, #18]
   8228a:	7cba      	ldrb	r2, [r7, #18]
   8228c:	79fb      	ldrb	r3, [r7, #7]
   8228e:	429a      	cmp	r2, r3
   82290:	d2c1      	bcs.n	82216 <udd_ep_alloc+0x1b6>

		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   82292:	79fb      	ldrb	r3, [r7, #7]
   82294:	74bb      	strb	r3, [r7, #18]
   82296:	e0ab      	b.n	823f0 <udd_ep_alloc+0x390>
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   82298:	7cbb      	ldrb	r3, [r7, #18]
   8229a:	1e5a      	subs	r2, r3, #1
   8229c:	4613      	mov	r3, r2
   8229e:	005b      	lsls	r3, r3, #1
   822a0:	4413      	add	r3, r2
   822a2:	00db      	lsls	r3, r3, #3
   822a4:	4a2f      	ldr	r2, [pc, #188]	; (82364 <udd_ep_alloc+0x304>)
   822a6:	4413      	add	r3, r2
   822a8:	60fb      	str	r3, [r7, #12]
		bool b_restart = ptr_job->busy;
   822aa:	68fb      	ldr	r3, [r7, #12]
   822ac:	7d1b      	ldrb	r3, [r3, #20]
   822ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
   822b2:	b2db      	uxtb	r3, r3
   822b4:	2b00      	cmp	r3, #0
   822b6:	bf14      	ite	ne
   822b8:	2301      	movne	r3, #1
   822ba:	2300      	moveq	r3, #0
   822bc:	72fb      	strb	r3, [r7, #11]
		// Unallocated banks?
		bank = (ep_allocated >> (i * 2)) & 0x03;
   822be:	8afa      	ldrh	r2, [r7, #22]
   822c0:	7cbb      	ldrb	r3, [r7, #18]
   822c2:	005b      	lsls	r3, r3, #1
   822c4:	fa42 f303 	asr.w	r3, r2, r3
   822c8:	b2db      	uxtb	r3, r3
   822ca:	f003 0303 	and.w	r3, r3, #3
   822ce:	753b      	strb	r3, [r7, #20]
		if (bank == 0) {
   822d0:	7d3b      	ldrb	r3, [r7, #20]
   822d2:	2b00      	cmp	r3, #0
   822d4:	f000 8088 	beq.w	823e8 <udd_ep_alloc+0x388>
			continue;
		}
		// Restart running job because
		// memory window slides up and its data is lost
		ptr_job->busy = false;
   822d8:	68fa      	ldr	r2, [r7, #12]
   822da:	7d13      	ldrb	r3, [r2, #20]
   822dc:	f36f 0300 	bfc	r3, #0, #1
   822e0:	7513      	strb	r3, [r2, #20]
		// Re-allocate memory
		udd_configure_endpoint_bank(i, bank);
   822e2:	4a1f      	ldr	r2, [pc, #124]	; (82360 <udd_ep_alloc+0x300>)
   822e4:	7cbb      	ldrb	r3, [r7, #18]
   822e6:	3308      	adds	r3, #8
   822e8:	015b      	lsls	r3, r3, #5
   822ea:	4413      	add	r3, r2
   822ec:	681b      	ldr	r3, [r3, #0]
   822ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
   822f2:	7d3b      	ldrb	r3, [r7, #20]
   822f4:	019b      	lsls	r3, r3, #6
   822f6:	b2da      	uxtb	r2, r3
   822f8:	4819      	ldr	r0, [pc, #100]	; (82360 <udd_ep_alloc+0x300>)
   822fa:	7cbb      	ldrb	r3, [r7, #18]
   822fc:	430a      	orrs	r2, r1
   822fe:	3308      	adds	r3, #8
   82300:	015b      	lsls	r3, r3, #5
   82302:	4403      	add	r3, r0
   82304:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint(i);
   82306:	4a16      	ldr	r2, [pc, #88]	; (82360 <udd_ep_alloc+0x300>)
   82308:	7cbb      	ldrb	r3, [r7, #18]
   8230a:	3308      	adds	r3, #8
   8230c:	015b      	lsls	r3, r3, #5
   8230e:	4413      	add	r3, r2
   82310:	3304      	adds	r3, #4
   82312:	2201      	movs	r2, #1
   82314:	601a      	str	r2, [r3, #0]
		if (!Is_udd_endpoint_mapped(i)) {
   82316:	4a12      	ldr	r2, [pc, #72]	; (82360 <udd_ep_alloc+0x300>)
   82318:	7cbb      	ldrb	r3, [r7, #18]
   8231a:	3308      	adds	r3, #8
   8231c:	015b      	lsls	r3, r3, #5
   8231e:	4413      	add	r3, r2
   82320:	681b      	ldr	r3, [r3, #0]
   82322:	2b00      	cmp	r3, #0
   82324:	db20      	blt.n	82368 <udd_ep_alloc+0x308>
			dbg_print("ErrRealloc%d-JobE ", i);
			if (NULL == ptr_job->call_trans) {
   82326:	68fb      	ldr	r3, [r7, #12]
   82328:	681b      	ldr	r3, [r3, #0]
   8232a:	2b00      	cmp	r3, #0
   8232c:	d101      	bne.n	82332 <udd_ep_alloc+0x2d2>
				return false;
   8232e:	2300      	movs	r3, #0
   82330:	e063      	b.n	823fa <udd_ep_alloc+0x39a>
			}
			if (Is_udd_endpoint_in(i)) {
   82332:	4a0b      	ldr	r2, [pc, #44]	; (82360 <udd_ep_alloc+0x300>)
   82334:	7cbb      	ldrb	r3, [r7, #18]
   82336:	3308      	adds	r3, #8
   82338:	015b      	lsls	r3, r3, #5
   8233a:	4413      	add	r3, r2
   8233c:	681b      	ldr	r3, [r3, #0]
   8233e:	f003 0308 	and.w	r3, r3, #8
   82342:	2b00      	cmp	r3, #0
   82344:	d003      	beq.n	8234e <udd_ep_alloc+0x2ee>
				i |= USB_EP_DIR_IN;
   82346:	7cbb      	ldrb	r3, [r7, #18]
   82348:	f063 037f 	orn	r3, r3, #127	; 0x7f
   8234c:	74bb      	strb	r3, [r7, #18]
			}
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   8234e:	68fb      	ldr	r3, [r7, #12]
   82350:	681b      	ldr	r3, [r3, #0]
   82352:	68fa      	ldr	r2, [r7, #12]
   82354:	68d1      	ldr	r1, [r2, #12]
   82356:	7cba      	ldrb	r2, [r7, #18]
   82358:	2001      	movs	r0, #1
   8235a:	4798      	blx	r3
					ptr_job->buf_cnt, i);
			return false;
   8235c:	2300      	movs	r3, #0
   8235e:	e04c      	b.n	823fa <udd_ep_alloc+0x39a>
   82360:	400a4000 	.word	0x400a4000
   82364:	20000d08 	.word	0x20000d08
		}
		udd_enable_endpoint_bank_autoswitch(i);
   82368:	4a26      	ldr	r2, [pc, #152]	; (82404 <udd_ep_alloc+0x3a4>)
   8236a:	7cbb      	ldrb	r3, [r7, #18]
   8236c:	3308      	adds	r3, #8
   8236e:	015b      	lsls	r3, r3, #5
   82370:	4413      	add	r3, r2
   82372:	3304      	adds	r3, #4
   82374:	681a      	ldr	r2, [r3, #0]
   82376:	4923      	ldr	r1, [pc, #140]	; (82404 <udd_ep_alloc+0x3a4>)
   82378:	7cbb      	ldrb	r3, [r7, #18]
   8237a:	f042 0202 	orr.w	r2, r2, #2
   8237e:	3308      	adds	r3, #8
   82380:	015b      	lsls	r3, r3, #5
   82382:	440b      	add	r3, r1
   82384:	3304      	adds	r3, #4
   82386:	601a      	str	r2, [r3, #0]
		if (b_restart) {
   82388:	7afb      	ldrb	r3, [r7, #11]
   8238a:	2b00      	cmp	r3, #0
   8238c:	d02d      	beq.n	823ea <udd_ep_alloc+0x38a>
			// Re-run the job remaining part
			ptr_job->buf_cnt -= ptr_job->buf_load;
   8238e:	68fb      	ldr	r3, [r7, #12]
   82390:	68da      	ldr	r2, [r3, #12]
   82392:	68fb      	ldr	r3, [r7, #12]
   82394:	691b      	ldr	r3, [r3, #16]
   82396:	1ad2      	subs	r2, r2, r3
   82398:	68fb      	ldr	r3, [r7, #12]
   8239a:	60da      	str	r2, [r3, #12]
			b_restart = udd_ep_run(i,
					ptr_job->b_shortpacket,
   8239c:	68fb      	ldr	r3, [r7, #12]
   8239e:	7d1b      	ldrb	r3, [r3, #20]
   823a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
   823a4:	b2db      	uxtb	r3, r3
			b_restart = udd_ep_run(i,
   823a6:	2b00      	cmp	r3, #0
   823a8:	bf14      	ite	ne
   823aa:	2301      	movne	r3, #1
   823ac:	2300      	moveq	r3, #0
   823ae:	b2d9      	uxtb	r1, r3
					&ptr_job->buf[ptr_job->buf_cnt],
   823b0:	68fb      	ldr	r3, [r7, #12]
   823b2:	685a      	ldr	r2, [r3, #4]
   823b4:	68fb      	ldr	r3, [r7, #12]
   823b6:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   823b8:	18d4      	adds	r4, r2, r3
					ptr_job->buf_size
   823ba:	68fb      	ldr	r3, [r7, #12]
   823bc:	689a      	ldr	r2, [r3, #8]
						- ptr_job->buf_cnt,
   823be:	68fb      	ldr	r3, [r7, #12]
   823c0:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   823c2:	1ad2      	subs	r2, r2, r3
   823c4:	68fb      	ldr	r3, [r7, #12]
   823c6:	681b      	ldr	r3, [r3, #0]
   823c8:	7cb8      	ldrb	r0, [r7, #18]
   823ca:	9300      	str	r3, [sp, #0]
   823cc:	4613      	mov	r3, r2
   823ce:	4622      	mov	r2, r4
   823d0:	4c0d      	ldr	r4, [pc, #52]	; (82408 <udd_ep_alloc+0x3a8>)
   823d2:	47a0      	blx	r4
   823d4:	4603      	mov	r3, r0
   823d6:	72fb      	strb	r3, [r7, #11]
					ptr_job->call_trans);
			if (!b_restart) {
   823d8:	7afb      	ldrb	r3, [r7, #11]
   823da:	f083 0301 	eor.w	r3, r3, #1
   823de:	b2db      	uxtb	r3, r3
   823e0:	2b00      	cmp	r3, #0
   823e2:	d002      	beq.n	823ea <udd_ep_alloc+0x38a>
				dbg_print("ErrReRun%d ", i);
				return false;
   823e4:	2300      	movs	r3, #0
   823e6:	e008      	b.n	823fa <udd_ep_alloc+0x39a>
			continue;
   823e8:	bf00      	nop
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   823ea:	7cbb      	ldrb	r3, [r7, #18]
   823ec:	3301      	adds	r3, #1
   823ee:	74bb      	strb	r3, [r7, #18]
   823f0:	7cbb      	ldrb	r3, [r7, #18]
   823f2:	2b02      	cmp	r3, #2
   823f4:	f67f af50 	bls.w	82298 <udd_ep_alloc+0x238>
			}
		}
	}
	dbg_print("ep_alloc(%d:%08x) ", ep, UDPHS->UDPHS_EPT[ep].UDPHS_EPTCFG);
	return true;
   823f8:	2301      	movs	r3, #1
}
   823fa:	4618      	mov	r0, r3
   823fc:	371c      	adds	r7, #28
   823fe:	46bd      	mov	sp, r7
   82400:	bd90      	pop	{r4, r7, pc}
   82402:	bf00      	nop
   82404:	400a4000 	.word	0x400a4000
   82408:	00082739 	.word	0x00082739

0008240c <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
   8240c:	b580      	push	{r7, lr}
   8240e:	b084      	sub	sp, #16
   82410:	af00      	add	r7, sp, #0
   82412:	4603      	mov	r3, r0
   82414:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82416:	79fb      	ldrb	r3, [r7, #7]
   82418:	f003 030f 	and.w	r3, r3, #15
   8241c:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   8241e:	7bfb      	ldrb	r3, [r7, #15]
   82420:	2b02      	cmp	r3, #2
   82422:	d828      	bhi.n	82476 <udd_ep_free+0x6a>
		return;
	}
	udd_disable_endpoint(ep_index);
   82424:	4a16      	ldr	r2, [pc, #88]	; (82480 <udd_ep_free+0x74>)
   82426:	7bfb      	ldrb	r3, [r7, #15]
   82428:	015b      	lsls	r3, r3, #5
   8242a:	4413      	add	r3, r2
   8242c:	f503 7384 	add.w	r3, r3, #264	; 0x108
   82430:	2201      	movs	r2, #1
   82432:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint_bank(ep_index, 0);
   82434:	4a12      	ldr	r2, [pc, #72]	; (82480 <udd_ep_free+0x74>)
   82436:	7bfb      	ldrb	r3, [r7, #15]
   82438:	3308      	adds	r3, #8
   8243a:	015b      	lsls	r3, r3, #5
   8243c:	4413      	add	r3, r2
   8243e:	681a      	ldr	r2, [r3, #0]
   82440:	490f      	ldr	r1, [pc, #60]	; (82480 <udd_ep_free+0x74>)
   82442:	7bfb      	ldrb	r3, [r7, #15]
   82444:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   82448:	3308      	adds	r3, #8
   8244a:	015b      	lsls	r3, r3, #5
   8244c:	440b      	add	r3, r1
   8244e:	601a      	str	r2, [r3, #0]
	udd_ep_abort_job(ep);
   82450:	79fb      	ldrb	r3, [r7, #7]
   82452:	4618      	mov	r0, r3
   82454:	4b0b      	ldr	r3, [pc, #44]	; (82484 <udd_ep_free+0x78>)
   82456:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   82458:	7bfb      	ldrb	r3, [r7, #15]
   8245a:	1e5a      	subs	r2, r3, #1
   8245c:	490a      	ldr	r1, [pc, #40]	; (82488 <udd_ep_free+0x7c>)
   8245e:	4613      	mov	r3, r2
   82460:	005b      	lsls	r3, r3, #1
   82462:	4413      	add	r3, r2
   82464:	00db      	lsls	r3, r3, #3
   82466:	440b      	add	r3, r1
   82468:	f103 0210 	add.w	r2, r3, #16
   8246c:	7913      	ldrb	r3, [r2, #4]
   8246e:	f36f 0382 	bfc	r3, #2, #1
   82472:	7113      	strb	r3, [r2, #4]
   82474:	e000      	b.n	82478 <udd_ep_free+0x6c>
		return;
   82476:	bf00      	nop
}
   82478:	3710      	adds	r7, #16
   8247a:	46bd      	mov	sp, r7
   8247c:	bd80      	pop	{r7, pc}
   8247e:	bf00      	nop
   82480:	400a4000 	.word	0x400a4000
   82484:	00083245 	.word	0x00083245
   82488:	20000d08 	.word	0x20000d08

0008248c <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
   8248c:	b480      	push	{r7}
   8248e:	b085      	sub	sp, #20
   82490:	af00      	add	r7, sp, #0
   82492:	4603      	mov	r3, r0
   82494:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82496:	79fb      	ldrb	r3, [r7, #7]
   82498:	f003 030f 	and.w	r3, r3, #15
   8249c:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   8249e:	7bfb      	ldrb	r3, [r7, #15]
   824a0:	1e5a      	subs	r2, r3, #1
   824a2:	4613      	mov	r3, r2
   824a4:	005b      	lsls	r3, r3, #1
   824a6:	4413      	add	r3, r2
   824a8:	00db      	lsls	r3, r3, #3
   824aa:	4a10      	ldr	r2, [pc, #64]	; (824ec <udd_ep_is_halted+0x60>)
   824ac:	4413      	add	r3, r2
   824ae:	60bb      	str	r3, [r7, #8]
	return (Is_udd_endpoint_stall_requested(ep_index)
   824b0:	4a0f      	ldr	r2, [pc, #60]	; (824f0 <udd_ep_is_halted+0x64>)
   824b2:	7bfb      	ldrb	r3, [r7, #15]
   824b4:	015b      	lsls	r3, r3, #5
   824b6:	4413      	add	r3, r2
   824b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   824bc:	681b      	ldr	r3, [r3, #0]
   824be:	f003 0320 	and.w	r3, r3, #32
			|| ptr_job->stall_requested);
   824c2:	2b00      	cmp	r3, #0
   824c4:	d106      	bne.n	824d4 <udd_ep_is_halted+0x48>
   824c6:	68bb      	ldr	r3, [r7, #8]
   824c8:	7d1b      	ldrb	r3, [r3, #20]
   824ca:	f003 0304 	and.w	r3, r3, #4
   824ce:	b2db      	uxtb	r3, r3
   824d0:	2b00      	cmp	r3, #0
   824d2:	d001      	beq.n	824d8 <udd_ep_is_halted+0x4c>
   824d4:	2301      	movs	r3, #1
   824d6:	e000      	b.n	824da <udd_ep_is_halted+0x4e>
   824d8:	2300      	movs	r3, #0
   824da:	f003 0301 	and.w	r3, r3, #1
   824de:	b2db      	uxtb	r3, r3
}
   824e0:	4618      	mov	r0, r3
   824e2:	3714      	adds	r7, #20
   824e4:	46bd      	mov	sp, r7
   824e6:	bc80      	pop	{r7}
   824e8:	4770      	bx	lr
   824ea:	bf00      	nop
   824ec:	20000d08 	.word	0x20000d08
   824f0:	400a4000 	.word	0x400a4000

000824f4 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   824f4:	b480      	push	{r7}
   824f6:	b085      	sub	sp, #20
   824f8:	af00      	add	r7, sp, #0
   824fa:	4603      	mov	r3, r0
   824fc:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   824fe:	79fb      	ldrb	r3, [r7, #7]
   82500:	f003 030f 	and.w	r3, r3, #15
   82504:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   82506:	7bfb      	ldrb	r3, [r7, #15]
   82508:	2b02      	cmp	r3, #2
   8250a:	d901      	bls.n	82510 <udd_ep_set_halt+0x1c>
		return false;
   8250c:	2300      	movs	r3, #0
   8250e:	e071      	b.n	825f4 <udd_ep_set_halt+0x100>
	}

	ptr_job = &udd_ep_job[ep_index - 1];
   82510:	7bfb      	ldrb	r3, [r7, #15]
   82512:	1e5a      	subs	r2, r3, #1
   82514:	4613      	mov	r3, r2
   82516:	005b      	lsls	r3, r3, #1
   82518:	4413      	add	r3, r2
   8251a:	00db      	lsls	r3, r3, #3
   8251c:	4a38      	ldr	r2, [pc, #224]	; (82600 <udd_ep_set_halt+0x10c>)
   8251e:	4413      	add	r3, r2
   82520:	60bb      	str	r3, [r7, #8]

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   82522:	4a38      	ldr	r2, [pc, #224]	; (82604 <udd_ep_set_halt+0x110>)
   82524:	7bfb      	ldrb	r3, [r7, #15]
   82526:	015b      	lsls	r3, r3, #5
   82528:	4413      	add	r3, r2
   8252a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8252e:	681b      	ldr	r3, [r3, #0]
   82530:	f003 0320 	and.w	r3, r3, #32
   82534:	2b00      	cmp	r3, #0
   82536:	d106      	bne.n	82546 <udd_ep_set_halt+0x52>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   82538:	68bb      	ldr	r3, [r7, #8]
   8253a:	7d1b      	ldrb	r3, [r3, #20]
   8253c:	f003 0304 	and.w	r3, r3, #4
   82540:	b2db      	uxtb	r3, r3
   82542:	2b00      	cmp	r3, #0
   82544:	d001      	beq.n	8254a <udd_ep_set_halt+0x56>
		return true; // Already STALL
   82546:	2301      	movs	r3, #1
   82548:	e054      	b.n	825f4 <udd_ep_set_halt+0x100>
	}

	if (ptr_job->busy == true) {
   8254a:	68bb      	ldr	r3, [r7, #8]
   8254c:	7d1b      	ldrb	r3, [r3, #20]
   8254e:	f003 0301 	and.w	r3, r3, #1
   82552:	b2db      	uxtb	r3, r3
   82554:	2b00      	cmp	r3, #0
   82556:	d001      	beq.n	8255c <udd_ep_set_halt+0x68>
		return false; // Job on going, stall impossible
   82558:	2300      	movs	r3, #0
   8255a:	e04b      	b.n	825f4 <udd_ep_set_halt+0x100>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   8255c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82560:	2b00      	cmp	r3, #0
   82562:	da25      	bge.n	825b0 <udd_ep_set_halt+0xbc>
   82564:	4a27      	ldr	r2, [pc, #156]	; (82604 <udd_ep_set_halt+0x110>)
   82566:	7bfb      	ldrb	r3, [r7, #15]
   82568:	015b      	lsls	r3, r3, #5
   8256a:	4413      	add	r3, r2
   8256c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   82570:	681b      	ldr	r3, [r3, #0]
   82572:	0c9b      	lsrs	r3, r3, #18
   82574:	f003 0303 	and.w	r3, r3, #3
   82578:	2b00      	cmp	r3, #0
   8257a:	d019      	beq.n	825b0 <udd_ep_set_halt+0xbc>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
   8257c:	68ba      	ldr	r2, [r7, #8]
   8257e:	7d13      	ldrb	r3, [r2, #20]
   82580:	f043 0304 	orr.w	r3, r3, #4
   82584:	7513      	strb	r3, [r2, #20]
			udd_enable_bank_interrupt(ep_index);
   82586:	4a1f      	ldr	r2, [pc, #124]	; (82604 <udd_ep_set_halt+0x110>)
   82588:	7bfb      	ldrb	r3, [r7, #15]
   8258a:	3308      	adds	r3, #8
   8258c:	015b      	lsls	r3, r3, #5
   8258e:	4413      	add	r3, r2
   82590:	3304      	adds	r3, #4
   82592:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   82596:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep_index);
   82598:	4b1a      	ldr	r3, [pc, #104]	; (82604 <udd_ep_set_halt+0x110>)
   8259a:	691a      	ldr	r2, [r3, #16]
   8259c:	7bfb      	ldrb	r3, [r7, #15]
   8259e:	f44f 7180 	mov.w	r1, #256	; 0x100
   825a2:	fa01 f303 	lsl.w	r3, r1, r3
   825a6:	4917      	ldr	r1, [pc, #92]	; (82604 <udd_ep_set_halt+0x110>)
   825a8:	4313      	orrs	r3, r2
   825aa:	610b      	str	r3, [r1, #16]
			dbg_print("<reqHalt%x> ", ep);
			return true;
   825ac:	2301      	movs	r3, #1
   825ae:	e021      	b.n	825f4 <udd_ep_set_halt+0x100>
	}

	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   825b0:	4a14      	ldr	r2, [pc, #80]	; (82604 <udd_ep_set_halt+0x110>)
   825b2:	7bfb      	ldrb	r3, [r7, #15]
   825b4:	015b      	lsls	r3, r3, #5
   825b6:	4413      	add	r3, r2
   825b8:	f503 7384 	add.w	r3, r3, #264	; 0x108
   825bc:	681a      	ldr	r2, [r3, #0]
   825be:	4911      	ldr	r1, [pc, #68]	; (82604 <udd_ep_set_halt+0x110>)
   825c0:	7bfb      	ldrb	r3, [r7, #15]
   825c2:	f022 0202 	bic.w	r2, r2, #2
   825c6:	015b      	lsls	r3, r3, #5
   825c8:	440b      	add	r3, r1
   825ca:	f503 7384 	add.w	r3, r3, #264	; 0x108
   825ce:	601a      	str	r2, [r3, #0]
	udd_ack_stall(ep_index);
   825d0:	4a0c      	ldr	r2, [pc, #48]	; (82604 <udd_ep_set_halt+0x110>)
   825d2:	7bfb      	ldrb	r3, [r7, #15]
   825d4:	015b      	lsls	r3, r3, #5
   825d6:	4413      	add	r3, r2
   825d8:	f503 738c 	add.w	r3, r3, #280	; 0x118
   825dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   825e0:	601a      	str	r2, [r3, #0]
	udd_enable_stall_handshake(ep_index);
   825e2:	4a08      	ldr	r2, [pc, #32]	; (82604 <udd_ep_set_halt+0x110>)
   825e4:	7bfb      	ldrb	r3, [r7, #15]
   825e6:	015b      	lsls	r3, r3, #5
   825e8:	4413      	add	r3, r2
   825ea:	f503 738a 	add.w	r3, r3, #276	; 0x114
   825ee:	2220      	movs	r2, #32
   825f0:	601a      	str	r2, [r3, #0]
	dbg_print("<Halt%x> ", ep);
	return true;
   825f2:	2301      	movs	r3, #1
}
   825f4:	4618      	mov	r0, r3
   825f6:	3714      	adds	r7, #20
   825f8:	46bd      	mov	sp, r7
   825fa:	bc80      	pop	{r7}
   825fc:	4770      	bx	lr
   825fe:	bf00      	nop
   82600:	20000d08 	.word	0x20000d08
   82604:	400a4000 	.word	0x400a4000

00082608 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   82608:	b580      	push	{r7, lr}
   8260a:	b084      	sub	sp, #16
   8260c:	af00      	add	r7, sp, #0
   8260e:	4603      	mov	r3, r0
   82610:	71fb      	strb	r3, [r7, #7]
	bool b_stall_cleared = false;
   82612:	2300      	movs	r3, #0
   82614:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   82616:	79fb      	ldrb	r3, [r7, #7]
   82618:	f003 030f 	and.w	r3, r3, #15
   8261c:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
   8261e:	79fb      	ldrb	r3, [r7, #7]
   82620:	2b02      	cmp	r3, #2
   82622:	d901      	bls.n	82628 <udd_ep_clear_halt+0x20>
		return false;
   82624:	2300      	movs	r3, #0
   82626:	e07e      	b.n	82726 <udd_ep_clear_halt+0x11e>
	ptr_job = &udd_ep_job[ep - 1];
   82628:	79fb      	ldrb	r3, [r7, #7]
   8262a:	1e5a      	subs	r2, r3, #1
   8262c:	4613      	mov	r3, r2
   8262e:	005b      	lsls	r3, r3, #1
   82630:	4413      	add	r3, r2
   82632:	00db      	lsls	r3, r3, #3
   82634:	4a3e      	ldr	r2, [pc, #248]	; (82730 <udd_ep_clear_halt+0x128>)
   82636:	4413      	add	r3, r2
   82638:	60bb      	str	r3, [r7, #8]

	if (ptr_job->stall_requested) {
   8263a:	68bb      	ldr	r3, [r7, #8]
   8263c:	7d1b      	ldrb	r3, [r3, #20]
   8263e:	f003 0304 	and.w	r3, r3, #4
   82642:	b2db      	uxtb	r3, r3
   82644:	2b00      	cmp	r3, #0
   82646:	d01a      	beq.n	8267e <udd_ep_clear_halt+0x76>
		// Endpoint stall has been requested but not done
		// Remove stall request
		dbg_print("<unWHalt%x> ", ep);
		ptr_job->stall_requested = false;
   82648:	68ba      	ldr	r2, [r7, #8]
   8264a:	7d13      	ldrb	r3, [r2, #20]
   8264c:	f36f 0382 	bfc	r3, #2, #1
   82650:	7513      	strb	r3, [r2, #20]
		udd_disable_bank_interrupt(ep);
   82652:	4a38      	ldr	r2, [pc, #224]	; (82734 <udd_ep_clear_halt+0x12c>)
   82654:	79fb      	ldrb	r3, [r7, #7]
   82656:	015b      	lsls	r3, r3, #5
   82658:	4413      	add	r3, r2
   8265a:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8265e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   82662:	601a      	str	r2, [r3, #0]
		udd_disable_endpoint_interrupt(ep);
   82664:	4b33      	ldr	r3, [pc, #204]	; (82734 <udd_ep_clear_halt+0x12c>)
   82666:	691a      	ldr	r2, [r3, #16]
   82668:	79fb      	ldrb	r3, [r7, #7]
   8266a:	f44f 7180 	mov.w	r1, #256	; 0x100
   8266e:	fa01 f303 	lsl.w	r3, r1, r3
   82672:	43db      	mvns	r3, r3
   82674:	492f      	ldr	r1, [pc, #188]	; (82734 <udd_ep_clear_halt+0x12c>)
   82676:	4013      	ands	r3, r2
   82678:	610b      	str	r3, [r1, #16]
		b_stall_cleared = true;
   8267a:	2301      	movs	r3, #1
   8267c:	73fb      	strb	r3, [r7, #15]
	}
	if (Is_udd_endpoint_stall_requested(ep)) {
   8267e:	4a2d      	ldr	r2, [pc, #180]	; (82734 <udd_ep_clear_halt+0x12c>)
   82680:	79fb      	ldrb	r3, [r7, #7]
   82682:	015b      	lsls	r3, r3, #5
   82684:	4413      	add	r3, r2
   82686:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8268a:	681b      	ldr	r3, [r3, #0]
   8268c:	f003 0320 	and.w	r3, r3, #32
   82690:	2b00      	cmp	r3, #0
   82692:	d035      	beq.n	82700 <udd_ep_clear_halt+0xf8>
		dbg_print("<unHalt%x> ", ep);
		if (Is_udd_stall(ep)) {
   82694:	4a27      	ldr	r2, [pc, #156]	; (82734 <udd_ep_clear_halt+0x12c>)
   82696:	79fb      	ldrb	r3, [r7, #7]
   82698:	015b      	lsls	r3, r3, #5
   8269a:	4413      	add	r3, r2
   8269c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   826a0:	681b      	ldr	r3, [r3, #0]
   826a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   826a6:	2b00      	cmp	r3, #0
   826a8:	d010      	beq.n	826cc <udd_ep_clear_halt+0xc4>
			udd_ack_stall(ep);
   826aa:	4a22      	ldr	r2, [pc, #136]	; (82734 <udd_ep_clear_halt+0x12c>)
   826ac:	79fb      	ldrb	r3, [r7, #7]
   826ae:	015b      	lsls	r3, r3, #5
   826b0:	4413      	add	r3, r2
   826b2:	f503 738c 	add.w	r3, r3, #280	; 0x118
   826b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   826ba:	601a      	str	r2, [r3, #0]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
   826bc:	4a1d      	ldr	r2, [pc, #116]	; (82734 <udd_ep_clear_halt+0x12c>)
   826be:	79fb      	ldrb	r3, [r7, #7]
   826c0:	015b      	lsls	r3, r3, #5
   826c2:	4413      	add	r3, r2
   826c4:	f503 738c 	add.w	r3, r3, #280	; 0x118
   826c8:	2240      	movs	r2, #64	; 0x40
   826ca:	601a      	str	r2, [r3, #0]
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
   826cc:	4a19      	ldr	r2, [pc, #100]	; (82734 <udd_ep_clear_halt+0x12c>)
   826ce:	79fb      	ldrb	r3, [r7, #7]
   826d0:	015b      	lsls	r3, r3, #5
   826d2:	4413      	add	r3, r2
   826d4:	f503 738c 	add.w	r3, r3, #280	; 0x118
   826d8:	2220      	movs	r2, #32
   826da:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_bank_autoswitch(ep);
   826dc:	4a15      	ldr	r2, [pc, #84]	; (82734 <udd_ep_clear_halt+0x12c>)
   826de:	79fb      	ldrb	r3, [r7, #7]
   826e0:	3308      	adds	r3, #8
   826e2:	015b      	lsls	r3, r3, #5
   826e4:	4413      	add	r3, r2
   826e6:	3304      	adds	r3, #4
   826e8:	681a      	ldr	r2, [r3, #0]
   826ea:	4912      	ldr	r1, [pc, #72]	; (82734 <udd_ep_clear_halt+0x12c>)
   826ec:	79fb      	ldrb	r3, [r7, #7]
   826ee:	f042 0202 	orr.w	r2, r2, #2
   826f2:	3308      	adds	r3, #8
   826f4:	015b      	lsls	r3, r3, #5
   826f6:	440b      	add	r3, r1
   826f8:	3304      	adds	r3, #4
   826fa:	601a      	str	r2, [r3, #0]
		b_stall_cleared = true;
   826fc:	2301      	movs	r3, #1
   826fe:	73fb      	strb	r3, [r7, #15]
	}
	if (b_stall_cleared) {
   82700:	7bfb      	ldrb	r3, [r7, #15]
   82702:	2b00      	cmp	r3, #0
   82704:	d00e      	beq.n	82724 <udd_ep_clear_halt+0x11c>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   82706:	68bb      	ldr	r3, [r7, #8]
   82708:	7d1b      	ldrb	r3, [r3, #20]
   8270a:	f003 0301 	and.w	r3, r3, #1
   8270e:	b2db      	uxtb	r3, r3
   82710:	2b00      	cmp	r3, #0
   82712:	d007      	beq.n	82724 <udd_ep_clear_halt+0x11c>
			ptr_job->busy = false;
   82714:	68ba      	ldr	r2, [r7, #8]
   82716:	7d13      	ldrb	r3, [r2, #20]
   82718:	f36f 0300 	bfc	r3, #0, #1
   8271c:	7513      	strb	r3, [r2, #20]
			ptr_job->call_nohalt();
   8271e:	68bb      	ldr	r3, [r7, #8]
   82720:	681b      	ldr	r3, [r3, #0]
   82722:	4798      	blx	r3
		}
	}
	return true;
   82724:	2301      	movs	r3, #1
}
   82726:	4618      	mov	r0, r3
   82728:	3710      	adds	r7, #16
   8272a:	46bd      	mov	sp, r7
   8272c:	bd80      	pop	{r7, pc}
   8272e:	bf00      	nop
   82730:	20000d08 	.word	0x20000d08
   82734:	400a4000 	.word	0x400a4000

00082738 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   82738:	b580      	push	{r7, lr}
   8273a:	b086      	sub	sp, #24
   8273c:	af00      	add	r7, sp, #0
   8273e:	60ba      	str	r2, [r7, #8]
   82740:	607b      	str	r3, [r7, #4]
   82742:	4603      	mov	r3, r0
   82744:	73fb      	strb	r3, [r7, #15]
   82746:	460b      	mov	r3, r1
   82748:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   8274a:	7bfb      	ldrb	r3, [r7, #15]
   8274c:	f003 030f 	and.w	r3, r3, #15
   82750:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
   82752:	7bfb      	ldrb	r3, [r7, #15]
   82754:	2b02      	cmp	r3, #2
   82756:	d901      	bls.n	8275c <udd_ep_run+0x24>
		return false;
   82758:	2300      	movs	r3, #0
   8275a:	e063      	b.n	82824 <udd_ep_run+0xec>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   8275c:	7bfb      	ldrb	r3, [r7, #15]
   8275e:	1e5a      	subs	r2, r3, #1
   82760:	4613      	mov	r3, r2
   82762:	005b      	lsls	r3, r3, #1
   82764:	4413      	add	r3, r2
   82766:	00db      	lsls	r3, r3, #3
   82768:	4a30      	ldr	r2, [pc, #192]	; (8282c <udd_ep_run+0xf4>)
   8276a:	4413      	add	r3, r2
   8276c:	617b      	str	r3, [r7, #20]

	if ((!Is_udd_endpoint_enabled(ep))
   8276e:	4a30      	ldr	r2, [pc, #192]	; (82830 <udd_ep_run+0xf8>)
   82770:	7bfb      	ldrb	r3, [r7, #15]
   82772:	015b      	lsls	r3, r3, #5
   82774:	4413      	add	r3, r2
   82776:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   8277a:	681b      	ldr	r3, [r3, #0]
   8277c:	f003 0301 	and.w	r3, r3, #1
   82780:	2b00      	cmp	r3, #0
   82782:	d011      	beq.n	827a8 <udd_ep_run+0x70>
			|| Is_udd_endpoint_stall_requested(ep)
   82784:	4a2a      	ldr	r2, [pc, #168]	; (82830 <udd_ep_run+0xf8>)
   82786:	7bfb      	ldrb	r3, [r7, #15]
   82788:	015b      	lsls	r3, r3, #5
   8278a:	4413      	add	r3, r2
   8278c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   82790:	681b      	ldr	r3, [r3, #0]
   82792:	f003 0320 	and.w	r3, r3, #32
   82796:	2b00      	cmp	r3, #0
   82798:	d106      	bne.n	827a8 <udd_ep_run+0x70>
			|| ptr_job->stall_requested) {
   8279a:	697b      	ldr	r3, [r7, #20]
   8279c:	7d1b      	ldrb	r3, [r3, #20]
   8279e:	f003 0304 	and.w	r3, r3, #4
   827a2:	b2db      	uxtb	r3, r3
   827a4:	2b00      	cmp	r3, #0
   827a6:	d001      	beq.n	827ac <udd_ep_run+0x74>
		return false; // Endpoint is halted
   827a8:	2300      	movs	r3, #0
   827aa:	e03b      	b.n	82824 <udd_ep_run+0xec>
	}

	flags = cpu_irq_save();
   827ac:	4b21      	ldr	r3, [pc, #132]	; (82834 <udd_ep_run+0xfc>)
   827ae:	4798      	blx	r3
   827b0:	6138      	str	r0, [r7, #16]
	if (ptr_job->busy == true) {
   827b2:	697b      	ldr	r3, [r7, #20]
   827b4:	7d1b      	ldrb	r3, [r3, #20]
   827b6:	f003 0301 	and.w	r3, r3, #1
   827ba:	b2db      	uxtb	r3, r3
   827bc:	2b00      	cmp	r3, #0
   827be:	d004      	beq.n	827ca <udd_ep_run+0x92>
		cpu_irq_restore(flags);
   827c0:	6938      	ldr	r0, [r7, #16]
   827c2:	4b1d      	ldr	r3, [pc, #116]	; (82838 <udd_ep_run+0x100>)
   827c4:	4798      	blx	r3
		return false; // Job already on going
   827c6:	2300      	movs	r3, #0
   827c8:	e02c      	b.n	82824 <udd_ep_run+0xec>
	}
	ptr_job->busy = true;
   827ca:	697a      	ldr	r2, [r7, #20]
   827cc:	7d13      	ldrb	r3, [r2, #20]
   827ce:	f043 0301 	orr.w	r3, r3, #1
   827d2:	7513      	strb	r3, [r2, #20]
	cpu_irq_restore(flags);
   827d4:	6938      	ldr	r0, [r7, #16]
   827d6:	4b18      	ldr	r3, [pc, #96]	; (82838 <udd_ep_run+0x100>)
   827d8:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   827da:	697b      	ldr	r3, [r7, #20]
   827dc:	68ba      	ldr	r2, [r7, #8]
   827de:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
   827e0:	697b      	ldr	r3, [r7, #20]
   827e2:	687a      	ldr	r2, [r7, #4]
   827e4:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
   827e6:	697b      	ldr	r3, [r7, #20]
   827e8:	2200      	movs	r2, #0
   827ea:	60da      	str	r2, [r3, #12]
	ptr_job->buf_load = 0;
   827ec:	697b      	ldr	r3, [r7, #20]
   827ee:	2200      	movs	r2, #0
   827f0:	611a      	str	r2, [r3, #16]
	ptr_job->call_trans = callback;
   827f2:	697b      	ldr	r3, [r7, #20]
   827f4:	6a3a      	ldr	r2, [r7, #32]
   827f6:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   827f8:	7bbb      	ldrb	r3, [r7, #14]
   827fa:	2b00      	cmp	r3, #0
   827fc:	d102      	bne.n	82804 <udd_ep_run+0xcc>
   827fe:	687b      	ldr	r3, [r7, #4]
   82800:	2b00      	cmp	r3, #0
   82802:	d101      	bne.n	82808 <udd_ep_run+0xd0>
   82804:	2301      	movs	r3, #1
   82806:	e000      	b.n	8280a <udd_ep_run+0xd2>
   82808:	2300      	movs	r3, #0
   8280a:	f003 0301 	and.w	r3, r3, #1
   8280e:	b2d9      	uxtb	r1, r3
   82810:	697a      	ldr	r2, [r7, #20]
   82812:	7d13      	ldrb	r3, [r2, #20]
   82814:	f361 0341 	bfi	r3, r1, #1, #1
   82818:	7513      	strb	r3, [r2, #20]

	// Request first DMA transfer
	//dbg_print("runDMA%d\n\r", ep);
	udd_ep_trans_done(ep);
   8281a:	7bfb      	ldrb	r3, [r7, #15]
   8281c:	4618      	mov	r0, r3
   8281e:	4b07      	ldr	r3, [pc, #28]	; (8283c <udd_ep_run+0x104>)
   82820:	4798      	blx	r3
	return true;
   82822:	2301      	movs	r3, #1
}
   82824:	4618      	mov	r0, r3
   82826:	3718      	adds	r7, #24
   82828:	46bd      	mov	sp, r7
   8282a:	bd80      	pop	{r7, pc}
   8282c:	20000d08 	.word	0x20000d08
   82830:	400a4000 	.word	0x400a4000
   82834:	00081b09 	.word	0x00081b09
   82838:	00081b61 	.word	0x00081b61
   8283c:	000832f1 	.word	0x000832f1

00082840 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
   82840:	b580      	push	{r7, lr}
   82842:	b084      	sub	sp, #16
   82844:	af00      	add	r7, sp, #0
   82846:	4603      	mov	r3, r0
   82848:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8284a:	79fb      	ldrb	r3, [r7, #7]
   8284c:	f003 030f 	and.w	r3, r3, #15
   82850:	73fb      	strb	r3, [r7, #15]
	// Stop DMA transfer
	udd_endpoint_dma_set_control(ep_index, 0);
   82852:	7bfb      	ldrb	r3, [r7, #15]
   82854:	011a      	lsls	r2, r3, #4
   82856:	4b19      	ldr	r3, [pc, #100]	; (828bc <udd_ep_abort+0x7c>)
   82858:	4413      	add	r3, r2
   8285a:	2200      	movs	r2, #0
   8285c:	609a      	str	r2, [r3, #8]
	// Kill banks for IN
	if (ep & USB_EP_DIR_IN) {
   8285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82862:	2b00      	cmp	r3, #0
   82864:	da21      	bge.n	828aa <udd_ep_abort+0x6a>
		for(;udd_nb_busy_bank(ep_index);) {
   82866:	e014      	b.n	82892 <udd_ep_abort+0x52>
			udd_kill_last_in_bank(ep_index);
   82868:	4a15      	ldr	r2, [pc, #84]	; (828c0 <udd_ep_abort+0x80>)
   8286a:	7bfb      	ldrb	r3, [r7, #15]
   8286c:	015b      	lsls	r3, r3, #5
   8286e:	4413      	add	r3, r2
   82870:	f503 738a 	add.w	r3, r3, #276	; 0x114
   82874:	f44f 7200 	mov.w	r2, #512	; 0x200
   82878:	601a      	str	r2, [r3, #0]
			while(Is_udd_kill_last(ep_index));
   8287a:	bf00      	nop
   8287c:	4a10      	ldr	r2, [pc, #64]	; (828c0 <udd_ep_abort+0x80>)
   8287e:	7bfb      	ldrb	r3, [r7, #15]
   82880:	015b      	lsls	r3, r3, #5
   82882:	4413      	add	r3, r2
   82884:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   82888:	681b      	ldr	r3, [r3, #0]
   8288a:	f403 7300 	and.w	r3, r3, #512	; 0x200
   8288e:	2b00      	cmp	r3, #0
   82890:	d1f4      	bne.n	8287c <udd_ep_abort+0x3c>
		for(;udd_nb_busy_bank(ep_index);) {
   82892:	4a0b      	ldr	r2, [pc, #44]	; (828c0 <udd_ep_abort+0x80>)
   82894:	7bfb      	ldrb	r3, [r7, #15]
   82896:	015b      	lsls	r3, r3, #5
   82898:	4413      	add	r3, r2
   8289a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8289e:	681b      	ldr	r3, [r3, #0]
   828a0:	0c9b      	lsrs	r3, r3, #18
   828a2:	f003 0303 	and.w	r3, r3, #3
   828a6:	2b00      	cmp	r3, #0
   828a8:	d1de      	bne.n	82868 <udd_ep_abort+0x28>
		}
	}
	udd_ep_abort_job(ep);
   828aa:	79fb      	ldrb	r3, [r7, #7]
   828ac:	4618      	mov	r0, r3
   828ae:	4b05      	ldr	r3, [pc, #20]	; (828c4 <udd_ep_abort+0x84>)
   828b0:	4798      	blx	r3
}
   828b2:	bf00      	nop
   828b4:	3710      	adds	r7, #16
   828b6:	46bd      	mov	sp, r7
   828b8:	bd80      	pop	{r7, pc}
   828ba:	bf00      	nop
   828bc:	400a4300 	.word	0x400a4300
   828c0:	400a4000 	.word	0x400a4000
   828c4:	00083245 	.word	0x00083245

000828c8 <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
   828c8:	b480      	push	{r7}
   828ca:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   828cc:	4b0a      	ldr	r3, [pc, #40]	; (828f8 <udd_test_mode_j+0x30>)
   828ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   828d2:	f023 0303 	bic.w	r3, r3, #3
   828d6:	4a08      	ldr	r2, [pc, #32]	; (828f8 <udd_test_mode_j+0x30>)
   828d8:	f043 0302 	orr.w	r3, r3, #2
   828dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   828e0:	4b05      	ldr	r3, [pc, #20]	; (828f8 <udd_test_mode_j+0x30>)
   828e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   828e6:	4a04      	ldr	r2, [pc, #16]	; (828f8 <udd_test_mode_j+0x30>)
   828e8:	f043 0304 	orr.w	r3, r3, #4
   828ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   828f0:	bf00      	nop
   828f2:	46bd      	mov	sp, r7
   828f4:	bc80      	pop	{r7}
   828f6:	4770      	bx	lr
   828f8:	400a4000 	.word	0x400a4000

000828fc <udd_test_mode_k>:


void udd_test_mode_k(void)
{
   828fc:	b480      	push	{r7}
   828fe:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   82900:	4b0a      	ldr	r3, [pc, #40]	; (8292c <udd_test_mode_k+0x30>)
   82902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   82906:	f023 0303 	bic.w	r3, r3, #3
   8290a:	4a08      	ldr	r2, [pc, #32]	; (8292c <udd_test_mode_k+0x30>)
   8290c:	f043 0302 	orr.w	r3, r3, #2
   82910:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   82914:	4b05      	ldr	r3, [pc, #20]	; (8292c <udd_test_mode_k+0x30>)
   82916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8291a:	4a04      	ldr	r2, [pc, #16]	; (8292c <udd_test_mode_k+0x30>)
   8291c:	f043 0308 	orr.w	r3, r3, #8
   82920:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   82924:	bf00      	nop
   82926:	46bd      	mov	sp, r7
   82928:	bc80      	pop	{r7}
   8292a:	4770      	bx	lr
   8292c:	400a4000 	.word	0x400a4000

00082930 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
   82930:	b480      	push	{r7}
   82932:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   82934:	4b06      	ldr	r3, [pc, #24]	; (82950 <udd_test_mode_se0_nak+0x20>)
   82936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8293a:	f023 0303 	bic.w	r3, r3, #3
   8293e:	4a04      	ldr	r2, [pc, #16]	; (82950 <udd_test_mode_se0_nak+0x20>)
   82940:	f043 0302 	orr.w	r3, r3, #2
   82944:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   82948:	bf00      	nop
   8294a:	46bd      	mov	sp, r7
   8294c:	bc80      	pop	{r7}
   8294e:	4770      	bx	lr
   82950:	400a4000 	.word	0x400a4000

00082954 <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
   82954:	b4b0      	push	{r4, r5, r7}
   82956:	b093      	sub	sp, #76	; 0x4c
   82958:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   8295a:	4b2e      	ldr	r3, [pc, #184]	; (82a14 <udd_test_mode_packet+0xc0>)
   8295c:	1d3c      	adds	r4, r7, #4
   8295e:	461d      	mov	r5, r3
   82960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8296a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8296c:	e895 0003 	ldmia.w	r5, {r0, r1}
   82970:	6020      	str	r0, [r4, #0]
   82972:	3404      	adds	r4, #4
   82974:	7021      	strb	r1, [r4, #0]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   82976:	4b28      	ldr	r3, [pc, #160]	; (82a18 <udd_test_mode_packet+0xc4>)
   82978:	2201      	movs	r2, #1
   8297a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   8297e:	4b26      	ldr	r3, [pc, #152]	; (82a18 <udd_test_mode_packet+0xc4>)
   82980:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   82984:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   82988:	f023 0303 	bic.w	r3, r3, #3
   8298c:	4a22      	ldr	r2, [pc, #136]	; (82a18 <udd_test_mode_packet+0xc4>)
   8298e:	f043 036b 	orr.w	r3, r3, #107	; 0x6b
   82992:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_EP_TYPE_BULK, // Type: bulk
			1, // dir: IN
			64, //Size
			1, // Bank Number
			0); // NB Trans (not used for bulk ept)
	udd_enable_endpoint(0);
   82996:	4b20      	ldr	r3, [pc, #128]	; (82a18 <udd_test_mode_packet+0xc4>)
   82998:	2201      	movs	r2, #1
   8299a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	udd_enable_hs_test_mode();
   8299e:	4b1e      	ldr	r3, [pc, #120]	; (82a18 <udd_test_mode_packet+0xc4>)
   829a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   829a4:	f023 0303 	bic.w	r3, r3, #3
   829a8:	4a1b      	ldr	r2, [pc, #108]	; (82a18 <udd_test_mode_packet+0xc4>)
   829aa:	f043 0302 	orr.w	r3, r3, #2
   829ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   829b2:	4b19      	ldr	r3, [pc, #100]	; (82a18 <udd_test_mode_packet+0xc4>)
   829b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   829b8:	4a17      	ldr	r2, [pc, #92]	; (82a18 <udd_test_mode_packet+0xc4>)
   829ba:	f043 0310 	orr.w	r3, r3, #16
   829be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   829c2:	4b16      	ldr	r3, [pc, #88]	; (82a1c <udd_test_mode_packet+0xc8>)
   829c4:	643b      	str	r3, [r7, #64]	; 0x40
	ptr_src = test_packet;
   829c6:	1d3b      	adds	r3, r7, #4
   829c8:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (i = 0; i < sizeof(test_packet); i++) {
   829ca:	2300      	movs	r3, #0
   829cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   829d0:	e00c      	b.n	829ec <udd_test_mode_packet+0x98>
		*ptr_dest++ = *ptr_src++;
   829d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   829d4:	1c53      	adds	r3, r2, #1
   829d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   829d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   829da:	1c59      	adds	r1, r3, #1
   829dc:	6439      	str	r1, [r7, #64]	; 0x40
   829de:	7812      	ldrb	r2, [r2, #0]
   829e0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   829e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   829e6:	3301      	adds	r3, #1
   829e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   829ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   829f0:	2b34      	cmp	r3, #52	; 0x34
   829f2:	d9ee      	bls.n	829d2 <udd_test_mode_packet+0x7e>
	}
	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   829f4:	4b08      	ldr	r3, [pc, #32]	; (82a18 <udd_test_mode_packet+0xc4>)
   829f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   829fa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   829fe:	4b06      	ldr	r3, [pc, #24]	; (82a18 <udd_test_mode_packet+0xc4>)
   82a00:	f44f 6200 	mov.w	r2, #2048	; 0x800
   82a04:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   82a08:	bf00      	nop
   82a0a:	374c      	adds	r7, #76	; 0x4c
   82a0c:	46bd      	mov	sp, r7
   82a0e:	bcb0      	pop	{r4, r5, r7}
   82a10:	4770      	bx	lr
   82a12:	bf00      	nop
   82a14:	00085c5c 	.word	0x00085c5c
   82a18:	400a4000 	.word	0x400a4000
   82a1c:	20180000 	.word	0x20180000

00082a20 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
   82a20:	b580      	push	{r7, lr}
   82a22:	b082      	sub	sp, #8
   82a24:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   82a26:	4b1b      	ldr	r3, [pc, #108]	; (82a94 <udd_reset_ep_ctrl+0x74>)
   82a28:	681b      	ldr	r3, [r3, #0]
   82a2a:	4a1a      	ldr	r2, [pc, #104]	; (82a94 <udd_reset_ep_ctrl+0x74>)
   82a2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82a30:	6013      	str	r3, [r2, #0]
	udd_enable_address();
   82a32:	4b18      	ldr	r3, [pc, #96]	; (82a94 <udd_reset_ep_ctrl+0x74>)
   82a34:	681b      	ldr	r3, [r3, #0]
   82a36:	4a17      	ldr	r2, [pc, #92]	; (82a94 <udd_reset_ep_ctrl+0x74>)
   82a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82a3c:	6013      	str	r3, [r2, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   82a3e:	4b15      	ldr	r3, [pc, #84]	; (82a94 <udd_reset_ep_ctrl+0x74>)
   82a40:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   82a44:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   82a48:	f023 0303 	bic.w	r3, r3, #3
   82a4c:	4a11      	ldr	r2, [pc, #68]	; (82a94 <udd_reset_ep_ctrl+0x74>)
   82a4e:	f043 0343 	orr.w	r3, r3, #67	; 0x43
   82a52:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_DEVICE_EP_CTRL_SIZE,
			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
			0);

	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
	udd_enable_endpoint(0);
   82a56:	4b0f      	ldr	r3, [pc, #60]	; (82a94 <udd_reset_ep_ctrl+0x74>)
   82a58:	2201      	movs	r2, #1
   82a5a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	flags = cpu_irq_save();
   82a5e:	4b0e      	ldr	r3, [pc, #56]	; (82a98 <udd_reset_ep_ctrl+0x78>)
   82a60:	4798      	blx	r3
   82a62:	6078      	str	r0, [r7, #4]
	udd_enable_setup_received_interrupt(0);
   82a64:	4b0b      	ldr	r3, [pc, #44]	; (82a94 <udd_reset_ep_ctrl+0x74>)
   82a66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82a6a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   82a6e:	4b09      	ldr	r3, [pc, #36]	; (82a94 <udd_reset_ep_ctrl+0x74>)
   82a70:	f44f 7200 	mov.w	r2, #512	; 0x200
   82a74:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   82a78:	4b06      	ldr	r3, [pc, #24]	; (82a94 <udd_reset_ep_ctrl+0x74>)
   82a7a:	691b      	ldr	r3, [r3, #16]
   82a7c:	4a05      	ldr	r2, [pc, #20]	; (82a94 <udd_reset_ep_ctrl+0x74>)
   82a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   82a82:	6113      	str	r3, [r2, #16]
	cpu_irq_restore(flags);
   82a84:	6878      	ldr	r0, [r7, #4]
   82a86:	4b05      	ldr	r3, [pc, #20]	; (82a9c <udd_reset_ep_ctrl+0x7c>)
   82a88:	4798      	blx	r3
}
   82a8a:	bf00      	nop
   82a8c:	3708      	adds	r7, #8
   82a8e:	46bd      	mov	sp, r7
   82a90:	bd80      	pop	{r7, pc}
   82a92:	bf00      	nop
   82a94:	400a4000 	.word	0x400a4000
   82a98:	00081b09 	.word	0x00081b09
   82a9c:	00081b61 	.word	0x00081b61

00082aa0 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
   82aa0:	b580      	push	{r7, lr}
   82aa2:	b082      	sub	sp, #8
   82aa4:	af00      	add	r7, sp, #0
	irqflags_t flags;

	dbg_print("ctlInit ");

	flags = cpu_irq_save();
   82aa6:	4b10      	ldr	r3, [pc, #64]	; (82ae8 <udd_ctrl_init+0x48>)
   82aa8:	4798      	blx	r3
   82aaa:	6078      	str	r0, [r7, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   82aac:	4b0f      	ldr	r3, [pc, #60]	; (82aec <udd_ctrl_init+0x4c>)
   82aae:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82ab2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   82ab6:	6878      	ldr	r0, [r7, #4]
   82ab8:	4b0d      	ldr	r3, [pc, #52]	; (82af0 <udd_ctrl_init+0x50>)
   82aba:	4798      	blx	r3

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   82abc:	4b0b      	ldr	r3, [pc, #44]	; (82aec <udd_ctrl_init+0x4c>)
   82abe:	f44f 7200 	mov.w	r2, #512	; 0x200
   82ac2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   82ac6:	4b0b      	ldr	r3, [pc, #44]	; (82af4 <udd_ctrl_init+0x54>)
   82ac8:	2200      	movs	r2, #0
   82aca:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   82acc:	4b09      	ldr	r3, [pc, #36]	; (82af4 <udd_ctrl_init+0x54>)
   82ace:	2200      	movs	r2, #0
   82ad0:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
   82ad2:	4b08      	ldr	r3, [pc, #32]	; (82af4 <udd_ctrl_init+0x54>)
   82ad4:	2200      	movs	r2, #0
   82ad6:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   82ad8:	4b07      	ldr	r3, [pc, #28]	; (82af8 <udd_ctrl_init+0x58>)
   82ada:	2200      	movs	r2, #0
   82adc:	701a      	strb	r2, [r3, #0]
}
   82ade:	bf00      	nop
   82ae0:	3708      	adds	r7, #8
   82ae2:	46bd      	mov	sp, r7
   82ae4:	bd80      	pop	{r7, pc}
   82ae6:	bf00      	nop
   82ae8:	00081b09 	.word	0x00081b09
   82aec:	400a4000 	.word	0x400a4000
   82af0:	00081b61 	.word	0x00081b61
   82af4:	20000d58 	.word	0x20000d58
   82af8:	20000d01 	.word	0x20000d01

00082afc <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
   82afc:	b580      	push	{r7, lr}
   82afe:	b084      	sub	sp, #16
   82b00:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   82b02:	4b40      	ldr	r3, [pc, #256]	; (82c04 <udd_ctrl_setup_received+0x108>)
   82b04:	781b      	ldrb	r3, [r3, #0]
   82b06:	2b00      	cmp	r3, #0
   82b08:	d003      	beq.n	82b12 <udd_ctrl_setup_received+0x16>
		dbg_print("sErr ");
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
   82b0a:	4b3f      	ldr	r3, [pc, #252]	; (82c08 <udd_ctrl_setup_received+0x10c>)
   82b0c:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   82b0e:	4b3f      	ldr	r3, [pc, #252]	; (82c0c <udd_ctrl_setup_received+0x110>)
   82b10:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   82b12:	4b3f      	ldr	r3, [pc, #252]	; (82c10 <udd_ctrl_setup_received+0x114>)
   82b14:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   82b18:	0d1b      	lsrs	r3, r3, #20
   82b1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
   82b1e:	2b08      	cmp	r3, #8
   82b20:	d007      	beq.n	82b32 <udd_ctrl_setup_received+0x36>
		dbg_print("cntErr ");
		udd_ctrl_stall_data();
   82b22:	4b3c      	ldr	r3, [pc, #240]	; (82c14 <udd_ctrl_setup_received+0x118>)
   82b24:	4798      	blx	r3
		udd_ack_setup_received(0);
   82b26:	4b3a      	ldr	r3, [pc, #232]	; (82c10 <udd_ctrl_setup_received+0x114>)
   82b28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82b2c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   82b30:	e064      	b.n	82bfc <udd_ctrl_setup_received+0x100>
	}

	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   82b32:	4b39      	ldr	r3, [pc, #228]	; (82c18 <udd_ctrl_setup_received+0x11c>)
   82b34:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
   82b36:	2300      	movs	r3, #0
   82b38:	73fb      	strb	r3, [r7, #15]
   82b3a:	e00a      	b.n	82b52 <udd_ctrl_setup_received+0x56>
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   82b3c:	68bb      	ldr	r3, [r7, #8]
   82b3e:	1c5a      	adds	r2, r3, #1
   82b40:	60ba      	str	r2, [r7, #8]
   82b42:	7bfa      	ldrb	r2, [r7, #15]
   82b44:	4935      	ldr	r1, [pc, #212]	; (82c1c <udd_ctrl_setup_received+0x120>)
   82b46:	440a      	add	r2, r1
   82b48:	781b      	ldrb	r3, [r3, #0]
   82b4a:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < 8; i++) {
   82b4c:	7bfb      	ldrb	r3, [r7, #15]
   82b4e:	3301      	adds	r3, #1
   82b50:	73fb      	strb	r3, [r7, #15]
   82b52:	7bfb      	ldrb	r3, [r7, #15]
   82b54:	2b07      	cmp	r3, #7
   82b56:	d9f1      	bls.n	82b3c <udd_ctrl_setup_received+0x40>
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
   82b58:	4b30      	ldr	r3, [pc, #192]	; (82c1c <udd_ctrl_setup_received+0x120>)
   82b5a:	885a      	ldrh	r2, [r3, #2]
   82b5c:	4b2f      	ldr	r3, [pc, #188]	; (82c1c <udd_ctrl_setup_received+0x120>)
   82b5e:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
   82b60:	4b2e      	ldr	r3, [pc, #184]	; (82c1c <udd_ctrl_setup_received+0x120>)
   82b62:	889a      	ldrh	r2, [r3, #4]
   82b64:	4b2d      	ldr	r3, [pc, #180]	; (82c1c <udd_ctrl_setup_received+0x120>)
   82b66:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
   82b68:	4b2c      	ldr	r3, [pc, #176]	; (82c1c <udd_ctrl_setup_received+0x120>)
   82b6a:	88da      	ldrh	r2, [r3, #6]
   82b6c:	4b2b      	ldr	r3, [pc, #172]	; (82c1c <udd_ctrl_setup_received+0x120>)
   82b6e:	80da      	strh	r2, [r3, #6]
			udd_g_ctrlreq.req.bRequest, udd_g_ctrlreq.req.bmRequestType,
			udd_g_ctrlreq.req.wValue, udd_g_ctrlreq.req.wIndex,
			udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   82b70:	4b2b      	ldr	r3, [pc, #172]	; (82c20 <udd_ctrl_setup_received+0x124>)
   82b72:	4798      	blx	r3
   82b74:	4603      	mov	r3, r0
   82b76:	f083 0301 	eor.w	r3, r3, #1
   82b7a:	b2db      	uxtb	r3, r3
   82b7c:	2b00      	cmp	r3, #0
   82b7e:	d007      	beq.n	82b90 <udd_ctrl_setup_received+0x94>
		// Setup request unknown then stall it
		dbg_print("ProcErr ");
		udd_ctrl_stall_data();
   82b80:	4b24      	ldr	r3, [pc, #144]	; (82c14 <udd_ctrl_setup_received+0x118>)
   82b82:	4798      	blx	r3
		udd_ack_setup_received(0);
   82b84:	4b22      	ldr	r3, [pc, #136]	; (82c10 <udd_ctrl_setup_received+0x114>)
   82b86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82b8a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   82b8e:	e035      	b.n	82bfc <udd_ctrl_setup_received+0x100>
	}
	udd_ack_setup_received(0);
   82b90:	4b1f      	ldr	r3, [pc, #124]	; (82c10 <udd_ctrl_setup_received+0x114>)
   82b92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   82b96:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	if (Udd_setup_is_in()) {
   82b9a:	4b20      	ldr	r3, [pc, #128]	; (82c1c <udd_ctrl_setup_received+0x120>)
   82b9c:	781b      	ldrb	r3, [r3, #0]
   82b9e:	b25b      	sxtb	r3, r3
   82ba0:	2b00      	cmp	r3, #0
   82ba2:	da0b      	bge.n	82bbc <udd_ctrl_setup_received+0xc0>
		dbg_print("_I ");
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   82ba4:	4b1f      	ldr	r3, [pc, #124]	; (82c24 <udd_ctrl_setup_received+0x128>)
   82ba6:	2200      	movs	r2, #0
   82ba8:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   82baa:	4b1f      	ldr	r3, [pc, #124]	; (82c28 <udd_ctrl_setup_received+0x12c>)
   82bac:	2200      	movs	r2, #0
   82bae:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   82bb0:	4b14      	ldr	r3, [pc, #80]	; (82c04 <udd_ctrl_setup_received+0x108>)
   82bb2:	2202      	movs	r2, #2
   82bb4:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   82bb6:	4b1d      	ldr	r3, [pc, #116]	; (82c2c <udd_ctrl_setup_received+0x130>)
   82bb8:	4798      	blx	r3
   82bba:	e01f      	b.n	82bfc <udd_ctrl_setup_received+0x100>
	} else {
		dbg_print("_O ");
		if (0 == udd_g_ctrlreq.req.wLength) {
   82bbc:	4b17      	ldr	r3, [pc, #92]	; (82c1c <udd_ctrl_setup_received+0x120>)
   82bbe:	88db      	ldrh	r3, [r3, #6]
   82bc0:	2b00      	cmp	r3, #0
   82bc2:	d102      	bne.n	82bca <udd_ctrl_setup_received+0xce>
			// No data phase requested
			dbg_print("Zl ");
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   82bc4:	4b1a      	ldr	r3, [pc, #104]	; (82c30 <udd_ctrl_setup_received+0x134>)
   82bc6:	4798      	blx	r3
			return;
   82bc8:	e018      	b.n	82bfc <udd_ctrl_setup_received+0x100>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   82bca:	4b16      	ldr	r3, [pc, #88]	; (82c24 <udd_ctrl_setup_received+0x128>)
   82bcc:	2200      	movs	r2, #0
   82bce:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   82bd0:	4b15      	ldr	r3, [pc, #84]	; (82c28 <udd_ctrl_setup_received+0x12c>)
   82bd2:	2200      	movs	r2, #0
   82bd4:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   82bd6:	4b0b      	ldr	r3, [pc, #44]	; (82c04 <udd_ctrl_setup_received+0x108>)
   82bd8:	2201      	movs	r2, #1
   82bda:	701a      	strb	r2, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   82bdc:	4b0c      	ldr	r3, [pc, #48]	; (82c10 <udd_ctrl_setup_received+0x114>)
   82bde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   82be2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		flags = cpu_irq_save();
   82be6:	4b13      	ldr	r3, [pc, #76]	; (82c34 <udd_ctrl_setup_received+0x138>)
   82be8:	4798      	blx	r3
   82bea:	6078      	str	r0, [r7, #4]
		udd_enable_nak_in_interrupt(0);
   82bec:	4b08      	ldr	r3, [pc, #32]	; (82c10 <udd_ctrl_setup_received+0x114>)
   82bee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   82bf2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		cpu_irq_restore(flags);
   82bf6:	6878      	ldr	r0, [r7, #4]
   82bf8:	4b0f      	ldr	r3, [pc, #60]	; (82c38 <udd_ctrl_setup_received+0x13c>)
   82bfa:	4798      	blx	r3
	}
}
   82bfc:	3710      	adds	r7, #16
   82bfe:	46bd      	mov	sp, r7
   82c00:	bd80      	pop	{r7, pc}
   82c02:	bf00      	nop
   82c04:	20000d01 	.word	0x20000d01
   82c08:	000830a5 	.word	0x000830a5
   82c0c:	00082aa1 	.word	0x00082aa1
   82c10:	400a4000 	.word	0x400a4000
   82c14:	00082fd9 	.word	0x00082fd9
   82c18:	20180000 	.word	0x20180000
   82c1c:	20000d58 	.word	0x20000d58
   82c20:	000853dd 	.word	0x000853dd
   82c24:	20000d02 	.word	0x20000d02
   82c28:	20000d04 	.word	0x20000d04
   82c2c:	00082c3d 	.word	0x00082c3d
   82c30:	00082ffd 	.word	0x00082ffd
   82c34:	00081b09 	.word	0x00081b09
   82c38:	00081b61 	.word	0x00081b61

00082c3c <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
   82c3c:	b580      	push	{r7, lr}
   82c3e:	b084      	sub	sp, #16
   82c40:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
   82c42:	4b4c      	ldr	r3, [pc, #304]	; (82d74 <udd_ctrl_in_sent+0x138>)
   82c44:	4798      	blx	r3
   82c46:	6038      	str	r0, [r7, #0]
	udd_disable_in_send_interrupt(0);
   82c48:	4b4b      	ldr	r3, [pc, #300]	; (82d78 <udd_ctrl_in_sent+0x13c>)
   82c4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82c4e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   82c52:	6838      	ldr	r0, [r7, #0]
   82c54:	4b49      	ldr	r3, [pc, #292]	; (82d7c <udd_ctrl_in_sent+0x140>)
   82c56:	4798      	blx	r3

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   82c58:	4b49      	ldr	r3, [pc, #292]	; (82d80 <udd_ctrl_in_sent+0x144>)
   82c5a:	781b      	ldrb	r3, [r3, #0]
   82c5c:	2b03      	cmp	r3, #3
   82c5e:	d104      	bne.n	82c6a <udd_ctrl_in_sent+0x2e>
		dbg_print("ZlpE\n\r");
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   82c60:	4b48      	ldr	r3, [pc, #288]	; (82d84 <udd_ctrl_in_sent+0x148>)
   82c62:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   82c64:	4b48      	ldr	r3, [pc, #288]	; (82d88 <udd_ctrl_in_sent+0x14c>)
   82c66:	4798      	blx	r3
		return;
   82c68:	e081      	b.n	82d6e <udd_ctrl_in_sent+0x132>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   82c6a:	4b48      	ldr	r3, [pc, #288]	; (82d8c <udd_ctrl_in_sent+0x150>)
   82c6c:	899a      	ldrh	r2, [r3, #12]
   82c6e:	4b48      	ldr	r3, [pc, #288]	; (82d90 <udd_ctrl_in_sent+0x154>)
   82c70:	881b      	ldrh	r3, [r3, #0]
   82c72:	1ad3      	subs	r3, r2, r3
   82c74:	81fb      	strh	r3, [r7, #14]
	if (0 == nb_remain) {
   82c76:	89fb      	ldrh	r3, [r7, #14]
   82c78:	2b00      	cmp	r3, #0
   82c7a:	d127      	bne.n	82ccc <udd_ctrl_in_sent+0x90>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   82c7c:	4b45      	ldr	r3, [pc, #276]	; (82d94 <udd_ctrl_in_sent+0x158>)
   82c7e:	881a      	ldrh	r2, [r3, #0]
   82c80:	4b43      	ldr	r3, [pc, #268]	; (82d90 <udd_ctrl_in_sent+0x154>)
   82c82:	881b      	ldrh	r3, [r3, #0]
   82c84:	4413      	add	r3, r2
   82c86:	b29a      	uxth	r2, r3
   82c88:	4b42      	ldr	r3, [pc, #264]	; (82d94 <udd_ctrl_in_sent+0x158>)
   82c8a:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   82c8c:	4b3f      	ldr	r3, [pc, #252]	; (82d8c <udd_ctrl_in_sent+0x150>)
   82c8e:	88da      	ldrh	r2, [r3, #6]
   82c90:	4b40      	ldr	r3, [pc, #256]	; (82d94 <udd_ctrl_in_sent+0x158>)
   82c92:	881b      	ldrh	r3, [r3, #0]
   82c94:	429a      	cmp	r2, r3
   82c96:	d003      	beq.n	82ca0 <udd_ctrl_in_sent+0x64>
				|| b_shortpacket) {
   82c98:	4b3f      	ldr	r3, [pc, #252]	; (82d98 <udd_ctrl_in_sent+0x15c>)
   82c9a:	781b      	ldrb	r3, [r3, #0]
   82c9c:	2b00      	cmp	r3, #0
   82c9e:	d002      	beq.n	82ca6 <udd_ctrl_in_sent+0x6a>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			dbg_print("_zO ");
			udd_ctrl_send_zlp_out();
   82ca0:	4b3e      	ldr	r3, [pc, #248]	; (82d9c <udd_ctrl_in_sent+0x160>)
   82ca2:	4798      	blx	r3
			return;
   82ca4:	e063      	b.n	82d6e <udd_ctrl_in_sent+0x132>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   82ca6:	4b39      	ldr	r3, [pc, #228]	; (82d8c <udd_ctrl_in_sent+0x150>)
   82ca8:	695b      	ldr	r3, [r3, #20]
   82caa:	2b00      	cmp	r3, #0
   82cac:	d00e      	beq.n	82ccc <udd_ctrl_in_sent+0x90>
				|| (!udd_g_ctrlreq.over_under_run())) {
   82cae:	4b37      	ldr	r3, [pc, #220]	; (82d8c <udd_ctrl_in_sent+0x150>)
   82cb0:	695b      	ldr	r3, [r3, #20]
   82cb2:	4798      	blx	r3
   82cb4:	4603      	mov	r3, r0
   82cb6:	f083 0301 	eor.w	r3, r3, #1
   82cba:	b2db      	uxtb	r3, r3
   82cbc:	2b00      	cmp	r3, #0
   82cbe:	d105      	bne.n	82ccc <udd_ctrl_in_sent+0x90>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   82cc0:	4b33      	ldr	r3, [pc, #204]	; (82d90 <udd_ctrl_in_sent+0x154>)
   82cc2:	2200      	movs	r2, #0
   82cc4:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   82cc6:	4b31      	ldr	r3, [pc, #196]	; (82d8c <udd_ctrl_in_sent+0x150>)
   82cc8:	899b      	ldrh	r3, [r3, #12]
   82cca:	81fb      	strh	r3, [r7, #14]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   82ccc:	89fb      	ldrh	r3, [r7, #14]
   82cce:	2b3f      	cmp	r3, #63	; 0x3f
   82cd0:	d905      	bls.n	82cde <udd_ctrl_in_sent+0xa2>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   82cd2:	2340      	movs	r3, #64	; 0x40
   82cd4:	81fb      	strh	r3, [r7, #14]
		b_shortpacket = false;
   82cd6:	4b30      	ldr	r3, [pc, #192]	; (82d98 <udd_ctrl_in_sent+0x15c>)
   82cd8:	2200      	movs	r2, #0
   82cda:	701a      	strb	r2, [r3, #0]
   82cdc:	e002      	b.n	82ce4 <udd_ctrl_in_sent+0xa8>
	} else {
		b_shortpacket = true;
   82cde:	4b2e      	ldr	r3, [pc, #184]	; (82d98 <udd_ctrl_in_sent+0x15c>)
   82ce0:	2201      	movs	r2, #1
   82ce2:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   82ce4:	4b2e      	ldr	r3, [pc, #184]	; (82da0 <udd_ctrl_in_sent+0x164>)
   82ce6:	60bb      	str	r3, [r7, #8]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   82ce8:	4b28      	ldr	r3, [pc, #160]	; (82d8c <udd_ctrl_in_sent+0x150>)
   82cea:	689b      	ldr	r3, [r3, #8]
   82cec:	4a28      	ldr	r2, [pc, #160]	; (82d90 <udd_ctrl_in_sent+0x154>)
   82cee:	8812      	ldrh	r2, [r2, #0]
   82cf0:	4413      	add	r3, r2
   82cf2:	607b      	str	r3, [r7, #4]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
   82cf4:	4b1f      	ldr	r3, [pc, #124]	; (82d74 <udd_ctrl_in_sent+0x138>)
   82cf6:	4798      	blx	r3
   82cf8:	6038      	str	r0, [r7, #0]
	if (Is_udd_out_received(0)) {
   82cfa:	4b1f      	ldr	r3, [pc, #124]	; (82d78 <udd_ctrl_in_sent+0x13c>)
   82cfc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   82d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
   82d04:	2b00      	cmp	r3, #0
   82d06:	d006      	beq.n	82d16 <udd_ctrl_in_sent+0xda>
		dbg_print("Abort ");
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
   82d08:	6838      	ldr	r0, [r7, #0]
   82d0a:	4b1c      	ldr	r3, [pc, #112]	; (82d7c <udd_ctrl_in_sent+0x140>)
   82d0c:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   82d0e:	4b1c      	ldr	r3, [pc, #112]	; (82d80 <udd_ctrl_in_sent+0x144>)
   82d10:	2204      	movs	r2, #4
   82d12:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   82d14:	e02b      	b.n	82d6e <udd_ctrl_in_sent+0x132>
	}
	// dbg_print("t%d ", nb_remain);
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   82d16:	2300      	movs	r3, #0
   82d18:	737b      	strb	r3, [r7, #13]
   82d1a:	e00a      	b.n	82d32 <udd_ctrl_in_sent+0xf6>
		*ptr_dest++ = *ptr_src++;
   82d1c:	687a      	ldr	r2, [r7, #4]
   82d1e:	1c53      	adds	r3, r2, #1
   82d20:	607b      	str	r3, [r7, #4]
   82d22:	68bb      	ldr	r3, [r7, #8]
   82d24:	1c59      	adds	r1, r3, #1
   82d26:	60b9      	str	r1, [r7, #8]
   82d28:	7812      	ldrb	r2, [r2, #0]
   82d2a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_remain; i++) {
   82d2c:	7b7b      	ldrb	r3, [r7, #13]
   82d2e:	3301      	adds	r3, #1
   82d30:	737b      	strb	r3, [r7, #13]
   82d32:	7b7b      	ldrb	r3, [r7, #13]
   82d34:	b29b      	uxth	r3, r3
   82d36:	89fa      	ldrh	r2, [r7, #14]
   82d38:	429a      	cmp	r2, r3
   82d3a:	d8ef      	bhi.n	82d1c <udd_ctrl_in_sent+0xe0>
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   82d3c:	4b14      	ldr	r3, [pc, #80]	; (82d90 <udd_ctrl_in_sent+0x154>)
   82d3e:	881a      	ldrh	r2, [r3, #0]
   82d40:	89fb      	ldrh	r3, [r7, #14]
   82d42:	4413      	add	r3, r2
   82d44:	b29a      	uxth	r2, r3
   82d46:	4b12      	ldr	r3, [pc, #72]	; (82d90 <udd_ctrl_in_sent+0x154>)
   82d48:	801a      	strh	r2, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   82d4a:	4b0b      	ldr	r3, [pc, #44]	; (82d78 <udd_ctrl_in_sent+0x13c>)
   82d4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82d50:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   82d54:	4b08      	ldr	r3, [pc, #32]	; (82d78 <udd_ctrl_in_sent+0x13c>)
   82d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
   82d5a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   82d5e:	4b06      	ldr	r3, [pc, #24]	; (82d78 <udd_ctrl_in_sent+0x13c>)
   82d60:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82d64:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
   82d68:	6838      	ldr	r0, [r7, #0]
   82d6a:	4b04      	ldr	r3, [pc, #16]	; (82d7c <udd_ctrl_in_sent+0x140>)
   82d6c:	4798      	blx	r3
}
   82d6e:	3710      	adds	r7, #16
   82d70:	46bd      	mov	sp, r7
   82d72:	bd80      	pop	{r7, pc}
   82d74:	00081b09 	.word	0x00081b09
   82d78:	400a4000 	.word	0x400a4000
   82d7c:	00081b61 	.word	0x00081b61
   82d80:	20000d01 	.word	0x20000d01
   82d84:	000830a5 	.word	0x000830a5
   82d88:	00082aa1 	.word	0x00082aa1
   82d8c:	20000d58 	.word	0x20000d58
   82d90:	20000d04 	.word	0x20000d04
   82d94:	20000d02 	.word	0x20000d02
   82d98:	20000d38 	.word	0x20000d38
   82d9c:	00083061 	.word	0x00083061
   82da0:	20180000 	.word	0x20180000

00082da4 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
   82da4:	b580      	push	{r7, lr}
   82da6:	b084      	sub	sp, #16
   82da8:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   82daa:	4b61      	ldr	r3, [pc, #388]	; (82f30 <udd_ctrl_out_received+0x18c>)
   82dac:	781b      	ldrb	r3, [r3, #0]
   82dae:	2b01      	cmp	r3, #1
   82db0:	d00f      	beq.n	82dd2 <udd_ctrl_out_received+0x2e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   82db2:	4b5f      	ldr	r3, [pc, #380]	; (82f30 <udd_ctrl_out_received+0x18c>)
   82db4:	781b      	ldrb	r3, [r3, #0]
   82db6:	2b02      	cmp	r3, #2
   82db8:	d003      	beq.n	82dc2 <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   82dba:	4b5d      	ldr	r3, [pc, #372]	; (82f30 <udd_ctrl_out_received+0x18c>)
   82dbc:	781b      	ldrb	r3, [r3, #0]
   82dbe:	2b04      	cmp	r3, #4
   82dc0:	d102      	bne.n	82dc8 <udd_ctrl_out_received+0x24>
			dbg_print("EoStp\n\r");
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
   82dc2:	4b5c      	ldr	r3, [pc, #368]	; (82f34 <udd_ctrl_out_received+0x190>)
   82dc4:	4798      	blx	r3
   82dc6:	e001      	b.n	82dcc <udd_ctrl_out_received+0x28>
		} else {
			dbg_print("ErrStp\n\r");
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   82dc8:	4b5b      	ldr	r3, [pc, #364]	; (82f38 <udd_ctrl_out_received+0x194>)
   82dca:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   82dcc:	4b5b      	ldr	r3, [pc, #364]	; (82f3c <udd_ctrl_out_received+0x198>)
   82dce:	4798      	blx	r3
		return;
   82dd0:	e0ab      	b.n	82f2a <udd_ctrl_out_received+0x186>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   82dd2:	4b5b      	ldr	r3, [pc, #364]	; (82f40 <udd_ctrl_out_received+0x19c>)
   82dd4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   82dd8:	0d1b      	lsrs	r3, r3, #20
   82dda:	b29b      	uxth	r3, r3
   82ddc:	f3c3 030a 	ubfx	r3, r3, #0, #11
   82de0:	81bb      	strh	r3, [r7, #12]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   82de2:	4b58      	ldr	r3, [pc, #352]	; (82f44 <udd_ctrl_out_received+0x1a0>)
   82de4:	899b      	ldrh	r3, [r3, #12]
   82de6:	461a      	mov	r2, r3
   82de8:	4b57      	ldr	r3, [pc, #348]	; (82f48 <udd_ctrl_out_received+0x1a4>)
   82dea:	881b      	ldrh	r3, [r3, #0]
   82dec:	4619      	mov	r1, r3
   82dee:	89bb      	ldrh	r3, [r7, #12]
   82df0:	440b      	add	r3, r1
   82df2:	429a      	cmp	r2, r3
   82df4:	da05      	bge.n	82e02 <udd_ctrl_out_received+0x5e>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   82df6:	4b53      	ldr	r3, [pc, #332]	; (82f44 <udd_ctrl_out_received+0x1a0>)
   82df8:	899a      	ldrh	r2, [r3, #12]
   82dfa:	4b53      	ldr	r3, [pc, #332]	; (82f48 <udd_ctrl_out_received+0x1a4>)
   82dfc:	881b      	ldrh	r3, [r3, #0]
   82dfe:	1ad3      	subs	r3, r2, r3
   82e00:	81bb      	strh	r3, [r7, #12]
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   82e02:	4b52      	ldr	r3, [pc, #328]	; (82f4c <udd_ctrl_out_received+0x1a8>)
   82e04:	60bb      	str	r3, [r7, #8]
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   82e06:	4b4f      	ldr	r3, [pc, #316]	; (82f44 <udd_ctrl_out_received+0x1a0>)
   82e08:	689b      	ldr	r3, [r3, #8]
   82e0a:	4a4f      	ldr	r2, [pc, #316]	; (82f48 <udd_ctrl_out_received+0x1a4>)
   82e0c:	8812      	ldrh	r2, [r2, #0]
   82e0e:	4413      	add	r3, r2
   82e10:	607b      	str	r3, [r7, #4]
	for (i = 0; i < nb_data; i++) {
   82e12:	2300      	movs	r3, #0
   82e14:	73fb      	strb	r3, [r7, #15]
   82e16:	e00a      	b.n	82e2e <udd_ctrl_out_received+0x8a>
		*ptr_dest++ = *ptr_src++;
   82e18:	68ba      	ldr	r2, [r7, #8]
   82e1a:	1c53      	adds	r3, r2, #1
   82e1c:	60bb      	str	r3, [r7, #8]
   82e1e:	687b      	ldr	r3, [r7, #4]
   82e20:	1c59      	adds	r1, r3, #1
   82e22:	6079      	str	r1, [r7, #4]
   82e24:	7812      	ldrb	r2, [r2, #0]
   82e26:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_data; i++) {
   82e28:	7bfb      	ldrb	r3, [r7, #15]
   82e2a:	3301      	adds	r3, #1
   82e2c:	73fb      	strb	r3, [r7, #15]
   82e2e:	7bfb      	ldrb	r3, [r7, #15]
   82e30:	b29b      	uxth	r3, r3
   82e32:	89ba      	ldrh	r2, [r7, #12]
   82e34:	429a      	cmp	r2, r3
   82e36:	d8ef      	bhi.n	82e18 <udd_ctrl_out_received+0x74>
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   82e38:	4b43      	ldr	r3, [pc, #268]	; (82f48 <udd_ctrl_out_received+0x1a4>)
   82e3a:	881a      	ldrh	r2, [r3, #0]
   82e3c:	89bb      	ldrh	r3, [r7, #12]
   82e3e:	4413      	add	r3, r2
   82e40:	b29a      	uxth	r2, r3
   82e42:	4b41      	ldr	r3, [pc, #260]	; (82f48 <udd_ctrl_out_received+0x1a4>)
   82e44:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   82e46:	89bb      	ldrh	r3, [r7, #12]
   82e48:	2b40      	cmp	r3, #64	; 0x40
   82e4a:	d10a      	bne.n	82e62 <udd_ctrl_out_received+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   82e4c:	4b3d      	ldr	r3, [pc, #244]	; (82f44 <udd_ctrl_out_received+0x1a0>)
   82e4e:	88db      	ldrh	r3, [r3, #6]
   82e50:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_buf_cnt +
   82e52:	4b3f      	ldr	r3, [pc, #252]	; (82f50 <udd_ctrl_out_received+0x1ac>)
   82e54:	881b      	ldrh	r3, [r3, #0]
   82e56:	4619      	mov	r1, r3
   82e58:	4b3b      	ldr	r3, [pc, #236]	; (82f48 <udd_ctrl_out_received+0x1a4>)
   82e5a:	881b      	ldrh	r3, [r3, #0]
   82e5c:	440b      	add	r3, r1
			|| (udd_g_ctrlreq.req.wLength <=
   82e5e:	429a      	cmp	r2, r3
   82e60:	dc20      	bgt.n	82ea4 <udd_ctrl_out_received+0x100>
			udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   82e62:	4b39      	ldr	r3, [pc, #228]	; (82f48 <udd_ctrl_out_received+0x1a4>)
   82e64:	881a      	ldrh	r2, [r3, #0]
   82e66:	4b37      	ldr	r3, [pc, #220]	; (82f44 <udd_ctrl_out_received+0x1a0>)
   82e68:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   82e6a:	4b36      	ldr	r3, [pc, #216]	; (82f44 <udd_ctrl_out_received+0x1a0>)
   82e6c:	695b      	ldr	r3, [r3, #20]
   82e6e:	2b00      	cmp	r3, #0
   82e70:	d010      	beq.n	82e94 <udd_ctrl_out_received+0xf0>
			if (!udd_g_ctrlreq.over_under_run()) {
   82e72:	4b34      	ldr	r3, [pc, #208]	; (82f44 <udd_ctrl_out_received+0x1a0>)
   82e74:	695b      	ldr	r3, [r3, #20]
   82e76:	4798      	blx	r3
   82e78:	4603      	mov	r3, r0
   82e7a:	f083 0301 	eor.w	r3, r3, #1
   82e7e:	b2db      	uxtb	r3, r3
   82e80:	2b00      	cmp	r3, #0
   82e82:	d007      	beq.n	82e94 <udd_ctrl_out_received+0xf0>
				// Stall ZLP
				udd_ctrl_stall_data();
   82e84:	4b2c      	ldr	r3, [pc, #176]	; (82f38 <udd_ctrl_out_received+0x194>)
   82e86:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   82e88:	4b2d      	ldr	r3, [pc, #180]	; (82f40 <udd_ctrl_out_received+0x19c>)
   82e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
   82e8e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   82e92:	e04a      	b.n	82f2a <udd_ctrl_out_received+0x186>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   82e94:	4b2a      	ldr	r3, [pc, #168]	; (82f40 <udd_ctrl_out_received+0x19c>)
   82e96:	f44f 7200 	mov.w	r2, #512	; 0x200
   82e9a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   82e9e:	4b2d      	ldr	r3, [pc, #180]	; (82f54 <udd_ctrl_out_received+0x1b0>)
   82ea0:	4798      	blx	r3
		return;
   82ea2:	e042      	b.n	82f2a <udd_ctrl_out_received+0x186>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   82ea4:	4b27      	ldr	r3, [pc, #156]	; (82f44 <udd_ctrl_out_received+0x1a0>)
   82ea6:	899a      	ldrh	r2, [r3, #12]
   82ea8:	4b27      	ldr	r3, [pc, #156]	; (82f48 <udd_ctrl_out_received+0x1a4>)
   82eaa:	881b      	ldrh	r3, [r3, #0]
   82eac:	429a      	cmp	r2, r3
   82eae:	d127      	bne.n	82f00 <udd_ctrl_out_received+0x15c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   82eb0:	4b24      	ldr	r3, [pc, #144]	; (82f44 <udd_ctrl_out_received+0x1a0>)
   82eb2:	695b      	ldr	r3, [r3, #20]
   82eb4:	2b00      	cmp	r3, #0
   82eb6:	d107      	bne.n	82ec8 <udd_ctrl_out_received+0x124>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
   82eb8:	4b1f      	ldr	r3, [pc, #124]	; (82f38 <udd_ctrl_out_received+0x194>)
   82eba:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   82ebc:	4b20      	ldr	r3, [pc, #128]	; (82f40 <udd_ctrl_out_received+0x19c>)
   82ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
   82ec2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   82ec6:	e030      	b.n	82f2a <udd_ctrl_out_received+0x186>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   82ec8:	4b1e      	ldr	r3, [pc, #120]	; (82f44 <udd_ctrl_out_received+0x1a0>)
   82eca:	695b      	ldr	r3, [r3, #20]
   82ecc:	4798      	blx	r3
   82ece:	4603      	mov	r3, r0
   82ed0:	f083 0301 	eor.w	r3, r3, #1
   82ed4:	b2db      	uxtb	r3, r3
   82ed6:	2b00      	cmp	r3, #0
   82ed8:	d007      	beq.n	82eea <udd_ctrl_out_received+0x146>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   82eda:	4b17      	ldr	r3, [pc, #92]	; (82f38 <udd_ctrl_out_received+0x194>)
   82edc:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   82ede:	4b18      	ldr	r3, [pc, #96]	; (82f40 <udd_ctrl_out_received+0x19c>)
   82ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
   82ee4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   82ee8:	e01f      	b.n	82f2a <udd_ctrl_out_received+0x186>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   82eea:	4b19      	ldr	r3, [pc, #100]	; (82f50 <udd_ctrl_out_received+0x1ac>)
   82eec:	881a      	ldrh	r2, [r3, #0]
   82eee:	4b16      	ldr	r3, [pc, #88]	; (82f48 <udd_ctrl_out_received+0x1a4>)
   82ef0:	881b      	ldrh	r3, [r3, #0]
   82ef2:	4413      	add	r3, r2
   82ef4:	b29a      	uxth	r2, r3
   82ef6:	4b16      	ldr	r3, [pc, #88]	; (82f50 <udd_ctrl_out_received+0x1ac>)
   82ef8:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   82efa:	4b13      	ldr	r3, [pc, #76]	; (82f48 <udd_ctrl_out_received+0x1a4>)
   82efc:	2200      	movs	r2, #0
   82efe:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   82f00:	4b0f      	ldr	r3, [pc, #60]	; (82f40 <udd_ctrl_out_received+0x19c>)
   82f02:	f44f 7200 	mov.w	r2, #512	; 0x200
   82f06:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   82f0a:	4b0d      	ldr	r3, [pc, #52]	; (82f40 <udd_ctrl_out_received+0x19c>)
   82f0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   82f10:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	flags = cpu_irq_save();
   82f14:	4b10      	ldr	r3, [pc, #64]	; (82f58 <udd_ctrl_out_received+0x1b4>)
   82f16:	4798      	blx	r3
   82f18:	6038      	str	r0, [r7, #0]
	udd_enable_nak_in_interrupt(0);
   82f1a:	4b09      	ldr	r3, [pc, #36]	; (82f40 <udd_ctrl_out_received+0x19c>)
   82f1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   82f20:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   82f24:	6838      	ldr	r0, [r7, #0]
   82f26:	4b0d      	ldr	r3, [pc, #52]	; (82f5c <udd_ctrl_out_received+0x1b8>)
   82f28:	4798      	blx	r3
}
   82f2a:	3710      	adds	r7, #16
   82f2c:	46bd      	mov	sp, r7
   82f2e:	bd80      	pop	{r7, pc}
   82f30:	20000d01 	.word	0x20000d01
   82f34:	000830a5 	.word	0x000830a5
   82f38:	00082fd9 	.word	0x00082fd9
   82f3c:	00082aa1 	.word	0x00082aa1
   82f40:	400a4000 	.word	0x400a4000
   82f44:	20000d58 	.word	0x20000d58
   82f48:	20000d04 	.word	0x20000d04
   82f4c:	20180000 	.word	0x20180000
   82f50:	20000d02 	.word	0x20000d02
   82f54:	00082ffd 	.word	0x00082ffd
   82f58:	00081b09 	.word	0x00081b09
   82f5c:	00081b61 	.word	0x00081b61

00082f60 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
   82f60:	b580      	push	{r7, lr}
   82f62:	af00      	add	r7, sp, #0
	if (Is_udd_out_received(0))
   82f64:	4b0c      	ldr	r3, [pc, #48]	; (82f98 <udd_ctrl_underflow+0x38>)
   82f66:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   82f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
   82f6e:	2b00      	cmp	r3, #0
   82f70:	d10f      	bne.n	82f92 <udd_ctrl_underflow+0x32>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   82f72:	4b0a      	ldr	r3, [pc, #40]	; (82f9c <udd_ctrl_underflow+0x3c>)
   82f74:	781b      	ldrb	r3, [r3, #0]
   82f76:	2b01      	cmp	r3, #1
   82f78:	d102      	bne.n	82f80 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   82f7a:	4b09      	ldr	r3, [pc, #36]	; (82fa0 <udd_ctrl_underflow+0x40>)
   82f7c:	4798      	blx	r3
   82f7e:	e009      	b.n	82f94 <udd_ctrl_underflow+0x34>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   82f80:	4b06      	ldr	r3, [pc, #24]	; (82f9c <udd_ctrl_underflow+0x3c>)
   82f82:	781b      	ldrb	r3, [r3, #0]
   82f84:	2b04      	cmp	r3, #4
   82f86:	d105      	bne.n	82f94 <udd_ctrl_underflow+0x34>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   82f88:	4b03      	ldr	r3, [pc, #12]	; (82f98 <udd_ctrl_underflow+0x38>)
   82f8a:	2220      	movs	r2, #32
   82f8c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   82f90:	e000      	b.n	82f94 <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received
   82f92:	bf00      	nop
	}
}
   82f94:	bd80      	pop	{r7, pc}
   82f96:	bf00      	nop
   82f98:	400a4000 	.word	0x400a4000
   82f9c:	20000d01 	.word	0x20000d01
   82fa0:	00082ffd 	.word	0x00082ffd

00082fa4 <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
   82fa4:	b480      	push	{r7}
   82fa6:	af00      	add	r7, sp, #0
	if (Is_udd_in_send(0))
   82fa8:	4b09      	ldr	r3, [pc, #36]	; (82fd0 <udd_ctrl_overflow+0x2c>)
   82faa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   82fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   82fb2:	2b00      	cmp	r3, #0
   82fb4:	d108      	bne.n	82fc8 <udd_ctrl_overflow+0x24>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   82fb6:	4b07      	ldr	r3, [pc, #28]	; (82fd4 <udd_ctrl_overflow+0x30>)
   82fb8:	781b      	ldrb	r3, [r3, #0]
   82fba:	2b03      	cmp	r3, #3
   82fbc:	d105      	bne.n	82fca <udd_ctrl_overflow+0x26>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   82fbe:	4b04      	ldr	r3, [pc, #16]	; (82fd0 <udd_ctrl_overflow+0x2c>)
   82fc0:	2220      	movs	r2, #32
   82fc2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   82fc6:	e000      	b.n	82fca <udd_ctrl_overflow+0x26>
		return; // overflow ignored if IN data is received
   82fc8:	bf00      	nop
	}
}
   82fca:	46bd      	mov	sp, r7
   82fcc:	bc80      	pop	{r7}
   82fce:	4770      	bx	lr
   82fd0:	400a4000 	.word	0x400a4000
   82fd4:	20000d01 	.word	0x20000d01

00082fd8 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
   82fd8:	b480      	push	{r7}
   82fda:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   82fdc:	4b05      	ldr	r3, [pc, #20]	; (82ff4 <udd_ctrl_stall_data+0x1c>)
   82fde:	2205      	movs	r2, #5
   82fe0:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   82fe2:	4b05      	ldr	r3, [pc, #20]	; (82ff8 <udd_ctrl_stall_data+0x20>)
   82fe4:	2220      	movs	r2, #32
   82fe6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   82fea:	bf00      	nop
   82fec:	46bd      	mov	sp, r7
   82fee:	bc80      	pop	{r7}
   82ff0:	4770      	bx	lr
   82ff2:	bf00      	nop
   82ff4:	20000d01 	.word	0x20000d01
   82ff8:	400a4000 	.word	0x400a4000

00082ffc <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
   82ffc:	b580      	push	{r7, lr}
   82ffe:	b082      	sub	sp, #8
   83000:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   83002:	4b13      	ldr	r3, [pc, #76]	; (83050 <udd_ctrl_send_zlp_in+0x54>)
   83004:	2203      	movs	r2, #3
   83006:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
   83008:	4b12      	ldr	r3, [pc, #72]	; (83054 <udd_ctrl_send_zlp_in+0x58>)
   8300a:	4798      	blx	r3
   8300c:	6078      	str	r0, [r7, #4]
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   8300e:	4b12      	ldr	r3, [pc, #72]	; (83058 <udd_ctrl_send_zlp_in+0x5c>)
   83010:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83014:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   83018:	4b0f      	ldr	r3, [pc, #60]	; (83058 <udd_ctrl_send_zlp_in+0x5c>)
   8301a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8301e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   83022:	4b0d      	ldr	r3, [pc, #52]	; (83058 <udd_ctrl_send_zlp_in+0x5c>)
   83024:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83028:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   8302c:	4b0a      	ldr	r3, [pc, #40]	; (83058 <udd_ctrl_send_zlp_in+0x5c>)
   8302e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83032:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   83036:	4b08      	ldr	r3, [pc, #32]	; (83058 <udd_ctrl_send_zlp_in+0x5c>)
   83038:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8303c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   83040:	6878      	ldr	r0, [r7, #4]
   83042:	4b06      	ldr	r3, [pc, #24]	; (8305c <udd_ctrl_send_zlp_in+0x60>)
   83044:	4798      	blx	r3
}
   83046:	bf00      	nop
   83048:	3708      	adds	r7, #8
   8304a:	46bd      	mov	sp, r7
   8304c:	bd80      	pop	{r7, pc}
   8304e:	bf00      	nop
   83050:	20000d01 	.word	0x20000d01
   83054:	00081b09 	.word	0x00081b09
   83058:	400a4000 	.word	0x400a4000
   8305c:	00081b61 	.word	0x00081b61

00083060 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
   83060:	b580      	push	{r7, lr}
   83062:	b082      	sub	sp, #8
   83064:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   83066:	4b0b      	ldr	r3, [pc, #44]	; (83094 <udd_ctrl_send_zlp_out+0x34>)
   83068:	2204      	movs	r2, #4
   8306a:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
   8306c:	4b0a      	ldr	r3, [pc, #40]	; (83098 <udd_ctrl_send_zlp_out+0x38>)
   8306e:	4798      	blx	r3
   83070:	6078      	str	r0, [r7, #4]
	udd_ack_nak_in(0);
   83072:	4b0a      	ldr	r3, [pc, #40]	; (8309c <udd_ctrl_send_zlp_out+0x3c>)
   83074:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83078:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   8307c:	4b07      	ldr	r3, [pc, #28]	; (8309c <udd_ctrl_send_zlp_out+0x3c>)
   8307e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83082:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   83086:	6878      	ldr	r0, [r7, #4]
   83088:	4b05      	ldr	r3, [pc, #20]	; (830a0 <udd_ctrl_send_zlp_out+0x40>)
   8308a:	4798      	blx	r3
}
   8308c:	bf00      	nop
   8308e:	3708      	adds	r7, #8
   83090:	46bd      	mov	sp, r7
   83092:	bd80      	pop	{r7, pc}
   83094:	20000d01 	.word	0x20000d01
   83098:	00081b09 	.word	0x00081b09
   8309c:	400a4000 	.word	0x400a4000
   830a0:	00081b61 	.word	0x00081b61

000830a4 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   830a4:	b580      	push	{r7, lr}
   830a6:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   830a8:	4b04      	ldr	r3, [pc, #16]	; (830bc <udd_ctrl_endofrequest+0x18>)
   830aa:	691b      	ldr	r3, [r3, #16]
   830ac:	2b00      	cmp	r3, #0
   830ae:	d002      	beq.n	830b6 <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
   830b0:	4b02      	ldr	r3, [pc, #8]	; (830bc <udd_ctrl_endofrequest+0x18>)
   830b2:	691b      	ldr	r3, [r3, #16]
   830b4:	4798      	blx	r3
	}
}
   830b6:	bf00      	nop
   830b8:	bd80      	pop	{r7, pc}
   830ba:	bf00      	nop
   830bc:	20000d58 	.word	0x20000d58

000830c0 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
   830c0:	b580      	push	{r7, lr}
   830c2:	b082      	sub	sp, #8
   830c4:	af00      	add	r7, sp, #0
	uint32_t status = udd_get_endpoint_status(0);
   830c6:	4b31      	ldr	r3, [pc, #196]	; (8318c <udd_ctrl_interrupt+0xcc>)
   830c8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   830cc:	607b      	str	r3, [r7, #4]

	if (!Is_udd_endpoint_interrupt(0)) {
   830ce:	4b2f      	ldr	r3, [pc, #188]	; (8318c <udd_ctrl_interrupt+0xcc>)
   830d0:	695b      	ldr	r3, [r3, #20]
   830d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
   830d6:	2b00      	cmp	r3, #0
   830d8:	d101      	bne.n	830de <udd_ctrl_interrupt+0x1e>
		return false; // No interrupt events on control endpoint
   830da:	2300      	movs	r3, #0
   830dc:	e052      	b.n	83184 <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   830de:	4b2b      	ldr	r3, [pc, #172]	; (8318c <udd_ctrl_interrupt+0xcc>)
   830e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   830e4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   830e8:	4b28      	ldr	r3, [pc, #160]	; (8318c <udd_ctrl_interrupt+0xcc>)
   830ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   830ee:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	// Search event on control endpoint
	if (Is_udd_endpoint_status_setup_received(status)) {
   830f2:	687b      	ldr	r3, [r7, #4]
   830f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   830f8:	2b00      	cmp	r3, #0
   830fa:	d003      	beq.n	83104 <udd_ctrl_interrupt+0x44>
		// SETUP packet received
		dbg_print("Stp ");
		udd_ctrl_setup_received();
   830fc:	4b24      	ldr	r3, [pc, #144]	; (83190 <udd_ctrl_interrupt+0xd0>)
   830fe:	4798      	blx	r3
		return true;
   83100:	2301      	movs	r3, #1
   83102:	e03f      	b.n	83184 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_in_sent(status)
   83104:	687b      	ldr	r3, [r7, #4]
   83106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   8310a:	2b00      	cmp	r3, #0
   8310c:	d00a      	beq.n	83124 <udd_ctrl_interrupt+0x64>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   8310e:	4b1f      	ldr	r3, [pc, #124]	; (8318c <udd_ctrl_interrupt+0xcc>)
   83110:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   83114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   83118:	2b00      	cmp	r3, #0
   8311a:	d003      	beq.n	83124 <udd_ctrl_interrupt+0x64>
		// IN packet sent
		dbg_print("In ");
		udd_ctrl_in_sent();
   8311c:	4b1d      	ldr	r3, [pc, #116]	; (83194 <udd_ctrl_interrupt+0xd4>)
   8311e:	4798      	blx	r3
		return true;
   83120:	2301      	movs	r3, #1
   83122:	e02f      	b.n	83184 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_out_received(status)) {
   83124:	687b      	ldr	r3, [r7, #4]
   83126:	f403 7300 	and.w	r3, r3, #512	; 0x200
   8312a:	2b00      	cmp	r3, #0
   8312c:	d003      	beq.n	83136 <udd_ctrl_interrupt+0x76>
		// OUT packet received
		dbg_print("Out ");
		udd_ctrl_out_received();
   8312e:	4b1a      	ldr	r3, [pc, #104]	; (83198 <udd_ctrl_interrupt+0xd8>)
   83130:	4798      	blx	r3
		return true;
   83132:	2301      	movs	r3, #1
   83134:	e026      	b.n	83184 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_stall(status)) {
   83136:	687b      	ldr	r3, [r7, #4]
   83138:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   8313c:	2b00      	cmp	r3, #0
   8313e:	d004      	beq.n	8314a <udd_ctrl_interrupt+0x8a>
		dbg_print("Stall\n\r");
		// STALLed
		udd_ack_stall(0);
   83140:	4b12      	ldr	r3, [pc, #72]	; (8318c <udd_ctrl_interrupt+0xcc>)
   83142:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83146:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	if (Is_udd_endpoint_status_nak_out(status)) {
   8314a:	687b      	ldr	r3, [r7, #4]
   8314c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   83150:	2b00      	cmp	r3, #0
   83152:	d008      	beq.n	83166 <udd_ctrl_interrupt+0xa6>
		// Overflow on OUT packet
		dbg_print("NakO ");
		udd_ack_nak_out(0);
   83154:	4b0d      	ldr	r3, [pc, #52]	; (8318c <udd_ctrl_interrupt+0xcc>)
   83156:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8315a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_overflow();
   8315e:	4b0f      	ldr	r3, [pc, #60]	; (8319c <udd_ctrl_interrupt+0xdc>)
   83160:	4798      	blx	r3
		return true;
   83162:	2301      	movs	r3, #1
   83164:	e00e      	b.n	83184 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_nak_in(status)) {
   83166:	687b      	ldr	r3, [r7, #4]
   83168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   8316c:	2b00      	cmp	r3, #0
   8316e:	d008      	beq.n	83182 <udd_ctrl_interrupt+0xc2>
		// Underflow on IN packet
		dbg_print("NakI ");
		udd_ack_nak_in(0);
   83170:	4b06      	ldr	r3, [pc, #24]	; (8318c <udd_ctrl_interrupt+0xcc>)
   83172:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83176:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_underflow();
   8317a:	4b09      	ldr	r3, [pc, #36]	; (831a0 <udd_ctrl_interrupt+0xe0>)
   8317c:	4798      	blx	r3
		return true;
   8317e:	2301      	movs	r3, #1
   83180:	e000      	b.n	83184 <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("UnH ");
	return false;
   83182:	2300      	movs	r3, #0
}
   83184:	4618      	mov	r0, r3
   83186:	3708      	adds	r7, #8
   83188:	46bd      	mov	sp, r7
   8318a:	bd80      	pop	{r7, pc}
   8318c:	400a4000 	.word	0x400a4000
   83190:	00082afd 	.word	0x00082afd
   83194:	00082c3d 	.word	0x00082c3d
   83198:	00082da5 	.word	0x00082da5
   8319c:	00082fa5 	.word	0x00082fa5
   831a0:	00082f61 	.word	0x00082f61

000831a4 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
   831a4:	b480      	push	{r7}
   831a6:	b083      	sub	sp, #12
   831a8:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   831aa:	2300      	movs	r3, #0
   831ac:	71fb      	strb	r3, [r7, #7]
   831ae:	e01c      	b.n	831ea <udd_ep_job_table_reset+0x46>
		udd_ep_job[i].busy = false;
   831b0:	79fa      	ldrb	r2, [r7, #7]
   831b2:	4912      	ldr	r1, [pc, #72]	; (831fc <udd_ep_job_table_reset+0x58>)
   831b4:	4613      	mov	r3, r2
   831b6:	005b      	lsls	r3, r3, #1
   831b8:	4413      	add	r3, r2
   831ba:	00db      	lsls	r3, r3, #3
   831bc:	440b      	add	r3, r1
   831be:	f103 0210 	add.w	r2, r3, #16
   831c2:	7913      	ldrb	r3, [r2, #4]
   831c4:	f36f 0300 	bfc	r3, #0, #1
   831c8:	7113      	strb	r3, [r2, #4]
		udd_ep_job[i].stall_requested = false;
   831ca:	79fa      	ldrb	r2, [r7, #7]
   831cc:	490b      	ldr	r1, [pc, #44]	; (831fc <udd_ep_job_table_reset+0x58>)
   831ce:	4613      	mov	r3, r2
   831d0:	005b      	lsls	r3, r3, #1
   831d2:	4413      	add	r3, r2
   831d4:	00db      	lsls	r3, r3, #3
   831d6:	440b      	add	r3, r1
   831d8:	f103 0210 	add.w	r2, r3, #16
   831dc:	7913      	ldrb	r3, [r2, #4]
   831de:	f36f 0382 	bfc	r3, #2, #1
   831e2:	7113      	strb	r3, [r2, #4]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   831e4:	79fb      	ldrb	r3, [r7, #7]
   831e6:	3301      	adds	r3, #1
   831e8:	71fb      	strb	r3, [r7, #7]
   831ea:	79fb      	ldrb	r3, [r7, #7]
   831ec:	2b01      	cmp	r3, #1
   831ee:	d9df      	bls.n	831b0 <udd_ep_job_table_reset+0xc>
	}
}
   831f0:	bf00      	nop
   831f2:	370c      	adds	r7, #12
   831f4:	46bd      	mov	sp, r7
   831f6:	bc80      	pop	{r7}
   831f8:	4770      	bx	lr
   831fa:	bf00      	nop
   831fc:	20000d08 	.word	0x20000d08

00083200 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
   83200:	b580      	push	{r7, lr}
   83202:	b082      	sub	sp, #8
   83204:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83206:	2300      	movs	r3, #0
   83208:	71fb      	strb	r3, [r7, #7]
   8320a:	e010      	b.n	8322e <udd_ep_job_table_kill+0x2e>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   8320c:	79fa      	ldrb	r2, [r7, #7]
   8320e:	4613      	mov	r3, r2
   83210:	005b      	lsls	r3, r3, #1
   83212:	4413      	add	r3, r2
   83214:	00db      	lsls	r3, r3, #3
   83216:	4a09      	ldr	r2, [pc, #36]	; (8323c <udd_ep_job_table_kill+0x3c>)
   83218:	1898      	adds	r0, r3, r2
   8321a:	79fb      	ldrb	r3, [r7, #7]
   8321c:	3301      	adds	r3, #1
   8321e:	b2db      	uxtb	r3, r3
   83220:	461a      	mov	r2, r3
   83222:	2101      	movs	r1, #1
   83224:	4b06      	ldr	r3, [pc, #24]	; (83240 <udd_ep_job_table_kill+0x40>)
   83226:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83228:	79fb      	ldrb	r3, [r7, #7]
   8322a:	3301      	adds	r3, #1
   8322c:	71fb      	strb	r3, [r7, #7]
   8322e:	79fb      	ldrb	r3, [r7, #7]
   83230:	2b01      	cmp	r3, #1
   83232:	d9eb      	bls.n	8320c <udd_ep_job_table_kill+0xc>
	}
}
   83234:	bf00      	nop
   83236:	3708      	adds	r7, #8
   83238:	46bd      	mov	sp, r7
   8323a:	bd80      	pop	{r7, pc}
   8323c:	20000d08 	.word	0x20000d08
   83240:	00083281 	.word	0x00083281

00083244 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   83244:	b580      	push	{r7, lr}
   83246:	b082      	sub	sp, #8
   83248:	af00      	add	r7, sp, #0
   8324a:	4603      	mov	r3, r0
   8324c:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
   8324e:	79fb      	ldrb	r3, [r7, #7]
   83250:	f003 030f 	and.w	r3, r3, #15
   83254:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   83256:	79fb      	ldrb	r3, [r7, #7]
   83258:	1e5a      	subs	r2, r3, #1
   8325a:	4613      	mov	r3, r2
   8325c:	005b      	lsls	r3, r3, #1
   8325e:	4413      	add	r3, r2
   83260:	00db      	lsls	r3, r3, #3
   83262:	4a05      	ldr	r2, [pc, #20]	; (83278 <udd_ep_abort_job+0x34>)
   83264:	4413      	add	r3, r2
   83266:	79fa      	ldrb	r2, [r7, #7]
   83268:	2101      	movs	r1, #1
   8326a:	4618      	mov	r0, r3
   8326c:	4b03      	ldr	r3, [pc, #12]	; (8327c <udd_ep_abort_job+0x38>)
   8326e:	4798      	blx	r3
}
   83270:	bf00      	nop
   83272:	3708      	adds	r7, #8
   83274:	46bd      	mov	sp, r7
   83276:	bd80      	pop	{r7, pc}
   83278:	20000d08 	.word	0x20000d08
   8327c:	00083281 	.word	0x00083281

00083280 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   83280:	b580      	push	{r7, lr}
   83282:	b082      	sub	sp, #8
   83284:	af00      	add	r7, sp, #0
   83286:	6078      	str	r0, [r7, #4]
   83288:	460b      	mov	r3, r1
   8328a:	70fb      	strb	r3, [r7, #3]
   8328c:	4613      	mov	r3, r2
   8328e:	70bb      	strb	r3, [r7, #2]
	if (ptr_job->busy == false) {
   83290:	687b      	ldr	r3, [r7, #4]
   83292:	7d1b      	ldrb	r3, [r3, #20]
   83294:	f003 0301 	and.w	r3, r3, #1
   83298:	b2db      	uxtb	r3, r3
   8329a:	2b00      	cmp	r3, #0
   8329c:	d01f      	beq.n	832de <udd_ep_finish_job+0x5e>
		return; // No on-going job
	}
	ptr_job->busy = false;
   8329e:	687a      	ldr	r2, [r7, #4]
   832a0:	7d13      	ldrb	r3, [r2, #20]
   832a2:	f36f 0300 	bfc	r3, #0, #1
   832a6:	7513      	strb	r3, [r2, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   832a8:	687b      	ldr	r3, [r7, #4]
   832aa:	681b      	ldr	r3, [r3, #0]
   832ac:	2b00      	cmp	r3, #0
   832ae:	d018      	beq.n	832e2 <udd_ep_finish_job+0x62>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   832b0:	4a0e      	ldr	r2, [pc, #56]	; (832ec <udd_ep_finish_job+0x6c>)
   832b2:	78bb      	ldrb	r3, [r7, #2]
   832b4:	3308      	adds	r3, #8
   832b6:	015b      	lsls	r3, r3, #5
   832b8:	4413      	add	r3, r2
   832ba:	681b      	ldr	r3, [r3, #0]
   832bc:	f003 0308 	and.w	r3, r3, #8
   832c0:	2b00      	cmp	r3, #0
   832c2:	d003      	beq.n	832cc <udd_ep_finish_job+0x4c>
		ep_num |= USB_EP_DIR_IN;
   832c4:	78bb      	ldrb	r3, [r7, #2]
   832c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   832ca:	70bb      	strb	r3, [r7, #2]
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   832cc:	687b      	ldr	r3, [r7, #4]
   832ce:	681b      	ldr	r3, [r3, #0]
   832d0:	78fa      	ldrb	r2, [r7, #3]
   832d2:	4610      	mov	r0, r2
   832d4:	687a      	ldr	r2, [r7, #4]
   832d6:	6891      	ldr	r1, [r2, #8]
   832d8:	78ba      	ldrb	r2, [r7, #2]
   832da:	4798      	blx	r3
   832dc:	e002      	b.n	832e4 <udd_ep_finish_job+0x64>
		return; // No on-going job
   832de:	bf00      	nop
   832e0:	e000      	b.n	832e4 <udd_ep_finish_job+0x64>
		return; // No callback linked to job
   832e2:	bf00      	nop
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   832e4:	3708      	adds	r7, #8
   832e6:	46bd      	mov	sp, r7
   832e8:	bd80      	pop	{r7, pc}
   832ea:	bf00      	nop
   832ec:	400a4000 	.word	0x400a4000

000832f0 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   832f0:	b580      	push	{r7, lr}
   832f2:	b086      	sub	sp, #24
   832f4:	af00      	add	r7, sp, #0
   832f6:	4603      	mov	r3, r0
   832f8:	71fb      	strb	r3, [r7, #7]
	uint32_t udd_dma_ctrl = 0;
   832fa:	2300      	movs	r3, #0
   832fc:	617b      	str	r3, [r7, #20]
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   832fe:	79fb      	ldrb	r3, [r7, #7]
   83300:	1e5a      	subs	r2, r3, #1
   83302:	4613      	mov	r3, r2
   83304:	005b      	lsls	r3, r3, #1
   83306:	4413      	add	r3, r2
   83308:	00db      	lsls	r3, r3, #3
   8330a:	4a6d      	ldr	r2, [pc, #436]	; (834c0 <udd_ep_trans_done+0x1d0>)
   8330c:	4413      	add	r3, r2
   8330e:	60fb      	str	r3, [r7, #12]

	if (!ptr_job->busy) {
   83310:	68fb      	ldr	r3, [r7, #12]
   83312:	7d1b      	ldrb	r3, [r3, #20]
   83314:	f003 0301 	and.w	r3, r3, #1
   83318:	b2db      	uxtb	r3, r3
   8331a:	2b00      	cmp	r3, #0
   8331c:	f000 80cc 	beq.w	834b8 <udd_ep_trans_done+0x1c8>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   83320:	68fb      	ldr	r3, [r7, #12]
   83322:	68da      	ldr	r2, [r3, #12]
   83324:	68fb      	ldr	r3, [r7, #12]
   83326:	689b      	ldr	r3, [r3, #8]
   83328:	429a      	cmp	r2, r3
   8332a:	f000 8099 	beq.w	83460 <udd_ep_trans_done+0x170>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   8332e:	68fb      	ldr	r3, [r7, #12]
   83330:	689a      	ldr	r2, [r3, #8]
   83332:	68fb      	ldr	r3, [r7, #12]
   83334:	68db      	ldr	r3, [r3, #12]
   83336:	1ad3      	subs	r3, r2, r3
   83338:	613b      	str	r3, [r7, #16]

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   8333a:	693b      	ldr	r3, [r7, #16]
   8333c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   83340:	d905      	bls.n	8334e <udd_ep_trans_done+0x5e>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   83342:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   83346:	613b      	str	r3, [r7, #16]

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   83348:	2300      	movs	r3, #0
   8334a:	617b      	str	r3, [r7, #20]
   8334c:	e002      	b.n	83354 <udd_ep_trans_done+0x64>
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   8334e:	693b      	ldr	r3, [r7, #16]
   83350:	041b      	lsls	r3, r3, #16
   83352:	617b      	str	r3, [r7, #20]
		}
		if (Is_udd_endpoint_in(ep)) {
   83354:	4a5b      	ldr	r2, [pc, #364]	; (834c4 <udd_ep_trans_done+0x1d4>)
   83356:	79fb      	ldrb	r3, [r7, #7]
   83358:	3308      	adds	r3, #8
   8335a:	015b      	lsls	r3, r3, #5
   8335c:	4413      	add	r3, r2
   8335e:	681b      	ldr	r3, [r3, #0]
   83360:	f003 0308 	and.w	r3, r3, #8
   83364:	2b00      	cmp	r3, #0
   83366:	d01d      	beq.n	833a4 <udd_ep_trans_done+0xb4>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   83368:	4a56      	ldr	r2, [pc, #344]	; (834c4 <udd_ep_trans_done+0x1d4>)
   8336a:	79fb      	ldrb	r3, [r7, #7]
   8336c:	3308      	adds	r3, #8
   8336e:	015b      	lsls	r3, r3, #5
   83370:	4413      	add	r3, r2
   83372:	681b      	ldr	r3, [r3, #0]
   83374:	f003 0307 	and.w	r3, r3, #7
   83378:	2208      	movs	r2, #8
   8337a:	fa02 f303 	lsl.w	r3, r2, r3
   8337e:	461a      	mov	r2, r3
   83380:	693b      	ldr	r3, [r7, #16]
   83382:	fbb3 f1f2 	udiv	r1, r3, r2
   83386:	fb02 f201 	mul.w	r2, r2, r1
   8338a:	1a9b      	subs	r3, r3, r2
   8338c:	2b00      	cmp	r3, #0
   8338e:	d027      	beq.n	833e0 <udd_ep_trans_done+0xf0>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   83390:	697b      	ldr	r3, [r7, #20]
   83392:	f043 0308 	orr.w	r3, r3, #8
   83396:	617b      	str	r3, [r7, #20]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   83398:	68fa      	ldr	r2, [r7, #12]
   8339a:	7d13      	ldrb	r3, [r2, #20]
   8339c:	f36f 0341 	bfc	r3, #1, #1
   833a0:	7513      	strb	r3, [r2, #20]
   833a2:	e01d      	b.n	833e0 <udd_ep_trans_done+0xf0>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   833a4:	4a47      	ldr	r2, [pc, #284]	; (834c4 <udd_ep_trans_done+0x1d4>)
   833a6:	79fb      	ldrb	r3, [r7, #7]
   833a8:	3308      	adds	r3, #8
   833aa:	015b      	lsls	r3, r3, #5
   833ac:	4413      	add	r3, r2
   833ae:	681b      	ldr	r3, [r3, #0]
   833b0:	091b      	lsrs	r3, r3, #4
   833b2:	f003 0303 	and.w	r3, r3, #3
   833b6:	2b01      	cmp	r3, #1
   833b8:	d10e      	bne.n	833d8 <udd_ep_trans_done+0xe8>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   833ba:	4a42      	ldr	r2, [pc, #264]	; (834c4 <udd_ep_trans_done+0x1d4>)
   833bc:	79fb      	ldrb	r3, [r7, #7]
   833be:	3308      	adds	r3, #8
   833c0:	015b      	lsls	r3, r3, #5
   833c2:	4413      	add	r3, r2
   833c4:	681b      	ldr	r3, [r3, #0]
   833c6:	f003 0307 	and.w	r3, r3, #7
   833ca:	2208      	movs	r2, #8
   833cc:	fa02 f303 	lsl.w	r3, r2, r3
   833d0:	461a      	mov	r2, r3
   833d2:	693b      	ldr	r3, [r7, #16]
   833d4:	4293      	cmp	r3, r2
   833d6:	d803      	bhi.n	833e0 <udd_ep_trans_done+0xf0>

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   833d8:	697b      	ldr	r3, [r7, #20]
   833da:	f043 0314 	orr.w	r3, r3, #20
   833de:	617b      	str	r3, [r7, #20]
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   833e0:	68fb      	ldr	r3, [r7, #12]
   833e2:	685a      	ldr	r2, [r3, #4]
   833e4:	68fb      	ldr	r3, [r7, #12]
   833e6:	68db      	ldr	r3, [r3, #12]
   833e8:	18d1      	adds	r1, r2, r3
   833ea:	79fb      	ldrb	r3, [r7, #7]
   833ec:	011a      	lsls	r2, r3, #4
   833ee:	4b36      	ldr	r3, [pc, #216]	; (834c8 <udd_ep_trans_done+0x1d8>)
   833f0:	4413      	add	r3, r2
   833f2:	460a      	mov	r2, r1
   833f4:	605a      	str	r2, [r3, #4]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   833f6:	697b      	ldr	r3, [r7, #20]
   833f8:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   833fc:	617b      	str	r3, [r7, #20]

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
   833fe:	4b33      	ldr	r3, [pc, #204]	; (834cc <udd_ep_trans_done+0x1dc>)
   83400:	4798      	blx	r3
   83402:	60b8      	str	r0, [r7, #8]
		if (!(udd_endpoint_dma_get_status(ep)
   83404:	79fb      	ldrb	r3, [r7, #7]
   83406:	011a      	lsls	r2, r3, #4
   83408:	4b2f      	ldr	r3, [pc, #188]	; (834c8 <udd_ep_trans_done+0x1d8>)
   8340a:	4413      	add	r3, r2
   8340c:	68db      	ldr	r3, [r3, #12]
				& UDPHS_DMASTATUS_END_TR_ST)) {
   8340e:	f003 0310 	and.w	r3, r3, #16
		if (!(udd_endpoint_dma_get_status(ep)
   83412:	2b00      	cmp	r3, #0
   83414:	d11d      	bne.n	83452 <udd_ep_trans_done+0x162>
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   83416:	79fb      	ldrb	r3, [r7, #7]
   83418:	011a      	lsls	r2, r3, #4
   8341a:	4b2b      	ldr	r3, [pc, #172]	; (834c8 <udd_ep_trans_done+0x1d8>)
   8341c:	4413      	add	r3, r2
   8341e:	697a      	ldr	r2, [r7, #20]
   83420:	609a      	str	r2, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   83422:	68fb      	ldr	r3, [r7, #12]
   83424:	68da      	ldr	r2, [r3, #12]
   83426:	693b      	ldr	r3, [r7, #16]
   83428:	441a      	add	r2, r3
   8342a:	68fb      	ldr	r3, [r7, #12]
   8342c:	60da      	str	r2, [r3, #12]
			ptr_job->buf_load = next_trans;
   8342e:	68fb      	ldr	r3, [r7, #12]
   83430:	693a      	ldr	r2, [r7, #16]
   83432:	611a      	str	r2, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   83434:	4b23      	ldr	r3, [pc, #140]	; (834c4 <udd_ep_trans_done+0x1d4>)
   83436:	691a      	ldr	r2, [r3, #16]
   83438:	79fb      	ldrb	r3, [r7, #7]
   8343a:	3b01      	subs	r3, #1
   8343c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   83440:	fa01 f303 	lsl.w	r3, r1, r3
   83444:	491f      	ldr	r1, [pc, #124]	; (834c4 <udd_ep_trans_done+0x1d4>)
   83446:	4313      	orrs	r3, r2
   83448:	610b      	str	r3, [r1, #16]
			cpu_irq_restore(flags);
   8344a:	68b8      	ldr	r0, [r7, #8]
   8344c:	4b20      	ldr	r3, [pc, #128]	; (834d0 <udd_ep_trans_done+0x1e0>)
   8344e:	4798      	blx	r3
			return;
   83450:	e033      	b.n	834ba <udd_ep_trans_done+0x1ca>
		}
		cpu_irq_restore(flags);
   83452:	68b8      	ldr	r0, [r7, #8]
   83454:	4b1e      	ldr	r3, [pc, #120]	; (834d0 <udd_ep_trans_done+0x1e0>)
   83456:	4798      	blx	r3

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   83458:	68fb      	ldr	r3, [r7, #12]
   8345a:	68da      	ldr	r2, [r3, #12]
   8345c:	68fb      	ldr	r3, [r7, #12]
   8345e:	609a      	str	r2, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   83460:	4a18      	ldr	r2, [pc, #96]	; (834c4 <udd_ep_trans_done+0x1d4>)
   83462:	79fb      	ldrb	r3, [r7, #7]
   83464:	3308      	adds	r3, #8
   83466:	015b      	lsls	r3, r3, #5
   83468:	4413      	add	r3, r2
   8346a:	681b      	ldr	r3, [r3, #0]
   8346c:	f003 0308 	and.w	r3, r3, #8
   83470:	2b00      	cmp	r3, #0
   83472:	d01a      	beq.n	834aa <udd_ep_trans_done+0x1ba>
		if (ptr_job->b_shortpacket) {
   83474:	68fb      	ldr	r3, [r7, #12]
   83476:	7d1b      	ldrb	r3, [r3, #20]
   83478:	f003 0302 	and.w	r3, r3, #2
   8347c:	b2db      	uxtb	r3, r3
   8347e:	2b00      	cmp	r3, #0
   83480:	d013      	beq.n	834aa <udd_ep_trans_done+0x1ba>
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   83482:	4a10      	ldr	r2, [pc, #64]	; (834c4 <udd_ep_trans_done+0x1d4>)
   83484:	79fb      	ldrb	r3, [r7, #7]
   83486:	3308      	adds	r3, #8
   83488:	015b      	lsls	r3, r3, #5
   8348a:	4413      	add	r3, r2
   8348c:	3304      	adds	r3, #4
   8348e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   83492:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep);
   83494:	4b0b      	ldr	r3, [pc, #44]	; (834c4 <udd_ep_trans_done+0x1d4>)
   83496:	691a      	ldr	r2, [r3, #16]
   83498:	79fb      	ldrb	r3, [r7, #7]
   8349a:	f44f 7180 	mov.w	r1, #256	; 0x100
   8349e:	fa01 f303 	lsl.w	r3, r1, r3
   834a2:	4908      	ldr	r1, [pc, #32]	; (834c4 <udd_ep_trans_done+0x1d4>)
   834a4:	4313      	orrs	r3, r2
   834a6:	610b      	str	r3, [r1, #16]
			return;
   834a8:	e007      	b.n	834ba <udd_ep_trans_done+0x1ca>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   834aa:	79fb      	ldrb	r3, [r7, #7]
   834ac:	461a      	mov	r2, r3
   834ae:	2100      	movs	r1, #0
   834b0:	68f8      	ldr	r0, [r7, #12]
   834b2:	4b08      	ldr	r3, [pc, #32]	; (834d4 <udd_ep_trans_done+0x1e4>)
   834b4:	4798      	blx	r3
   834b6:	e000      	b.n	834ba <udd_ep_trans_done+0x1ca>
		return; // No job is running, then ignore it (system error)
   834b8:	bf00      	nop
}
   834ba:	3718      	adds	r7, #24
   834bc:	46bd      	mov	sp, r7
   834be:	bd80      	pop	{r7, pc}
   834c0:	20000d08 	.word	0x20000d08
   834c4:	400a4000 	.word	0x400a4000
   834c8:	400a4300 	.word	0x400a4300
   834cc:	00081b09 	.word	0x00081b09
   834d0:	00081b61 	.word	0x00081b61
   834d4:	00083281 	.word	0x00083281

000834d8 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
   834d8:	b580      	push	{r7, lr}
   834da:	b084      	sub	sp, #16
   834dc:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   834de:	2301      	movs	r3, #1
   834e0:	73fb      	strb	r3, [r7, #15]
   834e2:	e0e0      	b.n	836a6 <udd_ep_interrupt+0x1ce>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   834e4:	7bfb      	ldrb	r3, [r7, #15]
   834e6:	1e5a      	subs	r2, r3, #1
   834e8:	4613      	mov	r3, r2
   834ea:	005b      	lsls	r3, r3, #1
   834ec:	4413      	add	r3, r2
   834ee:	00db      	lsls	r3, r3, #3
   834f0:	4a71      	ldr	r2, [pc, #452]	; (836b8 <udd_ep_interrupt+0x1e0>)
   834f2:	4413      	add	r3, r2
   834f4:	60bb      	str	r3, [r7, #8]

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   834f6:	4b71      	ldr	r3, [pc, #452]	; (836bc <udd_ep_interrupt+0x1e4>)
   834f8:	691a      	ldr	r2, [r3, #16]
   834fa:	7bfb      	ldrb	r3, [r7, #15]
   834fc:	3b01      	subs	r3, #1
   834fe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   83502:	fa01 f303 	lsl.w	r3, r1, r3
   83506:	4013      	ands	r3, r2
   83508:	2b00      	cmp	r3, #0
   8350a:	d03c      	beq.n	83586 <udd_ep_interrupt+0xae>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   8350c:	4b6b      	ldr	r3, [pc, #428]	; (836bc <udd_ep_interrupt+0x1e4>)
   8350e:	695a      	ldr	r2, [r3, #20]
   83510:	7bfb      	ldrb	r3, [r7, #15]
   83512:	3b01      	subs	r3, #1
   83514:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   83518:	fa01 f303 	lsl.w	r3, r1, r3
   8351c:	4013      	ands	r3, r2
   8351e:	2b00      	cmp	r3, #0
   83520:	d031      	beq.n	83586 <udd_ep_interrupt+0xae>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   83522:	7bfb      	ldrb	r3, [r7, #15]
   83524:	011a      	lsls	r2, r3, #4
   83526:	4b66      	ldr	r3, [pc, #408]	; (836c0 <udd_ep_interrupt+0x1e8>)
   83528:	4413      	add	r3, r2
   8352a:	68db      	ldr	r3, [r3, #12]
					& UDPHS_DMASTATUS_CHANN_ENB) {
   8352c:	f003 0301 	and.w	r3, r3, #1
			if (udd_endpoint_dma_get_status(ep)
   83530:	2b00      	cmp	r3, #0
   83532:	d001      	beq.n	83538 <udd_ep_interrupt+0x60>
				return true; // Ignore EOT_STA interrupt
   83534:	2301      	movs	r3, #1
   83536:	e0bb      	b.n	836b0 <udd_ep_interrupt+0x1d8>
			}
			dbg_print("dma%d: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   83538:	4b60      	ldr	r3, [pc, #384]	; (836bc <udd_ep_interrupt+0x1e4>)
   8353a:	691a      	ldr	r2, [r3, #16]
   8353c:	7bfb      	ldrb	r3, [r7, #15]
   8353e:	3b01      	subs	r3, #1
   83540:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   83544:	fa01 f303 	lsl.w	r3, r1, r3
   83548:	43db      	mvns	r3, r3
   8354a:	495c      	ldr	r1, [pc, #368]	; (836bc <udd_ep_interrupt+0x1e4>)
   8354c:	4013      	ands	r3, r2
   8354e:	610b      	str	r3, [r1, #16]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   83550:	7bfb      	ldrb	r3, [r7, #15]
   83552:	011a      	lsls	r2, r3, #4
   83554:	4b5a      	ldr	r3, [pc, #360]	; (836c0 <udd_ep_interrupt+0x1e8>)
   83556:	4413      	add	r3, r2
   83558:	68db      	ldr	r3, [r3, #12]
					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
   8355a:	0c1b      	lsrs	r3, r3, #16
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   8355c:	b29b      	uxth	r3, r3
   8355e:	607b      	str	r3, [r7, #4]
			if (nb_remaining) {
   83560:	687b      	ldr	r3, [r7, #4]
   83562:	2b00      	cmp	r3, #0
   83564:	d009      	beq.n	8357a <udd_ep_interrupt+0xa2>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   83566:	68bb      	ldr	r3, [r7, #8]
   83568:	68da      	ldr	r2, [r3, #12]
   8356a:	687b      	ldr	r3, [r7, #4]
   8356c:	1ad2      	subs	r2, r2, r3
   8356e:	68bb      	ldr	r3, [r7, #8]
   83570:	60da      	str	r2, [r3, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   83572:	68bb      	ldr	r3, [r7, #8]
   83574:	68da      	ldr	r2, [r3, #12]
   83576:	68bb      	ldr	r3, [r7, #8]
   83578:	609a      	str	r2, [r3, #8]
			}
			udd_ep_trans_done(ep);
   8357a:	7bfb      	ldrb	r3, [r7, #15]
   8357c:	4618      	mov	r0, r3
   8357e:	4b51      	ldr	r3, [pc, #324]	; (836c4 <udd_ep_interrupt+0x1ec>)
   83580:	4798      	blx	r3
			return true;
   83582:	2301      	movs	r3, #1
   83584:	e094      	b.n	836b0 <udd_ep_interrupt+0x1d8>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   83586:	4b4d      	ldr	r3, [pc, #308]	; (836bc <udd_ep_interrupt+0x1e4>)
   83588:	691a      	ldr	r2, [r3, #16]
   8358a:	7bfb      	ldrb	r3, [r7, #15]
   8358c:	f44f 7180 	mov.w	r1, #256	; 0x100
   83590:	fa01 f303 	lsl.w	r3, r1, r3
   83594:	4013      	ands	r3, r2
   83596:	2b00      	cmp	r3, #0
   83598:	f000 8082 	beq.w	836a0 <udd_ep_interrupt+0x1c8>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   8359c:	4a47      	ldr	r2, [pc, #284]	; (836bc <udd_ep_interrupt+0x1e4>)
   8359e:	7bfb      	ldrb	r3, [r7, #15]
   835a0:	015b      	lsls	r3, r3, #5
   835a2:	4413      	add	r3, r2
   835a4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   835a8:	681b      	ldr	r3, [r3, #0]
   835aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   835ae:	2b00      	cmp	r3, #0
   835b0:	d024      	beq.n	835fc <udd_ep_interrupt+0x124>
					&& !Is_udd_tx_pkt_ready(ep)) {
   835b2:	4a42      	ldr	r2, [pc, #264]	; (836bc <udd_ep_interrupt+0x1e4>)
   835b4:	7bfb      	ldrb	r3, [r7, #15]
   835b6:	015b      	lsls	r3, r3, #5
   835b8:	4413      	add	r3, r2
   835ba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   835be:	681b      	ldr	r3, [r3, #0]
   835c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   835c4:	2b00      	cmp	r3, #0
   835c6:	d119      	bne.n	835fc <udd_ep_interrupt+0x124>
				udd_disable_tx_pkt_ready_interrupt(ep);
   835c8:	4a3c      	ldr	r2, [pc, #240]	; (836bc <udd_ep_interrupt+0x1e4>)
   835ca:	7bfb      	ldrb	r3, [r7, #15]
   835cc:	015b      	lsls	r3, r3, #5
   835ce:	4413      	add	r3, r2
   835d0:	f503 7384 	add.w	r3, r3, #264	; 0x108
   835d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   835d8:	601a      	str	r2, [r3, #0]
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   835da:	4a38      	ldr	r2, [pc, #224]	; (836bc <udd_ep_interrupt+0x1e4>)
   835dc:	7bfb      	ldrb	r3, [r7, #15]
   835de:	015b      	lsls	r3, r3, #5
   835e0:	4413      	add	r3, r2
   835e2:	f503 738a 	add.w	r3, r3, #276	; 0x114
   835e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   835ea:	601a      	str	r2, [r3, #0]
				udd_ep_finish_job(ptr_job, false, ep);
   835ec:	7bfb      	ldrb	r3, [r7, #15]
   835ee:	461a      	mov	r2, r3
   835f0:	2100      	movs	r1, #0
   835f2:	68b8      	ldr	r0, [r7, #8]
   835f4:	4b34      	ldr	r3, [pc, #208]	; (836c8 <udd_ep_interrupt+0x1f0>)
   835f6:	4798      	blx	r3
				return true;
   835f8:	2301      	movs	r3, #1
   835fa:	e059      	b.n	836b0 <udd_ep_interrupt+0x1d8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   835fc:	4a2f      	ldr	r2, [pc, #188]	; (836bc <udd_ep_interrupt+0x1e4>)
   835fe:	7bfb      	ldrb	r3, [r7, #15]
   83600:	015b      	lsls	r3, r3, #5
   83602:	4413      	add	r3, r2
   83604:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   83608:	681b      	ldr	r3, [r3, #0]
   8360a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   8360e:	2b00      	cmp	r3, #0
   83610:	d046      	beq.n	836a0 <udd_ep_interrupt+0x1c8>
					&& (0 == udd_nb_busy_bank(ep))) {
   83612:	4a2a      	ldr	r2, [pc, #168]	; (836bc <udd_ep_interrupt+0x1e4>)
   83614:	7bfb      	ldrb	r3, [r7, #15]
   83616:	015b      	lsls	r3, r3, #5
   83618:	4413      	add	r3, r2
   8361a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8361e:	681b      	ldr	r3, [r3, #0]
   83620:	0c9b      	lsrs	r3, r3, #18
   83622:	f003 0303 	and.w	r3, r3, #3
   83626:	2b00      	cmp	r3, #0
   83628:	d13a      	bne.n	836a0 <udd_ep_interrupt+0x1c8>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   8362a:	4a24      	ldr	r2, [pc, #144]	; (836bc <udd_ep_interrupt+0x1e4>)
   8362c:	7bfb      	ldrb	r3, [r7, #15]
   8362e:	015b      	lsls	r3, r3, #5
   83630:	4413      	add	r3, r2
   83632:	f503 7384 	add.w	r3, r3, #264	; 0x108
   83636:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   8363a:	601a      	str	r2, [r3, #0]
				udd_disable_endpoint_interrupt(ep);
   8363c:	4b1f      	ldr	r3, [pc, #124]	; (836bc <udd_ep_interrupt+0x1e4>)
   8363e:	691a      	ldr	r2, [r3, #16]
   83640:	7bfb      	ldrb	r3, [r7, #15]
   83642:	f44f 7180 	mov.w	r1, #256	; 0x100
   83646:	fa01 f303 	lsl.w	r3, r1, r3
   8364a:	43db      	mvns	r3, r3
   8364c:	491b      	ldr	r1, [pc, #108]	; (836bc <udd_ep_interrupt+0x1e4>)
   8364e:	4013      	ands	r3, r2
   83650:	610b      	str	r3, [r1, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   83652:	68ba      	ldr	r2, [r7, #8]
   83654:	7d13      	ldrb	r3, [r2, #20]
   83656:	f36f 0382 	bfc	r3, #2, #1
   8365a:	7513      	strb	r3, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   8365c:	4a17      	ldr	r2, [pc, #92]	; (836bc <udd_ep_interrupt+0x1e4>)
   8365e:	7bfb      	ldrb	r3, [r7, #15]
   83660:	015b      	lsls	r3, r3, #5
   83662:	4413      	add	r3, r2
   83664:	f503 7384 	add.w	r3, r3, #264	; 0x108
   83668:	681a      	ldr	r2, [r3, #0]
   8366a:	4914      	ldr	r1, [pc, #80]	; (836bc <udd_ep_interrupt+0x1e4>)
   8366c:	7bfb      	ldrb	r3, [r7, #15]
   8366e:	f022 0202 	bic.w	r2, r2, #2
   83672:	015b      	lsls	r3, r3, #5
   83674:	440b      	add	r3, r1
   83676:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8367a:	601a      	str	r2, [r3, #0]
				udd_enable_stall_handshake(ep);
   8367c:	4a0f      	ldr	r2, [pc, #60]	; (836bc <udd_ep_interrupt+0x1e4>)
   8367e:	7bfb      	ldrb	r3, [r7, #15]
   83680:	015b      	lsls	r3, r3, #5
   83682:	4413      	add	r3, r2
   83684:	f503 738a 	add.w	r3, r3, #276	; 0x114
   83688:	2220      	movs	r2, #32
   8368a:	601a      	str	r2, [r3, #0]
				udd_reset_data_toggle(ep);
   8368c:	4a0b      	ldr	r2, [pc, #44]	; (836bc <udd_ep_interrupt+0x1e4>)
   8368e:	7bfb      	ldrb	r3, [r7, #15]
   83690:	015b      	lsls	r3, r3, #5
   83692:	4413      	add	r3, r2
   83694:	f503 738c 	add.w	r3, r3, #280	; 0x118
   83698:	2240      	movs	r2, #64	; 0x40
   8369a:	601a      	str	r2, [r3, #0]
				//dbg_print("exHalt%x ", ep);
				return true;
   8369c:	2301      	movs	r3, #1
   8369e:	e007      	b.n	836b0 <udd_ep_interrupt+0x1d8>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   836a0:	7bfb      	ldrb	r3, [r7, #15]
   836a2:	3301      	adds	r3, #1
   836a4:	73fb      	strb	r3, [r7, #15]
   836a6:	7bfb      	ldrb	r3, [r7, #15]
   836a8:	2b02      	cmp	r3, #2
   836aa:	f67f af1b 	bls.w	834e4 <udd_ep_interrupt+0xc>
			}
		}
	}
	return false;
   836ae:	2300      	movs	r3, #0
}
   836b0:	4618      	mov	r0, r3
   836b2:	3710      	adds	r7, #16
   836b4:	46bd      	mov	sp, r7
   836b6:	bd80      	pop	{r7, pc}
   836b8:	20000d08 	.word	0x20000d08
   836bc:	400a4000 	.word	0x400a4000
   836c0:	400a4300 	.word	0x400a4300
   836c4:	000832f1 	.word	0x000832f1
   836c8:	00083281 	.word	0x00083281

000836cc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   836cc:	b580      	push	{r7, lr}
   836ce:	b082      	sub	sp, #8
   836d0:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   836d2:	4b1e      	ldr	r3, [pc, #120]	; (8374c <Reset_Handler+0x80>)
   836d4:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   836d6:	4b1e      	ldr	r3, [pc, #120]	; (83750 <Reset_Handler+0x84>)
   836d8:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   836da:	687a      	ldr	r2, [r7, #4]
   836dc:	683b      	ldr	r3, [r7, #0]
   836de:	429a      	cmp	r2, r3
   836e0:	d00c      	beq.n	836fc <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   836e2:	e007      	b.n	836f4 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   836e4:	687a      	ldr	r2, [r7, #4]
   836e6:	1d13      	adds	r3, r2, #4
   836e8:	607b      	str	r3, [r7, #4]
   836ea:	683b      	ldr	r3, [r7, #0]
   836ec:	1d19      	adds	r1, r3, #4
   836ee:	6039      	str	r1, [r7, #0]
   836f0:	6812      	ldr	r2, [r2, #0]
   836f2:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   836f4:	683b      	ldr	r3, [r7, #0]
   836f6:	4a17      	ldr	r2, [pc, #92]	; (83754 <Reset_Handler+0x88>)
   836f8:	4293      	cmp	r3, r2
   836fa:	d3f3      	bcc.n	836e4 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   836fc:	4b16      	ldr	r3, [pc, #88]	; (83758 <Reset_Handler+0x8c>)
   836fe:	603b      	str	r3, [r7, #0]
   83700:	e004      	b.n	8370c <Reset_Handler+0x40>
		*pDest++ = 0;
   83702:	683b      	ldr	r3, [r7, #0]
   83704:	1d1a      	adds	r2, r3, #4
   83706:	603a      	str	r2, [r7, #0]
   83708:	2200      	movs	r2, #0
   8370a:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   8370c:	683b      	ldr	r3, [r7, #0]
   8370e:	4a13      	ldr	r2, [pc, #76]	; (8375c <Reset_Handler+0x90>)
   83710:	4293      	cmp	r3, r2
   83712:	d3f6      	bcc.n	83702 <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   83714:	4b12      	ldr	r3, [pc, #72]	; (83760 <Reset_Handler+0x94>)
   83716:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   83718:	687b      	ldr	r3, [r7, #4]
   8371a:	4a12      	ldr	r2, [pc, #72]	; (83764 <Reset_Handler+0x98>)
   8371c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   83720:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   83724:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   83726:	687b      	ldr	r3, [r7, #4]
   83728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   8372c:	d309      	bcc.n	83742 <Reset_Handler+0x76>
   8372e:	687b      	ldr	r3, [r7, #4]
   83730:	4a0d      	ldr	r2, [pc, #52]	; (83768 <Reset_Handler+0x9c>)
   83732:	4293      	cmp	r3, r2
   83734:	d805      	bhi.n	83742 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   83736:	4b0b      	ldr	r3, [pc, #44]	; (83764 <Reset_Handler+0x98>)
   83738:	689b      	ldr	r3, [r3, #8]
   8373a:	4a0a      	ldr	r2, [pc, #40]	; (83764 <Reset_Handler+0x98>)
   8373c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83740:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   83742:	4b0a      	ldr	r3, [pc, #40]	; (8376c <Reset_Handler+0xa0>)
   83744:	4798      	blx	r3

	/* Branch to main function */
	main();
   83746:	4b0a      	ldr	r3, [pc, #40]	; (83770 <Reset_Handler+0xa4>)
   83748:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   8374a:	e7fe      	b.n	8374a <Reset_Handler+0x7e>
   8374c:	00085cbc 	.word	0x00085cbc
   83750:	20000000 	.word	0x20000000
   83754:	200007dc 	.word	0x200007dc
   83758:	200007dc 	.word	0x200007dc
   8375c:	20000d9c 	.word	0x20000d9c
   83760:	00080000 	.word	0x00080000
   83764:	e000ed00 	.word	0xe000ed00
   83768:	20003fff 	.word	0x20003fff
   8376c:	00085b35 	.word	0x00085b35
   83770:	00080b3d 	.word	0x00080b3d

00083774 <osc_enable>:
{
   83774:	b580      	push	{r7, lr}
   83776:	b082      	sub	sp, #8
   83778:	af00      	add	r7, sp, #0
   8377a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8377c:	687b      	ldr	r3, [r7, #4]
   8377e:	2b07      	cmp	r3, #7
   83780:	d82e      	bhi.n	837e0 <osc_enable+0x6c>
   83782:	a201      	add	r2, pc, #4	; (adr r2, 83788 <osc_enable+0x14>)
   83784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83788:	000837df 	.word	0x000837df
   8378c:	000837a9 	.word	0x000837a9
   83790:	000837b1 	.word	0x000837b1
   83794:	000837b9 	.word	0x000837b9
   83798:	000837c1 	.word	0x000837c1
   8379c:	000837c9 	.word	0x000837c9
   837a0:	000837d1 	.word	0x000837d1
   837a4:	000837d9 	.word	0x000837d9
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   837a8:	2000      	movs	r0, #0
   837aa:	4b0f      	ldr	r3, [pc, #60]	; (837e8 <osc_enable+0x74>)
   837ac:	4798      	blx	r3
		break;
   837ae:	e017      	b.n	837e0 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   837b0:	2001      	movs	r0, #1
   837b2:	4b0d      	ldr	r3, [pc, #52]	; (837e8 <osc_enable+0x74>)
   837b4:	4798      	blx	r3
		break;
   837b6:	e013      	b.n	837e0 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   837b8:	2000      	movs	r0, #0
   837ba:	4b0c      	ldr	r3, [pc, #48]	; (837ec <osc_enable+0x78>)
   837bc:	4798      	blx	r3
		break;
   837be:	e00f      	b.n	837e0 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   837c0:	2010      	movs	r0, #16
   837c2:	4b0a      	ldr	r3, [pc, #40]	; (837ec <osc_enable+0x78>)
   837c4:	4798      	blx	r3
		break;
   837c6:	e00b      	b.n	837e0 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   837c8:	2020      	movs	r0, #32
   837ca:	4b08      	ldr	r3, [pc, #32]	; (837ec <osc_enable+0x78>)
   837cc:	4798      	blx	r3
		break;
   837ce:	e007      	b.n	837e0 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   837d0:	203e      	movs	r0, #62	; 0x3e
   837d2:	4b07      	ldr	r3, [pc, #28]	; (837f0 <osc_enable+0x7c>)
   837d4:	4798      	blx	r3
		break;
   837d6:	e003      	b.n	837e0 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   837d8:	4b06      	ldr	r3, [pc, #24]	; (837f4 <osc_enable+0x80>)
   837da:	4798      	blx	r3
		break;
   837dc:	e000      	b.n	837e0 <osc_enable+0x6c>
		break;
   837de:	bf00      	nop
}
   837e0:	bf00      	nop
   837e2:	3708      	adds	r7, #8
   837e4:	46bd      	mov	sp, r7
   837e6:	bd80      	pop	{r7, pc}
   837e8:	00083c45 	.word	0x00083c45
   837ec:	00083cb1 	.word	0x00083cb1
   837f0:	00083d25 	.word	0x00083d25
   837f4:	00083d71 	.word	0x00083d71

000837f8 <osc_is_ready>:
{
   837f8:	b580      	push	{r7, lr}
   837fa:	b082      	sub	sp, #8
   837fc:	af00      	add	r7, sp, #0
   837fe:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83800:	687b      	ldr	r3, [r7, #4]
   83802:	2b07      	cmp	r3, #7
   83804:	d82f      	bhi.n	83866 <osc_is_ready+0x6e>
   83806:	a201      	add	r2, pc, #4	; (adr r2, 8380c <osc_is_ready+0x14>)
   83808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8380c:	0008382d 	.word	0x0008382d
   83810:	00083831 	.word	0x00083831
   83814:	00083831 	.word	0x00083831
   83818:	00083843 	.word	0x00083843
   8381c:	00083843 	.word	0x00083843
   83820:	00083843 	.word	0x00083843
   83824:	00083855 	.word	0x00083855
   83828:	00083855 	.word	0x00083855
		return 1;
   8382c:	2301      	movs	r3, #1
   8382e:	e01b      	b.n	83868 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   83830:	4b0f      	ldr	r3, [pc, #60]	; (83870 <osc_is_ready+0x78>)
   83832:	4798      	blx	r3
   83834:	4603      	mov	r3, r0
   83836:	2b00      	cmp	r3, #0
   83838:	bf14      	ite	ne
   8383a:	2301      	movne	r3, #1
   8383c:	2300      	moveq	r3, #0
   8383e:	b2db      	uxtb	r3, r3
   83840:	e012      	b.n	83868 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   83842:	4b0c      	ldr	r3, [pc, #48]	; (83874 <osc_is_ready+0x7c>)
   83844:	4798      	blx	r3
   83846:	4603      	mov	r3, r0
   83848:	2b00      	cmp	r3, #0
   8384a:	bf14      	ite	ne
   8384c:	2301      	movne	r3, #1
   8384e:	2300      	moveq	r3, #0
   83850:	b2db      	uxtb	r3, r3
   83852:	e009      	b.n	83868 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   83854:	4b08      	ldr	r3, [pc, #32]	; (83878 <osc_is_ready+0x80>)
   83856:	4798      	blx	r3
   83858:	4603      	mov	r3, r0
   8385a:	2b00      	cmp	r3, #0
   8385c:	bf14      	ite	ne
   8385e:	2301      	movne	r3, #1
   83860:	2300      	moveq	r3, #0
   83862:	b2db      	uxtb	r3, r3
   83864:	e000      	b.n	83868 <osc_is_ready+0x70>
	return 0;
   83866:	2300      	movs	r3, #0
}
   83868:	4618      	mov	r0, r3
   8386a:	3708      	adds	r7, #8
   8386c:	46bd      	mov	sp, r7
   8386e:	bd80      	pop	{r7, pc}
   83870:	00083c7d 	.word	0x00083c7d
   83874:	00083d0d 	.word	0x00083d0d
   83878:	00083dbd 	.word	0x00083dbd

0008387c <osc_get_rate>:
{
   8387c:	b480      	push	{r7}
   8387e:	b083      	sub	sp, #12
   83880:	af00      	add	r7, sp, #0
   83882:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83884:	687b      	ldr	r3, [r7, #4]
   83886:	2b07      	cmp	r3, #7
   83888:	d823      	bhi.n	838d2 <osc_get_rate+0x56>
   8388a:	a201      	add	r2, pc, #4	; (adr r2, 83890 <osc_get_rate+0x14>)
   8388c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83890:	000838b1 	.word	0x000838b1
   83894:	000838b7 	.word	0x000838b7
   83898:	000838bb 	.word	0x000838bb
   8389c:	000838bf 	.word	0x000838bf
   838a0:	000838c3 	.word	0x000838c3
   838a4:	000838c7 	.word	0x000838c7
   838a8:	000838cb 	.word	0x000838cb
   838ac:	000838cf 	.word	0x000838cf
		return OSC_SLCK_32K_RC_HZ;
   838b0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   838b4:	e00e      	b.n	838d4 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   838b6:	2300      	movs	r3, #0
   838b8:	e00c      	b.n	838d4 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   838ba:	2300      	movs	r3, #0
   838bc:	e00a      	b.n	838d4 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   838be:	4b08      	ldr	r3, [pc, #32]	; (838e0 <osc_get_rate+0x64>)
   838c0:	e008      	b.n	838d4 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   838c2:	4b08      	ldr	r3, [pc, #32]	; (838e4 <osc_get_rate+0x68>)
   838c4:	e006      	b.n	838d4 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   838c6:	4b08      	ldr	r3, [pc, #32]	; (838e8 <osc_get_rate+0x6c>)
   838c8:	e004      	b.n	838d4 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   838ca:	4b07      	ldr	r3, [pc, #28]	; (838e8 <osc_get_rate+0x6c>)
   838cc:	e002      	b.n	838d4 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   838ce:	4b06      	ldr	r3, [pc, #24]	; (838e8 <osc_get_rate+0x6c>)
   838d0:	e000      	b.n	838d4 <osc_get_rate+0x58>
	return 0;
   838d2:	2300      	movs	r3, #0
}
   838d4:	4618      	mov	r0, r3
   838d6:	370c      	adds	r7, #12
   838d8:	46bd      	mov	sp, r7
   838da:	bc80      	pop	{r7}
   838dc:	4770      	bx	lr
   838de:	bf00      	nop
   838e0:	003d0900 	.word	0x003d0900
   838e4:	007a1200 	.word	0x007a1200
   838e8:	00b71b00 	.word	0x00b71b00

000838ec <osc_wait_ready>:
{
   838ec:	b580      	push	{r7, lr}
   838ee:	b082      	sub	sp, #8
   838f0:	af00      	add	r7, sp, #0
   838f2:	4603      	mov	r3, r0
   838f4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   838f6:	bf00      	nop
   838f8:	79fb      	ldrb	r3, [r7, #7]
   838fa:	4618      	mov	r0, r3
   838fc:	4b05      	ldr	r3, [pc, #20]	; (83914 <osc_wait_ready+0x28>)
   838fe:	4798      	blx	r3
   83900:	4603      	mov	r3, r0
   83902:	f083 0301 	eor.w	r3, r3, #1
   83906:	b2db      	uxtb	r3, r3
   83908:	2b00      	cmp	r3, #0
   8390a:	d1f5      	bne.n	838f8 <osc_wait_ready+0xc>
}
   8390c:	bf00      	nop
   8390e:	3708      	adds	r7, #8
   83910:	46bd      	mov	sp, r7
   83912:	bd80      	pop	{r7, pc}
   83914:	000837f9 	.word	0x000837f9

00083918 <pll_config_init>:
{
   83918:	b580      	push	{r7, lr}
   8391a:	b086      	sub	sp, #24
   8391c:	af00      	add	r7, sp, #0
   8391e:	60f8      	str	r0, [r7, #12]
   83920:	607a      	str	r2, [r7, #4]
   83922:	603b      	str	r3, [r7, #0]
   83924:	460b      	mov	r3, r1
   83926:	72fb      	strb	r3, [r7, #11]
	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   83928:	687b      	ldr	r3, [r7, #4]
   8392a:	2b00      	cmp	r3, #0
   8392c:	d107      	bne.n	8393e <pll_config_init+0x26>
   8392e:	683b      	ldr	r3, [r7, #0]
   83930:	2b00      	cmp	r3, #0
   83932:	d104      	bne.n	8393e <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   83934:	68fb      	ldr	r3, [r7, #12]
   83936:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8393a:	601a      	str	r2, [r3, #0]
   8393c:	e019      	b.n	83972 <pll_config_init+0x5a>
		vco_hz = osc_get_rate(e_src) / ul_div;
   8393e:	7afb      	ldrb	r3, [r7, #11]
   83940:	4618      	mov	r0, r3
   83942:	4b0e      	ldr	r3, [pc, #56]	; (8397c <pll_config_init+0x64>)
   83944:	4798      	blx	r3
   83946:	4602      	mov	r2, r0
   83948:	687b      	ldr	r3, [r7, #4]
   8394a:	fbb2 f3f3 	udiv	r3, r2, r3
   8394e:	617b      	str	r3, [r7, #20]
		vco_hz *= ul_mul;
   83950:	697b      	ldr	r3, [r7, #20]
   83952:	683a      	ldr	r2, [r7, #0]
   83954:	fb02 f303 	mul.w	r3, r2, r3
   83958:	617b      	str	r3, [r7, #20]
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   8395a:	683b      	ldr	r3, [r7, #0]
   8395c:	3b01      	subs	r3, #1
   8395e:	041a      	lsls	r2, r3, #16
   83960:	4b07      	ldr	r3, [pc, #28]	; (83980 <pll_config_init+0x68>)
   83962:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   83964:	687a      	ldr	r2, [r7, #4]
   83966:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   83968:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   8396a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   8396e:	68fb      	ldr	r3, [r7, #12]
   83970:	601a      	str	r2, [r3, #0]
}
   83972:	bf00      	nop
   83974:	3718      	adds	r7, #24
   83976:	46bd      	mov	sp, r7
   83978:	bd80      	pop	{r7, pc}
   8397a:	bf00      	nop
   8397c:	0008387d 	.word	0x0008387d
   83980:	07ff0000 	.word	0x07ff0000

00083984 <pll_enable>:
{
   83984:	b580      	push	{r7, lr}
   83986:	b082      	sub	sp, #8
   83988:	af00      	add	r7, sp, #0
   8398a:	6078      	str	r0, [r7, #4]
   8398c:	6039      	str	r1, [r7, #0]
	if (ul_pll_id == PLLA_ID) {
   8398e:	683b      	ldr	r3, [r7, #0]
   83990:	2b00      	cmp	r3, #0
   83992:	d108      	bne.n	839a6 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   83994:	4b09      	ldr	r3, [pc, #36]	; (839bc <pll_enable+0x38>)
   83996:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   83998:	687b      	ldr	r3, [r7, #4]
   8399a:	681b      	ldr	r3, [r3, #0]
   8399c:	4a08      	ldr	r2, [pc, #32]	; (839c0 <pll_enable+0x3c>)
   8399e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   839a2:	6293      	str	r3, [r2, #40]	; 0x28
}
   839a4:	e005      	b.n	839b2 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   839a6:	687b      	ldr	r3, [r7, #4]
   839a8:	681b      	ldr	r3, [r3, #0]
   839aa:	4a05      	ldr	r2, [pc, #20]	; (839c0 <pll_enable+0x3c>)
   839ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   839b0:	61d3      	str	r3, [r2, #28]
}
   839b2:	bf00      	nop
   839b4:	3708      	adds	r7, #8
   839b6:	46bd      	mov	sp, r7
   839b8:	bd80      	pop	{r7, pc}
   839ba:	bf00      	nop
   839bc:	00083e2d 	.word	0x00083e2d
   839c0:	400e0400 	.word	0x400e0400

000839c4 <pll_is_locked>:
{
   839c4:	b580      	push	{r7, lr}
   839c6:	b082      	sub	sp, #8
   839c8:	af00      	add	r7, sp, #0
   839ca:	6078      	str	r0, [r7, #4]
	if (ul_pll_id == PLLA_ID) {
   839cc:	687b      	ldr	r3, [r7, #4]
   839ce:	2b00      	cmp	r3, #0
   839d0:	d103      	bne.n	839da <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   839d2:	4b05      	ldr	r3, [pc, #20]	; (839e8 <pll_is_locked+0x24>)
   839d4:	4798      	blx	r3
   839d6:	4603      	mov	r3, r0
   839d8:	e002      	b.n	839e0 <pll_is_locked+0x1c>
		return pmc_is_locked_upll();
   839da:	4b04      	ldr	r3, [pc, #16]	; (839ec <pll_is_locked+0x28>)
   839dc:	4798      	blx	r3
   839de:	4603      	mov	r3, r0
}
   839e0:	4618      	mov	r0, r3
   839e2:	3708      	adds	r7, #8
   839e4:	46bd      	mov	sp, r7
   839e6:	bd80      	pop	{r7, pc}
   839e8:	00083e45 	.word	0x00083e45
   839ec:	00083e79 	.word	0x00083e79

000839f0 <pll_enable_source>:
{
   839f0:	b580      	push	{r7, lr}
   839f2:	b082      	sub	sp, #8
   839f4:	af00      	add	r7, sp, #0
   839f6:	4603      	mov	r3, r0
   839f8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   839fa:	79fb      	ldrb	r3, [r7, #7]
   839fc:	3b03      	subs	r3, #3
   839fe:	2b04      	cmp	r3, #4
   83a00:	d808      	bhi.n	83a14 <pll_enable_source+0x24>
		osc_enable(e_src);
   83a02:	79fb      	ldrb	r3, [r7, #7]
   83a04:	4618      	mov	r0, r3
   83a06:	4b06      	ldr	r3, [pc, #24]	; (83a20 <pll_enable_source+0x30>)
   83a08:	4798      	blx	r3
		osc_wait_ready(e_src);
   83a0a:	79fb      	ldrb	r3, [r7, #7]
   83a0c:	4618      	mov	r0, r3
   83a0e:	4b05      	ldr	r3, [pc, #20]	; (83a24 <pll_enable_source+0x34>)
   83a10:	4798      	blx	r3
		break;
   83a12:	e000      	b.n	83a16 <pll_enable_source+0x26>
		break;
   83a14:	bf00      	nop
}
   83a16:	bf00      	nop
   83a18:	3708      	adds	r7, #8
   83a1a:	46bd      	mov	sp, r7
   83a1c:	bd80      	pop	{r7, pc}
   83a1e:	bf00      	nop
   83a20:	00083775 	.word	0x00083775
   83a24:	000838ed 	.word	0x000838ed

00083a28 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   83a28:	b580      	push	{r7, lr}
   83a2a:	b082      	sub	sp, #8
   83a2c:	af00      	add	r7, sp, #0
   83a2e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   83a30:	bf00      	nop
   83a32:	6878      	ldr	r0, [r7, #4]
   83a34:	4b04      	ldr	r3, [pc, #16]	; (83a48 <pll_wait_for_lock+0x20>)
   83a36:	4798      	blx	r3
   83a38:	4603      	mov	r3, r0
   83a3a:	2b00      	cmp	r3, #0
   83a3c:	d0f9      	beq.n	83a32 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   83a3e:	2300      	movs	r3, #0
}
   83a40:	4618      	mov	r0, r3
   83a42:	3708      	adds	r7, #8
   83a44:	46bd      	mov	sp, r7
   83a46:	bd80      	pop	{r7, pc}
   83a48:	000839c5 	.word	0x000839c5

00083a4c <sysclk_get_main_hz>:
{
   83a4c:	b580      	push	{r7, lr}
   83a4e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   83a50:	2006      	movs	r0, #6
   83a52:	4b03      	ldr	r3, [pc, #12]	; (83a60 <sysclk_get_main_hz+0x14>)
   83a54:	4798      	blx	r3
   83a56:	4603      	mov	r3, r0
   83a58:	011b      	lsls	r3, r3, #4
}
   83a5a:	4618      	mov	r0, r3
   83a5c:	bd80      	pop	{r7, pc}
   83a5e:	bf00      	nop
   83a60:	0008387d 	.word	0x0008387d

00083a64 <sysclk_get_cpu_hz>:
{
   83a64:	b580      	push	{r7, lr}
   83a66:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   83a68:	4b02      	ldr	r3, [pc, #8]	; (83a74 <sysclk_get_cpu_hz+0x10>)
   83a6a:	4798      	blx	r3
   83a6c:	4603      	mov	r3, r0
   83a6e:	085b      	lsrs	r3, r3, #1
}
   83a70:	4618      	mov	r0, r3
   83a72:	bd80      	pop	{r7, pc}
   83a74:	00083a4d 	.word	0x00083a4d

00083a78 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   83a78:	b590      	push	{r4, r7, lr}
   83a7a:	b083      	sub	sp, #12
   83a7c:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	pll_enable_source(CONFIG_PLL1_SOURCE);
   83a7e:	2006      	movs	r0, #6
   83a80:	4b09      	ldr	r3, [pc, #36]	; (83aa8 <sysclk_enable_usb+0x30>)
   83a82:	4798      	blx	r3
	pll_config_defaults(&pllcfg, 1);
   83a84:	1d38      	adds	r0, r7, #4
   83a86:	2300      	movs	r3, #0
   83a88:	2200      	movs	r2, #0
   83a8a:	2106      	movs	r1, #6
   83a8c:	4c07      	ldr	r4, [pc, #28]	; (83aac <sysclk_enable_usb+0x34>)
   83a8e:	47a0      	blx	r4
	pll_enable(&pllcfg, 1);
   83a90:	1d3b      	adds	r3, r7, #4
   83a92:	2101      	movs	r1, #1
   83a94:	4618      	mov	r0, r3
   83a96:	4b06      	ldr	r3, [pc, #24]	; (83ab0 <sysclk_enable_usb+0x38>)
   83a98:	4798      	blx	r3
	pll_wait_for_lock(1);
   83a9a:	2001      	movs	r0, #1
   83a9c:	4b05      	ldr	r3, [pc, #20]	; (83ab4 <sysclk_enable_usb+0x3c>)
   83a9e:	4798      	blx	r3
}
   83aa0:	bf00      	nop
   83aa2:	370c      	adds	r7, #12
   83aa4:	46bd      	mov	sp, r7
   83aa6:	bd90      	pop	{r4, r7, pc}
   83aa8:	000839f1 	.word	0x000839f1
   83aac:	00083919 	.word	0x00083919
   83ab0:	00083985 	.word	0x00083985
   83ab4:	00083a29 	.word	0x00083a29

00083ab8 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   83ab8:	b590      	push	{r4, r7, lr}
   83aba:	b083      	sub	sp, #12
   83abc:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   83abe:	4816      	ldr	r0, [pc, #88]	; (83b18 <sysclk_init+0x60>)
   83ac0:	4b16      	ldr	r3, [pc, #88]	; (83b1c <sysclk_init+0x64>)
   83ac2:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   83ac4:	2006      	movs	r0, #6
   83ac6:	4b16      	ldr	r3, [pc, #88]	; (83b20 <sysclk_init+0x68>)
   83ac8:	4798      	blx	r3
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   83aca:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   83ace:	4b15      	ldr	r3, [pc, #84]	; (83b24 <sysclk_init+0x6c>)
   83ad0:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   83ad2:	bf00      	nop
   83ad4:	4b14      	ldr	r3, [pc, #80]	; (83b28 <sysclk_init+0x70>)
   83ad6:	4798      	blx	r3
   83ad8:	4603      	mov	r3, r0
   83ada:	2b00      	cmp	r3, #0
   83adc:	d0fa      	beq.n	83ad4 <sysclk_init+0x1c>
		}
		pll_config_defaults(&pllcfg, 0);
   83ade:	1d38      	adds	r0, r7, #4
   83ae0:	2310      	movs	r3, #16
   83ae2:	2201      	movs	r2, #1
   83ae4:	2106      	movs	r1, #6
   83ae6:	4c11      	ldr	r4, [pc, #68]	; (83b2c <sysclk_init+0x74>)
   83ae8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   83aea:	1d3b      	adds	r3, r7, #4
   83aec:	2100      	movs	r1, #0
   83aee:	4618      	mov	r0, r3
   83af0:	4b0f      	ldr	r3, [pc, #60]	; (83b30 <sysclk_init+0x78>)
   83af2:	4798      	blx	r3
		pll_wait_for_lock(0);
   83af4:	2000      	movs	r0, #0
   83af6:	4b0f      	ldr	r3, [pc, #60]	; (83b34 <sysclk_init+0x7c>)
   83af8:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   83afa:	2010      	movs	r0, #16
   83afc:	4b0e      	ldr	r3, [pc, #56]	; (83b38 <sysclk_init+0x80>)
   83afe:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   83b00:	4b0e      	ldr	r3, [pc, #56]	; (83b3c <sysclk_init+0x84>)
   83b02:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83b04:	4b0e      	ldr	r3, [pc, #56]	; (83b40 <sysclk_init+0x88>)
   83b06:	4798      	blx	r3
   83b08:	4603      	mov	r3, r0
   83b0a:	4618      	mov	r0, r3
   83b0c:	4b03      	ldr	r3, [pc, #12]	; (83b1c <sysclk_init+0x64>)
   83b0e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   83b10:	bf00      	nop
   83b12:	370c      	adds	r7, #12
   83b14:	46bd      	mov	sp, r7
   83b16:	bd90      	pop	{r4, r7, pc}
   83b18:	05b8d800 	.word	0x05b8d800
   83b1c:	200001bd 	.word	0x200001bd
   83b20:	000839f1 	.word	0x000839f1
   83b24:	00083ded 	.word	0x00083ded
   83b28:	00083dd5 	.word	0x00083dd5
   83b2c:	00083919 	.word	0x00083919
   83b30:	00083985 	.word	0x00083985
   83b34:	00083a29 	.word	0x00083a29
   83b38:	00083bc5 	.word	0x00083bc5
   83b3c:	000859bd 	.word	0x000859bd
   83b40:	00083a65 	.word	0x00083a65

00083b44 <pmc_switch_mck_to_mainck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
   83b44:	b480      	push	{r7}
   83b46:	b085      	sub	sp, #20
   83b48:	af00      	add	r7, sp, #0
   83b4a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83b4c:	4b1c      	ldr	r3, [pc, #112]	; (83bc0 <pmc_switch_mck_to_mainck+0x7c>)
   83b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83b50:	f023 0303 	bic.w	r3, r3, #3
   83b54:	4a1a      	ldr	r2, [pc, #104]	; (83bc0 <pmc_switch_mck_to_mainck+0x7c>)
   83b56:	f043 0301 	orr.w	r3, r3, #1
   83b5a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83b5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83b60:	60fb      	str	r3, [r7, #12]
   83b62:	e007      	b.n	83b74 <pmc_switch_mck_to_mainck+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83b64:	68fb      	ldr	r3, [r7, #12]
   83b66:	2b00      	cmp	r3, #0
   83b68:	d101      	bne.n	83b6e <pmc_switch_mck_to_mainck+0x2a>
			return 1;
   83b6a:	2301      	movs	r3, #1
   83b6c:	e023      	b.n	83bb6 <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   83b6e:	68fb      	ldr	r3, [r7, #12]
   83b70:	3b01      	subs	r3, #1
   83b72:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83b74:	4b12      	ldr	r3, [pc, #72]	; (83bc0 <pmc_switch_mck_to_mainck+0x7c>)
   83b76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83b78:	f003 0308 	and.w	r3, r3, #8
   83b7c:	2b00      	cmp	r3, #0
   83b7e:	d0f1      	beq.n	83b64 <pmc_switch_mck_to_mainck+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83b80:	4b0f      	ldr	r3, [pc, #60]	; (83bc0 <pmc_switch_mck_to_mainck+0x7c>)
   83b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83b84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   83b88:	490d      	ldr	r1, [pc, #52]	; (83bc0 <pmc_switch_mck_to_mainck+0x7c>)
   83b8a:	687b      	ldr	r3, [r7, #4]
   83b8c:	4313      	orrs	r3, r2
   83b8e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83b90:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83b94:	60fb      	str	r3, [r7, #12]
   83b96:	e007      	b.n	83ba8 <pmc_switch_mck_to_mainck+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83b98:	68fb      	ldr	r3, [r7, #12]
   83b9a:	2b00      	cmp	r3, #0
   83b9c:	d101      	bne.n	83ba2 <pmc_switch_mck_to_mainck+0x5e>
			return 1;
   83b9e:	2301      	movs	r3, #1
   83ba0:	e009      	b.n	83bb6 <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   83ba2:	68fb      	ldr	r3, [r7, #12]
   83ba4:	3b01      	subs	r3, #1
   83ba6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83ba8:	4b05      	ldr	r3, [pc, #20]	; (83bc0 <pmc_switch_mck_to_mainck+0x7c>)
   83baa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83bac:	f003 0308 	and.w	r3, r3, #8
   83bb0:	2b00      	cmp	r3, #0
   83bb2:	d0f1      	beq.n	83b98 <pmc_switch_mck_to_mainck+0x54>
		}
	}

	return 0;
   83bb4:	2300      	movs	r3, #0
}
   83bb6:	4618      	mov	r0, r3
   83bb8:	3714      	adds	r7, #20
   83bba:	46bd      	mov	sp, r7
   83bbc:	bc80      	pop	{r7}
   83bbe:	4770      	bx	lr
   83bc0:	400e0400 	.word	0x400e0400

00083bc4 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   83bc4:	b480      	push	{r7}
   83bc6:	b085      	sub	sp, #20
   83bc8:	af00      	add	r7, sp, #0
   83bca:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83bcc:	4b1c      	ldr	r3, [pc, #112]	; (83c40 <pmc_switch_mck_to_pllack+0x7c>)
   83bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83bd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   83bd4:	491a      	ldr	r1, [pc, #104]	; (83c40 <pmc_switch_mck_to_pllack+0x7c>)
   83bd6:	687b      	ldr	r3, [r7, #4]
   83bd8:	4313      	orrs	r3, r2
   83bda:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83bdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83be0:	60fb      	str	r3, [r7, #12]
   83be2:	e007      	b.n	83bf4 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83be4:	68fb      	ldr	r3, [r7, #12]
   83be6:	2b00      	cmp	r3, #0
   83be8:	d101      	bne.n	83bee <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   83bea:	2301      	movs	r3, #1
   83bec:	e023      	b.n	83c36 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   83bee:	68fb      	ldr	r3, [r7, #12]
   83bf0:	3b01      	subs	r3, #1
   83bf2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83bf4:	4b12      	ldr	r3, [pc, #72]	; (83c40 <pmc_switch_mck_to_pllack+0x7c>)
   83bf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83bf8:	f003 0308 	and.w	r3, r3, #8
   83bfc:	2b00      	cmp	r3, #0
   83bfe:	d0f1      	beq.n	83be4 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83c00:	4b0f      	ldr	r3, [pc, #60]	; (83c40 <pmc_switch_mck_to_pllack+0x7c>)
   83c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83c04:	f023 0303 	bic.w	r3, r3, #3
   83c08:	4a0d      	ldr	r2, [pc, #52]	; (83c40 <pmc_switch_mck_to_pllack+0x7c>)
   83c0a:	f043 0302 	orr.w	r3, r3, #2
   83c0e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83c10:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83c14:	60fb      	str	r3, [r7, #12]
   83c16:	e007      	b.n	83c28 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83c18:	68fb      	ldr	r3, [r7, #12]
   83c1a:	2b00      	cmp	r3, #0
   83c1c:	d101      	bne.n	83c22 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   83c1e:	2301      	movs	r3, #1
   83c20:	e009      	b.n	83c36 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   83c22:	68fb      	ldr	r3, [r7, #12]
   83c24:	3b01      	subs	r3, #1
   83c26:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83c28:	4b05      	ldr	r3, [pc, #20]	; (83c40 <pmc_switch_mck_to_pllack+0x7c>)
   83c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83c2c:	f003 0308 	and.w	r3, r3, #8
   83c30:	2b00      	cmp	r3, #0
   83c32:	d0f1      	beq.n	83c18 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   83c34:	2300      	movs	r3, #0
}
   83c36:	4618      	mov	r0, r3
   83c38:	3714      	adds	r7, #20
   83c3a:	46bd      	mov	sp, r7
   83c3c:	bc80      	pop	{r7}
   83c3e:	4770      	bx	lr
   83c40:	400e0400 	.word	0x400e0400

00083c44 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   83c44:	b480      	push	{r7}
   83c46:	b083      	sub	sp, #12
   83c48:	af00      	add	r7, sp, #0
   83c4a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   83c4c:	687b      	ldr	r3, [r7, #4]
   83c4e:	2b01      	cmp	r3, #1
   83c50:	d107      	bne.n	83c62 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   83c52:	4b08      	ldr	r3, [pc, #32]	; (83c74 <pmc_switch_sclk_to_32kxtal+0x30>)
   83c54:	689b      	ldr	r3, [r3, #8]
   83c56:	4a07      	ldr	r2, [pc, #28]	; (83c74 <pmc_switch_sclk_to_32kxtal+0x30>)
   83c58:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   83c5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83c60:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   83c62:	4b04      	ldr	r3, [pc, #16]	; (83c74 <pmc_switch_sclk_to_32kxtal+0x30>)
   83c64:	4a04      	ldr	r2, [pc, #16]	; (83c78 <pmc_switch_sclk_to_32kxtal+0x34>)
   83c66:	601a      	str	r2, [r3, #0]
}
   83c68:	bf00      	nop
   83c6a:	370c      	adds	r7, #12
   83c6c:	46bd      	mov	sp, r7
   83c6e:	bc80      	pop	{r7}
   83c70:	4770      	bx	lr
   83c72:	bf00      	nop
   83c74:	400e1210 	.word	0x400e1210
   83c78:	a5000008 	.word	0xa5000008

00083c7c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   83c7c:	b480      	push	{r7}
   83c7e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   83c80:	4b09      	ldr	r3, [pc, #36]	; (83ca8 <pmc_osc_is_ready_32kxtal+0x2c>)
   83c82:	695b      	ldr	r3, [r3, #20]
   83c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   83c88:	2b00      	cmp	r3, #0
   83c8a:	d007      	beq.n	83c9c <pmc_osc_is_ready_32kxtal+0x20>
   83c8c:	4b07      	ldr	r3, [pc, #28]	; (83cac <pmc_osc_is_ready_32kxtal+0x30>)
   83c8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83c94:	2b00      	cmp	r3, #0
   83c96:	d001      	beq.n	83c9c <pmc_osc_is_ready_32kxtal+0x20>
   83c98:	2301      	movs	r3, #1
   83c9a:	e000      	b.n	83c9e <pmc_osc_is_ready_32kxtal+0x22>
   83c9c:	2300      	movs	r3, #0
}
   83c9e:	4618      	mov	r0, r3
   83ca0:	46bd      	mov	sp, r7
   83ca2:	bc80      	pop	{r7}
   83ca4:	4770      	bx	lr
   83ca6:	bf00      	nop
   83ca8:	400e1210 	.word	0x400e1210
   83cac:	400e0400 	.word	0x400e0400

00083cb0 <pmc_osc_enable_fastrc>:
 * \brief Enable fast RC oscillator.
 *
 * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 */
void pmc_osc_enable_fastrc(uint32_t ul_rc)
{
   83cb0:	b480      	push	{r7}
   83cb2:	b083      	sub	sp, #12
   83cb4:	af00      	add	r7, sp, #0
   83cb6:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   83cb8:	4b13      	ldr	r3, [pc, #76]	; (83d08 <pmc_osc_enable_fastrc+0x58>)
   83cba:	6a1b      	ldr	r3, [r3, #32]
   83cbc:	4a12      	ldr	r2, [pc, #72]	; (83d08 <pmc_osc_enable_fastrc+0x58>)
   83cbe:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83cc2:	f043 0308 	orr.w	r3, r3, #8
   83cc6:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83cc8:	bf00      	nop
   83cca:	4b0f      	ldr	r3, [pc, #60]	; (83d08 <pmc_osc_enable_fastrc+0x58>)
   83ccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83cd2:	2b00      	cmp	r3, #0
   83cd4:	d0f9      	beq.n	83cca <pmc_osc_enable_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83cd6:	4b0c      	ldr	r3, [pc, #48]	; (83d08 <pmc_osc_enable_fastrc+0x58>)
   83cd8:	6a1b      	ldr	r3, [r3, #32]
   83cda:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_rc;
   83ce2:	687a      	ldr	r2, [r7, #4]
   83ce4:	4313      	orrs	r3, r2
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83ce6:	4a08      	ldr	r2, [pc, #32]	; (83d08 <pmc_osc_enable_fastrc+0x58>)
			CKGR_MOR_KEY_PASSWD | ul_rc;
   83ce8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83cec:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83cee:	bf00      	nop
   83cf0:	4b05      	ldr	r3, [pc, #20]	; (83d08 <pmc_osc_enable_fastrc+0x58>)
   83cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83cf8:	2b00      	cmp	r3, #0
   83cfa:	d0f9      	beq.n	83cf0 <pmc_osc_enable_fastrc+0x40>
}
   83cfc:	bf00      	nop
   83cfe:	370c      	adds	r7, #12
   83d00:	46bd      	mov	sp, r7
   83d02:	bc80      	pop	{r7}
   83d04:	4770      	bx	lr
   83d06:	bf00      	nop
   83d08:	400e0400 	.word	0x400e0400

00083d0c <pmc_osc_is_ready_fastrc>:
 * \brief Check if the main fastrc is ready.
 *
 * \retval 0 Xtal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_fastrc(void)
{
   83d0c:	b480      	push	{r7}
   83d0e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
   83d10:	4b03      	ldr	r3, [pc, #12]	; (83d20 <pmc_osc_is_ready_fastrc+0x14>)
   83d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
}
   83d18:	4618      	mov	r0, r3
   83d1a:	46bd      	mov	sp, r7
   83d1c:	bc80      	pop	{r7}
   83d1e:	4770      	bx	lr
   83d20:	400e0400 	.word	0x400e0400

00083d24 <pmc_osc_enable_main_xtal>:
 * \brief Enable main XTAL oscillator.
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
   83d24:	b480      	push	{r7}
   83d26:	b085      	sub	sp, #20
   83d28:	af00      	add	r7, sp, #0
   83d2a:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   83d2c:	4b0f      	ldr	r3, [pc, #60]	; (83d6c <pmc_osc_enable_main_xtal+0x48>)
   83d2e:	6a1b      	ldr	r3, [r3, #32]
   83d30:	60fb      	str	r3, [r7, #12]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   83d32:	68fb      	ldr	r3, [r7, #12]
   83d34:	f023 0303 	bic.w	r3, r3, #3
   83d38:	60fb      	str	r3, [r7, #12]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83d3a:	687b      	ldr	r3, [r7, #4]
   83d3c:	021b      	lsls	r3, r3, #8
   83d3e:	b29a      	uxth	r2, r3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83d40:	68fb      	ldr	r3, [r7, #12]
   83d42:	4313      	orrs	r3, r2
   83d44:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83d48:	f043 0301 	orr.w	r3, r3, #1
   83d4c:	60fb      	str	r3, [r7, #12]
	PMC->CKGR_MOR = mor;
   83d4e:	4a07      	ldr	r2, [pc, #28]	; (83d6c <pmc_osc_enable_main_xtal+0x48>)
   83d50:	68fb      	ldr	r3, [r7, #12]
   83d52:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83d54:	bf00      	nop
   83d56:	4b05      	ldr	r3, [pc, #20]	; (83d6c <pmc_osc_enable_main_xtal+0x48>)
   83d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83d5a:	f003 0301 	and.w	r3, r3, #1
   83d5e:	2b00      	cmp	r3, #0
   83d60:	d0f9      	beq.n	83d56 <pmc_osc_enable_main_xtal+0x32>
}
   83d62:	bf00      	nop
   83d64:	3714      	adds	r7, #20
   83d66:	46bd      	mov	sp, r7
   83d68:	bc80      	pop	{r7}
   83d6a:	4770      	bx	lr
   83d6c:	400e0400 	.word	0x400e0400

00083d70 <pmc_osc_bypass_main_xtal>:

/**
 * \brief Bypass main XTAL.
 */
void pmc_osc_bypass_main_xtal(void)
{
   83d70:	b480      	push	{r7}
   83d72:	b083      	sub	sp, #12
   83d74:	af00      	add	r7, sp, #0
	uint32_t mor = PMC->CKGR_MOR;
   83d76:	4b0a      	ldr	r3, [pc, #40]	; (83da0 <pmc_osc_bypass_main_xtal+0x30>)
   83d78:	6a1b      	ldr	r3, [r3, #32]
   83d7a:	607b      	str	r3, [r7, #4]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   83d7c:	687b      	ldr	r3, [r7, #4]
   83d7e:	f023 0303 	bic.w	r3, r3, #3
   83d82:	607b      	str	r3, [r7, #4]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
   83d84:	687b      	ldr	r3, [r7, #4]
   83d86:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83d8a:	f043 0302 	orr.w	r3, r3, #2
   83d8e:	607b      	str	r3, [r7, #4]
	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
	PMC->CKGR_MOR = mor;
   83d90:	4a03      	ldr	r2, [pc, #12]	; (83da0 <pmc_osc_bypass_main_xtal+0x30>)
   83d92:	687b      	ldr	r3, [r7, #4]
   83d94:	6213      	str	r3, [r2, #32]
	/* The MOSCXTS in PMC_SR is automatically set */
}
   83d96:	bf00      	nop
   83d98:	370c      	adds	r7, #12
   83d9a:	46bd      	mov	sp, r7
   83d9c:	bc80      	pop	{r7}
   83d9e:	4770      	bx	lr
   83da0:	400e0400 	.word	0x400e0400

00083da4 <pmc_osc_is_bypassed_main_xtal>:
 * \brief Check if the main crystal is bypassed.
 *
 * \retval 0 Xtal is bypassed, otherwise not.
 */
uint32_t pmc_osc_is_bypassed_main_xtal(void)
{
   83da4:	b480      	push	{r7}
   83da6:	af00      	add	r7, sp, #0
	return (PMC->CKGR_MOR & CKGR_MOR_MOSCXTBY);
   83da8:	4b03      	ldr	r3, [pc, #12]	; (83db8 <pmc_osc_is_bypassed_main_xtal+0x14>)
   83daa:	6a1b      	ldr	r3, [r3, #32]
   83dac:	f003 0302 	and.w	r3, r3, #2
}
   83db0:	4618      	mov	r0, r3
   83db2:	46bd      	mov	sp, r7
   83db4:	bc80      	pop	{r7}
   83db6:	4770      	bx	lr
   83db8:	400e0400 	.word	0x400e0400

00083dbc <pmc_osc_is_ready_main_xtal>:
 * \note If main crystal is bypassed, it's always ready.
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
   83dbc:	b480      	push	{r7}
   83dbe:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   83dc0:	4b03      	ldr	r3, [pc, #12]	; (83dd0 <pmc_osc_is_ready_main_xtal+0x14>)
   83dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83dc4:	f003 0301 	and.w	r3, r3, #1
}
   83dc8:	4618      	mov	r0, r3
   83dca:	46bd      	mov	sp, r7
   83dcc:	bc80      	pop	{r7}
   83dce:	4770      	bx	lr
   83dd0:	400e0400 	.word	0x400e0400

00083dd4 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   83dd4:	b480      	push	{r7}
   83dd6:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83dd8:	4b03      	ldr	r3, [pc, #12]	; (83de8 <pmc_osc_is_ready_mainck+0x14>)
   83dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   83de0:	4618      	mov	r0, r3
   83de2:	46bd      	mov	sp, r7
   83de4:	bc80      	pop	{r7}
   83de6:	4770      	bx	lr
   83de8:	400e0400 	.word	0x400e0400

00083dec <pmc_mainck_osc_select>:
 * \note This function will not enable/disable RC or Main Crystal.
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
   83dec:	b480      	push	{r7}
   83dee:	b085      	sub	sp, #20
   83df0:	af00      	add	r7, sp, #0
   83df2:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   83df4:	4b0c      	ldr	r3, [pc, #48]	; (83e28 <pmc_mainck_osc_select+0x3c>)
   83df6:	6a1b      	ldr	r3, [r3, #32]
   83df8:	60fb      	str	r3, [r7, #12]
	if (ul_xtal_rc) {
   83dfa:	687b      	ldr	r3, [r7, #4]
   83dfc:	2b00      	cmp	r3, #0
   83dfe:	d004      	beq.n	83e0a <pmc_mainck_osc_select+0x1e>
		mor |=  CKGR_MOR_MOSCSEL;
   83e00:	68fb      	ldr	r3, [r7, #12]
   83e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   83e06:	60fb      	str	r3, [r7, #12]
   83e08:	e003      	b.n	83e12 <pmc_mainck_osc_select+0x26>
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   83e0a:	68fb      	ldr	r3, [r7, #12]
   83e0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   83e10:	60fb      	str	r3, [r7, #12]
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   83e12:	4a05      	ldr	r2, [pc, #20]	; (83e28 <pmc_mainck_osc_select+0x3c>)
   83e14:	68fb      	ldr	r3, [r7, #12]
   83e16:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83e1a:	6213      	str	r3, [r2, #32]
}
   83e1c:	bf00      	nop
   83e1e:	3714      	adds	r7, #20
   83e20:	46bd      	mov	sp, r7
   83e22:	bc80      	pop	{r7}
   83e24:	4770      	bx	lr
   83e26:	bf00      	nop
   83e28:	400e0400 	.word	0x400e0400

00083e2c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   83e2c:	b480      	push	{r7}
   83e2e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83e30:	4b03      	ldr	r3, [pc, #12]	; (83e40 <pmc_disable_pllack+0x14>)
   83e32:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83e36:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   83e38:	bf00      	nop
   83e3a:	46bd      	mov	sp, r7
   83e3c:	bc80      	pop	{r7}
   83e3e:	4770      	bx	lr
   83e40:	400e0400 	.word	0x400e0400

00083e44 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   83e44:	b480      	push	{r7}
   83e46:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83e48:	4b03      	ldr	r3, [pc, #12]	; (83e58 <pmc_is_locked_pllack+0x14>)
   83e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83e4c:	f003 0302 	and.w	r3, r3, #2
}
   83e50:	4618      	mov	r0, r3
   83e52:	46bd      	mov	sp, r7
   83e54:	bc80      	pop	{r7}
   83e56:	4770      	bx	lr
   83e58:	400e0400 	.word	0x400e0400

00083e5c <pmc_disable_upll_clock>:

/**
 * \brief Disable UPLL clock.
 */
void pmc_disable_upll_clock(void)
{
   83e5c:	b480      	push	{r7}
   83e5e:	af00      	add	r7, sp, #0
	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   83e60:	4b04      	ldr	r3, [pc, #16]	; (83e74 <pmc_disable_upll_clock+0x18>)
   83e62:	69db      	ldr	r3, [r3, #28]
   83e64:	4a03      	ldr	r2, [pc, #12]	; (83e74 <pmc_disable_upll_clock+0x18>)
   83e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   83e6a:	61d3      	str	r3, [r2, #28]
}
   83e6c:	bf00      	nop
   83e6e:	46bd      	mov	sp, r7
   83e70:	bc80      	pop	{r7}
   83e72:	4770      	bx	lr
   83e74:	400e0400 	.word	0x400e0400

00083e78 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   83e78:	b480      	push	{r7}
   83e7a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   83e7c:	4b03      	ldr	r3, [pc, #12]	; (83e8c <pmc_is_locked_upll+0x14>)
   83e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   83e84:	4618      	mov	r0, r3
   83e86:	46bd      	mov	sp, r7
   83e88:	bc80      	pop	{r7}
   83e8a:	4770      	bx	lr
   83e8c:	400e0400 	.word	0x400e0400

00083e90 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   83e90:	b480      	push	{r7}
   83e92:	b083      	sub	sp, #12
   83e94:	af00      	add	r7, sp, #0
   83e96:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   83e98:	687b      	ldr	r3, [r7, #4]
   83e9a:	2b1d      	cmp	r3, #29
   83e9c:	d901      	bls.n	83ea2 <pmc_enable_periph_clk+0x12>
		return 1;
   83e9e:	2301      	movs	r3, #1
   83ea0:	e015      	b.n	83ece <pmc_enable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   83ea2:	687b      	ldr	r3, [r7, #4]
   83ea4:	2b1f      	cmp	r3, #31
   83ea6:	d811      	bhi.n	83ecc <pmc_enable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   83ea8:	4b0b      	ldr	r3, [pc, #44]	; (83ed8 <pmc_enable_periph_clk+0x48>)
   83eaa:	699a      	ldr	r2, [r3, #24]
   83eac:	2101      	movs	r1, #1
   83eae:	687b      	ldr	r3, [r7, #4]
   83eb0:	fa01 f303 	lsl.w	r3, r1, r3
   83eb4:	401a      	ands	r2, r3
   83eb6:	2101      	movs	r1, #1
   83eb8:	687b      	ldr	r3, [r7, #4]
   83eba:	fa01 f303 	lsl.w	r3, r1, r3
   83ebe:	429a      	cmp	r2, r3
   83ec0:	d004      	beq.n	83ecc <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER0 = 1 << ul_id;
   83ec2:	2201      	movs	r2, #1
   83ec4:	687b      	ldr	r3, [r7, #4]
   83ec6:	409a      	lsls	r2, r3
   83ec8:	4b03      	ldr	r3, [pc, #12]	; (83ed8 <pmc_enable_periph_clk+0x48>)
   83eca:	611a      	str	r2, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   83ecc:	2300      	movs	r3, #0
}
   83ece:	4618      	mov	r0, r3
   83ed0:	370c      	adds	r7, #12
   83ed2:	46bd      	mov	sp, r7
   83ed4:	bc80      	pop	{r7}
   83ed6:	4770      	bx	lr
   83ed8:	400e0400 	.word	0x400e0400

00083edc <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
   83edc:	b480      	push	{r7}
   83ede:	b083      	sub	sp, #12
   83ee0:	af00      	add	r7, sp, #0
   83ee2:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   83ee4:	687b      	ldr	r3, [r7, #4]
   83ee6:	2b1d      	cmp	r3, #29
   83ee8:	d901      	bls.n	83eee <pmc_disable_periph_clk+0x12>
		return 1;
   83eea:	2301      	movs	r3, #1
   83eec:	e015      	b.n	83f1a <pmc_disable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   83eee:	687b      	ldr	r3, [r7, #4]
   83ef0:	2b1f      	cmp	r3, #31
   83ef2:	d811      	bhi.n	83f18 <pmc_disable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   83ef4:	4b0b      	ldr	r3, [pc, #44]	; (83f24 <pmc_disable_periph_clk+0x48>)
   83ef6:	699a      	ldr	r2, [r3, #24]
   83ef8:	2101      	movs	r1, #1
   83efa:	687b      	ldr	r3, [r7, #4]
   83efc:	fa01 f303 	lsl.w	r3, r1, r3
   83f00:	401a      	ands	r2, r3
   83f02:	2101      	movs	r1, #1
   83f04:	687b      	ldr	r3, [r7, #4]
   83f06:	fa01 f303 	lsl.w	r3, r1, r3
   83f0a:	429a      	cmp	r2, r3
   83f0c:	d104      	bne.n	83f18 <pmc_disable_periph_clk+0x3c>
			PMC->PMC_PCDR0 = 1 << ul_id;
   83f0e:	2201      	movs	r2, #1
   83f10:	687b      	ldr	r3, [r7, #4]
   83f12:	409a      	lsls	r2, r3
   83f14:	4b03      	ldr	r3, [pc, #12]	; (83f24 <pmc_disable_periph_clk+0x48>)
   83f16:	615a      	str	r2, [r3, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   83f18:	2300      	movs	r3, #0
}
   83f1a:	4618      	mov	r0, r3
   83f1c:	370c      	adds	r7, #12
   83f1e:	46bd      	mov	sp, r7
   83f20:	bc80      	pop	{r7}
   83f22:	4770      	bx	lr
   83f24:	400e0400 	.word	0x400e0400

00083f28 <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
   83f28:	b480      	push	{r7}
   83f2a:	b083      	sub	sp, #12
   83f2c:	af00      	add	r7, sp, #0
   83f2e:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   83f30:	4a05      	ldr	r2, [pc, #20]	; (83f48 <pmc_enable_pck+0x20>)
   83f32:	f44f 7180 	mov.w	r1, #256	; 0x100
   83f36:	687b      	ldr	r3, [r7, #4]
   83f38:	fa01 f303 	lsl.w	r3, r1, r3
   83f3c:	6013      	str	r3, [r2, #0]
}
   83f3e:	bf00      	nop
   83f40:	370c      	adds	r7, #12
   83f42:	46bd      	mov	sp, r7
   83f44:	bc80      	pop	{r7}
   83f46:	4770      	bx	lr
   83f48:	400e0400 	.word	0x400e0400

00083f4c <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
   83f4c:	b480      	push	{r7}
   83f4e:	b083      	sub	sp, #12
   83f50:	af00      	add	r7, sp, #0
   83f52:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   83f54:	687b      	ldr	r3, [r7, #4]
   83f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
   83f5a:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
   83f5c:	4b05      	ldr	r3, [pc, #20]	; (83f74 <pmc_set_fast_startup_input+0x28>)
   83f5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83f60:	4904      	ldr	r1, [pc, #16]	; (83f74 <pmc_set_fast_startup_input+0x28>)
   83f62:	687b      	ldr	r3, [r7, #4]
   83f64:	4313      	orrs	r3, r2
   83f66:	670b      	str	r3, [r1, #112]	; 0x70
}
   83f68:	bf00      	nop
   83f6a:	370c      	adds	r7, #12
   83f6c:	46bd      	mov	sp, r7
   83f6e:	bc80      	pop	{r7}
   83f70:	4770      	bx	lr
   83f72:	bf00      	nop
   83f74:	400e0400 	.word	0x400e0400

00083f78 <pmc_enable_waitmode>:
/**
 * \brief Enable Wait Mode. Enter condition: WFE + (SLEEPDEEP bit = 0) +
 * (LPM bit = 1)
 */
void pmc_enable_waitmode(void)
{
   83f78:	b480      	push	{r7}
   83f7a:	b083      	sub	sp, #12
   83f7c:	af00      	add	r7, sp, #0
	uint32_t i;

	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
   83f7e:	4b12      	ldr	r3, [pc, #72]	; (83fc8 <pmc_enable_waitmode+0x50>)
   83f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   83f82:	4a11      	ldr	r2, [pc, #68]	; (83fc8 <pmc_enable_waitmode+0x50>)
   83f84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83f88:	6713      	str	r3, [r2, #112]	; 0x70
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
   83f8a:	4b10      	ldr	r3, [pc, #64]	; (83fcc <pmc_enable_waitmode+0x54>)
   83f8c:	691b      	ldr	r3, [r3, #16]
   83f8e:	4a0f      	ldr	r2, [pc, #60]	; (83fcc <pmc_enable_waitmode+0x54>)
   83f90:	f023 0304 	bic.w	r3, r3, #4
   83f94:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfe");
   83f96:	bf20      	wfe
	__WFE();

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
   83f98:	2300      	movs	r3, #0
   83f9a:	607b      	str	r3, [r7, #4]
   83f9c:	e003      	b.n	83fa6 <pmc_enable_waitmode+0x2e>
  __ASM volatile ("nop");
   83f9e:	bf00      	nop
   83fa0:	687b      	ldr	r3, [r7, #4]
   83fa2:	3301      	adds	r3, #1
   83fa4:	607b      	str	r3, [r7, #4]
   83fa6:	687b      	ldr	r3, [r7, #4]
   83fa8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   83fac:	d3f7      	bcc.n	83f9e <pmc_enable_waitmode+0x26>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
   83fae:	bf00      	nop
   83fb0:	4b05      	ldr	r3, [pc, #20]	; (83fc8 <pmc_enable_waitmode+0x50>)
   83fb2:	6a1b      	ldr	r3, [r3, #32]
   83fb4:	f003 0308 	and.w	r3, r3, #8
   83fb8:	2b00      	cmp	r3, #0
   83fba:	d0f9      	beq.n	83fb0 <pmc_enable_waitmode+0x38>

}
   83fbc:	bf00      	nop
   83fbe:	370c      	adds	r7, #12
   83fc0:	46bd      	mov	sp, r7
   83fc2:	bc80      	pop	{r7}
   83fc4:	4770      	bx	lr
   83fc6:	bf00      	nop
   83fc8:	400e0400 	.word	0x400e0400
   83fcc:	e000ed00 	.word	0xe000ed00

00083fd0 <udi_vendor_enable>:
/**
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
   83fd0:	b580      	push	{r7, lr}
   83fd2:	af00      	add	r7, sp, #0
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   83fd4:	4b0b      	ldr	r3, [pc, #44]	; (84004 <udi_vendor_enable+0x34>)
   83fd6:	4798      	blx	r3
   83fd8:	4603      	mov	r3, r0
   83fda:	78da      	ldrb	r2, [r3, #3]
   83fdc:	4b0a      	ldr	r3, [pc, #40]	; (84008 <udi_vendor_enable+0x38>)
   83fde:	701a      	strb	r2, [r3, #0]
	if (0 == udi_vendor_alternate_setting) {
   83fe0:	4b09      	ldr	r3, [pc, #36]	; (84008 <udi_vendor_enable+0x38>)
   83fe2:	781b      	ldrb	r3, [r3, #0]
   83fe4:	2b00      	cmp	r3, #0
   83fe6:	d109      	bne.n	83ffc <udi_vendor_enable+0x2c>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
   83fe8:	4b08      	ldr	r3, [pc, #32]	; (8400c <udi_vendor_enable+0x3c>)
   83fea:	4798      	blx	r3
   83fec:	4603      	mov	r3, r0
   83fee:	f083 0301 	eor.w	r3, r3, #1
   83ff2:	b2db      	uxtb	r3, r3
   83ff4:	2b00      	cmp	r3, #0
   83ff6:	d001      	beq.n	83ffc <udi_vendor_enable+0x2c>
			return false;
   83ff8:	2300      	movs	r3, #0
   83ffa:	e000      	b.n	83ffe <udi_vendor_enable+0x2e>
		}
	}
	return true;
   83ffc:	2301      	movs	r3, #1
}
   83ffe:	4618      	mov	r0, r3
   84000:	bd80      	pop	{r7, pc}
   84002:	bf00      	nop
   84004:	000846b1 	.word	0x000846b1
   84008:	20000d39 	.word	0x20000d39
   8400c:	00080da9 	.word	0x00080da9

00084010 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
   84010:	b580      	push	{r7, lr}
   84012:	af00      	add	r7, sp, #0
	if (0 == udi_vendor_alternate_setting) {
   84014:	4b03      	ldr	r3, [pc, #12]	; (84024 <udi_vendor_disable+0x14>)
   84016:	781b      	ldrb	r3, [r3, #0]
   84018:	2b00      	cmp	r3, #0
   8401a:	d101      	bne.n	84020 <udi_vendor_disable+0x10>
		UDI_VENDOR_DISABLE_EXT();
   8401c:	4b02      	ldr	r3, [pc, #8]	; (84028 <udi_vendor_disable+0x18>)
   8401e:	4798      	blx	r3
	}
}
   84020:	bf00      	nop
   84022:	bd80      	pop	{r7, pc}
   84024:	20000d39 	.word	0x20000d39
   84028:	00080dd5 	.word	0x00080dd5

0008402c <udi_vendor_setup>:

bool udi_vendor_setup(void)
{
   8402c:	b580      	push	{r7, lr}
   8402e:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   84030:	4b10      	ldr	r3, [pc, #64]	; (84074 <udi_vendor_setup+0x48>)
   84032:	781b      	ldrb	r3, [r3, #0]
   84034:	b25b      	sxtb	r3, r3
   84036:	2b00      	cmp	r3, #0
   84038:	da09      	bge.n	8404e <udi_vendor_setup+0x22>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   8403a:	4b0e      	ldr	r3, [pc, #56]	; (84074 <udi_vendor_setup+0x48>)
   8403c:	781b      	ldrb	r3, [r3, #0]
   8403e:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84042:	2b40      	cmp	r3, #64	; 0x40
   84044:	d103      	bne.n	8404e <udi_vendor_setup+0x22>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   84046:	4b0c      	ldr	r3, [pc, #48]	; (84078 <udi_vendor_setup+0x4c>)
   84048:	4798      	blx	r3
   8404a:	4603      	mov	r3, r0
   8404c:	e00f      	b.n	8406e <udi_vendor_setup+0x42>
		}
	}
	if (Udd_setup_is_out()) {
   8404e:	4b09      	ldr	r3, [pc, #36]	; (84074 <udi_vendor_setup+0x48>)
   84050:	781b      	ldrb	r3, [r3, #0]
   84052:	b25b      	sxtb	r3, r3
   84054:	2b00      	cmp	r3, #0
   84056:	db09      	blt.n	8406c <udi_vendor_setup+0x40>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84058:	4b06      	ldr	r3, [pc, #24]	; (84074 <udi_vendor_setup+0x48>)
   8405a:	781b      	ldrb	r3, [r3, #0]
   8405c:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84060:	2b40      	cmp	r3, #64	; 0x40
   84062:	d103      	bne.n	8406c <udi_vendor_setup+0x40>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   84064:	4b05      	ldr	r3, [pc, #20]	; (8407c <udi_vendor_setup+0x50>)
   84066:	4798      	blx	r3
   84068:	4603      	mov	r3, r0
   8406a:	e000      	b.n	8406e <udi_vendor_setup+0x42>
		}
	}
	return false; // Not supported request
   8406c:	2300      	movs	r3, #0
}
   8406e:	4618      	mov	r0, r3
   84070:	bd80      	pop	{r7, pc}
   84072:	bf00      	nop
   84074:	20000d58 	.word	0x20000d58
   84078:	00081209 	.word	0x00081209
   8407c:	000810b9 	.word	0x000810b9

00084080 <udi_vendor_getsetting>:

uint8_t udi_vendor_getsetting(void)
{
   84080:	b480      	push	{r7}
   84082:	af00      	add	r7, sp, #0
	return udi_vendor_alternate_setting;
   84084:	4b02      	ldr	r3, [pc, #8]	; (84090 <udi_vendor_getsetting+0x10>)
   84086:	781b      	ldrb	r3, [r3, #0]
}
   84088:	4618      	mov	r0, r3
   8408a:	46bd      	mov	sp, r7
   8408c:	bc80      	pop	{r7}
   8408e:	4770      	bx	lr
   84090:	20000d39 	.word	0x20000d39

00084094 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84094:	b590      	push	{r4, r7, lr}
   84096:	b087      	sub	sp, #28
   84098:	af02      	add	r7, sp, #8
   8409a:	60f8      	str	r0, [r7, #12]
   8409c:	60b9      	str	r1, [r7, #8]
   8409e:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   840a0:	687b      	ldr	r3, [r7, #4]
   840a2:	9300      	str	r3, [sp, #0]
   840a4:	68bb      	ldr	r3, [r7, #8]
   840a6:	68fa      	ldr	r2, [r7, #12]
   840a8:	2100      	movs	r1, #0
   840aa:	2081      	movs	r0, #129	; 0x81
   840ac:	4c03      	ldr	r4, [pc, #12]	; (840bc <udi_vendor_bulk_in_run+0x28>)
   840ae:	47a0      	blx	r4
   840b0:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   840b2:	4618      	mov	r0, r3
   840b4:	3714      	adds	r7, #20
   840b6:	46bd      	mov	sp, r7
   840b8:	bd90      	pop	{r4, r7, pc}
   840ba:	bf00      	nop
   840bc:	00082739 	.word	0x00082739

000840c0 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   840c0:	b590      	push	{r4, r7, lr}
   840c2:	b087      	sub	sp, #28
   840c4:	af02      	add	r7, sp, #8
   840c6:	60f8      	str	r0, [r7, #12]
   840c8:	60b9      	str	r1, [r7, #8]
   840ca:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   840cc:	687b      	ldr	r3, [r7, #4]
   840ce:	9300      	str	r3, [sp, #0]
   840d0:	68bb      	ldr	r3, [r7, #8]
   840d2:	68fa      	ldr	r2, [r7, #12]
   840d4:	2100      	movs	r1, #0
   840d6:	2002      	movs	r0, #2
   840d8:	4c03      	ldr	r4, [pc, #12]	; (840e8 <udi_vendor_bulk_out_run+0x28>)
   840da:	47a0      	blx	r4
   840dc:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   840de:	4618      	mov	r0, r3
   840e0:	3714      	adds	r7, #20
   840e2:	46bd      	mov	sp, r7
   840e4:	bd90      	pop	{r4, r7, pc}
   840e6:	bf00      	nop
   840e8:	00082739 	.word	0x00082739

000840ec <cpu_irq_save>:
{
   840ec:	b480      	push	{r7}
   840ee:	b083      	sub	sp, #12
   840f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   840f2:	f3ef 8310 	mrs	r3, PRIMASK
   840f6:	603b      	str	r3, [r7, #0]
  return(result);
   840f8:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   840fa:	2b00      	cmp	r3, #0
   840fc:	bf0c      	ite	eq
   840fe:	2301      	moveq	r3, #1
   84100:	2300      	movne	r3, #0
   84102:	b2db      	uxtb	r3, r3
   84104:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   84106:	b672      	cpsid	i
  __ASM volatile ("dmb");
   84108:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8410c:	4b04      	ldr	r3, [pc, #16]	; (84120 <cpu_irq_save+0x34>)
   8410e:	2200      	movs	r2, #0
   84110:	701a      	strb	r2, [r3, #0]
	return flags;
   84112:	687b      	ldr	r3, [r7, #4]
}
   84114:	4618      	mov	r0, r3
   84116:	370c      	adds	r7, #12
   84118:	46bd      	mov	sp, r7
   8411a:	bc80      	pop	{r7}
   8411c:	4770      	bx	lr
   8411e:	bf00      	nop
   84120:	2000031a 	.word	0x2000031a

00084124 <cpu_irq_is_enabled_flags>:
{
   84124:	b480      	push	{r7}
   84126:	b083      	sub	sp, #12
   84128:	af00      	add	r7, sp, #0
   8412a:	6078      	str	r0, [r7, #4]
	return (flags);
   8412c:	687b      	ldr	r3, [r7, #4]
   8412e:	2b00      	cmp	r3, #0
   84130:	bf14      	ite	ne
   84132:	2301      	movne	r3, #1
   84134:	2300      	moveq	r3, #0
   84136:	b2db      	uxtb	r3, r3
}
   84138:	4618      	mov	r0, r3
   8413a:	370c      	adds	r7, #12
   8413c:	46bd      	mov	sp, r7
   8413e:	bc80      	pop	{r7}
   84140:	4770      	bx	lr
   84142:	0000      	movs	r0, r0

00084144 <cpu_irq_restore>:
{
   84144:	b580      	push	{r7, lr}
   84146:	b082      	sub	sp, #8
   84148:	af00      	add	r7, sp, #0
   8414a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   8414c:	6878      	ldr	r0, [r7, #4]
   8414e:	4b07      	ldr	r3, [pc, #28]	; (8416c <cpu_irq_restore+0x28>)
   84150:	4798      	blx	r3
   84152:	4603      	mov	r3, r0
   84154:	2b00      	cmp	r3, #0
   84156:	d005      	beq.n	84164 <cpu_irq_restore+0x20>
		cpu_irq_enable();
   84158:	4b05      	ldr	r3, [pc, #20]	; (84170 <cpu_irq_restore+0x2c>)
   8415a:	2201      	movs	r2, #1
   8415c:	701a      	strb	r2, [r3, #0]
   8415e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   84162:	b662      	cpsie	i
}
   84164:	bf00      	nop
   84166:	3708      	adds	r7, #8
   84168:	46bd      	mov	sp, r7
   8416a:	bd80      	pop	{r7, pc}
   8416c:	00084125 	.word	0x00084125
   84170:	2000031a 	.word	0x2000031a

00084174 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   84174:	b580      	push	{r7, lr}
   84176:	b086      	sub	sp, #24
   84178:	af00      	add	r7, sp, #0
   8417a:	60f8      	str	r0, [r7, #12]
   8417c:	60b9      	str	r1, [r7, #8]
   8417e:	607a      	str	r2, [r7, #4]
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   84180:	68bb      	ldr	r3, [r7, #8]
   84182:	2b0e      	cmp	r3, #14
   84184:	d002      	beq.n	8418c <efc_perform_command+0x18>
   84186:	68bb      	ldr	r3, [r7, #8]
   84188:	2b0f      	cmp	r3, #15
   8418a:	d102      	bne.n	84192 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   8418c:	f04f 33ff 	mov.w	r3, #4294967295
   84190:	e016      	b.n	841c0 <efc_perform_command+0x4c>
	}

	flags = cpu_irq_save();
   84192:	4b0d      	ldr	r3, [pc, #52]	; (841c8 <efc_perform_command+0x54>)
   84194:	4798      	blx	r3
   84196:	6178      	str	r0, [r7, #20]
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   84198:	687b      	ldr	r3, [r7, #4]
   8419a:	021b      	lsls	r3, r3, #8
   8419c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   841a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   841a4:	68ba      	ldr	r2, [r7, #8]
   841a6:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   841a8:	4313      	orrs	r3, r2
	result = efc_perform_fcr(p_efc,
   841aa:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   841ae:	4619      	mov	r1, r3
   841b0:	68f8      	ldr	r0, [r7, #12]
   841b2:	4b06      	ldr	r3, [pc, #24]	; (841cc <efc_perform_command+0x58>)
   841b4:	4798      	blx	r3
   841b6:	6138      	str	r0, [r7, #16]
	cpu_irq_restore(flags);
   841b8:	6978      	ldr	r0, [r7, #20]
   841ba:	4b05      	ldr	r3, [pc, #20]	; (841d0 <efc_perform_command+0x5c>)
   841bc:	4798      	blx	r3
	return result;
   841be:	693b      	ldr	r3, [r7, #16]
}
   841c0:	4618      	mov	r0, r3
   841c2:	3718      	adds	r7, #24
   841c4:	46bd      	mov	sp, r7
   841c6:	bd80      	pop	{r7, pc}
   841c8:	000840ed 	.word	0x000840ed
   841cc:	200000bd 	.word	0x200000bd
   841d0:	00084145 	.word	0x00084145

000841d4 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   841d4:	b480      	push	{r7}
   841d6:	b085      	sub	sp, #20
   841d8:	af00      	add	r7, sp, #0
   841da:	60f8      	str	r0, [r7, #12]
   841dc:	60b9      	str	r1, [r7, #8]
   841de:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   841e0:	687b      	ldr	r3, [r7, #4]
   841e2:	2b00      	cmp	r3, #0
   841e4:	d003      	beq.n	841ee <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   841e6:	68fb      	ldr	r3, [r7, #12]
   841e8:	68ba      	ldr	r2, [r7, #8]
   841ea:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   841ec:	e002      	b.n	841f4 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
   841ee:	68fb      	ldr	r3, [r7, #12]
   841f0:	68ba      	ldr	r2, [r7, #8]
   841f2:	661a      	str	r2, [r3, #96]	; 0x60
}
   841f4:	bf00      	nop
   841f6:	3714      	adds	r7, #20
   841f8:	46bd      	mov	sp, r7
   841fa:	bc80      	pop	{r7}
   841fc:	4770      	bx	lr

000841fe <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   841fe:	b480      	push	{r7}
   84200:	b087      	sub	sp, #28
   84202:	af00      	add	r7, sp, #0
   84204:	60f8      	str	r0, [r7, #12]
   84206:	60b9      	str	r1, [r7, #8]
   84208:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8420a:	68fb      	ldr	r3, [r7, #12]
   8420c:	687a      	ldr	r2, [r7, #4]
   8420e:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   84210:	68bb      	ldr	r3, [r7, #8]
   84212:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   84216:	d025      	beq.n	84264 <pio_set_peripheral+0x66>
   84218:	68bb      	ldr	r3, [r7, #8]
   8421a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8421e:	d807      	bhi.n	84230 <pio_set_peripheral+0x32>
   84220:	68bb      	ldr	r3, [r7, #8]
   84222:	2b00      	cmp	r3, #0
   84224:	d02b      	beq.n	8427e <pio_set_peripheral+0x80>
   84226:	68bb      	ldr	r3, [r7, #8]
   84228:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8422c:	d00d      	beq.n	8424a <pio_set_peripheral+0x4c>
   8422e:	e022      	b.n	84276 <pio_set_peripheral+0x78>
   84230:	68bb      	ldr	r3, [r7, #8]
   84232:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   84236:	d022      	beq.n	8427e <pio_set_peripheral+0x80>
   84238:	68bb      	ldr	r3, [r7, #8]
   8423a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8423e:	d01e      	beq.n	8427e <pio_set_peripheral+0x80>
   84240:	68bb      	ldr	r3, [r7, #8]
   84242:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   84246:	d01a      	beq.n	8427e <pio_set_peripheral+0x80>
   84248:	e015      	b.n	84276 <pio_set_peripheral+0x78>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8424a:	68fb      	ldr	r3, [r7, #12]
   8424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   8424e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   84250:	68fb      	ldr	r3, [r7, #12]
   84252:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   84254:	687b      	ldr	r3, [r7, #4]
   84256:	43d9      	mvns	r1, r3
   84258:	697b      	ldr	r3, [r7, #20]
   8425a:	400b      	ands	r3, r1
   8425c:	401a      	ands	r2, r3
   8425e:	68fb      	ldr	r3, [r7, #12]
   84260:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   84262:	e008      	b.n	84276 <pio_set_peripheral+0x78>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   84264:	68fb      	ldr	r3, [r7, #12]
   84266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   84268:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8426a:	687a      	ldr	r2, [r7, #4]
   8426c:	697b      	ldr	r3, [r7, #20]
   8426e:	431a      	orrs	r2, r3
   84270:	68fb      	ldr	r3, [r7, #12]
   84272:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   84274:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   84276:	68fb      	ldr	r3, [r7, #12]
   84278:	687a      	ldr	r2, [r7, #4]
   8427a:	605a      	str	r2, [r3, #4]
   8427c:	e000      	b.n	84280 <pio_set_peripheral+0x82>
		return;
   8427e:	bf00      	nop
}
   84280:	371c      	adds	r7, #28
   84282:	46bd      	mov	sp, r7
   84284:	bc80      	pop	{r7}
   84286:	4770      	bx	lr

00084288 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   84288:	b580      	push	{r7, lr}
   8428a:	b084      	sub	sp, #16
   8428c:	af00      	add	r7, sp, #0
   8428e:	60f8      	str	r0, [r7, #12]
   84290:	60b9      	str	r1, [r7, #8]
   84292:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   84294:	68b9      	ldr	r1, [r7, #8]
   84296:	68f8      	ldr	r0, [r7, #12]
   84298:	4b19      	ldr	r3, [pc, #100]	; (84300 <pio_set_input+0x78>)
   8429a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   8429c:	687b      	ldr	r3, [r7, #4]
   8429e:	f003 0301 	and.w	r3, r3, #1
   842a2:	461a      	mov	r2, r3
   842a4:	68b9      	ldr	r1, [r7, #8]
   842a6:	68f8      	ldr	r0, [r7, #12]
   842a8:	4b16      	ldr	r3, [pc, #88]	; (84304 <pio_set_input+0x7c>)
   842aa:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   842ac:	687b      	ldr	r3, [r7, #4]
   842ae:	f003 030a 	and.w	r3, r3, #10
   842b2:	2b00      	cmp	r3, #0
   842b4:	d003      	beq.n	842be <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   842b6:	68fb      	ldr	r3, [r7, #12]
   842b8:	68ba      	ldr	r2, [r7, #8]
   842ba:	621a      	str	r2, [r3, #32]
   842bc:	e002      	b.n	842c4 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   842be:	68fb      	ldr	r3, [r7, #12]
   842c0:	68ba      	ldr	r2, [r7, #8]
   842c2:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   842c4:	687b      	ldr	r3, [r7, #4]
   842c6:	f003 0302 	and.w	r3, r3, #2
   842ca:	2b00      	cmp	r3, #0
   842cc:	d004      	beq.n	842d8 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   842ce:	68fb      	ldr	r3, [r7, #12]
   842d0:	68ba      	ldr	r2, [r7, #8]
   842d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   842d6:	e008      	b.n	842ea <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   842d8:	687b      	ldr	r3, [r7, #4]
   842da:	f003 0308 	and.w	r3, r3, #8
   842de:	2b00      	cmp	r3, #0
   842e0:	d003      	beq.n	842ea <pio_set_input+0x62>
			p_pio->PIO_DIFSR = ul_mask;
   842e2:	68fb      	ldr	r3, [r7, #12]
   842e4:	68ba      	ldr	r2, [r7, #8]
   842e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   842ea:	68fb      	ldr	r3, [r7, #12]
   842ec:	68ba      	ldr	r2, [r7, #8]
   842ee:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   842f0:	68fb      	ldr	r3, [r7, #12]
   842f2:	68ba      	ldr	r2, [r7, #8]
   842f4:	601a      	str	r2, [r3, #0]
}
   842f6:	bf00      	nop
   842f8:	3710      	adds	r7, #16
   842fa:	46bd      	mov	sp, r7
   842fc:	bd80      	pop	{r7, pc}
   842fe:	bf00      	nop
   84300:	000843a3 	.word	0x000843a3
   84304:	000841d5 	.word	0x000841d5

00084308 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   84308:	b580      	push	{r7, lr}
   8430a:	b084      	sub	sp, #16
   8430c:	af00      	add	r7, sp, #0
   8430e:	60f8      	str	r0, [r7, #12]
   84310:	60b9      	str	r1, [r7, #8]
   84312:	607a      	str	r2, [r7, #4]
   84314:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   84316:	68b9      	ldr	r1, [r7, #8]
   84318:	68f8      	ldr	r0, [r7, #12]
   8431a:	4b12      	ldr	r3, [pc, #72]	; (84364 <pio_set_output+0x5c>)
   8431c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   8431e:	69ba      	ldr	r2, [r7, #24]
   84320:	68b9      	ldr	r1, [r7, #8]
   84322:	68f8      	ldr	r0, [r7, #12]
   84324:	4b10      	ldr	r3, [pc, #64]	; (84368 <pio_set_output+0x60>)
   84326:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   84328:	683b      	ldr	r3, [r7, #0]
   8432a:	2b00      	cmp	r3, #0
   8432c:	d003      	beq.n	84336 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   8432e:	68fb      	ldr	r3, [r7, #12]
   84330:	68ba      	ldr	r2, [r7, #8]
   84332:	651a      	str	r2, [r3, #80]	; 0x50
   84334:	e002      	b.n	8433c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   84336:	68fb      	ldr	r3, [r7, #12]
   84338:	68ba      	ldr	r2, [r7, #8]
   8433a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8433c:	687b      	ldr	r3, [r7, #4]
   8433e:	2b00      	cmp	r3, #0
   84340:	d003      	beq.n	8434a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   84342:	68fb      	ldr	r3, [r7, #12]
   84344:	68ba      	ldr	r2, [r7, #8]
   84346:	631a      	str	r2, [r3, #48]	; 0x30
   84348:	e002      	b.n	84350 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8434a:	68fb      	ldr	r3, [r7, #12]
   8434c:	68ba      	ldr	r2, [r7, #8]
   8434e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   84350:	68fb      	ldr	r3, [r7, #12]
   84352:	68ba      	ldr	r2, [r7, #8]
   84354:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   84356:	68fb      	ldr	r3, [r7, #12]
   84358:	68ba      	ldr	r2, [r7, #8]
   8435a:	601a      	str	r2, [r3, #0]
}
   8435c:	bf00      	nop
   8435e:	3710      	adds	r7, #16
   84360:	46bd      	mov	sp, r7
   84362:	bd80      	pop	{r7, pc}
   84364:	000843a3 	.word	0x000843a3
   84368:	000841d5 	.word	0x000841d5

0008436c <pio_enable_output_write>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_enable_output_write(Pio *p_pio, const uint32_t ul_mask)
{
   8436c:	b480      	push	{r7}
   8436e:	b083      	sub	sp, #12
   84370:	af00      	add	r7, sp, #0
   84372:	6078      	str	r0, [r7, #4]
   84374:	6039      	str	r1, [r7, #0]
	p_pio->PIO_OWER = ul_mask;
   84376:	687b      	ldr	r3, [r7, #4]
   84378:	683a      	ldr	r2, [r7, #0]
   8437a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   8437e:	bf00      	nop
   84380:	370c      	adds	r7, #12
   84382:	46bd      	mov	sp, r7
   84384:	bc80      	pop	{r7}
   84386:	4770      	bx	lr

00084388 <pio_sync_output_write>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_sync_output_write(Pio *p_pio, const uint32_t ul_mask)
{
   84388:	b480      	push	{r7}
   8438a:	b083      	sub	sp, #12
   8438c:	af00      	add	r7, sp, #0
   8438e:	6078      	str	r0, [r7, #4]
   84390:	6039      	str	r1, [r7, #0]
	p_pio->PIO_ODSR = ul_mask;
   84392:	687b      	ldr	r3, [r7, #4]
   84394:	683a      	ldr	r2, [r7, #0]
   84396:	639a      	str	r2, [r3, #56]	; 0x38
}
   84398:	bf00      	nop
   8439a:	370c      	adds	r7, #12
   8439c:	46bd      	mov	sp, r7
   8439e:	bc80      	pop	{r7}
   843a0:	4770      	bx	lr

000843a2 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   843a2:	b480      	push	{r7}
   843a4:	b083      	sub	sp, #12
   843a6:	af00      	add	r7, sp, #0
   843a8:	6078      	str	r0, [r7, #4]
   843aa:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   843ac:	687b      	ldr	r3, [r7, #4]
   843ae:	683a      	ldr	r2, [r7, #0]
   843b0:	645a      	str	r2, [r3, #68]	; 0x44
}
   843b2:	bf00      	nop
   843b4:	370c      	adds	r7, #12
   843b6:	46bd      	mov	sp, r7
   843b8:	bc80      	pop	{r7}
   843ba:	4770      	bx	lr

000843bc <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   843bc:	b480      	push	{r7}
   843be:	b083      	sub	sp, #12
   843c0:	af00      	add	r7, sp, #0
   843c2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   843c4:	687b      	ldr	r3, [r7, #4]
   843c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   843c8:	4618      	mov	r0, r3
   843ca:	370c      	adds	r7, #12
   843cc:	46bd      	mov	sp, r7
   843ce:	bc80      	pop	{r7}
   843d0:	4770      	bx	lr

000843d2 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   843d2:	b480      	push	{r7}
   843d4:	b083      	sub	sp, #12
   843d6:	af00      	add	r7, sp, #0
   843d8:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   843da:	687b      	ldr	r3, [r7, #4]
   843dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   843de:	4618      	mov	r0, r3
   843e0:	370c      	adds	r7, #12
   843e2:	46bd      	mov	sp, r7
   843e4:	bc80      	pop	{r7}
   843e6:	4770      	bx	lr

000843e8 <pio_get_pin_value>:
 *       level.
 * \note If pin is input: PIOx must be clocked to sample the signal.
 *       See PMC driver.
 */
uint32_t pio_get_pin_value(uint32_t ul_pin)
{
   843e8:	b580      	push	{r7, lr}
   843ea:	b084      	sub	sp, #16
   843ec:	af00      	add	r7, sp, #0
   843ee:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   843f0:	6878      	ldr	r0, [r7, #4]
   843f2:	4b08      	ldr	r3, [pc, #32]	; (84414 <pio_get_pin_value+0x2c>)
   843f4:	4798      	blx	r3
   843f6:	60f8      	str	r0, [r7, #12]

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   843f8:	68fb      	ldr	r3, [r7, #12]
   843fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   843fc:	687b      	ldr	r3, [r7, #4]
   843fe:	f003 031f 	and.w	r3, r3, #31
   84402:	fa22 f303 	lsr.w	r3, r2, r3
   84406:	f003 0301 	and.w	r3, r3, #1
}
   8440a:	4618      	mov	r0, r3
   8440c:	3710      	adds	r7, #16
   8440e:	46bd      	mov	sp, r7
   84410:	bd80      	pop	{r7, pc}
   84412:	bf00      	nop
   84414:	00084671 	.word	0x00084671

00084418 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   84418:	b580      	push	{r7, lr}
   8441a:	b084      	sub	sp, #16
   8441c:	af00      	add	r7, sp, #0
   8441e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   84420:	6878      	ldr	r0, [r7, #4]
   84422:	4b08      	ldr	r3, [pc, #32]	; (84444 <pio_set_pin_high+0x2c>)
   84424:	4798      	blx	r3
   84426:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   84428:	687b      	ldr	r3, [r7, #4]
   8442a:	f003 031f 	and.w	r3, r3, #31
   8442e:	2201      	movs	r2, #1
   84430:	fa02 f303 	lsl.w	r3, r2, r3
   84434:	461a      	mov	r2, r3
   84436:	68fb      	ldr	r3, [r7, #12]
   84438:	631a      	str	r2, [r3, #48]	; 0x30
}
   8443a:	bf00      	nop
   8443c:	3710      	adds	r7, #16
   8443e:	46bd      	mov	sp, r7
   84440:	bd80      	pop	{r7, pc}
   84442:	bf00      	nop
   84444:	00084671 	.word	0x00084671

00084448 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   84448:	b580      	push	{r7, lr}
   8444a:	b084      	sub	sp, #16
   8444c:	af00      	add	r7, sp, #0
   8444e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   84450:	6878      	ldr	r0, [r7, #4]
   84452:	4b08      	ldr	r3, [pc, #32]	; (84474 <pio_set_pin_low+0x2c>)
   84454:	4798      	blx	r3
   84456:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   84458:	687b      	ldr	r3, [r7, #4]
   8445a:	f003 031f 	and.w	r3, r3, #31
   8445e:	2201      	movs	r2, #1
   84460:	fa02 f303 	lsl.w	r3, r2, r3
   84464:	461a      	mov	r2, r3
   84466:	68fb      	ldr	r3, [r7, #12]
   84468:	635a      	str	r2, [r3, #52]	; 0x34
}
   8446a:	bf00      	nop
   8446c:	3710      	adds	r7, #16
   8446e:	46bd      	mov	sp, r7
   84470:	bd80      	pop	{r7, pc}
   84472:	bf00      	nop
   84474:	00084671 	.word	0x00084671

00084478 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   84478:	b590      	push	{r4, r7, lr}
   8447a:	b087      	sub	sp, #28
   8447c:	af02      	add	r7, sp, #8
   8447e:	6078      	str	r0, [r7, #4]
   84480:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   84482:	6878      	ldr	r0, [r7, #4]
   84484:	4b40      	ldr	r3, [pc, #256]	; (84588 <pio_configure_pin+0x110>)
   84486:	4798      	blx	r3
   84488:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8448a:	683b      	ldr	r3, [r7, #0]
   8448c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   84490:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   84494:	d046      	beq.n	84524 <pio_configure_pin+0xac>
   84496:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8449a:	d806      	bhi.n	844aa <pio_configure_pin+0x32>
   8449c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   844a0:	d00a      	beq.n	844b8 <pio_configure_pin+0x40>
   844a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   844a6:	d022      	beq.n	844ee <pio_configure_pin+0x76>
   844a8:	e067      	b.n	8457a <pio_configure_pin+0x102>
   844aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   844ae:	d045      	beq.n	8453c <pio_configure_pin+0xc4>
   844b0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   844b4:	d042      	beq.n	8453c <pio_configure_pin+0xc4>
   844b6:	e060      	b.n	8457a <pio_configure_pin+0x102>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   844b8:	687b      	ldr	r3, [r7, #4]
   844ba:	f003 031f 	and.w	r3, r3, #31
   844be:	2201      	movs	r2, #1
   844c0:	fa02 f303 	lsl.w	r3, r2, r3
   844c4:	461a      	mov	r2, r3
   844c6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   844ca:	68f8      	ldr	r0, [r7, #12]
   844cc:	4b2f      	ldr	r3, [pc, #188]	; (8458c <pio_configure_pin+0x114>)
   844ce:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   844d0:	687b      	ldr	r3, [r7, #4]
   844d2:	f003 031f 	and.w	r3, r3, #31
   844d6:	2201      	movs	r2, #1
   844d8:	fa02 f303 	lsl.w	r3, r2, r3
   844dc:	4619      	mov	r1, r3
   844de:	683b      	ldr	r3, [r7, #0]
   844e0:	f003 0301 	and.w	r3, r3, #1
   844e4:	461a      	mov	r2, r3
   844e6:	68f8      	ldr	r0, [r7, #12]
   844e8:	4b29      	ldr	r3, [pc, #164]	; (84590 <pio_configure_pin+0x118>)
   844ea:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   844ec:	e047      	b.n	8457e <pio_configure_pin+0x106>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   844ee:	687b      	ldr	r3, [r7, #4]
   844f0:	f003 031f 	and.w	r3, r3, #31
   844f4:	2201      	movs	r2, #1
   844f6:	fa02 f303 	lsl.w	r3, r2, r3
   844fa:	461a      	mov	r2, r3
   844fc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   84500:	68f8      	ldr	r0, [r7, #12]
   84502:	4b22      	ldr	r3, [pc, #136]	; (8458c <pio_configure_pin+0x114>)
   84504:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   84506:	687b      	ldr	r3, [r7, #4]
   84508:	f003 031f 	and.w	r3, r3, #31
   8450c:	2201      	movs	r2, #1
   8450e:	fa02 f303 	lsl.w	r3, r2, r3
   84512:	4619      	mov	r1, r3
   84514:	683b      	ldr	r3, [r7, #0]
   84516:	f003 0301 	and.w	r3, r3, #1
   8451a:	461a      	mov	r2, r3
   8451c:	68f8      	ldr	r0, [r7, #12]
   8451e:	4b1c      	ldr	r3, [pc, #112]	; (84590 <pio_configure_pin+0x118>)
   84520:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   84522:	e02c      	b.n	8457e <pio_configure_pin+0x106>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   84524:	687b      	ldr	r3, [r7, #4]
   84526:	f003 031f 	and.w	r3, r3, #31
   8452a:	2201      	movs	r2, #1
   8452c:	fa02 f303 	lsl.w	r3, r2, r3
   84530:	683a      	ldr	r2, [r7, #0]
   84532:	4619      	mov	r1, r3
   84534:	68f8      	ldr	r0, [r7, #12]
   84536:	4b17      	ldr	r3, [pc, #92]	; (84594 <pio_configure_pin+0x11c>)
   84538:	4798      	blx	r3
		break;
   8453a:	e020      	b.n	8457e <pio_configure_pin+0x106>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8453c:	687b      	ldr	r3, [r7, #4]
   8453e:	f003 031f 	and.w	r3, r3, #31
   84542:	2201      	movs	r2, #1
   84544:	fa02 f303 	lsl.w	r3, r2, r3
   84548:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8454a:	683b      	ldr	r3, [r7, #0]
   8454c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   84550:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84554:	bf0c      	ite	eq
   84556:	2301      	moveq	r3, #1
   84558:	2300      	movne	r3, #0
   8455a:	b2db      	uxtb	r3, r3
   8455c:	4618      	mov	r0, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   8455e:	683b      	ldr	r3, [r7, #0]
   84560:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   84562:	f003 0201 	and.w	r2, r3, #1
   84566:	683b      	ldr	r3, [r7, #0]
   84568:	f003 0301 	and.w	r3, r3, #1
   8456c:	9300      	str	r3, [sp, #0]
   8456e:	4613      	mov	r3, r2
   84570:	4602      	mov	r2, r0
   84572:	68f8      	ldr	r0, [r7, #12]
   84574:	4c08      	ldr	r4, [pc, #32]	; (84598 <pio_configure_pin+0x120>)
   84576:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   84578:	e001      	b.n	8457e <pio_configure_pin+0x106>

	default:
		return 0;
   8457a:	2300      	movs	r3, #0
   8457c:	e000      	b.n	84580 <pio_configure_pin+0x108>
	}

	return 1;
   8457e:	2301      	movs	r3, #1
}
   84580:	4618      	mov	r0, r3
   84582:	3714      	adds	r7, #20
   84584:	46bd      	mov	sp, r7
   84586:	bd90      	pop	{r4, r7, pc}
   84588:	00084671 	.word	0x00084671
   8458c:	000841ff 	.word	0x000841ff
   84590:	000841d5 	.word	0x000841d5
   84594:	00084289 	.word	0x00084289
   84598:	00084309 	.word	0x00084309

0008459c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   8459c:	b590      	push	{r4, r7, lr}
   8459e:	b087      	sub	sp, #28
   845a0:	af02      	add	r7, sp, #8
   845a2:	60f8      	str	r0, [r7, #12]
   845a4:	60b9      	str	r1, [r7, #8]
   845a6:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   845a8:	687b      	ldr	r3, [r7, #4]
   845aa:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   845ae:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   845b2:	d02e      	beq.n	84612 <pio_configure_pin_group+0x76>
   845b4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   845b8:	d806      	bhi.n	845c8 <pio_configure_pin_group+0x2c>
   845ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   845be:	d00a      	beq.n	845d6 <pio_configure_pin_group+0x3a>
   845c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   845c4:	d016      	beq.n	845f4 <pio_configure_pin_group+0x58>
   845c6:	e043      	b.n	84650 <pio_configure_pin_group+0xb4>
   845c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   845cc:	d027      	beq.n	8461e <pio_configure_pin_group+0x82>
   845ce:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   845d2:	d024      	beq.n	8461e <pio_configure_pin_group+0x82>
   845d4:	e03c      	b.n	84650 <pio_configure_pin_group+0xb4>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   845d6:	68ba      	ldr	r2, [r7, #8]
   845d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   845dc:	68f8      	ldr	r0, [r7, #12]
   845de:	4b20      	ldr	r3, [pc, #128]	; (84660 <pio_configure_pin_group+0xc4>)
   845e0:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   845e2:	687b      	ldr	r3, [r7, #4]
   845e4:	f003 0301 	and.w	r3, r3, #1
   845e8:	461a      	mov	r2, r3
   845ea:	68b9      	ldr	r1, [r7, #8]
   845ec:	68f8      	ldr	r0, [r7, #12]
   845ee:	4b1d      	ldr	r3, [pc, #116]	; (84664 <pio_configure_pin_group+0xc8>)
   845f0:	4798      	blx	r3
		break;
   845f2:	e02f      	b.n	84654 <pio_configure_pin_group+0xb8>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   845f4:	68ba      	ldr	r2, [r7, #8]
   845f6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   845fa:	68f8      	ldr	r0, [r7, #12]
   845fc:	4b18      	ldr	r3, [pc, #96]	; (84660 <pio_configure_pin_group+0xc4>)
   845fe:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   84600:	687b      	ldr	r3, [r7, #4]
   84602:	f003 0301 	and.w	r3, r3, #1
   84606:	461a      	mov	r2, r3
   84608:	68b9      	ldr	r1, [r7, #8]
   8460a:	68f8      	ldr	r0, [r7, #12]
   8460c:	4b15      	ldr	r3, [pc, #84]	; (84664 <pio_configure_pin_group+0xc8>)
   8460e:	4798      	blx	r3
		break;
   84610:	e020      	b.n	84654 <pio_configure_pin_group+0xb8>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   84612:	687a      	ldr	r2, [r7, #4]
   84614:	68b9      	ldr	r1, [r7, #8]
   84616:	68f8      	ldr	r0, [r7, #12]
   84618:	4b13      	ldr	r3, [pc, #76]	; (84668 <pio_configure_pin_group+0xcc>)
   8461a:	4798      	blx	r3
		break;
   8461c:	e01a      	b.n	84654 <pio_configure_pin_group+0xb8>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8461e:	687b      	ldr	r3, [r7, #4]
   84620:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   84624:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84628:	bf0c      	ite	eq
   8462a:	2301      	moveq	r3, #1
   8462c:	2300      	movne	r3, #0
   8462e:	b2db      	uxtb	r3, r3
   84630:	4619      	mov	r1, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   84632:	687b      	ldr	r3, [r7, #4]
   84634:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, ul_mask,
   84636:	f003 0201 	and.w	r2, r3, #1
   8463a:	687b      	ldr	r3, [r7, #4]
   8463c:	f003 0301 	and.w	r3, r3, #1
   84640:	9300      	str	r3, [sp, #0]
   84642:	4613      	mov	r3, r2
   84644:	460a      	mov	r2, r1
   84646:	68b9      	ldr	r1, [r7, #8]
   84648:	68f8      	ldr	r0, [r7, #12]
   8464a:	4c08      	ldr	r4, [pc, #32]	; (8466c <pio_configure_pin_group+0xd0>)
   8464c:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8464e:	e001      	b.n	84654 <pio_configure_pin_group+0xb8>

	default:
		return 0;
   84650:	2300      	movs	r3, #0
   84652:	e000      	b.n	84656 <pio_configure_pin_group+0xba>
	}

	return 1;
   84654:	2301      	movs	r3, #1
}
   84656:	4618      	mov	r0, r3
   84658:	3714      	adds	r7, #20
   8465a:	46bd      	mov	sp, r7
   8465c:	bd90      	pop	{r4, r7, pc}
   8465e:	bf00      	nop
   84660:	000841ff 	.word	0x000841ff
   84664:	000841d5 	.word	0x000841d5
   84668:	00084289 	.word	0x00084289
   8466c:	00084309 	.word	0x00084309

00084670 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
   84670:	b480      	push	{r7}
   84672:	b085      	sub	sp, #20
   84674:	af00      	add	r7, sp, #0
   84676:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84678:	687b      	ldr	r3, [r7, #4]
   8467a:	095b      	lsrs	r3, r3, #5
   8467c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84680:	f203 7306 	addw	r3, r3, #1798	; 0x706
   84684:	025b      	lsls	r3, r3, #9
   84686:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
   84688:	68fb      	ldr	r3, [r7, #12]
}
   8468a:	4618      	mov	r0, r3
   8468c:	3714      	adds	r7, #20
   8468e:	46bd      	mov	sp, r7
   84690:	bc80      	pop	{r7}
   84692:	4770      	bx	lr

00084694 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   84694:	b480      	push	{r7}
   84696:	af00      	add	r7, sp, #0
	while (1) {
   84698:	e7fe      	b.n	84698 <Dummy_Handler+0x4>
   8469a:	0000      	movs	r0, r0

0008469c <udc_get_string_serial_name>:
 * to a suitable pointer. This will also require the serial number length
 * define USB_DEVICE_GET_SERIAL_NAME_LENGTH.
 */
#if defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	static const uint8_t *udc_get_string_serial_name(void)
	{
   8469c:	b480      	push	{r7}
   8469e:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_GET_SERIAL_NAME_POINTER;
   846a0:	4b02      	ldr	r3, [pc, #8]	; (846ac <udc_get_string_serial_name+0x10>)
	}
   846a2:	4618      	mov	r0, r3
   846a4:	46bd      	mov	sp, r7
   846a6:	bc80      	pop	{r7}
   846a8:	4770      	bx	lr
   846aa:	bf00      	nop
   846ac:	2000025c 	.word	0x2000025c

000846b0 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
   846b0:	b480      	push	{r7}
   846b2:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
   846b4:	4b02      	ldr	r3, [pc, #8]	; (846c0 <udc_get_interface_desc+0x10>)
   846b6:	681b      	ldr	r3, [r3, #0]
}
   846b8:	4618      	mov	r0, r3
   846ba:	46bd      	mov	sp, r7
   846bc:	bc80      	pop	{r7}
   846be:	4770      	bx	lr
   846c0:	20000d44 	.word	0x20000d44

000846c4 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
   846c4:	b480      	push	{r7}
   846c6:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   846c8:	4b06      	ldr	r3, [pc, #24]	; (846e4 <udc_get_eof_conf+0x20>)
   846ca:	681b      	ldr	r3, [r3, #0]
   846cc:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   846ce:	4a05      	ldr	r2, [pc, #20]	; (846e4 <udc_get_eof_conf+0x20>)
   846d0:	6812      	ldr	r2, [r2, #0]
   846d2:	6812      	ldr	r2, [r2, #0]
   846d4:	8852      	ldrh	r2, [r2, #2]
   846d6:	b292      	uxth	r2, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   846d8:	4413      	add	r3, r2
}
   846da:	4618      	mov	r0, r3
   846dc:	46bd      	mov	sp, r7
   846de:	bc80      	pop	{r7}
   846e0:	4770      	bx	lr
   846e2:	bf00      	nop
   846e4:	20000d40 	.word	0x20000d40

000846e8 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   846e8:	b580      	push	{r7, lr}
   846ea:	b084      	sub	sp, #16
   846ec:	af00      	add	r7, sp, #0
   846ee:	6078      	str	r0, [r7, #4]
   846f0:	460b      	mov	r3, r1
   846f2:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   846f4:	4b12      	ldr	r3, [pc, #72]	; (84740 <udc_next_desc_in_iface+0x58>)
   846f6:	4798      	blx	r3
   846f8:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   846fa:	687b      	ldr	r3, [r7, #4]
   846fc:	781b      	ldrb	r3, [r3, #0]
   846fe:	461a      	mov	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   84700:	687b      	ldr	r3, [r7, #4]
   84702:	4413      	add	r3, r2
   84704:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   84706:	e010      	b.n	8472a <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   84708:	687b      	ldr	r3, [r7, #4]
   8470a:	785b      	ldrb	r3, [r3, #1]
   8470c:	2b04      	cmp	r3, #4
   8470e:	d011      	beq.n	84734 <udc_next_desc_in_iface+0x4c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   84710:	687b      	ldr	r3, [r7, #4]
   84712:	785b      	ldrb	r3, [r3, #1]
   84714:	78fa      	ldrb	r2, [r7, #3]
   84716:	429a      	cmp	r2, r3
   84718:	d101      	bne.n	8471e <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
   8471a:	687b      	ldr	r3, [r7, #4]
   8471c:	e00c      	b.n	84738 <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   8471e:	687b      	ldr	r3, [r7, #4]
   84720:	781b      	ldrb	r3, [r3, #0]
   84722:	461a      	mov	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   84724:	687b      	ldr	r3, [r7, #4]
   84726:	4413      	add	r3, r2
   84728:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
   8472a:	68fa      	ldr	r2, [r7, #12]
   8472c:	687b      	ldr	r3, [r7, #4]
   8472e:	429a      	cmp	r2, r3
   84730:	d8ea      	bhi.n	84708 <udc_next_desc_in_iface+0x20>
   84732:	e000      	b.n	84736 <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
   84734:	bf00      	nop
	}
	return NULL; // No specific descriptor found
   84736:	2300      	movs	r3, #0
}
   84738:	4618      	mov	r0, r3
   8473a:	3710      	adds	r7, #16
   8473c:	46bd      	mov	sp, r7
   8473e:	bd80      	pop	{r7, pc}
   84740:	000846c5 	.word	0x000846c5

00084744 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   84744:	b580      	push	{r7, lr}
   84746:	b084      	sub	sp, #16
   84748:	af00      	add	r7, sp, #0
   8474a:	4603      	mov	r3, r0
   8474c:	460a      	mov	r2, r1
   8474e:	71fb      	strb	r3, [r7, #7]
   84750:	4613      	mov	r3, r2
   84752:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   84754:	4b1e      	ldr	r3, [pc, #120]	; (847d0 <udc_update_iface_desc+0x8c>)
   84756:	781b      	ldrb	r3, [r3, #0]
   84758:	2b00      	cmp	r3, #0
   8475a:	d101      	bne.n	84760 <udc_update_iface_desc+0x1c>
		return false;
   8475c:	2300      	movs	r3, #0
   8475e:	e032      	b.n	847c6 <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   84760:	4b1c      	ldr	r3, [pc, #112]	; (847d4 <udc_update_iface_desc+0x90>)
   84762:	681b      	ldr	r3, [r3, #0]
   84764:	681b      	ldr	r3, [r3, #0]
   84766:	791b      	ldrb	r3, [r3, #4]
   84768:	79fa      	ldrb	r2, [r7, #7]
   8476a:	429a      	cmp	r2, r3
   8476c:	d301      	bcc.n	84772 <udc_update_iface_desc+0x2e>
		return false;
   8476e:	2300      	movs	r3, #0
   84770:	e029      	b.n	847c6 <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
   84772:	4b18      	ldr	r3, [pc, #96]	; (847d4 <udc_update_iface_desc+0x90>)
   84774:	681b      	ldr	r3, [r3, #0]
   84776:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   84778:	4a17      	ldr	r2, [pc, #92]	; (847d8 <udc_update_iface_desc+0x94>)
   8477a:	6013      	str	r3, [r2, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   8477c:	4b17      	ldr	r3, [pc, #92]	; (847dc <udc_update_iface_desc+0x98>)
   8477e:	4798      	blx	r3
   84780:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
   84782:	e01a      	b.n	847ba <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   84784:	4b14      	ldr	r3, [pc, #80]	; (847d8 <udc_update_iface_desc+0x94>)
   84786:	681b      	ldr	r3, [r3, #0]
   84788:	785b      	ldrb	r3, [r3, #1]
   8478a:	2b04      	cmp	r3, #4
   8478c:	d10d      	bne.n	847aa <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   8478e:	4b12      	ldr	r3, [pc, #72]	; (847d8 <udc_update_iface_desc+0x94>)
   84790:	681b      	ldr	r3, [r3, #0]
   84792:	789b      	ldrb	r3, [r3, #2]
   84794:	79fa      	ldrb	r2, [r7, #7]
   84796:	429a      	cmp	r2, r3
   84798:	d107      	bne.n	847aa <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
   8479a:	4b0f      	ldr	r3, [pc, #60]	; (847d8 <udc_update_iface_desc+0x94>)
   8479c:	681b      	ldr	r3, [r3, #0]
   8479e:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   847a0:	79ba      	ldrb	r2, [r7, #6]
   847a2:	429a      	cmp	r2, r3
   847a4:	d101      	bne.n	847aa <udc_update_iface_desc+0x66>
				return true; // Interface found
   847a6:	2301      	movs	r3, #1
   847a8:	e00d      	b.n	847c6 <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   847aa:	4b0b      	ldr	r3, [pc, #44]	; (847d8 <udc_update_iface_desc+0x94>)
   847ac:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   847ae:	4a0a      	ldr	r2, [pc, #40]	; (847d8 <udc_update_iface_desc+0x94>)
   847b0:	6812      	ldr	r2, [r2, #0]
   847b2:	7812      	ldrb	r2, [r2, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   847b4:	4413      	add	r3, r2
   847b6:	4a08      	ldr	r2, [pc, #32]	; (847d8 <udc_update_iface_desc+0x94>)
   847b8:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   847ba:	4b07      	ldr	r3, [pc, #28]	; (847d8 <udc_update_iface_desc+0x94>)
   847bc:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
   847be:	68fa      	ldr	r2, [r7, #12]
   847c0:	429a      	cmp	r2, r3
   847c2:	d8df      	bhi.n	84784 <udc_update_iface_desc+0x40>
	}
	return false; // Interface not found
   847c4:	2300      	movs	r3, #0
}
   847c6:	4618      	mov	r0, r3
   847c8:	3710      	adds	r7, #16
   847ca:	46bd      	mov	sp, r7
   847cc:	bd80      	pop	{r7, pc}
   847ce:	bf00      	nop
   847d0:	20000d3c 	.word	0x20000d3c
   847d4:	20000d40 	.word	0x20000d40
   847d8:	20000d44 	.word	0x20000d44
   847dc:	000846c5 	.word	0x000846c5

000847e0 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   847e0:	b580      	push	{r7, lr}
   847e2:	b084      	sub	sp, #16
   847e4:	af00      	add	r7, sp, #0
   847e6:	4603      	mov	r3, r0
   847e8:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   847ea:	79fb      	ldrb	r3, [r7, #7]
   847ec:	2100      	movs	r1, #0
   847ee:	4618      	mov	r0, r3
   847f0:	4b1e      	ldr	r3, [pc, #120]	; (8486c <udc_iface_disable+0x8c>)
   847f2:	4798      	blx	r3
   847f4:	4603      	mov	r3, r0
   847f6:	f083 0301 	eor.w	r3, r3, #1
   847fa:	b2db      	uxtb	r3, r3
   847fc:	2b00      	cmp	r3, #0
   847fe:	d001      	beq.n	84804 <udc_iface_disable+0x24>
		return false;
   84800:	2300      	movs	r3, #0
   84802:	e02f      	b.n	84864 <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   84804:	4b1a      	ldr	r3, [pc, #104]	; (84870 <udc_iface_disable+0x90>)
   84806:	681b      	ldr	r3, [r3, #0]
   84808:	685a      	ldr	r2, [r3, #4]
   8480a:	79fb      	ldrb	r3, [r7, #7]
   8480c:	009b      	lsls	r3, r3, #2
   8480e:	4413      	add	r3, r2
   84810:	681b      	ldr	r3, [r3, #0]
   84812:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84814:	68bb      	ldr	r3, [r7, #8]
   84816:	68db      	ldr	r3, [r3, #12]
   84818:	4798      	blx	r3
   8481a:	4603      	mov	r3, r0
   8481c:	461a      	mov	r2, r3
   8481e:	79fb      	ldrb	r3, [r7, #7]
   84820:	4611      	mov	r1, r2
   84822:	4618      	mov	r0, r3
   84824:	4b11      	ldr	r3, [pc, #68]	; (8486c <udc_iface_disable+0x8c>)
   84826:	4798      	blx	r3
   84828:	4603      	mov	r3, r0
   8482a:	f083 0301 	eor.w	r3, r3, #1
   8482e:	b2db      	uxtb	r3, r3
   84830:	2b00      	cmp	r3, #0
   84832:	d001      	beq.n	84838 <udc_iface_disable+0x58>
		return false;
   84834:	2300      	movs	r3, #0
   84836:	e015      	b.n	84864 <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   84838:	4b0e      	ldr	r3, [pc, #56]	; (84874 <udc_iface_disable+0x94>)
   8483a:	681b      	ldr	r3, [r3, #0]
   8483c:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   8483e:	2105      	movs	r1, #5
   84840:	68f8      	ldr	r0, [r7, #12]
   84842:	4b0d      	ldr	r3, [pc, #52]	; (84878 <udc_iface_disable+0x98>)
   84844:	4798      	blx	r3
   84846:	60f8      	str	r0, [r7, #12]
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   84848:	68fb      	ldr	r3, [r7, #12]
   8484a:	2b00      	cmp	r3, #0
   8484c:	d005      	beq.n	8485a <udc_iface_disable+0x7a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   8484e:	68fb      	ldr	r3, [r7, #12]
   84850:	789b      	ldrb	r3, [r3, #2]
   84852:	4618      	mov	r0, r3
   84854:	4b09      	ldr	r3, [pc, #36]	; (8487c <udc_iface_disable+0x9c>)
   84856:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   84858:	e7f1      	b.n	8483e <udc_iface_disable+0x5e>
				break;
   8485a:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
   8485c:	68bb      	ldr	r3, [r7, #8]
   8485e:	685b      	ldr	r3, [r3, #4]
   84860:	4798      	blx	r3
	return true;
   84862:	2301      	movs	r3, #1
}
   84864:	4618      	mov	r0, r3
   84866:	3710      	adds	r7, #16
   84868:	46bd      	mov	sp, r7
   8486a:	bd80      	pop	{r7, pc}
   8486c:	00084745 	.word	0x00084745
   84870:	20000d40 	.word	0x20000d40
   84874:	20000d44 	.word	0x20000d44
   84878:	000846e9 	.word	0x000846e9
   8487c:	0008240d 	.word	0x0008240d

00084880 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   84880:	b580      	push	{r7, lr}
   84882:	b084      	sub	sp, #16
   84884:	af00      	add	r7, sp, #0
   84886:	4603      	mov	r3, r0
   84888:	460a      	mov	r2, r1
   8488a:	71fb      	strb	r3, [r7, #7]
   8488c:	4613      	mov	r3, r2
   8488e:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   84890:	79ba      	ldrb	r2, [r7, #6]
   84892:	79fb      	ldrb	r3, [r7, #7]
   84894:	4611      	mov	r1, r2
   84896:	4618      	mov	r0, r3
   84898:	4b1a      	ldr	r3, [pc, #104]	; (84904 <udc_iface_enable+0x84>)
   8489a:	4798      	blx	r3
   8489c:	4603      	mov	r3, r0
   8489e:	f083 0301 	eor.w	r3, r3, #1
   848a2:	b2db      	uxtb	r3, r3
   848a4:	2b00      	cmp	r3, #0
   848a6:	d001      	beq.n	848ac <udc_iface_enable+0x2c>
		return false;
   848a8:	2300      	movs	r3, #0
   848aa:	e027      	b.n	848fc <udc_iface_enable+0x7c>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   848ac:	4b16      	ldr	r3, [pc, #88]	; (84908 <udc_iface_enable+0x88>)
   848ae:	681b      	ldr	r3, [r3, #0]
   848b0:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   848b2:	2105      	movs	r1, #5
   848b4:	68f8      	ldr	r0, [r7, #12]
   848b6:	4b15      	ldr	r3, [pc, #84]	; (8490c <udc_iface_enable+0x8c>)
   848b8:	4798      	blx	r3
   848ba:	60f8      	str	r0, [r7, #12]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   848bc:	68fb      	ldr	r3, [r7, #12]
   848be:	2b00      	cmp	r3, #0
   848c0:	d011      	beq.n	848e6 <udc_iface_enable+0x66>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   848c2:	68fb      	ldr	r3, [r7, #12]
   848c4:	7898      	ldrb	r0, [r3, #2]
   848c6:	68fb      	ldr	r3, [r7, #12]
   848c8:	78d9      	ldrb	r1, [r3, #3]
   848ca:	68fb      	ldr	r3, [r7, #12]
   848cc:	889b      	ldrh	r3, [r3, #4]
   848ce:	b29b      	uxth	r3, r3
   848d0:	461a      	mov	r2, r3
   848d2:	4b0f      	ldr	r3, [pc, #60]	; (84910 <udc_iface_enable+0x90>)
   848d4:	4798      	blx	r3
   848d6:	4603      	mov	r3, r0
   848d8:	f083 0301 	eor.w	r3, r3, #1
   848dc:	b2db      	uxtb	r3, r3
   848de:	2b00      	cmp	r3, #0
   848e0:	d0e7      	beq.n	848b2 <udc_iface_enable+0x32>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
   848e2:	2300      	movs	r3, #0
   848e4:	e00a      	b.n	848fc <udc_iface_enable+0x7c>
			break;
   848e6:	bf00      	nop
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   848e8:	4b0a      	ldr	r3, [pc, #40]	; (84914 <udc_iface_enable+0x94>)
   848ea:	681b      	ldr	r3, [r3, #0]
   848ec:	685a      	ldr	r2, [r3, #4]
   848ee:	79fb      	ldrb	r3, [r7, #7]
   848f0:	009b      	lsls	r3, r3, #2
   848f2:	4413      	add	r3, r2
   848f4:	681b      	ldr	r3, [r3, #0]
   848f6:	681b      	ldr	r3, [r3, #0]
   848f8:	4798      	blx	r3
   848fa:	4603      	mov	r3, r0
}
   848fc:	4618      	mov	r0, r3
   848fe:	3710      	adds	r7, #16
   84900:	46bd      	mov	sp, r7
   84902:	bd80      	pop	{r7, pc}
   84904:	00084745 	.word	0x00084745
   84908:	20000d44 	.word	0x20000d44
   8490c:	000846e9 	.word	0x000846e9
   84910:	00082061 	.word	0x00082061
   84914:	20000d40 	.word	0x20000d40

00084918 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   84918:	b580      	push	{r7, lr}
   8491a:	af00      	add	r7, sp, #0
	udd_enable();
   8491c:	4b01      	ldr	r3, [pc, #4]	; (84924 <udc_start+0xc>)
   8491e:	4798      	blx	r3
}
   84920:	bf00      	nop
   84922:	bd80      	pop	{r7, pc}
   84924:	00081e1d 	.word	0x00081e1d

00084928 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   84928:	b580      	push	{r7, lr}
   8492a:	b082      	sub	sp, #8
   8492c:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   8492e:	4b0f      	ldr	r3, [pc, #60]	; (8496c <udc_reset+0x44>)
   84930:	781b      	ldrb	r3, [r3, #0]
   84932:	2b00      	cmp	r3, #0
   84934:	d010      	beq.n	84958 <udc_reset+0x30>
		for (iface_num = 0;
   84936:	2300      	movs	r3, #0
   84938:	71fb      	strb	r3, [r7, #7]
   8493a:	e006      	b.n	8494a <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   8493c:	79fb      	ldrb	r3, [r7, #7]
   8493e:	4618      	mov	r0, r3
   84940:	4b0b      	ldr	r3, [pc, #44]	; (84970 <udc_reset+0x48>)
   84942:	4798      	blx	r3
				iface_num++) {
   84944:	79fb      	ldrb	r3, [r7, #7]
   84946:	3301      	adds	r3, #1
   84948:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8494a:	4b0a      	ldr	r3, [pc, #40]	; (84974 <udc_reset+0x4c>)
   8494c:	681b      	ldr	r3, [r3, #0]
   8494e:	681b      	ldr	r3, [r3, #0]
   84950:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   84952:	79fa      	ldrb	r2, [r7, #7]
   84954:	429a      	cmp	r2, r3
   84956:	d3f1      	bcc.n	8493c <udc_reset+0x14>
		}
	}
	udc_num_configuration = 0;
   84958:	4b04      	ldr	r3, [pc, #16]	; (8496c <udc_reset+0x44>)
   8495a:	2200      	movs	r2, #0
   8495c:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   8495e:	4b06      	ldr	r3, [pc, #24]	; (84978 <udc_reset+0x50>)
   84960:	2200      	movs	r2, #0
   84962:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
   84964:	bf00      	nop
   84966:	3708      	adds	r7, #8
   84968:	46bd      	mov	sp, r7
   8496a:	bd80      	pop	{r7, pc}
   8496c:	20000d3c 	.word	0x20000d3c
   84970:	000847e1 	.word	0x000847e1
   84974:	20000d40 	.word	0x20000d40
   84978:	20000d3a 	.word	0x20000d3a

0008497c <udc_sof_notify>:

void udc_sof_notify(void)
{
   8497c:	b580      	push	{r7, lr}
   8497e:	b082      	sub	sp, #8
   84980:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   84982:	4b14      	ldr	r3, [pc, #80]	; (849d4 <udc_sof_notify+0x58>)
   84984:	781b      	ldrb	r3, [r3, #0]
   84986:	2b00      	cmp	r3, #0
   84988:	d01f      	beq.n	849ca <udc_sof_notify+0x4e>
		for (iface_num = 0;
   8498a:	2300      	movs	r3, #0
   8498c:	71fb      	strb	r3, [r7, #7]
   8498e:	e015      	b.n	849bc <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   84990:	4b11      	ldr	r3, [pc, #68]	; (849d8 <udc_sof_notify+0x5c>)
   84992:	681b      	ldr	r3, [r3, #0]
   84994:	685a      	ldr	r2, [r3, #4]
   84996:	79fb      	ldrb	r3, [r7, #7]
   84998:	009b      	lsls	r3, r3, #2
   8499a:	4413      	add	r3, r2
   8499c:	681b      	ldr	r3, [r3, #0]
   8499e:	691b      	ldr	r3, [r3, #16]
   849a0:	2b00      	cmp	r3, #0
   849a2:	d008      	beq.n	849b6 <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   849a4:	4b0c      	ldr	r3, [pc, #48]	; (849d8 <udc_sof_notify+0x5c>)
   849a6:	681b      	ldr	r3, [r3, #0]
   849a8:	685a      	ldr	r2, [r3, #4]
   849aa:	79fb      	ldrb	r3, [r7, #7]
   849ac:	009b      	lsls	r3, r3, #2
   849ae:	4413      	add	r3, r2
   849b0:	681b      	ldr	r3, [r3, #0]
   849b2:	691b      	ldr	r3, [r3, #16]
   849b4:	4798      	blx	r3
				iface_num++) {
   849b6:	79fb      	ldrb	r3, [r7, #7]
   849b8:	3301      	adds	r3, #1
   849ba:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   849bc:	4b06      	ldr	r3, [pc, #24]	; (849d8 <udc_sof_notify+0x5c>)
   849be:	681b      	ldr	r3, [r3, #0]
   849c0:	681b      	ldr	r3, [r3, #0]
   849c2:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   849c4:	79fa      	ldrb	r2, [r7, #7]
   849c6:	429a      	cmp	r2, r3
   849c8:	d3e2      	bcc.n	84990 <udc_sof_notify+0x14>
			}
		}
	}
}
   849ca:	bf00      	nop
   849cc:	3708      	adds	r7, #8
   849ce:	46bd      	mov	sp, r7
   849d0:	bd80      	pop	{r7, pc}
   849d2:	bf00      	nop
   849d4:	20000d3c 	.word	0x20000d3c
   849d8:	20000d40 	.word	0x20000d40

000849dc <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
   849dc:	b580      	push	{r7, lr}
   849de:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   849e0:	4b06      	ldr	r3, [pc, #24]	; (849fc <udc_req_std_dev_get_status+0x20>)
   849e2:	88db      	ldrh	r3, [r3, #6]
   849e4:	2b02      	cmp	r3, #2
   849e6:	d001      	beq.n	849ec <udc_req_std_dev_get_status+0x10>
		return false;
   849e8:	2300      	movs	r3, #0
   849ea:	e004      	b.n	849f6 <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   849ec:	2102      	movs	r1, #2
   849ee:	4804      	ldr	r0, [pc, #16]	; (84a00 <udc_req_std_dev_get_status+0x24>)
   849f0:	4b04      	ldr	r3, [pc, #16]	; (84a04 <udc_req_std_dev_get_status+0x28>)
   849f2:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   849f4:	2301      	movs	r3, #1
}
   849f6:	4618      	mov	r0, r3
   849f8:	bd80      	pop	{r7, pc}
   849fa:	bf00      	nop
   849fc:	20000d58 	.word	0x20000d58
   84a00:	20000d3a 	.word	0x20000d3a
   84a04:	00082039 	.word	0x00082039

00084a08 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
   84a08:	b580      	push	{r7, lr}
   84a0a:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   84a0c:	4b0b      	ldr	r3, [pc, #44]	; (84a3c <udc_req_std_ep_get_status+0x34>)
   84a0e:	88db      	ldrh	r3, [r3, #6]
   84a10:	2b02      	cmp	r3, #2
   84a12:	d001      	beq.n	84a18 <udc_req_std_ep_get_status+0x10>
		return false;
   84a14:	2300      	movs	r3, #0
   84a16:	e00e      	b.n	84a36 <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   84a18:	4b08      	ldr	r3, [pc, #32]	; (84a3c <udc_req_std_ep_get_status+0x34>)
   84a1a:	889b      	ldrh	r3, [r3, #4]
   84a1c:	b2db      	uxtb	r3, r3
   84a1e:	4618      	mov	r0, r3
   84a20:	4b07      	ldr	r3, [pc, #28]	; (84a40 <udc_req_std_ep_get_status+0x38>)
   84a22:	4798      	blx	r3
   84a24:	4603      	mov	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   84a26:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   84a28:	4b06      	ldr	r3, [pc, #24]	; (84a44 <udc_req_std_ep_get_status+0x3c>)
   84a2a:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   84a2c:	2102      	movs	r1, #2
   84a2e:	4805      	ldr	r0, [pc, #20]	; (84a44 <udc_req_std_ep_get_status+0x3c>)
   84a30:	4b05      	ldr	r3, [pc, #20]	; (84a48 <udc_req_std_ep_get_status+0x40>)
   84a32:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
   84a34:	2301      	movs	r3, #1
}
   84a36:	4618      	mov	r0, r3
   84a38:	bd80      	pop	{r7, pc}
   84a3a:	bf00      	nop
   84a3c:	20000d58 	.word	0x20000d58
   84a40:	0008248d 	.word	0x0008248d
   84a44:	20000d48 	.word	0x20000d48
   84a48:	00082039 	.word	0x00082039

00084a4c <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
   84a4c:	b480      	push	{r7}
   84a4e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84a50:	4b0b      	ldr	r3, [pc, #44]	; (84a80 <udc_req_std_dev_clear_feature+0x34>)
   84a52:	88db      	ldrh	r3, [r3, #6]
   84a54:	2b00      	cmp	r3, #0
   84a56:	d001      	beq.n	84a5c <udc_req_std_dev_clear_feature+0x10>
		return false;
   84a58:	2300      	movs	r3, #0
   84a5a:	e00d      	b.n	84a78 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   84a5c:	4b08      	ldr	r3, [pc, #32]	; (84a80 <udc_req_std_dev_clear_feature+0x34>)
   84a5e:	885b      	ldrh	r3, [r3, #2]
   84a60:	2b01      	cmp	r3, #1
   84a62:	d108      	bne.n	84a76 <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   84a64:	4b07      	ldr	r3, [pc, #28]	; (84a84 <udc_req_std_dev_clear_feature+0x38>)
   84a66:	881b      	ldrh	r3, [r3, #0]
   84a68:	f023 0302 	bic.w	r3, r3, #2
   84a6c:	b29a      	uxth	r2, r3
   84a6e:	4b05      	ldr	r3, [pc, #20]	; (84a84 <udc_req_std_dev_clear_feature+0x38>)
   84a70:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   84a72:	2301      	movs	r3, #1
   84a74:	e000      	b.n	84a78 <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
   84a76:	2300      	movs	r3, #0
}
   84a78:	4618      	mov	r0, r3
   84a7a:	46bd      	mov	sp, r7
   84a7c:	bc80      	pop	{r7}
   84a7e:	4770      	bx	lr
   84a80:	20000d58 	.word	0x20000d58
   84a84:	20000d3a 	.word	0x20000d3a

00084a88 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
   84a88:	b580      	push	{r7, lr}
   84a8a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84a8c:	4b0a      	ldr	r3, [pc, #40]	; (84ab8 <udc_req_std_ep_clear_feature+0x30>)
   84a8e:	88db      	ldrh	r3, [r3, #6]
   84a90:	2b00      	cmp	r3, #0
   84a92:	d001      	beq.n	84a98 <udc_req_std_ep_clear_feature+0x10>
		return false;
   84a94:	2300      	movs	r3, #0
   84a96:	e00c      	b.n	84ab2 <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84a98:	4b07      	ldr	r3, [pc, #28]	; (84ab8 <udc_req_std_ep_clear_feature+0x30>)
   84a9a:	885b      	ldrh	r3, [r3, #2]
   84a9c:	2b00      	cmp	r3, #0
   84a9e:	d107      	bne.n	84ab0 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   84aa0:	4b05      	ldr	r3, [pc, #20]	; (84ab8 <udc_req_std_ep_clear_feature+0x30>)
   84aa2:	889b      	ldrh	r3, [r3, #4]
   84aa4:	b2db      	uxtb	r3, r3
   84aa6:	4618      	mov	r0, r3
   84aa8:	4b04      	ldr	r3, [pc, #16]	; (84abc <udc_req_std_ep_clear_feature+0x34>)
   84aaa:	4798      	blx	r3
   84aac:	4603      	mov	r3, r0
   84aae:	e000      	b.n	84ab2 <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
   84ab0:	2300      	movs	r3, #0
}
   84ab2:	4618      	mov	r0, r3
   84ab4:	bd80      	pop	{r7, pc}
   84ab6:	bf00      	nop
   84ab8:	20000d58 	.word	0x20000d58
   84abc:	00082609 	.word	0x00082609

00084ac0 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
   84ac0:	b580      	push	{r7, lr}
   84ac2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84ac4:	4b26      	ldr	r3, [pc, #152]	; (84b60 <udc_req_std_dev_set_feature+0xa0>)
   84ac6:	88db      	ldrh	r3, [r3, #6]
   84ac8:	2b00      	cmp	r3, #0
   84aca:	d001      	beq.n	84ad0 <udc_req_std_dev_set_feature+0x10>
		return false;
   84acc:	2300      	movs	r3, #0
   84ace:	e045      	b.n	84b5c <udc_req_std_dev_set_feature+0x9c>
	}

	switch (udd_g_ctrlreq.req.wValue) {
   84ad0:	4b23      	ldr	r3, [pc, #140]	; (84b60 <udc_req_std_dev_set_feature+0xa0>)
   84ad2:	885b      	ldrh	r3, [r3, #2]
   84ad4:	2b01      	cmp	r3, #1
   84ad6:	d002      	beq.n	84ade <udc_req_std_dev_set_feature+0x1e>
   84ad8:	2b02      	cmp	r3, #2
   84ada:	d002      	beq.n	84ae2 <udc_req_std_dev_set_feature+0x22>
			break;
		}
		break;
#endif
	default:
		break;
   84adc:	e03d      	b.n	84b5a <udc_req_std_dev_set_feature+0x9a>
		return false;
   84ade:	2300      	movs	r3, #0
   84ae0:	e03c      	b.n	84b5c <udc_req_std_dev_set_feature+0x9c>
		if (!udd_is_high_speed()) {
   84ae2:	4b20      	ldr	r3, [pc, #128]	; (84b64 <udc_req_std_dev_set_feature+0xa4>)
   84ae4:	4798      	blx	r3
   84ae6:	4603      	mov	r3, r0
   84ae8:	f083 0301 	eor.w	r3, r3, #1
   84aec:	b2db      	uxtb	r3, r3
   84aee:	2b00      	cmp	r3, #0
   84af0:	d130      	bne.n	84b54 <udc_req_std_dev_set_feature+0x94>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   84af2:	4b1b      	ldr	r3, [pc, #108]	; (84b60 <udc_req_std_dev_set_feature+0xa0>)
   84af4:	889b      	ldrh	r3, [r3, #4]
   84af6:	b2db      	uxtb	r3, r3
   84af8:	2b00      	cmp	r3, #0
   84afa:	d12d      	bne.n	84b58 <udc_req_std_dev_set_feature+0x98>
		udc_reset();
   84afc:	4b1a      	ldr	r3, [pc, #104]	; (84b68 <udc_req_std_dev_set_feature+0xa8>)
   84afe:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   84b00:	4b17      	ldr	r3, [pc, #92]	; (84b60 <udc_req_std_dev_set_feature+0xa0>)
   84b02:	889b      	ldrh	r3, [r3, #4]
   84b04:	0a1b      	lsrs	r3, r3, #8
   84b06:	b29b      	uxth	r3, r3
   84b08:	b2db      	uxtb	r3, r3
   84b0a:	3b01      	subs	r3, #1
   84b0c:	2b03      	cmp	r3, #3
   84b0e:	d81f      	bhi.n	84b50 <udc_req_std_dev_set_feature+0x90>
   84b10:	a201      	add	r2, pc, #4	; (adr r2, 84b18 <udc_req_std_dev_set_feature+0x58>)
   84b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84b16:	bf00      	nop
   84b18:	00084b29 	.word	0x00084b29
   84b1c:	00084b33 	.word	0x00084b33
   84b20:	00084b3d 	.word	0x00084b3d
   84b24:	00084b47 	.word	0x00084b47
			udd_g_ctrlreq.callback = udd_test_mode_j;
   84b28:	4b0d      	ldr	r3, [pc, #52]	; (84b60 <udc_req_std_dev_set_feature+0xa0>)
   84b2a:	4a10      	ldr	r2, [pc, #64]	; (84b6c <udc_req_std_dev_set_feature+0xac>)
   84b2c:	611a      	str	r2, [r3, #16]
			return true;
   84b2e:	2301      	movs	r3, #1
   84b30:	e014      	b.n	84b5c <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   84b32:	4b0b      	ldr	r3, [pc, #44]	; (84b60 <udc_req_std_dev_set_feature+0xa0>)
   84b34:	4a0e      	ldr	r2, [pc, #56]	; (84b70 <udc_req_std_dev_set_feature+0xb0>)
   84b36:	611a      	str	r2, [r3, #16]
			return true;
   84b38:	2301      	movs	r3, #1
   84b3a:	e00f      	b.n	84b5c <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   84b3c:	4b08      	ldr	r3, [pc, #32]	; (84b60 <udc_req_std_dev_set_feature+0xa0>)
   84b3e:	4a0d      	ldr	r2, [pc, #52]	; (84b74 <udc_req_std_dev_set_feature+0xb4>)
   84b40:	611a      	str	r2, [r3, #16]
			return true;
   84b42:	2301      	movs	r3, #1
   84b44:	e00a      	b.n	84b5c <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   84b46:	4b06      	ldr	r3, [pc, #24]	; (84b60 <udc_req_std_dev_set_feature+0xa0>)
   84b48:	4a0b      	ldr	r2, [pc, #44]	; (84b78 <udc_req_std_dev_set_feature+0xb8>)
   84b4a:	611a      	str	r2, [r3, #16]
			return true;
   84b4c:	2301      	movs	r3, #1
   84b4e:	e005      	b.n	84b5c <udc_req_std_dev_set_feature+0x9c>
			break;
   84b50:	bf00      	nop
		break;
   84b52:	e002      	b.n	84b5a <udc_req_std_dev_set_feature+0x9a>
			break;
   84b54:	bf00      	nop
   84b56:	e000      	b.n	84b5a <udc_req_std_dev_set_feature+0x9a>
			break;
   84b58:	bf00      	nop
	}
	return false;
   84b5a:	2300      	movs	r3, #0
}
   84b5c:	4618      	mov	r0, r3
   84b5e:	bd80      	pop	{r7, pc}
   84b60:	20000d58 	.word	0x20000d58
   84b64:	00081fb5 	.word	0x00081fb5
   84b68:	00084929 	.word	0x00084929
   84b6c:	000828c9 	.word	0x000828c9
   84b70:	000828fd 	.word	0x000828fd
   84b74:	00082931 	.word	0x00082931
   84b78:	00082955 	.word	0x00082955

00084b7c <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
   84b7c:	b580      	push	{r7, lr}
   84b7e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84b80:	4b0d      	ldr	r3, [pc, #52]	; (84bb8 <udc_req_std_ep_set_feature+0x3c>)
   84b82:	88db      	ldrh	r3, [r3, #6]
   84b84:	2b00      	cmp	r3, #0
   84b86:	d001      	beq.n	84b8c <udc_req_std_ep_set_feature+0x10>
		return false;
   84b88:	2300      	movs	r3, #0
   84b8a:	e012      	b.n	84bb2 <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84b8c:	4b0a      	ldr	r3, [pc, #40]	; (84bb8 <udc_req_std_ep_set_feature+0x3c>)
   84b8e:	885b      	ldrh	r3, [r3, #2]
   84b90:	2b00      	cmp	r3, #0
   84b92:	d10d      	bne.n	84bb0 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   84b94:	4b08      	ldr	r3, [pc, #32]	; (84bb8 <udc_req_std_ep_set_feature+0x3c>)
   84b96:	889b      	ldrh	r3, [r3, #4]
   84b98:	b2db      	uxtb	r3, r3
   84b9a:	4618      	mov	r0, r3
   84b9c:	4b07      	ldr	r3, [pc, #28]	; (84bbc <udc_req_std_ep_set_feature+0x40>)
   84b9e:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   84ba0:	4b05      	ldr	r3, [pc, #20]	; (84bb8 <udc_req_std_ep_set_feature+0x3c>)
   84ba2:	889b      	ldrh	r3, [r3, #4]
   84ba4:	b2db      	uxtb	r3, r3
   84ba6:	4618      	mov	r0, r3
   84ba8:	4b05      	ldr	r3, [pc, #20]	; (84bc0 <udc_req_std_ep_set_feature+0x44>)
   84baa:	4798      	blx	r3
   84bac:	4603      	mov	r3, r0
   84bae:	e000      	b.n	84bb2 <udc_req_std_ep_set_feature+0x36>
	}
	return false;
   84bb0:	2300      	movs	r3, #0
}
   84bb2:	4618      	mov	r0, r3
   84bb4:	bd80      	pop	{r7, pc}
   84bb6:	bf00      	nop
   84bb8:	20000d58 	.word	0x20000d58
   84bbc:	00082841 	.word	0x00082841
   84bc0:	000824f5 	.word	0x000824f5

00084bc4 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   84bc4:	b580      	push	{r7, lr}
   84bc6:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   84bc8:	4b05      	ldr	r3, [pc, #20]	; (84be0 <udc_valid_address+0x1c>)
   84bca:	885b      	ldrh	r3, [r3, #2]
   84bcc:	b2db      	uxtb	r3, r3
   84bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   84bd2:	b2db      	uxtb	r3, r3
   84bd4:	4618      	mov	r0, r3
   84bd6:	4b03      	ldr	r3, [pc, #12]	; (84be4 <udc_valid_address+0x20>)
   84bd8:	4798      	blx	r3
}
   84bda:	bf00      	nop
   84bdc:	bd80      	pop	{r7, pc}
   84bde:	bf00      	nop
   84be0:	20000d58 	.word	0x20000d58
   84be4:	00081fd9 	.word	0x00081fd9

00084be8 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
   84be8:	b480      	push	{r7}
   84bea:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84bec:	4b06      	ldr	r3, [pc, #24]	; (84c08 <udc_req_std_dev_set_address+0x20>)
   84bee:	88db      	ldrh	r3, [r3, #6]
   84bf0:	2b00      	cmp	r3, #0
   84bf2:	d001      	beq.n	84bf8 <udc_req_std_dev_set_address+0x10>
		return false;
   84bf4:	2300      	movs	r3, #0
   84bf6:	e003      	b.n	84c00 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   84bf8:	4b03      	ldr	r3, [pc, #12]	; (84c08 <udc_req_std_dev_set_address+0x20>)
   84bfa:	4a04      	ldr	r2, [pc, #16]	; (84c0c <udc_req_std_dev_set_address+0x24>)
   84bfc:	611a      	str	r2, [r3, #16]
	return true;
   84bfe:	2301      	movs	r3, #1
}
   84c00:	4618      	mov	r0, r3
   84c02:	46bd      	mov	sp, r7
   84c04:	bc80      	pop	{r7}
   84c06:	4770      	bx	lr
   84c08:	20000d58 	.word	0x20000d58
   84c0c:	00084bc5 	.word	0x00084bc5

00084c10 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
   84c10:	b580      	push	{r7, lr}
   84c12:	b084      	sub	sp, #16
   84c14:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
   84c16:	2300      	movs	r3, #0
   84c18:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   84c1a:	4b29      	ldr	r3, [pc, #164]	; (84cc0 <udc_req_std_dev_get_str_desc+0xb0>)
   84c1c:	885b      	ldrh	r3, [r3, #2]
   84c1e:	b2db      	uxtb	r3, r3
   84c20:	2b03      	cmp	r3, #3
   84c22:	d820      	bhi.n	84c66 <udc_req_std_dev_get_str_desc+0x56>
   84c24:	a201      	add	r2, pc, #4	; (adr r2, 84c2c <udc_req_std_dev_get_str_desc+0x1c>)
   84c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84c2a:	bf00      	nop
   84c2c:	00084c3d 	.word	0x00084c3d
   84c30:	00084c47 	.word	0x00084c47
   84c34:	00084c51 	.word	0x00084c51
   84c38:	00084c5b 	.word	0x00084c5b
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   84c3c:	2104      	movs	r1, #4
   84c3e:	4821      	ldr	r0, [pc, #132]	; (84cc4 <udc_req_std_dev_get_str_desc+0xb4>)
   84c40:	4b21      	ldr	r3, [pc, #132]	; (84cc8 <udc_req_std_dev_get_str_desc+0xb8>)
   84c42:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
   84c44:	e011      	b.n	84c6a <udc_req_std_dev_get_str_desc+0x5a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   84c46:	2315      	movs	r3, #21
   84c48:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
   84c4a:	4b20      	ldr	r3, [pc, #128]	; (84ccc <udc_req_std_dev_get_str_desc+0xbc>)
   84c4c:	60bb      	str	r3, [r7, #8]
		break;
   84c4e:	e00c      	b.n	84c6a <udc_req_std_dev_get_str_desc+0x5a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   84c50:	2310      	movs	r3, #16
   84c52:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
   84c54:	4b1e      	ldr	r3, [pc, #120]	; (84cd0 <udc_req_std_dev_get_str_desc+0xc0>)
   84c56:	60bb      	str	r3, [r7, #8]
		break;
   84c58:	e007      	b.n	84c6a <udc_req_std_dev_get_str_desc+0x5a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   84c5a:	2320      	movs	r3, #32
   84c5c:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
   84c5e:	4b1d      	ldr	r3, [pc, #116]	; (84cd4 <udc_req_std_dev_get_str_desc+0xc4>)
   84c60:	4798      	blx	r3
   84c62:	60b8      	str	r0, [r7, #8]
		break;
   84c64:	e001      	b.n	84c6a <udc_req_std_dev_get_str_desc+0x5a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
   84c66:	2300      	movs	r3, #0
   84c68:	e026      	b.n	84cb8 <udc_req_std_dev_get_str_desc+0xa8>
	}

	if (str_length) {
   84c6a:	79fb      	ldrb	r3, [r7, #7]
   84c6c:	2b00      	cmp	r3, #0
   84c6e:	d022      	beq.n	84cb6 <udc_req_std_dev_get_str_desc+0xa6>
		for(i = 0; i < str_length; i++) {
   84c70:	2300      	movs	r3, #0
   84c72:	73fb      	strb	r3, [r7, #15]
   84c74:	e00d      	b.n	84c92 <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   84c76:	7bfb      	ldrb	r3, [r7, #15]
   84c78:	68ba      	ldr	r2, [r7, #8]
   84c7a:	4413      	add	r3, r2
   84c7c:	781a      	ldrb	r2, [r3, #0]
   84c7e:	7bfb      	ldrb	r3, [r7, #15]
   84c80:	b291      	uxth	r1, r2
   84c82:	4a15      	ldr	r2, [pc, #84]	; (84cd8 <udc_req_std_dev_get_str_desc+0xc8>)
   84c84:	005b      	lsls	r3, r3, #1
   84c86:	4413      	add	r3, r2
   84c88:	460a      	mov	r2, r1
   84c8a:	805a      	strh	r2, [r3, #2]
		for(i = 0; i < str_length; i++) {
   84c8c:	7bfb      	ldrb	r3, [r7, #15]
   84c8e:	3301      	adds	r3, #1
   84c90:	73fb      	strb	r3, [r7, #15]
   84c92:	7bfa      	ldrb	r2, [r7, #15]
   84c94:	79fb      	ldrb	r3, [r7, #7]
   84c96:	429a      	cmp	r2, r3
   84c98:	d3ed      	bcc.n	84c76 <udc_req_std_dev_get_str_desc+0x66>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   84c9a:	79fb      	ldrb	r3, [r7, #7]
   84c9c:	3301      	adds	r3, #1
   84c9e:	b2db      	uxtb	r3, r3
   84ca0:	005b      	lsls	r3, r3, #1
   84ca2:	b2da      	uxtb	r2, r3
   84ca4:	4b0c      	ldr	r3, [pc, #48]	; (84cd8 <udc_req_std_dev_get_str_desc+0xc8>)
   84ca6:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
   84ca8:	4b0b      	ldr	r3, [pc, #44]	; (84cd8 <udc_req_std_dev_get_str_desc+0xc8>)
   84caa:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
   84cac:	b29b      	uxth	r3, r3
   84cae:	4619      	mov	r1, r3
   84cb0:	4809      	ldr	r0, [pc, #36]	; (84cd8 <udc_req_std_dev_get_str_desc+0xc8>)
   84cb2:	4b05      	ldr	r3, [pc, #20]	; (84cc8 <udc_req_std_dev_get_str_desc+0xb8>)
   84cb4:	4798      	blx	r3
	}

	return true;
   84cb6:	2301      	movs	r3, #1
}
   84cb8:	4618      	mov	r0, r3
   84cba:	3710      	adds	r7, #16
   84cbc:	46bd      	mov	sp, r7
   84cbe:	bd80      	pop	{r7, pc}
   84cc0:	20000d58 	.word	0x20000d58
   84cc4:	200002a8 	.word	0x200002a8
   84cc8:	00082039 	.word	0x00082039
   84ccc:	200002ac 	.word	0x200002ac
   84cd0:	200002c4 	.word	0x200002c4
   84cd4:	0008469d 	.word	0x0008469d
   84cd8:	200002d8 	.word	0x200002d8

00084cdc <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
   84cdc:	b580      	push	{r7, lr}
   84cde:	b082      	sub	sp, #8
   84ce0:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   84ce2:	4b80      	ldr	r3, [pc, #512]	; (84ee4 <udc_req_std_dev_get_descriptor+0x208>)
   84ce4:	885b      	ldrh	r3, [r3, #2]
   84ce6:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   84ce8:	4b7e      	ldr	r3, [pc, #504]	; (84ee4 <udc_req_std_dev_get_descriptor+0x208>)
   84cea:	885b      	ldrh	r3, [r3, #2]
   84cec:	0a1b      	lsrs	r3, r3, #8
   84cee:	b29b      	uxth	r3, r3
   84cf0:	b2db      	uxtb	r3, r3
   84cf2:	3b01      	subs	r3, #1
   84cf4:	2b0e      	cmp	r3, #14
   84cf6:	f200 80e2 	bhi.w	84ebe <udc_req_std_dev_get_descriptor+0x1e2>
   84cfa:	a201      	add	r2, pc, #4	; (adr r2, 84d00 <udc_req_std_dev_get_descriptor+0x24>)
   84cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84d00:	00084d3d 	.word	0x00084d3d
   84d04:	00084d79 	.word	0x00084d79
   84d08:	00084eab 	.word	0x00084eab
   84d0c:	00084ebf 	.word	0x00084ebf
   84d10:	00084ebf 	.word	0x00084ebf
   84d14:	00084df3 	.word	0x00084df3
   84d18:	00084e09 	.word	0x00084e09
   84d1c:	00084ebf 	.word	0x00084ebf
   84d20:	00084ebf 	.word	0x00084ebf
   84d24:	00084ebf 	.word	0x00084ebf
   84d28:	00084ebf 	.word	0x00084ebf
   84d2c:	00084ebf 	.word	0x00084ebf
   84d30:	00084ebf 	.word	0x00084ebf
   84d34:	00084ebf 	.word	0x00084ebf
   84d38:	00084e89 	.word	0x00084e89
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   84d3c:	4b6a      	ldr	r3, [pc, #424]	; (84ee8 <udc_req_std_dev_get_descriptor+0x20c>)
   84d3e:	4798      	blx	r3
   84d40:	4603      	mov	r3, r0
   84d42:	f083 0301 	eor.w	r3, r3, #1
   84d46:	b2db      	uxtb	r3, r3
   84d48:	2b00      	cmp	r3, #0
   84d4a:	d00a      	beq.n	84d62 <udc_req_std_dev_get_descriptor+0x86>
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
   84d4c:	4b67      	ldr	r3, [pc, #412]	; (84eec <udc_req_std_dev_get_descriptor+0x210>)
   84d4e:	689a      	ldr	r2, [r3, #8]
				udc_config.confdev_hs->bLength);
   84d50:	4b66      	ldr	r3, [pc, #408]	; (84eec <udc_req_std_dev_get_descriptor+0x210>)
   84d52:	689b      	ldr	r3, [r3, #8]
   84d54:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   84d56:	b29b      	uxth	r3, r3
   84d58:	4619      	mov	r1, r3
   84d5a:	4610      	mov	r0, r2
   84d5c:	4b64      	ldr	r3, [pc, #400]	; (84ef0 <udc_req_std_dev_get_descriptor+0x214>)
   84d5e:	4798      	blx	r3
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
   84d60:	e0b0      	b.n	84ec4 <udc_req_std_dev_get_descriptor+0x1e8>
				(uint8_t *) udc_config.confdev_lsfs,
   84d62:	4b62      	ldr	r3, [pc, #392]	; (84eec <udc_req_std_dev_get_descriptor+0x210>)
   84d64:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
   84d66:	4b61      	ldr	r3, [pc, #388]	; (84eec <udc_req_std_dev_get_descriptor+0x210>)
   84d68:	681b      	ldr	r3, [r3, #0]
   84d6a:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   84d6c:	b29b      	uxth	r3, r3
   84d6e:	4619      	mov	r1, r3
   84d70:	4610      	mov	r0, r2
   84d72:	4b5f      	ldr	r3, [pc, #380]	; (84ef0 <udc_req_std_dev_get_descriptor+0x214>)
   84d74:	4798      	blx	r3
		break;
   84d76:	e0a5      	b.n	84ec4 <udc_req_std_dev_get_descriptor+0x1e8>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   84d78:	4b5b      	ldr	r3, [pc, #364]	; (84ee8 <udc_req_std_dev_get_descriptor+0x20c>)
   84d7a:	4798      	blx	r3
   84d7c:	4603      	mov	r3, r0
   84d7e:	2b00      	cmp	r3, #0
   84d80:	d019      	beq.n	84db6 <udc_req_std_dev_get_descriptor+0xda>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   84d82:	4b5a      	ldr	r3, [pc, #360]	; (84eec <udc_req_std_dev_get_descriptor+0x210>)
   84d84:	689b      	ldr	r3, [r3, #8]
   84d86:	7c5b      	ldrb	r3, [r3, #17]
   84d88:	79fa      	ldrb	r2, [r7, #7]
   84d8a:	429a      	cmp	r2, r3
   84d8c:	d301      	bcc.n	84d92 <udc_req_std_dev_get_descriptor+0xb6>
					bNumConfigurations) {
				return false;
   84d8e:	2300      	movs	r3, #0
   84d90:	e0a3      	b.n	84eda <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   84d92:	4b56      	ldr	r3, [pc, #344]	; (84eec <udc_req_std_dev_get_descriptor+0x210>)
   84d94:	691a      	ldr	r2, [r3, #16]
   84d96:	79fb      	ldrb	r3, [r7, #7]
   84d98:	00db      	lsls	r3, r3, #3
   84d9a:	4413      	add	r3, r2
   84d9c:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   84d9e:	4b53      	ldr	r3, [pc, #332]	; (84eec <udc_req_std_dev_get_descriptor+0x210>)
   84da0:	691a      	ldr	r2, [r3, #16]
   84da2:	79fb      	ldrb	r3, [r7, #7]
   84da4:	00db      	lsls	r3, r3, #3
   84da6:	4413      	add	r3, r2
   84da8:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   84daa:	885b      	ldrh	r3, [r3, #2]
   84dac:	b29b      	uxth	r3, r3
   84dae:	4619      	mov	r1, r3
   84db0:	4b4f      	ldr	r3, [pc, #316]	; (84ef0 <udc_req_std_dev_get_descriptor+0x214>)
   84db2:	4798      	blx	r3
   84db4:	e018      	b.n	84de8 <udc_req_std_dev_get_descriptor+0x10c>
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   84db6:	4b4d      	ldr	r3, [pc, #308]	; (84eec <udc_req_std_dev_get_descriptor+0x210>)
   84db8:	681b      	ldr	r3, [r3, #0]
   84dba:	7c5b      	ldrb	r3, [r3, #17]
   84dbc:	79fa      	ldrb	r2, [r7, #7]
   84dbe:	429a      	cmp	r2, r3
   84dc0:	d301      	bcc.n	84dc6 <udc_req_std_dev_get_descriptor+0xea>
					bNumConfigurations) {
				return false;
   84dc2:	2300      	movs	r3, #0
   84dc4:	e089      	b.n	84eda <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   84dc6:	4b49      	ldr	r3, [pc, #292]	; (84eec <udc_req_std_dev_get_descriptor+0x210>)
   84dc8:	685a      	ldr	r2, [r3, #4]
   84dca:	79fb      	ldrb	r3, [r7, #7]
   84dcc:	00db      	lsls	r3, r3, #3
   84dce:	4413      	add	r3, r2
   84dd0:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   84dd2:	4b46      	ldr	r3, [pc, #280]	; (84eec <udc_req_std_dev_get_descriptor+0x210>)
   84dd4:	685a      	ldr	r2, [r3, #4]
   84dd6:	79fb      	ldrb	r3, [r7, #7]
   84dd8:	00db      	lsls	r3, r3, #3
   84dda:	4413      	add	r3, r2
   84ddc:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   84dde:	885b      	ldrh	r3, [r3, #2]
   84de0:	b29b      	uxth	r3, r3
   84de2:	4619      	mov	r1, r3
   84de4:	4b42      	ldr	r3, [pc, #264]	; (84ef0 <udc_req_std_dev_get_descriptor+0x214>)
   84de6:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   84de8:	4b3e      	ldr	r3, [pc, #248]	; (84ee4 <udc_req_std_dev_get_descriptor+0x208>)
   84dea:	689b      	ldr	r3, [r3, #8]
   84dec:	2202      	movs	r2, #2
   84dee:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
   84df0:	e068      	b.n	84ec4 <udc_req_std_dev_get_descriptor+0x1e8>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   84df2:	4b3e      	ldr	r3, [pc, #248]	; (84eec <udc_req_std_dev_get_descriptor+0x210>)
   84df4:	68da      	ldr	r2, [r3, #12]
				udc_config.qualifier->bLength);
   84df6:	4b3d      	ldr	r3, [pc, #244]	; (84eec <udc_req_std_dev_get_descriptor+0x210>)
   84df8:	68db      	ldr	r3, [r3, #12]
   84dfa:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   84dfc:	b29b      	uxth	r3, r3
   84dfe:	4619      	mov	r1, r3
   84e00:	4610      	mov	r0, r2
   84e02:	4b3b      	ldr	r3, [pc, #236]	; (84ef0 <udc_req_std_dev_get_descriptor+0x214>)
   84e04:	4798      	blx	r3
		break;
   84e06:	e05d      	b.n	84ec4 <udc_req_std_dev_get_descriptor+0x1e8>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   84e08:	4b37      	ldr	r3, [pc, #220]	; (84ee8 <udc_req_std_dev_get_descriptor+0x20c>)
   84e0a:	4798      	blx	r3
   84e0c:	4603      	mov	r3, r0
   84e0e:	f083 0301 	eor.w	r3, r3, #1
   84e12:	b2db      	uxtb	r3, r3
   84e14:	2b00      	cmp	r3, #0
   84e16:	d019      	beq.n	84e4c <udc_req_std_dev_get_descriptor+0x170>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   84e18:	4b34      	ldr	r3, [pc, #208]	; (84eec <udc_req_std_dev_get_descriptor+0x210>)
   84e1a:	689b      	ldr	r3, [r3, #8]
   84e1c:	7c5b      	ldrb	r3, [r3, #17]
   84e1e:	79fa      	ldrb	r2, [r7, #7]
   84e20:	429a      	cmp	r2, r3
   84e22:	d301      	bcc.n	84e28 <udc_req_std_dev_get_descriptor+0x14c>
					bNumConfigurations) {
				return false;
   84e24:	2300      	movs	r3, #0
   84e26:	e058      	b.n	84eda <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   84e28:	4b30      	ldr	r3, [pc, #192]	; (84eec <udc_req_std_dev_get_descriptor+0x210>)
   84e2a:	691a      	ldr	r2, [r3, #16]
   84e2c:	79fb      	ldrb	r3, [r7, #7]
   84e2e:	00db      	lsls	r3, r3, #3
   84e30:	4413      	add	r3, r2
   84e32:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   84e34:	4b2d      	ldr	r3, [pc, #180]	; (84eec <udc_req_std_dev_get_descriptor+0x210>)
   84e36:	691a      	ldr	r2, [r3, #16]
   84e38:	79fb      	ldrb	r3, [r7, #7]
   84e3a:	00db      	lsls	r3, r3, #3
   84e3c:	4413      	add	r3, r2
   84e3e:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   84e40:	885b      	ldrh	r3, [r3, #2]
   84e42:	b29b      	uxth	r3, r3
   84e44:	4619      	mov	r1, r3
   84e46:	4b2a      	ldr	r3, [pc, #168]	; (84ef0 <udc_req_std_dev_get_descriptor+0x214>)
   84e48:	4798      	blx	r3
   84e4a:	e018      	b.n	84e7e <udc_req_std_dev_get_descriptor+0x1a2>
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   84e4c:	4b27      	ldr	r3, [pc, #156]	; (84eec <udc_req_std_dev_get_descriptor+0x210>)
   84e4e:	681b      	ldr	r3, [r3, #0]
   84e50:	7c5b      	ldrb	r3, [r3, #17]
   84e52:	79fa      	ldrb	r2, [r7, #7]
   84e54:	429a      	cmp	r2, r3
   84e56:	d301      	bcc.n	84e5c <udc_req_std_dev_get_descriptor+0x180>
					bNumConfigurations) {
				return false;
   84e58:	2300      	movs	r3, #0
   84e5a:	e03e      	b.n	84eda <udc_req_std_dev_get_descriptor+0x1fe>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   84e5c:	4b23      	ldr	r3, [pc, #140]	; (84eec <udc_req_std_dev_get_descriptor+0x210>)
   84e5e:	685a      	ldr	r2, [r3, #4]
   84e60:	79fb      	ldrb	r3, [r7, #7]
   84e62:	00db      	lsls	r3, r3, #3
   84e64:	4413      	add	r3, r2
   84e66:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   84e68:	4b20      	ldr	r3, [pc, #128]	; (84eec <udc_req_std_dev_get_descriptor+0x210>)
   84e6a:	685a      	ldr	r2, [r3, #4]
   84e6c:	79fb      	ldrb	r3, [r7, #7]
   84e6e:	00db      	lsls	r3, r3, #3
   84e70:	4413      	add	r3, r2
   84e72:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   84e74:	885b      	ldrh	r3, [r3, #2]
   84e76:	b29b      	uxth	r3, r3
   84e78:	4619      	mov	r1, r3
   84e7a:	4b1d      	ldr	r3, [pc, #116]	; (84ef0 <udc_req_std_dev_get_descriptor+0x214>)
   84e7c:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   84e7e:	4b19      	ldr	r3, [pc, #100]	; (84ee4 <udc_req_std_dev_get_descriptor+0x208>)
   84e80:	689b      	ldr	r3, [r3, #8]
   84e82:	2207      	movs	r2, #7
   84e84:	705a      	strb	r2, [r3, #1]
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
   84e86:	e01d      	b.n	84ec4 <udc_req_std_dev_get_descriptor+0x1e8>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
   84e88:	4b18      	ldr	r3, [pc, #96]	; (84eec <udc_req_std_dev_get_descriptor+0x210>)
   84e8a:	695b      	ldr	r3, [r3, #20]
   84e8c:	2b00      	cmp	r3, #0
   84e8e:	d101      	bne.n	84e94 <udc_req_std_dev_get_descriptor+0x1b8>
			return false;
   84e90:	2300      	movs	r3, #0
   84e92:	e022      	b.n	84eda <udc_req_std_dev_get_descriptor+0x1fe>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   84e94:	4b15      	ldr	r3, [pc, #84]	; (84eec <udc_req_std_dev_get_descriptor+0x210>)
   84e96:	695a      	ldr	r2, [r3, #20]
				udc_config.conf_bos->wTotalLength);
   84e98:	4b14      	ldr	r3, [pc, #80]	; (84eec <udc_req_std_dev_get_descriptor+0x210>)
   84e9a:	695b      	ldr	r3, [r3, #20]
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   84e9c:	885b      	ldrh	r3, [r3, #2]
   84e9e:	b29b      	uxth	r3, r3
   84ea0:	4619      	mov	r1, r3
   84ea2:	4610      	mov	r0, r2
   84ea4:	4b12      	ldr	r3, [pc, #72]	; (84ef0 <udc_req_std_dev_get_descriptor+0x214>)
   84ea6:	4798      	blx	r3
		break;
   84ea8:	e00c      	b.n	84ec4 <udc_req_std_dev_get_descriptor+0x1e8>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
   84eaa:	4b12      	ldr	r3, [pc, #72]	; (84ef4 <udc_req_std_dev_get_descriptor+0x218>)
   84eac:	4798      	blx	r3
   84eae:	4603      	mov	r3, r0
   84eb0:	f083 0301 	eor.w	r3, r3, #1
   84eb4:	b2db      	uxtb	r3, r3
   84eb6:	2b00      	cmp	r3, #0
   84eb8:	d003      	beq.n	84ec2 <udc_req_std_dev_get_descriptor+0x1e6>
			return false;
   84eba:	2300      	movs	r3, #0
   84ebc:	e00d      	b.n	84eda <udc_req_std_dev_get_descriptor+0x1fe>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   84ebe:	2300      	movs	r3, #0
   84ec0:	e00b      	b.n	84eda <udc_req_std_dev_get_descriptor+0x1fe>
		break;
   84ec2:	bf00      	nop
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   84ec4:	4b07      	ldr	r3, [pc, #28]	; (84ee4 <udc_req_std_dev_get_descriptor+0x208>)
   84ec6:	88da      	ldrh	r2, [r3, #6]
   84ec8:	4b06      	ldr	r3, [pc, #24]	; (84ee4 <udc_req_std_dev_get_descriptor+0x208>)
   84eca:	899b      	ldrh	r3, [r3, #12]
   84ecc:	429a      	cmp	r2, r3
   84ece:	d203      	bcs.n	84ed8 <udc_req_std_dev_get_descriptor+0x1fc>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   84ed0:	4b04      	ldr	r3, [pc, #16]	; (84ee4 <udc_req_std_dev_get_descriptor+0x208>)
   84ed2:	88da      	ldrh	r2, [r3, #6]
   84ed4:	4b03      	ldr	r3, [pc, #12]	; (84ee4 <udc_req_std_dev_get_descriptor+0x208>)
   84ed6:	819a      	strh	r2, [r3, #12]
	}
	return true;
   84ed8:	2301      	movs	r3, #1
}
   84eda:	4618      	mov	r0, r3
   84edc:	3708      	adds	r7, #8
   84ede:	46bd      	mov	sp, r7
   84ee0:	bd80      	pop	{r7, pc}
   84ee2:	bf00      	nop
   84ee4:	20000d58 	.word	0x20000d58
   84ee8:	00081fb5 	.word	0x00081fb5
   84eec:	20000390 	.word	0x20000390
   84ef0:	00082039 	.word	0x00082039
   84ef4:	00084c11 	.word	0x00084c11

00084ef8 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
   84ef8:	b580      	push	{r7, lr}
   84efa:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
   84efc:	4b06      	ldr	r3, [pc, #24]	; (84f18 <udc_req_std_dev_get_configuration+0x20>)
   84efe:	88db      	ldrh	r3, [r3, #6]
   84f00:	2b01      	cmp	r3, #1
   84f02:	d001      	beq.n	84f08 <udc_req_std_dev_get_configuration+0x10>
		return false;
   84f04:	2300      	movs	r3, #0
   84f06:	e004      	b.n	84f12 <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   84f08:	2101      	movs	r1, #1
   84f0a:	4804      	ldr	r0, [pc, #16]	; (84f1c <udc_req_std_dev_get_configuration+0x24>)
   84f0c:	4b04      	ldr	r3, [pc, #16]	; (84f20 <udc_req_std_dev_get_configuration+0x28>)
   84f0e:	4798      	blx	r3
	return true;
   84f10:	2301      	movs	r3, #1
}
   84f12:	4618      	mov	r0, r3
   84f14:	bd80      	pop	{r7, pc}
   84f16:	bf00      	nop
   84f18:	20000d58 	.word	0x20000d58
   84f1c:	20000d3c 	.word	0x20000d3c
   84f20:	00082039 	.word	0x00082039

00084f24 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
   84f24:	b580      	push	{r7, lr}
   84f26:	b082      	sub	sp, #8
   84f28:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   84f2a:	4b37      	ldr	r3, [pc, #220]	; (85008 <udc_req_std_dev_set_configuration+0xe4>)
   84f2c:	88db      	ldrh	r3, [r3, #6]
   84f2e:	2b00      	cmp	r3, #0
   84f30:	d001      	beq.n	84f36 <udc_req_std_dev_set_configuration+0x12>
		return false;
   84f32:	2300      	movs	r3, #0
   84f34:	e063      	b.n	84ffe <udc_req_std_dev_set_configuration+0xda>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   84f36:	4b35      	ldr	r3, [pc, #212]	; (8500c <udc_req_std_dev_set_configuration+0xe8>)
   84f38:	4798      	blx	r3
   84f3a:	4603      	mov	r3, r0
   84f3c:	2b00      	cmp	r3, #0
   84f3e:	d101      	bne.n	84f44 <udc_req_std_dev_set_configuration+0x20>
		return false;
   84f40:	2300      	movs	r3, #0
   84f42:	e05c      	b.n	84ffe <udc_req_std_dev_set_configuration+0xda>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   84f44:	4b32      	ldr	r3, [pc, #200]	; (85010 <udc_req_std_dev_set_configuration+0xec>)
   84f46:	4798      	blx	r3
   84f48:	4603      	mov	r3, r0
   84f4a:	2b00      	cmp	r3, #0
   84f4c:	d009      	beq.n	84f62 <udc_req_std_dev_set_configuration+0x3e>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84f4e:	4b2e      	ldr	r3, [pc, #184]	; (85008 <udc_req_std_dev_set_configuration+0xe4>)
   84f50:	885b      	ldrh	r3, [r3, #2]
   84f52:	b2db      	uxtb	r3, r3
				udc_config.confdev_hs->bNumConfigurations) {
   84f54:	4a2f      	ldr	r2, [pc, #188]	; (85014 <udc_req_std_dev_set_configuration+0xf0>)
   84f56:	6892      	ldr	r2, [r2, #8]
   84f58:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84f5a:	4293      	cmp	r3, r2
   84f5c:	dd0b      	ble.n	84f76 <udc_req_std_dev_set_configuration+0x52>
			return false;
   84f5e:	2300      	movs	r3, #0
   84f60:	e04d      	b.n	84ffe <udc_req_std_dev_set_configuration+0xda>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84f62:	4b29      	ldr	r3, [pc, #164]	; (85008 <udc_req_std_dev_set_configuration+0xe4>)
   84f64:	885b      	ldrh	r3, [r3, #2]
   84f66:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
   84f68:	4a2a      	ldr	r2, [pc, #168]	; (85014 <udc_req_std_dev_set_configuration+0xf0>)
   84f6a:	6812      	ldr	r2, [r2, #0]
   84f6c:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84f6e:	4293      	cmp	r3, r2
   84f70:	dd01      	ble.n	84f76 <udc_req_std_dev_set_configuration+0x52>
			return false;
   84f72:	2300      	movs	r3, #0
   84f74:	e043      	b.n	84ffe <udc_req_std_dev_set_configuration+0xda>
		}
	}

	// Reset current configuration
	udc_reset();
   84f76:	4b28      	ldr	r3, [pc, #160]	; (85018 <udc_req_std_dev_set_configuration+0xf4>)
   84f78:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   84f7a:	4b23      	ldr	r3, [pc, #140]	; (85008 <udc_req_std_dev_set_configuration+0xe4>)
   84f7c:	885b      	ldrh	r3, [r3, #2]
   84f7e:	b2da      	uxtb	r2, r3
   84f80:	4b26      	ldr	r3, [pc, #152]	; (8501c <udc_req_std_dev_set_configuration+0xf8>)
   84f82:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
   84f84:	4b25      	ldr	r3, [pc, #148]	; (8501c <udc_req_std_dev_set_configuration+0xf8>)
   84f86:	781b      	ldrb	r3, [r3, #0]
   84f88:	2b00      	cmp	r3, #0
   84f8a:	d101      	bne.n	84f90 <udc_req_std_dev_set_configuration+0x6c>
		return true; // Default empty configuration requested
   84f8c:	2301      	movs	r3, #1
   84f8e:	e036      	b.n	84ffe <udc_req_std_dev_set_configuration+0xda>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   84f90:	4b1f      	ldr	r3, [pc, #124]	; (85010 <udc_req_std_dev_set_configuration+0xec>)
   84f92:	4798      	blx	r3
   84f94:	4603      	mov	r3, r0
   84f96:	2b00      	cmp	r3, #0
   84f98:	d00b      	beq.n	84fb2 <udc_req_std_dev_set_configuration+0x8e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   84f9a:	4b1e      	ldr	r3, [pc, #120]	; (85014 <udc_req_std_dev_set_configuration+0xf0>)
   84f9c:	691a      	ldr	r2, [r3, #16]
   84f9e:	4b1f      	ldr	r3, [pc, #124]	; (8501c <udc_req_std_dev_set_configuration+0xf8>)
   84fa0:	781b      	ldrb	r3, [r3, #0]
   84fa2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   84fa6:	3b01      	subs	r3, #1
   84fa8:	00db      	lsls	r3, r3, #3
   84faa:	4413      	add	r3, r2
   84fac:	4a1c      	ldr	r2, [pc, #112]	; (85020 <udc_req_std_dev_set_configuration+0xfc>)
   84fae:	6013      	str	r3, [r2, #0]
   84fb0:	e00a      	b.n	84fc8 <udc_req_std_dev_set_configuration+0xa4>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   84fb2:	4b18      	ldr	r3, [pc, #96]	; (85014 <udc_req_std_dev_set_configuration+0xf0>)
   84fb4:	685a      	ldr	r2, [r3, #4]
   84fb6:	4b19      	ldr	r3, [pc, #100]	; (8501c <udc_req_std_dev_set_configuration+0xf8>)
   84fb8:	781b      	ldrb	r3, [r3, #0]
   84fba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   84fbe:	3b01      	subs	r3, #1
   84fc0:	00db      	lsls	r3, r3, #3
   84fc2:	4413      	add	r3, r2
   84fc4:	4a16      	ldr	r2, [pc, #88]	; (85020 <udc_req_std_dev_set_configuration+0xfc>)
   84fc6:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84fc8:	2300      	movs	r3, #0
   84fca:	71fb      	strb	r3, [r7, #7]
   84fcc:	e00f      	b.n	84fee <udc_req_std_dev_set_configuration+0xca>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   84fce:	79fb      	ldrb	r3, [r7, #7]
   84fd0:	2100      	movs	r1, #0
   84fd2:	4618      	mov	r0, r3
   84fd4:	4b13      	ldr	r3, [pc, #76]	; (85024 <udc_req_std_dev_set_configuration+0x100>)
   84fd6:	4798      	blx	r3
   84fd8:	4603      	mov	r3, r0
   84fda:	f083 0301 	eor.w	r3, r3, #1
   84fde:	b2db      	uxtb	r3, r3
   84fe0:	2b00      	cmp	r3, #0
   84fe2:	d001      	beq.n	84fe8 <udc_req_std_dev_set_configuration+0xc4>
			return false;
   84fe4:	2300      	movs	r3, #0
   84fe6:	e00a      	b.n	84ffe <udc_req_std_dev_set_configuration+0xda>
			iface_num++) {
   84fe8:	79fb      	ldrb	r3, [r7, #7]
   84fea:	3301      	adds	r3, #1
   84fec:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84fee:	4b0c      	ldr	r3, [pc, #48]	; (85020 <udc_req_std_dev_set_configuration+0xfc>)
   84ff0:	681b      	ldr	r3, [r3, #0]
   84ff2:	681b      	ldr	r3, [r3, #0]
   84ff4:	791b      	ldrb	r3, [r3, #4]
   84ff6:	79fa      	ldrb	r2, [r7, #7]
   84ff8:	429a      	cmp	r2, r3
   84ffa:	d3e8      	bcc.n	84fce <udc_req_std_dev_set_configuration+0xaa>
		}
	}
	return true;
   84ffc:	2301      	movs	r3, #1
}
   84ffe:	4618      	mov	r0, r3
   85000:	3708      	adds	r7, #8
   85002:	46bd      	mov	sp, r7
   85004:	bd80      	pop	{r7, pc}
   85006:	bf00      	nop
   85008:	20000d58 	.word	0x20000d58
   8500c:	0008201d 	.word	0x0008201d
   85010:	00081fb5 	.word	0x00081fb5
   85014:	20000390 	.word	0x20000390
   85018:	00084929 	.word	0x00084929
   8501c:	20000d3c 	.word	0x20000d3c
   85020:	20000d40 	.word	0x20000d40
   85024:	00084881 	.word	0x00084881

00085028 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
   85028:	b580      	push	{r7, lr}
   8502a:	b082      	sub	sp, #8
   8502c:	af00      	add	r7, sp, #0
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   8502e:	4b1e      	ldr	r3, [pc, #120]	; (850a8 <udc_req_std_iface_get_setting+0x80>)
   85030:	88db      	ldrh	r3, [r3, #6]
   85032:	2b01      	cmp	r3, #1
   85034:	d001      	beq.n	8503a <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
   85036:	2300      	movs	r3, #0
   85038:	e032      	b.n	850a0 <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
   8503a:	4b1c      	ldr	r3, [pc, #112]	; (850ac <udc_req_std_iface_get_setting+0x84>)
   8503c:	781b      	ldrb	r3, [r3, #0]
   8503e:	2b00      	cmp	r3, #0
   85040:	d101      	bne.n	85046 <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
   85042:	2300      	movs	r3, #0
   85044:	e02c      	b.n	850a0 <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   85046:	4b18      	ldr	r3, [pc, #96]	; (850a8 <udc_req_std_iface_get_setting+0x80>)
   85048:	889b      	ldrh	r3, [r3, #4]
   8504a:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8504c:	4b18      	ldr	r3, [pc, #96]	; (850b0 <udc_req_std_iface_get_setting+0x88>)
   8504e:	681b      	ldr	r3, [r3, #0]
   85050:	681b      	ldr	r3, [r3, #0]
   85052:	791b      	ldrb	r3, [r3, #4]
   85054:	79fa      	ldrb	r2, [r7, #7]
   85056:	429a      	cmp	r2, r3
   85058:	d301      	bcc.n	8505e <udc_req_std_iface_get_setting+0x36>
		return false;
   8505a:	2300      	movs	r3, #0
   8505c:	e020      	b.n	850a0 <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   8505e:	79fb      	ldrb	r3, [r7, #7]
   85060:	2100      	movs	r1, #0
   85062:	4618      	mov	r0, r3
   85064:	4b13      	ldr	r3, [pc, #76]	; (850b4 <udc_req_std_iface_get_setting+0x8c>)
   85066:	4798      	blx	r3
   85068:	4603      	mov	r3, r0
   8506a:	f083 0301 	eor.w	r3, r3, #1
   8506e:	b2db      	uxtb	r3, r3
   85070:	2b00      	cmp	r3, #0
   85072:	d001      	beq.n	85078 <udc_req_std_iface_get_setting+0x50>
		return false;
   85074:	2300      	movs	r3, #0
   85076:	e013      	b.n	850a0 <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   85078:	4b0d      	ldr	r3, [pc, #52]	; (850b0 <udc_req_std_iface_get_setting+0x88>)
   8507a:	681b      	ldr	r3, [r3, #0]
   8507c:	685a      	ldr	r2, [r3, #4]
   8507e:	79fb      	ldrb	r3, [r7, #7]
   85080:	009b      	lsls	r3, r3, #2
   85082:	4413      	add	r3, r2
   85084:	681b      	ldr	r3, [r3, #0]
   85086:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
   85088:	683b      	ldr	r3, [r7, #0]
   8508a:	68db      	ldr	r3, [r3, #12]
   8508c:	4798      	blx	r3
   8508e:	4603      	mov	r3, r0
   85090:	461a      	mov	r2, r3
   85092:	4b09      	ldr	r3, [pc, #36]	; (850b8 <udc_req_std_iface_get_setting+0x90>)
   85094:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   85096:	2101      	movs	r1, #1
   85098:	4807      	ldr	r0, [pc, #28]	; (850b8 <udc_req_std_iface_get_setting+0x90>)
   8509a:	4b08      	ldr	r3, [pc, #32]	; (850bc <udc_req_std_iface_get_setting+0x94>)
   8509c:	4798      	blx	r3
	return true;
   8509e:	2301      	movs	r3, #1
}
   850a0:	4618      	mov	r0, r3
   850a2:	3708      	adds	r7, #8
   850a4:	46bd      	mov	sp, r7
   850a6:	bd80      	pop	{r7, pc}
   850a8:	20000d58 	.word	0x20000d58
   850ac:	20000d3c 	.word	0x20000d3c
   850b0:	20000d40 	.word	0x20000d40
   850b4:	00084745 	.word	0x00084745
   850b8:	20000d4a 	.word	0x20000d4a
   850bc:	00082039 	.word	0x00082039

000850c0 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
   850c0:	b580      	push	{r7, lr}
   850c2:	b082      	sub	sp, #8
   850c4:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   850c6:	4b14      	ldr	r3, [pc, #80]	; (85118 <udc_req_std_iface_set_setting+0x58>)
   850c8:	88db      	ldrh	r3, [r3, #6]
   850ca:	2b00      	cmp	r3, #0
   850cc:	d001      	beq.n	850d2 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
   850ce:	2300      	movs	r3, #0
   850d0:	e01e      	b.n	85110 <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
   850d2:	4b12      	ldr	r3, [pc, #72]	; (8511c <udc_req_std_iface_set_setting+0x5c>)
   850d4:	781b      	ldrb	r3, [r3, #0]
   850d6:	2b00      	cmp	r3, #0
   850d8:	d101      	bne.n	850de <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
   850da:	2300      	movs	r3, #0
   850dc:	e018      	b.n	85110 <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   850de:	4b0e      	ldr	r3, [pc, #56]	; (85118 <udc_req_std_iface_set_setting+0x58>)
   850e0:	889b      	ldrh	r3, [r3, #4]
   850e2:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   850e4:	4b0c      	ldr	r3, [pc, #48]	; (85118 <udc_req_std_iface_set_setting+0x58>)
   850e6:	885b      	ldrh	r3, [r3, #2]
   850e8:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   850ea:	79fb      	ldrb	r3, [r7, #7]
   850ec:	4618      	mov	r0, r3
   850ee:	4b0c      	ldr	r3, [pc, #48]	; (85120 <udc_req_std_iface_set_setting+0x60>)
   850f0:	4798      	blx	r3
   850f2:	4603      	mov	r3, r0
   850f4:	f083 0301 	eor.w	r3, r3, #1
   850f8:	b2db      	uxtb	r3, r3
   850fa:	2b00      	cmp	r3, #0
   850fc:	d001      	beq.n	85102 <udc_req_std_iface_set_setting+0x42>
		return false;
   850fe:	2300      	movs	r3, #0
   85100:	e006      	b.n	85110 <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   85102:	79ba      	ldrb	r2, [r7, #6]
   85104:	79fb      	ldrb	r3, [r7, #7]
   85106:	4611      	mov	r1, r2
   85108:	4618      	mov	r0, r3
   8510a:	4b06      	ldr	r3, [pc, #24]	; (85124 <udc_req_std_iface_set_setting+0x64>)
   8510c:	4798      	blx	r3
   8510e:	4603      	mov	r3, r0
}
   85110:	4618      	mov	r0, r3
   85112:	3708      	adds	r7, #8
   85114:	46bd      	mov	sp, r7
   85116:	bd80      	pop	{r7, pc}
   85118:	20000d58 	.word	0x20000d58
   8511c:	20000d3c 	.word	0x20000d3c
   85120:	000847e1 	.word	0x000847e1
   85124:	00084881 	.word	0x00084881

00085128 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
   85128:	b580      	push	{r7, lr}
   8512a:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   8512c:	4b54      	ldr	r3, [pc, #336]	; (85280 <udc_reqstd+0x158>)
   8512e:	781b      	ldrb	r3, [r3, #0]
   85130:	b25b      	sxtb	r3, r3
   85132:	2b00      	cmp	r3, #0
   85134:	da41      	bge.n	851ba <udc_reqstd+0x92>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
   85136:	4b52      	ldr	r3, [pc, #328]	; (85280 <udc_reqstd+0x158>)
   85138:	88db      	ldrh	r3, [r3, #6]
   8513a:	2b00      	cmp	r3, #0
   8513c:	d101      	bne.n	85142 <udc_reqstd+0x1a>
			return false; // Error for USB host
   8513e:	2300      	movs	r3, #0
   85140:	e09b      	b.n	8527a <udc_reqstd+0x152>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   85142:	4b4f      	ldr	r3, [pc, #316]	; (85280 <udc_reqstd+0x158>)
   85144:	781b      	ldrb	r3, [r3, #0]
   85146:	f003 031f 	and.w	r3, r3, #31
   8514a:	2b00      	cmp	r3, #0
   8514c:	d113      	bne.n	85176 <udc_reqstd+0x4e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   8514e:	4b4c      	ldr	r3, [pc, #304]	; (85280 <udc_reqstd+0x158>)
   85150:	785b      	ldrb	r3, [r3, #1]
   85152:	2b06      	cmp	r3, #6
   85154:	d007      	beq.n	85166 <udc_reqstd+0x3e>
   85156:	2b08      	cmp	r3, #8
   85158:	d009      	beq.n	8516e <udc_reqstd+0x46>
   8515a:	2b00      	cmp	r3, #0
   8515c:	d10d      	bne.n	8517a <udc_reqstd+0x52>
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
   8515e:	4b49      	ldr	r3, [pc, #292]	; (85284 <udc_reqstd+0x15c>)
   85160:	4798      	blx	r3
   85162:	4603      	mov	r3, r0
   85164:	e089      	b.n	8527a <udc_reqstd+0x152>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
   85166:	4b48      	ldr	r3, [pc, #288]	; (85288 <udc_reqstd+0x160>)
   85168:	4798      	blx	r3
   8516a:	4603      	mov	r3, r0
   8516c:	e085      	b.n	8527a <udc_reqstd+0x152>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
   8516e:	4b47      	ldr	r3, [pc, #284]	; (8528c <udc_reqstd+0x164>)
   85170:	4798      	blx	r3
   85172:	4603      	mov	r3, r0
   85174:	e081      	b.n	8527a <udc_reqstd+0x152>
			default:
				break;
			}
		}
   85176:	bf00      	nop
   85178:	e000      	b.n	8517c <udc_reqstd+0x54>
				break;
   8517a:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   8517c:	4b40      	ldr	r3, [pc, #256]	; (85280 <udc_reqstd+0x158>)
   8517e:	781b      	ldrb	r3, [r3, #0]
   85180:	f003 031f 	and.w	r3, r3, #31
   85184:	2b01      	cmp	r3, #1
   85186:	d107      	bne.n	85198 <udc_reqstd+0x70>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   85188:	4b3d      	ldr	r3, [pc, #244]	; (85280 <udc_reqstd+0x158>)
   8518a:	785b      	ldrb	r3, [r3, #1]
   8518c:	2b0a      	cmp	r3, #10
   8518e:	d105      	bne.n	8519c <udc_reqstd+0x74>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
   85190:	4b3f      	ldr	r3, [pc, #252]	; (85290 <udc_reqstd+0x168>)
   85192:	4798      	blx	r3
   85194:	4603      	mov	r3, r0
   85196:	e070      	b.n	8527a <udc_reqstd+0x152>
			default:
				break;
			}
		}
   85198:	bf00      	nop
   8519a:	e000      	b.n	8519e <udc_reqstd+0x76>
				break;
   8519c:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   8519e:	4b38      	ldr	r3, [pc, #224]	; (85280 <udc_reqstd+0x158>)
   851a0:	781b      	ldrb	r3, [r3, #0]
   851a2:	f003 031f 	and.w	r3, r3, #31
   851a6:	2b02      	cmp	r3, #2
   851a8:	d161      	bne.n	8526e <udc_reqstd+0x146>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   851aa:	4b35      	ldr	r3, [pc, #212]	; (85280 <udc_reqstd+0x158>)
   851ac:	785b      	ldrb	r3, [r3, #1]
   851ae:	2b00      	cmp	r3, #0
   851b0:	d15f      	bne.n	85272 <udc_reqstd+0x14a>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
   851b2:	4b38      	ldr	r3, [pc, #224]	; (85294 <udc_reqstd+0x16c>)
   851b4:	4798      	blx	r3
   851b6:	4603      	mov	r3, r0
   851b8:	e05f      	b.n	8527a <udc_reqstd+0x152>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   851ba:	4b31      	ldr	r3, [pc, #196]	; (85280 <udc_reqstd+0x158>)
   851bc:	781b      	ldrb	r3, [r3, #0]
   851be:	f003 031f 	and.w	r3, r3, #31
   851c2:	2b00      	cmp	r3, #0
   851c4:	d12a      	bne.n	8521c <udc_reqstd+0xf4>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   851c6:	4b2e      	ldr	r3, [pc, #184]	; (85280 <udc_reqstd+0x158>)
   851c8:	785b      	ldrb	r3, [r3, #1]
   851ca:	3b01      	subs	r3, #1
   851cc:	2b08      	cmp	r3, #8
   851ce:	d827      	bhi.n	85220 <udc_reqstd+0xf8>
   851d0:	a201      	add	r2, pc, #4	; (adr r2, 851d8 <udc_reqstd+0xb0>)
   851d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   851d6:	bf00      	nop
   851d8:	00085205 	.word	0x00085205
   851dc:	00085221 	.word	0x00085221
   851e0:	0008520d 	.word	0x0008520d
   851e4:	00085221 	.word	0x00085221
   851e8:	000851fd 	.word	0x000851fd
   851ec:	00085221 	.word	0x00085221
   851f0:	00085221 	.word	0x00085221
   851f4:	00085221 	.word	0x00085221
   851f8:	00085215 	.word	0x00085215
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
   851fc:	4b26      	ldr	r3, [pc, #152]	; (85298 <udc_reqstd+0x170>)
   851fe:	4798      	blx	r3
   85200:	4603      	mov	r3, r0
   85202:	e03a      	b.n	8527a <udc_reqstd+0x152>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
   85204:	4b25      	ldr	r3, [pc, #148]	; (8529c <udc_reqstd+0x174>)
   85206:	4798      	blx	r3
   85208:	4603      	mov	r3, r0
   8520a:	e036      	b.n	8527a <udc_reqstd+0x152>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   8520c:	4b24      	ldr	r3, [pc, #144]	; (852a0 <udc_reqstd+0x178>)
   8520e:	4798      	blx	r3
   85210:	4603      	mov	r3, r0
   85212:	e032      	b.n	8527a <udc_reqstd+0x152>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
   85214:	4b23      	ldr	r3, [pc, #140]	; (852a4 <udc_reqstd+0x17c>)
   85216:	4798      	blx	r3
   85218:	4603      	mov	r3, r0
   8521a:	e02e      	b.n	8527a <udc_reqstd+0x152>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
			}
		}
   8521c:	bf00      	nop
   8521e:	e000      	b.n	85222 <udc_reqstd+0xfa>
				break;
   85220:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   85222:	4b17      	ldr	r3, [pc, #92]	; (85280 <udc_reqstd+0x158>)
   85224:	781b      	ldrb	r3, [r3, #0]
   85226:	f003 031f 	and.w	r3, r3, #31
   8522a:	2b01      	cmp	r3, #1
   8522c:	d107      	bne.n	8523e <udc_reqstd+0x116>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   8522e:	4b14      	ldr	r3, [pc, #80]	; (85280 <udc_reqstd+0x158>)
   85230:	785b      	ldrb	r3, [r3, #1]
   85232:	2b0b      	cmp	r3, #11
   85234:	d105      	bne.n	85242 <udc_reqstd+0x11a>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
   85236:	4b1c      	ldr	r3, [pc, #112]	; (852a8 <udc_reqstd+0x180>)
   85238:	4798      	blx	r3
   8523a:	4603      	mov	r3, r0
   8523c:	e01d      	b.n	8527a <udc_reqstd+0x152>
			default:
				break;
			}
		}
   8523e:	bf00      	nop
   85240:	e000      	b.n	85244 <udc_reqstd+0x11c>
				break;
   85242:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   85244:	4b0e      	ldr	r3, [pc, #56]	; (85280 <udc_reqstd+0x158>)
   85246:	781b      	ldrb	r3, [r3, #0]
   85248:	f003 031f 	and.w	r3, r3, #31
   8524c:	2b02      	cmp	r3, #2
   8524e:	d112      	bne.n	85276 <udc_reqstd+0x14e>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   85250:	4b0b      	ldr	r3, [pc, #44]	; (85280 <udc_reqstd+0x158>)
   85252:	785b      	ldrb	r3, [r3, #1]
   85254:	2b01      	cmp	r3, #1
   85256:	d002      	beq.n	8525e <udc_reqstd+0x136>
   85258:	2b03      	cmp	r3, #3
   8525a:	d004      	beq.n	85266 <udc_reqstd+0x13e>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
   8525c:	e00c      	b.n	85278 <udc_reqstd+0x150>
				return udc_req_std_ep_clear_feature();
   8525e:	4b13      	ldr	r3, [pc, #76]	; (852ac <udc_reqstd+0x184>)
   85260:	4798      	blx	r3
   85262:	4603      	mov	r3, r0
   85264:	e009      	b.n	8527a <udc_reqstd+0x152>
				return udc_req_std_ep_set_feature();
   85266:	4b12      	ldr	r3, [pc, #72]	; (852b0 <udc_reqstd+0x188>)
   85268:	4798      	blx	r3
   8526a:	4603      	mov	r3, r0
   8526c:	e005      	b.n	8527a <udc_reqstd+0x152>
		}
   8526e:	bf00      	nop
   85270:	e002      	b.n	85278 <udc_reqstd+0x150>
				break;
   85272:	bf00      	nop
   85274:	e000      	b.n	85278 <udc_reqstd+0x150>
			}
		}
   85276:	bf00      	nop
#endif
	}
	return false;
   85278:	2300      	movs	r3, #0
}
   8527a:	4618      	mov	r0, r3
   8527c:	bd80      	pop	{r7, pc}
   8527e:	bf00      	nop
   85280:	20000d58 	.word	0x20000d58
   85284:	000849dd 	.word	0x000849dd
   85288:	00084cdd 	.word	0x00084cdd
   8528c:	00084ef9 	.word	0x00084ef9
   85290:	00085029 	.word	0x00085029
   85294:	00084a09 	.word	0x00084a09
   85298:	00084be9 	.word	0x00084be9
   8529c:	00084a4d 	.word	0x00084a4d
   852a0:	00084ac1 	.word	0x00084ac1
   852a4:	00084f25 	.word	0x00084f25
   852a8:	000850c1 	.word	0x000850c1
   852ac:	00084a89 	.word	0x00084a89
   852b0:	00084b7d 	.word	0x00084b7d

000852b4 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   852b4:	b580      	push	{r7, lr}
   852b6:	b082      	sub	sp, #8
   852b8:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   852ba:	4b20      	ldr	r3, [pc, #128]	; (8533c <udc_req_iface+0x88>)
   852bc:	781b      	ldrb	r3, [r3, #0]
   852be:	2b00      	cmp	r3, #0
   852c0:	d101      	bne.n	852c6 <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
   852c2:	2300      	movs	r3, #0
   852c4:	e036      	b.n	85334 <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   852c6:	4b1e      	ldr	r3, [pc, #120]	; (85340 <udc_req_iface+0x8c>)
   852c8:	889b      	ldrh	r3, [r3, #4]
   852ca:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   852cc:	4b1d      	ldr	r3, [pc, #116]	; (85344 <udc_req_iface+0x90>)
   852ce:	681b      	ldr	r3, [r3, #0]
   852d0:	681b      	ldr	r3, [r3, #0]
   852d2:	791b      	ldrb	r3, [r3, #4]
   852d4:	79fa      	ldrb	r2, [r7, #7]
   852d6:	429a      	cmp	r2, r3
   852d8:	d301      	bcc.n	852de <udc_req_iface+0x2a>
		return false;
   852da:	2300      	movs	r3, #0
   852dc:	e02a      	b.n	85334 <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   852de:	79fb      	ldrb	r3, [r7, #7]
   852e0:	2100      	movs	r1, #0
   852e2:	4618      	mov	r0, r3
   852e4:	4b18      	ldr	r3, [pc, #96]	; (85348 <udc_req_iface+0x94>)
   852e6:	4798      	blx	r3
   852e8:	4603      	mov	r3, r0
   852ea:	f083 0301 	eor.w	r3, r3, #1
   852ee:	b2db      	uxtb	r3, r3
   852f0:	2b00      	cmp	r3, #0
   852f2:	d001      	beq.n	852f8 <udc_req_iface+0x44>
		return false;
   852f4:	2300      	movs	r3, #0
   852f6:	e01d      	b.n	85334 <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   852f8:	4b12      	ldr	r3, [pc, #72]	; (85344 <udc_req_iface+0x90>)
   852fa:	681b      	ldr	r3, [r3, #0]
   852fc:	685a      	ldr	r2, [r3, #4]
   852fe:	79fb      	ldrb	r3, [r7, #7]
   85300:	009b      	lsls	r3, r3, #2
   85302:	4413      	add	r3, r2
   85304:	681b      	ldr	r3, [r3, #0]
   85306:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   85308:	683b      	ldr	r3, [r7, #0]
   8530a:	68db      	ldr	r3, [r3, #12]
   8530c:	4798      	blx	r3
   8530e:	4603      	mov	r3, r0
   85310:	461a      	mov	r2, r3
   85312:	79fb      	ldrb	r3, [r7, #7]
   85314:	4611      	mov	r1, r2
   85316:	4618      	mov	r0, r3
   85318:	4b0b      	ldr	r3, [pc, #44]	; (85348 <udc_req_iface+0x94>)
   8531a:	4798      	blx	r3
   8531c:	4603      	mov	r3, r0
   8531e:	f083 0301 	eor.w	r3, r3, #1
   85322:	b2db      	uxtb	r3, r3
   85324:	2b00      	cmp	r3, #0
   85326:	d001      	beq.n	8532c <udc_req_iface+0x78>
		return false;
   85328:	2300      	movs	r3, #0
   8532a:	e003      	b.n	85334 <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   8532c:	683b      	ldr	r3, [r7, #0]
   8532e:	689b      	ldr	r3, [r3, #8]
   85330:	4798      	blx	r3
   85332:	4603      	mov	r3, r0
}
   85334:	4618      	mov	r0, r3
   85336:	3708      	adds	r7, #8
   85338:	46bd      	mov	sp, r7
   8533a:	bd80      	pop	{r7, pc}
   8533c:	20000d3c 	.word	0x20000d3c
   85340:	20000d58 	.word	0x20000d58
   85344:	20000d40 	.word	0x20000d40
   85348:	00084745 	.word	0x00084745

0008534c <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   8534c:	b580      	push	{r7, lr}
   8534e:	b082      	sub	sp, #8
   85350:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   85352:	4b1e      	ldr	r3, [pc, #120]	; (853cc <udc_req_ep+0x80>)
   85354:	781b      	ldrb	r3, [r3, #0]
   85356:	2b00      	cmp	r3, #0
   85358:	d101      	bne.n	8535e <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
   8535a:	2300      	movs	r3, #0
   8535c:	e032      	b.n	853c4 <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8535e:	4b1c      	ldr	r3, [pc, #112]	; (853d0 <udc_req_ep+0x84>)
   85360:	889b      	ldrh	r3, [r3, #4]
   85362:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85364:	2300      	movs	r3, #0
   85366:	71fb      	strb	r3, [r7, #7]
   85368:	e024      	b.n	853b4 <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   8536a:	4b1a      	ldr	r3, [pc, #104]	; (853d4 <udc_req_ep+0x88>)
   8536c:	681b      	ldr	r3, [r3, #0]
   8536e:	685a      	ldr	r2, [r3, #4]
   85370:	79fb      	ldrb	r3, [r7, #7]
   85372:	009b      	lsls	r3, r3, #2
   85374:	4413      	add	r3, r2
   85376:	681b      	ldr	r3, [r3, #0]
   85378:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8537a:	683b      	ldr	r3, [r7, #0]
   8537c:	68db      	ldr	r3, [r3, #12]
   8537e:	4798      	blx	r3
   85380:	4603      	mov	r3, r0
   85382:	461a      	mov	r2, r3
   85384:	79fb      	ldrb	r3, [r7, #7]
   85386:	4611      	mov	r1, r2
   85388:	4618      	mov	r0, r3
   8538a:	4b13      	ldr	r3, [pc, #76]	; (853d8 <udc_req_ep+0x8c>)
   8538c:	4798      	blx	r3
   8538e:	4603      	mov	r3, r0
   85390:	f083 0301 	eor.w	r3, r3, #1
   85394:	b2db      	uxtb	r3, r3
   85396:	2b00      	cmp	r3, #0
   85398:	d001      	beq.n	8539e <udc_req_ep+0x52>
			return false;
   8539a:	2300      	movs	r3, #0
   8539c:	e012      	b.n	853c4 <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   8539e:	683b      	ldr	r3, [r7, #0]
   853a0:	689b      	ldr	r3, [r3, #8]
   853a2:	4798      	blx	r3
   853a4:	4603      	mov	r3, r0
   853a6:	2b00      	cmp	r3, #0
   853a8:	d001      	beq.n	853ae <udc_req_ep+0x62>
			return true;
   853aa:	2301      	movs	r3, #1
   853ac:	e00a      	b.n	853c4 <udc_req_ep+0x78>
			iface_num++) {
   853ae:	79fb      	ldrb	r3, [r7, #7]
   853b0:	3301      	adds	r3, #1
   853b2:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   853b4:	4b07      	ldr	r3, [pc, #28]	; (853d4 <udc_req_ep+0x88>)
   853b6:	681b      	ldr	r3, [r3, #0]
   853b8:	681b      	ldr	r3, [r3, #0]
   853ba:	791b      	ldrb	r3, [r3, #4]
   853bc:	79fa      	ldrb	r2, [r7, #7]
   853be:	429a      	cmp	r2, r3
   853c0:	d3d3      	bcc.n	8536a <udc_req_ep+0x1e>
		}
	}
	return false;
   853c2:	2300      	movs	r3, #0
}
   853c4:	4618      	mov	r0, r3
   853c6:	3708      	adds	r7, #8
   853c8:	46bd      	mov	sp, r7
   853ca:	bd80      	pop	{r7, pc}
   853cc:	20000d3c 	.word	0x20000d3c
   853d0:	20000d58 	.word	0x20000d58
   853d4:	20000d40 	.word	0x20000d40
   853d8:	00084745 	.word	0x00084745

000853dc <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   853dc:	b580      	push	{r7, lr}
   853de:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   853e0:	4b1e      	ldr	r3, [pc, #120]	; (8545c <udc_process_setup+0x80>)
   853e2:	2200      	movs	r2, #0
   853e4:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   853e6:	4b1d      	ldr	r3, [pc, #116]	; (8545c <udc_process_setup+0x80>)
   853e8:	2200      	movs	r2, #0
   853ea:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   853ec:	4b1b      	ldr	r3, [pc, #108]	; (8545c <udc_process_setup+0x80>)
   853ee:	2200      	movs	r2, #0
   853f0:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   853f2:	4b1a      	ldr	r3, [pc, #104]	; (8545c <udc_process_setup+0x80>)
   853f4:	781b      	ldrb	r3, [r3, #0]
   853f6:	b25b      	sxtb	r3, r3
   853f8:	2b00      	cmp	r3, #0
   853fa:	da05      	bge.n	85408 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
   853fc:	4b17      	ldr	r3, [pc, #92]	; (8545c <udc_process_setup+0x80>)
   853fe:	88db      	ldrh	r3, [r3, #6]
   85400:	2b00      	cmp	r3, #0
   85402:	d101      	bne.n	85408 <udc_process_setup+0x2c>
			return false; // Error from USB host
   85404:	2300      	movs	r3, #0
   85406:	e027      	b.n	85458 <udc_process_setup+0x7c>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   85408:	4b14      	ldr	r3, [pc, #80]	; (8545c <udc_process_setup+0x80>)
   8540a:	781b      	ldrb	r3, [r3, #0]
   8540c:	f003 0360 	and.w	r3, r3, #96	; 0x60
   85410:	2b00      	cmp	r3, #0
   85412:	d106      	bne.n	85422 <udc_process_setup+0x46>
		if (udc_reqstd()) {
   85414:	4b12      	ldr	r3, [pc, #72]	; (85460 <udc_process_setup+0x84>)
   85416:	4798      	blx	r3
   85418:	4603      	mov	r3, r0
   8541a:	2b00      	cmp	r3, #0
   8541c:	d001      	beq.n	85422 <udc_process_setup+0x46>
			return true;
   8541e:	2301      	movs	r3, #1
   85420:	e01a      	b.n	85458 <udc_process_setup+0x7c>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   85422:	4b0e      	ldr	r3, [pc, #56]	; (8545c <udc_process_setup+0x80>)
   85424:	781b      	ldrb	r3, [r3, #0]
   85426:	f003 031f 	and.w	r3, r3, #31
   8542a:	2b01      	cmp	r3, #1
   8542c:	d106      	bne.n	8543c <udc_process_setup+0x60>
		if (udc_req_iface()) {
   8542e:	4b0d      	ldr	r3, [pc, #52]	; (85464 <udc_process_setup+0x88>)
   85430:	4798      	blx	r3
   85432:	4603      	mov	r3, r0
   85434:	2b00      	cmp	r3, #0
   85436:	d001      	beq.n	8543c <udc_process_setup+0x60>
			return true;
   85438:	2301      	movs	r3, #1
   8543a:	e00d      	b.n	85458 <udc_process_setup+0x7c>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   8543c:	4b07      	ldr	r3, [pc, #28]	; (8545c <udc_process_setup+0x80>)
   8543e:	781b      	ldrb	r3, [r3, #0]
   85440:	f003 031f 	and.w	r3, r3, #31
   85444:	2b02      	cmp	r3, #2
   85446:	d106      	bne.n	85456 <udc_process_setup+0x7a>
		if (udc_req_ep()) {
   85448:	4b07      	ldr	r3, [pc, #28]	; (85468 <udc_process_setup+0x8c>)
   8544a:	4798      	blx	r3
   8544c:	4603      	mov	r3, r0
   8544e:	2b00      	cmp	r3, #0
   85450:	d001      	beq.n	85456 <udc_process_setup+0x7a>
			return true;
   85452:	2301      	movs	r3, #1
   85454:	e000      	b.n	85458 <udc_process_setup+0x7c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   85456:	2300      	movs	r3, #0
#endif
}
   85458:	4618      	mov	r0, r3
   8545a:	bd80      	pop	{r7, pc}
   8545c:	20000d58 	.word	0x20000d58
   85460:	00085129 	.word	0x00085129
   85464:	000852b5 	.word	0x000852b5
   85468:	0008534d 	.word	0x0008534d

0008546c <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
   8546c:	b5b0      	push	{r4, r5, r7, lr}
   8546e:	b09c      	sub	sp, #112	; 0x70
   85470:	af00      	add	r7, sp, #0
   85472:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
   85474:	687b      	ldr	r3, [r7, #4]
   85476:	3b01      	subs	r3, #1
   85478:	2b04      	cmp	r3, #4
   8547a:	f200 81d9 	bhi.w	85830 <pmc_sleep+0x3c4>
   8547e:	a201      	add	r2, pc, #4	; (adr r2, 85484 <pmc_sleep+0x18>)
   85480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85484:	00085499 	.word	0x00085499
   85488:	00085499 	.word	0x00085499
   8548c:	000854cb 	.word	0x000854cb
   85490:	000854cb 	.word	0x000854cb
   85494:	00085815 	.word	0x00085815
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
		cpu_irq_enable();
		__WFI();
		break;
#else
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
   85498:	4b80      	ldr	r3, [pc, #512]	; (8569c <pmc_sleep+0x230>)
   8549a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   8549c:	4a7f      	ldr	r2, [pc, #508]	; (8569c <pmc_sleep+0x230>)
   8549e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   854a2:	6713      	str	r3, [r2, #112]	; 0x70
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
   854a4:	4b7e      	ldr	r3, [pc, #504]	; (856a0 <pmc_sleep+0x234>)
   854a6:	691b      	ldr	r3, [r3, #16]
   854a8:	4a7d      	ldr	r2, [pc, #500]	; (856a0 <pmc_sleep+0x234>)
   854aa:	f023 0304 	bic.w	r3, r3, #4
   854ae:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   854b0:	4b7c      	ldr	r3, [pc, #496]	; (856a4 <pmc_sleep+0x238>)
   854b2:	2201      	movs	r2, #1
   854b4:	701a      	strb	r2, [r3, #0]
   854b6:	f3bf 8f5f 	dmb	sy
   854ba:	b662      	cpsie	i
		if (sleep_mode == SAM_PM_SMODE_SLEEP_WFI)
   854bc:	687b      	ldr	r3, [r7, #4]
   854be:	2b02      	cmp	r3, #2
   854c0:	d101      	bne.n	854c6 <pmc_sleep+0x5a>
  __ASM volatile ("wfi");
   854c2:	bf30      	wfi
			__WFI();
		else
			__WFE();
		break;
   854c4:	e1b4      	b.n	85830 <pmc_sleep+0x3c4>
  __ASM volatile ("wfe");
   854c6:	bf20      	wfe
   854c8:	e1b2      	b.n	85830 <pmc_sleep+0x3c4>
  __ASM volatile ("cpsid i");
   854ca:	b672      	cpsid	i
  __ASM volatile ("dmb");
   854cc:	f3bf 8f5f 	dmb	sy
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
#endif
		cpu_irq_disable();
   854d0:	4b74      	ldr	r3, [pc, #464]	; (856a4 <pmc_sleep+0x238>)
   854d2:	2200      	movs	r2, #0
   854d4:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
   854d6:	4b74      	ldr	r3, [pc, #464]	; (856a8 <pmc_sleep+0x23c>)
   854d8:	2201      	movs	r2, #1
   854da:	701a      	strb	r2, [r3, #0]
		/* Backup the sub-system 1 status and stop sub-system 1 */
		uint32_t cpclk_backup = PMC->PMC_SCSR &
				(PMC_SCSR_CPCK | PMC_SCSR_CPBMCK);
		PMC->PMC_SCDR = cpclk_backup | PMC_SCDR_CPKEY_PASSWD;
#endif
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
   854dc:	687b      	ldr	r3, [r7, #4]
   854de:	2b04      	cmp	r3, #4
   854e0:	bf0c      	ite	eq
   854e2:	2301      	moveq	r3, #1
   854e4:	2300      	movne	r3, #0
   854e6:	b2da      	uxtb	r2, r3
   854e8:	f107 0320 	add.w	r3, r7, #32
   854ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   854ee:	f107 031c 	add.w	r3, r7, #28
   854f2:	64bb      	str	r3, [r7, #72]	; 0x48
   854f4:	f107 0318 	add.w	r3, r7, #24
   854f8:	647b      	str	r3, [r7, #68]	; 0x44
   854fa:	f107 0314 	add.w	r3, r7, #20
   854fe:	643b      	str	r3, [r7, #64]	; 0x40
   85500:	f107 0310 	add.w	r3, r7, #16
   85504:	63fb      	str	r3, [r7, #60]	; 0x3c
   85506:	f107 030c 	add.w	r3, r7, #12
   8550a:	63bb      	str	r3, [r7, #56]	; 0x38
   8550c:	4613      	mov	r3, r2
   8550e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t mor  = PMC->CKGR_MOR;
   85512:	4b62      	ldr	r3, [pc, #392]	; (8569c <pmc_sleep+0x230>)
   85514:	6a1b      	ldr	r3, [r3, #32]
   85516:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t mckr = PMC->PMC_MCKR;
   85518:	4b60      	ldr	r3, [pc, #384]	; (8569c <pmc_sleep+0x230>)
   8551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8551c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fmr  = EFC0->EEFC_FMR;
   8551e:	4b63      	ldr	r3, [pc, #396]	; (856ac <pmc_sleep+0x240>)
   85520:	681b      	ldr	r3, [r3, #0]
   85522:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fmr1 = EFC1->EEFC_FMR;
   85524:	4b62      	ldr	r3, [pc, #392]	; (856b0 <pmc_sleep+0x244>)
   85526:	681b      	ldr	r3, [r3, #0]
   85528:	627b      	str	r3, [r7, #36]	; 0x24
	if (p_osc_setting) {
   8552a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8552c:	2b00      	cmp	r3, #0
   8552e:	d002      	beq.n	85536 <pmc_sleep+0xca>
		*p_osc_setting = mor;
   85530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   85532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   85534:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
   85536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   85538:	2b00      	cmp	r3, #0
   8553a:	d003      	beq.n	85544 <pmc_sleep+0xd8>
		*p_pll0_setting = PMC->CKGR_PLLAR;
   8553c:	4b57      	ldr	r3, [pc, #348]	; (8569c <pmc_sleep+0x230>)
   8553e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   85540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   85542:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
   85544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   85546:	2b00      	cmp	r3, #0
   85548:	d003      	beq.n	85552 <pmc_sleep+0xe6>
		*p_pll1_setting = PMC->CKGR_UCKR;
   8554a:	4b54      	ldr	r3, [pc, #336]	; (8569c <pmc_sleep+0x230>)
   8554c:	69da      	ldr	r2, [r3, #28]
   8554e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   85550:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
   85552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85554:	2b00      	cmp	r3, #0
   85556:	d002      	beq.n	8555e <pmc_sleep+0xf2>
		*p_mck_setting  = mckr;
   85558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8555a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   8555c:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
   8555e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   85560:	2b00      	cmp	r3, #0
   85562:	d002      	beq.n	8556a <pmc_sleep+0xfe>
		*p_fmr_setting  = fmr;
   85564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   85566:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85568:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting1) {
   8556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   8556c:	2b00      	cmp	r3, #0
   8556e:	d002      	beq.n	85576 <pmc_sleep+0x10a>
		*p_fmr_setting1 = fmr1;
   85570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   85572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   85574:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
   85576:	4a49      	ldr	r2, [pc, #292]	; (8569c <pmc_sleep+0x230>)
   85578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8557a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8557e:	f043 0308 	orr.w	r3, r3, #8
   85582:	6213      	str	r3, [r2, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
   85584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   85586:	f003 0302 	and.w	r3, r3, #2
   8558a:	2b00      	cmp	r3, #0
   8558c:	d00e      	beq.n	855ac <pmc_sleep+0x140>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
   8558e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   85590:	f023 0303 	bic.w	r3, r3, #3
   85594:	f043 0301 	orr.w	r3, r3, #1
   85598:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   8559a:	4a40      	ldr	r2, [pc, #256]	; (8569c <pmc_sleep+0x230>)
   8559c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8559e:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   855a0:	4b3e      	ldr	r3, [pc, #248]	; (8569c <pmc_sleep+0x230>)
   855a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   855a4:	f003 0308 	and.w	r3, r3, #8
   855a8:	2b00      	cmp	r3, #0
   855aa:	d0f9      	beq.n	855a0 <pmc_sleep+0x134>
	if (mckr & PMC_MCKR_PRES_Msk) {
   855ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   855ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
   855b2:	2b00      	cmp	r3, #0
   855b4:	d00c      	beq.n	855d0 <pmc_sleep+0x164>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
   855b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   855b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   855bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   855be:	4a37      	ldr	r2, [pc, #220]	; (8569c <pmc_sleep+0x230>)
   855c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   855c2:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   855c4:	4b35      	ldr	r3, [pc, #212]	; (8569c <pmc_sleep+0x230>)
   855c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   855c8:	f003 0308 	and.w	r3, r3, #8
   855cc:	2b00      	cmp	r3, #0
   855ce:	d0f9      	beq.n	855c4 <pmc_sleep+0x158>
	pmc_disable_pllack();
   855d0:	4b38      	ldr	r3, [pc, #224]	; (856b4 <pmc_sleep+0x248>)
   855d2:	4798      	blx	r3
	pmc_disable_upll_clock();
   855d4:	4b38      	ldr	r3, [pc, #224]	; (856b8 <pmc_sleep+0x24c>)
   855d6:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   855d8:	4b30      	ldr	r3, [pc, #192]	; (8569c <pmc_sleep+0x230>)
   855da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   855dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   855e0:	2b00      	cmp	r3, #0
   855e2:	d0f9      	beq.n	855d8 <pmc_sleep+0x16c>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   855e4:	4b2d      	ldr	r3, [pc, #180]	; (8569c <pmc_sleep+0x230>)
   855e6:	6a1b      	ldr	r3, [r3, #32]
   855e8:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   855ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   855f0:	4a2a      	ldr	r2, [pc, #168]	; (8569c <pmc_sleep+0x230>)
   855f2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   855f6:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   855f8:	4b28      	ldr	r3, [pc, #160]	; (8569c <pmc_sleep+0x230>)
   855fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   855fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   85600:	2b00      	cmp	r3, #0
   85602:	d0f9      	beq.n	855f8 <pmc_sleep+0x18c>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
   85604:	4a29      	ldr	r2, [pc, #164]	; (856ac <pmc_sleep+0x240>)
   85606:	6abb      	ldr	r3, [r7, #40]	; 0x28
   85608:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   8560c:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
   8560e:	4a28      	ldr	r2, [pc, #160]	; (856b0 <pmc_sleep+0x244>)
   85610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   85612:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   85616:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
   85618:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   8561c:	2b00      	cmp	r3, #0
   8561e:	d009      	beq.n	85634 <pmc_sleep+0x1c8>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   85620:	4b1e      	ldr	r3, [pc, #120]	; (8569c <pmc_sleep+0x230>)
   85622:	6a1b      	ldr	r3, [r3, #32]
   85624:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   85628:	f023 0301 	bic.w	r3, r3, #1
   8562c:	4a1b      	ldr	r2, [pc, #108]	; (8569c <pmc_sleep+0x230>)
   8562e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85632:	6213      	str	r3, [r2, #32]
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
   85634:	4b1b      	ldr	r3, [pc, #108]	; (856a4 <pmc_sleep+0x238>)
   85636:	2201      	movs	r2, #1
   85638:	701a      	strb	r2, [r3, #0]
   8563a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8563e:	b662      	cpsie	i

		pmc_enable_waitmode();
   85640:	4b1e      	ldr	r3, [pc, #120]	; (856bc <pmc_sleep+0x250>)
   85642:	4798      	blx	r3
  __ASM volatile ("cpsid i");
   85644:	b672      	cpsid	i
   85646:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
   8564a:	4b16      	ldr	r3, [pc, #88]	; (856a4 <pmc_sleep+0x238>)
   8564c:	2200      	movs	r2, #0
   8564e:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
   85650:	6a3d      	ldr	r5, [r7, #32]
   85652:	69fc      	ldr	r4, [r7, #28]
   85654:	69b8      	ldr	r0, [r7, #24]
   85656:	6979      	ldr	r1, [r7, #20]
   85658:	693a      	ldr	r2, [r7, #16]
   8565a:	68fb      	ldr	r3, [r7, #12]
   8565c:	66fd      	str	r5, [r7, #108]	; 0x6c
   8565e:	66bc      	str	r4, [r7, #104]	; 0x68
   85660:	6678      	str	r0, [r7, #100]	; 0x64
   85662:	6639      	str	r1, [r7, #96]	; 0x60
   85664:	65fa      	str	r2, [r7, #92]	; 0x5c
   85666:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t pll_sr = 0;
   85668:	2300      	movs	r3, #0
   8566a:	657b      	str	r3, [r7, #84]	; 0x54
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
   8566c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   8566e:	f003 0302 	and.w	r3, r3, #2
   85672:	2b00      	cmp	r3, #0
   85674:	d028      	beq.n	856c8 <pmc_sleep+0x25c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   85676:	4b09      	ldr	r3, [pc, #36]	; (8569c <pmc_sleep+0x230>)
   85678:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8567a:	4a11      	ldr	r2, [pc, #68]	; (856c0 <pmc_sleep+0x254>)
   8567c:	401a      	ands	r2, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8567e:	4907      	ldr	r1, [pc, #28]	; (8569c <pmc_sleep+0x230>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   85680:	4b10      	ldr	r3, [pc, #64]	; (856c4 <pmc_sleep+0x258>)
   85682:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   85684:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   85686:	4b05      	ldr	r3, [pc, #20]	; (8569c <pmc_sleep+0x230>)
   85688:	6a1b      	ldr	r3, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
   8568a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8568e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   85692:	4a02      	ldr	r2, [pc, #8]	; (8569c <pmc_sleep+0x230>)
				| CKGR_MOR_KEY_PASSWD;
   85694:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   85698:	6213      	str	r3, [r2, #32]
   8569a:	e050      	b.n	8573e <pmc_sleep+0x2d2>
   8569c:	400e0400 	.word	0x400e0400
   856a0:	e000ed00 	.word	0xe000ed00
   856a4:	2000031a 	.word	0x2000031a
   856a8:	20000d4b 	.word	0x20000d4b
   856ac:	400e0800 	.word	0x400e0800
   856b0:	400e0a00 	.word	0x400e0a00
   856b4:	00083e2d 	.word	0x00083e2d
   856b8:	00083e5d 	.word	0x00083e5d
   856bc:	00083f79 	.word	0x00083f79
   856c0:	fec8fffc 	.word	0xfec8fffc
   856c4:	01370002 	.word	0x01370002
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
   856c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   856ca:	f003 0301 	and.w	r3, r3, #1
   856ce:	2b00      	cmp	r3, #0
   856d0:	d035      	beq.n	8573e <pmc_sleep+0x2d2>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
   856d2:	4b59      	ldr	r3, [pc, #356]	; (85838 <pmc_sleep+0x3cc>)
   856d4:	6a1b      	ldr	r3, [r3, #32]
   856d6:	f003 0301 	and.w	r3, r3, #1
   856da:	2b00      	cmp	r3, #0
   856dc:	d111      	bne.n	85702 <pmc_sleep+0x296>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   856de:	4b56      	ldr	r3, [pc, #344]	; (85838 <pmc_sleep+0x3cc>)
   856e0:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   856e2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   856e6:	f023 0303 	bic.w	r3, r3, #3
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   856ea:	4a53      	ldr	r2, [pc, #332]	; (85838 <pmc_sleep+0x3cc>)
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   856ec:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   856f0:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   856f4:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   856f6:	4b50      	ldr	r3, [pc, #320]	; (85838 <pmc_sleep+0x3cc>)
   856f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   856fa:	f003 0301 	and.w	r3, r3, #1
   856fe:	2b00      	cmp	r3, #0
   85700:	d0f9      	beq.n	856f6 <pmc_sleep+0x28a>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
   85702:	4b4d      	ldr	r3, [pc, #308]	; (85838 <pmc_sleep+0x3cc>)
   85704:	6a1b      	ldr	r3, [r3, #32]
   85706:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8570a:	2b00      	cmp	r3, #0
   8570c:	d10d      	bne.n	8572a <pmc_sleep+0x2be>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8570e:	4b4a      	ldr	r3, [pc, #296]	; (85838 <pmc_sleep+0x3cc>)
   85710:	6a1b      	ldr	r3, [r3, #32]
   85712:	4a49      	ldr	r2, [pc, #292]	; (85838 <pmc_sleep+0x3cc>)
   85714:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   85718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8571c:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   8571e:	4b46      	ldr	r3, [pc, #280]	; (85838 <pmc_sleep+0x3cc>)
   85720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   85726:	2b00      	cmp	r3, #0
   85728:	d0f9      	beq.n	8571e <pmc_sleep+0x2b2>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   8572a:	4b43      	ldr	r3, [pc, #268]	; (85838 <pmc_sleep+0x3cc>)
   8572c:	6a1b      	ldr	r3, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
   8572e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   85732:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   85736:	4a40      	ldr	r2, [pc, #256]	; (85838 <pmc_sleep+0x3cc>)
					| CKGR_MOR_KEY_PASSWD;
   85738:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   8573c:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
   8573e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   85740:	4b3e      	ldr	r3, [pc, #248]	; (8583c <pmc_sleep+0x3d0>)
   85742:	4013      	ands	r3, r2
   85744:	2b00      	cmp	r3, #0
   85746:	d008      	beq.n	8575a <pmc_sleep+0x2ee>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
   85748:	4a3b      	ldr	r2, [pc, #236]	; (85838 <pmc_sleep+0x3cc>)
   8574a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   8574c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   85750:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
   85752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   85754:	f043 0302 	orr.w	r3, r3, #2
   85758:	657b      	str	r3, [r7, #84]	; 0x54
	if (pll1_setting & CKGR_UCKR_UPLLEN) {
   8575a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   8575c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   85760:	2b00      	cmp	r3, #0
   85762:	d006      	beq.n	85772 <pmc_sleep+0x306>
		PMC->CKGR_UCKR = pll1_setting;
   85764:	4a34      	ldr	r2, [pc, #208]	; (85838 <pmc_sleep+0x3cc>)
   85766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   85768:	61d3      	str	r3, [r2, #28]
		pll_sr |= PMC_SR_LOCKU;
   8576a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   8576c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85770:	657b      	str	r3, [r7, #84]	; 0x54
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
   85772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   85774:	f003 0303 	and.w	r3, r3, #3
   85778:	2b02      	cmp	r3, #2
   8577a:	d002      	beq.n	85782 <pmc_sleep+0x316>
   8577c:	2b03      	cmp	r3, #3
   8577e:	d007      	beq.n	85790 <pmc_sleep+0x324>
   85780:	e00c      	b.n	8579c <pmc_sleep+0x330>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
   85782:	4b2d      	ldr	r3, [pc, #180]	; (85838 <pmc_sleep+0x3cc>)
   85784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85786:	f003 0302 	and.w	r3, r3, #2
   8578a:	2b00      	cmp	r3, #0
   8578c:	d0f9      	beq.n	85782 <pmc_sleep+0x316>
   8578e:	e005      	b.n	8579c <pmc_sleep+0x330>
		while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   85790:	4b29      	ldr	r3, [pc, #164]	; (85838 <pmc_sleep+0x3cc>)
   85792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85794:	f003 0340 	and.w	r3, r3, #64	; 0x40
   85798:	2b00      	cmp	r3, #0
   8579a:	d0f9      	beq.n	85790 <pmc_sleep+0x324>
	mckr = PMC->PMC_MCKR;
   8579c:	4b26      	ldr	r3, [pc, #152]	; (85838 <pmc_sleep+0x3cc>)
   8579e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   857a0:	653b      	str	r3, [r7, #80]	; 0x50
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   857a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   857a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
   857a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   857aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   857ae:	4922      	ldr	r1, [pc, #136]	; (85838 <pmc_sleep+0x3cc>)
		| (mck_setting & PMC_MCKR_PRES_Msk);
   857b0:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   857b2:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   857b4:	4b20      	ldr	r3, [pc, #128]	; (85838 <pmc_sleep+0x3cc>)
   857b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   857b8:	f003 0308 	and.w	r3, r3, #8
   857bc:	2b00      	cmp	r3, #0
   857be:	d0f9      	beq.n	857b4 <pmc_sleep+0x348>
	EFC0->EEFC_FMR = fmr_setting;
   857c0:	4a1f      	ldr	r2, [pc, #124]	; (85840 <pmc_sleep+0x3d4>)
   857c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   857c4:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr_setting1;
   857c6:	4a1f      	ldr	r2, [pc, #124]	; (85844 <pmc_sleep+0x3d8>)
   857c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   857ca:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
   857cc:	4a1a      	ldr	r2, [pc, #104]	; (85838 <pmc_sleep+0x3cc>)
   857ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   857d0:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   857d2:	4b19      	ldr	r3, [pc, #100]	; (85838 <pmc_sleep+0x3cc>)
   857d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   857d6:	f003 0308 	and.w	r3, r3, #8
   857da:	2b00      	cmp	r3, #0
   857dc:	d0f9      	beq.n	857d2 <pmc_sleep+0x366>
	while (!(PMC->PMC_SR & pll_sr));
   857de:	4b16      	ldr	r3, [pc, #88]	; (85838 <pmc_sleep+0x3cc>)
   857e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   857e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   857e4:	4013      	ands	r3, r2
   857e6:	2b00      	cmp	r3, #0
   857e8:	d0f9      	beq.n	857de <pmc_sleep+0x372>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
   857ea:	4b17      	ldr	r3, [pc, #92]	; (85848 <pmc_sleep+0x3dc>)
   857ec:	2200      	movs	r2, #0
   857ee:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
   857f0:	4b16      	ldr	r3, [pc, #88]	; (8584c <pmc_sleep+0x3e0>)
   857f2:	681b      	ldr	r3, [r3, #0]
   857f4:	2b00      	cmp	r3, #0
   857f6:	d005      	beq.n	85804 <pmc_sleep+0x398>
			callback_clocks_restored();
   857f8:	4b14      	ldr	r3, [pc, #80]	; (8584c <pmc_sleep+0x3e0>)
   857fa:	681b      	ldr	r3, [r3, #0]
   857fc:	4798      	blx	r3
			callback_clocks_restored = NULL;
   857fe:	4b13      	ldr	r3, [pc, #76]	; (8584c <pmc_sleep+0x3e0>)
   85800:	2200      	movs	r2, #0
   85802:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
   85804:	4b12      	ldr	r3, [pc, #72]	; (85850 <pmc_sleep+0x3e4>)
   85806:	2201      	movs	r2, #1
   85808:	701a      	strb	r2, [r3, #0]
   8580a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   8580e:	b662      	cpsie	i

		break;
   85810:	bf00      	nop
   85812:	e00d      	b.n	85830 <pmc_sleep+0x3c4>
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
   85814:	4b0f      	ldr	r3, [pc, #60]	; (85854 <pmc_sleep+0x3e8>)
   85816:	691b      	ldr	r3, [r3, #16]
   85818:	4a0e      	ldr	r2, [pc, #56]	; (85854 <pmc_sleep+0x3e8>)
   8581a:	f043 0304 	orr.w	r3, r3, #4
   8581e:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
		cpu_irq_enable();
		__WFI() ;
#else
		cpu_irq_enable();
   85820:	4b0b      	ldr	r3, [pc, #44]	; (85850 <pmc_sleep+0x3e4>)
   85822:	2201      	movs	r2, #1
   85824:	701a      	strb	r2, [r3, #0]
   85826:	f3bf 8f5f 	dmb	sy
   8582a:	b662      	cpsie	i
  __ASM volatile ("wfe");
   8582c:	bf20      	wfe
		__WFE() ;
#endif
		break;
   8582e:	bf00      	nop
#endif
	}
}
   85830:	bf00      	nop
   85832:	3770      	adds	r7, #112	; 0x70
   85834:	46bd      	mov	sp, r7
   85836:	bdb0      	pop	{r4, r5, r7, pc}
   85838:	400e0400 	.word	0x400e0400
   8583c:	07ff0000 	.word	0x07ff0000
   85840:	400e0800 	.word	0x400e0800
   85844:	400e0a00 	.word	0x400e0a00
   85848:	20000d4b 	.word	0x20000d4b
   8584c:	20000d4c 	.word	0x20000d4c
   85850:	2000031a 	.word	0x2000031a
   85854:	e000ed00 	.word	0xe000ed00

00085858 <pmc_is_wakeup_clocks_restored>:

bool pmc_is_wakeup_clocks_restored(void)
{
   85858:	b480      	push	{r7}
   8585a:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
   8585c:	4b08      	ldr	r3, [pc, #32]	; (85880 <pmc_is_wakeup_clocks_restored+0x28>)
   8585e:	781b      	ldrb	r3, [r3, #0]
   85860:	b2db      	uxtb	r3, r3
   85862:	2b00      	cmp	r3, #0
   85864:	bf14      	ite	ne
   85866:	2301      	movne	r3, #1
   85868:	2300      	moveq	r3, #0
   8586a:	b2db      	uxtb	r3, r3
   8586c:	f083 0301 	eor.w	r3, r3, #1
   85870:	b2db      	uxtb	r3, r3
   85872:	f003 0301 	and.w	r3, r3, #1
   85876:	b2db      	uxtb	r3, r3
}
   85878:	4618      	mov	r0, r3
   8587a:	46bd      	mov	sp, r7
   8587c:	bc80      	pop	{r7}
   8587e:	4770      	bx	lr
   85880:	20000d4b 	.word	0x20000d4b

00085884 <sysclk_enable_peripheral_clock>:
{
   85884:	b580      	push	{r7, lr}
   85886:	b082      	sub	sp, #8
   85888:	af00      	add	r7, sp, #0
   8588a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   8588c:	6878      	ldr	r0, [r7, #4]
   8588e:	4b03      	ldr	r3, [pc, #12]	; (8589c <sysclk_enable_peripheral_clock+0x18>)
   85890:	4798      	blx	r3
}
   85892:	bf00      	nop
   85894:	3708      	adds	r7, #8
   85896:	46bd      	mov	sp, r7
   85898:	bd80      	pop	{r7, pc}
   8589a:	bf00      	nop
   8589c:	00083e91 	.word	0x00083e91

000858a0 <ioport_init>:
{
   858a0:	b580      	push	{r7, lr}
   858a2:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   858a4:	200a      	movs	r0, #10
   858a6:	4b03      	ldr	r3, [pc, #12]	; (858b4 <ioport_init+0x14>)
   858a8:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   858aa:	200b      	movs	r0, #11
   858ac:	4b01      	ldr	r3, [pc, #4]	; (858b4 <ioport_init+0x14>)
   858ae:	4798      	blx	r3
}
   858b0:	bf00      	nop
   858b2:	bd80      	pop	{r7, pc}
   858b4:	00085885 	.word	0x00085885

000858b8 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   858b8:	b580      	push	{r7, lr}
   858ba:	af00      	add	r7, sp, #0
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   858bc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   858c0:	201d      	movs	r0, #29
   858c2:	4b0d      	ldr	r3, [pc, #52]	; (858f8 <iopins_normal+0x40>)
   858c4:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   858c6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   858ca:	201f      	movs	r0, #31
   858cc:	4b0a      	ldr	r3, [pc, #40]	; (858f8 <iopins_normal+0x40>)
   858ce:	4798      	blx	r3
	//gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   858d0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   858d4:	2018      	movs	r0, #24
   858d6:	4b08      	ldr	r3, [pc, #32]	; (858f8 <iopins_normal+0x40>)
   858d8:	4798      	blx	r3
	//board_sram_pwron();

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   858da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   858de:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   858e2:	4806      	ldr	r0, [pc, #24]	; (858fc <iopins_normal+0x44>)
   858e4:	4b06      	ldr	r3, [pc, #24]	; (85900 <iopins_normal+0x48>)
   858e6:	4798      	blx	r3
#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
#endif

#ifdef CONF_BOARD_PCK1
gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
   858e8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   858ec:	2038      	movs	r0, #56	; 0x38
   858ee:	4b02      	ldr	r3, [pc, #8]	; (858f8 <iopins_normal+0x40>)
   858f0:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   858f2:	bf00      	nop
   858f4:	bd80      	pop	{r7, pc}
   858f6:	bf00      	nop
   858f8:	00084479 	.word	0x00084479
   858fc:	400e0c00 	.word	0x400e0c00
   85900:	0008459d 	.word	0x0008459d

00085904 <board_init>:

void board_init(void)
{
   85904:	b580      	push	{r7, lr}
   85906:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   85908:	4b04      	ldr	r3, [pc, #16]	; (8591c <board_init+0x18>)
   8590a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8590e:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   85910:	4b03      	ldr	r3, [pc, #12]	; (85920 <board_init+0x1c>)
   85912:	4798      	blx	r3

	iopins_normal();
   85914:	4b03      	ldr	r3, [pc, #12]	; (85924 <board_init+0x20>)
   85916:	4798      	blx	r3

}
   85918:	bf00      	nop
   8591a:	bd80      	pop	{r7, pc}
   8591c:	400e1250 	.word	0x400e1250
   85920:	000858a1 	.word	0x000858a1
   85924:	000858b9 	.word	0x000858b9

00085928 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   85928:	b480      	push	{r7}
   8592a:	b083      	sub	sp, #12
   8592c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   8592e:	4b10      	ldr	r3, [pc, #64]	; (85970 <cpu_irq_enter_critical+0x48>)
   85930:	681b      	ldr	r3, [r3, #0]
   85932:	2b00      	cmp	r3, #0
   85934:	d112      	bne.n	8595c <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   85936:	f3ef 8310 	mrs	r3, PRIMASK
   8593a:	607b      	str	r3, [r7, #4]
  return(result);
   8593c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   8593e:	2b00      	cmp	r3, #0
   85940:	d109      	bne.n	85956 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i");
   85942:	b672      	cpsid	i
  __ASM volatile ("dmb");
   85944:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   85948:	4b0a      	ldr	r3, [pc, #40]	; (85974 <cpu_irq_enter_critical+0x4c>)
   8594a:	2200      	movs	r2, #0
   8594c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   8594e:	4b0a      	ldr	r3, [pc, #40]	; (85978 <cpu_irq_enter_critical+0x50>)
   85950:	2201      	movs	r2, #1
   85952:	701a      	strb	r2, [r3, #0]
   85954:	e002      	b.n	8595c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   85956:	4b08      	ldr	r3, [pc, #32]	; (85978 <cpu_irq_enter_critical+0x50>)
   85958:	2200      	movs	r2, #0
   8595a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   8595c:	4b04      	ldr	r3, [pc, #16]	; (85970 <cpu_irq_enter_critical+0x48>)
   8595e:	681b      	ldr	r3, [r3, #0]
   85960:	3301      	adds	r3, #1
   85962:	4a03      	ldr	r2, [pc, #12]	; (85970 <cpu_irq_enter_critical+0x48>)
   85964:	6013      	str	r3, [r2, #0]
}
   85966:	bf00      	nop
   85968:	370c      	adds	r7, #12
   8596a:	46bd      	mov	sp, r7
   8596c:	bc80      	pop	{r7}
   8596e:	4770      	bx	lr
   85970:	20000d50 	.word	0x20000d50
   85974:	2000031a 	.word	0x2000031a
   85978:	20000d54 	.word	0x20000d54

0008597c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   8597c:	b480      	push	{r7}
   8597e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   85980:	4b0b      	ldr	r3, [pc, #44]	; (859b0 <cpu_irq_leave_critical+0x34>)
   85982:	681b      	ldr	r3, [r3, #0]
   85984:	3b01      	subs	r3, #1
   85986:	4a0a      	ldr	r2, [pc, #40]	; (859b0 <cpu_irq_leave_critical+0x34>)
   85988:	6013      	str	r3, [r2, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   8598a:	4b09      	ldr	r3, [pc, #36]	; (859b0 <cpu_irq_leave_critical+0x34>)
   8598c:	681b      	ldr	r3, [r3, #0]
   8598e:	2b00      	cmp	r3, #0
   85990:	d10a      	bne.n	859a8 <cpu_irq_leave_critical+0x2c>
   85992:	4b08      	ldr	r3, [pc, #32]	; (859b4 <cpu_irq_leave_critical+0x38>)
   85994:	781b      	ldrb	r3, [r3, #0]
   85996:	b2db      	uxtb	r3, r3
   85998:	2b00      	cmp	r3, #0
   8599a:	d005      	beq.n	859a8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   8599c:	4b06      	ldr	r3, [pc, #24]	; (859b8 <cpu_irq_leave_critical+0x3c>)
   8599e:	2201      	movs	r2, #1
   859a0:	701a      	strb	r2, [r3, #0]
   859a2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i");
   859a6:	b662      	cpsie	i
	}
}
   859a8:	bf00      	nop
   859aa:	46bd      	mov	sp, r7
   859ac:	bc80      	pop	{r7}
   859ae:	4770      	bx	lr
   859b0:	20000d50 	.word	0x20000d50
   859b4:	20000d54 	.word	0x20000d54
   859b8:	2000031a 	.word	0x2000031a

000859bc <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   859bc:	b480      	push	{r7}
   859be:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   859c0:	4b55      	ldr	r3, [pc, #340]	; (85b18 <SystemCoreClockUpdate+0x15c>)
   859c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   859c4:	f003 0303 	and.w	r3, r3, #3
   859c8:	2b03      	cmp	r3, #3
   859ca:	f200 8086 	bhi.w	85ada <SystemCoreClockUpdate+0x11e>
   859ce:	a201      	add	r2, pc, #4	; (adr r2, 859d4 <SystemCoreClockUpdate+0x18>)
   859d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   859d4:	000859e5 	.word	0x000859e5
   859d8:	00085a05 	.word	0x00085a05
   859dc:	00085a51 	.word	0x00085a51
   859e0:	00085a51 	.word	0x00085a51
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   859e4:	4b4d      	ldr	r3, [pc, #308]	; (85b1c <SystemCoreClockUpdate+0x160>)
   859e6:	695b      	ldr	r3, [r3, #20]
   859e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   859ec:	2b00      	cmp	r3, #0
   859ee:	d004      	beq.n	859fa <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   859f0:	4b4b      	ldr	r3, [pc, #300]	; (85b20 <SystemCoreClockUpdate+0x164>)
   859f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   859f6:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   859f8:	e06f      	b.n	85ada <SystemCoreClockUpdate+0x11e>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   859fa:	4b49      	ldr	r3, [pc, #292]	; (85b20 <SystemCoreClockUpdate+0x164>)
   859fc:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   85a00:	601a      	str	r2, [r3, #0]
		break;
   85a02:	e06a      	b.n	85ada <SystemCoreClockUpdate+0x11e>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   85a04:	4b44      	ldr	r3, [pc, #272]	; (85b18 <SystemCoreClockUpdate+0x15c>)
   85a06:	6a1b      	ldr	r3, [r3, #32]
   85a08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   85a0c:	2b00      	cmp	r3, #0
   85a0e:	d003      	beq.n	85a18 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   85a10:	4b43      	ldr	r3, [pc, #268]	; (85b20 <SystemCoreClockUpdate+0x164>)
   85a12:	4a44      	ldr	r2, [pc, #272]	; (85b24 <SystemCoreClockUpdate+0x168>)
   85a14:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   85a16:	e060      	b.n	85ada <SystemCoreClockUpdate+0x11e>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   85a18:	4b41      	ldr	r3, [pc, #260]	; (85b20 <SystemCoreClockUpdate+0x164>)
   85a1a:	4a43      	ldr	r2, [pc, #268]	; (85b28 <SystemCoreClockUpdate+0x16c>)
   85a1c:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   85a1e:	4b3e      	ldr	r3, [pc, #248]	; (85b18 <SystemCoreClockUpdate+0x15c>)
   85a20:	6a1b      	ldr	r3, [r3, #32]
   85a22:	f003 0370 	and.w	r3, r3, #112	; 0x70
   85a26:	2b10      	cmp	r3, #16
   85a28:	d003      	beq.n	85a32 <SystemCoreClockUpdate+0x76>
   85a2a:	2b20      	cmp	r3, #32
   85a2c:	d007      	beq.n	85a3e <SystemCoreClockUpdate+0x82>
   85a2e:	2b00      	cmp	r3, #0
				break;
   85a30:	e00d      	b.n	85a4e <SystemCoreClockUpdate+0x92>
				SystemCoreClock *= 2U;
   85a32:	4b3b      	ldr	r3, [pc, #236]	; (85b20 <SystemCoreClockUpdate+0x164>)
   85a34:	681b      	ldr	r3, [r3, #0]
   85a36:	005b      	lsls	r3, r3, #1
   85a38:	4a39      	ldr	r2, [pc, #228]	; (85b20 <SystemCoreClockUpdate+0x164>)
   85a3a:	6013      	str	r3, [r2, #0]
				break;
   85a3c:	e007      	b.n	85a4e <SystemCoreClockUpdate+0x92>
				SystemCoreClock *= 3U;
   85a3e:	4b38      	ldr	r3, [pc, #224]	; (85b20 <SystemCoreClockUpdate+0x164>)
   85a40:	681a      	ldr	r2, [r3, #0]
   85a42:	4613      	mov	r3, r2
   85a44:	005b      	lsls	r3, r3, #1
   85a46:	4413      	add	r3, r2
   85a48:	4a35      	ldr	r2, [pc, #212]	; (85b20 <SystemCoreClockUpdate+0x164>)
   85a4a:	6013      	str	r3, [r2, #0]
				break;
   85a4c:	bf00      	nop
		break;
   85a4e:	e044      	b.n	85ada <SystemCoreClockUpdate+0x11e>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   85a50:	4b31      	ldr	r3, [pc, #196]	; (85b18 <SystemCoreClockUpdate+0x15c>)
   85a52:	6a1b      	ldr	r3, [r3, #32]
   85a54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   85a58:	2b00      	cmp	r3, #0
   85a5a:	d003      	beq.n	85a64 <SystemCoreClockUpdate+0xa8>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   85a5c:	4b30      	ldr	r3, [pc, #192]	; (85b20 <SystemCoreClockUpdate+0x164>)
   85a5e:	4a31      	ldr	r2, [pc, #196]	; (85b24 <SystemCoreClockUpdate+0x168>)
   85a60:	601a      	str	r2, [r3, #0]
   85a62:	e01a      	b.n	85a9a <SystemCoreClockUpdate+0xde>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   85a64:	4b2e      	ldr	r3, [pc, #184]	; (85b20 <SystemCoreClockUpdate+0x164>)
   85a66:	4a30      	ldr	r2, [pc, #192]	; (85b28 <SystemCoreClockUpdate+0x16c>)
   85a68:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   85a6a:	4b2b      	ldr	r3, [pc, #172]	; (85b18 <SystemCoreClockUpdate+0x15c>)
   85a6c:	6a1b      	ldr	r3, [r3, #32]
   85a6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   85a72:	2b10      	cmp	r3, #16
   85a74:	d003      	beq.n	85a7e <SystemCoreClockUpdate+0xc2>
   85a76:	2b20      	cmp	r3, #32
   85a78:	d007      	beq.n	85a8a <SystemCoreClockUpdate+0xce>
   85a7a:	2b00      	cmp	r3, #0
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   85a7c:	e00d      	b.n	85a9a <SystemCoreClockUpdate+0xde>
				SystemCoreClock *= 2U;
   85a7e:	4b28      	ldr	r3, [pc, #160]	; (85b20 <SystemCoreClockUpdate+0x164>)
   85a80:	681b      	ldr	r3, [r3, #0]
   85a82:	005b      	lsls	r3, r3, #1
   85a84:	4a26      	ldr	r2, [pc, #152]	; (85b20 <SystemCoreClockUpdate+0x164>)
   85a86:	6013      	str	r3, [r2, #0]
				break;
   85a88:	e007      	b.n	85a9a <SystemCoreClockUpdate+0xde>
				SystemCoreClock *= 3U;
   85a8a:	4b25      	ldr	r3, [pc, #148]	; (85b20 <SystemCoreClockUpdate+0x164>)
   85a8c:	681a      	ldr	r2, [r3, #0]
   85a8e:	4613      	mov	r3, r2
   85a90:	005b      	lsls	r3, r3, #1
   85a92:	4413      	add	r3, r2
   85a94:	4a22      	ldr	r2, [pc, #136]	; (85b20 <SystemCoreClockUpdate+0x164>)
   85a96:	6013      	str	r3, [r2, #0]
				break;
   85a98:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   85a9a:	4b1f      	ldr	r3, [pc, #124]	; (85b18 <SystemCoreClockUpdate+0x15c>)
   85a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85a9e:	f003 0303 	and.w	r3, r3, #3
   85aa2:	2b02      	cmp	r3, #2
   85aa4:	d115      	bne.n	85ad2 <SystemCoreClockUpdate+0x116>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   85aa6:	4b1c      	ldr	r3, [pc, #112]	; (85b18 <SystemCoreClockUpdate+0x15c>)
   85aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   85aaa:	0c1b      	lsrs	r3, r3, #16
   85aac:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                          CKGR_PLLAR_MULA_Pos) + 1U);
   85ab0:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   85ab2:	4a1b      	ldr	r2, [pc, #108]	; (85b20 <SystemCoreClockUpdate+0x164>)
   85ab4:	6812      	ldr	r2, [r2, #0]
   85ab6:	fb02 f303 	mul.w	r3, r2, r3
   85aba:	4a19      	ldr	r2, [pc, #100]	; (85b20 <SystemCoreClockUpdate+0x164>)
   85abc:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   85abe:	4b16      	ldr	r3, [pc, #88]	; (85b18 <SystemCoreClockUpdate+0x15c>)
   85ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   85ac2:	b2db      	uxtb	r3, r3
   85ac4:	4a16      	ldr	r2, [pc, #88]	; (85b20 <SystemCoreClockUpdate+0x164>)
   85ac6:	6812      	ldr	r2, [r2, #0]
   85ac8:	fbb2 f3f3 	udiv	r3, r2, r3
   85acc:	4a14      	ldr	r2, [pc, #80]	; (85b20 <SystemCoreClockUpdate+0x164>)
   85ace:	6013      	str	r3, [r2, #0]
				                           CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   85ad0:	e002      	b.n	85ad8 <SystemCoreClockUpdate+0x11c>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   85ad2:	4b13      	ldr	r3, [pc, #76]	; (85b20 <SystemCoreClockUpdate+0x164>)
   85ad4:	4a15      	ldr	r2, [pc, #84]	; (85b2c <SystemCoreClockUpdate+0x170>)
   85ad6:	601a      	str	r2, [r3, #0]
		break;
   85ad8:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   85ada:	4b0f      	ldr	r3, [pc, #60]	; (85b18 <SystemCoreClockUpdate+0x15c>)
   85adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85ade:	f003 0370 	and.w	r3, r3, #112	; 0x70
   85ae2:	2b70      	cmp	r3, #112	; 0x70
   85ae4:	d108      	bne.n	85af8 <SystemCoreClockUpdate+0x13c>
		SystemCoreClock /= 3U;
   85ae6:	4b0e      	ldr	r3, [pc, #56]	; (85b20 <SystemCoreClockUpdate+0x164>)
   85ae8:	681b      	ldr	r3, [r3, #0]
   85aea:	4a11      	ldr	r2, [pc, #68]	; (85b30 <SystemCoreClockUpdate+0x174>)
   85aec:	fba2 2303 	umull	r2, r3, r2, r3
   85af0:	085b      	lsrs	r3, r3, #1
   85af2:	4a0b      	ldr	r2, [pc, #44]	; (85b20 <SystemCoreClockUpdate+0x164>)
   85af4:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                           PMC_MCKR_PRES_Pos);
	}
}
   85af6:	e00a      	b.n	85b0e <SystemCoreClockUpdate+0x152>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   85af8:	4b07      	ldr	r3, [pc, #28]	; (85b18 <SystemCoreClockUpdate+0x15c>)
   85afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85afc:	091b      	lsrs	r3, r3, #4
   85afe:	f003 0307 	and.w	r3, r3, #7
   85b02:	4a07      	ldr	r2, [pc, #28]	; (85b20 <SystemCoreClockUpdate+0x164>)
   85b04:	6812      	ldr	r2, [r2, #0]
   85b06:	fa22 f303 	lsr.w	r3, r2, r3
   85b0a:	4a05      	ldr	r2, [pc, #20]	; (85b20 <SystemCoreClockUpdate+0x164>)
   85b0c:	6013      	str	r3, [r2, #0]
}
   85b0e:	bf00      	nop
   85b10:	46bd      	mov	sp, r7
   85b12:	bc80      	pop	{r7}
   85b14:	4770      	bx	lr
   85b16:	bf00      	nop
   85b18:	400e0400 	.word	0x400e0400
   85b1c:	400e1210 	.word	0x400e1210
   85b20:	200003a8 	.word	0x200003a8
   85b24:	00b71b00 	.word	0x00b71b00
   85b28:	003d0900 	.word	0x003d0900
   85b2c:	0e4e1c00 	.word	0x0e4e1c00
   85b30:	aaaaaaab 	.word	0xaaaaaaab

00085b34 <__libc_init_array>:
   85b34:	b570      	push	{r4, r5, r6, lr}
   85b36:	4e0d      	ldr	r6, [pc, #52]	; (85b6c <__libc_init_array+0x38>)
   85b38:	4d0d      	ldr	r5, [pc, #52]	; (85b70 <__libc_init_array+0x3c>)
   85b3a:	1b76      	subs	r6, r6, r5
   85b3c:	10b6      	asrs	r6, r6, #2
   85b3e:	d006      	beq.n	85b4e <__libc_init_array+0x1a>
   85b40:	2400      	movs	r4, #0
   85b42:	3401      	adds	r4, #1
   85b44:	f855 3b04 	ldr.w	r3, [r5], #4
   85b48:	4798      	blx	r3
   85b4a:	42a6      	cmp	r6, r4
   85b4c:	d1f9      	bne.n	85b42 <__libc_init_array+0xe>
   85b4e:	4e09      	ldr	r6, [pc, #36]	; (85b74 <__libc_init_array+0x40>)
   85b50:	4d09      	ldr	r5, [pc, #36]	; (85b78 <__libc_init_array+0x44>)
   85b52:	f000 f8a1 	bl	85c98 <_init>
   85b56:	1b76      	subs	r6, r6, r5
   85b58:	10b6      	asrs	r6, r6, #2
   85b5a:	d006      	beq.n	85b6a <__libc_init_array+0x36>
   85b5c:	2400      	movs	r4, #0
   85b5e:	3401      	adds	r4, #1
   85b60:	f855 3b04 	ldr.w	r3, [r5], #4
   85b64:	4798      	blx	r3
   85b66:	42a6      	cmp	r6, r4
   85b68:	d1f9      	bne.n	85b5e <__libc_init_array+0x2a>
   85b6a:	bd70      	pop	{r4, r5, r6, pc}
   85b6c:	00085ca4 	.word	0x00085ca4
   85b70:	00085ca4 	.word	0x00085ca4
   85b74:	00085cac 	.word	0x00085cac
   85b78:	00085ca4 	.word	0x00085ca4

00085b7c <register_fini>:
   85b7c:	4b02      	ldr	r3, [pc, #8]	; (85b88 <register_fini+0xc>)
   85b7e:	b113      	cbz	r3, 85b86 <register_fini+0xa>
   85b80:	4802      	ldr	r0, [pc, #8]	; (85b8c <register_fini+0x10>)
   85b82:	f000 b805 	b.w	85b90 <atexit>
   85b86:	4770      	bx	lr
   85b88:	00000000 	.word	0x00000000
   85b8c:	00085b9d 	.word	0x00085b9d

00085b90 <atexit>:
   85b90:	2300      	movs	r3, #0
   85b92:	4601      	mov	r1, r0
   85b94:	461a      	mov	r2, r3
   85b96:	4618      	mov	r0, r3
   85b98:	f000 b81e 	b.w	85bd8 <__register_exitproc>

00085b9c <__libc_fini_array>:
   85b9c:	b538      	push	{r3, r4, r5, lr}
   85b9e:	4c0a      	ldr	r4, [pc, #40]	; (85bc8 <__libc_fini_array+0x2c>)
   85ba0:	4d0a      	ldr	r5, [pc, #40]	; (85bcc <__libc_fini_array+0x30>)
   85ba2:	1b64      	subs	r4, r4, r5
   85ba4:	10a4      	asrs	r4, r4, #2
   85ba6:	d00a      	beq.n	85bbe <__libc_fini_array+0x22>
   85ba8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   85bac:	3b01      	subs	r3, #1
   85bae:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   85bb2:	3c01      	subs	r4, #1
   85bb4:	f855 3904 	ldr.w	r3, [r5], #-4
   85bb8:	4798      	blx	r3
   85bba:	2c00      	cmp	r4, #0
   85bbc:	d1f9      	bne.n	85bb2 <__libc_fini_array+0x16>
   85bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   85bc2:	f000 b873 	b.w	85cac <_fini>
   85bc6:	bf00      	nop
   85bc8:	00085cbc 	.word	0x00085cbc
   85bcc:	00085cb8 	.word	0x00085cb8

00085bd0 <__retarget_lock_acquire_recursive>:
   85bd0:	4770      	bx	lr
   85bd2:	bf00      	nop

00085bd4 <__retarget_lock_release_recursive>:
   85bd4:	4770      	bx	lr
   85bd6:	bf00      	nop

00085bd8 <__register_exitproc>:
   85bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85bdc:	4c1d      	ldr	r4, [pc, #116]	; (85c54 <__register_exitproc+0x7c>)
   85bde:	4605      	mov	r5, r0
   85be0:	6820      	ldr	r0, [r4, #0]
   85be2:	4690      	mov	r8, r2
   85be4:	461f      	mov	r7, r3
   85be6:	460e      	mov	r6, r1
   85be8:	f7ff fff2 	bl	85bd0 <__retarget_lock_acquire_recursive>
   85bec:	4b1a      	ldr	r3, [pc, #104]	; (85c58 <__register_exitproc+0x80>)
   85bee:	681a      	ldr	r2, [r3, #0]
   85bf0:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
   85bf4:	b31b      	cbz	r3, 85c3e <__register_exitproc+0x66>
   85bf6:	685a      	ldr	r2, [r3, #4]
   85bf8:	6820      	ldr	r0, [r4, #0]
   85bfa:	2a1f      	cmp	r2, #31
   85bfc:	dc24      	bgt.n	85c48 <__register_exitproc+0x70>
   85bfe:	b94d      	cbnz	r5, 85c14 <__register_exitproc+0x3c>
   85c00:	1c51      	adds	r1, r2, #1
   85c02:	3202      	adds	r2, #2
   85c04:	6059      	str	r1, [r3, #4]
   85c06:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   85c0a:	f7ff ffe3 	bl	85bd4 <__retarget_lock_release_recursive>
   85c0e:	2000      	movs	r0, #0
   85c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85c14:	2401      	movs	r4, #1
   85c16:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   85c1a:	f8cc 8088 	str.w	r8, [ip, #136]	; 0x88
   85c1e:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
   85c22:	4094      	lsls	r4, r2
   85c24:	4321      	orrs	r1, r4
   85c26:	2d02      	cmp	r5, #2
   85c28:	f8c3 1188 	str.w	r1, [r3, #392]	; 0x188
   85c2c:	f8cc 7108 	str.w	r7, [ip, #264]	; 0x108
   85c30:	d1e6      	bne.n	85c00 <__register_exitproc+0x28>
   85c32:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
   85c36:	430c      	orrs	r4, r1
   85c38:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
   85c3c:	e7e0      	b.n	85c00 <__register_exitproc+0x28>
   85c3e:	f502 73a6 	add.w	r3, r2, #332	; 0x14c
   85c42:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
   85c46:	e7d6      	b.n	85bf6 <__register_exitproc+0x1e>
   85c48:	f7ff ffc4 	bl	85bd4 <__retarget_lock_release_recursive>
   85c4c:	f04f 30ff 	mov.w	r0, #4294967295
   85c50:	e7de      	b.n	85c10 <__register_exitproc+0x38>
   85c52:	bf00      	nop
   85c54:	200007d8 	.word	0x200007d8
   85c58:	00085c94 	.word	0x00085c94
   85c5c:	00000000 	.word	0x00000000
   85c60:	00000000 	.word	0x00000000
   85c64:	aaaaaa00 	.word	0xaaaaaa00
   85c68:	aaaaaaaa 	.word	0xaaaaaaaa
   85c6c:	eeeeeeaa 	.word	0xeeeeeeaa
   85c70:	eeeeeeee 	.word	0xeeeeeeee
   85c74:	fffffeee 	.word	0xfffffeee
   85c78:	ffffffff 	.word	0xffffffff
   85c7c:	ffffffff 	.word	0xffffffff
   85c80:	dfbf7fff 	.word	0xdfbf7fff
   85c84:	fdfbf7ef 	.word	0xfdfbf7ef
   85c88:	dfbf7efc 	.word	0xdfbf7efc
   85c8c:	fdfbf7ef 	.word	0xfdfbf7ef
   85c90:	0000007e 	.word	0x0000007e

00085c94 <_global_impure_ptr>:
   85c94:	200003b0                                ... 

00085c98 <_init>:
   85c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85c9a:	bf00      	nop
   85c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85c9e:	bc08      	pop	{r3}
   85ca0:	469e      	mov	lr, r3
   85ca2:	4770      	bx	lr

00085ca4 <__init_array_start>:
   85ca4:	00085b7d 	.word	0x00085b7d

00085ca8 <__frame_dummy_init_array_entry>:
   85ca8:	000800e1                                ....

00085cac <_fini>:
   85cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85cae:	bf00      	nop
   85cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85cb2:	bc08      	pop	{r3}
   85cb4:	469e      	mov	lr, r3
   85cb6:	4770      	bx	lr

00085cb8 <__fini_array_start>:
   85cb8:	000800bd 	.word	0x000800bd

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b480      	push	{r7}
20000002:	b089      	sub	sp, #36	; 0x24
20000004:	af00      	add	r7, sp, #0
20000006:	60f8      	str	r0, [r7, #12]
20000008:	60b9      	str	r1, [r7, #8]
2000000a:	607a      	str	r2, [r7, #4]
2000000c:	603b      	str	r3, [r7, #0]
#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000000e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20000012:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000014:	683b      	ldr	r3, [r7, #0]
20000016:	2b00      	cmp	r3, #0
20000018:	d101      	bne.n	2000001e <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
2000001a:	2302      	movs	r3, #2
2000001c:	e03c      	b.n	20000098 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000001e:	68fb      	ldr	r3, [r7, #12]
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000026:	68fb      	ldr	r3, [r7, #12]
20000028:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000002a:	68bb      	ldr	r3, [r7, #8]
2000002c:	b2db      	uxtb	r3, r3
2000002e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000032:	68fb      	ldr	r3, [r7, #12]
20000034:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000036:	68fb      	ldr	r3, [r7, #12]
20000038:	689b      	ldr	r3, [r3, #8]
2000003a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000003c:	697b      	ldr	r3, [r7, #20]
2000003e:	f003 0301 	and.w	r3, r3, #1
20000042:	2b01      	cmp	r3, #1
20000044:	d0f7      	beq.n	20000036 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000046:	2300      	movs	r3, #0
20000048:	61fb      	str	r3, [r7, #28]
2000004a:	e00c      	b.n	20000066 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000004c:	69fb      	ldr	r3, [r7, #28]
2000004e:	009b      	lsls	r3, r3, #2
20000050:	69ba      	ldr	r2, [r7, #24]
20000052:	441a      	add	r2, r3
20000054:	69fb      	ldr	r3, [r7, #28]
20000056:	009b      	lsls	r3, r3, #2
20000058:	6839      	ldr	r1, [r7, #0]
2000005a:	440b      	add	r3, r1
2000005c:	6812      	ldr	r2, [r2, #0]
2000005e:	601a      	str	r2, [r3, #0]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000060:	69fb      	ldr	r3, [r7, #28]
20000062:	3301      	adds	r3, #1
20000064:	61fb      	str	r3, [r7, #28]
20000066:	69fa      	ldr	r2, [r7, #28]
20000068:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000006a:	429a      	cmp	r2, r3
2000006c:	d3ee      	bcc.n	2000004c <efc_perform_read_sequence+0x4c>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	b2db      	uxtb	r3, r3
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000072:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000007a:	68fb      	ldr	r3, [r7, #12]
2000007c:	689b      	ldr	r3, [r3, #8]
2000007e:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	697b      	ldr	r3, [r7, #20]
20000082:	f003 0301 	and.w	r3, r3, #1
20000086:	2b01      	cmp	r3, #1
20000088:	d1f7      	bne.n	2000007a <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	681b      	ldr	r3, [r3, #0]
2000008e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
20000096:	2300      	movs	r3, #0
}
20000098:	4618      	mov	r0, r3
2000009a:	3724      	adds	r7, #36	; 0x24
2000009c:	46bd      	mov	sp, r7
2000009e:	bc80      	pop	{r7}
200000a0:	4770      	bx	lr

200000a2 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000a2:	b480      	push	{r7}
200000a4:	b083      	sub	sp, #12
200000a6:	af00      	add	r7, sp, #0
200000a8:	6078      	str	r0, [r7, #4]
200000aa:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	683a      	ldr	r2, [r7, #0]
200000b0:	601a      	str	r2, [r3, #0]
}
200000b2:	bf00      	nop
200000b4:	370c      	adds	r7, #12
200000b6:	46bd      	mov	sp, r7
200000b8:	bc80      	pop	{r7}
200000ba:	4770      	bx	lr

200000bc <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000bc:	b480      	push	{r7}
200000be:	b085      	sub	sp, #20
200000c0:	af00      	add	r7, sp, #0
200000c2:	6078      	str	r0, [r7, #4]
200000c4:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000c6:	687b      	ldr	r3, [r7, #4]
200000c8:	683a      	ldr	r2, [r7, #0]
200000ca:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	689b      	ldr	r3, [r3, #8]
200000d0:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000d2:	68fb      	ldr	r3, [r7, #12]
200000d4:	f003 0301 	and.w	r3, r3, #1
200000d8:	2b01      	cmp	r3, #1
200000da:	d1f7      	bne.n	200000cc <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000dc:	68fb      	ldr	r3, [r7, #12]
200000de:	f003 0306 	and.w	r3, r3, #6
}
200000e2:	4618      	mov	r0, r3
200000e4:	3714      	adds	r7, #20
200000e6:	46bd      	mov	sp, r7
200000e8:	bc80      	pop	{r7}
200000ea:	4770      	bx	lr

200000ec <SystemInit>:
{
200000ec:	b480      	push	{r7}
200000ee:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000f0:	4b2a      	ldr	r3, [pc, #168]	; (2000019c <SystemInit+0xb0>)
200000f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000f6:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000f8:	4b29      	ldr	r3, [pc, #164]	; (200001a0 <SystemInit+0xb4>)
200000fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000fe:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000100:	4b28      	ldr	r3, [pc, #160]	; (200001a4 <SystemInit+0xb8>)
20000102:	6a1b      	ldr	r3, [r3, #32]
20000104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20000108:	2b00      	cmp	r3, #0
2000010a:	d109      	bne.n	20000120 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000010c:	4b25      	ldr	r3, [pc, #148]	; (200001a4 <SystemInit+0xb8>)
2000010e:	4a26      	ldr	r2, [pc, #152]	; (200001a8 <SystemInit+0xbc>)
20000110:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000112:	bf00      	nop
20000114:	4b23      	ldr	r3, [pc, #140]	; (200001a4 <SystemInit+0xb8>)
20000116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000118:	f003 0301 	and.w	r3, r3, #1
2000011c:	2b00      	cmp	r3, #0
2000011e:	d0f9      	beq.n	20000114 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000120:	4b20      	ldr	r3, [pc, #128]	; (200001a4 <SystemInit+0xb8>)
20000122:	4a22      	ldr	r2, [pc, #136]	; (200001ac <SystemInit+0xc0>)
20000124:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000126:	bf00      	nop
20000128:	4b1e      	ldr	r3, [pc, #120]	; (200001a4 <SystemInit+0xb8>)
2000012a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000012c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000130:	2b00      	cmp	r3, #0
20000132:	d0f9      	beq.n	20000128 <SystemInit+0x3c>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000134:	4b1b      	ldr	r3, [pc, #108]	; (200001a4 <SystemInit+0xb8>)
20000136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000138:	f023 0303 	bic.w	r3, r3, #3
2000013c:	4a19      	ldr	r2, [pc, #100]	; (200001a4 <SystemInit+0xb8>)
2000013e:	f043 0301 	orr.w	r3, r3, #1
20000142:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000144:	bf00      	nop
20000146:	4b17      	ldr	r3, [pc, #92]	; (200001a4 <SystemInit+0xb8>)
20000148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000014a:	f003 0308 	and.w	r3, r3, #8
2000014e:	2b00      	cmp	r3, #0
20000150:	d0f9      	beq.n	20000146 <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000152:	4b14      	ldr	r3, [pc, #80]	; (200001a4 <SystemInit+0xb8>)
20000154:	4a16      	ldr	r2, [pc, #88]	; (200001b0 <SystemInit+0xc4>)
20000156:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000158:	bf00      	nop
2000015a:	4b12      	ldr	r3, [pc, #72]	; (200001a4 <SystemInit+0xb8>)
2000015c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000015e:	f003 0302 	and.w	r3, r3, #2
20000162:	2b00      	cmp	r3, #0
20000164:	d0f9      	beq.n	2000015a <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000166:	4b0f      	ldr	r3, [pc, #60]	; (200001a4 <SystemInit+0xb8>)
20000168:	2211      	movs	r2, #17
2000016a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000016c:	bf00      	nop
2000016e:	4b0d      	ldr	r3, [pc, #52]	; (200001a4 <SystemInit+0xb8>)
20000170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000172:	f003 0308 	and.w	r3, r3, #8
20000176:	2b00      	cmp	r3, #0
20000178:	d0f9      	beq.n	2000016e <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000017a:	4b0a      	ldr	r3, [pc, #40]	; (200001a4 <SystemInit+0xb8>)
2000017c:	2212      	movs	r2, #18
2000017e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000180:	bf00      	nop
20000182:	4b08      	ldr	r3, [pc, #32]	; (200001a4 <SystemInit+0xb8>)
20000184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000186:	f003 0308 	and.w	r3, r3, #8
2000018a:	2b00      	cmp	r3, #0
2000018c:	d0f9      	beq.n	20000182 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2000018e:	4b09      	ldr	r3, [pc, #36]	; (200001b4 <SystemInit+0xc8>)
20000190:	4a09      	ldr	r2, [pc, #36]	; (200001b8 <SystemInit+0xcc>)
20000192:	601a      	str	r2, [r3, #0]
}
20000194:	bf00      	nop
20000196:	46bd      	mov	sp, r7
20000198:	bc80      	pop	{r7}
2000019a:	4770      	bx	lr
2000019c:	400e0800 	.word	0x400e0800
200001a0:	400e0a00 	.word	0x400e0a00
200001a4:	400e0400 	.word	0x400e0400
200001a8:	00370809 	.word	0x00370809
200001ac:	01370809 	.word	0x01370809
200001b0:	200f3f01 	.word	0x200f3f01
200001b4:	200003a8 	.word	0x200003a8
200001b8:	05b8d800 	.word	0x05b8d800

200001bc <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200001bc:	b480      	push	{r7}
200001be:	b083      	sub	sp, #12
200001c0:	af00      	add	r7, sp, #0
200001c2:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200001c4:	687b      	ldr	r3, [r7, #4]
200001c6:	4a1f      	ldr	r2, [pc, #124]	; (20000244 <system_init_flash+0x88>)
200001c8:	4293      	cmp	r3, r2
200001ca:	d806      	bhi.n	200001da <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200001cc:	4b1e      	ldr	r3, [pc, #120]	; (20000248 <system_init_flash+0x8c>)
200001ce:	2200      	movs	r2, #0
200001d0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200001d2:	4b1e      	ldr	r3, [pc, #120]	; (2000024c <system_init_flash+0x90>)
200001d4:	2200      	movs	r2, #0
200001d6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
	}
}
200001d8:	e02e      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200001da:	687b      	ldr	r3, [r7, #4]
200001dc:	4a1c      	ldr	r2, [pc, #112]	; (20000250 <system_init_flash+0x94>)
200001de:	4293      	cmp	r3, r2
200001e0:	d808      	bhi.n	200001f4 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200001e2:	4b19      	ldr	r3, [pc, #100]	; (20000248 <system_init_flash+0x8c>)
200001e4:	f44f 7280 	mov.w	r2, #256	; 0x100
200001e8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200001ea:	4b18      	ldr	r3, [pc, #96]	; (2000024c <system_init_flash+0x90>)
200001ec:	f44f 7280 	mov.w	r2, #256	; 0x100
200001f0:	601a      	str	r2, [r3, #0]
}
200001f2:	e021      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200001f4:	687b      	ldr	r3, [r7, #4]
200001f6:	4a17      	ldr	r2, [pc, #92]	; (20000254 <system_init_flash+0x98>)
200001f8:	4293      	cmp	r3, r2
200001fa:	d808      	bhi.n	2000020e <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200001fc:	4b12      	ldr	r3, [pc, #72]	; (20000248 <system_init_flash+0x8c>)
200001fe:	f44f 7200 	mov.w	r2, #512	; 0x200
20000202:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000204:	4b11      	ldr	r3, [pc, #68]	; (2000024c <system_init_flash+0x90>)
20000206:	f44f 7200 	mov.w	r2, #512	; 0x200
2000020a:	601a      	str	r2, [r3, #0]
}
2000020c:	e014      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000020e:	687b      	ldr	r3, [r7, #4]
20000210:	4a11      	ldr	r2, [pc, #68]	; (20000258 <system_init_flash+0x9c>)
20000212:	4293      	cmp	r3, r2
20000214:	d808      	bhi.n	20000228 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000216:	4b0c      	ldr	r3, [pc, #48]	; (20000248 <system_init_flash+0x8c>)
20000218:	f44f 7240 	mov.w	r2, #768	; 0x300
2000021c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <system_init_flash+0x90>)
20000220:	f44f 7240 	mov.w	r2, #768	; 0x300
20000224:	601a      	str	r2, [r3, #0]
}
20000226:	e007      	b.n	20000238 <system_init_flash+0x7c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000228:	4b07      	ldr	r3, [pc, #28]	; (20000248 <system_init_flash+0x8c>)
2000022a:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000022e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000230:	4b06      	ldr	r3, [pc, #24]	; (2000024c <system_init_flash+0x90>)
20000232:	f44f 6280 	mov.w	r2, #1024	; 0x400
20000236:	601a      	str	r2, [r3, #0]
}
20000238:	bf00      	nop
2000023a:	370c      	adds	r7, #12
2000023c:	46bd      	mov	sp, r7
2000023e:	bc80      	pop	{r7}
20000240:	4770      	bx	lr
20000242:	bf00      	nop
20000244:	016e35ff 	.word	0x016e35ff
20000248:	400e0800 	.word	0x400e0800
2000024c:	400e0a00 	.word	0x400e0a00
20000250:	026259ff 	.word	0x026259ff
20000254:	044aa1ff 	.word	0x044aa1ff
20000258:	0501bcff 	.word	0x0501bcff

2000025c <usb_serial_number>:
2000025c:	30303030 30303030 30303030 44414544     000000000000DEAD
2000026c:	46454542 00000000 00000000 00000000     BEEF............
2000027c:	00000000                                ....

20000280 <pwr_list>:
20000280:	000808ad 000808cd 000808ed              ............

2000028c <main_b_vendor_enable>:
2000028c:	00000001                                ....

20000290 <xram>:
20000290:	60000000                                ...`

20000294 <udi_api_vendor>:
20000294:	00083fd1 00084011 0008402d 00084081     .?...@..-@...@..
200002a4:	00000000                                ....

200002a8 <udc_string_desc_languageid>:
200002a8:	04090304                                ....

200002ac <udc_string_manufacturer_name>:
200002ac:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
200002bc:	636e4920 0000002e                        Inc....

200002c4 <udc_string_product_name>:
200002c4:	57796850 70736968 72657265 4253552d     PhyWhisperer-USB
200002d4:	00000000                                ....

200002d8 <udc_string_desc>:
200002d8:	00000300 00000000 00000000 00000000     ................
200002e8:	00000000 00000000 00000000 00000000     ................
200002f8:	00000000 00000000 00000000 00000000     ................
20000308:	00000000 00000000 00000000 00000000     ................
20000318:	                                         ..

2000031a <g_interrupt_enabled>:
2000031a:	                                         ..

2000031c <udc_device_desc>:
2000031c:	02000112 40000000 c6012b3e 02010100     .......@>+......
2000032c:	00000103                                ....

20000330 <udc_device_qual>:
20000330:	0200060a 40000000 00000001              .......@....

2000033c <udc_desc_fs>:
2000033c:	00200209 80000101 000409fa ffff0200     .. .............
2000034c:	050700ff 00400281 02050700 00004002     ......@......@..

2000035c <udc_desc_hs>:
2000035c:	00200209 80000101 000409fa ffff0200     .. .............
2000036c:	050700ff 02000281 02050700 00020002     ................

2000037c <udi_apis>:
2000037c:	20000294                                ... 

20000380 <udc_config_lsfs>:
20000380:	2000033c 2000037c                       <.. |.. 

20000388 <udc_config_hs>:
20000388:	2000035c 2000037c                       \.. |.. 

20000390 <udc_config>:
20000390:	2000031c 20000380 2000031c 20000330     ... ... ... 0.. 
200003a0:	20000388 00000000                       ... ....

200003a8 <SystemCoreClock>:
200003a8:	003d0900 00000000                       ..=.....

200003b0 <impure_data>:
200003b0:	00000000 2000069c 20000704 2000076c     ....... ... l.. 
200003c0:	00000000 00000000 00000000 00000000     ................
200003d0:	00000000 00000000 00000000 00000000     ................
200003e0:	00000000 00000000 00000000 00000000     ................
200003f0:	00000000 00000000 00000000 00000000     ................
20000400:	00000000 00000000 00000000 00000000     ................
20000410:	00000000 00000000 00000000 00000000     ................
20000420:	00000000 00000000 00000000 00000000     ................
20000430:	00000000 00000000 00000000 00000000     ................
20000440:	00000000 00000000 00000000 00000000     ................
20000450:	00000000 00000000 00000001 00000000     ................
20000460:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
20000470:	00000000 00000000 00000000 00000000     ................
20000480:	00000000 00000000 00000000 00000000     ................
20000490:	00000000 00000000 00000000 00000000     ................
200004a0:	00000000 00000000 00000000 00000000     ................
200004b0:	00000000 00000000 00000000 00000000     ................
200004c0:	00000000 00000000 00000000 00000000     ................
200004d0:	00000000 00000000 00000000 00000000     ................
200004e0:	00000000 00000000 00000000 00000000     ................
200004f0:	00000000 00000000 00000000 00000000     ................
20000500:	00000000 00000000 00000000 00000000     ................
20000510:	00000000 00000000 00000000 00000000     ................
20000520:	00000000 00000000 00000000 00000000     ................
20000530:	00000000 00000000 00000000 00000000     ................
20000540:	00000000 00000000 00000000 00000000     ................
20000550:	00000000 00000000 00000000 00000000     ................
20000560:	00000000 00000000 00000000 00000000     ................
20000570:	00000000 00000000 00000000 00000000     ................
20000580:	00000000 00000000 00000000 00000000     ................
20000590:	00000000 00000000 00000000 00000000     ................
200005a0:	00000000 00000000 00000000 00000000     ................
200005b0:	00000000 00000000 00000000 00000000     ................
200005c0:	00000000 00000000 00000000 00000000     ................
200005d0:	00000000 00000000 00000000 00000000     ................
200005e0:	00000000 00000000 00000000 00000000     ................
200005f0:	00000000 00000000 00000000 00000000     ................
20000600:	00000000 00000000 00000000 00000000     ................
20000610:	00000000 00000000 00000000 00000000     ................
20000620:	00000000 00000000 00000000 00000000     ................
20000630:	00000000 00000000 00000000 00000000     ................
20000640:	00000000 00000000 00000000 00000000     ................
20000650:	00000000 00000000 00000000 00000000     ................
20000660:	00000000 00000000 00000000 00000000     ................
20000670:	00000000 00000000 00000000 00000000     ................
20000680:	00000000 00000000 00000000 00000000     ................
20000690:	00000000 00000000 00000000 00000000     ................
200006a0:	00000000 00000000 00000000 00000000     ................
200006b0:	00000000 00000000 00000000 00000000     ................
200006c0:	00000000 00000000 00000000 00000000     ................
200006d0:	00000000 00000000 00000000 00000000     ................
200006e0:	00000000 00000000 00000000 00000000     ................
200006f0:	00000000 00000000 00000000 00000000     ................
20000700:	00000000 00000000 00000000 00000000     ................
20000710:	00000000 00000000 00000000 00000000     ................
20000720:	00000000 00000000 00000000 00000000     ................
20000730:	00000000 00000000 00000000 00000000     ................
20000740:	00000000 00000000 00000000 00000000     ................
20000750:	00000000 00000000 00000000 00000000     ................
20000760:	00000000 00000000 00000000 00000000     ................
20000770:	00000000 00000000 00000000 00000000     ................
20000780:	00000000 00000000 00000000 00000000     ................
20000790:	00000000 00000000 00000000 00000000     ................
200007a0:	00000000 00000000 00000000 00000000     ................
200007b0:	00000000 00000000 00000000 00000000     ................
200007c0:	00000000 00000000 00000000 00000000     ................
200007d0:	00000000 00000000                       ........

200007d8 <__atexit_recursive_mutex>:
200007d8:	20000d78                                x.. 
